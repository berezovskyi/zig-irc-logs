1572567467
daurnimator
andrewrk: want me to make an application?

1572567498
daurnimator
and if so, do you want to be the primary contact? or should I put myself?

1572568785
pixelherodev
daurnimator, I

1572568787
pixelherodev
If you've got one, let me know :P

1572568841
pixelherodev
andrewrk, there

1572569759
saskwach
Just use HCF.

1572569772
saskwach
That exists on most platforms, right?

1572570045
saskwach
andrewrk, I looked at sieve2, and it's pretty different from mine. Aside from the fact that I used tricks like only filling up to the square root of the sieve's size, mine's more OO-ish, and I made an iterator.

1572570104
saskwach
Oh, and I special cased 2 and packed my array with only odd numbers.

1572570244
saskwach
I feel like those 4 lines of setup for getting a buffered stdout stream ought to be wrapped in a single standard library call.

1572570355
saskwach
Oh wow, I misread sieve2. That's very very different. That's not even the sieve of eratosthenes.

1572570866
saskwach
For an example of something that will actually demonstrate concurrency well, a simple socket server might do. Each connection needs its own context, but individual threads spend most of their time waiting. If you're looking for a parallel compute load, something like a bitcoin miner (though obviously not a real one) that breaks a search space up into N chunks and has each parallel process just chug through might be a good way to go.

1572570899
saskwach
See also: password crackers.

1572571038
daurnimator
pixelherodev: even just "My experience with programming languages and why I've started writing a hobby kernel in zig"

1572571056
daurnimator
pixelherodev: something that at least gives a clue when e.g. submitted to hackernews

1572571319
saskwach
error: expected type '*Sieve', found '*Sieve'

1572571561
pixelherodev
How about "Why Zig is the greatest of all time, awed are all in the presence of its majesty?"

1572571565
pixelherodev
:P

1572572008
saskwach
Definitely a credible title. Not clickbaity or likely to lead to flames at all.

1572572632
pixelherodev
... that's not convincing me

1572577386
andrewrk
daurnimator, too soon, in my opinion. bugs found with fuzzing would all be lowest priority bugs

1572577404
andrewrk
once we're shipping self-hosted I'll be interested in fuzzing

1572579635
saskwach
Fuzzing C++ code is basically guaranteed to find bugs, and lots of them.

1572579683
saskwach
daurnimator, I figured out what I was doing that was preventing me from writing to the struct's array member.

1572579716
saskwach
It's generic-ish, so the type is returned by a function.

1572579725
saskwach
I know, I'll do the thing in godbolt.

1572579970
saskwach


1572580019
daurnimator
saskwach: `[_]bool{` not `[_]{`

1572580059
daurnimator
saskwach: and then you'll get "use of undeclared identifier 'int'"

1572580072
saskwach
Yeah, I didn't realize it wasn't going to give me actual errors.

1572580102
daurnimator
saskwach: click "Output 0/1" at the bottom

1572580115
saskwach
ahh

1572580216
saskwach
Well crap, it works in my small example.

1572580264
saskwach
I'll pare down the one that doesn't work until I either figure it out or have something worth showing you.

1572580529
saskwach
Ahah, got it.

1572580565
saskwach


1572580640
saskwach
Also, I've been wondering if that bit in `new` where I return the struct by value gets optimized into something reasonable or not.

1572580648
saskwach
Assuming a large struct.

1572580688
saskwach
daurnimator, for real this time

1572581229
daurnimator
saskwach: `fn mod(self: Self) void {` -> arguments are const

1572581238
daurnimator
saskwach: you need `self: *Self` instead.

1572581303
saskwach
ahh

1572581382
saskwach
thanks

1572581445
daurnimator
saskwach: return struct by value should be optimized well; that's result location (which needs more docs)

1572582831
muffindrake
@embedFile says "This function returns a compile time constant fixed-size array with length equal to the byte count of the file given by path.", but its return type is [X]u8, i.e. no const here. Clarification?

1572583015
muffindrake
Just the array size is fixed,

1572583129
muffindrake
At least that's how I'm going to read 'compile time constant'

1572583211
pixelherodev
`constant` and `fixed-size` are both specified there muffindrake

1572583225
pixelherodev
Implication is that `constant` has nothing to do with size

1572583315
pixelherodev
Still, that's interesting

1572583376
pixelherodev
`compile-time constant` implies to me that it returns `comptime []const u8`,but that's not what's specified...

1572583557
telemach
pixelherodev: you mentioned disabling SSE for freestanding mode

1572583579
telemach
why so? (sorry for naive question, i know nothing about writing kernels)

1572583733
telemach
i mean, what's wrong with using SSE in freestanding mode? if SSE means SSE instruction

1572583738
telemach
*instructions

1572584016
pixelherodev
SSE instructions aren't valid until SSE is enabled

1572584053
pixelherodev
Similarly, if you look at my kernel, you'll note that one of the first things it does is enable the FPU (Floating Point Unit) - until that's done, using floats crashes the system

1572584062
pixelherodev
Basically, CPUs didn't originally have SSE

1572584083
pixelherodev
So the kernel has to detect SSE and enable it manually if the CPU it's running on supports it

1572584109
pixelherodev
If SSE instructions run before that's done, it effectively crashes the CPU

1572585258
muffindrake
Wasn't usage of floating point in bare met- damnit

1572585278
pixelherodev
?

1572585306
muffindrake
Chat scrolling woes. I didn't ee the newer ones until too late.

1572585374
telemach
oh wow, thanks for explanation, i naively thought that such old things like FPU and SSE are on by default on modern CPUs

1572585528
muffindrake
Some answers on stackoverflow attempt to outline the reasons why floating point is rarely done freestanding, with the example of the linux kernel

1572585535
muffindrake


1572585551
muffindrake
And the more popular one,

1572585915
pixelherodev
... yeahhhhh I could definitely easily avoid the FPU ops I'm doing

1572585925
pixelherodev
Literally only two FPU calls, both are in the timer interrupt

1572585964
pixelherodev
Rather, both are in the *timer*; the as_ms function takes a number of timer ticks and converts to ms based on frequency (which is calculated as f64 at comptime)

1572586020
telemach
how do you calculate frequency at comptime?

1572586040
telemach
or is it just your timer freq, not CPU clock?

1572586595
pixelherodev
Yeah

1572586606
pixelherodev
Basically, the timer frequency is set by a

1572586621
pixelherodev
So I have three constants: target frequency, divisor, real frequency

1572586635
pixelherodev
Divisor is calculated from target frequency, real frequency is calculated from divisor

1572588200
saskwach
I've used whole systems that didn't support floating point at all. It's not a huge loss in most embedded contexts.

1572594578
daurnimator
Something zig probably does need though is knowledge of fpu state

1572594623
daurnimator
1. so I can change e.g. rounding modes and have comptime code do the right thing

1572594638
daurnimator
2. I should be able to annotate functions with their expected fpu modes

1572610232
Snektron
Wasnt there a @setRoundingMode

1572610898
daurnimator
andrewrk: stream this week?

1572618434
dimenus88
andrewrk: i'm working on the vector array indexing commit and it looks clean, but I created an additional test that replicates the failure I get in his full PR as well

1572618439
dimenus88


1572618466
dimenus88
It segfaults at runtime when you try to assign an array to an extern union

1572618858
dimenus88
nvm, it looks like it fails at comptime too. I'll debug this

1572621287
nrdmn
uefi networking support coming soon

1572622332
dimenus88
is there any way to make the zig compiler single threaded so you can reverse execution?

1572625544
andrewrk
dimenus, stage1 is single threaded

1572625866
dimenus88
hmmm, gdb doesn't want to reverse execution

1572625897
samtebbs
Has anyone experimented with piping a ChildProcess' stdout to a file?

1572626115
samtebbs
I've tried this:

1572626363
andrewrk
dimenus, let me know if you figure out how to use that feature. I tried a few times and gave up

1572626602
dimenus88
andrewrk: yeah it's not working for me, i have this mostly figured out though

1572626628
dimenus88
it looks like it's an issue with the result_loc created at ir.cpp:25969

1572626665
dimenus88
s_none.elements is null when it shouldn't be

1572626786
dimenus88
(i'm referring to my failing test on the branch I linked earlier btw)

1572627420
andrewrk
dimenus, for what it's worth I was planning on reworking the implementation of that a bit

1572627440
andrewrk
maybe you can post what you have so far and I'll see if I can get it merged

1572627647
dimenus88
right now i have the broken test isolated

1572627669
dimenus88


1572627675
nrdmn
are `type`, `comptime_int` and `comptime_float` zero bit types?

1572627725
andrewrk
nrdmn, yes

1572627759
andrewrk
"0 bit types" should be "0 runtime-bits types"

1572627763
dimenus88
andrewrk: I only merged that particular commit into master and started working on this test

1572627795
andrewrk
ah, yeah that's as far as I got too

1572627813
andrewrk
then it sort of felt like just doing the implementation myself would be easier than trying to merge it

1572627841
dimenus88
I don't know the compiler well enough to free hand that

1572627869
dimenus88
any chance you could take a look at my broken test?

1572628002
nrdmn
can I have packed arrays of bits?

1572633176
nrdmn
andrewrk: If i remember correctly it is possible to compile some functions as ReleaseSafe and others as ReleaseFast within the same application

1572633179
nrdmn
how can I do that?

1572634054
andrewrk


1572634251
nrdmn
thanks!

1572634385
leeward
Does anyone know if there's an LLVM bitcode frontend for GCC?

1572634413
andrewrk
that's an interesting idea

1572634774
leeward
It would help with the number of supported targets. Zig looks like a great language for embedded software, but LLVM really doesn't target many architectures.

1572634964
pixelherodev
What's easier to retarget: LLVM or GCC?

1572635332
leeward
What do you mean by retarget?

1572635404
leeward
There's a project called dragonegg that uses LLVM to compile GCC IR.

1572635409
pixelherodev
Add a new backend for

1572635502
leeward
I've never done it, but I get the sense that LLVM is designed to be easier to add backends.

1572635510
leeward
Of course, many more GCC backends already exist.

1572635548
pixelherodev
I tried to read through the LLVM docs regarding adding a backend a few weeks ago. There's *so much there*.

1572635570
pixelherodev
I get the feeling that if you've done it once it's easy to do, but learning enough about the system to actually do it is a pain

1572635594
leeward
Thus the question. If I want to write code for, say, xap or mips or avr, there's a GCC compiler for that.

1572635609
pixelherodev
Actually, LLVM supports AVR now (experimentally though)

1572635623
leeward
Yeah, supports experimentally is not the same as supports.

1572635648
pixelherodev
That's true

1572635654
leeward
I'm all for supporting the effort, but there's just so much that already exists.

1572635658
waleee-cl
isn't there a mips backend in LLVM?

1572635662
leeward
Tilera, for example.

1572635699
leeward
Maybe?

1572635706
pixelherodev
Yeah, there is

1572635719
pixelherodev
(According to a quick look at the LLVM_TARGETS USE_EXPAND flag on Gentoo)

1572635794
leeward
It would be cool to make, for example, arduino in Zig. Not gonna happen while avr support is experimental.

1572635886
andrewrk
zig/llvm mips support is reasonable

1572635890
andrewrk


1572635910
andrewrk
we have CI test coverage enabled for mipsel-linux (no libc) and mipsel-linux-musl:

1572635943
leeward
nifty

1572636069
andrewrk
not sure why mipsel-linux-gnu isn't there, I could try adding coverage for that

1572636228
leeward
Is `zig build doc` part of CI? It fails with an integer overflow when I run it.

1572636279
andrewrk
yes it is

1572636299
leeward
Well crap.

1572636446
andrewrk
can you show the full output?

1572636670
leeward
I can...

1572636693
pixelherodev
Is @bitCast always evaluated at comptime?

1572636740
leeward
andrewrk:

1572636893
andrewrk
leeward, it's failing on this test case for you:

1572636900
andrewrk
where foo.zig is

1572636995
leeward
Nope, same error.

1572637009
leeward
Well, integer overflow anyway. I haven't looked at the whole trace.

1572637124
andrewrk
next step will be to figure out why the vdso code is hitting an integer overflow

1572637140
andrewrk
should be straightforward to debug if one is able to reproduce it reliably

1572637154
leeward
very reliably

1572637182
leeward
Though I've only debugged zig code that makes an executable in zig-cache/bin

1572637243
andrewrk
use this parameter: --output-dir zig-cache

1572637292
leeward
Ooh, fancy

1572637438
leeward


1572637532
leeward
Yep, that looks like an integer underflow.

1572637562
andrewrk
what is `uname -a` on your system?

1572637681
leeward
Linux NBM-BOS-W10L1 4.4.0-17134-Microsoft #706-Microsoft Mon Apr 01 18:13:00 PST 2019 x86_64 GNU/Linux

1572637690
leeward
(WSL)

1572637699
leeward
Though I've also seen it on an actual Linux box.

1572637832
andrewrk
WSL! I was going to say, the logic looks fine, this seems like the kernel doing something wrong

1572637873
leeward
I'm almost certain I reproduced this on my Linux box at home. Maybe I'm misremembering.

1572637932
andrewrk
leeward, do those values discovered with gdb agree with `readelf -e` on the elf file?

1572638071
andrewrk
oh, it looks like the logic is trying to figure out the base address based on LOAD program headers. but there can be more than one. maybe we can check whether the value is sane before using it to compute `base`

1572638128
andrewrk
it looks like musl has this same logic as the zig code that is triggering an integer overflow

1572638224
leeward
andrewrk: What am I looking for in readelf?

1572638282
andrewrk
the Program Headers table

1572638304
andrewrk
the vdso logic has this information and needs to figure out the base address

1572638369
leeward
Not really. I don't see any numbers under Program Headers that look at all like the addresses from gdb.

1572638408
leeward
except that the stack is at 0

1572638671
leeward


1572638689
leeward
And I messed up the URL with that.

1572639283
leeward
Just the arrow though. Get rid of the <- and it's good

1572643654
pixelherodev
If you have a local array (not allocated via an std.mem.Allocator) and you return a slice of it, is that valid?

1572643753
leeward
Wouldn't that be a pointer to stack?

1572643894
pixelherodev
I'd think so, but it seems to

1572643897
pixelherodev
I mean

1572643901
pixelherodev
I'm not returning a pointer

1572643906
pixelherodev
Returning a

1572643911
pixelherodev
Hence the question

1572643978
pixelherodev
My guess is it gets returned via the stack?

1572644016
pixelherodev
Mostly concerned now because I plan on having a function that can theoretically return a slice of millions of u8s

1572644793
fengb
No, the slice is just a fat pointer into the stack memory space that’ll get overwritten

1572644814
leeward
Yeah, I've been poking at a toy that supports that.

1572644824
leeward
No errors though, which is unfortunate.

1572644863
fengb
There's a task to detect dangling pointers to stack space, but it's not there yet

1572644929
kenaryn
Hello, please how can I write into a file instead of standard output? I did not see an example in the official documentation

1572645016
pixelherodev
fengb, thanks!

1572645016
fengb
pixelherodev: it seems to work because the program hasn't unmapped or reused the space yet. But it's almost guaranteed to corrupt on a function call

1572645052
fengb
Slices are really just pointers underneath the covers. It only points at data, but it never is the real data

1572645102
leeward
pixelherodev:

1572645160
leeward
arr and arr2 can be const, the output doesn't change.

1572645393
pixelherodev
output there is empty for me

1572645542
pixelherodev
That said, your point is made

1572647620
bhansconnect
does anyone know if zig standard library has a way to get the number of cpus/cores?

1572647643
bhansconnect
I am assuming that it must for some of async stuff.

1572647774
waleee-cl
bhansconnect:  an ripgrep later on the std hints that threads.zig har en cpuCount function

1572647839
waleee-cl
(or a "git grep cpu" if one prefer that)

1572647933
waleee-cl
ie, const thead = @import("std").thread  , and you should be good to go with thead.cpuCount()

1572647934
andrewrk
bhansconnect,

1572647973
waleee-cl
yeah, of course there's also the much more user friendly option :)

1572647989
bhansconnect
thanks

1572647996
andrewrk
it's strange that OutOfMemory is in the error set, I wonder if that can go away

1572648092
waleee-cl
oops, massive Swenglish earlier ("  ... har en ... ")

