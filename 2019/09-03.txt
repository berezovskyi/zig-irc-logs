1567468927
Tetralux
Try it

1567469570
mahmudov


1567469577
mahmudov
ok success, thnks guys

1567469609
andrewrk
mahmudov, if you want a small hello world you can pass --strip --release-small to build-exe

1567469635
mahmudov
hm ok

1567469660
andrewrk
default is debug. it is big because it has debug symbols and stack trace printing code

1567469791
mahmudov
can i cross building?

1567469809
mahmudov
can i compile a source for different target?

1567469847
Tetralux
Pass `-target <target>` to `zig build-exe`

1567469868
Tetralux
You can do `zig targets` for a list IIRC.

1567469890
Tetralux
You can omit the last part of the triple for the default ABI.

1567469909
Tetralux
Like `zig build-exe hello.zig -target x86_64-windows`

1567470047
mahmudov
yes i tried,it worked

1567470048
mahmudov
+1

1567470133
mahmudov
ty,lemme poke docs and help

1567470901
curtisf
is there a rational for why some of the flags have one `-` and some have two `--`?

1567471038
andrewrk
yes, they're copied from other projects' CLI args rather than trying to be self-consistent

1567471201
mikdusan
should probably just accept both '-' and '--' for all options

1567471331
Tetralux
mikdusan: That would probably be my first though.

1567471333
Tetralux
thought*

1567471493
curtisf
The inconsistency is really strange to me, not knowing why some are one way and the other. Being permissive is probably the easiest way to be consistent if you still want to be 'compatible' with other tools, but permissiveness is also not ideal

1567471648
Tetralux
curtisf: Why is permissiveness not ideal? Clarity?

1567471714
Tetralux
If so, I'd suggest that if it errors because you used one '-' and not two, or whatever, then it informs you of the right number.

1567471738
Tetralux
error: unknown argument '--target'

1567471745
Tetralux
note: .. but '-target' exists.

1567471757
Tetralux
f.e.

1567471954
shritesh
andrewrk: I'm trying to implement js/wasm callbacks interop using suspend/resume and keep getting "LLVM ERROR: function sections must contain one function each"

1567472257
andrewrk
shritesh, interesting. let me have a look at that

1567472296
andrewrk
samtebbs, I resolved one of your bugs (

1567472312
andrewrk
samtebbs, let me know what other bugs are blocking you from getting from 0.4.0 -> master on pluto

1567472341
shritesh
andrewrk: reduced case

1567472383
andrewrk
ok I'm reproducing it easily enough. let me see wtf is going on

1567472509
andrewrk
hmm I wonder if it's the "prefix data"

1567472805
andrewrk
shritesh, ok I reproduced it with LLVM 9, and confirmed it's "prefix data". This is annoying because I had it working without prefix data already, then rewrote it using this PrefixData feature

1567472811
andrewrk
they didn't mention that it wasn't available on all targets

1567472837
andrewrk


1567472855
andrewrk
I can make it work without this easily enough, but not before tomorrow

1567472857
shritesh
That's no fun

1567472860
shritesh
That's fine

1567472899
shritesh
sidenote: If this works, we might be able to have some really "nice feeling" JS interop. async/await just fits with callbacks and such

1567472907
andrewrk
yeah that's a great point

1567472952
andrewrk
the annoying thing is that even if they implemented prefix data for wasm right this minute, we wouldn't get it until llvm 10, which is 7 months away

1567472990
shritesh
I was inspired by daurnimator's fengari LUA in JS project

1567473026
andrewrk


1567473305
andrewrk
this is really annoying. I'll have to do a workaround for 0.5.0 for this.

1567473382
mikdusan
andrewrk: i'm trying to find a twitch.tv session you did for me showing some walkthrough on IR to troubleshoot a bug. are they pruned automatically?

1567473405
andrewrk
yes twitch.tv deletes them after a while. was that the one that I didn't upload to youtube?

1567473469
mikdusan
i'll check on youtube. was going to link it in an FAQ answer. no big deal if it's not there.

1567473508
andrewrk
I can do another one of those streams and archive it

1567473536
mikdusan
no no I just want to take what is handy. if another comes up i'll add it to FAQ.

1567473746
andrewrk
shritesh,

1567473803
Tetralux
mikdusan: I've never looked into how to run wasm code. Can you point me to a resource of choice? Or is it easy to find?

1567473826
andrewrk
shritesh, the sad thing about this is that if you don't call @frameSize then you don't even need the prefix data. That would actually be a pretty quick fix I could do. If you don't call @frameSize then it would avoid this issue

1567473845
andrewrk
and you only need @frameSize for async function pointers

1567474154
shritesh
Honestly, I don't know why I'd use @frameSize or async function pointers :D. I was just going to use async, await, @frame, suspend and resume to make a fetch callback happen across wasm boundaries.

1567474260
mikdusan
Tetralux: i've never targeted wasm. sorry. but that sounds like a good zig wiki faq or document to have

1567474289
Tetralux
mikdusan: Agreed.

1567474300
shritesh
Tetralux, mikdusan:

1567474304
andrewrk
shritesh, I have your example building now. After tests pass I'll push this to master

1567474376
Tetralux
shritesh: Huh. Curious!

1567474448
shritesh
andrewrk: Nice.

1567474788
andrewrk
shritesh, I pushed d74b8567

1567474849
shritesh
andrewrk: Alright, I'll play around with it.

1567475662
shritesh
andrewrk: IT WORKS!!!

1567475737
andrewrk
calling javascript async functions?

1567475757
shritesh
Resuming async functions from JS

1567475786
shritesh
Resuming Zig async functions from JS callbacks

1567475789
andrewrk
yeah that's a great use case for this

1567475816
shritesh
BUT it doesn't work in release-{fast,small} mode, only debug :D

1567475829
andrewrk
what happens in release modes?

1567475848
shritesh
"UnhandledPromiseRejectionWarning: RuntimeError: function signature mismatch"

1567475861
shritesh
From the JS side

1567475913
andrewrk
in order to call a zig function from js you have to make it extern right? I don't see how that could happen

1567475926
shritesh
I think I need to store the frame pointer it in the heap. Maybe that's the problem. I currently have it as a global var.

1567475961
shritesh
I don't remember the exact wasm semantics right now.

1567475963
andrewrk
I don't see how that is connected to the error message

1567476037
andrewrk
are you calling a non-extern zig function from js?

1567476106
shritesh
No I'm calling an extern function. The instruction being executed is `call_indirect` on the wasm side and it's referencing global memory.

1567476349
shritesh


1567476452
andrewrk
this all looks good to me

1567476468
andrewrk
why would the heap do anything here?

1567476655
andrewrk
what node version do you need for this?

1567476679
shritesh
I'm on latest but wasm has been supported for quite a while

1567476709
shritesh
Also, if you use

1567476764
andrewrk
I can repro this

1567476986
andrewrk
huh, that's weird. in release modes, it deleted the part where start() populates the frame with the function pointer

1567477026
andrewrk
callback() is correctly loading the function pointer and then calling it

1567477027
shritesh
Also, this is what I was talking about with heap:

1567477042
andrewrk
wait, it didn't? wtf

1567477070
andrewrk
ok, well... if llvm implemented mutating a global by treating it as equivalent to undefined behavior, then that would explain this

1567477082
andrewrk
let me try llvm 9

1567477155
andrewrk
with llvm 9 start() is still not setting the fn ptr

1567477409
shritesh
Interesting

1567477478
andrewrk
it looks like mutable globals landed a long time ago

1567477499
andrewrk
this is now a question of "why is llvm allowed to delete that store?"

1567477537
shritesh
Yeah, I read ALL THE SPECS during my sleep deprived finals week and I am hazy on the details

1567477539
andrewrk
oh, I know why

1567477547
andrewrk
it is undef behavior

1567477575
andrewrk
_ = async amain() // <---- the frame of amain is in `start`'s call stack frame

1567477599
shritesh
Yep. Needs to be on heap

1567477615
andrewrk
or just another global. the problem is that the frame is destroyed when start returns

1567477649
shritesh
Ooh. That's even better

1567477661
andrewrk


1567477669
andrewrk
this works with --release-small

1567477728
shritesh
That means I can just resume amain_frame

1567477766
andrewrk
technically in this case you can

1567477788
shritesh
And it works

1567477807
andrewrk
but it would still be advised for the caller (`start`) to not be aware of the details of how suspend/resume are happening

1567477823
andrewrk
because you could for example, introduce another suspend, that gets resumed a different way

1567477838
shritesh
makes sense.

1567477860
shritesh
I think in this case, the JS event loop itself acts as our event loop which is nice.

1567477864
andrewrk
yes

1567478021
andrewrk
it would be nice if we could have debug safety for that footgun though

1567478051
shritesh
With this working and fengb's zee_alloc, Zig might actually be the only language able to compete with Rust's WASM ecosystem.

1567478214
andrewrk
so I think you could use this to make a zig function that calls a javascript async function

1567478238
andrewrk
the new fetch() is one right?

1567478278
shritesh
Yes. Even in this example, the callback is being called after the previous promise has been resolved.

1567478312
andrewrk
oh, and since js is single threaded, you can always use a global for the frame. that's easy and pretty ideal memory usage

1567478351
shritesh
Music to my ears

1567478456
andrewrk
uhh sorry. that doesn't work with recursion (direct or indirect). never mind that last thing

1567478488
shritesh
Can I use the heap for that?

1567478494
andrewrk
yes

1567478511
andrewrk
that's kinda the only option you have for recursion

1567478526
shritesh
Only when it's async right?

1567478584
andrewrk
well here's the thing. we want safe recursion in normal blocking code too. and I have a simple plan to do that: when a call graph cycle is detected, zig makes all the functions in the cycle async.

1567478597
shritesh
Ah.

1567478644
andrewrk
this will cause an error like this: error: '@Frame(fib)' depends on itself. note: when analyzing type '@Frame(fib)' here. (continued for every call in the cycle)

1567478692
andrewrk
so this would both cause an error for recursion, as well as start the programmer down the path to solving it - because now that those functions are "async", heap-allocating their stack frames will solve the compile error, and solve the unsafety of the recursion

1567478722
andrewrk
plus - the heap allocation of a frame would only have to happen for 1 function in the cycle - all the other calls would have the callee's frame inside their own. so this would be what you want - 1 allocation per cycle, not per call

1567478775
andrewrk
1 heap-allocation breaks the cycle

1567478783
shritesh
And wasm implicity has 4K of heap available by default

1567478808
shritesh
Unless, explicitly stated by the environment

1567478850
andrewrk
the main idea here is that "the stack" has a fixed upper bound that has to be known at compile-time, while the heap can be adjusted at runtime, depending on user input

1567478934
andrewrk
I'm confident in this plan. Which is exciting, because it was one of the big unsolved research areas. And the async/await redesign brought in the solution for free

1567479035
andrewrk
I believe that Rust has memory safety for stack overflow - it will at least crash rather than undefined behavior. But zig would be bringing this to the next level: compile-time verification of stack size upper bound. That's especially important for embedded and OS dev

1567479168
andrewrk
it's not a complete solution. there is still function pointers to solve. but I have a plan for that, too

1567479369
Tetralux


1567479736
shritesh
I think this is a respectable way to program on the web:

1567479979
andrewrk
shritesh, unfortunately it's a bit less elegant than that, given that fetching a url can fail

1567480013
andrewrk


1567480065
andrewrk
see

1567480205
shritesh
I don't see why a try before await won't work here

1567480237
andrewrk
it would but you would potentially leak the other resource

1567480305
shritesh
Ah. But, we're in JS land here :D

1567480318
andrewrk
actually it's worse than that. if you `try await ip_frame`, and the `try` returns, your bacon frame is still going, but main() returns. you've yanked the stack frame out from underneath the fetch call

1567480340
andrewrk
same situation as the earlier example with start() and callback()

1567480351
shritesh
Oof. So a scheduler and pseudo-GC are in order

1567480402
andrewrk
nah, just the idioms outlined in the linked code earlier. and the `cancel` feature can still be up for discussion, but there are some difficult design problems to solve for that

1567480486
andrewrk
you can also arrange it so that the awaits are together. as long as there are no `try` or `return` in between async and await. but I do recommend the original example I provided

1567480961
shritesh
Gotcha

1567480986
shritesh
I think it can be handled centrally for wasm

1567480999
shritesh
Like a global promise store

1567481153
shritesh
And we can probably assume that the JS function will always callback whether it's success or failure so that resources get cleaned

1567481159
andrewrk
what about application-level resources though?

1567481208
andrewrk
your code calls wasm_allocator.free() which means the application manages the resource

1567481288
shritesh
Ah. I didn't consider that.

1567481410
andrewrk
status quo is a bit of boilerplate. but it does not cause indentation, and it allows you to use the familiar `try` everywhere

1567487392
daurnimator
andrewrk: I think you're going in the wrong direction with 3157

1567487778
daurnimator
I'll need to do a write up on my thoughts

1567490634
daurnimator
Tiehuis: are you lurking at all?

1567492333
nitram91
is there any workaround to

1567492524
daurnimator
nitram91: not if you want to keep using std.fmt for now

1567503292
bgiannan
did someone try to embed luajit in zig?

1567509850
daurnimator
bgiannan: 'embed'?

1567510135
bgiannan
daurnimator, see pm

1567510180
bgiannan
it boils down to the fact that, for macOS, i need `-pagezero_size 10000 -image_base 100000000` but i don't know that i can pass those options to zig

1567511151
mahmudov


1567511172
bgiannan
?

1567511192
mahmudov
what i miss

1567511204
mahmudov
can't i produce binary for macos

1567511275
mahmudov
i have tested for x86_64-windows-gnu, it worked on windows sys.

1567511902
FireFox317
mahmudov: You probably want to use -target x86_64-macosx

1567512137
FireFox317
andrewrk: Is it an idea to link issue #2791 where you wrote the tips for debugging on the wiki page, such that it can be easily found?

1567512447
mahmudov
+1 firefox317

1567513875
daurnimator
I bookmarked it locally :P

1567514172
samtebbs
firefox317: Yeah I was considering adding a page for it

1567514183
samtebbs
Where we can all add tips

1567516343
andrewrk
mikdusan, added it to the FAQ wiki page

1567517327
mq32
daurnimator: your issue about bfloat16 ( #3148 ) triggers something in me

1567517375
mq32
i read it as "do we want first- and second class value types in zig"

1567517386
daurnimator
uh, okay.

1567517459
mq32
:D

1567517496
mq32
yeah, it's a thing about refactoring

1567517511
mq32
we use "var" a lot because we don't want to type out the full type

1567517537
mq32
also "var" offers flexibility

1567517541
daurnimator
mq32: why is your type "long"?

1567517548
daurnimator
==> why not make a nice short alias?

1567517592
mq32
let me get to my point :D

1567517600
mq32
var a = func(); var b = func(); var c = a + b;

1567517607
mq32
if func() returns i32, it's fine

1567517612
mq32
if func() returns f32, it's fine

1567517622
mq32
if func() returns Fixed(16,16), it's not

1567517635
mq32
Fixed would be fixed-point arithmetic type

1567517639
daurnimator
const fx16 = Fixed(16,16)

1567517644
daurnimator
and now its easy :)

1567517647
mq32
nah

1567517652
mq32
problem is still the same

1567517658
mq32
we don't have operator overloading

1567517661
mq32
so now i have to write

1567517671
mq32
var c = fx16.add(a, b);

1567517671
andrewrk
daurnimator, what's your concern with #3157? I'm pretty confident it's good

1567517686
daurnimator
mq32: indeed that's a problem. I believe an issue already around fixed arithmetic

1567517705
daurnimator
andrewrk: I think it can be achived via nested/multiple event loops instead.

1567517710
mq32
daurnimator: it's more or less the issue you made

1567517717
daurnimator
andrewrk: which is a much more useful and general concept

1567517723
mq32
my point is: we currently have to kinds of value types

1567517737
mq32
value==numeric

1567517747
andrewrk
daurnimator, I don't think we want debug stack trace printing to use an event loop

1567517752
mq32
self-made ones which use ".add" and builtin ones which use "operator +"

1567517753
andrewrk
same thing with std.debug.warn

1567517755
daurnimator
mq32:

1567517772
daurnimator
andrewrk: I would propose that

1567517775
mq32
fixed point was just an example ;)

1567517782
mq32
same is for bfloat16, …

1567517798
daurnimator
mq32: I think the point is that there is a very limited set of numeric types that should be supported.

1567517821
mq32
yes, i don't doubt that

1567517841
mq32
my point is that to write generic code we would require some wrapper types for builtin arithmetics

1567517844
daurnimator
mq32: currently we have signed+unsigned integers + floats. we should maybe gain fixed point integers and bfloat16. maybe unums? but it shouldn't be something that arbitrary library code can invent IMO

1567517845
mq32
so i can use

1567517847
mq32
f32.add(a, b);

1567517873
daurnimator
andrewrk: something like debug stack trace printing can: 1. create new event loop. 2. use that event loop to print the stack trace. 3. destroy that event loop (or I guess for a panic, just abort()

1567517892
daurnimator
mq32: I believe that is on purpose

1567517909
mq32
same here

1567517913
mq32
but i see me writing a

1567517925
mq32
WrappedType(f32) which is a struct that exports those .add functions

1567517940
mq32
so i don't have to write to different functions that emit literally the same byte code later

1567517965
andrewrk
daurnimator, why is that better?

1567517967
daurnimator
mq32: I started delving into some crypto code the other day... also sorts of fun arithmetic groups I was trying to translate from C++.... I don't think operator overloading made it particularly more readable

1567517974
andrewrk
then it won't be able to print a stack trace if the event loop code panics

1567518002
daurnimator
andrewrk: that's not really different to if open() panics (though I guess that's more unlikely)

1567518032
andrewrk
it's different because there's hundreds of lines of userland code in an event loop. 0 lines of userland code in open()

1567518064
mq32
daurnimator: yeah that's a valid argument. i'm i fan of operator overloading for reasonable use (numeric values with arithemtic semantics), but i can understand that they don't fit zig

1567518064
daurnimator
andrewrk: there's at least the errno handling code; but yes: 20 lines vs 1000.

1567518093
mq32
but i want to solve the problem that i cannot write fully generic code that uses both userland numeric types and builtin numeric types

1567518096
andrewrk
also if there are more than 1 event loop, and now they're fighting over writing to stderr? with 1 global event loop, a lock can participate in the event loop. if you have more than one then you need stop-the-world mutexes for some things such as stderr

1567518144
andrewrk
here's what I'm saying:

1567518151
daurnimator
andrewrk: even with a single event loop you can have multiple descriptors to stderr open: this doesn't change much there.

1567518179
daurnimator
andrewrk: I don't think it is: I think we can solve it without the additional complexity you're proposing

1567518192
daurnimator
(well: the complexity is elsewhere: but IMO much more useful/reusable/more general)

1567518207
andrewrk
with a single event loop you can use std.event.Lock, which has a function suspend until the lock can be obtained

1567518253
daurnimator
andrewrk: do you recall the demo I gave you that led to the creation of 1778? where doing e.g. a read operation

1567518287
andrewrk
I don't remember that detail

1567518822
mq32
daurnimator: my thought can be put into this small example:

1567518858
andrewrk
shritesh, good luck with your talk today

1567519008
shritesh
andrewrk: Thanks.

1567520611
fengb
zee_alloc does really poorly against the gpda fuzz test :P

1567520652
andrewrk
R.I.P.

1567520946
andrewrk
at some point when there are relatively few pull requests open, I want to `git mv std/ lib/std`

1567520999
andrewrk
maybe right before 0.5.0 release

1567521500
daurnimator
andrewrk: step 1: merge pull requests ;)

1567521529
fengb
Technically any form of closing work :P

1567521856
daurnimator
don't listen to his lies.

1567526737
samtebbs
You ok there marmotini_ ? :p

1567539307
nitram91
andrewrk why do the Elf and Dwarf librairies use streams ? wouldn't it be much more efficient to mmap the file into memory then get the data from that ? (The cost of seeking and reading is very high, whereas as a read-only mmaped file is very efficient)

1567539374
andrewrk
nitram91, yes it would be better to do that for the stack trace dumping use case

1567539427
andrewrk
that code has undergone many changes, and never been fully redesigned/reworked now that all the use cases / cross platform support are clear

1567539506
nitram91
ok, ill remove the pull request I did this morning, and try to move from streams to mmap (I'm not gonna lie, using mmap would also fit my use case of a dynamic linker much better)

1567540772
nitram91
andrewrk some elf constants are missing from elf.zig, should I just add them manually or is there a reason for them to be missing (EI_MAG0..3, ELFCLASS32, ELFCLASS64, .....) ?

1567540790
scientes
nitram91, just add them if you need them

1567540795
andrewrk
you can add them manually

1567540797
nitram91
ok thx

1567540837
andrewrk
nitram91, this area of the std lib has been contributed "as needed", there hasn't been a conscious effort to make it complete yet

1567540850
andrewrk
that's most of the std lib, really

1567540901
nitram91
I'll do my best to try and complete it (the elf part)

1567545883
samtebbs
andrewrk: Hi Andrew, thanks for the PR :) I see that when I do `zig build run` it also builds the kernel rather than just running it

1567545907
samtebbs
Do you know why that could be? I don't see a dependency between the run step and build step

1567547891
andrewrk
hi samtebbs - you're welcome :) run -> qemu_cmd -> iso_cmd -> cp_elf_cmd -> addArtifactArg

1567547902
andrewrk
addArtifactArg automatically adds a dependency

1567547965
andrewrk
it's still not quite ideal - it would be better to do stuff in a temporary directory and then "install" to the install path

1567547976
andrewrk
but I would argue this is an improvement from status quo

1567550276
marler8997_1
Am I supposed to be able to pass "-target ..." to "zig build"?

1567550319
andrewrk
marler8997, no, any target configuration has to be exposed by the project's build script

1567550383
samtebbs
andrewrk: That makes sense, cheers. I'll experiment with it a bit

1567550383
marler8997_1
ok, so every target you're project supports needs to be configured in that targets build script

1567550395
marler8997_1
*that project's build script

1567550495
andrewrk
marler8997, yes, and there is a new option b.standardTargetOptions, which has a reasonable API, but it needs to be improved with how it surfaces the options to the CLI

1567550811
marler8997_1
This seems to be creating a native executable, not a cross-compiled one...? zig build-exe hello.zig  -target aarch64v8-linux-gnueabihf

1567550924
andrewrk
what makes you think that?

1567550935
marler8997_1
because I can run it on my host machine :)

1567550970
marler8997_1
hmmmmm, but the elf header says it's compiled for AARCH64....how in the heck is this working?

1567550990
marler8997_1
maybe it's calling qemu under the hood with some miscelaneous exec handler!

1567551018
marler8997_1
oh my gosh it is!!!!

1567551147
marler8997_1
and it runs on my ARM asic!!!

1567551388
andrewrk
I love it when stuff just works

1567551404
marler8997_1
So do you think the "-target" option will be added by default at some point?

1567551426
andrewrk
what do you mean?

1567551435
andrewrk
the default target is native

1567551452
marler8997_1
Do you think "-target" could be one of the default options in standardReleaseOptions at some point?

1567551509
andrewrk
oh, yeah, sure. the API of standardTargetOptions lets the build script specify a set of supported targets, with the first one in the list being the default

1567551524
andrewrk
how that gets exposed to the CLI is not in its final state. probably -target is good

1567551564
marler8997_1
gotcha

1567551568
marler8997_1
so much to do with zig

1567554477
Aransentin
Playing around a little with Zig, and wrote a network analyzer experiment using AF_XDP:

1567554488
Aransentin
(if anybody is interested in looking at it...)

1567554495
Aransentin
Right now it just goes "Oh, it's an IPv4 UDP packet" and not much more, though 🙂

1567555096
curtisf
As of this morning I have a working allocator that takes a fixed buffer and can re-use space as it is freed, with log(n) frees and allocs, which was pretty exciting to write and see work

1567555123
curtisf
I feel like once Zig has a language server, it will be the most pleasant language to write code in, even given that I have to manually manage memory

