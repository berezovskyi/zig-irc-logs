1561855856
scientes
$ git grep ZigTypeFn

1561855857
scientes
all_types.hpp:struct ZigTypeFn {

1561855857
scientes
all_types.hpp:        ZigTypeFn fn;

1561855857
scientes
hmmm

1561855880
scientes
oh nvm ZigTypeIdFn

1561856386
zxrf
i get a segfault when i run zig fmt --some-unknown-flag

1561856413
zxrf
looks like we reach some invalid address when dumping the stack trace

1561856565
scientes
oh that libuserland.a stack trace always locks up my computer, i disable it for debuggin purposes

1561856565
zxrf
gdb says it's at std/debug.zig:265

1561857414
hspak
Hello! Random Q from a new user: why are builtin functions camelCase? It looks like Zigâ€™s preferred style is snake_case

1561857502
Tetralux
I think there's an official style guide (although it's not enforced).

1561857507
Tetralux
But the short version last I checked

1561857516
Tetralux
Is that fns are camelCase, vars are snake_case.

1561857528
Tetralux
Globals are also snake_case.

1561857538
Tetralux
There's prob something I'm forgetting there, but... :)

1561857568
hspak
I see, thanks for the quick summary!

1561857713
Tetralux
Welcome :)

1561857762
Tetralux
Feel free to use your preferred style in your own code though.

1561858373
hryx
got another windows CI failure, this time I can't tell what:

1561858396
hryx
at this point I'd better just get zig set up on windows for myself locally

1561861117
mikdusan
and types prefer TitleCase

1561867774
hspak
I see in the docs "Zig does not special case string formatting in the compiler and instead exposes enough power to accomplish this task in userland."

1561867834
hspak
Does this mean that we can't format strings like we can with std.debug.warn out-of-the-box?

1561867868
hryx
hspak: nope, the standard library includes formatting. in fact, string formatting got improved this week

1561867948
hryx
note that instead of instead of C-style "%s" formatting it uses rust/python-inspired "{}" syntax

1561868152
hryx
hspak: sorry, reading back your question more closely -- yes, it's available out of the box, it's just implemented in the standard library instead of the core compiler

1561868206
hryx
it's just an implementation detail

1561868232
hspak
hryx: is there a zig equivalent of some_string = "foo.{}".format(bar) from python? Or format! from rust?

1561868293
hryx
yes if I understand, `std.debug.warn("{}", bar)`

1561868334
hryx
string literals don't support method syntax like your python example though

1561868354
hryx
agh, I'm sorry. I keep responding too fast. You're asking about assigning it to a string

1561868355
hspak
std.debug.warn prints to stderr. Can I save it to a string var somehow?

1561868369
hspak
np!

1561868372
hryx
To do so, you'll need to write it to a buffer

1561868387
hryx
the stdlib I believe does provide a way to do that. let me look up the function

1561868451
shachaf
I implemented {} formatting in C, it's great:

1561868454
hryx
hspak: here you go, you want `bufPrint`

1561868464
shachaf
I was definitely wishing I had a better language when I was doing that.

1561868479
hryx
so you can't assign to a new variable, but you can fill a buffer you have allocated previously

1561868480
hspak
hryx: thank you! appreciate the help

1561868489
hryx
sure thing!

1561868564
hryx
very cool shachaf

1561881314
emekankurumeh[m]
can zig cc compile objective c files out of the box?

1561881360
emekankurumeh[m]
with capability like `-fobjc-arc` add `-fmodules`?

1561883634
mikdusan
emekankurumeh[m]: fwiw i got a simple foo.m to compile with this command:

1561885805
fubd
anyone have any code that converts zig strings to win32 wide strings?

1561887171
BitPuffin
I don't know why but for sem reason when I compile some C with Zig it complains that '\b' and '\0' aren't valid characters?

1561887270
Sahnvour
hryx: creation of libuserland failed, but there's no zig error message sadly

1561887305
BitPuffin
but it seems to mainly be doing so in the C file I specified in the addExecutable

1561887310
BitPuffin
in that one it even considered tab an error

1561887314
BitPuffin
as if it was Zig

1561887333
BitPuffin
but it would fail much sooner if it wasn't compiling it as C

1561887338
BitPuffin
so I'm dazzled

1561887371
BitPuffin
or bedazzled

1561887376
BitPuffin
idk english even

1561889499
Sahnvour
hryx: I tried to build it locally, no luck. I'm able to get verbose output up to zig ir pass, but not llvm ir pass

1561904488
HelloThere54321
is it possible to use the pseudo_struct globally

1561906408
emekankurumeh[m]
fudb std.unicode should have the functions you're looking for

1561906547
tgschultz
HelloThere54321, why wouldn't it be? I don't understand the question.

1561907869
scientes
wtf, almost everything in zig is passed by reference

1561908186
scientes
it should all be passed by value, like in C, and then LLVM can do the calling convention (as the PowerPC backend does), and we can fix it up for x86 and arm

1561909264
emekankurumeh[m]
<tgschultz "HelloThere54321, why wouldn't it"> isn't zig free to pass by value or by reference because it doesn't have a defined calling convention?

1561909615
scientes
i'm talking about extern functions

1561909628
scientes
but it even does it for fastcc functions and then lets llvm clean up after it

1561909631
scientes
which is incorrect

1561909644
scientes
fastcc is the llvm name for zig-internal functions

1561909734
scientes
from my position it is just really tedious to have to allocate memory to just pass a bool

1561909742
scientes
(in the compiler)

1561914934
marler8997_
scientes: not sure what you're talking about, can you provide an example function?

1561915819
scientes
marler8997_, ?

1561915833
scientes
oh i see

1561915839
scientes
yeah its only applicable from inside the compiler marler8997_

1561915845
scientes
not the zig language

1561918084
emekankurumeh[m]
and then that memory is never freed?

1561922908
tgschultz
HelloThere54321, Do you mean using pseudo_struct to like, try and construct a global union of all entities or something? In that case, no, I don't think that can be done.

1561922913
scientes
emekankurumeh[m], it is on the stack

1561922953
scientes
emekankurumeh[m], realize the zig language knows nothing of a heap

1561922976
emekankurumeh[m]
oh, i think I misunderstood what you meant

1561922995
scientes
i'm talking in the compiler

1561923005
scientes
everything has to go through a alloca on the stack

1561923011
emekankurumeh[m]
we `alloca` the bool and pass a reference to that?

1561923033
scientes
well it gets passed by value because of the C ABI, but its turned into a reference before that

1561923046
emekankurumeh[m]
gotcha

1561923052
scientes
we are just giving the llvm optimizer a lot of work to do

1561923116
scientes
things should only becomes references if 1) they are variables, or 2) the c abi requires it (but that is only in codegen.cpp)

1561923132
scientes
as llvm has no concept of variables, it is SSA

1561923156
scientes
so you have to implement variables with stack assignments, and then have the optimizer figure it out

1561923219
scientes
however consts do not need to be stack allocated

1561923251
scientes
arrays also have to be

1561923262
scientes
but not structs, interestingly

1561923317
scientes
actually, i'm not sure about arrays

1561925079
emekankurumeh[m]
is there a way to get the value from an union without knowing the active tag?

1561925131
scientes
memcpy

1561925147
scientes
or just cast to [*]u8

1561926934
Sahnvour
scientes: is swizzling planned for vector types ?

1561927017
scientes
Sahnvour, that is what @shuffle does?

1561927027
scientes
and there is a comptime implementation so it will do it for consts

1561927030
scientes
otherwise you have to do it in llvm

1561927235
emekankurumeh[m]
is `@Vector(_, u32)` valid zig?

1561927239
Sahnvour
hmm right, I was thinking about syntactic sugar over shuffle then, I suppose

1561927290
scientes
emekankurumeh[m], no it isn't, but it takes any length of vector

1561927297
scientes
so I didn't know how else to say that

1561927336
Sahnvour
I've seen multiple times people writing code to mimic shader languages' swizzling (vec.xyz etc.), so there is interest in this feature

1561927359
scientes
well zig can handle that sort of things pretty well

1561928691
scientes
#define if(x) if((x) && rand())

1561928693
scientes
hahahahaha

1561929824
hspak
Is there anyway to speed up the compile time of zig (the compiler itself)? It looks like it's only using a single core by default

1561929854
emekankurumeh[m]
`make -j4`?

1561929896
hspak
That works lol, thanks

1561931263
scientes
hspak, -GNinja to cmake

1561931266
scientes
then use ninja

1561931311
emekankurumeh[m]
i use `ninja -j4` when building zig personally

1561931335
scientes
ninja automatically scales (however i scale it back so it doesn't bog down my computer)

1561935321
hryx
Sahnvour: thanks for looking into the windows CI problem! It's starting to go beyond my expertise and I'm not sure where to go from here

1561935384
hryx
how did you generate those  output files in your gist?

1561935486
Sahnvour
copy/pasted from visual studio debugger

1561935587
Sahnvour
it's especially unpractical because building a debug zig on windows requires a debug build of llvm which is a chore, but luckily I already had one

1561935617
hryx
oof, that sounds like it could take a while to set up

1561935653
Sahnvour
the llvm part takes around 2h on my machine iirc

1561935702
hryx
in these result_loc values, why are there +/- symbols? is it a diff?

1561935743
Sahnvour
I think the + is for struct variables that can be expanded to see the values of their members

1561935770
Sahnvour
I didn't expand everything obviously, but I hope there is some info that will be useful and maybe andrew will have an idea

1561935787
hryx
Ah, that makes sense. I can see how some are expanded, just not indented

1561935849
hryx
I may have to detour to a different issue till andrew returns

1561935862
scientes
hryx, what is he up to?

1561935881
hryx
I don't know

1561935887
scientes
oh ok

1561936558
hryx
has anyone found a lot of zig process sticking around for some reason?

1561936574
mikdusan
on windows?

1561936576
hryx
ps aux | grep zig-cache | wc -l <-- gives me 288

1561936577
hryx
linux

1561936636
hryx
the processes seem to be from build_runner.zig

1561936871
hryx
huh. most of them seem to be sleeping (status S). I don't really know what that means

1561936961
hryx
anyway, only asking because I have the vscode zig extension and I frequently find my system slows way down till I do a `killall zig`

1561936981
hryx
(I do zig fmt on save so it spawns a lot of processes)

1561937055
mikdusan
hmm this is just a guess. but zig-cache manifest file access is mediated by file locking.

1561937073
mikdusan
i wonder if one zig proc got suspended and didn't let the lock go. others waiting for it.

1561937205
hryx
hm, interesting. also notable is I have the nightly zig Snap package installed, although I almost only ever call my locally built one

1561937303
mikdusan
do you kill the procs already?

1561937351
hryx
yeah every once in a while

1561937361
hryx
I think I might have multiple issues happening, it's hard to tell

1561937432
mikdusan
next time if the proc is around use gdb to attach to one of the running procs

1561937448
hryx
well this is interesting. I just got an unreachable doing `zig fmt --stdin`. woof

1561937456
hryx
mikdusan: will do

1561937461
mikdusan
depending on how much has NOT changed in your source files, you might get a decent stack trace.

1561937672
emekankurumeh[m]
does anyone know of a way to output error notes (the extra info under error messages) in ir.cpp?

1561938070
hryx
mikdusan: very strange. My vscode extension is configured to call my git cloned zig for formatting, but these lingering processes are all from my Snap installation (which is in my PATH)

1561938085
hryx
not sure why/where those are even being called

1561939099
scientes
hryx, i'm using the same extension and don't have that problem

1561939108
scientes
but it isn't spawning zig fmt probably cause it can't find it

