1552182646
mikdusan
andrewrk: can u point me to a summary of issue with mtime; i’m assuming it relates to dependencies and saved hashes?

1552189055
andrewrk
emekankurumeh[m], mingw?

1552189130
andrewrk
mikdusan, I'll type up an issue for it tomorrow (and then solve it right away)

1552192640
emekankurumeh[m]
andrewrk, yeah

1552226278
Barabas
Hello, I have an import like this: const hf = @import("../algorithms/hash_functions.zig"); but zig complains with: error: import of file outside package path: '../algorithms/hash_functions.zig'

1552226298
Barabas
It used to work in the past, how do I import the other package?

1552226981
DutchGh0st
what do you think of an ArrayVec?

1552227018
DutchGh0st
sure, there is std.ArrayList, but that uses heap allocs, this uses an array

1552227032
Barabas
You can easily change the allocator, right?

1552227077
DutchGh0st
yes you can

1552227129
Barabas
What

1552227144
DutchGh0st
change the allocator

1552227161
Barabas
What's the difference between push and push_unchecked? push also assumes no error occurs, right?

1552227185
Barabas
(Sorry accidently pressed enter while typing before ^^)

1552227217
DutchGh0st
the difference is that push calls try_push, which uses push_unchecked

1552227250
DutchGh0st
actually I could remove the assert in push_unchecked, yeah

1552227310
DutchGh0st
not sure if there is a debug that only gets compiled in the final result if you build a debug build

1552227349
DutchGh0st
it'd be nice to have like a `this_assertion_gets_only_compiled_in_debug_builds_assert(true)`, with a shorter name ofc :D

1552227410
Barabas
That might be what debug does, I'm not sure.

1552227430
DutchGh0st
Im planning on also include reference Iterators, and by value Iterators, and to try and have

1552227530
Barabas
Can you by chance help me with my problem?

1552227532
Barabas
I have an import like this: const hf = @import("../algorithms/hash_functions.zig"); but zig complains with: error: import of file outside package path: '../algorithms/hash_functions.zig'

1552227562
DutchGh0st
what does your file structure look like?

1552227634
DutchGh0st
what if you copy over the hash_functions.zig into /src ?

1552227736
Barabas
It's here

1552227753
Barabas
and the failing import is in containers/hash_map.zig

1552227974
DutchGh0st
mhhh

1552228037
DutchGh0st
cant see the isssue this quickly...looked at how std does it, they `const std = @import("../std.zig");` from  zig/std/hash/crc.zig

1552228070
DutchGh0st
maybe there is something wrong with the paths?

1552228107
DutchGh0st
but I got to go, I'll be back in a couple hours, and read back the chat :)

1552228288
Barabas
Thanks for taking a look!

1552231987
mikdusan
this — zig test containers/hash_map.zig --main-pkg-path ..

1552232003
mikdusan
or — zig test containers/hash_map.zig --main-pkg-path .

1552232678
mikdusan
typo; this should clarify.

1552234046
Barabas
Thanks that worked.

1552236743
andrewrk
hmm that namespacing thing did have the unfortunate side effect of making unit tests slightly more cumbersome didn't it?

1552240816
mikdusan
andrewrk: git dynamically determines workspace root by searching up-tree from pwd. wonder if zig might consider similar - unless —main-pkg-path is specified, search up-tree for a package marker

1552240919
andrewrk
mikdusan, that's a good idea to keep in mind, especially considering the zig package manager is likely to have a declarative text file at package root dir\

1552245169
vegecode
Hello. Can anyone tell me how to do the equivalent of the c command line -DSOME_DEFINE using the zig build system? I need a compile time const to make a const value be different depending on which MCU is being targeted.

1552245203
andrewrk
vegecode, is this for a @cImport?

1552245254
vegecode
No I'm tryin to port the Tivaware C library to zig for the TI Tiva series microcontrollers. I want my repo to be a one stop build and debug for those guys.

1552245315
DutchGh0st
arrays can only be indexed trough usizes, right?>

1552245689
vegecode
andrewrk, For example, i want pub const my_define = 10; when TM4C123 is true, but pub const my_define = 11; otherwise. I see this done using @import("builtin") to distinguish operating systems, but can we add our own definitions to built-in to be referenced during compilation?

1552245902
vegecode
andrewrk, Another use case, the critical one for me,  is to include a different device specific header file depending on a flag passed in the build.

1552245942
andrewrk
vegecode, ah ok I understand the use case. there is some very basic functionality for this, but it's planned to be improved. let me find you an example

1552246039
andrewrk
for the second use case, have a look at

1552246058
andrewrk
@cImport takes an expression, which can be a block, and you can put any comptime logic in there

1552246162
vegecode
I don't want to import from a C header file. Translating the headers to zig with a sed script was the plan. Then I wanted to do the "usingnamespace ..." trick.

1552246262
vegecode
I tried translate-c but the header is filled with this: "#define REG_A (*((volatile *uint32_t)0x12345678))" and they don't translate well.

1552246355
kristate
vegecode: are you referring to build.zig ?

1552246362
andrewrk
vegecode, have a look at

1552246388
andrewrk
vegecode, it's not well tested but maybe can be a solution for now

1552246427
kristate
andrewrk: does addBuildOption also get passed-through to zig cc ?

1552246443
kristate
or would that require an extra addCSourceFile("foo.c", [][]const u8{});

1552246446
andrewrk
no it writes a .zig file to disk and then maps it in with --pkg-begin/--pkg-end

1552246467
vegecode
andrewrk, That is exactly what I was looking for, thanks.

1552246489
vegecode
kristate, I am referring to build.zig. I'm not using any C files at all.

1552246494
vegecode
Trying not to anyways

1552246512
vegecode
I looked in that repo, I just didn't recognize it when I saw it. Thanks.

1552246536
andrewrk
vegecode, apologies if it breaks, it's not currently covered by tests

1552246568
andrewrk
but this use case is important, support will only improve in the future

1552246611
vegecode
Since I'm here, I had another question that I was unable to figure out myself, maybe an issue is needed.

1552246648
vegecode
Apparently llvm (or at least clang), can take a command line argument -mfpu=fpv4-sp-d16 or whatever the fpu model is and also -mfloat-abi=hard

1552246696
vegecode
and generate code that uses the fpu on a cortex m4 (and other mcus)

1552246734
vegecode
Looking at the clang soure code, I'm not experienced with C++ at all, I couldn't trace the command line option down to where llvm actually gets it.

1552246754
kristate
try -mllvm

1552246768
vegecode


1552246787
vegecode
I don't mind adding the functionality to Zig if required. -mllvm didn't do anything

1552246806
DutchGh0st
uh

1552246821
DutchGh0st
I dont get why my code doesn't compile

1552246851
andrewrk
vegecode, what is your target?

1552246868
andrewrk
specifically what are you passing for the ABI of the target?

1552246873
DutchGh0st
fn next(this: *@This()) ?*const T { <--- complains that I pass 0 args when I call it like `iter.next().?`

1552246902
vegecode
andrewrk, My example is in the link. I've tried armv7em-freestanding-eabi, armv7em-freestanding-eabihf

1552246924
vegecode
I've tried -mllvm-mfloat-abi=hard -mllvm-mfpu=fpv4-sp-d16

1552246932
vegecode
All different combos

1552246952
kristate
-mllvm requires a space

1552246979
andrewrk
vegecode, can you open an issue for this? even if you get it working with -mllvm, that's always a sort of last ditch effort workaround

1552247000
vegecode
kristate, Invalid argument: -mfpu=fpv4-sp-d16

1552247009
vegecode
That is what godbolt gives me when I put a space between them

1552247023
vegecode
I figured since it didn't complain without a space that must be the correct way

1552247055
DutchGh0st


1552247094
andrewrk
DutchGh0st, did you know you can give a block to comptime? comptime { ... }

1552247107
DutchGh0st
oops

1552247111
DutchGh0st
:D

1552247117
vegecode
I will open an issue when my kids go back to bed. Naptime is over...

1552247146
DutchGh0st
but it still doesn't compile haha, it complains that the next() method on the struct returned from iter() needs 1 argument

1552247152
vegecode
Also, just throwing this out there, more calling conventions are needed for embedded. Clang can do IRQ, FIQ interrupt calling conventions on arm.

1552247153
DutchGh0st
but dont I give it one argument trough the dot notation?

1552247177
vegecode
I'll just have to do nakedcc with manual prologue and epilogue asm blocks

1552247183
vegecode
Thanks again for being so helpful

1552247227
emekankurumeh[m]
would we make calling conventions keywords or go the rust route of having them as strings?

1552247275
kristate
vegecode: try dropping the second m from -mfloat

1552247310
andrewrk
emekankurumeh[m],

1552247366
andrewrk
DutchGh0st, I'm looking at your code, just a moment

1552247502
DutchGh0st
thanks :), np

1552247534
kristate
vegecode: hopefully you check the logs -- it looks like godbolt escapes/removes -mllvm from comp options

1552247576
kristate
so adding -mllvm -float-abi=hard becomes -float-abi=hard

1552247595
DutchGh0st
is there a way to have multiple variables with the same name in the same scope? this is usefull when you you have function signatures like `fn ...(self: *Self) ...`, when you have nested functions where the outer function returns a struct

1552247673
andrewrk
DutchGh0st, nope, it's not possible, so you'll have to come up with different names

1552247698
DutchGh0st
ah, thats why I used `this` within the iter struct

1552248204
DutchGh0st
ohhh wait

1552248221
DutchGh0st
stop searching andrewrk

1552248230
DutchGh0st
I never initted the struct \o/

1552248280
andrewrk
DutchGh0st, that's fine, I got distracted with this anyway:

1552248333
DutchGh0st
hehe

1552248491
schme245
Zig shower thought of the day: it seems to me that `var` and `const` are overloaded, since they are used to signify both "this variable will (not) be reassigned" and "this memory will (not) be modified"

1552248517
schme245
has this been discussed before, and is anything under consideration for separating these two concepts? (different keywords perhaps?)

1552248525
andrewrk
schme245, I think `let` is still on the table

1552248576
andrewrk
it's a tiny problem that `var` is easier to type than `const`

1552248660
schme245
so `let` would replace `const`, but the semantics would otherwise be the same?

1552248758
schme245
or something more Rust-ish (`let mut` and all that jazz)?

1552248759
DutchGh0st
what about `var` and `var mut` ?

1552248767
andrewrk
DutchGh0st, your `iter` variable is a `type`. so `iter.next()` is actually just a namespace lookup, calling a static function with no args

1552248796
andrewrk
schme245, yes that's what I was suggesting just now. `let mut` would reverse the "default" of memory const-ness which I'm not sure is a good idea for zig

1552248851
DutchGh0st
error: cannot store runtime value in compile time variable:  const end = @intToPtr(*const T, @ptrToInt(start) + self.len());

1552248948
schme245
an example: in `var array = ArrayList(u8).init(allocator); try array.append(1);`, it would be nice to be able to say "`array` will always refer to the same array (so `array = ...` would be a compile error), but the memory might still be modifed (so you can append stuff)

1552248957
schme245
right now that's not possible to express, right?

1552249039
andrewrk
you could express it like this: `var array_memory = ArrayList(u8).init(allocator); const array = &array_memory; try array.append(1);`

1552249075
schme245
ooh, I kinda like that!

1552249108
DutchGh0st
is @ptrToInt comptime only?

1552249124
schme245
no

1552249138
DutchGh0st
huh

1552249162
andrewrk
DutchGh0st, I think it's a smell that all your tests are in comptime blocks

1552249173
andrewrk
why wouldn't they work at runtime?

1552249180
DutchGh0st
oh they would

1552249189
DutchGh0st
but I want everything to work at both comp and runtime

1552249210
andrewrk
ah. I usually in this case put the test in a function and then: doTheTest(); comptime doTheTest();

1552249275
DutchGh0st
still unable to evaluate const expression...

1552249340
DutchGh0st
it goes bad on this line:

1552249620
DutchGh0st
oh, right, instead of `type` the return type of iter() becomes `build_iter(*const T)`

1552249626
DutchGh0st


1552250537
DutchGh0st
what is

1552250823
andrewrk
first, try to use a slice or array rather than a pointer

1552250829
andrewrk
and increment the index

1552250839
andrewrk
otherwise, you'll need an unknown length pointer, and you can use += 1

1552250878
DutchGh0st
well Im trying to implement iterating using just 2 ptr's, a start and end

1552250897
DutchGh0st
but it seems to go wrong somewhere, and I dont know where

1552250997
DutchGh0st


1552251111
andrewrk
mikdusan, here's part 1 of the summary of caching issue:

1552251173
DutchGh0st
and Im just incrementing the pointer with `ptr = @intToPtr(TYPE, @ptrToInt(ptr) + 1)`

1552251322
andrewrk
@intToPtr / @ptrToInt is a huge code smell if you're not doing something directly with hardware

1552251344
andrewrk
almost certainly incorrect if you're making a generic data structure

1552251418
DutchGh0st
why, a pointer is just an address, which is just a number

1552251455
DutchGh0st
and looking at my screenshot, the pointers indeed all go up by 1 with respect to the previous

1552251710
andrewrk
the compiler loses some type information when you do that. for example the alignment and the const-ness

1552251735
andrewrk
why don't you just make your ptr be a [*] instead of * and then you can do  + 1

1552251750
andrewrk
or use @ptrCast

1552251855
DutchGh0st
oh wait, I bet what it is

1552251858
DutchGh0st
haha

1552251864
DutchGh0st
its adding one to the pointer

1552251868
DutchGh0st
not sizeOf(T)

1552251871
DutchGh0st
duh

1552253126
andrewrk
mikdusan, part 2:

1552257779
mikdusan
andrewrk: #2045; am I correct to assume (1) mtime timewarps is not something you care about supporting except maybe a “timewarp detected” warning message. ie we assume that mtime may have low precision but it can be relied on to increase and never go backwards

1552257871
Amsel
What is the rationale behind "error: expected type 'u3', found 'u32'" for "u5(0x01) << s;" ? If s would be u3 I could still shift 7 positions?

1552258762
mikdusan
and (2) the main issue with 1.0 second granularity is the race that exists for { edit-source, save, build } within the 1-second time frame and ends up in a “nothing to do” situation if the main check is: do_nothing when “!(src.mtime > obj.mtime)”

