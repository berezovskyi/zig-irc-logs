1555721538
daurnimator
time consuming idea: writing a PEG system in zig

1555721725
daurnimator
inspired by ljmccarthy's paste a couple of days ago (

1555721764
daurnimator
hryx: I know you like PEGs...

1555722717
hryx
daurnimator: you know it. I like Lua, I like lpeg, I like zig... I like zpeg?

1555722736
daurnimator
hryx: sure...

1555722768
daurnimator
hryx: though I would use it to implement some things that should probably be in the standard library. so I don't think it really gets to have a name :P

1555722769
hryx
that would be a cool project

1555722966
daurnimator
If I undertook it. It would probably be mostly done by porting lpeg

1555722979
daurnimator
I wonder how much translate-c can do....

1555723004
hryx
There's only one way to find out

1555727862
hryx
if anyone is familiar with stdlib allocators and feels like checking out a tiny PR, would love to know if this was correct or not:

1555727949
hryx
it's not blocking the recursive parser rewrite, but would helpe debug it

1555727954
hryx
*help

1555729872
daurnimator
hryx: huh.... if we had a PEG in the std library.... could/should we use it to parse zig itself?

1555731680
hryx
daurnimator: I don't know enough about software parsers to have a valid opinion. but I feel like a bespoke parser fits Zig because the language is SO simple â€” wouldn't it be more performant than a geenric parser library?

1555731734
hryx
*generic. not sure of that makes sense

1555731802
daurnimator
hryx: maybe. but I wouldn't expect it to be more than a factor of 2-3x.

1555731988
hryx
daurnimator: in the spirit of zig supporting other language communities (especially C) I think a PEG in zig would be a great project. so if you created that, I def support it!!

1555732025
hryx
and would love to be part of it if I can help at all

1555732060
hryx
regardess of performance factors, heh :P

1555740737
andrewrk
emekankurumeh[m], you're correct it's planned to have zig fmt fix whitespace

1555740754
andrewrk
I think nobody including me has gotten around to doing that

1555740984
hryx
dang I was way off then. would it be zig fmt, or some other part of the toolchain? hm

1555741062
andrewrk
hryx, honestly probably the tokenizer would just relax its restrictions

1555741083
hryx
that seems like the right approach

1555741097
hryx
Token.Id.FixThis or something

1555741100
hryx
bleh

1555741139
hryx
hope your talk preps are going well andrewrk. I submitted a PR related to the recursive rewrite, but it might be misguided

1555741167
andrewrk
hryx, I have a couple minutes, maybe I can help

1555741180
hryx
awesome, that would be great andrew

1555741200
hryx
#2310

1555741466
andrewrk
hryx, ah right, I looked at this on my phone earlier. did this help you diagnose the issue with the parser?

1555741487
hryx
yessir, it came about when I was debugging that

1555741505
andrewrk
what was the issue?

1555741540
hryx
my original cause to investigate was: I was suspicious at 1 deallocation but 0 bytes freed

1555741566
hryx
I added debug printing everytime `shrinkFn` is called

1555741588
hryx
Also added some stack trace from the FailingAllocator

1555741606
hryx
I think my methods are currently crude though. I need to figure out a more sophisticated troubleshooting approache

1555741618
andrewrk
but did you figure out why the tests were failing?

1555741630
hryx
Not yet :<

1555741649
andrewrk
maybe I can take a quick peek at that

1555741650
hryx
So maybe I should take another day or two to look into it

1555741652
hryx
ah, ok

1555741680
andrewrk
"deallocations" is kind of a weird concept with the new allocator API. I'm not sure what that field is used for other than diagnostics

1555741705
andrewrk
I think to keep the previous concept of a "deallocation", it would increment when the new_size == 0

1555741708
hryx
that was my though too. maybe it doesn't map well to realloc/shrink

1555741718
hryx
ooh interesting

1555741745
andrewrk
and there would be a new field "allocations" which increments when the old_size.len == 0

1555741769
hryx
so does the old "deallocations" correspond with "free"? i.e. len == 0?

1555741774
andrewrk
which no longer is identical to index. `index` is precisely: the number of realloc() that will succeed before it will fail

1555741783
hryx
ranther than "size == less than old size"

1555741792
andrewrk
or rather index just counts reallocs(), and fail index is  the number of realloc() that will succeed before it will fail

1555741801
hryx
ahhhhh

1555741829
hryx
ok yeah, since this FailingAllocator seems rather specific to parser_test.zig, it's worth a reconsideration

1555741831
andrewrk
the point of "index" is test coverage. the point of "allocations"/"deallocations" is to print helpful text

1555741884
hryx
Ok, I have a game dev meetup tomorrow all day at my warehouse. I'll use the time to think more deeply about that interface

1555741893
hryx
cc tyler569 BTW, tomorrow in san francisco

1555741898
andrewrk
is your wip branch available somewhere?

1555741906
hryx
ah yes andrewrk one sec

1555741911
andrewrk
oh neat do we have irc members meeting in person?

1555741913
hryx


1555741937
hryx
yeah, tyler and I met up in person in SF this week! there are some smart folx in the zig world

1555741956
hryx
tyler569 is working on Zig inside an OS like you

1555741992
hryx
andrewrk: would it help if I made a WIP pull request of that branch? I didn't want to create noise on the repo until it was close to review-ready

1555742011
andrewrk
nope! I'm doing git remote add hryx

1555742030
hryx
s i c k

1555742114
hryx
One notabe difference between my branch and master stage2: only the Tree uses the arena allocator. In master, the custom stack also uses it

1555742140
hryx
However, my experiments with using a fake stack (and trying to abuse it) reveal nothing about what my current branch is doing wrong.

1555742160
andrewrk
what is your test?

1555742165
andrewrk
./zig test ../std/zig/parser_test.zig --override-std-dir ../std --test-filter "zig fmt"

1555742170
andrewrk
Test 1/119 zig fmt: allowzero pointer...error: NotImplemented

1555742172
hryx
ah, I did not commit my custom test one second

1555742248
hryx


1555742283
hryx
sorry, my usual paste dumpster (hatstebin) acting funny right now. If you add that to the top of paser_test.zig you can see

1555742321
hryx
Funny thing is, if you change the spacing to non-canonical (so that zig fmt will change it), you will get a normal fmt test failure, not the same issue

1555742343
emekankurumeh[m]
oh hryx did you ever figure which was more correct?

1555742392
hryx
no andrewrk! I asked that because I wasn't sure if it is semantically meaningful

1555742425
andrewrk
hryx, Test 1/1 zig fmt: slim boi...error: NotImplemented

1555742439
andrewrk
is what what you're expecting?

1555742456
hryx
(sorry, since hastebin isn't loading -- I think you were linking to the "to `return try` or not to 1return try`" question)

1555742472
hryx
andrewrk: no, I get a different error. I'll paste in 1 sec

1555742484
andrewrk
do you have unpushed commits to the branch?

1555742497
andrewrk
or local changes

1555742514
andrewrk
or is stage2-recursive-parser the wrong branch

1555742546
hryx
Facepalm, I do have uncomitted changes. Gimme like 3 minutes and I'll sort that out!

1555742664
andrewrk
no worries

1555742672
andrewrk
I'll need to get to bed soon though

1555742736
hryx
no worrie homie

1555742761
hryx
It looks like with my latest changes, I'm also getting error.NotImplemented andrewrk. I'll have to look into it tomorrow!

1555742789
andrewrk
ok sounds good. this weekend/next week are going to be crazy for me but after that I'd be happy to help if you get stuck

1555742790
hryx
I'll report back once I have a reprocable situation :P

1555742799
hryx
Of course, don't even think about it for now

1555742808
hryx
excited to see the recorded talk

1555742822
andrewrk
I did a practice run with a few people, and got some good feedback

1555742844
andrewrk
I was hoping to be done but it seems I have a lot to improve... so be it

1555742850
hryx
User feedback. good for public speaking, good for game dev too.

1555742857
hryx
don't be afraid to revise

1555742888
andrewrk
good night

1555742888
hryx
And you're lucky if you have friends who are capable of giving you quality feedback on your work

1555742891
hryx
night!

1555743993
hryx
sorry emekankurumeh[m] I tagged the wrong nick. See my previous response ^ It's still an open question for me

1555780033
tgschultz
No wonder my old allocator broke in 0.4.0, the rewrite for the allocator API change never calls HeapFree

1555780376
mikdusan
does exporting a packed struct to C define it in C or just forward declare?

1555780563
andrewrk
tgschultz, I mistakenly assumed HeapRealloc to 0 would free, and didn't test it

1555780623
andrewrk
mikdusan, packed structs are allowed to participate in C ABI. I don't think that's covered by tests yet

1555780631
tgschultz
Freeing when new_size == 0 definitely fixes my problems, but I haven't been able to find documentation that says one way or the other what ReAlloc's behavior is with dwSize = 0

1555780953
mikdusan
andrewrk: what i mean is do I have to manually define `struct Foo`? this is what it looks like in .h -->

1555781020
andrewrk
I think that's a missing feature from h file generation

1555781060
andrewrk
h file generation might be one of the things we consider implementing in userland

1555781104
mikdusan
ok so to make sure i have a handle on this, wrt `.d parser` and stage1 now being a hybrid,

1555781209
mikdusan
i should now be able to implement .d parser in .zig, then possibly create a struct/handle in C to track a heap-allocated Zig structure and use it that way from C land?

1555781318
andrewrk
yeah that'll work fine

1555781330
andrewrk
you get to decide where the API boundry will be

1555781355
andrewrk
you could also have the zig code call the cache_* functions directly

1555781867
tgschultz
Am I correct that the allocator API no longer requires that shrink return memory with the same base address as it was passed?

1555782592
andrewrk
tgschultz, I don't think that was ever a requirement, but you're correct that it's certainly not a requirement now

1555782610
andrewrk
the important distinction of shrink is that it must not fail

1555782837
tgschultz
yeah, I seem to have remembered the old guarantee incorrectly.

1555786791
mikdusan
andrewrk: stage0/stage1 compiler uses -std=c++11 in command line. ok to use c++11 feature to mark a function as [[noreturn]] ?

1555794604
andrewrk
mikdusan, in general, for stage0/1 we want to support a wide range of compilers. remember the whole point of maintaining stage0/1 is bootstrapping

1555794650
andrewrk
once self-hosted is what we ship, stage1 won't change very much, and changes that make it work on older compilers will be improvements, since they shorten the bootstrapping process

1555794941
mikdusan
we'll probably need either [[noreturn]] or  ATTRIBUTE_NORETURN defined in userland.h if the idea is to use stage2_panic in shims.

1555795010
mikdusan
i'm uncertain if userland.h should avoid including util.hpp for ATTRIBUTE_NORETURN because it seems like userland.h should be as thin as possible

1555796638
suirad
with c-translate being moved to zig/userland, it seems logical at that point to assume we will be able to `try @cImport({}) catch |e| {@panic("{}", e);}`later on?

1555796734
suirad
andrewrk: also, is feature-set of the final stage-1 figured out?

1555798403
andrewrk
suirad, I think you misunderstand what it means for translate-c to be implemented in userland

1555798416
andrewrk
ahh, "userland" is overloaded now.

1555798426
andrewrk
it'll be implemented in zig, but still in the compiler

1555798541
suirad
sure, however because the compiler evaluates comptime, @cImport or even @import itself could potentially return errors and be handled. hypothetically

1555798801
suirad
I

1555798884
andrewrk
mikdusan, that's fine we can split off the stuff from util.hpp into another .h file

1555798900
mikdusan
ok.

1555798904
andrewrk
util.hpp is c++; userland.h is C, that's one reason it can't include util.hpp

1555798947
suirad
I'm sure someone more creative could think of another use case. The only realistic one that stands out for me would be catching the @cImport error, checking for a specific known missing file ("whatever.h wasnt found") and printing out something like "If you are missing whatever.h, you probably want to install examplelib and run again"

