1558828876
shritesh
Found the problem

1558828935
shritesh
I had stdout_file a const and stream a var.

1558828944
shritesh
I looked at the guess example

1558828956
shritesh
It has stdout_file be a var

1558828984
shritesh
And stdout a const pointer

1558829001
scientes
the error should be better than that.....

1558829017
shritesh
I still don’t understand why it causes the error or even compiles

1558829056
shritesh
Agreed

1558829340
shritesh
Should I file an issue for this?

1558829476
scientes
yes

1558829492
scientes
better though to write a patch

1558829584
shritesh
Looks like it’s related to

1558829973
shritesh
Filed

1558830067
scientes
i think you got the const/var backwards

1558830200
shritesh
In the issue? What I’ve written does reproduce the problem.

1558831017
scientes
oh ok

1558831028
scientes
its strange that you have to use const

1558831031
scientes
that is super strange

1558831188
shritesh
Using const without taking the reference is a compile error, using var without taking the reference is runtime EBADF and both const and var with the reference do the right thing.

1558834120
andrewrk
shritesh, #2555 is a duplicate of #591

1558834256
shritesh
I’ll comment with a reference to 591 and close it.

1558834412
andrewrk
man. #2380 turned out to be a way way bigger issue than I thought it would be. by like a factor of 10 days

1558834434
shachaf
You were expecting it to take x days and it took 10x days^2?

1558834474
andrewrk
1 day => 10 days

1558834571
shritesh
I like how it’ll make working on WASI simpler.

1558836133
daurnimator
andrewrk: .dockerignore is also a thing.

1558836250
andrewrk
.dockerignore is right out

1558836283
daurnimator
right.... (and I agree) but I feel like the reasons not to are also the reasons not create a .gitignore

1558846619
ijneb
hryx: feelings on response in issue?

1558846876
hryx
ijneb: just responded - I'm pretty sure it's settled but surely it would be fine to bring up counterarguments

1558846931
ijneb
I see, decided on closing it

1558846934
ijneb
ty

1558846945
hryx
sure thing

1558847762
Arghblarg
Greetings all

1558847790
Arghblarg
Is it allowed to ask zig n00b questions here?

1558847893
hryx
Arghblarg: yes! many of us are noobs too

1558848086
Arghblarg
:) OK. Well, I'm trying to understand how to use stdin/stdout/stderr for console-type apps...

1558848106
Arghblarg
.. it seems zig doesn't really expose them in a traditional way from entry to main().

1558848200
Arghblarg
From digging online, I see that it's possible to expose stdout  with formatting capabilities by doing the following (inline inside main())

1558848224
Arghblarg
const f: os.File = try std.io.getStdOut();

1558848236
Arghblarg
var fos: os.File.OutStream = f.outStream();

1558848250
Arghblarg
var fs: *os.File.OutStream.Stream = &fos.stream;

1558848264
Arghblarg
try fs.print("Printing from stdOut(): {}\n", "success");

1558848355
Arghblarg
.. however putting that into a function I am having difficulty. If one wraps those three os.File setup calls into a function which returns !*os.File.OutStream.Stream, the handle is invalid (I suspect the underlying 'f', or 'fos' go out of scope on return and so are invalid)

1558848391
Arghblarg
I basically want to make this a helper func rather than doing it inline within main(), something like

1558848423
Arghblarg
var stdout = try getStdOut(); // !*os.File.OutStream.Stream

1558848477
Arghblarg
... I tried doing the three setup vars as globals, but one can't call std.io.getStdOut() with 'try' outside of a func, so how do I get these vars to live beyond my setup func?

1558848538
Arghblarg
(BTW I know I don't have to specify explicit types everywhere but it helped me to see/understand what type I'm getting at each step)

1558848716
Arghblarg
Apologies if it's tough to see here in chat.. I should make a pastebin link to the demo program I suppose.

1558848830
hryx
pastebin link is probably preferable for readability, yeah

1558849123
Arghblarg
OK, here:

1558849236
Arghblarg
TL;DR 'stdout' set up inline within main() works, but 'stdout2' set up the same way within helper fn stdOut() does not.

1558849307
hryx
Arghblarg: this actually just came up today in an issue:

1558849359
hryx
this is unfortunately a slight design flaw that currently makes it easy to write something broken

1558849384
Arghblarg
! Heh. OK, so I'm not (completely) crazy. Good to know. :)

1558849386
hryx
it's a subtle issue that I'm not super qualified to explain. But it is planned to be addressed:

1558849397
Arghblarg
Cool.

1558849420
hryx
welcome BTW :>

1558849439
Arghblarg
As a newbie I'd say this sort of stdin/stdout/stderr setup, is a very good candidate for the tutorials (once it's working reliably of course)

1558849519
Arghblarg
Love zig so far though, just from reading the lang spec and watching the designer's tuts online. So much promise, coming from a long-time C/embedded programmer I love the idea.

1558849598
Arghblarg
That reminds me I need to donate.

1558849855
ijneb
you may want to wait

1558849906
ijneb
If Andrew gets accepted for GitHub sponsors, they match your contribution afaik

1558849974
Arghblarg
Ah, that would be good

1558850163
hryx
or do Patreon until that's available!

1558850175
hryx


1558850238
Arghblarg
Oh, cool OK didn't know he was on Patreon. Thanks

1558850292
hryx
yep

1558850811
Arghblarg
\o/ Official Patron!

1558850905
Arghblarg
Has anyone tried building the compiler from source? I also posted on the mailing list, strange issue...

1558850935
ijneb
Yeah, I compile from source

1558850970
Arghblarg
No idea why my stage1 compiler ended up as this huge thing.. it works, but haven't dug into the cause yet

1558851087
Arghblarg
Sorry bad link, let's try again:

1558851106
Arghblarg
Bleah, IRC is munging it I guess.

1558851231
ijneb
I don't see anything new in the mailing list

1558851259
hryx
stage1 comes out normal size for me. are you following the exact directions from the readme? what OS? llvm version is correct?

1558851386
ijneb
How big does yours come out to be?

1558851449
Arghblarg
1.6GB

1558851505
Arghblarg
AFAIK I am following the exact directions.. I had to upgrade LLVM beforehand to v8 (?) and I'm on Funtoo x86_64 so perhaps that throws some wrenches into things.

1558851603
Arghblarg
(My post was "Stage 1 zig binary is 1.6GB", 11 days ago)

1558851646
ijneb
oh I did see that

1558851729
Arghblarg
Meh, not worth others wasting their time to diagnose unless I can reproduce it. I had to clean up my box a bit last week (it's back to LLVM 7 for now) so I'll try again sometime next week.

1558851902
ijneb
I'm not really sure what could've caused that

1558851934
ijneb
did you make sure to build llvm8 in release mode

1558852022
ijneb
with `-DCMAKE_BUILD_TYPE=Release`, not sure if it could make any difference

1558852189
Arghblarg
I didn't do that, no. I'll note that and try again to see what occurs. Thanks!

1558852287
ijneb
sounds good, np

1558853015
Arghblarg
Thanks all, g'nite

1558884720
fengb
Should the compiler downcast error unions?

1558884730
fengb
error: incompatible types: '[]u8' and '@typeOf(std.mem.Allocator.alignedAlloc).ReturnType.ErrorSet![]align(4096) u8'

1558884773
fengb
The fix is simply changing `return alignedAlloc()` to `return try alignedAlloc()`, but it seems like the compiler could be smart enough to do that for me

1558884858
fengb
Or maybe we shouldn't return bare error unions at all? Glancing at that line, it's not obvious it can error out

1558884879
mikdusan
if you do that, then looking at the code no longer tells someone if there is an error to be handled

1558884905
fengb
Yep now I see that, but I could previously return the union because I was ignoring alignment

1558884916
andrewrk
fengb, that looks like a peer cast rather than an implicit cast

1558884926
andrewrk


1558885043
andrewrk
anyway I do think that implicit cast should work, except the source type seems under-aligned, right?

1558885059
fengb
Hmm, it doesn't talk about error unions -- e.g. ![]u8 and ![]align(4096)u8

1558885062
andrewrk
you can't give []u8 when []align(4096) u8 is expected

1558885067
fengb
Opposite

1558885076
fengb
I was returning ![]align(4096) u8

1558885082
fengb
And the compiler didn't like it

1558885085
andrewrk
ah well you certainly can't give E!T where T is expected

1558885089
fengb
But it was fine if I wrapped it with a try

1558885111
andrewrk
oh I see the function has a possible error as well. yeah that should work

1558885132
andrewrk
idk if there's an issue open for that

1558885137
fengb
Okay, I can create one

1558885146
fengb
To mikdusan's point, I kinda dislike returning the bare error union since it's not quite clear the return can error

1558885170
fengb
So I'm happy with the workaround but maybe we can think about the semantics a bit

1558885174
andrewrk
sounds good

1558901702
gamester
I got bit by implicit cast from array to slice. I was supposed do this: std.mem.eql(u8, std.mem.toSlice(u8, arrayString1), std.mem.toSlice(u8, arrayString2)); I passed one array in without converting it to a slice.

1558901722
gamester
toSliceConst rather, same thing though

1558901939
gamester
I mean t std.mem.eql(u8, std.mem.toSlice(u8, &arrayString1), std.mem.toSlice(u8, &arrayString2))

1558902034
marijnfs
what happens then

1558902303
andrewrk
gamester, that's going to be fixed with

1558902322
gamester
okay, cool

1558902573
gamester
marijnfs: toSlice will count the length of a zero-terminated string and return a slice for that string. An implicit cast from array to slice simply makes the slice the length of the array, even though the string inside the array is smaller

1558902595
gamester
marijnfs: so std.mem.eql gave me false when it should have returned true

1558902696
marijnfs
gamester: achso, yeah so thats useful to deal with cstrings?

1558902797
gamester
yeah, toSlice and toSliceConst

1558903095
gamester
marijnfs: I see that there's also cstr.zig in the standard library. I could have used std.cstr.cmp(s1, s2)

1558903160
tgschultz
weird that they're just in the mem namespace with no indication whatsoever that they're for dealing with null terminated arrays.

1558903174
andrewrk
tgschultz, the types will serve that purpose after 265

1558903226
andrewrk
but you're correct

1558903298
tgschultz
andrewrk, if we're going with "decl" instead of "def" then I should update std.meta to match that terminology.

1558903360
andrewrk
tgschultz, sounds good. I think "decl" makes sense since it applies to variables and constants

1558903481
tgschultz
just so I'm sure we're on the same page: "decl" => namespaced constants, variables, function definitions, etc. and does not include struct instance fields?

1558903511
andrewrk
correct

1558903533
tgschultz
k, should be an easy PR, I'll put it on my to-do list.

1558903537
andrewrk
thanks

1558903557
andrewrk
I don't think my big wip branch touches std.meta

1558903854
emekankurumeh[m]
can we please allow for inferred error sets to be empty?

1558903919
tgschultz
andrewrk: typeInfo should also be updated, I'll see if I can manage that

1558904024
emekankurumeh[m]
typeInfo is also wrong in some cases

1558904055
andrewrk
emekankurumeh[m], I think that's probably a good change

1558904068
andrewrk
I believe tgschultz would agree, yeah?

1558904100
tgschultz
whole heartedly.

1558904177
tgschultz
emekankurumeh[m] I haven't encountered any instances of TypeInfo being incorrect personally. Incomplete in some spots, but not wrong. Is there any issue?

1558904425
emekankurumeh[m]
i was trying to do some meta-programming in zig to see if a function was exported or not in a struct/ see the calling convention but in the FnDef the calling convention was always unspecified and `is_export` and `is_extern` were always false, no matter what i did

1558904577
tgschultz
well that explains it, I've never inspected export, extern, or cc.

1558904649
marijnfs_
dammit I was trying to integrate cudnn (deep learning library), which has a c interface, but seems like internally it wants to link to c++ stuff, std::string etc.

1558904861
andrewrk
that can work

1558904873
andrewrk
the self hosted compiler build.zig might have some hints

1558904894
andrewrk
this will be a common use case soon and should get easier as zig matures

1558905070
emekankurumeh[m]
on an unrelated note calling meta.definitionInfo on a varargs function crashes the compiler

1558905132
andrewrk
it's problematic that @typeInfo returns definitions. that might  go away

1558905192
emekankurumeh[m]
how so?

1558905889
tgschultz
yeah, I'm curous too.

1558907589
marijnfs_
what is a good way to deal with c functions that return statusses?

1558907599
marijnfs_
E.g. i can't defer cudnnDestroy because it returns a value

1558907630
marijnfs_
also using the c enums makes it an integer, which i can't compare to the actual returned value becuase it has the proper type

1558907892
scientes
marijnfs_, what do you mean by a "statusss"

1558907921
scientes
marijnfs_, you can get values in a defer, just use a block

1558907931
scientes
defer { a = f(); }

1558908680
marijnfs_
scientes: ah that would work

1558908804
marijnfs_
well in this c-header there is a typedef enum named cudnnStatus_t, which functions return

1558908843
marijnfs_
but if you would do an assert(somefunc() == c.CUDNN_STATUS_SUCCESS) it complains, saying the latter part is an int and can't be cast to a cudnnStatus_t

1558908851
marijnfs_
not implicitly as least

1558909954
tgschultz
@enumToInt and/or @intToEnum

1558910806
hryx
I'm implementing local var decls in userland translate-c but running into a little problem. Here's what I have so far:

1558910835
hryx
it builds fine, but running it on a test case results in an infinite recursive walk of the ast

1558910885
hryx
I suspect it has to do with the values I'm setting in the returned TransResult in translate_c.zig -- I don't understand that struct super well yet

1558910898
andrewrk
hryx, I think the c++ version has some detection of hitting the same function decl and avoiding analysing it again

1558910911
hryx
oh sweet, good call

1558910933
andrewrk
hmm, looks like that's already in the zig version

1558910938
andrewrk
if (try c.decl_table.put(@ptrToInt(fn_decl), {})) |_| return; // Avoid processing this decl twice

1558910987
hryx
shouldn't it not hit that in this case, since this is a local var decl, not a fn decl?

1558911057
hryx
Ohh, I'm seeing something in the C++ one now. trans_scope_var_create()

1558911092
hryx
I didn't create a new scope for the var decl. I assume that's needed?

1558911155
andrewrk
that will probably be needed but I don't see why not having it would cause an infinite loop

1558911163
andrewrk
your code looks fine to me at first glance

1558912376
hoppetosse
I've been following Bob Nystrom's crafting interpreter series in zig, finally caught up with the lessons

1558912382
hoppetosse
In case anyone's interested:

1558912433
hoppetosse
I had some weird issues with the tagged unions and the BufferOutStream when making the output buffer for wasm

1558912480
hoppetosse
Finally got it all going though =)

1558912552
hoppetosse
shoutout to shritesh for mentioning the OutStream copy issues somewhere, wouldn't have managed without

