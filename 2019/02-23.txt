1550905677
companion_cube
I'm watching the video on implementing an allocator, it's pretty cool (esp. @fieldOf)

1550905693
companion_cube
I'm a bit surprised the `if` doesn't require {}, even after goto fail

1550905843
companion_cube
(or `while`)

1550919744
dec05eba
@fieldOf is cool but im afraid it will cause the same issues reflection in java does where IDE's cant find references to variables because of that. Even intellij idea cant find references to variables when using reflection in java

1550919878
dec05eba
but perhaps not, because unlike java, zig only allows compile time known string for fieldOf

1550926164
andrewrk
dec05eba, I believe companion_cube means @fieldParentPtr

1550926202
andrewrk
however your point is still relevant for @field

1550934737
companion_cube
sorry, yes, fieldParentPtr

1550934757
companion_cube
I got disconnected apparently, grr

1550935122
scientes
@fieldParentPtr is awesome

1550935131
scientes
it is impossible in go and rust

1550935342
companion_cube
I tried to find docs on `interfaces` (like Allocator, apparently?) but it's "todo" ^^

1550935521
scientes
companion_cube, documentation for the std lib is not written yet

1550935528
scientes
only the language

1550935589
companion_cube
I mean, the concept of interfaces, if there's one

1550935611
scientes
its not the same as go interfaces

1550935614
tgschultz
Also, interfaces might undergo a significant change in the near future (after coroutine rewrite). The current paradigm doesn't optimize well and causes headache related to errorsets.

1550935654
companion_cube
hmm, ok

1550935676
tgschultz
basically we'll be going from intrusive pointer to vtable+pointer.

1550935685
companion_cube
is it this C-like idea that if a struct starts with another struct, you can have a form of polymorphism?

1550935699
companion_cube
as in, disguising FooAllocator as Allocator if it's its first field?

1550935787
tgschultz
kinda sorta. The compiler reserves the right to re-order non-extern, non-packed struct fields however it wants, so we don't rely on field ordering and use @fieldParentPtr instead.

1550935812
companion_cube
makes sense.

1550935823
companion_cube
that's pretty neat.

1550935839
scientes
yet it is still fully compile-time

1550935898
companion_cube
it's funny how it's the little things that I find weird in zig

1550935912
companion_cube
(the return-from-block syntax, the lack of {} around if/whileâ€¦)

1550935915
tgschultz
but it was revealed through experimentation that the optimizer doesn't like that, so we're considering a change where the new interface would be a struct that contains a pointer to a vtable and a type-erased pointer to the implementation instance. In some ways, this is cleaner and it definitely optimizes better.

1550935960
companion_cube
so, a far pointer?

1550935976
andrewrk
the @fieldParentPtr trick will always be available; it's a valid thing to do semantically. but as tgschultz notes zig may offer a more idiomatic convention for this "interface" problem

1550936007
companion_cube
I mean, @fieldParentPtr is useful for any intrustive structure anyway, isn't it?

1550936012
andrewrk
companion_cube, most C-like languages do not require braces for if/while

1550936038
scientes
companion_cube look how I used @fieldParentPtr in rb.zig

1550936040
andrewrk
companion_cube, correct

1550936070
tgschultz
A far pointer to me has to do with i286 segmented memory.

1550936096
companion_cube
andrewrk: rust does, and it's an easy way to prevent goto fail bugs :s

1550936128
andrewrk
are you talking about where you accidentally indent 2 lines expecting them both to be in the if?

1550936141
companion_cube
yeah, it pops up easily when you modify code

1550936145
andrewrk
that's solved by

1550936158
companion_cube
what if you write them on one line?

1550936168
companion_cube
if (foo) a; b;

1550936201
companion_cube
hmm ok, but then zig becomes a whitespace sensitive language ðŸ¤”

1550936220
andrewrk
companion_cube, in this case you would succeed in writing code that is difficult for humans to understand at first glance what it does

1550936233
andrewrk
I would even propose that should be a compile error

1550936242
andrewrk
certainly `zig fmt` would not leave tha line alone

1550936264
tgschultz
maybe having zig fmt change it to be more readable is enough.

1550936266
andrewrk
all languages are whitespace sensitive languages

1550936267
companion_cube
right, right. without macros I suppose there's no need for long one-liners

1550936286
companion_cube
hu, some languages don't care about indentation

1550936310
andrewrk
this issue is to make it a compile error if the whitespace disagrees with the curly braces

1550936322
andrewrk
I'm pretty confident that will only be a helpful error

1550936326
companion_cube
sure, sure.

1550936338
andrewrk
it also helps IDEs

1550936341
companion_cube
I do like `if foo { bar }` instead of `if (foo) bar` though.

1550936348
companion_cube
simpler and risk-free

1550936358
andrewrk
which can then rely on whitespace as a heuristic if the user has typed only an open brace and not the closed one yet

1550936395
tgschultz
I've grown used to `if a else b;`. But I generally only use it if I can fit it on one line.

1550937139
andrewrk
there's a lot of stuff I'm excited to work on but in order to be maximally productive I have to follow the dependency order

1550937149
andrewrk
for example, IDE integration

1550937154
andrewrk
hot code swapping

1550937170
andrewrk
super fast debug build incremental compilation

1550937172
companion_cube
are you going to write a language server?

1550937187
companion_cube
yeah, you have to bootstrap your own productivity :D

1550937260
tgschultz
I'm less ambitious than andrewrk, I'm just looking forward to chaining streams together in a way I can rely on to optimize well. And whatever will eventually get us a comptime allocator.

1550937278
andrewrk
companion_cube, I'm actually thinking that zig self hosted compiler will have its own sort of "REPL" which supports refactoring, type-aware searches, and other stuff that IDEs would want. and then a Language Server Protocol would be essentially an API adapter into that same core functionality

1550937312
andrewrk
tgschultz, those are important to me too and the kind of things I'm talking about as being "dependencies" of this fancier stuff

1550937359
andrewrk
commander, in order to do super fast debug build incremental compilation, it does 90% of the work that a language server does

1550937365
andrewrk
sorry commander I meant companion_cube

1550937390
companion_cube
hum a good language server needs a parser with recovery, but that's more ambitious

1550937410
tgschultz
That idea is neat. On POSIX systems you could go full Plan9 and wrap that with a FUSE driver to expose your program's data as a filesystem.

1550937427
companion_cube
at least type checking/comptime recovery, since 95% of buffers will be invalid

1550937455
andrewrk
tgschultz, that's really interesting

1550937482
andrewrk
my goal will not to have that feature directly, but to make it entirely possible for a third party application to do that using the Zig compiler's API

1550937539
andrewrk
companion_cube, I haven't tried to solve that problem, but it's on my mind. I think it can be solved in a satisfying way, and I'm potentially willing to make language changes if it's certain they would make IDE integration fundamentally better

1550937589
andrewrk
if you allow me to use gamer jargon, I want the "skill cap" of Zig IDE integration to be through the roof

1550937591
companion_cube
it's more about compiler changes than language changes, I think?

1550937642
andrewrk
companion_cube, sure - I mean we're describing vaporware right now, so any discussion will have to be a bit handwave-y

1550937654
companion_cube
of course

1550937742
companion_cube
the gist of what I've seen in other languages is that you need a compiler that can deal with invalid programs graceful at every step (parsing, type checking, and here probably compile time computations); then make that available as a library

1550937761
andrewrk
companion_cube, one thing to note at least - zig has line-independent tokenization

1550937814
companion_cube
you mean you can parse lines again after a nonsensical line?

1550937821
companion_cube
(like the one the user is editing)

1550937851
andrewrk
e.g. zig does not have /*  which can affect lines other than the one it is on

1550937858
tgschultz
Actually, even on Windows it would be possible to write a FileSystem Provider wrapper for it. That'd be great for people like me who don't really like IDEs, we could still have a lot of the same functionality with tools we already have.

1550937888
andrewrk
tgschultz, I'm also imagining you could use this compiler "repl" if you didn't want an IDE

1550937911
andrewrk
since it's sitting there running with some stuff cached in memory to make your incremental builds faster, it may as well have a prompt that lets you query, do refactors, etc

1550937936
companion_cube
tgschultz: by IDE do you mean things like visual studio, or any editor with a semantic plugin?

1550937943
tgschultz
will I be able to script its behavior?

1550937984
andrewrk
tgschultz, there will certainly be a fully capable API to the running compiler. Probably interactions via a socket

1550938019
tgschultz
I mean things like VS mostly. I find them overengineered and rigid. I generally don't go for more than a text editor with syntax highlighting.

1550938020
companion_cube
perhaps with a standard protocol, like, hmm, LSP? :D

1550938023
andrewrk
the current idea is to support the standard Language Server Protocol, as well as Zig's own more powerful one

1550938055
companion_cube
tgschultz: you should try LSP integration for $langOfChoice in a good editor

1550938071
companion_cube
I use vim + semantic plugins, and it's incredibly useful (when the plugin is good)

1550938087
tgschultz
well an advantage of wrapping an FS around that is you can use tools you already have without modification.

1550938158
companion_cube
integration in an editor gives you a much tighter feedback loop

1550938174
companion_cube
(eg you can tab-complete, ask for types, or docs, in <1s)

1550938187
companion_cube
errors appear immediately when you save

1550938201
tgschultz
One thing I like about zig is that I haven't missed any of that.

1550938237
companion_cube
if you had it, you'd wonder how you could do without it, imho

1550938245
companion_cube
at least it's the case for me

1550938256
companion_cube
without that I'm literally twice (or thrice) less productive

1550938279
tgschultz
I work in VS at work, and did a lot of Java with IntelliJ in the past, I know what it feels like to have it.

1550938300
companion_cube
you need to experience it with a good language :D

1550938360
companion_cube
(ok, maybe it's a question of personality, too. I like the computer to help me a lot.)

1550938424
tgschultz
Yeah, I think so. I'm generally against the computer trying to help me too much because it's really bad at it once it crosses a certain complexity threshold.

1550938453
companion_cube
in my experience, as long as it's just completion and typing, it can do a stellar job

1550938465
companion_cube
(and immediate error feedback, which is the easiest to do)

1550938596
andrewrk
tgschultz, how about renaming stuff?

1550938599
andrewrk
that's something I miss

1550938705
MajorLag
it's annoying that even though my registration is tied to my nicknames a temporary disconnect still leaves me unable to reuse my previous one because its "already in use"

1550938742
andrewrk
there's a feature for that. something to do with "ghost"

1550938770
tgschultz
thanks, I'll look into that. Charter has been so unreliable that this has come up a lot.

1550938802
strmpnk
I havenâ€™t seen an LSP implementation do what Iâ€™d really want: show me the definition of the structures and functions Iâ€™m using in a side panel by context. I find the autocomplete pop ups slow me down (awaiting the prompt) and distracts.

1550938864
strmpnk
Iâ€™ll use autocomplete to start learning a library that is poorly documented but I find I can really remember it well till I turn completion off.

1550938946
strmpnk
Things also being tied to `.` for completion severely limits the kinds of things that can be discovered.

1550939005
companion_cube
depends on the language, but yeah

1550939020
companion_cube
something very useful is to show the type or docs of the highlighted expression

1550939110
andrewrk
strmpnk, on the other hand, zig does encourage the `a.b` pattern (rather than importing symbols directly into the current namespace)

1550939136
strmpnk
I occasionally use that when I am writing Rust but for some reason editors thing hovering a mouse pointer or forcing you to the browser is great UX for reading. Going back and forth then becomes a chore since there is no permanent fixture.

1550939175
strmpnk
andrewrk: Yes. It's a good design, but not always enough for some languages.

1550939177
andrewrk
I do like the idea of a dedicated space for IDE assistance

1550939181
companion_cube
ah, in vim it's just a temporary extension of the : line, and it disappears instantly on escape

1550939183
companion_cube
so low overhead

1550939326
strmpnk
companion_cube: Same problem though. If I'm filling out fields in a struct, I'd like to see it for each entry. Making it pop in and out is not great.

1550939374
strmpnk
Anyway... it's a little off topic as it'd probably be editor specific not something Zig has a hand in.

1550939417
andrewrk
I think it's fairly unanimous that zig should at least provide an API for IDEs to use

1550939425
strmpnk
But it's interesting that the LSP uses so far seem very much on the lineage of "intellisense" style assistance and sometimes "refactoring".

1550939464
tgschultz
yeah, I'm not against an API at all. It's a good idea.

1550939688
andrewrk
I think the pace of Zig is going feel like it's accelerating once a few major language things are finished.

1550939706
andrewrk
Once we have recursion solved, copy elision, coroutines, agnostic blocking or event-based code, networking in the std lib, package management, and the oop/interfaces question is resolved, all the sudden there's not really anything left but polish and bug fixes

1550939719
andrewrk
I know that's a lot of stuff, but it's *finite*. the language can get done, and then stay done

1550939783
strmpnk
The Roslyn rewrite of C#'s compiler and TypeScript being written in a similar style by the same team shows how it impacted IDE support using the compiler's infrastructure. The question is if the whole toolchain needs to be built this way or if the needs are different enough to avoid it.

1550939880
andrewrk
one thing I'm doing strmpnk is the self hosted compiler is being developed with a "breadth-first" approach with respect to all the planned stuff. so even when it can only compile hello world, I'm going to make sure documentation generation is working, language server, incremental builds, all that stuff

1550940067
strmpnk
Very reasonable priorities given the already working compiler can pick things up anyway.

1550941907
kristate_
glad that a lot of discussion is happening!

1550959421
emekankurumeh[m]
@and

1550959479
emekankurumeh[m]
andrewrk: if you store a heap-allocated object in a struct can you get a pointer to that struct using `@fieldParentPtr`?

1550959507
andrewrk
nope - think about it, how would that work?

1550959562
emekankurumeh[m]
so if i allocate the struct and a slice in it, it wouldn't work?

1550959639
wrl
you would need a pointer to the pointer you're holding in the struct

1550959670
andrewrk
(or just a pointer to the struct)

1550959698
wrl
yes and in that case you already have a pointer to the struct and you don't need to do anything further

1550959699
andrewrk
emekankurumeh[m], it might help to draw out the memory on paper with arrows

1550959711
wrl
et voila!

1550959721
andrewrk
@fieldParentPtr has a very clear pattern when you see it visually like that

1550959767
wrl
andrewrk: is @fieldParentPtr similar to C container_of()?

1550959799
andrewrk
wrl, yes. if I had known about container_of I would have called it that. maybe will even rename it

1550959814
andrewrk
@fieldParentPtr is slightly more type safe

1550960471
wrl
got it

1550960590
emekankurumeh[m]
andrewrk: are you sure? this seems to work:

1550960653
andrewrk
emekankurumeh[m], that's invoking undefined behavior, and zig would catch it and crash if it were smarter

1550960690
andrewrk
here's what's happening: passing a slice as a parameter currently secretly passes a pointer. but just like passing any struct as a parameter like that, you're not supposed to rely on it being byvalue or byref

1550960738
andrewrk
so the reason it works is that you got lucky and zig chose byref for the slice (but actually there's an open issue to pass slices destructured)

1550964532
emekankurumeh[m]
on windows i think zig fmt is trying to format the zig executable.

