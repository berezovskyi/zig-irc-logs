1574987095
andrewrk
waleee-cl, pixelherodev: the IRS allows sending this form (

1574987126
andrewrk
and then I'll hope that other, more powerful non-profit entities band together to defend .org

1574987951
daurnimator
andrewrk: that comment is the stream branch. master and the random branch are in a previous comoment.

1574989913
andrewrk
daurnimator, so where is the measurement for the std lib binary with master branch?

1574989948
andrewrk
it would help if you documented the commands you ran

1574990347
daurnimator
andrewrk:

1574990370
daurnimator
and I'm running `./build/zig test --override-lib-dir lib lib/std/std.zig` sometimes with a --release-fast added

1574990481
andrewrk
daurnimator, that comment says "testing lib/std/rand.zig" which is not all the std lib tests, with both streams and rand mixins. does it make sense what I'm asking for?

1574990519
daurnimator
andrewrk: that's the first half of the comment. the second half is: > Testing just lib/std/std.zig for now:

1574990558
andrewrk
can you just make it clear? it's not clear

1574990748
daurnimator
andrewrk: I've edited the most recent comment to hopefully make it clearer

1574991373
stratact
Did anyone in the Zig community write a terminal emulator?

1574992301
daurnimator
comment edited again to turn it into a table :)

1574992909
andrewrk
daurnimator, thanks, that is crystal clear :)

1574994487
daurnimator
protty: reset_event.test "std.ResetEvent"...reached unreachable code

1574994523
protty
uh oh. What are the system details?

1574994560
daurnimator
protty: running the test again it succeded... haven't been able to trigger the failure a second time

1574994600
daurnimator
protty: cpu: i7-8550U  os: linux

1574994766
protty
may be due to slower os scheduling on a receiver wait:

1574994767
protty
oneshot test?

1574994769
pixelherodev
Alrighty, tests passing on OS layer :)

1574995094
Snektron
Hey i didnt know you could usingnamespace like that

1574995099
Snektron
Interesting...

1574995143
pixelherodev
like what?

1574995178
Snektron
Inside a struct, like daurnimator's mixins

1574995183
pixelherodev
ah

1574995211
pixelherodev
Well, I mean, you can do it in an @import ed file, which is effectively a struct

1574995214
pixelherodev
So it does make senser

1574995217
pixelherodev
s/senser/sense

1574995235
Snektron
It occurs to me that i wrote asome mat/vec stuff in c++ which works basically like that

1574995244
Snektron
Except that it feels quite hacky

1574995298
Snektron
A Vec is declared as `template <typename T size_t N> struct Vec : BaseVec<T, N>`

1574995329
Snektron
BaseVec is specialized for size to make you able to subscript on x, y and z

1574995383
Snektron
Can those mixins hold state? If so, you could implement the same in Zig:

1574995444
Snektron
pub usingnamespace if (Size == 2) XYStorage(Self) else if (Size == 3) XYZStorage else @CompileError("oof");

1574995526
daurnimator
Snektron: no. usingnamespace only imports methods; not fields

1574995596
Snektron
I see

1574995624
Snektron
Does it import constants?

1574995657
Snektron
I suppose the way to implement it would then turn around, which is actually OK i suppose

1574995690
Snektron
I cant remember why i didnt engineer it like that with CRTP

1574995801
Snektron
Anyway, good to know you can do this

1575001144
daurnimator
pixelherodev: I just realised I've been reading your name wrong this whole time. I've been seeing "pixel-here-to-dev"

1575001562
pixelherodev
heh

1575001575
pixelherodev
Don't even ask me where my virtuonym came from

1575001599
pixelherodev
It was a few years back and I've been using it since, having to explain to people "No I didn't know pixelhero was a real game, no I'm not its developer" :P

1575003449
emekankurumeh[m]
would it be possible to add commands to the zig compiler as plugins? similar to git or rust's cargo

1575003601
daurnimator
emekankurumeh[m]: like what?

1575003783
emekankurumeh[m]


1575003866
emekankurumeh[m]
i.e. some executable named zig-cmdname that can be invoked zig cmdname

1575004075
daurnimator
TIL SHF_COMPRESSED is a thing

1575004097
daurnimator
emekankurumeh[m]: I know what you meant. but whats an example command you'd add?

1575006962
emekankurumeh[m]
perhaps a `bloat` command similar to cargo bloat or bloaty?

1575007400
pixelherodev
daurnimator, thanks for the feedback, working on it shortly

1575015402
mq32
hey

1575015422
mq32
there is no way to enforce zig fmt to insert a blank line between a comment and a statement, right?

1575018944
cncl
is there no way to use zig on mac os 10.12? it's fine if there's not. i'm just checking to make sure that's the case

1575018973
cncl
(the only mac hardware i own cannot run 10.13 and later correctly)

1575019059
bgiannan
cncl, Sierra is not supported

1575019081
daurnimator
cncl: there is not without making modifications yourself: we drop support for an operating system as soon as all vendors do

1575019102
cncl
makes sense

1575019104
daurnimator
cncl: apple dropped support for sierra when they released catalina

1575019133
cncl
yeah, i know. it has been a problem for me. i have a specific rare model of 2013 macbook pro that apple does not support correctly

1575019239
cncl
(i have to run 10.14 in a VM just so i can run apple's dumb "notarization" tool on my software)

1575019306
cncl
i don't expect people to support it. just making sure it was an actual intentional thing, and not merely because that's what the build machine was running

1575019341
cncl
(and therefore i could build myself. but that doesn't seem to be the case. which is fine)

1575019521
mikdusan
back in April I was building on 10.11 - can't remember if it was with custom clang or not. but it was building.

1575019825
daurnimator
cncl:

1575020485
cncl
yeah, that is indeed the first thing i hit

1575020580
cncl
(i don't use macOS full time. usually i use windows.)

1575028818
daurnimator
error: expected type 'usize', found 'i30' note: unsigned 64-bit int cannot represent all possible unsigned 30-bit values

1575028880
daurnimator
something not right with that error message...

1575029927
daurnimator
huh.... "incompatible types: 'u32' and 'i30'" (I'm trying to add them)

1575029934
daurnimator
how do I get around it?

1575029971
daurnimator
I know that the value of the u32 is at least the i30

1575029993
daurnimator
e.g. @as(u32, 50) + @as(i30, -20)

1575030802
Snektron
That reminds me: should implicit casting to usize be illegal?

1575030848
Snektron
Since the size can vary depending on platform, code might compile on one and not on the other

1575030856
Snektron
Its an easy mistake to make

1575030864
Snektron
Or is that compile error good enough

1575036446
mq32
Snektron: i think a compile error should be enough

1575037513
fengb
daurnimator: I had a similar problem. Seems like underflow is ambiguous so there’s no elegant autocast

1575039293
nooga
hi, is there a good source of examples writtten in Zig? I'm trying my best with the docs, zig source and std reference but it seems like there's almost no basic examples

1575039307
fengb
I got away with @as(u16) +% @bitCast(u16, @intCast(i16)) because I didn’t care about overflows at all

1575039339
bgiannan
nooga, did you have a look at

1575039493
nooga
bgiannan: that's helpful thx!

1575040974
nooga
I'm trying to catch error.EndOfStream from io.readLine but can't figure out how to do it without listing all errors readLine throws in the switch

1575040987
nooga
I would like to break a loop in case of EOL

1575041035
daurnimator
nooga: `else => |err|`

1575041985
andrewrk
a common idiom in zig is: else => |err| switch (err) {

1575042053
andrewrk
hmm looks like the docs for switch is missing the part that shows how to obtain an error set subset by handling some errors

1575042182
nooga
did this

1575042668
andrewrk
nooga, you can shorten that if you like to: error.EndOfStream => break,

1575042823
nooga
thx andrewrk

1575043806
leeward
I'm a little confused about unions in Zig. I have a bit field (status register in a processor) and sometimes I want to treat it as a byte but others I want the packed struct of u1 representation. Do I have to use @ptrCast to be able to bounce between these different uses at will?

1575043834
fengb
You probably want a packed union

1575043880
leeward
It seems like packed extern unions ought to have the memory layout I want, but I need to set it as a byte and then read it as a struct, and from what I can tell, Zig thinks that's an error.

1575043890
fengb
Normal unions have undefined memory representation and safety checks to prevent “off” access, while packed unions have fixed memory

1575043914
fengb
extern union is C ABI compatible unions so that could work too

1575043942
leeward
Oh, so packed unions don't guarantee that they're only represented one way at a time?

1575043948
fengb
But C unions are a bit wonky if you’re looking for guaranteed memory representation

1575044009
andrewrk
todo: clarify that packed unions allow aliasing / type punning in

1575044039
fengb
Packed have guaranteed memory. So something like packed union { u8, struct { u4, u4 } } lets you access either field correctly, provided you account for endianness

1575044069
leeward
Well let's hope my system's not nibble-swapped.

1575044099
leeward
Good to know though, thanks. I thought I had tried using packed unions and gotten an error, but I'll try it again.

1575044109
fengb
It’s always consistent on the same system. It’s just not necessarily portable if you transfer the data

1575044121
leeward
Oh, fengb, should (need) that struct be packed?

1575044125
andrewrk
I don't think test coverage for packed unions is great currently

1575044141
fengb
Oh yeah that should be packed. Everything should be packed

1575044147
leeward
ok, good

1575044158
fengb
I think packed unions don’t check that well...

1575044165
andrewrk
fengb, planning to relax that restriction btw with

1575044214
andrewrk
this will allow packed structs to have arbitrary alignment, and have fields which have non-well-defined-memory-layout

1575044383
fengb
Oh neat. Will there be a way to force well-defined memory?

1575044399
andrewrk
well, yes by using well-defined memory types only

1575044418
andrewrk
it's not a breaking change

1575044427
leeward
Yep, seems to work now.

1575044437
andrewrk
hmmmm, another idea I just had. (normal, non-packed) structs could allow setting the alignment of a field to 0. this would allow zig to bit-pack the field

1575044440
fengb
I mean a keyword or something. I often do stupid stuff like forget a packed

1575044464
andrewrk
ahh I see, you want a compile error on an accident. yes that should definitely be possible

1575044474
fengb
And right now the compiler tells me I’m dumb. But with this change I’m afraid it’ll lead to a wild goose chase

1575044481
fengb
Yep

1575044490
andrewrk
this align 0 field thing is a big deal, this could be a really good idea

1575044508
fengb
Ah making normal structs packable could be a good semantic solution

1575044518
andrewrk
you want to save memory? find some fields that you can afford to do bit shifts to access, and mark them align(0)

1575044585
leeward
Would packed then just be sugar for align(0) on all the fields?

1575044610
andrewrk
leeward, nearly - it also enforces order, and that zig won't put extra (safety-related) fields

1575044704
leeward
Oh, so align(0) would let the compiler pack the struct for optimal density but keep it a zig struct?

1575044718
andrewrk
yes

1575044727
leeward
Interesting.

1575044738
leeward
That means no pointers to align(0) fields though, right?

1575044764
andrewrk
right, pointers gain some bit offset metadata which don't cast into normal pointers

1575044798
andrewrk
but the pointers work otherwise. you just wouldn't be able to store them in a field or as a funcion parameter type

1575044867
leeward
That does make them a bit less useful.

1575044882
leeward
I'm not sure why I'd want a pointer to a field in a struct if I didn't want to pass it to a function.

1575044900
leeward
Still, I see why you wouldn't want to interact with the ABI.

1575044922
mq32
andrewrk: do you know the way C# handles "packed structs"? you can not only specify alignment, but also "field offset" which allows for some pretty neat constructs and some nice explicit layouting

1575045089
andrewrk
mq32, that's neat. the closest zig can offer to that is packed structs + comptime asserts

1575045108
mq32
yeah

1575045118
mq32
what is fun about that feature is that it isn't safety-checked

1575045125
andrewrk
for the align(0) fields thing though- consider this use case: flags

1575045130
mq32
someone once told me: you cannot do unions in c#. i told him: hold my beer! :D

1575045154
mq32
it allows you to overlap fields ^^

1575045166
andrewrk
you could have 8 bools in a struct all marked align(0), and zig would be allowed to put them all in a u8

1575045170
mq32
but the align(0) idea is great!

1575045176
mq32
+2 from my side :D

1575045188
andrewrk
and you rarely need a pointer to a flag, you're usually checking them from a base pointer

1575045252
andrewrk
actually, people have been asking how to do flags in zig forever, and this is the best way

1575045311
leeward
It's definitely a good idea. As long as it spits out sensible errors when people inevitably try to take pointers to fields that have been align(0)'d.

1575045363
leeward
If you pack a struct of 8 bools now, does it fit in a u8?

1575045372
andrewrk
yes

1575045426
mq32


1575045439
andrewrk
the error currently looks like this:

1575045881
leeward
Not the most informative error ever, but that's the kind of thing that can be nailed down after the language stabilizes a bit.

1575045895
leeward
mq32, You have a very strange definition of wonderful.

1575045920
mq32
leeward: it's actually really helpful!

1575045933
mq32
you can interface really well with C in C#

1575045960
leeward
mq32: Yeah, if there's no union in C# I can see how it would be necessary. Still an ugly hack.

1575046005
mq32
yeah, kinda :D

1575046022
mq32
but: you can enforce arbitrary struct layout which is nice

1575046043
leeward
I've never used C#. I wrote the first Windows software of my career last week, and it was in Python.

1575046086
mq32
C# is quite nice actually

1575046113
mq32
it's my preferred "high level" language

1575046207
leeward
I hear good things, I just never really interact with the Microsoft ecosystem so it's been at the bottom of my to-learn list for a long time.

1575046294
mq32
i'm not a fan of dotnet core though

1575046312
mq32
it's hyped a lot, but i think they are throwing away a lot of good stuff with that

1575046333
leeward
I did a code review for some C# code once and it seemed very boilerplate-y. That could have been the author though. It wasn't clear if C# was missing metaclasses or the stuff was just written strangely, but there were a lot of classes that were nearly identical.

1575046346
mq32
i would like to use .net for some apps at work, but we have one "hard" restriction:

1575046368
mq32
if you cannot make a one-file-application with your programming language/framework/..., don't use that for non-inhouse apps

1575046395
mq32
and it's hard with .NET/Windows Forms already not to use

1575046408
mq32
but with dotnet core, you have to ship the whole "dotnet" you use with your app

1575046413
leeward
There's no way to bundle the runtime in a single executable? Python can do that.

1575046426
mq32
the runtime is installed in windows

1575046429
mq32
but not libraries

1575046441
leeward
weird

1575046465
mq32
i found a way though :D

1575046474
mq32
you can make the libraries embedded resources you "preload"

1575046482
mq32
it works, but it's a hacky workaround

1575046488
leeward
The last thing I wrote production for-customer code on at work was an msp430. C is the high level language of choice there.

1575046506
andrewrk
zig has msp430 arch support

1575046513
mq32
i read some 8051 code the last days

1575046519
leeward
It's not tier 1 though, is it?

1575046523
mq32
i don't think zig has 8051 code support... :D

1575046524
leeward
I thought it was experimental in llvm.

1575046539
leeward
or tier 2, for that matter

1575046556
andrewrk
msp430 is marked tier 4

1575046583
leeward
Also, I don't think Zig is ready to be approved for use in medical devices. Not that I wouldn't love to.

1575046593
andrewrk
that's certainly true

1575046882
leeward
It would actually be pretty cool if we could get the compiler 62304 conformant at some point, but it's such a burden that it'd probably have to be a pretty high-stability fork. Certainly too much overhead for while the language is still evolving rapidly.

1575046952
leeward
Though I don't know if it's a thing that can be be bolted on after the fact.

1575046997
leeward
It's also the kind of thing people are actually willing to pay for; certified compilers get expensive.

1575047073
stratact
what happened to `[..]` slicing?

1575047395
stratact
Ah nevermind, it looks like using []const u8 for string literals is the better practice.

1575047473
andrewrk
stratact, if you want to convert a string literal to an array (like it was before) you can put .* on there

1575047494
stratact
andrewrk: I tried that as well, but it didn't work.

1575047527
stratact
although I probably made a mistake somewhere

1575047539
andrewrk
it works and it is covered by tests. provide a pastebin if you want help figuring it out

1575047774
stratact
Understood and no worries. I got it to compile with []const u8 after messing around, I just need to break outdated habits. I also need to get my programming rhythm back.

1575047949
stratact
Sigh, I spent most of my time yesterday waiting for a friend to backport patches from st to his C terminal emulator project, so I could port it to Zig and enhance it from there but it took too long. So I'm doing another project in the mean time ;)

1575048040
adamkowalski
Happy Thanksgiving, hope it was a good one

1575048082
stratact
adamkowalski: Happy Thanksgiving, however, I believe it's now Black Friday in the States :P

1575048148
stratact
although, Black Friday online sales are not that special these days :/

1575048165
leeward
Black Friday: The best day to stay in and hack.

1575048334
andrewrk
Hack Friday

1575048343
leeward
^^

1575048390
leeward
I have a u16, and I want to interpret its low 12 bits as an i12. @bitCast(i12, num & 0xfff) is unhappy. Do I have to @ptrCast it down to a u12 then @bitcast it to signed?

1575048464
fengb
Can possibly do @truncate(i12, num)

1575048512
leeward
error: expected signed integer type, found 'u16'

1575048748
leeward
Whoops, looks like I have to leave it unsigned and use +% anyway; I'm adding it to a u12.

1575048749
andrewrk
@bitCast(i12, @truncate(u12, x))

1575049118
leeward
How is @truncate different in this case from @intCast? Should I be using @truncate in general when I want to pick the low N bits from a word?

1575049144
andrewrk
leeward, I believe this is explained here:

1575049177
andrewrk
yes truncate is a good way to pick the low N bits from a word

1575049181
andrewrk
it's one of the safe casts

1575049291
fengb
Hmm should bitwise operations do auto narrowing? Or is that surprising

1575049314
leeward
So is intCast better to use if I want to assert that the value will fit in the new size?

1575049318
andrewrk
fengb, it's planned for them to give narrowing value annotations, but not change the type

1575049370
andrewrk
so you will be allowed to do, for example: var x: u16 = 0xabcd; const y = x & 0xff; var z: u8 = y;

1575049384
andrewrk
but @typeOf(x & 0xff) is still u16

1575049394
leeward
I want this. I want this very much.

1575049408
leeward
I think we talked about it earlier.

1575049697
mq32
andrewrk: that would be cool

1575049697
mq32
!

1575050049
leeward
Ugh, this compiler is not generating jumps correctly and I don't know why.

1575050185
leeward
or branches!

1575050233
leeward
Oh, I bet it's because I'm not running the linker. Silly me.

1575050382
mq32
leeward, oh yeah i did something similar this week

1575050395
mq32
i was wondering why my compiles did not work and i just ran an 1hour old executable

1575050416
leeward
Yeah, I hate it when that happens.

1575050642
andrewrk
I don't understand this due to not understanding rust semantics, but if someone here did understand it, that would be useful when we decide on zig's planned pinning feature:

1575050818
andrewrk
hm there isn't a specific proposal for it, just this comment by dbandstra:

1575051303
mq32
andrewrk, can you explain "pinning" in this context?

1575051352
andrewrk
yes, filing an issue

1575052354
pixelherodev
daurnimator, re: importing os.bits, it's not importing it into the os struct, it's importing it using pubnamespace into std.os.bits, which is itself imported into std.os using pubnamespace

1575052364
pixelherodev
It's how e.g. fd_t is defined

1575052970
Snektron
andrewrk: the annotations sounds similar to a thing i was thinking about

1575052996
Snektron
If every integer is annotated with its possible range of values, you could do stuff like that and also optimization maybe

1575053047
Snektron
Stuff like array bounds checking could be eliminated after a manual bounds check

1575053296
andrewrk
mq32,

1575053346
mq32
i have

1575053350
mq32
you ninja'd me!

1575053710
andrewrk
right so I'm pretty sure Rust has this feature already, but apparently it is unsound, and it would be good to understand why. The answer might have to do with Rust semantics that does not apply to zig

1575053746
mq32
i think it's something related to rust semantics

1575053769
mq32
but i'll try to think about how this could introduce problems

1575053824
mq32
but i really think this feature is nice, as it also allows you to safely store "upward references" in a graph and document that this may break

1575057883
stratact
oh, how cool, a [*]const T coerces to a [*c]const T automatically in imported c function, sweet

1575057988
stratact
Zig is becoming more joyful.

1575060485
leeward
I'm failing at finding the conditional compilation stuff in the docs.

1575060503
leeward
I want to do one thing when running a test and another in any other build.

1575060551
leeward
ah, `builtin.is_test`

1575061083
leeward
whine: zig build makes me unhappy on the insides. I really hope the package system makes it worth while, because right now I'd rather use Make.

1575061443
mq32
i think the biggest problem with zig build right now is the missing documentation

1575061531
leeward
It's a big problem, but yet another build system (this one apparently in the SCons model) is not what I needed.

1575061815
leeward
It's not making me decide not to use Zig, and I don't want to be a jerk about it, but I really do wonder at the decision to create it sometimes.

1575062314
leeward
Ooh, this is fun. I got a failed assertion that tells me it's a bug in the Zig compiler.

1575062356
mq32
leeward: the thing about zig build vs. make:

1575062371
mq32
i need the zig compiler anyways to build zig projects

1575062387
mq32
if i have a "raw" system and install zig, i can build projects with zig build

1575062393
mq32
but not with make

1575062446
leeward
Semantic Analysis [716/735] Assertion failed at /home/me/zig/zig-hg/src/ir.cpp:265 in const_ptr_pointee_unchecked. This is a bug in the Zig compiler.

1575062481
leeward
mq32: Because you don't have make installed?

1575062490
mq32
yep ;)

1575062498
mq32
how do you install make on windows?

1575062515
mq32
so that your Makefile actually does work

1575062543
leeward
wsl? I thought Windows people used IDEs that do all their building for them.

1575062607
mq32
well

1575062612
mq32
now we have two build systems

1575062619
mq32
msbuild and gnumake

1575062629
mq32
or we could've used zig build and have only one ;)

1575062635
leeward
I feel like this should already be a solved problem.

1575062701
mq32
it is not

1575062703
mq32
it is hell

1575062709
mq32
another build system does not hurt

1575062725
mq32
it does even hurt less if it comes for a single language with a single purpose: to build zig code

1575062774
leeward
Ok, so let's assume that the correct thing to do is to add a new build system. Why a library? Why not a program that interprets some DSL or config file to build code?

1575062858
leeward
There's certainly precedent for that between ant, cargo, rebar, shake, etc.

1575062862
mq32
because it's simpler

1575062880
mq32
what is easier to maintain, debug and understand? a DSL, compilre for that DSL and execution layer

1575062891
mq32
or "the language you're writing your code anyways with"?

1575062904
leeward
That's the philosophy behind SCons, and...ugh.

1575062914
protty
is there a way to override the default std.event.Loop with a custom implementation?

1575062920
leeward
For as specific a domain as a build system, I'd argue the DSL.

1575062955
mq32
i dunno

1575062963
mq32
i haven't used scons

1575062968
mq32
but zig build is pretty straightforward

1575063002
mq32
also: SCons tries to do the "i can build all"

1575063006
mq32
which does not work

1575063025
leeward
Maybe this is my Make-centricity showing through, but when defining a build system, you're basically just building a DAG and telling it how to combine each of the nodes to make their parents.

1575063102
leeward
The impression I got was that zig build was supposed to be an all-purpose build system for whatever you want.

1575063109
mq32
nah

1575063115
leeward
Maybe I misinterpreted something.

1575063133
mq32
zig build is "invoke the zig compiler with fancy parameters instead of CLI"

1575063146
mq32
you can configure "zig build-exe"-invocations and so on

1575063150
leeward
The docs talk about building C/C++ code with it, though that sentence is about 1/3 of the docs.

1575063157
mq32
also you can add arbitrary build commands

1575063161
mq32
yeah, sure

1575063167
mq32
you can also build C/C++ with zig

1575063184
mq32
"zig build" is just a replacement for shell scripts invoking the compiler

1575063204
mq32
it does not do dependency tracking for source files or similar

1575063209
mq32
(at least not to my understanding)

1575063214
leeward
Maybe something I read that suggested that led me to extend it beyond C and C++ in my head.

1575063258
leeward
It seems like it's got some dependency-tracking magic in it to me.

1575063273
leeward
Granted, I have a very bad understanding of it, and my mental model is probably very wrong.

1575063317
mq32
leeward: yeah you can depend build steps on each other

1575063330
leeward
I have a small build.zig file and when I `zig build test` it runs tests in files not named in my zig.build.

1575063333
mq32
like "when executing zig build run, make sure that

1575063333
leeward
er, build.zig

1575063344
mq32
huh

1575063359
mq32
zig build test fails for me if not having a "test command" in my build file

1575063375
mq32
[felix@denkplatte-v2 tmp]$ zig build test

1575063375
mq32
Cannot run step 'test' because it does not exist

1575063386
mq32
default build.zig generates ths

1575063461
leeward
So I have main.zig with a test that just imports ops.zig. In ops.zig, which depends on decode.zig, I have a whole slew of tests. I also have tests in decode.zig. My build.zig has an addTest("src/main.zig") but doesn't mention any of these other files.

1575063519
leeward
The fact that there's a "test" target is explicit, but the dependencies for it seem to be getting generated automagically.

1575063635
mq32
that has nothing to do with zig build

1575063642
mq32
just run "zig test src/main.zig" and see what happens ;)

1575063653
mq32
zig will run all tests in your code graph that is from your current "package"

1575063661
leeward
I think we're agreed that zig build would benefit from some good docs.

1575063670
leeward
Ok, well that's good to know.

1575063681
mq32
and what happens when you od "addTest(…)"

1575063690
adamkowalski
If anybody uses vim and vim-test I have been working on integrating zig test for the past few days. Check out my fork here:

1575063692
mq32
you add an invocation with "zig test …" to your build jobs

1575063699
adamkowalski
It supports test file, test nearest, test last, and test visit

1575063731
adamkowalski
I would appreciate anybody who can help test it out and help me improve it. Once we know it works on a few different machines I would like to submit a pr to get zig support into vim-test proper

1575063919
leeward
I think instead of whining about build systems, I should ask the question that led me to it. I've got some test data that I want to feed to my program, but it's generated (by make, since the test data is object code) and I want to rope it in with my `zig build test`. Though from what I'm learning, maybe the right thing to do is to wrap this whole thing up in a Makefile.

1575063925
mq32
leeward, how do you compile your zig executable with "make" then?

1575063931
mq32
all it should do is probably this:

1575063941
leeward
I don't. I've been trying to use zig build.

1575063942
mq32
zig-cache/bin/myExecutable: src/main.zig

1575063950
mq32
zig build-exe $<

1575063985
mq32
yeah i have to admit that i am also using a makefile for that :D

1575064005
mq32
but: i'm compiling the generator with another language, so i need another build system anyways ¯\_(ツ)_/¯

1575064029
leeward
Ok, so I won't be shunned for adding a Makefile around my stuff. Good to know.

1575064067
leeward
Yeah, the test data is compiled from either C or assembler or C++ with a non-llvm compiler.

1575064071
mq32
i think the way with zig build is: builder.addSystemCommand(…)

1575064191
leeward
I'm getting to the point in my emulator where it can execute programs, which is exciting, and I can use the programs as tests.

1575064218
leeward
I should probably put it up somewhere, but bitbucket's ditching us poor mercurial users.

1575064261
mq32


1575064271
mq32
btw, here's an example for zig build with a custom command

1575064334
torque
sourcehut has mercurial support, but I don't know what else still does

1575065144
leeward
sourcehut...hadn't heard of it

1575065259
euantor
hg.sr.ht - definitely worth trying out and their builds system is great

1575065260
leeward
I'll probably just use hg-git and put it on github. Sigh.

1575065379
leeward
mq32: Thanks. I might use that.

1575065488
mq32
yeah, me too

1575065497
mq32
i'll take a look at the source code some more

1575065694
leeward
euantor, I suppose I'll go generate a new password. I do have a bunch of projects that need moving from bitbucket.

1575065740
euantor
There’s a tool to import from bitbucket too

1575065791
euantor


1575065891
leeward
fancy

1575065985
leeward
Is this like a federated github?

1575065992
euantor
And a fairly active IRC channel at #sr.ht

1575066043
euantor
It’s more like an open source GitHub, CI, mailing list, wiki system

1575066104
euantor
Eg: the source for the Git service is at

1575066455
pixelherodev
Pretty sure Zig uses sr.ht for the FreeBSD CI

1575066849
andrewrk
strap your jetpacks on for this proposal:

1575067098
leeward
looks useful

1575067167
leeward
I think I found a compiler bug.

1575067207
leeward
This patch:

1575067213
protty
zig's approaching dependent-typing territory

1575067220
leeward
when I run "zig build run" it hits an assertion.

1575067233
leeward
"zig build test" still succeeds though.

1575067612
leeward
zig/src/ir.cpp:265 in const_ptr_pointee_unchecked.

1575067708
leeward
mmm, just realized what the first question was; updating and rebuilding zig

1575067832
leeward
Same error.

1575068050
andrewrk
protty, according to wikipedia, we're already there

1575068072
andrewrk
"In computer science and logic, a dependent type is a type whose definition depends on a value." sentinel-terminated pointers, functions that take a comptime usize and return a type

1575068087
leeward
protty, Zig already has dependent types: fn Thing(n: u1) type { return switch(n) { 0 => struct { a: u1 }, 1 => struct { a: u2 }, }; }

1575068167
protty
oh yea, forgot values could be comptime

1575068189
protty
this is wack

1575071557
pixelherodev
I like that proposal

1575071561
pixelherodev
And the linked ones :)

1575071644
pixelherodev
On a completely unrelated note, requiring the hard compiler RAM limit to be 4GB seems too high to me, especially given that the majority of computers today are at least quad-core

1575071677
pixelherodev
If doing pararellized compilation, that would require e.g. 16GB of RAM, which is probably a few years away from being the norm

1575071699
pixelherodev
s/pararellized/parallelized

1575071774
pixelherodev
One concern re: that proposal: `There are 3 possible values of this type, so Zig chooses to use u2 for the tag type. It will require 1 byte to represent it, wasting 6 bits. If you wrap it in an optional, that will be 16 bits to represent something that, according to information theory, requires only 2 bits. `

1575071777
pixelherodev
Shouldn't that be 3 bits?

1575071813
pixelherodev
Oh wait, never mind - null would effectively be a fourth enum value, not requiring a bit of its own - duh

