1557446846
andrewrk
argh when did debug symbols stop working on windows?

1557446873
andrewrk
sometimes I'm not even able to get symbols with msvc debugging zig.exe

1557447292
andrewrk
windows build of master branch should be fixed now

1557449608
daurnimator
hryx: oh? I thought it wouldn't even conflict

1557449650
daurnimator
nevermind... I see it does

1557449671
daurnimator
I remember a 'parse2.zig'?

1557449682
hryx
yeah, sorry about that, I should have mentioned

1557449697
hryx
parse2.zig was my workspace until it was ready to replace parse.zig

1557449702
hryx
which is probably a goofy workflow

1557449745
daurnimator
hryx: have you fixed the allocator usage bug in your branch?

1557449794
daurnimator
nope

1557449833
hryx
daurnimator: mind leaving a comment on the PR? I'll peep it tonight

1557449900
daurnimator
hryx: comment added.

1557449910
hryx
thanks

1557450088
daurnimator
hryx: essentially when you do `.arena_allocator = tree_arena,` -> this makes a copy; which means that tree_arena and tree.arena_allocator can now diverge. -> so when e.g. token_list tries to .free(): the allocator blows up

1557450156
daurnimator
the solution is to never use `tree_arena` after `tree` is copied: which requires that things are reorganised so that the `Tree` object is created

1557450618
hryx
Ok, I see it now. good call

1557450888
daurnimator
hryx: not so much a call; as that in #2424 I optimized the allocator, and suddenly the parser tests were failing

1557450924
hryx
"good catch", perhaps then

1557451340
daurnimator
hryx: so we expect the new parser to be merged soon? (i.e. in the next day?)

1557451408
hryx
assuming Hejsil has a moment to bless it, within the next one or two days!

1557451429
hryx
I should have time for finishing touches tonight, but if I have a late work night then tomorrow night for sure

1557452013
daurnimator
hryx: k. I'll block #2424 on that for now. Hopefully it's soon :)

1557456545
daurnimator
andrewrk: idea to come out of that parser allocation patch: what if taking the address of a member marked the structure as 'fixed'?

1557456639
daurnimator
const foo = SomeStruct{.x=42}; const foo_x = &foo.x; const bar = foo; // error: cannot copy fixed object 'foo' (fixed due to open reference 'foo_x')

1557459398
andrewrk
daurnimator, I think this needs a more general idea of the concept of "escape analysis". even a simple variable store technically uses a pointer under the hood. var x = 1; // this uses a pointer in zig ir

1557459493
daurnimator
andrewrk: yeah I thought as much.... but was wondering if a more simplistic form could be supported

1557459527
daurnimator
e.g. maybe '&foo.x' marks 'foo' as 'escaped', but the internal "reference to" for the assignment operation doesn't?

1557459594
andrewrk
tgschultz, I think after LemonBoy's latest fix, you won't even need gdb to find out which assert would need upgraded to src_assert/ir_assert

1557478963
IntoxicatedHippo
How should I go about replacing this makefile with build.zig?

1557488734
gamester
andrewrk: Sorry I don't have github or use git (I use mercurial which I find simpler). Did you take a look at the /usr/lib64 issue? It's definitely a separate directory on fedora. I had to copy libs from /usr/lib64 to /usr/lib to make zig find them.

1557489061
gamester
btw coroutines in C++ are brutal. I've never used coroutines before, but in C++ you can easily pass a reference to the coroutine which won't exist when the coroutine is continued. Also the return type is non-void even when it returns nothing (really confusing). The entire thing is SO confusing. I can't understand a thing. I need a classroom lecture every time I revisit my c++ coroutine stuff. It looks like Zig's coroutines will be simpler.

1557489113
tgschultz
that's the goal anyway

1557489232
gamester
In C++ they're going with the approach where only a few "elite" developers know the details necessary to design coroutine types or whatever, while the rest are expected to gloss over the details. That's literally what it says in their papers on coroutines.

1557489254
gamester
not verbatim

1557490164
gamester
You can't make this up: "4.4 Are coroutines expert only feature" - "Luckly only a few (say, a thousand) C++ developers in the entire world would have to know or use any of the coroutine customization points"

1557490188
gamester
"Who: Everybody (millions) - Uses coroutines via high level syntax...."

1557490204
gamester
"Who: Cream of the crop (200) - Defines metafunctions, utilities and adapters...."

1557490213
mouldysammich
Where is that from?

1557490213
gamester
A c++ feature designed for 200 people

1557490218
gamester


1557490496
gamester
I inadvertently walked into a feature designed for cream of the top full-time language experts. Ooops.

1557491564
gamester
Is there an issue tracking false dependency loops, they're frequently an issue when importing c headers for me.

1557491623
gamester
ah:

1557497949
very-mediocre
if everyone is supposed to use high-level C++, that begs the question of why use C++ at all...

1557498161
very-mediocre
the only appeal i can think of at this point is "no gc"

1557498249
very-mediocre
everything else is subpar

1557498280
very-mediocre
tooling, readability, ergonomics, footgun avoidance...

1557498300
very-mediocre
compilation times.

1557498347
gamester
yeah

1557498459
very-mediocre
+ safety

1557498469
very-mediocre
although i guess that falls under footguns.

1557498510
very-mediocre
i think i'd actually prefer using a JIT'd scripting-ish language and just manipulate the GC than go back to C++

1557498824
companion_cube
so you could use D

1557499287
very-mediocre
or something transpiled like nim

1557499298
very-mediocre
but the point will become moot once zig is ready :)

1557500014
TheLemonMan
andrewrk, (wrt #2459) do you want me to change the numbering behaviour then?

1557500035
andrewrk
TheLemonMan, just a sec I have an almost complete review

1557500063
TheLemonMan
sure thing, take your time

1557500954
andrewrk
TheLemonMan, review posted. regarding automatic numbering, definitely feel free to make the extern enum logic match C ABI. I want to get your opinion for other enums -

1557500982
andrewrk
if I remember correctly my reasoning is to try to fill up the slots starting at 0 so that switch expressions could likely be optimized to jump tables

1557501016
andrewrk
I think it's good to guarantee that enums with no explicit numbering and no explicit type will get an unsigned int, and indexes starting at 0, 1, 2...

1557501110
andrewrk
but as for enums that have some values specified, what to choose for the non-specified values, I think is up for discussion. do you think the C way of doing it is better than the "try to fill holes starting at 0" way?

1557501603
TheLemonMan
better codegen is possibly the same reason why C enums start at zero, I guess. Picking the numbering scheme that's already familiar to most developers (and that's also been adopted by new PLs such as Rust and Swift just to name two of them) IMO helps as is more "predictable" (as-in, a newcomer expects it to work that way)

1557501645
TheLemonMan
and using two different schemes for extern & non-extern enums is asking for trouble heh, I feel that'd be against Zig's koans

1557501812
TheLemonMan
I hope I managed to get my point across, I'm better with code than with words

1557501828
andrewrk
I do see your point. I'm thinking about it

1557501899
andrewrk
I'm wondering whether we want to guarantee/define enum ordering for non-extern enums

1557502068
andrewrk
I'm reading

1557502111
emekankurumeh[m]
have you seen this:

1557502248
halosghost
it's interesting

1557502260
halosghost
I have mixed feelings about wasm becoming a universal platform though

1557502424
andrewrk
TheLemonMan, I am conflicted and I don't want to make a decision about it right now

1557502455
andrewrk
feel free to do the C enum ordering for all enums for now, we can revisit later

1557502929
TheLemonMan
great, will do later

1557503983
tgschultz
halosghost: my feelings are less mixed. I'm by no means an expert in the subject but it appears to me that wasm is kinda crap for that goal. I've thought about making a new OS (environment more than kernel) before and one idea I had was, in addition to support for multi-arch binaries, guaranteeing a virtual-arch target that is supported no matter what the real arch is, so even brand new processors could run any application without

1557503983
tgschultz
recompilation as long as it included support for the virutal-arch. I looked at wasm a bit for that but it seems inadequate just from the memory model alone.

1557504211
tgschultz
andrewrk: does the definition of "field", in the ZigType and related structures sense, include definitions within a struct, or just actual fields? If the latter, how does one go about finding the former?

1557504266
companion_cube
tgschultz: but wasm is promising because it doesn't require new OSes nor new processors

1557504401
tgschultz
companion_cube: no, just new runtimes on top of every OS instead. The idea wasn't that the OS "required" new processors, but that it could support running the virtual-arch on them as soon as the OS itself was ported. Obviously native binaries would be better, but until that gap is filled no one has to deal with the chicken-egg problem of not having applications on the new arch.

1557504455
tgschultz
and unlike a runtime that abstracts away the OS, it instead provides the actual OS ABI.

1557504512
companion_cube
so it'd be better because hypothetically, people would eventually adopt processors for this new arch?

1557504580
tgschultz
it'd be better because it would allow experimentation in the physical arch space without the chicken-egg problem. well, not as severe of one anyway.

1557504631
companion_cube
not sure why it's better than having new archs + wasm runtimes on them, anyway; the world will keep having several architectures for a while :)

1557504642
tgschultz
which wasm runtimes?

1557504647
tgschultz
there are like 5 now, and growing

1557504674
andrewrk
zig has one planned too

1557504675
tgschultz
I want less abstraction, not more.

1557504692
andrewrk
at the very least so that we can test wasi target

1557504720
andrewrk
speaking of tgschultz I thought of an idea yesterday regarding the planned safety features that I think hopefully can satisfy you

1557504755
tgschultz
I was coming around to the idea of hidden allocation of stack frames in debug/safe mode, but if that can be avoided so much the better.

1557504761
companion_cube
personally I'd be happy with more abstraction (wasi) as long as it's a way out of the current electron+js bloat

1557504800
andrewrk
much like the panic handler being overridable, the safety features for escaped stack variables can go through a minimal user-defined allocation interface which is overridable and disableable

1557504800
tgschultz
companion_cube: lesson from history: it's only un-bloated now because it doesn't do much. Web browsers were once lightweight too.

1557504815
andrewrk
so it would be on by default but in the same way that panicking dumps a stack trace by default

1557504834
andrewrk
this would make it easy to opt out of in your codebase, and it would also make it possible to opt in to the safety in freestanding mode with some glue code

1557504843
tgschultz
so I could swap out my own alloctor tuned for that kind of work instead of relying on the native one? I like it.

1557504858
companion_cube
well I doubt wasm will slow down as much as JS

1557504870
andrewrk
yes or disable the safety entirely, potentially by having your custom implementation just return error.OutOfMemory (or maybe set it to null, idk yet)

1557504911
tgschultz
I do like that idea.

1557504980
andrewrk
tgschultz, regarding "field" are you looking at .cpp code?

1557504985
tgschultz
yes

1557505017
andrewrk
in this context "fields" are exclusively the struct fields, e.g. a: i32, b: bool, c: f64

1557505038
andrewrk
so you want to get the globals from the namespace of the struct?

1557505041
tgschultz
ok, so how do I get from container to definition? specifically an fn within it?

1557505047
tgschultz
yeah.

1557505055
andrewrk
is this in ir.cpp?

1557505057
tgschultz
yes

1557505133
andrewrk
search that file for find_container_decl

1557505154
tgschultz
'decl', that's a term I hadn't considered. thanks.

1557505302
tgschultz
get_container_scope(container) => find_container_decl(scope, name) => Tld => ZigType looks like the path I need.

1557505578
tgschultz
overall this is remarkably clear code for cpp, it's just been a long time since I've worked in it and I've never looked at the compiler code before.

1557505589
andrewrk
I avoid most c++ features

1557505606
andrewrk
ain't nobody got time for that shit

1557505682
tgschultz
agreed

1557508113
TheLemonMan
hmm, shouldn't `var foo = @ptrToInt(&some_function)` work?

1557508233
andrewrk
TheLemonMan, leave off the &

1557508259
TheLemonMan
it still complains about the RHS being not CT-evaluable

1557508272
andrewrk
comptime?

1557508279
TheLemonMan
yep

1557508285
andrewrk
make `foo` const

1557508312
TheLemonMan
but I need the mutability too

1557508325
andrewrk
why is this in a comptime context?

1557508333
andrewrk
the exact memory address of functions isn't known at comptime

1557508354
TheLemonMan
it's just a global, no idea why it tries to constant-fold the initializer

1557508370
andrewrk
oh, ok. I think this is

1557508388
TheLemonMan
oh no :(

1557508413
andrewrk


1557508487
andrewrk
can you work around it with @ptrCast(*c_void, some_function)?

1557508674
TheLemonMan
let's see, gimme a few mins

1557508752
TheLemonMan
I definitely love zig fmt, I'd love it even more if it would wrap the looong lines

1557508779
andrewrk
TheLemonMan, so far zig fmt has avoided all logic regarding column count

1557508793
andrewrk
you can put `,` at the end of stuff to hint to break things into multiple lines

1557508812
andrewrk
function calls, declarations, struct inits, arrays, etc

1557508844
andrewrk
idk how to solve the line length problem. the style guide says "aim for 100" but that's a completely arbitrary number

1557509021
andrewrk
I kinda want to say "no line limit, your IDE should wrap for you as appropriate"

1557509048
andrewrk
even though nobody has a zig IDE that does that yet

1557509056
TheLemonMan
good luck with that, vim is dumb as a brick when it comes to indentation

1557509068
andrewrk
yeah I'm all too familiar with that

1557509353
TheLemonMan
wrt #661 do you think there's a better syntax than those hideous square brackets?

1557509514
andrewrk
yeah, got any ideas?

1557509527
tgschultz
well angle brackets were a leading candidate for that sort of thing since async introduced them, but I'm not so sure that's the plan anymore. Maybe since it is an enum, fn.Ccc?

1557509597
TheLemonMan
off the top of my head `pub call_cc(builtin.CallingConvention.C) fn oh_well() void { ... }`

1557509607
TheLemonMan
but it gets messy pretty quick

1557509633
andrewrk
enum literals help a lot, and they work today: pub call_cc(.C) fn oh_well() void { ... }

1557509645
andrewrk
we just need a place for an expr to go

1557509720
andrewrk
functions already have align(expr) after the args

1557509729
andrewrk
so that you can use comptime parameters in expr

1557509771
andrewrk
if we follow this (and I choose a different keyword): fn ohWell() align(4) callconv(.stdcall) {...}

1557509790
andrewrk
I think that makes the most sense - considering align() is important

1557509807
TheLemonMan
hmm, that looks nice

1557509839
andrewrk
I'm confident that's better than the accepted proposal so I'm going to edit it

1557509990
andrewrk
builtin.TypeInfo.CallingConvention should be pulled out into builtin.CallingConvention

1557510176
andrewrk
updated. that's still greenlit

1557511096
tgschultz
andrewrk, thanks for that tip on locating the source line number the other day. now that I know enough gdb to get by it has been very handy.

1557511208
TheLemonMan
tgschultz, the backtraces should not crash anymore now

1557511282
tgschultz
I haven't rebased my branch yet and I've made changes to the compiler.

1557518705
andrewrk
we have our first passing self-hosted translate-c test:

1557521608
tgschultz
andrewrk, could use a hint: in ir.cpp how do get a reified ZigType from a generic fn?

1557521676
andrewrk
there's only 1 place that knows how to do that and it's completely coupled with function calls

1557521710
tgschultz
ok, I'll take a different route to where I need to go, thanks.

1557529028
hryx
Hm, a possible future node in a decentralized Zig package management ecosystem?

1557529900
mikdusan
hryx: nice find. i wonder if i can use this to publish some tool chains for macOS.

