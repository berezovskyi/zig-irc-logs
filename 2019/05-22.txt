1558484870
fengb
Is there a way to force zig out of comptime?

1558484874
fengb
error: unable to evaluate constant expression:         const byte_slice = try self.reallocFn(self, ([*]u8)(undefined)[0..0], undefined, byte_count, alignment);

1558484924
fengb
As much as I'd like to preallocate on the heap... >_>

1558484939
scientes
you can

1558484944
scientes
not sure with zig

1558484955
scientes
but with c you just put your fixed buffer in a differn't elf section

1558484960
scientes
using a GNU extension

1558485092
fengb
I'm trying to allocate at runtime but zig is insisting trying at comptime

1558485186
scientes
well comp-time allocator is a new thing

1558487490
daurnimator
fengb: it shouldn't unless you're in a comptime block somewhere

1558487502
daurnimator
fengb: infact zig will usually always prefer runtime over comptime

1558487621
fengb
Yeah user error, I was exporting this in a struct -_-

1558487695
daurnimator
fengb: your question still suggests an improvement in the language/tools though: some way to check "why am I comptime" -> something in the stacktrace?

1558487995
fengb
Ah, maybe something like `src/main.zig:99:24: note: forced comptime call from here`

1558488009
tgschultz
fengb, I believe it's your use of undefined in the old_align parameter?

1558488045
tgschultz
or not, I guess I should read the chat string farther

1558488051
daurnimator
fengb: yes, that sounds like a helpful compiler note. maybe make a feature request? :)

1558489622
tgschultz
scientes: so I tried passing my assembly as a C file, and it fails to build it. -v makes it look like it is trying to execute gcc!?

1558489683
tgschultz
tell me that isn't the case, because if so that's a pretty bad oversight.

1558489754
scientes
rofl

1558489782
tgschultz
passing it as --c-source doesn't work either, something about a d file. --assembly worked

1558489819
scientes
>  something about a d file.

1558489821
scientes
thats a bug

1558489846
tgschultz
great, so we deprecated a perfectly working command in favor of one that doesn't work.

1558489891
scientes
actually the .d bug was something that DIDNT work with --assembly

1558489892
scientes


1558489907
scientes
guess that patch was a POS

1558489917
scientes
tgschultz, its calling gcc -E right?

1558489923
tgschultz
hold on, maybe I'm just tragically out of date

1558489956
daurnimator
Does anyone know how zig deals with floating point rounding mode?

1558490011
scientes
daurnimator,

1558490027
daurnimator
scientes: that's not rounding mode is it, just -ffast-math?

1558490051
scientes
Results assume the round-to-nearest rounding mode.

1558490068
scientes
thats IEEE 754

1558490071
scientes
otherwise you need these

1558490097
scientes
daurnimator, you can actually call those without changing the compiler

1558490105
tgschultz
ok, well scratch my complaint. --c-source does work on latest master. trying to build with cc doesn't. I would have thought it would invoke the zig-c compiler, but -v tells me: `"gcc" -v -m32 -o a.out "C:\\Users\\TANNER~1\\AppData\\Local\\Temp\\dpmi-b94a02.o"`

1558490107
scientes
just use export "llvm.foo.bar"

1558490137
scientes
tgschultz, check it in strace to make sure

1558490145
tgschultz
windows don't got dat

1558490153
scientes
tgschultz, because ARGV[0] != AT_PROG

1558490154
tgschultz
though I do have process mon

1558490155
scientes
ahhh...

1558490157
daurnimator
scientes: more thinking about risks of functions behaving differently at comptime vs runtime (and hence differently depending on optimization level) due to e.g. a library changing the rounding mode

1558490165
scientes
then i have no idea, i'm a Linux person

1558490186
scientes
daurnimator, zig should always be IEEE 754

1558490198
daurnimator
yeah.... and IEEE754 has different rounding modes

1558490199
scientes
unless you set optimized mode

1558490206
scientes
oh i c

1558490233
scientes
well if a shared library changes it, that is outside of zig's control

1558490294
daurnimator
yep.

1558490323
daurnimator
but I have a feeling it makes certain optimizations zig makes invalid

1558490326
scientes
if you want to add other rounding modes to zig, via those contrained modes (I am not sure about softfloat support for the compttime however), then go ahead

1558490335
daurnimator
I'll make an issue....

1558490348
scientes
<daurnimator> but I have a feeling it makes certain optimizations zig makes invalid

1558490353
scientes
explain (in the issue)

1558490389
tgschultz
oh my, the horror. zig searches the entire path for every conceivable executable format named CC, including JS, WSH, and COM

1558490403
scientes
tgschultz, yeah, that is that shit patch

1558490431
scientes
sorry i shouldn't use such harsh words, he is a valued member

1558490432
tgschultz
same with ptxas

1558490471
tgschultz
checks a bunch of c:/etc/distro-name-release...

1558490477
scientes
zig wants builds to be in-house, so that is def. a bug

1558490511
scientes
well, clang actually calls into gcc for assembly, IIRC

1558490542
tgschultz
then the tripples for native and target-gcc.exe....

1558490587
tgschultz
oh, and by exe I mean every conceivable executable format again

1558490632
scientes
I don't think assembler is something llvm wants to be

1558490633
tgschultz
then finally "just" gcc.everyformatever. wow

1558490657
scientes
tgschultz, meh, cpu features on Linux is just as bad

1558490658
tgschultz
well it isn't a very good one, but assembly is a real thing that actuall exists and if you want to write system level code you're going to need it

1558490670
scientes
tgschultz, i mean dynamic library features

1558490693
scientes
and there is exactly one library (glibc) that even uses that stupid feature

1558490712
scientes
which is obsolete by elf function multi-versioning

1558490717
scientes
hopefully they drop that stupid feature

1558490740
tgschultz
yeah, I'm not a fan of glibc for other reasons, like its historical hostility to static linking

1558490766
scientes
the developers wouldn't be opposed to getting libm to build without libc

1558490786
scientes
and Ulrich Drepper was an incredible programmer

1558490801
scientes
libm has a bunch of high quality stuff in it

1558490948
scientes
well i mean its not so great, but there isn't anything better

1558491087
daurnimator
'was'?

1558491105
scientes
he works for BoA now

1558491110
scientes
doing who knows what

1558491159
daurnimator
huh? isn't he at redhat now?

1558491309
scientes
anyways, not much of a manager

1558491317
scientes
but wrap some invaluable essays

1558491320
scientes
*wrote

1558491678
coolreader18
scientes, could you help me out translating the assembly from gcc/nasm to zig/at&t?

1558491697
scientes
coolreader18, i know very little about assembly

1558491712
scientes
coolreader18, and gcc is also at&t syntax

1558491734
scientes
well actually i'm coding ppc64 assembly right now...

1558491859
coolreader18
do you know how to translate c's `register int asm("r0")` to zig?

1558491890
coolreader18
it seems like it's just a regular-ish variable but I'm not sure if the asm("r0") changes the meaning a lot

1558491919
shachaf
It changes the meaning by telling it what register to put the variable in.

1558491932
coolreader18
is that reproducible in zig?

1558491942
shachaf
I don't know that Zig supports that exact feature.

1558491958
shachaf
You probably need to use the inline asm syntax.

1558492135
scientes
clang's support of that is also buggy

1558492146
scientes
maybe i should have filed a bug

1558492185
shachaf
The inline asm syntax should let you specify everything you need, it's just a bit awkward.

1558492216
scientes
shachaf, not always.

1558492227
scientes
well actually

1558492238
shachaf
(But not as awkward as gcc, which gives every register its own name!)

1558492250
scientes
anyways, I was trying to bind the arm link register to a variable, and clang just pruned the instructions

1558492256
scientes
cause i was doing something quite weird

1558492306
shachaf
The return address register?

1558492316
scientes
the link register

1558492334
shachaf
Is that not the register with the return address?

1558492341
scientes
yes

1558492346
shachaf
Anyway if you're doing something weird enough you're probably better off moving more of the code into assembly.

1558492386
scientes
i was promoting the lr so i could put date in the instruction stream

1558492390
scientes
*data

1558492472
scientes
so on return it jumps over the data

1558492483
scientes
and i could read the data by reading the lr

1558492655
tgschultz
coolreader18 you've seen

1558492690
coolreader18
tgschultz yeah, I've been using it

1558493016
coolreader18
Does this (

1558493114
scientes
coolreader18, oh! just look at the assembly in arm64.zig

1558493121
scientes
that should get you really close

1558493126
scientes
(I wrote that)

1558493205
scientes
the difference is that the syscall is in the instruction stream, rather than in register r8

1558493220
scientes
(x8 means it is a u64)

1558493262
scientes
coolreader18, i personally found assembly in zig to be quite difficult as well

1558493273
scientes
it takes some getting use to the syntax

1558493688
scientes
coolreader18, if you want to ask someone to do something for you, you need to give them all the tools, and explain the whole problem

1558493772
coolreader18
thanks, I'll keep that in mind

1558493825
coolreader18
basically what I'm trying to do is like you suggested, make syscalls straight from zig without needing ndless' libc

1558493833
scientes
that is cool

1558493847
scientes
the other thing is that you need to figure out how to call that llvm --lower-atomic pass

1558493856
scientes
just on this target

1558493892
scientes
(assuming there is no preemption)

1558494001
coolreader18
would that involve using `ZigLLVMInitializeLowerIntrinsicsPass` from `zig_llvm.cpp`?

1558494025
coolreader18
I can't find anywhere where that's used though

1558494044
scientes
no that is for intrinsics

1558494078
scientes
well actually i need to look into it

1558494169
scientes
coolreader18, you need LLVMAddLowerAtomicPass

1558494176
scientes
it will look very similar to that one however

1558494200
coolreader18
👍

1558495289
tgschultz
so does anyone know what the inline asm errors with i386-windows are about? I know that it isn't a supported target, but it used to at least compile.

1558495430
scientes
tgschultz, paste?

1558495477
tgschultz
same as end of this issue:

1558495516
scientes
so this is the clang built into zig?

1558495524
fengb
Is DirectAllocator broken in macOS?

1558495859
fengb
I must be doing something wrong. Tests are fine if they don't go through my wrapper

1558496051
tgschultz
scientes no idea. I'm not doing anything special, it gives that even with a main that returns u8(0) and nothing else.

1558496089
scientes
maybe do a git bisect

1558496096
scientes
if it worked before

1558496115
tgschultz
that was a long time ago from what I recall

1558496135
daurnimator
fengb: so what's zee_alloc? :)

1558496136
scientes
I did a git bisect on llvm and that takes ages to build

1558496149
scientes
however zig is more likely to have builds you can't even test

1558500982
fengb
Minimal general purpose allocator

1558501019
fengb
Mostly a toy since I've never implemented an allocator before, but also trying to make it tiny for wasm deploys

1558501101
daurnimator
fengb: header/footer based or radix tree?

1558501126
fengb
Uh... radix tree sounds more correct (lol)

1558501156
fengb
Probably neither? I'm just making stuff up as I go

1558501229
daurnimator
fengb: where do you keep metadata about an allocation?

1558501258
fengb


1558501272
daurnimator
the three possible answers are: 1. next to the allocation. 2. somewhere central. 3. no metadata

1558501579
daurnimator
fengb:

1558501616
daurnimator
oh wait... you're dividing

1558501628
fengb
Probably!

1558501653
fengb
log2(page_size) - log2_ceil(memsize)

1558501684
daurnimator
fengb: bug I think I see: you alloc for alignment+size but only free by size

1558501704
fengb
Oh

1558501734
fengb
I mean, nothing really works yet. Just tossing ideas on paper

1558501747
daurnimator
fengb: also after a shrink, a free will go back into a smaller bucket than it otherwise could

1558501772
fengb
And it seems like I'm basically reimplementing dlmalloc poorly... so I might want to reconsider

1558501827
daurnimator
fengb: I have an stackable allocator almost written.... but I am stuck on supporting zig's alignment well

1558501859
daurnimator
I think I almost have a solution; but it's so complex to write my brain hurts... don't look forward to debugging it

1558501888
daurnimator
I blame it on selecting option 1. above: I wrote it so that metadata is next to each allocation.

1558501900
fengb
Yeah I punted on memory alignment. I think it's as simple as round up to power of 2

1558501938
fengb
I saw a floorPowerOfTwo but I really want ceilPowerOfTwo

1558501947
daurnimator
fengb: the problem with aligning is that if you want your metadata "next to the allocation", then your metadata needs to move along with it

1558501968
daurnimator


1558501987
fengb
Ha!

1558502025
fengb
I'm not sure I need metadata with this strategy: alignment should always be aligned to power of 2 for small stuff, and aligned to page size for big stuff

1558502034
fengb
I'm probably missing something

1558502036
fengb
A lot of things

1558502044
daurnimator
fengb: but in zig an allocation can say: give me 4096 bytes, aligned to 2GB

1558502054
fengb
Oh

1558502072
fengb
Nah, you can only get 4k back :P

1558502381
fengb
Are alignments consistent or do I need to take each instance separately?

1558502865
daurnimator
fengb: what do you mean?

1558503024
fengb
Would all memory of size X have alignment of Y

1558503039
fengb
Or size X + ptr P

1558503258
daurnimator
fengb: every allocation can be different

1558522304
daurnimator
why is there no @atomicSave ?

1558524350
daurnimator
or as llvm calls it s/Save/Store/

1558544684
donpdonp
isnt that what @atomicRmw does?

1558545385
merlyndmg
I'm trying to figure out how to get zig to properly link to a DLL via its import lib, while compiling a program on windows. It keeps saying all the symbols from the DLL are missing, even though dumpbin say the export lib and the dll both have them. (this is lib epoxy in this case, for the tetris demo). Anyone have a link to instructions on how to get it working?

1558549876
andrewrk
hello

1558550023
shritesh
👋

1558550025
nrdmn
hello

1558550103
andrewrk
beautiful, with the new firefox update, the zig docs are light/dark depending on your browser preference

1558550303
shritesh
Safari had that for quite a while on macOS. I hope it comes to iOS in the next update.

1558550332
merlyndmg
can I cross-post (or just link) a Q I put on reddit in here?

1558550341
andrewrk
merlyndmg, definitely

1558550346
merlyndmg


1558550522
merlyndmg
For the crosspost - should I be able to link to a pre-compiled C DLL w/ Windows as the target? I've tried it via `exe.linkSystemLibrary("epoxy.lib");` and it gives me errors that it can't find any of the DLL's (or in this case link lib's) symbols

1558550533
merlyndmg
well, windows as the host too :)

1558550675
andrewrk
merlyndmg, yes you should be able to do this. one way to do it is to put the DLL name after `extern` in your declarations. e.g. `extern "kernel32"`. this will automatically generate the .lib and put it on the link line. unfortunately this doesn't work with @cImport

1558550734
andrewrk
if you have a .lib to link against I believe it should be exe.addObjectFile. sorry for the bad name, this should be changed

1558550911
merlyndmg
cool I'll try mucking about with that! I also saw that function when looking at the zig source

1558550948
merlyndmg
the zig source and existing scripts kinda look like the only "docs" for the build system rn. did you want someone to do some placeholder improvements for that, or is it better to work on it when you can give it real attention?

1558550982
merlyndmg
or is it too in flux to want placeholders

1558551003
andrewrk
that's correct. part of the issue is effort not directed at build system docs, but yes a big issue is that it is still very much in flux

1558551010
andrewrk
especially once package management comes out, it will change a lot

1558551089
merlyndmg
If it's going to change significantly sounds like it might be wasted effort to doc what's there now for sure

1558551221
andrewrk
the parts of the zig project that are documented are a bit more stable

1558551238
merlyndmg
is it intentional that the readme looks like it has the same outline as "the docs", but is actually up to date?

1558551289
merlyndmg
(if you can't tell, trying to see if there's any part of the docs I would be qualified to do some busy work on, or at least file tickets for, etc)

1558551296
andrewrk
I'm not sure what you mean - the content in the readme is different than the content of the docs. I'm assuming "the docs" ->

1558551316
scientes
andrewrk, i can't reproduce and i'm on 69.0a1. i turned on the dark theme

1558551400
merlyndmg
That statement was mostly due to "zig build system" being in both. I guess the release notes are just gigantic at this point. which is pretty cool

1558551422
andrewrk
ah you meant release notes, not readme

1558551439
scientes
and browser.in-content.dark-mode is true

1558551446
andrewrk


1558551669
merlyndmg


1558553156
andrewrk
alright it's time to get through these pull requests

1558553370
shritesh
The homepage has dark mode too now? Nice

1558553417
scientes
it isn't working for me

1558553423
scientes
linux nightly (69)

1558553443
andrewrk
scientes, you can look at the source, the problem is client side if it isn't working

1558553452
scientes
yeah i saw the source too

1558556179
marijnfs_
does someone have experience linking to libcuda? i'm getting  /usr/lib/libcuda.so is incompatible with elf_x86_64

1558556356
emekankurumeh[m]
welcome back andrewrk

1558556397
shritesh
I tried to generate nvptx a few weeks ago and gave up.

1558556397
andrewrk
marijnfs, I think you need to give a cuda target to your zig code

1558556443
andrewrk
yeah either nvptx or nvptx64. note that both of these are "tier 4" targets which means you'll probably have to get involved in zig development if you want to use them

1558556495
marijnfs_
andrewrk: hmm that sounds indeed experimental, when I just link to cuda_rt (runtime) it seems to link at least, but can't run it

1558556505
shritesh
I couldn’t get anything practical done without being able to annotate functions as host/device.

1558556728
scientes
but if you get involved it would probably be considered a reasonable target

1558556739
scientes
also OpenCL

1558557274
merlyndmg
"exe.addObjectFile" - this is for static libs, or does it also work for DLL "export libs"?

1558557287
shritesh
Is OpenCL language independent? I always thought you’d have to pass the kernel source code to the driver like OpenGL shaders?

1558557290
merlyndmg
I am getting the same errors when converting to use that, with DLL export libs (not static libs)

1558557755
Aransentin
Q: If I write a WebSocket server, there could be a lot of different lower protocols that you might want to put it on

1558557758
Aransentin
e.g. TCP, TLS, UWSGI... and maybe some other protocol wants to lie on top of WebSockets. Is there a natural Zig-stdlib pattern to do this?

1558557762
Aransentin
(Maybe giving it two IO abstractions to feed from/into like OpenSSL BIOs, but not as 🤮)

1558557992
shritesh
Maybe the pattern used by memory allocators? There are some that piggyback on another.

1558558008
andrewrk
we're going to want some kind of async stream abstraction

1558558043
tgschultz
andrewrk: btw, I tried your suggestion of hacking codegen to force an i386-unknown-none-coff target, but then LLVM just complains that it won't build a coff for a non-Windows OS because how dare I even think such a thing.

1558558044
andrewrk
merlyndmg, as far as I'm aware static libs and DLL export libs are the same thing

1558558135
tgschultz
though at this point I'm pretty sure coff wouldn't help anyway. I need to produce an LE or straight MZ executable to work with most DPMI hosts, or PE in the case of one, so I'm probably going to have to write some kind of translator from ELF to one of those.

1558558149
emekankurumeh[m]
dll export libs link to the dll, whereas static libs are actually statically linked in

1558558191
Aransentin
Hmm, yeah... Though in the case of the memory allocators, all the events come from the top of the "stack" and propagate downwards; in the IO case, there might events all over the place

1558558408
marijnfs__
is there a way to directly give a full path to a library to link to? it's resolving to the wrong library for me, and I can't override the initial search dirs

1558558951
andrewrk
marijnfs, --object

1558560461
nrdmn
seems like I can assign extern variables at declaration. Does that make sense?

1558560568
merlyndmg
I don't think DLL .lib files are the same as static .lib files. They don't contain object code. I think they just handle the DLL load and forward calls to the DLL. Maybe you mean that they should just link in the same way, and should just work?

1558560616
merlyndmg
I will try the other method that you suggested now, since exe.addObjectFile is getting the same linker errors

