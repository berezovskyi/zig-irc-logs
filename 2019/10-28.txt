1572228382
traviss
first time building zig on a couple days old debian install and i'm getting this:

1572228788
traviss
stage 1 build with no errors

1572229961
wilsonk
traviss: hmm...that syntax for async is old. Looks like you need to pull the newest zig

1572230046
wilsonk
oops, wait that happens here also

1572230051
wilsonk
one sec

1572230185
traviss
i asked the same on discord zig and they responded that stage 2 is still experimental. my bad

1572230251
wilsonk
well, it is but I thought it was a little more up to date...that syntax was removed a couple months ago IIRC

1572230351
traviss
yeah, i was confused.  i was thinking it was some c++ for a while after reading the error

1572238120
plumm
hey, does anyone know here how to read the LLVM module errors? having a hard time parsing this line:  { %toml.Value, i16 }*  call fastcc void @toml.Value.fromFloat(%toml.Value* sret %0, %std.builtin.StackTrace* %error_return_trace, %std.mem.Allocator* %10, %"[]u8"* %3), !dbg !3512

1572239240
wilsonk
plumm: any more context...a trace perhaps via pastebin?

1572239395
plumm


1572241406
plumm
it seems to have something to do with switching on an enum type and returning something, unsure

1572241582
plumm
nevermind haha, was forgetting the return value was in a try chain. thanks1

1572241663
plumm
I figured this out by noticing that the return type did not have an error set but the llvm function definition seemed to want one

1572249254
NiCad
How well does zig work with a C++ api?

1572249274
NiCad
Checking out the eosio platform.

1572251421
FireFox317_
plumm: I think you should create a github issue for that including a reduction of the code that was causing the problem, because the zig compiler is generating invalid LLVM ir, which is always a bug regardless of how a program is written.

1572252718
bgiannan
I found that, most of the time, i have llvm ir errors when i forgot a `try` somewhere

1572252970
FireFox317_
Jup, but we don't want any llvm ir error to show up to the user, because the backend is just an implementation detail. They should all be handled by the zig compiler itself.

1572253168
gustav_o
are we talking about the bug where zig doesn't enforce `try` on functions that return slices?

1572253550
FireFox317
gustav_o: That is probably another bug that shows some llvm ir errors? We were talking about any bug that shows up llvm ir errors, most of them occur when someone forgets a `try`

1572253628
gustav_o
mm

1572253661
gustav_o
I've encountered the following one:

1572254371
FireFox317
Yeah also that one should be a compile error and not show the llvm ir error.

1572254677
FireFox317
Regarding std docs: the current scrolling behaviour is a bit weird, because when you scroll down to click on a namespace, i.e. click on 'io' then it won't scroll back up when showing the page regarding the 'io (Struct' information.

1572255831
daurnimator
Anyone have a look at my earlier paste?

1572259954
daurnimator


1572261931
samtebbs
Does anyone know if it's possible to stop Zig from generating i386 SSE code?

1572261992
samtebbs
I'm running into an invalid opcode exception in qemu when an SSE register is used

1572262081
samtebbs
I would like to be able to pass -mno-sse to llvm but apparently the -mllvm argument to zig is "unsupported"

1572262085
FireFox317


1572262145
samtebbs
FireFox317: thanks, but I have to ask why this was enabled by default on freestanding

1572262178
samtebbs
I don't want to have to use a fork of Zig just to build my kernel :p

1572262234
FireFox317
samtebbs: I have no idea xd

1572262394
samtebbs
Yeah something to ask andrew :p

1572262516
noonien
hello folks

1572262524
noonien
why does zig require linux 3.16+?

1572262543
noonien
i can't find anything in the documentation/release notes

1572262562
Snektron
I suspect maybe some kernel functionality?

1572262572
Snektron
Try it and see if it works

1572262581
noonien
well, hehe, that's obvious, but i'm trying to see what exactly

1572262739
noonien
as far as i can tell, there isn't anything specific in zig code

1572262756
noonien
perhaps some library, or it's just the version of the kernel that's being tested

1572263177
noonien
##rust

1572263181
noonien
ooops, sorry about that

1572263718
mq32
samtebbs, funny that three people ran into this problem in the last week ^^

1572263740
mq32
i have probably the same problem when using 64 bit values on i386

1572264098
samtebbs
mq32: I think it was caused by

1572264113
samtebbs
WHich seems to be doing the exact opposite of what the commit message suggests

1572264150
samtebbs
I think it needs reverting tbh as it doesn't make sense

1572264311
mq32
samtebbs, i think it's correct. it removes "sse" from "pentium4" by prepending a "-" in front of the feature name

1572264387
samtebbs
mq32: Oh so the minus disables it. I read it as a command line argument which enables it.

1572264561
daurnimator
noonien: I think because 3.16 is the oldest kernel that even vaguely gets LTS support from anyone

1572264671
daurnimator
noonien:

1572264697
noonien
oh, i see

1572265527
samtebbs
That freestanding check doesn't seem to be working as I'm getting SSE code when building for freestanding

1572266047
samtebbs
Ok I could be wrong here, a full rebuild doesn't have the SSE code

1572266417
pixelherodev
Important note regarding freestanding; if you have any C source file, they need to be built with SSE explicitly disabled also.

1572266454
pixelherodev
The `-sse` for freestanding I added only applies when compiling ZIg code, not with `zig cc` (and AFAIK not with `build-obj --c-source` either)

1572266630
pixelherodev
Not sure if that's the issue you're running into, but it definitely trapped me up for a bit

1572266873
pixelherodev
s/trapped/tripped/

1572267180
tgschultz
zig worked on 2.6 at one time. At least, the zig static binary we distribute did.

1572268907
daurnimator


1572285955
nrdmn
andrewrk: are you coming to 36c3?

1572286964
emekankurumeh[m]
can anyone windows check if zig fmt is successfully converting CRLF to LF, or is it giving you an error?

1572287493
andrewrk
pixelherodev,

1572287617
FireFox317
as mikdusan also had some trouble with sse in his kernel, maybe its a good idea to completely dissable sse for freestanding? I think the current change that pixelherodev made is only valid for x86_64

1572287844
FireFox317
My bad, it was samtebbs

1572288109
andrewrk
pixelherodev, never mind, I took care of it just now

1572289219
D3zmodos
emekankurumeh If I run `zig fmt --check` on hello world from the docs it passes without issue with LF but gives the following with CRLF:

1572289220
D3zmodos
`hello.zig:1:1: error: expected '}', found invalid bytes

1572289221
D3zmodos
const std = @import("std"); `

1572289250
D3zmodos
(using 0.5.0 and the current/2019-10-27 master build)

1572289275
D3zmodos
(checked by toggling between fileformat=unix & dos in vim)

1572291695
mq32
okay, i got the weirdest bug right now. i have a CPU crash that fixes "itself" if i compile with release-fast instead of debug

1572291928
mikdusan
sounds like some ub

1572291972
mq32
yeah, kinda

1572291982
mq32
i can track that down to "i use 64 bit integers"

1572291991
mq32
as soon as i do that, it will crash

1572292028
mikdusan
do you have any use of `undefined`?

1572292085
mq32
yes, 4 times

1572292102
mq32
two of the values are initialized with inline assembler

1572292111
mq32
1 is the kernel stack array which is "undefined"

1572292117
mq32
and the last one is my VGA pixel backbuffer

1572292128
mq32
all 4 are global variables and aren't used in this place

1572292238
mikdusan
just shooting from the hip, debug builds fill the variable with a canary byte value 0xa so if you see that anywhere...

1572292268
mikdusan
another big diff is debug builds have bounds checking on slices. so if you have ub slice storage i could see that being an issue

1572292303
mq32
nah, that shouldn't be the problem

1572292326
mq32
it doesn't panic in debug build, but actually triple-fault

1572292360
mq32
Terminal.println("fail = {}", u64(0));

1572292365
mq32
this is the culprit line

1572292367
mq32
with

1572292371
mq32
Terminal.println("fail = {}", u32(0));

1572292371
mq32
it will work

1572292399
mikdusan
try putting a 4-byte string literal there. then change it to 8-byte.

1572292468
mq32
hm

1572292477
mq32
it seems like i hit some

1572292520
mq32
now i have commented some code and now it only works in debug build, but not with release-fast anymore O.o

1572292549
mq32
but i got to go, will be back later, investigating

1572294118
nrdmn
I could

1572301842
pixelherodev
andrewrk, thanks! Sorry I didn't get to that in time

1572301861
andrewrk
that should solve the issue for C files

1572301885
pixelherodev
Yeah, I was just overriding it in my Makefile :P

1572301921
pixelherodev
` build-obj --c-source -mno-sse` worked for me even before that, glad I can remove that flag though

1572302196
lunamn
should awaiting a heap-allocated frame still cause the async fn recursion compile error?

1572303096
andrewrk
lunamn, that error occurs when zig hits a dependency loop trying to determine if a function should be async. if this happens it makes the function non-async, but then if it later finds out it must be async, then it  gives this compile error

1572303101
andrewrk
the logic behind this can be improved

1572303159
andrewrk
a workaround would be to put this in the function: if (std.io.mode == .evented) { _ = @frame(); }

1572303183
andrewrk
(before the recursive reference)

1572303438
lunamn
andrewrk: trying to put that workaround but failing with same errors, I'm assuming that would go before allocation of the frame?

1572303693
andrewrk
you need zig to figure out to make a function async before it references anything else that will eventually reference the original function

1572303978
lunamn
was a bit confused with that since there's only one recursive call but it happens on a different function, but regardless, it compiles

1572304036
lunamn
and it works! hooray!

1572305326
lunamn
andrewrk: it isn't the same as musl's system calls, but it is close, (snipped unecessary syscalls off the link)

1572305473
daurnimator
lunamn:why the fstat?

1572305498
daurnimator
lunamn:also FWIW use sendmsg not connect+write

1572305537
lunamn
daurnimator: to read the entire file into memory, it isn't efficient and I keep a note to check it out later

1572305610
andrewrk
lunamn, nice

1572305639
lunamn
I'd do the same thing musl does, which is binding, but last time I tried binding on another project, I hit compile errors

1572305647
andrewrk
with evented I/O, the poll() will be replaced with integration with std.event.Loop.instance

1572305681
daurnimator
otherwise down the track socket-reuse becomes a mess:

1572305691
daurnimator
lunamn: ^

1572305759
daurnimator
lunamn: better to just have a page-sized buffer in memory and take multiple reads in the rare situation that /etc/resolv.conf is larger than 4096 bytes...

1572305872
lunamn
daurnimator: I'll check both those things, thanks

1572306045
andrewrk
according to

1572306184
andrewrk
the connect() and getsockname() calls appear to be part of a RFC 3484/6724 destination address selection implementation

1572306202
daurnimator
lunamn: I haven't had a look at your code yet; but ideally it should be written in a way that works for both UDP and TCP; but also lets us swap in DNS-over-TLS and DNS-over-HTTP.

1572306204
andrewrk
which is skipped if there are only IPv4 results

1572306461
lunamn
getAddressList only worries about fds and poll(), the rest is in their own place, though I don't have any answer to selecting which one to do for a user of getAddressList

1572306503
daurnimator
As I mentioned the other day, "getAddressList" as a function is an anti-pattern

1572306562
daurnimator
You need to have `connectToHost("example.com", 443)` and it does dns lookups and connect() all in one.

1572306837
andrewrk
we'll get there

