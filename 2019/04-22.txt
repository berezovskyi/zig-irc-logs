1555892959
m3t4synt4ct1c
I'm super excited about zig - I've been very impressed with it so far. I'd like to help out.  I contribute to the patreon and am toying with ideas for small projects that would be helpful.  my background is in security, network software, some embedded stuff, and distributed systems

1555893044
hryx
m3t4synt4ct1c: that's awesome! welcome

1555893133
hryx
there's going to be a need for network stuff for sure, although it's semi-blocked on a big upcoming language change around asynchronicity

1555893173
hryx
I highly recommend checking out the "contributor friendly" issues to get your feet wet:

1555893379
m3t4synt4ct1c
yeah, I see andrew needs to work out copy elision, then re-do coroutines to enable async/await w/o LLVM before it's worth writing any networking code.  I'd be happy to help with a HTTP implementation

1555893497
m3t4synt4ct1c
I noticed the crypto libraries have a bunch of hash functions, but no AES implementation or anything.  I guess linking to C code for that isn't the worst thing in the world, but that code wouldn't need any networking I/O

1555893534
m3t4synt4ct1c
I'm interested in a possible IPFS implementation down the line as a possibility as well

1555893545
hryx
that sounds cool

1555893585
hryx
and AES in zig is definitely going to be worthwhile

1555893585
m3t4synt4ct1c
that's a ton of work, but having zig native IPFS would be really cool and provide redundant implementations in the WASM and other targets

1555893610
m3t4synt4ct1c
ok, cool, I'll poke around with that some

1555893680
hryx
sweet. Nothing in stdlib will link to C libs (and I could easily see AES in stdlib) except where required by the OS (e.g. macos's libSystem)

1555893706
hryx
((I think))

1555909673
daurnimator
I wouldn't trust a TLS implementation with less than 5 years in the wild. Whatever solution is chosen for TLS in the stdlib, the implementation needs to be swappable for OpenSSL, SChannel, etc.

1555909767
hryx
daurnimator: what about after an audit by a reputable organization?

1555909781
daurnimator
hryx: maybe after 3 audits....

1555909796
daurnimator
hryx: OpenSSL had tens/hundreds of audits before it stopped being full of bugs...

1555909815
hryx
A very healthy sense of caution. I like it :>

1555909820
daurnimator
(it still is; but they're on unused codepaths)

1555909847
daurnimator
One other notable TLS implementation we should support is in-kernel TLS :)

1555909881
hryx
In kernel TLS? Hmmm

1555909883
daurnimator
That doesn't cover negotiation/setup though: only certain ciphers after the connection is setup

1555909926
daurnimator
hryx: older article on it:

1555909971
hryx
Interesting! Meanwhile, Google wants to move TCP

1555909988
hryx
Er, that's what I assume anyway, based on them making SPDY

1555909993
hryx
wait, no, QUIC

1555910102
daurnimator
otherwise I spent far too much time (after discussion in #musl) designing APIs to take advantage of urings (coming in kernel 5.1). Article from January (there are several changes since):

1555910352
hryx
Hey daurnimator I've been meaning to ask. What do you foresee as the primary use case for a zig PEG? Mainly ask because you proposed adding it to stdlib

1555910597
hryx
(besides lpeg reimplemented in zig. which would be S L I C K O)

1555910818
daurnimator
hryx: well... parsing anything of finite length

1555910834
daurnimator
hryx: http header fields was my intended application

1555910871
tyler569
are http headers that complicated? o.o

1555910874
hryx
ah right. Let me look back at the logs and find the link you posted to complex headers

1555910890
daurnimator
hryx: but can be used for e.g. parsing urls; all sorts of various input formats people pipe around, etc.

1555910895
daurnimator
tyler569:

1555910951
tyler569
ah.  silly me to think someone would make a simple protocol

1555911074
hryx
hyper simple transfer protocol

1555911325
tyler569
back to gopher anyone?

1555911370
tyler569
(the kinda-like-http-but-simpler protocol, not the mascot)

1555911561
hryx
heh! why not

1555911601
hryx
oh hey tyler569 I just got onto the asm part of the new parser

1555911620
hryx
I think it should fix the syntax-related issue you found on saturday

1555911631
tyler569
sweet

1555911669
hryx
That is, if this failing_allocator issue ever gets demystified

1555911684
hryx
one must keep hope & a stiff upper lip

1555911756
tyler569
let me see if I can get llvm to build here, I'd be happy to take a closer look at it if I can

1555911797
hryx
oh awesome, that would be amazing. That reminds me, I owe you an eyeball on an issue you sent me

1555911886
tyler569
I think that was just the asm parsing, no?

1555912018
hryx
looking closer at the link you sent... yep. Is that covered by the GitHub issue then?

1555912080
tyler569
No, this one was the 'expected % or [' parse error, I only reported the crash so far

1555912153
hryx
gotcha

1555912678
tyler569
(while I wait for llvm to twiddle it's thumbs) it occurs to me that I should probably minimal-example those blocks I sent you, since that find was pretty knarley

1555912689
tyler569
who knows what the parser was doing 20-odd erorrs deep

1555912928
hryx
heh. maybe post in this channel in case there is another assembly witch who can help?

1555912942
hryx
(slash parser witch)

1555913394
tyler569
ok, so pulling them out, massaging them a little both seem to work

1555913428
tyler569
with the exception of the fact that zig doesn't seem to support anything more complicated than an identifier in the ()'s, which breaks a lot of my assumptions in the OS

1555913457
tyler569
but that seems like a pretty clear "hey I know the syntax isn't done but asm blocks should do this thing that C can do"

1555913502
tyler569
and my llvm build keeps exploding

1555913515
tyler569
something is sending SIGKILL to the linker which makes very little sense to me

1555913702
hryx
o no, is LLVM build blocking you rebuilding the zig compiler on the fly?

1555913728
tyler569
well because you need llvm built with the same toolchain you're working with, right?

1555913885
tyler569
since I haven't been working on zig my workflow up to this point has been to nab the most recent version uploaded out of CI, so I'm new to this part

1555913950
hryx
dang. I've had luck with getting LLVM via system package manager, but I know you actually found BUGS in LLVM doing this, so building from scratch is probably the right choice for you

1555914414
tyler569
welp, I was going to try the nightly deb from llvm, but that requires a libc version that conflicts with my system

1555914437
tyler569
>.<  I may have to rain check this until I run the 19.04 upgrade I was planning on doing tomorrow

1555918106
daurnimator
Anyone able to see why this is failing?

1555918606
hryx
daurnimator: why do you have to pass the allocator to every method of `h` even though you pass the same allocator to `h.init()`?

1555918655
daurnimator
hryx: huh? only a few methods need one

1555918681
hryx
hang on, maybe I'm misreading, but it looks off

1555918792
mikdusan
tyler569: do you need minimal llvm-8.0.0 binaries for 18.10? (built with 18.10's bundled gcc/g++)

1555918836
hryx
sorry daurnimator, I meant specifically why do you have to pass `debug.global_allocator` for example here:

1555918862
hryx
even though previously you have `var h = Headers.init(debug.global_allocator);`

1555918917
hryx
isn't the allocator a field of `h`?

1555918955
hryx
(not sure that would resolve your build problems though)

1555918968
mikdusan
--> something is sending SIGKILL to the linker <-- if you're on linux, it's because out of memory.

1555919126
hryx
weird daurnimator, the build says fmt\parse_float.zig:360 -- locally that shows me the line `return error.InvalidCharacter;`

1555919645
daurnimator
hryx: because getCommaSeparated returns a new/fresh string

1555919682
daurnimator
(that the caller owns)

1555920587
mikdusan
daurnimator: how much mem are you allocating? debug.global_allocator is 100 KiB fixed size.

1555922369
hryx
Recursive parser progress: +2,468 lines, 57x TODO, 18x error.NotImplemented remaining

1555922388
hryx
22 commits this weekend. We're almost there! Now that I'm sweating from all this backspacing, time for bed

1555922853
daurnimator
mikdusan: 6 bytes I think

1555922861
daurnimator
oh no. 7.

1555922889
mikdusan
i'm fairly certain the global sticks around for consecutive tests

1555922934
daurnimator
it fails only on windows. I thought it might have been because of that lack of HeapFree issue recently; but I rebased the PR and it still happeneded.

1555923010
mikdusan
it does say OutOfMemory. is there reason to distrust that error log?

1555923116
daurnimator
mikdusan: I (mostly) trust the error. But I'm not convinced it is caused by an issue in the PR; but instead due to a bug in the allocator; possibly only when in a windows environment.

1555923460
daurnimator
so looking for someone to help via one of: A. spotting an error in my logic. B. trying to replicate on their own windows machine. C. tell me about some other experience where a similar OutOfMemory error occured when running the test suite

1555944729
daurnimator
huzzah, I think I tracked down a bug in my code thanks to

1555944760
andrewrk
that's a neat idea

1555944833
Sahnvour
I was thinking a debug allocator should be implemented this way, as an agnostic wrapper over the actual allocator

1555946209
daurnimator
It's also generally useful for observing allocation patterns

1555947483
Sahnvour
yep, can make many great tools off it

1555948857
daurnimator
wait.. does errdefer run at end of block? or end of function

1555949396
very-mediocre
errdefer should run at the end of scope afaik

1555949407
daurnimator
okay thats really cool... and also I need to fix some things

1555957209
Xe
how do i create a null pointer?

1555957352
tyler569
?*T is the nullable pointer type, like `var foo: ?*i32 = null;`

1555957392
tyler569
hryx: I have a working toolchain!  I assume you're working off the stage2-recursive-parser branch in your repo?

1555957466
hryx
tyler569: ah sweet! Yep, that's the right branch

1555957575
hryx
Although, I think where I left off last night caused a different error. You might need to put a custom (simple) test at the top of std/zig/parser_test.zig to reproduce the memory leak thing

1555957793
tyler569
ok, yeah I saw there was something different happening.  I'll play around with it today

1555957824
Xe
tyler569: i found out how to do what i needed: @intToPtr([*]const u8, 1)

1555957842
Xe
i needed to pass a syscall an intentionally invalid pointer

1555958239
hryx
tyler569: great, definitely let me know how that goes. When I get a sec I'll fix the new error

1555958263
hryx
(alternatively rolling back a few commits should also work in the meantime)

1555959231
Xe
how would i allocate a struct with an allocator?

1555959891
Sahnvour
Xe, use `allocator.create(<your type>)`

1555959928
Xe
Sahnvour: and to free it?

1555959943
Sahnvour
`allocator.destroy(ptr)`

1555960177
Xe
thanks

1555962268
Xe
andrewrk: if i want to build zig on my own hardware, how much ram does it need? I'd be using this Dockerfile:

1555963131
fengb_
Xe: I've been using 2GB for all of Docker. I've seen each cc instance climb up to ~400-600mb but I haven't noticed any problem with -j4

1555963535
mikdusan
fengb_: on linux using gcc to build llvm+clang, i usually see ~500mb per job, except for clang there are a handful of files that go >1.0gb (1.5gb iirc) for compile jobs

1555963560
mikdusan
(gcc building clang)

1555963583
fengb_
Yeah LLVM and clang are a doozy, but the docker instance works around that pretty well

1555964042
Barbas
Is anyone here familiar with 'Pony'

1555964301
donpdonp
define familiar

1555964322
donpdonp
ive read the feature list, and it has very interesting features, but ive never used it.

1555964355
donpdonp
/j #ponylang

1555964688
scientes
Xe, zig stage1 needs at least 4GB

1555964714
Barbas
More on the level of if you've heard of it and what it's about. It looks interesting.

1555964758
scientes
eek, i like zig because it doesn't get in the way

1555965087
Barbas
Yeah I'm not sure how interesting it is to use, but I'm curious how they solve the concurrency data-sharing problem

1555965108
Barbas
But I'm already confused =D

1555965129
mikdusan
they make everything either immutable when shared, or mutable when isolated (private)

1555965196
mikdusan
the immutable-sharing memory is managed with a garbage collector

1555965299
Barbas
Hmm...

1555965307
Barbas
Not a fan of garbage collectors.

1555965386
mikdusan
and the other big piece is the actor model. and mutable/isolated data is wrapped in an actor that permits shared access

1555965562
companion_cube
so it's like Erlang but compiled to native?

1555965900
fengb_
Without the failfast model

1555965943
companion_cube
like, no monitors? :/

1555966211
fengb_
No crashes

1555966232
fengb_
Not sure how a supervisory tree would look

1555966335
fengb_
I think Erlang is the only language that embraces errors as an "acceptable" thing. Everything else that's tried actors also tries to fix errors in different ways

1555966337
companion_cube
grr, can't find any form of reference for their lang online -_-

1555966388
Barbas
For Pony?

1555966391
companion_cube
yeah…

1555966527
Barbas
I don't know. They seem to have a million things explained. Like how to get performance, package manager, how to build on ten different Linux distributions etc, but nothing basic about the language itself.

1555966545
companion_cube
oh well.

1555966603
Barbas
There's a cheatsheet

1555966637
mikdusan
i think the tutorial has what you want.

1555966914
Barbas
Ah nice, somehow I didn't manage to find that =/

1555967257
companion_cube
seems a lot like Erlang's actors, at least in terms of overhead

1555967268
companion_cube
256B for an actor, neat

1555967296
hryx
Yeah, with the zig 0.4.0 release people were like "you need to have a code snippet on the landing page of your website" -- after looking at the pony site I agree with that

1555967316
companion_cube
also, you need to have a single entry point for the whole docs

1555967354
Xe
there is though

1555967370
Xe


1555967403
companion_cube
yeah, I didn't mean Zig didn't do it well

1555968269
donpdonp
whats the build.zig equivalent of zig --verbose-cc

1555968291
donpdonp
im trying to get a dump of the imported structs from an included .h file

1555969113
donpdonp
ok i recreated the build.zig with commandline opts, and used --verbose-cimport. that worked

1555969123
strmpnk
companion_cube: In practice, Pony's model is very different from Erlang's. The actors are GC'ed objects rather than selective receive based, which is why the crash model and lack of supervisory structure is different.

1555969261
donpdonp
can someone shed some light on:  error: expected pointer, found '.cimport:13:13.struct_uiControl': var control = @ptrCast(c.uiControl, &w);

1555969302
donpdonp
im reading the first param as the type to cast to, not sure why its complaining about a pointer. the second param is the pointer.

1555969357
tyler569
you give ptrCast a pointer type to cast to, so it sounds like you want @ptrCast(*c.uiControl, &w)

1555969370
tyler569
you can't cast a pointer to a struct (with ptrCast)

1555969371
strmpnk
BTW, if someone wants to look at an allocator model that is Pony inspired (Pony's creator is working on this):

1555969391
donpdonp
tyler569: oh i get it, the type itself needs to be pointer type. makes sense. thx

1555970305
forgot-password
I'm currently trying to build a windows zig application that uses MessageBox (windows.h), but I'm having problems when linking

1555970453
forgot-password
First of all I had to download Visual Studio to get all the headers, and now that it actually compiles it's complaining about the __security_check_cookie symbol being undefined. Are there any windows experts in this channel? ^^

1555971428
donpdonp
expected type '?extern fn(...' found 'extern fn(...'

1555971440
donpdonp
what does the ? signify

1555971523
hryx
donpdonp: ? is for an optional type. In this case, the type is a nullable (optional) function pointer

1555971552
donpdonp
hryx: thx

1555971649
donpdonp
im declaring export fn onClosing(..){} and using it with c.uiWindowOnClosing(w, onClosing, 0);

1555971662
donpdonp
how would i indicate the ptr is nullable?

1555971708
hryx
oh interesting, I thought it would implicitly cast to an optional type

1555971822
hryx
donpdonp: try declaring a variable with an explicit type and passing that to your function

1555971851
hryx
`const f: ?extern fn(...) = onClosing; c.uiWindowOnClosing(w, f, 0);`

1555971854
hryx
not sure if that will work

1555972039
donpdonp
i think that helped

1555972060
donpdonp
but im stuck on the last param of export fn onClosing(w: *c.uiWindow, data: *c_void) c_int

1555972078
donpdonp
c.uiWindowOnClosing(w, f, 0); ->  0 cannot be implicitly casted to type '*c_void'

1555972087
donpdonp
ive tried a couple things but cant get a *c_void.

1555972106
donpdonp
@ptrCast(*c_void,0) gives error: expected pointer, found 'comptime_int'

1555972129
Barbas
I guess null should work

1555972148
donpdonp
Barbas: oh it liked plain null. thx

1555972160
donpdonp
yea! the callback worked. thx all.

1555972170
Barbas
You're welcome :)

1555972172
hryx
nice!

1555972223
hryx
tyler569: I did a git bisect and found the commit that broke my branch (more than it already was, anyway). It was the very last commit :P

1555972274
tyler569
ok, I'll try rolling that one back.  I was playing with some other test cases but I've been needing to do actual work too :P

1555972296
hryx
I'll fix when I get home, otherwise if you wanna toy around with it, just reset back one commit, and add a trivial little test to the top of std/zig/parser_test.zig like testCanonical("const x = true;\n")

1555972314
tyler569
:thumbsup:

1555972315
hryx
heh, same. Don't let me distract you!

1555972371
donpdonp
what is the zig way to simply printf a line. ive been using warn("")

1555972440
hryx
donpdonp: for casual/debugging? warn() is perfect for that

1555972455
hryx
and warn goes to stderr I thiiiiink

1555972471
donpdonp
what about if i want to send to stdout

1555972556
hryx
check this out:

1555972585
donpdonp
thx

1555972946
hryx
donpdonp: BTW, I think you shouldn't have had to declare the type, since something can always cast to an optional of itself:

1555973002
hryx
you may want to file an issue, if there isn't already one. It's probably specific to function types

1555973053
Xe
does switch work on ∆

1555973059
Xe
oh come on i meant to press ^U

1555973064
Xe
does switch work on string literals?

1555973151
hryx
Xe: I don't think so because you'd have to memcmp (or the zig equivalent)

1555973371
hryx
so I thnk doing that implicitly would be a hidden performance cost. unless there were some cool comptime magic involving that "comptime perfect hash" trick

1555973376
hryx
which would be cool too, I dunno

1555973674
Xe
...actually

1555973681
Xe
hryx: that might do exactly what i need, thank you

