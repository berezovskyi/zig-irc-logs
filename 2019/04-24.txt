1556071076
Xe
so, did some experimenting with a friend

1556071105
Xe
zig, when compiled to little-endian wasm32 can now run on BIG-ENDIAN ppc64/32 via olin

1556071321
emekankurumeh[m]
nice

1556079047
scientes
Xe, what is olin? does it rely on cpu endianness switching?

1556079056
scientes
or tons of bswap?

1556079068
Xe
scientes:

1556079090
Xe
the webassembly VM it uses apparently seamlessly endian swizzles

1556079111
scientes
oh, it could also just preprocess the wasm

1556079123
Xe
my guess is that it does that

1556079125
scientes
like the dynamic linker does

1556079126
Xe
but

1556079143
Xe
it works :D

1556079152
Xe
i wonder if we can get zig compiled to the wasi target

1556079176
Xe
it would be a neat demo to be able to put the entire zig compiler in a browser

1556079295
scientes
eww

1556079307
scientes
even more memory usage

1556079318
scientes
also, not very interesting because the zig compiler is c++ now

1556084168
wilsonk|2
tgschultz: you around?

1556084340
hryx
What is the meaning and purpose of the "bit range" of an alignment?

1556090767
hryx
tyler569: Only 4 more completely unimplemented grammar rules left... the assembly ones!

1556092447
wilsonk|2
hryx: that is pretty sweet!

1556096426
hryx
Progress report: 69 commits, +2,823 lines, 30x // TODO, 0x error.NotImplemented

1556096442
hryx
I'm happy it's under 3,000 lines - it shouldn't end up much bigger than that

1556096459
hryx
next steps: make tests pass, make pushing parse errors less verbose, and finally open for review

1556100710
very-mediocre
what's the current best way for working with higher-than-128-bit integers currently?

1556100767
very-mediocre
(currently >128-bit wide integers don't work

1556100796
wilsonk|2
does BigInt work for larger than 128? Or is that only in the compiler proper and not the std?

1556100845
very-mediocre
BigInt is a library by tiehuis, not sure of its usability currently

1556100873
wilsonk|2
ah, I suppose that is where I heard of it

1556100873
very-mediocre
zig should support arbitrary-width integers but I'm not competent enough with LLVM to understand exactly what's missing

1556100893
very-mediocre
wilsonk|2: I was referring to zig-bn, but BigInt is a general thing

1556100949
wilsonk|2
if zig-bn was updated 29 days ago then it is probably usable

1556100955
wilsonk|2
or close to with minor mods

1556101010
very-mediocre
lots of tradeoffs there

1556101132
tiehuis
just a note but zig-bn is merged into std under math/big

1556101166
very-mediocre
tiehuis: thanks for the infp

1556101168
very-mediocre
info*

1556101171
tiehuis
i'll make a note in the title that it is now found under math/big

1556114894
fengb_
Xe: I thought the wasm spec is defined as little endian

1556114917
Xe
fengb_: it is

1556115023
fengb_
Ah the VM is doing the magic

1556117895
halosghost
that's frustrating

1556117914
halosghost
I thought we'd all agreed at this point that middle-endian was the reasonable compromise and that we should use it for everything

1556125827
m3t4synt4ct1c
why does this fail?

1556125857
m3t4synt4ct1c
I found that if I move the .stream down a line, it works fine, but I'm having trouble understanding why

1556127499
Hejsil
m3t4synt4ct1c, You're copying the stream out of its implementation. You should take the pointer to `stream`: `var b = &std.io.SliceInStream.init(a).stream;`

1556129592
wb3
hi, I'm trying to write a CSV parser for zig, but I can't figure out how to correctly do mapping from a []u8 into a struct, specifically how to intermix comptime type info and runtime data -- WIP file here:

1556129671
wb3
if anyone has an example of some form of raw input -> struct, or knows of a better approach, I'd appreciate it, but so far I haven't found any examples or anything in the stdlib

1556131906
Sahnvour
wb3, if I understand, you want to load values from a CSV field that you know have the same name as a struct field ?

1556131945
Sahnvour
or the same index

1556132217
wb3
sahnvour, for now I'm working on the assumption that fields 0->N are your columns 0->N

1556132262
wb3
going for the simplest, most assumptive solve, but I can't figure out get around needing a comptime mapping on variable/runtime data

1556132551
wb3
for now I'm trying to just get 1 line into a struct,

1556132637
very-mediocre
wb3 `parse_csv_line` should have Row as the return type

1556132663
very-mediocre
and you'd return an instance of Row which zig forces you to populate with values

1556132718
very-mediocre
syntax for instantiation is like `return Row {.age = 1, .name="something"};`

1556132746
wb3
ya, the issue I've not been able to figure out how to have a function that takes `comptime T: type` parse a runtime defined, non-const `[]u8` generically

1556132787
very-mediocre
the type is comptime known but not the instance values

1556132804
very-mediocre
sorry if this sounds condescending, not sure how much you already know

1556132818
Sahnvour
wb3, I think you could do `inline for(info.Struct.fields) |i, field| {...}` and inside you for loop, compare `i` to the index of the csv value you're reading ; if they are equal, you could use

1556132893
wb3
yeah I do all that already, but when I try to do any slice processing, all of integers used to navigate the []u8 have to be comptime, so it will only process the first char of a slice for all fields

1556132901
Sahnvour
this is from the top of my head, but I hope the logic works, though you might encounter trouble with fields of differetn types

1556132965
wb3
I can't figure out how to do `inline for` to loop the fields from the @typeInfo and iterate the slice at runtime

1556132988
mikdusan
wb3: did i miss something; are you writing a comptime parser for csv or runtime?

1556133016
Sahnvour
the first snippet I wrote should be pretty close to working

1556133017
wb3
@mikdusan runtime []u8, comptime T: type (struct)

1556133068
wb3
the JSON parser in the stdlib uses a custom JSON tree/type, vs any arbitrary T: type

1556133177
wb3
I don't want to pre-maturely state that the comptime/type-reflection isn't capable of feature, but it is for my current approach or understanding

1556133198
Sahnvour
wb3, doing the inline for would basically generate code that does "if fieldIdx == i, then assign to field" for every field of the struct (and associated i counter)

1556133280
Sahnvour
doing that at every CSV value would allow you to fill your struct

1556133431
wb3
so I have code that constructs a struct, and using @typeInfo.Struct.Fields, it fills out the values, but it fills it in with junk since the ints use to iterate the slice have to be comptime for the lib to compile

1556133569
Sahnvour
does something like that suits your need ?

1556133574
wb3
given `self.parse_cell(info.Struct.fields[fieldIdx], line[start..end])`, the problem is `start` and `end` seem to have to be `comptime_int`, @

1556133576
Sahnvour
modulo missing casts

1556133646
wb3
so if they're comptime, start/end just ends up being equal to `fieldIdx` since they're processed at copmtime, so it parses a 0 length slice

1556133682
wb3
let me try your snippet

1556133695
very-mediocre
wb3 `comptime`is basically the static context in other languages, what Sahnvour has suggested is code generation which, at comptime, tailors your function so the incoming values map to T's fields

1556133737
Sahnvour
wb3, it actually won't work ; I missed that fieldIdx was comptime, it should instead be incremented at each ',' you encounter to count the number of fields read from CSV

1556133781
Sahnvour
and I think you can get `start` and `end` from the reading too, no need to have them comptime

1556133986
wb3
so `fieldIdx` has to be comptime in this snippet, I think th's is cause Zig is erasing the info at runtime (it just codegens a function instance per type?)

1556134206
very-mediocre
ok i get the problem now, could you invert the loop?

1556134214
very-mediocre
loop through the fields with `inline for`

1556134269
very-mediocre
actually that sucks, my bad

1556134331
wb3
it's ok, it may just not be a flexible enough system yet

1556134387
wb3
I'm going to try and write an actual, simpler `parse_line` and share that if I can't get past it again

1556134475
very-mediocre
there may be potential in having the outer loop be `inline for` and getting rid of fieldIdx

1556134505
very-mediocre
or even just use it to codegen the field contents in a manner that is later accessible at runtime

1556134559
wb3
I was thinking of the latter, but I hit a few different snags around runtime vs comptime declarations

1556134621
wb3
something like `parse_line(comptime T: type, [@typeInfo(T).Struct.fields.len][]u8 cells)` but I couldn't make the compiler happy on that path

1556134798
very-mediocre
i think this might be doable using break:

1556134842
Sahnvour
wb3, why does fieldIdx have to be comptime ?

1556134858
very-mediocre
@typeInfo somehow needs that

1556134867
very-mediocre
i ran into that earlier as well, not sure if bug or by design

1556134901
wb3
compiler says so, I assume because it needs to be reified and is erased before runtime since Zig does codegen for it's generics & reflection

1556135467
Sahnvour
wb3, how about

1556135474
Sahnvour
(simplified example)

1556135553
very-mediocre
this is where the issue occurs:

1556135677
very-mediocre
indeed the type is erased and you can't tell the compiler to keep it for runtime

1556135754
wb3
@sahnvour no, it still parses junk :(

1556136357
Sahnvour
I think it should work, we just need to improve a bit your parser

1556136745
wb3
k, got it working with this:

1556136755
Sahnvour
wb3, in the first for loop, I inverted `char` and `i`. writing them in the correct order should help for a start

1556136778
wb3
didn't think that I'd have to loop on the fields on each iteration

1556136832
Sahnvour
great! I was going to propose something like that :)

1556136838
Sahnvour
yeah that's kind of a workaround

1556137462
wb3
cool, I probably should check if there's an issue on this limitation, feels like it's unintended

1556137473
wb3
gonna figure out floats and strings later

1556137500
wb3
thanks @Sahnvour and @very-mediocre for the help

1556137595
m3t4synt4ct1c
I'm not sure if I'm understanding how error merging works properly.. I am writing an InStream that takes in ReadError as a comptime parameter just like InStream, and then I want to add a new error set that I use || to merge the two error sets, then I try to create a new instance of InStream using that merged set of errors and the compiler errors seem to only see the new set of errors, not the original one

1556137708
Sahnvour
wb3, to access a struct field by its index fully at runtime, zig would have to embed some metadata about type

1556137781
mikdusan
wb3: a bit late to game here's a simple basic impl just doing strings.

1556137914
m3t4synt4ct1c
here's the code I'm referring to:

1556137992
m3t4synt4ct1c
I'm trying to create a GzipInstream that takes in an InStream, parses and decompresses data from it  and is itself an InStream, but it contains the error set of the original input stream plus parsing errors

1556140795
m3t4synt4ct1c
wrestling with error types in stream-related code is pretty maddening

1556141473
m3t4synt4ct1c
what does this mean?  error: expected type 'fn(*std.io.InStream(std.io.Error), []u8) std.io.Error!usize', found 'fn(*std.io.InStream(std.io.Error), []u8) @typeOf(GzipInStream(std.io.Error).readFn).ReturnType.ErrorSet!usize'.stream = Stream{ .readFn = readFn },

1556146955
emekankurumeh[m]
i think `readFn` needs to return a std.io.Error!usize, but your return is different

