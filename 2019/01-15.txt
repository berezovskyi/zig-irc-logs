1547510710
daurnimator
andrewrk: hooray, more copy ellision

1547510740
andrewrk
up to 500/521 behavior tests passing

1547511078
daurnimator
andrewrk: not many left now

1547511090
daurnimator
andrewrk: how long do you think is left?

1547511186
andrewrk
I was really hoping to be already done by now

1547511229
andrewrk
I think I've solved all the problems now though. hopefully. going to try to merge within 2 weeks

1547511260
andrewrk
there are a lot more tests to fix besides the behavior ones

1547511284
andrewrk
and more coverage needed. the unfortunate downside of copy elision is that it does complicate the compiler implementation quite a bit

1547511489
MajorLag
fmt parameter should just be what appears between the braces, yes.

1547519221
daurnimator
andrewrk: not much going on this last week in terms of the repo

1547520223
andrewrk
daurnimator, I'm putting all my effort into finishing this branch

1547520244
daurnimator
k; slow progress I guess?

1547520315
andrewrk
yes. I pretty much had to rewrite all the compiler guts

1547520541
daurnimator
I've been watching the commits as they come through

1547520874
andrewrk
501 behavior tests passing is nothing to sneeze at though

1547541058
Hejsil
Hmm. I'm hitting EAGAIN writing to stderr through std.debug.warn

1547541072
Hejsil
I'll see if i can get a small test case

1547541125
Hejsil
(the reason why EAGAIN is a problem

1547567771
forgot-password
Why is the offset of a StructField an optional usize? Does it return null for the first field of a struct?

1547568126
Hejsil
forgot-password, because 0 sized types don't have offsets

1547568135
forgot-password
Right, that makes sense

1547568202
forgot-password
Are the @memberCount/Type/Name function going to be deprecated? @typeInfo seems to be a lot easier to use when you can extract the fields from a struct/union/enum

1547568307
Hejsil
They are

1547568341
halosghost
@typeInfo is so cool

1547568345
Hejsil
I think there are even more builtins that are deprecated

1547568359
halosghost
probably

1547568451
forgot-password
Yes, but some are marked as deprecated

1547568471
forgot-password
That's why I was wondering

1547568503
forgot-password
halosghost: Indeed, my code looks a lot cleaner after replacing the @member* functions with it ^^

1547568518
MajorLag
the std.meta package is meant for that purpose. @TypeInfo gave use the ability to replace a lot of builtins and special "pseudo-fields" in unserland. Work is not yet complete. One holdup is that we can't mark a function as comptime at the declaration site so you end up having to do it at the callsite a lot, which is inconvenient. For instance: `u32.bit_count` vs `comptime meta.bitCount(u32);`

1547568551
halosghost
sure

1547568747
forgot-password
MajorLag, I already had a few encounters with std.meta.trait, where do you guys plan on going with that?

1547569066
MajorLag
see:

1547569130
MajorLag
but even without any of that it is generally useful for generic code.

1547579562
vegecode
Hello all, my lunch break is ending, but I have a question. I am trying to recreate the termios structure from <bits/termios.h> and the definition has "unsigned int" parameters. If I want portability to linux on arm, should I use the c_uint type?

1547579682
vegecode
I see that the msghdr struct in the zig std lib uses u32, while musl uses plain "int". I'm just looking for what is the most portable. It would definitely be preferable if the compiler handled that for me.

1547579734
vegecode
A pointer to the struct gets passed in a syscall so it needs to match whatever the kernel uses.

1547579767
vegecode
If you could please respond, I will check the logs when I get off of work. Also, a forum or someplace to ask questions would be nice. Maybe we should use Reddit?

1547582614
MajorLag
c_uint is guarenteed to be whatever the native C "unsigned int" type is.

1547582976
andrewrk
vegecode, you can use the mailing list:

1547582988
andrewrk
you can also use stack overflow with the zig tag

1547583417
vegecode
thanks

1547583521
MajorLag
ugh, it's a real pain that empty errorsets don't count for inferrence. actually, I'm finding I spend a lot more time dealing with the limitations of error sets than I ever get use out of them. Could just be because of all the code I'm breaking in std right now.

1547583523
vegecode
is it good practice though? the std library hard codes it. if I'm making the termios libc file, i might as well do it right so it can be part of that issue to have a full libc replacement

1547583608
andrewrk
MajorLag, I want to change how empty error sets are handled

1547583640
andrewrk
there are a few things that can be better

1547584177
MajorLag
Yeah. I thought I could clean up some of this error set stuff in the Stream interfaces, but the empty error set thing is just making it worse.

1547585057
andrewrk
I consider the design flaw demonstrated by streams to be a 1.0-blocking problem

1547585063
andrewrk
the design flaw with error sets

1547585082
andrewrk
I don't have a plan for this release or even the next, but it's a huge problem

1547592740
MajorLag
Streams actually aren't a problem under the new pattern, except for the inferrence not working on empty errorsets. You either take var and infer the errors or you take InStream/OutStream and errors are anyerror. The one exception I've found is in queue, which has a recursive inner function that can't be inferred.

1547594075
andrewrk
MajorLag, interesting, I see. I'll take a closer look at that soon

