1576886677
THFKA4
i can't find it, so i must be misremembering something

1576887024
pixelherodev
WendigoJaeger, ... how?!

1576887032
pixelherodev
No seriously though, how does it work? :)

1576887052
WendigoJaeger
mGBA can load ELF and has a GDB server builtin

1576887054
pixelherodev
Some sort of integration with the emulator combined with debug info exposed to the IDE?

1576887056
pixelherodev
Ag

1576887058
pixelherodev
Ah*

1576887072
pixelherodev
That's still insanely cool

1576887074
pixelherodev
Nice work!

1576887078
WendigoJaeger
thanks!

1576887090
pixelherodev
On a semi-related note, anyone know how much work it is to write a GDB server?

1576887090
blueberrypie
huh pretty cool

1576887105
WendigoJaeger
pixelherodev: dunno

1576887179
pixelherodev


1576887742
pixelherodev
There a good way to refer to a structure member from an instance of that type?

1576887772
pixelherodev
e.g. if I have `a` of type `A`, and `A` contains `const i = blahblahblah;`, there a way to refer to A.i given just `a`?

1576887789
daurnimator
`@typeOf(a).i` ?

1576887801
pixelherodev
I literally just tried that.

1576887803
pixelherodev
It worked.

1576887804
pixelherodev
:P

1576887812
pixelherodev
But no, it's @TypeOf(a) now

1576887818
pixelherodev
But yeah that works

1576887850
pixelherodev
`if (err == @TypeOf(backend_allocator).AllocationError.NoMoreRoom)` Hmm

1576887854
pixelherodev
Seems a bit long-winded, but eh

1576887866
pixelherodev
Better than saving a reference to the type just for this

1576887927
pixelherodev
.... huh. Well this is weird. If you do `const a = @import()`

1576888001
pixelherodev
The weirdest part is that if I have `var a = @import("blah.zig").init(blah);` where blah.zig has a private member named whocares and blah.init returns an object of type blah (@This()), `@TypeOf(a).whocares is a valid access

1576888009
pixelherodev
s/valid/invalid

1576888039
pixelherodev


1576888619
frmdstryr
Is there a way to get the path of the current file, like python's `__file__`?

1576888684
frmdstryr
Nvm @embedFile works with relative paths

1576888720
pixelherodev


1576888725
pixelherodev
Well

1576888733
pixelherodev
I mean, I *guess*, since @embedFile is comptime

1576888750
pixelherodev
That does provide for an intriguing idea of comptime-*only* Zig

1576888771
pixelherodev
Which leaves basically just an interpreted / scripting language

1576888806
pixelherodev
If there was an "instantaneous" compiler for that (the intended debug compiler perhaps?), I'd use that in a heartbeat over e.g. Bash

1576888824
pixelherodev
(not that I use bash all that much as is; I try to stick to POSIX-compatible shell code)

1576889043
pixelherodev
Is there a way to make structure functions fully private?

1576889050
pixelherodev
By the Java definition of private

1576889061
pixelherodev
Such that other structure functions can call it, but outside code cannot?

1576889132
pixelherodev
I want to hide implementation details to ensure that client code doesn't become reliant on highly volatile (in the sense of constantly changing, not the technical sense) functions

1576889159
fengb
Java private can still be called via reflection ðŸ™ƒ

1576889181
pixelherodev
The fact that Java has a lot of flaws isn't germane to this discussion.

1576890321
pixelherodev
Weird idea thought thing I just had: I know there was a discussion on adding integer properties, but what if there was e.g. a "power of two" property? Such that a runtime value can be of a type requiring a power of two?

1576890327
pixelherodev
Or a more generic "power_of(n)" property

1576890335
pixelherodev
This would be a pretty simple thing to check for

1576890344
pixelherodev
The only valid operation on it would be multiplying by n

1576890368
pixelherodev
Example use case: hashmap at present uses `assert(math.isPowerOfTwo(new_capacity))`

1576890413
pixelherodev
It's called in three ways: 16, the previous capacity * 2, and `math.ceilPowerOfTwo(usize, expected * 5 / 3)`

1576890429
pixelherodev
Such a property would allow for the assertion to be removed and one less point of runtime failure

1576890435
daurnimator
pixelherodev: I've thought about that..... and you end up wanting functions for all sorts of limitations on values

1576890457
pixelherodev
Such as?

1576890476
daurnimator
e.g. why only power of two? we already have `min` and `max` on the way. But why not `multiple_of_3` and `prime`?

1576890495
pixelherodev
Because prime is utterly impractical

1576890503
pixelherodev
Power of is effectively trivial

1576890511
pixelherodev
multiple of 3 would be power_of(3)

1576890536
pixelherodev
Power of two

1576890549
daurnimator
multiple != power.

1576890559
pixelherodev
Though power_of(n) could probably have an optimized in-memory representation, power of 2 would be easiest in that you'd need to store the power

1576890561
pixelherodev
Ah right

1576890590
pixelherodev
again, power of is trivial and has practical advantages both in the standard library and in compiled binaries

1576890639
pixelherodev
Generally, I think if it's trivial and doesn't have any real downside it's worth it

1576890661
pixelherodev
Though adding in a hundred trivial features would be problematic too...

1576890670
pixelherodev
Ooh, better idea

1576890676
pixelherodev
Implementing such types

1576890680
pixelherodev
Instead of in the compiler

1576890691
pixelherodev
At the very least, if used at compile time, that could be useful

1576890701
daurnimator
isn't only power of two vaguely efficient? and others not?

1576890711
pixelherodev
Right, but I'm saying a power of two

1576890722
daurnimator
you said `power_of(n)`

1576890728
pixelherodev
As a hypothetical extension

1576890732
pixelherodev
The main idea was just Po2

1576891046
cshenton
I'm writing a vector math lib and have run into an issue. I have a generic vector type with a cross product method that compile errors when called on a non 3d vector. For some reason, calling std.testing.allEqual on an unrelated operation is causing that method to get hit even when I don't call it so my code won't compile.

1576891070
cshenton
Can I conditionally declare a member function to get around this?

1576891154
fengb
Ah thatâ€™s probably the typeInfo bug:

1576891171
fengb


1576891176
cshenton
Yep allEqual does a switch on typeInfo so that's not surprising.

1576891198
cshenton
So it's a bug and I should work around, I'm not fundamentally doing things incorrectly?

1576891253
daurnimator
yeah. its been known about for a while. I recall that @memberCount was kept in existence because it worked without this issue while `@typeInfo(x).XYZ.fields.len` didn't.

1576891401
cshenton
I'm thinking I should actually just remove that compileError for now, since I use @typeInfo on my vector types for some other stuff (automatically formatting an opengl vertex buffer)

1576891549
cshenton
Unrelated, the argument signature for a non mutating member method is `self: *const Self`, not `self: Self` right?

1576891598
fengb
self: Self is preferred. Zig will probably pass a const pointer under the hood, but it may pass by value if itâ€™s faster

1576891630
daurnimator
pixelherodev: btw, my reply on #2428 is sort of for you

1576891717
pixelherodev
Could've pinged me there :P

1576891721
pixelherodev
To respond though:

1576891733
pixelherodev
Yes, I mentioned in that thread that they could be closed and modified afterwards

1576891747
pixelherodev
The question was whether to return an error if someone closes it and then tries accessing it without opening it

1576891757
pixelherodev
The answer that was decided upon was "no."

1576891816
pixelherodev
If someone does this deliberately, that's on them. See

1576891854
pixelherodev
and

1576891883
cshenton
Has anyone had issues with `inline` on generic structs? I'm getting an 'unable to inline' compiler error on a pretty innocuous vector add method.

1576892490
cshenton
Specifically, if I copy paste the code inside the generic struct, the compiler does not complain about inlining.

1576892943
cshenton
oof, you're not going to like this. That error only occurs when I call `expectEqual`, not if I manually `expect` on each field

1576892950
cshenton
Going to file a bug

1576894028
Snektron
`for (@typeInfo(Direction).Enum.fields) |dir| {`

1576894031
Snektron
that should work right?

1576894041
Snektron
im getting `values of type 'std.builtin.EnumField' must be comptime known, but index value is runtime known`

1576894107
pixelherodev
`inline for`?

1576894131
Snektron
seems to be it, thanks

1576894149
pixelherodev
np

1576894916
cshenton
This is a fun one

1576895024
pixelherodev
But

1576895032
pixelherodev
But in that case it doesn't need inlining

1576895034
pixelherodev
Ah

1576895038
pixelherodev
I suspect this is a duplicate

1576895056
pixelherodev


1576896404
cshenton
Yeah I referenced that issue in mine, but I thought I'd make a new issue since it's not immediately obvious they're related.

1576896491
cshenton
And also for discoverability for people with the same problem.

1576899413
adamkowalski
:q

1576899427
adamkowalski
whoops

1576902014
pixelherodev
ah, the delightful feeling of auditing 3KLOC :P

1576903149
pixelherodev
There a better way to check bytes from bits than `(bits + if (bits % 8 != 0) @as(u8, 8) else 0) / 8)`?

1576903182
pixelherodev
It's better than the way I had it earlier, but it still looks

1576904068
pixelherodev
With a line like `var a = []u8 { a(), b() };`, is there any guarantee that a will be called before b?

1576904078
pixelherodev
and yes I realize that would be a name collision

1576911257
D3zmodos
Am I missing something obvious here? If I try to switch on a runtime value where all the branches result in comptime values, I get a compiler error...

1576911382
pixelherodev
Compiler bug\

1576911390
pixelherodev
Integer literals are implicitly of type comptime_int

1576911415
pixelherodev
If you change any of those branches to be `@as(u8, val)` it should work\

1576911443
pixelherodev
As is, bar is being given the type comptime_int

1576911449
pixelherodev
Which isn't a type a runtime value can have

1576911489
pixelherodev
If you change e.g. `0 => 10` into `0 => @as(u8, 10)`, it'll result in the switch expression gaining type u8

1576911517
pixelherodev
Setting the type of bar to u8  manually won't help either, because the switch expression would still have the wrong type

1576911525
pixelherodev
D3zmodos, hope this helps!

1576911693
D3zmodos
aaaah ok yes that makes sense. I guess I'd just assumed that comptime_int would be automatically resolved to a runtime type as necessary. Thanks pixelherodev !

1576911702
pixelherodev
No problem!

1576911715
pixelherodev
I think it's

1576919729
cshenton
If I wanted to get my head around the codebase with a view to fixing

1576945713
fifty-six
Do if expressions require comptime bools?

1576945790
fengb
cshenton:

1576945926
fengb
I was also planning on taking a deeper look

1576946027
Snektron
When i took a deeper look i got scared by ir.zig

1576946062
Snektron
Every once in a while i run into a zig issue of which i think its really weird that it exists

1576946133
Snektron
For example, int literal type resolution works on switch expressions if you annotate the return type: `const a: i32 = switch ...`

1576946145
Snektron
But it fails if you put a ternary expression inside the switch

1576946166
Snektron
err, i meant ir.cpp

1576954927
andrewrk
Snektron, a 30K line c++ file never hurt anyone :P

1576955440
adamkowalski
is this the recommended way to run all tests?

1576955524
andrewrk
adamkowalski, yes, at least for now

1576955573
adamkowalski
okay thanks! and when defining my public API should I just do a pub const name = @import("name");

1576955577
andrewrk
dingenskirchen, the addNullByte issue is fixed,

1576955603
adamkowalski
that way people can just import the main file and get access to everything that I want exposed?

1576955620
adamkowalski
it seems like that is what the standard is doing

1576955649
andrewrk
yes the way your package will expose an API is via a "root" file, so you'll need one file that exposes everything that you want to be in your API

1576955730
andrewrk
sentinels should feel pretty ergonomic to use now

1576955771
adamkowalski
I like that. Is there any benefit to scoping imports to a test case?

1576955804
adamkowalski
I was thinking that if I do that the compile times will be faster because other tests that don't need those imports won't even look at them

1576955881
andrewrk
zig is already pretty lazy, I don't think it will make a difference

1576955987
adamkowalski
Yeah and the compiler already seems really fast. I feel like 90% of the time is spent in generating code using LLVM. At least that's what the terminal output sugests

1576956011
adamkowalski
I'm curious if we can get similar speeds to something like D if bypass LLVM for non release builds

1576956166
fifty-six
Sorry to bother but how do you debug a zig build failing because of `broken LLVM module found: Call parameter type does not match function signature!`

1576956674
TheLemonMan
yo andrewrk, is the proposal in #1917 still accepted?

1576956723
TheLemonMan
because I need weak refs for the PIE patchset and am gonna dust off the branch where I've implemented @externWeak

1576956829
TheLemonMan
I'm still not 100% sold on introducing a new builtin, I'd just slap `weak` on VarDecl and make `&` return `?*T` pointers for such variables

1576959282
andrewrk
TheLemonMan, I'm about to hop on a plane, but let me take a look

1576959336
andrewrk
@externWeak is a lot easier to automatically rewrite users' code if we end up changing it to something else later

1576959397
andrewrk
the proposal is still planned, yes

1576959449
TheLemonMan
roger that, I'll send a PR later

1576959727
Aransentin
Writing an win32+user32 file for zig, and I have some ideas for a "cleanup" of the API. Tell me if my ideas are dumb:

1576959744
Aransentin
Trash the confusing naming scheme, i.e. no more LPCSTR and just `[*:0]const u8` everywhere. Same for the opaque types: HINSTANCE -> *InstanceStrip the polish notation from the arguments and struct members and rename them to zig style: e.g. "lpClassName" -> class_nameReplace integer arguments/return values with enums of the same size when it makes

1576959745
Aransentin
sense; e.g. "dwExStyle" in CreateWindowExA should be an `extern enum(u32)` with the valid arguments instead of a DWORD.Wrap the raw win32 API calls in zig functions that take e.g. slices and translate them to pointer-and-length arguments, error codes to Zig errors, and perhaps converts unicode strings to UTF16 like Windows wants.

1576959762
Aransentin
Whoops the newlines got stripped out there...

1576959820
Aransentin
sorry about that. Lemme try again :)

1576959821
Aransentin
Strip the polish notation from the arguments and struct members and rename them to zig style: e.g. "lpClassName" -> class_name

1576959828
Aransentin
Trash the confusing naming scheme, i.e. no more LPCSTR and just `[*:0]const u8` everywhere. Same for the opaque types: HINSTANCE -> *Instance

1576959838
Aransentin
Replace integer arguments/return values with enums of the same size when it makes sense; e.g. "dwExStyle" in CreateWindowExA should be an `extern enum(u32)` with the valid arguments instead of a DWORD.

1576959843
Aransentin
Wrap the raw win32 API calls in zig functions that take e.g. slices and translate them to pointer-and-length arguments, error codes to Zig errors, and perhaps converts unicode strings to UTF16 like Windows wants.

1576960303
Aransentin
... and by "Polish notation" I meant Hungarian notation ðŸ˜–

1576961299
TheLemonMan
changing the names is not so wise IMO as that makes the existing documentation (and MSDN) hard to follow

1576961392
Aransentin
Ah, yeah. Maybe I can change it for the Zig wrappers, and not the "real" functions.

1576961430
Snektron
<andrewrk "Snektron, a 30K line c++ file ne"> My largest c++ project wasnt even a quarter of that in total

1576961432
Aransentin
To be fair the win32 docs are kinda terrible anyways. Try reading this, for example:

1576961534
Snektron
Aransentin, maybe its best to create sone wrapper API that uses the current functionality

1576961560
Snektron
That was my plan for something else

1576961655
Snektron
<Snektron "My largest c++ project wasnt eve"> Though i have a sneaking suspicion some of it could maybe be improved by utilizing more of c++

1576961667
Snektron
Of ir.cpp, that is

1576971931
daurnimator
ooo, I wonder if thelemonman is writing a loader in zig...

1576972018
daurnimator
andrewrk: FWIW the pie executables I know are files that are simultaenously executables and libraries. The most famous one being /lib64/ld-linux-x86-64.so.2 the second most famous one being /usr/lib/libc.so.6

1576972038
daurnimator
==> try running those as executables :)

1576972109
pixelherodev
"This is the gcompat ELF interpreter stub. You are not meant to run this directly."

1576972114
pixelherodev
:P

1576972146
daurnimator
pixelherodev: sure..... but thats still weird: you just executed a library

1576972184
pixelherodev
I've made libraries like this before

1576972187
pixelherodev
It's not overly difficult

1576972202
daurnimator
correct. but it requires -fpie doesn't it?

1576972207
pixelherodev
IIRC yeah

1576972224
pixelherodev
It's been at least a year since I played with that

1576972228
daurnimator
pixelherodev: I am essentially replying to

