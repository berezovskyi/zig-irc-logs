1554337533
scientes
what are these magical numbers in uint32_t zig_llvm_fn_key_hash(ZigLLVMFnKey x) {

1554337539
scientes
return (uint32_t)(x.data.bit_reverse.bit_count) * (uint32_t)2621398431;

1554342434
andrewrk
scientes, literally random

1554342448
scientes
ok, i found the thing that was crashing llvm

1554342457
scientes
the builtin patch it ready i think

1554342471
scientes
let the test suite run

1554342579
scientes
I still want to do those implicit casts, but it requires some deeper changes to ir.cpp

1554344508
mikdusan
is there available (to a zig program at runtime) the install location of zig executable?

1554344529
andrewrk
mikdusan, is this in the context of zig build?

1554344628
scientes
mikdusan, on linux you can look at the symlink at /proc/self/exe

1554344630
mikdusan
in context of a test. i’ve had to write a tiny exe for dependency tokenizer so it can be run by a zig testing harness. ie: spawn, feed and read output. but i don’t really want to rely on someone’s PATH to find the test exe.

1554344657
mikdusan
right now i have it landing in same bin as zig… but

1554344688
mikdusan
scientes: i’m in the “test” and arg0 is a very long zig-cache name.

1554344704
andrewrk
mikdusan, why do you need the zig executable in a unit test?

1554344741
mikdusan
dep_tok is written for stage1 .cpp

1554344794
andrewrk
stage1 .cpp? are you working on a patch for zig?

1554344800
andrewrk
oh this is for dep file parsing

1554344807
mikdusan
issue 2046. nothing big. but it’s different i suppose.

1554344810
andrewrk
you're solving it in userland?

1554344832
andrewrk
that's... actually reasonable

1554344854
andrewrk
it can piggy back on

1554345126
andrewrk
mikdusan, I'm happy to help. I still don't quite understand exactly what you're trying to do

1554345145
mikdusan
andrewrk: i’m working on providing more context. i’ll do a work-in-progress pr soon.

1554345933
mikdusan
andrewrk: comment at bottom with how i’m currently adding tests for the tokenizer.

1554349261
hryx
Working on a fix for that fmt regression! whoops

1554349555
mikdusan
👍

1554349751
hryx
hey what's up mikdusan

1554349778
mikdusan
just hacking away at a pr. bit by bit.

1554349818
hryx
which one?

1554349836
mikdusan
2046

1554349954
hryx
nice. I've actually been curious about that one because I dunno what "dep file" is referring to

1554349983
mikdusan
zig-cache invokes clang. clang generates like makefile “fragments” .

1554350065
hryx
ah, I see

1554350087
mikdusan
and zig reads them in, and adds those dependency relationships (.c to many .h files) and uses that along with zig-index to be real clever about rebuilding.

1554350164
mikdusan
unfortunately the .d is actually mean to be “make” or “nmake” compatible. we don’t need that, we just need the file names. so have to parse that archiac and somewhat unreliable output.

1554350244
hryx
are you able to implement "just enough" to get those file names? Or is that pretty much writing a fully functional parser

1554350288
hryx
I slightly dread the idea of writing a Makefile parser - even though it seems like a simple format I would not be shocked if there are ambiguities or gotchas

1554350290
mikdusan
i wrote a tokenizer/parser handling a more complicated kind of .d output (because clang forced me to do that for technical reasons).

1554350333
mikdusan
all it does is take TARGET: PREQREQ… and tokenize. but it has to handle spaces, various escapes, line continuations, etc.

1554350371
hryx
oh yeah, I saw that discussion about escapes

1554350385
mikdusan
here’s the mind blowing part. made me laugh:

1554350399
mikdusan
there are 2 output formats. one is easier to tokenize.

1554350423
mikdusan
it uses nmake/jom style quotes around file names. and it’s illegal to have inner/escaped quotes. so pretty straight forward.

1554350452
mikdusan
so when turned on, clang emits that only for PREREQ filenames. the TARGET filename on LHS is still make/compatible.

1554350472
mikdusan
so i have to write a tokenizer for the make/compatible way no matter what.

1554350512
hryx
you mean there are two different string quoting formats on the same line?

1554350517
mikdusan
exactly.

1554350526
mikdusan
so in default format it would do this.

1554350534
hryx
wow COOL feature

1554350562
mikdusan
fo$$o.o: fo$$o.c

1554350570
mikdusan
that’s make/compatible.

1554350579
mikdusan
we turn on nmake/jom for quoting and here’s the output:

1554350589
mikdusan
fo$$.o: “fo$o.c”

1554350590
mikdusan
lol

1554350611
hryx
:<

1554350622
hryx
as they say...

1554350625
hryx
"edge cases matter"

1554350646
hryx
thank you for your service (°_°)7

1554351404
hryx
ok, fmt buggo is fixo

1554351536
mikdusan
do you use vi as your primary editor?

1554351572
hryx
Nej

1554351628
hryx
I'd love to become fluent at vim but have not yet had the commitment to learning

1554351650
mikdusan
i was just going to ask something about vi and fmt . but that’s ok

1554356920
hryx
Not to be a human Hacker News aggregator, but did anyone see Steve Klabnik's (of the Rust team) thoughts on "Free vs. Open Source"?

1554356922
hryx


1554357085
hryx
I don't really like reading blogs, but he seems to be a good writer -- at least enough to convince me that the public concept of open source is still evolving

1554357804
andrewrk
hryx, it made sense to me. I was disappointed he didn't have a proposed solution to the problem he outlined

1554357971
hryx
ha, same... I totally thought he was building up to some proposal, and I was like "ooooh"

1554357978
hryx
but then kind of bwamp, trombone

1554358215
andrewrk
I'm going to bed. good night

1554358227
hryx
bye bye

1554369680
xvilka
hi! I see

1554377868
tankf33der
o/

1554377869
tankf33der


1554377885
tankf33der
zig-git, now i got this error.

1554387526
andrewrk
xvilka, hi. progress on stage2 is paused until a few things in stage1 are implemented

1554389051
andrewrk
tankf33der, I'm looking at it now

1554389058
tankf33der
ok

1554389122
andrewrk
tankf33der, it works if you add exe.linkSystemLibrary("c"); but that's strange that it's needed

1554389134
tankf33der
checking.

1554389135
andrewrk
apparently inttypes.h depends on libc?

1554389145
tankf33der
unknown.

1554389232
andrewrk
tankf33der, here are all the changes needed:

1554389245
tankf33der
thanks.

1554389255
andrewrk
the `null` change would be unnecessary after

1554389586
tankf33der
works.

1554389798
tankf33der
andrewrk: i'm expecting zigmonoc bin for execution created in ".". Now its somewhere inside cache.

1554389852
andrewrk
tankf33der, yes, you can add a run step, or you can make `install` the default step

1554389880
andrewrk
or you can exe.setOutputDir

1554389892
tankf33der
ok

1554389900
tankf33der
and where i can find all this without you ?

1554389904
andrewrk
I think in general I'm going to experiment with making `install` the default step

1554389986
tankf33der
works.

1554390017
andrewrk
tankf33der, you would have to read the source of std/build.zig. or you can wait until

1554390102
tankf33der
i see. ok

1554401761
mikdusan
andrewrk: re: global zig-cache; is it normal and expected that it will accumulate { compiler_rt.o, builtin.zig } for each unique zig (zig id?)

1554402739
andrewrk
mikdusan, here is some more detail:

1554402744
andrewrk
see the part about cache evicting

1554403316
mikdusan
thank u

1554411478
andrewrk
live coding starting now

1554411627
hg
:D

