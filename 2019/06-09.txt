1560038409
scientes
gustav_o, yeah i ran into that too

1560038440
gustav_o
at first I thought it could only log compile-time strings, which would have been quite useless :)

1560050431
marler8997
Hey Andrew, it's been a couple years but I think I'm coming back

1560050497
marler8997
Looks like you've got prebuilt windows binaries now.  Very nice.  I've got a project to port to zig and it's been going very well.  The port has alot of benefits of the D version I've been noticing

1560050983
scientes
yeah i was just looking at D

1560050997
scientes
I was interested in adding the switch() on strings that D has

1560051032
scientes
but i think it really belongs in llvm, and I would want to do it properly, unlike D (but the syntax is fine)

1560051042
marler8997
I believe D can switch on any type that supports "opEquals"

1560051053
scientes
well, zig will not support operator overloading

1560051068
scientes
and that would be equilivent to a if() which makes it kinda redundant

1560051070
marler8997
it's not necessarily operator overloading

1560051084
marler8997
in D, the '=' operator reduces to opEquals

1560051101
marler8997
but you obviously wouldn't want to do that in zig

1560051114
marler8997
the equivalent would probably just be, any type that has an "equals" method

1560051114
scientes
^^ it would be the same as if() performance -wise

1560051118
scientes
making it kinda dumb

1560051133
marler8997
similar to how D does foreach

1560051153
marler8997
any type that has the 'empty'/'front'/'popFront' methods, can be used to foreach

1560051189
marler8997
foreach (foo; bar) gets rewritten to for(; !bar.empty; bar.popFront) { auto foo = bar.front; ... }

1560051211
scientes
nononono, that is not zig-like at all

1560051214
scientes
no operator overloading

1560051237
marler8997
well I'm not proposing it in zig, just explaining what D does

1560051245
marler8997
and which operator is being overloaded here?

1560051263
scientes
I've seen too much code in C++ that gets everything wrong because of operator overloading

1560051274
scientes
it is very common, even in supposedly high-quality code like LLVM

1560051275
marler8997
again, which operator is being overloaded?

1560051294
scientes
the zig rule is "no hidden control flow"

1560051298
scientes
i guess that makes the rule clearer

1560051324
scientes
the point is that you always know what algorithms and data structures are being used, unless you call a function

1560051327
marler8997
right...meaning the control flow has to be apart of the language

1560051352
scientes
meaning that no operators ever call functions

1560051355
marler8997
so I guess your point was, you don't want language constructs to implicitly call functions on types

1560051358
scientes
EXCEPT the call operator

1560051366
marler8997
gotcha

1560051401
marler8997
and I definitely see the reason for that

1560051603
scientes
well there is a tiny exception, which is that llvm generates calls to some c functions like memcpy() that can be implicitely created

1560051610
scientes
but that won't bite you

1560051623
marler8997
you have to start somewhere

1560051638
marler8997
the language constructs themselves break the rules of zig

1560051658
marler8997
the point is, you want those powerful features to be in a small subset that everyone can understand

1560051709
marler8997
bringing us back to your switch feature, I suppose that's reason not to do it the same way as D does, by supporting it on any type that as a specific function

1560051722
scientes
yeah but D also supports switches on strings

1560051734
scientes
and I want to support that, because it can be very performant

1560051736
scientes
VERY

1560051738
marler8997
right, because strings support opEquals

1560051747
marler8997
very performant?

1560051748
scientes
yeah but they did it a VERY slow way

1560051776
marler8997
like, indexing a table from the length or...how does switch make it fast?

1560051803
scientes
perfect hash function basically, but there are two algorithms I see being implemented

1560051814
marler8997
ah

1560051830
marler8997
so these would be comptim strings only?

1560051837
scientes
you can also use a bloom filter to go to the default case faster

1560051845
scientes
yes, only strings, not []u8

1560051863
scientes
well, yeah comptime []u8

1560051865
marler8997
interesting

1560051929
marler8997
have you gotten it working as a library yet?

1560051961
scientes
I have this totally differn't transform working

1560051990
scientes
but making it merge-ready is a bunch more work

1560052028
marler8997
cool stuff

1560058204
tgschultz
with const comptime-known strings , can't you just switch on the addresses being equal?

1560058261
tgschultz
or... no wait, I'm too tired for thinking. you're comparing comptime known strings to runtime known strings with a perfect hash.

1560058596
andrewrk
hey welcome back marler8997

1560060453
marler8997
Thanks Andrew, zig seems to be in a much better place than it was a few years ago.  I've been testing the waters by porting my audio synthesizer to it...very impressed by it

1560060482
marler8997
I'm using a few dozen windows functions that aren't in std, I'll probably make a PR to submit them at some point

1560060515
andrewrk
sounds good

1560061113
emekankurumeh[m]
we should probably add a complete windows api wrapper at some time

1560062084
emekankurumeh[m]
like winapi for rust

1560088066
tgschultz
I autogenerated one, and further refined it with a lot of scripting and reorg. Extern function declarations alone are ~5k lines. rewriting all of them to be more zig like would take a while.

1560093794
scientes
I felt that way about the zig_llvm stuff

1560093818
scientes
it should change functions to be methods, but you can't do that with @opaqueType s

1560095660
andrewrk
scientes, re: json stuff from #musl - I don't think removing json until it's fully conformant is the best approach for the zig project. the main goal of the std lib until 1.0 is to act as a test bed for the language

1560095690
andrewrk
there will be a big audit of std lib before stabilization

1560095702
scientes
oh ok, just leave it then

1560095722
scientes
its not hard to fix, i just didn't want to change the byte-at-a-time approach

1560095733
scientes
but i think you have a point with "test-bed"

1560095738
scientes
that is the real focus

1560095771
andrewrk
yeah. json might not even be part of the std lib if the package manager is good enough and it's not needed for any self-hosted compiler thing. that's all to be determined

1560095787
scientes
cause its easy to be overwhelmed with ideas

1560095791
scientes
and vaporware

1560095800
andrewrk
yes

1560095824
scientes
anyways, happy that copy-elision is coming along

1560095882
andrewrk
here's another small demo, array literals

1560095899
andrewrk
apologies for the images rather than text

1560095904
scientes
I was working on getting that to work with vectors

1560095919
andrewrk
ah, yeah I haven't tested that yet

1560095974
scientes
I really want to generic vector programming in zig

1560095984
scientes
but there is lots to be done

1560096004
scientes
but that is something that C does very poorely

1560096041
andrewrk
by generic you mean portable yeah?

1560096045
scientes
yep

1560096107
andrewrk
it's incredible to me how less brittle this third attempt is than my second one. ugh what a mess that was

1560096122
scientes
that's exactly what you have to do however

1560096132
andrewrk
it felt like pouring buckets of water out of a leaky boat

1560096472
scientes
and if you are struggling with something, doing something else for a day usually does wonders

1560096542
andrewrk
yeah and sleep

1560096627
scientes
but looking at portable vector programming, supporting the C ABI is a lot of tedius error-prone work, and LLVM should really provide helpers for that, as almost every language wants it

1560098386
curtisf
Yesterday while playing with generic programming in Zig I was a little disappointed (and reminded a lot of an annoyance of C++ templates) that Zig offers no diagnostics on comptime code that isn't run. Might that ever change?

1560098426
curtisf
It seems more possible than in C++ because there's no operator overloading and implicit constructors/destructors, but things like OS specific branches might be trouble

1560098448
Akuli
i guess this doesn't answer your question, but there is @compileLog

1560098465
andrewrk
curtisf, I haven't typed up the issue for this yet, but for documentation generation purposes there is already a need for building a set of targets rather than just one. this will enable a few things that zig cannot yet do

1560098498
andrewrk
for example, unused variable / function errors and unreachable code errors.

1560098527
scientes
it is more difficult in zig to do this

1560098531
curtisf
would that apply to un-run comptime functions, though? e.g. ```pub fn garbage(comptime t: type) void {     var y: u9 = comptime std.io.getStdOut().write("hi" / 0); }```

1560098572
andrewrk
yes if they were not referenced in any of the builds and if they were not part of the public API of a package

1560098628
curtisf
oh, you're saying you'd get an unused function warning, which would at least tell me to test it

1560098639
andrewrk
it is a difficult problem. not only does the isssue with generic programming you pointed out exist, but the issue applies additionally to every function in zig

1560098648
andrewrk
generic or not

1560098694
andrewrk
you'd get an unused function error, yes, so you would be forced to delete it or reference it (perhaps even as simple as `_ = foo;` to create an intentional reference to it)

1560098711
andrewrk
this would only be reasonable if one could build the entire set of targets

1560098743
andrewrk
this would also be applicable for refactoring features of IDEs

1560098774
andrewrk
the reason java has the best refactoring tools is that there is only ever one target. no conditional compilation

1560098818
andrewrk
this is one reason cross compilation is taken so seriously

1560098829
andrewrk
it's an important piece of the puzzle

1560098962
andrewrk
I do want to solve this problem with zig. I want refactoring to feel safe and reliable. comptime isn't going away; and the halting problem means that we're not really left with a choice other than multi-target builds to solve this problem

1560099031
andrewrk
multi-target builds is sort of a way to get "compilation coverage" of all your code

1560099049
andrewrk
think test coverage but comptime

1560099077
andrewrk
anyway that's not something I'm tackling soon, but it's on my metaphorical radar

1560099356
scientes
when will zig get a llvm-9 branch?

1560099387
scientes
I can work with llvm-8, just wondering if there is a method to this

1560099414
andrewrk
if I felt like I had more time I'd do it today. but I will make it a priority once upstream creates the 9 branch

1560099457
scientes
well it might change, so it might make sense to wait as you say

1560101306
andrewrk
someone in #musl brought up an interesting project idea

1560101326
andrewrk
a self-contained binary you can ship along with your application to do UI stuff. as an alternative to UI-as-a-library

1560101524
scientes
I don't get it

1560101527
gustav_o
how would you communicate with it?

1560101541
samtebbs33
Communication via IPC I suppose

1560101558
samtebbs33
Perhaps it could let the user decide between a tty interface or gui

1560101560
gustav_o
to ease cross platform deployment?

1560101572
andrewrk
hmm I'm having second thoughts now. the idea struck me at first because it side-steps the "now you have to use the language the ui lib is written in" problem

1560101596
scientes
that that is a significant problem

1560101609
scientes
and even GTK+ has problems with it, because it isn't really C, it is gobject

1560101614
andrewrk
right

1560101624
andrewrk
I'd rather use an IPC protocal than gobject

1560101631
scientes
html is actually a pretty decent GUI language

1560101632
andrewrk
*protocol. same with C++ classes

1560101658
scientes
which for how much it sucks, is really saying something

1560101667
scientes
but anyways, I don't do guis

1560101752
andrewrk
but I guess a UI C library is actually just kinda the same thing or better

1560101757
gustav_o
I’m a big fan of the immediate mode guis a là imgui etc

1560101829
gustav_o
yea, or one could argue that a ui-binary would be better because it could update itself independently from the application etc, but then that’s not really a good thing :)

1560101890
scientes
qt is basically the only C++ library that has succeeded in being binary backwards compatible

1560101899
scientes
as that is something that is extremely difficult

1560102533
tgschultz
I disagere about HTML being a good GUI language. Wasn't NEWS basically what's being described?

1560102608
scientes
tgschultz, my point was that everything else sucks too

1560102623
scientes
but this isn't my area of expertise (and never will be)

1560104436
gustav_o
I’m reading through the docs and wow, zig seems great :) the printf() example is so nice

1560104529
gustav_o
Could one do something like that for pretty printing variables for debugging? like var p = Point(x,y); warn(“{}”, p); could produce “Point { 3.2, 3.1 }”?

1560104616
gustav_o
(e.g can I reflect types other than functions?)

1560104649
tgschultz
gustav_o: already that will work. structs are printed more or less as you describe by default. However, if you have a  more complicated type you can create your own `format` function in its namespace and the formatter will defer to it.

1560104667
gustav_o
great :)

1560104722
tgschultz
here's an example of the latter:

1560105104
gustav_o
thanks

1560105925
gustav_o
so I’ve been writing my new game framework in C for simplicity/portability but after researching zig a bit it definitely seems to be superior for this kind of project. do you know anyone using it for a bigger game yet?

1560107298
scientes
gustav_o, you will need to get involved in zig development for any significantly sized project

1560107604
marijnfs
i'm trying to make a minimal example of the sort error i got yesterday, but it's hard

1560107628
gamester
scientes: Why? Everything pretty much just works already except convenience things like automatic interfacing with c libraries. A large project is just more of the same. The only thing is you'll need to pay attention to Zig changes.

1560107673
gamester
gustav_o: I'm working on a game (among other things unfortunately), it's bigger than hackathon stuff, smaller than what small teams produce (but more fun). That's all I know.

1560107696
gustav_o
gamester: have you encountered any big problems yet?

1560107699
scientes
yeah go ahead. that is a primary use-case

1560107726
gamester
gustav_o: I have not. Andrew knows what he's doing.

1560107746
scientes
and if it is open source we would like to have more tests

1560107748
gustav_o
scientes: mm I can imagine that given that it’s early.. but core language features? if I avoid coroutines etc. I got some problems compiling with frameworks on OSX but I’m thinking I can create a library with the core framework in zig and then compile and link with platform specific tools?

1560107789
scientes
gustav_o, yeah, the core language is feeling alot stabler than it did 6 months ago

1560107796
gustav_o
basically use zig for all my own logic and some “call into c-libs” stuff

1560107800
gustav_o
cool

1560108061
scientes
but it is not fully implemented. there are lots of panic("TODO") in the compiler

1560108354
gamester
scientes: there are?

1560108371
gamester
I mean you can write really dumb code that shouldn't compile and instead you'll crash the compiler

1560108378
gamester
But when writing normal code, I don't hit TODO

1560108398
scientes
I've only run into it when doing rarer things, like excercising error unions

1560108409
scientes
and yes, please help with those bugs

1560108462
gamester
gustav_o: all I can say is that Zig moves fast. The current compiler does have unimplemented edge cases that won't be ironed out because the stage 2 comiler (written in Zig) will be the real compiler

1560108492
scientes
well we still want to have the stage1 compiler be able to bootstrap stage2

1560108503
scientes
because bootstrapping is a pain, and a security problem

1560108534
scientes
not sure that will actually happen

1560108537
scientes
but that is the plan

1560108575
gustav_o
I’m ok with running into the odd bug here and there and helping out when I do, but if it happens constantly I would say that it’s too early to base a project on it.. but I’ll start and see :)

1560108654
scientes
Hopefully zig adds enough that it will attrach the work to make it stabler

1560108658
scientes
*attract

1560108797
gustav_o
you don’t think the 3 stage thing will pan out? The main difficulty I see is maintaining two codebases (but there must be 1000s of other difficulties :)

1560108799
gamester
I'm not sure why even one person wouldn't be able to make the compiler stable. Jon Blow's Jai compiler has gone through fuzz testing, finding nothing. Zig's comiler1 isn't going through that because it would be a waste of time (I assume)

1560108913
scientes
nothing against any type of testing

1560108922
gamester
huh?

1560108938
scientes
any help with zig is appreciated

1560108968
gamester
I'm saying Andrew is intentionally not doing fuzz testing on Zig's stage 1 because the point is to move to stage 2 fairly quickly

1560108988
scientes
fuzz testing is overrated

1560108999
scientes
and it certainly is not ready for it

1560109018
scientes
doing fuzz testing well is almost the same as just writing tests

1560109032
scientes
those are much more productive at this time

1560109045
scientes
tests are not just preventing breaking, they are also a form of documentation

1560109253
gamester
fuzz testing helps you find the tests that you should write

1560109274
scientes
fuzz testing is when you run out of bugs

1560109289
scientes
zig is no-where near there

1560109299
scientes
but someone else can do it, no objection

1560109383
gamester
I don't know what we're discussing at this point. I'm in full agreement with not doing fuzz testing as it would be a clear waste of time.

1560109395
scientes
yeah

1560109408
scientes
i'm also hacking at the same time, so not really paying attention to this conversation

1560109549
mbarkhau
hi, I'm trying to debug a program that ends with segfault

1560109554
mbarkhau
i've isolated the line that causes it, but don't quite see what the issue is

1560109562
scientes
paste

1560109610
hryx
hi mbarkhau. scientes is asking if you can provide a link to a pastebin with your code

1560109642
scientes
maybe we need something in the topic

1560109645
mbarkhau


1560109693
mbarkhau
I'm just trying to migrate the code from `test "is_srth_num"` into methods of the struct

1560109787
scientes
mbarkhau, you have an infinite loop, you have to check if it is null before deinit()

1560109802
scientes
as you are calling yourself recursively

1560109828
scientes
oh nvm

1560109909
mbarkhau
i don't think i'm nulling anything, though I could in case multiple calls to init() are done

1560109927
scientes
you need to put the allocator on the stack, and pass it as an argument to init()

1560109928
mbarkhau
*multiple calls to deinit() are done

1560109940
scientes
otherwise you write over the stack, and over the allocator

1560109953
scientes
var allocator = &arena.allocator;

1560109962
scientes
this allocates on the stack, and when you return its gone

1560109969
scientes
so you can't then call deinit()

1560109987
mbarkhau
oooh, yeah now it makes sense

1560109987
scientes
or rather the two lines about that

1560109988
scientes
var direct = std.heap.DirectAllocator.init();

1560109988
scientes
var arena = std.heap.ArenaAllocator.init(&direct.allocator);

1560109997
scientes
yeah clang has a warning for that

1560110001
scientes
it should be an error in zig

1560110004
scientes
open a bug

1560110011
mbarkhau
k

1560110016
scientes
oh no nbm

1560110023
scientes
the compiler can't know as you are not returning it

1560110035
scientes
the warning is only if you return the stack-allocated thing

1560110056
mbarkhau
yeah, I guess with memory it has to start on the stack somewhere

1560110064
scientes
yeah i guess you do that however in this case

1560110078
scientes
you are putting a pointer to the stack in the returned struct

1560110086
scientes
so i think the compiler can error out and save you

1560110087
mbarkhau
yes, big nono

1560110098
scientes
._alloc1 = &direct,

1560110098
scientes
._alloc2 = &arena,

1560110160
mbarkhau
i guess when the debug allocator is ready, maybe that would help

1560110172
scientes
no, this is more general than that

1560110182
scientes
it should be an error to return a pointer to the stack

1560110192
scientes
you can still have similar problems the compiler can't know

1560110196
scientes
but this one it can figure out

1560110996
gustav_o
hm, why does it say that DirectAllocator alloc size should be known at comptime in the docs?

1560111047
gustav_o
*max number of bytes

1560111220
gustav_o
zig will not try to check this right? it’s just a best practice

1560111553
mbarkhau
@scientes

1560111625
scientes
thanks

1560111638
scientes
high quality!

1560112149
curtisf
Would making the method `inline` fix that particular code snippet?

1560112336
scientes
no

1560112343
emekankurumeh[m]
there was some discussion here a while ago about that

1560112359
scientes
well in C, the answer is no

1560112365
scientes
and I think that is the correct answer

1560112367
emekankurumeh[m]
the returning of pointers to the stack

1560112377
scientes
once stack variables go out of scope they are invalid

1560112397
emekankurumeh[m]
unless static?

1560112402
scientes
yes

1560112406
scientes
static is differn't

1560112418
scientes
those are not the stack however

1560112480
scientes
I don't see a reason for static in zig however, as it means something totally differn't from static functions and is confusing

1560112486
scientes
you can just use a global

1560112517
scientes
also statics look like stack variables

1560112520
scientes
super duper confusing

1560112525
emekankurumeh[m]
wouldn't you just use a struct?

1560112539
scientes
yeah, return a struct is the standard way to return multiple things in C

1560112542
scientes
its kinda ugly however

1560112551
scientes
i'd like to see multiple returns supported

1560112573
scientes
even if through annonymous structs

1560112583
emekankurumeh[m]
inside the function you would have struct and put your vars in there

1560112591
scientes
yep

1560112611
scientes
the caller will actually end up allocating it, if not using the c abi too

1560112651
scientes
so its on the stack, just the caller's stack

1560114136
mbarkhau
i really hope zig ditches the semicolons at some point

1560114180
scientes
mbarkhau, if you want that you need to understand the formal grammer and propose a new one (with a new formal grammar)

1560114186
scientes
because it has to be clear it will work

1560114207
scientes
go has the compiler inject semicolons into the language, so the formal language still has them

1560114412
mbarkhau
and that's not an option for zig ?

1560114423
scientes
It might be

1560114432
scientes
I personally don't care either way however

1560114445
scientes
i'm just saying if you put in the effort it would be more likely to succeed

1560114465
scientes
as Greg Kroah Hartman says "those that do the work make the decisions"

1560114625
mbarkhau
well and then there's this:

1560114701
mbarkhau
my feeling is that andrewrk is more amenable to arguments around language adoption

1560114708
scientes
seriously, these are unimportant things

1560114720
mbarkhau
"all the hip cool languages are dropping semicolons mom"

1560114751
scientes
zig has radically improved compiler errors by having strings not allowed to span newlines

1560114758
scientes
and this is the same thing

1560114780
scientes
zig can almost always spot a syntax error on the line it occured

1560114797
curtisf
The more similar Zig is to C, the more likely it can begin replacing it before I die, so I am willing to accept whatever ugliness semicolons might possibly carry

1560114801
mbarkhau
idk. how many people in the go and python communities are clammoring to have semicolons pout back in?

1560114829
mbarkhau
*put

1560114832
scientes
python syntax is super funky

1560114849
scientes
and its actually really bad for code review

1560114861
scientes
because a one-line change becomes a 30-line change

1560114904
mbarkhau
because of semicolons O_o?

1560114915
scientes
because of implicit blocks

1560114920
tgschultz
I hated golang's asi, it drove me insane

1560114933
scientes
asi?

1560114940
tgschultz
automaic semicolon insertion

1560114951
scientes
tgschultz, well yeah because you put the semicolon on the next line :)

1560114961
scientes
devil :P

1560114969
companion_cube
the python syntax is the worst, I'd avoid listening to them

1560114979
tgschultz
No, I put braces on the next line, and go put a semicolon before it becuse f*** me I guess

1560114989
scientes
yeah i meant brace

1560115054
tgschultz
either whitespace is significant or it isn't. Python went one way, other languages go the other, go decided it wanted the worst of both

1560115067
tgschultz
that's my opinion anyway

1560115113
scientes
i still think it is because you couldn't put the brace on the next line

1560115124
scientes
but yeah i think zig should keep the semicolon

1560115140
tgschultz
well yeah, but why not? It's the way I grew up coding, it's what I'm used to, and my opinion is that it is more readable.

1560115147
scientes
as i am coming from C I will end up putting semicolons in any language i work with

1560115175
scientes
and whitespace IS significant in Zig

1560115178
scientes
and i think it makes sense

1560115183
scientes
to have newlines be significant

1560115193
tgschultz
where is whitespace significant in zig?

1560115203
scientes
strings cannot contain literal "\n"

1560115211
scientes
for damn good reason

1560115218
scientes
it keeps the formatting sane

1560115239
mbarkhau
coming from python, semicolons feel like make work. anywho, I'm almost sorry I brought it up

1560115298
scientes
yeah I don't really care

1560115336
scientes
the go thing would be fine with me

1560115354
tgschultz
do you mean \r?

1560115417
marijnfs
is there a numeric for loop? i see it was proposed but docs don't mention it?

1560115457
scientes
tgschultz,

1560115461
tgschultz
marijnfs no, not really. while is for that, for is for arrays and slices. it is possible to use an array of void to mimic it though

1560115485
tgschultz
scientes oh, I see. whatever, we have multiline string literals to cover that anyway.

1560115496
scientes
yeah, and no /* */ C comments

1560115508
scientes
i think these were good decisions

1560115558
tgschultz
I don't disagree, I just don't think ASI is a good idea.

1560115604
scientes
you can still do this

1560115629
scientes
but yeah its not clear what is going on because of the ASI

1560115634
scientes
so now I have to agree

1560115704
scientes
and there is clearly an ASI exemption there

1560115708
scientes
so its just too complicated

1560117577
marijnfs
tgschultz: i see, the only annoying thing is defining the loop variable outside the while, then you can't use it next time

1560117599
scientes
yeah its minor, but its not a big deal

1560117682
Sahnvour
this is quite annoying, when the for loop knows how to do a counter automatically but a simpler while loop does not :(

1560118010
scientes
Sahnvour, #358

1560120613
marijnfs
is insertionSort supposed to work?

1560120622
marijnfs
it doesn't really for me

1560120640
marijnfs
also there is a while j>0 in there, where j is usize? isn't that unsigned?

1560121623
andrewrk
what's your test  case for a bug in insertion sort?

1560121816
marijnfs
andrewrk: i'm sorting a bunch of values i created for a mandelbrot image

1560121838
marijnfs
if i just make the same amount of values and fill them randomly it doesn't crash

1560121857
marijnfs
i'm starting to think it's becuase there are inf values in there (i'm sorting f64)

1560121904
andrewrk
ahh that sounds right

1560122017
andrewrk
I fuzz tested the sort functions, but only with integers

1560122111
andrewrk
btw yeah the default sort function is complicated, but it is O(1) stack space and O(N * log2 N) perf. (worst case, not amortized!)

1560122265
hryx
andrewrk: I finally have a sec to work on translate-c some more! Question, there are some places where (currently) opaque types are needed on the stack, like this:

1560122271
scientes
we could still use a sort that is optimized for highly sorted stuff (python has that)

1560122273
scientes
along with a hint that you can provide to sort to make it use that

1560122290
hryx
Specifically, that EvalResult contains an APValue, which is currently opaque. I'm struggling to find a good solution

1560122312
scientes
you could use uintptr, but that is ugly

1560122360
scientes
you can't store opaque types on the stack, only pointers to them

1560122360
hryx
Should clang::APvalue be fully defined in zig_clang.h so that it's not opaque? I guess they could be allocated from the C++, but I assume that's not ideal

1560122369
hryx
scientes: exactly, that's my problem

1560122372
andrewrk
hryx, in this case we can promote APValue to something where we know the size of it, look at ZigClangSourceLocation, ZigClangQualType, and ZigClangAPValueLValueBase

1560122399
andrewrk
you can follow that pattern - be sure to set up the bitcasts in zig_clang.cpp and the static_asserts to detect if the size changes

1560122420
hryx
andrewrk: that seems ideal, although APValue looks maybe more complex than those types. Maybe classes just scare me more than structs though

1560122431
hryx
oh yeah, static asserts are a good idea. Thanks, I'll try that

1560122438
scientes
hryx, if it is anything like APInt it isn't that bad

1560122447
scientes
but it will store information on the heap via malloc()

1560122451
andrewrk
in theory it should be ok as long as the sizes are the same, and the actual logic is done in the .cpp file with the correct type

1560122464
scientes
i think that is the way APInt works

1560122474
scientes
LLVM's SmallVector also does that

1560122475
andrewrk
scientes, this is about putting a C API on top of a C++ API

1560122486
scientes
yes I see

1560122494
scientes
why don't we actually expand the c api with what we need?

1560122502
scientes
at least some of it

1560122507
scientes
is llvm that unfriendly?

1560122515
andrewrk
this is the clang API

1560122533
andrewrk
I started with trying to use the clang C API but it's basically Monopoly Jr

1560122558
marijnfs
andrewrk: yeah I tried to make some 'fuzz test' case that creates this situation, but can't figure out how to reproduce it

1560122566
marijnfs


1560122595
scientes
also useful functionality sometimes goes into clang instead of LLVM, its kinda irritating

1560122599
marijnfs
on line 173 i call the failing sort, above that I make some array and fill it up with all kinds of garbage, but that doesn't fail

1560122602
scientes
I complained about it here

1560122699
hryx
andrewrk: One more question somewhat related to translate-c. stage1 seems to be able to build an AST with no token references, and ast_render.cpp just uses string literals when rendering. However the stage2 version of render heavily refers to the original tokens. Is this new approach specifically intentional?

1560122723
hryx
The reason why I ask is that building tokens and AST at the same time is pretty cumbersome

1560122764
andrewrk
first of all I agree it's cumbersome

1560122877
andrewrk
there are 2 factors going into this: (1) stage2 has zig fmt - the ability to render AST while retaining information such as comments and other formatting. stage1 doesn't have that functionality (2) in stage2 I want more control about the range that compile errors point to

1560122914
andrewrk
I was hoping that we'd be able to abstract the cumbersome properties of this design away once and then not really have to think about it

1560122945
andrewrk
but yeah it's pretty bothersome to have to mark revert points and go back and stuff

1560122948
hryx
super true, I understand. I think the only actual annoying part is that the order of tokens matters

1560122961
andrewrk
I think we can relax that restriction

1560122993
hryx
that would be cool. At first glance it looks like this is currently just an expectation that render.zig has in some places

1560123004
andrewrk
yeah

1560123015
andrewrk
btw, incoming breaking change to master branch

1560123038
hryx
saw that [_]i32{} change, pretty cool :>

1560123064
andrewrk
also `const` no longer allowed there, that was confusing people

1560123210
hryx
Ok, so for now I will live with the existing way of building tokens & AST in translate-c. Then later I'll look at how norms in render.zig could be relaxed to make the builing order more flexible

1560123226
hryx
and the above advice on making APValue non-opaque will unblock me. thankz!

1560123242
andrewrk
hryx, thank you!

1560123254
andrewrk
also no hard feelings  if you get bored with translate-c :)

1560123278
hryx
nah man, at this point I'm too invested haha

1560123285
hryx
it has been a very good learning experience

1560123342
scientes
ugghg, how do i check a LLVMTypeRef for null

1560123346
scientes
it keeps optimizing out my checks

1560123444
scientes
ahh finially

1560124020
emekankurumeh[m]
andrewrk don't forget to close issue 568

1560124193
andrewrk
emekankurumeh[m], thanks

