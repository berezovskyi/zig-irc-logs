1575634990
pixelherodev
how much would break if I tried adding a target with an 8-bit usize?

1575634992
pixelherodev
:P{

1575635011
pixelherodev
On an unrelated note, all that's left for my LLVM parser to work with a basic Zig test is function parsing and the backend :)

1575635069
mq32
pixelherodev: what would be 8-bit usize?

1575635090
mq32
or better question: what is the zig definition of usize?

1575635157
pixelherodev
pointer size, right?

1575635167
pixelherodev
I'm contemplating adding a z80 backend to my parser :P

1575635193
mq32
well, z80 would have an 16 bit pointer size, but 8 bit register size

1575635212
mq32
whereas 8086 has 24 bit pointer size, but 16 bit register size

1575635256
mq32
so for a 8086, the following c types would be: sizeof(uintptr_t) >= 3, sizeof(size_t) == 2, sizeof(void*) == ??

1575635303
mq32
ah

1575635314
mq32
usize is defined as a uintptr_t equivalent

1575635320
mq32
so yeah, z80 has 16 bit usize ;)

1575635334
pixelherodev
The question is whether or not it would actually be remotely usable :P

1575635345
pixelherodev
The answer is "probably, but it wouldn't be worth it"

1575635354
mq32
yeah, true

1575635356
pixelherodev
Same way that you can compile C for z80, but it's horribly inefficient

1575635366
mq32
would still be cool to program games for TI calculators with zig :D

1575635371
pixelherodev
True, true

1575635378
pixelherodev
Just for that use case I'm going to do it.

1575635388
mq32
i think compiling for z80 is inefficient because of bad compilers

1575635404
pixelherodev
Not entirely

1575635420
mq32
z80 is not that much different from an 8088 :D

1575635425
mq32
hm, well :D

1575635425
pixelherodev
It's very hard to efficiently generate code for Z80

1575635430
pixelherodev
Not

1575635438
pixelherodev
But very difficult

1575635445
mq32
yeah it's an architecture made for humans, not for compilers

1575635446
mq32
:D

1575635455
pixelherodev
Z80's alternate register sets are much much harder to use efficiently

1575635479
mq32
:D

1575635623
Pistahh
oh.. Z80. I haven't done any Z80 programming since 1994 :(

1575640387
Snektron
I havent done any living since 1998

1575640419
Snektron
Also, pixelherodev, you would basically have to make another llvm

1575640432
Snektron
There are some which target Z80 i think

1575640556
Snektron
I think there was some intent to add more code generation backends anyway

1575640585
Snektron
If thats in place you could pobably get it to work

1575640605
Snektron
But i think that requires some kind of stable IR

1575647346
mq32


1575647362
mq32
okay, using Zig for C libraries kinda feels more natural than C ^^

1575647373
mq32
although this has a thin layer of wrapper around itself

1575647389
mq32
(namely packing event ints into a tagged union)

1575648691
gonz_
It's super nice indeed

1575648925
mq32
if my code would work, i could show something super nice :D

1575648929
mq32
infinite 2D tilemapping

1575648940
mq32
but it looks like my quadtree is still broken

1575650116
Snektron
But other than that

1575650135
Snektron
Wasm will never be as fast as native

1575650157
fengb
Wasm is ~50% speed right now

1575650163
Snektron
On such low level code you need to differentiate betwren architecture anyway

1575650178
Snektron
I wouldnt trade in 50% performance just for wasm tbh

1575650191
Snektron
Its better than the 90% you lose with JS

1575650203
fengb
I'm more curious from an architectural standpoint

1575650204
Snektron
So its accepyable for browsers i suppode

1575650215
Snektron
What would you gain from it?

1575650234
Snektron
You need architecture dependent code anyway so you cant run it in just wasm

1575650262
Snektron
Youre suddenly going to need to implement previleged instructions too

1575650284
Snektron
(idk if wasm has a model for that, but considering its target i wouldnt expect so)

1575650407
fengb
It has host "syscalls"

1575650436
fengb
But I mean more like the userland is only wasm based. That'd eliminate the need for privileged instructions

1575650480
fengb
I dunno. I'm taking Birth and Death of Javascript to the next level :P

1575650549
gonz_
I think WASM as a non-browser runtime might be useful for edge cases. It could replace Docker for many users' development workflows, for example.

1575650623
mq32
gonz_: i think pretty much any place where script languages are used right now can be replaced with a good Wasm interface

1575650636
mq32
e.g. scripts in games could be written with any language then

1575650651
Snektron
Userland only is something different

1575650683
Snektron
gonz_ docker is still much faster than vm

1575650694
fengb
So... I think wasm is inevitable as a "native" target, or at least a much wider deploy than any other VM language

1575650710
Snektron
And i think that virtualization is still nuch faster than that 50% performance loss

1575650716
fengb
At the very least, I'm hoping it can fix some of the Electron bloat that's getting really pervasive

1575650725
gonz_
Snektron: 50% is what you get in a browser right now, AFAICT.

1575650734
gonz_
I don't think it's uniformly the case for non-browser runtimes.

1575650754
Snektron
So unless you use wasm as some kind of IR and then compile that to native, similar to ART, i dont think you want to do it

1575650757
gonz_
Even so, "now" doesn't matter much. It's effectively the starting point.

1575650793
fengb
But maybe that won't matter and RISCV will eat the world :P

1575650832
mq32
Snektron: afaik wasm is designed to be JITted

1575650847
Snektron
I dont think wasm should be used as a hammer for every nail you can find

1575650854
mq32
true dat

1575650863
Snektron
fengb, personally im rooting for the comeback of vliw cpus

1575650874
fengb
Wasm design is closer to an IR; it's a stack machine

1575650901
Snektron
Yeah, thats similar to java bytecode

1575650907
Snektron
If android is still using that

1575650986
Snektron
Wasm os would just be an OS with an official interpreter

1575651014
Snektron
Or jit compiler, if you will

1575651093
mq32
tip of the day: Don't do stupid things. It will work, then.

1575651132
fengb
But... my life would be nonexistent

1575651138
mq32


1575651146
mq32
sparse tile map rendering written in zig

1575651151
mq32
using sparse quad tree

1575651167
Snektron
Very nice

1575651199
mq32
yeah

1575651207
mq32
the core implementation is also completly recursion-free

1575651226
mq32
tree query and insert is iterative

1575652434
mq32
here in video form:

1575652440
mq32
it got pretty good

1575652562
gonz_
Hmm

1575652573
gonz_
Array literals; now you're supposed to use `&` to coerce them into slices?

1575653262
fengb
Yep:

1575653728
gonz_
I see

1575659076
stratact
was there a build flag that allowed zig to check specific lib files for errors without having to add them to the test suite?

1575659316
lupine
>  error: struct 'Entry' depends on itself

1575659323
lupine
I mean, I know, I'm trying to create a linked list :p

1575659402
lupine
ah, I see, pointer-to, d'oh

1575659661
stratact
I too, found my pebkac ;)

1575662212
fengb
At least it gives you an error :P. There was a recently logged bug that had the compiler take up infinite memory instead

1575665055
lupine
hehe

1575665399
lupine
all done:

1575665416
andrewrk
just merged #3856. emekankurumeh[m] your PR #2598 is finally unblocked. And now there are only 2 prerequisites left until var args can get deleted from zig

1575665631
jonathon
Is it possible to point @cImport() at an arbitrary location, e.g. if I want to keep vendored libraries? Or, do I have to override the include search path?

1575665701
andrewrk
that's an interesting use case. @cImport-local include paths, relative to the file that contains @cImport

1575665736
andrewrk
currently your options are the CLI flags to zig which globally affect all @cImports

1575665765
fengb
Oh boy, this release cycle has a million features

1575665910
andrewrk
I was able to remove 3 builtins with that merge though :)

1575666330
jonathon
andrewrk: OK, thank you! I wonder whether replicating something like the current @import() behaviour might work, e.g. @cImport("mosquitto") searches the system include path but @cImport("mosquitto.h") looks for a file relative to the importing file.

1575666348
jonathon
.. if it's suitable for a feature request

1575666379
andrewrk
@cImport takes an expression which can have branching logic in it

1575666411
jonathon
(Hang on, I might be looking at the wrong thing and confusing cImport and cInclude)

1575666455
fengb
Oh I'm happy with these changes so far. I'm just surprised since the only 2 cycles I've followed didn't have this much activity

1575666476
andrewrk
jonathon,

1575666549
andrewrk
anyway, I do think it's worth proposing to allow @cImport-local include paths

1575666567
andrewrk
fengb, implementing result locations was brutal in terms of opportunity cost

1575666580
andrewrk
that was a long and dark tunnel

1575666603
jonathon
I think exe.addIncludeDir(".") (

1575666928
andrewrk
oh your WasmPageAllocator is ready!

1575666964
andrewrk
nice use of 1 bit enums

1575667017
fengb
I couldn't get the output as small as I had hoped but this should be okay enough

1575667054
jonathon
(That option does let me specify a path to a vendored library header, so I think that should work; I need to see if I can point exe.linkLibrary or exe.linkSystemLibrary to a local so file)

1575667089
fengb
Those tests were a bit tricky. It depends on global state so those internal tests must run first. Behaviorally it shouldn't make a large difference, but that's where I caught my [256]u8 == [2]128 logic bug

1575667161
andrewrk
"Use '0xFFFFFFFF' as a

1575667196
fengb
Yep I added a todo to follow up

1575667225
andrewrk
jonathon, there's exe.addLibPath

1575667259
andrewrk
if you're producing the .so in the build.zig, an even better option is exe.linkLibrary(the_lib)

1575667275
andrewrk
fengb, oh, if I only read 2 more lines down :)

1575667326
andrewrk
so would you want to use this as the backing allocator for WeeAllocator for FunDude?

1575667371
fengb
I tested it out and it's about ~1 kb larger than the dirt simple version I'm using

1575667409
fengb
I was hoping to get it even smaller but not sure what else to do

1575667438
fengb
But... maybe I'm overly concerned since 1 kb uncompressed isn't really too big in the grand scheme of things :P

1575667442
jonathon
andrewrk: ah, nice, thank you! more reading to do. :D

1575667473
fengb
Oh... just using it directly? I didn't think about that

1575667510
andrewrk
using it directly seems problematic, 64K for every allocation

1575667530
fengb
Working as intended™

1575667553
fengb
FunDude only makes like 3 allocations so it's not actually terrible

1575667562
andrewrk
ah good point

1575667601
fengb
+700 bytes though compared with master :(

1575667803
andrewrk
I suppose for your use case we could have NeverFreeingPageAllocator, with the trade-off being smaller binary size

1575667878
andrewrk
I also suspect that the cost we're paying in

1575667910
andrewrk
need to teach llvm how to deal with our interface pattern, or pick a different interface pattern

1575667964
fengb
Yeah, that's what zee_alloc has hacked together

1575667999
fengb
The new WasmPageAllocator can theoretically free any manually fetched page so I could attach a separate deinit to zee_alloc

1575668007
fengb
But I'm not quite sure what that'd look like

1575668039
fengb
If WasmPageAllocator never did a shrink, most of the complicated code can theoretically just disappear

1575668139
andrewrk
well either way, after I give this a PR sanity check, I think it's at least an improvement over status quo

1575668141
andrewrk
nice work

1575668192
fengb
Thanks

1575668221
fengb
I'd like to enable wasi for CI next. Seems like we're getting close

1575668236
andrewrk
that's a good goal

1575668251
fengb
Last batch I actually got stuck because the wasm vm didn't support one of the syscalls we needed lol

1575668277
andrewrk
shritesh mentioned the other day he might be interested to start the project of zig wasi interpreter using the std lib abstractions

1575668301
andrewrk
I really think our std lib abstractions have done most of the work of a wasi interpreter

1575668319
fengb
Yeah I've been thinking about doing that too

1575668321
andrewrk
the wasmer guy (or was it wasmtime? I can't remember the difference) mentioned they don't support freebsd yet

1575668342
andrewrk
this is all the same problem that we're already solving

1575668354
fengb
So... I actually downloaded a C++ based wasm engine  because the Rust ones had terrible memory performance (lol)

1575668401
andrewrk
I'm pretty sure the part where it has to decode wasm instructions is like 1% of the task. the rest is cross platform OS abstractions

1575668431
andrewrk
and IMO the goal if this was under the zig project umbrella would not be to JIT or go crazy with speed, but just to provide a simple, reliable (debuggable, even?) interpreter for running tests

1575668471
fengb
The C++ one could call `memory.grow` much quicker so something is weird with the Rust implementation

1575669982
gonz_
I was about to ask "What's the best way to ensure via the types that a parameter is a string literal?"

1575670001
gonz_
And then I remembered we literally have a keyword for exactly that type of thing. :D

1575670017
gonz_
The mind is not always fast...

1575670024
jonathon
Oh, my word, I can just add all the C files from the library I was linking against into build.zig and Zig will compile it all into the output executable. No need to link against a system library (or require it for deployment), I can just include the C sources directly into the Zig-compiled executable. That's __awesome__. (Now to look for a better way to add C files in build.zig than a long list of addCSourceFile()...)

1575670077
andrewrk
jonathon, yes that is completely intended

1575670105
andrewrk
I don't think I added any glob functions to build.zig yet

1575670126
andrewrk
but you can put your long file list in another file and @import it if you want to keep things a bit cleaner

1575670163
andrewrk
but also, long lists of files - not so bad:

1575670172
andrewrk
¯\_(ツ)_/¯

1575670238
andrewrk
those c compilations will all be cached too, so once you get past the first build the second one should be near instantaneous

1575670247
jonathon
whoa :O

1575670248
jonathon
Mine's only a paltry 32 lines :D

1575670275
andrewrk
I copy pasted these lines once and never had to deal with them again

1575670277
gonz_
Has there been progress (or did it even get finished, perhaps) on the comptime allocator idea?

1575670301
andrewrk
gonz_, nothing to report as far as I remember. the issue is

1575670344
gonz_
Thanks, this is the second time I don't find it. Literally searching for "comptime allocator", I don't know what's going on.

1575670372
andrewrk
it's all good. looking at it again, I do think we're actually kinda close to that working

1575670506
gonz_
I wonder if I'm overestimating its usefulness. It seems like suddenly you could have access to all sorts of things for precompiling resources from files, etc.

1575670547
gonz_
Or can we already process OBJ files at compiletime, for example?

1575670573
andrewrk
inline for (@embedFile("foo.OBJ")) |byte| {}

1575670583
andrewrk
the biggest blocker to any of that stuff is bugs

1575670624
andrewrk
much of stage1 is at "proof of concept" quality. I'll be taking a much more disciplined approach to self-hosted

1575670637
gonz_
I should try to work out what the limitations are currently. I guess it's likely that most of it's already covered in principle already.

1575671118
gonz_
I was staring at some C preprocessor magic yesterday just marvelling at how insane it is that it's still a thing.

1575671260
gonz_
My tolerance isn't exactly high, I guess, but all of that particular one is solvable with functions and filling in a struct manually.

1575671353
frmdstryr
How do I make the exe work with `valgrind --tool=callgrind` ? It just shows "unknown" for the locations

1575671384
andrewrk
frmdstryr, that should work - unless you pass --strip, zig builds binaries with debug info

1575671543
WendigoJaeger
Hi, I'm doing a little experiment, I am wondering two things right now. First, is there a better to use enum as flags parameters without casting them ? And second is there a way to mark a function Always inline ? ref code:

1575671633
fengb
Hmm, smells like an emulator 🙃

1575671637
gonz_
WendigoJaeger: You can have a `packed struct` with members with size u1, then have a method on it to read it as an int.

1575671653
WendigoJaeger
fengb: nope, making a GBA ROM directly

1575671676
andrewrk
`inline fn`:

1575671691
WendigoJaeger
andrewrk: thanks!

1575671781
andrewrk
zig's enums don't really map to flags, I suggest to use unsigned integers, or if you want extra type safety, then yes, packed structs with u1 members. if you go the packed struct route, be aware of the following issues:

1575671783
frmdstryr
Still getting unknown with debug builds...

1575671805
andrewrk
sorry, not u1 members, bool members

1575671839
andrewrk
frmdstryr, maybe try a newer valgrind version

1575671842
andrewrk
what version is that

1575671852
frmdstryr
3.13.0

1575671866
andrewrk
yeah that's pretty old. they recently fixed some things related to llvm/lld debug info generation

1575671867
frmdstryr
Whatever 18.04 has

1575671881
gonz_
andrewrk: As in you wouldn't recommend the u1 version?

1575671884
andrewrk
frmdstryr, it's, perhaps surprisingly, a pretty straightforward project to build from source

1575671898
andrewrk
gonz_, I would recommend whatever is the correct type. flags usually implies bools

1575671905
gonz_
Yeah, fair point

1575671925
frmdstryr
?

1575671934
frmdstryr
oh valgrind

1575672394
frmdstryr
any ideas why the streams slow down so much?

1575672408
andrewrk
if align(0) proposal is accepted, best type for flags will be a struct with align(0) fields

1575672465
andrewrk
frmdstryr, does the "llvm can't optimize our interface pattern" not explain everything?

1575672471
andrewrk
genuine question

1575672573
frmdstryr
Sort of, that still doesn't explain the drop from the readRaw to readBufferedReaderDirect though

1575672696
frmdstryr
I tried putting an os.read there

1575672742
frmdstryr
I'm almost thinking it's more something with the stack

1575672829
andrewrk
interesting

1575672863
andrewrk
could it be our memcpy implementation? have you tried building with -lc ?

1575672902
andrewrk
there's -lc with musl ABI which is one implementation. -lc with gnu ABI which is glibc implementation. and finally no -lc is zig's implementation

1575673263
frmdstryr
Using lc doesn't seem to make much of a difference

1575673338
daurnimator
andrewrk: re: @call. can there not be e.g. a tailcall that is also a no-async call?

1575673347
daurnimator
I thought that enum you have would be a struct....

1575673847
frmdstryr
valgrind 3.15 works, thanks!

1575674604
daurnimator
oh I got confused about the CallOptions vs Modifer. comment left.

1575674801
daurnimator
andrewrk: so re: that getrusage PR.... I'm always afraid about relying on unreachable like that (for unknown errors): in release-fast mode couldn't that end up being undefined behaviour (nasal demons) if someone use e.g. using seccomp? shouldn't it be e.g. a @panic instead?

1575676668
fengb
daurnimator: did you end up getting the job? :)

