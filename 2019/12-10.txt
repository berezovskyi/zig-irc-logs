1575936166
stratact
daurnimator: regarding your question to my PR, should I have made `caps` a `StringHashMap(ArrayList(u8))` instead? So the hashmap "owns" the string data? I think I realized my mistake there and why I'm bad at manual memory management. :)

1575938818
adamkowalski
andrewrk: I am watching your stream about the evented chat server. You show that by declaring io_mode = .evented you enable asyncronous IO rather then blocking

1575938837
adamkowalski
How do you handle a situation where you want some blocking operations and some evented operations. Does it have to be all or nothing?

1575938997
fengb
Anyone have a recent memory of the original Gameboy? Trying to gauge how accurate this ghosting is:

1575941938
daurnimator
stratact: that would be one way. or you could just mem.dup() every time you add to the map (and iterate over the map freeing in deinit)

1575943964
Cadey
andrewrk: what's the fastest way to install all of the dependencies of the zig compiler for iterating on zig's wasi support?

1575944038
Cadey
assuming an ubuntu host that is

1575946197
daurnimator
Cadey: the only dependency is essentially llvm....

1575946201
daurnimator
I guess cmake too?

1575948726
stratact
daurnimator: actually thinking about it again, would it be better to avoid deiniting the buffer and save it in memory to another Terminfo field, so that way the names and caps maps can still slice view it?

1575948805
stratact
...oh, that was your implicit point

1575949999
stratact
emekankurumeh[m]: You're @emekoi on github, right? I'm still confused why downward function access from anon struct literals are not working for my closure use

1575956683
pixelherodev
I was mentioned twice while AFK. That's new for me. :P

1575956845
pixelherodev
Nothing wrong with a bit of infamy, I suppose :P

1575957044
pixelherodev
but yeah, I'm happy to chat about doing OS stuff in Zig, or that text adventure, which was a nice learning experience but I was too busy to finish :( One of these days.

1575963871
stratact
So with nothing left for me to do for std.terminfo atm, I searched for other std lib contrib friendly issues and I couldn't find one that I'm capable of. That not only makes me bored for the rest of the night here but feel terrible as a coder :(

1575964133
stratact
Welp, time for bed.

1575964231
hyu
Where I live is only 3pm

1575964420
benjif
3am here

1575964735
hyu
Hi benjif, it's time to go to bed

1575964759
benjif
hyu: Just woke up actually

1575964796
benjif
a little too early

1575968044
pixelherodev
4 AM here, but my sleep schedule is so messed up it makes a landfill look organized

1575968052
pixelherodev
:(

1575968395
mq32
vegai, just go for it!

1575968807
vegai
:)

1575968817
vegai
I'm looking at various projects for insipration / stealing of code

1575968821
vegai


1575968881
vegai
and

1575968953
vegai
miniz_oxide looks remarkably clean in fact, perhaps I'll try to port that

1575968975
vegai
apparently it's reasonably fast too:

1575969324
merlyndmg
translate-c-2 still converts void some_func(); into fn some_func(...); Is that ellipsis supposed to be removed now that varargs is gone?

1575969464
merlyndmg
I'm potentially finishing up a PR for that now, so wondering if I should be wiping that out now and just make the function signature take 0 parameters, or what it should do

1575969503
merlyndmg
(PR for translate-c-2 properly handling function signatures)

1575969967
pixelherodev
Wait, varargs is gone already?!

1575971655
muffindrake
Is if(optional) specifically required, or am I allowed to swap the branch blocks by doing if (!optional)?

1575975531
FireFox317
pixelherodev: Yes they are gone. We now have tuples!! `std.debug.warn("i: {}\n, .{ 1 });` however var args are still posible to use in code that interfaces with C

1575975661
FireFox317
so merlyndmg I guess varargs should stay in code that interfaces with C:  <andrewrk> this is not related to C functions. C functions still work the same

1575975811
mq32
muffindrake: you can always access an optional with opt.?

1575975830
mq32
but you need to be sure that the optional is actually initialized with a value

1575976086
aperezdc
How is one supposed to compare a slice (`[]u8`) with a literal string (`[4]u8` in my case, according to the compiler)?

1575976103
aperezdc
The `==` operator doesn't work (incompatible types)

1575976123
aperezdc
I am supposed to use `strcmp()` from the libc?

1575976147
aperezdc
Sorry if this is too basic a question, I just started with Zig yesterday O:-)

1575976231
mq32
aperezdc: std.mem.eql(u8, myString1, "hello");

1575976533
aperezdc
Oh, that's it. Thanks mq32

1575977109
mq32
you're welcome

1575979637
pixelherodev
In theory, if you know both str1.len % 4 == 0 and str2.len % 4 == 0, is std.mem.eql(u32, @as([]u32, str1), @as([]u32, str2)) faster?

1575979648
pixelherodev
Native size, rather

1575979664
pixelherodev
So len % 8 ==0 and u64 on x64

1575979855
mq32
pixelherodev, probably, probably not?

1575979865
mq32
will not work on aarch64 for example

1575979873
mq32
as it will die with alignment problens

1575983352
stratact
ah nice, sleeping took the bad feelings away. Glad to see people talking about timezones after I went to sleep. I'm waking up to this:

1575983540
aperezdc
Mmh, I would expect either std.mem.eql() has some optimizations to do that automatically when possible, or that LLVM will optimize the loop

1575983587
aperezdc
Some libc implementations include hand-coded assembler inner loops for memcmp() and similar functions, for example

1575983640
aperezdc
Also not all architectures would necessarily benefit from hand coded versions... Sometimes the optimizer in the compiler will beat the programmer anyway ;-)

1575983719
mq32
aperezdc, yeah it's sure possible to write optimized versions for differrent platforms

1575983734
mq32
but i don't think that's a high priority right now

1575983809
aperezdc
Of course, doesn't need to be

1575983847
aperezdc
LLVM might be doing some optimizations already, anyway

1575983944
mq32
yeah

1575983946
mq32
probably

1575985769
frmdstryr
daurnimator: Is your test script for the h1 branch in the repo somewhere?

1575986465
protty
can an async function thats suspended and running the code inside the suspend block be resumed in parallel on another thread?

1575986571
mq32
protty, yes, async functions can be resumed from another thread

1575986583
mq32
but i don't think it's legal to resume from two threads at the same time

1575986635
SyrupThinker


1575986649
SyrupThinker
I think this is exactly whats asked, no?

1575986837
protty
mq32: maybe a better phrasing: could code1 `suspend { code1 }`and code2 `code2: resume frame_from_code1` be executing simultaneously?

1575986870
SyrupThinker
Yes

1575986902
protty
ah just read the link, thx

1575991120
fengb
andrewrk: looking at your changes, os/wasi.zig is meant to be a pure wrapper around system calls?

1575991318
andrewrk
fengb, yes, the idea of that abstraction layer is that it's the actual API the system provides - no cross platform abstractions there. std/os.zig has some cross platform abstracting in it

1575991408
fengb
Okay sounds good

1575991574
andrewrk
protty, yes, and so one thread will be finishing the suspend block, and the other thread will resume

1575991593
andrewrk
and the whole reason that suspend takes a block is because of this race

1575991895
fengb
Oh boy, anonymous init makes nested structs so much nicer :)

1575992045
andrewrk
yes, nested anonmyous types actually work now

1575992061
andrewrk
anonymous structs as parameters & return values, anonymous enums as parameters & return values

1575992107
protty
another question: try to use `testing.expectError()` and keep getting this stack trace

1575992259
andrewrk
protty, did you run make after pulling master?

1575992271
andrewrk
one explanation for that would be updating std lib without rebuilding

1575992278
protty
ah, nope. lemme try

1575992839
adamkowalski
Did std.debug.warn change how it works? This no longer works    std.debug.warn("{}", 25);

1575992859
Snektron
yeah, varargs are removed

1575992878
Snektron
the right syntax is `std.debug.warn("i like {}", .{"pythons"});` now

1575992882
adamkowalski
Woah thats a big change haha. Where can I read about that?

1575992943
adamkowalski
Ahh so it's taking an anonymous struct with the same number of fields as the number of placeholders?

1575992950
companion_cube
ahah so Zig now has tuples :D

1575992982
adamkowalski
Is that what we call anonymous structs now?

1575992995
andrewrk
anonymous list literals, yeah. same thing

1575993167
adamkowalski
andrewrk: is this hos you're supposed to use @fieldParentPtr? I tried creating a minimal example of a heterogenous list:

1575993229
companion_cube
well, sum types, tuples, `switch`, Zig is now officially a ML

1575993254
andrewrk
adamkowalski, yes that looks like the current interface pattern that std uses, if that's what you're asking

1575993271
andrewrk
MatLab? Machine Learning?

1575993324
companion_cube
ML, meta language (SML and OCaml basically)

1575993331
companion_cube
where type inference comes from ;)

1575993334
adamkowalski
awesome, thanks. I'm not sure if we have too many examples of that yet. I was gonna document that somewhere

1575993343
adamkowalski
Hindley Milner!

1575993367
adamkowalski
Their inference is kindof limited though

1575993381
protty
andrewrk: looks like that was it

1575993381
adamkowalski
I feel like just having functions which take and return types is more expressive

1575993394
companion_cube
yeah, Zig goes further in some directions, for sure

1575993418
adamkowalski
Also I like forcing people to document the signature, even if you can infer it

1575993452
companion_cube
yeah I agree

1575993462
companion_cube
my OCaml is heavy on annotation

1575993465
companion_cube
s

1575993486
adamkowalski
andrewrk: do you have any example code using the vtables instead of fieldParentPtr. I wanted to write the equivalent example with that approach

1575993539
andrewrk
fengb, nice work on WasmPageAllocator

1575993570
andrewrk
adamkowalski, have a look at

1575993599
adamkowalski
Awesome thanks!

1575993651
adamkowalski
What kinds of things would be good to have in docs for that? I'm thinking this is the simplest example that still demonstrates the feature. Maybe also plug it in to compiler explorer and compare the assembly?

1575993702
fengb
Thanks

1575994265
muffindrake
Is goto still on the table?

1575994368
muffindrake
defer/errdefer offer some manner of useful features, but they don't replace goto as the documentation claims.

1575994480
andrewrk
goto was removed for being a redundant feature:

1575994563
lupine
I wanted to use goto to break out of a nested while loop, but then I found tagged breaks, so

1575994563
andrewrk
if you want to be taken seriously you should probably provide example code to show why the claims in the docs are not correct

1575994731
fengb
We should totally support a comefrom 🙃

1575994776
mq32
fengb: comefrom is great for concurrency!

1575994790
fengb
It solves crosscutting logging concerns!

1575994922
fengb
"thread 'main' panicked at 'not yet implemented: Clock eventtypes in wasi::poll_oneoff', lib/wasi/src/syscalls/mod.rs:2354:18"

1575994926
fengb
So much for adding tests :/

1575995079
andrewrk
wasi is woefully incomplete

1575995109
andrewrk
IMO if we do a wasi interpreter, we should start just finish the spec, and implement it, and then wasi project will end up having to use our design

1575995134
fengb
lol

1575995178
andrewrk
I promise you that would happen - users will use what works, and then the real actual project gets pressure from users to support what already works unofficially

1575995201
fengb


1575995221
andrewrk
ha!

1575995298
fengb
Yeah looking at this stuff, it's something we already do in Zig

1575995336
fengb
I never thought about how similar our os layer is to the wasi vm

1575995340
andrewrk
yep :)

1575995905
fengb


1575995941
fengb


1575995965
fengb
I guess it's not really worth looking at right now since there's not a proposed replacement yet

1575997376
adamkowalski
andrewrk: do you accept pull requests for the documentation on master? This section

1575997516
andrewrk
adamkowalski, yes

1575997618
adamkowalski
In the docs it says that the code samples are ran as part of the test suite of the compiler. Is that just using make test? Or is there anything else I need to do to check my work?

1575998016
adamkowalski
Wait I can just run zig build test to test the compiler!! Even the stage one?

1575998118
andrewrk
yes, have a look at

1575998130
andrewrk
you probably want `zig build docs`

1575998210
adamkowalski
thats awesome. for some reason I would have assumed you could only use that for building stage 2. But I guess you can use zig build even for C++ projects

1575998239
adamkowalski
I wonder if you could steal people over by just going to the C++ people and tell them there is a new alternative for CMake that has a sane language

1575998261
adamkowalski
Then before they know it, they are using Zig, and then we tell them, by the way it's a general purpos programming language, you can just leave C++ behind

1575998335
andrewrk
that's part of the plan :)

1575998368
andrewrk
especially when you consider zig can compile C/C++ code, so the package manager will be a reasonable way for C/C++ projects to depend on C/C++ libraries

1575998504
andrewrk
to be clear adamkowalski you need cmake/make to build zig stage1. then you can use that for zig build

1575998734
Snektron
adamkowalski: check out meson, it has much mroe sane syntax when compared to cmake

1576000488
stratact
andrewrk: wait, null-terminated pointers are... [*c], right?

1576000881
andrewrk
no, those are C pointers

1576000991
stratact
Heh, you're right, TIL about #3731

1576001008
fengb
Well of course he’s right 😛

1576001224
stratact
oh, I didn't mean it that way. It was more to imply my ignorance of what's happening and how stupid my question was.

1576001330
andrewrk
stratact, buddy, you don't have to beat yourself up to fit in here. take it easy on yourself. consider that calling yourself stupid could be seen by other newbies as how they should feel

1576001439
Nairou
This seems like a silly question, but how do you cast between similar types? For example i32 -> usize (attempting to use a i32 as an array index). I saw the GitHub proposal where plain casts were removed, but I don't understand what they were replaced with.

1576001546
andrewrk
Nairou, @as(DestType, value)

1576001564
andrewrk
however i32 -> usize is a lossy conversion, because usize does not contain the entire range of values that i32 spans

1576001580
andrewrk
for this you will have to choose what kind of cast you want. do you want to assert that the value fits in the destination? @intCast

1576001619
andrewrk
do you want to treat the i32 as unsigned and zero extend it? @as(usize, @bitCast(u32, x))

1576001655
Nairou
True. So far I've been using i32 as a generic type, like "int" in C. In this case I know it'll never be negative, so I guess the latter.

1576001674
Nairou
What happens if I know the i32 isn't negative, but I only do a @as(usize,x) ?

1576001747
Nairou
Hmm. Was @as added after 0.5?

1576001858
Nairou
I guess it wasl, It's in master docs but not 0.5 docs. Guess I need to get a newer version of Zig.

1576001866
andrewrk
@as was always supported by calling a type as a function

1576001880
andrewrk
however now a function call is always a function call

1576002093
Nairou
I tried usize(x) in 0.5 but that didn't work either, if that's what you mean

1576002969
stratact
andrewrk: I'll be careful next time. I'm kind of an INTP person, so it's part of will of growth. I will take it easy, that's something I'm really working on :)

1576004633
stratact
Let's see, when adjusting the std.c functions from [*] to [*:0] and *[N] to *[N:0], there appears to be some functions in that module that std.os uses and requires to be not null-terminated?

1576004865
stratact


1576005630
andrewrk
not all c functions are null terminated, you have to determine which ones do and which done

1576005632
andrewrk
*don't

1576005649
stratact
fair enough, will do

1576005716
Nairou
Is there a trick to using AutoHashMap.getOrPut() ? I see examples of it in GitHub, but when I try to access the kv field in the returned result I just get a "does not support field access" error.

1576005798
andrewrk
Nairou, you truncated the part of the error message that would have made it possible to answer your question

1576006052
Nairou
error: type '@typeOf(std.hash_map.HashMap(i32,GuardSleep,std.hash_map.getAutoHashFn(i32).hash,std.hash_map.getAutoEqlFn(i32).eql).getOrPut).ReturnType.ErrorSet!std.hash_map.GetOrPutResult' does not support field access

1576006072
Nairou
I'm using an AutoHashMap of i32 to a struct named GuardSleep

1576006094
tdeo
you need to handle the error i think

1576006141
Nairou
Oh good grief, I should have known that. Learning, thanks :-)

1576006415
Nairou
Am I correct in assuming that, at least until 1.0, master is always best to use and the periodic releases are just milestones?

1576006546
tgschultz
yes

1576006610
andrewrk
yes and breaking changes and regressions can happen without warning until then, so, best to keep an old build around until you update your project to use latest master

1576009976
fengb
Is this a common problem in C? "To build wac/wax/wace you need a 32-bit version of gcc and 32-bit versions of SDL2 and libedit."

1576010548
andrewrk
yes

1576010738
andrewrk
meanwhile, to cross compile legend-of-swarkland for windows, pass -Dtarget=x86_64-windows-gnu to zig build

1576011578
fengb


1576011717
andrewrk
that test is incorrect since the docs for sleep says: /// Spurious wakeups are possible and no precision of timing is guaranteed

1576011763
andrewrk
a valid implementation of std.time.sleep() according to these semantics is `pub fn sleep() void {}`

1576011779
andrewrk
and I am confident this is the correct API

1576011899
andrewrk
I think it should be corrected to testing.expect(time_1 >= time_0)

1576011919
andrewrk
that's the best we can do

1576011920
fengb
Okay, the wasi version I got ~1200 ms, which is also correct right?

1576011924
andrewrk
yep

1576011938
fengb
It's a little silly since I'm running it in a wasi vm in a Docker on my Mac

1576011944
fengb
So precision is over ------> there

1576011959
andrewrk
you should probably eyeball the results of std.time.milliTimestamp()

1576012213
stratact
Now that I think about it, Zig has all of the interesting/practical properties of C (which I'm learning for the first time) but with a healthy blend of ideas from D and Rust (which I have experience in) on top of its own unique features, which is why it's extremely fun. I never thought of it like this before, but it feels right.

1576016280
stratact
Heh, I'm feeling evil (in a good way). I'm going to abuse the the Azure CI to help me purify null-terminated work based on how other OSes complain along with searching man pages for which *read/*write/*pipe functions don't need them.

1576017523
pixelherodev
Got my LLVM parser almost done :D

1576017533
pixelherodev
Parses the test fully, just need to finish the backend

1576017590
stratact
Oh neat, will this be used for the self-hosting compiler?

1576017868
daurnimator
frmdstryr: no. but I linked to the sprunge for it earlier

1576017918
frmdstryr
I tried that but it was giving an error saying ensureCapacity didnt exist or something like that

1576018017
fengb
andrewrk:  whoops, I misread the test. It's suppose to sleep for 1ms, not 1s, so this check of <50ms is probably correct

1576018053
andrewrk
it's unlikely to fail but still theoretically incorrect

1576018239
fengb
I found the bug lol:  "const ns_per_ms = 1000;"

1576018298
pixelherodev
stratact, nah

1576018303
pixelherodev
Implementing an alternate backend

1576018366
daurnimator
"andrewrk>however now a function call is always a function call" except when its a builtin

1576018553
stratact
pixelherodev: an alternative backend also is equally (if not, more) important. Keep up the fine work.

1576018566
pixelherodev
Uh, I mean

1576018572
pixelherodev
For a non-standard ISA

1576018593
pixelherodev
Though if I finish that, I could probably add support for e.g. x86

1576018598
pixelherodev
That's actually a really interesting idea, thanks!

1576018671
andrewrk
daurnimator, the statement is ambiguous. an unambiguous statement would be: now function call syntax is always a function call

1576018683
stratact
pixelherodev: and arm64, please? :)

1576018720
pixelherodev
I don't know ARM, but it would probably be doable

1576018727
pixelherodev
First, need to get it done though

1576018735
shakesoda
what does/will the different backend provide

1576018745
pixelherodev
It's an LLVM backend written in Zig

1576018780
daurnimator
andrewrk: `@field(foo, "bar")` => looks like a function call..... isn't

1576018787
stratact
I think what pixelherodev is doing is both cool and practical

1576018788
shakesoda
like, instead of passing llvm ir to llvm, build it yourself?

1576018800
shakesoda
stratact: i just don't have the full context

1576018804
pixelherodev
It parses LLVM IR produced by Zig and produces assembly

1576018814
shakesoda
very nice

1576018820
pixelherodev
The only real goal is parse the IR produced by Zig

1576018835
pixelherodev
If it lacks support for features Zig doesn't use, I'm not concerned

1576018845
pixelherodev
Needs a major cleanup / refactor already though

1576018847
shakesoda
sounds potentially useful for fast builds

1576018850
pixelherodev
It's one file with ~2K lines

1576018872
pixelherodev
And the memory allocations are... well, I didn't bother freeing memory at all because I knew I'd need to rewrite that later anyways :P

1576018878
pixelherodev
I plan on implementing a "buffer pool"

1576018892
Snektron
you're writing a Z80 LLVM backend?

1576018894
shakesoda
ah yes, "make the OS deal with the mess" strategy

1576018902
pixelherodev
Not quite

1576018910
pixelherodev
The "put off dealing with this for a week more" strategy :P

1576018912
pixelherodev
Snektron, nope

1576018914
pixelherodev
Not Z80

1576018919
Snektron
sad

1576018922
pixelherodev
Though I am considering adding that

1576018927
pixelherodev
Very strongly leaning towards it honestly

1576018951
Snektron
isn't it a lot of work to add another LLVM backend?

1576018957
pixelherodev
I'm not adding it to LLVM

1576018964
pixelherodev
Rather, I'm not using the LLVM libraries

1576018978
pixelherodev
It's a Zig library that parses LLVM IR directly and generates assembly

1576018980
Snektron
Ah, so a direct backend

1576018990
Snektron
oh right, i see

1576019000
Snektron
isn't that what an LLVM backend is though

1576019004
pixelherodev
Eh

1576019013
pixelherodev
Basically every LLVM backend is a hot mess of C++

1576019020
stratact
Different API, better independence

1576019021
pixelherodev
Because they all use the standard libLLVM

1576019038
Snektron
i see

1576019077
pixelherodev
Once I get it working, it'll be refactored even further because right now parsing and AST building are one step and that's probably Bad Practice™

1576019108
andrewrk
OTOH I think they designed that format so that you could do that

1576019124
pixelherodev
They did, but then they turned around and created an ecosystem of pain :P

1576019129
pixelherodev
But "working" here means "able to parse itself and generate viable assembly"

1576019140
andrewrk
neat!

1576019152
pixelherodev
Currently, there's a few bugs preventing that - such as the inability to parse identifiers containing spaces

1576019173
pixelherodev
Nothing major, but a bunch of minor bugs and unimplemented features

1576019218
andrewrk
yeah a bunch of breaking language changes landed in master recently, but the good news is that these changes are now in the past instead of the future. there are a very finite number of language changes left

1576019223
pixelherodev
I know this is Bad, but my programming strategy tends to be "make working project with terrible code" → "make code good"

1576019248
pixelherodev
Is the goal that after 0.6 there should no more major changes?

1576019274
stratact
<stratact> pixelherodev: an alternative backend also is equally (if not, more) important.

1576019288
pixelherodev
more important than?

1576019302
stratact
having one competition

1576019309
andrewrk
pixelherodev, I don't think I can promise that yet

1576019317
pixelherodev
That's fine

1576019327
pixelherodev
Was just curious

1576019336
pixelherodev
Honestly, stability before 1.0 is a bit much to ask

1576019552
stratact
I was reflecting on how D lang has multiple compiler backends, but one main backend. It gives more choice for specific optimizations of a project.

1576019828
andrewrk
what pixelherodev is working on is not a zig backend for zig

1576019848
andrewrk
it's for his own project

1576019850
companion_cube
stratact: one main frontend you mean

1576019984
stratact
andrewrk: Ah I see, I thought the backend was general purpose enough for any compiler frontend to use. companion_cube: that too, I mean the dmd backend along with the dmd frontend.

1576020011
pixelherodev
andrewrk, yeah, but it easily could be :)

1576021019
merlyndmg
is there some source file showing how C varargs functions should get imported and used in zig now? Or is that solved yet?

1576021030
merlyndmg
(now that varargs changes have been done to zig)

1576021102
Snektron
Those are a different kind of varargs

1576021105
andrewrk
merlyndmg, nothing changed with regards to C functions

1576021126
andrewrk


1576021161
merlyndmg
so an imported C function should look like `pub extern "c" fn printf(format: [*:0]const u8, ...) c_int;` then, with the ellipsis

1576021174
merlyndmg
:thumbsup:

1576021201
fengb
`Exception: wasi proc exit` 🤔

1576021223
merlyndmg
cool thanks andrew!

