1560302934
M948e5[m]
hi. i have no programming experience but zig looks promising. is it possible for me to start learning zig or should i wait for 1.0, or just learn something else in the meantime?

1560303001
daurnimator
If you have no programming experience then zig might not be the best place to start...

1560303105
scientes
M948e5[m], start with C

1560303201
daurnimator
no.... don't do that either. start with a scripting language so you learn condition, control flow and object abstractions. then move to something like C or Zig where you have to think about memory

1560303285
scientes
oh ok

1560303289
scientes
python or ruby then

1560303298
scientes
or lua

1560303345
daurnimator
yep; those would be fine choices. M948e5[m]^

1560303378
scientes
I just quickly ditched those because I was interested in how computers worked

1560303408
M948e5[m]
lua? i used to fiddle around with that back in my CS:S days

1560303411
scientes
but i guess i still pull out ruby when perfection is not needed

1560303455
scientes
the problem with lua is that is had bad backwards compatibility and the alternate implementation have stuck to lua 5.1, which isn't compatible with lua 5.3

1560303483
scientes
ruby and python (especially) are the mainstream ones

1560303569
daurnimator
scientes: which doesn't really effect learning it....

1560303586
daurnimator
M948e5[m]: do you have a particular task you want to complete?

1560303595
M948e5[m]
allright, should i focus on one of them or try learning both the same time?

1560303596
M948e5[m]
at

1560303607
M948e5[m]
no, but i want to understand computers better

1560303633
daurnimator
how did you find/pick zig?

1560303723
M948e5[m]
i am naturally inclined to find the best and newest approaches to doing stuff, and zig looked the part

1560303766
scientes
zig's biggest influence comes from C

1560303789
daurnimator
zig's biggest influence is the LLVM IR :P

1560303795
scientes
well yeah that is true

1560303904
M948e5[m]
how would you go about learning ruby/python if you were me? can you vouch for any good resources, free or paid?

1560303932
daurnimator
M948e5[m]: maybe "learn python the hard way"

1560303953
scientes
and there is no reason to pay for anything

1560303970
scientes
except a GOOD book, but those are few

1560303993
daurnimator
scientes: ehhhh. i disagree. for entry level stuff paid books are usually better. but medium/advanced you shouldn't be paying for anything

1560303997
scientes
K&R C is a good book, but most good books are for more advanced stuff

1560304001
M948e5[m]
are you taking libraries into the equation there?

1560304031
scientes
TAoCP is a good book

1560304050
M948e5[m]
then again, doubt my local library has anything from the recent millennia

1560304063
scientes
libraries buy really horrible books

1560304085
scientes
although I have seen somewhat recent stuff at libraries

1560304088
scientes
depends which library

1560304196
daurnimator
M948e5[m]:

1560304284
M948e5[m]
i found a pdf of the whole thing. see you in a couple (months)?

1560304368
daurnimator
M948e5[m]: k. just make sure you have the python3 edition not the python2 edition.

1560304513
M948e5[m]
ah, crucial difference

1560304759
M948e5[m]
i found it. thanks guys

1560316053
andrewrk
I'd like to think that zig is a reasonable choice to learn system programming

1560316126
daurnimator
andrewrk: it is.... (well at least it will be once we have more docs). but that user sounds like they want an intro to programming as a whole. They're not going to find many books/tutorials/stack overflow answers for the programming basics in zig.

1560316162
andrewrk
yeah that's a good point. When you're learning programming best to choose a mature language and a compiler with fewer bugs

1560316218
andrewrk
And docs and books and stack overflow answers

1560316809
daurnimator
andrewrk: copy ellision part 1 ready tomorrow? :)

1560319786
andrewrk
daurnimator, I'll try! I don't have any behavioral tests passing yet. I have a stripped down test_runner.zig producing a .o file and now i'm working through the regressions in compiler_rt and zig's libc

1560319829
andrewrk
I need to figure out what to call that, now that it's renamed to std/special/c.zig. "zig's multi-target libc" doesn't quite explain that llvm produces library calls that depend on these functions

1560320200
daurnimator
How is it different to compiler_rt?

1560320450
andrewrk
it's the one that has memcpy, memset, and those other libc functions

1560320468
andrewrk
compiler_rt is unconditionally required as a dependency of any zig object file

1560320490
andrewrk
libc is only needed if not building against a system libc

1560320498
andrewrk
for example in freestanding mode

1560320881
daurnimator
that's... weird? does llvm have special code for emitting libc calls if it detects you're linking libc?

1560320916
andrewrk
it unconditionally emits lib calls

1560320935
andrewrk


1560320958
andrewrk
and optimizations can (and do in practice) turn loops into memcpy intrinsic calls

1560320980
daurnimator
I thought that sort of thing (memcpy)

1560321005
andrewrk
llvm also emits lib calls for certain other stuff which is in compiler_rt

1560321021
andrewrk
basically the reason they're different is that libc is swappable; compiler_rt is non-negotiable

1560333844
very-mediocre
maybe i'm missing something, is there a concise way to unwrap an optional and use it in a boolean expression? i.e. if(optional_idx != null and val < vals[optional_idx]) {...}

1560334046
very-mediocre
unwrapping it prior to using it gets messy if the logic is a bit complex

1560334126
daurnimator
very-mediocre: does this work? if (optional_idx) |i| if (v < vals[i]) { .... }

1560334249
very-mediocre
yes but it gets real ugly when you have a more complex scenario with lots of "else"

1560336481
BitPuffin
andrewrk: how do you feel about having /**/ comments that are allowed to begin and end only on the same line. Sometimes that's useful for commenting out an argument or something like that

1560336496
BitPuffin
I agree that they shouldn't span multiple lines

1560352498
fengb
For the C devs out there, can zig fmt generate a parse error for the && operator? I always stare at it for awhile

1560352519
hg
how do you mean?

1560352625
fengb
zig fmt: "if (foo && bar) return;" => "if (foo & &bar) return;"

1560352672
fengb
I think that's a bug because the actual compiler gives a helpful hint

1560352685
fengb
"error: `&&` is invalid. Note that `and` is boolean AND."

1560353718
hg
mm

1560356580
SamTebbs33
fengb: Would it not generate `if (foo and bar)` instead of being a parse error?

1560356943
alexander92
what do zig people think about implicit impor

1560356957
alexander92
e.g. is it possible to remove quallifcation for all fields of import

1560357250
andrewrk
BitPuffin, probably not going to do that - in order to keep the language small & simple we have to give up a lot of miscellaneous things

1560357796
andrewrk
fengb, yeah can you open an issue?

1560358476
andrewrk
this might be one of the most "serious" zig projects in the wild:

1560358749
fengb
andrewrk: sure, I'll try to take a stab at it later this week too

1560358865
andrewrk
fengb, I think we can make it a parse error with a helpful error. even though `a & &b` produces valid zig AST, it will always be a semantic analysis error

1560358918
fengb
The parser actually throws the error so it's zig fmt that's doing something different. It does "handle" || correctly though

1560358953
fengb
Does zig fmt and stage2 share a parser?

1560358957
andrewrk
yes

1560358979
andrewrk
the source is in std/zig/*

1560359326
andrewrk
here's a good use case for using zig to make a wasm node.js module:

1560359366
andrewrk
this node.js module has to compile .c code when you npm install it. this is problematic on windows and can fail in some weird ways depending on how the c compiler is configured

1560359393
andrewrk
but if this were written in zig and compiled to wasm, the wasm could be uploaded to npm and then it would work everywhere without depending on system c compiler

1560359425
fengb


1560359535
fengb
Oh, || is a real operator; that's why it's working. Would it be okay to add a fake operator just for the parser?

1560359860
andrewrk
I think you can look at how stage1 parser handles it

1560360207
fengb
Ah I see it. Thanks

1560361523
marijnfs
what is a good way to ignore a return value?

1560361527
marijnfs
i just want to pop some values

1560361674
very-mediocre
_ = somethingThatProducesReturnVal();

1560361847
marijnfs
very-mediocre: ah, i was trying that with a const in front, i thought i remembered something like that

1560361943
marijnfs
thanks

1560361965
very-mediocre
:]

1560361991
marijnfs
do you perhaps now how i can get an executable in a fixed place in the build script?

1560362009
very-mediocre
sorry, I don't

1560362045
donpdonp
exe.setOutputDir("."); is what I do

1560362083
donpdonp
which puts app and app.o in the project root. so its a bit messy but its the best ive found.

1560362090
marijnfs
donpdonp: nice, that works

1560362098
marijnfs
yeah i can live with that

1560363235
marijnfs
i need to repeatedly allocate some memory and free it for a function, ideally I would keep it mapped and just grow the memory when needed

1560363238
marijnfs
which allcoator does that?

1560363387
scientes
marijnfs, stack allocation does exactly that

1560363399
scientes
you just have to make sure the stack is big enough

1560363407
mikdusan
heap.ArenaAllocator

1560363440
scientes
arena is good too

1560363466
marijnfs
does the arena allow for freeing indivivual allocs too? or is it more for just allocatign and then freeing it all

1560363476
scientes
freeing it all at once

1560363487
scientes
but the arena could really be generalized into a stack allocator

1560363546
mikdusan
marijnfs: if i'm not mistaken, any individual free's using arena are just no-ops

1560363552
scientes
I've have proposed this, but arena allocator is already so much better than C that no-one is really listening

1560363572
scientes
(which is fine)

1560363604
marijnfs
scientes: how do i put a certain size array on the stack? should i use the {0} ** something syntax?

1560363619
scientes
alloca was removed from zig (and for some good reasons)

1560363642
scientes
I think the correct solution is to have a stack allocator that is as fast as stack allocation, but uses a differn't stack.

1560363674
scientes
but there just isn't enough interest in doing it the super-fast way for that to happen now

1560363695
scientes
as to do it the super-duper-fast way requires quite a bit of tool-chain work

1560363715
scientes
but just generalizing the existing arena allocator into a stack allocator would be a good idea

1560363719
scientes
and could be done quite easily

1560363747
marijnfs
scientes: as in, allowing it to free indivitual elements?

1560363748
scientes
or rather, it probably should be a differn't new allocator

1560363762
scientes
marijnfs, no, only allowing freeing the most recently allocated elements

1560363768
marijnfs
scientes: yeah i see

1560363775
marijnfs
and only grow if needed

1560363796
marijnfs
would it need a popfree or something?

1560363839
scientes
you would use the exiting allocator interface

1560363850
scientes
except it would be UB to free in the wrong order

1560363867
scientes
ehhh, that would be problematic....

1560363882
scientes
no, it could check it because you pass a pointer

1560363883
marijnfs
scientes: you need to keep track of whats allocated, and then check if the free is that last element

1560363887
scientes
so it can error out if you do it wrong

1560363894
marijnfs
but then you need memory for that overhead too

1560363900
scientes
marijnfs, no you only check the current stack pointer and the start stack pointer

1560363923
scientes
and when free is called you have then length, and check if the pointer plus the length is the stack pointer

1560363926
marijnfs
ah the to be freed + len should be same

1560363927
marijnfs
yeah

1560363953
scientes
also you need to keep the shadow stack pointer to avoid unnecessary mmap and munmap calls to DirectAllocator

1560363984
marijnfs
yeah i owuld only unmap when deinit is called

1560364000
scientes
yeah but they are just implementing arena allocator

1560364004
scientes
*then you are

1560364014
marijnfs
just grow if needed, with a double memory style, or just exactly what you need in memory

1560364016
scientes
oh i guess not

1560364017
marijnfs
could be a mode

1560364019
scientes
yeah that would be fine

1560364030
scientes
you could also add a "release memory" function

1560364037
scientes
which could be general for other allocators

1560364056
scientes
that doesn't take any arguments

1560364067
scientes
that calls munmap

1560364076
tyler569
ex:q!

1560364078
marijnfs
yeah would be useful

1560364080
tyler569
ack sorry

1560364087
marijnfs
o vim

1560364088
scientes
tyler569, not vim

1560364095
marijnfs
use emacs

1560364098
tyler569
lost in tmux over here haha

1560364192
scientes
marijnfs, i think you should keep it separate from the arena allocator, and guarantee a continuous stack

1560364198
scientes
*contiguous

1560364560
marijnfs
scientes: yeah for sure, would be dedicated to one thing

1560364588
scientes
well they are quite similar

1560364723
scientes
I think that would be great, and already much faster than C

1560364732
scientes
and later it can be figured out how to make it screaming fast

1560364744
scientes
or rather implemented, because I know how to do it

1560366485
marijnfs
jej, my timsort seems to be working mostly

1560366495
marijnfs
i would like to make this allocator for it to make it faster

1560366773
scientes
submit as two differn't pull requests however

1560366781
scientes
just make the second depend on the first

1560366787
scientes
and make sure you have tests

1560370727
marijnfs
scientes: yeah for sure, for now i'm trying to wrap my head around the allocator pattern

1560370791
scientes
yeah it got simpler recently, but more confusing

1560374243
scientes
wow, debug llvm+clang is REALLY slow

1560374530
Sahnvour
it is indeed

1560374578
scientes
like i think it will be faster to rebuild llvm+clang than try building the llvm test suite with a debug version

1560374642
Sahnvour
are you building llvm with a debug build of llvm/clang ?

1560374653
scientes
no building the llvm test suite

1560374670
scientes
which is in addition to the in-tree test suite

1560374676
Sahnvour
okay

1560375963
marijnfs
i'm having trouble with @fieldParentPtr, somehow i don't get my struct back

1560376153
fengb
Are you passing the allocator pointer? If you pass the struct value, it'll break

1560376228
marijnfs
yeah, something like @fieldParentPtr(StackAllocator, "allocator", &stack_allocator)

1560376311
marijnfs
wait, i do before: var stack_allocator = sa.allocator

1560376335
fengb
Yeah that needs to be var stack_allocator = &sa.allocator

1560376335
marijnfs
wait that makes a copy and changes the pointer?

1560376340
marijnfs
ooew

1560376357
scientes
yeah it needs some more compiler errors

1560376359
fengb
I'd expect that to create a stack variable yeah

1560376371
scientes
but its still better than Linuxś container_of() macro already

1560376371
marijnfs
yeah that is tricky

1560376401
fengb
@fieldParentPtr only works on embedded memory spaces so any copying out of the struct will break

1560376411
fengb
I don't think I'm using the right terminology

1560376445
scientes
you are right

1560376890
fengb
Semi-related: better interface pattern --

1560376996
marijnfs
fengb: yeah i get the issue

1560377029
fengb
Oh I'm just using you as a guinea pig here :P

1560377042
fengb
It's definitely a confusing part atm

1560377082
marijnfs
fengb: but its gonna be hard to catch such errors

1560377127
fengb
The issue has an alternative pattern where we embed the implementation inside of the interface

1560377164
fengb
So instead of requiring a parent pointer, which is assumed, it's a child pointer, which is guaranteed

1560377184
fengb
And it lets you copy the interface struct around

1560377261
marijnfs
so reverse the embedding kind of?

1560377629
fengb
Yeah here's an example:

1560377810
fengb
Hmm... there's an implicit dependency on the implementation's lifecycle. I wonder if it's possible for that allocator to "escape" the stack

1560378001
marijnfs
stack allocator seems to work

1560378311
marijnfs
if i have a var stack_alloc = &std.heap.FixedBufferAllocator.init(stack_buf).allocator;

1560378322
marijnfs
does that stack_alloc get freed after it goes out of scope?

1560378599
fengb
Yes... but stack_alloc is just a pointer

1560378640
fengb
So the deallocation shouldn't really do much. Do you want to delete the actual buffer?

1560378897
marijnfs
nah i defer delete that separately

1560378967
marijnfs
i'll push what i have now in a separate github, then i have to prepare some tests etc. But I need some help with making sense of the allocator

1560378973
marijnfs
if i don't make crazy errors

1560378988
marijnfs
bit the timsort seems about twice as fast for now

1560379029
scientes
marijnfs, did you see this ??

1560379162
marijnfs
nope

1560379176
scientes
not to say you have to imjplement it

1560379179
scientes
but it would be interesting

1560379212
marijnfs
i guess I like timSort becuase its time tested

1560379533
marijnfs
scientes:

1560379574
marijnfs
the default code runs a sort on random values, and compares the speed

1560379685
fengb


1560379692
fengb
Shouldn't assume we want direct allocator

1560379739
fengb
Usually you allow any allocator to be passed in. Otherwise you'd be excluding runtimes like embedded or wasm (which can't use the direct allocator)

1560379764
scientes
wasm can support direct

1560379801
scientes
but yeah don't assume

1560379811
scientes
and needing an allocator is.....a problem

1560379829
marijnfs
fengb: true, it just gets a bit annoying to have to provide allocators to the sort

1560379853
scientes
that is why the current sort was chosen

1560379881
marijnfs
Isn't the directallocator always available?

1560379892
scientes
that is not the zig way

1560379904
scientes
the zig way is to always supply an allocator argument

1560379931
scientes
it is much more flexible

1560379975
fengb
DA requires an OS backing. Bare metal embedded have no equivalent

1560380050
karrick_
Hello. Finished reading all of the Zig document

1560380064
karrick_
So much for my ability to type

1560380118
fengb
How much slower is in-place merge sorting?

1560380201
marijnfs
fengb: all tim implementations say it's not really worth it, but i could have a look

1560380212
scientes
fengb, there is another protocol to investigate

1560380240
marijnfs
but you also need to allocate stuff for the run stack

1560380250
fengb
Alternatively, merge sort should require at most N (N = number of elements) additional memory right? Could we dynamically allocate this on the stack immediately?

1560380292
marijnfs
fengb: yes, but you still need an allocator

1560380294
fengb
Does zig have var-arrays on the stack?

1560380326
marijnfs
no you will kill the stack i think

1560380336
marijnfs
i have done that before

1560380343
fengb
Ah good point

1560380417
fengb
You know... I've never thought about stack much before working with zig

1560380481
scientes
fengb, no, alloca was removed from the language

1560383772
scientes
fengb, distributed sorting....

