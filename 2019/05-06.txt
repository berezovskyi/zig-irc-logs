1557101800
hoppetosse
andrewrk: so close!

1557103232
andrewrk
hoppetosse, lol, I just refreshed

1557103456
hoppetosse
and I think we're golden XD

1557103546
hoppetosse
I want to try out shritesh's dom stuff, maybe get some websockets going

1557103664
hoppetosse
though actually, it would be cool to integrate the desktop code and the web code

1557103672
hoppetosse
I tried to keep changes to a minimum

1557103717
hoppetosse
some of the changes I did make were out of laziness, not necessity so I should be able to change them back

1557107722
daurnimator
hoppetosse: that's awesome!

1557110840
andrewrk
the blue font looks good, but is it intentional?

1557111120
hoppetosse
andrewrk: not intentional, it has something to do with the way I turned the image into a binary blob

1557111127
hoppetosse
screwed up somewhere

1557111132
hoppetosse
didn't mind =)

1557111261
andrewrk
oh yeah baby, score: 4338

1557111335
daurnimator
andrewrk: how did you go with copy elision? :)

1557111480
andrewrk
no progress to report today, instead I cleaned & cooked with my gf

1557113168
daurnimator
aw

1557115203
torque
sounds like a successful sunday to me

1557115295
hoppetosse


1557115307
hoppetosse
I'm trying to generate a square wave at comptime

1557115332
hoppetosse
but that fails with unable to evaluate constant expression: beep[i] = if ((i / 64) % 2 == 1) a else -a;

1557115371
hoppetosse
I've tried a bunch of different indirections, but nothing works

1557116276
daurnimator
hoppetosse: why divide by 64 if you're going to mod it by 2?

1557116298
daurnimator
oh wait. /me dumb

1557116300
dembones
He wants 64 `a` followed by 64 `-a`

1557116307
hoppetosse
var beep = ([]f32 { a }

1557116317
hoppetosse
This is what I got

1557116341
daurnimator
hoppetosse: trying to concat f32 and f16 arrays?

1557116346
hoppetosse
and with that, tetris gets audio

1557116353
hoppetosse
that's a typo

1557116355
hoppetosse
thanks

1557116456
hoppetosse
How would I go about filling an array at comptime?

1557116472
hoppetosse
with a loop, preferably

1557116506
andrewrk
hoppetosse, your comptime block is trying to store to a runtime pointer (the `beep` global variable)

1557116508
dembones
inline for maybe

1557116539
hoppetosse
inline for sounds reasonable, will try

1557116549
andrewrk
nope it's not inline

1557116594
hryx
hoppetosse: so cool that you got this working in the browser!

1557116600
andrewrk
hoppetosse, try doing your variable initialization in the variable initialization expression

1557116608
andrewrk
var beep = {...}

1557116620
andrewrk
you don't even need the `comptime` keyword

1557116652
andrewrk
because global variable initialization expressions are always comptime anyway

1557117059
hoppetosse


1557117065
hoppetosse
thanks for the help!

1557117094
hoppetosse
for some reason I need to make @setEvalBranchQuota(AUDIO_BUFFER_SIZE * 2 + 1);

1557117122
hoppetosse
I'd expect at most (AUDIO_BUFFER_SIZE + 1)

1557117298
hoppetosse
Should I post this up on rededit/hn?

1557117401
hoppetosse
I'm assuming the branch quota issue has to do with

1557117413
hoppetosse
*assumed

1557117426
hoppetosse
since it's closed

1557117502
hryx
thanks for sharing that hoppetosse. I ran into a strikingly similar situation with branch quota for a static audio buffer and never went back to solve it

1557117533
hoppetosse
hryx cheers =)

1557117549
hryx
I'm back from travelling and excited to get back to work. First funny bug (of mine) of the night was another example where an ultra-safe Debug mode would be so amazing

1557117566
hryx
An undefined struct field led to self-referential AST node, which for a while I thought was due to a logical bug:

1557117580
hryx
I assume the undefined 0xAAAA took on a meaningful value?

1557117683
daurnimator
hryx: btw you might be interested in this commit:

1557117873
hryx
daurnimator: is that by any chance related to this fix on my branch?

1557117941
daurnimator
hryx: quite possibly

1557117951
hryx
I'd made some bogus assumptions about arena_allocator then tyler caught it

1557117967
hryx
interesting

1557118397
daurnimator
essentially: an arena allocator can't be copied, it can only be *moved*: if you make a copy of it, the old one shouldn't be used again

1557122236
daurnimator
Anyone made a circular buffer structure yet?

1557122307
daurnimator
emekankurumeh[m]: ^ did you have any more thoughts about the command buffer pattern

1557122348
daurnimator
I just noticed the 5.1 linux kernel was released; finally including io_uring. So now I have a running kernel implementation to code against

1557122356
daurnimator
andrewrk: ^ expect syscalls added to zig soon :)

1557123052
shachaf
whoa, Linux is getting a async I/O interface?

1557123137
emekankurumeh[m]
daurnimator: by circular buffers, do you mean ring buffers?

1557123153
daurnimator
shachaf: yep. and lots more syscalls are expected to be added soon

1557123165
daurnimator
emekankurumeh[m]: yep

1557123222
emekankurumeh[m]
i implemented a ringbuffer a while backed based on this article:

1557123228
emekankurumeh[m]


1557123230
shachaf
I implemented one in C the other day, does that count?

1557123311
emekankurumeh[m]
what i'm excited for is gcc9

1557123336
daurnimator
emekankurumeh[m]: could you send that as a PR to the standard lib?

1557123347
daurnimator
emekankurumeh[m]: ehhhh gcc9 breaks several libs I use

1557123412
emekankurumeh[m]
it adds support for -fuse-ld=lld and lld is several times faster than the default linker that comes with mingw, which hopefully should speed up my 10+ minute link times

1557123712
emekankurumeh[m]
i'll have to clean it up a bit before opening a pull request

1557123844
daurnimator
emekankurumeh[m]: Re: your nextPowerOf2 function, see

1557124759
dembones
~

1557125938
dembones


1557131527
hryx
3,000 stars on GitHub â˜…

1557133801
rivten
Hello everybody ! I hope you are doing ok :) Quick question : I can't seem to be able to do : "const windows_utils = @import("std/os/windows/util.zig");" when I want to use some function in the util file. The compiler seems unable to find the file. What am I doing wrong ?

1557138648
very-mediocre
that would work if you had a copy of the stdlib and the path you were importing was valid

1557138681
very-mediocre
otherwise what you probably want is `const windows = @import("std").os.windows;`

1557138702
very-mediocre
not sure if utils is exposed actually, let's see...

1557138993
very-mediocre
apparently not

1557139056
rivten
nope doesn't really seem like it :( my other solution would be to just copy pase the code I want to use in my file... maybe i'll do that just to go quickly about it

1557139077
very-mediocre
you could keep a copy of the stdlib and import the file directly that way

1557139194
rivten
yes maybe i'll do that. Thanks for the help :) :)

1557145108
DutchGh0st
can I switch on a []const u8 ?

1557145143
DutchGh0st
because, sure, I can write a quazillion `if (mem.eql(u8, ..., ...)) { // whatever}` , but just a simple switch would be nice

1557145258
tgschultz
No, but if it's a comptime known string you might be able to switch on the .ptr value.

1557145325
DutchGh0st
its comptime known, yes

1557145417
DutchGh0st
basically I have checkedInt struct, which takes a hook. The checkInt has a few methods, like opUnary(*self, comptime op: []const u8, rhs: var). Inside there I check what operation is being done

1557145430
DutchGh0st
soo with opUnary, it can only be "++" or "--"

1557145470
DutchGh0st
but with opAssign, it can be "+=", "-=", "*=", "/=", "^=", "<<=", ">>=", what have you

1557145524
DutchGh0st
kek, there's no divWithOverflow. Guess it cant overflow then

1557145528
DutchGh0st
only devide by 0 :3

1557145655
DutchGh0st
huh

1557145657
DutchGh0st
there is @shlWithOverflow

1557145666
DutchGh0st
but not @shrWithOverflow

1557152569
rivten
hello again ! I think I found something pretty weird. In here :

1557152583
rivten
I found this out while debugging while my loading DLL crashed in ReleaseFast ^^

1557152686
rivten
(and I think this example here

1557154046
tgschultz
before I dive in and do it myslef, has anyone implemented a way to interface with COM in zig already?

1557154702
scientes
==30866== Stack overflow in thread #1: can't grow stack to 0x1ffe801000

1557154708
scientes
in zig0

1557154754
scientes
oh nvm i see

1557155847
scientes
I am not sure if the import() semantics are sound given the existance of "use"

1557155877
scientes
because of the possibility of recursive includes

1557156150
scientes
ahh this is #2189 specific

1557157674
akavel
Hi! I tried the following command: `zig.exe build-lib -dynamic -fno-PIC --verbose-cc --verbose-link --c-source hello-jni.c --library c -target arm-linux-musleabi`

1557157690
akavel
but I'm getting an error: `invalid target: unrecognized architecture`

1557157711
akavel
But when I run `zig.exe targets`, there seems to be an `arm-linux-musleabi` entry

1557157718
akavel
Am I doing something wrong?

1557157823
akavel
....eh, ok, found myself:

1557157830
donpdonp
akavel: zig targets lists a few categories of things.

1557157834
tgschultz
akavel you may have to speficy the entire tartet string: -target [name]               <arch><sub>-<os>-<abi> see the targets command

1557157834
akavel
I had to scroll up the window

1557157859
donpdonp
armeb-linux-musleabi is an "available libc"

1557157915
tgschultz
nevermind me, I can't read before lunch

1557157978
donpdonp
hmm the way you have it does make sense. disregard my comment :)

1557157988
donpdonp
all ive used target for is webasm

1557158026
akavel_
I tried -target armv7m-... eventually and something started to be happening, so it's definitely better now

1557158049
donpdonp
speaking of zig and webasm, this is from the frontpage of hackernews.

1557158111
donpdonp
'forked from andrewrk/tetris' ha. thats cheating.

1557158175
akavel_
hm, building the musl seems to be taking some time.

1557158214
akavel_
but there's probably no way to avoid it,

1557158235
akavel_
precompiled binaries for all archs etc. would take so much more space.

1557158261
akavel_
oops, error in inline asm in musl :(

1557158623
TheLemonMan
daurnimator, you were right, the test case in #2354 was too brittle (and I forgot the test suite links against libc)

1557159768
scientes
TheLemonMan, for real craziness, ppc64el supports 64K and 2M pages

1557159839
TheLemonMan
and then one wonders why ppc never took off heh

1557159871
scientes
I wish llvm support for transactional memory was better abstracted for cross-platform

1557159887
scientes
software can't use it until that is done

1557160029
TheLemonMan
meh, I think that's better suited for a library

1557160063
scientes
then zig should do it

1557160222
TheLemonMan
given enough time & manpower heh

1557160256
scientes
thats not a huge project

1557160261
scientes
the bindings

1557160273
scientes
its the implementations of algorithms that is a big project

1557161031
donpdonp
whats the way to go from a slice []c_int (that has two elements in it) to an array of size 2 [2]c_int?

1557161286
donpdonp
i was expecting slice[0..2] to return an array of size 2 (from zig/issues/863)

1557161469
fengb
Hey the new website got some kudos:

1557161488
scientes
donpdonp, there is an issue about that

1557161527
scientes


1557163838
TheLemonMan
yay, the test suite runs fine on x86 too if I disable  x87 and enable SSE

1557166437
donpdonp
im passing a struct into a *c_void param, and back again. When I warn("struct {}", thing.client) => Client@2b3be0  why is the memory address so short? I would have expected something 64bits long

1557166555
donpdonp
for example when I warn("{}", thing) its Thing@7ffc538f7a10

1557166579
donpdonp
both thing and client are of type struct

1557166675
TheLemonMan
show some more code, 2b3be0 suggests it is something off your ELF .rodata/data/bss

1557166677
donpdonp
oh i was mixing up client.* and &client.

1557167410
donpdonp
hmm to reiterate, im casting a struct Client@19ced80 to a *c_void, but getting the same *c_void back gives 0xc_void@aaaaaaaa019ceca0

1557167428
donpdonp
so still some kind of bitwidth error

1557167467
TheLemonMan
see the aaaaaaaa ? that's some undefined memory

1557167494
donpdonp
yeah  i can recognize that now. it still makes me giggle

1557167510
donpdonp
i just dont understand why the address of the struct is short to begin with

1557167550
donpdonp
0x019ceca0 is only 32bits, when i figure on my intel laptop a memory ptr should be 64

1557167604
TheLemonMan
yeah but even with a 64bit address space we still use the lowest 0xffffffff bytes

1557167699
TheLemonMan
7ffc538f7a10 -> suggest it's from a mmap allocation, 2b3be0 -> suggests it's from your ELF image

1557167748
donpdonp
well when I @ptrCast(*myStruct, c_void_ptr), it says the cvoid is alignment 1 and *myStrut is alignment 8, so I'm using @alignCast(@alignOf(myStruct), c_void_ptr)

1557167790
donpdonp
and it all compiles and runs but yeah the first half is 0xaaaaaaaa

1557168457
tgschultz
what are you passing this through?

1557168588
donpdonp
c.epoll

1557168803
donpdonp
i wonder if warn() is simply truncating the display of 0x00000000019ceca0 to 0x019ceca0

1557168998
shachaf
No, it's printing it as "19ced80". Seven nybbles. Not printing leading zeros is not usually called truncating.

1557169187
tgschultz
doesn't explain the undefined bytes though

