1565829545
daurnimator
So notable observation re: linking and static binaries. go recently had a new release which includes security fixes to e.g. net/http. To bring in these fixes we have to rebuild every go package.... which is going to take on the scale of days... and every user of all go packages in the world is going to need to redownload their program. Say "no" to static linking!

1565829704
shachaf
Say "yes" to static linking, and also to being able to deploy bug fixes easily.

1565829784
Tetralux
It taking days sounds like a failure of the go compiler...

1565829798
Tetralux
It should take less than one second to rebuild everything from scratch.

1565829848
fengb
Go compiler is pretty fast

1565829887
daurnimator
Tetralux: huh? compiling e.g. chezmoi takes me about ~8 minutes locally

1565829909
Tetralux
There's no way in hell that compiling anything should take that long.

1565829914
Tetralux
That is a travesty.

1565829919
Tetralux
I can believe it though.

1565829920
daurnimator
I see you haven't met e.g. webkit

1565829930
daurnimator
I think last time I compiled webkit it took ~15 hours

1565829938
Tetralux
Well.

1565829942
Tetralux
****.

1565829963
fengb
Have you tried Rust? It makes C++ look fast :P

1565829984
Tetralux
YUP.

1565829996
daurnimator
but that's all fine

1565830038
daurnimator
the issue is that a bug fix in the standard library or some other core/heavily used library

1565830137
Tetralux
I don't want build caches. I want fast compilation personally.

1565830149
shachaf
Recompiles should be fast and easy. For Go code that's mostly true (for C++ it's not true, but I guess the usual answer is to cache object files or something).

1565830188
daurnimator
shachaf: a good distro always compiles in a clean environment.

1565830201
shachaf
Dynamic linking only "solves" a pretty small fraction of bug fixes. You need to be able to handle the rest anyway.

1565830234
daurnimator
shachaf: the issue is having to "rebuild the world" instead of a specific library/program

1565830235
shachaf
If you're willing to reuse dynamic libraries, you should be willing to reuse object files.

1565830260
daurnimator
shachaf: not at all: you can depend on other packages; you can't depend on temporary build artifacts.

1565830273
shachaf
Other packages can export .a files, though?

1565830318
daurnimator
Yes you can have static library packages.

1565830322
shachaf
If the bug fix requires an API change, or is somehow in the way you're interfacing with a library, changing dynamic libraries won't help you.

1565830365
daurnimator
shachaf: it does though: an API change usually only propagates to "one package up". C depends on B depends on A. if A changes API, B will need a recompile but C won't

1565830391
shachaf
Before you deploy a dynamic library change, you're going to want to test it with your dynamically linked executable anyway. You're not going to just change a globally-installed .so and hope ffor the best (right?).

1565830420
daurnimator
shachaf: of course you do. that's standard practice for decades.

1565830423
Tetralux
If an api changes, you don't necessarily want it just changing under the apps feet.

1565830432
Tetralux
Because the person making the app wants assurance that it works.

1565830446
Tetralux
And to do that, you vendor a particular version.

1565830452
Tetralux
You don't then change it without vetting it works.

1565830456
shachaf
OK, you should specify your deployment environment probably.

1565830464
daurnimator
Tetralux: sorry, I should clarify: I was speaking to the case of an ABI change with same C API (e.g. changing a C function to a macro)

1565830484
shachaf
I generally agree with Tetralux.

1565830487
daurnimator
shachaf: every linux distro I know of

1565830492
daurnimator
and brew...

1565830511
scientes
Ulrich Drepper wrote a great paper about this

1565830520
shachaf
I was thinking of server environments where you prefer to control everything.

1565830533
shachaf
But I think it's not that different elsewhere.

1565830549
daurnimator
shachaf: and those are usually a mainstream linux distro (otherwise you're going to be in a world of security pain)

1565830564
shachaf
If you want your deployment to be reliable, you should be able to test your program in exactly the environment you're deploying too, as much as you can.

1565830581
shachaf
Nowadays people use "containers" which are like a bad version of static linking.

1565830684
daurnimator
shachaf: the companies doing containers right are rebuilding them daily with security updates.

1565830699
fengb
I like containers because it's the least bad way I've seen that lets me specify an environment as code

1565830704
daurnimator
there's a few companies/services out there that they outsource it to

1565830717
shachaf
So instead of rebuilding your container you should rebuild your static binaries.

1565830887
fengb
... implementing a streaming parser is so much simpler with async functions

1565830977
daurnimator
fengb: oh? have you been practicing?

1565831061
fengb
I'm working on protobufs for funsies, and making the encode async would remove the need for an allocator altogether

1565831096
fengb
I could fake it with a "large enough" buffer but that's super brittle

1565831107
daurnimator
fengb: I figure you'd pass an "output" function sort of like std.fmt.

1565831124
daurnimator
fengb: if the output function was async under the hood... then it should "just work"

1565831149
fengb
Well I was gonna return []u8 per chunk but a callback would work too

1565831163
shachaf
A state machine API is generally nicer than a callback API.

1565831196
daurnimator
shachaf: yes. however you can create a state machine API with a callback API now that we have async

1565831207
daurnimator
and callback APIs are generally easier to write + debug

1565831215
fengb
callback might be better actually since you don't need to have extra copies

1565831251
fengb
nvm... it'll be there, just a bit more hidden lol

1565831271
daurnimator
fengb: howso?

1565831318
fengb
I might be typing faster than I’m thinking

1565831355
shachaf
Presumably "async" makes it easy to write either one?

1565831389
daurnimator
shachaf: async makes them isomorphic instead of opposed design philosophies

1565831405
fengb
Yeah, the hard part is saving half written state

1565831460
fengb
Like buffer is only 1kb but the data is bigger

1565831503
fengb
Async should just be suspending in the for loop when the buffer fills up

1565834008
fengb
Been awhile since I've built Zig. Cmake no longer spits out reams of useless info!

1565834239
daurnimator
fengb: yeah zig now uses `zig build` for the final stages of building :)

1565837554
fengb
Is there a way to check whether a frame is complete?

1565837995
daurnimator
no

1565838089
daurnimator
scientes: I thought @intToFloat errored if there was precision loss?

1565851575
andersfr


1565853272
xvilka
cool

1565863276
Tetralux
Is adding the file to std.zig's test block the only thing you have to do in order to run the tests in the file with zig build test-std?

1565872383
scientes
daurnimator, not what the docs say " Converts an integer to the closest floating point representation. "

1565872439
scientes
oh, i need to remove closes: from my patches

1565872445
scientes
cause it creates too much noise on github

1565872450
scientes
one more github bug....

1565872787
scientes
but def. open to different suggestions on intrinsic names

1565877200
fengb


1565877210
fengb
async is amazing when it works. Kinda buggy right now >_>

1565878198
samtebbs
Does Zig insert the panic function even if it's never used?

1565878212
samtebbs
"insert" meaning to emit it into the final binary

1565878275
scientes
samtebbs, i believe so, and i believe there is bug for that

1565878295
scientes
but now that we have a SIGSEGV handler, it would be always included

1565878415
samtebbs
scientes: Oh good

1565878446
samtebbs
I was playing with compiler explorer and noticed that it was include for a simple square function

1565878463
scientes
well that is also because it overrides the panic function

1565878467
scientes
to avoid bloat

1565878467
samtebbs
Now that I think about it, it makes sense for it be in there because of mulitplication overflow

1565878492
samtebbs
release-fast omits it

1565878507
scientes
you can also use math.mulWide

1565880729
FireFox317
andrewrk: are you streaming tonight?

1565882021
scientes
I'm going to create a new library called do_thing()

1565882062
halosghost
seems reasonable

1565882065
scientes
that does something subtly different from do_thing2()

1565882070
halosghost
does zig support unicode in identifiers?

1565882081
halosghost
if so, I highly recommend Do_The_Thing™()

1565882081
scientes
halosghost, no

1565882083
halosghost
aww

1565882096
halosghost
well, let's open a bug report for that

1565882100
fengb
DoThEtHiNg

1565882113
scientes
starship = superman()l

1565882127
fengb
I thought you could do anything inside of @""

1565882131
scientes
I once named a variable in C "true"

1565882139
scientes
fengb, you can

1565882142
fengb
The parser might not handle bare unicode, but the internals should be just fine

1565882185
scientes
do_thing() { do_the_thing();}

1565882193
scientes
5 levels of that

1565882206
halosghost
hehe

1565882317
halosghost
I wish more languages could support kebab-case

1565882380
scientes
do_the_thing() {do-the-thing();}

1565882440
mq32
do^the^thing();

1565882465
scientes
I swear libraries end up like that because the developers are trying to improve their job security

1565889000
andrewrk
FireFox317: yes, doing a stream today

1565889094
andrewrk
fengb: is that code you linked against the rewrite-coroutines branch?

1565889108
fengb
Yep

1565889124
fengb
Found a few bugs but it works really well

1565889131
andrewrk
Ah. Yeah. The circular dependency thing is the next "hard" thing on my list but I have a solution in mind

1565889141
fengb
There’s also an elision bug

1565889152
andrewrk
Do you use cancel? Because I'm about to push a commit removing it

1565889180
andrewrk
What's the elision bug?

1565889225
fengb
Nope

1565889377
fengb


1565889377
andrewrk
Oh I see, you've made a generator

1565889410
fengb
If I just assign this, it creates bad LLVM IR

1565889423
fengb
I’m out at lunch so don’t have the error message

1565889549
andrewrk
i agree that appears to be related to the recent result location semantics rather than async/await

1565889641
andrewrk
Oh. Never mind. Actually that is the problem of needing to "spill" more stuff after resuming from suspend

1565889772
andrewrk
By introducing a separate variable you've worked around the problem by manually spilling the value

1565889785
fengb
Oh

1565890692
nrdmn
andrewrk: is building with BUILD_SHARED_LIBS=ON supported or planned to be supported?

1565890751
andrewrk
where do you see this build option defined?

1565890791
nrdmn
it's defined by gentoo's build framework

1565890809
andrewrk
what is it supposed to do?

1565890844
andrewrk
are you talking about stage1 or zig build system?

1565890907
nrdmn
I'm talking about stage1

1565890923
nrdmn
it's supposed to make cmake build shared libraries

1565891108
nrdmn
I don't know anything about cmake, sorry :/

1565891296
andrewrk
the build artifact of stage1 is zig binary, no installed libraries are produced

1565891562
nrdmn
the gentoo maintainer that I am working with wants me to figure out how to build it with BUILD_SHARED_LIBS=ON instead of overriding the build framework's default

1565891572
nrdmn
I think I've found a solution, let me just check...

1565891615
andrewrk
what is the gentoo maintainer trying to accomplish? if I understand that I can probably suggest a better solution

1565891623
andrewrk
I'm happy to talk with them, are you in #gentoo?

1565891733
nrdmn
just joined

1565891747
nrdmn
but I think my solution works

1565891754
nrdmn
wait, I'll just push it

1565892191
nrdmn
these are the last few lines of make's output when building with BUILD_SHARED_LIBS=ON:

1565892208
nrdmn
apparently this is due to CMakeFiles/embedded_softfloat.dir/deps/SoftFloat-3e/source/8086/s_propagateNaNF32UI.c.o and CMakeFiles/embedded_softfloat.dir/deps/SoftFloat-3e/source/8086/s_propagateNaNF64UI.c.o not being built

1565892227
nrdmn
I have no idea why it fails with BUILD_SHARED_LIBS=ON and not with BUILD_SHARED_LIBS=OFF

1565892238
nrdmn
here's what I changed to make it work:

1565892265
andrewrk
I still don't understand what the goal is here

1565892298
andrewrk
what's the problem with status quo?

1565892357
nrdmn
I have no idea

1565892410
andrewrk
I'm guessing they want zig to dynamically link against softfloat

1565892453
andrewrk
against

1565892509
andrewrk
I would be willing to accept a patch which adds an option ZIG_FORCE_EXTERNAL_SOFTFLOAT

1565892652
nrdmn
doesn't the build breaking when s_propagateNaNF32UI.c.o and s_propagateNaNF64UI.c.o are missing indicate that it tries to link against your softfloat lib?

1565892758
andrewrk
I don't understand your question, but the reason it works as a static lib (and the reason I purposefully don't compile unneeded files) is that with static libs, unused functions are deleted

1565892910
fengb
I wasn't necessarily going towards async functions at first, but I had a hard time iterating through the fields. So I figured why not!

1565893014
mikdusan
i think what's happening is nrdmn build error is caused

1565893031
mikdusan
and it doesn't like the unresolved symbols. whereas .a let's you get away with it.

1565893301
mikdusan
in other words: zig.exe finds everything it needs and any those unref are never used so who cares. making softfloat.so is different, you have to resolve undefs by default. ie: build the missing .c, or using a different .so creation flag to ignore undefs

1565893356
andrewrk
there's no reason for zig to produce a dynamic library from its bundled softfloat. nobody wants that. I guarantee you if the gentoo maintainer wants something other than status quo, they want zig to link against system softfloat .so

1565893408
andrewrk
I personally would prefer if the maintainer would let me bring my own static libs to the table, but I understand the arguments against it

1565893434
mikdusan
i agree. just saying

1565893442
andrewrk
agreed

1565893559
mikdusan
nrdmn: to simplify i think you have 2 options:

1565893579
mikdusan
1. obviously leave it as-is and use bundled static build style

1565893622
mikdusan
2. provide a patch as andrew suggested to support: ZIG_FORCE_EXTERNAL_SOFTFLOAT where it links to whatever kind of softfloat library your project wants.

1565893750
nrdmn
mikdusan: they said nothing about linking against system softfloat. I don't think this is the reasoning behind the BUILD_SHARED_LIBS=ON requirement

1565894009
andrewrk
nrdmn, try this instead:

1565894015
andrewrk
I'd be happy to commit that to master

1565894060
andrewrk
in fact I'm going to do that anyway

1565894111
andrewrk
done

1565894158
nrdmn
uh, okay :D

1565894201
andrewrk
BUILD_SHARED_LIBS environment variable should now correctly do nothing

1565894328
nrdmn
right, building it as a shared library wouldn't have made much sense anyway

1565895724
scientes
ugggh, C has no zero-length arrays

1565896033
andrewrk
look at this monster test case that now passes in the async/await branch:

1565896041
andrewrk
I'll go over this on the stream today

1565902549
andrewrk
starting the stream now

1565906678
Sahnvour
I'm looking for feedback on the approach in

1565908124
fengb
andrewrk: I'm getting errors trying to build on master:

1565908729
andrewrk
fengb, does 0b08ae581edb5811d14d86e7c75c23aca59a3a34 fix it?

1565911908
fengb
That worked thanks

1565911928
fengb
Oh you fixed the frame copy thing too

