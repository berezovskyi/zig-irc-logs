1557619706
via
can zig use a non-linux newlib libc? for example with an arm freestanding target

1557619836
daurnimator
andrewrk: could you help out with

1557619875
daurnimator
via: I don't see why not? can't you just link against it? but I'm not sure why you *would*...

1557619946
via
i suppose yeah i can just link against the .a

1557621616
andrewrk
daurnimator, yes I should be able to look at that tomorrow

1557621705
daurnimator
andrewrk: thanks

1557624200
hryx
anybody want to see a cool trick?

1557624227
hryx
anonymous enum as a parameter type. so the function actually has to be called with an enum literal

1557624274
hryx
it's not necessary, but it avoids declaring an enum type which is only ever used in one place

1557624534
daurnimator
hryx: I do that all the time

1557624543
daurnimator
hryx: much nicer than booleans

1557624588
daurnimator
hryx: infact I left an open PR here adding it to one of my projects!

1557624678
hryx
oh yeah daurnimator, I remember you showing that before. neat!

1557624735
hryx
only 5 more review comments to address, then parser is :rocket:

1557635539
tgschultz
hryx, I actually hadn't thought to do that, that is a good trick

1557635709
tgschultz
related: after struct literals are in, it will actually be unnecessary to have functions take multiple parameters. `fn foo(args: struct{a: usize, b: f32, c: []const u8}) void` => `foo({10, 32.5, "bar"});`

1557636041
hryx
SO wild

1557636402
hryx
tgschultz: I saw on your website that you were designing an OS user space. Super interesting, are you still working on it?

1557636709
tgschultz
I can't honestly say yes because I keep working on other things, but it is never very far from my mind because the current state of OSs bothers me.

1557636750
hryx
understood. well I'm into it

1557636775
tgschultz
I'll let you know if I develp anything in that direction.

1557637489
andrewrk
tgschultz, struct literal syntax as currently proposed is .{.a = 10, .b = 32.5, .c = "bar"}

1557637513
andrewrk
but you could do that with anon list literal syntax with a different fn proto

1557637546
tgschultz
still neat`

1557637557
shachaf
tgschultz: Yes, this is one of the things I've wanted in some language for a while!

1557637595
shachaf
If you have a good struct literal syntax you can just have single-argument functions a struct per function, and have it get the same calling convention as C.

1557637609
shachaf
And you can get keyword arguments and default arguments and things for free.

1557637630
shachaf
I'm not sure that sort of thing fits Zig exactly but I'd like it in some language.

1557637960
hryx
andrewrk: so excited about finishing up this parser I can barely contain myself. In the morning you'll have something that's ready to go (pending new review comments)

1557639586
anarchyrucks_
hi, what is the equivalent of typedef in zig?

1557639697
hryx
anarchyrucks_: types are values like any other value in zig, they just have to be known at compile-time

1557639729
hryx
so as long as you are in a compile time block or top-level const declaration, you can just do a plain ol' assignment: `const T = SomeOtherType`

1557639761
hryx
ah sorry, actually, you don't have to be in a comptime block. You can do it anywhere, as long as the right-hand side type is know at compile time

1557639795
anarchyrucks_
hryx: that makes sense thanks :)

1557639869
anarchyrucks_
hryx: somehow I missed that on the examples on the front page.. now that you told me I can see them now haha

1557640052
hryx
anarchyrucks_: nah, the new front page is FULL of content, it's easy to miss something like that

1557640077
hryx
I read the whole thing and uh, already forgot that was on there

1557642493
anarchyrucks_
I'm using std.os.File to read a file from the disk..

1557642515
anarchyrucks_
I did `var file = File.readOpen(filename);` to read the file

1557642542
anarchyrucks_
but when I try to close the file with defer file.close(), I get does not support field access error

1557642707
hryx
what's the exact error? you most likely need to `try` that function call, or `catch` the error

1557642780
hryx
anarchyrucks_: ah yes if you mean `openRead` here

1557642806
hryx
gotta deal with the error. try using `var file = try File.openRead(filename);`

1557642846
hryx
that way, either it succeeds and `file` refers to a `File`, or it fails and automatically returns an error from your current function

1557642989
hryx
the important thing to remember is: if the function you are calling has a `!` in the return type, that means it might be an error. You must deal with possible errors via `try` or `catch`

1557645295
mikdusan
fyi video of Andrew's "The Road to Zig 1.0" ETE Conference Philadelpha '2019:

1557645493
hryx
mikdusan: awesome, thanks

1557654049
hryx
ok the parser is done

1557656495
shollrollah951
Hi again. I made a mockup of interfaces in zig at

1557656503
shollrollah951
Any thoughts?

1557663221
nrdmn
hello!

1557664440
shollrollah951
hi

1557671160
mikdusan
shollrollah951: i haven't really grok'd your interface mockup except to say are you aware of `@This()` ?

1557671262
shollrollah951
mikdusan: I (kinda) know about it, but because I don't really know how it works yet, I didn't research how it'd fit in the mockup.

1557671325
mikdusan
just thinking `hasNext : fn(<>) bool` is basically `hasNext : fn(self: @This()) bool` unless i missed the boat entirely :)

1557671506
shollrollah951
Thanks. I will have a look at it, and probably replace the <>.

1557671664
shollrollah951
mikdusan: any other thoughts on the mockup?

1557672039
shollrollah951
mikdusan: Updated the gist now. Thanks

1557674976
karrick
So finished reading the 0.4.0 release notes and all the github issues linked the other night. One of the things I like about Zig is the no compromise approach to efficiency. Copy elision semantics for return values sounds obvious in hind sight, and most other languages would just not bother with the additional complexity, but Zig is not resting on its laurels, and continues to make progress towards making the most efficient way to

1557674976
karrick
way.

1557675121
karrick
daurnimator I am about a third the way done with my assigned homework. Coupled with all of the async processing issues I read the other night, this seems like integration will be more than just adapting the platform code for Linux to take advantage of. But I really think the goal of making this the default handling of async IO streams is a great goal.

1557676083
shollrollah951
What intrigues me about zig is how everything you need to build software is included in the language. Less to learn to become productive.

1557676097
shollrollah951
code, build, unit testing: all in zig

1557676131
shollrollah951
compared with e.g kotlin, where code=kotlin, build=gradle, testing=junit, runtime=JVM

1557680514
andrewrk
hryx, merged! I did zig fmt on the standard library to celebrate

1557680563
andrewrk
shollrollah951, the reason for this is to reduce the difficulty of collaborating and code sharing. if you know it's going to be easy to contribute to someone else's zig project you're more likely to do it

1557680804
hryx
huzzah! time to tackle the next task

1557681000
andrewrk
oh I didn't realize the talk was up

1557681152
Sahnvour
can you share the link andrewrk ?

1557681160
andrewrk


1557681168
Sahnvour
thanks

1557681324
Tetralux
o/

1557684987
hryx
andrewrk: next stop, #21. I would really like to get something shipped this release cycle. With the fantastic new hybrid compiler strategy, this should be easier and more fun than before

1557685008
hryx
but heads up that it will likely raise a couple design questions and maybe a proposal or two

1557685024
hryx
I'll try to stay nimble and not get bogged down

1557685577
andrewrk
hryx, sounds great to me! just as another option, in case it is appealing to you, there is the "make translate-c self-hosted" project

1557685601
andrewrk
that one would be more straightforward with less design questions

1557685660
hryx
ah yes. Maybe that would be a good warmup - I'll take a peek

1557686279
andrewrk
hryx, I want you to work on what excites you but if you started on #1964, I would switch over to copy-elision/coroutine rewrite which is long overdue

1557686470
hryx
ok! I appreciate the context. What I'll do is take a couple days to play around with 1964 and see if it & I have chemistry. The nice thing is it's possible to chip away at that one incrementally

1557686500
hryx
I'll let you know how it goes~

1557686530
andrewrk
cool :D

1557686553
andrewrk
of course #21 is a great issue too

1557686587
hryx
next release is gonna be killer either way

1557686597
hryx
people's heads be blowin up

1557686611
jjido
shollrollah951 I like the idea of the comptime function for interfaces

1557686878
shollrollah951
jjido I suppose you mean the idea with using a function to get "generics" for interfaces?

1557687742
jjido
yes

1557687796
jjido
It could also include interface implementation right? Your examples left that outside the function

1557687906
shollrollah951
Good point. I didn't think of that possibility, but that gives you generics for implementations as well. Write once, adapt to different types.

1557693329
shollrollah951
Has anyone looked into using the geany-ide for zig?

1557693420
shollrollah951
I got rudimentary syntax highlighting working in it, and triggering builds from within geany.

1557693492
shollrollah951
The error messages you get are clickable puts the caret on the corresponding place in the code.

1557693503
shollrollah951
and puts *

1557693815
redj
andrewrk: is there a proposal for the safety stuff you mention in the talk?

1557694084
andrewrk
redj,

1557694107
andrewrk
I've been brainstorming different approaches for this but haven't made any proof of concepts yet

1557694140
andrewrk
if 0.5.0 release cycle hits its goals, safety will be the focus of 0.6.0

1557694401
Sahnvour
andrewrk, do you have a strong opinion about the minimum windows version that zig supports (or should)?

1557694431
andrewrk
Sahnvour, I have some opinions. For example I think Windows XP is right out. Not even MS supports that anymore

1557694447
Sahnvour
currently the oldest supported windows is 7

1557694457
Sahnvour
until early 2020

1557694477
andrewrk
I think a good default unless we have some other reasoning, is to match Microsoft's support lifetimes

1557694622
Sahnvour
that makes sense, except that 7, being a successful windows, is still very largely used even though it's near end of life

1557694680
Sahnvour
but it would probably be a good baseline

1557694733
andrewrk
let's make that decision when microsoft actually declares EOL

1557694746
andrewrk
they might change their mind if they see that it is very popular; also if they declare EOL that might affect popularity

1557694942
Sahnvour
I'm asking for #2445 which poses the question of wether zig can assume windows 7 at least

1557695046
andrewrk
I think we should declare support for Windows 7 or later

1557695055
andrewrk
yes you can assume windows 7

1557695061
andrewrk
I'll update the support table

1557695061
Sahnvour
seems good

1557696249
andrewrk
Sahnvour, updated:

1557696297
andrewrk
increasing the minimum supported version and making the followup changes will be one of the things that zig project must continue to do even after 1.0.0 and after the language is "done"

1557697652
Sahnvour
thanks

1557699992
xbat
um, is there somewhere better to read about how the build system works than zig/std/build.zig ?

1557700054
xbat
the manual just has some TODO markers, and i can see how it's used in some examples but they don't always still work

1557700191
xbat
oh! and what was the a!b operator? (referred to in an example but otherwise mysterious)

1557700361
jjido
xbat does it compile?

1557700398
xbat
don't know, sorry; it's just in the list of operator precidences, is all

1557700418
xbat
sorry, should've tried that before bothering you all

1557700815
xbat
no, it doesn't compile, just curious what it used to mean

1557701424
jjido
I think it had to do with errors... don't remember

1557701469
xbat
oh, that would fit

