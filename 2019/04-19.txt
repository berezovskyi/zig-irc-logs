1555637199
fengb_
I'm getting a comptime error with an if expression within a switch

1555637202
fengb_


1555637225
fengb_
Should this syntax be supported? I can work around it with break block but it feels a little kludgy

1555637393
daurnimator
fengb_: I think you need a cast on those comptime ints

1555637443
fengb_
Actually it's something else

1555637592
fengb_
It works if I replace the if condition with (true). Any expression inside bombs

1555637603
tiehuis
fengb_: specify the type of len, such as `const len: usize = ...`

1555637634
tiehuis
or cast the number literal as a usize, e.g. usize(2)

1555637663
fengb_
Still nothing

1555637692
fengb_
The literal is fine. It's the if cond expression it doesn't like

1555637706
tiehuis
it's probably because input is a runtime-known vlaue

1555637721
tiehuis
when you use true the expression is comptime known and the assignment works

1555637728
tiehuis
at least that's what it looks like to me from that snipper

1555637743
daurnimator
yeah same to me: you can't have a comptime value depend on a runtime value

1555637786
fengb_
I get that... but I'm not sure why this is comptime but the for loop in a different branch works just fine

1555637813
tiehuis
can you post the full code segment?

1555637863
fengb_


1555637974
daurnimator
fengb_: does this work? (use the correct type as necessary:) if (self.input[self.curr + 1] == '@') usize(2) else usize(1),

1555638022
fengb_
Oh hey yeah

1555638087
fengb_
So zig sees 2 constants and tries to comptime the conditional away?

1555638105
tiehuis
this issue may be related:

1555638195
daurnimator
fengb_: no. the `2` by itself is a comptime_int. your other branches you e.g. add it to a known int type, so the comptime gets casted away

1555638207
tiehuis
zig will likely analyze the branch as returning a comptime_int, try to compute the value but the branch is runtime-known so it emits an error

1555638229
tiehuis
when you use a cast it analyzes the branch as returning a usize which has a fixed size and works fines

1555638256
fengb_
Ah okay thanks

1555638991
emekankurumeh[m]
does zig support compiling to arm cortex?

1555639324
daurnimator
emekankurumeh[m]: yes?

1555639671
daurnimator
emekankurumeh[m]: run `zig targets` and pick the relevant arm option for your processor.

1555639713
emekankurumeh[m]
would the target name be different from the processor name?

1555640390
daurnimator
emekankurumeh[m]: what is the processor name?

1555640407
daurnimator
emekankurumeh[m]: note that there are hundreds of different arm cortex varieties. all with different features

1555640421
daurnimator
emekankurumeh[m]: also note that arm has had a history of many different abis

1555640439
emekankurumeh[m]
the arm cortex m4

1555640476
daurnimator
and then you have the question of full arm vs thumb vs thumb2...

1555640522
daurnimator
emekankurumeh[m]:

1555640744
emekankurumeh[m]
it comes with an fpu

1555640781
emekankurumeh[m]
its the teensy 3.5 if that helps

1555640999
daurnimator
emekankurumeh[m]: so you have the arm-v7em architecture or thumb-v7em. you probably are freestanding. you probably want to use eabihf (hf = hard float)

1555641062
shritesh
For anyone interested: I got Zig talking to the DOM

1555641176
emekankurumeh[m]
wait that is valid zig?

1555641176
hryx
amazing shritesh

1555641198
shritesh
That page is being generated by Zig (with some JS shim). It uses the @embedFile builtin to embed it's own source code. So technically it's a Zig/WASM quine

1555641242
shritesh
I intend to have the JS shim be autogenerated by the compiler

1555641297
tyler569
and I just booted a Linux kernel with a pure-zig userland!

1555641382
shritesh
tyler569: That's awesome!!!

1555641455
emekankurumeh[m]
ok, now i understand

1555641497
emekankurumeh[m]
the extern functions at the top are referencing symbols from the javascript side

1555641533
hryx
daaaaaang tyler569

1555641583
tyler569
it's not all that impressive, trust me :P, std.debug.warn oneliner basically

1555641589
tyler569
just gotta wrap it up in an initrd

1555641597
tyler569
grub config

1555641597
tyler569
boom

1555641990
fengb_
Hmm, is there a reason why for/else isn't for/catch?

1555642204
mikdusan
the `else` isn't an error and catch implies error

1555642249
shritesh
Next up: Virtual DOM in Zig

1555642554
fengb_
"When the else |x| syntax is present on a while expression, the while condition must have an Error Union Type."

1555642638
fengb_
Oh it mirrors if semantics for error unions

1555644299
hryx
ok, playing around with this failing allocator in the parser test. I understand it a little better now. Very cool way of getting thorough coverage!

1555644342
hryx
This tiny test I added has a maximum fail_index of 3. If I start the fail index counter at a number other than 0 I can test the Nth allocation

1555644361
hryx
allocations 0 and 3 always succeed, but 1 and 2 always fail

1555644392
hryx
(rather, the bytes freed != bytes allocated as andrew pointed earlier)

1555644415
hryx
Just dumping my findings here on the off chance it sparks any ideas. I'll continue sleuthing meantime!

1555644557
hryx
Er, there is no allocation #3. only 0 through 2. So only the first one succeeds, probably because all allocations fail, so nothing can get freed anyway

1555646817
daurnimator
do we have any coverage tools for zig?

1555646822
daurnimator
does gcov work?

1555647910
tiehuis
daurnimator: see

1555647920
tiehuis
haven't tried gcov, but kcov worked well for me a while back

1555648224
hryx
Can anyone tell me which of these is more correct, between f1() and f2()?

1555648236
hryx
Or does it depend on the situation? Or are they equal?

1555662069
TheLemonMan
is there a way to check if a given const is defined or not?

1555662964
very-mediocre
TheLemonMan: since all files are structs, you might be able to use @typeInfo

1555663453
very-mediocre
TheLemonMan:

1555664510
TheLemonMan
I guess so, thanks very-mediocre

1555664539
TheLemonMan
Hello world from a cross-compiled Zig binary running on a rPI model A, so 32bit ARMv6

1555668884
ljmccarthy
how can I create a static `[*]const ?[*]const u8` to pass to execve?

1555668903
ljmccarthy
something like: var argv = [*]const ?[*]const u8{"/bin/ls"};

1555668917
ljmccarthy
but that doesn't work - error: type '[*]const ?[*]const u8' does not support array initialization

1555668980
ljmccarthy
posixExecve seems to solve this problem using dynamic allocation

1555669239
TheLemonMan
const argv = []const []const u8{"/bin/ls"} ?

1555669449
ljmccarthy
you can't pass that to std.os.linux.execve() though

1555669492
ljmccarthy
maybe to simplify it

1555669502
ljmccarthy
how can you get a [*]const u8 from a string literal?

1555669981
ljmccarthy
this seems to work: var arg : [*]const u8 = "hello\x00"[0..].ptr;

1555670089
ljmccarthy
as a function: fn cStringPtr(str: []const u8) [*]const u8 { return str.ptr; }

1555670387
ljmccarthy
ok I figured it out

1555670391
ljmccarthy
it's ugly though

1555670393
ljmccarthy
([]const ?[*]const u8 { cStringPtr("hello\x00"), cStringPtr("world\x00") })[0..].ptr

1555670491
ljmccarthy
or use this to automatically add the nul terminator

1555670492
ljmccarthy
fn cStringLiteral(comptime str: []const u8) [*]const u8 { return (str ++ "\x00")[0..].ptr; }

1555671368
ljmccarthy
ok I wrote some nice comptime utilities to do this

1555671369
ljmccarthy


1555671393
ljmccarthy
not sure if I'm reinventing something zig already has

1555671575
ljmccarthy
also it's not clear if it's valid to return the address of a comptime array I've allocated locally or not

1555676290
Barabas
I'm trying to build zig (master) and it says: /usr/bin/ld: cannot find -ltinfo

1555676338
Barabas
On linux (mxlinux) and when I search for libtinfo in synapic it notes for libtinfo-dev:

1555676342
Barabas
This package contains the static library and symbolic link that developers using the low-level terminfo library will need.  Packages should not build-depend on this package.

1555676361
Barabas
Is it fine to link against or not? I'm confused.

1555676429
Barabas
To be clear. It works when I install libtinfo-dev, so that's fine. I'm just confused. ^^

1555679364
bketelsen
shritesh: holy moly DOM access!

1555679488
shritesh
bketelsen: It's still too verbose. I've been studying how other ecosystems handle interop and I think I have a few good ideas to make Zig the best platform to write WASM for the browser.

1555679509
shritesh
But hey, it works :D

1555679557
bketelsen
i'm 100% here for this, would love to collaborate

1555679607
shritesh
That'd be awesome!

1555679688
bketelsen
what is the "document" in the first part of this line: "extern "document" fn query_selector(selector_ptr: [*]u8, selector_len: usize) usize;

1555679688
bketelsen
"

1555679695
bketelsen
is that a namespace?

1555679707
shritesh
That's a webassembly module name

1555679728
shritesh
By default it's "env" but I love namespaces

1555679734
bketelsen
oh interesting

1555679761
shritesh
Details:

1555679880
bketelsen
we should generate a full dom module from WebIDL

1555679916
shritesh
exactly. I think the compiler should do it alongside the generated WASM file

1555679974
shritesh
alos, those functions could be encapsulated better. But I just wanted to see how it'd work.

1555680015
shritesh
also*

1555680053
bketelsen
yeah it's easy to imagine a dom module that has all of the interop

1555680060
bketelsen
and a vdom module

1555680069
shritesh
That's next on my agenda.

1555680078
bketelsen
next hurdle - functions/events

1555680127
shritesh
Functions are going to be tricky as we don't have closures et. al, but javascript's Function constructor (a better and safer alternative to eval) might make things easier

1555680183
shritesh
Event listeners can be attached at runtime to nodes.

1555680363
shritesh
Alsi, our work is easier because Zig has manual memory management and expects the programmer to dealloc. A lot of complexity in wasm-bindgen stems from having the compiler manually deallocate memory

1555680368
shritesh
'also

1555680447
bketelsen
another question "return error.QuerySelectorError"  <-- I don't see these errors actually defined anywhere

1555680455
bketelsen
is that a zig thing I don't know?

1555680467
shritesh
Zig maintains a global union of all errors

1555680483
shritesh


1555680559
bketelsen
thanks!

1555680599
shritesh
Anytime :)

1555680609
bgiannan
does wasm allow dom interaction now ?

1555680628
bketelsen
not directly

1555680643
bketelsen
the dom binding proposal is in progress, but not complete

1555680663
bgiannan
i see it's directly linked to the GC issue:

1555681018
andrewrk
wow all sorts of exciting stuff going on in this channel

1555681118
shritesh
andrewrk: I won't stop until groovebasin can be written in Zig ;) I have been completely ignoring the browser until then.

1555681373
shritesh
Also, a question: Why does a numeric counter before a while loop need explicit type annotation?

1555681471
shritesh
I think the compiler should figure out `var i = 0; while (i < 10) : (i += 1) {} `

1555682009
andrewrk
there's an issue for that I think

1555682075
TheLemonMan
is there a way to download artifacts off the azure pipeline? I see #2296 is failing on osx but don't have access to that platform

1555682128
andrewrk
not that i'm aware of

1555682180
andrewrk
shritesh, related:

1555682211
andrewrk
I think your example needs a type because how is it supposed to know the upper bound? you could have chosen anything instead of 10 and that's at some unknown future code

1555682232
andrewrk
it works if your code is comptime

1555682254
andrewrk
the other related issue is

1555682285
andrewrk
TheLemonMan, do you  see the error output though?

1555682296
shritesh
Ah. Are these related?

1555682321
andrewrk
TheLemonMan, oh I see, it's error: invalid character: ')' which is unhelpful because you can't see the file contents

1555682343
andrewrk
I'll take a look on my macos laptop when I examine your pull request

1555682373
TheLemonMan
great, thank you

1555682396
andrewrk
shritesh, ah, yeah I haven't merged this because I want to understand why it can't be solved in a more generic way, it's not intended to have to explicitly write code for these types

1555682488
andrewrk
alright I need to have another day where I'm mostly offline

1555682561
andrewrk
next week/weekend is going to be crazy for me, and then I should be back in the swing of things the week after

1555682823
bketelsen
shritesh: it might be simple enough to do an event proxy on the JS side that calls zig functions

1555682874
bketelsen
maybe a proxy on the JS side and a dispatcher on the zig side

1555682962
shritesh
bketelsen: makes sense

1555683317
shritesh
Also, how we separate js / browser is an open question. We need to support nodejs-isms too.

1555683961
fengb_
I would like to port musl to wasm. Would I be biting off more than I can chew?

1555684036
shritesh
fengb_: Have you looked at

1555684082
shritesh
It'd be amazing if we had something native in Zig. It'd help tremendously with the WASI support.

1555684085
fengb_
Oh, I meant doing it inside of zig

1555684114
shritesh
Yes!!!

1555684115
fengb_
Yeah, I've been really annoyed by C tooling. And it seems like it might be easier to make zig work than clang

1555684138
fengb_
But I've never worked at such a low level before

1555684231
fengb_
Per

1555684488
fengb_
Actually wasi looks like a much easier path. I can explore that

1555684794
shritesh
fengb_: There's already some groundwork in std. I'd be happy to help / collaborate.

1555685022
fengb_
I'm just piggybacking off your hard work :D

1555695763
bketelsen


1555695776
bketelsen
had a fun pairing session with shritesh!

1555695803
bketelsen
we built an event proxy in JS and a dispatcher in Zig and wired them up nicely.

1555695937
shritesh
It was fun!

1555695971
bketelsen
zig+wasm has legs.  I think it's going to be a hit

1555696244
shritesh
Next time, we'll be generalizing what we learned today

1555696307
shritesh
...and probably come up with a nice looking library

1555696315
bketelsen
that's what I'm excited about

1555696327
bketelsen
the size of zig's binaries in wasm is a THING. <3

1555696392
shritesh
13K / 5.6K gzipped

1555696407
shritesh
That includes a memory allocator

1555696421
bketelsen
in contrast, I'm used to seeing 7MB gzipped from Go's wasm output.  That's a non-starter.

1555696429
bketelsen
I just have to learn to think in zig now.

1555696475
shritesh
This is before any of the minifiers provided by binaryen

1555696505
bketelsen
true, there's likely some optimization that can be done on the wasm before compression.

1555697572
Sahnvour
andrewrk, sorry I was booked during the past days, please let me know if you have some time in the next few hours

1555701547
keveman
Question on inlining: I have a code snippet here:

1555701578
keveman
There is bar(), where a function marked inlined is called 2 times, and there is baz() where the same function is called 3 times..

1555701603
keveman
all calls are inlined in bar(), but none of the calls are inlined in baz()

1555701768
keveman
From the documentation page: "If the function cannot be inlined, it is a compile-time error.". I am wondering why I don't get a compiler error..

1555702063
tgschultz
keveman, I don't have experience reading llvm output but it looks like neither case is inlined in your gist. However, I can confirm on godbolt that all cases are inlined.

1555702291
keveman
tgschultz, thanks. My bad, I was looking at the disassembly for my backend which is where I noticed that the first cast was inlined, the second was not

1555702307
keveman
you are right, in the llvm IR, both cases are not inlined..

1555702495
keveman
This makes me wonder about the guarantees for `inline` functions.. It seems like it's only a compiler error if the function

1555702543
keveman
If it indeed

1555703070
tgschultz
I have no idea. Could be that the LLVM IR is a pre-inlined representation and the inlining happens later. I don't work on the compiler itself so I'm just guessing.

1555705146
forgot-password
Hey guys, would somebody mind explaning why the setBit function (see

1555705223
forgot-password
I would expect the @intCast to only be relevant at compile time. The shifts, ors and ands are single instructions so it doesn't add up to me

1555705227
forgot-password
Or is it related to runtime safety?

1555706846
tgschultz
@intCast asserts that the cast doesn't cause overflow

1555706869
tgschultz
so it is a no-op in release-fast/small, but in debug/safe it checks

1555707535
forgot-password
tgschultz: Got it, thank you!

1555711473
emekankurumeh[m]
did zig fmt ever have a feature for auto-converting line endings or did i just imagine that?

1555711775
hryx
emekankurumeh[m]: line endings other than LF are illegal at the encoding level, so I think the file would fail to parse before it ever gets to zig fmt

1555711839
hryx
in other words, non-LF line endings are invalid tokens and therefore can't be reformatted

1555712036
hryx
(sorry, re-reading your question closer: not sure if that ability existed previously)

1555712311
shritesh
I may have implemented that feature

1555713160
tgschultz
I thought I saw that feature was implemented recently, but don't take my word for it. It's one of the use cases for zig-fmt

1555713276
hryx
I certainly could be misremembering the conclusion of the original discussion

1555715961
fengb_
Getting this error when trying to process_headers: /deps/zig/libc/process_headers.zig:279:25: error: container 'builtin.Arch' has no member called 'nios2'

