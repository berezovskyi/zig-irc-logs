1560643212
marijnfs
valgrind still complains a lot though, there might be more such issues

1560644071
marijnfs
nvm seems just valgrind freaking out about vulkan

1560648847
marler8997_
I just build LLVM without the -DCMAKE_PREFX_PATH option... I think it's only necessary for clang/zig but not for LLVM.  I'll remove it from the wiki so long as no one has any objections?

1560648866
marler8997_
from this wiki:

1560649130
mikdusan
marler8997_: you probably have llvm-config in your default path. but not all OS (like macOS) have that and need a way to locate LLVM

1560649145
marler8997_
you need to locate llvm when you're building llvm?

1560649258
mikdusan
ah sorry nvm, i see what you mean now

1560649438
andrewrk
marler8997_, please just leave it in - it's simpler to pass the argument for everything that is part of this "local root" path

1560649475
andrewrk
for example sometimes there is another dependency:

1560649481
marler8997_
oh I already removed it.  I removed as it was confusing for me.  I was trying to figure out what libraries LLVM was looking for

1560649487
marler8997_
of course I can un-remove it

1560649493
marler8997_
but it still confuses me

1560649524
marler8997_
oh...so it could depend on zlib?

1560649555
andrewrk
think of it like this: we're creating a directory that is the prefix for everything we're about to build from source

1560649569
marler8997_
k, I'll revert my change

1560649582
andrewrk
you are correct that technically the first dependency doesn't need the parameter

1560652899
marler8997_
found a way to loop through varargs

1560653051
marler8997_
I made a function that given a comptime_int, returns an array of comptime_int where each entry is it's own index

1560653073
marler8997_
then I just do an inline for loop through that "index array" of comptime_int

1560655860
marler8997_
my solution could use some improvement though

1560655885
marler8997_
here's the challenge, can you implemet this function? pub fn allocVarargs(comptime T: type, allocator: *std.mem.Allocator, args: ...) ![]T;

1560655915
marler8997_
I've got a solution but want to see if anyone has a better one

1560656213
marler8997_
the function allocVarargs returns an array of the given variadic args

1560657472
mikdusan
marler8997_: here's my naive solution:

1560657500
marler8997_
shoot that works

1560657614
marler8997_
I couldn't figure out how to loop through a comptime index, thanks for this, it helps alot

1560657663
marler8997_
Here's my final solution:

1560657667
marler8997_


1560657674
marler8997_
thanks again for your help

1560657685
mikdusan
no problemo

1560657691
marler8997_
maybe this is a candidate for inclusion in the standard library?

1560657709
mikdusan
varargs is changing. so i don't know re: std library

1560657730
marler8997_
yeah I figured, I was thinking that in any case this functionality would still be supported though

1560657737
marler8997_
but I don't know for sure since I don't know where it's going

1560657757
marler8997_
but I would think having a function to convert varags to an array would still be supported no matter what

1560657827
marler8997_
I'll make a PR so it can be discussed

1560657992
mikdusan
maybe scan over

1560658026
marler8997_
remove varargs meaning no more varargs?

1560658060
mikdusan
take with grain of salt i might have this understanding wrong but:

1560658135
mikdusan
`allocVarargs([]const u8, arena, "one", "two", "three")`

1560658153
marler8997_
it looks like the current plan is to remove varargs based on what I'm reading

1560658164
mikdusan
would become `allocVarargs([]const u8, arena, .{"one", "two", "three"})`

1560658175
marler8997_
the syntax looks weird though

1560658194
marler8997_
instead of warn("hello {} you are {} years old", name, args)

1560658212
marler8997_
it would be warn("hello {} you are {} years old", .{name, arg})

1560658239
mikdusan
yes that is my understanding

1560658245
marler8997_
but maybe it would look fine with some "getting use to"

1560658276
marler8997_
well thanks for the info, since the plan is to remove varargs I won't push a PR

1560658312
marler8997_
I see one advantage is it allows multiple varargs

1560658314
marler8997_
that's pretty cool

1560658346
marler8997_
at first glance it looks like a nice alternative to tuples

1560658714
marler8997_
I andrew say "No Tuples".  I'm looking for the information on why that decision was made.  I would love to see a place where we could see decisions made in the language and the reasons for them.

1560663288
daurnimator
marler8997_: I'm not sure where it is on the issue tracker. but varargs can't be removed: they're part of the C ABI and hence required for interoperation with C.

1560663516
marler8997_
oh sure, I'm talking about zig's varargs

1560663529
emekankurumeh[m]
is there a way to force zig to output debug gdb-friendly debug info on windows?

1560663579
marler8997_
zig's varargs (currently used with the format function) is more like a tuple

1560663618
marler8997_
I just finished converting my first project to zig.  Fun stuff:

1560666935
gonz_
c, d & zig :D

1560666950
marler8997_
Never finished the C version :)

1560674309
gonz_
I really like D conceptually, but I feel like it's so big. How I ended up looking at zig was actually that I was looking at using D as a better C, but I feel like I found something that fit that much better out of the box.

1560674348
gonz_
Though, to be fair, I have no practical experience with D.

1560692919
tralamazza
any idea why this crashes the compiler?

1560692931
tralamazza
trunk only, 0.4 works

1560693565
marler8997_
gonz_: I've written hundreds of thousands of lines of D code at this point.  It's got some really cool features but also has a fair amount of issues.  I've written my own standard library in D to combat some of those issues

1560693565
marler8997_
had one that's about 3 years old and still going).  The creator Walter is pretty set in his ways, he's very poor at maintaining a positive community and almost impossible to discuss language ideas with.  He knows alot, but seems to only value features in the language that help his style of programming, which is very archaic.  Zig has some really cool ideas that solve alot of the issues D has.  It's currently not as "nice" to read and

1560693566
marler8997_
is missing some features, but the core of the language seems to be going in the right direction, and it's still young enough to make breaking changes and move in a new direction if it's deemed a better one (i.e. varargs vs tuples vs anonymous structs).  I have alot more to say on the subject but I have to go for now.  I was thinking of making a post about my experience porting a couple of my projects from D to Zig and explaining what

1560693571
marler8997_
I think the differences are.

1560697561
gamester
marler8997_: Wow a heavy D user, nice! Many eons ago I was writing an application that needed to load and unload DLLs at runtime. I considered D but it had no ability to handle this simple task, at least without leaking memory. It struck me as a really weird thing to not have figured out for a language that seemed back then to be focused on systems programming. I've never grokked what D is trying to be.

1560697961
gamester
marler8997_: Now that C#/.NET is becoming open source, does that place C# as a competitor to D?

1560700933
scientes
gamester, C# is a virtual machine, while D is compiled to native code. they are totally different

1560700972
gamester
I disagree

1560701123
scientes
If Java a competitor to C++?

1560701167
gamester
D != C++

1560701172
gamester
D is a GC language

1560701178
gamester
with ability to sidestep it

1560701208
scientes
oh yes I forgot about that "better-C" doesn't have a gc however

1560701215
scientes
that was the part I was interested in

1560701635
gamester
There's also .NET Native now which precompiles your code to native code, statically links in the required portions of the .NET framework, and does global analysis on all of this. I don't know if you get an exe or something more like a dll.

1560701645
marijnfs
is there a reason why insertionSort is in an extra block?

1560702431
scientes
i think the other sort uses it

1560702668
marijnfs
I implemented a binarySort and it seems faster

1560703254
andrewrk
gonz_, hey thanks for the support

1560703483
andrewrk
I ran into a snag yesterday in the result location branch. went to bed frustrated but woke up with a solution

1560706276
tralamazza
hi andrewrk, I'm trying my hand at zig for embedded. I'm trying to avoid asm, while doing the startup code I think I stepped into a compiler bug (or at least crash)

1560707950
scientes
here is the backtrace to that

1560708003
scientes
tralamazza, you should probably report a bug so this can be tracked

1560708011
scientes
if the compiler crashes it is ALWAYS a bug

1560708540
tralamazza
I want a struct for my vector table (instead of an array), i thought of using the @typeInfo to do the @export weak at compile

1560708560
tralamazza
basically how i got to the bug

1560708765
scientes
tralamazza,

1560708815
scientes
actually he probably won't want to merge that based on the assert()

1560708859
tralamazza
ty scientes

1560708891
tralamazza
but it seems to be a regression, since 0.4 does not crash

1560708955
andrewrk
tralamazza, fixed in master

1560708963
andrewrk
I mean, I just pushed a commit

1560709175
tralamazza
neat ty

1560724762
tralamazza
I'm trying to set the target in my build.zig, a bit confused how to set the subarch. I want something like exe.setTarget(builtin.Arch.thumb.v7m ...

1560724872
curtisf
What's the best way to format a chain of method calls in Zig? zig fmt puts them all on the same line which is hard to read. I can put a `//` at the end of each line but that's a bit weird

1560728518
gamester
curtisf: you can put a comma after the last argument like so: func(arg,)

1560728964
curtisf
There aren't arguments here, I'm trying a "fluent" style:

1560729138
curtisf
I think I'm more or less happy with how it looks though, since I'm being explicit where I want my breaks

