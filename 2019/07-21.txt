1563667237
mikdusan
scientes: did it dump somewhere around ir_analyze_bin_op_cmp() ?

1563667250
scientes
yeah, but in get_vector_type

1563667254
scientes
inside of LLVM

1563667257
mikdusan
yup ok that's what i have on macOs

1563667265
mikdusan
LLVMABISizeOfType

1563667269
scientes
yep

1563667270
scientes
fixed

1563667425
scientes
oo nice         "comptime vector overflow shows the index",

1563667433
scientes
i need to do that for the safety i added

1563667634
mikdusan
btw on macOS i had to

1563667856
scientes
is there any easy way to run just the compiler error tests?

1563667861
mikdusan
yes

1563667883
mikdusan
`zig build test-compile-errors`

1563667884
scientes
/home/shawn/git/zig-simd/build/lib/zig/std/special/start.zig:134:35: error: root source file has no member called 'main'

1563668063
scientes
got it

1563674944
daurnimator
Is there a way to test on arm64 without a physical device?

1563675100
mikdusan
darithorn: i have never tried this, but looks promising:

1563675119
mikdusan
whups wrong tag

1563675150
mikdusan
daurnimator: i have never tried this maybe worth a look?

1563675577
daurnimator
mikdusan: applied...

1563675585
daurnimator
thanks

1563675645
mikdusan
so like `make -j54` :)

1563675718
daurnimator
mikdusan: I just need to test some things on an arm64 device with lots of address space...

1563675730
mikdusan
ah. > 4GB ?

1563676005
daurnimator
mikdusan: >256TB.

1563676019
mikdusan
ah yes i just saw the issue

1563676482
fubd
ack, keep getting bit by the usingnamespace bugs a la

1563678091
ntgg
i'm getting an issue with `std.SegmentedList`, saying that in std/segmented_list.zig:160:59 it expected type u6, found usize

1563678394
ntgg
also the assertion at std/segmented_list.zig:82 fails

1563678413
ntgg
i'm trying to use std.parse

1563678660
daurnimator
emekankurumeh[m]: something I'm not sure I mentioned. the "command buffer" style of things lets us automatically do things like TCP Fast Open. I just re-came across

1563685439
ntgg
is there a way to convert a f64 into a []const u8?

1563690249
daurnimator
niftynei: std.mem.asBytes ?

1563690261
daurnimator
ntgg ^^

1563691039
daurnimator
:( that feeling when you read C++ after staring at Zig

1563691064
daurnimator
(and worse.... an academic's C++ code)

1563691427
daurnimator
with preprocessor tricks

1563691434
daurnimator
and lots of operator overloading

1563691437
daurnimator
and templates

1563691442
daurnimator
:(

1563691451
daurnimator
`zig translate-c++` when? :P

1563703665
gonz_
I think you laid out the time frame perfectly in the lines preceding that one :D

1563704210
emekankurumeh[m]
fubd: I thought that was fixed in af86614

1563708275
daurnimator
oooooo, I came up with evil

1563708306
Tetralux
Excellent! Please share it with me x)

1563708316
daurnimator
writing now...

1563709255
daurnimator


1563710795
fubd
emekankurumeh[m]: ah, you're right, thanks for the reminder

1563715107
ntgg
I have a function that returns `[]const u8` and in some branches of the switch it returns [_]u8 and in others it returns []u8, how do I get this to work?

1563715117
ntgg
Currently says incompatible types

1563715538
hryx
ntgg: there's an issue for that:

1563715716
hryx
ntgg: see the description for a workaround. you can explicitly slice the array. But note that if you return a slice from your function, be careful that it doesn't point to a stale stack address

1563715881
ntgg
hryx: Thanks, the workaround works for what I am doing

1563715955
scientes
also, I have had plenty of times where the cache just doesn't work

1563715959
scientes
and i have to manually clear it

1563715979
scientes
when the compiler changes

1563716009
scientes
oh nvm

1563716286
hryx
scientes: andrew has mentioned a few times that there are no known bugs with the cache and clearing it is never a solution to recommend. def open an issue if you find problems with the cache

1563716319
scientes
well there is a real one i noticed

1563716325
scientes
which is that zig0 tries and fails to use the cache

1563716331
scientes
because it is written in zig

1563716385
hryx
did an issue get opened?

1563716440
hryx
(mainly my point was we shouldn't recommend clearing cache in any scenario)

1563716464
Tetralux
I had to delete it the other day because it was taking up 127MB...

1563716533
Tetralux
My setup for that is a little non-standard though.

1563716535
hryx
that doesn't seem very big to me

1563716540
hryx
I see

1563716553
Tetralux
It is when you're in Dropbox and only have <100MB left in it :3

1563716569
scientes
just use git

1563716587
hryx
wait.... you're syncing a zig project directory in dropbox?

1563716588
scientes
git is alot more friendly than those type of things

1563716621
Tetralux
It's less of a project, and more of where I keep my Zig programs that I'm fiddling with.

1563716628
Tetralux
Often single files I run.

1563716742
Tetralux
As for git, that feel a little too heavyweight for this.

1563716755
Tetralux
Managing git commits for that seems too much work.

1563716764
Tetralux
Besides which, I don't have private repos.

1563716774
Tetralux
If I did, then maybe I'd consider it.

1563716785
Tetralux
Though, the auto-sync ability of Dropbox would be hard to lose.

1563716800
Tetralux
I like how I can just install it on a newly formatted computer and just have everything there.

1563716830
Tetralux
I just wish there was a Google Drive client that was multiplatform,  supported by Google, stored everything encrypted, and _just worked_, like DB does.

1563716856
Tetralux
Unless there is and I'm not aware of it.

1563716864
Tetralux
Only you have three times the space on that.

1563716874
scientes
that's why I refuse to have two laptops at the same time

1563716876
scientes
its to much work

1563716884
scientes
or a desktop+laptop

1563716923
Tetralux
If Google Drive had a decent client that just worked, I'd probably use it to keep all my projects.

1563716937
Tetralux
Sadly, that's only true on Windows.

1563716941
Tetralux
If even that.

1563716947
Tetralux
I haven't used it in a little while.

1563716959
scientes
just use a USB ssd

1563716962
scientes
simple

1563716962
scientes
easy

1563716970
scientes
much faster

1563716988
Tetralux
The cloud has redundancy that I don't have to think about xD

1563716999
scientes
that's why important stuff goes into git

1563717000
Tetralux
Beside which

1563717017
Tetralux
I can sync across multiple systems simulataenously.

1563717029
Tetralux
Can't do that with a usb without farting with networking stuff.

1563717037
scientes
just ssh

1563717043
scientes
i use sftp all the time

1563717060
Tetralux
There's an auto-sync client that uses sftp?

1563717068
Tetralux
And a server that works on Windows.)

1563717071
gonz_
Tetralux: Why not just pay for Dropbox, then? You get an insane amount of space.

1563717095
gonz_
Or do you pay and still manage to use all of it?

1563717111
Tetralux


1563717131
Tetralux
At some point I might though.

1563717144
Tetralux
But if I can get by without it - /shrug.

1563717170
Tetralux
Besides which, if there's a way to trivially set up sftp on windows and just have it work as well.

1563717176
Tetralux
That's better for me.

1563717186
Tetralux
I could even write a server in Zig ;)

1563717208
Tetralux
My impression is that FTP isn't that complicated.

1563717215
Tetralux
Maybe I'm wrong about though.

1563717217
scientes
sftp is not the same thing

1563717224
Tetralux
I know.

1563717230
Tetralux
There's obv encryption involved and stuff.

1563717245
scientes
I find windows a waste of time in every way

1563717274
Tetralux
I'm only on Windows because I play games at 165 Hz.

1563717284
Tetralux
Linux can't do that without massive input lag yet.

1563717287
Tetralux
I tried it.

1563717296
Tetralux
And it's a pain to actually make it all work reliably.

1563717307
Tetralux
Wine's making progress though.

1563717310
Tetralux
So one day.

1563717323
Tetralux
Not only with input lag

1563717342
Tetralux
But when you fullscreen, it doesn't "activate" the refresh rate.

1563717357
Tetralux
In the same way that Windows doesn't if you're in windowed mode.

1563717363
Tetralux
It's like it's borderless.

1563717382
Tetralux
That won't wash with me.

1563717401
Tetralux
If all the software I ever need to use works flawlessly with Wine.

1563717407
Tetralux
And games run at 165 Hz just fine.

1563717413
Tetralux
Then I may switch.

1563717422
Tetralux
I actually have PopOs dual-booted rn.

1563717431
Tetralux
That's how I tested what I just said xD

1563718104
Sahnvour
Tetralux: for your files on dropbox, can't you juste use zig with --cache-dir set to something else ?

1563718748
Tetralux
I could... but then I'd have to pass that for every invocation of every compilation.

1563718761
Tetralux
And then if I forget even once, I have to rm it. xD

1563718785
Tetralux
I could make a batch script or something.. but no cross platform and just... ugh.

1563718808
gonz_
So a `ZIG_CACHE_DIRECTORY` env var it is, then

1563718838
gonz_
If you rely so heavily on Dropbox I still think buying it is the most convenient solution

1563718876
gonz_
You get 2TB

1563719037
dec05eba
i use linux with a 60hz 4k monitor and 144hz monitor and it's fine, however on windows i get screen tearing that i cant fix in any way

1563719044
Sahnvour
an alias might do the trick

1563719077
dec05eba
never would i have though screen tearing would be an issue on windows but not on linux

1563719096
Tetralux
dec05eba: Likewise... That sounds... odd.

1563721147
Pho75
hi all. I'm trying to build zig compiler from github on ubuntu but build is failing. cmake is defaulting to llvm-8, is that too new? If so how to I get cmake to use llvm-4? thanks

1563721174
Tetralux
You need 8.

1563721253
Pho75
so it's just an upstream bug that's causing this build error?

1563721253
Pho75
/usr/lib/llvm-8/include/llvm/ADT/ArrayRef.h:102:37: error: initializing ‘llvm::ArrayRef<long unsigned int>::Data’ from ‘std::initializer_list<long unsigned int>::begin’ does not extend the lifetime of the underlying array [-Werror=init-list-lifetime]

1563721368
Tetralux
You have clang right?

1563721387
Pho75
yes i do

1563724779
mikdusan
fyi: Pho75 expierienced an error message I have observed with gcc >= 9.1.0

1563725409
scientes
const v: u32 = 5;

1563725410
scientes
const x = @splat(4, v);

1563725419
scientes
who do i have to do to get the type of v populated in stage1?

1563725428
scientes
its null

1563725434
scientes
when it is clearly there

1563725440
mmx870
><daurnimator> Is there a way to test on arm64 without a physical device?

1563725440
mmx870
Qemu?

1563725449
scientes
daurnimator, scaleway

1563725455
scientes
you can get a arm64 VPS for 3eu/mo

1563725488
scientes
just be aware those are 64-bit only

1563725495
scientes
can can't run 32-bit code

1563735635
Poetastrophe
Hello guys I am just getting into Zig and I need to build LLVM from source. I followed the instructions on the Zig wiki, under POSIX:https://github.com/ziglang/zig/wiki/How-to-build-LLVM%2C-libclang%2C-and-liblld-from-sourceWhere I try to compile llvm-8.0.0.srcBut all I am getting is that the cmake cannot find LLVMs headers:$ make installfatal erro

1563735636
Poetastrophe
r: llvm/Demangle/Demangle.h: No such file or directory                                                                                                                                                                             #include "llvm/Demangle/Demangle.h"          ^~~~~~~~~~~~~~~~~~~~~~~~~~compilation terminated.make[2]:

1563735636
Poetastrophe
akeFiles/LLVMDemangle.dir/build.make:63: lib/Demangle/CMakeFiles/LLVMDemangle.dir/ItaniumDemangle.cpp.o] Error 1make[1]:

1563735703
dec05eba
any reason you are building zig from source rather than using the release binary on zig website?

1563735823
Poetastrophe
Mostly if I want to experiment a bit with the Zig source and libraries

1563735946
Poetastrophe
I see the spacing is quite confusing in my original post. Here is a gist:

1563737893
darithorn
Poetastrophe if you mean the standard library the zig compiler uses the source directly, so you can edit it and use the changes immediately

1563740261
andrewrk
Poetastrophe, please double check that you followed the directions, they do work

1563740340
andrewrk
unrelated, I just got this working:

1563740361
scientes
andrewrk, awesome!

1563740425
andrewrk
scientes, I also figured out how async fn pointer calls can work

1563740445
scientes
I made good progress on SIMD today

1563740447
scientes
lots of bugs

1563740468
scientes
and tests

1563740532
hryx
what's new in the async gist? (pardon my ignorance of async zig stuff, I haven't used it yet)

1563740540
hryx
is it the @Frame() part?

1563740552
andrewrk
hryx,  this has all the llvm stuff ripped out

1563740566
scientes
because it was ill-conceived

1563740570
hryx
oh shoot! that's awesome

1563740573
andrewrk
i'll add master branch for comparison

1563740580
scientes
it made the mistake of trying to allocate memory as part of the API

1563740585
hryx
I forgot it was previously relying on LLVM features

1563740603
scientes
having llvm features isn't a bad idea, but they were done wrong

1563740606
scientes
and should be removed

1563740631
Sahnvour
it's also nice in the event of adding another backend

1563740638
andrewrk
well first of all master branch gives "error: async function call from non-async caller requires allocator parameter" for this example

1563740655
andrewrk
I agree with scientes on this one

1563740673
andrewrk
yeah and good point Sahnvour

1563740677
scientes
oh, I also got some pushback on asking llvm to implement the C ABI

1563740687
scientes
the point was that you cant really take the C ABI out of codegen

1563740691
scientes
because it is so tightly integrated

1563740725
scientes
with things like sizeof() and offsetof()

1563740836
andrewrk
hryx, I updated

1563740883
andrewrk
you can tell a difference just by sheer line count differences

1563740897
hryx
I was just admiring that! very nice indeed

1563740914
andrewrk
not to mention the `optnone`... that was sad

1563740948
hryx
did optnone mean "no optimizations for any async function/coroutine"?

1563740975
andrewrk
and this is

1563740978
andrewrk
hryx, yes

1563741008
hryx
great work, I didn't realize there would be such progress on coroutine rewrite already

1563741030
hryx
unrelated: another contributor and I indepdendently worked on the primitive value vs. keyword thing:

1563741035
andrewrk
nice work

1563741036
hryx
theirs is simpler than mine though

1563741110
hryx
also mine doesn't build yet, heh. So I might just concede to their implementation and try tackling a different issue

1563741145
andrewrk
that sounds reasonable

1563741173
hryx
cool - I was thinking of trying anonymous struct literals

1563741183
andrewrk
btw hryx all tests passing in the llvm9 branch - I just did a test run against a debug build of llvm/clang/lld 9. it took 19 hours

1563741187
hryx
but obviously I haven't been able to stop thinking about "multibuild" since your last stream

1563741214
hryx
oh nice!

1563741226
emekankurumeh[m]
nice!

1563741226
Sahnvour
time to get tests in parallel :P

1563741227
andrewrk
anonymous struct literals would be challenging, but rewarding

1563741229
hryx
just enough time to brew a strong cup of coffee

1563741239
andrewrk
I think you could do it hryx

1563741255
andrewrk
that one will require dealing with result location semantics

1563741295
hryx
great! would enum literals be a reasonable place to start looking for inspiration?

1563741296
andrewrk
hryx, I think that solving

1563741308
hryx
ahh yes

1563741320
emekankurumeh[m]
does zig compile all files into a single object?

1563741345
hryx
ok, why don't I take a look at #2749 first then

1563741349
andrewrk
hryx, it's a tricky issue, it will be difficult (but it must be done)

1563741375
andrewrk
emekankurumeh[m], yes, stage1 does that

1563741388
hryx
roger that. I poked at the result location concept in ir.cpp briefly and will most certainly have a few questions along the way

1563741407
andrewrk
zig provides no guarantees about what files go in what objects. self-hosted takes advantage of this to do incremental builds

1563741434
andrewrk
hryx, there will almost certainly be some bugs to fix with regards to result location stuff along the way

1563741437
andrewrk
godspeed

1563741440
emekankurumeh[m]
is parallel compilation a goal for zig?

1563741445
andrewrk
yes emekankurumeh[m]

1563741453
hryx
(**)7

1563741473
andrewrk
for debug builds. for release builds, not necessarily. deterministic builds is a higher priority

1563741493
andrewrk
deterministic/reproducible

1563741517
andrewrk
I don't think stage1 should ever deal with threads

1563741528
andrewrk
just keep it simple and debuggable so we can get to self-hosted

1563741533
scientes
yes

1563741538
Sahnvour
this reminds me we did not make this issue about reproducible builds andrewrk (or I missed it)

1563741539
scientes
but build.zig might use threads

1563741560
andrewrk
yeah once we have better event-based support (async/await) then the child process API can be greatly improved

1563741619
emekankurumeh[m]
oh yeah when I was writing a simple threadpool in zig  I was getting some weird errors from zig

1563741710
scientes
anyone know an editor that can match Makefile endif and else statements?

1563743108
emekankurumeh[m]
is the new `@Frame` stuff going to be generic like `promise`?

1563752446
daurnimator
emekankurumeh[m]: what do you mean by "generic"?

1563752455
daurnimator
andrewrk: also, DESTDIR gets prefixed onto the install prefix

1563752509
daurnimator
--> 'prefix' is where the built files should assume any hard coded paths start from (e.g. /usr vs /usr/local vs /opt/myprog). 'DESTDIR' is where the destination rootfs is mounted.

