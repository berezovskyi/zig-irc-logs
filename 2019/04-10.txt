1554861280
shritesh
Is there any plan on supporting tab completion for the zig command?

1554861428
scientes
shritesh, do it!

1554861464
scientes
shritesh,

1554861836
shritesh
It looks fairly simple to implement. I wonder if supporting dynamic build options will be difficult.

1554863213
hryx
oh snap shritesh that could be a fun project

1554863687
shritesh
I got the main commands and options working but I wish there was better documentation. Also, Bash and Zsh do things differently. ugh

1554863849
shritesh
nvm. found good resources. zsh supports bash completions out of the box.

1554864378
hryx
I use fish and might be able to help out with a fish implementation

1554865535
scientes
andrewrk, are you messing with cloudfront? i am getting

1554865536
scientes
An error occurred during a connection to ziglang.org. Cannot communicate securely with peer: no common encryption algorithm(s). Error code: SSL_ERROR_NO_CYPHER_OVERLAP

1554865768
hryx
I'm not seeing that scientes -- just tried with chromium and curl, everything looks fine to me

1554865771
hryx
what client are you using?

1554865775
scientes
Firefox

1554865840
hryx
I assume Firefox supports all modern cipher suites, so that's weird

1554865868
scientes
exactly

1554865873
scientes
like sepr256

1554865881
scientes
and ed25519

1554865949
hryx
Maybe you're being MITM'd by a server that doesn't support any ciphers :O

1554865950
presiden
firefox 68 here, it's fine in here,

1554865969
hryx
scientes maybe check the IP it's trying to reach

1554865995
scientes
ok it was a fluke, works now

1554866033
scientes
holy moley cloudflare has their own signing key

1554866666
scientes
try and catch have way too low of operator precedence

1554866682
scientes
but i realized if you want them to work with error types instead of just functions......

1554866689
scientes
then you have a layering problem

1554880624
ManDeJan
d

1554881438
ManDeJan
I want to read the first 3 bytes of a []const u8 as a u24, so I tried @bytesToSlice(@IntType(false, 3*8), "test string"[0..3]), but this failes with a compiler error noting: u24 has size 4; remaining bytes: 3. Why is a u24 a 4 byte type?

1554882727
hobomatic
hello. this thing seems to crash the compiler and I am not sure how to proceed troubleshooting it:

1554886316
daurnimator
idea: could `zig translate-c` emit @cInclude() calls when it finds an include?

1554886371
daurnimator
i.e. do a "non-deep" translation?

1554886702
Hejsil
daurnimator, I don't think that will be easy. Zig calls clang to get an AST, and at that point, the pp have inlined all includes into the AST

1554886751
daurnimator
Hejsil: has it though? we still get all the macros defined etc...

1554886800
Hejsil
Clang gives you the definitions, but all macros calls and includes have been expanded in the AST

1554886849
daurnimator
hrm okay :(

1554886862
Hejsil
We basically get the AST for 'clang -E'

1554887222
daurnimator
k

1554887249
daurnimator
uh, using the zig build system, how do I include the normal system include dirs?

1554887276
daurnimator
shouldn't they be there by default?

1554888702
daurnimator
how do I set the output file name of a zig build?

1554888795
hobomatic
its the first argument to Builder.addExecutable; so like b.addExecutable("bin","src/main.zig")

1554888895
hobomatic
supposing you are using a build.zig

1554890038
daurnimator
hobomatic: see

1554890207
daurnimator
what am I doing wrong here: error: expected type '[*c]const u8', found '[3]u8'

1554890212
hobomatic
i figured out how that code crashed the compiler. well the general tact on unixy systems is to generate the actual so as versioned, and make a symlink without the version for use by consumers that don't care

1554890223
hobomatic
ignore first sentence ^

1554890282
daurnimator
hobomatic: yeah that's the usual scheme for creating system libraries. but system libraries aren't the only use for shared objects...

1554890490
hobomatic
true. and maybe zig should support that, but its also trivial to rename the file after its created

1554890528
daurnimator
hobomatic: true. but that seems like a workaround that shouldn't need to happen IMO

1554890547
daurnimator
it probably also breaks some of the build caching?

1554890679
hobomatic
I have no idea. I meant the installed artifact, not the artifact in the cache

1554891078
daurnimator
okay so I got a basic lua library done:

1554891940
hobomatic
daurnimator: you do get system headers automatically with build.zig when you depend on system libraries. And I have no idea how it translates it to a build-exe command line, but you can also control the exact name of the output artifact. I can see std/build.zig actually constructing the filename from the version.

1554891958
hobomatic
build-lib command line^

1554892079
daurnimator
hobomatic: it does that so it knows where you find the artifact afterwards

1554892121
hobomatic
oh, yeah i guess that would make sense

1554892289
hobomatic
strangely, there is a switch that looks at the properties 'self.major_only_filename' and 'self.name_only_filename', which would imply if its only using it to find the filename, then you can omit those when generating the output

1554892312
hobomatic
so I am still convinced its in there somewhere

1554892620
hobomatic
have you tried just omitting the semver flags?

1554892829
hobomatic
yeah i guess you have

1554893827
hobomatic
yeah, that code is for creating the symlinks automatically, which I think is part of the install step for shared libraries

1554895973
tgschultz
ManDeJan: because u24 has alignment 4, arrays care about alignment, and zig defines @sizeOf(T) such that array members are @sizeOf(T) appart. You can read more about that here:

1554896029
ManDeJan
tgschultz: Thank you :), that makes sense

1554896046
tgschultz
I think mem.readInt or one of its variants may work for your case

1554898174
scientes
ManDeJan, because that is its ABI size

1554898198
scientes
ManDeJan, also, you can't do it like that without using Zig's endianness features

1554898245
scientes
actually no, endianness isn't a problem there

1554901602
daurnimator
is there a way to make a call with an array of args?

1554901653
daurnimator
like.... passing on a vararg?

1554901731
daurnimator
or just building up a vararg?

1554902645
daurnimator
different question: how can I switch on a type and include lots of different integer widths

1554902719
daurnimator
like: switch(mytype) { void => x, bool => y, i0..i63 => z, i64..i128 => blah, else => @compileError("NYI") }

1554902750
tgschultz
daurnimator, re: array => arg expansion / varargs pass through isn't possible today, but the removal of varargs in favor of anonymouos struct literals should allow it.

1554902817
daurnimator
tgschultz: essentially I want to build up args for and call an arbitrary function

1554902837
tgschultz
as far as I'm aware there is no way to range a type, you'd have to manually expand it as `i0, i1, i2, i3, i4, i5 => blah,`

1554902863
tgschultz
daurnimator: yeah, cant' be done as far as I know.

1554902994
daurnimator
args = []sometype{}; inline for (@typeInfo(@typeOf(myfunc)).Fn.args) |arg| { args = args ++ switch(arg.arg_type) { i32: args = args ++ i32(x), else => unreachable } }

1554903001
daurnimator
^^ something like that

1554903019
daurnimator
tgschultz: i0..i63 is a lot of expansion to do

1554903172
tgschultz
daurnimator yeah, but a decent text editor should be able to spit it out for you in a minute or two. The alternative is to switch instead on @typeId and the again on T.bit_count.

1554903187
daurnimator
yeah I think I have to do that

1554903295
daurnimator
tgschultz: is T.bit_count still around? not documented aside from in a few builtins

1554903318
daurnimator
seems to be typeinfo.Int.bits instead now

1554903344
tgschultz
it is. I think the plan is to replace it with `meta.bitCount(T)` but it hasn't been removed yet.

1554903371
tgschultz
see: #2117

1554903600
scientes
yeah bit-count doesn't depend on the type

1554903604
scientes
so no need to check the id first

1554905485
scientes
it would be nice if I could bind values to a function before passing it as a function pointer

1554905552
scientes
do closures do that?

1554905602
tgschultz
bit count does depend on the type: `std.debug.warn("{}", usize(void.bit_count));` => `error: type 'void' does not support field access`

1554905620
scientes
void has 0 bit count

1554905630
scientes
thats the way it is represented in the stage1 compiler

1554905646
tgschultz
what bitcount does std.mem.Allocator have?

1554905663
scientes
@sizeOf() * 8

1554905688
scientes
but yeah, that is a bit funky

1554905691
scientes
for composite types

1554905697
tgschultz
that doesn't make sense. @sizeOf(u24) * 8 is 32.

1554905719
tgschultz
I submit that there's no meaningful bitcount for composite types.

1554905775
scientes
but that is a solution---if it is not clear just use @sizeOf() * 8

1554905814
scientes
u0 are also meaningless, but we have them to make corner cases easier

1554905867
tgschultz
u0 isn't meaningless, it means an unsigned integer with only one possible value that uses no memory at all to represent.

1554905916
tgschultz
I can't think of a case where I'd ever use the bit_count of a struct in a meaningful way.

1554905916
scientes
but back to my question. Closures allow binding parameters to functions?

1554905926
scientes
I have actually never used real closures

1554905972
scientes
I'm just doing quite a bit of copy-paste in my stage1 work

1554905983
scientes
but maybe that is the way c is sometimes

1554907229
forgot-password
Anonymous enum literals don't seem to work in arrays, is that intentional?

1554907262
forgot-password
const E = enum { Working, NotWorking };

1554907274
forgot-password
const a: E = .Working; // This Works

1554907290
forgot-password
const b: []E = {.NotWorking}; // This doesn't

1554907444
scientes
forgot-password, looks like a bug, report it

1554907457
scientes
anonymous errors also crash stage1

1554907461
scientes
its a new feature

1554907544
emekankurumeh[m]
anonymous errors are a thing?

1554907548
scientes
not yet

1554907550
forgot-password
scientes: Alright, I'm gonna do that in the evening. Thanks

1554907557
scientes
emekankurumeh[m], but if you try them the compiler crashes

1554907989
daurnimator
error: expected type 'i8', found 'c_longlong'

1554907992
daurnimator
return i8(result);

1554907995
daurnimator
^ what am I doing wrong here?

1554908003
scientes
daurnimator, you need @truncate

1554908018
scientes
or if you know it is small enough @intCast

1554908029
daurnimator
scientes: result

1554908059
scientes
if you want a run-time error, then you need to check for that

1554908069
daurnimator


1554908082
daurnimator
which is what I want

1554908087
scientes
oh, then use @intCast

1554908126
daurnimator
ah great, thanks

1554908147
scientes
but yeah i8() should work IMHO, perhaps file a bug

1554908171
scientes
its clear, and the verbosity of @intCast isn't really necessary

1554908212
scientes
meh, either way

1554908275
daurnimator
scientes: submitted as issue 2234

1554908295
scientes
cause when the docs contradict then andrew should comment on what behavior

1554908378
scientes
but i got use to it the way it is

1554908462
scientes
I get the feeling the way it is is as designed

1554908468
scientes
cause we have @bitCast() and @intCast()

1554908481
scientes
which makes things explicit, and follows the pattern of "easier to read than write"

1554908615
daurnimator
what is @typeOf(void) meant to be?

1554908674
daurnimator
huh.... also this fails: `testing.expectEqual(void, void)`

1554909099
scientes
daurnimator, testing.expectEqual(math.nan, math.nan);

1554909698
daurnimator
So context for my last few questions, I've been working on automatically creating lua bindings for zig functions. Just uploaded progress to

1554909762
daurnimator
Only issue I haven't found a workaround to yet is building up arguments and then doing a call

1554909823
scientes
cool!

1554909945
daurnimator
i.e. line 79 in the gist...

1554909959
hedonist
daurnimator: super cool

1554911447
tgschultz
daurnimator: typeOf(void) should be type.

1554912826
daurnimator
tgschultz: oh right..

1554917993
meheleventyone
hey all, with the new wasm target working from the off with 0.4.0 should I expect a build script setup to build an executable (say through zig init-exe) to work if I use setTarget to specify things correctly

1554918045
andrewrk
meheleventyone, are you asking if you can execute a wasm executable?

1554918080
meheleventyone
nope, in the release notes a wasm blob is created using zig build-exe

1554918100
meheleventyone
I want to setup to build with just zig build

1554918108
meheleventyone
had this working previously

1554918141
meheleventyone


1554918146
meheleventyone
for example

1554918171
shritesh
wasm_link is now unnecessary

1554918175
meheleventyone
yup

1554918198
andrewrk
meheleventyone, when I tried it I used build-exe not build-obj

1554918217
meheleventyone
I've tried both with no success but maybe I did something silly

1554918252
meheleventyone
this is purely the way I built prior to 0.4.0 so was trying to redo the same thing in the brave new world

1554918271
andrewrk
there are some other improvements here if you want some ad hoc code review

1554918283
andrewrk
obj.setTarget(.wasm32, .freestanding, .unknown);

1554918307
andrewrk
addCommand would be addSystemCommand but you should just delete that and rely on zig's wasm linker

1554918349
gamester
I've been trying to get webassembly to work but I see nothing of value in the output file when using wasm2wat to inspect the file. I'll create two "export" functions but the only thing I see is one func named __wasm_call_ctors

1554918351
meheleventyone
thanks

1554918463
meheleventyone
my general thought for a 0.4.0 world would be this?

1554918465
meheleventyone


1554918477
andrewrk
gamester, happy to help if you post more details. what commands are you running

1554918494
andrewrk
meheleventyone, looks fine to me

1554918524
andrewrk
gamester, does the example from

1554918693
andrewrk
alright I'm going to try to solve the windows issue with Marc's big rational PR

1554918704
andrewrk
I have no idea what I'm doing, here goes nothing

1554918705
meheleventyone
cool, so I'm not going mad, it's just that running that build script (tidied up so it actually works) doesn't output anything :(

1554918768
andrewrk
meheleventyone, ahhh, I think you may be experiencing the new build artifact caching:

1554918853
andrewrk
I recommend overriding the output dir or using the install step. zig build is sort of in a transition right now to a new way of doing things

1554918891
meheleventyone
ahhh!

1554918903
meheleventyone
cool will go read and tinker some more, thanks!

1554918933
andrewrk
status quo is problematic from a user experience perspective, will definitely address it this release cycle

1554918946
andrewrk
but we're getting closer to the final result

1554919161
gamester
andrewrk: Only with build-obj, with build-exe I get "lld: error: ./a.o: undefined symbol: print"

1554919268
gamester
wait what. Please don't tell me I've failed to update my zig 3 times in a row. With zig version I get 0.3

1554919302
gamester
i'm a dumbass, I was one directory off. I put into usr/local instead of /usr/local/bin

1554919304
gamester
sorry andrewrk

1554919393
strmpnk
I've done the same thing. I had 0.3 in my path accidentally far too many times. I need to remove my installation of release builds entirely since master builds are almost always a better choice.

1554919569
gamester
I'm hyped for web assembly. For example it can be used for virus-free 3rd party plugins (if we ignore spectre and all that)! No more viruses through PC game modding.

1554919620
hedonist
gamester: what?

1554919631
hedonist
how would wasm help with the virus problem of the web?

1554919646
hedonist
I'm interested in wasm, but I fail to see how it would accomplish that

1554919653
gamester
hedonist: Your game can support webassembly mods and they'll be sandboxed

1554919671
shritesh
WASI is designed for just that

1554920177
daurnimator
andrewrk: is there any proposal around to avoid the repition of "lua.luaL_Reg" here?

1554920193
daurnimator
(lines 135-146 if the link doesn't work)

1554920274
andrewrk
gamester, strmpnk, another goal of this release cycle is `zig update` for people using master branch builds

1554920300
meheleventyone
setOutputDir did the trick, just messing around with trying to get the installArtifact to work as well

1554920346
andrewrk
daurnimator, yes:

1554920385
scientes
will the caching become user-space code?

1554920412
andrewrk
scientes, probably yes with the pattern set by

1554920425
scientes
I was going to add cache rotation

1554920433
scientes
but when i saw it was C++ it didn't seem like fun anymore

1554920445
gamester
ha!

1554920573
daurnimator
andrewrk: great, thanks :)

1554921937
Sahnvour
so, I'm writing a hashmap (and later a set of other containers) in the hope that they become good enough to be cherry-picked by zig's std

1554921971
Sahnvour
am I overlapping with someone else's effort, should I discuss this (goals, API ...) in Zig or wait to have something self-contained ?

1554921984
Sahnvour
and "finished"

1554922043
andrewrk
scientes, I have a suggestion for you

1554922051
andrewrk
I know you like to go real fast, and that's cool

1554922078
andrewrk
I think you should have a fork of zig where you just go as fast as you want to, and then send upstream patches at whatever pace I can handle - but not faster than I can handle them

1554922134
andrewrk
these pull requests where you keep pushing unrelated stuff, it actually takes more time for me to review than to do the work myself

1554922166
scientes
yeah that makes sense

1554922181
scientes
Its also about selling the feature and presenting the patch

1554922194
daurnimator
Do hashmaps work at comptime?

1554922217
andrewrk
daurnimator, I think that's blocking on

1554922236
andrewrk
afaik that's the only issue

1554922278
andrewrk
Sahnvour, in general containers are pretty easy to get into the std lib since they are pretty unobtrusive and represent some nice language testing

1554922281
scientes
I wish there was a way where i could run the tests on my own repository

1554922306
andrewrk
with the understanding that the std lib audit will probably remove a lot of things from std (but zig package manager will be available)

1554922373
Sahnvour
how do you feel about the actual API of hashmap for example, would it require a strong rationale to change it or not ?

1554922392
andrewrk
I think it's pretty negotiable

1554922415
andrewrk
also I think that there is room for a hash map that does not support deleting, it can probably optimize differently

1554922424
andrewrk
for example the self hosted compiler uses a lot of hash maps that don't need delete

1554922449
companion_cube
well for a start you can do robin hood hashing more easily

1554922451
Sahnvour
oh yeah, that's totally the direction where I want to go, good default containers and usecase optimized ones

1554922453
companion_cube
no thumbstones

1554922645
Sahnvour
maybe I should start reworking the hashing part of std, there's a TODO in there

1554923064
andrewrk
Sahnvour, I wonder if we can take advantage of your Windows C ABI fixes to remove this hack:

1554923084
andrewrk
I believe this is related to why tiehuis's BigRational PR is failing on windows

1554923120
andrewrk
I don't fully understand yet

1554923139
Sahnvour
what does this work around ?

1554923187
daurnimator
hrm. do we have the concept of read-only struct fields?

1554923272
andrewrk
Sahnvour, other targets get the above function which has i128 as the result type. I guess on windows it's expected to be the xmm0 register

1554923308
daurnimator
or I should say: read-only from outside; writable only by methods. and I guess the answer is no.

1554923362
Sahnvour
andrewrk yep that's what the doc says

1554923456
andrewrk
Sahnvour, what doc are you looking at?

1554923464
Sahnvour


1554923481
andrewrk
thanks

1554923616
Sahnvour
that should already be handled correctly then

1554923672
andrewrk
Sahnvour, amazing! you already fixed this! all I had to do was remove the hack and tiehuis's PR works on windows

1554923704
Sahnvour
great!

1554925823
gonzus
Hello. I would love to contribute to zig. I sent my first pull request:

1554925845
andrewrk
hi gonzus - congrats on your first PR

1554925845
gonzus
It is rather trivial, but useful nonetheless. However, I realized it doesn't compile on the build machines.

1554925850
gonzus
<3

1554925863
gonzus
Of course, I did compile on my local machine.

1554925872
gonzus
And I do believe the change is worthwhile.

1554925883
andrewrk
unfortunately that feature is not available on all the c++ compilers that zig supports, so we can't use it

1554925891
gonzus
So: are we using different C++ compilers?

1554925921
andrewrk
yes, zig supports bootstrapping with MSVC

1554925932
gonzus
MSVC! OMG...

1554925945
gonzus
And I see it failed on other platforms too...

1554925965
gonzus
:-(

1554926007
andrewrk
improving the stage1 compiler in this way is a bit of wasted effort - eventually what we will be shipping will be a self hosted compiler. so for stage1 we are more interested in reliable easy-to-understand code that works on a variety of c++ compilers and versions

1554926023
gonzus
Question: it failed on Mac, where I know for a fact the patch works (with my version of the compiler). Would we consider upgrading the compiler version on some / all platforms?

1554926035
gonzus
Ah. I see.

1554926038
hedonist
ugh

1554926049
tgschultz
There are quite a few "contributor friendly" entries in the issues too if you're looking to get started contributing.

1554926051
hedonist
it's so frustrating that MSVC won't just get over itself and properly implement C

1554926068
andrewrk
it's a tough sell to want to drop compiler support in stage1. bootstrapping is improved with wider c++ compiler support range

1554926081
andrewrk
however in userland, you can use bleeding-edge zig features :)

1554926089
gonzus
Yeah, I see your point. And it makes sense.

1554926096
Flaminator
Well MSVC is a C++ compiler and not a c compiler.

1554926103
gonzus
You want the widest possible audience to bootstrap.

1554926112
hedonist
Flaminator: I'm aware

1554926128
hedonist
Flaminator: another reason they should go away

1554926147
gonzus
tgschultz: will look into those entries

1554926154
andrewrk
zig will soon be a competitor to MSVC

1554926165
andrewrk
since it ships with a c and c++ compiler and build system

1554926186
andrewrk
and it takes 10 seconds to install rather than 10 hours

1554926196
hedonist
andrewrk: I would happily take zig over VS if I had the option at work

1554926228
Sahnvour
don't be too harsh on MSVC/VS, they are really improving a lot

1554926247
andrewrk
it's true, they recently did a big improvement to linking, inspired from LLD

1554926250
hedonist
Sahnvour: call me radical, but I'm not willing to do anything but be harsh with regards to microsoft

1554926254
Sahnvour
well, actually on VS the IDE, you can ... /s

1554926276
andrewrk
hedonist, well you're in the wrong channel then because here in #zig Windows is a Tier 1 Supported platform

1554926300
hedonist
andrewrk: I'm happy to leave that politics alone, and I don't mind that Zig supports Windows as Tier 1

1554926342
hedonist
as long as I don't need to use windows to use zig, I'll be happy :)

1554926349
andrewrk
sounds like everyone can be happy :)

1554926352
hedonist
haha

1554926371
Sahnvour
there's a ton of reasons to not like microsoft and I agree, however I see their compiler being trashed to much for sometimes no reason

1554926371
hedonist
andrewrk: am I right in reading that you're a generally cheerful person? :)

1554926451
hedonist
from the talks I've seen you give, and the comments I've seen you post, you strike me as a generally kind and loving person

1554926460
hedonist
which is rather amazing and wonderful

1554926499
Flaminator
Does Zig currently or possibly in the future support fixing variables/structs to memory locations? It gets used a lot in the embedded world.

1554926513
andrewrk
Flaminator, isn't that the same thing as global variables?

1554926528
hedonist
andrewrk: are global variables not subject to ASLR?

1554926543
hedonist
(or did I misread what Flaminator was asking?)

1554926574
hedonist
Flaminator: tangential aside: are you someone that flames things, or someone that laminates F?

1554926615
andrewrk
if I remember correctly ASLR is done by the operating system not userland. so in an embedded context, if ASLR was happening it would be intentional

1554926692
hedonist
andrewrk: afaik, it's definitely kernel-bound. But, I read Flaminator's question as being something like “is there a way to guarantee a physical memory address for a particular variable supported first-class by Zig?”

1554926699
hedonist
that could, very well, be my misinterpretation

1554926836
Flaminator
Yes that is what I meant, on the chips we program (pic16,pic18) A lot of things are predefined to be in a certain memory location.

1554926972
andrewrk
oh I see. use @intToPtr

1554927001
andrewrk
packed structs and extern structs will probably also come in handy

1554928287
tgschultz
so this is odd... a test I had was failing (for perfectly legitimate reasons), but reports 2 sources for the error.

1554928341
andrewrk
tgschultz, I think there has been a regression with error return traces, and also there is

1554928392
tgschultz
yeah that seems related.

1554928974
daurnimator
hrm. trying to use HashMap

1554929011
daurnimator
am I correct in thinking that .get() only reads the key; while .put() takes ownership/assumes lifetime?

1554929041
daurnimator
for non-trivial keys, that makes .getOrPut very dangerous.

1554929754
Sahnvour
daurnimator what do you mean takes ownership ?

1554929892
andrewrk
Sahnvour, I think I spoke too soon about compiler_rt.setXmm0. it seems the libcalls that llvm emits do not respect the windows x64 ABI

1554930037
Sahnvour
andrewrk libcalls meaning llvm-inserted call to eg. `__muloti4` ?

1554930044
daurnimator
Sahnvour: meaning that .internalPut takes a copy of the key; if the key is just a pointer/slice, then you have a footgun

1554930048
andrewrk
yes

1554930091
andrewrk
without the setXmm0 hack, when I call @divTrunc on windows I incorrectly get 0 for one test case, but when calling __divti3 directly it works fine

1554930116
Sahnvour
aww

1554930268
Sahnvour
daurnimator what would you expect instead ? that's the deal with POD right ?

1554930476
andrewrk
Sahnvour, for -target x86-64_windows we emit: define i128 @__divti3(i128, i128)

1554930505
andrewrk
wouldn't we expect to emit instead: define void @__divti3(i128* sret, i128, i128)

1554930537
andrewrk
because "16-byte arguments are passed by reference" and "Any argument that doesn’t fit in 8 bytes, or isn't 1, 2, 4, or 8 bytes, must be passed by reference"

1554930576
Sahnvour
this only tackles arguments

1554930582
andrewrk
ahh

1554930590
Sahnvour
later it says

1554930590
Sahnvour
Non-scalar types including floats, doubles, and vector types such as __m128, __m128i, __m128d are returned in XMM0.

1554930595
Sahnvour
for return values

1554930885
daurnimator
Sahnvour: huh?

1554930981
Sahnvour
if you use a key containing a pointer/slice, you have to copy it into the map, I don't understand what's bothering you

1554931040
daurnimator
Sahnvour: I'm using a HashMap with string keys. the key type is `[]const u8`.

1554931065
daurnimator
Sahnvour: when it copies into the map. it only copies the slice's pointer+len doesn't it?; not the contents?

1554931086
Sahnvour
yes only the slice, that's value semantics

1554931178
daurnimator
Sahnvour: meaning that if you're going to be putting something into a hashmap, you should be making a copy of the key

1554931204
andrewrk
Sahnvour, for `export fn foo() i128 { return 0x1234; }` with `-target x86_64-windows` we would expect it to set %xmm0 to 0x1234, yes?

1554931230
Sahnvour
andrewrk I think so

1554931262
Sahnvour
provided this gets casted correctly

1554931264
andrewrk
we emit this as `define i128 @foo()` and then llvm has it put the value in %eax regardless of the target

1554931276
andrewrk
that seems problematic

1554931304
Sahnvour
hm

1554931316
andrewrk
I don't even know how to specify different behavior to llvm

1554931346
andrewrk
langref says "The C calling convention This calling convention (the default if no other calling convention is specified) matches the target C calling conventions. This calling convention supports varargs function calls and tolerates some mismatch in the declared prototype and implemented declaration of the function (as does normal C)"

1554931355
andrewrk
seems like a bug in llvm...

1554931489
Sahnvour
is it usually useful to compare to what clang emits for equivalent C code ?

1554931510
andrewrk
yes

1554931519
andrewrk
good point. that's how the C ABI tests work

1554931541
andrewrk
the c equivalent of i128 is __int128

1554931617
andrewrk
woah, it emits it as define { i64, i64 } @foo()

1554931651
andrewrk
oops, that's for -target x86_64-linux though

1554931659
Sahnvour
do you recall how to put it in cl driver mode ?

1554931685
andrewrk
I'm using `clang -nostdlib -S  -emit-llvm test.c -target x86_64-windows`

1554931750
andrewrk
this also does `movl$4660, %eax` same as in zig. hmm

1554931752
Sahnvour
not usable on godbolt anyway :(

1554931880
Sahnvour
andrewrk what does the IR say ?

1554931915
andrewrk
clang gives `define i128 @foo()` for `__int128 foo(void)` with -target x86_64-windows

1554931936
andrewrk
but then when calling __divti3, it expects the return value to be in %xmm0

1554931975
andrewrk
I wonder if this is a clue: typedef int      ti_int

1554932024
daurnimator
I'm getting errors trying to debug print arbitrary objects. expected?

1554932211
emekankurumeh[m]
i think that's a regression but i'm not sure

1554932253
Sahnvour
daurnimator the key is the slice, and you are making a copy of it (inside the map). and you probably have to keep a copy of it outside the map to access/remove it if you want to. either way, the actual string does not get copied

1554932292
Sahnvour
I think I'm missing something about your concern

1554932309
emekankurumeh[m]
is this supposed to work?

1554932403
daurnimator
Sahnvour: the string is coming e.g. from the network

1554932413
daurnimator
or user input

1554932420
daurnimator
hang on I'll post the whole file...

1554932525
andrewrk
Sahnvour, aha, here's a clue: export fn foo() @Vector(2, u64) { return @bitCast(@Vector(2, u64), i128(0x1234)); }

1554932557
andrewrk
this gives: movl $4660, %eax  \n  movq %rax, %xmm0

1554932566
shritesh
I'm building for WASM and it is expecting the env to provide the `memcpy` implementation. Can I provide something simple by myself?

1554932594
andrewrk
shritesh, memcpy + other builtins that LLVM will emit libcalls for are provided by zig

1554932628
andrewrk
if you look at link.cpp at the elf code for example you can see that zig builds compiler-rt and builtin and adds them to the link line

1554932641
andrewrk
this should be done for wasm as well

1554932669
andrewrk
"builtin" is basically a freestanding libc

1554932834
daurnimator
Sahnvour:

1554932855
daurnimator
andrewrk: ^ note start of http header module :)

1554932876
andrewrk
nice

1554932961
andrewrk
putting headers in a hash map huh? that's a pretty high level abstraction

1554932986
andrewrk
I hope that's built on a lower level one, and has a reasonable default maximum number of header bytes

1554933028
daurnimator
andrewrk: huh? maximum number of header bytes is a higher level abstraction...

1554933057
daurnimator
andrewrk: note that in http 1 vs 2 vs quic, the header wire format is very different.

1554933067
andrewrk
HTTP headers in a hash table with no maximum bytes is an invalid abstraction

1554933092
shritesh
andrewrk: gotcha. It's not being generated in my case. I'll try to come up with a small example.

1554933096
andrewrk
http clients are adversaries

1554933099
daurnimator
andrewrk: all of that is a higher level concern of the developing filling up the headers object

1554933130
andrewrk
shritesh, looks like that functionality is missing from the wasm linker code. you can see the elf linker code for how to do it

1554933132
daurnimator
andrewrk: this same structure is used by e.g. http clients. you e.g. build up a request headers object and serialise it to the wire.

1554933140
shritesh
Ah!

1554933195
andrewrk
daurnimator, I see

1554933435
Sahnvour
daurnimator IIUC, the hashmap will never take ownership of your strings, if you're affraid they will cease to be valid before the map, then yes you'd have to copy their content first and use that

1554933472
Sahnvour
andrewrk good luck with that, sorry I can't help you much on this topic

1554933483
daurnimator
andrewrk: a server ends up doing something like: const h = Headers.init(&Request.allocator); ...... while (true) { if (h.count() > self.max_header_lines) return error.TooManyHeaders; const headerline = try http1_stream.readHeaderLine(max_timeout); ....... h.append(headerline.name, headerline.value, null); }

1554933524
daurnimator
andrewrk: see

1554933686
shritesh
andrewrk: That solved it.

1554933789
andrewrk
daurnimator, I'm looking forward to checking this out

1554933807
andrewrk
sorry got ahead of myself there getting excited about security

1554933938
daurnimator
andrewrk: I created 2246 and 2247 as simple but useful issues for a new developer to tackle

1554934002
daurnimator
andrewrk: could you add the contribute friendly tag?

1554934094
shritesh
I got Zig (and WASM) working on Fastly's Terrarium platform:

1554934123
shritesh
The number at the end increases after every request

1554934420
shritesh
Also the link expires in less than 15 minutes if anyone is wondering lol

1554934599
emekankurumeh[m]


1554934666
emekankurumeh[m]
shritesh: how did you get zig on there?

1554934724
shritesh
By uploading the compiled wasm

1554934772
shritesh
They later generate machine code from the wasm server side

1554935272
shritesh
Here's the gist:

1554939614
shritesh
andrewrk: If you review and merge #2238, zig may get a documentation generation sooner ;)

1554939694
hryx
shritesh: are you working on doc generation (#21)? I have some progress on that too so we should coordinate

1554939742
shritesh
hryx: Yes. I feel like we can get a MVP out of the door quickly based on the work that has been done on `zig fmt`.

1554939777
hryx
excellent shritesh -- I'm still at work but would love to chat later if you are available

1554939789
shritesh
Sure. hryx

1554939865
andrewrk
hryx, shritesh - for documentation generation, I was thinking we take advantage of the path forged by

1554939888
andrewrk
I can advance that issue enough to be usable for other stuff besides translate-c in the next week

1554939897
andrewrk
it would be relevant for mikdusan's .d file parsing too

1554939922
hryx
yeah andrewrk last time we talked about it (waaaay back in like October) you mentioned using an intermediate representation

1554939930
hryx
generated from stage1 and then actually rendered in stage2

1554939948
shritesh
I was thinking of using the AST from zig fmt and generating an input file for docgen with function headers and doc comments

1554939985
andrewrk
I think types are pretty useful to have resolved, especially error sets

1554940011
andrewrk
half the fun of the generated docs will be seeing all the ways functions can fail

1554940033
shritesh
For sure. I just needed an easy way to explore stdlib

1554940072
hryx
I have a proposal for the doc gen which I haven't pushed yet, but if shritesh is down to collaborate I will prioritize it

1554940081
hryx
at least to get the ball finally rolling

