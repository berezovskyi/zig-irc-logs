1555463225
tgschultz
keveman: see issue #1291. Unfortunately this is not possible at this time.

1555464724
keveman
tgschultz: thanks.. I guess I was asking for getNextGloballyIncrementingInteger

1555464774
tgschultz
I'm not sure where we are on that. I think andrew is still mulling over if its a good idea or not, but it has come up a few times.

1555464945
keveman
I didn't quite follow the point about opaquetype on that issue, though

1555465665
tgschultz
oh, so the problem is that the evaluation of a comptime function with a set of parameters will be cached, and so the next time it is called with those same parameters the cached result will be used. so const  `x = comptimeAlloc([40]u8)` and `const y = comtpimeAlloc([40]u8)` would point to the same memory. So we need a way to keep the function result from being cached, hence a unique parameter. What Hejsil is saying is that

1555465665
tgschultz
@OpaqueType() provides a new unique type every time it is called, so `comptimeAlloc([40]u8, @OpaqueType())` would be effective in ensuring that the cached result isn't reused.

1555465778
tgschultz
That probably doesn't have any relevance to your usecase if you actually need a counter though.

1555466087
keveman
Got it, thanks for the explanation

1555467652
tgschultz
well andrewrk, you can officially drop that mic

1555467774
scientes
how far is comptime going to go? what about being able to call the LLVM bindings at comptime?

1555472194
m3t4synt4ct1c
what would the idiomatically zig way of @embedFile'ing a CSV that has two columns, a string and a u16 and converting that into a const HashMap at compiletime == is that possible?

1555481438
hryx
I'm having trouble with an error: "runtime cast to union 'blah' which has non-void fields"

1555481441
hryx


1555481459
hryx
Anyone know a way around this?

1555482330
ManDeJan
andrewrk, Nice work on on this PR!

1555482361
ManDeJan
Sahnvour, Thanks for the PR on my zig-wyhash implementation :), very appreciated

1555485838
hryx
I found a workaround for my last question, but it feels hacky so I might post an issue

1555487674
hryx
Scratch that, this one answers my question:

1555505937
forgot-password
Is it possible to set an optional as not null without also setting its data?

1555506041
very-mediocre
I think what you want is `= undefined`

1555506056
ManDeJan
Technically you could set it to undefined

1555506083
ManDeJan
But there is no way to tell if a value is undefined

1555506141
very-mediocre
indeed you're probably better off setting it as null

1555506361
forgot-password
very-mediocre: That's exactly opposite of what I'm trying to do :P

1555506373
forgot-password
ManDeJan: That's what I tried, but it still says that I'm trying to unwrap null

1555506461
very-mediocre
Could you give an example of what you're trying to do?

1555506567
very-mediocre
why don't you want the optional to be null?

1555507151
forgot-password
Sure, give me a minute to prepare an example :)

1555507208
forgot-password
Do you know a good paste website which supports zig syntax?

1555507280
very-mediocre
gist.github.com

1555507351
forgot-password
I need to be logged in for that, don't I?

1555507377
very-mediocre
yes, but it's the only one i know of with zig syntax support

1555507486
very-mediocre
actually you could misuse

1555507492
ManDeJan


1555507766
forgot-password
Here's a link

1555507857
forgot-password
I missed a .* where I set the instance to undefined, but that's just a copy-paste mistake

1555508058
very-mediocre
to guarantee that the result of S.getValue() is not null, you could throw an error

1555508069
very-mediocre
in case it is null

1555508075
very-mediocre
before returning, that is

1555508096
very-mediocre
i.e. return an error, to use zig terms

1555508121
very-mediocre
there's no such concept as setting something to "not null," it has to be something

1555508169
forgot-password
I meant to basically mark the optional as not null, with the rest of the data being uninitialized

1555508187
forgot-password
I guess I could do a memset, no?

1555508251
very-mediocre
well you're returning instance.? which evaluates to instance orelse unreachable

1555508297
very-mediocre
if you unwrap instance before returning it, then in the calling scope whatever is returned is known as not being null

1555508503
very-mediocre
either way it works out to handling the case of the item being null in the body of the S.getValue() function

1555508718
forgot-password
Okay, so there's no way to tell Zig "Hey, this thing actually contains data and is not null". I assumed there's just a flag attached to the data which says whether said data is null or not.

1555508744
very-mediocre
zig knows it's not null after you've unwrapped it

1555508758
forgot-password
Which I thought I confirmed by `@sizeOf(?u0) == @sizeOf(u0) + 1`

1555508774
forgot-password
But how does it determine that?

1555508784
very-mediocre
compile-time control flow analysis

1555508828
forgot-password
Alright, thank you :)

1555508846
very-mediocre
üëç

1555509522
ljmccarthy
comptime eval in zig:

1555509531
ljmccarthy
pretty neat I think

1555509555
ljmccarthy
zig would be a good language to embed other languages in

1555509617
ljmccarthy
myexpr could be generated by comptime parsing @embedFile'd code in a separate file

1555510240
very-mediocre
that's cool!

1555510284
ljmccarthy
I was amazed it actually worked, and compiled the evaluation of a structured expression tree to a single instruction

1555510301
ljmccarthy
even optimised 42*x*x to 84*x

1555510392
ljmccarthy
of course it's only a toy example

1555510671
very-mediocre
this seems pretty nice for DSLs

1555510760
ljmccarthy
oops I meant 42*(x+x)

1555510792
ljmccarthy
yes you could implement DSLs very easily without having to worry about backend

1555510817
ljmccarthy
easy as writing a AST interpreter

1555510845
very-mediocre
server blocks come to mind but I haven't thought it through

1555513208
eubn
I think I tried asking this a while back, but I'll try again: what's the canonical way to learn zig right now?

1555513393
very-mediocre
eubn: learning materials are currently limited, what I did was just go through the docs:

1555513425
very-mediocre
the language is probably not ready for production just yet

1555513443
very-mediocre
although in my experience it's really solid

1555513761
eubn
very-mediocre: Thanks, I'll start from there. If I'm not mistaken the standard library's documentation not there?

1555513794
very-mediocre
you are correct

1555514024
very-mediocre_
the stdlib is pretty readable btw, a far cry from C++

1555514065
very-mediocre_
i usually copy the zig/std folder into my project so I can easily browse / search-in-files

1555514294
scientes
why?

1555514302
scientes
just checkout zig in git, and use git grep

1555515124
ljmccarthy
I'm learning mainly by reading the standard library and reference doc

1555515868
bketelsen
sritesh:

1555515889
bketelsen
got some decent interop js<->wasm going by mimicing rust's wasm-bindgen

1555516015
shritesh
bketelsen: That's great!!!

1555516101
bketelsen
sritesh: the next step is to figure out how to generate the things that need to be generated.

1555516222
shritesh
I've been trying to figure out how to interact with strings.

1555516251
bketelsen
I have the recipe!

1555516267
bketelsen
I'll update the repo shortly with a string example

1555516273
shritesh
Perfect

1555516368
fengb_
Would anyone be interested if I try porting the Zig compiler to the browser?

1555516401
fengb_
Something like

1555516587
fengb_
Alright cool, I'll probably have more details later tonight. Just wanted to make sure I'm not just scratching a personal itch

1555517797
very-mediocre
scientes: because i use vscode and it has excellent file content search

1555517819
scientes
I guess i'm old-school not using an IDE

1555517828
scientes
i would like "go to define" feature however

1555517851
scientes
I just find that IDEs are too slow

1555517864
very-mediocre
I agree, I only use lightweight(ish) code editors

1555517875
very-mediocre
vscode is awesome despite being electron-based

