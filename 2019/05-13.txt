1557710929
daurnimator
hryx: huzzah, merged :D

1557711251
hryx
\o/ your arena allocator fix got in there -- thanks for leaving that note

1557711645
daurnimator
hryx: when I get home tonight.... or, uh, maybe tomorrow; I'll rebase the linked list PR

1557715302
andrewrk
hryx, I dedicate this link to your new parser code

1557715497
daurnimator
andrewrk: so, when do we get tail call elimination in zig? :)

1557715499
hryx
OMGahh amazing

1557715510
andrewrk
daurnimator,

1557715760
daurnimator
andrewrk: thanks for the link.

1557715788
hryx
andrewrk: that was so much more Disney chiptune than I was expecting to experience today

1557715791
daurnimator
andrewrk: makes me think about how @tailCall and the existing @inlineCall aren't really builtins, but "magic"

1557715819
andrewrk
yeah builtins are not necessarily "functions"

1557715885
shachaf
Tail recursion seems to me like the most uninteresting type of tail call. If your function is tail-recursive you should probably just write a loop.

1557715916
daurnimator
andrewrk: I assume that tail calls would also be possible if the builtin is

1557715919
shachaf
Other tail calls might be easier to justify.

1557715984
andrewrk
zig is allowed to do tail call optimization in general if you don't use "noinline"

1557715993
andrewrk
so the question is how to semantically guarantee it if you need that

1557716016
andrewrk
it's going to become more clear how TCO fits into the language once we have coroutines and safe recursion

1557716024
andrewrk
all that stuff is related

1557716049
andrewrk
both the existing and planned coroutine implementations, for example, depend on tail call optimization to work correctly

1557716074
shachaf
One thing I'd like is to be able to know at compile time exactly how much stack space a function can use.

1557716096
shachaf
Clearly that's related to coroutines, which allocate stack frames statically.

1557716123
andrewrk
yes

1557716320
hryx
andrewrk: back from mother's day stuff and gonna give some translate-c-2 a shot. I've never dealt with LLVM or libclang directly - any suggestions for starting point?

1557716339
shachaf
I guess I can see how the coroutine thing would be implemented in terms of tail calls.

1557716361
hryx
I was eyeing the TODO for struct decls, though it seems structs are wrapped in a "record" abstraction

1557716580
andrewrk
hryx, start with: ./zig build --build-file ../build.zig test-translate-c

1557716586
mikdusan
heh sorry andrewrk i nuked my comment in the linux renameat syscall thread. i was assuming WSL could handle SYS_renameat but doesn't appear so.

1557716617
andrewrk
hryx, and then have a look at test/translate_c.zig to see all the cool stuff that the c++ version can do

1557716656
hryx
okdk, will do. thankee

1557716672
andrewrk
then try `zig translate-c-2 foo.c` where foo.c is `void foo(void) {}` and look at src-self-hosted/translate_c.zig to see how it works

1557716712
andrewrk
next try to make it ever so slightly more complicated and see if you can make it work! if you get hooked then you know you'll be into it :)

1557716805
andrewrk
the libclang API is pretty difficult to navigate, in my opinion, but most of it is already figured out in src/translate_c.cpp

1557716906
hryx
gotcha! I'll start there and see how it goes

1557718142
shachaf
What's the most up-to-date thing to read about the coroutine plans?

1557718183
daurnimator
shachaf:

1557720954
daurnimator
has anyone looked into run-time struct construction?

1557746816
rivten
hello everyone ! Sorry I've mostly been spending time here asking questions, I hope it's not too overwhelming. Anyway, I've got another one. I've got some code that I use on Linux and Windows, the same code does not work in Win32. After tracing it, it boils down to a call to std.io.readFileAlloc. Just after entering the readFileAlloc function, my Filename which was fine in the stack trace just before is now completely wrong inside the re

1557746842
rivten
Could it be possible that the function messes up the registers for the functions ? Making it point to something wrong in Win32 only ?

1557747132
rivten
it seems very unlikely, but I can very clearly press f11 to step into readFileAlloc on Visual Studio and see that the path pointer is clearly different from just before up the stack

1557748884
rivten
hmm I wonder if it's not the Align stuff that makes the difference, because the address diff between my Filename string and the path string in readFileAllocAligned is only 10 in hexa

1557749482
tgschultz
daurnimator, runtime? wouldn't that basically be an allocator with an index?

1557749627
tgschultz
hmm... address being off by 0x10 bytes sounds familiar. Someone had a mysterious ABI related issue like that a few weeks(?) ago but I don't know if they ever worked it out.

1557749705
rivten
yeah it's weird... I would need to expand my knowledge on the C ABI about rsp and rbp to investigate further

1557751662
kristoff_it
Hi all! I finally re-wrote my cuckoofilter implementation in Zig. The experience was amazing, not joking. Comptime is amazing. The last time I was this impressed is when I started using macros in lisp.

1557751795
kristoff_it
I have a couple of questions. One is about unions and switch. I have a tagged union that I give as a parameter to a function in order to change the function's behaviour. I can't make the parameter comptime because the payload is not comptime known, but the case is.

1557751809
kristoff_it
Here's the code

1557751953
kristoff_it
Is there a way to resolve the switch at comptime? An alternative would be to break the union into an enum and an extra parameter to the function, but I think it's more expressive to bundle optional parameters like that one in an union instead of having an extra argument that sometimes lies unused.

1557751971
kristoff_it
*and add an extra parameter

1557753992
tgschultz
kristoff_it I don't believe there's any way (currently) to have part of a container be comptime variable and the other runtime. What you could do is change from a union to a struct and generate it using a comptime function. The struct's field type would be based on `mode` and there'd be a pub const enum definition in the struct the says which mode it is in. The function would then take `var` and switch on `@typeOf(parameter).mode`.

1557753992
tgschultz
frankly that seems a bit convoluted for this use case though.

1557755736
kristoff_it
tgschultz: thanks, I'll try to see how that looks like. Using unions to drive behavior is a pattern that is used extensively in Swift and that imo fits well into Zig

1557755853
kristoff_it
also because it allows the IDE to suggest what the options are when you are writing code.

1557756036
TheLemonMan
andrewrk, ping

1557763378
euantor
Is this the recommended way to add a path for tests when putting tests in a separate directory? I had a look at some example projects where others were just doing `@import("../src/foo.zig")` but that caused errors about imports outside a project root or something...

1557764180
johnLate
Hi, I'm trying out zig for the first time. Where can I find documentation or an overview for zig's std lib?

1557764379
hryx
johnLate: not yet unfortunately, but aiming to fix that before the next release. for now I recommend just looking at the stdlib source

1557764453
andrewrk
hi TheLemonMan

1557764820
TheLemonMan
andrewrk, would you be against having a python script to auto-generate a file containing the syscall stubs for a given architecture?

1557764836
TheLemonMan
that way we don't have to hand-edit everything for every OS and architecture

1557764846
andrewrk
TheLemonMan, yeah, it's gotta be in zig :)

1557764852
andrewrk
no python dep

1557764876
TheLemonMan
no problem, I can rewrite it in zig heh

1557764915
andrewrk
it's not so bad, zig can be relatively script-like when you run in debug mode and you can throw errors willy nilly

1557765026
TheLemonMan
so, given this file

1557765044
TheLemonMan
here's the autogenerated file containing the stubs

1557765172
TheLemonMan
the biggest problem is that I don't know where to put them, ideally I'd have a #include "syscall_stubs.c" followed by a #ifdef IS_32BIT_TARGET\n#include "syscall_32bit_compat.c"\n#endif

1557765207
TheLemonMan
in the linux.zig code, but there's no way to "textually" include some files

1557765275
andrewrk
I don't think you can completely avoid hand-editing the auto generated output

1557765285
andrewrk
sometimes * pointers will be appropriate; sometimes [*]

1557765293
andrewrk
there are probably other examples

1557765369
TheLemonMan
well, the prototypes are specified in the txt file so you can use whatever pointer flavour you like

1557765385
halosghost
though, having the thing generate the list and just maintaining a patch to correct things would still be much better, I imagine

1557765527
johnLate
If I want to read command line arguments, I need something like «const args = try std.os.argsAlloc(allocator);»? But what do I use as allocator?

1557765616
andrewrk
johnLate, we have windows API to thank for having to use an allocator to deal with args

1557765658
andrewrk
you can use a fixed buffer allocator if you want to impose a maximum byte size of args

1557765667
TheLemonMan
halosghost, ideally you shouldn't have to do anything by hand, beside writing the missing stubs and the .txt file for your OS

1557765684
halosghost
that'd be cool

1557765687
andrewrk
johnLate, what allocator are you using for the rest of your app?

1557765738
andrewrk
TheLemonMan, I think this is an interesting idea, if you're willing to task the risk of it being sort of experimental and  not guaranteed to be merged into master

1557765851
TheLemonMan
andrewrk, sure thing, this is the last step needed before getting zig to target 32bit ARM systems running Linux

1557765897
TheLemonMan
I'd leave the script in python tho, if you give then green light then I'll re-write it in Zig

1557765919
andrewrk
makes sense to me

1557765972
TheLemonMan
expect a draft PR in a few hours then o/

1557766315
johnLate
So this are my very first steps with zig. I'm trying to reimplement a small command line tool written in C that opens a file and counts how many bytes are 0x00.

1557766320
johnLate


1557766403
johnLate
(I'm using zig 0.4.0 from arch)

1557766459
johnLate
So I guess, while it shouldn't crash even if what I'm doing is wrong, I should first try to build zig master before I stumble around further?

1557766667
komu
JohnLate, your program works okay for me

1557766681
komu
I'm using zig from master

1557766700
kristoff_it
sholudn't the allocator be var instead of const?

1557766728
kristoff_it
uhmm no I tried, works for me too

1557766756
johnLate
Oh, it works when I try: zig run zeroscan.zig --library c -- a b c

1557766759
johnLate
just crashes with no args

1557766787
komu
I ran with: zig build-exe main.zig && ./main --name komu --age 31

1557766879
johnLate
What do you get when using 'zig run' with and without arguments?

1557767130
komu
johnLate,

1557767187
johnLate
Ah, so it seems argv[0] isn't set correctly with 0.4.0

1557767307
johnLate
My build from master just finished, works as expected now. Thanks.

1557767329
komu
cool

1557767451
johnLate
< kristoff_it> sholudn't the allocator be var instead of const?   -> should it? I guessed allocator is like a reference to the real allocator object, and that reference will not change. Is it wrong to think about it this way?

1557767488
kristoff_it
no don't worry I tried your script, it works, I'm a Zig noob too :)

1557767509
tgschultz
for c_allocator there is no state so it doesn't matter if it is const or not

1557767613
tgschultz
but also, std.heap.c_allocator is a pointer, and a `const *T` != `*const T`

1557768303
komu
I'm also new to zig and have a question regarding reading files;

1557768324
komu
the question specifically is;

1557768523
kristoff_it
buffer is an array, while the function wants a slice

1557768562
kristoff_it
they are similar in usage, but different in nature

1557768579
kristoff_it
komu: Go has the same distinction

1557768836
komu
my question is `os.File.getEndPos()` returns a u64; why cant be able to use its return value in `var buffer: [file_size]u8 = undefined;`

1557768878
komu
where `file_size` is return value of `getEndPos()`

1557768939
tgschultz
file_size is a runtime value

1557768957
tgschultz
array lengths are by definition comptime known

1557769016
komu
ohh, that makes sense. thanks

1557771767
andrewrk
johnLate, for a command line application, I recommend this pattern:

1557771793
andrewrk
johnLate, and then use that allocator everywhere and don't even worry about freeing memory, let the OS do that for you.

