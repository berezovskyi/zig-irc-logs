1575763436
pixelherodev
Snektron, sure, but it's a simple enough optimization

1575769988
daurnimator
frmdstryr: that helped....

1575770790
daurnimator
How can I un-null an optional?

1575770839
daurnimator
e.g. I have a `var foo: ?sometype = null;` and I want to pass it as an out-arg to a function: `somefunc(&foo)` however that function takes a `sometype`, not a `?sometype`

1575771035
daurnimator
trying to pass it like that gets "expected 'sometype' got '?sometype'"

1575771065
daurnimator
however trying to pass it as `&foo.?` fails with "attempt to unwrap null"

1575771821
daurnimator
andrewrk: I'm getting misc failures in std/event/loop... occasional errors from waitFd with FileDescriptorAlreadyPresentInSet

1575776333
daurnimator
anyone managed to get std.event.loop actually working?

1575782128
daurnimator


1575797287
mq32
<daurnimator> however trying to pass it as `&foo.?` fails with "attempt to unwrap null"

1575797312
mq32
foo = @as(MyType, undefined); func(&(foo.?));

1575797342
daurnimator
mq32: `foo` here is actually a largish field of a heap allocated struct

1575797374
mq32
huh

1575797382
mq32
and you heap-allocate an optional?

1575797392
mq32
instead of optional-to-pointer?

1575797443
daurnimator
A = struct { foo: ?something, bar: u8, }; const a = try allocator.create(Foo); ------- some time passes -------- somefunc(&a.foo)

1575797464
mq32
ah yeah

1575797472
mq32
you have to initialize the struct after heap-alloc

1575797494
mq32
and to access "a.foo", you have to initialize it to a non-null value

1575797499
daurnimator
but it

1575797506
mq32


1575797522
mq32
but somefunc does initialize foo with a fresh something, right?

1575797525
daurnimator
in fact in my code its: `if (a.foo == null) getafoo(&a.foo);`

1575797568
mq32
aa yeah

1575797579
mq32
you still have to initilaize the optional before unwrapping it

1575797589
mq32
just use the @as(something, undefined) before getafoo

1575797591
daurnimator
this seems like a language "bug

1575797611
daurnimator
oh initialize to undefined? interesting

1575797625
mq32
nah, why?

1575797627
daurnimator
is that guarnteed to not initialize it to null?

1575797631
mq32
yes

1575797635
daurnimator
how so?

1575797646
mq32
if you assign it a "undefined something" instead of an undefined ?something

1575797660
mq32
var x : something = undefined;

1575797664
mq32
var y : ?something = x;

1575797673
daurnimator
ah k. good solution I think; thanks!

1575797685
mq32
^= second line just does fill the y with a value, so it is not null

1575797693
mq32
it doesn't mean the value must be meaningful

1575797713
daurnimator
I feel like this is one of those things that need to be written down. I just learned something that someday someone will be stuck racking their brains trying to figure out with a deadline

1575797911
mq32
hmm

1575797932
mq32
yeah there's a lot of fine grained detail in the language that is "obvious" as soon as you think about it

1575797943
mq32
but not obvious if you didn't grasp the semantics completly

1575797958
daurnimator
"set X to undefined if you want to access it" is not obvious at all

1575797970
mq32
nah, that's not the idea :D

1575797974
daurnimator
s/access it/take its address/

1575797982
mq32
set x to an undefined, but non-null value

1575798706
shakesoda
i feel like i have no idea why a lot of the dots in zig are needed

1575798720
shakesoda
not like, opposed to them being there, i just don't quite understand

1575798756
shakesoda
particularly .{ .* and .? seem really awkwardly placed, and i'm sure for a reason, i just don't know it

1575798808
mq32
.* and .? are quite nice because they remove two unary prefix operators and replace them with postfix operators

1575798863
mq32
so pointers and optionals moore behave like structs where you can access the content as a field

1575798871
mq32
.* is the same as .? or .field

1575798875
mq32
"access contents of the type"

1575798896
mq32
.{ … } isn't a syntax a like, but i can understand why it's there

1575798955
shakesoda
that makes sense for the .* and .?

1575798982
shakesoda
if i think of it with the same frame as .field access it isn't weird anymore

1575799003
mq32
yep

1575799016
mq32
and now if you think about it, "*ptr" is a weird syntax in C :D

1575799031
shakesoda
the weird i have always known ;)

1575799040
mq32
yeah, that's the point

1575799074
mq32
a lot of people are weirded out by "different", but not by the absurd stuff they use every day

1575799100
shakesoda
zig seems consistently good about things having a reason for being

1575799129
mq32
yeah that's an important design decision

1575799645
mq32
i just learnt that ada has always all language features :D

1575799646
mq32


1575799663
mq32
but i like this syntax for "attributes" which is quite cool and removes a lot of operators

1575799679
mq32
instead of using "&x" to get a pointer, you do "x'Address"

1575799699
mq32
to get the type, you can do "x'Type"

1575799787
shakesoda
that seems practical but really verbose

1575799806
mq32
yeah, so? :D

1575799812
mq32
increased readability

1575799820
mq32
x'size, s'bitsize

1575799854
shakesoda
verbose doesn't directly equate to readability

1575799862
shakesoda
ongoing argument i have with my dev friends :D

1575799887
mq32
it depends on the context, yeah

1575799900
mq32
but in most places, it reduces the stuff you have to remember (syntax wise)

1575799907
shakesoda
some of my friends write code so verbose that things fall out of my working memory before i can figure out what they do :(

1575799924
gonz_
Consistency leads to obviousness which helps

1575799931
shakesoda
keeping things at least somewhat terse helps avoid that

1575799943
shakesoda
obviously not to extremes either

1575799949
shakesoda
overly terse gets cryptic

1575799951
mq32
verbose syntax doesn't increase "working memory use" :D

1575799973
shakesoda
it increases the amount of stuff i have to process to figure it out :P

1575799997
shakesoda
i don't feel strongly about this in abstract, i would have to use it

1575800000
mq32
most brains parse "'address" the same as they parse "&" :D

1575800021
shakesoda
mine certainly doesn't!

1575800096
gonz_
Brains read patterns, not letter by letter

1575800100
gonz_
I doubt yours does

1575800410
gonz_
Your brain is likely intrinsically going to have a harder time making a difference between `&some_variable` & `*some_variable` than it would actual words representing those things, it's just that you've given it plenty of training to do so.

1575800778
shakesoda
dunno, but i don't read the operators as their words when i read code to begin with

1575800815
mq32
at some point you also stop reading 'address as a word, but as semantics

1575800822
mq32
it's the same difference at the end

1575800827
mq32
it's just what you are used to and what not

1575800828
shakesoda
yeah, but 8 times the characters

1575800836
shakesoda
that can add up to a lot of visual noise very fast

1575800841
mq32
conveying more information anyways

1575800853
mq32
@as() also adds a lot of visual noise to zig, sadly :(

1575800860
shakesoda
it definitely does

1575800883
daurnimator
@as is pretty rare in my experience

1575800891
mq32
interfacing with SDL is quite horrible right now :D

1575800893
shakesoda
i noticed that when doing the few replacements on my end but it was infrequent enough not to feel too strongly

1575800922
shakesoda
there are quite a few pain points interfacing with sdl

1575800926
mq32
daurnimator: i challenge you!

1575800927
mq32
@divFloor((mouse.y - mapOffsetY) & ~@as(c_int, tileSize - 1), @as(c_int, tileSize));

1575800940
daurnimator
I think 60% of the time I need @as is in testing.expectEqual. 30% in broken peer-type-resultion. and 10% actual use cases.

1575800974
daurnimator
mq32: use @truncate instead for that one

1575800980
mq32
huh what?

1575800989
mq32
@as is coercion, not casting

1575801057
mq32
tileSize is u8 because it has a certain size range, mouse.x and mapOffset is c_int, because friction with SDL

1575801074
mq32
and there are also isize types which are incompatible to c_int as well

1575801077
daurnimator
mq32: is your & there not a truncation?

1575801090
mq32
it's the inverse

1575801095
mq32
"remove the last n bits"

1575801115
mq32
that line is actually not quite correct though

1575801121
mq32
but it's not a truncation

1575801214
mq32
problem is that u8 doesn't interface well with either isize or c_int

1575801326
shakesoda
sdl has a bunch of them, lots of libraries will macro a bitmask etc and those kind of things don't translate :(

1575801358
shakesoda
i think i ran into some issues with unusual enum values too, also common in c code

1575801360
mq32
shakesoda: maybe you want to contribute to my

1575801457
shakesoda
mq32: oh i might need to try that out

1575801471
mq32
it is 99% incomplete right now

1575801485
shakesoda
i noticed, all the functions i searched for first are missing :D

1575801485
mq32
i'm building the lib as i require the features

1575801489
mq32
:D

1575801510
shakesoda
(first was SDL_GetPerformanceCounter and SDL_GetPerformanceFrequency)

1575801518
mq32
haha

1575801526
mq32
maybe the most uninteresting features to me right now

1575801528
shakesoda
then SDL_GL

1575801533
mq32
but go ahead, implement them! :D

1575801550
daurnimator
mq32: you got event/loop stuf working before?

1575801558
mq32
never used it

1575801567
mq32
i'm not that much a fan of async/await for I/O semantics

1575801576
shakesoda
well, they're quite a lot better than SDL_GetTicks is

1575801588
mq32
shakesoda: so? :D

1575801598
mq32
SDL_GetTicks has roughly my framerate resolution

1575801605
mq32
and i'm always locking in on VSync

1575801618
shakesoda
getticks accuracy is atrocious though D:

1575801625
shakesoda
ms isn't nearly enough

1575801636
mq32
enough for animation anyways ¯\_(ツ)_/¯

1575801640
mq32
depends on what you are doing

1575801657
mq32
i seldom use it anyways except for main loop counting

1575801659
shakesoda
you'll have timing drift almost instantly with only ms precision

1575801683
mq32
nah

1575801684
mq32
:D

1575801688
shakesoda
that is probably acceptable in your case, but i really don't like that kind of stuff

1575801696
mq32
fixed timestep loops work quite well

1575801710
mq32
they don't drift in any way, the just may "stutter" for a frame or so

1575801723
shakesoda
stuttering is the most annoying visual artifact of them all!

1575801736
shakesoda
my eyes, they bleed!

1575801748
mq32
i never had any stuttering

1575801770
mq32
but i'm not doing "heavy heavy game logic", but shallow game logic stuff

1575801784
mq32
so game logic and physics run with 400 FPS

1575801791
mq32
where a missing frame doesn't hurt you

1575801806
mq32
and visuals run in sync with the screen refresh rate

1575801941
shakesoda
i'm doing heavy enough logic that i have tools for measuring the time every system takes, and missing frames is real bad for the kind of projects i work on

1575802003
mq32
as always: it depends on the use case

1575802019
shakesoda
yes, of course

1575802033
mq32
but yeah

1575802043
mq32
if you want to contribute to the wrapper/sdl lib, go ahead :D

1575802281
shakesoda
i will certainly give it a go

1575802315
shakesoda
good excuse as any to work on my zig-fu, and transplant some of the sdl stuff i've already got here

1575802465
mq32
i'm gonna improve the "meta" of the repo a bit right now

1575802966
mq32
okay, meta and example added :)

1575805854
ovalseven8
Hey, what's your opinion about V (

1575805906
daurnimator
ovalseven8: gingerbill is a nice guy

1575805944
daurnimator
oh wait vlang not volt

1575806024
daurnimator
ovalseven8:

1575806154
ovalseven8
daurnimator, Thanks, so far from finished. Maybe in a a few years

1575806314
mq32
oh btw, as it reminds me of a question:

1575806326
mq32
how does "hot reloading code" look like in practise?

1575806343
ovalseven8
Is there a rough estimate when Zig hits 1.0?

1575806357
mq32
i know from .NET how you can change

1575806428
daurnimator
mq32: depends on the languagr

1575806442
daurnimator
mq32: if its a VM... by just giving new code to the VM

1575806458
daurnimator
mq32: for native: usually unloading/reloading shared libraries

1575806467
mq32
yeah for a VM, i can imagine how to implement this

1575806476
mq32
but for native code, it seems much harder

1575806488
mq32
you need to have defined "sync" points where you can hot-reload code

1575806504
mq32
otherwise you are "in the middle of anything" and you have to rewrite the whole stack and such

1575806507
daurnimator
mq32: to a point: you have "unload hooks" and "load hooks" for a shared object

1575806556
mq32
also i wonder: was a REPL planned for zig?

1575806568
mq32
i cannot quite imagine how that should work out as well

1575806571
daurnimator
no

1575806583
mq32
okay, good :D

1575806588
daurnimator
though that didn't stop people

1575806607
daurnimator


1575806624
mq32
it's a thing i've never used except for like "extended calculator"

1575806626
daurnimator


1575806700
mq32
[x] The compiler crashes if you look at it funn

1575806702
mq32
:D :D

1575807326
daurnimator
ovalseven8: zig 1.0 is still a while away. I'm not familiar with any estimates

1575808674
stratact
So... I was creating a `setFilter()` method for my iterator and I had it accept a function type as a parameter, only to realize I forgot... I can't use closures or have functions be anonymous either... I guess I have to write a normal function?

1575808968
daurnimator
stratact: yeah and bound functions crash the compiler if you try and pass them

1575809093
stratact
wait, why?

1575809154
stratact
ICE?

1575809289
stratact
...closures must be super magical to implement I suppose

1575809427
mq32
stratact: closures are hard to get right

1575809442
mq32
what gets captured, how does it get captured, where is the data stored?

1575809578
stratact
Yeah, that's too magical even for Zig. Then I'll toss my filter closure adapter idea and come up with another stratact-egy

1575809887
mq32
well, you can always use semi-anoynmous functions for filtering

1575809907
mq32
give me a second

1575809977
daurnimator
stratact: or fix the bug :P

1575810090
Snektron
Wait, couldn't closured be implemented as a kind of "async function literal"

1575810192
Snektron
but well, not async

1575810196
mq32
stratact:

1575810204
Snektron
because a Frame already saves all state of a function

1575810278
stratact
Holy poop-emoji, that's amazing!

1575810292
stratact
mixin style?

1575810416
stratact
(well it's not a mixin though)

1575810553
mq32
stratact: no, just zig style

1575810562
mq32
downwards "closures" are already no problem, as they are in C :D

1575810579
mq32
"upwards  closures" are much more complex (meaning: passing a closure upwards the stack)

1575810763
stratact
cool beans, my friend

1575810833
stratact
I have... a lot I need to learn from Zig and C.

1575810952
mq32
what are you programming usually?

1575811139
stratact
Most of my programming was from refactoring existing Rust code but on-and-off I worked on random userland applications

1575811179
mq32
here's my example with some advancements:

1575811571
stratact
mq32: I'm still impressed, even if it's a downward closure. I love it and it makes sense from a stack (and frame) point of view

1575812116
stratact
Heh, I've been trying to write something for the past 8 minutes but I didn't want to sound overly appreciative because of how ignorant I am. :)

1575816873
frmdstryr
daurnimator: anyone managed to get std.event.loop actually working?

1575816877
frmdstryr
yes

1575817235
frmdstryr


1575818561
frmdstryr
daurnimator> frmdstryr: that helped....

1575818599
frmdstryr
you have a lot of good ideas in your praser

1575818601
frmdstryr
parser*

1575830360
stratact
So thanks to mq32 for teaching me about downward closures, I've commited Zig Sin by writing this FP-style Zig code just for science and my amusement:

1575830378
stratact
it legit works too

1575830482
andrewrk
the only sin in zig is using [*c] pointers :P

1575830607
stratact
:)

1575830891
stratact
andrewrk: you can see why I was so impressed, right? Zig's ability to adapt itself to different programming styles by its own universal style.

1575831136
stratact
Alright I had enough refactoring fun, time to get stuff done.

1575833244
mq32
i'm really looking forward to free function literals

1575833249
mq32
they will make quite a difference again

1575833270
mq32
and they unify function-, type- and var declarations

1575834687
lukeholder
:)

1575834730
fengb
I feel like Zero needs a mount

1575834746
lukeholder
a mount?

1575834759
mq32
damn, ziggy is cute :D

1575834782
mq32
Is Zero collecting star dust for Ziggy?

1575834886
fengb


1575834893
fengb
Needs more awesome

1575834946
lukeholder
fengb haha

1575838283
stratact
I think I'm experiencing the Zig's Zen. Hearing rain drops while hacking is quite the experience.

1575838363
shakesoda
sounds relaxing

1575838528
stratact
indeed

1575838575
mq32
cool

1575838587
mq32
i have LEDs glowing and i'm quite happy about that :D

1575838666
stratact
More than one way to reach nirvana

1575838781
mq32
yep

1575838922
mq32
okay, my LEDs are blinking now <3

1575838969
andrewrk
this is my favorite song to code to while it rains:

1575839004
mq32
very chill

1575839510
stratact
yes, very much so. It feels like I'm healing listening to it.

1575839782
stratact
I'm listening with those Audio-Technica headphones with large speakers, which allows me to hear more details in the song

1575839890
shakesoda
stratact: i have a couple pairs of those, they are great

1575839964
stratact
shakesoda: with the 3D-wing head support, right? :)

1575840165
shakesoda
stratact: yes

1575840485
stratact
I'll need to ping andrewrk for more of his favorites songs whenever I'm feeling down.

1575841676
stratact
I think I'm pretty much done with the terminfo text source parsing. I collected the names of the terminals in a `names` table and the bool, strings, numerics values in a `caps` table, similar to daurnimator's Lua approach. However is there a way to do debug prints to check a value's data representation with stdout?

1575841970
Snektron
andrewrk, rameses b is a good choice

1575843430
stratact
I suppose the "{?}" format is what I was looking for, but the pointers hide the entry data :(

1575843714
andrewrk
var args's days is numbered

1575845577
Snektron
Whats the status on #1348?

1575845619
andrewrk
Snektron, the info/labels there is up-to-date and correct

1575845662
Snektron
So i guess there is nothing to hold it up?

1575845677
andrewrk
nope, it's just a contributor friendly PR away

1575845690
Snektron
Guess i'll go take a look :)

1575847330
daurnimator
oooo, comptime fields.....

1575847550
emekankurumeh[m]
would it be possible to set up ci for mingw-w64?

1575848052
Snektron
I notice that there isn't any checking on builtin functions names in std/zig

1575848419
Snektron
andrewrk, should there be any checking on that at parsing stage?

1575848504
andrewrk
emekankurumeh[m], what you're asking for is to add support for this as a first-class build environment, blocking master branch pushes and PR merges if they break the build for this environment. I'll consider it

1575848560
andrewrk
Snektron, semantic analysis is an OK place to catch this problem, since it is clear to the parser what the programmer intended. a message such as "xzy is not a builtin function" is better than "unknown token: @xzy"

1575848583
WendigoJaeger
finally got a basic Zig program to run a on Game Boy Advance:

1575848636
andrewrk
WendigoJaeger, wow, nice!

1575848663
WendigoJaeger
I was surprised that LLVM support that old ARM architecture

1575848707
andrewrk
WendigoJaeger, here is the issue to get rid of the llvm-objcopy dependency:

1575848740
WendigoJaeger
andrewrk: oh nice!

1575848837
WendigoJaeger
andrewrk: and it's even better than devkitARM because you don't need an extra program just to update the ROM header, gotta love comptime features

1575848991
andrewrk
:)

1575849007
Snektron
andrewrk, i'm unsure where to place typeOf/TypeOf substitution. I considered in the handling of BuiltinCall in renderExpression, but there is currently no way to render something other than a token without directly rendering a string

1575849021
Snektron
Another place is in renderTokenOffset, but that seems wrong too

1575849043
Snektron
I suppose the best place to add this is in tokenSlicePtr in ast.zig

1575849063
andrewrk
Snektron, in this case, just render the string, don't call the token function

1575849098
Snektron
Would that not create problems with formatting of stuff after the name?

1575849098
andrewrk
you can look at how use / usingnamespace did this

1575849108
Snektron
ah sure, good idea

1575849161
andrewrk
yeah it'll mess up line comments after that token, but

1575849306
Snektron
famous last words

1575849332
andrewrk
nobody noticed with usingnamespace :)

1575849423
andrewrk
if you want to pioneer a more sound way to do it, go for it

1575849466
Snektron
I suppose a good point would be the tokenSlicePtr call i was talking about

1575849489
Snektron
Simply define a list of substitutions by token and matching text, and provide a replacement text

1575849562
daurnimator
andrewrk: 16:15:24 <daurnimator>

