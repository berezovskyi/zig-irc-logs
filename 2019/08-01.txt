1564619405
fengb
`error: container 'std.fs.path' has no member called 'real'`

1564619670
fengb
I can't find a definition of `fn real` in the codebase. I see `realpath` but that has different args

1564619876
nrdmn
now I have a few @OpaqueTypes and I'd like to give them const attributes just like I can with structs. Is that possible?

1564619934
nrdmn
wait, that'd be an empty struct

1564619947
nrdmn
(wouldn't it?)

1564620241
daurnimator
andrewrk: around?

1564620598
daurnimator
scientes: spend your 6e on sponsoring andrewrk instead. I've got a donated arm64 box

1564620630
scientes
ok

1564620679
scientes
daurnimator, do you want me to set it up?

1564620704
daurnimator
scientes: nope. I already did it yesterday with andrew

1564620711
scientes
oh awesome

1564620720
daurnimator
scientes: I think the last step now is to merge your gitlabci PR to actually kick things off

1564620885
scientes
daurnimator, i was really happy with how easy gitlib ci was

1564620906
scientes
the runner doesn't even need an external ip address

1564620907
daurnimator
scientes: took me a while to realise I had to run `gitlab-runner register` to redeem my token for another token

1564620942
scientes
except that gitlab doesn't understand differn't architectures, so it can only be used for arm64

1564620975
daurnimator
why would you want to use it for something else anyway?

1564620979
scientes
unless you hack around it by having multiple gitlabs

1564620994
scientes
I also have a ppc64le patch

1564621011
scientes
it needs C ABI, but I wonder if it could be accepted without that

1564621032
daurnimator
scientes: ??

1564621043
scientes
llvm doesn't implement the C ABI

1564621055
daurnimator
scientes: I don't understand the gitlab limitation you're talking about

1564621073
scientes
daurnimator, if you enable the x86 runners they give you then it doesn't always run the arm64 build

1564621085
scientes
but maybe i just didn't see the right feature

1564621092
daurnimator
you have to put it in your gitlabci.yaml that you want it to run on all arches

1564621105
scientes
oh ok

1564621251
scientes
there are some limitation of comptime that have to be overcome to get gather/scatter to work comptime

1564621258
scientes
I probably should write up an issue

1564622000
daurnimator
scientes: so in your gitlab ci file, you essentially repeat the job for each architecture, adding tags for each one

1564622067
daurnimator
but note that you can 'extend' a base definition. see

1564624567
nrdmn
ok so if I have a struct with no attributes, I can't have a pointer to it in an extern struct

1564624579
nrdmn
is this a bug?

1564624803
fengb
An empty struct has size of zero so it doesn’t have memory representation

1564624814
fengb
So I don’t think it’s possible to make a pointer

1564625164
nrdmn
is there any other way to give an @OpaqueType() const attributes?

1564634715
emekankurumeh[m]
`*const @OpaqueType`?

1564634852
daurnimator
emekankurumeh[m]: but that would be pointer sized...

1564634884
daurnimator
I guess the questions ends up being: "how can I embed an opaque type in another structure to get another structure (but with methods) of unknown size?"

1564634918
daurnimator
which now I phrase it like that.... seems related to supporting VLS

1564634932
emekankurumeh[m]
but you can't store a OpaqueType, only pointers to it

1564635030
daurnimator
emekankurumeh[m]: that's the problem/issue :P

1564635071
emekankurumeh[m]
that makes sense

1564651120
belse
has someone an example of a build.zig files for a modularized hierarchic c lib?

1564651204
belse
I wanted to play around with libagar but the makefile does not work for me so I thought it maybe easier to write a specific build.zig for playing around

1564662406
mq32
mikdusan, i finally had time to write some text :)

1564662742
fgenesis
\lipsum\flushpage

1564662932
mq32
\toc

1564663226
dimenus
is anyone having trouble building zig in mingw64?

1564663251
dimenus
linker complains about not being able to find a bunch of llvm libs

1564663254
dimenus
even though they exist

1564663360
nrdmn
which ones

1564663373
emekankurumeh[m]
no?

1564663694
dimenus
LLVMDebugInfoMSF/LLVMBitReader/LLVMCore

1564663694
dimenus
etc

1564663705
dimenus
they all exist in /mingw64/lib

1564663706
dimenus
hmm

1564664217
emekankurumeh[m]
are you static linking or dynamic linking?

1564664329
dimenus
i've tried both

1564664331
dimenus
same problem

1564664411
dimenus
it's like my path is hosed for some reason

1564664421
dimenus
can you ls /mingw64 for me?

1564664429
emekankurumeh[m]
so cmake is finding the libraries but, the linker can't

1564664435
dimenus
correct

1564664529
emekankurumeh[m]
hmm, I'm afk but I just have the base stuff if my mingw64 directory

1564664624
emekankurumeh[m]
what linker are you using? gnu-ld

1564664645
emekankurumeh[m]
it might be worth mentioning that I usually use lld

1564665086
mikdusan
mq32: yes you're right there is ambiguity with undefined methods in my proposal

1564665332
mikdusan
also a new type such as "interface" is very clear but am concerned it would lose the namespace ability of struct

1564665371
mq32
yeah, that's what i though about, too

1564665378
mikdusan
an alternative would be to remain struct but mark the special functions with a new keyword "method". i mused about this a bit:

1564665428
mikdusan
if using 'method' kw, we could also drop `self: @This()` and make it implicit. only 1 issue would remain: constness of self.

1564665508
mikdusan
i suppose this could handle it: `const format = method(out: *Stream) Error!void;` would be whatever default is. i suppose mutable.

1564665529
mikdusan
and `const format = method const(out: *Stream) Error!void;` but that's a lot of const's

1564665673
mikdusan
a complete flip on this could be; where we have `const format : fn(self: @This(), out: *Stream) Error!void = undefined;`

1564665700
mikdusan
could become `const format : fn(self: @This(), out: *Stream) Error!void = abstract;` or somesuch.

1564666049
mq32
oh man

1564666069
mq32
having

1564666147
mikdusan
what if 'interface' was used... and it's simply a restricted-struct in two ways. 1. no fields. 2. fn with first arg @This() are semantics of a method.

1564666321
mq32
i though something like this, yeah

1564666350
mq32
but i don't like it, because it doesn't follow the "one obvious way" rule

1564666355
mikdusan
true

1564666509
mikdusan
premise that a new kw is required: here's just vanilla subst of 'fn' -> 'method' and what one would think it means at first impression:

1564666531
mikdusan
1. `const format = method(self: @This(), out: *Stream) Error!void`

1564666545
mikdusan
2. `const format: method(self: @This(), out: *Stream) Error!void = undefined;`

1564666585
mikdusan
so does 1 mean here's a method and it should be followed by braces and statement body?

1564666649
mikdusan
i have to look at #1717 some more.

1564666699
mq32
mikdusan: 1. would still just be the function type, 2. would be an undefined function

1564666717
mq32
the idea of #1717 is that you declare function values similar to struct values

1564666726
mq32
type, '{', contents '}'

1564666799
mikdusan
1a. `const format = method(self: @This(), out: *Stream) Error!void;`

1564666811
mikdusan
1b. `const format = method(self: @This(), out: *Stream) Error!void { ... };`

1564666846
mikdusan
so 1a is type. 1b is method, and 2 is only way we can make undefined method?

1564666914
mikdusan
i'm ok with that. just want to make sure i grok.

1564667126
mq32
hmm

1564667148
mq32
wait

1564667157
mq32
we are in Zig. We can comptime all the things

1564667185
mq32
const format = @interfaceMethod(fn(self: @This(), out: *Stream));

1564667227
mq32
format would then be an "undefined method" in terms of "yes, it's a function, but it's not callable"

1564667271
scientes
comptime all the things!

1564667284
scientes
mq32, actually there are some serious limitations in stage1 right now

1564667299
scientes
to comptime

1564667304
mq32
yeah, i've noticed

1564667320
mq32
but we can make builtin functions that do arbitrary stuff like returning a function pointer

1564667341
mq32
but i'm still not okay with this solution

1564667362
mq32
my basic problem that an "interface method" is neither a function nor a function pointer nor a function type

1564667376
mikdusan
friendly reminder the 'method' keyword was an excercise to see how much just makes first-impression sense with the Zig way.

1564667396
mikdusan
so if it creates confusion it might simply be the wrong approach (ie. the 'method' keyword)

1564667449
scientes
are there and std methods to get the bit width of a type?

1564667454
scientes
or do i have to write that

1564668035
scientes
TODO implement inferred return types

1564668036
scientes
fffff

1564668242
dimenus
emekankurumeh[m]: i think my issue was having llvm/clang in my windows path

1564668248
dimenus
somehow it was confusing the linker

1564671570
emekankurumeh[m]
for the zig package manager perhaps we can model it after pacman in some regards

1564671623
emekankurumeh[m]
i.e. have a main package repo/list but have functionality for adding others

1564671635
fgenesis
at least you didn't suggest node.js

1564671820
emekankurumeh[m]
node.js will come for free when we reach 1.0 and ship the compiler as an electron app /s

1564672280
fengb
I'd be curious if we could make a semi-decentralized web of trust

1564672361
fengb
I definitely feel like we should have strong "core" packages, but there should be major differences between defacto standards, decently maintained, and completely untrusted

1564672386
fengb
AUR kinda just smoshes the last 3 together

1564674720
fgenesis
so i just read up about stackless coroutines in

1564674734
fgenesis
assuming no recursion, getting the size of the call stack is super nice

1564674779
fgenesis
but what about 1) a function that calls a function pointer somewhere? then it's not comptime known anymore i guess?

1564674811
fengb
FP signatures are known so the stack size is known

1564674814
fgenesis
and second, anything like _alloca() will break comptime too?

1564674830
fengb
Oh I guess that only works 1 level

1564674847
fgenesis
yes but you don't know the size of the stack that a function behind the pointer will use

1564674862
fengb
Hmm good point

1564674863
fgenesis
if it has to spill locals etc

1564674885
fengb
Zig is removing varargs so there shouldn't be a way to dynamically expand the stack

1564674891
fgenesis
alloca() is the best example but there are many other cases where this only works 1 level

1564674937
fengb
Yeah and any FP that's recursive is a potential problem

1564674960
fgenesis
anyway i think that alloca() is too useful to kill it

1564674965
fgenesis
or anything similar

1564674978
fgenesis
yes, it's Very Unsafe (tm)

1564674984
andrewrk
zig used to have alloca, it got removed

1564675003
fgenesis
ah, oh. so you'd make a stack allocator, how?

1564675018
andrewrk


1564675047
fgenesis
upper bound? that's great

1564675051
andrewrk
non-statically-bounded stack allocation is unsound

1564675063
fgenesis
solves the problem in a way i didn't even think of

1564675090
andrewrk
it's basically the same thing as having an array on the stack

1564675101
andrewrk
so do that instead of alloca

1564675109
fgenesis
as in, u8 buf[9000] and go from there, i see

1564675139
andrewrk
yes, and if you don't want to pay 9000 bytes of stack size, then don't put it on the stack. but the fact is that is how much stack you might use if that's your upper bound

1564675180
fgenesis
i actually prefer using _malloca() and _freea(), even for C++ things, but sadly that's a MS extension. not too hard to implement portably tho

1564675210
fgenesis
but then the whole global allocator nonsense starts again, so yes, the allocators look a lot cleaner :)

1564675270
andrewrk
fgenesis, look at std.heap.stackFallback

1564675345
andrewrk
looks like the uses of it got removed, but it puts an array of whatever (comptime) size you want on the stack and uses that for memory, falling back to a backup allocator

1564676515
autodidaddict
My C skills are pretty rusty.. mostly on the build side. Is there a good book that will help refresh my memory of its foundations to help with my understanding of where Zig fits in this space?

1564676552
autodidaddict
for example, my exposure to things like cmake is only involuntary when something I need requires me to use it

1564676705
andrewrk
autodidaddict, I don't think you need a book to grok build systems. the idea is to avoid introducing an additional system dependency while providing a way for a project to have a build script

1564676773
autodidaddict
I was watching your Lua video and I started having horrible flashbacks of events I thought I'd forgotten - hours/days spent twiddling .h files to make things work

1564676820
autodidaddict
So I thought clearly this is some dark magic I've long since forgotten

1564681641
dimenus
does zig emit CodeView or DWARF for mingw?

1564681645
dimenus
CodeView I imagine?

1564682344
mq32
andrewrk, are you going to stream later?

1564683934
DutchGh0st
I have a question about the reallocFn on the allocator defined in std.mem

1564683969
DutchGh0st
When exactly should it return an error, and when exactly should it 1) alloc something new, and 2) realloc in place?

1564684678
fengb
Whenever reallocFn cannot provide the space, it should return an error

1564684728
fengb
Are you writing your own allocator?

1564684815
DutchGh0st
Yes

1564684820
DutchGh0st
a stack allocator

1564684903
DutchGh0st
so it can basically shrink in place, but not grow in place

1564684909
fengb
The error should happen if you can't allocate a block. This can be for any reason: max size, no contiguous memory, etc.

1564684911
DutchGh0st
its literally the simplest thing ever

1564684930
DutchGh0st
I dont even keep track of the free regions within the array

1564684952
fengb
Hmm... that sounds like the FixedBufferAllocator

1564685032
fengb
For in-place realloc, you can simply return the same base pointer address with the updated slice

1564685198
DutchGh0st
if (new_size <= old_mem.len) { return old_mem[0..new_size]; }

1564685203
DutchGh0st
I guess thats fine?

1564685322
fengb


1564685345
fengb
"When the size/alignment is less than or equal to the previous allocation, this function returns `error.OutOfMemory` when the allocator decides the client would be better off keeping the extra alignment/size"

1564685373
DutchGh0st
Well I donno, the client wanted to shrink, so they get a shrink

1564685376
fengb
So you can either shrink in place or error out indicating the allocator doesn't really support shrinking

1564685408
DutchGh0st
I mean its fine to say like "ohh first I have an allocation of a thousand bytes, and I realloc it to 900 bytes"

1564685409
fengb
An explicit shrink calls the shrinkFn, which should never fail

1564685437
DutchGh0st
so what should I do according to the docs of the function? error out?

1564685493
fengb
Yeah, it's up to the caller to decide whether to do a shrink or realloc(smaller)

1564685505
DutchGh0st
Honestly it would perhaps be simpler if it was just 3 function, alloc, realloc and shrink/free

1564685527
fengb
It used to be

1564685528
DutchGh0st
instead of realloc handling both new and realloc

1564686267
fengb
DutchGh0st:

1564686349
fengb
There's also a proposed change to make "shrinkFn" optional to indicate that the memory is not reclaimable

1564686462
DutchGh0st


1564686470
DutchGh0st
thats the allocator

1564686646
DutchGh0st
instead of passing in a slice, it makes the buffer for you basically

1564686660
DutchGh0st
I guess I could set it to undefined as well

1564687683
fengb
That looks fine. Looking at this, I wonder if FixedBufferAllocator should have this intrusive variant in std

1564687743
fengb
I suppose it saves only 1 line of code so maybe not worth it

1564687788
DutchGh0st
Well Im annoyed by the fact that if I only want the allocator, I also have to create a buf in std's variant

1564687830
DutchGh0st
while I can just say: yeahh whatever, give me an allocator that can fill 1024 bytes

1564687927
fengb
Yeah I get it. I think this is the more "natural" way of using it but it's slightly less flexible

1564687943
fengb
I don't think I've ever reused the buffer, but it's a possibility

1564687948
DutchGh0st
fengb, would you say that std.ArrayList backed by a stack allocator, is actually an array with a dynamic interface (think like push and pop etc)

1564688174
DutchGh0st
I think its cool you can just do that. In Rust for example there is std::vec::Vec, which is dynamic and uses heap allocation, and there is this crate called ArrayVec which provides the same functionality as a Vec, but uses a stack buffer. However, thats twice the code there

1564688241
fengb
Yeah, I really love how explicit allocators enable better code

1564688298
fengb
One thing I haven't toyed with is an ObjectPoolAllocator, but I imagine it'd be similar

1564688330
DutchGh0st
the only thing is that a native ArrayVec doesnt need to call stuff like `realloc` because it already knows its size, while stack allocator + vec still calls the allocators realloc function once a while, doing copies that could be avoided

1564688381
fengb
You might be able to get a bit complicated and support in-place enlarging

1564688428
DutchGh0st
if you enlarge the last allocation its easy, just bump the cursor along

1564688493
DutchGh0st
but how do you know its the last allocation? you could place like a u32 before each allocation, which would stand for some kind of generation key or something

1564688519
DutchGh0st
and then also hold the current generation as a field in the allocation, and if they match its the last one, yeah

1564688632
DutchGh0st
I guess the type holding the generation could varry, a stack allocator of only a thousand bytes can have a thousand generations, which fits in a u26

1564688636
DutchGh0st
*u16

1564688689
DutchGh0st
but then the buffer would become 1000 + 2000, because a thousand u16 is 2000 bytes

1564688764
fengb
Hmm, I was thinking each data structure could have its own allocator, but I guess that's a limited assumption

1564693352
dimenus
how do i make a subslice of a bigger slice?

1564694434
fengb
biggerSlice[start..len]

1564694614
dimenus
yeah idk why i was making it more complicated than it is

1564698383
batok
no streaming today?

1564698434
andrewrk
I'm either going to do a late one or do it tomorrow, i'm on a roll with async functions and won't be stopped

1564698499
emekankurumeh[m]
nice

1564698978
dimenus
is there a way to debug a library with gdb?

