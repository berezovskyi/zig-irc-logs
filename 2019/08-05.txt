1564967339
nairou
Isn't "zig cc" supposed to be the same as using "clang"? My project builds fine with clang, but "zig cc" can't find any system includes.

1564967365
andrewrk
nairou, don't use "zig cc". Use the higher level CLI

1564967412
andrewrk
zig cc is not a supported interface

1564967422
nairou
I'm experimenting with a project that is all C right now. No build.zig yet.

1564967424
nairou
Ah

1564967459
andrewrk
zig build-exe --c-source -std=c99 main.c --c-source -std=c99 other.c

1564967509
andrewrk
one of the major differences between zig as a C compiler and clang is that zig does not depend on any system-installed things unless you explicitly ask it to

1564967536
andrewrk
and that's why the -target option works better with zig - because zig provides all the necessary things for whatever target you choose

1564967538
nairou
Ah okay, makes sense

1564967586
nairou
I was trying to ease my transition by getting the existing makefile working with zig, looks like I need to dig a little deeper :-)

1564967605
andrewrk
you can still do that, but use zig build-obj

1564967637
andrewrk
and you may need to modify some of the flags. see `zig --help`

1564967670
nairou
Sounds good, thanks

1564969369
scientes
what is this block doing?

1564969380
scientes
and why does it have to compare against zero?

1564969424
scientes
same for floats about it

1564969480
andrewrk
scientes, that's implementing @mod

1564969486
scientes
oh i see

1564969558
scientes
oh woah, llvm's select works with vectors

1564969564
scientes
but I think my user-space version is just fine

1564969691
scientes
I actually know it is for ppc because i filed the bug

1564971207
nairou
Is there documentation for the Builder API? Website documentation shows examples but doesn't explain parameters, like for addObject and addExecutable and the like.

1564971394
daurnimator
nairou: no there isn't

1564971540
nairou
Okay. Well, for example, Builder.addObject(). Second parameter is the source file name, but the first parameter... I assume it isn't just an arbitrary string, but I don't know what it's for.

1564971841
nairou
Digging through zig source for them, I guess I'll experiment :-)

1564972135
daurnimator
nairou: the name is... the name of the object :P as in, e.g. what should the file name be derived from

1564972642
nairou
Derived from? Is it for the sake of debugging and showing object names?

1564972814
nairou
Even addExecutable has a name parameter. I guess I don't understand what that would be used for. If you've giving a bunch of files to be built, why label each one with a separate name?

1564972961
daurnimator
nairou: builder.addObject is asking the builder to create an object file. i.e. output `<name>.o`

1564973013
daurnimator
nairou: likewise .addExecutable is telling the builder: create the file "name" (or e.g. "name.exe" for windows)

1564973029
nairou
Aha! Okay, that makes sense now. Thank you :-)

1564978691
hspak
what happened to the simple cat program example in the zig repo? I swear there was an exmaples/ folder somewhere

1564978964
daurnimator
hspak: was removed a week or 2 ago

1564979017
daurnimator
hspak:

1564979163
hspak
daurnimator: thanks, looks like they've got a new home in test/standalone/

1564979200
daurnimator
hspak: not so much. see

1564979337
hspak
hm I see, so likely not a long-term home

1564987059
daurnimator
gonz_: thinking back to the values conversation, I had a realisation today: "only one way to do things" means that "keep old APIs around for compat" isn't allowed. which really means you have to pick between "break things" or "stagnate"

1564987309
andrewrk
scientes, I added a src() method to AstNode for debugging purposes

1564987316
andrewrk
(gdb) p instruction.base.source_node->src()

1564987325
andrewrk
/home/andy/dev/zig/test/stage1/behavior/coroutines.zig:364:25

1564987328
andrewrk
I should have done this years ago

1564988239
bnbn
Hello I'm having some issues running tests that depend on libc and some other c libraries. Is their a standard way to setup tests so they pull in all the dependencies that my regular build.zig pulls in?

1564988281
andrewrk
bnbn, you can set up your build.zig to run your tests

1564988292
andrewrk
b.addTest

1564988312
bnbn
and they will be run on compile or run?

1564988313
andrewrk
combine that with b.addStep and you can give a nice API to the zig build user. look at the zig repo's build.zig for example

1564988322
bnbn
ok thank you!

1564988361
andrewrk
you'll probably want to set up a separate testing step and start doing `zig build test` when you want to test

1564988419
bnbn
ok, that makes sense.

1564989204
bnbn
cool, just got it work. thank you again :)

1564989241
gonz_
daurnimator: That's a great observation.

1564989330
gonz_
Though I guess most languages do also grow into having "stability" as a core value, for the most part.

1564989348
gonz_
The ones that are used by people in their early days, at least.

1564989402
daurnimator
gonz_: indeed. eventually you want to be stable. though maybe not always: if you can provide e.g. an upgrade tool as go/rust have

1564989423
daurnimator
though really, stability pretty much becomes a requirement as soon as you have multiple implementations

1564989438
daurnimator
otherwise you get different implementations having different subsets.

1564989906
andrewrk
a couple more things in the async function rewrite left to do and I'll have all the behavior tests passing

1564989922
andrewrk
then it'll be the true test: reviving std.event.Loop

1564990015
daurnimator
andrewrk: should be able to merge the branch though before std.event.Loop is fixed though?

1564990034
daurnimator
andrewrk: FWIW I've got it on my radar to replace std.event.Loop with my own concepts....

1564990118
andrewrk
in my mind the main use case driving async functions is std.event.Loop

1564990128
andrewrk
so I'm definitely going to do it as a proof of concept before merging

1564990162
andrewrk
I'm curious what your issues with std.event.Loop are

1564990163
daurnimator
andrewrk: so a frame pointer is usize, right? and you can `resume framepointer`?

1564990191
andrewrk
you're asking if it's a fat pointer or not?

1564990222
andrewrk
it's not a fat pointer, you can do @ptrToInt() on an `anyframe`

1564990228
andrewrk
and yeah you can resume it

1564990246
andrewrk
if you want to await it though you need an `anyframe->T`

1564990908
daurnimator
andrewrk: okay cool. that lets me know what to store in e.g. the uring extra field or the epoll udata field

1564991006
daurnimator


1564991329
andrewrk
ah ok this is for a better solution to the file system than a dedicated thread

1564991387
daurnimator
andrewrk: also sockets (soon)

1564991395
andrewrk
yeah so the idea is that the low level function, e.g. read() or whatever, it does the syscall, but if it gets EAGAIN, then it does this: suspend { give_the_kernel_my_pointer(@frame()); }

1564991418
andrewrk
and the other code does resume on that. and that's it. now async/await works everywhere

1564991488
daurnimator
andrewrk: with uring you don't try the read first -> you go directly to the give_the_kernel_my_pointer

1564991500
daurnimator
but yes, that is how epoll would work

1564991511
andrewrk


1564991555
andrewrk
I thought the whole point of uring is that you can do some I/O without syscalls

1564991598
daurnimator
andrewrk: yes that's correct -> you have a circular buffer of operations to do, you append and the kernel reads.

1564991639
daurnimator
but unless you use a rare (requires extra permissions) mode; you still have to do one syscall to 'step' the loop

1564991671
daurnimator
so you can e.g. queue up 100 operations: some reads, some writes, whatever, and then submit with one syscall

1564991779
daurnimator
andrewrk:  my intention is that you would write different "backends" for loops. we'd have a uring one, an epoll one, a select() one. -> for most programs, you'd try and do the uring syscall, and if not available fall back to epoll, if not available fall back to select().

1564991861
daurnimator
(this picking a fall-back procedure would happen once on program start up)

1564991916
andrewrk
epoll was added in linux 2.5.44 which is well below the minimum supported linux version which is 3.16

1564991943
daurnimator
yeah but IIRC e.g. linux-on-windows doesn't support epoll?

1564992006
daurnimator
select() is also just a really old API, so it's a good fallback across lots of operating systems.

1564992283
andrewrk
if linux-on-windows isn't identical to actual linux in terms of ABI then it should be a distinct target

1564992317
andrewrk
with the windows version additionally being part of the target

1564992416
daurnimator
andrewrk: except the whole point of it from the windows side is binary-compatibility

1564992476
andrewrk
if that's the case then it's not a valid argument to say that epoll isn't available. it can't be both ways

1564992517
gonz_
WSL2 will have a whole linux kernel shipped with Windows

1564992522
daurnimator
that argument is "above my paygrade" the pragmatic solution is to fall back to select()/poll().

1564992533
gonz_
Including all syscalls, as far as I understand

1564992542
daurnimator
gonz_: tis.

1564993509
andrewrk
good night

1565001154
daurnimator
inline defer isn't a thing is it..... `if (a) defer a.deinit()`

1565001165
daurnimator
gotta be `defer { if (a) a.deinit() }`?

1565001468
daurnimator
ooo interesting possible idiom: if you have a !? and you want a ?: `x catch null`

1565002767
daurnimator
huh... "Terminator found in the middle of a basic block!" never had that error before

1565009498
scientes
daurnimator,

1565009539
daurnimator
scientes: I guess after he melts into the pot of iron he does get stuck in the middle of a basic block.... :P

1565013813
fengb
Hey I'm seeing defer capture a copy of the variable. Is that desired?

1565014156
fengb
Oh wait it's something else

1565014184
fengb
Is there a "noerrdefer" keyword?

1565016839
samtebbs
fengb: What would it do?

1565017014
fengb
Only run if there's no error

1565017025
fengb
Not a big deal. I just worked around it

1565017427
fengb
Vague thought: what if we attach an enum to the defer keyword? defer(.err), defer(.noerr)

1565017531
samtebbs
Hmm, doesn't `defer` do that though? Not sure as I've never used it

1565017584
samtebbs
Scratch that :p

1565017753
fengb
It's an edge case where I only want to defer after the line that errors... but the logic needs to run before it

1565017796
fengb
But I wonder if it's more natural to standardize around different scopes of deferrable

1565018511
samtebbs
That would match what's going on with the calling convention enum

1565018520
samtebbs
The problem is that it may look like a function call

1565019109
fengb
I was thinking it could match if(), while(), etc.

1565019303
fengb
I'm also shooting from the hip because of my 1 usecase. I've no idea if this is generally useful

1565019635
scientes
fengb, annonymous functions should fit that use case, right?

1565019987
fengb
Nope. I'm already deferring a block

1565020027
fengb
Actually this wouldn't help me since I needed to reference an out of scope variable anyway

1565022312
daurnimator
andrewrk: is there some weird workaround happening here?

1565022426
daurnimator
also, in gdb, how do you call an function that can error?

1565022473
andrewrk
daurnimator, those are global variables that are only accessible from within that function. that's all the S= struct thing is

1565022526
andrewrk
it should be able to be called the same way

1565022550
nrdmn
daurnimator: I replaced some integer bit fields with structs as you suggested. Feel free to test it ;) I don't have much time in the next few days unfortunately

1565022566
daurnimator
andrewrk: `p self.seekToFn(self, pos)` failed with: `Invalid data type for function to be called.`

1565022602
andrewrk
interesting

1565022618
andrewrk
maybe the debug info is whack

1565022640
daurnimator
`p self.seekToFn` gave me `$3 = (enum anyerror (**)(struct builtin.StackTrace *, struct std.io.seekable_stream.SeekableStream(anyerror,anyerror) *, u64)) 0xaaaaaaaaaaaaaaaa`

1565022657
daurnimator
which I eventually saw was undefined

1565022674
daurnimator
but I was curious why gdb failed with "Invalid data type for function to be called."

1565022693
daurnimator
I also haven't figured out

1565022800
andrewrk
ohh yeah you didn't give the correct number of args because of the stack trace

1565022823
andrewrk
that's interesting, it might be worth coming up with a way to do that for debugging purposes

1565023202
daurnimator
andrewrk: sent my WIP for this issue as #3014

1565023221
daurnimator
I need to head to bed

1565023245
andrewrk
daurnimator, nice. is this related to

1565023290
daurnimator
andrewrk: no. its just a part of #2300 that I realised wouldn't be too hard to do as I worked on #2458

1565023295
andrewrk
ah nice

1565023319
andrewrk
good night

1565023329
daurnimator
btw, CI on #3005 just passed :)

1565023434
andrewrk
nice work

1565023527
daurnimator
There's still a few memory leaks in there.... and an fd leak. But I think they mostly should wait for a refactor of SeekableStream.... that interface is so weird.

1565023551
daurnimator
(no leaks that I've added: ones that have been there all along)

1565026045
gamester
The root file of a package contains the package's public interface. The standard library uses its public interface internally as well by importing std. For non-public things are relative imports used? Is a root file used for executables, or rare elative imports used?

1565027239
andrewrk
gamester, file paths in @import are relative to the current file

1565027434
gamester
andrewrk: Yes but how should a program (not library) be designed? Just import the file that's needed like in C/C++?

1565027513
andrewrk
yeah that's what I would do

1565027539
andrewrk
my app would probably be split into packages anyway

1565029289
scientes
I'm really tired of gdb and lldb not understanding variables that are in registers

1565029298
scientes
and clang and zig working around that

1565029367
andrewrk
scientes, dwarf has a way to specify variables that are in registers and I'm fairly certain gdb supports them

1565029384
andrewrk
there may be more to this story than you're seeing

1565029391
scientes
yes, good point

1565029642
nairou
I was actually wondering something similar to gamester's question. When looking at existing projects containing multiple sources files, and how they are organized, I see some cases where multiple files are added to the build.zig, and some cases where only the main source file containing the entry point is specified in build.zig, with the other files being used only via import. Is there much of a difference between the two? In theory, the entry point is the only

1565029642
nairou
part of a project that isn't used by some other part of the project, so would that mean you almost never need to add more than the main file to build.zig? Or am I missing something?

1565029697
andrewrk
nairou, start with only one file in build.zig, and only make it more complex if there's a reason to. if you point me to the specific examples I can probably explain them

1565029920
nairou
So different from what I'm used to with C/C++, but so much nicer. I'll find that example that specified multiple files.

1565030296
euantor
andrewrk: Quick question about os.getrandom() (again ;)), on Windows it uses RtlGenRandom which is defined as taking a `ULONG` in Windows, which is 32 bit unsigned, but we pass in a `usize` - am I right in thinking that `usize` would be 64 bit on a 64 bit platform? If so, that will need handled and I'll open another issue

1565030472
andrewrk
euantor, that's right - looks like I made a mistake when declaring the extern function, in std/os/windows/advapi32.zig it has the type usize but it should be ULONG

1565030517
euantor
no problem, will open an issue and look at fixing that

1565030573
andrewrk
I wonder if there is an NtDll api for getting random bytes

1565030592
andrewrk
oh! I learned how to find this out

1565030608
dimenus
andrewrk: wow, you've been making a lot of progress on coroutines

1565030636
andrewrk
dimenus, yeah! It's been going really well. I'm pleased with how the semantics are turning out

1565030769
euantor
There seem to be a lot of slightly different ways of getting random bytes on Windows

1565030794
euantor
RtlGenRandom seems to be the most commonly used when looking at projects like lib sodium and the Rust rand crate

1565031534
andrewrk
procmon shows nothing for RtlGenRandom

1565031708
andrewrk
maybe it's actually in NtDll, not advapi32, because that's usually what the Rtl prefix means

1565031774
dimenus
RtlGenRandom is not really named RtlGenRandom

1565031793
dimenus
This function has no associated import library. This function is available as a resource named SystemFunction036 in Advapi32.dll.

1565031797
dimenus


1565031844
dimenus
Do you need crypto random or just "random enough"

1565031876
andrewrk
crypto

1565032112
andrewrk
dimenus, btw I've settled on the nomenclature

1565032128
andrewrk
I'm going to stop calling this "coroutines" and start calling it "async functions"

1565032155
dimenus
more people will know what that means :P

1565032163
andrewrk
because that's really what it is. it's a function that can be started and finished in separate locations

1565032181
andrewrk
for normal functions, the start and finish is the same: at the callsite

1565032256
dimenus
new crypto api ->

1565032270
dimenus
@euantor

1565032362
euantor
Unfortunately that has a much wider API

1565032363
andrewrk
why is the api so complicated, the function should be simply: generateCryptographicallyRandomBytes(buffer: []u8)

1565032381
euantor
You have to open a provider, then use that provider to get your bytes, then close the provider

1565032407
euantor
And if I remember correctly it's Vista+. I'm not sure on Zig's supported Windows versions though so that might not be a problem

1565032419
andrewrk
euantor,

1565032419
dimenus
i'm actually not opposed to having a verbose api available

1565032422
dimenus
just provide a higher level one

1565032422
andrewrk
windows 7+

1565032426
euantor


1565032462
euantor
Ah, I was looking for that table a couple of days back but couldn't find it. Should have thought to check the website rather than just the repository

1565032547
fengb
Maybe it's just the JS in me, but I've always associated "coroutine" with the actual data structure backing and "async" with syntax sugar

1565032567
dimenus
XP+ ->

1565032591
andrewrk
many people hear "coroutines" and think "user-level threads with their own stacks" (e.g. goroutines)

1565032623
andrewrk
I believe "async functions" will be the best way to communicate how it actually works

1565032655
dimenus
sigh, my zig build on windows is complaining about atomicRmw being an invalid builtin

1565032657
andrewrk
dimenus, we had CryptGenRandom but improved it to RtlGenRandom

1565032660
dimenus
even though it's clearly in the source

1565032665
dimenus
and the std lib

1565032703
dimenus
andrewrk: MS doesn't guarantee the availablity of RtlGenRandom

1565032720
andrewrk
their hands are tied though, they'd break so many applications

1565032747
andrewrk
they're never going to take it away

1565032767
andrewrk
it's like J-walking when there are already 20 ppl in the street

1565032777
fengb
Ah okay, I've only worked with stackless coroutines in the past. And JS variant isn't even real coroutines but maybe that shouldn't be the biggest driver

1565032788
euantor
yeah, OpenSSL uses it, and libsodium uses it. Both of those are used quite heavily and would just break

1565032841
andrewrk
dimenus, also the docs for CryptGenRandom says Important  This API is deprecated. New and existing software should start using Cryptography Next Generation APIs. Microsoft may remove this API in future releases.

1565032858
dimenus
yeah, which is why i mentioned the next gen one first

1565032874
andrewrk
IMO RtlGenRandom is fine

1565032880
dimenus
and it is simpler

1565032887
dimenus
(RtlGenRandom I mean)

1565032963
nairou
Noob question: Why go to the OS for a random number when you could use something like PCG and know it's crypto regardless of platform.

1565032981
fengb
We should have zigroutines

1565032995
andrewrk
nairou, for the seed

1565033018
andrewrk
it's a good question, with a strong answer

1565033038
andrewrk
fengb,

1565033423
dimenus
do we not have CI for the msvc toolchain?

1565033453
andrewrk
dimenus, you can click the x or check in the commits and see all the ci jobs

1565033492
dimenus
oh i was just confused because it's invoking bash

1565033518
scientes
oh RLY, so MSFT gave up on their hate for GPL?

1565034940
dimenus
i keep getting the equivalent of this issue:

1565034943
dimenus
but only for one builtin

1565034949
dimenus
and the builtin exists in both codegen.cpp and ir.cpp

1565035097
gonz_
Disliking GPL isn't really unique to Microsoft. It wouldn't be a stretch to say that most companies don't want to deal with it.

1565035245
gonz_
A lot of companies are pretty confused when it comes to licensing as well. When I was working at Creative Assembly we were told that GPL'd libraries aren't going to be approved for use and anything with a weak copyleft license is basically going to go straight through if it provides value.

1565035267
gonz_
That, as far as I know, came straight from SEGA lawyers.

1565035437
fengb
Apple was fine with GPL2 and refuses to touch GPL3 with a 10 foot pole

1565035452
scientes
a 5280 foot pole

1565035517
scientes
hell, we wouldn't have llvm (and zig) is that wasn't the case

1565035587
dimenus
but it builds fine on mingw64 o.0

1565035589
dimenus
this is so strange

1565047138
AlexMax
What the heck does "use" do?

1565047245
AlexMax
I think I saw some code that did use @cImport({ // etc...

1565047279
nairou
Doesn't it dump the import contents into the global namespace?

1565047291
AlexMax
Use is such a common word that searching it in the docs is fraught with peril

1565047522
scientes
AlexMax, yeah it imports all the symbols into the current namespace

1565047866
fengb
It’s been renamed to usingnamespace

1565047867
hryx
AlexMax: `use` has been replaced with `usingnamespace` on master

1565047873
hryx
oh jinx

1565047962
fengb
Currently both work but use will be removed by 1.0

1565048619
scientes
yeah we need to ask for the most recent glibc symbol

1565048624
scientes
the compat functions suck

1565048830
scientes
Unable to hash /home/shawn/git/zig-simd/build/lib/zig/libc/musl/src/signal/sigaddset.c: file system error

