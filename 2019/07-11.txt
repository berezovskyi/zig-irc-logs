1562803282
dimenus
emekankurumeh[m]: missing symbols

1562803291
dimenus
as andrewrk said, it's a fullpath issue

1562803301
dimenus
however, i don't know why we need to generate .def/.lib files for libs that already exist

1562803311
dimenus
since the linker will need to reconcile that anyway

1562803320
dimenus
it's one of thing if we're not linking libc, but when we are

1562803324
dimenus
it's better to just pass the full lib

1562803377
andrewrk
dimenus, master branch doesn't have lib files available when cross compiling

1562803380
dimenus
Zig automatically generates def files for symbols it needs that are defined in the standard lib, but a c library we might be linking with (this is a problem when statically linking) might require more

1562803418
dimenus
andrewrk: sorry, I'm confused by the comment. I'm not referring to cross compiling here - just the issue I was encountering

1562803542
dimenus


1562803572
dimenus
but since we're linking libc in this scenario, better to just not generate lib/defs for those libraries anyway

1562803600
andrewrk
dimenus, sorry I thought you meant "full lib" as in a .def file that was complete rather than the minimal ones zig generates

1562803621
dimenus
nope, I didn't modify any of that :P. when not linking libc - we still generate defs as expected

1562803692
dimenus
**minimal defs

1562805440
dimenus
hyrx/andrewk: is the type of an expression inferred upon assignment? or do eg variables tied to integer literals remain untyped until they're compared?

1562806586
hryx
dimenus: integer literals have type comptime_int, so they're not untyped. And then they stay as that type until casted to another integer type. a comparison may cause an implicit cast

1562806629
hryx
and likewise float literals have type comptime_float

1562806807
hryx
I'm pretty sure all expressions always have types, even before they're bound to variables, then implicit casting takes care of turning it into the right type as needed

1562806825
hryx
andrew could say for sure though

1562806860
andrewrk
that's correct

1562807563
andrewrk
josh merged his zig branch into master:

1562808178
hryx
very cool!

1562808763
daurnimator
Tetralux: you're running into 2270. should be solved with #2858

1562808886
daurnimator
andrewrk: no kernel32 isn't the stable syscall API on windows; it's the libc equivalent. ntdll is the stable syscall api.

1562808948
shachaf
I thought ntdll was undocumented with no stability guarantees.

1562809062
daurnimator
shachaf: yes and no. ntdll is half documented; it

1562809086
daurnimator
what

1562809128
daurnimator
ntdll is essentially syscall wrappers + the Rtl* API (Rtl = Runtime Library).

1562811364
Tetralux
daurnimator: Ta :)

1562811491
daurnimator
on windows you can sort of think of ntdll as a vdso.

1562816465
emekankurumeh[m]
andrewrk so what threading model are you using for mingw-w64 then? posix or windows?

1562816603
andrewrk
emekankurumeh[m], I'll push the branch

1562816652
andrewrk
emekankurumeh[m], windows-libc branch

1562818073
daurnimator
andrewrk: mingw should not be any-windows-any... maybe it could be any-windows-gnu... though there is more than one way to gnu on windows.

1562818121
andrewrk
I've only found one redistributable copy of windows.h & friends

1562818177
andrewrk
I think this may be able to satisfy the msvc ABI as well

1562818195
daurnimator
it's a superset of old msvc I believe.

1562818206
daurnimator
i.e. there is more than the basics in there... but also new msvc has more things

1562818367
daurnimator
andrewrk: looking at your PR.... why is e.g. GL/gl.h in there? although OpenGL is part of the windows sdk, it's not part of the kernel32 (OpenGL is its own library included in the windows sdk)

1562818427
andrewrk
zig is a self-contained cross compiling toolchain

1562818446
daurnimator
yeah but we don't include

1562818471
daurnimator
why ship (e.g.) opengl for windows but not linux?

1562818480
andrewrk
it would be more work (and therefore a future project) to separate optional components out of mingw-w64

1562818574
andrewrk
I agree that a more minimal core + package manager is the better future, but this does represent an incremental improvement

1562818604
andrewrk
this has always been a planned part of the zig package manager - ability to cross compile C libraries

1562818607
daurnimator
my immediate reaction is bloat and setting bad expectations.....

1562818823
andrewrk
you say the word bloat, but our hello world is still 6KB on linux, 4KB on windows. we're talking about a download tarball going from 30 MiB to 36 MiB and gaining the ability to cross compile for windows out of the box

1562818992
daurnimator
andrewrk: if I proposed shipping GL headers for linux as well... what would be the response?

1562819110
andrewrk
"wait for the zig package manager, it will solve that use case for you. in the mean time the workaround is to copy the library source code into your source repo, or otherwise fetch it as part of the build"

1562820917
darithorn
are errors types going to be strongly typed eventually?

1562820946
andrewrk
what does strongly typed mean?

1562820954
darithorn
right now they evaluate to integers so you can use them for slices.

1562820984
darithorn
it took me a second because my test passed that's using a slice even though it returned an error value

1562821050
darithorn
it being a function that returns either an error or an index that i then use to slice an array

1562821270
andrewrk
I'm not sure what you mean about errors evaluating to integers. there is no implicit cast from error sets to integers

1562821391
presiden
darithorn, maybe pastebin some code so we can see what you mean?

1562821609
darithorn
i figured out the issue. sorry, it was a bug in my own code

1562821654
darithorn
my loop was supposed to be breaking out but it wasn't so it was getting run again and that's where i got confused

1562821773
darithorn
maybe it's time to head to bed lol

1562822166
andrewrk
for me too

1562835075
daurnimator
Who was it that was playing around with zig and wasm?

1562835226
fubd
daurnimator: i have been

1562835288
daurnimator
fubd: have you tried to mix C code with it at all?

1562835329
fubd
i did try importing the chipmunk c library (which compiles great with zig build, btw)...but then realized that @cImport won't work without libc

1562835346
fubd
and mixing libc and wasm doesn't make sense, right?

1562835403
daurnimator
uh, I'm not sure... for somethings it does (e.g. memcpy). for other things it doesn't (e.g. fopen)

1562835414
fubd
yeah. that's where i got stuck

1562835433
fubd
i assume we'll need a "libc" for wasm

1562835485
daurnimator
fubd: well that's why we have the target wasm32-freestanding-musl

1562835498
daurnimator
I think musl provides those routines

1562835773
fubd
daurnimator: ah I see...I haven't tried to use musl yet

1562835779
fubd
let me know if you figure out how to

1562835834
daurnimator
I had quick attempt but it failed with an error about missing clang builtin library. I'll need to try again with a zig binary downloaded

1562835950
fubd
ok

1562835969
daurnimator
Wasn't sure if I'm on well-trodden ground or if I'm the first to try...

1562836745
fubd
daurnimator: haha, good luck :)

1562836759
fubd
if you want to share a build.zig or anything when you hit snags, let me know

1562836762
fubd
i'm keen to get this working

1562840133
fubd
for an game ecs system, I ended up doing some codegen because I couldn't figure out how to do compile-time state :(

1562851323
diltsman
Is there any read/write width guarantee on packed structs?

1562851819
andersfr
what do you mean by width guarantee?

1562852965
diltsman
Meaning that it is guaranteed to read/write an aligned word or something like that, rather than the smallest piece (often byte) that is sufficiently wide.

1562852984
diltsman
My use case is MMIO, but I just noticed in the documentation that it isn't viable for that yet.

1562853241
andersfr
a struct can have a preferred alignment but since you are doing MMIO you will probable be placing it explicitly with an @intToPtr

1562853792
fengb
Packed bitfields are designed for in-memory atm. There's an issue for MMIO:

1562853809
diltsman
Yeah, I saw that.

1562853845
diltsman
andersfr: My preferred method is to place a struct into a section that is (NOLOAD) and at the correct location.

1562854078
andersfr
no amount of syntax is going to help you with that - read it out as u32 and do bit casting or whatever to get the nice representation

1562854375
dimenus
fyi, for anyone trying to use vulkan:

1562855025
ntgg
I am trying to figure out interfaces, and I am running into an issue where I have to do something like `self.function(self, thing)`

1562855045
ntgg
longer example here:

1562855217
mq32
ntgg, what about a function that calls the function pointer?

1562855241
mq32
fn update(dt : f64) void { update_ptr(dt); }

1562855282
mq32
but i think i'd prefer self-callable function pointers as well. imho this would be enough to have usable interfaces

1562855330
fengb
I think it's just how Zig resolves ambiguity atm. The language can't really distinguish between `self.function(self)` vs `self.function(arg1)` on function pointers

1562855392
fengb
Even with methods, it doesn't really know the difference, so if you call `self.init()` it'll throw an error with first argument doesn't match type

1562855528
ntgg
mq32: That works, feels real awkward

1562855624
mq32
yeah

1562855654
ntgg
Is there some sort of tracking issue for interfaces?

1562855672
mq32
theres

1562855825
mq32
#1829 would be there as well

1562855878
fengb
Those are more internals. I don't think any work has been done on binding self to function pointers

1562855910
mq32
i think this would be sufficient for most of the cases we require interfaces

1562855928
mq32
just have a struct of function pointers or similar

1562855971
mq32
so more or less the COM pattern from windows

1562855987
fengb
We could have Lua style methods: self:method() => self.method(self)

1562856085
gonz_
I think people should slow down a little bit

1562856094
gonz_
Every time I check IRC there is some feature request/discussion

1562856125
gonz_
Everyone wants small and simple + that one feature

1562856139
gonz_
neglecting the fact that if everyone gets their way it's just C++ all over again

1562856155
mq32
yeah that's true

1562856161
fengb
I think discussing new features is fine. We shouldn't accept everything though :P

1562856180
mq32
but hey, i can argument with zen of zig, so... :D

1562856194
gonz_
I personally love traits/type classes, but maybe we just don't need them

1562856206
fengb
I think self-binding is a natural question for people new to the language. I had the same question, but I actually prefer explicit self argument now

1562856224
fengb
Oh traits and such. I'm gonna punt that back to #130

1562856292
mq32
i really like the self-binding style as it removes redundancy (my variable is of type T; so i can call a function T.fun with just the variable)

1562856312
mq32
reduces errors (by removing a redundant argumetn) and makes code more generic

1562856461
mq32
but on the topic of feature discussions: i have trust in andrewrk that he only includes the features he thinks will benefit Zig

1562856537
fengb
The problem with self-binding is that it's ambiguous atm. The compiler doesn't actually introspect the type

1562856558
gonz_
I'm sure no one sets out to hurt their own creation

1562856586
gonz_
The road to hell is paved with good intentions

1562856593
fengb
Stroustrup? >_>

1562856595
mq32
yeah, that's true

1562856625
mq32
fengb, can you make an example on ambiguity?

1562856678
fengb
The compiler doesn't know the difference between `self.func(self)` and `self.func(1)`

1562856688
fengb
When func is a function pointer

1562856709
fengb
Right now, it doesn't do anything fancy to do autobind, which is why you have to explicitly give it self

1562856731
mq32
so the actual problem is that we are allowed to have fields called the same name as static members?

1562856737
companion_cube
but you probably want self.vtable.func(self), if methods are in a static vtable (replaces n function pointers with one vtable pointer)

1562856769
fengb
There's no syntax for the compiler to autobind

1562856770
mq32
yeah, right

1562856801
mq32
as you said, Lua does it by having a separate call operator for that

1562856806
fengb
Yeah

1562856847
mq32
i think that's a good, but not optimal solution

1562858194
diltsman
Why can't I just apply a bitwise not to an integer constant (0x1234)?

1562858280
diltsman
I see that doing ~u32(0x1234) does work.

1562858352
diltsman
I assume that it has something to do with the integer constant being of unknown widht.

1562858650
fengb
Yeah, literals are all `comptime_int` until casted elsewhere

1562859160
diltsman
What is the idiomatic way to doing the equivalent of this in C: if (!my_int)

1562859869
fengb
if (my_int != 0)

1562859883
fengb
Er... my_int == 0

1562865299
andrewrk
I got accepted into GitHub Sponsors. What this means for donations is compared to Patreon, GitHub will not take 10% in fees, and for the first year GitHub will match the donation, doubling its effectiveness

1562865373
FireFox317
Congrats andrewrk with the Github sponsors thing!

1562865744
donpdonp
right on. congrats andrewrk

1562866085
mikdusan
nice!

1562866115
hryx
congratulations andrewrk! For existing patrons, I assume you'd like them to redirect their funds from Patreon over to GitHub?

1562866163
andrewrk
I do think it will be a better option - I'll send an email

1562869999
fengb
Congrats!

1562870725
mq32
nice thing, andrewrk! don't waste that money! :D

1562870887
dimenus
does Github take anything?

1562870904
companion_cube
not yet ;)

1562871260
torque
they actually do sponsorship matching currently, I think?

1562871268
torque
or is that only for select projects

1562871299
andrewrk
yes they match for the first year, but even after that the only fee will be credit card processing. patreon takes something like 8%

1562871356
fengb
That's a pretty big difference

1562871395
companion_cube
it might change in the future though? I mean, they've been bought my microsoft

1562871406
andrewrk
here's the way I see it: it's currently the best option

1562871430
companion_cube
yeah that makes sense for now, sure

1562872160
hryx
oh, github sponsorship doesn't allow custom amounts?

1562872183
andrewrk
yeah, and they also didn't allow me to make extra tiers that was just to make there be more amount choices available

1562872191
andrewrk
but they said that will be supported in about 3 months

1562872233
hryx
ah, ok

1562872238
andrewrk
hryx, thanks <3

1562872245
andrewrk
btw I wonder if a good stream topic today would be trying to merge your PR

1562872383
hryx
my pleasure :> and maybe! I imagine it would be mainly debugging?

1562872610
andrewrk
I should do the stream on  a windows machine

1562872860
hryx
phooey, I have a meeting during your stream. I'll have to watch the recording later

1562872873
andrewrk
oh btw I'm doing it an hour early today - in 40 minutes

1562873000
scientes
How do i got about debugging why something is not comptime?

1562873165
andrewrk
better error messages are planned in the future, but for now: @compileLog each value involved in the expression to find out if it is comptime

1562873185
andrewrk
track down the value that is not comptime. it's probably a function call or a `var` instead of `const`

1562873247
scientes
but can't var's be comptime?

1562873281
andrewrk
yes `comptime var`

1562873289
lunamn
is there a plan on adding sockaddr_un to std/os/bits/linux.zig's sockaddr? or is this going to be tackled on after coroutine rewrite?

1562873308
andrewrk
lunamn, linux types and stuff should be added asap

1562873340
lunamn
i see, was confused with the "this intentionally only has ip4 and ip6" comment while starting to write unix sockets

1562873365
andrewrk
it takes someone to think about the best way to represent the ABI that will be as posix-compatible as possible

1562873409
andrewrk
C sort of patches over this with the preprocessor, so we will have to be careful with how to represent the types in zig

1562873438
scientes
oh yeah that part of POSIX is pretty ugly

1562875363
andrewrk
ok stream will actually be in 30 minutes from now. 1. Demo new Zig features from last week. 2. Merge pull requests. 3. Q & A.

1562875715
scientes
hmm, should i submit my pull request i have sitting here, that is ready to go?

1562876009
andrewrk
realistically I will be lucky if I am able to complete hryx's in the stream

1562876017
andrewrk
live debugging is risky

1562876030
andrewrk
most of the time I just sit there looking like an idiot :)

1562876036
scientes
hehe

1562876075
companion_cube
only to people who have never debuggued anything!

1562876106
scientes
debugging is at least half of what it means to be a programmer

1562876120
mq32
scientes: 80%

1562876192
companion_cube
sometimes 80% is the time spent building 🙃

1562876214
mq32
companion_cube, i work with C++Builder

1562876227
mq32
one of my projects compiles like … 20 Minutes

1562876239
scientes
my god, that can't possibly be fun

1562876250
mq32
and i have a powerful 8 core processor :D

1562876262
scientes
get an EPYX or Talos II

1562876281
mq32
yeah, that's what real programmers want

1562876283
mq32
MOAR COARS

1562876289
companion_cube
heh, I use z3 and whenever I have to reinstall it, it takes a good 10 minutes

1562876388
mq32
i really hope that Espressif will get their LLVM port for the ESP32 ready…

1562876405
mq32
so i can use zig to develop instead of C

1562876572
scientes
oh that looks cool

1562876575
scientes
so gcc only right now?

1562876586
mq32
yeah

1562876600
scientes
you could also port zig to gcc haha

1562876614
mq32
just use the LLVM→C compiler, then compile with GCC

1562876621
scientes
that probably doesn't make much sense until stage2 however

1562876686
scientes
mq32, is that in-tree? I've not seen a C backend

1562876701
mq32
nah, it's not

1562876704
mq32
it was, for some time

1562876707
mq32
but it's not anymore

1562876733
mq32
i'd like to have some C89/ANSI-C backend with optimizers

1562876740
mq32
as the C backend i found is not optimizing well

1562876746
scientes
yeah but optimized to what?

1562876771
mq32
"less code"

1562876788
scientes
I don't think you can really even optimize a c backend well

1562876794
mq32
so, the backend i found outputs LLVM IR without any dead end elimination

1562876805
mq32
so you have one stack variable for every LLVM value

1562876816
mq32
memory reusing would be sufficient already

1562876820
scientes
oh well then you can't generate c89----well I guess you could just randomly divide by zero or something

1562876830
scientes
but I think you need __builtin_unreachable()

1562876863
halosghost
hehe

1562876869
halosghost
I like the idea of randomly dividing by zero

1562876870
scientes
so then it just becomes a gcc backend, and in that case why not just use a LLVM-IR to GIMPLE translator

1562876884
mq32
yeah

1562876899
mq32
i'm doing a lot of stuff with old computers and the most modern language you can find is sometimes C :D

1562876912
scientes
but i'm saying you can't optimize C

1562876916
mq32
but would be nice to code newer languages on old platforms

1562876918
scientes
only if you know what compiler you are using

1562876958
scientes
that's why compiler keep support for old platforms for a long time

1562877342
mq32
yeah, but i have the different problem

1562877361
mq32
i have compilers that aren't maintained since early 90ies and don't optimize well

1562877417
scientes
but what type of chip? This is why people still use the Z80, because it supports 8086 and thus has a decent compiler

1562877637
mq32
different stuff

1562877663
scientes
why can't you just use a ARM chip, so you get a super modern compiler?

1562877709
mq32
because platform is fixed

1562877721
mq32
in terms of: i want to code stuff for c64, …

1562877730
mq32
but there are no compilers out there that support modern languages :(

1562877810
mq32
got to go

1562878364
companion_cube
andrewrk: why do you hate `:x` so much? ;-)

1562879944
dimenus
has anyone proposed that you just always null terminate string literals?

1562880004
companion_cube
😱

1562880307
emekankurumeh[m]
I think that's the current proposal dimenus

1562880371
emekankurumeh[m]
that the type of string literals will be `[]const null u8`

1562880761
andrewrk
dimenus, yeah that's planned. the type will be `*[N]null const u8`

1562880803
andrewrk
companion_cube, you mean because I use :blk sometimes? I think :x is fine

1562880817
companion_cube
no, I mean in vim :D

1562880825
companion_cube
all these :wq

1562880829
andrewrk
what does :x do?

1562880869
companion_cube
same as :wq :)

1562880880
companion_cube
only, so much more efficient to type!

1562880886
andrewrk
:wq is actually easier for me to type! ironically, in dvorak, :wq means pressing the x key on the keyboard

1562880930
companion_cube
^^

1562880938
companion_cube
where were the questions asked, btw?

1562880971
andrewrk
twitch chat

1562880990
companion_cube
ah, I see. well maybe I should make myself an account then.

