1569717520
JinShil
Is there a way to get this to compile: `const ti = @typeInfo(u8); warn("Test: {}\n", comptime ti);`  It's emitting error: "arameter of type 'builtin.TypeInfo' requires comptime

1569717521
JinShil
"  I want to be able to print out some of the `TypeInfo` information from the compiler.

1569717613
Tetralux
You can use @compileLog(@typeInfo(T)) for that.

1569717624
Tetralux
Though I agree it would be cool if you could have TI at runtime.

1569717648
Tetralux
Or @compileLog(ti) for that matter.

1569718149
JinShil
Thanks.  It appears I can pull what I need out of TI into a `const` and then use that:  `const bits = @typeInfo(u8).Int.bits; warn("Test: {}\n", @intCast(u8, bits));`.

1569733291
mipri
/join #d

1569733295
mipri
gah

1569733855
presiden
nice

1569735655
rifkik
How would one render this code in Zig?

1569735659
rifkik
x.b.h = y.b.h = 0;

1569735870
mipri
looks like assignment's a statement rather than expression, so you'd have to have two assignments.

1569736177
mipri


1569761280
rsdimenus
is anyone around who is familiar with cross compiling LLVM/clang for armv8a (aarch64)?

1569766247
via
is there a long term vision on a way to improve the whole interfaces(function pointers)/async thing? specifically looking at implementing my own instreams and outstreams for a freestanding embedded targets with async read/write

1569766286
via
it looks like support is only implemented for in streams right now (no async writefn's for out stream), and requires the toplevel setting of the stack size and io mode

1569766364
via
but i could see that balooning into a lot of ugly root-level overrides for things to work

1569766430
via
it would be cool to have the interfaces be agnostic as to if the underlying functions are async, but i do get why that is not necessarily doable

1569766718
via
maybe they could take allocators instead of the hardcoded stack sizes? or take them in initialization somehow -- since isn't the stack size going to depend on where a stream (and what underlying read/write fn) is used, globally isn't ideal

1569766772
via
i could be misunderstanding things, i didn't realize the interfaces like for the streams needed to handle async specifically until i saw the most recent stream

1569767866
Tetralux
via: I think I asked a similar question a month ago or so; I believe andrewrk is waiting until the plan for interfaces is good for comptime and runtime and is easily switchable between them. I forget exactly the extent of what was said though, so maybe Andrew can repeat it - maybe there's an issue for it?

1569769335
via
cool

1569769372
via
maybe when thats more figured out, interfaces can be more common -- i'm hoping that the event loop becomes more of an interface, allowing site-specific implementations of a Loop

1569769391
via
so that you can reuse all the cool things like Channels and such, but on freestanding

1569769399
Tetralux
But yes - I too have found myself wanting to just say "so long as this done does this and this, I can use it for this"

1569769407
Tetralux
Writer, being the obvious example.

1569769417
Tetralux
.. meaning .write([]u8)

1569769498
via
i want to implement my own write that wraps over my stm32f4's usb cdc interrupt based code, which means i'll need to make my own loop-like thing that busy waits for things like that to be ready and resumes waiting write()s

1569769508
via
and use them with a out stream directly

1569769534
via
but i feel like i'll be duplicating a lot of work that is already in event

1569769540
via
but thats another issue

1569769732
fengb
Most of event is the old async and still needs to be rewritten

1569769776
Tetralux
I'm not sufficiently familiar with how interrupt are interacted with to give pointers on it, but yes, as fengb said, the event code, last I checked, has not been updated yet.

1569769817
Tetralux
Or did it get stealth-updated?

1569769823
Tetralux
Only 0.5 releases tomorrow.

1569769834
fengb
Interrupts will have to be manually wired in, but stuff like channels should be platform agnostic

1569769991
Tetralux
fengb: Array are also plat-agnostic and are faster xD

1569770060
via
fengb: but they all rely on the specific event loop implementation in event.Loop, which is pretty platform-specific and doesn't look to me to be extendable without zig std lib changes

1569770066
via
or are you saying thats what will be changing

1569770105
fengb
They shouldn’t once they’re done. Only loop stuff should be platform dependent

1569770154
fengb
Oh I see...

1569770157
andrewrk
a lot of the standard library is left over from the first iteration of async/await and needs to be rewritten with the new design in mind

1569770245
andrewrk
the only thing std.event.Channel needs to depend on is a way to ask for an anyframe to get resumed

1569770373
via
do you have a vision for how all that is going to work? things like the root-level configurables and/or maybe loops being an interface?

1569770387
via
i could see the latter being really painful

1569770520
via
it would cool to not even have to implement a write fn for streams, but be able to implement loop functions for taking fd's and writes/reads for a specific project -- and then use the rest of the stdlib around it

1569770591
andrewrk
yeah, that's the vision

1569770595
andrewrk
there is still some work to get there

1569770609
via
i could write up my thought process in an issue this evening, i know you're busy with the release stuff

1569770617
andrewrk
if you do that I will read it

1569770649
via
okay, thanks -- i also wouldn't mind taking a stab at implementing some things if i know where they're going. i'll write it up tonight

1569771504
akhetopnu
andrewrk when more or less do you plan on releasing the first stable (1.0?) version of zig with all the main features implemented?

1569771576
andrewrk
1.0 is still 2+ years out

1569771715
andrewrk
zig will get a lot more usable and stable leading up to that, but the official compatibility commitments, language spec, different release cycle, etc, is what I'm referring to

1569771744
andrewrk
it'll be pretty obvious when 1.0 is coming soon, because releases will be much less drastic

1569775790
jaredmm
On Windows: when trying to use libraries (like SDL), lld appears to be double-mangling the exported names it is looking for (two underscores instead of one). Everything works on Linux without issue. Reading through the issues, it looks like link.exe would find them correctly, but I don't see a way to force that.

1569775800
jaredmm
I also have issues with msvc headers not being found, so I'm wondering if this is all a result of a more general issue my Windows install has or if it is expected in Zig's current state.

1569776345
andrewrk
jaredmm, why would link.exe find them and lld not find them?

1569776426
andrewrk
ugh this is bad timing for sr.ht builds to stop working

1569776816
andrewrk
0.4.0: issues closed: 260

1569776826
andrewrk
0.5.0: issues closed: 350

1569776837
andrewrk
mostly due to increased contributions from the community

1569777323
jaredmm
andrewrk, it looks I may have mixed two unrelated issues. The upstream lld issue was related to builds halting (#1763), not linker errors. I even described this issue wrong, because I resolved the previous linking error with #3319. The current error is the opposite-> lld: error: undefined symbol: glfwSetErrorCallback where the exported name is _glfwSetErrorCallback.

1569777328
jaredmm
Apologies for that. Two days trying to get Windows working after 2 minutes on Linux has been frustrating.

1569777358
andrewrk
yeah this is one thing that the package manager will solve. everything will work the same on all systems

1569777441
andrewrk
jaredmm, can I see your build.zig file? how did you obtain glfw?

1569777458
andrewrk
are you trying to dynamic link or static link glfw?

1569778330
jaredmm
My build.zig file is a bit absurd at this point.

1569778336
jaredmm
My intent was to static link glfw. I tried using glfw binaries from their site first, then building with vcpkg. I've been using the Tetris example (and the sdl-demo project) as my base.

1569778369
andrewrk
jaredmm, just so you know, my plan to get tetris working on windows was to get the package manager working. I never really had it building from source on windows

1569778384
andrewrk
I do think static linking is the thing to do

1569778409
andrewrk
what's with the native_libc.txt? is zig not picking up your msvc installation correctly?

1569778474
jaredmm
Yeah. "Zig is unable to provide a libc for the chosen target 'x86_64-windows-msvc'." zig targets shows x86-windows-msvc as native.

1569778511
andrewrk
jaredmm, when you do exe.setTarget(builtin.Arch.x86_64, builtin.Os.windows, builtin.Abi.msvc); you're selecting to cross compile for windows, rather than compiling for your native system. I'd suggest not specifying setTarget unless you're trying to cross compile

1569778600
andrewrk
that should then pick up your msvc installation and you can delete all those workarounds adding directories

1569778670
andrewrk
for static glfw, I apologize for the poor naming of this function but you're going to want exe.addObjectFile and then give the full path to glfw.lib

1569778780
jaredmm
Removing the explicit setTargets does prevent the target error, but it still doesn't find all the directories. I originally added the directories because without C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um it doesn't find GL/gl.h

1569778948
andrewrk
which msvc version is this?

1569779013
jaredmm
Right now it should be whatever version comes with Visual Studio 2019. I previously was using 2017 build tools and think they're still installed.

1569779029
jaredmm
(not sure how msvc versions)

1569779072
andrewrk
on my computer `zig.exe libc` prints `kernel32_lib_dir=C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\x64`

1569779083
andrewrk
looks like the extra directory you want is 1 up from that

1569779134
andrewrk
on my computer, however that directory only has these subdirs: arm, arm64, x64, x86

1569779137
andrewrk
and it does not have any other files

1569779155
andrewrk
oops I'm looking in Lib not Include

1569779225
andrewrk
I just made a bunch of  transcription errors, forget what I said and let me check something else

1569779841
nrdmn
proposal: make consts that are set to undefined be assignable once, with runtime checks in debug mode.

1569779895
mq32
nrdmn, this check can also be done fully compiletime

1569779946
nrdmn
mq32: are you sure about that? That would be even better

1569779974
andrewrk
jaredmm, are you able to test a branch of zig?

1569779984
mq32
nrdmn, yeah, codepath analysis allows stuff like that

1569780000
mq32
but i don't think zig needs this as you can just use a if-expression

1569780007
mq32
const foo = if(condition) 10 else 20;

1569780112
andrewrk
nrdmn, you might be able to solve this use case by having a const pointer to the mutable state be the thing that is public

1569780172
jaredmm
andrewrk, I haven't compiled from source on Windows yet, but I should be able to.

1569780211
andrewrk
jaredmm, I have a patch to add auto detection of the um directory. one thing at a time, after this we can tackle the next problem

1569780326
andrewrk
jaredmm, here's the branch:

1569780463
andrewrk
jaredmm, now I'm getting file not found: winapifamily.h. let me see where that is

1569780489
jaredmm
Sorry, I should've mentioned. Including one leads to the next include I added. probably the ucrt directory.

1569780518
jaredmm
I think after that, the shared directory will be necessary (or reverse ucrt and shared).

1569780616
andrewrk
I see what happened here

1569780623
andrewrk
microsoft added new include dirs since the time when I coded this detection

1569780665
andrewrk
the latest version was 10.0.10150.0 when I first implemented this :)

1569780773
andrewrk
jaredmm, ok, with the latest commit pushed to that branch, I can #include <gl/GL.h> if I first #include <windows.h>

1569780800
jaredmm
Microsoft's never-ending quest to make finding headers impossible.

1569780810
jaredmm
It'll be awhile before I can build it. Apparently the binary distribution of llvm doesn't include llvm-config and I only have LLVM8 from source, not 9. Not familiar enough for llvm to know if there's a way to build only one of the tools.

1569780851
andrewrk
jaredmm, I made a tarball of llvm+clang 9 if you want it:

1569781325
jaredmm
Ah, nice. Started the build with that. CPU's a decade old, so it might take a bit.

1569782075
jaredmm
Removed the extra includes and ran a zig build -Dwindows -Dmsvc. No header include errors.

1569782100
andrewrk
jaredmm, ok, sounds like progress. now on to solving these linker errors

1569782124
andrewrk
I'll merge the branch after CI tests pass

1569782204
andrewrk
I wonder how much progress Sahnvour made on integrating linkSystemLibrary with vcpkg

1569782246
andrewrk
anyway I think the first thing to try is exe.addObjectFile() with the path to glfw.lib

1569782524
jaredmm
I've tried linking it to a few different glfw3.lib files. The ones I compiled and the pre-built binaries. In both cases, it still comes back with the same errors.

1569782538
Sahnvour
andrewrk: not much at the moment, I have a plan for what needs to be done but I still need to look more deeply into build.zig and actually do the work

1569782736
andrewrk
jaredmm, so LLD is looking for no underscore, but glfw3.lib has underscores?

1569782737
jaredmm
epoxy.lib gives the same type of errors, as confirmation that it isn't just glfw3.lib. `lld: error: undefined symbol: epoxy_glUniform1i`

1569782825
jaredmm
dumpbin of glfw3.lib gives  _glfwInit as one of the exports. The error during zig build has `error: undefined symbol: glfwInit`.

1569782858
jaredmm
So the export has the _, the symbol it looks for is without.

1569782907
andrewrk
I've run into a similar problem several times before on windows, and every time I tried to solve it, it broke something else

1569782930
andrewrk
I wish I could find some authoritative reference on how symbol mangling is supposed to work on windows

1569783064
jaredmm
It is confusing. I hadn't tried looking at epoxy yet, but if I do a dumpbin on epoxy.lib, it doesn't show any underscore and lld doesn't have an underscore.

1569783068
jaredmm
dumpbin -> epoxy_glUniform1i

1569783076
jaredmm
`lld: error: undefined symbol: epoxy_glUniform1i`

1569783116
andrewrk
hmm. can you eliminate the possibility that the link order matters?

1569783136
andrewrk
with some linkers, you have to put the thing that fulfulls the dependency after the thing that depends on it

1569783180
jaredmm
If addObjectFile is done in order, then yeah. I switched them a couple times because I thought that might be it.

1569783275
andrewrk
I think the underscore thing might be a red herring

1569783290
jaredmm
Seems that way, since one has and one doesn't.

1569783318
andrewrk
I don't have any ideas yet to solve this thing where the names match but it's still a linker error

1569783363
andrewrk
the next step I would take would be reading LLD source to find out what its logic is

1569783388
andrewrk
or maybe asking a question in #llvm

1569783564
jaredmm
I looked through the LLD COFF code a bit the other day. It looked like it was demangling names if they were prefixed. I wasn't looking for anything related to matching symbols not being found, so I'll take another look.

1569783629
jaredmm
Thanks for taking some time to look. I'll see if #llvm has any ideas after I try to get a handle on what it is doing.

1569783694
andrewrk
godspeed. I also want to reiterate that the package manager will solve this because it eliminates system dependencies, which is the main problem here

1569783719
scientes
what is lemonboy's irc nick?

1569783723
andrewrk
trying to integrate with somebody else's binaries that was produced by god-knows-what process

1569783745
andrewrk
scientes, TheLemonMan

1569783751
scientes
oh he isn't on now

1569783765
scientes
qemu is segfualting, and i'm wondering where to get a mipsel VPS

1569783929
scientes
oh woah, std moved

1569784040
andrewrk
scientes,

1569784055
andrewrk
alternately if you wish to not rebase take the advice in the PR description

1569784077
scientes
rebase only works if there are no new files

1569784081
scientes
i'll get it fixed

1569784147
andrewrk
scientes, also have a look at the changes to CONTRIBUTING.md:

1569784162
andrewrk
this lets you edit lib/* without `make`

1569784190
scientes
ahh cool, yeah i was still using the symlink hack to do that

1569784197
andrewrk
jaredmm, someone in #llvm is suggesting: <smeenai> andrewrk: perhaps linking with `--trace` to make sure the file is actually getting read by the linker?

1569784206
andrewrk
for the epoxy symbol thing

1569784228
andrewrk
jaredmm, you can use --verbose-link to `zig build` to print the linker line. then you can manually run LLD with a different linker line as a test

1569784237
andrewrk
I didn't give you LLD with that tarball though, sorry

1569784253
andrewrk
you can also swap out lld with link.exe as another test

1569786548
rsdimenus
andrewrk: my long term goal is to use zig with any RPI projects, i just want to get a hello world working in C first :)

1569786574
rsdimenus
it's making me realize the value of zig even more, cross compiling is so easy

1569786587
andrewrk
you can even use zig to cross compile your c hello world code

1569786634
rsdimenus
i mean clang/llvm does arm-eabi out of the box, but it took me way too long to figure out that I can only do aarch64-elf with gcc

1569786641
rsdimenus
is there a aarch64-eabi equivalent?

1569786672
andrewrk
in zig? zig build-exe --c-source hello.c -lc -target aarch64v8-linux-musleabihf

1569786682
andrewrk
(or gnueabihf, both work)

1569786698
rsdimenus
not gnueabihf, but regular eabi

1569786698
andrewrk
depending on whether you want to static link libc or dynamically link the target glibc

1569786702
rsdimenus
(soft float)

1569786724
rsdimenus
not sure why someone would want soft float, i'm just curious

1569786727
andrewrk
yeah, just remove the hf

1569786767
andrewrk
well are you trying to target libc or not?

1569786781
rsdimenus
no, baremetal

1569786791
andrewrk
you can do just aarch64-linux-eabi

1569786819
rsdimenus
there are too many targets to keep track of!

1569786820
andrewrk
have a look at `zig targets`

1569786821
rsdimenus
lol

1569786846
andrewrk
and zig supports them all >:-]

1569786870
andrewrk
(not true, we have a support table that describes in detail to what extent various things are supported)

1569786881
andrewrk
but you do get a lot more out-of-the-box with zig

1569786886
rsdimenus
yeah

1569786919
andrewrk
zig cross compiling c code for bare metal is nice as well because it provides some basic libc functions such as memcpy, memcmp, etc

1569786922
rsdimenus
i have an rpi4, i'm going to follow your clashos example

1569786937
andrewrk
there is also

1569786962
rsdimenus
rpi changed the boot process in rpi4

1569786966
rsdimenus
so there are a few differences

1569786986
andrewrk
oh, I haven't gotten clashos working with rpi4 yet

1569786995
andrewrk
I don't have that hardware

1569787014
rsdimenus
i'm going to use your example and the zig baremetal repo (which I've seen) to build idk something on rpi4

1569787016
rsdimenus
we'll see

1569787030
andrewrk
cool

1569787049
rsdimenus
i just wanted to familiarize myself with the process of cross compiling and loading on baremetal

1569787067
rsdimenus
(which is why I ended up in the llvm channel)

1569787097
rsdimenus
i'd rather understand what's going on before jumping up to the zig level where things are easier :)

1569787260
andrewrk
fair enough :)

1569787742
rsdimenus
the error from lld was not helpful at all :(

1569789307
Tetralux
That doesn't surprise me.

1569789325
Tetralux
In fact, it would surprise me more if you got a good error message.

1569789841
jaredmm
Alright. glfw3 is linking properly now. That looks like it was caused by trying to link the x86 library when the build was for x64. glfw3's pre-built binaries didn't specify which they were, but using vcpkg -triplet x64-windows got rid of those errors. Didn't fix the epoxy errors, though. Then I thought "wait, maybe x64-windows-static will work". `-- Note: libepoxy only supports dynamic library linkage. Building dynamic library.`

1569789973
jaredmm
Both lld-link and link give the same errors, though, so that's good.

1569790098
andrewrk
glfw3's pre-built binaries didn't specify which they were => <andrewrk>  system dependencies, which is the main problem here <andrewrk> trying to integrate with somebody else's binaries that was produced by god-knows-what process

1569790104
andrewrk
I called it :)

1569790165
jaredmm
Yeah. Doesn't help that I build them with x86-windows the first time, either, but don't tell anyone.

1569790226
andrewrk
anyway the header thing is in master branch now

1569790245
andrewrk
unfortunately sr.ht picked the worst possible time to have outage, so binary downloads are delayed

1569792764
rjtobin
I'm calling a C function that returns a pointer. I'm casting the return value of a call to this function to a variable of type "?[*]". This was working fine (using a zig build from late July) but with more recent zig releases it crashes when the C function returns null. Am I using the wrong pointer type?

1569792824
rjtobin
I thought from the docs that ?[*] should be sufficient (if the C function returns null, it would become Zig's null, which ?[*] is allowed to be)

1569792869
Tetralux
I don't think I've ever seen anyone use that type; I've seen [*]T and ?*T, but never the combination -- or used it for that matter; it should work though.

1569792942
Tetralux
Does this C function actually return a pointer to first of many things?

1569793079
rjtobin
Yeah, it's a null-terminated string (the C function is just libreadline's readline())

1569793218
rjtobin
Should I just be using [*]u8 instead of ?[*]u8?  I assumed I had to use the latter since the return can be null

1569793228
nrdmn
Tetralux: I think calloc would be an example where you'd use ?[*]

1569793240
nrdmn
I've been working with plenty of ?[*] types recently

1569793350
nrdmn
rjtobin: ?[*]u8 should be fine for a function that returns a pointer to an array of u8 or a null pointer.

1569793379
nrdmn
is there any error message?

1569793435
rjtobin
Yep, it is: "cast causes pointer to be null"

1569793476
rjtobin
Let me make a minimal example. I just wanted to make sure I wasn't trying to do something stupid first

1569794896
rjtobin


1569794975
rjtobin
Produces an error with Zig build 543e7293, but not 3c914c63

1569795832
nrdmn
Hmm, I have version 805f9b309 and it compiles fine.

1569795868
rjtobin
Oh it compiles ok, but there's a runtime error

1569795892
rjtobin
(And if you flip the 0 to a 1, the runtime error disappears)

1569796130
nrdmn
hmm, looks like a bug to me

1569796147
rjtobin
Ok, thanks for all the sanity checking :)

1569796202
rjtobin
I'll open an issue

1569796500
nrdmn
I've reduced it even more, I think

1569796841
nrdmn
the function in your .h file is translated into a zig function with return type [*c]u8

1569796858
nrdmn
[*c] pointers should be nullable according to the documentation

1569797072
daurnimator
wow, release day already

1569797085
daurnimator
I haven't even had time to compile llvm 9 yet :(

1569797364
mikdusan
once you do, 9.0.1 will be out :)

1569797422
rjtobin
nrdmn: cool, thanks for running it down further. I opened an issue here:

1569797606
nrdmn
rjtobin: maybe you can use `git blame` to find the commit that caused this behavior

1569797844
rjtobin
nrdmn: Do you mean git bisect, or is there a mode of git blame that I don't know about? I wouldn't know what line to examine for git blame (I don't know the compiler code at all)

1569797898
mikdusan
nrdmn: `doesn't work` reduction you added in gist... crash or compiler error?

1569797924
nrdmn
eh.. yes, git bisect, sorry

1569797957
rjtobin
nrdm: Ah ok. Good idea in any case, will give it a try after dinner.

1569797983
nrdmn
mikdusan: compiler error

1569798417
daurnimator
andrewrk: looking into packaging again now.... the ZIG_SKIP_INSTALL_LIB_FILES dance is really weird

1569799053
daurnimator
interesting build failure....

