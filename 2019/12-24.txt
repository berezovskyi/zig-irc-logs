1577152457
daurnimator
leeward: what's wrong with LoggingAllocator?

1577153947
leeward
daurnimator: Bugs

1577153978
leeward
For one thing, the prints haven't been updated with the no-variadic-function stuff.

1577154038
leeward
I don't have the sample code I was playing with, but it took some doing just to get something to compile and then it segfaulted. Not certain the segfault isn't my fault, but the compile errors weren't.

1577154183
daurnimator
ah okay

1577161098
owl_000
why `std.debug.warn ("hello, world!\n","");` needs two argument?

1577161246
mikdusan
no more varargs. `std.debug.warn("{}\n", .{"Hello, world!"});`

1577161276
mikdusan
no more varargs. `std.debug.warn("{}, {}!\n", .{"Hello", "world"});`

1577161312
mikdusan
`std.debug.warn("no replacement format.\n", .{});`

1577161857
owl_000
oh ok

1577161995
owl_000
the example in zig documentation needs to be corrected.

1577162046
owl_000
the hello world example produce error

1577162210
mikdusan
can you link to it?

1577162258
mikdusan
all of those examples

1577162568
daurnimator
I think the hello world isn't?

1577162572
daurnimator
someone has mentioned it before

1577162600
daurnimator


1577162643
mikdusan
ah I was thinking

1577167048
mikdusan
daurnimator: re: #3979 is concat operator for tuples going to be a thing, or are we expecting a compiler error?

1577168361
charlesshenton
How do I resolve this compile error? `const copts: []const []const u8 = .{"-std=c99"};` errors with "array literal requires address-of operator to coerce to slice type '[]const []const u8'"

1577168457
cshenton
It's not immediately clear where I should stick the & operator.

1577191968
Snektron
Hm, for some reason i can't get zig to build a static binary inside a docker image

1577191995
Snektron
also, i think there might be something wrong with the build system because sometimes it builds without detecting all required libraries

1577192013
Snektron
Anyway it just fails on the part where it builds the stage1 compiler

1577192022
Snektron
and it doesn't tell me why

1577192149
Snektron
Ah, it's because zig0 segfaults

1577192635
Snektron
did this commit even pass ci

1577192659
Snektron
apparently so

1577192712
Snektron
because zig0's entry point is literally an unmapped address

1577193179
Snektron
hm, it works with just static llvm

1577206252
leeward
Snektron: Do you have ideas why `zig build test` would fail with a bunch of undefined symbols in clang::?

1577207568
Snektron
i have no idea

1577208002
leeward
:/

1577208021
Snektron
im not really an expert on Zig's build process

1577208046
Snektron
what are you building? The compiler?

1577208069
leeward
Yeah, `make` seems to work fine, but `zig build test` fails hard.

1577208091
leeward
I thought it might have been part of the thing you were talking about earlier.

1577208092
Snektron
Weird, i haven't tried that

1577208110
Snektron
I don't think thats related

1577208116
Snektron
thats probably a misconfiguration on my part

1577208123
leeward
ah

1577208138
Snektron
For some reason zig0 is just an invalid executable when i try to compile Zig statically

1577208143
leeward
weird

1577208151
Snektron
So im now trying to see if -static-gcc will work

1577208160
Snektron
because i don't really want to depend on libgcc

1577208223
Snektron
Maybe i don't have the static version of some library

1577209265
Snektron
its also weird how it doesn't fail to compile or anything

1577209274
Snektron
it just produces a faulty executable

1577210105
leeward
That is pretty odd.

1577212806
Snektron
I made my own docker file instead of using the docker-zig one because i didn't want to wait on compiling llvm

1577212824
Snektron
If the master builds were hosted any longer i would have used those

1577217678
frmdstryr
Can zig convert c header files to zig?

1577217716
mq32
frmdstryr, yeah "zig translate-c" does this :)

1577218115
frmdstryr
What compiler does it use? Eg, #elif defined (

1577218226
frmdstryr
Nvm seems to use that

1577218411
Snektron
frmdstryr: clang

1577218422
Snektron
(which also defines gnuc)

1577219101
frmdstryr
23.6k loc haha, awesome

1577222224
leeward
zig fmt has way too high a column limit.

1577222842
gonz_
I don't think it has a high column limit as much as it just plain doesn't put indentation in there unless you have a trailing comma in an argument list or one of your own newlines in a long binary expression, etc.

1577222882
fengb
Infinite is technically too high ðŸ™ƒ

1577222953
gonz_
Hah, yeah, good point

1577222974
gonz_
I'm happy no one chose 80 for everyone, at least.

1577222987
gonz_
Though I guess I'd take any standard, really.

1577222996
gonz_
Better to have a common standard that I dislike than no standard at all.

1577223410
leeward
80 would make me the most happy.

1577223463
leeward
My problem is that I formatted a line with reasonable wrapping, and zig fmt undid it

1577224325
gonz_
With binary expressions I'll usually put a newline after an operator and it'll accept it

1577224353
gonz_
I wouldn't mind if it was more aggressive with auto-formatting, though. Less for me to care about in the end.

1577224487
Snektron
I never use zig fmt anyway

1577224716
gonz_
I use it all the time, but not actively. I write horribly mis-shapen expressions with spaces missing or even with the wrong indentation and it just takes care of it.

1577224754
gonz_
Which is the point, I feel, to not sit there doing these braindead things yourself.

1577224789
leeward
I'm just sad that tabs for indentation/spaces for alignment never caught on.

1577227545
Snektron
gonz_, i usually do that correctly when im writing anyway

1577227586
gonz_
Seems pointless to me

1577227928
Snektron
I dont spend effort on it

1577227974
gonz_
I would argue that to get as consistent a result as with auto-formatting, you'd have to actually spend effort on it.

1577227992
gonz_
To me it's an easy win because it doesn't generally look like ass and I didn't have to do anything for it.

1577228061
gonz_
And with a language like zig it should be easy for everyone to accept an auto-formatter because they don't have years of believing their style is the best style.

1577228172
Snektron
Oh well thats just because zig-style happens to be similar to what i usually format my preferred style

1577229739
hryx
ahoj friends! I've been away from Zig code & chat for several months and have missed it terribly. I'm catching up on what's new and look forward to getting involved again

1577229797
schme245
damn

1577229810
schme245
just read this series of blog posts on reddit programming:

1577229831
schme245
where they benchmark a n body problem simulation and compare Rust and C solutions

1577229839
schme245
so I'd thought I'd give it a shot in Zig

1577229873
schme245
wrote the simplest implementation I could, and beat the Rust benchmark by 2 seconds! (4-ish vs 6-ish)

1577229875
schme245
Zig is awesome

1577229897
schme245
benchmarks are here:

1577229911
schme245
will put my code on github tomorrow!

1577229942
hryx
that's awesome schme245

1577230019
schme245
the Rust solution uses a jumble of unsafe and explicit SIMD instructions, in my Zig solution everything just got auto-vectorized

1577230041
schme245
I was looking forward to playing around with @Vector but I didn't even need to :D

1577230062
schme245
hats off to Zig, and LLVM

1577230139
schme245
I already feel that I've missed something here so take this with a grain of salt :P

1577230719
mikdusan
hey hryx nice to c u again

1577230765
hryx
likewise mikdusan

1577230784
shachaf
g

1577230789
shachaf
Oops.

