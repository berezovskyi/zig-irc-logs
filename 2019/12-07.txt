1575678482
daurnimator
fengb: made it to the next round of interviews....

1575679390
fengb
Congrats. Have I heard of the company?

1575681051
daurnimator
nope

1575683704
daurnimator
frmdstryr: you there?

1575684793
frmdstryr
yo

1575684912
frmdstryr
daurnimator: yes

1575684965
daurnimator
frmdstryr: want to have a pairing session to delve into read/write performance issues?

1575685009
frmdstryr
What time zone are you in? I'm about done for tonight

1575685027
daurnimator
frmdstryr: Melbourne/Australia. currently 13:17

1575685151
daurnimator
frmdstryr: atm I'm trying to figure out how to run your benchmark thing

1575685207
frmdstryr
What os?

1575685226
daurnimator
linux

1575685229
daurnimator
I think I have it now :)

1575685233
frmdstryr
Should be able to just run

1575685259
frmdstryr
Are you using the gist?

1575685274
frmdstryr
I made one that spawns the process and tests it automatically

1575685279
daurnimator
no. I grabbed things from one of your comments

1575685365
frmdstryr


1575685375
frmdstryr
Is my current hacked up one

1575685402
frmdstryr
Ignore the IPerf stuff that didn't work for some reason

1575685504
frmdstryr
Also the IOStream there while faster in the tests has only a minimal impact on the server

1575685516
daurnimator
frmdstryr: file name doesn't match comment...

1575685522
frmdstryr
At least for hello world

1575685523
daurnimator
I guess just append a 2?

1575685540
frmdstryr
Yeah didn't want to overwrite the one in the issue

1575685563
daurnimator
also I want to play with the std library... so having it all copied into the gist isn't useful :(

1575685614
frmdstryr
I just did that so I didn't have to rebuild & install every time (not sure if theres a way to get around that)

1575685641
daurnimator
frmdstryr: just pass ZIG_SKIP_INSTALL_LIB_FILES=ON when invoking cmake

1575685722
daurnimator
frmdstryr: honestly I'm getting lost in your code here.... I might be better just starting again

1575685765
frmdstryr
The original gist is here

1575685809
frmdstryr
Mainly the same just doesn't have Iperf or any RW tests

1575685834
daurnimator
RW?

1575685844
frmdstryr
Read and write

1575685868
frmdstryr
echo

1575685879
daurnimator
frmdstryr: did you have an alternative that you used to check the fifo and stream branches?

1575685921
frmdstryr
readBufferedInStreamMixin

1575685973
daurnimator
frmdstryr: so what are you optimising for?

1575685977
daurnimator
reading by the byte?

1575686034
daurnimator
also readBufferedInStreamMixin doesn't seem to be present in your switch(READ_FN)

1575686074
frmdstryr
in order to process a stream it typically needs read byte by byte, ie readUntilDelimiter uses readByte

1575686099
frmdstryr
and yes the switch was added later after I got tired of using comment / uncomment

1575686162
daurnimator
frmdstryr: that's a terribly inefficient way to do things: readUntilDelimiter on a buffered stream should use mem.indexOfScalar internally

1575686177
daurnimator
infact I have a branch somewhere of doing that with fifo :)

1575686240
daurnimator
okay, so baseline of readBufferedInStream on my machine is 280 MB/s

1575687607
stratact
Okay, I give up, why the heck won't InStream.readUntilDelimiterOrEof read a file?

1575687630
daurnimator
stratact: explain?

1575687664
stratact
I'll share a paste of the output

1575687672
stratact
*pastebin

1575687733
stratact


1575687771
daurnimator
what is the equivalent in zig of -fno-emit-frame-pointer ?

1575687799
daurnimator
stratact: looks like you closed a file while trying to read from it

1575688009
stratact


1575688129
daurnimator
/usr/home/ what sort of system is that?

1575688137
frmdstryr
Use const stream = &in_stream.stream;

1575688149
frmdstryr
Your hitting

1575688173
frmdstryr
It's quite annoying

1575688185
stratact
daurnimator: /usr/home is a BSD thing

1575688185
frmdstryr
because it's very easy to do

1575688190
daurnimator
frmdstryr: heh. so investingating this is hard....

1575688198
stratact
frmdstryr: gotcha, thank you.

1575688270
NocturnDragon
Hello! I posted a message yesterday, but I never seen a response, and I don't see them in the chat history, I'll write it again, sorry if it's a duplicate and someone replied already!

1575688280
NocturnDragon
Hello! I posted a message yesterday, but I never seen a response, and I don't see them in the chat history, I'll write it again, sorry if it's a duplicate and someone replied already!

1575688284
NocturnDragon
Hello! I am new to Zig, and I wanted to starting using it to create Reflection data for a C project.

1575688285
NocturnDragon
When using types like

1575688285
NocturnDragon
In C I would annotate the type like `#define string_t char* __attribute__((annotate("string_t")))`, to discern from a simple char* to the custom types via a custom clang-tool.

1575688286
NocturnDragon
In Zig is there a way to have the GNU C99

1575688329
daurnimator
NocturnDragon: yesterday you already found the relevant zig issue.

1575688354
daurnimator
(

1575688440
NocturnDragon
Yes, I had found that one! So my messages got here. Weird that I couldn't see them on the chat history. Sorry for posting it again.

1575688458
daurnimator
the log bot has been missing for a few days

1575688471
daurnimator
or maybe not... it seems to be working now

1575688473
daurnimator


1575688501
frmdstryr
what whole thing is being inlined?

1575688526
daurnimator
frmdstryr: readtest2

1575688539
daurnimator
frmdstryr: either the whole thing is getting inlined, or zig is omitting frame pointers...

1575688560
stratact
frmdstryr: got past the bug finally... the `in_stream` symbol needed to be var'd while `stream` be const'd, thanks again.

1575688581
frmdstryr
daurnimator: Are you using evented?

1575688584
daurnimator
stratact: FWIW the mixin style should clean all that up.

1575688587
daurnimator
frmdstryr: 'evented'?

1575688597
NocturnDragon
Yeah, strange. Thank you daurnimator!

1575688647
stratact
daurnimator: I need to lie down for a bit, since this bug gave me a nice headache. I'll ping you about mixin style later ;)

1575688664
frmdstryr
async

1575688745
daurnimator
frmdstryr: ah no. just sync for now

1575689217
daurnimator
frmdstryr: so I'm still confused what you're trying to acheive

1575689236
daurnimator
frmdstryr: if you want to read byte-at-a-time, then you don't want a Buffered stream

1575689446
frmdstryr
Read a variable length of a stream until a pattern is matched then read the rest in big chunks

1575689717
daurnimator
frmdstryr: I'm struggling to turn that into a test case... this is where pairing might help :)

1575689877
frmdstryr


1575689897
daurnimator
?

1575689902
daurnimator
I know what a http request looks like

1575689934
frmdstryr
So how do you parse it?

1575689944
frmdstryr
Assuming the post body may be uploading files of any size?

1575689962
daurnimator
well first off, http has multiple framing methods for the body

1575689980
daurnimator
so you need to handle content-length delimited; end of connection delimited; and chunked transfer encoding

1575690336
frmdstryr
nginx uses a streaming parser

1575690377
frmdstryr
looks like they're using a buffer instead of reading a byte time from an input buffer

1575690493
daurnimator
frmdstryr: yes

1575690502
daurnimator
frmdstryr: got discord?

1575690513
frmdstryr
no

1575690656
daurnimator
frmdstryr:

1575690912
daurnimator
(not 100% correct; but should give you a feel)

1575697457
stratact
daurnimator: *poke*, what is mixin style and how do I use it? :)

1575697719
fengb
stratact:

1575697903
mikdusan
mixin is `usingnamespace` to import public decls from another struct; and also powerful is the struct can be defined at comptime. see lib/std/fifo.zig on a cool way to add `pub fn print()` to `LinearFifo` conditionally:

1575697906
mikdusan


1575698330
pixelherodev
Whoooaaaaa

1575698343
pixelherodev
Okay, I'm suddenly very much interested in mixins

1575698523
daurnimator
more interesting on the stream branch:

1575698647
daurnimator
What I'm blessing a "mixin" is the explicit style of: `pub usingnamespace SomeMixin(@This());`

1575698697
mikdusan
sounds good, the mixin knows target struct. opens big doors

1575699652
stratact
huh, after reading about the mixin concept on wikipedia, they sound similar to traits/interfaces but definitive by default instead of open to interpretation from implementation by other users. This is pretty nice, I like it. Reusable code in structs by injection.

1575699853
stratact
Hence, that's why they "mix in" into other structs

1575701059
pixelherodev
Okay, I was impressed before but that second link is even more so

1575701955
stratact
I think mikdusan was trying to show that's how a Mixin would unwrap at compile time with the first link?

1575702279
stratact
Yeah, this is pretty badass:

1575702802
stratact
Actually now that I think about, using static conditionals allows for specialization, so with that included, Zig doesn't need any form of inheritance or composition

1575702880
daurnimator
stratact: you can only import functions with a mixin, not fields.

1575702999
stratact
but but... damn you :)

1575703114
stratact
I still think is pretty damn cool

1575703551
stratact
I am still re-learning Zig and picking up new stuff I haven't learned before. There is a reoccuring theme to Zig with its feature that I discover. I am impressed by the amount of thought and care went to the implementation with its language reuse and flexibility, it's god-like honestly.

1575703636
stratact
I'm not saying this through pure flattery, I really mean it, I'm mind-blown by it.

1575703657
pixelherodev
Eh, given how poorly thought out a lot of nature is, I'd say it's

1575703711
stratact
üëç

1575703730
pixelherodev
Which symbol is that? It's not in the font my IRC client uses apparently

1575703734
pixelherodev
Those mixins look amazing - if not for the fact that I'm going to have to redo thousands of lines of code :P

1575703746
stratact
It's the thumbs up unicode emoji

1575703914
pixelherodev
Ah :P

1575703953
pixelherodev
Can I just say it irritates me that Unicode has six-byte sequences for emoji>

1575703955
pixelherodev
?

1575703968
pixelherodev
Correction: that it has

1575704041
stratact
The magic of code-points?

1575704047
daurnimator
so.... frmdstryr nerd sniped me earlier and I've spent a few hours writing production quality http request line parser...

1575704152
stratact
daurnimator: from the time saving feature of Mixins? ;)

1575704184
daurnimator
no. because I got it in my brain that I need to show that nothing really reads byte-at-a-time

1575704310
stratact
Well I'm not completely sure about that but maybe Rust brainwashed me into thinking that for UTF8

1575704363
daurnimator
stratact: if you want to go fast you read e.g. page at a time. if you're dealing with disks you read 16 meg at a time.

1575704372
pixelherodev
Wait, you're writing HTTP for the zig stdlib?

1575704380
pixelherodev
On that note, I hereby dub zig stdlib zag

1575704388
daurnimator
pixelherodev: yeah. I've had that on my personal backlog for over a year

1575704393
pixelherodev
Nice!

1575704415
daurnimator
the fifo module was a prerequisite for it

1575704445
daurnimator
previously I was delaying it on the async io abstraction too. but now with mixins I can ignore that piece

1575704516
stratact
daurnimator: I'm looking forward to your PR's merge

1575705048
mq32
<pixelherodev> On that note, I hereby dub zig stdlib zag

1575705048
mq32
lol

1575705075
mq32
<daurnimator> no. because I got it in my brain that I need to show that nothing really reads byte-at-a-time

1575705085
mq32
this reminds me of a story a friend told me

1575705124
mq32
he started at a new company and some days later he re-appeared in the chat and said: this is my place. here i can finally code with full power

1575705138
mq32
the company has a multi-threaded XML parser

1575705170
mq32
which splits the XML into arbitrary chunks ("take chunks of 1M bytes")

1575705197
mq32
parses those chunks (with maybe-broken tokens a the start/end) and merges them at the end into an XML dom

1575705684
daurnimator
sounds like you could never be namespace compliant

1575705717
daurnimator
(I once tried something similar back in the days when I was paid to work full time to XMPP)

1575705767
mq32
i have no idea

1575705776
mq32
but they also utilize SIMD for parsing

1575705782
mq32
so it's top-notch perf code

1575706843
pixelherodev
Yeah but

1575706844
pixelherodev


1575706852
pixelherodev
Don't get me wrong, XML is fun to write

1575706865
pixelherodev
It's just...

1575706866
pixelherodev
Well...

1575706868
pixelherodev
*XML*.

1575706942
daurnimator
who said its fun to write? I'll kill them

1575707125
mq32
i think XML is nicer to read as json for a human

1575707137
mq32
except when stuff comes into play :D

1575707234
pixelherodev
Let me rephrase that: code

1575707256
pixelherodev
If you have a good library, it's pretty easy to work with'

1575707262
daurnimator
lies

1575707277
pixelherodev
:P

1575707367
mq32
cross-references elements!

1575707678
pixelherodev
Okay, so if your "XML" is actually probably illegal according to the standard but it works well enough and your parser is fine with it,

1575707747
daurnimator
as long as you or any one else doesn't look at it funny. or ever come with 10 feet of it again

1575707814
mq32
hehe

1575708148
scientes
XML is a horrible idea

1575708157
scientes
that for some bad reason was implemented

1575708174
shakesoda
in truth, aren't most ideas that actually get implemented

1575708181
shakesoda
but here we are

1575708201
scientes
it could be woorse

1575708304
mq32
some ideas are worse than others

1575708309
mq32
and then there are C declarations

1575708318
mq32
i'm teaching C to someone right now

1575708325
scientes
you mean the c preprocessor

1575708329
scientes
that is a different language

1575708335
mq32
preprocessor is okayish

1575708338
mq32
but declarations‚Ä¶

1575708345
scientes
ohhh yes

1575708346
mq32
and i was like: "Let's declare a function pointer."

1575708353
scientes
those are not THAT bad

1575708359
mq32
and then, 1 hour later i had explained the very basics of declarations :D

1575708368
scientes
its better to learn by doing

1575708400
pixelherodev
Oh god

1575708407
pixelherodev
Function pointer declarations in C...

1575708416
scientes
mq32, cause the only point of those things is to prevent problems

1575708425
scientes
you could just call every function without a type signature at all

1575708434
scientes
and then try to remember which register things were in

1575708437
mq32
scientes: not in modern C anymore :D

1575708442
shakesoda
every now and again i need to typedef a function pointer, and google gets involved most of the time

1575708451
mq32
typedef Type a, *b;

1575708461
mq32
it's so crazy that typedef is a storage modifier

1575708462
mq32
like static

1575708465
scientes
#define D #define

1575708468
scientes
^that works

1575708476
pixelherodev
typedef return_type(name*)(normal_arglist); right?

1575708484
pixelherodev
Haven't done that in a long while now

1575708503
shakesoda
that looks right but i can't say it is with confidence

1575708507
mq32
pixelherodev: just like declaring a function pointer variable

1575708512
pixelherodev
Wait hold on scientes do you mean that later instances of `D a a` will be like #defining?

1575708512
mq32
and no, its'

1575708519
mq32
typedef return_type (*name)(normal_arglist);

1575708524
pixelherodev
Ugh

1575708526
pixelherodev
Right

1575708536
shakesoda
dangit

1575708546
shakesoda
didn't even notice the side of the *

1575708571
mq32
but who the hell thought that typedef is a storage specifier?!

1575708575
scientes
pixelherodev,

1575708621
mq32
typedef void (*foo)(void), *ptr;

1575708624
mq32
this is also nice :D

1575708643
scientes
pixelherodev,

1575708704
mq32
scientes: nice

1575708719
mq32
i also like the implemetation of a fluid simulation that uses itself as a start vector

1575709743
gonz_
Oh, wow, `using namespace [control-flow] struct1 ... structN`

1575709766
gonz_
`usingnamespace`*

1575709899
gonz_
There's some heavy duty emergent behavior out of all these simple parts in the language.

1575710013
mq32
yep

1575710280
daurnimator
>.< why is everyone only reading my examples for 2 months ago now

1575710360
gonz_
I can't speak for anyone else but I was gone for a while, at least.

1575710422
mq32
daurnimator: i still wonder why

1575710426
mq32
and we did exactly the same :D

1575710444
daurnimator
mq32: did we? and is it accepted?

1575710459
daurnimator
gonz_: you were gonz_ for a while? :P

1575710472
mq32
i did not push anything to the stdlib, but made use of them for my vector math lib

1575710474
gonz_
:D

1575710486
mq32


1575710532
daurnimator
mq32: and where was it critisized?

1575710555
mq32
here in the chat, by: "don't do mixins, they hide what functions are actually available in the struct" or something like that :D

1575710565
mq32
doesn't matter much, i just noticed that^^

1575710601
gonz_
Hey, I was wondering if maybe someone had sat down and made a GLM-like thing for zig

1575710626
mq32
:D

1575710644
gonz_
That's why I'm mentioning it, though. I guess the tone didn't come across in text.

1575710648
mq32
:D

1575710654
gonz_
Imagine there's a "would you look at that" in there

1575710660
mq32
!

1575710662
mq32
and i'm proud of my swizzle implementation

1575710669
mq32
comptime at it's best

1575710678
mq32
vec2(0, 1).swizzle("xxy0")

1575710688
mq32
returns vec4(0, 0, 1, 0)

1575710721
mq32
glm has a swizzle thing going which is the most gruesome c++ hackery i've ever seen

1575710752
daurnimator
`/src/analyze.cpp:5441 in type_has_bits. This is a bug in the Zig compiler.` I think I'm getting this when passing a 0-bit type as a `var` argument

1575710771
mq32
and in zig it's just like "yeah, go through that string, index the fields by the characters in the string and return a vector with that size"

1575710827
shakesoda
mq32: i once looked at glm's swizzle implementation

1575710829
shakesoda
never again

1575710843
mq32
shakesoda: i still have bad dreams about that :D

1575710854
shakesoda
that stuff is truly horrifying

1575710858
gonz_
It might make for a good comparative demonstration in a talk

1575710906
gonz_
As part of a "Zig: An amuse bouche" talk, maybe

1575711403
mikdusan
hmm given any enum literal, how to get the name of it? eg. `.i_am_a_literal` and want comptime []u8 "i_am_a_literal"

1575711483
mq32
@tagName

1575711599
mikdusan
@tagName needs an enum value. i have only an enum literal. consider `fn foo(comptime arg: var)` and `foo(.i_am_a_literal);`

1575711626
mq32
oh huh

1575711650
mikdusan
i was just thinking to shave 1 char from your swizzle -> `vec2(0, 1).swizzle(.xxy0)` :)

1575711688
mq32
does .0000 work? :D

1575711698
mq32
i don't think that's a legal identifier

1575711702
mikdusan
heh nope

1575712969
pixelherodev
scientes, whoooa

1575714790
daurnimator
mikdusan: hmm. what happens when you @typeInfo on an enum literal?

1575725416
frmdstryr
daurnimator: Were you able to build a fast parser? Interested to what your findings are

1575725432
daurnimator
frmdstryr: I literally haven't stopped working on it

1575725436
daurnimator
since you left

1575726325
frmdstryr
Whats the throughput?

1575726327
frmdstryr
:)

1575726603
daurnimator
frmdstryr: may have gotten distracted with creating an actually correct http connection parser

1575726755
frmdstryr
I put a challenge for you in the #3840

1575726825
daurnimator
frmdstryr: FWIW at one point I had 7GB/s throughput on the plain tcp tests

1575726838
daurnimator
frmdstryr: happy to pair

1575726873
frmdstryr
But is that processing or read chunk write chunk?

1575726918
frmdstryr
any processing must read or seek byte by byte at some point

1575726986
daurnimator
frmdstryr: that was by-chunk

1575726995
daurnimator
frmdstryr: and no. you don't need to do byte-by-byte very often

1575727012
daurnimator
frmdstryr: e.g. if you're uploading a file, then you read a chunk from the filesystem; then write a chunk to the socket

1575727045
frmdstryr
How do you know when the headers are complete (or any delimiter for that matter) without reading each byte?

1575727096
frmdstryr
mem.indexOfPos still has to read each byte

1575727130
daurnimator
frmdstryr: you read a big chunk and then use mem.indexOfPos on it

1575727143
daurnimator
it's much more efficient operating on a cache line of data at a time

1575727207
frmdstryr
that's what the buffered reader does not?

1575727216
frmdstryr
read one chunk into the buffer

1575727247
Snektron
Today's aoc made me realize that there needs to be a way to iterate over all permutations of a slice in the std lib

1575727260
Snektron
because its not the first time that i've had to do such a thing with a programming challenge

1575727273
daurnimator
oh right AOC.... I've missed a few days

1575727304
daurnimator
frmdstryr: yes. but the issue is bufferedInStream in the non-fifo branch doesn't allow you to play with the contents easily

1575727376
frmdstryr
it could just do mem.indexOfPos(u8, "\n", stream.buffer)

1575727389
daurnimator
frmdstryr: yes that's the vague idea.

1575727471
frmdstryr
but indexOfPos is still looping over every byte in the buffer and doing mem.eql

1575727489
daurnimator
that gets optimized much better though

1575727510
frmdstryr
correct, but why not make readByte just as fast if possible

1575727511
daurnimator
without a `try` in there or any branching beyond a loop index, llvm can work its magic

1575727561
frmdstryr
readByte should really just return a ptr to somewhere the buffer but the streams api doesn't really work like that

1575727594
daurnimator
frmdstryr: it can on the stream-mixin branch

1575727602
frmdstryr
How do I see the llvm output?

1575727623
daurnimator
--verbose-llvm-ir?

1575727677
frmdstryr
oh nice :)

1575727950
frmdstryr
Looking at the branch, what does usingnamespace actually do?

1575727982
Snektron
it imports all functions and static fields of a structure into another

1575728053
frmdstryr
Is import a ptr or an actual concat of the struct as if it was written that way?

1575728085
frmdstryr
(eg if i just copy and paste all the fields over)

1575728112
daurnimator
frmdstryr: it doesn't include fields; just functions and constants

1575728123
daurnimator
frmdstryr: but for those: its as if you wrote them there

1575728177
frmdstryr
so in terms of caching it has to lookup the vars somewhere else when accessing a non const field then?

1575728186
daurnimator
huh?

1575728483
mq32
frmdstryr: it's only syntactic sugar, nothing that has any impact on runtime

1575728495
mq32
probably also decreases compiletime as functions don't have to be parsed twice

1575729024
leeward
When I multiply -1 by -1 (i8 0x80), I get an integer overflow. Is this a bug? *% seems to behave correctly.

1575729135
mq32
"works for me"‚Ñ¢

1575729140
mq32


1575730077
frmdstryr
Is there a way to repeat a []const u8 x times? Ie "abc" * 10

1575730110
mq32
"abc" ** 10

1575730112
mq32
should do that

1575730166
frmdstryr
sweet, thanks

1575730327
stratact
I just wrote this to repeat 0s in static buffer: `var buffer: [bufsize]u8 = [_]u8{0} ** bufsize;`

1575730383
stratact
something I recalled

1575730397
mq32
yeah this is quite useful

1575730400
daurnimator
stratact: you don't need the signature on the left

1575730412
mq32
for string literals, it's now necessary

1575730593
stratact
daurnimator: thanks. mq32: I see, that was just a buffer for reading into a file. I adapted the code I wrote earlier into a readline iterator of sorts, pretty fun to implement.

1575730728
stratact


1575730767
daurnimator
stratact: use a fifo at least :)

1575730821
stratact
oh... I'll look into that then.

1575730854
daurnimator
actually I made a handy commit for you just now

1575730874
stratact
oh that's right, it's still a PR?

1575730982
daurnimator
stratact: no private branch. let me push

1575731098
daurnimator
stratact:

1575731588
stratact
daurnimator: ah, this is very neat.

1575731672
stratact
So by understanding what fifo means (first in first out), it's an optimized structure for buffering?

1575731695
daurnimator
stratact: yes

1575731734
stratact
I was having this "epiphany" from looking at the code :)

1575731792
stratact
TIL

1575732234
frmdstryr
Returning bytes directly from the BufferedInStream buffer I can get 2.0GB/s reads

1575732246
mq32
that's fast

1575732246
frmdstryr
vs 1.3 GB/s  using the current readByte

1575732629
daurnimator
frmdstryr: what do you mean by "returning directly"?

1575732708
frmdstryr
Returning a the byte at the buffer's current start_index instead of copying it

1575732764
daurnimator
frmdstryr: I'm still not sure why you're operating on bytes at all...

1575732782
daurnimator
frmdstryr: usually you look from some delimiter; or you read a 4-byte length followed by a body

1575732971
frmdstryr
If the BufferedInStream is fast it should make life easier

1575733007
stratact
daurnimator: is this related to what you told me earlier about reading bytes-at-a-time is being slow as it is :)

1575733071
stratact
Still, 1.3 GB/s -> 2.0 GB/s is amazing. This is the power of FIFOs

1575733089
daurnimator
frmdstryr: it is fast.... but its important how you access it

1575733181
frmdstryr
Honestly I think the InStream and OutStream should be just replaced with the buffered readers

1575733197
daurnimator
InStream and OutStream are interfaces

1575733198
frmdstryr
Currently ever read method has to each byte twice

1575733257
daurnimator
no it doesn't...

1575733404
frmdstryr
Sorry when the buf.len less than the in stream size with the BufferedInStream

1575733543
frmdstryr
*in stream buffer size

1575733574
frmdstryr
copies to the internal buffer then to the dest buf when read

1575733586
frmdstryr
when it should just return the pointer

1575733616
frmdstryr
but the current stream api won't work like that

1575733625
daurnimator
frmdstryr: normally size of buffer should be >> size of your read.

1575733762
stratact
(I learned that the hard way)

1575733961
stratact
I recall back when I was programming in Rust, even their BufferedReader struct had some sort of limitation compared to doing the low level C-like approach (which Zig uses), but it was for a niche use

1575734148
stratact
Oh yeah, I was writing a GUI frontend for Gentoo's portage at the time and was dealing with GTK+'s idle_add() sync issues and needed more output flow from the stdout buffer

1575734693
daurnimator
also it would be fixed if our InStream had a readv-like interface

1575735804
andrewrk
that's a good idea, to make the primitive readv

1575735898
daurnimator
andrewrk: with the mixin style we can make it conditional :)

1575735906
daurnimator
i.e. you could provide

1575735922
daurnimator
(or you could provide both)

1575736037
stratact
mixins are so wonderful üòÑ

1575736390
frmdstryr
daurnimator: frmdstryr: FWIW at one point I had 7GB/s throughput on the plain tcp tests, do these tests exist somewhere?

1575736423
daurnimator
frmdstryr: nope. I was just one test of many I was playing with locally

1575736442
daurnimator
frmdstryr: I'm pushing all the ancilliary work up to my stream-mixin branch for now

1575736496
frmdstryr
The fastest I can get is 1.3 GB read & write using file read on a streamserver connection

1575736576
frmdstryr
maybe netcat is the bottleneck

1575736708
daurnimator
also maybe my PC is faster

1575736950
andrewrk
daurnimator, the main problem I have with mixin style is name collisions

1575736996
andrewrk
and also, the problem of "where is this implemented?" becomes more tricky to answer

1575736998
daurnimator
andrewrk: aren't they errors? which is the desired behaviour? what would you want instead?

1575737036
frmdstryr
I managed to get the bufferedinputstream to match the file.read speed :)

1575737037
andrewrk
they're independent; they should be in different namespaces

1575737126
andrewrk
this is contrived, but, say you had a Counter interface and a Timer interface and they both have reset(). there's no reason for this to clobber each other; both have independent meanings

1575737159
andrewrk
with current pattern, it would be foo.counter.reset() or foo.timer.reset()

1575737194
daurnimator
andrewrk: in the current pattern you're

1575737203
andrewrk
yeah, that's a feature

1575737221
andrewrk
putting them in the upper level -> the problem of "where is this implemented?" becomes more tricky to answer

1575737262
daurnimator
I think that's a bad thing: if I have a `BufferInStream` I don't want to have to do (&buf_stream.stream).method();

1575737279
daurnimator
though it does suggest good hygine for naming your mixings

1575737282
andrewrk
you mean buf_stream.stream.method()

1575737322
stratact
ouch, my upper-level mixin love took a dive...

1575737360
andrewrk
stratact, everything is a trade-off. there are certainly benefits to the mixin style. you're a curious person and so I would encourage you to try both

1575737387
daurnimator
frmdstryr:

1575737409
daurnimator
oh, that's on debug mode. let me turn on release-fast and see....

1575737453
daurnimator


1575737478
daurnimator
lots of room for improvement still: I'm using the page allocator!

1575737499
daurnimator
(also single threaded; single connection)

1575737771
andrewrk
frmdstryr, what did you end up doing?

1575737844
frmdstryr
Dump everything into one IOStream struct and make readByte return a ptr to the input buffer

1575737877
frmdstryr


1575737899
andrewrk
why is readByte() getting called at all for these benchmarks?

1575737938
frmdstryr
Was trying to make readUntilDelmiterOrEof fast

1575737942
andrewrk
ah

1575737946
andrewrk
that makes sense

1575737966
andrewrk
if you have a buffer though, you don't need readByte() for that function

1575737988
andrewrk
make the buffer full, then scan for the delimiter

1575737998
frmdstryr
daurnimator: My computer is slower today for some reason but i'm currently getting "Requests/sec:  12285.48"

1575738049
frmdstryr
but then if you read too far you have to put it back into the buffer somehow

1575738089
daurnimator
andrewrk: see my link to stratact earlier :)

1575738089
andrewrk
doesn't the buffer have an index?

1575738132
frmdstryr
yes, are you saying just do indexOf directly on the stream's input buffer?

1575738157
frmdstryr
that'd also work unless it's split over multiple chunks :)

1575738176
andrewrk
yes, fill up the buffer, look for the delimiter, if you don't find it then do another full read into the buffer. that's maximum efficiency right?

1575738298
frmdstryr
my thinking was if readByte returns the buffer there should be no difference

1575738304
scientes
if the buffer is really big you could also hack it by triggering a page fault at the end

1575738308
frmdstryr
ptr to the index of the buffer

1575738314
scientes
instead of using a range check

1575738315
daurnimator
I'm heading to bed.

1575738348
stratact
andrewrk: This chat room is very powerful. I learned about 4 different programming concepts in the past 9 hours. Being here is just great for me.

1575738359
andrewrk
happy to hear that

1575738371
daurnimator
frmdstryr:

1575738409
scientes
but given avx-512 you can just unroll the whole loop

1575738438
andrewrk
night daurnimator

1575738507
daurnimator
andrewrk: night :)

1575738517
Snektron
i've never actually worked with a cpu that has avx 512

1575738531
stratact
daurnimator: thanks for your help as well. Have a good night

1575738662
scientes
Snektron, yeah, I've only used it on VPSes that I got specially because they had it

1575738672
scientes
laptops still do not have it

1575738700
Snektron
I doubt laptops are going to have it in anywhere near the future

1575738731
Snektron
i think it takes a rather large chunk of the die

1575738758
scientes
also lots of thermal envelope

1575738819
scientes
does avx-512 have predication?

1575738845
Snektron
yes

1575738855
Snektron
i think there is a new kind of register, a flag register

1575738866
scientes
there has always been mask registers

1575738872
scientes
(only on x86)

1575738885
Snektron
is that not what you meant by predication?

1575738906
scientes
predication means you mask lanes for vector operations

1575738909
andrewrk
Snektron, I thought most consumer laptops already had it? my /proc/cpuinfo has "avx" in the flags

1575738930
scientes
andrewrk, avx and avx2 is avx-256

1575738934
andrewrk
ah

1575738956
Snektron
on the topic of cpu's

1575738984
Snektron
I have a really strange issue with one of my university assignments. Its on sorting, and i implemented a very simple radix sort

1575739005
Snektron
however, its twice as fast on my puny laptop cpu versus the server cpu's we are supposed to benchmark on

1575739027
scientes
are you sure you are using the right build flags>

1575739033
scientes
check with perf

1575739039
Snektron
I checked

1575739060
Snektron
The biggest differences where that the server does a lot more context switches

1575739070
Snektron
but it also has significantly less page faults

1575739091
scientes
maybe its due to KVM?

1575739094
scientes
virtualization

1575739109
scientes
but the main virtualiation overhead is page faults

1575739110
Snektron
server has 30% more cache misses even though it has 5 times the amount of cache

1575739120
Snektron
i don't think the cpus are virtualized

1575739143
Snektron
Since its a supercomputer

1575740026
scientes
../src/ir.cpp:11493:8: error: ‚ÄòConstExprValue‚Äô does not name a type; did you mean ‚ÄòConstErrValue‚Äô?

1575740029
scientes
what happened?

1575740043
scientes
looks like the earth moved below my feet

1575740087
mikdusan
rename ConstExprValue -> ZigValue

1575740416
fengb
andrewrk: the test change I‚Äôd like to make would break all thread safety. I know tests aren‚Äôt there yet and wasm isn‚Äôt either but I‚Äôm a little scared to introduce such a sledgehammer

1575740454
andrewrk
fengb, isn't wasm guaranteed to be single-thread?

1575740471
andrewrk


1575740620
fengb
It is right now, but there‚Äôs an open proposal

1575740653
fengb
And if we can get async working, then we can start getting memory clashes

1575740675
andrewrk
how so?

1575740679
andrewrk
memory allocation wouldn't suspend

1575740707
fengb
I need the page data in a specific state to be testable

1575740747
fengb
And I can‚Äôt reset it without hosing existing memory. I‚Äôm starting to question how useful these tests are to maintain

1575740769
fengb
It was helpful for me to find bugs, but it‚Äôs really hard to run in a suite

1575741232
andrewrk
ah I think I see what's going on here

1575741680
fengb
I could check alloced addresses instead. It‚Äôs more indirect but a lot less flaky

1575741702
fengb
Then I can check reuse and conventional vs extended in almost any context

1575744681
adamkowalski
What are the options for runtime polymorphism in Zig? Is it union(enum) for closed sets and something like std.mem.Allocator for open sets? Am I missing anything?

1575745041
adamkowalski
What do we call the type of polymorphism that std.mem.Allocator. Do we just say we are constructing a vtable manually?

1575748524
stratact
hmm, what's the best way to trim whitespace from a string? I see std.mem.trim() exists but...

1575748731
stratact
Oh cool, an example on github shows this: std.mem.trim(u8, raw_bytes, " \r\n\t")

1575749766
stratact
daurnimator: I'll need advice when you get up. I found what looks to be FreeBSD's terminfo file but it's in an odd place. Would this be the file to parse and tokenize for data like in your Lua program? `/usr/src/contrib/file/magic/Magdir/terminfo` ... I take it in Linux it's in the /usr/share/terminfo directory which makes more sense.

1575749801
stratact
I have to wonder why it's not part of the base system but in the source code?

1575751013
stratact
Ooooh, I need to either use the BSD /usr/share/misc/termcap.db or install ncurses. I wonder if termcap is compatible?

1575757135
lupine
hmph, trying to do day 7 in zig and running up against concurrency. I think

1575757194
lupine
could also just be a bug in my machines...

1575757733
lupine
well, I call `async machine.run();`  - and that call never returns, even though it eventually ends up going all the way to an `std.os.read` which has no data. attaching with gdb, I just see us sat in wait4()

1575758536
lupine


1575760394
lupine
switched to threads, it's working now ^^

1575761384
Snektron
nice

1575761396
Snektron
I just copy paste my intcode thingy whenever i need it

1575761423
Snektron
also, if you guys like that kind of stuff, theres also the synacor challenge:

1575761436
Snektron
I did that one in Zig too, but that was last year

1575761451
Snektron
its by the same buy apparently

1575761501
Snektron
guy

1575761592
Snektron
oh btw, andrewrk, i forgot to mention last time that the callbacks in std.sort aren't compile time. Does that mean they are a function pointer?

1575761619
fengb
Zig is smart enough to in-line them

1575761634
fengb
I‚Äôm not sure how that works but it works

1575761651
Snektron
i think its a bit weird

1575761688
pixelherodev
Function pointer inlining isn't unusual

1575761690
Snektron
because b in `fn a(b: fn() void) void` is neither a pointer nor comptime

1575761691
pixelherodev
Even

1575761723
Snektron
pixelherodev, not part of the language spec as far as i know

1575761751
mq32
i think it's better to have this as an implementation detail

1575761770
mq32
size-optimized code may omit the inlining, speed-optimized code may inline more aggressivly

1575761823
Snektron
i'm not quite sure that is the right solution

1575761938
mq32
either you have to allow inline specification in the language or you should have that as a compiler option

1575761956
mq32
because it's application dependent what is the right choice here

1575762042
Snektron
What does it even mean to pass a function by value

1575762096
mq32
ask that a functional programmer and he will tell you "what is a value anyways if not a function returning a constant?"

1575762138
Snektron
you mean a function returning another function which represents the constant

1575762143
fengb
Zig doesn‚Äôt really pass by value though

1575762179
fengb
Pass by value or constant ref, whichever the compiler decides

1575762775
leeward
Ask a question, leave for several hours. That's me.

1575762913
mq32
welcome back leeward

1575762953
leeward
thanks

