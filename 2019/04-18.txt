1555560882
daurnimator
huh. andrewrk is missing

1555562592
hobomatic
yeah I think he's working on his talk and trying to avoid distractions

1555564134
daurnimator
hobomatic: then he's failed. he just submitted #2301 :P

1555564152
hobomatic
haha

1555564435
hryx
I'm sure turning off IRC is prerequisite to anything requiring focus

1555564660
daurnimator
depends on the person

1555564678
daurnimator
I always need to be doing 2 things at once.

1555564732
daurnimator
(usually one thing that is rote and one thing that requires deep thought)

1555580045
hryx
WOOF%

1555580113
hryx
I think this is actually correctly parsing a lot of stuff already, but the tests still fail with error.MemoryLeakDetected

1555580250
hryx
progress: +2,176 lines, 107x TODO, 52x error.NotImplemented

1555582257
very-mediocre
hryx: nice job

1555582411
very-mediocre
i thought recursion was currently buggy, pending #1006

1555594106
tgschultz
recursion works just fine, it just isn't safe since it can blow out the stack. That is the status-quo in pretty much every language. #1006 is about solving that.

1555601520
very-mediocre
tgschultz: ok, saw some issues months ago and iirc some were said to be fixable after a revamp of some kind for recursion, but apparently the bugs were just fixed in isolation instead

1555601534
very-mediocre
i'm asking lots of questions lately, trying to get up to speed after many months of absence from zig

1555601566
tgschultz
I think there are some issues with comptime recursive evaluation.

1555601589
tgschultz
but it has been a while since I've abused comptime heavily enough to notice.

1555612813
tyler569
what's the best way to diagnose cInclude issues? there's a symbol in a header I'm using that's not visible in zig, but I'm not sure how to approach figuring out why

1555612918
tyler569
for the record, it's an ioctl identifier, which are generated by some pretty gnarly macro invocations

1555619511
andrewrk
tyler569, --verbose-cimport

1555619545
andrewrk
also this issue will help a lot:

1555619608
andrewrk
I'm going to do a live coding stream in 25 minutes from now, demo the milestone zig got to this week, some work on GeneralPurposeDebugAllocator, and then general Q&A about zig language

1555619860
shritesh
andrewrk: I'm trying to implement a wasm32-javascript target that has first-class support for writing Zig / WASM inside a JS environment. Any thoughts?

1555619892
andrewrk
it sounds like there is a very interesting use case there, is the idea that the target is inside a browser?

1555619920
shritesh
If you think about it, JS can be viewed an operating system target. std.debug.warn would be console.log, etc.

1555619946
andrewrk
DirectAllocator is `new Buffer()` (or is that a nodejs API?)

1555619957
shritesh
Memory is tricky

1555619980
shritesh
WASM doesn't have access to outside memory and we'd have to do the song and dance like my leftpad example

1555619992
shritesh
But this can be automated if we export a .js header file

1555620024
andrewrk
hmmm. that sounds a lot like an ABI

1555620068
andrewrk
I think it would help to have some detailed use cases - e.g. an example project that would take advantage of this

1555620078
shritesh
Yes it is. But it will be a sane bare-bones ABI that stays true to Zig. We don't have strings, but []u8 will map to Uint8Array

1555620080
andrewrk
that would guide the design

1555620125
andrewrk
btw I wasn't planning on demoing any wasm in this stream today - I would want more time to prepare some good examples

1555620137
shritesh
Definitely. I'll do a "survey" of popular WASM projects / use cases out there and keep notes

1555620142
tyler569
thanks andrew, I'll take a look at that issue

1555620170
shritesh
Sure, let me complete the WASI std and we should be able to demo better things

1555620180
andrewrk
tyler569, also, translate-c is in the middle of a transition during this release cycle, from its current C++ implementation to being implemented in zig code

1555620208
andrewrk
I am hoping that the completed transition will make contributing to translate-c more attractive

1555620231
andrewrk
shritesh, I have a use case that I will be exploring soon!

1555620234
hryx
andrewrk: just in case you know off the top of your head, do you know why I would be getting "error: MemeoryLeakDetected" in the new recursive parser?

1555620242
hryx
Don't worry about it if it would take time to debug

1555620246
andrewrk
I want to rewrite this in zig - even the browser-side!

1555620259
shritesh
Damn. That'd be impressive

1555620280
hryx
(for reference, current progress/changes to the parser:

1555620308
andrewrk
hryx, you're using the existing test system unmodified yeah?

1555620314
hryx
correct

1555620329
hryx
though I've replaced `parse()` with `parse2()` (for now)

1555620332
andrewrk
are you doing the arena strategy to free everything at once if there's an error?

1555620351
hryx
I thought I was, but I must be missing something

1555620354
hryx
let me see

1555620394
hryx
I do have errdefer tree_arena.deinit();

1555620410
hryx
just like in the original. But I'll take a closer look tonight

1555620443
andrewrk
what that test system does is 1. run the test with an allocator that won't fail, and count the number of allocations. 2. re-run the test N times, each time with an allocator that fails on the Nth index.

1555620462
andrewrk
during step 2 it makes sure that the number of bytes freed equals the number of bytes allocated. so it's basically testing every possible failure case

1555620489
hryx
Oh wow, that's cool

1555620505
hryx
That explains why when I add `tree.dump()` it prints multiple times

1555620526
andrewrk
maybe there's an edge case where the new implementation messes up if the first or last allocation fails?

1555620587
shritesh
I didn't consider this so it might be something like wasm32-js-browser and wasm32-js-node

1555620607
shritesh
*but it might

1555620642
shritesh
and -browser somehow knows about WebIDL

1555620673
hryx
andrewrk: by "allocation fail" you mean that e.g. `try arena.create(X)` returns an error?

1555620683
andrewrk
hryx, yes

1555620697
hryx
cool, I'll keep that in mind tonight. thanks!

1555620700
andrewrk
that should all be covered by your errdefer arena.deinit()

1555620729
andrewrk
but it says freed bytes: 0? maybe you can figure out why nothing seems to be getting freed?

1555620738
hryx
yeah the setup/teardown is so similar to the original that I can't see the problem

1555620746
hryx
ok

1555620784
andrewrk
(I hope that doesn't sound condescending- the ? at the end of my question is indicating that I'm brainstorming and don't have the answer)

1555620804
andrewrk
hmm, allocations: 1, deallocations: 1, but 0 bytes freed. that's interesting

1555620837
hryx
did not register as condescending at all :> yeah deallocation with 0 bytes freed, huh

1555620893
andrewrk
alright I'm going to close IRC and do this live stream for an hour or two.

1555620894
daurnimator
Is there any plans around our buffer type? I was thinking about optimizing it for network apis (and other usage too I guess)

1555620964
daurnimator
idea: buffer should be an array of page-size buffers (from DirectAllocator), so that you can use e.g. `vmsplice` => though the length should be adjustable (not only on page size: 4K vs huge pages); but also for usage with e.g. UDP packets and sendmmsg.

1555625271
daurnimator
Is

1555625707
hryx
daurnimator: nice thing about your change is that you can't accidentally mix up the order of parameters

1555625714
hryx
downside is a tiny bit more verbosity

1555625723
hryx
but to me it's clearer and safer

1555630864
daurnimator
andrewrk: re: last stream question. I was thinking about how

