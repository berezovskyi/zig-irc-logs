1556497447
shritesh
bketelsen: I went down the WebIDL rabbit hole this weekend. I think we can automatically generate bindings to

1556497594
shritesh
I'm personally looking forward to being able to write WebGL in Zig.

1556516556
dbandstra
is there any way to construct a union value using metaprogramming?

1556516718
dbandstra
like this `ComplexType{ .Ok = 42 };` but where "Ok" comes from a string or something at comptime

1556516746
daurnimator
dbandstra: you want either

1556516816
dbandstra
ah the infamous reify...

1556516932
dbandstra
well, it's a bit smelly that i'm using unions in the first place. i'll stick to switch statement boilerplate for now and then try to get rid of the unions later. thanks daurnimator

1556517836
hryx
tyler569: I figured out what was making my tests panic whenever there was a parse error. I'ma idjot

1556519840
tyler569
haha always the best realizations

1556520566
hryx
sure are! Welp, the floodgates are open now. went from 0 passing tests to 10 so far /(°o°)\

1556520579
tyler569
\o/

1556537108
tgschultz
dbandstra, there's also:

1556553874
andrewrk
alright, crazy week is over, back to a normal schedule for me

1556553884
andrewrk
I'm going to start with these pull requests

1556554284
halo
:D

1556555562
shritesh_
This is in the front page of HN:

1556555597
andrewrk
11,000 lines of rust replaced with @cImport

1556556035
shritesh_
andrewrk: Would it make sense to generate Zig function signatures like @cImport does at compile time using the build system? I'm trying to create bindings for Web APIs from WebIDL. Has this use case been considered or are there any example of something like this?

1556556084
andrewrk
I think it's fair to say that some use cases call for code generation. And I think the best place for that to happen is at the build system level yes

1556556774
shritesh_
Alright. Chrome is currently experimenting with WASM host bindings where WASM can directly talk to the browser without going through JS. They did a writeup on WebGL and it was like 5x faster. I think this is a better route to prepare for. Zig can really shine when the feature lands in all the browsers.

1556556829
andrewrk
that seems like the obvious endgame for wasm in the browser

1556557433
emekankurumeh[m]
sounds like the equivalent of syscalls for wasm

1556557487
shritesh_
Here's the writeup if anyone is interested

1556558381
donpdonp
im trying to call pub extern fn pipe(__pipedes: [*c]c_int) c_int; but i dont know how to declare a variable that satisfies the parameter.

1556558395
donpdonp
can someone give an example? ive tried 5 different ways and failed

1556558427
andrewrk
donpdonp, it wants a pointer to an array of 2 c_ints

1556558434
andrewrk
right? isn't that what pipe wants?

1556558442
donpdonp
yes thats right

1556558454
donpdonp
i just dont know how to tell zig that with the compiler scolding me :)

1556558460
donpdonp
with/without

1556558472
andrewrk
var fds: [2]c_int = undefined; const rc = pipe(&fds);

1556558506
donpdonp
thx!

1556558510
andrewrk
np

1556558638
donpdonp
var fds: [2]c_int = undefined; c.pipe(fds); => error: expected type '[*c]c_int', found '[2]c_int'

1556558674
donpdonp
whoops missed an &

1556558678
donpdonp
but still get an error.

1556558701
donpdonp
c.pipe(&fds); => error: expected type '[*c]c_int', found '*[2]c_int'

1556558740
donpdonp
(this is the linux pipe() system call. it fills the int array with two file descriptors)

1556558807
andrewrk
donpdonp, that's a bug, I can fix that real quick

1556558835
andrewrk
[*c] is supposed to let you cast from anything:

1556558849
donpdonp
i see.

1556559004
donpdonp
im using 0.4.0+98fa065d by the way

1556559937
donpdonp
looks like i can use this in the interim: var fds = try allocator.alloc(c_int, 2);c.pipe(fds.ptr);

1556561216
tgschultz
you should be able to avoid avoid the allocation: var fds: [2]c_int = undefined; const fds_ptr = @ptrCast([*c]c_int, &fds); c.pipe(fds_ptr);

1556572067
andrewrk
donpdonp, ^ yes, the bug is that you need that @ptrCast

1556573196
donpdonp
got it. thx.

1556580118
fengb
andrewrk: should I adapt

1556580161
andrewrk
fengb, up to you. I think I'll take responsibility of setting up the libc side of things though. Lots can go wrong and I want to pay close attention

1556580179
andrewrk
I mean as far as the .h files and building libc.a from source

1556580306
fengb
Sure

1556580664
fengb
I'll take a look at just the C ABI then

