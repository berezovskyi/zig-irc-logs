1576627708
pixelherodev
Wait is that

1576627715
pixelherodev
Did someone

1576629399
andrewrk
it's great because even though it's a lot of lines of code, it's the kind that's easy to review & merge

1576629875
kristoff_it
hey all, I'm finally in a good place with my Redis client. If anybody is writing a webapp, please take it for a spin and let me know what you think. It requires a build of Redis from the unstable branch until Redis 6 will be released, but I guess that's not a big deal for the people here :D

1576629879
kristoff_it


1576629937
dimenus
is the [*c] family of types still useful now that we have sentinels?

1576630062
pixelherodev
I think so

1576630085
pixelherodev
Though I can't remember under what circumstances, I think I was using C pointers for something...

1576630097
fengb
dimenus: yes it means the pointer is ambiguous whether it’s a single pointer or array pointer

1576630125
fengb
And... it should only be used from translate-c. Real APIs shouldn’t be that bad

1576630126
pixelherodev
Oh yeah - and e.g. translate-c will produce code using C pointers, because the sentinel isn't actually known

1576630146
pixelherodev
Only from translate-c

1576630162
fengb
Code built over translated code can be more correct

1576630172
dimenus
yeah, i re-translated my glfw bindings, but translate-c didn't generate correct code

1576630174
dimenus
need to file a bug report

1576630429
fengb
e.g. `**argv` is ambiguous but we know it’s probably `[*][*]argv`

1576630479
dimenus
yeah

1576630634
pixelherodev
Here's a weird bug: iterating at comptime over a structure type's members for automatic argument parsing, where all args are stored in a structure `settings` with a base type AppSettings. If the type is bool, set it to true (defaults for all bools are false). If the type is optional slice of constant u8s, read the next argument and use that. If the structure contains

1576630634
pixelherodev
overflow in the inline while loop used for processing

1576630689
pixelherodev
Just for the sake of testing, added a few extras, but any number > 1, and it fails

1576630728
andrewrk
kristoff_it, this looks like some high quality work :)

1576630829
kristoff_it
andrewrk: hope so, it definitely took a lot of effort :D but I also had a lot of fun. Zig is amazing.

1576631056
andrewrk
:)

1576631084
andrewrk
I'm working towards getting async I/O in std lib more generally stable and usable

1576631127
fengb
Fancy structs too

1576631132
fengb
Anon

1576631193
daurnimator
translate-c in zig is going to be so much better :D

1576631233
daurnimator
not least because of the safety features that it will introduce. translate-c crashes have always been quite opaque to me

1576631338
andrewrk
the failed-to-translate-things-as-comments feature alone will be really nice

1576631372
andrewrk
// could not translate the following macro: unable to tokenize C code: unbalanced paren

1576631385
andrewrk
/ #define foo (a,

1576632027
adamkowalski
andrewrk: is this expected? I have three different versions of the same function. I have three diferent values that I store into a static array, and into a array list, and with no list at all just as three different variables. Then I print the values one by one. I get different results with the array list then with the other mechanisms.

1576632032
adamkowalski


1576632099
adamkowalski
I labeled the functions topologicalSort, topologicalSort2, topologicalSort3.

1576632324
adamkowalski
I get the correct answer with topologicalSort and topologicalSort2. But the values are corrupt with topologicalSort3. Is there something weird with storing tagged unions in heap allocated arrays

1576646677
leeward
I'm trying to replace a C library with a Zig implementation, and having difficulty matching the C API with the generated header file. The main issues are generating size_t as the type of a parameter and using a typedef for an opaque struct.

1576646734
leeward
It would be nice if it put doc comments into the generated header at function prototypes too.

1576647289
daurnimator
leeward: what is the size_t issue?

1576648004
leeward
daurnimator: If I have an exported function that returns usize, the generated .h file has it returning uintptr_t.

1576648439
leeward
That doesn't seem incorrect, given what Zig's usize is, but I would like a way to use size_t.

1576650630
daurnimator
leeward: isn't uintptr_t just as correct?

1576650668
daurnimator
leeward: uintptr_t is: "an unsigned integer type with the property that any valid pointer to void can be converted to this type, then converted back to pointer to void, and the result will compare equal to the original pointer"

1576650750
daurnimator


1576669647
cshenton
Ran into a compiler bug:

1576676671
fengb
cshenton: literals should work — vec = [4]f32{0, 0, 0, 0}

1576676691
fengb
Bug there is that you can’t coerce a slice into an array

1576677006
fengb
The syntax you’re using there is actually trying to set a slice as an element in an array

1576678750
leeward
daurnimator: Right, uintptr_t isn't wrong, it's just not what I want for code clarity purposes. Part of the reason to choose types in an API is documentation. I can wrap the generated .h file with something nice, but that's fragile. It's not a huge deal, but being able to control what goes in there would be useful.

1576679240
leeward
I guess this depends on how important a use case exporting to C is. Is it the goal to be able to take most C libraries and rewrite them in Zig as drop-in replacements? Is it ok to wrap up Zig's generated interface in handwritten headers for C programmers to use? There might be some advantage to generating headers from Zig that are as small as possible if the interface is intended to be documented elsewhere.

1576680089
dimenus
where does the value of eg '*[3][*:0]const u8' point to? the data itself?

1576680401
mq32
this should point to an area of mutable 24 byte grouped in 8 bytes which present a pointer-to-many const u8s

1576680986
cshenton
fengb: In the actual code I don't have access to the literals, ended up solving it with a function that uses an inline loop to put the data from the slice into an array

1576681031
cshenton
Then assigned the array to a vector (which automatically casts).

1576681167
cshenton
Now have something in Zig within 20% of Julia's performance on saxpy, which is my go to example for SIMD stuff.

1576681563
fengb
I think there’s an issue to allow slices to cast into arrays to fix this problem

1576681741
frmdstryr
Does returning a struct always return a copy?

1576681820
mq32
frmdstryr: it actually

1576681839
mq32
there is now result location semantics that guarantee that returning a struct will emplace it in the result location

1576681854
frmdstryr
How recently?

1576682008
frmdstryr
I'm trying to make an init fn that uses `var self = SomeStruct` then returns `self` but it seems to break any pointers

1576682132
mq32
oh, that's a good question

1576682141
mq32
i think result location was the major feature of 0.5

1576682160
mq32


1576683268
frmdstryr


1576683271
fengb
Result location only works when returning directly into that memory space — e.g. return Struct{}

1576683293
frmdstryr
It works in the example but in my actual code it blows up every time, id' expect that to not memcpy

1576683319
fengb
Returning anything that’s a separate variable is currently not guaranteed to be no copy. But LLVM might optimize it to be no copy

1576683404
frmdstryr
Is there an issue for this?

1576683429
fengb
Yeah that won’t work with current semantics. You’ll need

1576683448
adamkowalski
fengb: I've got a really strange issue I was hoping you could take a look at

1576683471
fengb
There’s also discussion about recognizing arbitrary result locations but that’s just in brainstorming phase

1576683482
adamkowalski
I wrote four tests that I think do something identical. 3 out of four of them give the correct answer, but one looks like the memory starts pointing to something very strange

1576683510
adamkowalski


1576683525
adamkowalski
The four functions are called topologicalSort - topologicalSort4

1576683570
adamkowalski
the topologicalSort3 gives a different result from the rest. can you take a quick look and see if i'm crazy, or is this something deeper

1576684148
gonz_
`Assertion failed at D:\a\1\s\src\analyze.cpp:416 in get_abi_alignment. This is a bug in the Zig compiler.`

1576684155
gonz_
What's the usual recourse in these situations?

1576684426
gonz_
Ah, something about this was fixed 2 days ago

1576684431
gonz_
downloading a new version fixed it

1576685095
fengb
Hmm, I think you've stumbled upon result location's footgun

1576685106
fengb
Lemme see if I can find the root

1576685131
fengb
You made a copy in Sort4 so it fixed the problem: `const input_0 = inputs[0];`

1576685135
gonz_
I'm trying to sort out my win32 bindings for latest zig and it was just blowing up without much explanation

1576685145
gonz_
Ohh, nevermind

1576685420
fengb
Yeah it does that :P

1576685944
fengb
The memory is overriding o_O

1576686476
fengb


1576686483
fengb
adamkowalski: pointer to stack memory^

1576686849
frmdstryr
Zig should make an explicit stack allocator

1576686874
frmdstryr
that makes pointers that are not normal pointers

1576688735
adamkowalski
fengb: thanks! so is this another result location situation? I'm used to being able to return a std::array in c++

1576688764
adamkowalski
I guess i'm really confused about the semantics of Zig still. When is it okay to return something on the stack and when is it not

1576688790
adamkowalski
If you have a method which returns a struct by value, it usually does copy ellision. We use that pattern everywhere with init methodds

1576688813
tdeo
[]T is just a pointer and a length, which is different from an [N]T

1576688818
frmdstryr


1576688828
frmdstryr
Returning creates a copy

1576688863
frmdstryr
So any pointers are then invalid

1576688863
adamkowalski
tdeo: so should you never return []T since that is probably a "non owning view" into somebody else's array?

1576688882
adamkowalski
is the correct behavior to just return an ArrayList then?

1576688906
tdeo
you can take an allocator parameter and return an owned []T allocated with it (i think)

1576688930
fengb
You can't return pointers into stack memory, and slices are just fancy pointers

1576688960
tdeo
if it's always length 2 then you can return a [2]T

1576688964
tdeo
which is owned

1576688970
adamkowalski
unfortunately it's variable length

1576688991
adamkowalski
it represents an arbitrary operation which can have N inputs, but only 1 output so far

1576689016
tdeo
yeah, i think the correct way then is to take an allocator and return a []T allocated with it

1576689043
tdeo
(or you can take an allocated slice?)

1576689044
fengb
Other idea: pass in the result slice and return the updated length

1576689118
adamkowalski
I might do the take an allocator and return an allocated slice approach

1576689139
adamkowalski
Is that the recommended approach over ArrayList though?

1576689145
fengb
There's also setting up the struct as an array internally, and returning a slice into that array

1576689152
adamkowalski
and then just the caller has to know that they need to defer allocator.destroy(slice)

1576689159
fengb
That might actually be the best

1576689178
adamkowalski
can you elaborate on that

1576689261
adamkowalski
the lifetime of everything should be tied to the graph as much as possible during the creation of operations

1576689280
adamkowalski
but then there is a second lifetime for actually evaluating the values

1576689287
fengb


1576689297
adamkowalski
that will typically happen within a "session" and can live much shorter then the graph itself

1576689353
adamkowalski
fengb I really like that idea actually, thanks! I'll just do that. It will make the caller not have to think about lifetimes

1576689425
fengb
👍

1576689478
adamkowalski
By the way, do you all like the naming i've chosen? So far i'm kindof stealing the names from TensorFlow because I thought it would be the simplest for people transitioning

1576689506
adamkowalski
But I was debating renaming the session to "executor" or something that tells you it's the thing responsible for actually evaluating

1576689517
adamkowalski
it could also be called an interpreter I guess

1576690936
adamkowalski
fengb: I tried your solution and now all four test produce the same output, thanks!

1576696039
SyrupThinker
Ouch

1576696057
SyrupThinker
Not good when you run your compile in the bg

1576696108
SyrupThinker
I wonder whether anyerror!noreturn makes sense in the first place

1576699324
plumm
andrewrk: is there anything like @field for struct declarations? I want to be able to access constants at compile time

1576699553
mikdusan
ok since when is C++ able to infer template arguments for template functions. jesus.

1576700562
fengb
There's

1576700888
mikdusan
std.meta.declarations() and declarationInfo()

1576701230
andrewrk
plumm, @field

1576701267
andrewrk
it does `a.b` syntax except `b` is a comptime string

1576701539
plumm
ok im not sure why that didnt work for me back when i tried it

1576701684
dingenskirchen
std.cstr.addNullByte has some odd behavior, at least unexpected for me: when it returns a null-terminated slice from one that didn't contain any 0s before, the return value ends with two 0s, one at len-1 and another one at len. the size, however, increases by one

1576701769
andrewrk
dingenskirchen, sounds like a recent regression, let me take a look.

1576701825
andrewrk
hmm the implementation looks good to me

1576701834
dingenskirchen


1576701902
andrewrk
ah I see the problem

1576702132
plumm
andrewrk: is there any way @field can fail to see a decl? I have an anonymous struct with a pub const field and @field is failing to find it

1576702183
andrewrk
perhaps you are passing an instance rather than a type as the first parameter

1576702253
plumm
im not :(

1576702295
plumm
omg ok nvm

1576702297
plumm
u were right smh

1576702437
dingenskirchen
folks on discord report that the last assertion fails on commit 13cdc137e

1576703342
dingenskirchen
changing the implementation to not add zeroes makes it behave as I expected:

1576703467
plumm
I pushed an update to zig-json-decode to allow for alternative json key names:

1576703792
andrewrk
dingenskirchen, I have some improvements to sentinel-terminated pointers in progress which will fix this

1576703826
dingenskirchen
^^

1576705607
andrewrk
dingenskirchen, I don't have time to finish it today, but it's about half done:

1576707539
WendigoJaeger
plumm: this a valid use case that tags/attributes (meaning C# style attribute) would helpfor alternative key names

1576707620
plumm
WendigoJaeger: haha yeah, I just needed something that worked for master for the lsp im working on

1576707631
WendigoJaeger
lsp?

1576707644
WendigoJaeger
like language server ?

1576707733
plumm
yes

1576707764
plumm
I didn't want to litter my code with autogenerated structs that didn't conform to the naming convention so I added that as a workaround until something like tags were implemented

1576707884
WendigoJaeger
I intend to push hard for that feature, if I wouldn't have to write a custom IDL ever again that would be great

1576708392
mq32
why does every modern website tries to be smart?

1576708404
mq32
i want to read that github discussion above, but it just "ends" some times

1576708418
mq32
because the content of the conversation is loaded piecewice with javascript

1576708445
mq32
and my internet connection is bad enough that every request takes more time than it would've taken when the website would be html-only for the important parts

1576708699
fengb
I forgot how terribad cross platform usually is. I can't figure out how to get mimalloc to compile to wasm

1576711361
lygaret
hi all, is it possible to run comptime code in a different target than the compilation target? I'm trying to run forward a bit with the gba stuff that was posted to reddit last week, and wanting to write some comptime resource loader code that can read a png and json file and end up embedding a formatted byte array in the final binary, but my (admitedly simple) attempts just complain that zig can't find a libc for the target (Zig is unable

1576711361
lygaret
to provide a libc for the chosen target 'thumbv4t-unknown-unknown'.)

1576711392
lygaret
which makes sense if I were trying to embed libpng in the final build, but I just want to use it at comptime

1576711521
mq32
lygaret, you cannot run libc-code at comptime

1576711530
mq32
only stuff in pure zig without side effects can be run

1576711629
lygaret
aaaaah, ok; so, assuming I could write zig code that decoded an image (ala the json lib in std), it could work with @embedFile, but no using extant libs for that?

1576711801
daurnimator
yes

1576711831
daurnimator
ideally you'd write a library for e.g. PNG parsing and it would work at both comptime or runtime and it wouldn't care when it was called.

1576711852
lygaret
ok, that makes sense

1576711881
lygaret
is code gen something people are doing with build.zig? I'm having a hard time finding info on the various options there, but I keep seeing little references to it

1576711887
lygaret
thank you for your help, btw

1576711899
daurnimator
what do you mean by "codegen"?

1576712185
lygaret
so

1576712219
lygaret
what I'd like to do is take a png image of tiles, and generate a structure of tile data

1576712250
lygaret
I now realize I could probably do it with comptime if I wrote a pure zig png decoder

1576712263
lygaret
(or convert to xcf or whatever ahead of time)

1576712264
dimenus
am i having a brain fart tonight? is this not valid zig?

1576712315
lygaret
but could I for example generate c files as part of build.zig that then get cIncluded, using something like png2gba (which generates c arrays from png files for gba dev)

1576712335
daurnimator
lygaret: yeah you could do that

1576712426
daurnimator
dimenus: your `if` has `return` and a `;` but the `else` doesn't

1576712486
daurnimator
dimenus: also you have a space instead of an underscore between CPU ONLY\

1576712521
dimenus
wow, thanks daurnimator

1576712524
dimenus
sorry :(

1576712895
lygaret
@daurnimator, do you have examples of running tools during build.zig? I'm having a hard time finding build examples, but I'm likely just looking in the right places

