1576541574
pixelherodev
Oh yeah - zero-sized structures == bad at the moment

1576541810
pixelherodev
Given that LLVM has a JIT thing, is it possible - or more importantly practical - to make a simple Zig JIT?

1576541849
pixelherodev
I can imagine a number of challenges (referring to previous compiled objects for a start), and I'm not sure the LLVM JIT would let you add code at runtime

1576541859
andrewrk
pixelherodev, I don't think that's entirely true - sure there may be a few bugs but we also have pretty good test coverage for a lot of zero size types

1576541880
pixelherodev
I meant that I've run into a number of crashes because of them

1576541884
andrewrk
sure

1576541922
pixelherodev
I also probably remember times they've been a nuisance more than the times they've worked :P

1576542281
andrewrk
this is one of the benefits of releases, a point in time when you can give things another chance that you had trouble doing before :)

1576542768
pixelherodev
?

1576542770
pixelherodev
Ohhh

1576542770
pixelherodev
Yeah

1576542772
pixelherodev
That makes sense

1576542793
pixelherodev


1576542826
pixelherodev
I figure I can leave the code in the current state for now since it's only being used by me anyways, but once 0.6 drops I'm definitely going to want to migrate everything over and take another look

1576543047
ky0ko
so, in 0.5, i had the line "client.addCSourceFile(source, [_][]const u8 {"-std=c99", "-g"});" in my build.zig. current gives me an error with this about needing an address-of operator to coerce to slice type '[]const []const u8'

1576543054
ky0ko
i can't quite parse this. what is it trying to tell me to do?

1576543585
pixelherodev
Try `&` before the two strings?

1576543587
pixelherodev
Wait

1576543600
pixelherodev
That's a failure to convert to []const [] const u8

1576543602
pixelherodev
Not []const u8

1576543612
pixelherodev
Add an `&` before the `{`?

1576545712
ky0ko
if i do that it seems to try to interpret the {...} as a scope block instead

1576545775
ky0ko
i.e. it wants me to put semicolons there and tries to interpret the strings as code, giving me errors about ignored values

1576545939
fengb
/plain Need to put &[_]

1576546266
fengb
One day I will master this chat client and not look like a fool

1576546598
Cadey
fengb: but this sentence makes you breathe manually

1576548086
adamkowa1ski
I'm experiencing strage behavior with a test case of mine.

1576548132
adamkowa1ski
I have a arraylist that i'm appending nodes to. However, it seems like their values get corrupted. I put a debug.warn statement to print the value out before I append it to the array list. The value seems correct

1576548151
adamkowa1ski
However the act of uncommenting the append changes the value and the print now shows that the value is corrupt?

1576548154
adamkowa1ski
Any ideas

1576548179
adamkowa1ski
The test case is on line 173, and the commented line is at 167

1576554856
mikdusan
andrewrk: (just follow up). yes b242c2a did solve the problem. Thanks for closing.

1576557854
pixelherodev
fengb, what's the reasoning there?

1576558011
fengb
addCSourceFile takes a slice of slices. It's also in the doc: `exe.addCSourceFile("test.c", &[_][]const u8{"-std=c99"});`

1576561244
pixelherodev
Oh right, `[_]` is implicitly sized

1576561246
pixelherodev
Not slice

1576561259
pixelherodev
So while a pointer-to-array can decay into a slice, an array cannot

1576562085
leeward
I'm having trouble exposing a C API that wraps an array_list.

1576562122
leeward
Change export on line 18 to pub, and it builds fine.

1576563004
fengb
It probably doesn’t export array_list. Try std.ArrayList

1576563021
fengb
It builds “fine” without the export because it lazily ignores the function

1576590979
Snektron
yeah i stumbled a bit about that too

1576590988
Snektron
huh

1576591028
Snektron
matrix broke again, it was in response to <pixelherodev: So while a pointer-to-array can decay into a slice, an array cannot>

1576591327
fengb
A glitch in the matrix

1576592947
dch
just tried out building zig from source on aarch64 freebsd and it fails here

1576593017
dch
"TODO: support C ABI for more targets" shall I add this to the referred issue, or does this fall under tier-2 still for freebsd?

1576596043
leeward
fengb: It lazily ignores pub functions when building libraries? That seems odd.

1576596241
fengb
It lazily ignores everything that's not referenced. Pub jsut means exposed, not compiled

1576596262
fengb
Only things that are explicitly used or exported to the linker are actually compiled

1576596297
leeward
So if I wanted to write a library in Zig and only ship the object code, I'd have to use the C ABI?

1576596327
fengb
Yes, until we define a Zig ABI

1576596367
leeward
Well that's a surprise but I guess it's not unreasonable.

1576596565
leeward
Thanks though. It looks like you were right about array_list.

1576596918
mq32
fengb, leeward: i don't think it's possible to define an ABI for Zig

1576596922
mq32
except for ZigIR maybe

1576596934
mq32
because functions with comptime parameters cannot be compiled to machine code

1576597829
leeward
mq32: that's an interesting point. A library distributed as ZigIR would be pretty cool though, since it'd be able to target more than 1 platform.

1576597878
mq32
yeah, that was excatly my thought after i wrote that :D

1576599058
fengb
I added some "accurate" ghosting to my emulator and it's really disorienting -_-

1576599123
mq32
fengb: ghosting?

1576599128
mq32
after-image?

1576599884
fengb


1576599889
fengb
More hardware accurate :P

1576599899
mq32
ah, motion blur

1576599909
mq32
that looks horrible on modern screens

1576599926
fengb
Yeah I had to add it in. 60 MHz doesn't actually render it too well

1576599935
fengb
It looks horrible on the old GB system too

1576599940
fengb
We just look fondly on the past

1576599952
mq32
yeah, i know

1576599960
mq32
TI83+ has horrible motion blur as well

1576600057
fengb
I should probably disable it. It's not a good default

1576600078
mq32
yeah, it isn't

1576600089
mq32
pretty much any emulator is not hw-accurate

1576600102
mq32
as the original games run on CRTs and they have special effects

1576600421
WendigoJaeger
some of them are pretty close

1576600465
WendigoJaeger
For the SNES hacks I've did, bsnes-plus was very helpful for quick iteration

1576600533
WendigoJaeger
wish that LLVM that a proper 680000 backend so that I could use Zig for Genesis/Megadrive projects and Neo-Geo

1576600569
mq32
hehe

1576600589
mq32
WendigoJaeger, have you seen "overdrive 2" by titan for megadrive?

1576600592
WendigoJaeger
yes!

1576600598
WendigoJaeger
quite impressive!

1576600602
mq32
yeah, it is

1576600607
mq32
although they cheated a lot :D

1576600654
WendigoJaeger
yeah like that SNES demo that only stream PPU commands generated from F#:

1576600706
mq32
nah, not like that :D

1576605035
riba
what is the correct way to pass a zig-string (which i got by allocPrint and manually terminated with a "\x00") to c? i tried the .ptr field of the resulting slice but that does not seem to be the right thing to do

1576605098
riba
at least when i pass the slice.ptr to the c format string as %s, it prints the address

1576605290
riba
no, that is wrong

1576605313
riba
it's allocPrint which prints the address

1576605359
riba
i have a cstring, so i give allocPrint the cstring.?

1576605365
riba
i'll have to think about that

1576605478
riba
same happens if i just give it the pointer though

1576605495
riba
so i guess the question is, how do i pass a c string to allocPrint

1576605537
fengb
CString is removed from master

1576605627
riba
i guess i mean [*c]const u8

1576605771
riba
oh well, the daily 15 minutes of coding are over

1576608504
fengb


1576611772
D3zmodos
Is there a simple way in zig to recursively print a struct? (purely for debugging purposes, similarly to how golang's %+v does) JSON serialization would do but I don't see any functions in the stdlib json code for serializing structs (unless I'm missing something? >.>)

1576613744
D3zmodos
oh wait...the default formatting does this already for struct members that are other structs...but seemingly not if they are arrays? (I just get `typename@address`)

1576615246
andrewrk
D3zmodos, that can be improved

1576616460
data-man
andrewrk: I planned to do it after my vector's formatting PR

1576625008
andrewrk
wow:

1576625267
fengb
o_O

1576625565
cshenton
Do subsequent calls to @Vector with the same args create distinct types?

