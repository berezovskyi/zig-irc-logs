1563151770
via
has anyone done any work towards making a cbor encoder?

1563151993
daurnimator
via: not that I know of; but it's something I need soon! would be awesome to have one

1563152207
via
yeah, i need one too. i might try, but given how noobish i am its unlikely anything of value will come of it

1563154878
emekankurumeh[m]
I don't know how rust people say rrir, rriz is exhausting

1563154942
mikdusan
i'm guessing rrir is something-something-internal-representation; what's rriz ?

1563155101
hryx
primitive types (f32, void, anyerror) are not keywords. should primitve values (true, null, undefined) also not be keywords?

1563155155
daurnimator
hryx: I think that would make sense.

1563155257
daurnimator
Types

1563155271
hryx
I think so too. I'll make a proposal

1563155616
hryx


1563156583
via
i'm struggling with some syntax issues, and i just want to make sure that what i'm trying to do here is possible:

1563156583
[[]]
v​ia: Title "gist:e81d45caf0076d8bb563c77d4f2dda19 · GitHub" Shortened <

1563156617
via
namely anonymous tagged unions inside a struct

1563156657
daurnimator
via: maybe you need @unionInit ?

1563156699
daurnimator
oh wait no

1563156729
via
i'm so throwing in function pointers in a way that i don't know is valid, i should probably trim my example down

1563156822
via
yeah, replaced that with just a u32 value, compiler error is just "error: expected token ';', found '}'

1563156825
via
.code = { .c_int = 12 },"

1563156932
via
hurmph, i just made it .code = node.code {.c_int = 12}, and it compiled, so i guess thats how you do the anonymous struct

1563156937
via
feels a little verbose

1563157110
daurnimator
via: that's #685 I think

1563157164
via
quickly glancing at that, yeah

1563157189
emekankurumeh[m]
mikdusan: rrir, is rewrite in rust

1563157357
via
actually, no, that compiles, i just didn't have code that referenced the struct

1563157361
via
doesn't*

1563157799
via
replaced the anonymous tagged union with an explicit one and it worked :(

1563158231
via
but i can define the enum in the struct and refer to it that way, to keep the namespace clean at least

1563158656
daurnimator
hrm. how best to write code that uses low bits of pointers in zig?

1563158794
daurnimator
union { ptr: *align(64) foo, data: packed struct { dummy: @IntType(false, usize.bit_count-6), foo: bool, bar: u4 } }

1563158856
daurnimator
^ I guess this is trying to find a workaround until #2652 is done

1563159842
via
can addresses of c vars be taken at comptime?

1563159947
via
trying to use &my_imported_c_thing.some_data_section_var in a comptime expression doesn't seem to work, complains about it being unable to evaluate constant expression

1563162896
daurnimator
via: you can take the address; but you can only use it at comptime I believe

1563163198
andrewrk
there's nothing special about c global variables

1563174565
daurnimator
emekankurumeh[m]: I feel like your .steal return type is weird

1563174622
emekankurumeh[m]
how so?

1563174640
daurnimator
emekankurumeh[m]: also: `return Stolen(T){ .Empty = {} };` vs `return Stolen(T).Retry`  is the latter valid ?

1563174708
daurnimator
emekankurumeh[m]: I would return `null` for Empty. For retry... should you not retry

1563174788
daurnimator
`self.top.cmpSwap(top, top +% 1, .SeqCst) == top` <-- I'm actually unsure if the `== top` is pre or post increment....

1563176517
emekankurumeh[m]
i'm fairly certain that cmpSwap is correct, i could be wrong though

1563176674
daurnimator
emekankurumeh[m]: but does the `==` happen before or after the `+%`?

1563176794
emekankurumeh[m]
i would assume after, because `+%` is just a overflowing add, not an increment, so that would be evaluated first

1563176842
daurnimator
oh right. lol.

1563176852
daurnimator
My brain read it as +=

1563176959
emekankurumeh[m]
i was wondering what you meant by increment...

1563188686
gamester
Is whitequark aware that his SSL certificate is invalid? No logs :(

1563189115
gamester
andrewrk: Currently I think the way you do cimports are by translating the C code to Zig code, but did you consider having C AST nodes instead?

1563189157
gamester
I haven't given this a thought, I'm just curious

1563190035
ffddr
Is there any workaround for

1563190037
[[]]
f​fddr: Title "extern enum should allow multiple enumerations with the same value · Issue #2115 · ziglang/zig · GitHub" Shortened <

1563190870
daurnimator
Could someone reply to

1563190871
[[]]
d​aurnimator: Title "Wikipedia:Templates for discussion/Log/2019 July 11 - Wikipedia" Shortened <

1563191721
ffddr
Workarounded by patching source .h :)

1563192382
via
daurnimator: what do you mean by 'use'? can i store it for runtime use? i'm not trying to defer it at comptime, just store its location

1563199581
johnLate
I've played around with zig a few weeks ago for the first time. Is there a place were I can quickly read up on recent changes? Like a work-in-progress release notes document for the master branch?

1563199866
Tetralux_
git log XD

1563200133
johnLate
I'm already using things like «git log --pickaxe-regex -S '\{\.[0-9]' -p» to figure out how string formatting has changed ;)

1563200154
Tetralux_
That... is unreadable xD

1563200178
Tetralux_
It's things like that that make me glad I don't use regex any more.

1563200203
johnLate
it's just "{." + a number

1563200219
Tetralux_
So it is.

1563200240
Tetralux_


1563200890
fengb
It looks like we included all the headers for Windows libc?

1563200921
fengb
So I can do the same for Mac? Don't need to strip down to just libc

1563203684
ntgg
How do i put a number into a string

1563203712
bheads
checkout std.fmt

1563203721
ntgg
something like "foo " ++ num ++ " bar"

1563203744
ntgg
can you call format on a string?

1563203767
ntgg
It looks like it needs a fuction

1563203776
bheads
no, you format a string into memory.  You will want an allocator

1563203791
ffddr
I guess `std.fmt.allocPrint` is the closest to `"foo" ++ num`

1563204193
fengb
`try std.fmt.bufPrint(buf[0..], "foo {}", num))`

1563204858
ntgg
why does `switch (val) { .A => return 'a', .B => return 'b', }` but `return switch (val) { .A => 'a', .B => 'b' };` not work?

1563204864
ntgg
it isn't a compile error

1563204872
ntgg
it just doesn't return the right thing

1563204918
Tetralux
You'd expect them to be the same, but the second returns........?

1563204923
fgenesis
is a switch expression defined to return a value?

1563204938
Tetralux
fgenesis: You can certainly use it like it does.

1563204939
fgenesis
or does it count as a statement without return

1563204953
Tetralux
OH

1563204959
Tetralux
I didn't notice that before.

1563204969
Tetralux
The 'returns' in the first one return from the enclosing function.

1563204996
Tetralux
The lack of them in the second means that the switch itself evaluates to the values; i.e: so you could do 'const val = switch ...'

1563205036
Tetralux
'return' in Zig

1563205041
fgenesis
c-style vs functional style, but if one of them doesn't work that looks like a bug

1563205063
fgenesis
pretty sure that's how 'return' was intended here

1563205076
Tetralux
I'm not sure where the 'style' thing is coming from..

1563205089
Tetralux
It's not a style thing here.

1563205092
fgenesis
my brain calls it like that, blame my brain

1563205094
Tetralux
It's a control flow thing here.

1563205153
Tetralux
Either you want to return a value from the function depending on the switch value, or you want to set a variable to a value depending on the switched value.

1563205159
Tetralux
Those are two very different things.

1563205195
ntgg
The actual context I was using it in had it call a fuction that returned an optional value, and an else branch that returned null, and it always returned null

1563205240
Tetralux
Can you paste an example?

1563205342
ntgg


1563205342
[[]]
n​tgg: Title "~ntgg/snake-zig: src/game_state.zig - sourcehut git" Shortened <

1563205392
ntgg
just move the return outside and it no longer works

1563205393
andrewrk
ntgg, return switch is supposed to work just fine. the next step towards solving the problem is coming up with a reduced test case that is easier to debug in the compiler

1563205971
ntgg


1563205971
[[]]
n​tgg: Shortened <

1563206004
ntgg
should I open an issue?

1563206239
fgenesis
heh, godbolt.org directly jumps to zig_panic() :D

1563206250
Tetralux
ntgg: I believe so.

1563206260
Tetralux
That looks like it should work as you expect.

1563206478
ntgg
if you replace the else with a .No you get a compile error saying that it expected type u32

1563208423
andrewrk
thanks for the bug report ntgg

1563208737
Tetralux
It's a bit of a bummer that you can reach 4 indents quite easily when building datatypes.

1563208750
Tetralux
And 4 indents are like 25% of the page width.

1563208831
Tetralux
I'd honestly prefer to either be strictly procedural (no methods, but that's unreasonable cause of no overloads), or the receiver pattern. I didn't really like that in Go... I think I prefer procedural, but still.

1563208847
Tetralux
It would mean that every fn has a body that's one or two indents in.

1563208913
Tetralux
Which I'd personally find easier to read, and less chlostrophobic.

1563208939
Tetralux
I would use 2-width-tabs, but they're quite a bit harder to read.

1563208957
Tetralux
(.. 'least they were when I tried it.)

1563208985
Tetralux
And for clarity, by 'receiver', I mean this:

1563209003
bheads
? 25% of the page width? screens are bigger then 80 chars now a days

1563209005
Tetralux
pub fn doThings(self: *Self) void { ... }

1563209019
Tetralux
It's 25% if the width is 100 chars..

1563209042
Tetralux
Oh right

1563209045
Tetralux
I said 4 tabs earlier

1563209046
Tetralux
I meant 6.

1563209053
bheads
lol my editor is about 250 chars across

1563209060
Tetralux
Though even 4 is more than I'd like.

1563209112
Tetralux
I don't like my editor taking up my entire screen xD

1563209116
Tetralux
Besides which

1563209124
Tetralux
I change font family/size relatively often

1563209133
Tetralux
And every font has differing widths.

1563209136
bheads
I am in java land, my methods start 3 indents deep

1563209144
Tetralux
One reason I hate Java.

1563209150
Tetralux
I... HATE... indents.

1563209156
Tetralux
It's like

1563209165
Tetralux
"But there's all this space here that you're wasting!"

1563209181
companion_cube
this reasoning leads to promoting Haskell

1563209187
companion_cube
which doesn't waste vertical space either ;)

1563209191
companion_cube
the more compact, the better, right?

1563209196
Tetralux
Not really.

1563209200
bheads
or perl golf

1563209204
Tetralux
Only if you are unreasonable about it.

1563209220
bheads
so python is right out

1563209221
Tetralux
"Oh hey - you like this slightly radical thing? Why not take it to its extreme then?"

1563209228
Tetralux
Or not - I'm not advocating thta.

1563209238
Tetralux
And it's disingenous to say I am. xD

1563209243
Tetralux
But you know that I imagine.

1563209252
Tetralux
Fact is, I like vertical space.

1563209256
bheads
4 space "tabs" is good for readability

1563209258
Tetralux
And I do like hori space too.

1563209265
Tetralux
But I don't want to waste it.

1563209270
Tetralux
Also bheads, yes it is.

1563209276
Tetralux
I want to use it.

1563209300
Tetralux
But starting my code a third of the way across my page is not very good.

1563209306
Tetralux
I need my space dammit xD

1563209320
bheads
well its okay 18% at 100 chars :)

1563209342
Tetralux
Out of interest, I have around 200 chars of hori space.

1563209360
bheads
so 4 tabs is only 9%

1563209379
andrewrk
fun fact: zig fmt is completely unaware of how long lines are

1563209390
andrewrk
(intentionally)

1563209399
Tetralux
But I like to align things to the left; I don't like things floating too far to the right.

1563209403
ntgg
even if you only have 80 chars you need 7 tabs to get to 1/3

1563209414
companion_cube
I like to have short lines because of vertical splits in vim

1563209443
Tetralux
That is a more pragmatic reason that I can agree wholeheartedly with.

1563209446
bheads
zig fmt matches my personal coding style. which makes me happy

1563209468
Tetralux
If I used vert split a lot, I would not like editing long-line code at all.

1563209482
Tetralux
Well - maybe that's a slight exaggaration but :"D

1563209500
companion_cube
in vim I have 2 vertical bars at 80 and 100, so I know when my lines become too long

1563209519
Tetralux
My point is, 4 tabs isn't so bad - any more than that and I start to question it x)

1563209535
Tetralux
And even four I'm a bit unconfortable about.

1563209605
Tetralux
Certainly once you start getting towards 150 chars.

1563209615
Tetralux
or less.

1563209718
Tetralux
What also applies to me is that if you have wrapping lines, you want the exceptionally long ones to wrap, not all of them.

1563209730
companion_cube
what leads you to 4 levels of indentation?

1563209769
fubd
andrewrk: found a compiler bug

1563209770
[[]]
f​ubd: Title "Compiler Explorer" Shortened <

1563209773
Tetralux
Iterator.next of a polymorphic struct.

1563209778
Tetralux
@companion_cube

1563209798
Tetralux
(.. which has one or two indents within it.)

1563209821
companion_cube
ah ok, nested structs. makes sense.

1563209890
Tetralux
It kinda makes me want to extract the fns into top-level procedures and then declare consts in the body that point to them.

1563209916
Tetralux
But that means I have to give the now-extracted member fns a comptime type arg for Self.

1563209932
Tetralux
(.. I haven't tried that yet, so it might not even work well.)

1563209934
ntgg
can't you just move the Iterator struct outside?

1563209937
Tetralux
(.. But that's one idea I had.)

1563209952
Tetralux
ntgg: It has a *Self field.

1563209955
fgenesis
Tetralux: a bit unrelated, but regarding code formatting here's a game: Find the end of the function:

1563209956
[[]]
f​genesis: Title "Aquaria/Avatar.cpp at master · AquariaOSE/Aquaria · GitHub" Shortened <

1563209966
fgenesis
and while you're at it, find the highest indent

1563209972
fgenesis
great fun for the entire femily1

1563210056
Tetralux
I actually kinda like the 8-indent because of it's extreme clarity... but those... jesus those are far XD

1563210073
ntgg
7118 and 13?

1563210091
fgenesis
that was quick, and not sure about the 13, but might be accurate

1563210097
Tetralux
7118 is what I got on a cursory glance too.

1563210228
Tetralux
Maybe some static inline fns would be handy there? :3

1563210243
Tetralux
I haven't looked at the code in enough detail to know but

1563210249
Tetralux
That might be one of those times where

1563210256
Tetralux
I'd break some out into local fns

1563210257
fgenesis
the only thing that helps there is a canister of napalm

1563210263
Tetralux
And just call them instead of indenting.

1563210488
bheads
sometimes I wish I could write more complex expression:   if (minX <= X <= maxX) ...

1563210630
halosghost
bheads: it is nice that some languages support that

1563210668
halosghost
but, it does mean that the return value of those operators is a little more hand-wavy

1563210682
bheads
its still a bool

1563210696
bheads
it just means  minX <= X and X <= maxX

1563210711
halosghost
in that case, it has to be a syntax extension right?

1563210720
fgenesis
how do you overload multi-operators

1563210736
fgenesis
operator<=(a,b,c)

1563210747
bheads
there is no operator overloading

1563210751
bheads
in zig

1563210751
Tetralux
i dont think you ovload any operators

1563210766
fgenesis
i mean in general, but ok

1563210795
fgenesis
ahh, operator overloading yes or no is always such a debate :D

1563210807
bheads
but in the c++ op case:    operator<=(operator<=(minX, X), maxX)

1563210835
fgenesis
just no

1563210836
halosghost
bheads: that would end up checking to see if a boolean is LE to maxX, wouldn't it?

1563210848
bheads
maybe

1563210855
halosghost
which is not what you want (and is what I was referring to as making the return type more hand-wavy)

1563210855
fgenesis
lets just say math notation needs to die

1563210874
halosghost
or, perhaps this is an example of the need for a new operator

1563210878
halosghost
`between` perhaps

1563210886
halosghost
à la SQL

1563210892
bheads
between has its own issues

1563210902
bheads
it, inclusive/exclusive

1563210913
fgenesis
if(a < b and b < c) isn't necessarily hard to write

1563210923
fgenesis
super clear, too

1563210947
bheads
no its not, just hard to see it , plus I rarely see people write it that way

1563210970
bheads
normally I see    if( x >= minX and x <= maxX)

1563210974
halosghost
bheads: purely hypothetically (I don't actually think we should do this): i between interval where interval can be specified as in math

1563210986
halosghost
bheads: so, for example: i between [x,y)

1563210989
fgenesis
yeah but that is just cumbersome, or some didn't understand boolean

1563211006
bheads
or just (a <= b <=c)

1563211023
bheads
since <= is already in most languages

1563211032
halosghost
sure, as a syntax extension sugar

1563211036
fgenesis
which evaluates to (a <= b) <= c which is fail. no.

1563211057
halosghost
personally, I don't particularly care whether we paint the bikeshed blue or not

1563211058
fgenesis
this sort of hack inside the compiler just to please some math-y people is a no-no

1563211058
bheads
its not that thou  its (a <= b) and (b <= c)

1563211120
bheads
its not a hack, just a new parsing rule

1563211158
bheads
I mean   a + b + c  is okay

1563211168
halosghost
but that's because + is associative

1563211173
halosghost
which is not true of any of the comparison operators

1563211186
halosghost
and it can't really be because their return type isn't the same as their parameter types

1563211200
fgenesis
can't we just get rid of operators and replace them all with built-in functions?

1563211227
halosghost
I think we may have reached the point where this bikeshed won't be built

1563211235
halosghost
shall we move onto another topic?

1563212920
andrewrk
emekankurumeh[m], I just discovered

1563212921
[[]]
a​ndrewrk: Title "Process Monitor - Windows Sysinternals | Microsoft Docs" Shortened <

1563212924
andrewrk
this tool is incredible

1563212981
oats
Why did I get pinged for that?...

1563213040
emekankurumeh[m]
i personally use

1563213041
[[]]
e​mekankurumeh[m]: Shortened <

1563213045
emekankurumeh[m]
but that does look interesting

1563213170
andrewrk
emekankurumeh[m], thanks I'll try that too

1563213339
emekankurumeh[m]
at a cursory glance procmon seems better for development, i just use processhacker as a replacement for the stock windows task manager

1563213369
ntgg
I just "finished" my first thing in zig, snake!

1563213449
andrewrk
cool!

1563214649
ntgg
I'm trying to compile on windows, and I am getting an error about an invalid carriage return, but there is no carriage return there

1563214723
dimenus
run your code through zig fmt

1563214765
dimenus
andrewrk: zig build is a definite improvement for building on Windows :)

1563214868
ntgg
zig fmt is failing on `const std = @import("std");`

1563214900
Sahnvour
zig fmt also errors on carriage returns

1563214902
gonz_
ntgg: And what's the line ending set to on the file?

1563214915
gonz_
msdos or unix?

1563214916
andrewrk
Sahnvour, `zig fmt` fixes carriage returns & tabs as of last week

1563214929
Sahnvour
andrewrk: nice, missed that

1563214948
gonz_
Wut, you mean I don't have to set my line endings anymore?

1563214959
ntgg
it should be unix, I wrote all the code on linux, just cloned the repo to windows

1563214972
gonz_
Windows clones by default with CRLF

1563214979
gonz_
And commits with LF

1563214990
ntgg
how do I turn that off?

1563214992
Sahnvour
in this case you may want to configure git to always use unix style, for example

1563214997
gonz_
You probably shouldn't

1563214999
gonz_
to be honest

1563215012
gonz_
There's no real use

1563215022
andrewrk
git should be configured to not mangle anything

1563215022
gonz_
You can set certain file types to always be LF, however

1563215043
andrewrk
it's a real shame that they made mangling the default, it was a poor choice

1563215070
gonz_
It's a non-issue in the vast majority of cases

1563215129
gonz_
When doing transitions between systems it might matter, but that's a special case. Trying to copy over CRLF files to a docker container without converting first, etc.

1563215453
nrdmn
andrewrk: I've been playing with zig and uefi recently. Are there any plans for uefi support in zig's standard library?

1563215498
gonz_
Doesn't that seem like more of a userland thing?

1563215638
andrewrk
nrdmn, such changes are in scope but it's not a project I personally plan to work on. so it can happen but will require contributions from the community

1563215896
andrewrk
a good start would be improving the default panic handler

1563216544
ltr-
any gotchas on using sqlite with zig?

1563216613
andrewrk
I'm not aware of anyone who has tried that yet

1563216666
nrdmn
andrewrk: what is it supposed to do?

1563216782
andrewrk
some kind of diagnostic to help the programmer troubleshoot why it happened, and then not return

1563217632
emekankurumeh[m]
is there any guarantee in the order of writes from the assignment of a struct initializer?

1563217843
Sahnvour
andrewrk: do you have a moment to discuss a practical issue ?

1563218785
andrewrk
Sahnvour, let me grab some lunch and then I can

1563221148
emekankurumeh[m]
trying to store a function pointer to a function that takes a var parameter seems to mess zig up

1563222684
Sahnvour
andrewrk: sure. I'm thinking about the implementation of wyhash for the stdlib. A part of it (handling the remaining bytes after eating them by packs of 32) is basically a big switch covering 32 cases with slightly different behaviour, that can be expressed in other, more generic ways. See the patch here

1563222686
Sahnvour
switch is hard to read and maintain, it's much easier on the optimizer.

1563222711
Sahnvour
For example consider when we're hashing a u64: casted as a slice of u8, we know its size at comptime and can easily ignore the loop on 32byte packs, and directly select the good switch case that will handle perfectly the data's size. The optimizer can see through this pretty easily and generate efficient machine code.

1563222741
Sahnvour
But the generic version contains more control flow and branches, and incurs a big overhead for small data sizes. It's generic at the cost of having runtime control flow. I'd like to get rid of it. Since the behaviour of each case of the switch depends on the value (0-31), I would like to be able to use it at comptime, in a similar way to inline while. That's what the original switch is doing, but manually. It's

1563222742
Sahnvour
ok to generate 32 code paths in this case, if this helps performance by dropping a few branches.

1563224738
nrdmn
the documentation for std.debug.assert says "In Debug and ReleaseSafe modes, calls to this function are always generated, and the `unreachable` statement triggers a panic.", but also "this function may not detect a test failure in ReleaseFast and ReleaseSafe mode."

1563224760
nrdmn
so why may a test failure not be detected if the code is not optimized away in ReleaseSafe mode?

1563224802
nrdmn
is the second quoted sentence meant to say "in ReleaseFast and ReleaseSmall mode" ?

1563225148
andrewrk
Sahnvour, is this sort of like duff's device?

1563225167
Sahnvour
nope, we execute through the switch one time for each call

1563225196
Sahnvour
and it does not influence the next one

1563225198
andrewrk
the switch looks fine to me, tbh

1563225222
andrewrk
it seems easier to read than the programmatic code

1563225261
Sahnvour
I believe the programmatic approach could be simpler with more expressive powers, but it's not satisfactory to me either as it is

1563225418
nrdmn
seems like functions supportin

1563225428
nrdmn
g a variable number of arguents are not documented

1563225591
emekankurumeh[m]
zig varags are going to be removed

1563225628
ntgg
nrdmn:

1563225914
Tetralux
Here's a possibly related one actually

1563225942
Tetralux
Suppose you've written a BucketArray(comptime T: type, comptime bucket_size: usize)

1563225972
Tetralux
And you want to store a lot of several types.

1563225983
Tetralux
So you have a struct that essentially is

1563225988
Tetralux
or rather has

1563225999
Tetralux
A field of type BucketArray(T, n) for every type you want to store.

1563226018
Tetralux
But you don't know what exact Ts you're gonna use.

1563226027
Tetralux
Or, put more simply

1563226041
Tetralux
Or - not simply - a different way

1563226052
Tetralux
You want data: ArrayList(BucketArray)

1563226058
Tetralux
But BucketArray is polymorphic.

1563226127
Tetralux
Essentially, you want somewhere to keep your instance of T, U, etc.

1563226134
Tetralux
You have a BucketArray for each one.

1563226145
Tetralux
But you don't want to list them out and access the one you want.

1563226160
Tetralux
You want a struct that you ask for a T, and it makes a BucketArray for Ts and gives you one.

1563226171
Tetralux
But how do you store the BucketArrays.

1563226303
Sahnvour
Tetralux: what you want is a container of heterogeneous types ?

1563226316
Tetralux
Not quite.

1563226327
Tetralux
See it's not an array of 'any'...

1563226340
Tetralux
It's an array containing BucketArrays for each type you want to store.

1563226349
Tetralux
But BucketArray is polymorphic.

1563226382
Tetralux
You essentially want to do .get(T) and it makes a BucketArray for T if there isn't one, and gives you a T from that array.

1563226393
Tetralux
But how do you store that new BucketArray?

1563226416
Tetralux
If it wasn't poly, you could maybe have a HashMap(T, BucketArray) for that T.

1563226448
Tetralux
HashMap(type, BucketArray)

1563226449
Tetralux
*

1563226455
Sahnvour
is listing all the Ts used to create BucketArray(T) an option ?

1563226513
Tetralux
I'm interested in both if you do and don't.

1563226522
Tetralux
If so, then it'd be because you'd have .get(T)

1563226530
Tetralux
(.. for example.)

1563226569
Sahnvour
I think usually for this, you want to either create something containing all your BucketArray(T)s ahead of time, or associating each type T with an id that's used to fetch the correct BucketArray(T) at runtime (similar to the hashmap idea)

1563226589
Tetralux
.. like it's TypeId :)

1563226600
Tetralux
But

1563226604
Sahnvour
for example

1563226624
Tetralux
How do you have a HashMap that maps a TypeId to BucketArray(T)?

1563226661
Tetralux
Like - it won't let you store multiple BucketArray(T)s in a map where T is different for each key.

1563226664
Sahnvour
at this point the thing is you have to hide the genericity (BucketArray can contain any T) behind something, and do some casting

1563226689
Tetralux
I guess I'm not entirely sure how you'd hide it here.

1563226697
Tetralux
Like

1563226705
Tetralux
I could have *void values in the map but..

1563226737
Sahnvour
yeah that's not really elegant, but it works

1563226762
Sahnvour
I mostly did this kind of design in C++ where you can get away with abstract classes and inheritance to make it less ugly

1563226780
Tetralux
See - it would be better to reimplement the BucketArray inline.

1563226785
Tetralux
But that's against reuse :)

1563226833
Tetralux
The BucketArray contains [N]T which is why it needs the type parameter.

1563226901
Tetralux
I essentially want to hide the T from the equation for the purposes of storing them in the array.

1563226947
Tetralux
I'm not sure how best to solve that without resorting to another pointer indirection and *void.

1563226980
fengb
I don't think you can do that since that's not comptime known

1563226998
fengb
Without the [N]T known to the compiler, the memory layout isn't guaranteed

1563227008
fengb
So you'd be stuck doing a void pointer hack

1563227014
Tetralux
The [N]T in BucketArray

1563227019
Tetralux
But even if not,

1563227030
Tetralux
Is "use *void" the best solution here?

1563227046
Tetralux
Like - is there something Zig could have that would make this much cleaner?

1563227046
fengb
Yes but that needs to be a hard reference variable

1563227081
fengb
The compiler needs to know at a given time which specific BucketArray to use

1563227167
fengb
I suppose you can kludge it with pointers. Then the memory layout of all BucketArrays will be identical

1563227544
Sahnvour
if you know ahead of time the complete list of T you will use, you can create your specialized BucketArrays and access them in a type-safe way

1563227569
Sahnvour
otherwise, I think you're good for void pointers

1563231436
Tetralux
One way you could solve this is to have a builtin Any type

1563231456
Tetralux
Which is packed struct { info: *TypeInfo, value: *void }

1563231489
Tetralux
But with buitin support for things like: const s = "Hello, World"; const a: Any = s;

1563231513
Tetralux
Or, perhaps more likely, const s: Any = "Hello World"

1563231537
Tetralux
Essentially, you could cast any type to Any implicitly.

1563231569
Tetralux
You could then store ArrayList(Any) and an array of TypeId and use the latter to look up which one corresponds to the former.

1563231588
via
i am running into an issue where i would really like to have a type like that too, which is leading me to my whole nested structs and tagged unions thing from last night

1563231625
Tetralux
Honestly, I think I'd make my own Any than doing any fancy with nested structs xD

1563231629
Tetralux
That doesn't sound fun

1563231662
Tetralux
We have the 'static'/comptime version of it already: fn f(p: var)

1563231687
Tetralux
(.. The var causes f to be specialized for every type passed for it.)

1563231709
Tetralux
But you could also use fn f(p: Any) and then anything you pass would be auto-converted into an Any.

1563231778
Tetralux
(.. If you did `const s = 42; f(s);`, the Any would contain `&s` and `@typeInfo(s)`

1563231790
Tetralux
You'd then switch on the typeInfo.

1563231875
Tetralux
I'm not familiar with how typeInfo in Zig works  yet.

1563231910
Tetralux
But if there's one instance of TypeInfo for every type in the program, then you'd store *TypeInfo and essentially check for `p.info == @typeInfo(U)`

1563231937
Tetralux
Alternatively, you might also be able to use TypeId.

1563231953
Tetralux
Odin has Any IIRC.

1563231970
Tetralux
There was an interesting thing about passing Anys across the DLL boundary though.

1563232032
Tetralux


1563232110
Tetralux
But yes - It could prob be userland, but the implicit casting could not of course.

1563232298
companion_cube
Tetralux: ocaml uses a crypto hash of the signatures when linking

1563232326
companion_cube
so if you dynlink something that uses a bunch of types, it could compare the hash of these types with the linker's?

1563232404
Tetralux
im not sure a hash is a good idea precisely because it isnt perfect and you may randomly get things being considered equal when they are not.

1563232427
companion_cube
a crypto hash? no way

1563232471
Tetralux
for something like that, i would not accept anything less than a perfect hash.

1563232622
companion_cube
really? you don't use git either?

1563232675
Tetralux
i do not want that kind of bug in my program.

1563232680
Tetralux
full stop.

1563232717
Tetralux
having that kind of bug in the runtime of a langauge is unacceptable if you are serious about your langauge.

1563232764
companion_cube
do you also distrust pgp signatures?

1563232836
Tetralux
you may be misrepreenting crypto hashing there

1563232848
Tetralux
they are not meant to be perfect

1563232861
Tetralux
just "good enough" for security

1563232877
Tetralux
i dont want good enough for langauge runtime basic stuff

1563232893
Tetralux
i want "isnt gonna f*** me over"

1563232904
companion_cube
hmmm, for me something like sha256 is not just "good enough"

1563232930
companion_cube
the probability of a collision is so astronomically low that it'll never happen

1563232949
companion_cube
(ofc if you link untrusted code and rely on the hash only… you're f*cked anyway)

1563233009
Tetralux
id honestly prefer just testing for ptr equality over a non perfect matching method

1563233043
companion_cube
I'm not really following, isn't the issue that you're linking a .so which cannot share pointers with your program?

1563233052
Tetralux
if that means passing between dlls is not possible then so be it.

1563233065
Tetralux
(.. using ti ofc)

1563233240
companion_cube
(but seriously, how often have you met collisions in crypto hashes? 😅)

1563233358
Tetralux
I can't really claim to have tested enough possibilities :p

1563233364
Tetralux
But no - your point is valid.

1563233406
Tetralux
I'd probably use BLAKE2 which produces a 1024b hash IIRC.

1563233429
Tetralux


1563233462
Tetralux
For me, the problem is very simple: I want it to be foolproof and reliable no matter what I throw at it.

1563233480
Tetralux
We have enough random crashes and bugs without introducing one into Zig that you cannot control.

1563233492
Tetralux
(.. Enough crashes in software in general today.)

1563233554
Tetralux
You could even have `ti1.eql(ti2)` compute the hashes more than once to make extra-damn-extra-sure xD

1563233574
Tetralux
That's maybe getting a little silly at that point though.

1563233597
Tetralux
One thing I can say though, is that ptr comparision is the most  transparent thing you can do.

1563233611
Tetralux
And for that reason, I would rather have something along in that same vein.

1563233631
Tetralux
You also don't want to have a super slow hash either.

1563233637
Tetralux
If anything you want a superfast one.

1563233644
Tetralux
But then you have collision problems.

1563233673
Tetralux
It just kinda... I dunno... 'Has the sense of overcomplication about it a bit. :D

1563233773
companion_cube
I mean, the hash would be computed during compilation anyway?

1563234021
Tetralux
Fair point :xD

1563234093
nrdmn
andrewrk:

1563234247
andrewrk
nrdmn, yes it's supposed to say ReleaseSmall at the end not ReleaseSafe

1563234686
andrewrk
emekankurumeh[m], I think

1563234714
nrdmn


1563234732
andrewrk
thanks nrdmn, merged

