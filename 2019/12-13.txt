1576195256
mq32
<Cadey>

1576195272
Cadey
mm?

1576195273
mq32
does that mean we can now write CGI web servers in Zig?

1576195278
Cadey
soon

1576195283
mq32
nea!

1576195285
mq32
*neat!

1576195300
Cadey
i'm going to make it more generic after i upgrade my webassembly environment to use _start as the entrypoint

1576195355
daurnimator
andrewrk: so where did you want to go next with mixins? --> the Random PR needs rebasing at the moment

1576195380
mq32
andrewrk: do you want to tackle packed structs this year or should i start working around those problems?

1576195572
Cadey
hey andrewrk would you be okay with me submitting the giant list of HTTP status codes i made for olin to zig upstream?

1576195980
daurnimator
Cadey: we will need that. but in a slightly different form to what you have right now

1576196006
daurnimator
Cadey: I need a function that takes a status code and returns a reason phase.

1576196017
Cadey
i was just about to generate that from the json file

1576196019
Cadey
one moment

1576196096
daurnimator
Cadey: FWIW, the status reasons are deprecated in the http world. I don't think its a good idea to expose them

1576196107
daurnimator
(though we do need them internally implemenation-wise)

1576196119
Cadey
as in like `200 OK`?

1576196139
daurnimator
Cadey: yep. the OK is deprecated

1576196142
Cadey
mm

1576196158
shakesoda
bizarre

1576196180
daurnimator
shakesoda: what purpose did it solve? it was redudant at the protocol level; and never surfaced to users as a string.

1576196276
shakesoda
status codes are pretty useful when inspecting traffic, and i'm not entirely sure what the need to change them is

1576196285
shakesoda
i don't hold this very close to my heart, it's just weird.

1576196298
fengb
Gateway timeout is surfaced all the time :P

1576196317
shakesoda
yeah i see giant amounts of 50x, 404 lol

1576196318
daurnimator
fengb: only the phrase in the <title/> not the http stream level phrase.

1576196355
daurnimator
shakesoda:

1576196398
shakesoda
oh, the phrase and not the code?

1576196416
Cadey
daurnimator: like this?

1576196418
daurnimator
shakesoda: yes that's what I said

1576196433
shakesoda
daurnimator: i misread, then.

1576196443
Cadey
(obviously my implementation could be better, but this is the first pass lol)

1576196455
shakesoda
no longer bizarre

1576196461
daurnimator
Cadey: why is there an urban dictionary link in there

1576196488
Cadey
daurnimator: blame

1576196507
Cadey
oh

1576196509
daurnimator
Cadey: why return a `[]const u8` instead of the actual contents

1576196513
shakesoda
two of them!

1576196522
Cadey
daurnimator: ?

1576196541
daurnimator
Cadey: uh, []u8. in which case that's wrong :P

1576196586
daurnimator
Cadey: that should fail to compile: you're trying to return a non-const pointer to const datas

1576196604
daurnimator
Cadey: essentially I want this table:

1576196852
daurnimator
(which also has a link to the authorative source)

1576197185
Cadey
daurnimator:

1576197186
Cadey


1576197188
Cadey
oops

1576197190
Cadey
hands

1576199412
hoppetosse
How do I declare a null terminated array of null terminated strings?

1576199415
hoppetosse
argv: [*:0] const [*:0]const u8

1576199437
hoppetosse
fails with error: expected type '[*:0]const u8', found 'comptime_int'

1576199647
hoppetosse
argv: [*]const ?[*:0]const u8 compiles, but then we take it that the first null value is the terminator by convention?

1576200368
fengb
argv: [:null] const ?[:0]const u8

1576200380
fengb
argv: [\*:null] const ?[\*:0]const u8

1576200391
fengb
... I can't win against this formatter

1576200585
fengb
argv: [*:null] const ?[*:0]const u8

1576200668
hoppetosse
fengb: thanks, makes sense

1576201075
cncl
zig fmt doesn't have any configuration options, correct?

1576202745
Cadey
cncl: it lets you disable coloring in the terminal

1576202788
cncl
yeah :)

1576202841
cncl
i'm a pretty heavy user of clang-format in C/C++ land. i usually set it up to format a file one way when i'm editing it, and then format it back to the project's standard when i'm done and making a commit. but i get the impression zig fmt is more like gofmt, where it only has 1 style and enforces it

1576203474
Cadey
cncl: what setting are you looking for?

1576203577
cncl
usually in C i will have block-opening braces on the next line. it's just a personal preference.

1576203601
cncl
obviously that is not the zig standard style

1576204345
cncl
sorry for the noob questions. i tried to build/run this:

1576204357
cncl
is that expected?

1576204504
fengb
There’s been quite a few breaking changes lately so that’s not unexpected

1576204532
cncl
ah, ok

1576204559
fengb
Yeah the big one in the past week is format functions / varargs

1576206032
cncl
should i be learning with 0.5.0, or master?

1576206717
torque
probably master

1576206900
cncl
the error i got using master on that solution.zig file: /bin/lib/zig/std/fmt.zig:97:13: error: type 'u64' does not support field access

1576206901
cncl
if (args.len > ArgSetType.bit_count) {

1576206901
cncl
^

1576207058
mikdusan
cncl: my guess - need to use new syntax. varargs is gone. look up stack see what is calling format or print and the varargs need to become something like .{ 1, 2, "hello" }

1576207067
torque
yeah, that's due to the vararg removal

1576207106
torque
yeah, almost certainly in the last line, something like `try out.print("{}\n", .{ sum })` should work

1576207560
cncl
ok, thanks

1576207735
cncl
that does indeed work!

1576222956
cncl
kind of an open ended question. how should i learn to accomplish things with the std lib? like if i want to read in a text file to a buffer and loop over the characters in memory, i don't know where i should start to figure out what to call.

1576223002
cncl
i looked at

1576223062
cncl
like if i click on something, some of them open up to just a few entries. others are huge and look machine generated (like

1576223198
cncl
also, the comment/description column ends abruptly if the string is too long, it seems, and there's no ellipses indicator that it was truncated

1576223207
cncl
which makes reading it kind of confusing

1576223269
cncl
since the clipping isn't occurring at a visual boundary, it's not obvious that it was truncated until you've read to the end of the text and the reading comprehension part of your brain has sat there for a few moments failing to parse the sentence

1576223661
bgiannan
cncl, right now i find it easier to search things in

1576223687
bgiannan
most of the time its sufficient to learn what's possible and how you should do things just by looking at tests

1576223708
bgiannan
example:

1576224644
cncl
ah i see

1576235775
Cadey


1576245639
Snektron
<fengb "... I can't win against this for"> Try using ` ` to mark a snippet of code

1576245690
Snektron
Neat, matrix inserts that reply in irc

1576264252
adamkowalski
is there an equivalent to a move in C++ here in Zig?

1576264263
adamkowalski
Can you "transfer ownership" of a resource?

1576264279
fengb
No, Zig doesn’t have ownership semantics

1576264306
adamkowalski
Whats the appropriate way to think about the problem then?

1576264325
fengb
There’s some patterns, like ArrayList.toOwnedSlice

1576264333
adamkowalski
Does assigning x to y do a shallow copy? So in a sense x = y is the same as x = std::move(y)

1576264353
adamkowalski
it will copy all the stack memory and make the pointers point to the same data as in y

1576264364
fengb
Yeah

1576264374
mikdusan
if you desire to tell the compiler a pointer is no longer valid, just assign "= defined" to it. this may in the future offer safe-builds with some extra smarts.

1576264384
mikdusan
sorry i meant `= undefined;`

1576264445
mikdusan
so you get 2 things from this today; it documents your code. and in safe-built I believe the pointer address becomes "0xaaaaaaaa" behind the scenes

1576264458
fengb
It’s a shallow copy, but that doesn’t mean anything special to the compiler, unlike Rust or C++ RAII

1576264658
adamkowalski
What would you all say the advantage is of this model over RAII or lifetimes + Drop

1576264681
fengb
Makes the language smaller

1576264687
Snektron
less complexity, and more flexible in some sense

1576264696
Snektron
while raii is good for safety and structure

1576264704
Snektron
less hidden functionality

1576264748
adamkowalski
can you elaborate on that? it sounds counter intuitive to me. maybe it's just because i'm really used to those systems

1576264757
fengb
I sort of feel like Rust is RAII done “right” but I also can’t understand it

1576264762
Snektron
It also integrated well across language boundaries

1576264782
Snektron
Take Vulkan for example, or even OpenGL

1576264798
Snektron
Many Vulkan objects have a create and destroy function

1576264818
Snektron
most of these also take the device the functions work on, but don't store the device internally

1576264842
Snektron
this meanst that you need to pass the device in every function, including the destructor

1576264894
Snektron
in the C++ headers and the rust bindings, this is either nasty (in which case you need to manually call the destructor to pass the device) or the device is stored internally without your consent, which makes it a more complex wrapper

1576264965
Snektron
while in Zig, this can be implemented as `const image = vk.createImage(device, ...); defer vk.destroyImage(device, ...);`

1576264971
fengb
90% of the time I’m managing lifetimes within scopes and defer does all of that with much less cognitive load. and most of the remaining cases I can attach to a context lifetime, so that’s solved by an arena of sorts

1576264990
adamkowalski
Snektron: it sounds like you're not comparing against RAII though

1576265018
Snektron
like i said, with RAII, this would require implicitly storing the device

1576265018
adamkowalski
the create function would become a constructor, and the destroy function becomes a destructor

1576265030
Snektron
in fact, this is exactly what the Vulkan-Hpp headers do

1576265038
adamkowalski
and yeah you store context necessary for destruction in the struct itself

1576265056
adamkowalski
then you define a move constructor, which in my eyes gives you more flexibility then defer

1576265071
adamkowalski
because how do you handle the case in Zig where you don't necessarily want to destroy at the end of scope

1576265074
Snektron
some Rust bindings (vulkano) even go as far as wrapping every Vulkan type into an atomic shared pointer

1576265086
adamkowalski
you may want to give the resource to somebody else at the end instead

1576265090
Snektron
which adds a lot of overhead

1576265102
Snektron
adamkowalski, you simply dont write the defer

1576265110
Snektron
you can also add errdefer, which is also very nice

1576265123
Snektron
furthermore, defer accepts an expression

1576265132
Snektron
so there is nothing stopping you from adding a condition

1576265173
fengb
That said, we might need some concept of a resource:

1576265265
Snektron
i'm not sure im a fan of that

1576265277
adamkowalski
The reason i'm asking is because of this:

1576265287
adamkowalski
if you look at the test "add"

1576265299
fengb
It’s still a proposal. We can’t have sound async cancellation without something new

1576265306
adamkowalski
It's not pretty, you need to first say var graph = undefined

1576265316
adamkowalski
then you need to call init with the allocator

1576265329
adamkowalski
it seems like some really strange 2 phase initialization and I would like to get rid of it somehow

1576265334
fengb
I personally think RAII is like switching the hammer in your toolbox for a sledge. Sure it works but it’s overkill most of the time

1576265352
Snektron
adamkowalski, why dont you write init as a static function of Graph

1576265364
Snektron
that is generally the preferred way in zig

1576265366
adamkowalski
If you all can recommend something, or even just point me to some books, videos, anything that gets me into the right mindset coming from C++/Rust

1576265378
adamkowalski
Can you give me an example?

1576265397
fengb
Ctors/dtors were recently removed from Jai for similar reasons

1576265412
Snektron
adamkowalski, its actually not too much different from Rust

1576265418
fengb
I don’t remember if JBlow explained in detail

1576265419
Snektron
Rust doesn't have constructors at all

1576265423
Snektron
and drop is a hack

1576265450
companion_cube
why is it a hack? what would replace it?

1576265450
Snektron
in Rust you would write a static member to initialize

1576265462
Snektron
in Zig you can do the same (just dont write the self)

1576265498
adamkowalski
Yeah thats what I had a couple days ago

1576265538
adamkowalski
The recommendation was to switch to this, since the tests were failing as the arena allocator was failing when trying to allocate

1576265617
adamkowalski
Here is the conversation:

1576265635
adamkowalski
Look at 03:06 and thereabouts

1576265672
adamkowalski
Aparantely I need to wait for result location:

1576265721
Snektron
You can sneak around it for the time being

1576265737
Snektron
You can allocate the arena allocator using the parent allocator

1576265779
fengb
The bug was copying an a pointer out of the stack, not because it was static

1576265841
adamkowalski
Snektron: isn't that what I'm doing? I just wrap whatever allcator you pass in so it should use it for the actual allocations? But the arena will allow me to ensure the entire graph has the same lifetime

1576265843
fengb
Ah I see you’re emulating result location by providing the pointer

1576265865
adamkowalski
fengb: I guess I'm confused because I would have assumed that the shallow copy would copy all pointers to the heap

1576265874
adamkowalski
I'm not sure where I have a pointer to the stack

1576265894
adamkowalski
The arena itself is on the stack, so it should get copied over when you return the struct

1576265904
adamkowalski
but the memory that it's pointing to is on the heap

1576265909
fengb
Doing &arena.allocator is probably a pointer to a stack variable

1576265922
fengb
So it gets pointed to garbage when you return

1576265948
Snektron
adamkowalski,

1576265951
fengb
Your current code “solves” it by providing a more fixed spot, but that’s probably another bug waiting to happen

1576265966
adamkowalski
fengb: i'm all ears about how to approach it differently

1576265983
fengb
I... can’t take that pastebin seriously

1576265988
Snektron
heheh

1576266015
adamkowalski
Yeah me too, I was really scared to go to that link, thank god for incognito

1576266016
fengb
If you allocate the arena on the heap, that’s guaranteed to last the lifetime

1576266027
Snektron
I once handed in an uni assignment using that

1576266034
adamkowalski
okay yeah I see what you did there. but what is the performance cost of that?

1576266041
Snektron
Not much

1576266043
adamkowalski
and it seems strange to need to do that

1576266056
adamkowalski
I feel like I should be able to just allocate the arena in the struct on the stack

1576266072
adamkowalski
but allocate the struct not in the function call but just at the callers memory location

1576266076
adamkowalski
just like in C++

1576266077
fengb
But then you can’t use pointers

1576266112
adamkowalski
so theres no way to do stack + arena without being able to talk about the result location

1576266137
Snektron
you can't do that in c++ either

1576266150
Snektron
Not without some intricate move constructors

1576266154
fengb
There’s no way to return pointers to stack memory safely

1576266155
adamkowalski
I feel like you can

1576266162
adamkowalski
well I wouldn't point to stack memory

1576266162
shakesoda
that pastebin address lmao

1576266176
adamkowalski
it would use named return value optimization

1576266183
fengb
That’s still stack

1576266189
adamkowalski
the graph would never have been allocated on the stack of the function

1576266198
fengb
You’re just kicking the bug upward

1576266214
adamkowalski
the graph and the arena would both have been allocated at the caller location

1576266227
adamkowalski
then you're pointing to something allocated there not at the local function

1576266228
fengb
Which is still in stack memory

1576266240
adamkowalski
but I see what you're saying that if you now "move" the graph then you're gonna have the same bug

1576266263
adamkowalski
so it seems like allocating the arena on the heap means the graph is really just a handle to some heap memory and then I can move all that around with ease

1576266327
adamkowalski
okay awesome, i'm gonna implement that right after I get off work! thanks for the help

1576266364
adamkowalski
now just one more hard one haha. Right now my graph is parameterized by some element type T, but I can't have that be the case anymore. I need to be able to store different kinds of tensors (nd arrays) inside of my graph

1576266387
Snektron
allocate them on the heap as a slice

1576266402
adamkowalski
for example you can add a float tensor with a int tensor by just converting to floats and returning that. Or maybe you want to have a bunch of u8 because you want to represent a string

1576266417
THFKA4
adamkowalski: is this a general workflow framework, or are you trying to reimplement TF? just curious

1576266422
Snektron
page and arena allocators are really fast

1576266422
fengb
I wonder if having a vtable of sorts would make this more obvious. fieldParentPtr makes it too easy to have a hanging reference

1576266472
adamkowalski
THFKA4: i'm stealing tensorflows API because I want it to be famaliar to Python data scientists at my job. But theres no reason you can't use it for general purpose compute graphs

1576266480
andrewrk
I do think we can achieve debug mode safety for @fieldParentPtr

1576266519
adamkowalski
you would still get many benefits, because i'm going to do a topological sort of the graph nodes based on the operation you want to evaluate

1576266538
adamkowalski
then we can understand the dependencies and schedule them to run in parallel

1576266559
adamkowalski
or if you can give me a network topology you can schedule them on a clustor of nodes.

1576266565
THFKA4
very cool. i can't stop seeing graphs everywhere, i bet it could come in handy in many places

1576266587
adamkowalski
but thats down the road. step one is just get a compute graph working with basic reverse mode auto diff

1576266602
adamkowalski
so it will be really specialized for the domain of machine learning

1576266604
Snektron
i feel like every computer science related problem can be reduced to a graph problem

1576266635
adamkowalski
hopefully you will feel that way about tensors instead when I finish here.

1576266662
THFKA4
build systems, ui frameworks, compilers, package managers, etc..

1576266667
Snektron
i only know of tensor products

1576266692
adamkowalski
tensors are just nd arrays. So scalars are 0d, vectors are 1d, matrices are 2d, cubes? are 3d, etc

1576266710
adamkowalski
so an image is width x height x color channel

1576266711
fengb
Well since all NP problems are the same and some are represented as graphs... they all can be. That’s how proofs work right?

1576266729
adamkowalski
but it's 4d because usually we deal with "batches" of images so we can leverage the GPU more efficiently

1576266735
Snektron
fengb, thats true

1576266741
adamkowalski
and if you have a time axis (movies) then it's 5d space

1576266756
adamkowalski
if you don't want to model just images, but 3d scenes you have a 6d space

1576266757
adamkowalski
etc etc

1576266778
Snektron
im not too much of a fan of machine learning

1576266789
Snektron
i've been actively trying to avoid those classes in my master

1576266791
Snektron
that and datascience

1576266810
adamkowalski
I'm curious why?

1576266858
Snektron
i just don't think its that interesting

1576266883
adamkowalski
I think if you gave it a chance it can be an incredibly fascinating field

1576266902
fengb
I thought that’s all of graduate programs nowadays >_>

1576266924
fengb
All = data science or ML, not all = not that interesting

1576266927
adamkowalski
Machine learning is not just neural networks. Those just get all the hype. We use a lot of statistical models, differential equations

1576266952
Snektron
I feel like datascience is just writing a bunch of python and machine learning is throwing a bunch of matrices at a problem

1576266967
adamkowalski
Snektron: yeah that is the bootcamp graduates haha

1576266972
fengb
But this time it’s different! 🙃

1576266980
Snektron
i did a few classes in my bachelor, it didnt impress me much

1576266993
adamkowalski
We can't do that where I work

1576267019
adamkowalski
We are trying to predict when different parts of an oil refinary will fail, and if we mess up you get an oil spill

1576267035
adamkowalski
or worse if there is an explosion, people can die, a greusome death

1576267062
adamkowalski
you need to build models which are "explainable" and that can provide models that can be verified by a domain expert that can agree with our work

1576267084
adamkowalski
You mainly use matrices because they allow you to operate on lots of data in parallel

1576267120
Snektron
im glad to hear you enjoy it

1576267174
adamkowalski
Once I get farther along, you'll have to be my critic ;) i'll try and put some tutorials up and if they are boring to you then I failed

1576267292
adamkowalski
What domain do you work in, if you don't mind me asking?

1576267386
fengb
andrewrk: stupid question— would it be useful for a “relative” pointer? In this case it’s be nice if the allocator pointer was stored relatively to the parent struct

1576267473
Snektron
adamkowalski, i'm not employed outside of being teaching assistent

1576267509
andrewrk
fengb, I believe there is an open proposal for that. which pointer would be relative?

1576267572
fengb


1576267597
fengb
The array list allocator would be relative to the parent — i.e. Graph

1576267612
fengb
I'm just making stuff up. I don't know anything about language design

1576267627
Snektron
i don't think that would work well

1576267646
andrewrk
I don't understand how it would work at all

1576267668
Snektron
i suspect syntactic sugar over @fieldParentPointer

1576267684
fengb
Yeah me neither. nvm

1576267685
fengb
It made more sense in my head

1576267720
andrewrk
what we can do is a simple type id safety check after doing a @fieldParentPtr

1576267735
andrewrk
"did we find the type we expected to find?"

1576267758
andrewrk
same thing with @ptrCast for types with no well defined memory layout

1576267775
andrewrk
which is most structs

1576267776
Snektron
is that a thing?

1576267781
andrewrk
not yet

1576267870
andrewrk
but I think this will actually be a pretty straightforward safety feature to implement. it will be augmented by assigning undefined properly

1576267901
Snektron
That would require extra storage per structure, right?

1576267931
andrewrk
sometimes

1576268031
andrewrk
it's also planned to annotate structs with the desire to optimize for space efficiency

1576268055
andrewrk
which mostly will be useful in debug builds

1576269214
adamkowalski
Snektron: I'm looking at the pastebin you sent me and I think there will be a leak right? The memory held by the arena will be freed but nobody frees the arena itself. So now do you have to hold a pointer to the parent allocator, and then during deinit clean up the arena?

1576270149
bgiannan
andrewrk, trying to figure out what's the minimal use case but i have weird bug where the semantic analysis is growing endlessly until i have no ram left

1576270182
Snektron
adamkowalski, you're right

1576270209
Snektron
you can extract the allocator from it and free it with that i suppose

1576270276
andrewrk
mikdusan, microsoft released a new version of azure or something and now you can see CI logs before the job completes

1576270345
andrewrk
bgiannan, sounds like an annoying bug

1576270686
frmdstryr
daurnimator: Requests/sec: 280974.43 was my max so far today

1576270706
frmdstryr
with "wrk -t8 -c256 -d10"

1576270711
leeward
I just noticed that errdefer blocks are silently ignored if they're unreachable (because the function's type doesn't have a !). Is that a known bug?

1576270754
leeward
Or I could search. 2654

1576271267
adamkowalski
Snektron, fengb: thanks for all the advice! I was able to cleanup the API

1576271499
Snektron
adamkowalski, this saves you a pointer

1576271587
adamkowalski
Thats awesome! Thanks.

1576271624
adamkowalski
andrewrk: I gotta give it to you, Zig is a beautiful language, both the core and the APIs.

1576271749
adamkowalski
Working on this project (even though it's really new) has been really fun. And I feel like thats a big thing in maintaining motivation to keep working on something longer term

1576271751
fengb
It has its warts:

1576271795
pixelherodev
Is it possible to use a target-specific calling convention from Zig?

1576271837
pixelherodev
LLVM IR supports specifying `cc N`. N >= 64 is a target-specific calling convention

1576271842
Snektron
pixelherodev, i think you need to implement that in the compiler

1576271850
adamkowalski
fengb: that isn't a issue with the language though, you can clean up the API to make it simpler

1576271879
pixelherodev
I mean since Zig already has e.g. `nakedcc`, I was wondering if Zig already supports e.g. `cc(N)`

1576271886
adamkowalski
I think there is a difference between something fundamental about a language that you cannot change, and just an api that needs to be cleaned up

1576271892
Snektron
That would tie Zig to llvm

1576271910
pixelherodev
Snektron, no more than e.g. `nakedcc`

1576271913
andrewrk
pixelherodev, more control over calling conventions is in scope but the abstractions LLVM gives us are not great

1576271917
Snektron
not really

1576271937
andrewrk
this is something I'd like to address, but don't really have the time or motivation to deal with it anytime soon

1576271943
Snektron
nakedcc is perfectly defined in normal terms, cc(123) is just a magic constant

1576271956
pixelherodev
How so?

1576271968
pixelherodev
How is this any different from e.g. linksection?

1576271989
Snektron
What does the 123 even mean

1576271997
pixelherodev
Literally just the number 123

1576272004
pixelherodev
`linksection(".bss") cc("1")` - or even `linksection(".bss") cc("nakedcc")`

1576272020
leeward
fengb: There are several examples of that, where there's some generic-ish interface being implemented. It feels like the kind of problem that can be solved.

1576272028
Snektron
How does 123 represent a calling convention

1576272033
andrewrk
pixelherodev, I'm pretty sure 123 is meaningful only to llvm

1576272052
pixelherodev
The calling convention name - 123, nakedcc, whatever - has no meaning to anything other than the backend

1576272061
pixelherodev
Zig doesn't care, LLVM doesn't even really care

1576272091
andrewrk
but imagine that you were trying to build that code with a gcc backend instead of llvm, how would that work?

1576272127
pixelherodev
How would nakedcc work with GCC?

1576272140
andrewrk
or even self-hosted for that matter. with self-hosted we could come up with a nice way to describe calling conventions, and have some powerful features. but with llvm/gcc backends we're limited to what they support and expose in the API

1576272189
andrewrk
the gcc backend supports naked and it matches zig's semantics

1576272200
andrewrk


1576272271
pixelherodev
Right, I'm looking at that already...

1576272284
pixelherodev
Yeah, okay; I can see why this specifically would be problematic

1576272285
pixelherodev
Thanks

1576272292
andrewrk
I think there are 2 related questions here and I got confused about which one pixelherodev was asking about. I do want to add support for more target specific calling conventions. they'll need meaningful names rather than numbers though. see

1576272336
andrewrk
(2) is if zig code could define a calling convention in userland, and use that. that's an interesting use case that would be worth looking into, but may not ultimately be compatible with supporting non-self-hosted backends

1576272357
pixelherodev
Right...

1576272375
pixelherodev
Okay, real goal: the current ABI I'm working with has a rather...

1576272386
pixelherodev
The output of my parser can of course call

1576272389
pixelherodev
issue*

1576272405
pixelherodev
But to work with e.g. the firmware-provided function table requires a special calling convention

1576272418
pixelherodev
I was thinking something like `cc(64)` in LLVM would be an easy enough fix

1576272428
pixelherodev
But for now I'm doing all the shifting around

1576272452
pixelherodev
(with a DragonFruit.Call function)

1576272481
Snektron
I think that should be the preferred approach

1576272506
pixelherodev
The problem is it's impossible to really optimize away, and is fully target dependent regardless

1576272544
Snektron
Zig's inline assembly is made in such a way that you can do that pretty easily

1576272563
Snektron
in contrary to C assembly, where you can't specify what register a value should go

1576272568
pixelherodev
Uh

1576272572
pixelherodev
You can do that in inline asm in C...

1576272574
pixelherodev
Like, 99% sure

1576272582
pixelherodev
Anything you can do in Zig's inline asm you can do in e.g. GCC/Clang

1576272591
Snektron


1576272594
pixelherodev
Zig's inline asm is literally identical to Clan'gs IIRC

1576272596
pixelherodev
Clang's*

1576272617
Snektron
Clang's inline assembly may be non-standard, but i'm fairly sure standard can't do that

1576272641
Snektron
As i wanted to use it for something some time ago but the only way was declaring a local with some weird attribute

1576272658
andrewrk
hmm that's an interesting point, I think it may be possible to implement optimizer-friendly custom calling conventions with inline asm

1576272664
pixelherodev
Snektron, I've literally done this with GCC

1576272665
Snektron
in any case, that template should be well optimizable

1576272683
pixelherodev
Yeah, I realize I can probably optimize it all away eventually, but for now it's just ugly to

1576272687
Snektron
pixelherodev, can you find a source on that one? i would be interested to learn about it

1576272698
pixelherodev
Snektron, I can link you to the repo containing the code in which I do it?

1576272713
Snektron
sure

1576272801
pixelherodev
Snektron,

1576272850
pixelherodev
For the record

1576272857
pixelherodev
I claim no credit for any of the low level code in there

1576272863
pixelherodev
Rather, I accept no blame :P

1576272878
Snektron
thats something else by the looks

1576272907
pixelherodev
It's slightly different, but ultimately the same

1576272961
pixelherodev
'a' there means the A register

1576272971
pixelherodev
Since it's 8-bit, it expands to %al

1576272981
Snektron
oh i see

1576272982
pixelherodev
(for the first functions, inb/outb)

1576273011
Snektron
at&t syntax gives me goosebumps

1576273012
pixelherodev
Nd means "unsigned 8-bit integer constant in D register"

1576273041
pixelherodev
Honestly, the fact that I have to try to understand this generated asm is a pain - not the one I linked, the custom calling convention one

1576273046
pixelherodev
On its own, the CC isn't really bad

1576273069
pixelherodev
It's interfacing with a Forthy language, so it uses a separate stack for data than for code

1576273079
Snektron
One thing that could help with this is making assembly templates strings

1576273141
pixelherodev
But it's basically doing this: load values from parameter into temporary, push temporary to that stack

1576273170
Snektron
then you could define a function calling foreign code with something like `const func = dragonfruitcc(fn(i32)void, 0xABC);`

1576273172
pixelherodev
A table of FirmwareFuncs where a FirmwareFunc is a struct containing only an address in the form of an integer, and a function used to call that address

1576273186
pixelherodev
^ is what I'm using now

1576273200
pixelherodev
Ultimately it has the same effect, except it's a bit easier to read

1576273212
pixelherodev
In Zig form that is

1576273248
pixelherodev
e.g. `DragonFruit.push("Hello");API.Puts.call();`

1576273274
pixelherodev
I was planning on building a higher abstraction over this, but for now I'm still so busy working on fixing up the backend that worrying over the Zig code just distracts me

1576273297
pixelherodev
I mean, another option is to define dragonfruitcc as external

1576273308
pixelherodev
Then have the backend provide it in the form of an intrinsic

1576273341
pixelherodev
Then any calls to `@dragonfruit.cc` in the IR can be replaced with an inline call

1576273356
pixelherodev
But again, this is still distracting me from the real work :(

1576273670
pixelherodev
Unrelated question:

1576273683
pixelherodev
There a way to override max_depth for e.g. std.debug.warn?

1576273697
pixelherodev
I mean, I cheated and just modified the default in std/fmt.zig locally :P

1576274039
frmdstryr
error: 'std.fs.file.OutStream.writeFn' cannot be async

1576274050
FireFox317
<Snektron> One thing that could help with this is making assembly templates strings: I'm pretty sure daurnimator added that already

1576274974
Snektron
oh cool

1576274991
Snektron
Zig evolves fast when you dont pay attention

1576275054
fengb
Move fast ; break things

