1558051267
daurnimator
andrewrk: some comments left

1558051286
daurnimator
everyone: remind me to type up a command about different layers of syscall wrapper

1558051402
andrewrk
see ya daurnimator

1558053994
wilsonk
how does one force a local directory executable to be output from a build.zig file? ie. I just want to continually overwrite an exe in the local build dir and not have exe's peppered in the zig-cache dir  (object files in the cache are still preferred, of course)

1558054068
wilsonk
I used b.addExecutable("blah", "blah.zig")...but that peppers the cache

1558054502
wilsonk
hmm, nvm I suppose I can just use the 'run' step  (still curious though if someone feels like chiming in)  :)

1558054672
scientes
wilsonk, the run step will still pepper the cache

1558054816
wilsonk
scientes:  hmm, seems to just run here from the build.zig file using 'zig build run' and then there isn't even a 'blah' file in the cache at all?

1558054841
wilsonk
so no peppering, but no actual exe either though

1558054877
scientes
you mean using "zig run"

1558054885
scientes
that uses the cache last time i checked

1558054950
wilsonk
no, not just 'run' but using 'zig build run' because then the build file runs the exe  (so the build.zig file has a run_cmd that invokes 'exe.run()' )

1558054987
wilsonk
or at least that seems to be the way this is working

1558055031
scientes
its easy to test

1558055039
scientes
if you run "zig run" twice the second time is much faster

1558055048
scientes
ahh thats differn't i don't use builder

1558055123
wilsonk
ah, ok. Yeah I have mostly just used the command line before, but in this case, I was wondering how to get the build.zig file to output just an exe in the local build dir.

1558055624
wilsonk
the 'zig build run' command is actually quite nice because I use spacemacs and just run from within the ide to test. The highlighting, file-local autocomplete and especially 'automatically jump to compilers error line' functionality are nice (it jumps to lib headers and files outside your project, which is nice when working with C headers)

1558057307
andrewrk
I'm considering making `install` the default step of zig build, and making the default install prefix `build-<mode>`

1558057347
andrewrk
So for a hello world application, `zig build` would produce build-debug/bin/hello

1558057551
mikdusan
andrewrk: side question: are all the flags used to create .o or .lib or .exe factors of their zig-cache hash?

1558057553
andrewrk
And then the follow up question would be, what does `zig build run` do? Run it out of the cache dir or the install dir?

1558057594
andrewrk
mikdusan: yes

1558057838
mikdusan
some exes may

1558057866
mikdusan
then my vote is for examples and such, the default `zig build run` should be geared towards running from install location

1558057926
andrewrk
That makes sense

1558058051
andrewrk
A related topic is when there are dependencies on packages via the zig package manager. Some dependencies may supply tools. For example, a dependency on a sha256 package may provide a sha256sum binary for general development/debugging use

1558058124
wilsonk
andrewrk: it actually just runs the exe without leaving a remnant that I can see!?? So it literally runs the program being built from within spacemacs and then the local dir and zig-cache contain no file called "blah" once I quit the program?? Seems like a cool feature to me but maybe it isn't supposed to be doing that?

1558058209
andrewrk
wilsonk: I believe it's running the program from inside the zig-cache dir

1558058212
wilsonk
haha, woops nvm. I am on windows and wasn't searching for 'blah.exe'...duh

1558058248
wilsonk
I keep bouncing back and forth between linux/win/osx and forget things sometimes ;)

1558058444
mikdusan
andrewrk: interesting. so the `prerequisite` definition itself may say "ok my prerequisite is pretty darned sophisticated... need to supply a binary to make it work"

1558058543
andrewrk
mikdusan, yes you can depend on, for example, a javascript minifier and then use it in your build.zig

1558058689
mikdusan
TIL writing fuzzer compile-error tests... when you get into the "thousands" of lines, stage1 is wants the GBs of heap

1558059085
coolreader18
Hi all, I've been working on compiling Zig to the TI-Nspire (a graphing calculator) and I was wondering what the best way to go about possibly merging my changes to the compiler into upstream would be. The diffs on it are sort of strange since the TI Nspire is sort of an exotic target, so there are a couple things that probably wouldn't fly getting merged directly into upstream as they are; I was just trying to get it

1558059085
coolreader18
to all compile and work in the first place. (repos are at

1558059193
coolreader18
One thing also is that I've been depending on the libc that the main toolchain for development on the TI-Nspire depends on (ndless:

1558059224
coolreader18
Here's the diff between master and my `nspire` branch:

1558059439
coolreader18
The alloc/realloc is taken and translated from

1558059530
coolreader18
The change at line 635 of pdb.zig (

1558059711
andrewrk
Hi  coolreader18 , this is a pretty fun use case you've got here

1558059760
andrewrk
What architecture is that?

1558059841
andrewrk
In direct answer to your question, please feel free to open a pull request with all your changes and we can discuss from there

1558060862
coolreader18
It's armv5te and the libc uses gnueabi

1558067578
mikdusan
for tests and builds i see a lot of "Unable to dump stack trace: FileNotFound" and the line above showing a truncated pathname

1558067638
mikdusan
is this a bug?

1558067691
mikdusan
ok i found #1938

1558099028
stratact
Alright, I'm donating $15/month to andrewrk now :)

1558114548
donpdonp
if i could change one thing about zig it'd be to make the semicolons optional

1558116107
BitPuffin
true

1558117320
halosghost
really?

1558117639
BitPuffin
I wouldn't change that one as my one thing haha

1558117651
BitPuffin
I think it would be nice not to have them though

1558117755
BitPuffin
What I would change is to make function be a namespace for other functions. So you can define (non-closure) helper functions order independent

1558117794
BitPuffin
That way you can know that those functions are not called anywhere but the enclosing function

1558117817
andrewrk
BitPuffin, you can do this right now with anonymous structs

1558117821
BitPuffin
but an IDE can tell you that. But you also know that nobody will call that function unless it's moved out

1558117839
andrewrk
const f = struct { fn foo() void {} }.foo;

1558117847
BitPuffin
andrewrk: ah really? interesting!

1558117868
andrewrk
furthermore you have access to comptime parameters within that context

1558117891
BitPuffin
I will use that, but it's a bit clunkier than I'd like if it was just possible to put the functions in there immediately

1558117896
BitPuffin
but this is terrific to know about

1558117911
BitPuffin
Oh and also it's not order independent

1558117918
BitPuffin
so I have to front load my function with struct declarations

1558117977
andrewrk
within a struct it is order independent though

1558117987
andrewrk
so front load your struct and everything is golden

1558118022
BitPuffin
Yeah that's true, because the file is also a struct

1558118030
BitPuffin
and it's order independent there

1558118049
BitPuffin
Yeah I'm gonna have to front load, I just wish I didn't have to. But that it's supported in at least some small way is very good

1558118083
BitPuffin
The other thing I'd want is some keyword that restricts the amount of variables visible to a block (note, not procedures or types)

1558118088
BitPuffin
so i can be like

1558118095
BitPuffin
only x, y { ... }

1558118104
BitPuffin
* Reduce the amount one must remember.

1558118134
BitPuffin
or you could even say only {} and now you know there are no global variable reads/writes here

1558118146
andrewrk
yes, unfortunately such syntax is competing with the amount of language one must remember (or even initially learn)

1558118210
BitPuffin
btw is there any reason why () is used in if statements

1558118238
BitPuffin
I don't see what's gained other than some extra noise. Or is there some kind of ambiguity with | being looked at as some bitwise operator or something

1558118249
BitPuffin
I guess that could be the case

1558118268
andrewrk
BitPuffin, ternary

1558118277
andrewrk
var x = if (c) a else b;

1558118309
BitPuffin
ah I see

1558118314
BitPuffin
var x = if c a else b;

1558118347
BitPuffin
so there is no difference between if and ternary if except that some ifs aren't expressions

1558118379
andrewrk
in zig all ifs are expressions

1558118390
BitPuffin
even if there is no else?

1558118406
andrewrk
if there is no else then the else expression returns {} (the void value)

1558118411
BitPuffin
but do we need mandatory () for switch, while and for, or is it just there to be consistent with ()

1558118414
BitPuffin
if*

1558118430
BitPuffin
I see

1558118470
BitPuffin
Anyway, it's a minute point. more interesting to consider the only keyword I was wishing for :P

1558118490
BitPuffin
I understand that it's more syntax to learn, and I really appreciate how much you've left out of zig

1558118558
BitPuffin
but I think it's worth considering if a feature like this can make code much more clear in return, or maybe help track down bugs, since you could wrap something in an only block and  you'll discover that it was reading global variables which you maybe didn't know etc

1558118676
BitPuffin
and maybe you could even use it in multiple places like also when declaring procedures

1558118692
BitPuffin
pub fn foo(a: int) int only { // this fn doesn't access any globals }

1558120103
dm1try
andrewrk, I found the existing issue for my yesterday's problem about missing stacktrace on osx

1558120160
dm1try
and just for the confirmation, reverting 6756e54 helps

1558121937
nrdmn
is there a reason why calls to noreturn functions aren't optimized into jmps?

1558122146
BitPuffin
andrewrk: can I read files at compile time?

1558122275
Sahnvour
I think that's not possible directly, but you could have some code in your build.zig that reads the file and outputs its content as a string in a zig file, probably

1558122294
nrdmn
have you had a look at @embedFile?

1558122337
BitPuffin
hmm but I don't wanna store the text at compile time

1558122358
BitPuffin
I just wanna do some processing to determine at compile time how much to preallocate certain things or whatever

1558122363
BitPuffin
or even build game assets or something

1558122372
BitPuffin
I guess some of that could be done in build.zig

1558122428
BitPuffin
but would be sweet to just have some comptime block that I can use to figure out some constant by reading files and then at runtime use that value for various things

1558122432
nrdmn
you could put that into a comptime block I guess

1558122450
BitPuffin
ahh wait yeah true

1558122465
BitPuffin
if I do comptime {} and use embedFile within that for a temporary that's not there after compile time it should probably work

1558124344
Sahnvour_
oh I missed @embedFile. BitPuffin as long as you have access to the content of the file at comptime, you can read it and do whatever you want, doesn't matter which way you acquire it

1558134073
donpdonp
std.json.Parser '{"float": 0.7062146892655368}' => integer overflow

1558134107
donpdonp
i see #2207 but looking at zig-ryu seems to only have float->string not string->float ?

1558134119
tgschultz
andrewrk: generating types has the issue that, in all but the most simplistic cases, the typename quickly becomes unreadable. Is there a significant downside or impedement to showing the type alias in use at that scope instead?

1558134168
tgschultz
otherwise, perhaps a way to override the typename is in order, like with a builtin or something.

1558134245
tgschultz
donpdonp: float parsing was added in #1958

1558134254
donpdonp
so nice to be able to tweak that without even rebuilding zig

1558134297
tgschultz
looks like it has some issues: #2207

1558134319
tgschultz
oh you saw taht, nevermind me

1558134333
donpdonp
no problemo.

1558135810
johnLate
Can I do something like warn("x has type […]\n, …x…) in Zig?

1558135930
tgschultz
johnLate, you want to print the type of x?

1558135938
johnLate
Yes

1558135959
tgschultz
`warn("x has type {}\n", @typeName(@typeOf(x)));` ought to work

1558136024
johnLate
thx

