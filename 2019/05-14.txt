1557793512
daurnimator
why do we only support Linux 3.16+

1557793537
daurnimator
which is to ask: what feature do we depend on that was introduced in 3.16?

1557793608
lunamn
is it expected to have compiler crashes from wrongly using @typeInfo and @typeOf?

1557793731
daurnimator
lunamn: the compiler should never crash: that would be a bug

1557794232
lunamn
daurnimator: thanks! so I'd assume its best to write an issue for it?

1557794256
daurnimator
lunamn: yep. just do a search to make sure it's not already supported. include a minimal test case if you can.

1557794265
daurnimator
uh s/supported/reported/

1557799989
tgschultz
I've run Zig on a 2.6 kernel before (as a test after we started distributing statically compiled binaries). I don't remember anything breaking but I didn't exactly push it.

1557800733
scientes
that won't work after arm64 was merged

1557800764
scientes
well, 2.6 is a huge amount of time, so maybe the later ones

1557800795
scientes
But I don't really see a use-case for that

1557800818
scientes
Unless you really want 2.4, which is a much smaller kernel

1557800878
scientes
yeah, noone is support 2.4 either

1557801614
daurnimator
scientes: RHEL 6 uses 2.6.32

1557801626
scientes
yeah but rhel 8 was released

1557801626
daurnimator
which is still a common distro for many enterprise users

1557801632
scientes
and rhel6 doesn't even have systemd

1557801651
daurnimator
RHEL 6 is supported until 2020; and most gov/telecom companies will remain on it until then

1557801654
scientes
it does have cgroups however

1557801680
daurnimator
the question is: is there any reason zig wouldn't work on that kernel?

1557801699
daurnimator
and if so, why does our support table only say linux 3.16+

1557801887
scientes
I just don't think we should work like that

1557801894
scientes
software goes forwards

1557801935
daurnimator
scientes: I'd love to be able to use zig in a work context. but this is the sort of thing that potentially stands in the way

1557801942
scientes
if there is a business case, someone can always backport stuff

1557801948
scientes
thats the way Red Hat works

1557801963
daurnimator
that only works when

1557801976
daurnimator
it doesn't work when you're contracted to write software to run under redhat

1557802017
scientes
daurnimator, well, the language will never depend

1557802028
scientes
and the stdlib needs alot of work, this is the least of its problems

1557802041
scientes
so bring this up when you actually have a problem

1557802198
scientes
google runs all their software at HEAD

1557802260
scientes
clinging to old version is just not productive

1557802286
shachaf
My software only runs on Linux 5.1+.

1557802334
shachaf
Speaking of format, I implemented Zig-style format in C: <

1557802353
shachaf
I kind of wish I was using a language that didn't need so many hacks to do that, though.

1557802381
scientes
what hacks?

1557802433
shachaf
It's as bad as you might imagine.

1557802458
scientes
"elegent code" is a stupid idea

1557802467
scientes
its often taken way too far

1557802537
scientes
by people that aren't reading what the compiler actually produces

1557803988
torque
<scientes> google runs all their software at HEAD <-- google doing something is indeed a very compelling argument not to do that same thing

1557804002
scientes
haha

1557815197
bgiannan
Hey there. Did anyone considered writing something on

1557815590
emekankurumeh[m]
i considered it, but ended up getting distracted by other stuff

1557815651
emekankurumeh[m]
if you decide to do so, i would get andrewrk to check it first

1557815677
bgiannan
i'm in no way qualified to do so, was just wondering if something was being worked on

1557820993
mikdusan
re: issue #2481. i am not a windows user, but in this blog they talk about WSL 2 which actually uses linux kernel code and will soon be released. it seems that will solve the issue of missing linux kernel syscalls

1557821002
mikdusan
link:

1557823196
euantor
mikdusan: I believe they're going to support WSL 1 for a while. It sounds like WSL 2 uses Hyper-V to run, which makes it a non-starter for people who have to use tools like VMWare I believe as you can't run 2 different hypervisors on the same system. I certainly saw some people in comments complaing they'd be stuck on the current version

1557839845
Xe
i've successfully moved to montreal now \o/

1557839862
Xe
once my home gets internet/a table/a desk I'm gonna work on the zig+olin PR

1557850068
kristoff_it
where can I learn more about alignment? I'm in this weird situation where I - mostly - understand the basics (i.e. ~ word-aligned operations run faster) but I don't know enough to make my program do what I want (or, actually, if what I want is reasonable). More precisely in my cuckoofilter program I want to support different bucket sizes (think of it as a hash map if you're not familiar with the concept) and I think that good alignment for

1557850068
kristoff_it
these buckets might improve performance, but I don't know how to make that happen. So right now I have a struct field that - via generics - can be [][4]u8, [][4]u16, or [][2]u32, but I'm forced to declare it as [] align(1) T

1557850130
kristoff_it
so my question is: am I trying to do wrong things? if now, where can I learn how to do it?

1557850186
kristoff_it
*if not

1557850240
tgschultz
what is forcing you to use align(1)?

1557850277
kristoff_it


1557850297
kristoff_it
my init function takes a []u8 and uses @bytesToSlice

1557850332
kristoff_it
I'm doing that because I assumed I could hide the knowledge of what a bucket is from the user

1557850347
tgschultz
that was going to be my next question.

1557850354
kristoff_it
and now that you're making me say it, the two things kinda seem at odds

1557850360
kristoff_it
haha

1557850408
tgschultz
yeah, if you take []Bucket, you can ensure proper alignment with the allocator: allocator.alloc(Bucket, num_of_buckets);

1557850440
tgschultz
or even the stack: var buckets: [100]Bucket = undefined;

1557850594
kristoff_it
ok understood. So I should make an init that takes an allocator, and one that can accept a slice, but it has to be of Buckets. Makes sense, one is standard, while the other is a more advanced interface. I was originally not trying to make use of an allocator because after the initial one, no other allocations need to happen

1557850613
andrewrk
kristoff_it, you can also annotate your function that takes bytes like this: []align(@alignOf(Bucket)) u8

1557850626
kristoff_it
I tried going that route

1557850648
kristoff_it
but then I don't know how to proceed to make @bytesToSlice produce what I want

1557850653
kristoff_it
or something along those lines

1557850663
andrewrk
@bytesToSlice and @sliceToBytes should preserve alignment

1557850691
tgschultz
you don't need to make an allocator version of init, you can let the user handle it. Expose Bucket within the returned struct  (pub const Bucket...) and the user can just call allocate with that type.

1557850930
kristoff_it
tgschultz: understood, thanks. I'll try to fiddle a little more with the other thing, just out of curiosity, and maybe post here the point where I get stuck, but then I'll probably go with your suggestion

1557851137
tgschultz
I do something similar in

1557851344
andrewrk
I figured out my -cc1as problem from yesterday:

1557851363
andrewrk
this is yet another example of how system dependencies are problematic

1557851447
donpdonp
c.read returns an isize, and I've checked it for being >0. how can I get a usize? @intCast doesnt want to convert it

1557851690
tgschultz
@intCast should convert it as long as it is >=0. What doesn't it like about it?

1557852092
donpdonp
hmm i guess its something I did. I went to look at the error again and it compiles now

1557852502
kristoff_it
uhmm, exposing Bucket makes initializing memory ugly, is there a better way than this?

1557852505
kristoff_it
var memory = []cuckoo.Filter8.Bucket{cuckoo.Filter8.Bucket{0, 0, 0, 0}} ** 256;

1557852614
tgschultz
var memory: [256]cuckoo.Filter8.Bucket = undefined; if don't care about it being zeroed. If you do, then: for(@sliceToBytes(&memory)) |*b| b.* = 0;

1557852750
tgschultz
an alternative is to add a function to the struct that returns [1]cuckoo.Filter8.Bucket set to 0: var memory: cuckoo.Filter8.Bucket.zero() ** 256;

1557852931
tgschultz
or even one that returns a whole array if given a comptime length: var memory = cuckoo.Filter8.Bucket.array(256); I suppose it depends on how often you expect to need to do that as to how convenient you need that use case to be.

1557853725
kristoff_it
tgschultz: thanks for the suggestions. not sure how trivial this stuff seems from your PoW, but I had a hard time in the past trying to explain people how to use correctly cuckoo filters, and now that I have the opportunity of coming up with a decent interface, I want to make it as easy as possible to do the right thing

1557853788
kristoff_it
a function that takes a comptime number seems great actually, I'm not (fully) thinking with portals yet haha

1557853932
kristoff_it
I've also found another way: I can create for each bucket type a uN in type with @IntType(), have the user create a slice out of it and then do in my init @bytesToSlice(@sliceToBytes()) and get the right alignment.

1557853943
kristoff_it
your way is less convoluted though

1557853961
kristoff_it
uN int type with*

1557856007
kristoff_it
question: [] align(4) u8 means that the pointer of each element in the slice is aling(4), not just the first one right? It then also means that there are 3 bytes of padding between each element to ensure that, right?

1557856875
tgschultz
no, [] align(4) T means that the pointer to the first T is aligned to a multiple of 4

1557856910
tgschultz
align follows the thing it is aligning: *align(x) T aligns the pointer

1557856981
tgschultz
I don't think there is currently a way to express what you describe other than padding a struct.

1557856984
DutchGh0st
hiii

1557856993
DutchGh0st
Im getting an error: "expected type 'builtin.TypeId', found 'type' "

1557857028
tgschultz
DutchGh0st, is that unexpected?

1557857029
DutchGh0st
while Im switching on the typeinfo , it happens with the Struct case

1557857050
tgschultz
@typeInfo returns a union(TypeId)

1557857061
tgschultz
so you're switching on the TypeId, not the type

1557857078
DutchGh0st


1557857095
tgschultz
oh, I see

1557857189
DutchGh0st
it was what you said, yep

1557857199
DutchGh0st
gotta grab typeid instead of typeinfo there

1557857266
tgschultz
except you're supposed to be able to do that with unions aren't you?

1557857297
tgschultz


1557857346
tgschultz
oh wait, nevermind. I probably made the same mental mistake you did. Problem isn't in the switch(), but in the body of it.

1557857361
kristoff_it
tgschultz: thanks again, I was actually hoping my assumption was wrong. Good.

1557857598
DutchGh0st
woot

1557857603
DutchGh0st
you can import your own main.zig

1557857611
DutchGh0st
in main.zig xD

1557857699
tgschultz
you can instantiate it to

1557857708
DutchGh0st
instantiate?

1557857798
tgschultz
const main = @import("main.zig"); var a = main{}; @typeOf(a) == main;

1557857868
tgschultz
if you're now asking "why would I want to do that?", I don't have an answer.

1557857917
DutchGh0st


1557857925
DutchGh0st
someone posted that on reddit

1557857935
DutchGh0st
and I was like "gotta rebuild in zig"

1557858016
tgschultz
it's more straightforward in zig. as usual.

1557858063
DutchGh0st


1557858066
DutchGh0st
turns out yes

1557858212
tgschultz
since struct == namespace, you could just wrap that bottom bit in a struct and inspect that.

1557858239
DutchGh0st
yeahh I guess

1557858307
DutchGh0st
reee

1557858342
DutchGh0st
actually you could abstract it away maybe

1557858343
DutchGh0st
with std.meta

1557858346
DutchGh0st
hold my beer

1557858520
DutchGh0st
nah ya cant

1557858521
DutchGh0st
:(

1557858667
tgschultz
really? something like for(std.meta.definitions(@import(namespace.zig))) |def| debug.warn("{} ", def.name); doesn't work?

1557858818
DutchGh0st
error: no member named 'defs' in union 'builtin.TypeInfo ....

1557858856
DutchGh0st
std.meta.definitions doesnt exist btw

1557858861
DutchGh0st
Im making one :3

1557858871
DutchGh0st
because it would save some boilerplate

1557858995
tgschultz
no, there is one...

1557859039
tgschultz
meta.zig line 163

1557859084
DutchGh0st
OH

1557859085
tgschultz
definitions works on a type directly

1557859093
DutchGh0st
I was looking in std/meta

1557859178
tgschultz
andrewrk: `zig build-exe dos.zig -target i386-freestanding-none --release-fast` produces a file with an ELF header?

1557859366
DutchGh0st
whoa, I like how this returntype is defined:

1557859413
DutchGh0st
its just like "oohh yeah whatever you passed in, we'll figure out whatever we need to pass back to you"

1557859429
kristoff_it
lmao

1557859450
DutchGh0st
thats hacks xD

1557859498
kristoff_it
it's like all the things that new programmers try to do that kinda make sense but don't actually work for various reasons

1557859508
kristoff_it
except that if it makes sense, here it works

1557859573
hryx
that return type is just a beautiful story unto itself

1557859625
DutchGh0st
we need @reify()

1557859676
tgschultz
I disagree. I've come around to the opinion that @reify would be more trouble than it is worth.

1557859695
kristoff_it
what is it supposed to do?

1557859725
tgschultz
It's the opposite of @typeInfo. given an instance of a typeInfo struct it would create a type from it.

1557859755
DutchGh0st


1557859909
tgschultz
I believe that particular return type magic was Hejsil's.

1557859953
tgschultz
but if you work with the metaprogramming long enough you'll come up with similar things. Like, in Pseudo-Struct I use a recursively defined return type.

1557860038
tgschultz
and std.mem.asBytes uses a function to match the constness of whatever is passed to it.

1557860059
DutchGh0st
I did that too at one point

1557860095
DutchGh0st


1557860099
DutchGh0st
there for example

1557860134
tgschultz
yep, pretty much exactly like that

1557860840
kristoff_it
wow that was an interesting read

1557860949
DutchGh0st


1557860955
DutchGh0st
why doesn't that print anything?

1557861043
tgschultz
they aren't public

1557861060
tgschultz
just a guess

1557861078
DutchGh0st
but I can print def.name

1557861095
DutchGh0st
If I comment line 11, I get

1557861105
DutchGh0st
"hello\nworld\n"

1557861115
DutchGh0st
when I dont comment line 11, I get nothing

1557861126
tgschultz
there's a compiler assert if you don't comment out that line

1557861192
tgschultz
meta doesn't care if a def is public I guess, but meta.trait does

1557861325
donpdonp
see a switch statement for a function return type just blew my mind a bit.

1557861337
DutchGh0st
a compiler assert?

1557861338
DutchGh0st
lol

1557861345
DutchGh0st
Wellll thats a bug then

1557861759
tgschultz
weird, it seems convinced that .Var is a rutime value

1557861769
tgschultz
even though it is of type `type`, so it can't be.

1557861806
andrewrk
huh, zig already supports capturing the expression value for the `else` prong of a switch. I forgot I did that

1557861821
DutchGh0st
doesnt work?

1557861830
DutchGh0st
Uploaded file:

1557861966
andrewrk
tgschultz, yes, generally ELF is what people want for build-exe in freestanding. do you have another use case?

1557861975
tgschultz
dos

1557861996
tgschultz
but it doesn't prodce an ELF in debug from what I can tell

1557862041
andrewrk
that is surprising, how are you checking?

1557862085
andrewrk
elf files start with "\x7fELF"

1557862128
tgschultz
No, I'm mistaken. I checked with a hex editor and it is ELF in both modes. just dumping the raw bytes to the console doesn't show that in the debug case for some reason though.

1557862171
tgschultz
probably the debug case happens to contain backspaces or home or something in it shortly after

1557862177
andrewrk
hmm I have never considered the use case of targeting DOS

1557862202
tgschultz
neat, I'm breaking new ground.

1557862224
andrewrk
if it's important to you and you're willing to sort of take ownership of the feature, you can add a new OS target

1557862251
tgschultz
I was considering it, depending on how things went. I'm curious if I could use zig to make a protected mode dos game.

1557862260
andrewrk
it might be nice to allow extending targets without having to commit to upstream zig, but for now that's how it works

1557862272
tgschultz
from what little is available on the subject, LLVM probably won't get along well with real mode.

1557862300
andrewrk
I think github user @jayschwa might share this use case

1557862331
andrewrk
I talked to him in person yesterday; he's working on restoring some kind of doom-era game that he bought the rights to

1557862338
andrewrk
catacombs

1557862341
tgschultz
my kinda guy

1557862387
tgschultz
he bought the rights to catacomb3d? Nice.

1557862454
tgschultz
it was pre-wolf3d carmack, IIRC

1557862558
andrewrk
yeah that's right

1557862812
tgschultz
well, if I can prove the concept to myself I'm planning on streaming it. I've been wanting to stream some game dev for a while, but my other projects aren't suitable for a variety of reasons and I've wanted to make a dos game since I first read Tricks of the Game Programming Gurus as a kid.

1557863284
andrewrk
sounds interesting

1557863324
DutchGh0st
mhh

1557863330
DutchGh0st
how do I set full debugmode in gdb?

1557863366
DutchGh0st
because I want to figure out why @typeName(def.data.Var) crashes the compiler

1557863412
andrewrk
DutchGh0st, I don't know what full debugmode is, but if you run the zig command using gdb, the back trace should be a pretty big clue about why it's crashing

1557863413
hryx
one of the regulars at my monthly game dev meetup is making DOS games. so I assume it's still alive as a hobby (?) target especially for games

1557863444
DutchGh0st
Assertion failed. This is a bug in the Zig compiler.???:?:?: 0x8704029 in ??? (???)???:?:?: 0x86c8494 in ??? (???)???:?:?: 0xe18a51f in ??? (???)

1557863867
andrewrk
is that one of the release builds from ziglang.org/download?

1557863874
andrewrk
you can build a debug version of zig from source

1557863904
DutchGh0st
its  one I downloaded

1557863912
DutchGh0st
and it happens in release 0.4 too

1557864194
DutchGh0st
and 0.3 as well

1557864278
tgschultz
ir.cpp:10427:0

1557864297
tgschultz
assert(const_val->data.x_type != nullptr);

1557864325
DutchGh0st
uh oh

1557864389
tgschultz
nothing about this code makes me think it would be unable to resolve the type though, so this is mysterious

1557864460
tgschultz
huh, const_val.type == 0x3266750

1557864509
tgschultz
oh wait, that's a pointer, not an id

1557864600
jayschwa
yes, I am interested in using Zig for a DOS game. Catacomb 3D was originally 16-bit realmode, but I've removed almost all the assembly and self-modifying code, and hoping to get it working as 32-bit protected mode "soon". I think I did compile a "hello world" program using Zig and ran it in DOS a few months ago, but I'll need to dig around for that experiment.

1557864637
tgschultz
if you find that, I'd be interested in having a look if you don't mind.

1557864858
tgschultz
So with this bug the type is known to be ZigTypeIdMetaType with ResolveStatusUnstarted.

1557864902
jayschwa
if I can find it and get it working again, I'll post it in a gist.

1557865018
tgschultz
cool, I'd appreciate it.

1557865226
DutchGh0st
but I gotta go now

1557865259
DutchGh0st
goodluck hunting the bug down! I made an issue on github, I really wonder what the cause is!

1557865623
tgschultz
DutchGh0st, best guess with this bug is that @typeName expects the type to have been resolved, but for some reason it isn't.

1557865639
tgschultz
my knowledge of compiler internals is still weak

1557875568
andrewrk
switching on error sets just got much better

1557875766
hryx
:O

1557875976
hryx
très bon

1557877163
triplefox
i would like to use zig as a build system for lua(i.e. compiling the lua executable from the standard 5.3.5 distribution). i'll do other things with it later but is there a good reference for just that?

1557877221
mikdusan
5,001 commits

1557877783
hryx
sup triplefox

1557877811
triplefox
hello pal

1557877967
daurnimator
triplefox: build system is completely undocumented at this point

1557878072
daurnimator
triplefox: but lua should be pretty easy: build the core as a library by just adding all the .c files except lua.c and luac.c

1557878272
triplefox
daurnimator: hmm, i think i get it

