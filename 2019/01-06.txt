1546732826
forgot-password
I'm using @memberName

1546732836
forgot-password
Or can I just append c""?

1546732861
daurnimator
`++ c""` should work actually

1546732993
forgot-password
Hm, sadly it did not. Does c"" get optmized away?

1546733379
daurnimator
andrewrk: is there a way to specify the field that contains the type for an enum?

1546733391
daurnimator
s/enum/union/

1546733431
daurnimator
I'm looking at our sockaddr definitions.... they don't seem right

1546734087
daurnimator
andrewrk: I'm thinking e.g. you could provide some 'special' method on a extern union?

1546734308
daurnimator
`sockaddr_storage = extern union { in: sockaddr_in, in6: sockaddr_in6, fn @unionEnum(self: sockaddr_storage) sa_family_t { return @intToEnum(sa_family_t, self.in.family) } }`

1546734343
daurnimator
(yes I know sa_family_t is not currently an enum; but it probably should be a packed enum?)

1546745747
emekoi
does zig link to libunwind?

1546745896
emekoi
because the repo includes a copy of the headers.

1546749418
andrewrk
emekoi, no it doesn't. where do you see that?

1546749866
emekoi
never mind, it's just the header unwind.h in c_headers.

1546784214
forgot-password
ilcear

1546784291
forgot-password
Is it possible to have a comptime value that I can manipulate at runtime? In my current attempt the compiler says 'cannot store runtime value in comptime variable'

1546789162
Pursche01
Hi, I just found out about Zig 30 minutes ago and I have been digging through the documenation a bit. It looks like an interesting language and I think I would like to give it a try. Before I do though, there is a concept I haven't found in the documentation. Does Zig have "pure" functions? Can I at compiletime force a function not to have side effects and not access non-const global scope?

1546789226
Pursche01
Alternatively are there any good tools for parsing Zig (preferably from Zig rather than from C), building an AST and figuring out "pureness" from a custom built pre-compiler?

1546789266
forgot-password
I'd love to have something like this too (I'm refering to the pure functions)

1546794720
MajorLag
the standard library has a zig parser in it

1546795447
forgot-password
Is it possible to do something along the lines of this:

1546795506
forgot-password
It already feels like fighting the language, but I'd love to know if it is plausible.

1546796584
MajorLag
the problem with what you've written is that someFunction's first parameter needs to be FirstStruct, but you've passed it SecondStruct. `second.someFunction()` is equivelent to `SecondStruct.someFunction(second)`. There is an implementation of interfaces in std that does what I think you're trying to do, however we're planning to move away from it because it doesn't optimize well. see:

1546796584
MajorLag
interface pattern can be seen in `std.mem` and `std.heap` where it is used with Allocator and its implementations.

1546796717
MajorLag
Bascially the interface struct instance lives as a member of the parent struct and itself contains function pointers to the implementations in the parent, but those parent functions take a pointer to the interface struct and use @fieldParentPtr to get their own instance from that instance.

1546796835
MajorLag
Something like this:

1546797046
forgot-password
MajorLag: Thanks, I think you messed up your link in the first message

1546797189
MajorLag


1546797194
MajorLag
worked fine for me?

1546797318
forgot-password
It looks like the message was cut off, maybe my irc client has a limit on message length.

1546797343
MajorLag
this was all that was after the link: The current interface pattern can be seen in `std.mem` and `std.heap` where it is used with Allocator and its implementations.

1546797442
forgot-password
What? How is that, it's displayed as a separate message for me picking up at " interface pattern[...]" again

1546797512
MajorLag
Your client might not like colons? What does: this look like?

1546797517
forgot-password
Heh, weird

1546797522
forgot-password
It looks fine

1546797560
MajorLag
huh. weird

1546797866
forgot-password
I'm going to put together a little write-up of what I'm currently trying to do. I feel like I'm too focused on the current approach, so maybe anybody has an idea for a different implementation.

1546800637
Pursche01
@MajorLag: Do you think the standard library parser will be able to figure out if something has side effects?

1546801384
andrewrk
Pursche01, no, it just parses into an abstract syntax tree

1546801387
forgot-password
Pursche01: I suppose you could just (heh, "just") walk through the AST and check whether it does something that would classify it as having side effects. However, neither does that sound like a small undertaking nor do I know about the parser. So don't take my word for granted :p

1546801433
andrewrk
we used to have the concept of implicit pure functions

1546801456
forgot-password
Phew, I finally finished my small write-up:

1546801488
andrewrk
and if a function call had all comptime known arguments and was pure, then the function would be interpreted at compile time automatically

1546801525
andrewrk
Pursche01, the closest issue we have open to your question is

1546801546
andrewrk
relevant to #425, it's possible that "pure" and "wanting to be comptime if possible" are the same thing

1546801571
forgot-password
andrewrk: So you ditched that for comptime expressions?

1546801622
andrewrk
I can't remember why I changed that. there are a few things to solve if we wanted to reintroduce it

