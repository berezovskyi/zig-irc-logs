1570321426
oats
Has anybody been able to compile thumbv6m-freestanding-none binaries with libopencm3?

1570324128
oats
ok, I got one compiling with libopencm3 lol

1570324141
oats
another question then, is there a way to inspect what's in the result of a cImport?

1570324155
oats
what fields it has, etc.

1570324292
oats
I'm importing some header files that define some pointer macros that don't seem to be in the imported C namespace

1570325582
via
oats: i'm curious, you are linking against opencm3 or you got it compiling direct with zig?

1570326099
oats
via: I'm linking the already compiled library

1570326104
oats
just importing the header files

1570326923
oats
hmm, I think this is just a case of these macros not being supported

1570326940
oats
I used --verbose-cimport, and saw that the translated zig was in a file in zig-cache

1570326957
oats
it looks like the one I'm looking for just doesn't make it :P

1570326973
oats
memory-mapped IO macros and so on

1570330534
via
oats: i was not having luck doing that, even the gpio headers wouldn't import properly

1570330553
via
i have to use c wrapper functions

1570331329
oats
via: I got it built and running using no header files, just linking

1570331349
oats
might try to manually translate bits of the library for my tomu :P

1570331357
oats
maybe a little side-project

1570335394
andrewrk
companion_cube, whitequark is not interested in zig due to the lack of rust-like safety

1570335434
andrewrk


1570342737
rifkik
Is there a type for Functions?

1570342747
rifkik
for example

1570342760
rifkik
opcodes[0xA9] = [_]fn{ ldaImm8, ldaImm16, ldaImm8, ldaImm16, ldaImm8 };

1570349493
mq32
andrewrk: i really find it interesting how superior some Rustaceans are. "rust is superior and all other languages are crap" or similar is the term i heard by a lot of people now and i find this saddening

1570349515
mq32
*Rusteceans -(are) +(feel)

1570351071
_Vi
By the way, Python - pythonista, Rust - rustacean, Zig - ?

1570351739
torque
I don't understand people's incessant need to label themselves

1570351809
torque
I don't think there's an reason to come up with a descriptor that implies some sort of allegiance to a specific programming language

1570351866
torque
I think it's weird and polarizing to do this actually, and I actively dislike it, thats my 2 cents thanks

1570351988
mq32
what torque said

1570352116
daurnimator
_Vi: ziguana

1570352334
mq32
daurnimator, i don't think that's a good idea:

1570352493
daurnimator
mq32:

1570352559
mq32
oh :D

1570353209
_Vi
Why `undeclared identifier 'timespec'` on WASI?

1570353980
_Vi
How do I save `std.mem.eql` curried with `u8` to a const to avoid typing `std.mem.eql(u8` all the time?

1570354274
mq32
just make a new function

1570354283
mq32
fn eql_u8(â€¦) bool

1570354338
mikdusan
`fn curry_u8(a: var, b: var) bool { return std.mem.eql(u8, a, b); }`

1570355068
_Vi
How do I warn to stdout instead of stderr?

1570355085
_Vi
`getStdOut` returns `File` instead of `OutStream` that has `print`.

1570355176
mikdusan
the thing to note is warn() has a very specific contract. it doesn't make you `try`, that said:

1570355199
mikdusan
1. `const out = try std.io.getStdOut()).outStream();`

1570355241
mikdusan
2. try out.stream.print("{}\n", "hello");

1570355281
_Vi
OK, `.stream` was missing.

1570358870
Snektron
whats the point of a mascot for a programming language

1570359229
daurnimator
Snektron: plushies to sell? ;)

1570359269
daurnimator
Snektron: but also, people found go more approachable due to their use of the gopher in docs.

1570359285
mq32
Snektron, makes a nice impression and it's cool :D

1570362309
via
oats: do you have that up anywhere? i remember trying and failing to just do a miniblink style gpio on/off without c wrappers, so i'm interested in how you might have gotten it to work

1570362502
samtebbs
Should you 100% not be able to pass a `*std.io.seekable_stream.SeekableStream(std.os.SeekError,error{Unseekable,Unexpected,SystemResources,})` as a `*std.io.seekable_stream.SeekableStream(anyerror,anyerror)`, or is that a missing implicit cast?

1570362574
samtebbs
It means I have to create annoying boilerplate that wraps the more specific stream

1570366505
daurnimator
samtebbs: why shouldn't you be able to?

1570366529
daurnimator
samtebbs: shouldn't std.os.SeekError cast implicitly to anyerror?

1570368527
samtebbs
daurnimator: That doesn't seem to be the case unfortunately

1570368537
samtebbs
You'd expect it to

1570368783
samtebbs
daurnimator: I had to do this to get around it:

1570369678
rifkik
Continuing with my SNES emulator

1570372916
kenaryn
Hi people. Please does someone know how metabuild are defined? For example, I am using zig 0.5.0+dca6e74f's version; is 'dca6e74f' the last commit's date encrypted in hexadecimal format? Or is it more complicated than that?

1570372937
mikdusan
it's git commit hash from master branch

1570372951
kenaryn
Allright, thank you.

1570373740
nrdmn
what's still missing for

1570374014
daurnimator
nrdmn: does `std.testing.expect('ðŸ’©' == 128169);` pass?

1570374202
nrdmn
daurnimator: oh I see

1570375482
fengb
Does daurnimator really remember poop by heart? :P

1570380736
andrewrk
mq32, let's not be making general statements about groups of people please

1570381308
mq32
andrewrk, i didn't want to make a general statement about all, but only some

1570381316
scientes
mq32, you are still doing it

1570381327
scientes
stick to technical discussion

1570381341
scientes
and let fools be fools

1570381350
scientes
I am having a really hard time changing "case PrefixOpAddrOf" so that I can inspect AddrOf in the 2nd analyze phase

1570381364
scientes
to address &a[0] when a is a vector

1570381377
mq32
just want to clarify things: "some" as "80% of the people i met"

1570381391
scientes
mq32, yeah, but let them be fools, if that is what they are

1570381393
mq32
which is like... 5 or so

1570381395
mq32
yeah

1570381411
mq32
stuff done in zig today:

1570381416
mq32
3D rendering with shadow mapping!

1570381419
mq32


1570381465
scientes
that is really cool

1570381480
scientes
is the rendering written in zig?

1570381493
scientes
or I guess it is vulkan

1570381518
mq32
it's OpenGL ES 2.0, all written in Zig except for SDL

1570381582
scientes
there is just a bunch of code I don't really understand

1570381598
mq32
what's it about?

1570381610
scientes
taking the address of a vector is special

1570381615
scientes
&a[0]

1570381623
scientes
but you can only tell if it is a vector after types have been resolved

1570383014
scientes
there should be a way to get zig to not include a bunch of boiler plate and just look at the file provided, so that it is easier to use the debugger

1570383038
scientes
its hard to filter out all the debugger noise

1570383086
mikdusan
scientes:

1570383332
scientes
I'm trying to follow a specific AstNode through the compiler

1570384572
n_1-c_k
How do you switch off colours in runtime error messages?

1570388807
mq32
n_1-c_k, i think there's a compiler flag for

1570389076
n_1-c_k
mq32, ...suppressing colour?  I don't see it making any difference :(

1570389108
mq32
"zig build --color off" doesn't work?

1570389119
mq32
oh sorry

1570389122
mq32
runtime errors

1570389178
n_1-c_k
np

1570389195
andrewrk
n_1-c_k, I'd accept a patch to make std/debug.zig check @import("root") for a global configuration setting

1570389212
andrewrk
there is precedent for this

1570389247
n_1-c_k
andrewrk: if it's potentially doably by an inept novice, I might try!

1570389263
n_1-c_k
s/doably/doable/

1570389326
mq32
n_1-c_k:

1570389329
mq32
insert

1570389375
mq32
if(@hasDecl(@import("root"), "enable_colored_debug_output")) { if(!@import("root")."enable_colored_debug_output) return }

1570389379
mq32
or something like that

1570389411
mq32
there's probably a typeOf missing somewhere

1570389412
n_1-c_k
I recognize some of the words there, I'll give it a go, thx

1570389614
andrewrk
mq32, here would be better:

1570389617
andrewrk
n_1-c_k, ^

1570389633
n_1-c_k
ok...

1570389657
scientes
i'm struggling to change this so it creates a IrInstruction

1570389658
scientes
return ir_lval_wrap(irb, scope, ir_gen_node_extra(irb, expr_node, scope, LValPtr, nullptr), lval, result_loc);

1570389665
scientes
so that I can examine it in the analyze pass

1570389678
scientes
from PrefixOpAddrOf

1570389717
scientes
i mean ir_gen_node_extra makes a IrInstruction

1570389736
mq32
andrewrk, oh ok :D yeah, that's probably a better place

1570389762
mq32
i looked up how the code is colored and ignored that my whole screen was wapped in a if(tty_color) { }

1570389916
scientes
the issue seems to be this assumption that everything is a pointer

1570389921
scientes
*that all values

1570389943
scientes
so & doesn't have an instruction

1570389998
scientes
and instead everything is LValPtr

1570393784
n_1-c_k
I'm attempting to follow CONTRIBUTING and falling at an early hurdle,

1570393841
andrewrk
n_1-c_k, CXX=clang-9 is suspect

1570393870
n_1-c_k
oh I got an error without that :(

1570393906
andrewrk
have a paste?

1570393935
n_1-c_k
sure,

1570393957
n_1-c_k
so I added CXX=.. and got the 2nd error, in the debian.net paste

1570393960
andrewrk
you're on debian? you need the build-essential package

1570393974
n_1-c_k
oh! I'll try that, thanks

1570394110
n_1-c_k
Yes, I'm getting further now, thanks, I'll press on...

1570394771
n_1-c_k
My next hurdle,

1570394942
nrdmn
n_1-c_k: what's your glibc version?

1570395019
n_1-c_k
nrdmn, that's the same as libc6 isn't it?  It says, Version: 2.29-2

1570395083
nrdmn
hmm

1570395153
plumm
mikdusan: I am reading your zig compiler internals, for section 4.1 why are there 3 reset instructions?

1570395156
plumm
at the beginning*

1570395424
companion_cube
andrewrk: thanks for ref to your discussion with whitequark

1570395658
companion_cube
interesting conversation

1570395667
companion_cube
but when they mention formal methods, I agree with them

1570395689
companion_cube
perfection needs proof, especially if something as benign as an overflow gives the compiler the right to do anything

1570395747
earnestly
companion_cube:

1570396097
companion_cube
seems like a good summary, yes?

1570396225
earnestly
If perfect software is software that is proven is true then no software is perfect

1570396267
earnestly
But you can proof the provable parts, and although that proof doesn't compose, it does provide some trust

1570396277
companion_cube
earnestly: there exists proven software

1570396293
companion_cube
of course you can mistrust the prover, but well, it's still way better

1570396296
companion_cube
(and way more effort)

1570396316
earnestly
Formally verified software exists, and that software still fails when it assumes the network is perfect.  They of course have far less bugs than unverified software so it's not for nothing

1570396336
companion_cube
why would it assume the network is perfect?

1570396349
earnestly
When you do formal verification you have to make sweeping assumptions about the environment, about state

1570396355
companion_cube
it's clearly not for nothing indeed.

1570396367
companion_cube
yeah, although for a C compiler like compcert, these assumptions are quite minimal

1570396376
fengb
Formally verified architecture exists.  I donâ€™t believe implementations have been proven

1570396414
earnestly
companion_cube: When verifying a system you can only do small parts of it as to verify it completely would require you verify everything about its environment as well as proof does not compose

1570396425
earnestly
And the only programs which can be proven are total

1570396432
earnestly
I.e. not turing complete

1570396432
companion_cube
earnestly:

1570396437
earnestly
Yes, I'm aware of it

1570396444
companion_cube
a lot of useful things are not turing complete

1570396458
companion_cube
and the thing is proved end to end, not just locally

1570396460
earnestly
Yes I know

1570396468
companion_cube
(yeah, if it can't write a file, it'll fail, but that's pretty acceptable)

1570396486
earnestly
companion_cube: Here's some more examples:

1570396509
companion_cube
reminds me of something

1570396529
companion_cube
tbh I think distributed systems are intrinsically harder

1570396551
earnestly
What robust, resilient software does, is as the article I linked describes.  You design error recovery subsystems (i.e. erlang, NASA's curiosity, etc.) and then throw as many adhoc formal methods as you can stomach at it

1570396556
companion_cube
but stuff like memory bugs, array offsets errors, etc. are provable (

1570396572
earnestly
companion_cube: rowhammer

1570396601
companion_cube
well if your point is that no software can be perfect, I think I agree

1570396650
earnestly
Right, I'm trying to emphasis that it's not a silver bullet which I think you know, but sometimes forget

1570396661
earnestly
emphasise*

1570396666
companion_cube
it's just that it gets you 99.9% of the way

1570396678
companion_cube
unlike tests, which may get you 50% of the way or something like that

1570396686
earnestly
Resilient software, or even "progress oblivious" software is also programmed in ways utterly alien to normal software too

1570396723
companion_cube
erlang like stuff is resilient only as much as the VM is correct, and writing a safe VM is more what Zig would/should excel at

1570396734
companion_cube
(like, writing a flawless GC â€” and there you can't just recover)

1570396813
earnestly
You can make Haskell software segfault by making the available stack size too small.  All formally verified software has axioms, i.e. "assumed, tacit", etc.  Sometimes those axioms are wrong, but even in mathematics, almost never questioned

1570396880
companion_cube
hmm a Coq proof shouldn't contained "assumed" at all

1570396897
earnestly
You have to, it would be too costly otherwise

1570396911
companion_cube
hmm, no?

1570396983
companion_cube
(as for the stack size, well, you can prove "terminates with correct result or crashes", which is a lot better than "anything goes because there might be UB")

1570397028
earnestly
You can't prove that, that's the point.  You'd have to solve the halting problem

1570397061
companion_cube
wrong.

1570397061
earnestly
(You can formally reason about it though, and that's good to do anyway)

1570397074
companion_cube
you just have to prove the halting problem

1570397088
earnestly
Sure but your inputs are arbitrary

1570397095
companion_cube
well, still ?

1570397112
companion_cube
you can prove that `Î»x. x+1` terminates, whatever x is ;)

1570397124
companion_cube
you can prove that a sort function terminates

1570397131
earnestly
Not when composed

1570397137
companion_cube
sure

1570397138
mikdusan
plumm: that has to do with result-location semantics and it's part of setting it up. but i admit not having grok'd how that works yet

1570397138
earnestly
Well, not without proving the composion

1570397148
companion_cube
the halting problem just prevents you from writing an algorithm that always decides termination

1570397153
companion_cube
yeah but that's what people do

1570397162
companion_cube
that's what compcert does

1570397327
companion_cube
(besides, here whitequark wasn't talking about proving correctness, but safety, which is less hard)

1570397624
earnestly
companion_cube: Well they are working on certifying coq, so we'll see

1570397752
companion_cube
wait, what

1570397759
companion_cube
what do you mean?

1570397813
earnestly
companion_cube:

1570397962
companion_cube
ah, different thing, they're building another compiler. That's cool, a bit like cakeML, I guess.

1570397991
companion_cube
impressive team, too.

1570399223
kenaryn
earnestly perhaps you would be interested by F#, which is a formal concept-proof aiming at Coq replacement, and became a general purpose language. See more at:

1570399249
companion_cube
you mean F* ? yeahâ€¦

1570399253
earnestly
I read F# and thought you meant F#, :P

1570399259
kenaryn
It involves Inria once again, like companion_cube talked about compcert

1570399268
kenaryn
nope... I said F*

1570399268
earnestly
All of this stuff comes from inria

1570399276
earnestly
F**

1570399283
companion_cube
(I'm just talking about the stuff I know)

1570399309
kenaryn
and I'm grateful for that, I added your links in my browser's favorites.

1570399336
kenaryn
sorry, it was F* from the beginning, not F#. I mispelled it. :)

1570399458
kenaryn
There is also another formal language to query a database and composed of structures embedded in the data itself, it is a direct concurrent of GraphQL, it is nammed Category Query Language.

1570399544
kenaryn
But unlike the former one, it is under a company's control which is in charge of the IDE intrisically associated with CQL.

1570399612
kenaryn


