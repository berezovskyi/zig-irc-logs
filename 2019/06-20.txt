1560990518
marijnfs
so many commits

1560993707
andrewrk
yeah it's not trivial to fundamentally change how expressions work

1560994521
mikdusan
fyi llvm-8.0.1 is about to get tagged. i've been using zig against llvm-8.0.1-rc1 for 2 weeks now without issue

1560994632
mikdusan
*on macOS

1560997846
andrewrk
600/616 behavior tests passing

1560998129
emekankurumeh[m]
this is exciting

1560998134
THFKA4
ship it

1560998237
emekankurumeh[m]
are you going to stream tommorow andrewrk? if so, maybe you should save the last test for the stream.

1560998505
andrewrk
haha fun idea

1560999405
scientes
get some baloons

1561001477
marler8997_
andrewrk: no, thanks for the info, I'll update my tool to use that

1561002031
andrewrk
602/616

1561002828
marler8997_
why does the ziglang.org site redirect all http requests to https?

1561002844
andrewrk
best practice

1561003134
marler8997_
the server is denying download access from the python urllib downloader because it hasn't enabled cookies :)

1561003140
marler8997_
silly

1561003221
andrewrk
how do you know that?

1561003245
marler8997_
the html response I got

1561003264
andrewrk
I don't have any html responses configured

1561003292
marler8997_


1561003320
andrewrk


1561003351
marler8997_
best practices right? :)

1561003578
andrewrk
marler8997, I believe that setting is disabled now

1561003634
marler8997_
my script is getting further now, looks like it's disabled now

1561004087
marler8997_
using the json format is much nice, removed like 20 lines of python parse code

1561004092
marler8997_
the json format is a bit weird though

1561007890
very-mediocre
andrewrk: you might be interested in

1561008167
andrewrk
still no source

1561008215
very-mediocre
the source will be released on the 22nd

1561008242
very-mediocre
just wanted to give you a heads up since this language had come up before in discussions

1561008400
very-mediocre
there's this unrigorous air about it that's bugging me, everything seems really simple I feel like there must be gremlins under the surface somewhere

1561008819
torque
lol the compiler checks online for updates before compiling

1561008933
very-mediocre
yow.

1561011673
andrewrk
I said my piece on HN. as tempting as it is, let's try to keep it zig-focused & productive in #zig

1561011724
andrewrk
(if there are any actually good ideas V has they are of course on topic)

1561011967
very-mediocre
sure

1561013306
mmx87


1561013306
mmx87
andrewrk, this seems a bit much? Is this intended?

1561013397
andrewrk
mmx87, I'm aware of the uninitialized value jump in llvm's dwarf code although I haven't submitted a patch to them yet

1561013419
andrewrk
if you're referring to the "leaks" don't forget that the OS frees all the memory when you exit()

1561013474
andrewrk
stage1 compiler will never bother freeing memory. the self-hosted compiler is a long-running process and so will manage memory without leaks

1561013589
mmx87
>don't forget that the OS frees all the memory when you exit()

1561013590
mmx87
Yeah, I know. I was just curious.

1561014865
andrewrk
fair enough :)

1561017204
ki9a
bootstrapping is tricky :)

1561018169
ki9a
andrewrk: are you happy with llvm?

1561022322
FireFox317
Does someone know which of the 2 options I suggested in the issue I should implement for this issue?

1561022369
FireFox317
^ That sentence is weird xd

1561024063
samtebbs
FireFox317: Option 2 is the best option IMO since option 1 seems like a temporary workaround

1561024286
FireFox317
samtebbs: With option 2 you mean the separation of the object files inside the library? I think I'm gonna wait on andrewrk's response anyway

1561024481
samtebbs
FireFox317: Yeah you should wait, it's probably the best option though :)

1561026791
samtebbs
Is it ok to ping a PR/issue when it's been a week or more since the last feedback? I don't want to bother andrew too much since he has a lot to give his time to.

1561027291
marijnfs
zig in sublime text is nice

1561027370
marijnfs
can i define anonymous functions?

1561028852
BitPuffin
marijnfs: you can define anonymous structs and put functions in them

1561041495
curtisf
is there a way to use @field to modify a struct? to accomplish something like this?

1561041594
curtisf
Oh, that actually works, I must have messed something else up

1561047160
samtebbs
Does anyone have any interest in working on a zig equivalent of creduce? I think forking creduce and adapting it to Zig would be viable but I'm not sure how to do so in the best way.

1561047382
scientes
samtebbs, everyone here has more to do they have time for

1561047405
scientes
oh, yeah that looks cool

1561047411
scientes
sorry, didn't know what it was

1561047424
scientes
llvm calls the same thing bugpoint

1561047466
halosghost
do y'all mean this?

1561047537
halosghost
that does look very cool

1561047586
samtebbs
There's a git repo at

1561047606
samtebbs
It could be useful for reducing reproducable code when submitting a bug report

1561047608
samtebbs
etc.

1561047671
scientes
it would need to use the stage2 parser

1561047676
scientes
so it can keep step with language changes

1561047876
samtebbs
scientes: Does bugpoint support arbitrary languages? If that is the case then adapting that could be better

1561047897
scientes
i don't know, but probably not

1561047911
scientes
i think it is llvm only

1561047923
scientes
but it would be useful at the same time, so a unified interface would be nice

1561047930
scientes
llvm-ir

1561047940
andrewrk
ki9a, llvm provides a huge part of the compiler. it allows us to have many targets, inline assembly, and debug info on posix & windows. the downsides are it is a huge, cumbersome dependency, and it's the bottleneck in compilation speed of debug mode builds

1561047994
daurnimator
There are only so many mature code optimizing backends. Creating one is rarely done without a huge multiyear academic project

1561048008
scientes
not to mention maintinance

1561048036
daurnimator
not to mention new architectures

1561048057
scientes
llvm should be improoved

1561048062
scientes
that benifits everyone

1561048066
daurnimator
LuaJIT is probably the only one I've seen that was created by one person; and where new architectures came calling

1561048074
scientes
gccgo too

1561048079
fengb
I've been having trouble with latest running tests on a mac:

1561048084
scientes
oh that isn't backend

1561048084
samtebbs


1561048115
daurnimator
fengb: tried with master? you have 0.4.0 in your trace there

1561048118
fengb
Really weird thing is, fd_t is referenced in functions before and after this line

1561048132
daurnimator
fengb: also are you hitting

1561048134
fengb
I named it 0.4.0+[hash]

1561048156
fengb
Ahhhh maybe that's it

1561048159
scientes
llvm really isn't that bad

1561048202
daurnimator
scientes: agreed. I think it would be a waste to duplicate that effort right now. we have better things to work on

1561048224
scientes
or ever, other languages want improvements too

1561048226
fengb
I think LLVM has some poor C++ idiosyncrasies, but I imagine having more frontends will help guide its efforts

1561048233
scientes
only sensible thing would be to add a gcc backend

1561048365
scientes
but that would require a lot of work in llvm, like getting llvm's assembly syntax identical to clang (which emulate's gccs)

1561048598
AlexMax
I've been really wanting an excuse to translate my C hobby project to Zig, because C's various idiosyncrasies are really starting to bug me, and I always feel a little uneasy about the code I write in it, not ever being completely sure that I'm handling error code paths properly.

1561048703
andrewrk
scientes, if zig becomes popular enough, I think people will enjoy creating alternate compilers

1561048726
andrewrk
the simplicity makes it more approachable than e.g. making a rust compiler

1561048749
AlexMax
However, I recall discussions around the rustification of bzip2, and one of the legitimate beefs I saw floating around was portability, precisely because LLVM just doesn't quite have the reach of GCC and doesn't have the history of most platforms of the past having a C compiler.

1561048819
scientes
I can see people writing a differn't zig interpreter for comptime

1561048850
andrewrk
I agree that is legitimate beef. But I think there are enough incentives set up for people that it is likely for LLVM to gain more backends

1561048858
AlexMax
I always thought that Nim's strategy of simply compiling to C code was quite a clever workaround, but I imagine that's a gigantic can of worms to open.

1561048900
fengb
Completely asinine idea: compile to wasm then convert to C

1561048921
andrewrk
AlexMax, zig is actually trying to compete with C, that's the main problem with that strategy

1561048928
andrewrk
I mean, replace C

1561048954
scientes
no new general purpose architecture that doesn't have a llvm AND gcc port can be successful

1561048961
scientes
embedded is different

1561048984
scientes
compiling to C is quite painful

1561048996
AlexMax
Yeah, and I feel like if the goal is long-term replacement, LLVM is the correct play for the primary compiler.  But compiling to C might be useful for just getting your foot in the door in a closed ecosystem that knows some propietary C compiler and nothing else.

1561049008
andrewrk
fair point

1561049012
halosghost
I don't agree

1561049020
scientes
nah

1561049021
halosghost
compiling-to-c means you bite a ton of C's baggage

1561049027
scientes
those platforms are not worth the effort

1561049033
scientes
and hsail is here

1561049038
halosghost
I quite like C, but compiling to it means you get a ton of issues that you'd almost certainly rather not have

1561049062
halosghost
(it's one of the reasons I only looked at nim incidentally; many of the choices they made in their C codegen were major turn-offs for me)

1561049100
andrewrk
I think LLVM should have a C target. I believe it used to have one

1561049103
AlexMax
Yeah, I noticed that Nim had to pass a bunch of -f flags to the C compiler presumably to make it behave in expected ways.

1561049170
scientes
and some of those propriatary compilers are c89-only too

1561049171
daurnimator
target web assembly and then use a web assembly VM written in C ;)

1561049177
halosghost
AlexMax: and, to be fair, that's how you have to interact with C if you want consistent behavior everywhere; but that's part of the problem

1561049189
AlexMax
And even though Nim outputs C, how often do you suppose that proprietary and outdated compilers are actually exercised.

1561049220
fengb
andrewrk: how comprehensive should translate-c bitfield be? I saw an issue about packed attributes, but would it okay to ignore for first pass?

1561049225
andrewrk
part of the philosophy of what zig is doing is unraveling a few layers of abstraction which have become old and leaky, and then rebuilding them in a modern way

1561049227
halosghost
AlexMax: proprietary compilers? all the time

1561049234
halosghost
perhaps not with nim

1561049243
daurnimator
zig targeting C

1561049261
andrewrk
daurnimator, sure and I want it to be implemented in LLVM

1561049261
halosghost
but msvc (which isn't really a C compiler even though folk think of it as one) and icc are quite common in the production world

1561049282
daurnimator
andrewrk: I actually think it would be better to use that as a demo usecase of "zig is not tied to LLVM"

1561049298
andrewrk
fengb, that's what translate-c does now, it demotes structs with bitfields to opaque types

1561049305
daurnimator
andrewrk: have zig be able to output: LLVM IR, GCC trees, C.

1561049312
fengb
I mean, I want to implement actual bitfields

1561049314
AlexMax
halosghost: Sorry, I should have clarified.  I was thinking more along the lines of those weird compilers you see with embedded chips.

1561049321
halosghost
AlexMax: ahh

1561049358
daurnimator
AlexMax: another interesting use case is targetting MISRA C. It's the only way into parts of the car and aerospace industries

1561049368
andrewrk
fengb, ah. incremental improvements are great as long as they don't have false negatives. does that make sense? e.g. don't attempt a translation of a type that would be unsound

1561049375
halosghost
daurnimator: that's much more compelling of an idea imo

1561049404
fengb
That makes sense. I'm just not familiar with all the

1561049414
halosghost
daurnimator: having said that; I cannot, for the life of me, find a freely-available MISRA compilance-checker or a MISRA-only compiler

1561049423
halosghost
daurnimator: or even, for that matter, the MISRA spec

1561049438
halosghost
daurnimator: do you have links I could use? I've been wanting to get a copy of any of those three things for quite a while

1561049439
andrewrk
I am warming up to the idea of having alternate backends besides llvm. but not for a while into the future. I do want to make an attempt for one of these ultra fast debug build compilers that go straight to machine code

1561049451
daurnimator
halosghost: I once had one back in university (10+ years ago....) can't remember what is was called.

1561049474
halosghost
daurnimator: I would be equally happy with a CERT compliance checker

1561049483
halosghost
but I can't find that either without paying a phenomenal amount

1561049509
fengb
andrewrk: regarding `zig fmt a && b`, I have a quick port to the stage2 tokenizer, but there's not a good way to generate a useful error atm

1561049525
fengb


1561049538
AlexMax
To be clear, I'm looking at the problem strictly from a retrocomputing angle.  My hobby project is a libretro core, and RetroArch runs on tons of odd platforms whose toolchains probably haven't been updated in a decade or more.  I might be in that 1% of situations where if I want to remain potentially portable to those platforms, I don't really have a choice but to stay with C.  I'm part of that 1%, and I

1561049544
AlexMax
totally understand if targeting that 1% is probably not worthwhile use of time.

1561049573
fengb
I think the tokenizer needs a way to generate errors with messages similar to how the C++ code does it. Thoughts?

1561049575
AlexMax
But embedded applications might be another story, and are probably a lot more common than me.

1561049643
andrewrk
fengb, I made the design decision that the tokenizer won't emit errors. but it can emit an "Invalid" token

1561049658
andrewrk
so the parser will have to notice the invalid token and display an appropriate message

1561049665
fengb
It's currently doing "error: expected Semicolon, found Invalid"

1561049689
fengb
Oh... push the logic into the parser then?

1561049717
andrewrk
you can also just add a token for a double ampersand, and then not do anything with it in the parser

1561049720
fengb
Alternatively, would it make sense to tokenize as '&&'

1561049723
andrewrk
yeah

1561049742
fengb
Ah okay, wasn't sure if that would be considered hacky

1561049749
andrewrk
and then there should be a way to make the parse errors nicer, perhaps in general, or perhaps with some special case code for &&

1561049758
fengb
Thanks

1561049777
AlexMax
If you're writing code for an RTOS for some tiny chip with a proprietary compiler, how would Zig get its foot in the door?  That's an open question, not rhetorical.

1561049788
andrewrk
fengb, eh, if it doesn't harm perf, and the logic is straightforward enough, I'm not sure it's even possible to put hacks in tokenizers & parsers

1561049802
andrewrk
the logic is what you want it to be, if it's a flow chart with && then so be it

1561049826
andrewrk
and it's so easy to test

1561049841
andrewrk
I'm not really worried about code quality there

1561049900
andrewrk
AlexMax, my best answer would be: a fork of LLVM adding a backend for the chip, and a fork of zig adding the arch

1561049925
andrewrk
proprietary compiler means they aren't sharing their work; the work must be duplicated - those forks are the least amount of work to get there

1561049966
andrewrk
zig's MIT license would increase the chances that they also provided a proprietary zig compiler for the chip

1561049981
scientes
or for now, an unmaintained one

1561049984
andrewrk
as much as I would prefer things to be open source, that is allowed

1561050337
gamester
Is this intended?

1561050475
andrewrk
gamester, yes, you can override the integer tag type of the enum like this: enum(u16)

1561050482
andrewrk
(or any integer type)

1561050508
andrewrk
that should be a compile error hint

1561050528
andrewrk
if you have time I would appreciate an issue for adding that hint

1561050546
andrewrk
alright closing IRC for a bit to get more tests passing

1561050822
gamester
done

1561051518
emekankurumeh[m]
fengb: I think there was a rust program that did something similar. they would compile c to wasm then turn the wasm to rust

1561058966
tralamazza
yes it blinks

1561058978
tralamazza
sorry too happy

1561059284
FireFox317
tralamazza: Yeahh nice man! The bluepill?

1561059401
tralamazza
yup

1561059409
tralamazza
i will update the repo

1561059450
tralamazza
lld works fine too so far

1561059462
tralamazza
pure zig

1561059479
FireFox317
Could you share a link to the repo? I'm curious how you did the startup code in zig

1561059773
tralamazza
FireFox317:

1561060042
tralamazza
FireFox317: do you have a blue pill to test?

1561060103
ki9a
andrewrk: well aware of the advantages of llvm. I have a commercial compiler using it too. Just feel i spend more time fighting llvm issues, speed and updates than actual work these days

1561060139
FireFox317
Nope, I have a nucleo stm32f4 board, but I can try to test it on there

1561060255
tralamazza
FireFox317: you might have to change the clock init

1561060428
FireFox317
tralamazza: Looks nice!

1561060443
tralamazza
ty

1561061168
scientes
andrewrk daurnimator

1561061333
daurnimator
scientes: heh yeah I saw the gcc bug when it was first filed

1561062046
marijnfs
how do i add a include dir for c-code?

1561062233
tralamazza
is there a way to place a variable at a specific memory address?

1561062253
tralamazza
(besides linker section trickery)

1561062388
ross_k
Hi, I asked the other day about getting my project building on zig 0.4.0. I'm a bit further after downloading the latest master, but getting stuck at this error:

1561062428
ross_k


1561062471
FireFox317
tralamazza: I don

1561062483
ross_k
here's my build.zig:

1561062491
FireFox317
I don't think there is, there is an open issue for that, but I couldn't find it that quickly

1561062567
ross_k
Tried with and without the line: exe.linkSystemLibrary("c");

1561062839
fengb
ross_k: can you do `zig targets` and see what zig thinks your native is?

1561063116
ross_k
x86_64 is native... but I think the issue is that it's trying to use the libc that ships with zig (musl) which is linux only

1561063175
emekankurumeh[m]
what is the ABI?

1561063191
ross_k
ABI in my build.zig is msvc

1561063203
ross_k
and also in zig targets

1561063209
ross_k
(as the native one)

1561063271
emekankurumeh[m]
can you try it without explicitly setting the target?

1561063307
ross_k
Sure

1561063450
ross_k
okay, it gets past that error but now says it can't find windows.h in one of my C imports:

1561063524
ross_k
I didn't need to specify the include path in zig 0.3.0 so wouldn't think that's different now?

1561063538
ross_k
(maybe just a side effect of not setting the target)

1561064207
marijnfs
how do you normally integrate tests. I have a test part in my source, but I need to rely on paths being set by my build.zig

1561064231
marijnfs
and it seems 'zig test' only works if you put the src file directly, which is then missing include dirs

1561065089
emekankurumeh[m]
can you run 'zig libc' and show what your libc file looks like?

1561065151
ross_k
emekankurumeh:

1561065197
ross_k
this matches the file zig-cache\native_libc.txt

1561065431
emekankurumeh[m]
is windows.h actually there then?

1561065592
mikdusan1
marijnfs: have you tried b.addTest

1561066195
mikdusan1
marijnfs:

1561066315
ross_k
emekankurumeh[m]: windows.h isn't there, it's part of the windows SDK

1561066325
ross_k
which is installed on my system

1561066341
ross_k
(and zig 0.3.0 can find it)

1561066493
marijnfs
mikdusan1: cool let me try, though i add a includedir to the exe, so not sure how the builder knows it

1561066851
marijnfs
another issue, I include a c header, and it uses an enum to define some constants and reused the same number

1561066870
marijnfs
and then the cImport file created by zig gives problems, because zig doesn't like reused numbers

1561067086
mikdusan1
i think open issue

1561067916
marijnfs
mikdusan1: thanks test thing worked

1561067929
marijnfs
mikdusan1: yeah i'll hack the header for now

1561068607
ross_k
submitted a github issue with the details of the libc thing:

1561068623
ross_k
thanks for the help, hopefully I'll get it sorted out soon

1561069726
andrewrk
all behavior tests passing in result location branch. still more regressions to fix though

1561069760
mikdusan1
still zig0 only right?

1561069763
andrewrk
I'll do a stream tomorrow

1561069778
andrewrk
yeah, stage2 additions still have a regression to fix. looking into that next

1561069788
andrewrk
well first I'm going to get some food

1561069821
andrewrk
it's good to do the behavior tests first because all the regressions after that become additional behavior tests

1561070197
scientes
yes

1561070927
andrewrk
scientes, I'll make sure your mulAdd PR gets merged before this, don't worry

1561071489
samtebbs
Say I have a variable assigned to @typeOf(root.main).ReturnType which I know has a @typeId() of builtin.TypeId.ErrorUnion

1561071512
samtebbs
How would I extract T from that, if the return type is !T ?

1561071541
samtebbs
The issue for reference: #2721

1561071673
mikdusan1
@typeInfo(that).ErrorUnion.payload

1561072058
mikdusan1
hmm .ReturnType.Paylod also works?

1561072424
samtebbs
mikdusan1: Thanks!

1561072453
samtebbs
mikdusan1: That works too

