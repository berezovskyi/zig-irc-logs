1576022934
frmdstryr
Can @setCold be made to work on if / switch branches?

1576022954
pixelherodev
I don't think so

1576022973
pixelherodev
I could be wrong, but I think @setCold(true) changes the used calling convention to coldcc

1576022986
pixelherodev
Which isn't something that can be done to branches without adding in a function call

1576022996
pixelherodev
Which has a greater cost than any gains would likely be anyways

1576023019
daurnimator
Does that mean we need a 'likely' builtin?

1576023042
mq32
daurnimator: i remember this topic i think

1576023072
pixelherodev
I don't think there's any practical way to do this anyways

1576023074
mq32
andrewrk said something about the "positive" branch is always preferred or something, i can't remember fully anymore, but there was something like that

1576023082
pixelherodev
There's no real optimization you can do as the compiler / assembler

1576023093
pixelherodev
That's why branch prediction exists

1576023107
daurnimator
pixelherodev: sure there is.

1576023126
pixelherodev
... oh right yeah

1576023139
pixelherodev
It's been a long time since I've done any hand-written asm :P

1576023146
frmdstryr


1576023183
pixelherodev
Yeah, that seems to use a GNU extension

1576023209
Snektron
is likely/unlikely in assembly just swapping the branch cases?

1576023228
daurnimator
Snektron: its also a hint to the optimiser

1576023237
Snektron
yes, but i mean on an assembly level

1576023240
pixelherodev
That's the only thing I remember doing, but I never claimed to be a good asm optimizer :)

1576023281
daurnimator
Snektron: it may e.g. refactor the code so that the "likely" branch is assumed, and the "unlikely" branch is only branched on later and the work that the "likely" branch did is undone

1576023331
daurnimator
I recall there was lots of discussions around choices of instructions. particularly around when to prefer cmov

1576023552
mq32
pixelherodev: random thought on optimization

1576023587
mq32
but it's better to put the likely branch in the "jump not taken" part, so caches will not be violated as you continue with linear execution

1576023623
mq32
if you jump, you may instantly trigger a cache invalidation which should not happen with cache preheating from linear execution

1576023642
daurnimator
classic torvalds post:

1576023802
fengb
LLVM also aggressively removes cmovs:

1576024028
Cadey
how do i stringify an error?

1576024098
pixelherodev
`std.fmt.formatAlloc("{}", err)` I think?

1576024102
pixelherodev
Well

1576024114
pixelherodev
`std.fmt.formatAlloc(allocator, "{}", err)`?

1576024157
daurnimator
pixelherodev: no more varargs

1576024160
Cadey
i'll try that :+1:

1576024166
daurnimator
.{ err }

1576024166
Cadey
daurnimator: i'm using zig 0.5.0 atm

1576024186
daurnimator
In any case, are you looking for @errorName

1576024194
pixelherodev
daurnimator, ah right :P

1576024207
pixelherodev
Of course there's a built in for it :P

1576024442
Cadey
is there such a thing as an assert that works in release mode?

1576024456
daurnimator
Cadey: if (!x) @panic(...)

1576024459
Cadey
fair neough

1576024461
Cadey
enough*

1576025222
Cadey
how do you use a fixed length array as a slice?

1576025243
Cadey
ah @bytesToSlice

1576025284
Cadey
nope

1576025304
pixelherodev
Cadey, have you tried `array[0..]`/

1576025305
pixelherodev
?

1576025320
pixelherodev
You can take a slice of an array

1576025348
daurnimator
Cadey: &

1576025372
daurnimator
IIRC taking the address of an array returns a slice.

1576025384
daurnimator
otherwise yeah, [0..]

1576025412
Cadey
yep that works too

1576025421
Cadey
thanks for the help, kinda rusty on zig lol

1576025459
daurnimator
<insert joke about Rust (the language)>

1576025891
Cadey
i love how small the compiler output is though

1576025916
Cadey
i just got a case where a binary was smaller than its source code

1576025920
Cadey
(webassembly)

1576029495
stratact
<daurnimator> <insert joke about Rust (the language)>, "Rust programmer: Hey I thought a made a copy, where is the original? Compiler: Original? What are you talking about? :P"

1576029720
daurnimator
stratact: the pun should be related to Cadey's "rusty on zig""

1576029744
Cadey
but seriously

1576029760
Cadey
holy crap zig uses almost no memory in webassembly

1576029776
Cadey
my cat clone uses 2 pages (128k), but that seems to be the minimum amount

1576029788
daurnimator
Cadey: time to figure out why its not smaller

1576029803
Cadey
ikr

1576029809
Cadey
i'm gonna go ramdiving

1576029816
Cadey
i may be able to cut it down to 1 page

1576029868
daurnimator
Cadey: try bloaty?

1576029870
daurnimator


1576029886
daurnimator
WebAssembly is marked experimental. I have no idea if it works...

1576029903
andrewrk
Cadey, 0.5.0 has a really primitive allocator for wasm. It does not have the ability to free pages. fengb recently improved it, and it adds about 1K to the binary size

1576029904
Cadey
daurnimator: i'm not talking binary bloat

1576029907
Cadey
i'm talking runtime bloat

1576029921
andrewrk
a "cat" program shouldn't need to use heap allocation though, so you shouldn't have to pay that cost

1576029933
Cadey
right now it uses 2 pages of webassembly ram, however it seems to only do stuff in the first page of ram

1576029934
daurnimator
Cadey: oh. you shouldn't have any runtime allocations at all for a program like yours

1576029938
Cadey
yeah

1576029939
daurnimator
andrewrk: you beat me to it >.<

1576029948
Cadey
that's why it's like 652 bytes of wasm binary lol

1576030025
Cadey
it looks like if i had a buffer of exactly 928 bytes, i could fit it all within one page of ram

1576030028
Cadey
let's do some science

1576030054
Cadey
here's my source code fwiw:

1576030129
fengb
For some reason, LLVM doesn't strip out runtime buffers from the binary

1576030141
fengb
Running wasm-opt will fix that

1576030168
daurnimator
Cadey: that's not unreachable (short writes are possible)

1576030183
daurnimator
Cadey: also consider `fifo` instead; its essentially

1576030224
Cadey
awww, it looks like `(global (;0;) (mut i32) (i32.const 66656))` is preventing it from working in one page

1576030224
daurnimator
Cadey: but there's no allocations at all in your program.... are there some at startup for bss or something?

1576030244
fengb
That's the stack size

1576030254
Cadey
i think

1576030263
Cadey
let me go do some more looking in the wasm

1576030292
fengb
How do I get a length of a sentinel string?

1576030300
daurnimator
fengb: ah right. is that a constant size or derived from the entry point?

1576030307
daurnimator
fengb: std.mem.len?

1576030319
daurnimator
fengb: see also std.mem.toSlice (and toSliceConst)

1576030326
fengb
Ah thanks

1576030352
Cadey
daurnimator: nah i'm just yeeting a buffer from the stack:

1576030367
fengb
LLVM pegs the wasm stack size at around 66K. I'm not sure why. It's not from any sane heuristic as far as I can tell:

1576030400
daurnimator
Cadey: yes I know. use `std.fifo.LinearFifo(u8, .{ .Static = 2048 });` instead.

1576030424
andrewrk
daurnimator, why?

1576030462
daurnimator
andrewrk: it allows you to easily do a partial read after a partial write.

1576030478
andrewrk
ah

1576030490
andrewrk
we still have an issue with std.os.write not exposing partial writes

1576030611
andrewrk
Cadey, you might consider making a zig olin package:

1576030640
andrewrk
this makes it so that the zig std lib can work, and application writes just have to put `pub const os = @import("cadey's olin package");` in their root source file

1576030649
Cadey
oh sweet

1576030652
andrewrk
then a cross platform cat app will work in olin, with that one line

1576030661
andrewrk
*application writers

1576030671
pixelherodev
olin?

1576030684
andrewrk


1576030697
Cadey
pixelherodev: it's a part of my crazy webassembly functions as a service pipedream

1576030700
andrewrk
yeah Cadey you can look at pixelherodev's project for an example

1576030715
Cadey
for a live demo with that cat program: curl -X POST

1576030796
fengb
Should we standardize an OS abstraction layer?

1576030829
fengb
A lot of these custom wasi functions are vaguely posix but not quite, and it feels bad that I'm sprinkling them all over os.zig

1576030831
Cadey
fengb: AFAIK that's what

1576030859
fengb
Yes but I mean better documented and possibly split out. Right now I'm basically playing whackamole with compile errors

1576030860
Cadey
i'm also gonna be bringing wasi to olin at some point, i'm just unhappy with how limited wasi is

1576030929
Cadey
andrewrk: i might need to override the `_start` logic in the olin stuff, is it possible to do that from a bring-your-own-os context?

1576030998
andrewrk
fengb, I think the phase we're at now is exploration, and when we want to stabilize the std lib then it'll be time to standardize

1576031026
andrewrk
not sure what you mean about sprinkling wasi fns in os.zig, that file is pretty well matched to POSIX

1576031047
andrewrk
I'm guessing you have an upcoming PR?

1576031051
fengb
I mean every file now has a wasi special thing that looks almost posix like but not quite

1576031056
fengb
function*

1576031077
andrewrk
that makes sense- that's the job of os.zig is to make something that is almost posix, actually fit the posix abstraction layer

1576031105
daurnimator
Cadey: `n < buflen` -> partial reads don't mean EOF.

1576031118
fengb
Yeah, I've ended up copying over the error code mapping because I can't really reuse the existing stuff

1576031132
Cadey
daurnimator: they do in my unfortunate architectural mistakes :(

1576031135
daurnimator
andrewrk: then shouldn't we call it std.posix?

1576031136
fengb
It just looks gross and crosscuts a bunch of things >_>

1576031156
andrewrk
daurnimator, possibly

1576031177
daurnimator
or posixy? :P

1576031203
fengb
Didn't someone suggest pozig?

1576031219
daurnimator
yeah I recall something like that

1576031229
mikdusan
pozix works :)

1576031270
andrewrk
Cadey, re: entry point - that's not hooked up currently, but would be happy to add logic to

1576031328
Cadey
interesting

1576031341
Cadey
i'm gonna go update my zig compiler to git head and play around with stuff

1576031355
Cadey
will need to update for the varargs -> tuples change

1576031368
Cadey
kinda wish there was `zig fix`, but that's a pipedream atm lol

1576031384
andrewrk
there have been a lot of breaking changes lately, happy to help if you run into something

1576031384
daurnimator
Cadey: zig fmt does that... but we haven't hooked it up for all changes

1576031391
Cadey
:+1:

1576031397
Cadey
i'll poke in here if i run into anything

1576031492
andrewrk
also I'm guessing you will probably be pleased with the new anonymous list and anonymous struct syntax

1576031767
Cadey
it looks like the `len` member of http.Headers is gone

1576031775
Cadey
i think i can hack around it though

1576031887
daurnimator
hmm?

1576031926
andrewrk
you mean count() ?   `toSlice().len`

1576031938
daurnimator
There never was one. but we should add a headers.count()

1576032002
daurnimator
speaking of, I have a few commits pending for http.headers:

1576032017
Cadey
oh wait

1576032020
Cadey
never mind

1576032028
Cadey
i misread a compiler error

1576032034
Cadey
it was a varargs -> tuple change

1576032067
Cadey
[master 4675670] zig: update to git master

1576032069
Cadey
7 files changed, 14 insertions(+), 14 deletions(-)

1576032074
Cadey
only 14 changes needed

1576032091
Cadey


1576032123
daurnimator
andrewrk: to save me from doing a PR, could you cherry pick

1576032165
daurnimator
`git remote add daurnimator

1576032174
Cadey
or

1576032185
Cadey
`curl

1576032386
pixelherodev
Is valgrind supposed to work?

1576032433
daurnimator
yes

1576032463
Cadey
andrewrk: is it normal for the zig low level warn support to assume that stdout is the same file descriptor?

1576032476
pixelherodev
So, hypothetically, if it shows heap allocated: 0, that's a mistake?

1576032480
pixelherodev
Out of date valgrind or something?

1576032481
daurnimator
Cadey: no

1576032489
adamkowalski
Can somebody help me figure out why my test is failing? I am trying to wrap an allocator with an arena inside of a struct rather then in the test block and this leads to the failure. Here is the code befire:

1576032499
daurnimator
pixelherodev: are you sure you allocated on the heap? :)

1576032503
adamkowalski
The test is on line 46

1576032505
Cadey
ah i see

1576032513
adamkowalski
and 55 respectively

1576032515
pixelherodev
daurnimator,  I tried with both std.heap.page_allocator and std.heap.c_allocator

1576032543
daurnimator
pixelherodev: got a runnable snippet ?

1576032554
adamkowalski
andrewrk: I tried following the pattern I saw in the standard lib, where the struct stores the arena, and then every other field that needs to allocate starts as undefined. Is there a way to avoid that?

1576032558
pixelherodev
... well... no?

1576032567
pixelherodev
daurnimator, I was trying to measure RAM usage of my LLVM parser

1576032638
daurnimator
adamkowalski: fails with what?

1576032679
adamkowalski
Test [1/2] test "constant"...

1576032679
adamkowalski
Tests failed. Use the following command to reproduce the failure:

1576032679
adamkowalski
/Users/adamkowalski/dev/compute_graph/zig-cache/o/Uq6Y9u9qiGiWmQpuKQs_i4S59Pnb0heE9yT-jS1Uo24oAInUwGAQ7odlrulmRgP-/test

1576032703
adamkowalski
I ran the command it shows and I get

1576032703
adamkowalski
Test [1/2] test "constant"...fish: '/Users/adamkowalski/dev/compute…' terminated by signal SIGSEGV (Address boundary error)

1576032724
daurnimator
adamkowalski: run under gdb and get a backtrace?

1576032783
adamkowalski
Alright i'll try that. I just think it's strange because the only change I made was where I wrap the allocator with the arena.

1576032853
daurnimator
adamkowalski: I'm just telling you what I'd do to debug the issue

1576032877
adamkowalski
thanks i'll do that!

1576033098
Cadey
how do i convert a null terminated array to a slice?

1576033139
Cadey
oh

1576033144
Cadey
they still have a .len member

1576033154
daurnimator
Cadey: mem.toSlice ?

1576033476
adamkowalski
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT) * frame #0: 0x000000010001f497 test`std.heap.ArenaAllocator.alloc(allocator=0x00007ffeefbfeeb0, n=64, alignment=8) at heap.zig:490:42

1576033495
adamkowalski
daurnimator: I get a bad access when allocating, which doens't make senes

1576033522
adamkowalski
If I just pass the allocator directly to ArrayList rather then wrapping in an arena then doing &arena.allocator I can make it compile and run

1576033558
daurnimator
adamkowalski: `graph.constants = std.ArrayList(Constant(T)).init(&graph.arena.allocator);` that might be pointing to the arena on the stack

1576033563
mikdusan
yup

1576033599
adamkowalski
Ah, I thought it would be named return value optimization

1576033607
adamkowalski
Wouldn't it allocate at the callers memory

1576033670
adamkowalski
daurnimator: so I have to allocate on the heap?

1576033698
adamkowalski
or pass in a pointer to the graph which the caller allocated on the stack and then set that?

1576033712
daurnimator
adamkowalski: sounds like you have a great example of why we need @resultLocation

1576033720
daurnimator
I recall there was an open proposal but I can't find it

1576033769
adamkowalski
What would you recommend for now?

1576033790
mikdusan
adamkowalski: you could change `pub fn init()` to require `init(self: @This(), ...)` and at callsite and at caller, do `var graph: Graph(f64) = undefined; graph.init(allocator);`

1576033805
adamkowalski
Is the way I had things originaly idiomatic?

1576033813
daurnimator
adamkowalski:

1576033835
adamkowalski
The only issue I had with how I did things in the first version is that it assumed the allocator passed in was an arena because I want the entire graph to have the same lifetime

1576033868
adamkowalski
mikdusan: yeah I might do that, thanks! I prefer to avoid undefined if possible, but I supposed it's the most reasonable option here

1576033869
daurnimator
adamkowalski: yes you had idiomatic code and it should work (maybe with a @resultLocation() added) or error (which would be the `fixed`/`nocopy` proposal).

1576033890
mikdusan
adamkowalski: i've used that pattern to allow for both stack/heap choice for caller

1576033902
daurnimator
adamkowalski: mikdusan has give you a good workaround there: you should make a note in #2765 about your type of usecase

1576033971
adamkowalski
thanks! I'll use mikdusan's solution for now. daurnimator result location should give us the same benefit of being agnostic about stack/heap right. Since it's "return by value" so the caller decides where it is stored

1576034081
daurnimator
adamkowalski: it would let you do: `graph.constants = std.ArrayList(Constant(T)).init(&@resultLocation().arena.allocator);`

1576034239
Cadey
what is the stdlib zig way to grab data from stdin?

1576034283
daurnimator
what sort of data?

1576034291
Cadey
yes

1576034298
Cadey
bytes

1576034314
daurnimator
`const stream = &io.getStdin().inStream().stream; n = try stream.read(....)`

1576034324
adamkowalski
daurnimator: I think named return value optimization would be even cleaner. Since we already have a pattern wher init usually returns the struct

1576034352
adamkowalski
why is that different then saying if I have a variable which I later return, just store that at the callers memory instead

1576034389
adamkowalski
mikdusan: I tried your solution and it now compiles and runs just fine! Thanks. I guess my C++ background is failing me and I need to be more C like haha

1576034478
Cadey
andrewrk: i think the varargs patch broke the sample app :D

1576034488
Cadey
std.debug.warn("All your base are belong to us.\n"); no longer compiles

1576034504
pixelherodev
Almost got the test program emitting valid assembly for my LLVM backend! :D

1576034533
pixelherodev
Register allocation is good, basically just need to implement function calls (and register push / pops for them)

1576034836
Cadey
huh

1576034860
Cadey
it does look like the std.debug.warn code relies on a known file descriptor for stderr

1576034873
Cadey
unless i am doing this very wrong

1576034875
Cadey
which i might be

1576034888
Cadey
i am trying to do this:

1576034890
Cadey
pub var STDERR_FILENO: fd_t = resource.io_get_stderr();

1576034899
Cadey
(in the os definition)

1576034913
pixelherodev
It does require a FD, but you have to return it from os.open IIRC

1576034933
Cadey
/home/cadey/prefix/zig/lib/zig/std/io.zig:48:30: note: referenced here

1576034935
Cadey
return File.openHandle(os.STDERR_FILENO);

1576034966
Cadey
the compile error for that is "unable to evaluate constant expression"

1576034980
Cadey
is there a way to defer that expression evaluation to runtime?

1576034986
pixelherodev
What did you define fd_t as?

1576034992
Cadey
i32

1576035004
Cadey
which is also the return type of resource.io_get_stderr()

1576035014
pixelherodev
Right

1576035055
Cadey
its actual definition is `pub extern fn io_get_stderr() i32;` (because it's imported from the webassembly environment)

1576035081
Cadey
or is the fd_t distinct from i32?

1576035082
daurnimator
Cadey: have a look at the windows path

1576035096
daurnimator
it grabs it from the PEB

1576035191
Cadey
yeah, i think we might need to add a openHandle patch from the root module

1576035411
daurnimator
Cadey: huh? the `io.getStderr()` is what would call `io_get_stderr`

1576035434
Cadey
er yes sorry

1576035438
Cadey
i'm getting tired

1576035724
Cadey
either way

1576035737
Cadey
i'm not seeing how to make io.getStderr call io_get_stderr

1576036312
Cadey
daurnimator: what am i missing?

1576036424
daurnimator
Cadey:

1576036561
Cadey
Ah

1576036564
Cadey
okay

1576036572
Cadey
ill do that in the morning

1576036807
Cadey
thanks again daurnimator, andrewrk

1576036941
pixelherodev
Got a simple infinite loop generating :D

1576037125
adamkowalski
Is this a reasonable way to approach having polymorphic nodes inside of a compute graph?

1576039179
stratact
Hey folks, I have a philosophical question, why are allocated slices in the std library API hinted as Owned Slices?

1576039351
daurnimator
'hinted'?

1576039385
daurnimator
stratact: guessing at your question here: but the idea is that you

1576039935
stratact
daurnimator: so just to understandd this correctly, in Zig you can't pass multiple copies of the allocated slice pointer around to other variables from the original pointer?

1576039969
pixelherodev
That's more of a standard library thing than a Zig thing

1576039999
pixelherodev
The values returned by some zag functions are

1576040011
pixelherodev
You can pass the pointer around as much as you want

1576040016
pixelherodev
But you're responsible to deallocate it

1576040022
pixelherodev
And once you do, every pointer to it is invalid

1576040608
stratact
I see, so the Zig ownership model is programmer driven from the mind. Rust ownership model is driven by the compiler. That's the difference.

1576040716
stratact
I had a misconception, I thought ownership meant compiler driven only

1576040827
pixelherodev
It actually works! :D

1576040832
pixelherodev
Not just for an infinite loop

1576040856
pixelherodev
Wrote a simple entry point that utilizes inline asm to extract bootloader-provided pointers from registers

1576040875
pixelherodev
Added in a touch of optimization, and the generated code is now 100% identical to the handwritten version :D

1576040907
pixelherodev
(or at least it would be if I didn't deliberately change it to make it fit Zig more readily)

1576044618
fengb
#define O_CREAT (__WASI_OFLAGS_CREAT << 12)

1576044705
fengb
There's some weird bitshifting going on between the public definition and the mangled version

1576044895
fengb
The existing wasi defines O_CREATE = 1 which is __WASI_OFLAGS_CREAT

1576045351
bgiannan
stratact, there's a proposal for a notion of owned pointers in zig

1576046840
vegai
any thoughts on this worry on generics without RAII?

1576046871
vegai
I kinda feel that it's not a significantly worse problem than resource controlling usually is

1576047301
shakesoda
put a defer call for anything you need to clean up as per usual, and i'm not sure what generics have to do with it?

1576047329
shakesoda
certainly nothing you wouldn't usually expect and need to do for managing resources

1576047359
fengb
gingerBill (?) talks about how unknown lifetimes are a super rare problem

1576047395
fengb


1576047432
fengb
So the easiest fix is: give the arraylist an arena

1576047444
fengb
It doesn't solve everything, but it simplifies a lot

1576047487
fengb
s/arraylist/container

1576047499
shakesoda
heh, latest nightly zig seems broken

1576047726
shakesoda
looks like an api changed and fmt wasn't updated too

1576047751
Snektron
yeah i've noticed it too

1576047767
Snektron
it segfaults in probe_stack.zig

1576047785
shakesoda
i'm getting build errors outright

1576047827
Snektron
oh, that not

1576047829
shakesoda
e.g. fmt.zig:97:13: error: type 'u8' does not support field access

1576047840
shakesoda
dunno what changed so i'm not sure what to change it to yet

1576047847
Snektron
are you on master?

1576047864
shakesoda
yeah, just grabbed the build a few minutes ago

1576047882
shakesoda
worst case i can use the one from the other day

1576047957
Snektron
i don't get it

1576047965
Snektron
how come i only get this now

1576047992
Snektron
oh, its an issue with my code

1576048036
Snektron
i probably allocated too much stack memory

1576048076
Snektron
yes

1576048462
shakesoda
oh, zig isn't broken - the error message just sucked

1576048483
shakesoda
need to update anything that formats with .{args}

1576048509
shakesoda
this was just very much unclear

1576056945
mq32
hey

1576056964
mq32
is peer type resolution for anonymous struct fixed for optionals on current master?

1576056980
mq32
i have a fn(val: ?Struct) and want to call that with

1576056985
mq32
fn(.{ … })

1576060834
Snektron
No

1576060860
mq32
okay :)

1576067254
daurnimator
andrewrk:

1576067263
daurnimator
I've already mentioned it to steph

1576072338
lupine
I was pointed at

1576074164
bgiannan
is .? equivalent to an unreachable?

1576074381
daurnimator
bgiannan: hmm? `x.?` is the same as: `if (x) |tmp| tmp else unreachable`

1576074412
bgiannan
rightm that's what i meant

1576075285
Cadey
andrewrk: daurnimator: i got it working!

1576075287
Cadey
$ cwa -main-func _start cat2.wasm

1576075289
Cadey
All your base are belong to us.

1576075357
mq32
cwa is a webassembly runner for the terminal?

1576075442
Cadey
for my olin environment, yes

1576075465
Cadey
but either way, it's more proof that the bring-your-own OS concept works

1576075489
mq32
olin?

1576075521
Cadey


1576075662
mq32
hmm

1576075679
mq32
is there a library with C api out there to use web assembly in custom projects?

1576075687
mq32
would like to play around some day with that

1576075742
Cadey
it's kinda awkward to use, but

1576075820
mq32
have to take a look :)

1576075837
mq32
because i'd like to experiment using Wasm in a Zig based game project as a scripting API

1576075898
fengb
We’ve been talking about building a wasm interpreter in std

1576075937
mq32
:O

1576075957
mq32
so we can host wasm in wasm? :D

1576076024
Cadey
...can we go deeper

1576076199
fengb
Existing WASI VMs aren’t very robust and Zig already has better cross platform support

1576076591
mq32
what is the difference between WASI and Wasm?

1576076615
Cadey
mq32: the difference between the linux syscall ABI and an amd64 CPU

1576076800
Cadey
how do i pass an arbitrary linker argument?

1576076815
bgiannan
What signature should have a custome `panic` function.

1576076911
daurnimator
`pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {`

1576076938
Cadey
bgiannan: example:

1576076949
mq32
Cadey: ah, so WASI is an interface to the outer world designed for wasm

1576076954
Cadey
mq32: yeah

1576076960
Cadey
it's an IO monad basically

1576077071
bgiannan
daurnimator, Cadey, thx

1576077142
mq32
Cadey: i've never understood the term "monad", it's explanations were always waay too theoretically for me

1576077197
Cadey
mq32: monads basically just order compuations so that things happen in a predictable order, this makes a lot more sense in the context of unordered environments like haskell

1576077211
daurnimator
mq32: imagine a functional language where everything is a pure function. input => output

1576077216
Cadey
without an IO monad the haskell compiler might do something odd like make a file write happen before its open

1576077244
daurnimator
mq32: now imagine how useless a language like that would be. how could you ever make a syscall when function input lead to function output and no side effects

1576077308
daurnimator
mq32: so you introduce the monad as an extra input and output. `NEWWORLDSTATE, y = foo(OLDWORLDSTATE, x)`

1576077356
fengb
Eh wasm has imports/exports defined in the spec. WASI just standardizes a bunch

1576077366
Cadey
^

1576077374
Cadey
my stuff would use wasi but my stuff predates wasi lol

1576077431
fengb
It’s vaguely posix so it’s somewhat familiar

1576077448
Cadey
i don't like how wasi programs can't open network sockets personally

1576077452
fengb
But it’s also not very stable and nobody supports it very well

1576077460
Cadey
it's probably great for supporting the past though

1576077471
Cadey
my stuff uses URIs as file paths

1576077485
Cadey
this lets you do crazy things like HTTP with "filesystem" calls

1576077525
fengb
That sounds pretty cool. I’ve wondered how far “everything is a file” could be taken

1576077541
Cadey
that's one of the core parts of my experiments :D

1576077551
mq32
fengb: Look at Plan-9 to see that answer

1576077551
Cadey
making it as easy to access remote files as if they were local

1576077559
Cadey
er s/files/resources

1576077562
mq32
IRC? Files

1576077577
Cadey


1576077579
mq32
Mouse? File. Keyboard? File. Screen? File.

1576077579
mq32
:D

1576077592
mq32
also, Plan-9 is network-transparent. Screen? Remote File.

1576077625
fengb
Yeah I've wanted to tinker with Plan 9 but never had a chance to

1576077636
Cadey
my ultimate goal is to make an OS where the only way to run programs is via webassembly

1576077651
fengb
o_O

1576077659
companion_cube
micro kernel, but to the max

1576077662
Cadey
the OS would seamlessly translate the webassembly modules to native code kinda like IBM i

1576077669
Cadey
and run it all in ring 0 like TempleOS

1576077670
fengb
The other day I was talking about having wasm as the only userland executable

1576077697
Cadey
i actually have it somewhat working already with a kinda terrible wasm interpreter:

1576077712
Cadey
(though this is in rust because the phil opperman tutorials are nice)

1576077719
mq32
Cadey: yeah that's a quite appealing idea

1576077727
mq32
also you never need a cross-compiler for that OS anymore

1576077733
mq32
everything is binary compatible

1576077734
Cadey
now you get it

1576077742
Cadey
it makes the underlying metal

1576077766
Cadey
(to a point lol)

1576077780
Cadey
i've done some testing with my prototype as it is

1576077801
Cadey
and since i wrote the environment in pure go, it cross compiles to things like big-endian PPC64 and runs programs just fine

1576077809
Cadey
mind you webassembly is little-endian

1576077810
fengb
I'm also curious how hard it'd be to make a wasm processor

1576077813
mq32
so: zig/std.wasm

1576077814
mq32
:D

1576077821
Cadey
oh

1576077825
Cadey
if i had my way

1576077830
Cadey
it'd be `zig.wasm`

1576077865
Cadey
i'm working on a crazy idea a friend had to "bake" a filesystem into a webassembly module

1576077867
fengb
Once stage 2 is ready, it'll be zig.wasm :P

1576077871
daurnimator
wasm.zig

1576077894
mq32
@import("std").wasm was my intention

1576077910
Cadey
so you could distribute zig.wasm as a static webassembly binary and then instantly have a full compiler on any other machine

1576077916
Cadey
but that's a hell of a pipedream lol

1576077929
fengb
Cadey: that's on the pipeline for stage 2

1576077947
fengb
Self-hosting in the browser

1576077952
fengb
Fully cross-compiled self-hosting

1576077955
Cadey
also:

1576078112
mq32
fengb: you are experienced with web, is it possible to generate a file with JS and push/download that to the user?

1576078121
Cadey
yes

1576078148
Cadey
<a href="data:application/octet-stream;charset=utf-16le;base64,//5mAG8AbwAgAGIAYQByAAoA">text file</a>

1576078163
mq32
ah okay

1576078172
Cadey
you might wanna set the download=foo.txt attribute too

1576078176
mq32
Cadey: if that pull request is your code:  if (bits.STDIN_FILENO == undefined) <= this has no semantics

1576078184
Cadey
mq32: yeah i fixed it locally

1576078209
Cadey
updated the comment

1576078319
Cadey
i really do like how zig structs don't have private members

1576079082
fengb
`char sa_data[0];` is this a 0 dimension C array?

1576079212
mq32
fengb: It's a weird thing in C :D

1576079236
mq32
it is a common use of reading out-of-bounds

1576079267
daurnimator
its invalid C :)

1576079272
fengb
Oh yeah I do that in Zig too

1576079274
daurnimator
has to be at least [1] to be valid

1576080942
msiism
What, in rather general terms, is the development status of Zig? Is it good to go for a random “hobbyist” who'd like to go with a “better C”? Are there bindings for any GUI libraries yet?

1576081185
mq32
> What, in rather general terms, is the development status of Zig?

1576081204
mq32
it's quite usable. i've run into some problems with my projects, but i'm doing "special" stuff (embedded or low level)

1576081214
mq32
> Is it good to go for a random “hobbyist” who'd like to go with a “better C”?

1576081236
mq32
it's definitly worth a look, i really enjoy programming with zig and haven't started a hobby project that is not zig since i made my first project with it :D

1576081245
mq32
> Are there bindings for any GUI libraries yet?

1576081266
mq32
i'm not aware of that, but you can always use C headers that aren't macro-heavy directly from the langauge

1576081349
msiism
Thanks. That sounds quite good. I don't depend on GUI bindings at the moment and I guess they will pop up eventually.

1576081389
mq32
if you want to do game stuff, there's a pretty unfinished SDL2 binding to a more zig-style API by me :D

1576081398
mq32
</advertising>

1576081477
msiism
:) I'm not into gaming, sorry. The project I want to start next is creating a browser-independent bookmark manager.

1576081532
pixelherodev
Huh - that's an interesting idea

1576081581
msiism
For that purpose, it would be interesting to know if Zig has any libraries for processing structured data, like, e.g., JSON or TOML. But I'm not even sure that's really needed.

1576081599
mq32
there's a json parser in the stdlib

1576081606
msiism
Nice.

1576081625
companion_cube
next stop: CBOR

1576081637
companion_cube
the json for system programming :p

1576081707
gonz_
Is ityonemo/dnautics on IRC with another name? He wrote this neat layer for creating BEAM NIFs in zig.

1576081761
msiism
companion_cube: I see. Well, I think I like TOML more than JSON because it's more like INI on steroids. And I certainly like INI.

1576081848
companion_cube
I came to dislike TOML, I find it very unintuitive. Best human readable format, imho, is S-expressions

1576081905
msiism
Hm... interesting. I'll have a look at that.

1576081933
belgin
((((((s))))e))))x))))p)))s))))))

1576081942
companion_cube
belgin: same goes for json

1576081949
msiism
By the way, the webdesign of ziglang.org is really neat.

1576081949
companion_cube
{{[{'{]]}}}}

1576081974
mq32
companion_cube: i think you confused "human" and "computer" :D

1576081988
gonz_
S-expressions are much more readable than JSON

1576081995
gonz_
(or really any alternative)

1576082001
gonz_
Also trivially parsable

1576082001
companion_cube
mq32: I'm serious, it's simply more readable and editable than json

1576082012
companion_cube
you can have comments, you don't need quotes in random places

1576082109
mq32
i don't know. i hate pretty much dislike everything where i have to keep track of counters to know where i am located

1576082125
msiism
Well, in the end, a bookmark is basically just a URL with a human-readable name attached to it (and 2 or 3 other things). So, you could also just simply throw them all in a single text file with a blank line delimiting each bookmark block. Presenting them in a tree strcuture, for example, is an entirely different thing, so that file wouldn't need to refelct any of that.

1576082145
mq32
both json and sexprs have this counting thing

1576082172
mq32
xml isn't that bad because you can visually scan for end-tags

1576082280
companion_cube
indentation is enough

1576082295
companion_cube
but then, doesn't Zig also have tons of counting?

1576082297
scientes
you can just have a reader that properly formats it

1576082313
scientes
companion_cube, yes it does, that is why you use indentation

1576082323
companion_cube
same goes for S-exprs, really

1576082332
companion_cube
and it's easy since the format is so easy to parse

1576082382
belgin
if you need something more complicated than key/value pairs in a text file, you should probably go with s-exps

1576082399
scientes
or JSON

1576082403
scientes
JSON isn't that bad

1576082412
mq32
companion_cube: that's why i try to reduce my scope depth, but i fail more often to do so in zig

1576082417
scientes
well, are numbers in JSON limited to 64-bit floats?

1576082434
gonz_
I think you'd have to come up with a better qualification than "has read Lisp" for your non-argument to make sense.

1576082452
scientes
if you look at real lisp code it is pretty nutsy

1576082457
scientes
gonz_, hell, whatever works

1576082458
companion_cube
json is full of quotes and doesn't have comments

1576082462
companion_cube
that's terrible for config

1576082472
scientes
most parsers allow comments

1576082479
companion_cube
but then it's not json ;)

1576082499
companion_cube
(the parsers I know don't allow comments; or for what it's worth, having several objects in one file)

1576082513
gonz_
I've written real Lisp code for years in several Lisps, saying it is "pretty nutsy" holds zero weight.

1576082514
companion_cube
S-expressions for config doesn't mean it's going to be as deep and complex as lisp

1576082535
scientes
why not just write a DSL

1576082537
scientes
they are not hard

1576082538
companion_cube
it's like comparing a bit of json to a big js codebase

1576082551
scientes
the problem is that languages are not very good at writing parsers

1576082576
mq32
why not just plain, simple key-value pairs with "key: value"? ^^

1576082587
mq32
it's even possible to sed such files

1576082599
scientes
mq32, that goes a long ways

1576082651
companion_cube
mq32: what if you need more?

1576082654
tgschultz
If you need something mroe complicated than k/v pairs in a text file you may be suffering from second-system effect.

1576082663
belgin
yeah, that too

1576082683
tgschultz
In a few python things I've written, I've just gone ahead and used python as the config file too.

1576082691
companion_cube
that sounds much worse

1576082703
mq32
Lua is also a quite nice config file language :D

1576082710
mq32
<companion_cube> mq32: what if you need more?

1576082713
mq32
use more files!

1576082723
companion_cube
so parsing sexprs is overkill, but using lua/python is not? wow :D

1576082749
belgin
you can even have tree structure in a list of k/v pairs

1576082760
mq32
companion_cube: lua has actually started as a config file language

1576082761
belgin
root/node1/node2: value

1576082768
belgin
you'd have to type a lot, but whatever

1576082769
mq32
belgin: yep

1576082785
belgin
get a better keyboard :D

1576082805
belgin
(if you don't like typing)

1576082853
companion_cube
belgin: that's what toml does, and I hate it

1576082870
companion_cube
anyway, I'll keep my tiny S-expr parser, thank you very much :p

1576082887
mq32
btw, i'm writign a config file and i now have the best config entry ever:

1576082889
mq32
hide-hidden: true

1576082890
belgin
does andrew want to make an alternative to llvm for zig?

1576082901
belgin
and by alternative i mean, no intermediate language?

1576082909
mq32
belgin: the long term plan is to remove llvm as a dependency

1576082913
belgin
cool

1576082930
pixelherodev
There's already a Zig IR, correct?

1576082945
pixelherodev
How hard would it be to add a `-emit zig-ir` option to the compiler?

1576082962
belgin
there is?

1576082971
companion_cube
(so in OCaml, we've gone from a ton of build systems using ocaml itself as a config language, to one build system with well restricted S-exprs for describing tasks, and it's amazing)

1576082973
belgin
an intermediate-intermediate language?

1576083008
pixelherodev
Well, there's `  --verbose-ir                 enable compiler debug output for Zig IR` so probably

1576083024
belgin
companion_cube, cool

1576083049
belgin
it's always nice to configure your build instructions in the same language as the rest of your program

1576083053
companion_cube
(it allows the build system to be portable, instead of people using shell all the time, and to have better parallelism \o/)

1576083061
companion_cube
nah it's the opposite there

1576083067
companion_cube
and tbh I like it

1576083070
pixelherodev
Shell is portable!

1576083073
belgin
ocaml isn't a lisp?

1576083077
pixelherodev
Most people are just bad at writing portable shell code

1576083078
companion_cube
no, it's a ML

1576083085
belgin
oh right

1576083087
companion_cube
pixelherodev: how does shell work on a normal windows?

1576083101
tgschultz
If the program is already in python, and the configuration is complicated enough to need program-like capabilities, then I may as well also do the config in python.

1576083108
tgschultz
That's my reasoning.

1576083116
pixelherodev
Back in the dreadful age in which I ran Windows, usually from C:\bin\sh

1576083119
companion_cube
sure, but then your config becomes a mess

1576083135
companion_cube
last thing I used that did that was, I think, pelican

1576083137
tgschultz
Only if you insist on writing messy code

1576083145
companion_cube
some day my blog broke

1576083203
companion_cube
(the thing is, then your whole API can be part of the config, not a big fan of that)

1576083224
tgschultz
Eh. It's better than second system effect in my opinion.

1576083277
companion_cube
having a well delineated config language that is easy to write or read isn't "second system effect" imho

1576083291
fengb
pixelherodev: Zig IR is meant to be internal details and not relied upon

1576083303
tgschultz
well, my opinion differs.

1576083338
companion_cube
🤷

1576083408
pixelherodev
fengb, ah

1576083412
pixelherodev
Yeah, that figures

1576083459
fengb
I'd guess this wouldn't be stable until after stage 2

1576083479
gonz_
Ah, config/build systems. The tabs/spaces of tools.

1576083523
mq32
let's just enforce indentation in the json config file by "\t \t"

1576083582
companion_cube
if the first entry is `"strict": true` then it's "\t \r\t" instead

1576083589
andrewrk
pixelherodev, there's --emit llvm-ir

1576083636
mq32
companion_cube: the key must be separated from the value with a vertical tab

1576083676
fengb
The only white space allowed should be zero width spaces

1576083679
mq32
(obviously)

1576083852
mq32
Boolean("false")

1576083856
mq32
i love js :D

1576083857
companion_cube
the separator is \0

1576083861
companion_cube
key\0value

1576083879
mq32
and value is delimited by another \0?

1576083891
SyrupThinker
A leading comma is allowed, but not a trailing one

1576083926
companion_cube
mq32: no, by \n\r

1576083929
fengb
“\t\r\n” == false

1576083947
mq32
are we going to create malboge.cfg?

1576083967
mq32
companion_cube: sounds reasonable, that sequence is unlikely

1576083978
companion_cube
✔

1576084163
andrewrk
IMO the most important requirement of a build system is that it works on everybody's system

1576084194
companion_cube
(yeah, that was the point there: avoid invoking unix commands as much as possible)

1576086560
SyrupThinker
I'm currently doing #3864, "does invalid float literal. Add a `0` before the decimal point" sound good, or should I just use the invalid char error?

1576088011
adamkowalski
I prefer the first, if we can make the errors more explicit it might be more helpful

1576088199
adamkowalski
Is there any way to have a tool which acts as a file watcher. Then whenever a file is changed, you figure out what tests would be impacted by those changes, and auto run them?

1576088389
Cadey
andrewrk: i tried making a patch for the "bring your own OS package" feature to customize the entrypoint, it seems that lld

1576088391
Cadey
entrypoint constant i exported in my OS module (cwa_main) is being completely ignored by lld

1576089593
andrewrk
Cadey, do you need to change the entry point from _start? I thought the point was just to run code before main() ?

1576089670
Cadey
andrewrk: i guess i can adapt my other code to compensate for the entrypoint being _start

1576089698
Cadey
i think i may have had a very fundamental misinterpretation of how processes work in C space

1576090061
Cadey
andrewrk: in C space, _start doesn't have a return value, does it?

1576090133
andrewrk
correct, it makes a syscall to exit

1576090143
Cadey
well

1576090154
Cadey
i need to add an exit syscall then lol

1576090158
andrewrk
otherwise the CPU will continue executing instructions after _start, which is probably going to trigger SIGILL

1576090175
Cadey
thanks again andrewrk

1576090189
andrewrk
"here, CPU try executing this random memory, you're gonna have a great time!"

1576090196
andrewrk
:)

1576090687
Cadey
andrewrk: where is getStdInHandle defined? I can't find it with grepping

1576090893
andrewrk
Cadey, Vexu is suggesting to add that function

1576090896
Cadey
ah okay

1576090900
Cadey
:+1:

1576090913
Cadey
oh i see now

1576090918
Cadey
will do

1576091247
andrewrk
hmm this might be the key to getting

1576091279
andrewrk
as an alternative to emscripten, we could make the freestanding libc support os overrides as well. so you could provide e.g. printf as console.log

1576091394
Cadey
andrewrk:

1576091484
Cadey
oh i typoed, crap

1576091514
Cadey
fixed

1576091916
fengb
I saw something about a WASI polyfill for browsers

1576092041
fengb


1576092143
fengb
andrewrk: WASI has a separate public definition O_CREAT --

1576092166
fengb
Should I just override the existing value?

1576093275
andrewrk
fengb, I don't understand, is our O_CREAT value incorrect for wasi?

1576093351
fengb
They define 2 of them, O_CREAT is the publicly exported one and __WASI_OFLAGS_CREAT, which matches the value that's currently in O_CREAT

1576093483
fengb
I don't know why there's a private version since its only usage is setting O_CREAT and a few redundant asserts

1576093523
fengb
Oh that's the value that gets sent to the syscall

1576093633
fengb
So maybe I should rename the existing ones to OFLAGS_CREAT and redefine O_CREAT to match these headers? `OFLAGS_CREAT = 1; O_CREAT = OFLAGS_CREAT << 12;`

1576094068
andrewrk
I think __WASI_OFLAGS_CREAT should go into os/wasi.zig and O_CREAT in os/bits/wasi.zig should change to be the libc value

1576094099
andrewrk
os/bits/* tries to match the libc/posix layer

1576094117
fengb
Ah okay

1576094134
andrewrk
os/wasi.zig is wasi-specific stuff

1576094136
fengb
That works, thanks

1576094164
fengb
Sure, there aren't any constants in there currently so I wasn't sure

1576094190
andrewrk
what are you working on? sounds like you're doing something exciting

1576094202
fengb
Getting all the tests to compile in wasi

1576094207
fengb
So we can enable them in CI

1576094209
andrewrk
cool

1576094273
andrewrk
if you want to try to make incremental progress, feel free to disable a bunch of the tests for wasi (ideally with links to github issues), and that way we can have some coverage, and then work toward enabling more tests incrementally

1576094330
fengb
It's surprisingly not too bad. Although I might have spin out the last 10%

1576094393
fengb
Mostly using this as an excuse to learn more about wasi and syscalls :P

1576094404
andrewrk
out of curiosity, do you have a way to use a debugger when running wasi programs?

1576094417
andrewrk
with the ability to step, and inspect values and stuff

1576094433
andrewrk
I bet there's a way to do it with the browser's tools

1576094439
fengb
I've been using good old print debugging :P

1576094442
Cadey
AFAIK there's not really a good debugger for webassembly at all

1576094455
Cadey
i've been using printf debugging and ramdiving with xxd personally

1576094461
andrewrk
I bet it will happen soon though. which actually could be a pretty amazing way to debug logic

1576094479
andrewrk
even if your target isn't wasi, you could cross compile a unit test and use the browser's GUI for debugging

1576094483
andrewrk
that's gonna be a thing soon, I predict

1576094500
fengb
Browser debug isn't that great for wasm

1576094507
Cadey
a friend of mine in the go slack was working on some absolute insanity that involved writing every wasm instruction and its side effects to a postgres database

1576094518
fengb
I suppose it works with poking at raw memory, but it's really low level

1576094523
andrewrk
if people start using wasm more, browser debugging for wasm is going to be top tier

1576094532
andrewrk
it's inevitable

1576094539
fengb
I don't think there's real sourcemaps yet

1576094547
Cadey
yes mister kelly

1576094555
Cadey
that worked better in my head

1576094558
andrewrk
lol

1576094592
andrewrk
but we need the ability to run wasm with file:/// !! I can't believe the people in charge fucked that up so hard

1576094607
fengb
Stacktraces aren't working for wasi yet so hunting down errors isn't really fun

1576094614
fengb
I should actually figure that piece out

1576094631
andrewrk
idk how debug info for wasm/wasi works

1576094638
Cadey
so a big part of the problem there fengb is that there's not a good story in wasm for getting the debuginfo from the binary

1576094654
Cadey
the webassembly environment i play with

1576094658
Cadey
which can drive you a bit mad

1576094696
Cadey
i should really add wasi support to olin >.>

1576094705
Snektron
I realized a while ago that theres a 32-bit version of web assembly

1576094713
Cadey
Snektron: that's the default one atm

1576094722
Cadey
however, it does have native 64 bit pointers

1576094731
andrewrk
wasi barely has enough syscalls to do anything useful

1576094732
Cadey
er

1576094739
Cadey
64 bit integers/floats

1576094744
Cadey
andrewrk: lol ikr

1576094746
Snektron
What is the point of having a language intended for sandboxing have a 32 and 64 bit version?

1576094756
andrewrk
Snektron, there's no 64 bit wasm yet

1576094765
Snektron
Oh

1576094784
Snektron
inb4 webapps larger than 4 GB

1576094786
Cadey
Snektron: i don't think that it's going to be a practical issue for a while

1576094787
fengb
We don't want to address 4 GB in the browser yet

1576094805
Snektron
Cadey, thats what they said about memory in the 90s

1576094810
andrewrk
it is kinda dumb that we need a compiler_rt function for 64 bit multiplication in wasm though

1576094813
Cadey
Snektron: yes, i'm aware of the irony

1576094817
Snektron
640 kb is enough for everyone

1576094823
Cadey
actually

1576094829
Cadey
with zig and webassembly

1576094841
Cadey
640k of ram (~10 pages) is probably enough for a lot of significant uses

1576094842
Snektron
andrewrk, can

1576094853
Snektron
can't a multiplication be emitted as a series of instructions instead of a call?

1576094857
andrewrk
shipping an extra ~50K of wasm just to implement 64 bit int multiplication, when the host CPU supports it natively

1576094877
Snektron
how is 64 bit multiply 50K

1576094878
andrewrk
Snektron, it can, but the compiler chooses to make some things calls, to avoid bloat

1576094886
andrewrk
idk I was just making that number up. I can measure it

1576094914
Snektron
i would expect such a multiply function to only be like 2 or 3 instructions at best

1576094943
Cadey
webassembly can be a cruel mistress

1576094957
fengb
Isn't it just applying FOIL?

1576094962
fengb
Remembering my long lost algebra 2

1576095002
andrewrk
what's the binary called to get wasm text from wasm binary?

1576095016
andrewrk
wasm equivalent of objdump -d

1576095017
Cadey
wasm2wat

1576095019
andrewrk
thx

1576095022
Cadey
np

1576095060
fengb
Squint a bit and pretend you're working in Lisp :P

1576095084
andrewrk
oh, wasm32 supports 64 bit multiplication

1576095088
andrewrk
OK

1576095093
Cadey
i64.mul i think

1576095094
andrewrk
I guess the only difference is the pointer size

1576095104
andrewrk
Snektron, ^

1576095116
companion_cube
so it's x32, really

1576095128
andrewrk
ah yeah nice analogy

1576095138
shakesoda
"webapps larger than 4gb" is a horrifying thing to read as soon as i get to the computer

1576095151
Snektron
ah yes, i just read it in the isa spec

1576095153
Cadey
lol i just realized

1576095176
andrewrk
ok but let's see how big 128 bit mul is then

1576095177
Cadey
the go limitation of array sizes being `int` is going to bite me if i try to use more than 2 GB of ram in my stuff

1576095179
Cadey
crap

1576095183
companion_cube
makes sense if all your apps are in the browser

1576095188
companion_cube
photoshop as a service, woo

1576095208
shakesoda
do not want

1576095211
Snektron
Cadey, i have an assignment on distributed sorting where i'm supposed to use MPI

1576095216
fengb
I think it'll have to exist if we want to compile LLVM in the browser

1576095225
Cadey
Snektron: MPI?

1576095236
Snektron
MPI can be used to send buffers between compute nodes

1576095247
andrewrk
not bad:

1576095248
Snektron
except the size is an int of course

1576095270
Cadey
lol

1576095299
Snektron
A real pain

1576095375
andrewrk
a browser is just another OS layer, that evolved instead of being designed. one could imagine the future of browsers being a more intentionally designed second OS layer

1576095384
Cadey
actually, i don't think i will run into that issue

1576095388
andrewrk
better permission model that is more secure for users while allowing applications to do more powerful things

1576095391
Cadey
int is machine word in go

1576095416
Snektron
oh

1576095430
Snektron
I forgot how datatypes worked in go, its been a while

1576095435
Cadey
andrewrk: so basically we need the capability to guide the market to capabilities?

1576095443
andrewrk
IMO today's web should be a

1576095444
companion_cube
one could argue Windows also evolved, under the pressures of retrocompat

1576095503
Snektron
how come wasi i128 mul is so much code while x86 is

1576095525
Cadey
Snektron: RISC

1576095530
fengb
i128 doesn't exist natively in wasm

1576095531
andrewrk
Snektron, I think because wasi doesn't have 128 bit ints

1576095545
andrewrk
s/wasi/wasm/

1576095546
fengb
So it pretends to create one as 2x 64bits

1576095559
Snektron
i128 also doesn't exist on x86, yet it can be implemented using 64 bit ints as in the example i sent

1576095593
Cadey
huh

1576095595
Cadey


1576095608
Cadey
apparently C++'s wasm32 i28 multiplication is a bit more compact

1576095617
bgiannan


1576095653
Snektron
Maybe it's the stack model that adds more bloat?

1576095659
Cadey
oh, i see

1576095662
Snektron
since a lot of the code is just swapping values around

1576095664
Cadey
it's the same output

1576095679
Cadey
the godbolt one just omits __multi3

1576095706
fengb
How does that x86 assembly work? I see nothing about 128 bits

1576095740
fengb
Oh wait that's just foil

1576095776
Cadey
i wonder how effective it would be to hand-translate the amd64 assembly to webassembly

1576095782
andrewrk
256 bit multiplication:

1576095807
andrewrk
forgot to put --release-fast on there

1576095821
andrewrk
that actuall doesn't look too bad

1576095911
andrewrk
sorry bgiannan. for (list.toSlice()) |item| {}

1576096304
shakesoda
Snektron: i'm slightly surprised to see that i128 output is shorter on arm64 than x86_64

1576096776
fengb
In theory, we could add manual memory paging to wasm32 to break the 4GB barrier! 🙃

1576096826
Cadey
fengb: hopefully we won't need to

1576096902
Cadey
interesting

1576096913
Cadey
it doesn't look like webassembly has unsigned integer support

1576096921
Cadey
i wonder if you can allocate past 2 GB of ram

1576096945
fengb
"Integers are not inherently signed or unsigned, their interpretation is determined by individual operations."

1576096951
Cadey
ah okay

1576097966
Snektron
shakesoda, arm has a special instruction for stuff like this

1576097991
Snektron
also, the destination of mul can be any register instead of just rax which also cleans up some things

1576098135
FireFox317
andrewrk: I see you are working on the self-hosted-compiler again. Are you trying to get it to compile stuff again?

1576098829
andrewrk
FireFox317, soon. I think I need to invest a little bit in std async io first

1576098837
andrewrk
I have an interesting change coming up soon

1576098959
bgiannan
andrewrk, right, but i won't be able to search/replace since i use hashmaps iterators as well, so might take a while :)

1576103148
frmdstryr
Does defer'ed code run when main is interrupted (SIGINT)?

1576103179
frmdstryr
I don't get why the streamserver seems to randomly error with address in use

1576103277
andrewrk
frmdstryr, no

1576103286
mq32
frmdstryr: no ,SIGINT is executed "out of band"

1576103307
andrewrk
address in use is a linux thing. it hangs on to addresses for something like 60 seconds by default

1576103332
andrewrk
I think if you clean up properly you can avoid this timeout being required

1576103349
andrewrk
there is also SOREUSEADDR which has its own problems

1576103374
frmdstryr
Can i set up a signal handler to call server.deinit() there?

1576103391
andrewrk
I mean, you *can*. I don't think that's how I would recommend solving it

1576103401
andrewrk
you'll also have this problem if your software crashes

1576103411
frmdstryr
well that i understand :)

1576103421
andrewrk
I think SO_REUSEADDR is probably appropriate while developing

1576103431
frmdstryr
but i'd like to be able to shutdown with sigint

1576103486
andrewrk
if you do this, probably the best way would be to have the sig int handler do something very minimal, such as set an atomic flag that your application will later check

1576103565
mq32
yeah, the atomic flag is probably the cleanest way

1576103758
Cadey
andrewrk: which sha is the shasum in

1576103816
mq32
Cadey: it's probably sha1

1576103819
mq32
as shasum (the command) does it by default

1576104127
andrewrk
sha256

1576104271
andrewrk


1576104380
Cadey
ah, cool

1576104640
frmdstryr
What happens if I attempt to read past a slice's bounds?

1576104654
Snektron
depends on the compilation mode

1576104665
Snektron
debug/release-safe: panic, releas-fast: ub

1576104848
Cadey
frmdstryr: in all likelyhood, assume your program will crash

1576105001
fengb
Or worse, the slow drip of memory corruption

1576105038
Snektron
maybe it will just rm -rf --no-preserve-root /

1576105061
Snektron
while my friend was working with clang for his bachelors thesis, he made an "evil ub" mode

1576105070
Snektron
it would do stuff like that

1576105220
fengb
In my OS class, I'm pretty sure we had OOB access. It slowly corrupted the FAT12 system we worked on

1576105253
fengb
We convinced the TA to let us refresh the fs after every test case since we passed all the checks from a fresh start :P

1576105843
Cadey
is there a "noreturn" flag for zig functions?

1576105893
Cadey
ah, return type noreturn

1576107414
msiism
I'm reading Zig's docs and there's something I really can't wrap my head around (which happens quite often, actually): How can/Why do instructions like `break`, `continue`, `return` have a type?

1576107481
andrewrk
Cadey, thanks for the patch, merged :)

1576107550
Cadey
andrewrk: no problem, working on another one for overriding the exit() behavior

1576107839
andrewrk
Cadey, you can't provide os.exit?

1576107970
Cadey
andrewrk: you can with

1576107995
andrewrk
Cadey, that one is already handled at the bottom with system.exit

1576108027
andrewrk


1576108045
Cadey
ah

1576108051
andrewrk
this should work for nearly every function in that file

1576108142
Cadey
you can in fact do that

1576108144
Cadey
i'll close my PR

1576108177
andrewrk
yeah no worries, it's not super straightforward

1576108254
andrewrk
we don't have the package manager yet but once we do it'll be nice because you can provide an official olin package

1576108319
Cadey
yeah :D

1576108344
Cadey
oh, how should i handle the _start logic?

1576108371
Cadey
so that it calls root.os.system.exit() with the main() return val

1576108396
Cadey
kinda like wasi

1576108485
Cadey
actually, are functions data in zig?

1576108494
andrewrk
not sure what you mean

1576108516
andrewrk
msiism, they have the "noreturn" type

1576108533
andrewrk
which means that the value will never be accessed

1576108598
Cadey
andrewrk: i'd expect doing something like `return error.Unknown;` in fn main() in a zig program to return a nonzero exit code

1576108685
andrewrk
Cadey, it does; are you observing something else?

1576108690
Cadey
yes

1576108719
Cadey
i'm observing it not calling my custom exit function with the return code

