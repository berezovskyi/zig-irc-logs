1571364546
andrewrk
I just pushed a nice quality of life improvement in e42d86b657c

1571364607
andrewrk
it's evident when you link against a cross compiled libc that is not cached

1571387089
ceymard
is there such a thing as comptime [_]var { } arrays ?

1571387125
ceymard
like, if I want to @noInlineCall(somefunc, ...) with values I computed at comptime ?

1571387141
ceymard
although I want the call to happen at runtime

1571387382
ceymard
I just read upward ^ that there was no meta-programming

1571387392
ceymard
isn't the whole comptime thing meta-programming in itself ?

1571387474
mq32
hey ceymard

1571388388
ceymard
yo

1571390899
nrdmn
ceymard: you can make a [_]type{} that contains structs with a const attribute. alternatively you can define a struct and access its attributes by index

1571391056
ceymard
nrdmn: what about arbitrary values ?

1571391084
ceymard
I don't want to just play with types, but to construct a set of arguments to a function I will call

1571391103
ceymard
the thing is that the functions I want to call can be pretty different

1571391112
ceymard
and I'll build its arguments by introspecting it

1571391350
nrdmn
hmm, you can get the types of a function's parameters, I think

1571391366
nrdmn
and there are functions like bufPrint that take any number of arguments

1571392329
ceymard
exactly

1571392342
ceymard
but these take a ... parameter

1571392345
ceymard
which is cool

1571392354
ceymard
so does @noInlineCall or @inlineCall

1571392372
ceymard
the thing is I'd like to call those using a `[_]var`

1571392381
ceymard
to generate a function call

1571392398
ceymard
and I would like to build such a [_]var array at comptime

1571392420
ceymard
because I want to work with functions that could vary a lot in a generic way

1571392431
ceymard
hmm. maybe I should be more precise.

1571392445
ceymard
I'm trying to build a parser generator of sorts

1571392458
ceymard
the goal is for me to express rules as functions

1571392482
ceymard
in the end, I want to take the root function, the one that defines my toplevel, and have it analyzed entirely at run time

1571392506
ceymard
this would trigger recursion into all the other rules I call

1571392525
ceymard
the rules do not all have the same number of arguments

1571392542
ceymard
okay I have a feeling this is still vague

1571392546
ceymard
I'll do a gist later

1571392599
ceymard
but the short version is that I'd like to write a parser generator that does its magic at comptime to generate an array of states that will be used at run time

1571392626
ceymard
rules are functions that expect parse results as arguments and that themselves will return their own parse result

1571392658
ceymard
the comptime will ensure everyone is called with the right results, and that rules are being called as they should

1571393001
ceymard
okay, another question : can a fn return var instead of type or a defined type ?

1571393235
nrdmn
in a function declaration, you can use an expression that computes the return type

1571393271
nrdmn
fn f() b: { break b: u32;} { return 5; } or something like that

1571393359
ceymard
okay, the answer is about as on point as is my question precise :)

1571393370
ceymard
sorry I'm not being more clear

1571393376
ceymard
I'll fiddle some more

1571393896
Snektron
<mq32> also if thing() may not be always true?

1571393920
Snektron
Im pretty sure yes, unless thing() may have side effects

1571393931
Snektron
In which case it will just remove the unreachable

1571393962
Snektron
Which is ignores in release fast and safe i think

1571393972
Snektron
s/safe/small/

1571394025
Snektron
Does zig even have a notion of pure functions?

1571394141
Snektron
ceymard: im not sure you can really do what you want to

1571394173
ceymard
Snektron: this is the feeling I had

1571394234
Snektron
Maybe with some hacks but then it becomes nasty to program in as well

1571394246
Snektron
But

1571394255
ceymard
I don't mind hacks as long as they're constrained in the library itself

1571394263
Snektron
You could make a parser using comptime strings?

1571394267
ceymard
as long as the final result is nice to use, I feel like I won

1571394277
ceymard
Snektron: what do you mean ?

1571394327
Snektron
Comptime string with the grammar, call a function with it to turn it into a parser

1571394353
ceymard
that's not what I had in mind

1571394357
ceymard


1571394370
ceymard
I want to write production rules in zig

1571394379
ceymard
and be able to interact with their result easily

1571394396
ceymard
the gist is

1571394402
ceymard
it's just a brainstorm at this point

1571394416
ceymard
see the rules at the end of the gist

1571394423
ceymard
I want to express stuff more or less like that

1571394474
ceymard
what I wanted to do was to take for instance `TopLevel` and turn that into a parser with states (because speed)

1571394483
ceymard
but I'm in even if can just do combinators.

1571394526
ceymard
can a comptime function create a ad-hoc union ?

1571394540
ceymard
somehow I doubt it :)

1571394573
ceymard
it would be magical if we could just do @addUnionMember(union, "Name", typ)

1571394644
Snektron
I know its not what you had in mind, but it might be a compromise

1571394665
Snektron
Btw, i did make something like your idea at some point in Go

1571394741
Snektron


1571394874
Snektron
I think you can make an `apply` function though, you just gotta express []var as something else

1571394975
Snektron
You gotta think more c++ with this

1571395054
Snektron
[]var can only exists in function parameters, so you simply perform all your computations in ridiculous recursive functiojs

1571395108
ceymard
ok

1571396590
Snektron
Oh, i just thought of why that doesnt work

1571396610
Snektron
What does maybe is expressing  your rule as a type

1571396745
Snektron
So your actions would look like fn thing(a: Rule(Char('('), expr, Char(')')) i32 {

1571396746
Snektron
return a.rule(1).value;

1571396747
Snektron
}

1571397053
tgschultz
ceymard, I have done some wacky comptime stuff that might be like what you want. It allows you to construct a type at comptime, so you could build a tupple of whatever type->value combinations you want and pass it to a function that takes a `var` parameter.

1571397080
tgschultz
implementation:

1571397241
ceymard
thanks I'll take a look at it

1571407281
kenaryn
Hello, please what does the '_' token identifier? Here is a example of the official documentation: `_ = try map.put(1, {});`

1571407305
kenaryn
what does it mean*

1571407308
mikdusan
it "ignores" the result of map.put()

1571407316
kenaryn
Thank you sir.

1571407351
kenaryn
So this is just for academic purpose?

1571407406
mikdusan
compiler would issue an error similar to `error: expression value is ignored` without it

1571407481
mikdusan
the reason why it

1571407502
mikdusan
`map.put() --> Returns the kv pair that was already there.`

1571407534
kenaryn
I think I understand, thanks for your explanation.

1571407590
mikdusan
as an opposite, one would never want to ignore the result of a memory allocation

1571410232
fengb
The pattern exists to self document where values are returned. Without it, users start assuming functions like 'put()' don't return a value, but it actually does

1571411874
bgiannan


1571412008
companion_cube


1571412100
bgiannan
musl has a lot of green

1571412167
companion_cube
it's written by the author of musl ^^

1571412171
fengb
Iconv character conversions: the kitchen sink

1571412180
companion_cube
but well, there might be a reason why musl is popular-ish

1571415369
ntgg
I can't seem to use a format string with more than 320 characters

1571415381
mq32
ntgg, do you hit "comptime eval limit"?

1571415389
mq32
you can increase that with some builtin-function

1571415459
mikdusan


1571415519
ntgg
thanks! that fixed it

1571416228
muffindrake
Is there some way to set that limit globally when running a build?

1571416258
mq32
i don't think it's necessary as reducing that limit may uncover bugs

1571416283
muffindrake
???

1571416436
mq32
increasing the limit isn't needed in most of the cases (only when you do

1571416473
mq32
so if you run into some exponential growth at comptime, it's good to specify the limit in code  as you can write a comment with "why is this needed anyways" to the quota message

1571416484
mq32
instead of just "increase it to u64.maxValue"

1571416639
muffindrake
I have the mental capacity to kill a task if it appears to be stuck in an infinite loop

1571416701
mikdusan
muffindrake:

1571416703
mq32
yes, but do you also have the mental capacity to determine which exact piece of code caused this?

1571416771
muffindrake
Ah, that's a good point. That may not be so easy with functions strewn across modules, especially not with comptime

1571416782
mikdusan
and imagine bumping a global limit for this comptime branch quota, only because you included a new library

1571416877
mq32
someone™ should write more doc comments for std.fmt :D

1571416912
mq32
mikdusan, is it "sane" to clone/fork the zig repo, only change doc comments and make pull requests without doing

1571416935
mikdusan
i'd like to overhaul all of std.fmt but those are just words... action is needed :)

1571416946
mq32
that's why i'm asking

1571417072
mq32
the doc system doesn't parse markdown right now, but is supposed to at some point, right?

1571417104
mikdusan
mq32: i could see that doc comments

1571417151
mq32
yeah but my laptop is ... slow

1571417165
mq32
so building zig will probably take some hours with LLVM and all the stuff

1571417172
mikdusan
linux?

1571417175
mq32
yeah

1571417227
mikdusan
i apologize if stating things you are already well aware of,

1571417277
mikdusan
the key prep for any build is llvm prerequisite but it's generally a just-do-it-once and you are done. only needs to be updated when llvm version or (gcc in your case) is significantly bumped,

1571417334
mikdusan
then zig builds these days

1571417334
mq32
hm

1571417341
mq32
can i tell cmake to use clang instead of gcc?

1571417364
mikdusan
yes. and clang has significantly less heap requirements than gcc

1571417374
mikdusan
what linux distro?

1571417387
mq32
arch

1571417481
mikdusan
you're in luck. i have arch, and have built llvm-9 binaries from llvm-project already. i can upload tarball and my zig build script somewhere if you're interested.

1571417506
mq32
i'll try to build it with system libraries

1571417522
mq32
but i heard that arch doesn't have static libs, right?

1571417554
companion_cube
sadly, it doesn't

1571417557
mikdusan
that would be the complicating factor. static vs. dylib vs monolithic dylib . the first one is, i believe, the only one supported currently by zig's cmake

1571417587
mikdusan
it's not that terrible to build llvm from git for arch. one sec.

1571417685
mikdusan
here's my last script used to build llvm9 on arch.

1571417724
mikdusan
llvm-project takes a while to clone, and checkout. this is normal.

1571417730
mq32
[felix@denkplatte tmp]$ /home/felix/projects/zig/build/zig run src/main.zig

1571417730
mq32
All your base are belong to us.

1571417743
mq32
seems to work by just using the installed llvm stuff

1571417972
mikdusan
if that works, then all you need is a command to build std docs.

1571418051
mq32
isn't that done by passing -fgenerate-docs to zig test $somethingInStd?

1571418088
mikdusan
option name changed

1571418097
mikdusan
something like this `zig -femit-docs --output-dir zig-cache test lib/std/std.zig`

1571418164
mikdusan
where the tests of std.zig provide code coverage. i suppose it's possible to build a sub of std too and the resulting docs would be reduced

1571418266
mq32
okay, code is running, but i can't type well anymore :D

1571418293
mikdusan
heh

1571418308
mikdusan
which std module are you adding docs for

1571418328
mq32
i'm going for format right now as i'm needing it :D

1571418335
mq32
want to document the format string grammar

1571418414
mikdusan
this might reduce laptop load a bit: zig -femit-docs --output-dir zig-cache test lib/std/fmt.zig

1571418427
mq32
yeah, will do that :)

1571418446
mikdusan
but it's a little quirky. i find on my system when opening zig-cache/docs/index.html that clicking on left-sidebar "std" first helps

1571418471
mq32
maybe someone™ should also start writing a markdown renderer for zig :D

1571418695
mikdusan
on thing i'm not a fan of in python-style string formatting is the positional: `{2}` meaning 2nd arg but the problem lies in if you do

1571418762
mikdusan
`{:5s}` . i'd rather see the inverse. `{5s}` is the spec. and if you want positional,

1571418779
mikdusan
s/extra delimiter/delimiter/

1571418787
mq32
it's actually just {s:5}

1571418798
mq32
{[position][specifier]:[fill][<|^|>][width].[precision]}

1571418803
mq32
this is the grammar for format specifiers

1571418864
mikdusan
in zig or python?

1571418867
mq32
zig

1571418888
mq32
just added it to the doc comment for std.fmt.format

1571418982
mikdusan
oh that must be the last change. coincidentally my tabled overhaul of fmt was done before that

1571419025
mikdusan
i came up with `replacement := '{' [arg_index '/'] [spec] ['!' coercion] '}'`

1571419248
mikdusan
i was optimizing for what looked like (vastly) the most common usage (using all .zig files in zig's source) of not using positionals

1571419383
mikdusan
`{5s}` is shorter than `{s:5}`. and `{3/5s}` is equal-length as `{3s:5}` with imo having width before "type" having a higher familiarity factor

1571419395
tgschultz
Walter Bright gave a presentation about Hits and Misses with D at 20. Could be useful to glean for people working on zig:

1571419443
mikdusan
+1 for first page: `No Preprocessor`

1571419474
Snektron
Whats the best way of bitflags in Zig?

1571419474
tgschultz
I haven't finished, but it does look like zig agrees so far

1571419486
Snektron
I suppose a packed struct could work, but eh

1571419541
mikdusan
i am not a D user so my opinions are novice, but it seems to me that D has a lot of of backwards compatibility baggage. i'd love to see what W. Bright would do if starting over knowing what he knows now

1571419542
tgschultz
I just use ints for bitflags and constants.

1571419545
tgschultz
C style

1571419574
tgschultz
you can't use | or & with packed structs

1571419580
mikdusan
i suppose that's partly answered with this pdf

1571419624
tgschultz
oh nevermind, I see now you meant the other kind of bitfield

1571419637
tgschultz
yeah, packed structs

1571419676
Snektron
nah yeah i meant bit fields

1571419700
Snektron
flags

1571419786
Snektron
Sadly you lose type safety with integers and constants

1571419871
mq32
Learned: ● everybody loves colored error messages

1571419871
mq32
:D :D

1571419874
tgschultz
Yes, this is true. I'm hopeful that we get something like the distinct type proposal (#1595) that can make that work

1571420127
mikdusan
does D UFCS permit paraenthesis-less function calls only for `@property` functions, or simply all functions?

1571420741
mikdusan
tgschultz: thanks for the link. that was a good read and yes very much in agreement with zig

1571420757
mq32
what features do we need in the markdown parser?

1571420778
mq32
i'd go for a "minimum viable implementation" right now, so "lists", "emphasis", "link"

1571420794
mq32
and inline code with `code`

1571420918
Snektron
tgschultz: it doesn't really look like thats going anywhere soon though

1571420956
Snektron
I dont think distinct types like that are useful because its just a lesser form of operator overloading

1571420966
Snektron
if you're going to allow that then just add operator overloading

1571420969
emekankurumeh[m]
Snektron: you could put them in an enum and have a manual `or` method that takes a list of enums converts them to ints and `or`s them

1571421051
tgschultz
Andrew is only one guy and there are a lot of things to consider, and anything that requires adding to the language needs careful consideration. Once you add something, it is harder to take it away.

1571421064
Snektron
lame tbh

1571421140
Snektron
You cant really use an enum because that would lead to undefined enum values

1571421167
Snektron
so then youd end up wrapping a type and adding such operators

1571421174
emekankurumeh[m]
i meant casting it to an int when you return it

1571421176
Snektron
but you also cant give them the usual names since those are reserved

1571421228
emekankurumeh[m]
which is pretty gross, but if you switch on them the values you are comparing against are comptime known

1571421319
mq32
btw, on the bitfield topic: you can always create some comptime bitfield wrapper that supports functions like ".set", ".clear", ".testFor", ... with @OpaqueType as a distinction property

1571421413
emekankurumeh[m]
or you could set the bits in a pointer to an @OpaqueType

1571421413
Snektron
then its probably better to define an enum with the flags

1571421414
Snektron
then create a BitFlags.init(.a, .b, .c)

1571421425
Snektron
and define your .set, .clear,. test etc on that

1571421429
Snektron
at least you get the enum literal syntax then

1571421480
emekankurumeh[m]
infix functions would make this a lot nicer

1571421516
mq32
Snektron: enum is a nice idea

1571421535
mq32
if(tcpFlags.testFor(.ACK)) { }

1571421583
Snektron
.ack then but sure

1571421748
mq32
more extensive documentation than single line sure needs a markdown parser:

1571421748
mq32
:D

1571421768
mikdusan
where. is. the. TL;DR :)

1571421808
mq32
hey, it's actually quite readable in code

1571422048
mq32
oh. the markdown parser should be implemented in javascript

1571422655
keithdc
Silly question, but are all function parameters immutable in zig?

1571422688
mq32
yes

1571422699
mikdusan
and that is a

1571422736
keithdc
Thanks, thought I was going crazy there for a sec. I'm just messing around with the language now after following for a while.

1571424129
keithdc
Can you still do pointer arithmetic in Zig? Seems like it won't let me increment a *u32 by an int or another *u32.

1571424147
mq32
keithdc, yes, but only on "pointer-to-many", not on a pointer-to-one

1571424159
keithdc
Ah, ok

1571424167
mq32
so [*]u32

1571424175
mq32
why do you want to do pointer arith?

1571424199
mq32
slices should be sufficient for most of your needs

1571424225
keithdc
I'm trying to implement a function that modifies an array with a "stride". So it's not a contiguous array.

1571424249
keithdc
So the use-case is for Vertex data where you might have position and color packed into an array

1571424259
keithdc
But don't want to pass the whole struct type, to be generic

1571424353
mq32
i'd probably just go with the generic solution

1571424411
mq32
scaleVertices(comptime Vertex : type, vertices: []Vertex, comptime positionFieldName: []const u8, scale: f32) void { for(vertices) |*vtx| { vtx.* = vtx.scale(scale); } }

1571424433
mq32
scaleVertices(MyVertex, vertexBuffer, "pos", 2.0);

1571424447
mq32
ah, damn. i forgot to use @field() :D

1571424455
mq32
i have to get some sleep

1571424725
keithdc
Damn, generics are pretty powerful. That's a much better solution than what I was going for, thanks.

1571427598
dimenus
is the namespace 'builtin' an actual zig file?

1571427602
dimenus
sorry for the dumb question

1571427695
nrdmn
dimenus: I think that's the function codegen_generate_builtin_source in src/codegen.cpp

1571428542
daurnimator
mq32: I'm also working on a messaging library/protocol :)

1571428558
daurnimator
max packet size is 140 bytes (because SMS)

1571428651
marler8997_
Is there a way to cause your build function to fail without printing a stacktrace?

1571428763
mrkishi
Hey, folks. I've been toying with wasm in zig and there's been a lot of templating going on but it's a bit confusing at times. Has there been any discussion on doing comptime argument templating in zig? Would this be something strictly for build.zig? eg. having some form of the second kind of passing arguments:

1571429588
Snektron
thats called string interpollation

1571429626
Snektron
the first version is the best you can do probably

1571429629
Snektron
you can use fmt.bufPrint for that

1571429668
marler8997_
yeah, the problem with string interpolation is that you need access to the caller's scope

1571429723
marler8997_
your first version works because you're explicitly passing all the arguments to the function that performance the string formatting, but the second version wont' have access to the variables/data in the interpolated expression

1571429746
Snektron
that and it hides a lot of functionality

1571429773
marler8997_
I implemented string interpolation in the D language, thought it was never accepted

1571429807
marler8997_
but right now it's a hot topic for D since the new co-leader Atila mentioned it as one of his priorities in a recent article

1571429874
marler8997_
I did a fair amount of work on it. D has "mixins" which enables a library solution by mixing in the interpolation logic into the caller, but Zig doesn't have that and probably shouldn't add support for it.  This means that in order for Zig to support interpolated strings, it would need to add support in the language

1571429950
Snektron
I was thinking about it the other day

1571429962
marler8997_
If I were to implement interpolated strings in Zig, I would treat interpolated strings as anonymous structs, the proposed replacement for varargs

1571429965
Snektron
in a hypothetical language where you can have a "scope" datatype

1571429989
marler8997_
"this is a {a}" would become .{_0 = "this is a", _1 = a}

1571430050
Snektron
violates the one obvious way rule probably

1571430071
mrkishi
Yeah, I'm already doing the first version, it just gets confusing quite fast for more complex templates.

1571430090
Snektron
You could also add a @outerScope function to get to the symbols defined in the calling scope or whatever

1571430094
Snektron
Sounds like a hack still

1571430099
mrkishi
And I just didn't call it string interpolation because I'm actually parsing the string and returning a tree :P

1571430107
fengb
Sounds like the old Python hack

1571430121
marler8997_
@outerScope?

1571430215
Snektron
give a function access to the calling scope in some way, then you could use the same reflection as on structs

1571430220
Snektron
Still doesnt sound ideal

1571430235
Snektron
but thats what you can do in lua

1571430243
marler8997_
How in the sam hell does @outerScope work?

1571430250
marler8997_
Where is that?

1571430269
Snektron
its nowhere

1571430288
Snektron
its a theoretical addition that could allow stuff like interpollating to work, im just making up stuff

1571430300
marler8997_
If you could implement that, then yes, you could create a function that implemented interpolated strings

1571430327
marler8997_
Maybe @callerScope would make more sense though

1571430349
Snektron
Those are just details

1571430363
Snektron
It implies a few problems anyway

1571430367
mrkishi
That'd be terrifying :P

1571430386
marler8997_
Well, @outerScope sounds more like the outer scope, like the surrounding global scope, which you would already have access to

1571430422
Snektron
the biggest problem is that it would turn the function generic without depending on parameters

1571430433
marler8997_
If any function you call could reach into your @callerScope and modify variables, that would make it a nightmare to understand code

1571430435
Snektron
plus it would violate "no hidden control flow"

1571430452
Snektron
since whats to stop you from changeVariable(@outerScope().variables[0]);

1571430470
marler8997_
You could make @callerScope be readonly though

1571430512
Snektron
i think youll have the same problems

1571430524
Snektron
plus you require more hacks for expressions in interpollated strings

1571430544
marler8997_
yeah it can still create confusion

1571430567
marler8997_
interpolated strings are a bit of a special case because you can see all the data you're passing to the function

1571430570
Snektron
i dont think theres really a sane way to do it

1571430578
marler8997_
but, you don't want a function to have access to data that you don't pass to it

1571430587
Snektron
im not sure they fit into a systems language either way

1571430653
Snektron
there was a c++ proposal for them

1571430690
daurnimator
Snektron: you wouldn't be able to e.g. wrap the interpolation function; as it would introduce an extra scope

1571430859
Snektron
yeah thats true

1571430883
Snektron
you could always make it a parameter

1571430930
Snektron
then you'd write `const a = "pythons"; format(@scope(), "i love {a}");`

1571430968
Snektron
@scope() would return a struct with local variables and a pointer to its parent scope

1571431033
daurnimator
Snektron: why just local variables? surely you'd want everything in scope...

1571431060
Snektron
those would be in the parent scope of course

1571431103
Snektron
it would a quite literal translation of how a compiler's scope struct might look like

1571431166
Snektron
advantage of this solution is that it has less hidden control flow

1571431169
Snektron
though it might be hard to optimize well

1571431262
Snektron
actually, should be too bad

1571431282
mrkishi
yeah, and then `format` has access to everything not-`a` and still has to parse zig and execute zig expressions in the interpolations

1571431318
Snektron
yeah good point

1571431347
mrkishi
I'd rather have syntax for comptime interpolation akin to marler's suggestion (and js template literals), but I have the feeling it'd be a tough buy on the community

1571431398
mrkishi
something more along the lines of `t"strings"`/`t\\multiline strings` that get transformed into anonymous structs

1571431416
mrkishi
say `t"int{er + pol}ation"` -> `{ parts: [2][]u8 = ["int", "ation"], values: [1]any = [er + pol] }`

1571433240
marler8997_
I documented my thoughts in string interpolation in Zig here:

1571433262
marler8997_
Feel free to add your comments and discuss

1571434708
pixelherodev
How do builtin functions work? Do they have access to the scope of the caller?

1571436278
Snektron
No

1571436306
Snektron
Well it depends on the function

1571436339
Snektron
Stuff like @This(); needs to have access

1571436663
keithdc
Is there a reason why pointer alignment is built into the type (I.e *align(1) f32) if it differs from the underlying type?

1571437719
marijnfs
why does my c function return a c_int

1571437723
marijnfs
while its a void*

1571437951
marijnfs
how do I cast c_int to ?*c_void

1571439020
nrdmn
did you try @intToPtr?

1571439460
marijnfs
hmm I realised I was expecting the wrong result

1571439472
marijnfs
now I'm at a compiler bug, jej

1571439481
marijnfs
I should probably build zig directly

1571439522
marijnfs
which means I'm building llvm now

1571439538
marijnfs
which means I had to deal with the bug that doesn't build libclang properly

1571440356
marijnfs
Unreachable at ../src/ir.cpp:17571 in ir_analyze_instruction_elem_ptr. This is a bug in the Zig compiler.

1571440361
marijnfs
wonderful

1571442245
marijnfs
// can't be used for comments anymore?

