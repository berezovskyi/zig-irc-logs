1568422296
stratact
dimenus: You can get one here and it will cost you $999 :D

1568429270
mikdusan
stratact: i think those are out of stock for a while now

1568429407
stratact
My point wasn't so much the availability (although they claim they will ship more on Nov 15), as it was the cost of owning one because they are so expensive, unless money wasn't a concern.

1568429654
stratact
If it were me, I would wait for RISC-V boards to become more popular and cheaper over time

1568442511
stratact
Is there a way to generate a range, say 0 up to 10 for for-looping? I understand that for-loops are for iterating elements of an array, but is there a way to generate one that holds elements in an iterative range?

1568442574
stratact
I don't mean slice ranging either

1568442717
stratact
sorry, nevermind about the question

1568472314
Tetralux
stratact: That'd be a use for a generator, if for loops end up supporting them.

1568498391
companion_cube


1568498907
drasko
Hi all, I am new to Zig and I was wondering how you would compare Rust memory security guarantees to Zig ones? I have been trying to find texts that target this question, but I have not found many.

1568498955
drasko
In general - what would be the best advantages of Zig vs Rust - except the faster compilation times?

1568498990
drasko
And also - what are the things that Rust is doing better, and how would Zig address those?

1568499173
companion_cube
rust is doing better at static memory safety, and being >1.0

1568499194
companion_cube
but zig is simpler, more lightweight, and tries to compete with C (rust is more of a C++ contender)

1568499381
drasko
Does it make sense for Zig to tries to address these Rust advantages as well adn then practically eliminate Rust as a competitor, or it is not worh of having this level of static memory safety?

1568499447
companion_cube
take a look at

1568499540
drasko
companion_cube I have read this text already

1568499554
companion_cube
ah well, I'm not the best person to ask beyond that ^^

1568499562
companion_cube
you should stick around a bit

1568499570
drasko
but somehow, for me and argument "simpler (to learn)" is not really an argument, especailly if it produces safer code

1568499615
drasko
So I wanted to understand what are we giving up on in exchange for this simplicity

1568499633
fengb
No borrow checker. No ownership semantics

1568499644
companion_cube
(nor move semantics, right?)

1568499694
fengb
So the compiler won’t help with leaks, use after free, double free, etc

1568499719
fengb
There’s some ongoing stuff to see if we can detect 90% of these in the userland

1568499736
companion_cube
at least there's bound checks on arrays

1568499767
mq32
drasko: i don't think the argument is "simpler to learn"  but "simpler to understand"

1568499788
mq32
i have written some rust programs and i still struggle with everything, if you don't code it everyday

1568499798
mq32
syntax, ownership checkers, ....

1568499831
drasko
This is true to some extent, but I would say with some practice it becomes quite OK

1568499840
mq32
yes, but that's what it's about

1568499847
mq32
so as a foreigner to the language, i cannot understand even small examples

1568499861
mq32
> "why do i have to call .unwrap() on everything?"

1568499871
drasko
Yes, but this is not rally a good argument, I think

1568499884
companion_cube
mq32: you shouldn't! :D

1568499884
mq32
code is meant to be read, otherwise i could write everything in assembly

1568499887
drasko
because we can say then - Go iseven simpler

1568499898
mq32
go has implicit garbage collection

1568499903
mq32
and i have to know how that works

1568499911
mq32
go has goroutines

1568499917
mq32
also not simple

1568499931
mq32
i think the most complex feature in zig is the async/await stuff

1568499948
mq32
everything else is really straightforward to explain

1568499973
mq32
companion_cube, yeah but every example i've seen does it, so i'm doing it too

1568499977
drasko
This is good, and I like that with Zig

1568499992
drasko
so I wanted to discover at which extent we are giving up on security

1568500003
drasko
in the sence of static memory security

1568500007
drasko
to have this simplicity

1568500009
companion_cube
mq32: small snippets typically do, but real could should use `?`, which isn't unlike zig's `try`

1568500011
mq32
take C and add some more

1568500016
drasko
because Rust makes not compromises there

1568500033
fengb
It compromises on other ways

1568500038
mq32
drasko, yeah and that's bugging me a lot and actually prevents me from using rust at all

1568500051
fengb
Like not being able to express things safely, you need to resort to unsafe escapes

1568500064
mq32
i wanted to hack something together early the day and just went to c++ because it's less working friction

1568500081
fengb
Anything with the heap, Zig has compromises

1568500083
drasko
mq32 argument of Rust is that it saves a lot of time (and probably money) later, when you have your code in production

1568500092
mq32
drasko: yes

1568500093
drasko
and I have seen this over the years of my career

1568500109
mq32
but that is only true for software that is

1568500114
fengb
But I'd argue 90% of C memory bugs are silly things like buffer overflow

1568500115
mq32
like browsers and end user software

1568500120
fengb
Which Zig actually detects

1568500150
fengb


1568500163
mq32
drasko: i'm doing the kind of "debug software in-production" style working

1568500174
mq32
because it fits my environment better

1568500193
mq32
so i save time in the end to fix bugs only when they actually happen and cannot be fixed by "restart the program"

1568500209
drasko
You can not debug in production mission critical stuff

1568500247
mq32
i can and i'm doing it. it saves a lot of time actually

1568500272
drasko
Looks like Erlang would be a better fit for you then, mybe

1568500282
drasko
it would restart processes for you if they crash

1568500308
mq32
nah, that's not good either ;)

1568500317
mq32
if i want that, i would do that

1568500353
mq32
also erlang is functional which makes programming sequences incredibly hard :D

1568500354
drasko
How about thread safety?

1568500377
mq32
in zig? you have to ensure you're not doing stupid stuff

1568500426
mq32
so afaik there is none except the usual stuff (mutex, atomics)

1568500463
companion_cube
so far Zig has been focusing more on async, I think

1568500499
companion_cube
(tbh with generics you can already improve on some things, like having a BlockingQueue(T) instead of reimplementing it every time)

1568500507
mq32
companion_cube: async and thread safety are two completly distinct things

1568500514
companion_cube
yes

1568500531
companion_cube
(but rust picked threads first, to get basic concurrency; Zig picked async first)

1568500543
mq32
afaik zig already supports threads

1568500546
companion_cube
rust is only now getting to terms with async

1568500554
drasko
mq32 I find Goroutines rather simple as a concept

1568500559
companion_cube
yeah but even stuff like the package manager is "waiting for async"…

1568500562
drasko
much simpler than async/await

1568500564
fengb
Well Zig picked the wrong async and had to redo it :P

1568500574
mq32
drasko: they imply a lot of stuff to know. like compiler inserting stuff you don't see

1568500581
companion_cube
drasko: there's a non trivial scheduler underneath though

1568500612
mq32
drasko: i think you're messing up simple and easy

1568500626
mq32
easy is "i don't have to type that much"

1568500627
drasko
Yes, I mean easy to use

1568500627
fengb
Go scheduler isn’t too complex. Zig’s event loop would probably just as complex

1568500633
mq32
and simple is "i don't have to know that much"

1568500659
mq32
(at least in my understanding, maybe some native speaker may clarify the correct use *grin*)

1568500689
fengb
People use “simple” to mean a number of different things

1568500715
fengb
The worst part about Hickey’s talk is that “not simple” is the scapegoat of not making things easy

1568500746
mq32
i don't know what talk you're talking about

1568500750
drasko
In any case, I personally gind goroutines and channels easy to understand and work with

1568500773
drasko
also, I personally fing Erlang actors and message passing easy to work with

1568500808
drasko
I have more mental trouble following Node's or Tornado's async loop

1568500831
drasko
I always have to take care of what might block the loop

1568500852
mq32
i'm not a huge fan of pure functional programming (so no haskell or erlang for me)

1568500901
mq32
drasko: same for zig's async/await feature. it's not inherently concurrent

1568500927
drasko
Yes, this is what I understood

1568500933
fengb
Node is semi-easy: nothing blocks

1568500963
drasko
yes, but I find this paradigm hard to follow

1568501026
earnestly
mq32: erlang isn't pure fp

1568501049
fengb
The syntax for node’s async is pretty bad though

1568501072
drasko
In any case - thanks for clarifications. There are a lot of thins that I saw in Zig that I like. I would just ike to understand more about the safety compromises in comparison with Rust - because I think Rust is prectically the main competitor of Zig today.

1568501107
mq32
drasko, i don't think zig and rust target the same group of developers

1568501109
earnestly
("pure" and "functional" is redundant, but that terminology lost its meaning long ago as people forgot what "proceedural" meant)

1568501231
fengb
I don’t see rust as too much of a competitor. For the dev that needs 100% safety, Rust is great. For dumb guys like me, Zig is understandable

1568501270
companion_cube
also watch for the other new LLVM langs, like nim or crystal ;)

1568501277
companion_cube
(less control, but easier to use, I think)

1568501281
fengb
They’re both better embedded languages than C but that’s really where the commonality lies

1568501307
mq32
earnestly, yeah i just looked at some examples of erlang and it looked pretty functional to me :D

1568501323
companion_cube
it's purely functional except that you can send messages ;)

1568501329
companion_cube
(which is quite a side effect)

1568501336
earnestly
mq32: People will understand you I guess, but truthfully, if it's not pure, it's not functional

1568501406
companion_cube
so the only functional language is haskell?

1568501415
earnestly
companion_cube: And joy

1568501446
earnestly
The rest are essentially procedural, although you can implement functions in those languages too

1568501473
companion_cube
that's a bit extreme, but well.

1568501480
earnestly
companion_cube:

1568501493
earnestly
companion_cube: It may seem extreme, but proceedural is lovely too :(

1568501505
mq32
fengb, i don't think Rust is an exceptionally good language for embedded development (although some fanboys tried to convince me otherwise)

1568501534
fengb
I’m trying to be fair :P

1568501537
mq32
:D

1568501540
companion_cube
earnestly: we're off topic, but there's a reason "functional" and "purely functional" are not the same term ;)

1568501543
earnestly
It's okay though, the language as simply changed, it's become vague.  People will know what you mean, so it's not a problem

1568501570
mq32
the argument was like "yeah you have to write a hardware abstraction layer with like 98% unsafe code and then you can optimize that layer away again..."

1568501572
earnestly
companion_cube: In the same way a C function is not a function, it's just age old mislabeling of things

1568501574
companion_cube
(technically haskell has exceptions, also…)

1568501588
companion_cube
yeah but then you only have idris/coq/agda, not haskell

1568501603
mq32
earnestly: BASIC has real functions :D

1568501610
companion_cube
haskell only has partial functions

1568501625
earnestly
companion_cube: It's also not so cut and dry because languages can mix the approaches

1568502431
Aransentin
Porting the netlink.h header to Zig. It as an enum where multiple tags have the same value, but that's not allowed in Zig. :(

1568502626
Aransentin
Guess I have to put some values as an independent const just after to the enum... Still, ugly.

