1577578424
daurnimator
is #3973 ready?

1577578463
daurnimator
tests are failing so I guess not

1577589256
plumm
mikdusan: do you know how to use translate-c with -framework?

1577591188
daurnimator
andrewrk: license question.... should larger contributions to zig come with an addition to the license file?

1577616989
Dominic[m]
I'm trying to use pulseaudio from zig. I'm trying to do something with

1577617026
Dominic[m]
function is literally `return pulse.PA_VOLUME_NORM`

1577618273
daurnimator
Dominic[m]: inspect the cimport.zig that gets generated

1577618371
Dominic[m]
daurnimator: How can I do that?

1577618416
Dominic[m]
There's some in the zig-cache, and I'm certain they'll be identical. But I don't want to assume :)

1577618510
daurnimator
Dominic[m]: the path is in your full log

1577618573
Dominic[m]
daurnimator:

1577618698
daurnimator
Dominic[m]: look at line 2291

1577618725
Dominic[m]
Yep. I don't really know what to make of it really.

1577618744
Dominic[m]
I'm very new to zig. That line was just voodoo to me.

1577618782
daurnimator
Dominic[m]: yeah its pretty ugly to look at... could be cleaned up a lot

1577619003
daurnimator
Dominic[m]: so the branch taken is `@intToPtr(pa_volume_t, @as(c_uint, 65536));`

1577619014
daurnimator
you can see where the error message comes from now :)

1577619075
Dominic[m]
daurnimator:  Why would it convert it to a pointer though? That makes no sense to me!

1577619108
daurnimator
Dominic[m]: great question!

1577619112
daurnimator
I don't know :P

1577619130
Dominic[m]


1577619133
daurnimator
I wonder if they meant to check the type of pa_volume_t instead of the type of c_uint

1577619530
daurnimator
Dominic[m]: reading the code, whenever it hits a left paren it assumes the destination type is a pointer.. I'd file an issue

1577620422
Dominic[m]
daurnimator: Thanks, I appreciate your help. Do you mind if I link you the issue once it's open so you can comment if I've missed anything?

1577620462
daurnimator
Dominic[m]: sure

1577620475
daurnimator
Dominic[m]: I'll see it get created in any case

1577621483
daurnimator
Dominic[m]: I have a provisional fix for you; just waiting for you to file an issue so I can post the patch ;)

1577622108
dch
I don't understand namespaced globals in

1577622163
daurnimator
dch: what don't you understand about them?

1577622165
dch
specifically, reading `fn foo() i32 { const S .. };  S.x += 1; ...`

1577622225
dch
this reads to me like I'm able to modify const S. I can infer that it allows me to modify the inner var of the struct, but why should this be allowed, and for S to maintain its const-ness?

1577622261
daurnimator
dch: note that `S` is a struct; not an

1577622300
dch
daurnimator: #facepalm moment thanks!

1577622328
dch
so it would be pretty standard for struct definitions to be const, then

1577622393
daurnimator
dch: yeah.... though its not the struct that might change, but the type entirely

1577622502
daurnimator
e.g. `var T: type = undefined; inline while (some_condition) { T = struct { inner: T };  } return T;`

1577622644
dch
daurnimator: when would it be useful to have a variable type then? I'm not used to that in functional world. type inference would be very unhappy

1577622672
daurnimator
dch: see my example just there: you might be building up a part from pieces.

1577622677
daurnimator
or iterating over different types

1577622707
daurnimator
dch: what is the type of `T` here?

1577622964
daurnimator
andrewrk: around? I'm encountering an issue where zig translate-c just exits the process with code 1

1577623017
dch
daurnimator: neat I can see how that's useful, but I'm not yet familiar enough with zig format to read that reliably. inline if supplied type can be fitted into 8 or less bytes.

1577623054
daurnimator
dch: huh?

1577624410
Snektron
daurnimator, why does LinearFifo implement 3 different types of allocator

1577624420
Snektron
Should that be handled by allocators instead

1577624429
daurnimator
Snektron: what do you mean?

1577624446
daurnimator
Snektron: 3 different modes: inline buffer; provided buffer; dynamic buffer

1577624800
Snektron
I mean that it seems out of place that the LinearBuffer handles allocation, as all functionality can be obtained by building around an allocator instead

1577624820
Snektron
.Static is the same as .Dynamic with a FixedBufferAllocator

1577624847
Snektron
Not quite maybe, but that feels like the proper direction to me

1577624927
daurnimator
Snektron: but then if you want .Static you'd have to wrap it in some higher level struct that had a buffer next to it

1577625000
Snektron
Thats the price of abstraction i guess

1577625029
Snektron
I would almost argue to make allocators a comptime parameter (similar to how c++ handles them)

1577625084
Snektron
Best of both worlds plus possibly better optimization opportunities

1577625115
Snektron
Old functionality can be remained by passing *std.mem.Allocator as the allocator type

1577625142
Snektron
(That would be similar to c++'s polymorphic memory thingy's)

1577625235
daurnimator
Snektron: but with the current code you don't have to pay the price of abstraction; or the overhead of the allocator interface for non-dynamic fifos

1577625463
Snektron
Instead you have a type which feels like it implements two things at once

1577625665
daurnimator
usage is the same aside from init?

1577629295
daurnimator
Dominic[m]: ?

1577631558
Dominic[m]
daurnimator: Sorry, I've been cooking/cleaning :) Just sat down to do this

1577631616
Dominic[m]
daurnimator: In fact, I just found this while searching:

1577631680
daurnimator
var i: usize = 0;

1577631681
daurnimator
while (i < tree.tokens.len) : (i += 1) {

1577631683
daurnimator
const t = tree.tokens.at(i);

1577631685
daurnimator
std.debug.warn("RENDER i={} t={}\n", .{ i, t });

1577631687
daurnimator
}ah yes

1577631695
daurnimator
shit accidently hit paste

1577631917
daurnimator
Dominic[m]:

1577631952
Dominic[m]
haha :) I'll subscribe & follow along.

1577631964
Dominic[m]
Zig's C interop is so cool. I can't quite get over it.

1577631986
Dominic[m]
I initially went to build this thing in Julia, but the idea of mirroring structs in my code was no fun.

1577632956
mikdusan
plumm: I think we need a patch for `zig cc` to add -framework args

1577633005
mikdusan
and this should also address translate-c needs

1577634838
mikdusan
plumm: actually just try and use the `-F` option. clang these days seems to be clever and infers frameworks? anyhow this works for me:

1577634847
mikdusan
zig -F/Applications/Xcode_11.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks translate-c foo.c

1577634881
mikdusan
where foo.c is: #include <Ruby/ruby.h>

1577636097
Dominic[m]
Is there a naming scheme/strategy used for optional pointers? The docs use the optional_ prefix, but I'm not sure if that's conventional or just for explanation purposes.

1577646621
Snektron
I usually do opt

1577662132
andrewrk
daurnimator, thanks for your code reviews lately, they've been quite helpful

1577663152
daurnimator
andrewrk: just trying to keep things moving :)

1577663589
andrewrk
I'm still visiting family and about to go afk again, but will be back full force tomorrow

1577663624
hryx
Enjoy the family time!

