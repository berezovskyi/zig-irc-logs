1561939288
hryx
there's probably just something messed up about my setup. but if there's a bug, I don't want to just work around it, knaw mean?

1561939298
scientes
of course

1561939308
scientes
like the libuserland crash dumps dont work for me

1561939312
scientes
so i just work around that

1561939324
hryx
ah

1561939480
hryx
I wanna work on the peer type resolution ticket (2749) but I'm so intimidated by ir.cpp. it's 26k lines of C++

1561939492
scientes
i've done quite a bit of work in ir.cpp

1561939495
scientes
its well organized

1561939506
hryx
that's good

1561939617
scientes
ahhh i see, I was looking at some peer type stuff and didn't understand what it did

1561939676
emekankurumeh[m]
ir.cpp looks a lot scarier than it actually is

1561939682
scientes
^^^^^^

1561939692
scientes
I've done lots of work in it, and it isn't that scary

1561939709
scientes
analyze has two passes, and almost all that code is in ir.cpp

1561939720
scientes
you first do ir_build_foo, then ir_analyze_instruction_foo

1561939795
scientes
oh that reminded me of a bug i forgot to file

1561939867
hryx
looks like some relevant pieces are ir_resolve_peer_types() and the ResultLocPeerParent type

1561939872
scientes
yep

1561939898
hryx
and ResultLocPeerParent has a parent itself, which I assume is the Var or Return that I'm looking for

1561939948
hryx
yer right friendos, this isn't so bad. I'll mess around with it for a bit

1561940148
scientes
The only problems I have had have been to be with it being compiled in c++ mode.l

1561940175
scientes
but otherwise it thankfully is coded to be understandable, even if that means it is a little more repetitive

1561940379
mikdusan
after using zig it hurts (as in why am I wasting time on this?) to deal with c++ includes, fwd declares, templates and cyclic deps

1561940460
scientes
when was C++ not painful?

1561940481
mikdusan
heh maybe i just didn't know how painful it was

1561940488
scientes
but what I am really excited about in zig right now is doing what i've been doing in C

1561940502
scientes
but compared to C++, C was always painful

1561940510
scientes
*compared to C, C++ was always

1561940519
hryx
as humans our brains adjust to worse levels of pain just to get through the day. until something better comes along

1561940532
hryx
dat's progress

1561940537
mikdusan
did hryx just coin a slogan for Zig?

1561940544
daurnimator
It's more just swapping from one sort of pain to another

1561940545
scientes
like that @shuffle PR i just opened

1561940554
hryx
mikdusan: :D

1561940561
scientes
lots of work, but the result will (hopefully) be really awesome

1561940577
scientes
we already have it "C but without the problems"

1561940619
daurnimator
"C but with less problems"

1561940625
daurnimator
we can't fix all of them

1561940650
daurnimator
--> you

1561940707
scientes
daurnimator, it comes from the recent Andrew talk

1561940711
daurnimator
but then you end up in the situation where you're not as powerful as C.... which means C gets to remain

1561940718
scientes
which is not news to people in this channel, but was still good

1561940779
scientes
yeah I'm wondering if aliasing will make it into 1.0, maybe not

1561940784
scientes
without that C is still faster.....

1561940821
Cadey
if you're not sure, you can always run benchmarks

1561940836
scientes
but what I'm trying to do doesn't need that

1561940857
scientes
I agree that it needs more thought, and the current old c memory model is correct for now

1561940917
mikdusan
is strict-aliasing an individual optimization pass in llvm?

1561940925
mikdusan
or whatever it would be called

1561940927
daurnimator


1561940940
daurnimator
^ TIL `void foo(int[static 4]);  // >= 4 elements, cannot be null` is a C99 thing

1561941013
shachaf
I use that occasionally.

1561941021
shachaf
void SHA1_end(SHA1State *sha1, U8 output[static SHA1_HASH_BYTES]);

1561941029
scientes
daurnimator, the calling conventions dictate that that would be passed in registers too

1561941054
shachaf
Hmm? It's passed as a pointer, same as it would be without the static.

1561941100
scientes


1561941135
scientes
oh it has to be a "composite type"

1561941253
scientes
because llvm could even handle passing arrays by value

1561941259
scientes
it has extractvalue and insertvalue

1561941817
hryx
--verbose-ir is causing a failed compiler assertion. man, today is just not going to be productive, is it?

1561941845
mikdusan
hryx: andy showed me a way to get rid of that, and reduce noisy ir output

1561941854
hryx
ooh! do tell

1561941891
hryx
I've never poked around with zig IR so a lot of this will be new for me

1561941924
mikdusan
here's boiler plate i use for isolating ir.

1561941964
hryx
awesome, super helpful mikdusan

1561941980
mikdusan
defining your own panic reduces a boatload of noise. and export fn entry() ensures code is needed

1561942000
mikdusan
i've found somewhere in the noise is where that assert happens.

1561942017
scientes


1561942071
hryx
it's complaining that I don't have a `main` fn

1561942114
mikdusan
try `zig build-obj ...`

1561942141
hryx
that did the trick :> I was using build-exe

1561942169
hryx
thanks a lot. this can serve as my crash course

1561942217
scientes
oh god, C++ added a arena allocator, but as usually they made it way more complicated than it had to be

1561942263
mikdusan
monotonic_buffer_resource?

1561942282
scientes
and they have to add all these stupid terms too

1561946535
emekankurumeh[m]
hryx: is adding an error for a capture on an else possible?

1561946623
emekankurumeh[m]
would that be in all cases or just when the payloads of all the else don't match?

1561946940
hryx
emekankurumeh[m]: I'm not totally sure! Based on the original proposal of #1107, I could see it only being an error when they don't match

1561946946
hryx
but I could see it either way

1561946989
hryx
but maybe it depends, if `else` should just be sugar for all other cases explicitly listed

1561947045
hryx
if `else` should be simpler, then it could just be illegal to try to unwrap it (for enums anyway)

1561947629
emekankurumeh[m]
the zig ir system doesn't store any info about the payloads types in the ir instruction for else's in switches

1561947716
hryx
mm I see. so maybe it should just be an error to do `else => |x|` ?

1561947723
hryx
honestly I think that's ok

1561949500
hryx
scientes: are you still working on #2129?

1561949529
scientes
I finished it, but it never got merged

1561949542
hryx
is there a pull request?

1561949550
scientes
it was closed, let me see

1561949566
scientes
(it wasn't rejected or anything)

1561949628
scientes
#2099

1561949657
hryx
thanks

1561949679
scientes
I was actually quite proud that i did a through job on the stage2 parser

1561949701
scientes
but I also ran into bugs, and it just got too messy to merge

1561949856
scientes
daurnimator, do you understand my use case however, on pruning switch cases as unreachable?

1561949874
scientes
or is that hidden control flow?

1561949877
scientes
actually maybe it is

1561949901
daurnimator
scientes: not really: I don't know why you've got a comptime undefined variable

1561949921
scientes
the point is that you might have a switch that only applies to one architecture or something

1561949930
scientes
like I was going to use this for reading the AUXV

1561949934
daurnimator
scientes: if you have a comptime var that's only initialised for some feature flags then its type should vary

1561949945
scientes
and you don't want that code to by in binaries where that value will never exist

1561949957
daurnimator
scientes: e.g. `myvar: if (arch && somefeatureflag) u64 else void`

1561949966
daurnimator
s/&&/and/

1561949968
scientes
ahhhhhh yes, void will do it!

1561949979
scientes
no it wont

1561950006
scientes
hahaha, I keep using && and || too

1561950011
scientes
but zig's and and or is better

1561950036
daurnimator
yeah I don't know why I keep writing it. I write more lua than anything else and lua has the keyword 'and'

1561950067
scientes
yeah , I don't think you see my use case yet

1561950083
scientes
its not totally necessary, it can be done with other ways

1561950085
daurnimator
scientes:

1561950097
scientes
daurnimator, that doesn't work with switch however

1561950107
scientes
switch will bail if you pass a void as a key

1561950140
daurnimator
scientes: then don't switch..... you would be doing something like: if (feature_available) { switch(self.field) { ..... }}

1561950161
daurnimator
scientes: see in that same file I linked all the places I use `if (allow_relative_access)`

1561950165
scientes
actually I was going to do something more like elf.AT_HWCAP => trigger

1561950179
scientes
and then trigger() void  { if (builtin.Arch...) return; do_+something();)

1561950215
scientes
daurnimator, but sometimes it might be nice just to say "don't do anything with this value, it is a dummy that should be compiled out"

1561950221
scientes
and void is actually that in zig

1561950227
scientes
so maybe switch should allow void

1561950232
scientes
(and multiple instances of it)

1561950248
mikdusan
what if the expr is of type `type` ?

1561950288
scientes
oh yeah void is a IDMetaType, i.e. "type"

1561950300
scientes
but that keyword seems most apt for this

1561950323
mikdusan
does `{}` make any sense?

1561950332
scientes
no

1561950354
scientes
basically this is #ifdef guards, but on a variable

1561950356
scientes
rather than a block

1561950416
daurnimator
scientes: so far it still sounds just like my link above

1561950456
scientes
daurnimator, yes, but you have to test if (allow_relative_access) over and over

1561950465
daurnimator
yes.

1561950467
scientes
my proposal is to make that unnecessary

1561950479
scientes
if it is "void" then it just prunes everything

1561950491
daurnimator
Sounds too "magic" for my liking

1561950508
daurnimator
I don't mind the repeated `if (allow_relative_access)`. makes it obvious to read.

1561950510
scientes
its pretty similar to the existing lazy evaluation however

1561950521
scientes
so I'm not sure it adds a new problem

1561950554
scientes
but yeah might be too magical

1561950556
scientes
its just an idea

1561950571
scientes
like there might be corner cases if you try to take the address of something

1561950641
mikdusan
personally i like the idea of comptime'ing out switch cases but maybe the need is not strong enough to justify

1561950684
scientes
what i don't like about it is that is destroys the communicative property

1561950707
scientes
so if (foo > 0) will be false, and if (foo <= 0) will also be false

1561950714
scientes
so I think that is a non-starter

1561950736
daurnimator
scientes: have you met NaN?

1561950744
scientes
yeah but that is only for floats

1561950760
scientes
in floats a + b is differn't from b + a

1561950920
daurnimator
scientes: huh? no they're the same

1561950937
daurnimator
IEEE754

1561950971
scientes
daurnimator, -0 + 0 => -0. 0 + -1 => 0

1561951028
scientes
*  0 + -0 => 0

1561951043
daurnimator
IEEE-754 considers -0 and 0 equal.

1561951069
scientes
you mean the equal operation returns true

1561951075
scientes
but they are not the same

1561951086
scientes
and thus it is not communicative

1561951096
daurnimator
Yeah... the equal operation. what else are you talking about: bitwise equality?

1561951112
daurnimator
if you use bitwise equality then you'll handle NaN wrong

1561951117
scientes
1 / (a + b )

1561951129
scientes
is not the same as 1 / (b + a)

1561951140
daurnimator
scientes: howso?

1561951155
scientes
sometimes you get positive infinity and other negative infinity

1561951171
scientes
*and the other NAN

1561951180
scientes
no wait, negative infinity

1561951184
daurnimator
scientes: please demonstrate?

1561951185
scientes
ahh floats are so confusing

1561951205
scientes
if a is -0 and b is +0, then 1 / (a + b) is negative infinity

1561951216
scientes
while 1 / (b + a) is positive infinity

1561951234
daurnimator
I don't think it's possible to get -0 in there

1561951268
scientes
of course it is, these are floats

1561951462
daurnimator
scientes: it shouldn't be if your compiler is STDC_IEC_559 compliant

1561951889
scientes
so it turns out there is special exception for -0 + 0 => 0

1561951920
scientes
which is super duper weird

1561951934
scientes
as otherwise adding zero (positive or zero) will not change the left hand number

1561957835
daurnimator
emekankurumeh[m]: could you use better commit messages in #2799?

1561957970
emekankurumeh[m]
no problem, but what exactly do you mean by better?

1561958089
daurnimator
"basic partial implementation" doesn't tell me what the commit is about at all

1561958106
daurnimator
implementation of what? why is it partial?

1561958149
emekankurumeh[m]
i'm probably going to end up squashing those commits together

1561958177
emekankurumeh[m]
i mostly just committed more as a form for "backing up" my code

1561958553
emekankurumeh[m]
daurnimator: whats your opinion on allowing on allowing captures in else prongs?

1561958598
daurnimator
emekankurumeh[m]: only if the type makes sense.... which I think is rare

1561958651
daurnimator
emekankurumeh[m]: would it be any different to: const x = foo(); switch(x) { ....... else => // use x }

1561958978
emekankurumeh[m]
thats what it currently does, and i wasn't sure if i should make that an error if the payloads don't match

1561959031
daurnimator
the concept seems weird for me

1561959042
daurnimator
e.g. I'd expect that a |x| would always 'unwrap'

1561959100
emekankurumeh[m]
so code like this would work:

1561959118
daurnimator
on the other hand, I can imagine magically constructing a union: switch(union{a:A,b:B,c:C}) { .a => {}, else |x| => { // should x be of type union{b:B,c:C} }}

1561959543
daurnimator
(or not.... mainly because unions in zig can have methods; which brings up too many questions about what that constructed type would have/be)

1561976009
FireFox317
Hey guys, I'm working on some LLVM targetoptions stuff. For wasm (and probably other targets) LLVM sets some default options, these are set in the codegen.cpp init() `LLVMCreateTargetMachine` function. Now it is not possible to set the targetOptions here, because the c-llvm sets them in

1561976009
FireFox317
2

1561976139
FireFox317
Should I rewrite the `LLVMCreateTargetMachine` function and use the c++ api directly calling `createTargetMachine`, in which case I can set some targetOptions and these can then be overwritten by the LLVM backend. This is what Clang does

1561976224
FireFox317
Currently I'm setting the option almost at the end, just before outputting the file (in `ZigLLVMTargetMachineEmitToFile`) and that overwrites the default options set by LLVM.

1561996576
FireFox317
Someone with some git knowledge can help me? I screwed something up and now there are a bunch of commits added to my PR.

1561996684
Akuli
FireFox317, which commits would you like to delete from the pull request?

1561996745
scientes
why is gcc/zig inline assembly so friggen difficult

1561996755
scientes
It is like pulling teath

1561996771
FireFox317
Akuli: I rebased and now it added a bunch of commits from other people to my commits

1561996812
FireFox317
Only the last few commits are mine, pff always the struggle with git

1561996833
Akuli
hmm what is going on here :D

1561996847
Akuli
here is a nice command for dealing with git:   git log --graph --decorate --pretty=oneline --abbrev-commit

1561996852
Akuli
i recommend making an alias of that

1561996857
Akuli
try running it to see what your rebase has doen

1561996858
Tetralux
scientes: To be fair, I can't for the life of me deduce how zig's inline assembly works. I'd need a manual...

1561996879
Akuli
i don't understand assembly at all :D

1561996919
scientes
Tetralux, i can't even do it in C

1561996930
scientes
it is the constraint syntax

1561996941
scientes
and the cryptic error messages

1561996952
Tetralux
I hate constraint syntax... at least make it obvious xD

1561997002
FireFox317
Akuli: So I added a commit to my branch, and first I fetched the upstream and rebased with my current branch. Then i tried to push it to origin, but git told me to pull first, so I did that and then it merged stuff or something

1561997020
Akuli
yeah pull merges

1561997041
Akuli
i would have force-pushed, but i don't know whether that's the correct way to solve this

1561997048
Akuli
maybe ask #git :D

1561997100
FireFox317
Yeah i probably should have done that or something. I'm not that familiar with git :(

1561997123
Akuli
i don't know much about it either

1561997137
FireFox317
I could ask #git, but there is defintely someone here who can help me i think

1561997143
Akuli
sometimes i get everything screwed up to the point that i just rm -rf everything and clone the repo again

1561997164
FireFox317
Jup, i did that some time ago too XD

1561997167
Akuli
hint: you can cp -r git repos when you think you might screw up something

1561997212
samtebbs
FireFox317: If you rebase then you'll need to force push, as you will have changed the commit history

1561997249
samtebbs
If you try to non-force push, git will see that your history is different to the one on the remote and ask you to pull

1561997261
Akuli
hmm, how about this idea: check out the commit before the merge and then force-push that

1561997278
samtebbs
Force-pushing is safe if the only changes needed on the branch are all local :)

1561997290
Akuli
FireFox317, did you run the long 'git log' command? pastebin the output

1561997291
FireFox317
samtebbs: Yeah i should have done that, but unfortunately I didnt.

1561997309
Akuli
we can probably go back to the point before the merge easily

1561997334
FireFox317
Hopefully Akuli, one moment I will paste that in pastebin

1561997378
samtebbs
You can do a hard reset to the head of master and then cherry pick your commits back, then force push

1561997395
Akuli
all that because a failed merge?

1561997404
Akuli
i think just checking out the commit before the merge is enough

1561997405
samtebbs
You can see your all your commits, even ones that aren't in the history any more with `git reflog`

1561997412
FireFox317


1561997435
Akuli
FireFox317, i meant my 'git log' command with lots of arguments

1561997440
samtebbs
Akuli: Possibly yes, if those extra commits we don't want came from the merge

1561997440
FireFox317
ooh

1561997443
Akuli
git log --graph --decorate --pretty=oneline --abbrev-commit

1561997451
FireFox317
my bad

1561997461
Akuli
samtebbs, i'm quite sure they did

1561997472
samtebbs
(y)

1561997478
Akuli
<FireFox317> Akuli: So I added a commit to my branch, and first I fetched the upstream and rebased with my current branch. Then i tried to push it to origin, but git told me to pull first, so I did that and then it merged stuff or something

1561997513
samtebbs
Yeah that should solve it then

1561997524
samtebbs
You don't wanna do a hard reset unless you have to :)

1561997545
FireFox317
<Akuli> think just checking out the commit before the merge is enough, this?

1561997574
Akuli
i will know what to do when i see the git log output

1561997577
Akuli
it should be a nice tree

1561997604
FireFox317


1561997627
Akuli
which of these commits are yours? "Added the ZigLVVMCreateTargetMachine to self hosted zig code" ?

1561997644
Akuli
or the function-section thing?

1561997672
FireFox317
All of the messages that start with 'Added'

1561997693
FireFox317
function-section and createTarget stuff

1561997703
Akuli
hmm why is one of them in a different place

1561997761
FireFox317
ffe618c1> this one should not have been added

1561997763
Akuli
i would try this:

1561997769
Akuli
$ git checkout 597caddd

1561997773
Akuli
$ git checkout -b akuli-test

1561997782
Akuli
$ git cherry-pick ffe618c1

1561997808
Akuli
$ git push --force origin akuli-test:function-sections

1561997814
Akuli
samtebbs, does that look about right?

1561997814
FireFox317
akuli-test?

1561997820
Akuli
that's just a branch name

1561997830
Akuli
you can name it anything you want

1561997856
Akuli
hmm

1561997872
FireFox317
ah yes, pff so annoying I always screw up this github stuff

1561997886
Akuli
why are those commits showing up lol :D

1561997904
FireFox317
wait let me paste my cli

1561997947
Akuli
if my idea doesn't work, that's ok, because it should be all on just the akuli-test branch

1561997998
FireFox317


1561998004
FireFox317
Should i try you idea?

1561998043
Akuli
git merge upstream/master

1561998047
Akuli
i think this created a problem

1561998058
Akuli
or no

1561998067
Akuli
let me read the rest of this

1561998088
FireFox317
I think the `git rebase master`

1561998185
Akuli
i cloned your fork and did some stuff

1561998193
Akuli
i managed to create this

1561998234
Akuli
what i still don't understand is why "ffe618c1 Added function-section functionality" is so different from the rest of your work

1561998251
Akuli
do you want that to be included in your pull request as well?

1561998256
FireFox317
No

1561998260
FireFox317
That shouldnt be include

1561998265
Akuli
ok

1561998268
Akuli
then this is easy :D i thought you wanted that

1561998284
Akuli
first we'll go to look at the commit just before the merge, last commit you want to include

1561998285
FireFox317
not this one: ffe618c1

1561998290
Akuli
$ git checkout 597caddd

1561998296
Akuli
so that is the last one you want

1561998307
FireFox317
Jup

1561998318
Akuli
if you run git status, it'll say that your head is deatched (ouch)

1561998329
Akuli
so we fix that

1561998335
FireFox317
For me it doesnt say that?

1561998336
Akuli
$ git checkout -b akuli-test-2

1561998339
Akuli
hmm :D

1561998344
Akuli
let me try this on my system then

1561998359
Akuli
maybe you have a different git version then

1561998366
Akuli
so check out 597caddd and then do the -b thing

1561998400
FireFox317
ah yeah if i checkout to that hash then my head is detached indeed

1561998400
Akuli
you should get this

1561998405
Akuli
yeah

1561998407
Akuli
then do the -b thing

1561998411
Akuli
to get my latest dpaste

1561998415
Akuli
make sure you get something like that

1561998467
Akuli
after all that, you should see in the 'git log --blah --blah' output that "(HEAD -> akuli-test-2)" is pointing at the last commit you want to include

1561998493
Akuli
let me know when you get there

1561998517
FireFox317
Hmm my log is different, but better I think:

1561998530
FireFox317
Yeah i think I'm there

1561998536
Akuli
this looks good to me

1561998542
Akuli
so these are the commits you want to include?

1561998547
Akuli
last 3

1561998549
FireFox317
Yes

1561998563
Akuli
hmm what is the name of your github remote

1561998566
Akuli
it seems to be 'upstream'

1561998571
Akuli
no

1561998576
Akuli
upsteram is ziglang/zig right?

1561998582
Akuli
and 'origin' is your fork?

1561998585
FireFox317
yes upstream is ziglang/zig

1561998587
FireFox317
origin my fork

1561998587
Akuli
ok

1561998611
Akuli
$ git push origin fix-git-stuff:function-sections

1561998624
Akuli
this pushes fix-git-stuff on your computer to function-sections in your fork on github

1561998639
FireFox317
Okay lemme try that

1561998658
Akuli
oh and it should refuse to do anything

1561998660
Akuli
use --force

1561998703
Akuli
at least it looks different now

1561998703
FireFox317
You are my hero!

1561998710
Akuli
ooo it fixed :D

1561998711
FireFox317
I think it's okay now

1561998714
Akuli
better than i expected

1561998718
FireFox317
Yup

1561998725
Akuli
does the "Files changed" look about right?

1561998776
Akuli
next time this happens: use my 'git log' command, check out the last commit you want to include, create a branch at that commit with the -b thing, force push that branch

1561998788
FireFox317
Jup this is exactly how it should look like

1561998801
Akuli
i'll be back after 30 minutes or something

1561998806
FireFox317
Thank you so much man, appreciate the help. And sorry for the spam in the #zig channel

1561999908
squiddlebit
Would anyone happen to know why the name field of the inotify_event struct in std/os/bits/linux.zig is commented out? I notice a workaround was used in other stdlib code involving inotify, so I assume there is a good reason for its necessity.

1562000409
Akuli
squiddlebit, git blame std/os/bits/linux.zig

1562000441
squiddlebit
oh right, i did not think of that at all. Thank you Akuli

1562001737
companion_cube
the raytracer post makes some good points, hmm

1562001772
companion_cube
(esp. block return syntax and loops)

1562007865
ManDeJan
Sahnvour, nice work on the wyhash v2 implementation :)

1562016251
fubd
I see json.zig and io.zig's Deserializer in the stdlib, but has someone written a generic struct-to-json and json-back-to-struct thing?

