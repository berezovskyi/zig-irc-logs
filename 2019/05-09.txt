1557360374
daurnimator
andrewrk: FWIW the path that needs to be taken there is bindings(?) to EGL;

1557360419
andrewrk
daurnimator, why's that? I had opengl/glfw bindings working in tetris example for years

1557360445
daurnimator
andrewrk: EGL is the only multiplatform abstraction that is supported by all graphics vendors, and is composable

1557360464
daurnimator
andrewrk: you use EGL to

1557360477
andrewrk
I think that's trying to solve another problem, which is orthogonal to the gui proof of concept

1557360483
andrewrk
neither one is conflicting with the other

1557360511
daurnimator
andrewrk: so it's sort of "one layer deeper" than opengl; and makes glfw not required

1557360538
andrewrk
opengl isn't even a good target anymore, it's deprecated on macos, and vulkan is the future on linux and windows

1557360539
daurnimator
andrewrk: it is though; because the "best" API for GUI abstractions is one where you pass around the lower level EGL handles/buffers.

1557360601
andrewrk
I stand by my position that egl doesn't have to be solved for this proof of concept to serve its purpose

1557360630
daurnimator
let me go check with letoram....

1557360736
daurnimator
andrewrk:

1557360850
andrewrk
daurnimator,  is that

1557360902
daurnimator
andrewrk: no. that seems different

1557360965
daurnimator
andrewrk: I think my question needs a bit of design consideration: how can both fields and methods exist in the same namespace? ==> should we error on conflicts? or alternatively: do we need a different method call syntax to field access syntax

1557361015
andrewrk
I do agree it's worth having some design discussion about that

1557361019
andrewrk
that's related to @hasField as well

1557361145
hryx
isn't that this issue?

1557361181
andrewrk
looks like it to me

1557361482
scientes
@hasField is coded, but pending a decision on the issues that it brought up

1557361665
tgschultz
I like the idea of eliminating `var` as a parameter un-type, since it's overloaded already. That said, I agree with andrew that it is closely related to runtime-interfaces. That's a tricky problem. My idea was a new container  that performed type-erasure compiled in runtime circumstances, but even that still has issues. Like, if you stored a an interface in your struct it would become type-erased behind your back and mysteriously

1557361666
tgschultz
lose all error set information.

1557361797
andrewrk
that's another thing I want to solve with this is error sets, and maybe even const/non-const is related?

1557361823
andrewrk
or at least have a plan for all of these things at the same time

1557362086
tgschultz
ErrorSets are tricky in this. If we could assign each unique error set encountered at compile time a unique id that could also be stored, then we could keep that in an interface, but if we're going to do that why not also assign each type a unique id and embed that as well? If I'm thinking about this correctly, that could be a hidden field in debug/safe... wait, that sounds familiar.

1557362133
tgschultz
also it seems like errorset inference could be dependency looped under that circumstance

1557362254
tgschultz
but yeah, if we could do that, then we could solve runtime interfaces at least within the same compilation unit. Doesn't seem solveable beyond that anyway.

1557362274
tgschultz
Unless you wann go full COM dispatch... which I really don't recommend.

1557363410
tgschultz
ah yes, it sounds like #1119, that's why its familiar

1557363444
daurnimator
hryx: ah yes! thanks. I couldn't find it

1557366355
shritesh
Should I update the instructions for building Zig on Windows to use VS 2019? The 2017 link requires you to sign in with MS and the instructions don't work with 2019.

1557366379
andrewrk
shritesh, yes please

1557366570
daurnimator
andrewrk: so I'm feeling a little overwhelmed by the allocator work... do you have criteria for an MVP?

1557366596
daurnimator
I also did it with headers... looking around: all the modern malloc replacements use a process-wide radix tree

1557366599
daurnimator
wondering if I should redo it

1557366652
daurnimator
(though my radix tree would be allocator-specific)

1557366745
shritesh
andrewrk, done. I have also modified the instructions to only install the Build Tools rather than the full blown Visual Studio Community edition

1557366755
andrewrk
thanks!

1557366795
shritesh
Does the link to llvm/clang 7.0 still need to be there?

1557367024
andrewrk
no

1557367155
shritesh
removed

1557369550
emekankurumeh[m]
for interfaces I'm a fan of #1214

1557369891
tgschultz
#1214 doesn't solve error sets. Aside from some sugar it actually appears to me to be identical to status-quo interfaces, actually, which we know don't optimize well.

1557370069
tgschultz
ok, I've hit the part of rewriting the allocator interface where nothing is testable until I rewrite half of debug too. Time for bed I think.

1557371187
emekankurumeh[m]
after the coroutine rewrite, you won't be able to abstract over async functions return types, right?

1557375484
daurnimator
hryx: how much does your work unblock LSP support? (

1557375647
hryx
great question, I'm really not sure

1557375698
hryx
I've never implemented LSP but won't it be blocked on the async/coroutine overhaul anyway?

1557375763
daurnimator
maybe? but the underlying functions can probably be written?

1557375793
hryx
the main thing the parser rewring brings is making parsing changes hella more contributor friendly -- perhaps the LSP implementation will benefit from that

1557377524
gamester
parser rewrite? Writing the second stage parser?

1557377659
daurnimator
gamester: yep. see

1557377660
hryx
gamester: yes my friend

1557377664
hryx
oop jinx

1557377705
daurnimator
hryx: re: all the commits. I think `git rebase -i origin/master` and try and 'fixup' as many commits as sensible.

1557377707
gamester
haha two identical answers arriving at the same time

1557377721
gamester
Nice, thanks for the link

1557377724
hryx
in sync!

1557377741
hryx
gamester, if you are interested, please take a look - I would love feedback

1557377778
hryx
daurnimator: agreed, I just wanted to see what Andrew's preference is before doing so

1557377873
hryx
fun fact: kcachegrind cannot open callgrind files if the command had a lot of arguments. I'm very grateful for this answer:

1557377907
hryx
in case anyone else wants to run `valgrind --tool=callgrind bin/zig fmt (find ../std -type f -name "*.zig")`

1557377919
hryx
fun fact 2: std has 310 zig source files

1557378184
hryx
which won't be a problem once zig fmt can operate recursively on a directory ^_^

1557379189
andrewrk
hryx, I thought it already did that

1557379447
hryx
andrewrk: derp. you are right. I misread the usage and (ashamedly) didn't even try to pass a dir argument

1557379499
andrewrk
no worries, when everything is constantly changing it's hard to be on top of what does what :)

1557379514
andrewrk
nice perf stats!

1557379566
hryx
thanks! playing around with kcachegrind tonight in case it reveals any more useful information about the change

1557379637
andrewrk
the other thing to fiddle with is possibly using ArrayList instead of SegmentedList, but I think that's a separate issue

1557379708
andrewrk
even LinkedList might actually perform well because the parser uses an arena and so the items would likely be adjacent? idk it's worth playing with in that separate issue

1557379754
andrewrk
I think it's safe to say that the easier maintenance of the recursive version comes with fundamentally better performance characteristics. win-win, no brainer

1557379793
hryx
that was a pleasant bonus

1557379829
hryx
re: SegmentedList, it looks like SegmentedList.addOne() takes roughly 26% of calls/time in both branches

1557379830
andrewrk
really loving this detailed writeup. I was sad to see the snake, cow, and whale go

1557379843
hryx
I was sad to let them go. thanks for noticing

1557379845
hryx
they'll be back

1557379861
daurnimator
snake/cow/whale?

1557379875
andrewrk
look at the latest edit of

1557379964
andrewrk
hryx, if you want to rebase feel free. I don't see it as necessary

1557379970
daurnimator
andrewrk: ah, heh

1557380008
daurnimator
andrewrk: any response on how this might unblock LSP (615)

1557380061
andrewrk
I think hryx is correct re: contributor friendly and the main blocker is async/coroutine overhaul

1557380102
andrewrk
LSP and doc generation are both really important but I don't fancy maintaining a non-self-hosted implementation

1557380194
hryx
andrewrk: regarding rebase or not, let me run through the commit messages real quick to make sure there isn't anything vulgar etc. in there. If all clear, let's go with the simpler merge commit approach as you mentioned

1557380233
hryx
I tend to add some flare to my commit messages, which isn't always appropes

1557380514
daurnimator
andrewrk: can't it be self-hosted though in at least the same style as translate-c2

1557381147
andrewrk
daurnimator, that's worth thinking about but the problem is that unlike translate-c the interface between the c++ code and the zig code would be much larger, and not the same interface between stage1 and stage2. the stages will have entirely different ways of representing compilation & analysis

1557381171
andrewrk
the beauty of code sharing with translate-c is how it's exactly the same interface regardless of whether it's stage1 or stage2

1557381224
andrewrk
that applies to the caching system too - that can move to self-hosted

1557383368
lunamn
I was thinking for a bit while using translate-c and thought if it takes care of removing declarations that aren't used in the original c code, mostly because the output got confusing when I wanted to find the original functions, so, does it?

1557383461
andrewrk
lunamn, does this address your question?

1557383596
lunamn
andrewrk, sadly, no, does it help that I'm linking against libc? it gets confusing when the declarations from it's headers leak into the output, when they aren't used in either the original or output code (I can be wrong about the output zig code using them, though)

1557383661
andrewrk
I don't understand your question

1557383711
andrewrk
what behavior are you seeing, what are you expecting?

1557383882
lunamn
suppose I have some original C code that includes stdio.h to open/read/write a file, and I run translate-c over it

1557384002
lunamn
what I see is that all of stdio.h gets imported into the output, including things that are unrelated to the functions I used. if I, for example, used fwrite(), I also got the declarations for getw() after running translate-c, that look disconnected from what I originally used

1557384374
andrewrk
ah ok I'm following along - and then the question is whether the extra stuff ends up bloating your program, yes?

1557384447
andrewrk
zig has lazy top level declaration analysis - if something isn't referenced then it isn't even semantically analyzed

1557384458
lunamn
well I wouldn't say bloating the program itself when I'm compiling the output zig code, but rather readability of that output

1557384505
andrewrk
I'm going to bed, good night. feel free to open an issue explaining your question and any proposals for different behavior you have

1557384530
lunamn
that's fine, thank you!

1557419578
gamester
andrewrk: /usr/lib64 is a system path on fedora, separate from /usr/lib:

1557419588
gamester
linkSystemLibrary doesn't find libs in /usr/lib64

1557419613
gamester
let me confirm this, one sec

1557419629
andrewrk
gamester, here's the code

1557419720
gamester
andrewrk: yeah I knew about that code, I was just doing a sanity check by copying a lib from /usr/lib64 to /usr/lib, and instead then it's found

1557419728
gamester
indeed*

1557426379
tgschultz
uh, compiler asserts are so annoying to debug

1557426415
andrewrk
tgschultz, have you figured out the trick of printing the source file / line / column?

1557426448
tgschultz
nope, please enlighten me?

1557426461
andrewrk
now that I think of it, it would be pretty easy to have an assert that did that automatically

1557426494
andrewrk
anyway, if using a debugger, go up the stack until you find a AstNode* or a IrInstruction*

1557426509
andrewrk
instruction->source_node gets you to AstNode*

1557426513
tgschultz
it's almost always a comptime access of an undeclared identifier, but working out where and how can get a bit troublesome.

1557426551
andrewrk
(gdb) p source_node.owner.data.structure.root_struct.path[0]

1557426557
andrewrk
(gdb) p source_node.line + 1

1557426565
andrewrk
let me look into that assert thing real quick.

1557426574
tgschultz
ok, that's good to know, but now I have to go work out how to use gdb

1557426693
donpdonp
im trying to convert a *struct to an array of bytes (to send over a pipe). whats the right way to do the conversion?

1557426711
donpdonp
var command_addr_bytes = @ptrCast(*[@sizeOf(*Command)] u8, &command) => cast discards const qualifier

1557426739
donpdonp
and *[size]const u8 gives "const qualifier invalid on array type"

1557426781
tgschultz
const bytes = std.mem.asBytes(my_struct_ptr);

1557426813
tgschultz
that assumes you won't be modifying the bytes

1557426843
tgschultz
if you need them mutable and have to make a copy: var bytes = std.mem.toBytes(my_struct_ptr);

1557426846
gamester
*const [size]u8 works

1557426887
donpdonp
gamester: woah. okay. const can show up in so many places o^O

1557426898
donpdonp
tgschultz: that looks clean/zig-ish. thx

1557426946
donpdonp
python adherents are pythonistas. rust adherents are rustaceans. what are zig adherants?

1557426949
tgschultz
assertion appears to occur in std.event tests. Probably has to do with async<>. I was really hoping that keeping the struct fields it was expecting would be enough.

1557426961
tgschultz
programmers

1557426965
donpdonp
ha

1557427093
tgschultz
I'll bet async<> is also insisting on the allocator being a pointer

1557427282
andrewrk
tgschultz, is the stack trace printing working? which assert is it tripping?

1557427321
tgschultz
all I get is "Assertion failed. This is a bug in the Zig compiler.", I'm running linux with a master from at most a few days ago

1557427336
andrewrk
tgschultz, give it a minute:

1557427363
andrewrk
it's trying to print a stack trace, but recent changes to debug info made stack traces really slow on linux

1557427385
andrewrk
(it's fixable)

1557427386
tgschultz
it doesn't attempt to print a stack trace as far as I can tell, it just aborts.

1557427400
tgschultz
the next line after that one is "Aborted" I just didn't include it

1557427432
andrewrk
hm ok, can you run it with gdb and get a backtrace? `gdb ./zig -ex 'run build-obj blahblah'`

1557427455
andrewrk
when you get the prompt: (gdb) bt

1557427530
tgschultz
ok, one sec

1557427534
TheLemonMan
yeah, it's fixable and on my todo list

1557427711
tgschultz
andrewrk:

1557427732
andrewrk
perfect, ok just give me a sec

1557427777
tgschultz
alright. if you need more info I can push the current state of the branch and you could pull that. i've only touched std so far.

1557427799
tgschultz
or if its a few quick gdb commands I can enter those, it's still running for now

1557427825
andrewrk
I'm not actually fixing the bug, just doing a meta thing

1557427832
TheLemonMan
intCast or the shift itself failed

1557427873
donpdonp
given struct {id: u16, payload: union{a: u16, b:u16}}. how do I create an instance of that anonymous union? im trying MyStruct{.id = 4, .payload = {.a = 1}} but it doesnt like it

1557427965
andrewrk
tgschultz, pull master and try your assertion failure again

1557427989
andrewrk
it should print `when analyzing file:line:column: assertion failed`

1557428025
andrewrk
I didn't convert all the asserts yet, but that should help. I'm not sure why it's aborting rather than printing a stack trace for you

1557428052
tgschultz
andrewrk: ok, one sec. donpdonp: `MyStruct{.id = 4, .payload=@typeOf(@field(MyStruc, "payload")){ .a = 1, }};`

1557428096
tgschultz
andrewrk, by "pull master" do you mean pull the source and compile it or is it built already?

1557428103
tgschultz
I assume the former

1557428105
andrewrk
pull source and compile it, yeah

1557428126
tgschultz
alright, that'll be a bit then. I'll let you know.

1557428240
andrewrk
that's just a mitigation. obviously the actual bug needs to get fixed

1557428429
tgschultz
well if it works that'll help a lot actually.

1557428696
TheLemonMan
if you manage to recover the panic() message I can try to fix it

1557429288
tgschultz
andrewrk: seems to have worked: when analyzing /root/git_stdlib-interface_reform_2/std/event/channel.zig:340:24: assertion failed

1557429322
andrewrk
hope that helps. I only converted a few asserts for now

1557429417
tgschultz
it appears to confirm my suspicion, changing `async<allocator>` to `async<&allocator>`, even though Allocator is safe to copy in the new paradigm, seems to mollify it.

1557429514
tgschultz
If just changing all async lines to have a & or * in them is all that is required I'll call it acceptable for our purposes, but if not, or if I get ambitious, from what I recall of the cpp code last time it wouldn't be too difficult to fix.

1557429574
tgschultz
thanks for throwing that together for me

1557429666
andrewrk
np, sorry for the bugz

1557430183
tgschultz
ha, ok. so now that I've satsfied async<> by giving it a pointer, it fails (in normal zig errors) becasue it does too much type checking and can't deal with the type erasure.

1557430299
tgschultz
my clever plan to deal with async in the new iteration is thusly foiled. looks like I'll have to touch cpp after all.

1557430818
andrewrk
you might be wasting your time if you're doing anything with async before #2377

1557431582
tgschultz
just doing enough to get tests to pass without a horrific usrland workaround.

1557431738
tgschultz
so basically: make ir_analyze_async_call expect a struct instead of a pointer, and disable typechecking for the first parameter.

1557432683
donpdonp
im rolling my own 'channels', so it'll be interesting to see what zig does

1557433582
donpdonp
tgschultz: zig doesnt seem to like @typeOf(@field(

1557433621
donpdonp
thats zig release 0.4.0+98fa065d

1557433659
tgschultz
donpdonp: oh my bad. you want the struct instance, not the struct type, because payload is a field. @field(Command(undefined), "payload") should work

1557433688
donpdonp
oh that makes sense. zig should prob give a type error there

1557433689
tgschultz
see #1439

1557433699
tgschultz
specifically the last few comments

1557434256
donpdonp
ok. here's a memory mgmt question. fn makeCircle() *Circle { return &Circle{.radius = 3}; } <- is that automatically doomed to fail, because the Circle{} allocated memory, then returns the address and deallocated it at the end of the function, making any use of the pointer invalid?

1557434553
andrewrk
yes

1557434561
andrewrk
I think that might even be a compile error right now

1557434615
donpdonp
hmm. if memory is allocated, which allocator does it use? (or is it part of the call frame?)

1557434706
emekankurumeh[m]
it's part of the stack frame

1557434731
tgschultz
memory is never allocated behind your back in zig (future debug/saftey features aside). The Circle instance is in the function's stack frame and will technically be invalid once it returns. However, in many cases that memory won't be overwritten right away making it

1557434868
donpdonp
ok thx.

1557434944
tgschultz
`else => unreachable` => "unable to evaluate constant expression". huh.

1557435220
tgschultz
I mean, the error was legit, I'm just not sure the description was

1557435349
andrewrk
I'm gonna do some translate-c live coding on the stream today, starting in 5 minutes:

1557437290
donpdonp
is there a way to take the least significant u8 from a u64, and put it into a u8 variable?

1557437365
donpdonp
oh i think @intCast is it. yea zig!

1557437992
TheLemonMan
@truncate(u8, value&0xff)

1557438537
donpdonp
what about turning [8]u8 back into a u64?

1557438629
TheLemonMan
it depends, here you have to throw endianness into the mix

1557438653
TheLemonMan
mem has all you may ask for

1557438820
tgschultz
mem.bytesAsValue or mem.readInt aught to be what you're looking for

1557438874
tgschultz
and actually if you're sending things over a wire you may want to look at io.Serializer/Deserialzer

1557439723
tgschultz
so someone more familiar with the compiler code, what's the non-ptr equivelent of ir_analyze_container_field_ptr? like if I want to analyze a field in a struct where the struct was not a pointer?

1557440283
donpdonp
well i should have looked at that earlier :)

1557440515
donpdonp
i think this is my last hurdle: const buf: []u8 = readPipe(); std.mem.bytesAsValue(u64, buf) => error: expected *[N]u8 , passed []u8

1557440548
donpdonp
i know that array[1..5] will make a slice, but i dont know how to go from slice to array. (i checked at runtime and buf.len == 8)

1557441016
donpdonp
well, made it a step further. const b8: *[8]u8 = @ptrCast(*[8]u8, buf.ptr); const a64 = std.mem.bytesAsValue(usize, b8);

1557441063
donpdonp
last bit fails on var command: *Command = @intToPtr(*Command, a64); => expected type 'usize', found '*align(1) usize'

