1554166026
pauladamsmith
i'm trying to build the tetris example on macOS 10.14.3, and i'm getting this error. i brew install'd epoxy and glfw.

1554166057
pauladamsmith
zig version is 0.3.0+c76d51de

1554166494
andrewrk
pauladamsmith, 'OpenGL/gl.h' file not found

1554166568
andrewrk
I'm not sure how to make that work. OpenGL is deprecated on macOS, so I'm not sure what a real fix would look like, apart from implementing a metal-specific graphics backend

1554166581
andrewrk
I guess for now, tetris is an example that only works on linux

1554166935
pauladamsmith
ah, didn't know that about the deprecation. oh, well. thanks anyway

1554167137
andrewrk
pauladamsmith, I have some future plans to make this:

1554167172
andrewrk
and then... idk probably I wouldn't support macOS because I don't fancy doing metal-specific code

1554167174
shawn_
except that linux is now wayland

1554167229
andrewrk
I mean, zig-window would support macOS

1554167282
andrewrk
scientes, why do you say except?

1554167292
scientes
well why are you working on x11?

1554167312
scientes
it is kind of deprecated at this point

1554167322
andrewrk
you're asking about why I use xfce as my desktop?

1554167328
scientes
and even before that libx11 was for libxcb

1554167390
andrewrk
or are you asking why zig-window would support X11 in addition to Wayland?

1554167396
scientes
yes

1554167424
andrewrk
wayland hasn't won the mind share. x11 is prevelant. I still use it, for one.

1554167442
andrewrk
if I switched I would lose obs-studio support, which I use weekly for live streaming

1554167468
andrewrk
I love the latest and greatest, but wayland has been promising a lot for a long time and not delivering

1554167476
andrewrk
I feel skeptical at this point

1554167480
scientes
I was a bit ticked that I couldn't stream my desktop

1554167485
scientes
it didn't really promise that much

1554167501
andrewrk
if it was better than X11 then it would be more popular

1554167515
scientes
but it did promise a few things, like secure input handling

1554167522
scientes
which it delivered

1554167578
andrewrk
anyway, point being if you want a portable window abstraction, X11 is still relevant. and it's a good place to start because it will work on both X11 and Wayland desktops

1554167608
scientes
true

1554167675
andrewrk
also I found out the C library for X11 that everyone uses is blocking whereas the X11 server is inherently asynchronous

1554167692
scientes
thats why there is libxcb

1554167692
andrewrk
so it will be interesting to expose an event-based API

1554167705
scientes
but the extensions to x11 that everyone uses make it more like wayland

1554167710
scientes
so that was the whole reason

1554167711
andrewrk
I'm pretty sure libxcb is exactly what I'm talking about

1554170805
mikdusan
on macos, it’s all metal from apple. opengl is on lifeline stuck at some old version. vulkan has no support from apple but a company open-sourced MoltenVK which is a vulkan wrapper around metal. apparently it works pretty darned good. was sponsered by one of the big game engine companies iirc.

1554170888
andrewrk
if moltenvk is good, that makes vulkan the de facto standard

1554170977
mikdusan
there’s serveral claims/examples of opengl games on mac ported to MoltenVK getting excellent fps improvements

1554171056
scientes
the source can be freed once it has been parsed, right?

1554171233
mikdusan
i’m pretty sure you want source to stick around for the lifetime of an ast.Tree

1554171287
scientes
I guess that is necessary anyways, in order to display error messages

1554171305
andrewrk
stage2 is a long running process. it does reference counting on resources, which is necessary since components can be updated independently from each other

1554171329
andrewrk
down to single-function edits

1554171354
scientes
you mean the compiler will stick around when you recompile your code

1554171356
scientes
that is cool

1554171390
andrewrk
short proof of concept:

1554171429
mikdusan
what’s “zig-window” ?

1554171455
andrewrk
mikdusan, vaporware project for games and graphics-based applications. see the README in the github link above

1554171461
mikdusan
found link.

1554171475
andrewrk
stage2 presents several as yet unsolved problems. for example, if you have 3 functions, and then update function 2, and then update function 3, each function has a difference reference to a different AST

1554171502
andrewrk
and if you insert blank lines between functions, zig is smart enough to not recompile anything.... except now all the debug info is wrong

1554171572
andrewrk
in theory we should be able to update a single integer in the output when you insert a blank line

1554171610
andrewrk
which is an offset in the debug info

1554171646
andrewrk
anyway. I can't get back to that fun stuff until more stage1 stuff is done

1554171657
mikdusan
you know what’d i’d love to see? a new editor written in zig. not text-based but vulkan-based. it’s own font engine. persistent structures (ie. snapshots) for text. tie with super-build system for granular incremental builds. and oh yeah, some bells/whistles visualizing code section recompiling, while you’re editing.

1554171675
scientes
mikdusan, what about gnome-builder?

1554171681
scientes
thats almost what you are describing

1554171839
scientes
but honestly, I like a real simple editor

1554171851
scientes
too many bells and whistles get in the way

1554171862
scientes
I use gedit, and lots of git grep

1554171875
andrewrk
wow, gedit, hahaha

1554171880
mikdusan
is gnome-builder macos savvy or does it treat it like a 3rd-class citizen?

1554171886
andrewrk
somehow I'm not surprised. and I'm not being condescending either

1554171950
andrewrk
I used gedit for a few years

1554172001
scientes
I even wrote a lang file for it, but it isn't polished

1554172015
scientes
for zig

1554174315
andrewrk
huh, turns out zig tagged unions can beat the equivalent C code in terms of data size:

1554174329
andrewrk
*can, meaning not implemented currently

1554177141
ijneb
neato

1554183450
emekankurumeh[m]
s zig translate-c broken?

1554183456
emekankurumeh[m]
*is

1554195285
gamester
emekankurumeh[m]: I think you need to pass "--library c" to zig translate-c

1554195348
gamester
that's a new thing

1554216216
scientes
const combinedTable: [512]align(256) u8 = init: {

1554216219
scientes
/home/shawn/git/zig/std/ascii.zig:27:22: error: align qualifier invalid on array type

1554216220
scientes
const combinedTable: [512]align(256) u8 = init: {

1554216234
andrewrk
it goes after the type

1554216247
scientes
but the type isn't aligned

1554216256
andrewrk
the variable is aligned

1554216268
scientes
the alignment of u8 is 1

1554216273
scientes
i only need to align the array

1554216293
andrewrk
you need `combinedTable` to be aligned and I'm telling you the status quo syntax to do that

1554216300
scientes
oh ok

1554216316
scientes
i would think that it would give each u8 256 bytes if you did it that way

1554216344
andrewrk
yeah I think that will probably change. we also need to figure out where to put alignment for struct fields

1554216358
andrewrk
for functions it goes after the parameters because the comptime parameters are in scope

1554216394
gonzus
Playing around with some bit fiddling. I want to do this: const mask = 1 << bit;

1554216422
scientes
gonzus, you have to set the type of 1, so like this: const mask = u6(1) << bit

1554216432
gonzus
I ended up with this: const mask = @intCast(u8, u1(1) << bit);

1554216447
gonzus
which still says: error: expected type 'u0', found 'u3'

1554216457
gonzus
that u0 is a total mystery to me...

1554216494
gonzus
I know 7 <= bit <= 0

1554216513
andrewrk
gonzus, you may find std.math.shl to be friendlier

1554216517
scientes
then: const mask = u8(1) << bit

1554216517
gonzus
(in fact, a bit above I do const bit = number % 8;

1554216543
scientes
gonzus, you can also do 2 ** bit, but then you have the same problem with "2"

1554216560
gonzus
andrewrk I am pretty sure I tried std.math.shl and got the same result.

1554216608
andrewrk
you want a u8 result, so use u8(1)

1554216634
andrewrk
@intCast(u3, bit) if necessary

1554216639
gonzus
So, maybe to clear up: given that I have a usize called number, I want to do this: const pos = number % 8; const mask = u8(1) << pos;

1554216650
gonzus
Let me try that again... (to vim)

1554216706
andrewrk
there's an issue open for zig to understand if you do number % 8 then zig knows the result has the range 0-7

1554216718
andrewrk
for now use @intCast if zig doesn't figure it out

1554216744
gonzus
Well, I'll be damned. Rubberducking never fails.

1554216765
gonzus
This worked:

1554216766
gonzus
const pos = @intCast(u3, bit % 8);         const mask = u8(1) << pos;

1554216783
gonzus
Thanks!

1554216784
andrewrk
yeah. shifting is a bit annoying in zig but at least there's not undefined behavior ¯\_(ツ)_/¯

1554216811
gonzus
And yes, doing X % 8 shoud be enough of a hint that the result fits in a u3.

1554216827
andrewrk
I can't remember the issue description, but it's there somewher

1554216915
andrewrk


1554216930
andrewrk


1554217066
gonzus
I love those two issues.

1554217824
gonzus
Since I'm here, I have another basic question.

1554217835
gonzus
pub fn set(self: *Foo) {}

1554217863
gonzus
Is the usage of "*Foo" (as opposed to "Foo") what makes that function able to modify self?

1554217932
gonzus
If I leave the "*" out, I do get compilation errors for lines that modify any field in self.

1554217975
gonzus
So I guess it is. But I ask because the docs say that the compiler chooses when to pass a reference and when to make a copy. I guess that's from an optimization POV.

1554218024
andrewrk
gonzus,

1554218089
andrewrk
oh, you must have already seen this, apologies

1554218117
gonzus
Yeah, I did.

1554218131
andrewrk
the answer to your question is yes. when you pass a mutable pointer, the function body can write through the pointer

1554218220
gonzus
Ok. So this is actually nice. Because no matter what you pass (Foo or *Foo), you always access the data the same way (no "." vs "->"). And even if you pass Foo, the compiler may decide to pass a *Foo (for efficiency sake). But you MUST pass a *Foo if you want to modify the value.

1554218252
andrewrk
correct

1554218391
gonzus
I think a short explanation of this (passing parameters by reference to make them modifiable) would be a good addition to the docs.

1554218466
andrewrk
noted

1554218823
gonzus
If I create a struct (such as Point), is there a standard method name to define, so that I can use printf to print it? Can you point me to docs / examples?

1554218859
scientes
zig doesn't have interfaces, because that would bloat the run-time

1554218874
scientes
so I don't think you can do that

1554218891
andrewrk
you can do that

1554218948
andrewrk
gonzus, here's an example test that does it:

1554218974
andrewrk
there's no runtime bloat, it uses reflection to find out if you define this method and then calls it

1554219013
gonzus
Great, thanks. Looking into that example.

1554219030
andrewrk
don't be afraid of that function prototype, you just call the output function with `[]const u8` values

1554219085
andrewrk
and if you want to use formatting facilities with the output function, that's the example you're looking at

1554220335
bheads_


1554220337
bheads_
zig build-exe test.zig --library c -target x86_64-linux-musl

1554220349
bheads_
getting this error on debian:  posix_spawn failed: Too many open files

1554220375
bheads_
did I miss a step when building zig for musl?

1554220583
scientes
bheads_, i'll have a patch in a sec

1554220622
bheads_
nice, is the compiler leaking file descriptors?

1554220641
scientes
well my patch wont fix that

1554220656
scientes
the default limit is 1024 which is quite low

1554220672
scientes
and is kept low to not break applications that use select()

1554220711
bheads_
sure, but we shouldn't have to change users open file limit to compile

1554220876
scientes
its just for the process

1554220881
andrewrk
bheads_, hmm that's weird. I don't know why zig would have more than a handful of files open at once

1554220928
tgschultz
btw gonzus, the `u0` was a result of `u1` requiring a type with Log2(1) bits to shift by.

1554221000
bheads_
bumped the soft limit up   ulimit -Sn 2048

1554221006
andrewrk
yes the number of bits you are allowed to shift a u1 by is 0.

1554221049
scientes
bheads_, hard limit defaults to 4096

1554221059
scientes
so see if that works

1554221063
bheads_
yeah but it was hitting the soft limit

1554221066
bheads_
ulimit -Sn 2048   worked

1554221077
andrewrk
it also might have worked if you changed nothing and tried again

1554221090
andrewrk
I don't know why this error occurs

1554221102
bheads_
I have tried multiple times on two different machines

1554221117
bheads_
both debian

1554221122
scientes
look at strace -e trace=open and figure what is geting opened

1554221734
scientes
yeah with trace=openat you can see it is opening up the work from lib/zig/libc/(musl|include)

1554221749
scientes
to implement @cInclude()

1554221782
andrewrk
@cInclude? you mean -isystem args passed to the child process?

1554221828
scientes
ahh, i think it is leaking fds with the caching code

1554221839
scientes
cause the other ones are getting re-user

1554221911
andrewrk
sounds like a bug. the caching code is supposed to close all fds when done

1554221957
andrewrk
I don't see anything obvious

1554221963
scientes
ahh yes found it

1554221971
scientes
oh no

1554222001
scientes
ahh there it is

1554222378
scientes
andrewrk, you could use __attribute__((cleanup))

1554222419
andrewrk
scientes, thanks for the fix, looks good. does the strace look better?

1554222425
scientes
yes

1554222446
andrewrk
I'd rather not use attribute cleanup in stage1

1554222455
andrewrk
but yeah errdefer would have prevented this

1554222482
daurnimator
andrewrk: did we get anywhere with a 'may longjmp' annotation?

1554223770
gonzus
tgschultz yeah, I see that now. Thanks.

1554232096
gonzus
I decided to move to zig head (with brew install --HEAD zig)

1554232128
gonzus
Now when I compile anything I see these messages:

1554232208
gonzus
Warning: Unable to write cache file '/Users/XXX/Library/Application Support/zig/stage1/exe/1uvZ9H2R-YSuuebH14sv$bO4DRYGGw1GYFIA9O2brRJbX5AaqLnUF4hBoxSMYUgA.txt': file system error

1554232227
gonzus
The tests still run, so this is indeed a warning.

1554232259
gonzus
The file is created and has perms 644 and correct owner, but 0 byts.

1554232262
gonzus
*bytes

1554232270
andrewrk
hmm. I should make that have a more detailed error message

1554232471
gonzus
Also, this is driving me nuts: I know I can use {x} to print a hex value. Can I give it a specified width, and tell it to prepend it with zeros if needed?

1554232832
andrewrk
gonzus, {x2} will pad to 2 digits

1554232905
andrewrk
gonzus, I pushed a commit that will print a more detailed error message for you

1554233039
bheads_
Warning: Unable to write cache file '/home/bheads/.local/share/zig/stage1/h/kRwhZJtZEKdPZQRpYSDhcOUed2lmmyCv7qmIO8fv8Y_3OVG1ir4qe2b7MCnH4YDU.txt': unexpected seek failure

1554233043
bheads_
see this as well

1554233099
andrewrk
bheads_, do you have a source build? can you print errno at src/os.cpp:2051?

1554233208
bheads_
errno = 9

1554233221
andrewrk
never mind - I started getting the message too on my mac

1554233296
bheads_
started showing up after I pulled 27e31f04758d95cb7cf51a74e2a3903553ce3bc5

1554233312
bheads_
my guess is the fd is closed early

1554233315
andrewrk
I see the problem

1554233417
andrewrk
fixed gonzus bheads_

1554233435
andrewrk
scientes, the fd leak fix needed a check for return_code != ErrorNone

1554233695
gonzus
\o/

1554233775
bheads_
looks good!

1554234115
gonzus
andrewrk, {x2} worked perfectly, thanks. I am now upgrading to HEAD.

1554234162
scientes
how about the bit functions, like @clz(), should they take a type or not? andrewrk

1554234466
gonzus
andrewrk, I can confirm the bug is gone.

1554238084
gonzus
Anybody around? Testing my local IRC client...

1554243616
andrewrk
scientes,

1554243783
scientes
I don't understand the use-case for fshr/l

1554243792
scientes
not that they arn't useful, but i'm curious

1554243846
scientes
According to Andy Glew (dead link removed), applications for funnel shift include fast misaligned memcpy;

1554243849
scientes
Ahhhh, that makes sense

1554243875
scientes
and it is also a way to implement rotateright/left

1554243889
scientes
so it is a more general rr/rl

1554246987
andrewrk
whew. I think

1554247008
andrewrk
going to do my 3 mile run while I wait for assertions-enabled tests to run

1554247775
scientes
3 miles wow

1554247785
scientes
well, sometimes I swim a mile

1554247830
ijneb
I should really get a new bike and start doing that again

1554248606
mikdusan
nice!

1554248636
mikdusan
well nice at the merge. i’m not impressed by any of your athletics; wink!

