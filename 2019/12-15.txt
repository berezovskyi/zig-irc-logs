1576368257
daurnimator


1576369660
pixelherodev
"@panic(std.fmt.allocPrint(allocator, "Error parsing value: {}!\n", err) catch @panic("OOM"));" heh

1576370598
pixelherodev
... oddly enough, that results in Zig segfaulting

1576370602
pixelherodev
The compiler, not my code

1576370648
pixelherodev
I can't imagine why

1576370651
pixelherodev
/s

1576370675
pixelherodev
Huh... actually, it's segfaulting if I have an open-ended else clause for the error handling

1576370697
pixelherodev
Or at least, a panic under any circumstances in such a clause

1576382084
pixelherodev
Strings work!

1576382094
pixelherodev
I don't need stupid comptime asm workarounds anymore

1576382104
pixelherodev
`a3x.Puts("Hello, world!\n");` works :D

1576383236
pixelherodev
Here's another fun screenshot:

1576383916
pixelherodev
daurnimator, did the mixin streams get merged upstream yet?

1576383993
daurnimator
pixelherodev: nope.

1576384013
daurnimator
haven't even sent that PR... still waiting for andrew to merge the Random mixin one

1576384381
pixelherodev
That's what I figured

1576384384
pixelherodev
On the topic of mixins

1576384397
pixelherodev
What's the correct way to say "a parameter of type mixinbase"?

1576384407
pixelherodev
e.g. if three structures A B and C mix in D

1576384420
pixelherodev
Is there a way to have a single pointer type the can point to all of them?

1576384424
pixelherodev
Or does it have to be of type var?

1576385698
daurnimator
pixelherodev: it has to be of type `var`

1576385791
daurnimator
pixelherodev: though I hope

1576385818
daurnimator
pixelherodev: that way we can have a `hasMixin(MyMixin)` or similar

1576385846
pixelherodev
That's what I"m hoping too

1576385969
pixelherodev
I'm*

1576387007
pixelherodev
The fact that I can actually read this is astounding: `if (context.scope.list.at(blockindex).Variable.value.BasicBlock == self) `

1576387027
pixelherodev
A buuuunch of nested structs / tagged unions / an array list :P

1576387342
pixelherodev
Another nice thing about Zig is that you can safely delete `self`/`this` since it's just another variable :)

1576407175
Snektron
You can do that in c++ too, sadly some people on a project i had to work on decided to use that as well

1576407644
mq32
Snektron: you can do horrible things in C++

1576407738
mq32


1576410070
Snektron
ah yeah thats one of those cases of undefined behaviour which will work pretty much always but strictly you can't rely upon them

1576410079
Snektron
another fun one is pointer comparison

1576410115
Snektron
Pointer comparsion is ub unless both pointers point to the same object or members of it, or point to elements of the same array iirc

1576410176
Snektron
Taking the address of a member of an object which is not in a valid storage location is also undefined behavior

1576410335
mq32
Snektron: yep

1576410363
mq32
it's weird at first, but is also kinda logical if you know how some architectures work and what the C compiler

1576410376
Snektron
if you think about it, std::launder is very logical: X in the example has a const member, and thus the compiler may inline that value

1576410390
Snektron
so if you change the object X, the const value may become different

1576410428
mq32
yeah

1576410436
mq32
it's weird at first, but makes sense in some cases

1576410468
Snektron
I think C doesn't have this problem because const values aren't actually const

1576410484
Snektron
there was some post about that a while ago

1576410493
Snektron
Zig doesn't have that problem because struct fields may not be const

1576410539
mq32
yeah

1576410560
mq32
also something like "transmogrify" is horrible code :D

1576410730
Snektron
i think the std uses something like that

1576410863
Snektron
if you swap the allocator of one of the built in containers, it does something like `std::swap(static_cast<Allocator*>(this), static_cast<Allocator*>(other))` or something

1576410884
Snektron
Also something with empty base class compression

1576411396
mq32
yeah, cpp is weird

1576411422
mq32
has somebody here have experience with lowlevel communication in linux (mac/ieee802.11 layer)?

1576411443
mq32
i'd like to communicate out-of-band with known devices over WLAN, but cannot find much resources/documentation on that topic

1576426581
gonzus
I have a question about enums. Say I have `const Dir = enum { N, S, E, W };` -- is there an idiomatic way to iterate over the four values? I tried `for (Dir) |dir| {}` but it didn't work.

1576426583
gonzus
eijhccligjcdrnkvjkjjklbukklrbkdhnkiltgecgbhg

1576426593
gonzus
Sorry for that garbage.

1576426709
gonzus
I get `error: container 'Dir' has no member called 'len'` -- should I be looking at creating an iterator for the enum?

1576429116
lupine
Mmm, modhex

1576429264
Snektron
gonzus, try using @typeInfo: `for (@typeInfo(Dir).Enum.fields) |field| std.debug.warn("{} {}\n", .{field.name, field.value});`

1576431682
pixelherodev
Snektron, my point is I could do that in Zig and it's defined

1576436485
data-man
gonzus, you can use std.meta.fields

1576436597
pixelherodev
Whereas in C++ it's UB that just usually works

1576441795
Snektron
deleting this is perfectly defined

1576445092
pixelherodev
Snektron, in C++?

1576445115
pixelherodev
... what about deleting this within the constructor?

1576445133
pixelherodev
Because  might be thinking of that

1576445384
Snektron
not sure about in a constructor

1576449183
daurnimator
New zig task: write an NSS module

1576449570
pixelherodev
A wat?

1576449695
daurnimator
pixelherodev: nss. it's the magic that runs in almost every process to list users on a system/passwords/etc

1576449712
pixelherodev
Ah

1576449713
pixelherodev
Thanks

1576449735
daurnimator
--> if you can getpwnam, it looks at /etc/nsswitch.conf, dlopens the relevant modules, and asks them in turn.

1576449743
daurnimator
s/can/call/

1576449795
daurnimator
The way e.g. ldap works, is that it adds a shared object libnss-ldap.so to your system, which is loaded into every process that ever asks for user info

1576449812
daurnimator
--> zig is a great choice of language to write these modules in

1576449842
daurnimator
last night I was working on a system where we ended up using libnss-pgsql.... which has been unmaintained since 2006. Would love to rewrite it in zig.

1576449948
pixelherodev
For structure member functions, is it better to define the first parameter (self/this/whatever you want to call it) as `T` or as `*T` if it doesn't need to modify the original?

1576449960
pixelherodev
That is to say, is there a performance benefit to passing as a pointer?

1576449962
daurnimator
pixelherodev: always prefer T if you can

1576449987
daurnimator
pixelherodev: if you write T, zig gets to choose between T and *T and picks whatever is faster. if you write *T zig has no choice

1576449997
pixelherodev
Gotcha

1576449999
pixelherodev
Thanks!

1576450013
pixelherodev
Then it's just a matter of whether I actually need *T here...

1576450055
pixelherodev
I'm modifying an object pointed to by a field in T (e.g. self.a is an array list of which an item

1576450058
pixelherodev
So I think T is fine

1576450072
pixelherodev
Since the array list itself isn't being modified, and thus T itself

1576450373
pixelherodev
So yeah, thanks

1576454224
merlyndmg
Is it possible to do a comptime assert when passing a `union(enum)` value to ensure that it is a subset of values?E.g. `std.debug.assert(op == .BoolAnd or op == .BoolOr);`

1576454259
merlyndmg
The above is not erroring for me at compile time

