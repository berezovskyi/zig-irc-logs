1565655188
daurnimator
fengb: mq32: I have lots of ideas around how a scheduler should work. Happy to have a chat about it

1565655239
fengb
I think mq32 is on European time :P

1565655279
gonz_
CET, not too bad atm

1565655290
gonz_
Should be 02:14 there atm

1565655523
fengb
He mentioned he's going to sleep

1565655524
fengb
I'm mostly concerned about accidentally leaving out an event loop and things just don't work as expected

1565659650
daurnimator
autodidaddict: fengb: targeting wasm you want build-exe not build-lib. I fell into that myself

1565659797
daurnimator
fengb: what do you mean "leaving out"

1565659825
daurnimator
fengb: so one thing I want to do is automatically create the event loop

1565659851
daurnimator
fengb: essentially have a global pointer `current_event_loop`, which is a linked-list of nestable event loops

1565659886
daurnimator
you can "get current event loop", which is just a pointer access

1565659926
daurnimator
but then: low level async operations pass

1565659967
daurnimator
higher level functions would use the current loop. or if it's null: create an event loop; do the operation in it; and then destroy that loop

1565659993
daurnimator
I can demo the equivalent in lua if you want :)

1565660004
fengb


1565660013
fengb
This mentions using build-lib

1565660034
fengb
And I’ve been using it for fundude

1565660076
fengb
No external libs though...

1565660079
daurnimator
fengb: ah. sounds like that conflicts with the advise in 2910

1565660156
fengb
I think the reasoning is that wasm-freestanding behaves like libraries since there’s not an actual main, whereas something like WASI provides an actual main

1565660468
fengb
daurnimator: I actually have no idea how an event loop works. I just use it everyday in JS land >_>

1565661497
daurnimator
fengb: there's many ways to do them; but very few designs are composable with other event loops

1565661518
daurnimator
and that is super important for writing libraries

1565671707
hspak
I ported the perl geteltorio script into zig and just updated my BIOS with it :D

1565672765
daurnimator
hspak: I don't know what that is.... but, cool :P

1565672832
daurnimator
ah found

1565677127
abbiya
hello

1565677144
abbiya
i am trying to rewrite helloworld.c in zig with cimports

1565677159
abbiya


1565677178
abbiya
i am getting error compiling this

1565677180
abbiya
zig build-exe main.zig --library stdio --library c

1565677182
abbiya
/home/seshachalamm/httpc/main.zig:4:14: error: expected type '[*c]const u8', found '[12]u8'

1565677184
abbiya
s.printf("Hello world\n");

1565677186
abbiya
^

1565677338
mikdusan
`_ = s.printf(&"Hello world\n\x00");`

1565677596
abbiya
error: expected type '[*c]const u8', found '*[13]u8'

1565677598
abbiya
_ = s.printf(&"Hello world\n\x00");

1565677732
mikdusan
maybe old version of zig? zig version

1565677761
daurnimator
you probably want `c"hello world"` for a C string

1565677777
daurnimator
(which will be the correct type; and also null terminated)

1565677994
abbiya
const hw = c"Hello world\n";

1565677996
abbiya
_ = s.printf(hw);

1565678018
abbiya
thanks, i am going through docs

1565678227
abbiya
is there a benefit of writing c code as zig code instead of plain old c ?

1565678431
daurnimator
abbiya: pros: more safety; nicer language (subjective). cons: not all macros will work; translate-c has bugs

1565678457
daurnimator
(bugs in that they crash the compiler; or leave out certain types; no known bugs in code emitted if it succeeds AFAIK)

1565678474
abbiya
ok

1565678483
mikdusan
pros: comptime, slices, optionals, error unions, union enums

1565678511
daurnimator
mikdusan: those would be pros of writing zig code as zig code; vs "C-in-zig"

1565678775
gonz_
abbiya: Are you looking to use Zig mostly to write code that ends up being used from C or things using C for FFI, or are you looking to make freestanding things with limited interaction with C libraries?

1565679156
gonz_
For learning the language I have a suspicion that the latter is a bit easier and probably more informative in the end.

1565680478
mq32
hey

1565680487
mq32
i have two separate folders (lib and app)

1565680500
mq32
how do i @import the main file from lib?

1565680897
daurnimator
mq32: generally... you don't. unless you're looking for @import("root")?

1565680958
mq32
daurnimator: my favourite would @import("mylib")

1565680968
mq32
but i can also do @import("../lib/main.zig")

1565681247
mq32
okay, i cannot use "../lib/main.zig2 :(

1565681261
mikdusan
why not?

1565681279
mq32
error: import of file outside package path: '../gl/main.zig'

1565681295
mikdusan
zig --main-pkg-path ..

1565681331
mq32
hm

1565681343
mikdusan
default pkg path is "."; change it to ".." and @import("gl/main.zig" should be found

1565681363
mq32
but i'd like to build a package and import it

1565681372
mq32
right now i've done a lib step, but that probably doesn't what i want

1565681437
mikdusan
oh i c.

1565681496
mq32
ah

1565681506
mq32
exe.addPackagePath("gl", "gl/main.zig");

1565681525
mq32
this looks right and enables me to @import("gl")

1565681581
mikdusan
i'm guessing that's build.zig analog to `--pkg-begin gl ../gl/main.zig --pkg-end`

1565681626
mq32
yes, it is

1565681631
mq32
--verbose verifies that

1565681642
gonz_
If something depends on something else, wouldn't it make more sense to actually place it in that subdirectory?

1565681656
gonz_
Isn't that the issue you're running into with `..`?

1565681690
mq32
gonz_: I'm trying to create both package and a test application that uses that package

1565681730
mq32
but i can report progress:

1565681757
mq32


1565681759
mq32
this works now :)

1565704200
fengb


1565704203
fengb
Why doesn't this compile? :(

1565704232
scientes
WHY U NO COMPILE!

1565704299
scientes
fengb,

1565704584
samtebbs
You'll be wanting to put a `comptime` friend in there

1565704684
fengb
Oh... why doesn't it automatically comptime it? :/

1565704699
fengb
I literally put comptime everywhere else lol

1565704705
fengb
Thanks

1565704724
samtebbs
Ah I see scientes shared the same

1565704776
samtebbs
Possibly because you don't want the compiler running anything it can at comptime

1565704810
scientes
yeah esp. functoins

1565704841
daurnimator
huh?

1565704856
daurnimator
I generally want the compiler to be doing

1565704876
scientes
yeah but sometimes it can make the code larger

1565704883
daurnimator
obviously as soon as something hits e.g. a syscall or inline assembly then it can't comptime it. but otherwise...

1565704903
fengb
But it does shift things into comptime already. I suppose right now it only does top level stuff by default

1565704915
samtebbs
daurnimator: That's the problem, when it hits something it would error out saying "Can't evaluate this constant blah blah..."

1565704926
samtebbs
And that would be confusing as heck

1565704941
scientes
samtebbs, that is easily fixable

1565705055
samtebbs
scientes: Go on

1565705071
scientes
you just have to have a flag for every function

1565705087
scientes
similar to how we handle has_side_effects()

1565705115
scientes
or you just try it, and the fall back

1565705128
scientes
I thought we already do this to some degree with optimizations on

1565705154
scientes
the main issue I see is that sometimes it would make a binary much bigger, and thus slower

1565705170
scientes
and THAT is a difficult problem

1565705185
samtebbs
A flag in the zig source?

1565705192
scientes
no, in the compiler

1565705213
scientes
we also need to support user-supplied flags however, const and pure that gcc has

1565705286
samtebbs
Ok, how does the compiler know what has side effects?

1565705309
samtebbs
Theoretically, any instruction could

1565705346
scientes


1565705346
scientes
bool ir_has_side_effects(IrInstruction *instruction) {

1565705532
samtebbs
I see, so this happens at the zig IR level

1565705559
samtebbs
I really need to learn how comptime code is run. Do you know scientes ?

1565705577
scientes
samtebbs, i've implemented quite a bit of it

1565705581
scientes
for my SIMD patch set

1565705592
scientes
and there is a big over-haul that is needed

1565705604
scientes
so that you can comptime reference inside an array

1565705628
scientes
like (&a[4]).* + 5

1565705649
scientes
samtebbs, comptime is just an interpreter of the same language

1565705668
scientes
intepreters are not new, what is novel is having an interpreter for the

1565705714
samtebbs
I thought so, so there's a chance that there's discrepencies between what the interpreter does for a certain instruction, and what the native hardware does for the machine code corresponding to that instruction

1565705739
scientes
samtebbs, that's why we have tests :_)

1565705763
fengb
Is it similar to Lisp macros?

1565705771
scientes
no

1565705798
samtebbs
I'm impressed at how robust it is, I've never encountered any issues.

1565705802
fengb
I suppose Lisp is just AST manipulation so there's very little actual logic

1565705818
samtebbs
Although that could be because the vast majority of my code runs at runtime

1565705833
mq32
fengb: yeah. you can implement a "full" dialect of LISP in sed (stream ed) by pure text replacement

1565705840
scientes
samtebbs, if you try to do something fancy you will run into issues

1565705849
scientes
not correctness, but that it is still limited in what it can do

1565705962
fengb
I'm always impressed that comptime does what I want. I didn't have to learn anything new to make it work

1565706086
scientes
that's the whole point

1565706088
scientes
and its great!

1565706105
fengb
I'm happy it works so well

1565706153
fengb
My brain always explodes with macros

1565706313
samtebbs
Is Zig the first language/toolchain to have the concept of comptime? I know other languages have metaprogramming but it feels different

1565706339
mq32
samtebbs: it's the only language i know that does it so

1565706369
fengb
I think it's the only one that does it seemlessly. Every other one does it with special syntax and/or semantics

1565715643
bheads
here is a fun one:   PHINode should have one entry for each predecessor of its parent basic block!

1565715764
Tetralux
fengb: Jai has it too.

1565715808
fengb
Jai isn't real. But I thought it has special syntax for that (when instead of if)

1565715819
Tetralux
That's Odin.

1565715824
Tetralux
Jai does #if

1565715846
Tetralux
Also saying "it isn't real" is overly pedantic - but I know what you mean.

1565715852
fengb
But still, it's different syntax. Zig tries to let you support either in any context

1565715862
Tetralux
It's different for a reason.

1565715871
Tetralux
To make it clear you want it evalulated statically.

1565715877
fengb
My point is Zig does it both semantically and syntactically

1565715882
Tetralux
Otherwise, the code you write is identical.

1565715896
Tetralux
I'm not sure I understand what you mean xD

1565715964
fengb
Does Jai let you convert any function to run at compile time?

1565715973
Tetralux
There's no conversion.

1565715980
Tetralux
All code can run at compile time.

1565716015
fengb


1565716016
fengb
So this would be okay?

1565716019
Tetralux
You either #run it and the result becomes a constant value in your program, or you #if a compile-time known expression.

1565716035
Tetralux
Yes.

1565716041
Tetralux
In Jai, that'd be:

1565716069
Tetralux
min :: (x: $T, y: $U) Min(T, U) { ... }

1565716079
Tetralux
Or rather: `min :: (x: $T, y: $U) -> Min(T, U) { ... }`

1565716082
Tetralux
(Note the ->)

1565716112
Tetralux
That procedure could be run at compile or runtime.

1565716157
Tetralux
You'd just call it as `#run min(x, y)`, `#if min(x, y) == n` or call it normally in a comptime-run function.

1565716224
Tetralux
(.. `i :: T` is the equiv of `const i: T = zeroed-but-with-default-field-values-set` in Zig.)

1565716271
Tetralux
(.. In the case above, it's equiv to `pub fn min(...) {...}`

1565717814
Tetralux
Q: What actually DOES the ArenaAllocator do?

1565717824
Tetralux
Like - I'm used to arenas being just a mempool.

1565717830
Tetralux
But glancing at the code for it

1565717844
Tetralux
Looks more like it's allocating a single bucket for each thing you alloc.

1565718001
fengb
It’s a manual arena that you destroy at the end of the context

1565718171
fengb
You generally initialize it at the beginning of a known lifetime and destroy it at the end, like an http request

1565720797
andrewrk
we have a green CI for the async functions branch

1565721077
fengb
🥳

1565721239
torque
maybe this has been answered and I missed it, but for the new async semantics, since functions can be synchronous or async based compile-time configuration and the caller is not supposed to have to care, what happens when you do `var myframe = async someFunction()` where someFunction is actually synchronous? does the frame just act as a simple wrapper for the result (and would calling cancel on it still result

1565721241
torque
in e.g. errdefers getting called)?

1565721251
Sahnvour
awesome

1565721304
torque
s/errdefers getting called/errdefers getting run/

1565721706
fengb


1565721737
andrewrk
torque, that's something I'm actively contemplating. I just re-opened

1565721846
fengb
Vague thought: is this some form of baby RAII?

1565721870
andrewrk
what even is RAII?

1565721878
fengb
Probably no need for copy, but we'll need to pair acquire and release

1565721885
andrewrk
people use RAII to mean conflicting things

1565721896
fengb
Honestly, I don't even know lol

1565721950
andrewrk
this is a bit different right? C++ has the concept of a type having a constructor/destructer. this is function-based

1565721956
fengb
Yeah

1565721976
andrewrk
as an example, std.process.argsAlloc has std.process.argsFree

1565722003
torque
andrewrk, gotcha. really excited about the async semantics, and having the freedom to use synchronous/async code interchangably is really cool

1565722004
andrewrk
if you just tried to put the destructor of [][]u8 then you might free it wrong. in this case there is only 1 allocation, but argsFree knows that

1565722130
andrewrk
that interchangably part is not done yet

1565722139
andrewrk
but I'm hoping to make significant progress on that today

1565722174
torque
I guess I should have said it's a really cool goal

1565722203
fengb
So is this proposal adding a sort of "annotation" to indicate the cleanup cycle?

1565722316
fengb
I just read the updated title >_>

1565722320
andrewrk
fengb, yes. in the context of cancel, what that means is that @Frame(func) for a function that is inferred to be non-async, is nothing more than a wrapper for the return type of the function, which will have the answer after async returns

1565722330
Sahnvour
andrewrk: really glad this is being reconsidered. weakiest point of zig for me atm

1565722339
Sahnvour
weakest*

1565722366
andrewrk
I'm super open to syntax suggestions on this one. It's a bit tricky because functions may or may not return error unions

1565722745
bheads
782, time to look at ownership?

1565723144
fengb
Stupid question: is cancelled British or American?

1565723161
halosghost
both?

1565723170
halosghost
(afaik)

1565723182
fengb
And canceled is distinctly American?

1565723198
torque
two ls is primarily british english I believe, yes

1565723214
fengb
I wonder where I learned double-el

1565723254
nrdmn
has anyone looked into building zig with BUILD_SHARED_LIBS=ON?

1565723298
halosghost
huh

1565723300
halosghost
fascinating

1565723855
bheads
in fengb  foo example (

1565723915
bheads
in a normal fn call ownership would transfer from .create to  result in scope, then transfer to the return

1565723940
bheads
in the async case the return would not transfer ownership when canceled

1565723994
bheads
in fact you can also detect ownership when transferred to underscore:   _ = try foo();

1565724479
bheads
I also wonder if you could make the ownership strongly typed,   ie:   the ownership type is tied to the allocator that created it, and would be an error to free it with a different allocator

1565724584
Tetralux
Just my two cents, most of the time, I'd be taking ownership of the thing that's getting returned.

1565724594
bheads
correct

1565724626
Tetralux
I would not be allocating something only to want to clean it before returning.

1565724630
Tetralux
I'd actively want to avoid that.

1565724642
Tetralux
I might on a File though.

1565724649
bheads
the point is to detect that you do free it correctly

1565724666
Tetralux
A common pattern I have is to never clean up my memory.

1565724679
bheads
you can say the same with files

1565724682
Tetralux
It gets dealloc'ed anyway on process exit and my user doesn't want to have to wait for it.

1565724688
bheads
but only true foe short lived programs

1565724708
Tetralux
Indeed.

1565724716
Tetralux
Though using a freelist, or scratch allocator is the same effect.

1565724740
Tetralux
Random allocations is something I like to avoid.

1565724765
Tetralux
So most of the time it's a scratch allocator, ring buffer, memory pool, or after-process-exit.

1565724794
Tetralux
If I'm deallocing memory, it almost certainly not on the heap.

1565724796
Tetralux
Or if it is

1565724798
Tetralux
..rather

1565724811
Tetralux
It's in a bucket array or something.

1565724826
Tetralux
If it's just a random allocation, then it's prob not final code.

1565724841
Tetralux
It's probably just hacked together to get it working.

1565724857
Tetralux
But I often skip that step and just use a pool or something to begin with.

1565724917
Tetralux
I do like the idea of annotating the proc with this though.

1565724938
Tetralux
`var file = deferclean try File.openRead(filename);`

1565724965
Tetralux
`var res = errclean try Res.get(address);`

1565724999
Tetralux
`var res = noclean try Bank.get(0);` // manual cleanup

1565725015
Tetralux
I'm not sure about noclean really.

1565725029
Tetralux
I'd like something clearer than that ideally

1565725038
Tetralux
But manualclean is too long.

1565725041
Tetralux
I'd be using it all the time.

1565725070
Tetralux
I do like the clean/errclean/noclean thing though.

1565725072
Sahnvour
allocating from a pool instead of the heap directly does not spare you from having to free it (except if you don't care)

1565725100
Tetralux
It does not spare you, no. But it does spare you from having to free each individual thing.

1565725115
Tetralux
.. so you'd noclean the individual things.

1565725120
scientes
yeah arena alloc is great

1565725123
Tetralux
(because attempting to clean them up is a waste of time.)

1565725125
Sahnvour
not necessarily

1565725129
scientes
its also much faster

1565725149
scientes
and when you are going to free is soon anyways

1565725171
Tetralux
Alloc a gig of virtual memory, never free it, use pool on it xP

1565725172
Sahnvour
if you use a pool for a long-lived piece of code, you may want to free individual items to keep total memory usage low

1565725184
Tetralux
You would not free, you'd use a freelist.

1565725189
scientes
Tetralux, haskell allocs a terabyte of memory and never frees it

1565725202
Sahnvour
that's exactly a free

1565725215
scientes
the compiler that is

1565725219
Tetralux
scientes: give whoever made virtual memory a cookie

1565725232
Tetralux
I mean, no... not a free, literally. But I know what you mean.

1565725268
Sahnvour
you're doing poolAlloc.free(thing), that's a free :p

1565725274
Sahnvour
it does not have to give memory back to the OS

1565725274
gonz_
Not a `free` as much as a "have your memory back, bitch, I'm done"

1565725316
gonz_
If we're talking about the "allocate a shitton, never actually free, just finish" methodology

1565725469
Tetralux
I like the BucketArray philosophy for long-running stuff.

1565725501
Sahnvour
I was specifically talking about freeing

1565725504
Tetralux
You allocate N Ts at a time, if you use all of them at any one moment, allocate another N Ts, link them together.

1565725535
Tetralux
I call a Pool, when you allocate a bunch, and then free all at once.

1565725559
Sahnvour
I don't think that's how this word is usually understood, but maybe it's just me

1565725575
Tetralux
I call a freelist when you have a bunch of Ts in an array, and each one is either being used or not.

1565725589
Tetralux
Casey uses a linked-list to keep track of those, for instance.

1565725600
Tetralux
( .. which ones are empty, that is.)

1565725609
Tetralux
Also yeah

1565725615
Tetralux
I'm not into the terminology.

1565725617
Tetralux
xD

1565725635
Tetralux
I just like one-or-two-syallable names for things.

1565725644
Tetralux
Like Arena, Pool, FreeList.

1565725663
Sahnvour
what's the difference between your pool and arena then ?

1565725673
Tetralux
Was just gonna say - the first two are actually kinda the same.

1565725680
Sahnvour
:P

1565725693
Tetralux
Both may or not may not take a fallback allocator or something.

1565725699
Tetralux
Probably not.

1565725714
Tetralux
But if one did, Arena prob would and pool wouldn't.

1565725731
Tetralux
There's also Scratch, which is just a ring buffer on top of a Pool.

1565725775
Tetralux
It's also worth noting that a bucketarray can be on top of a pool too. ;)

1565725793
Tetralux
So effectively, the elements are damn-near contiguous.

1565725810
Tetralux
No - actually they

1565725858
Tetralux
So much fun x)

1565728686
nrdmn
Tetralux: I have a list of memory slices. Which allocator do I want to use to allocate memory out of them?

1565728823
Tetralux
Where do you the slices come from?

1565728852
Tetralux
Is the data in them something you wanna keep around?

1565728868
Tetralux
Or is it more just that you allocate some space, run out of it, and so allocate some more space?

1565729072
nrdmn
the slices are just empty space and I can use them for anything

1565729321
Tetralux
Do you have a fixed number of them, or is just "make as many as you need dynamically"

1565729377
Tetralux
If the latter, mem.ArenaAllocator basically.

1565729390
nrdmn
I have a fixed number of them

1565729442
Tetralux
I don't really have enough information to tell you with confidence xD

1565729454
fengb
Is it something like a FixedBufferAllocator but you need to use a few different ones and pretend it's one?

1565729467
fengb
few different buffers*

1565729514
Tetralux
It depends on the lifetime of the stuff in the slices, and how big they are.

1565729591
nrdmn
Tetralux: alright, I'm interested in OS development and if you're working directly on the hardware you usually get a list of non-contiguous memory areas that you can use with some areas in between that you're not supposed to touch

1565729605
Tetralux
..because a process is using them?

1565729641
fengb
I dont' think there's an existing allocator that tries to pretend its one memory space

1565729650
fengb
But... it's possible!

1565729678
THFKA4
because that's how the hardware is wired up on the bus i think

1565729696
nrdmn
Tetralux: because the device's firmware is using it, or because devices have their memory mapped there

1565729781
nrdmn
if you're using linux, you can try `dmesg | grep BIOS-e820` to see such a list of usable and non-usable memory areas

1565729822
Tetralux
Hmmm. Depends on scope a bit, but my first thought is a freelist-style thing for tracking empty space.

1565729849
Tetralux
That gives you a []u8 of empty space, which you then divvy up when someone wants to allocate.

1565729894
fengb
We also don't have a good general purpose allocator

1565729894
Tetralux
If you wanted to be somewhat smart about it, you might try to store things of similar size next to each other, in a bucketarray.

1565729908
fengb
I'm curious if this should be a part of the GPA or if it could be split out

1565729922
Tetralux
fengb: What part? xD

1565729929
fengb
The disparate memory spaces

1565729955
fengb
My zee_alloc is able to handle split segments... but it assumes all the blocks are of fixed size so that's no bueno

1565729974
fengb
(Theoretically... wasm doesn't ever provide non-contiguous blocks so I've never tested it)

1565729975
Tetralux
Better to have multiple GPAs, each on top of a freelist.

1565729994
Tetralux
And the freelists track empty space in each empty segment.

1565729995
fengb
I think the idea is to have 1 allocator. It'll be much easier to consume that way

1565730017
Tetralux
I was assuming the programmer specifically wanted to have several disparate spaces.

1565730045
fengb
If it's separate, we can just have FixedBufferAllocator sit on top of each buffer, and slap a GPA on top of that

1565730052
fengb
of each one*

1565730063
Tetralux
You can't reset a fixedbufferallocator without freeing it though right?

1565730084
fengb
Oh

1565730093
fengb
Well your GPA that sits on top can do the freeing

1565730096
Tetralux
Like, "I want you to forget that I ever alloced anything, but reuse the memory."

1565730112
Tetralux
free = give back to OS, btw.

1565730115
fengb
You can just reuse the memory with a new FBA

1565730226
Tetralux
Maybe virtalloc a big buffer, like stupid big, and then put all the similarly-sized big things at the far end and the similarly-sized small things at the near end.

1565730259
Tetralux
And then when the "ends" overlap, you alloc another big block and prepend the new one to a freelist.

1565730294
Tetralux
Well - I guess you'd actually want to append it - because you'd want to put small things that can actually still fit into the first block still.

1565730318
Tetralux
But maybe for speed, most things aren't gonna fit after some point, so then you prepend it.

1565730360
Tetralux
I should make a FBA that you can reset, and a bucketallocator for the stdlib.

1565730363
Tetralux
That'd be useful.

1565730371
Tetralux
And/or a scratch.

1565730377
Tetralux
RingAllocator*

1565730388
Tetralux
I'd use the heck out of those things.

1565730444
fengb
Just import zee_alloc :P

1565730470
fengb
(Don't. I've barely tested it with a real project)

1565730505
Tetralux
Should we have a constant-time mem.eql in the stdlib btw?

1565730519
fengb
Like a secure compare?

1565730525
andrewrk
there's an issue for contant-time mem eql

1565730532
Tetralux
fengb: precisely.

1565730555
fengb
That might actually be better for the default anyway. Same worst case and hard to use wrong

1565730593
andrewrk


1565730700
fengb
The mac build has been timing out regularly :/

1565730752
gonz_
The world is so crazy with regards to security nowadays. The amount and magnitude of things you have to care and know about is staggering.

1565730913
gonz_
Gone are the innocent days of buffer overruns and equally primitive things

1565730950
huuskes
there's an easy solution to that

1565730951
gonz_
When security was so bad stopping an SQL injection or buffer overflow kept pretty much everyone out

1565731146
gonz_
huuskes: If the solution is to use a managed language, some of those things are just punting the issue to someone else and hoping they have a solution.

1565731173
gonz_
The kinds of things you have to worry about nowadays are things that even other people could conceivably fail at.

1565731186
Tetralux
andrewrk: What's the over-under on allowing things like `var x, y: usize = 0;` ?

1565731195
gonz_
And indeed they have; we have security flaws deep in the stack, in the hardware, etc.

1565731215
huuskes
no, the solution is the hakuna matata way of life haha

1565731222
THFKA4
on the ARM Cortex-M3, the umull opcode takes 3 to 5 cycles to complete, the “short” counts (3 or 4) being taken only if both operands are numerically less than 65536 (so says the manual, but see below). Thus, such a multiplication should be made constant-time by forcing the high bits to 1.

1565731234
THFKA4
uhhh, are we going to have constant time ops per arch in stdlib?

1565731275
scientes
Tetralux, i had a similar proposal: x = y = 0;

1565731294
scientes
but I don't think it has much change (and I don't care much)

1565731298
scientes
*chance

1565731326
scientes
IBM cloud doesn't even offer PowerPC

1565731327
gonz_
huuskes: Ah, yeah. I half agree. There are obviously lots of cases where not caring just isn't acceptable, though.

1565731336
scientes
oh srry, wrong channel

1565731369
Tetralux
Surely the solution is to make a comptime program that able to scan every AST in your program and check it for weirdness :3

1565731403
huuskes
gonz_: like?

1565731418
mq32
gonz_: yeah it's creepy how hardware itself is vulnerable (see meltdown, spectre, …)

1565731605
mq32
also consttime would be a cool feature

1565731615
mq32
even if it just means to burn CPU cycles for nothing

1565731660
gonz_
huuskes: If you make it easy to leak someone's password because you're not up to date on how people can figure it out, that's not really acceptable. Even small, low impact deployments, if they're publicly accessible, can easily have flaws that ripple out to bigger deployments for many reasons.

1565731717
gonz_
There's just a world of hurt out there. I think it's creepy, as mq32 said.

1565731741
scientes
mq32, and that hardware is working as designed!

1565731810
mq32
scientes, gonz_: yeah. the question is? was it the right design?

1565731821
mq32
and i'm more on the "yes" side of the question

1565731835
scientes
mq32, ./crypto/modes/gcm128.c

1565731836
mq32
yeah, it makes security flaws, but this stuff brings a lot of performance

1565731839
scientes
mq32,

1565731863
huuskes
scientes: that's how I run my setup :)

1565731974
mq32
scientes: now i have to figure out how to get that into my bootloader setup…

1565731990
scientes
mq32, /etc/default/grub

1565731999
scientes
that debian and ubuntu

1565732002
scientes
fedora is different

1565732004
huuskes
if companies would stop collecting data through nefarious means there would be less need to get all gungho about security

1565732014
huuskes
sure it would some would be out of business but that's a risk I am willing to live with

1565732016
huuskes
:)

1565732045
mq32
scientes: something something efibootmgr

1565732047
huuskes
grammar is ahrd sometimes

1565732050
huuskes
so is spelling

1565732070
mq32
i'm using the efistub feature

1565732077
mq32
it's awesome except for changing kernel parameters

1565732190
huuskes
there are distros that dont use /etc/default/grub?

1565732258
mq32
huuskes: yeah sure

1565732264
mq32
i used syslinux a long time

1565732268
mq32
easier to configure than grub

1565732280
mq32
but now i just don't use a bootloader anymore :D

1565732289
mq32
efistub means you boot your kernel as the "bootloader"

1565732298
mq32


1565732308
scientes
yeah my computer is so old I still use BIOS

1565732356
mq32
ah good times

1565732356
mq32
but boot time is hillarious

1565732362
mq32
like … 20 seconds efi, 3 seconds linux boot

1565732374
scientes
yeah EFI is a POS

1565732384
scientes
chromebooks refuse to ship it

1565732439
huuskes
guess next time I inadvertently break my install I might try and set that up :)

1565732485
mq32
but don't forget to install a grub anyways

1565732491
mq32
or have a rescue stick ready

1565732512
huuskes
#YOLO

1565732515
mq32
:D

1565732856
Tetralux
How the hell is EFI so slow to boot?

1565732885
mq32
don't ask me, i dunno

1565732891
mq32
some Lenovo LOGO and it's doing "stuff"

1565732940
Tetralux
Also, is there a better way to do this:

1565732949
nrdmn
writing your own EFI apps is quite fun tbh

1565732967
nrdmn
and it gives you some understanding of what your firmware initializes before it loads your OS

1565732971
Tetralux
I wouldn't mind fiddling with that at some poiknt.

1565732989
Tetralux
Best get-started resources?

1565733043
nrdmn
Tetralux: the EFI spec. It's well written. Stay away from gnu-efi and edk2 until you know how it works

1565733157
Tetralux
By 'stay away' - the alternative?

1565733240
nrdmn
write your own to learn how the basics work, then switch over to either of them

1565733272
nrdmn
I'm currently working on bringing basic efi support to zig's standard library

1565733384
andrewrk
nrdmn, I just got the big branch I was working on green, so I should be able to merge that into master today and have a more balanced attention span for PRs & bugs

1565733390
nrdmn
basically efi apps are just relocatable exe files that get a list of function pointers passed to their entry point

1565733562
nrdmn
andrewrk: take your time :)

1565733827
mq32
nrdmn, how much work would a basic "graphics output" with EFI be?

1565733830
mq32
do you know that?

1565733925
nrdmn
mq32:

1565733971
mq32
oh cool!

1565733977
mq32
i have to take a look at that tomorrow

1565733988
mq32
i have a quite crazy project i want to port to EFI

1565734025
nrdmn
which one?

1565734051
mq32
a high performance basic interpreter

1565734061
mq32
similar to commodore basic 2.0, but for x86_64

1565734071
mq32
with visual output and faked video chip and everything :D

1565734081
mq32
so one EFI App would just be "BASIC"

1565734095
mq32
and you could boot your modern PC into a BASIC shell

1565734098
mq32
with PEEK/POKE, ...

1565734124
nrdmn
:D nice

1565734261
mq32
kinda, yeah :D

1565734993
mikdusan
granted it's wip; is this something that should work on rewrite-coroutines branch? maybe i don't even grok the syntax?

1565734995
mikdusan


1565735779
Tetralux
nrdmn: Interesting.

1565735815
Tetralux
Is there a way to discover what arch you're running on as part of the loading process?

1565735829
Tetralux
Or do you just have to compile the code for the arch you then attempt to load it on.

1565735864
Tetralux
Namely, is it possible for the EFI program to bundle code for multiple archs and then run the one it's loaded on?

1565735925
nrdmn
I don't think that is possible, but I'm not sure

1565736056
nrdmn
see 3.5.1.1 (page 87). To create a boot medium supporting multiple architectures, you can put one file for each architecture there and the firmware loads whatever it can

1565736211
Tetralux
Page 87 of what?

1565736284
nrdmn
of the efi spec, version 2.8

1565736285
nrdmn


1565736388
Tetralux
Oooooo

1565736390
Tetralux
Interesting.

1565736713
andrewrk
mikdusan, that's the next thing I'm working on, need to figure out how cancel works first

1565736761
andrewrk
your syntax is good

1565736907
shachaf
Do Zig coroutines support local use with explicit context switches (like e.g. Python generators) as well as the pseudo-thread use?

1565736915
shachaf
I guess I should watch that video I still haven't looked at.

1565738353
daurnimator
shachaf: they're not coroutines any more. they're "async functions"; where that means that they return at a time other than when they are called

1565738391
daurnimator
shachaf: but yes. the tricky thing (sometimes) though is that you need to resume the frame from the innermost suspend; not the outer one

1565738404
shachaf
What's the distinction?

1565738470
shachaf
I agree that that's a tricky thing in unifying these two (mostly very similar) use cases.

1565738890
daurnimator
shachaf: I think the answer was: "coroutine" comes with too much baggage; "async function" describes it better

1565738993
shachaf
I think it comes with much less baggage? It's just a statement about control flow, whereas "async" suggests a much more specific use.

1565739000
shachaf
Anyway names aren't very important.

1565739023
fengb
Coroutine can be like goroutines / green threads

1565739121
daurnimator
I believe that we'll barely see 'async' in user code

1565739127
daurnimator
user code will interact at a much higher lever

1565739144
daurnimator
(thanks #1778!)

1565739198
shachaf
That maybe makes sense if you're talking about asynchronous I/O, but probably not for producer-consumer-style coroutines, for example. If that sort of use is supported.

1565739357
daurnimator
Even then I'm not sure. It might be wrapped up behind some API

1565739390
shachaf
There are all sorts of interesting use cases for semi-coroutiney things.

1565739420
daurnimator
I think for loops over generators will be a pretty big thing for zig

1565739428
shachaf
For example, in C, if something like snprintf fails because the buffer is too small, you normally restart from the beginning with a larger buffer.

1565739466
shachaf
But it could be interesting if it just wrote what it can and suspended its state so you could e.g. flush the output it generated and resume it with more space.

1565739568
Tetralux
"with more space" - Isn't that the same thing?

1565739669
shachaf
No, because it doesn't have to restart and do the work from the beginning.

1565739693
shachaf
(In particular you could reasonably use a fixed size buffer for arbitrary size output.)

1565739760
daurnimator
I'd be interested if someone could write up an iterator prototype with async functions

1565739780
daurnimator
start with something simple like a Range() iterator

1565739986
fengb
andrewrk mentioned he’s open to standardizing generators

1565740066
fengb
And for loops over generators!

1565740120
daurnimator
will something like this be possible?: `fn range(it: Iterator, from: usize, to: usize) void { var i=from; while (i < to) : (i+=1) { it.yield(i); } }; fn Range(from: usize, to: usize) Iterator { return Iterator.new(range, from, to); }`

1565740154
daurnimator
shachaf: ^ notice the lack of `async` keyword: I think it would all be internal to the Iterator implementation

1565740188
fengb
I don’t think a proposal was written up yet, but he did mention that generators = multiple yielded values, which is somewhat different from async

1565740206
fengb
And it’d facilitate things like async generators

1565740219
fengb
Maybe I’m getting too ahead of myself here :P

1565740286
shachaf
daurnimator: I'm not sure I see what Iterator is here.

1565740345
daurnimator
shachaf: a hyptothesized standard library piece that would let you make/use iterators easily...

1565740375
shachaf
What does this get compiled into?

1565740384
shachaf
I mean, hypothetically.

1565740425
daurnimator
`it.yield(T)` would store the argument in the iterator object and call `suspend`. to use the iterator you'd call some `next` function that `await`-ed and then fetched the value out as stored by `yield`

1565740483
shachaf
I see, so the idea is that to yield a value you store it in the Iterator struct.

1565740511
daurnimator
something like that. I'm writing this down for the first time now

1565740572
fengb
Hmm I’ve never thought about implementing generators using async before

