1576974115
cshenton_
andrewrk: have you considered setting up a discourse for zig? They're less intimidating than irc for new users and more importantly get indexed by search engines so people can find answers to common questions.

1576974138
mikdusan
cshenton_:

1576974139
lupine
won't the zig channel logs get indexed?

1576974175
cshenton_
They will, but they're not threaded so there's no guarantee a question will be close to an answer.

1576974196
cshenton_
I know we have the discord but I meant something like this:

1576974203
mikdusan
ah i c

1576974393
cshenton_
and

1576974453
cshenton_
I think stuff like this is important to people for language adoption because they can get a feel really quickly for whether other people are actively using the language for the same use cases as them.

1576974507
daurnimator
FWIW I really dislike discourse as forum software

1576974533
Snektron
switch to asmbb instead

1576974665
pixelherodev
What would be neat is if we can get a server automatically integrating IRC logs with the forum

1576974676
pixelherodev
e.g. automatic forum users for IRC users

1576974695
pixelherodev
Though I suspect it'd be a pain to try automatic thread detection for anything not containing a pinging reply

1576975398
Snektron
I love Zig's ability to not be a dynamic executable at all

1576975454
Snektron
Sending a 32K executable to an archaic uni server that runs centos and being able to run it without having to rip packages from ubuntu repos is really nice

1576975459
pixelherodev
Agreed

1576975472
pixelherodev
musl == <3

1576975510
Snektron
i'm doing aoc, part 2 of day 18 is not so nice

1576975547
Snektron
so i adapted my part 1 solution, and while i think of a better method i just pushed this onto one of my uni's servers because i don't have enough ram

1576975554
Snektron
it's gonna take a while though, oof

1576975557
mq32
Snektron, pixelherodev: static linking solves a whole problem class that people now do workarounds for (flatpak, snap, appimage, ...)

1576975571
Snektron
plus i'm fairly sure this server also doesn't have enough ram

1576975598
cshenton_
aren't aoc problems meant to be runnable on pretty minimal hardware?

1576975605
Snektron
yeah, my solution is bad

1576975626
Snektron
at least, it was good for the first one as it was some dijkstra variation

1576975641
Snektron
i adapted it to work for the second part but that blows up the solution space much more

1576975747
mikdusan
some kind of thunking for errors?

1576975801
mq32
daurnimator: i don't think you can build native zig libraries because of comptime

1576975826
daurnimator
mq32: we'd need to ship some sort of "header" format I guess

1576975827
mq32
but you could bundle code as zig IR into a library

1576975848
pixelherodev
I think you can do it

1576975854
mq32
assuming zig gets its own backend, translating zig IR to native code should be pretty fast

1576975862
pixelherodev
But it'd be far easier on e.g. source-based distros

1576975877
mq32
pixelherodev: fn(comptime i : i32) i32 { return i; }

1576975883
mq32
this function is impossible to "precompile"

1576975892
mq32
except into IR representation

1576975898
pixelherodev
Yeah, except that only `export`ed functions would be usable anyways

1576975930
Snektron
oof, out of memory

1576975932
pixelherodev
That's no different than a macro in a C library

1576975940
daurnimator
mq32: one way: it could end up as a macro in a .h file

1576975947
pixelherodev
e.g. #define a(x) x

1576975959
mq32
but that would be a C ABI

1576975960
mq32
:D

1576975962
Snektron
I struggled so much with these damned servers during my bachelor's thesis

1576975966
mq32
we have that already

1576975974
daurnimator
mq32: right. but we can think of a zig equivalent

1576975988
pixelherodev
Huh. Comptime -> macro? I - don't think that's entirely possible

1576975990
Snektron
i even wrote an entire python script "package manager" especially designed to rip packages from ubuntu repo's and install them on archaic systems...

1576976005
Snektron
daurnimator: i once saw a project which used that kind of code everywhere

1576976009
Snektron
it was quite strange

1576976020
mq32
daurnimator: yeah, that macro language is Zig IR :D

1576976037
daurnimator
mq32: except zig IR was not designed for stability

1576976050
daurnimator
or portability

1576976061
mq32
i can imagine that this may change

1576976069
mq32
as it is an implemetation detail atm

1576976093
mq32
so zig could use something like .NET any-cpu assemblies

1576976121
daurnimator
what is architecture but an implicit comptime argument? :)

1576976121
mq32
where a bytecode is stored that may be executed at comptime or be compiled to native code

1576976251
daurnimator
However I

1576976361
mq32
if we remove comptime from exportable functions, it will be easy to define an ABI

1576976381
mq32
but i don't think it's good to actually have precompiled native libraries in the world of zig

1576976403
mq32
it's something that will reduce the portability and cross-platform ability al ot

1576976420
pixelherodev
I disagree

1576976431
pixelherodev
Native compilation will always be different from cross-platform targeting

1576976443
pixelherodev
As long as native doesn't come at the expense of cross-compilation I'm all for ti

1576976445
pixelherodev
it*

1576976465
mq32
point is: if there is an option for native shared libraries

1576976479
mq32
people will start creating closed-source libraries with a limited set of precompiled targets

1576976490
mq32
let's say win64, linux-x86_64

1576976501
pixelherodev
They can do that regardless.

1576976506
mq32
and you cannot use the library on any other platforms because they don't provide you with the source

1576976515
pixelherodev
You can already do that

1576976517
mq32
in the current state, to provide a zig library, you have to provide the source

1576976521
mq32
otherwise it's just a C library ;)

1576976522
pixelherodev
No you don't.

1576976525
pixelherodev
Well yeah

1576976528
pixelherodev
But that doesn't matter

1576976538
mq32
imho it does

1576976553
mq32
because a library written in Zig, but following C abi rules, will just not be a zig library

1576976553
pixelherodev
If they have to do it as C libraries they will

1576976572
pixelherodev
Removing the option to produce native Zig libraries won't cause people to release the source

1576976580
pixelherodev
It'll cause them make the minor tweaks needed to make native C libs

1576976688
mq32
which would still be a benefit as the library would be usable with C as well then :D

1576976713
pixelherodev
Exactly

1576976753
pixelherodev
I don't think there's really anything we could to force people to release source capable of a draconian license, which would just kill the language anyways

1576976817
mq32
nah, that wasn't my point

1576976836
mq32
i don't want to force people to release the source, but cross-platform-usable libraries

1576976840
mq32
which may be closed source

1576976859
mq32
because that's one thing i really hate about the C env

1576976865
mq32
you have 4 versions of SDL for windows

1576976877
mq32
{32bit,64bit}*{msvc,mingw}

1576976882
pixelherodev
More than four

1576976905
mq32
at least those are the official libraries

1576976917
pixelherodev
Ah - you meant

1576976968
mq32
yeah ^^

1576976982
mq32
and i don't want that this happens to zig

1576976992
mq32
because those libs are all slightly different

1576977003
mq32
and it's only "2" targets

1576977364
mq32
got to go to bed

1576978013
Snektron
finally, i improved my solution

1576978024
Snektron
it fails on one example, but it did find the right solution

1576978026
Snektron
i'll take it

1576978052
Snektron
It's been nice doing these things in Zig, i didn't quite get around to larger projects this semester

1576978918
daurnimator
what is `@sizeOf([1024]u1)` in zig?

1576979042
daurnimator
and how do I get it to be 128?

1576979156
fengb
PackedIntArray?

1576979205
daurnimator
Ah

1576979211
daurnimator
what if I wanted bool instead of u1?

1576988277
pixelherodev
@sizeOf([1024]u1) should already be 128 I think...

1576988737
daurnimator
`[1024] align(0) u1` doesn't seem to be valid

1576988946
daurnimator
pixelherodev: u1 by default has alignment 1. and zig doesn't have "packed arrays" IIRC

1576997129
daurnimator
I'm running into an issue where a symbol from a library is NULL

1576997148
daurnimator
printing it I get: `extern fn(c_int, c_int) c_int@0`

1576997319
daurnimator


1576997591
pixelherodev
What if you a packed struct containing that array?

1576998683
mikdusan
daurnimator: what does `objdump -T /usr/lib/libbls_c256.so | grep blsInit` output?

1576998703
daurnimator
00000000000196f0 g    DF .text00000000000004fa  Base        blsInit

1576999267
daurnimator
mikdusan: ^

1576999328
mikdusan
how about objdump -T for blz.executable, is it referencing "Base blsInit" or just blsInit ?

1576999334
mikdusan
*bls exe

1576999379
daurnimator
0000000000000000      DF

1576999509
mikdusan
I may be on a wild goose chase here, but it seems to me that we should see UND for "Base blsInit" to match "<blsInit@@Base>" of the library?

1576999591
daurnimator
what is "Base" there?

1576999693
mikdusan
I'm only guessing, maybe it is like an begin version when there is no versioned symbol

1577000243
daurnimator
mikdusan: anything else that might help you figure it out? :)

1577000261
mikdusan
is libbls something i can install? or create?

1577000281
daurnimator
mikdusan: sure, its

1577001013
mikdusan
I'll try AUR. updating my arch first.

1577001703
mikdusan
ok I have a reproduction. AUR wasn't that painful at all :)

1577001726
daurnimator
mikdusan: do you use an AUR helper?

1577001746
mikdusan
didn't need to. just git clone'd bls-git and libmcl, makepkg -si and all is good

1577001802
daurnimator
k :)

1577002470
mikdusan
ok so "Base" thing was not an issue.

1577002494
mikdusan
try this: `zig run bls.zig -lc -lstdc++ -L/usr/lib -lbls_c256`

1577002928
daurnimator
mikdusan: huh... so its a linking libstdc++ thing?

1577003021
mikdusan
...first tried `-lc` and it complained of a missing symbol re: c++ unwinding, so then just added `-lstdc++` to quiet it,

1577003058
mikdusan
I'm fuzzy on linux executable rules. if linking to a c++ .so, must main.exe be linked with -lc and -lstdc++ ? I can't remember.

1577003072
daurnimator
weird.... why was I able to compile without errors/warnings?

1577003610
mikdusan
the bls.c equivalent works without specifying -lstdc++

1577003636
mikdusan


1577003672
mikdusan
and `gcc -v` on that produces a ton of options that may do something to an exe to support linking against a c++ .so . but don't quote me on that.

1577003703
mikdusan
that is it may do

1577003798
mikdusan
long story short, I think you're on bleeding edge here, zig executable without libc, and linking against a c++ .so

1577004029
daurnimator
mikdusan: I'm not sure what the issue(s) to file are...

1577005022
daurnimator
mikdusan:

1577009821
mikdusan
hmm. looks like this is unrelated to c++ altogether. I forced a symbol from a c-library (libedit.so) and it was null until linked `-lc`

1577013215
daurnimator


1577028535
leeward
Does Zig's stdandard library have anything akin to condition variables?

1577028968
riba
is there a simple way to print a c string i received from a library using a zig format string?

1577029009
riba
even when i try forcing it by using "{s}", i get the "{type]@{address}"

1577029332
daurnimator
riba: you have a pointer not a slice

1577029334
leeward
riba: Can you paste an example?

1577029339
daurnimator
riba: turn it into a slice with mem.toSlice

1577029370
daurnimator
riba: that said, now that we have sentinel-terminated pointers it might make sense for std.fmt to print the contents. make an issue?

1577029653
Aransentin
It seems to work already as long as you cast to `[*:0]u8`

1577029737
riba
yes it's not a slice, and the big switch in the format function seems to jump to the c pointer case which just prints it that way

1577029824
riba
i get a path from calling a c library and just want to append something

1577029907
riba
daurnimator: i'm still not convinced the issue isn't me :D

1577029913
riba
Aransentin: i'll try that, thanks

1577029956
daurnimator
riba:

1577029968
daurnimator
sorry I was thinking of the old removed C-strings

1577029993
riba
daurnimator: yes, a c pointer which i know is a "string"

1577030052
daurnimator
riba: cast it to a `[*:0]u8`

1577030062
daurnimator
and

1577030274
leeward
Hmm, I guess I'll just use pthreads explicitly and throw a compile error if we're not building with pthreads for now.

1577031183
daurnimator
riba:

1577031624
leeward
Rut roh, if I @cInclude("pthread.h") I get a compile error.

1577031643
leeward
cimport.zig:212:5: error: duplicate struct field: ''

1577031990
daurnimator
leeward: sounds like a symptom of

1577032067
TheLemonMan
leeward, have you checked out ResetEvent in the stdlib?

1577032104
leeward
TheLemonMan: no

1577032134
leeward
daurnimator: Maybe...

1577032211
TheLemonMan
beside that the cond_ api for pthread are already available in c.zig

1577032313
leeward
TheLemonMan: That might be what I was looking for. I didn't really want to depend on posix.

1577033000
leeward
TheLemonMan: ResetEvent looks like it's only good for signalling a single thread. I was using pthread_cond_broadcast, which signals multiple threads.

1577033711
leeward
Anyone know why there's defer and errdefer but no successdefer?

1577034070
leeward
D's got scope(exit), scope(fail), but also scope(success).

1577034108
leeward
It feels like an intentional decision.

1577034123
daurnimator
I can't say I've ever found myself wanting it

1577034789
leeward
I hadn't before today, and the thing I wanted it for might be more clearly expressed without it, so that might be why.

1577034923
leeward
It's not the (allocate resource/free resource) pattern that it's usually used for, but it's fewer lines of code: `successdefer thing(); return otherThing();` where otherThing is of type !void. Probably clearer as `try otherThing(); thing();` anyway.

1577035018
daurnimator
not only clearer but highly recommended: if you don't do the `try` then your function won't appear in the traceback IIRC

1577035191
leeward
Really? Isn't `try a` the same as `a catch |e| return e`?

1577035256
leeward
Does it really behave differently from `return a`?

1577035285
leeward
That is, `return try a` vs `return a`

1577035523
fengb
I wrote up a proposal to mandate the try. I don’t think it got a lot of traction either way

1577035771
daurnimator
leeward: essentially I think of it as casting an error to an error union appends to the trace

1577035800
daurnimator
leeward: `return e` => that is then converted to an `someerrorunion!void`

1577035824
leeward
It seems unnecessary to me. `return foo()` from within bar only works if foo and bar have the same return type. All `return try foo()` does is remind the author that both have a ! somewhere up in their prototype.

1577035931
fengb
If you have multiple returns, it’s not obvious which one can error

1577035933
leeward
Hmm, I lied. If foo doesn't have a ! in it, `return foo()` will still work in bar, even if bar does, as long as it has some path that can return an error.

1577035990
leeward
Still, I'm not a fan of making `try a` more complicated than "sugar for `a catch |e| return e`"

1577036058
leeward
fengb: I see your point, but I think I weighted the cost and value differently.

1577036067
protty
leeward: read back a bit in the history. std.ResetEvent could possibly be made to signal all waiters on .set() with a few modifications (or was there a different pthread_cond_t use case wanted?)

1577036068
leeward
daurnimator: Still confused.

1577036124
riba
daurnimator: that does sound like what i need

1577036174
leeward
protty: Yep, using std.ResetEvent. It might be worth adding a .setBroadcast() or something to more accurately mirror pthreads condition variables, but I'm not convinced yet.

1577036176
riba
also, how do i cast to '[*:0]u8'? when i try to @ptrCast i get that ':' is an invalid character

1577036189
riba
(i'm on 0.5.0, could that be it?)

1577036197
leeward
riba: yes

1577036216
leeward
I don't think sentinel-terminated array syntax was in 0.5 yet.

1577036244
leeward


1577036244
riba
leeward: i see, thanks

1577036902
protty
a few questions on

1577036958
protty
... sync primitives: 1) should mutex & spinlock have deinit() removed since they dont represent a resource 2) should reset event broadcast by default

1577037322
leeward
protty: if we leave deinit() on those, it opens up the possibility of implementing them differently, which I like.

1577037371
leeward
2: Hard to say; it can be more expensive than single-thread signalling, but it's more widely useful.

1577037393
leeward
Also more general purpose.

1577037509
protty
will test it out and make a PR if it doesnt slow stuff down too much

1577037561
leeward
Sounds like a good plan.

1577038435
leeward
Hmm, I'd like the ability to remove an element from priority_queue.PriorityQueue other than the first one (I have an event queue where events can be cancelled).

1577038502
leeward
Would it be better to add a new type or just add another method to PriorityQueue?

1577038898
protty
another method sounds better if possible

1577039073
leeward
That's definitely the easier path.

1577039187
WendigoJaeger
What's the best way to accept a generic InStream paramter ? using *io.InStream(anyerror) doesn't work:

1577039282
WendigoJaeger
My current workaround is using @ptrCast but it's ugly

1577039364
leeward
WendigoJaeger: It is ugly. That's my current workaround.

1577039397
leeward
I think the plan is to do something with error sets and coercion.

1577039410
WendigoJaeger
make sense

1577039467
WendigoJaeger
I'll add a note to double-check when dispatch objects/virtual functions or similar will be implemented

1577039506
leeward
hmm, `zig build test` on master is failing for me.

1577040081
leeward
lld: error: undefined symbol: clang::DiagnosticsEngine::EmitCurrentDiagnostic(bool)

1577040228
leeward
Thats after I updated to master and rebuilt from scratch.

1577040630
WendigoJaeger
Is there a way to have a predictable path for the test executable? I want to attach a debugger to it

1577041032
leeward
WendigoJaeger: Yes, it's one of the options. Unfortunately, I don't know which.

1577041119
D3zmodos
Is anybody running the zig compiler from a symlink on Windows? I'm fairly certain I had it setup like that a little while ago but now it doesn't work (I get "Unable to find zig lib directory" which I guess is self-explanatory but I'm just wondering if there's something sneaky that I might need to do to point it in the right direction)

1577041206
leeward
Windows supports symlinks?

1577041219
WendigoJaeger
NTFS only

1577041272
WendigoJaeger


1577046457
andrewrk
WendigoJaeger, --output-dir [dir]

1577046477
andrewrk
you can also use --test-cmd and --test-cmd-bin to have zig execute the debugger, if you like

1577052095
leeward
`zig build test` is still giving an lld error about clang::DiagnosticsEngine::EmitCurrentDiagnostic(bool)

1577052101
leeward
Am I missing a library or something?

1577052289
protty
are github's timestamps borked?

