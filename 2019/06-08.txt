1559955203
andrewrk
squeek502, what flags do you need?

1559955271
squeek502
--export-dynamic or explicit --export=luaopen_package maybe

1559955288
squeek502
the lua C functions aren't being exported

1559955483
squeek502
(the luaopen_ functions that is, which aren't called internally)

1559959072
scientes
I wish it was easier to spot globals in functions

1559959087
scientes
I am always scared a function reads or writes to a global

1559959194
scientes
at least zig doesn't allow shadowing

1559967316
squeek502
andrewrk, nvm forgot that you had removed loadlib.c/liolib.c from build.zig to deal with missing filesystem functions, that was the cause of the missing exports, not any linker flags

1559968377
andrewrk
scientes, an IDE would be able to highlight that information

1559968396
scientes
but it requires a full IDE

1559968402
scientes
not just syntax highlighting

1559968410
scientes
that is fine

1559968414
andrewrk
although it would be difficult to distinguish between e.g. `std` and the kind of thing you're talking about

1559968421
andrewrk
maybe a mutable global variable?

1559968425
scientes
yes

1559968430
scientes
consts are fine

1559968856
husho
what's the compiler's performance situation looks like

1559968882
husho
I tried building very small wasm program and it took a while

1559968909
scientes
--release-fast is considerably slower

1559968949
husho
default is debug right?

1559968962
scientes
yes

1559968963
husho
i just used "build" sub command

1559968981
scientes
the compiler also takes huge amounts of memory

1559969074
squeek502
first build is typically slower than subsequent builds

1559969090
scientes
squeek502, that is because of the new build caching

1559969094
scientes
this is quite good

1559969127
scientes
although i think i might have broken it....hopefully i reproduce that in the future, with changing the zig binary

1559969602
andrewrk
husho, compiler performance won't really be tracked/measurable until self-hosted is what we're shipping. that's a few release cycles away

1559969851
husho
do you have fixed release cycle like rust or you ship it when you feel like things are done or whatever

1559969889
scientes
husho, its tied to llvm release cycle

1559970007
andrewrk
yeah at least until 1.0, we release roughly 1 week after llvm's major releases, which is every 6 months

1559970033
andrewrk
I think after 1.0 it will depend on known bugs, but that's to be determined

1559970278
husho
thanks for answers, keep up the good work

1559970768
emekankurumeh[m]
======================

1559984716
alexander92
does zig have shared memory allocators

1559984754
alexander92
also does it have a similar resource system

1559984761
alexander92
e.g. the same way i can pass allocators

1559984775
alexander92
can i pass e.g. network/os "interfaces"

1559984784
alexander92
so e.g. one part of my program uses just local stuff

1559984800
alexander92
but other uses a "distributed" or "cloud" filesystem with the same api

1559984807
alexander92
or depending on test/prod env

1559984845
alexander92
or is this something that is easy to achieve just using alternative imports

1559985957
marijnfs
i'm trying to call sort but keep getting 'cast expression expects exactly one parameter'

1560007273
SamTebbs33
andrewrk: Thanks for the review on #2639. I'm not sure how to go about adding some tests to that file since the syntax in it all seems to be valid

1560007284
SamTebbs33
Whereas my patch only affects invalid code

1560007594
Sahnvour
SamTebbs33: if you want to test compile errors, you can add a test case in test/compile_errors.zig

1560007697
Sahnvour
and run `zig build test-compile-errors` to test it

1560007822
SamTebbs33
Sahnvour: cheers :)

1560008329
SamTebbs33
Does anyone know why it's not possible to do a ~ on a comptime_int?

1560008459
SamTebbs33
It means you can't do something like `const foo = ~0b101` which really seems like something you should be able to do

1560009989
mbarkhau
is there an example somewhere how to pass an ArrayList to a function ?

1560010496
mbarkhau
same question for HashMap

1560010543
mbarkhau
best usage code I can find is the tests in the standard library, but afaict none of those are using them as parameters

1560010900
Sahnvour
SamTebbs33: ~ is a bitwise operattion, and comptime_ints do not have a bitsize before they are casted down to a sized int type

1560010975
Sahnvour
mbarkhau: something like `fn foo(list: *ArrayList(u32)) void {` ?

1560011092
Sahnvour
SamTebbs33: since they can represent really big number, there's no way for zig to know what you intend to do and the resulting type, instead you can try for example `~u8(0b101)`

1560011726
mbarkhau
Sahnvour, it works! thanks

1560011744
mbarkhau
parsing compiler errors is an aquired skill I guess...

1560012189
cameris
some C algorithms use the LSB of a pointer to encode some property of the target. Is that even possible in zig? I guess thats what @ptrToInt and @intToPtr are for?

1560012825
SamTebbs33
Sahnvour: That makes sense, thanks

1560013945
Sahnvour
cameris: yes, you can do that

1560013973
Sahnvour
mbarkhau: are you familiar with how generics work in zig ?

1560013985
Sahnvour
once you get it it's pretty simple to use and reason about

1560018446
marler8997
It's been a couple years but it looks like Zig is alot further along now.  I'm converting my Audio Synthesis program to Zig and it's been going well.

1560021773
curtisf
I'm new to zig. What's the best way to compare two comptime `[]u8` for equality?

1560021801
scientes
mem.eql curtisf

1560022560
shritesh
Why does an else block require a named break explicitly? I think the compiler can figure it out.

1560022669
scientes
it doesn't?

1560022736
scientes
shritesh,

1560022740
scientes
what do you mean?

1560022851
shritesh
Returning values from an else block in a while/else expression

1560022868
shritesh
I get “break expression outside loop”

1560022929
shritesh


1560023004
scientes
oh i see

1560023007
scientes
yeah that makes sense

1560023011
shritesh
Also forgive my weird variable naming. I was working on the docs.

1560023039
scientes
oh, i've had test cases that use a variable named "true". I've done far woorse

1560023056
scientes
in C that is

1560023083
scientes
also, you can't name a variable "linux" in either gcc or clang

1560023097
shritesh
The docs are littered with `else blk: { }`

1560023125
scientes
allowing it to be implied would be nice

1560023154
scientes
it would be nice if i could create a c label in zig, so that i could use asm goto

1560023165
scientes
but i guess my needs would require expanding llvm

1560023215
curtisf
is it possible for a function's return type to depend on comptime argument? e.g., a function that returns a `Alpha` when the first argument is comptime `"alpha"` but `Beta` when the first argument is comptime `"beta"`? It looks like no but it seems like this would be a useful feature, though I can see it leading to some fairly hard to read code

1560023238
scientes
curtisf, yeah, just set the return type to "var"

1560023242
scientes
and then you get duck typing

1560023263
scientes
or you can also take a "comptime T: type" argument, and then have your function return T

1560023269
scientes
also functions can return types

1560023288
scientes
although those are actually just comptime functions

1560023307
curtisf
I think `var` is what I want, I didn't see that mentioned in the docs anywhere. I didn't want to have a comptime T because then you'd need to write `(Alpha, "alpha")`, `(Beta, "beta")`

1560023329
scientes
the latter is actually more zig-like

1560023336
scientes
that is very common in the std lib

1560023502
curtisf
I see. I'm trying to work around the lack of `@reify` or something like it for the moment and make "getters" and "setters" where repeating the type seems redundant to me (since what I really want is just to have a struct field)

1560024131
tgschultz
you cannot use `var` as a return type, but return types can be expressions yeilding a type.

1560024231
tgschultz
so: like `fn foo(a: var) @typeOf(a)`. Or even a switch statement or comptime evaluatable  function

1560024273
tgschultz
also, curtisf:

1560024503
scientes
woah

1560024639
scientes
still not sure why....

1560024682
curtisf
ooo, that's cool.

1560024721
curtisf
The reason I'm interested in doing this is so that you can have a "parser generator" that's written in Zig -- no source code generation required

1560029291
marijnfs
how are you supposed to call std.sort?

1560029631
marijnfs
i keep getting some 'cast expression' error

1560029703
scientes
you need to pass it a function

1560029711
scientes
mem.compare might work, but not always

1560030307
cameris


1560030897
marijnfs
scientes: i made a cmp function, but the error seems to start somewhere else

1560030953
marijnfs
i call it sort(f64, vals[0..], cmp);

1560030961
marijnfs
with fn cmp(ll: f64, rr: f64) bool

1560031468
gustav_o
hi everyone, I get an “unable to evaluate constant expression” when trying to iterate and warn(it_str) using a for-loop in build.zig, do you know what I’m doing wrong?

1560031965
marijnfs
error: cast expression expects exactly one parameter

1560031973
marijnfs
i'm trying to make sense of what that says

1560032263
gustav_o
marijnfs: could you paste the code?

1560032336
jjido
How do you write a cast? Isn’t it one of the @ directives?

1560032452
marijnfs
gustav_o: shit i just realised i was called std.sort, not std.sort.sort

1560032465
marijnfs
somehow that creates that strange error

1560032848
marijnfs
ok next problem, i get an integer overflow in the sort function:/

1560032864
marijnfs
and i'm not sorting integers

1560032869
marijnfs
so must be index

1560033388
tgschultz
marijnfs: the error is because all namespaces in zig are structs. std.sort is therefore a struct, meaning `std.sort(...)` looks like a cast to the compiler.

1560033496
tgschultz
where is the integer overflow? if it is in sort.zig, what line?

1560033511
marijnfs
tgschultz: thanks, makes sense i guess, maybe a nicer error would somehow be nice

1560033526
marijnfs
yeah so in sort:504

1560033530
marijnfs
mem.rotate(T, items[range.start..range.end], range.length() - count);

1560033536
marijnfs
somehow that overflows

1560033545
tgschultz
that casting syntax may go away in favor of an @ function.

1560033617
tgschultz
best guess is range.length is going to be 0 and count is > 0.

1560033619
marijnfs
i'm sorting 4 million floats that are not exactly random but close to it

1560033642
marijnfs
with a asc function

1560033926
marijnfs
just doing insertionSort does work

1560033953
tgschultz
could be a bug in std.sort.sort. It is absurdly complicated.

1560034007
scientes
marijnfs, post your code on godbolt.org

1560034633
andrewrk
scientes, I think you can appreciate this:

1560034701
andrewrk
a little demo of the result location changes in my copy-elision-3 branch

1560034879
scientes
there is alot there and I can't say I can see it all without some narrative (and looking at the generated assembly, which I am now), but it looks good

1560034934
scientes
oh yes, the static doesn't ever get copied

1560035056
andrewrk
you can sort of see the differences just by doing ctrl+f "memcpy"

1560035084
andrewrk
looking at the zig code, idea here being you can follow the "result location" from the variable declaration or return statement all the way down the expression tree

1560035171
andrewrk
you'll notice that for example the calls to bar1() and bar2() directly initialize the `bar` field of the variable `runtime`, even though they are buried under a function call, struct initialization, and if expression

1560035188
scientes
yeah that is really slick

1560035202
andrewrk
C already has this, but what zig brings to the table is it all works with comptime

1560035227
scientes
well that didn't demo that

1560035230
andrewrk
and it's semantically guaranteed. I don't know whether that's true for C

1560035244
andrewrk
yeah, notice that there's no code generated for `static`

1560035253
scientes
oh i see

1560035262
scientes
that comptime is IMPORTANT

1560035269
andrewrk
yeah

1560035285
scientes
cause gcc and clang have forward constant propagation

1560035290
scientes
but it is nothing compared to comptime

1560035328
andrewrk
zig analysis starts to generate runtime code for e.g. struct initialization, but when it gets done if it finds out everything is comptime known, it elides the runtime instructions

1560035349
andrewrk
so that had to get slightly more complicated. but it's not so bad, the existing Scope abstraction was enough

1560035378
andrewrk
anyway it's more analysis in zig code, less analysis in llvm code, so hopefully we can see a slight speedup

1560035380
scientes
So gcc has range switch statements, which they expose as a c extension

1560035388
scientes
however clang does that outside of llvm, which was kinda dumb

1560035401
andrewrk
oh I have this working with switch too, can demo that if you like

1560035408
scientes
putting that in llvm proper would benifit both zig and clang

1560035424
scientes
andrewrk, really!

1560035426
andrewrk
have a look at this commit message

1560035450
andrewrk
that's for integers, but I can show a struct example

1560035512
scientes
switches are not easy to deal with in llvm, because of the PHI nodes

1560035543
scientes
but that is a comptime switch

1560035546
andrewrk
ah I gotta run, can demo some more later. or you can play with the branch if curious

1560035586
andrewrk
but yeah the same "peer result location" mechanism that I made for, e.g if expressions, generalizes to N prongs, so it works for switch

1560035604
scientes
what about ranged switches?

1560035620
andrewrk
yeah works fine, they're emitted as ifs before the switchbr

1560035625
scientes
Its a long ways out, but I would like to get those into llvm, because C (GNU extension) already needs them

1560035637
andrewrk
all the range checks first as if-else chains, then the switchbr

1560035648
scientes
yeah that can't be optimized properly

1560035650
scientes
however

1560035663
andrewrk
ah well let me know if you get that into llvm and I'll happily update zig's codegen :D

1560035686
andrewrk
ttyl

1560035695
scientes
have a nice saturday night

1560038272
gustav_o
oh… the fact that warn() can’t print a string without format is a bit confusing

