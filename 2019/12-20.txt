1576806520
leeward
What command is used to generate

1576806605
frmdstryr
zig build docs?

1576806627
leeward
I don't think so. I think that builds the

1576806632
leeward
Unless something's changed.

1576806675
frmdstryr
the isn't that just a static file? in lib/std/special/docs or something

1576806750
leeward
Pretty sure it's generated; tests are run on all the code examples in it.

1576806871
frmdstryr
data.js

1576806876
frmdstryr
i guess is generated

1576806914
frmdstryr


1576806924
frmdstryr
-fgenerate-docs

1576806947
leeward
That's the thing.

1576806981
leeward
I don't see a change to build.zig in that commit though.

1576807013
frmdstryr
it looks like it's setting a flag in main.cpp

1576807417
leeward


1576807421
leeward
Of course, it says how.

1576807527
leeward
more specifically,

1576807724
leeward
Wow, that's a lot of errors.

1576809484
leeward
Ok, so mainly just the one error.

1576809552
leeward
At least, 1 error I don't know how to fix: compiling lib/std/std.zig leads to multiple _starts because it involves compiling start.zig.

1576833695
bgiannan
So i'd like to use std.sort but my lessThan function needs to compare things to a third party value (i'd like to sort points by distance to another point)

1576833708
bgiannan
don're really know how to do that without closures

1576834400
mikdusan
bgiannan: i have an ugly hack idea. create a wrapper struct that is "item" w/ 2 fields: { context, real_item } and now lessThan fn has access to context and lhs/rhs real_items

1576834437
mikdusan
did I mention it was ugly? :)

1576834547
bgiannan
right but you would sort a list of that wrapper struct and not the original list

1576834581
mikdusan
yeah and it's kinda wasteful with (presumably) redundant context in each

1576834619
bgiannan
the sort function itself should have a `context` parameter

1576834654
bgiannan
something like: pub fn sort(comptime T: type, items: []T, comptime CT: type, context: CT, lessThan: fn (context: CT, lhs: T, rhs: T) bool) void

1576834684
mikdusan
sure or even just `context: var`

1576834746
bgiannan
wow

1576834753
bgiannan
was tired of scrolling

1576835026
mikdusan
hmm looking back on my comment: you're probably right, due to lessThan fn as param, probably need `comptime CT: type` as you correctly showed

1576835123
mikdusan
we need an augment to comptime params. have compiler evaluate a constraint fn which returns an anonymous struct whos fields can be used in the rest of the fn param signatures.

1576850742
protty
leeward: try using `zig test your_root.zig -femit-docs -fno-emit-bin --output-dir /path/for/docs/`

1576859805
dimenus
should '&[_]u32' coerce into '[]u32'

1576859821
dimenus
or '*[1]u32'

1576860049
leeward
protty:  That's what I did, if by "your-root.zig" you meant "lib/std/std.zig"

1576860342
leeward
It didn't fix it

1576860360
leeward
dimenus: Are you asking what does happen?

1576860383
dimenus
no, i'm asking what should happen

1576860478
leeward
I think coercing to []u32 would be super helpful, and *[1]u32 raises a question: is [0]u32 legal?

1576860577
fengb
dimenus: yes, any array pointer should coerce into slice

1576860682
dimenus
it does when passed in as a param in a function, but '.ptr' does not work on that type

1576860737
fengb
Ah that's probably because it's still an array pointer, not a slice yet

1576860762
fengb
I'd expect `*[_]T` to auto coerce into `[*]T` as well

1576860849
protty
leeward: is the goal to generate the lang docs or the std docs?

1576860986
leeward
protty: std docs

1576862666
pixelherodev
fengb, I think that one's a bit trickier

1576862729
pixelherodev
While that would arguably make sense, `[_]` is still of a comptime-known size

1576862744
pixelherodev
and I would argue that requiring explicit casting there is a good idea

1576867440
dingenskirchen
is a pointer referring to memory from inside a block that you're no longer in (but still inside the same function) safe to use?

1576867467
andrewrk
dingenskirchen, no

1576867515
dingenskirchen
so it's UB?

1576867608
andrewrk
yes

1576867615
pixelherodev
this isn't the kind of UB you can rely upon either

1576867620
pixelherodev
It

1576867696
dingenskirchen
thanks for the clarification!

1576867710
pixelherodev
`The address the pointer contains will most of the time contain a value other than that you intended for it to contain

1576867720
pixelherodev
If you really need to do this, set aside memory on the heap and use that

1576867758
pixelherodev
Given an allocator, `var ptr = allocator.create(type) catch { // out of memory handling }; ptr.* = value'`

1576870447
discip
Is there a way to enable fsanitize when building?

1576870636
mikdusan
for .c source?

1576870712
discip
For a .zig source. Looking for behaviour similar to -fsanitize=address

1576870972
discip
There seem to be certain bugs caught by gcc + fsanitize that aren't detected in Zig, even if building with --release-safe

1576871185
mikdusan
more safe/debug runtime checks are planned for zig, more or less that is being held off until zig becomes self-hosted

1576871443
andrewrk
discip, what kind of checks?

1576871463
andrewrk
what kind of bugs are caught by gcc + fsanitize that aren't detected in zig?

1576871802
discip
andrewrk: this is one example

1576871992
andrewrk
discip,

1576872088
andrewrk
also

1576872097
andrewrk
zig doesn't have address sanitization yet

1576872117
andrewrk
I thought you were talking about -fsanitize=undef at first

1576872214
pixelherodev
but shouldn't it be possible to detect that the value returned is of type pointer and the object pointed to is within the function even if it's not an explicit `return &obj`?

1576872406
andrewrk
that's a good point. it would require introducing a rule into the language such as, "returning a pointer from a function asserts the pointer is dereferenceable" but that's probably a reasonable thing to do

1576872455
andrewrk
the use-after-free issue tackles more complex situations, such as a pointer to a stack variable escaping via a struct field write

1576872508
pixelherodev
Right, but I figure

1576872545
andrewrk
agreed

1576872872
discip
I don't know how compilers work, but isn't fsanitize part of LLVM, which Zig uses to compile?

1576872921
andrewrk
you can read about how clang/llvm's address sanitizer works here:

1576872954
andrewrk
there are more things to consider besides whether something could be technically hacked together or not

1576872993
discip
Ah, so it's not as simple as passing a compilation flag

1576873232
andrewrk
there are language semantics to consider, a runtime library that has to be able to be cross compiled from source (or ported to zig), and llvm limitations to overcome (address sanitizer being incompatible with other things)

1576873288
andrewrk
and then also just an audit of whether the design makes sense in the context of zig. there may be a better way to implement such safety, given the semantics of zig

1576873320
andrewrk
it's a project that is worth exploring, but certainly nontrivial

1576873965
pixelherodev
Given that files are imported as structures, is it possible to have

1576873983
pixelherodev
e.g. an allocator with an init function that returns a value of the type of the structure just imported?

1576874055
andrewrk
pixelherodev, yes:

1576874061
pixelherodev
Thanks!

1576874086
pixelherodev
Oh yeah, I've looked at that issue before :P

1576874132
andrewrk
as Jimmi notes, to close the issue, it's just Tests, std refactor, stage2 parser update

1576874138
pixelherodev
Right right

1576874147
pixelherodev
What's the "index.zig" convention it says not to use?

1576874160
andrewrk
I think that was before your time

1576874189
pixelherodev
Ah

1576874203
andrewrk
instead of, e.g. std/os.zig and std/os/*, we had e.g. std/os/index.zig and std/os/*

1576874226
pixelherodev
Ah

1576874241
pixelherodev
I can see why that would be annoying

1576874286
andrewrk
the only edge cases is std.zig is inside std/

1576874304
pixelherodev
Packages in general rather

1576874336
pixelherodev
On my Indomitable game for instance, it exposes the main folder as a package which is imported by the platform-specific frontends (which were the Root Source Files)

1576874356
pixelherodev
So I had a file `indomitable.zig` being used in the same manner as std.zig :)

1576874517
pixelherodev
I take it that private functions can then also be used in the standard `obj.fn()` manner?

1576875036
leeward
Is `var stderr = std.io.getStdErr().outStream().stream` really the way to get stderr as a stream?

1576875069
leeward
Also, should that coerce to `std.io.OutStream(anyerror)`?

1576875338
pixelherodev
I think so

1576875342
pixelherodev
To both of those

1576875350
pixelherodev
Because getStdErr() gives you an std.io.File

1576875368
pixelherodev
.fs.File*

1576875372
pixelherodev
file.outStream() gives you a std.io.fs.File.OutStream

1576875380
pixelherodev
Which has a field stream of type std.io.OutStream

1576875388
pixelherodev
IIRC there's an issue to make getStdErr return the stream

1576875409
pixelherodev
s/issue/proposal

1576875499
leeward
That would certainly make users' lives easier.

1576875528
leeward
Hmm, it seems like it's not coercing. @ptrCast here we come.

1576876219
pixelherodev
Wait really?

1576876236
pixelherodev
I don't think ptrCast is the correct answer there

1576876318
pixelherodev
Ah

1576876331
pixelherodev
The value returned by outStream() is an std.fs.File.OutStream

1576876343
pixelherodev
its field stream is a value of type io.OutStream(std.fs.File.Error)

1576876380
pixelherodev
leeward, why do you need to coerce it?

1576876419
leeward
Trying to use LoggingAllocator

1576876495
andrewrk
generic error sets & interfaces is not really solved right now, it's pretty awkward

1576876525
andrewrk
I'm wondering if OutStream/InStream should use `anyerror` for their error sets, and rely on the API user to do an @errSetCast

1576876628
pixelherodev
I can see advantages and disadvantages to that

1576877022
leeward
Would it compile if the user just didn't cast the error set and had their functions return !void ?

1576877041
leeward
Programmers will lazy.

1576877064
pixelherodev
I'd argue that a good solution to generic errors is better in the long term

1576877072
pixelherodev
For exactly those reasons

1576877091
pixelherodev
Actually

1576877094
pixelherodev
leeward, I don't think so

1576877099
pixelherodev
That would be an inferred error set

1576877101
pixelherodev
Not anyerror

1576877115
pixelherodev
But I'd very much expect them to then just change it to anyerror!void

1576877145
pixelherodev
It cheapens the value of error sets if a major library - let alone the

1576877404
andrewrk
ideally, a language interface feature would solve error sets to be handled the way const is handled; coercion works in one direction

1576877847
pixelherodev
Hmm

1576877862
pixelherodev
Error set merging is already supported by the compiler, no?

1576877882
pixelherodev
Not with a builtin AFAIK, but given that inferred error sets exist, I assume it can merge all possible error sets?

1576877908
pixelherodev
If that's the case, I propose an @merge builtin

1576877923
pixelherodev
If either provided error set is anyerror, it returns anyerror

1576877948
pixelherodev
Problem is how that would work here...

1576877964
andrewrk
pixelherodev, the || operator merges error sets

1576877982
pixelherodev
Oh right!

1576877985
pixelherodev
Hmm

1576878012
companion_cube
could you have `_!foo` to have a unnamed, but inferred, error set?

1576878055
pixelherodev
?

1576878067
pixelherodev
`fn foo() !type` is already possible

1576878076
companion_cube
ah yes, duh

1576878080
pixelherodev
In what other situation would that make sense?

1576878145
companion_cube
the difficulty with effects is when it's mixed with other abstractions, though, like high-order functions (closures) or templates :/

1576878215
pixelherodev
Exactly

1576878250
companion_cube
so probably you have to be able to name the effect but still have it inferred…

1576878382
pixelherodev
Nah, that doesn't really help either

1576878391
pixelherodev
If that was the case, just avoid having it inferred

1576878403
pixelherodev
The fundamental problem here is that set is

1576878409
pixelherodev
It could be

1576878423
pixelherodev
*but*, for any given stream, the functions will always return a specific set

1576878473
pixelherodev
The real solution is to figure out a way to have OutStream(blahblah) coerce to OutStream(anyerror), which I doubt is possible at present

1576878476
pixelherodev
Actually

1576878501
leeward
Is there a roadmap somewhere for generally what features are planned for 0.6 and 0.7?

1576878506
pixelherodev
What about a function `OutStream.toAnyerrorStream()` which returns an OutStream(anyerror)?

1576878515
pixelherodev
0.6 roadmap is in 0.5 release notes

1576878526
pixelherodev
Beyond that, check the milestones on GitHub for a general idea

1576878528
leeward
I thought I saw it somewhere.

1576878546
andrewrk
also look for issues which have label:accepted

1576878550
leeward
Yeah, the milestones on GitHub are where I was looking.

1576878988
pixelherodev
Might I suggest closing #3898? As I mentioned within, it's not actually a bug, it's the compiler's type checking not being strict enough (which AFAIK has been reported elsewhere many times)

1576879158
andrewrk
pixelherodev, it's always a bug if llvm ir verification fails. I don't mind keeping duplicate bug reports open, just in case, plus when they pile up it puts more pressure to solve them. sometimes they're not duplicates even when they seem like they are. I do like to run the reproduces to make sure

1576879228
pixelherodev
makes sense

1576879243
pixelherodev
Whelp, I'm going to get started on my work on stage1 this weekend

1576879246
pixelherodev
Got a couple bugs I want to fix

1576879296
pixelherodev
If I feel I'm comfortable with it at that point, I'll see if I can fix the uncaught-errors-leads-to-broken-IR thing

1576879416
companion_cube
pixelherodev: you need to be able to have a variable for the error set, I think, to be able to talk about it

1576879422
companion_cube
even in generic contexts

1576879434
pixelherodev
Right but that variable already exists

1576879439
pixelherodev
OutStream.Error

1576879459
pixelherodev
Hmm...

1576879514
pixelherodev
Idea: OutSream.toAnyErrorStream(self: outStream) OutStream(anyerror) which returns an OutStream(anyerror) initialized with the same values as the original

1576879518
pixelherodev
Going to try that soon

1576879628
frmdstryr
Can fmt zero pad a number?

1576879648
andrewrk
believe so

1576879675
andrewrk
there's actually reasonable docs here:

1576880422
frmdstryr
Ah, nice "{d:0>2}"

1576881190
fifty-six
are array elements for a constant size array passed immutably?

1576881212
fifty-six
I'm passing an array to a method but when trying to assign at an index it says I can't assign to a constant

1576881450
andrewrk
parameters are immutable; make a copy or make the parameter a pointer to mutate the data

1576881451
fifty-six
if I pass a slice (arr[0..]) I can assign to elements though

1576881453
fifty-six
Ah

1576881455
fifty-six
ty

1576881477
andrewrk
generally if you want to pass arrays to functions, you probably want to make the parameter a slice

1576881497
andrewrk
you can coerce an array to a slice by passing a pointer to the array

1576881945
WendigoJaeger
I got source level debugging working for ZigGBA!

1576882333
andrewrk
wow, that's really impressive

1576882348
WendigoJaeger
yes, I

1576882356
WendigoJaeger
I'm blown away myself

1576883520
blueberrypie
very cool!

1576883534
THFKA4
nice!

1576883589
THFKA4
since we're talking about debugging, can someone remind what the name of the new DWARF alternative is?

1576885650
pixelherodev
Ooh, a DWARF replacement?

1576885655
pixelherodev
Is it called Hobbit?

1576885661
WendigoJaeger
I hope so

1576885663
pixelherodev
It had

