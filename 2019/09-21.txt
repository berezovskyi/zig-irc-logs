1569025079
scientes
gd. Debian doesn't build riscv for llvm-9

1569025578
scientes
oh that is actually apt.llvm.org

1569028097
stratact
meh, I decided to make my type more generic and useful, that I decided to rename it to StackList, which is like ArrayList, but on the stack.

1569028300
stratact
Dunno if it would be useful for people to use, but I'm using it for std.fs

1569036447
daurnimator
stratact: if you give your ArrayList an allocator that uses the stack it is on the stack...

1569036524
daurnimator
stratact: you can even use StackFallbackAllocator so that its on the stack most of the time: unless you need extra room...

1569036678
stratact
I'm not allowed to use an allocator though

1569036811
stratact
Oh wait, maybe I can, but inside the caller's stack

1569036815
daurnimator
stratact: you can still have a blob on the stack and use a FixedBufferAllocator inside

1569036970
stratact
Damn, my effort feels somewhat of a waste, but at least now I know how flexible ArrayList is with using the right allocator

1569037943
stratact
daurnimator: thank you again, your input was very valuable

1569037965
plumm
ok, is it a hassle to install llvm 9 on mac os?

1569037985
daurnimator
plumm: considering it only came out a couple of days ago, I'm not sure too many people have trodden that path

1569038295
plumm
I've been working alongside zig HEAD so the update today kinda caught me off guard. tried building from llvm head but didnt realize that that was 10, and there arent any ports for 9 yet (or PRs even)

1569038442
stratact
plumm:

1569038513
plumm
thanks! stratact

1569038571
stratact
plumm: I had the similar issue with FreeBSD way earlier and andrewrk shown me that link as a solution, I ended up not needing it though.

1569038719
plumm
this is gonna take a while huh lol

1569039111
daurnimator
andrewrk: openSelfExe could now use pidfd_open to be more-correct in linux 5.3+..... how should we handle older kernels there?

1569039145
mikdusan
plumm: if you are on macOS Mojave I have a binary tarball for 9.0.0 built using Xcode 11 gm1 that just needs to extract to /opt/llvm-9.0.0

1569039168
mikdusan
plumm: also have the bash script i used to build it

1569039575
plumm
mikdusan: im on catalina hackintosh lol

1569039602
plumm
but seeing as how my attempt just failed im ready to try your solution llol

1569040010
mikdusan
plumm:

1569040072
mikdusan
you'll need 1: xcode11 installed; 2: write access to /opt/; 3: ~/work/llvm that can hold a git clone of llvm-project

1569040112
mikdusan
mkdir ~/work/llvm/packages; needs 2 files:

1569040145
mikdusan
1.

1569040204
mikdusan
2.

1569040207
mikdusan
that should be it.

1569044902
andrewrk
daurnimator, we can do a version checuk

1569045233
plumm
mikdusan: hmm, it errored

1569045238
plumm
Error when bootstrapping CMake:

1569045238
plumm
Cannot find a C++ compiler that supports both C++11 and the specified C++ flags.

1569045238
plumm
Please specify one using environment variable CXX.

1569045239
plumm
The C++ flags are "".

1569046239
mikdusan
xcode needs to be installed

1569071662
plumm
mikdusan: yes I have xcode installed lol

1569072134
plumm
unsure of what I did but works now, will report updates

1569075664
daurnimator
andrewrk: how do we do a version check?

1569078368
plumm
mikdusan:   expected LLVM 9.x but found lol

1569078457
plumm
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$PREFIX -DCMAKE_INSTALL_PREFIX=$(pwd)/release -DZIG_STATIC=ON

1569078597
mikdusan
verify value of $PREFIX matches llvm location

1569078690
mikdusan
ie: llvm binaries install dir

1569084044
andrewrk
daurnimator, recently glibc version has been added as part of the target, when targeting glibc. we also plan to add cpu features as part of the target. so what this will require is adding minimum OS version as part of the target.

1569084074
andrewrk
"native" will mean whatever OS version is currently running

1569084122
andrewrk
once this is implemented you would be able to do e.g. @import("builtin").linux_version or similar

1569085377
daurnimator
andrewrk: if targetting 5.2+.... what should it do? try new version first then fallback to old (less secure) behaviour?

1569085408
daurnimator
how do you target e.g. 5.2 explicitly vs >=5.2?

1569085683
andrewrk
daurnimator, the setting will be the "minimum OS". Idea being that the software is supposed to be compatible with that version and all versions after

1569086038
plumm
!log

1569086322
plumm
ok, mikdusan1 I managed to build llvm 9 but the command for building zig failed within the findllvm cmake. I can run llvm-config myself and get a version, but the output from within the cmake is blank and causes a failure

1569087742
TheLemonMan
andrewrk, if you're trying to run the behavior tests on aarch64 have a look at #3278 first

1569087812
andrewrk
hi TheLemonMan, I was just hoping to find you here

1569087830
andrewrk
question about the undefined pointer test failure -

1569087858
andrewrk
what was the issue here? was it a release-fast build because we set the "nonnull" attr, and passing undef as the parameter violates that?

1569087872
andrewrk
because if not for that I think it should work right? the ptr is never dereferenced

1569087912
TheLemonMan
nope, bog-standard test run in debug mode. The pointer is never deferenced but it's checked as part of the optinal payload

1569087953
andrewrk
oh, I see, but the cast assumes non-null. OK that makes sense then. This is a bit of a tricky issue

1569087974
andrewrk
(PR is good, merged)

1569087996
andrewrk
I've been thinking that it would be OK for a slice to have undefined ptr if the len is 0

1569088040
andrewrk
but this violates the proposed definition of undefined from

1569088067
TheLemonMan
the undefined parameter is not lowered into anything at all

1569088081
andrewrk
if an operation can possibly invoke UB depending on the operand's value, and the operand is undefined, then that operation invokes UB

1569088118
TheLemonMan
if you check out the generated code for x64 the %rdi register is never loaded at all once "test" is invoked

1569088172
andrewrk
it means that this is undefined behavior: (?*T)((*T)(undefined))

1569088198
andrewrk
(compile error will catch that one since it's comptime, but you get the idea)

1569088211
rohlem
Wouldn't that still pass as an undefined value, with its optional-ness being undefined?

1569088242
andrewrk
rohlem, ah, yes, that's right.

1569088260
rohlem
This might be tangential or too abstract, but should a callee ever have to check whether an argument is actually a valid bit pattern for that type?

1569088272
andrewrk
that's not a thing that is possible to check

1569088286
rohlem
Because if not then passing undefined as a function argument would require the caller to make that check

1569088286
andrewrk
sometimes it is in debug builds, but that's on the compiler to insert such safety checks

1569088312
rohlem
Or otherwise having any function argument undefined is always UB? I.e. always an error?

1569088326
andrewrk
that's not the case

1569088393
rohlem
Say we pass a non-optional pointer. I see 3 options for checks: Caller checking if it sends a valid arg, callee checking if the arg received is valid, or checking if the argument is non-null on the first use / cast to optional pointer.

1569088500
rohlem
Just hypothetically, if a function call is a "expression with a side effect" and an undefined argument is an "operand", then by # 1947 it would be UB, correct?

1569088558
rohlem
ah, no, it only lists that for "expressions which have possible undefined behaviour", my bad.

1569088919
rohlem
(Again, purely hypothetical - would making `undefined` only "usable" within function scope and "safety-converted" at function boundary be too much of a loss?)

1569089182
andrewrk
I'm not sure exactly what that would look like. we don't have a fool proof way to determine if a value is undefined at runtime

1569089256
rohlem
Well, not in the general case, but we can know for a type with X bits of value and X+P bits of storage what P has to be in order for the operations to behave as they should, correct?

1569089323
rohlem
Or in the case of pointers, there's a single all-zero state that a non-optional pointer should never be in. So we can at runtime determine if a pointer-argument is in this "invalid" state.

1569089348
rohlem
(Undefined and UB are the only way to get that type into that bit pattern, but that's not directly relevant.)

1569089392
rohlem
(* what states the additional P padding bits need to be in)

1569090117
andrewrk
TheLemonMan, wow nice, behavior tests passing for me with aarch64 qemu. I'm going to add build.zig option for this

1569095237
fengb


1569095249
fengb
I hope Zig can be a nice rebuttal to this approach :)

1569095286
companion_cube
yeah, I was reading the comments

1569095294
companion_cube
sounds like once Zig is reliable, it'd do nicely

1569095313
fengb
I’m also amazed at how much misinformation around “Go GC is low latency” and “why not C++??”

1569095331
companion_cube
is it really false, the Go GC thing?

1569095338
companion_cube
I have no experience iwth it

1569095384
fengb
It’s lower latency than most, but it’s still nontrivial

1569095433
fengb
And definitely not good enough for explicit real-time

1569095714
andrewrk
it's already hard enough to hit a frame deadline, why start out with a handicap?

1569095767
companion_cube
lots of comments point out that malloc doesn't cut it either

1569095770
companion_cube
so, custom allocators it is!

1569095777
companion_cube
(which makes Zig even more exciting)

1569095852
andrewrk
check this out:

1569095856
companion_cube


1569095858
andrewrk
./zig test ../test/stage1/behavior.zig -target aarch64v8-linux --test-cmd qemu-aarch64 --test-cmd-bin

1569095862
andrewrk
this works now thanks to TheLemonMan

1569095917
mikdusan1
what does last arg `--test-cmd-bin` mean?

1569095917
companion_cube
so wait, you're testing a ARM binary with qemu?

1569095924
andrewrk
companion_cube, yes

1569095960
andrewrk
mikdusan1, it's a bit of a clunky CLI, but it's configurable where the test binary argument goes in the command line

1569095971
mikdusan1
oh subst. i c.

1569095975
andrewrk
yeah

1569095995
andrewrk
I'm going to make this as simple as `zig build -Denable-qemu`

1569096022
andrewrk
I'll probably start using locally `zig build test -Dskip-release -Denable-qemu`

1569096040
andrewrk
zig build test -Dskip-release -Denable-qemu -Denable-wine

1569096064
andrewrk
that's a lot of target coverage.

1569099273
companion_cube
oh, didn't realize you were on #rust

1569100380
companion_cube
what's the syntax for initializing an anonymous struct? (say, one declared in an `union(enum)` field)

1569100491
andrewrk
you can't do it without the type currently. which makes anon structs mostly useless.

1569100522
andrewrk
the planned syntax is .{.foo = bar}

1569100529
companion_cube
oh, interesting, ok.

1569100581
andrewrk
I'll probably remove the original syntax after that, because Foo{.a=b} would be equivalent to Foo(.{.a=b})

1569100608
companion_cube
which looks kind of weird, tbh

1569100635
companion_cube
would `{.a=b}` be an option?

1569100652
companion_cube
then you can specify with `{Foo.a=b}` if needed (as OCaml does)

1569100672
andrewrk
var foo: Foo = .{.a = b};

1569100703
companion_cube
fair enough, yeah

1569100717
companion_cube
what does it look like for unions? exact same syntax?

1569100720
Tetralux
Maybe Foo.{.a = b} too then?

1569100730
Tetralux
That way transforming code would be more pleasant.

1569100754
andrewrk
if {.a=b} is unambiguous with only 1 token look ahead I think that would be a reasonable candidate. but it breaks consistency with anon enum literals `.foo` & anon list literals `.{a, b}`

1569100815
andrewrk
I wanted [a, b] for anon list, but it's ambiguous with array types (a can be an entire expression)

1569100848
andrewrk
{a, b} is ambiguous with blocks

1569100866
companion_cube
so I ported a bit of hairy C to rust, with unsfe pointers everywhere

1569100877
companion_cube
and I think Zig would be so much more suited to this

1569100910
andrewrk
I do feel confident saying that zig is better suited for the parts of a rust codebase that would have to be unsafe anyway

1569100928
andrewrk
when your unsafety doesn't have an explicit seam, zig is pretty good

1569101046
andrewrk
(a, b) is ambiguous with grouped expressions

1569101057
andrewrk
so .{a, b} it is

1569101064
companion_cube
yeah, if most of the code is unsafe anyway…

1569101072
companion_cube
I do miss rust's syntax a bit though

1569101087
companion_cube
(yeah, I'm repeating myself)

1569102042
_Vi
Is there already a proposal issue about exposing distributed enum mechanism Zig uses for error handling to be available for other purposes?

1569102141
companion_cube
I'd call that "open enum" personally (as in OCaml… predictably)

1569102202
_Vi
Otherwise errors would be misused as poor man's "open enums", with tricks in `errdefer` to run only on genuine errors.

1569102428
companion_cube
(funny, that's how exceptions work in OCaml as well; after open sum types were introduced, exceptions became just another normal defined type)

1569102798
Sahnvour
andrewrk: are you still considering PR before the release of 0.5.0 ?

1569103998
_Vi
Was idea of number types with a niche for null already proposed/considered?

1569104765
rohlem
_Vi, to clarify, you propose that f.e. `@bitSizeOf(NicheNullable(uX, 0xFF)) == @bitSizeOf(uX)` ?

1569104809
rohlem
For now I guess a userland `fn is_niche_null(uX) bool` , or wrapper (generic) struct to avoid ambiguity would be a replacement solution.

1569105655
rohlem
Operating on such NicheNullable integers would either require unwrap-if-s before every value access, or adding overloads (with additional cause of failure) for every integer operator to the language.

1569106111
_Vi
rohlem, Yes.

1569106178
_Vi
rohlem, In Rust, NonZeroU{..} just always requires casting to regular numbers for any operations. NonZero... is only for storage and it is UB to cast 0 to them.

1569106238
_Vi
rohlem, More like `@bitSizeOf(? NicheNullable(uX, 0xFF)) == @bitSizeOf(uX)`

1569106312
rohlem
_Vi, wouldn't that make the NicheNullable nullable a second time? Given current semantics, if you implement NicheNullable via a generic struct.

1569106369
_Vi
rohlem, Don't understand. Or do you mean `NicheNullable` already having optional semantics (`try` `orelse` and so on)?

1569106437
_Vi
The idea is to make using sentinel value ergonomic.

1569106448
rohlem
The `?` prefix operator adds an additional layer of nullable. `?T` is already a nullable type.

1569106470
rohlem
Whatever NicheNullable returns would get an additional layer of nullable-ness. I would assume that's what NicheNullable does already.

1569106489
_Vi
So `? NicheNullable(uX, 0xFF)` is optional non-FF number. `NicheNullable(uX, 0xFF)` is just non-FF number, not optional.

1569106530
rohlem
Given something non-optional a name containing `Nullable` strikes me as counter-intuitive.

1569106587
_Vi
So that `NicheNullable` is not a good name.   More generic version of the feature is range-restricted types like that is said to exist in Ada.

1569106675
rohlem
The blacklisting of certain values is an additional feature you're proposing. The closest status-quo thing I can think of is not exhausting all states of an enum's tag type. As in `enum(u2){A,B,C}`.

1569106684
_Vi
But the latter is more often cited for additional correctness checks rather than for layout opt.

1569106758
rohlem
Making the compiler then look for invalid bit patterns to use as nullable-flag/counter is powerful, but probably goes against the `simplicity` principle.

1569106804
rohlem
Though with comptime evaluation and reflection, you're free to implement such a mechanism in userspace - although that of course doesn't include syntactic sugar.

1569106816
_Vi
Typically sentinel values are at the end of supported value range. So range-limited numbers can emulate niched numbers for 2 values of the niche per type.

1569106858
_Vi
Yes, adding more layout optimisations (extending existing "optional pointer") is definitely less simple.

1569106903
_Vi
And it may be impossible anymore if there will be stable commited Zig ABI.

1569106906
rohlem
The idea of preprocessing steps has been toyed around with however.

1569106946
rohlem
Especially with the self-hosted compiler being a part of the standard library, maybe there can be a fork that allows adding custom type operators and more backend logic.

1569106996
rohlem
Then you could have ".zig_custom" files in your repository, have the build.zig process it via a slightly modified pre-parser or compiler, and integrate that with the rest of your code base. (Or have no vanilla Zig left even.)

1569107000
_Vi
Very powerful, but explicit idea is fully customized layout: user-defined functions to write to memory and read from memory to store/retrieve a particular Zig struct/enum/union.

1569107089
rohlem
... if you want fully customizable memory access, you're kind of bypassing the type system at that point. At least its layout.

1569107097
_Vi
I.e. custom representations: not C-compat, not packed, not SIMD, but really custom.

1569107281
_Vi
One can instruct to store a number in stack or heap e.g. xor-ed with some constant (and only have "unencrypted" number for short amount of time in registers).

1569107338
_Vi
Imagined use case: video game with a slight anti-cheat debugging resistance against memory scanning.

1569107547
rohlem
That sounds unnecessarily complicated. Wouldn't an extensible obfuscation framework be better suited?

1569107602
_Vi
Would this framework automatically work for wasm and mips?

1569107604
rohlem
I'd assume you want the code you write to be somewhat readable, right? So add obfuscation steps before, during, or after compilation that XOR, shift, and throw about magic values.

1569107632
rohlem
But I don't see the point in hard-coding something like that into the source code. That will only make your life harder.

1569107646
_Vi
Obviously, the code should be fully readable, as if there is no tricky layout/memory indirection layer.

1569107658
andrewrk
Sahnvour,  re: "are you still considering PR before the release of 0.5.0 ?"  yes if it's easy to merge

1569107664
_Vi
The complexity should be in custom sizeOf, alignOf, read and write functions.

1569107773
rohlem
I honestly don't understand / agree with the use case of "cheat prevention via obfuscation". But if you plan to obfuscate, it should IMO be at a layer after business logic. Otherwise you're confusing yourself just as much as reverse-engineers / "attackers".

1569107910
rohlem
So keep your source code clean and readable, and during an obfuscation step then assign every logical entity you want to treat distinctly - like every struct's member - some unique ID, then randomly prepare a map of de- and serialization routines from and to instances of such an entity.

1569107911
_Vi
rohlem, Maybe compressed-ish memory storage would be better use case.

1569107962
rohlem
For compression you probably want to just use packed struct, and if you know some invariant to save space add set- and get-methods that are aware of how to compress.

1569108030
andrewrk
I feel comfortable saying obfuscation is not one of the accepted use cases of zig

1569108036
companion_cube
:D

1569108043
_Vi
Anyway calling user code on reads/writes of specified type from/to memory can be considered "implicit control flow" which is avoided in Zig...

1569108046
companion_cube
write reusable code… by obsfucating it!!

1569108211
_Vi
Simple things (if return closer to the beginning of the discussion) is just to provide nonZeroU16, nonFfffU16, nonMinvalI16 and so on, for specific sentinel values only.

