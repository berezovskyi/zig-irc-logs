1564016224
Tetralux
Are circular imports disallowed in Zig?

1564016255
Tetralux
Or is it only a problem

1564016261
Tetralux
..in which case it's fine?

1564016434
scientes
Tetralux, only circular "use" statemennts

1564016465
scientes
otherwise it can never be a problem, because it is lazily  lazy

1564016885
emekankurumeh[m]
how would I go about rebasing a pr against master?

1564017234
scientes
git rebase -i origin/master

1564017268
scientes
uggh, i need a newer (2013+) intel cpu so i can get faster reversable debugging

1564018214
scientes
also UML now has time-travel mode

1564018220
scientes
that might be fun to play with

1564024048
fengb
andrewrk: I've been getting a weird build error

1564048259
mq32
just noticed that extern is really overloaded as a keyword

1564051537
daurnimator
mq32: did you reread the conversation from yesterday?

1564051835
mq32
i think i followed a bit, but not quite sure what you mean in particular (except for "extern beeing overloaded")

1564051907
daurnimator
mq32: I was just referring to my own realisation of the same. 00:41:47 <daurnimator>wow `extern` is really overloaded in meanings isn't it

1564051938
mq32
ah yeah

1564051972
mq32
i just noticed when writing the response here

1564052211
daurnimator
mq32: heh yep I was thinking about the same issue

1564052295
mq32
i think it's one of the most anticipated issues right now

1564052989
nrdmn
daurnimator: should struct methods be pub? My demo code works fine without them being pub

1564053035
daurnimator
nrdmn: yes. in future non-pub methods will not be visible outside of the struct I think

1564053047
nrdmn
ah okay

1564053096
Tetralux
daurnimator: Really? Will there be a way to specify the current behavior?

1564053186
nrdmn
can `struct`s have a different memory layout than an `extern struct`?

1564053203
daurnimator
Tetralux: okay now I'm having trouble finding the relevalt issue. what do you mean by current behaviour?

1564053220
daurnimator
nrdmn: yes. a plain `struct` has undefined field order and padding.

1564053222
Tetralux
Accessible from file scope, hidden outside file scope.

1564053245
daurnimator
nrdmn: `extern struct` means "same as C struct layout"

1564053257
daurnimator
nrdmn: and `packed struct` means no padding: I mean exactly what I say. in order.

1564053319
daurnimator
Tetralux: ah right. I think I got confused. nrdmn: `pub` means "visible outside the current file".

1564053333
daurnimator
though that has always seemed a bit weird to me

1564053352
daurnimator
==> now that files are structs.. surely it should just meatn "visible outside current struct"

1564053375
Tetralux
But you said that non-pub may become invisible outside the _struct_.

1564053404
daurnimator
Tetralux: yeah sorry. that's only true in my head ;P

1564053441
Tetralux
Does "current struct" mean, `@This()`, or the current file's scope struct?

1564053468
daurnimator
Tetralux: I intended to mean `@This()`

1564053502
Tetralux
Ah yeah - in that case my point still stands I think xD

1564053515
Tetralux
I'd want to be able to export to file scope, but not outside the current file.

1564053545
Tetralux
Maybe `prot fn`

1564053548
Tetralux
(protected)

1564053556
Tetralux
But maybe that's not clear enough.

1564053574
Tetralux
I'd rather `file` honestly - if not for the pollution.

1564053580
daurnimator
Tetralux: I on the other hand like to imagine that `@import("foo.zig")` is the same as writing `struct { <contents here> }`

1564053635
daurnimator
which.... aside from this issue (and obviously file names/line numbers is traces): it is

1564053657
Tetralux
Your suggestion would make it more consistent, sure.

1564053681
Tetralux
Then without pub, the fn would not be accessible from outside the current struct - be it file scope or struct within file.

1564053730
Tetralux
But that would mean that for a file to use the methods of a struct defined within it, they'd have to be pub.

1564053966
mq32
afaik the intent behind "pub" is hiding it from other files and imho that should stay like it. having in-module information hiding only prevents coders from beeing explicit and introduces a lot of unnecessary code

1564054070
daurnimator
so an interesting thing would be to make it available in the std library

1564054086
daurnimator
`std.meta.privateFunction(mystruct, "mymethod")`

1564054112
daurnimator
which could access it via `@typeInfo`

1564054542
Tetralux
Does Zig check that you're passing the correct number of arguments to an extern stdcallcc fn?

1564054550
Tetralux
Only, it isn't in my case.

1564054570
Tetralux
Oh wait nv,

1564054573
Tetralux
nvm*

1564054607
Tetralux
Thought I was missing an arg, but actually it's just of the same type as a different thing and I'm passing the wrong t hing.

1564054629
daurnimator
oooo > The pidfd_open() system call has been added;

1564056654
Tetralux
daurnimator: They didn't have that before?

1564056675
Tetralux
Please tell me that programs didn't search by exe name to open another processes' stdin or something.

1564056689
daurnimator
> open another processes' stdin

1564056691
daurnimator
wut?

1564056722
Tetralux
So that it can write to it?@

1564056751
daurnimator
Tetralux: the point is more that the whole of "waiting" linux is based around waiting on a file descriptor (select/poll/epoll). However if you want to know if a process exited then you need to call the `wait` syscall instead

1564056815
Tetralux
.. but using this new syscall means you can just epoll/etc on it to wait for it.

1564056815
daurnimator
which has meant that waiting for X fd to be ready

1564056822
daurnimator
Tetralux: exactly

1564056825
Tetralux
I see.

1564056837
Tetralux
That

1564056850
daurnimator
yep. I've been wanting it since 2005 or so

1564056856
daurnimator
so.. huzzah!

1564057429
mq32
daurnimator, oh, neat

1564057432
mq32
thanks for clarification

1564057458
daurnimator
mq32: ..... uh. on ?

1564057467
mq32
the syscall thing :)

1564057473
mq32
i wasn't aware of that yet

1564057476
daurnimator
`pidfd_open`?

1564057478
mq32
yeah

1564057499
mq32
didn't had the requirement to wait for child processes, but maybe in the future :)

1564057514
Tetralux
I've been getting several pretty fatal weirdnesses.

1564057517
Tetralux
Or so it seems.

1564057518
daurnimator
mq32: one "trick" is to give an FD to a process and wait for it to get closed.

1564057530
Tetralux
Things like optionals implicitly casting away without compile errors.

1564057531
Tetralux
And

1564057535
Tetralux
More troublingly.

1564057538
daurnimator
which is posixly correct. but rarely works in reality

1564057576
Tetralux
Implict cast between !*T (for T = @OpaqueType()) and U. (U = unrelated `struct`.)

1564057592
Tetralux
correction: "and !U"

1564057653
mq32
daurnimator, yeah i already have a project where i use single pipe fd to my epoll that i can use to cancel that epoll :(

1564057687
daurnimator
mq32: use an eventfd2 for that :)

1564057728
daurnimator
suprisingly faster.

1564057905
mq32
okay, never heard of that

1564057969
daurnimator
mq32: on non-linux you don't even need it IIRC

1564058023
daurnimator
e.g. on solaris you can just `port_send`

1564058152
mq32
i'm only coding stuff on linux and windows

1564058159
mq32
(and embedded, but that doesn't count)

1564058184
daurnimator
FWIW dragonflybsd's kqueue is the best model for polling

1564058223
daurnimator
if you design for dragonfly... and then add hacks/workarounds for linux/solaris/other bsds. then you won't end up with a bad result

1564058246
daurnimator
on the other hand, windows.... is a mess. you really need to delve into AFD to get things right. And I can count on one hand the people that know that stuff

1564059469
fgenesis
AFD=?

1564059483
daurnimator
fgenesis: advanced function driver

1564059492
fgenesis
the name alone is cringey

1564059506
daurnimator
fgenesis: it's the piece of windows that handles TCP/UDP

1564060836
daurnimator
fgenesis: sorry, Ancillary Function Driver...

1564060936
fgenesis
even better

1564062197
Tetralux
What should I do if I get this from Zig when trying to build:

1564062267
Tetralux


1564062301
daurnimator
Tetralux: 1. use a zig with debug symbols. 2. run under gdb to get a better stack trace?

1564062378
Tetralux
On Windows, cannot build debug version of Zig.

1564062393
Tetralux
On Linux, cannot run the executable, because it currently using Windows API.

1564062411
Tetralux
I can try with wine-dbg maybe though.

1564062450
Tetralux
Debug on Linux however, still does not give any symbols for the stack trace.

1564064193
Tetralux
Well - gdb on debug Zig gives this for the segfault:

1564064216
Tetralux


1564064704
fengb
The stack printer is segfaulting?

1564065066
Tetralux
fengb: Presumably.

1564065083
Tetralux
I don't think that's the problem though, I think that's a secondary problem.

1564065131
Tetralux
The cmdline was `zig build-exe -target x86_64-windows file.zig` and all the stack trace that it

1564065318
emekankurumeh[m]
can someone else confirm if stack traces are broken on windows?

1564065354
Tetralux
Note that what I've posted is the output when cross compiled from Linux.

1564065397
Tetralux
If I attempt to compile it on Windows, it just says that an assertion failed and tells me that it cannot dump the stack trace: Unable to dump stack trace: Unable to open debug info: InvalidPEMagic

1564065416
emekankurumeh[m]
i'm talking about a separate issue (I think)

1564065436
Tetralux
I'd be amused if it was the same one xD

1564065457
emekankurumeh[m]
lld seems to have changed where it places the pdb path in the binary breaking stack traces

1564065651
emekankurumeh[m]
go to getPDBAPath in std/coff.zig and change the section it looks in from .rdata to .buildid

1564065879
Tetralux
That gives MissingCoffSection instead.

1564066027
mikdusan
emekankurumeh[m]: stacktraces appear to work for me;

1564066054
emekankurumeh[m]
on master?

1564066071
mikdusan
yes

1564066205
emekankurumeh[m]
hmm, ever since I updated my system llvm/lld stack traces have been broken

1564066255
mikdusan
i use the same llvm binary package that CI server does. but other than that, msvc compiler driven by msys64 environment

1564066413
emekankurumeh[m]
perhaps it's because i'm targeting windows gnu

1564066496
fgenesis
what about targeting a non-moving system, like xp, that would at least be viable and guaranteed to work :P

1564066511
emekankurumeh[m]
can you try listing all the sections in your executable?

1564067026
Tetralux
I have, .text, .rdata, .data, .pdata, .rsrc, and .reloc.

1564072223
firefox317
andrewrk: Are you streaming tonight?

1564072610
Sahnvour
emekankurumeh[m]: I'm doing improvements in coff/pdb parsing as it wasn't able to read it from link.exe, might as well benefit lld if the behaviour changed

1564072706
Sahnvour
this close to have stack traces finally working in zig1, too, but there's something that gives me headaches at the moment

1564073208
fubd
I have: if (thing_maybe) |thing| {} else { do_something(); }

1564073220
fubd
but if (!thing_maybe) { do_something(); } doesn't work

1564073230
fubd
am I missing an obvious null check from the docs?

1564073732
gonz_
I haven't done it, but you could try `thing_maybe orelse do_something()`

1564073828
gonz_
The "haven't done it" part is to have it naked, not as part of an assignment

1564073854
scientes
gonz_, you mean like in a function call?

1564073859
gonz_
Oh, he quit :|

1564073867
gonz_
That's too bad

1564074005
gonz_
scientes: I just wanted to put a disclaimer on it saying I haven't used it as a naked expression not assigning to anything

1564074048
gonz_
I wouldn't

1564074061
scientes
that's why we have tests

1564074102
scientes
hmmmm, no test for that

1564074129
scientes
but wait

1564074135
scientes
you would probably just want to use "or" in that case

1564074139
scientes
as it would be the same

1564074188
fubd
gonz_: i check the logs :)  irc connectivity is tough, i would be into a discord bridge or something

1564074194
fubd
ah ok i see, i'll try something like that

1564074377
fubd
ah yeah, the problem with those two

1564074381
gonz_
scientes: No, I think it has to be `orelse`

1564074385
fubd
is that "or" fails because

1564074392
fubd
the optional pointer is not bool-able

1564074393
gonz_


1564074413
scientes
gonz_, oh yeah i'm confusing c and zig

1564074449
fubd
and in my case orelse fails as well

1564074452
fubd
since the types are different

1564074465
scientes
hmm

1564074468
gonz_
Are you assigning to something?

1564074481
scientes
perhaps if you aren't using the value it should be allowed

1564074490
fubd
nope. calling a function whose value i'm putting into _

1564074495
fubd
but only if the optional is null

1564074504
scientes
as a shortcut to if (something()) else something_else()

1564074565
gonz_
You could just ignore in the block itself and return void, though?

1564074570
fubd
doesn't seem very ziglike to have a moonscript-esque 'unless'

1564074593
fubd
parent orelse _ = try gs.addComponent(entity_id, c.AutoMover{});

1564074594
scientes
fubd, its necessary for if else

1564074595
scientes
like in C

1564074597
fubd
what do you mean?

1564074615
gonz_
Can you paste your code on godbolt?

1564074620
scientes
well in C else if is just if followed by another if

1564074629
scientes
in Make it is really ugly

1564074637
scientes
and C avoids that but not requiring the braces

1564074660
scientes
zig only allowed omiting the brances if its on the same line

1564074665
Tetralux
std.net is incomplete right?

1564074671
scientes
Tetralux, yes

1564074685
scientes
but coroutine rewrite is coming

1564074687
Tetralux
Figured; noticed it uses os.sockaddr, but doesn't have it.

1564074688
scientes
which is really exciting

1564074696
gonz_
fubd:

1564074729
Tetralux
I'm excited to see how that goes, but I tend to write simple non-async code so I'm not sure how easy it will be for me to maintain comprehension of what's happening.

1564074739
Tetralux
I also really hope it has good stacktraces.

1564074742
Tetralux
Or I ain't using it XD

1564074750
Tetralux
I've had that pain quite enough with .NET.

1564074762
fubd
parent orelse {

1564074784
fubd
C:\Users\Kevin\src\wasm-tetris\src\prefabs.zig:12:12: error: incompatible types: 'void' and '*components.transform.Transform'

1564074785
fubd
nts.transform.Transform' here

1564074816
gonz_
Can you paste your code?

1564074856
scientes
andrewrk, pinebook pro

1564074902
halosghost
gonna hold out for the ANSI model though

1564074959
THFKA4
scientes: he was setting up the latest XPS in #nixos yesterday

1564075027
THFKA4
also holding out for the ANSI model here

1564075078
scientes
what is wrong with 3 extra buttons?

1564075103
scientes
i'm currently using a portugeese keyboard in en_us mode so all the labels are wrong

1564075158
scientes
i can get that people wouldn't want the ANSI keyboard, but I don't get the other way around

1564075210
THFKA4
iono, personal preference, existing muscle memory, etc.

1564075254
scientes
yeah but I've used the mac keyboard and thinkpads that get the ctrl-alt-super-fn all messed up

1564075258
scientes
and it gets me everything

1564075261
scientes
every time

1564075284
scientes
that damn fn key in differn't places

1564075406
scientes
oh strange place for the delete button

1564075519
halosghost
scientes: I grew up with ANSI; having |\ above return is just what my brain expects now

1564075527
halosghost
that's really the only reason

1564075547
scientes
I hardly use that key

1564075570
halosghost
I use it all the time

1564075580
halosghost
mostly for |

1564075584
halosghost
because shell stuffs

1564075596
halosghost
and also escape characters

1564075598
halosghost
🤷

1564080936
emekankurumeh[m]
Sahnvour I may have gotten backtraces to work in stage 0 by using lld to link and emit a pdb

1564081251
Sahnvour
yeah same for me, but not with link.exe (which is the default linker used for zig on windows)

1564081317
Sahnvour
our implementation needs to be more robust

1564081327
Sahnvour
as in, correct :D

1564083095
scientes
yeah I can't run the test suite on my computer

1564083099
scientes
it takes like 8 GB of ram

1564083898
emekankurumeh[m]
I should not I'm on mingw-w64

1564084303
emekankurumeh[m]
*note

1564084775
Lahvuun
Hello. What's the correct way to access fields of an imported C struct? I'm getting this error: "type '.cimport:4:17.struct_wl_display' does not support field access"

1564085227
Tetralux
I seem to remember someone else asked that a few weeks ago. Alas, I don't quite remember what the problem was. Anyone else?

1564085526
darithorn
Lahvuun afaik wl_display is an opaque struct. it's not designed for direct field access

1564085612
Tetralux
If that's the problem, the error should probably point out that it's opaque.

1564085657
darithorn
yeah i agree. it may have to do with the fact that wayland doesn't typedef any of its structs

1564085891
Lahvuun
It looks like that's the case. Thank you.

1564087152
dimenus
woo simd matrix transpose

1564087332
Tetralux
Cool - Though I find it pretty unreadable.

1564087348
dimenus
it's way less readable than the loop

1564087348
dimenus
:D

1564087357
Tetralux
Sounds about right

1564087358
Tetralux
XDDD

1564087360
Tetralux
Makes me wonder if there's a better way to write the interface for it.

1564087368
dimenus
there isn't an interface

1564087371
dimenus
you shouldn't have to read this

1564087374
dimenus
just pass in the matrix

1564087451
Tetralux
True, though Mat literals would still be afflicted by this right?

1564087476
dimenus
in my code i have a packed union of two views

1564087485
dimenus
@Vec4 and f32[4][4]

1564087510
Tetralux
What is the in-memory layout of [4][4]f32?

1564087512
dimenus
though [4][4] is probably less intuitive with column vectors

1564087518
Tetralux
Is it the same as [16]f32?

1564087525
dimenus
yes

1564087587
Tetralux
Interesting.

1564087642
dimenus
it's only awkward when you're writing a print function

1564087868
dimenus
i'm a fan of params being const I think

1564087874
dimenus
less random pointers everywhere

1564088252
dimenus
Tetralux, for context the C++/DirectXMath version is way less readable imo

1564088392
dimenus
LLVM uses shuffle for shuffle/permute/swizzle

1564089531
ntgg
is std.zig.parse broken?

1564089616
hryx
ntgg: what's the problem?

1564089650
hryx
it is tested in CI, you'll have to be more specific about what you're seeing

1564089671
ntgg
it doesn't compile, failure in assertion in segmented_list.zig, and expected type u6, found usize in segmented_list.zig

1564089679
ntgg
but only when calling through std.zig.parse

1564089772
hryx
can you link to your code?

1564089904
ntgg


1564090052
hryx
at a glance, looks fine, and I don't think an assertion should be triggered. side note, why are you using an arena allocator? zig.parse is already going to wrap the allocator you pass in an arena

1564090126
ntgg
That was just part of the code from an acutal project

1564090150
ntgg
allocator is used more than just there

1564090193
hryx
I think an assert getting triggered is a bug. can you try to create the smallest case that reproduces the isseue?

1564090202
hryx
or does your paste also reproduce it?

1564090211
ntgg
the paste reproduces it

1564090222
hryx
great. and you're on master?

1564090280
ntgg
I just rebuilt the zig-git package from the AUR, version 0.4.0+9e11f67f0

1564090341
Tetralux
For reference, master is version 0.4.0+9e11f67f

1564090417
hryx
ok, I reproduced it

1564090768
hryx
it only happens when wrapping in an arena. can't tell at a glance, but I'm concerned it could be related to this "gotcha":

1564090801
hryx
just using the direct allocator removes the problem. ntgg if you have a sec, can you check that out? And if it looks unrelated, open an issue?

1564090918
ntgg
I'm still getting the issue when I use std.heap.direct_allocator

1564090940
mikdusan
hryx: what's the error you get? for me it looks like debug.warn() error - i don't think it knows how to print a tree

1564091080
hryx
oh damn mikdusan, I might have removed too many lines at once while debugging that

1564091137
mikdusan


1564091140
hryx
mikdusan: good catch, you're right. I removed the arena

1564091185
hryx
so this doesn't have to do with parse, but warn/fmt it looks like?

1564091261
ntgg
That makes much more sense

1564091277
mikdusan
btw odd to me the stack trace doesn't quite show me the offending line in main

1564091299
mikdusan
it's def. comptime

1564091484
mikdusan
this works: `std.debug.warn("{*}\n", tree);`

1564094042
mikdusan
i think what's happening is comptime code of std.fmt is causing more code coverage on segmented_list and exposing a few bugs

1564096703
bwb_
andrewrk: do you have variadic arguments?

1564096910
fengb
bwb_: yes but it'll be removed —

