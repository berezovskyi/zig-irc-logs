1565311597
daurnimator
oh cool. the async inference goes up to _start. that's cool!

1565311655
daurnimator
if main is async, should we automatically create an event loop?

1565311744
rsdimenus
andrewrk: what cpu is in the new build? :D

1565312911
daurnimator
with your fetchUrl/readFile example. if e.g. readFile was

1565313234
andrewrk
daurnimator, I was considering that too re: automatically creating an event loop for main()

1565313258
andrewrk
daurnimator, planned to work but I haven't done that proof of concept yet

1565313265
daurnimator
andrewrk: I suppose it means we'd need as @isAsync function.... which doesn't seem to fit well

1565313319
daurnimator
like... it's obviously possible: you could in a stupid world, check for the compile error "main is async" and try again..

1565313333
daurnimator
but I don't see how to fit it in to other things. maybe you do

1565313582
daurnimator
oh.... hang on we have a possibly easier solution: what if we

1565313586
daurnimator
andrewrk: ^

1565313638
daurnimator
if you `async foo()` and foo is not async: does it get optimised to a normal call?

1565313739
Tetralux
It turns too async.

1565313751
Tetralux
turns foo async*

1565320439
hspak
man there's a lot of catchup to do to beat Zig & Sharko on youtube search

1565338297
mq32
andrewrk: I have to reframe my question from the stream yesterday: "Can i check if i can resume (not await) a coroutine frame or if it is done already" usecase: multiple suspend points with runtime execution length

1565338313
mq32
example: "Download

1565353176
kristoff_it
today we're on the HN frontpage! The link is falling off a little bit, it was higher up during the european morning

1565353265
fengb
I love this comment:

1565353621
dimenus
is pron in irc?

1565353763
presiden
I thought you was asking for porn, not user with nick pron

1565353767
presiden
:D

1565353979
dimenus
too early in the morning for that

1565354220
presiden
anyway, yes, pron is in irc

1565354239
presiden
tho, don't know if it's the same person as that hn user

1565355428
gonz_
> Although I find Zig very interesting—and I wish Andy the best of success with it—the trade-off that the Rust offers is more in line with my values and my ethics.

1565355440
gonz_
You're all being super unethical, guys.

1565355522
dimenus
because we like manual memory management? :D

1565355533
gonz_
Presumably.

1565355609
dimenus
while you can forget to free memory, the pervasive use of allocators seems to make tracking that easy even without valgrind

1565355626
dimenus
And errdefer is such a great addition for cleaning up failure cases

1565355680
dimenus
i'd much rather work in a language that doesn't force me into specific memory lifetimes based on scope

1565355763
mq32
dimenus: true that!

1565355796
fengb
I agree with gingerBill where he mentioned unknown lifetimes are pretty rare

1565355819
gonz_
I was with this gnuvince guy partially until he brought ethics into it.

1565355920
fengb
Most of the harder problems I’ve had is solved pretty elegantly with arenas. I kinda wish I knew about them before Zig

1565355948
dimenus
fengb: cmuratori / jonathan blow talk about them a lot

1565355955
dimenus
more common in games for sure

1565355961
kristoff_it
I think in the grand scheme of things Rust will have a good impact on Zig, even on these subjects. The language (maybe with the help of some good old marketing efforts) has sensibilized a lot of people on the importance of correctness (great!) but as it often happens with complex messages, the nuances got lost in translation and a lot of people think a roided out type system is the only way to go. I think it's easier to provide more contex

1565355961
kristoff_it
t to these people than try to build awareness from scratch, especially without a fat marketing budget.

1565356015
dimenus
andrew is trying to put food on the table, not buy a yacht

1565356041
fengb
He’s had the ultimate yak shaving journey

1565356066
dimenus
i wanted to support Andrew back in 2017, but being on Windows created too much friction

1565356078
dimenus
and the language has done the whole great desigil'ing since then

1565356089
fengb


1565356090
dimenus
it feels great in 2019

1565356145
dimenus
(plus I'm on linux fulltime)

1565356179
mq32
oh, on topic of linux: does someone here has experience with NixOS as a hobby development platform?

1565356223
mq32
(hobby dev == stuff that's mostly not going to be published anyways)

1565356229
gonz_
I feel like I showed up at precisely the right time. I had heard of Zig before but was busy stacking abstractions on top of each other for a while.

1565356235
fengb
I believe Andrew is on nix

1565356264
gonz_
mq32: I used it for Haskell and misc. tooling for a bit. I ended up feeling like it was too much work and I wasn't doing things that really benefited all that much from it.

1565356273
dimenus
gonz_: you were busy stacking abstractions or zig was?

1565356281
gonz_
I was

1565356358
mq32
gonz_, that's my impression right now as well.

1565356373
fubd
is there a "zig check" ?

1565356381
mq32
i'm using Arch Linux and i'm still quite happy for hobby stuff

1565356391
fubd
my program has gotten big enough that I want to make vim tell me when I have a compile error

1565356398
mq32
but for publishing stuff to other people, linux is sadly more DLL hell than windows is

1565356418
fubd
and it'd be nice to do get errors without having to emit a binary

1565356459
dimenus
fubd: zigfmt will warn you about syntax errors

1565356475
dimenus
not semantic errors though afaik

1565356489
fubd
yeah the vim tools already do zig fmt

1565356498
gonz_
Adding a checker to ALE for zig might be nice

1565356505
fubd
that's what i have going

1565356511
fubd
just calling zig build

1565356533
dimenus
zig does do some aggressive build caching, so it's only compiling things you changed recently

1565356541
fubd
i'll publish it once it's working well

1565356542
dimenus
but i agree that having a check option might be a better option

1565356558
gonz_
As far as I can tell the VSCode extension just does zig build and I'm just going with that.

1565356610
fengb
Yeah a compiler check can skip LLVM altogether. Would save quite a bit of time

1565356944
nairou
andrewrk, just out of curiosity, is there any difference for you between Patreon and Github Sponsor? Do you have a preference?

1565357016
fubd


1565357053
gonz_
nairou: Github matches your sponsorship for 1 year, so github is better to use

1565357292
strmpnk
GitHub is matching contributions in the first year so I think it'd be the better choice. I'm also not sure if GitHub is taking a fee or not but that also might be a factor.

1565357325
strmpnk
Heh. Scrolled one line too little.

1565357332
gonz_
andrewrk has asked explicitly for people to use GitHub sponsors, so I think it's a safe bet.

1565357455
nairou
Ah okay. I knew he was excited to have an additional channel, didn't know he specifically asked for that to be used. Thanks.

1565359682
fubd
i'm confused about this error message 'unable to evaluate constant expression'

1565359685
fubd


1565359713
fubd
trying to write an "overload" function that takes params of different types

1565359729
fubd
I'd like to be able to pass setUniform("foo", 4.0)

1565359744
fubd
uniformLoc takes a slice of []const u8

1565359750
fubd
but "foo" is of type [3]u8

1565359756
fubd
so i'm trying to get a slice from it

1565359776
fengb
Somehow the compiler can only run your setUniform invocation at comptime

1565359808
fengb
Wait, I totally misread that

1565359839
fengb
You need to slice a, not uniform

1565359858
fubd
wait, isn't a just a builtin.TypeInfo.Array?

1565359878
fubd
i think you're right, because the definition of uniformLoc has a comptime parameter

1565359879
fubd
pub fn uniformLoc(sp: ShaderProgram, comptime name: []const u8) c.GLint {

1565359879
fengb
Er yeah you're right

1565359897
fubd
i'm trying to glue on a null byte at comptime but that's not gonna work, i'm going to need a buffer

1565359906
fengb
But you're currently trying to slice what the compiler thinks is a non-array

1565359920
fubd
i thought i just verified that it was an array

1565359933
fubd
i thought "var" meant "try compiling this code and if it blows up complain"

1565359938
fengb
Oh

1565359940
fubd
and that the checking was up to you

1565359949
fengb
I haven't used it much sorry >_>

1565359988
fengb
Ah yeah sometimes comptime leads to weird errors.

1565360031
fubd
i think in this particular case it would be useful to see an error message like "uniformLoc has a comptime parameter 'name', but you're passing a runtime parameter'

1565360154
fengb


1565360210
fubd
way ahead of me :)

1565360222
fengb
The tricky issue is that most functions work at comptime and if it doesn't, it's hard to know whether the function is bugged or the invocation is bugged

1565360241
fubd
right

1565360248
fengb
Yeah I had the same issue, which is why I jumped to comptime. I forgot the error message wasn't clear so I thought I misapplied my experience :P

1565360261
fubd
ok, it compiles now--i just make an array on the stack of the right size

1565360263
fubd


1565360304
fubd
i guess this is a particular case where i start to wonder about code size

1565360323
fubd
i.e., does the compiler generate a new copy of that function for every invocation with a different string length?

1565360332
fubd
or, does the stack allocation happen "dynamically"

1565360354
fubd
perhaps that's a question best answered by godbolt :)

1565360375
fengb
Different copy for different comptime values

1565360377
fubd
i don't have a good intuition for how the comptime stage actually gets "lowered"

1565360387
fubd
yet

1565360412
fubd
in that case, it might be better to have a "max size" and an assert, so that I don't explode out my code size....hmmm

1565360438
fubd
warning: the compiler has created 200 versions of this function. are you mad?

1565360446
fengb
lol

1565360474
fubd
some footguns are more obvious than others

1565360502
fengb
I remember someone (daurnimator?) created a comptime dispatch that was a "perfect closure". Downside is that it's a different function for every possible captured value

1565360861
Tetralux
What do people think about having the ability to remove the current element while iterating over std.ArrayList?

1565360877
Tetralux
Only I'm contemplating trying to make a PR for it.

1565360925
dimenus
can you do inclusive end slicing in zig?

1565360933
dimenus
eg I want 0 through 6 not 0-5

1565360942
Tetralux
s[0..n+1] xD

1565360942
dimenus
or iterate backwards?

1565360963
Tetralux
I've always preferred inclusive ranges, so I know your pain.

1565361034
riverlakedev
but in that case every time you want to iterate all elements of array you'll have to do for x in y[0..len-1]

1565361086
bheads
s[0..=n] //inclusive operator maybe??

1565361092
Tetralux
riverlakedev: for (y[0..n-1]) |x| {}

1565361093
Tetralux
But yes.

1565361099
Tetralux
bheads: ugh...

1565361122
Tetralux
I'd rather inclusive was default.

1565361137
Tetralux
It makes it less confusing about what indices you'll get.

1565361141
bheads
with 0 based indexing exlusive is used more

1565361165
Tetralux
bheads: You use inclusive ranges already, it's just that you don't type the -1.

1565361172
Tetralux
#Explicitness.

1565361188
riverlakedev
and i'd be happy to be able to define my own functions like + (not redefine/overload), that work by taking argument from left and argument from right

1565361233
riverlakedev
in that way we'd be able to define inclusive_range function with understandable name

1565361237
bheads
UFCS could improve that

1565361290
riverlakedev
is there a library for build.zig that runs pkg-config and uses its output for linking and includes?

1565361334
andrewrk
riverlakedev, I believe no one has done that yet

1565361359
riverlakedev
i'll be first :D Good

1565361422
riverlakedev
looks like that is only required thing to be able to build c/gtk project with zig build system

1565361520
bheads
also would be nice to do for ranges:   for(min..max+1) |val| { ... }

1565361545
bheads
which leads back to the inclusive vs exclusive debate

1565361677
andrewrk
I'm open to considering for loops supporting generators

1565361697
bheads
+1

1565361725
scientes
otherwise for is not very useful

1565361759
bheads
what I like about the for range is the index var is not in the surrounding scope

1565361777
scientes
yeah, alot of people get ticked by that

1565361781
scientes
i don't see it as a big deal

1565361806
Tetralux
Yeah, I don't like having the `var i: T = 0;` or whatever in my scope when I only want it in my loop.

1565361825
Tetralux
It's fine if that's the only while loop, but not really if there's more than one.

1565361847
fengb
I spent 2 hours debugging a "i += 0" so I'm in favor of generators :P

1565361864
bheads
lol

1565361888
scientes
fengb, if the 0 is a comptime_int that could be an error

1565361915
riverlakedev
is there a minimal pastebin for code to quickly share here?

1565362023
Tetralux


1565362042
Tetralux
Meaning that's what I use.

1565362055
Tetralux
"Other code pasting sites are available." :p

1565362399
riverlakedev
wait but there is a while thing

1565362489
riverlakedev
var i = 0; while (i <= max) (i = i + 1) { }

1565362552
riverlakedev
that way you can definitely say if this range is inclusive or not

1565362561
andrewrk
riverlakedev, I like to use

1565362739
euantor
I like

1565362843
mq32
am i weird for liking pastebin.com?

1565363139
gonz_
euantor: Thanks for reminding me that sourcehut exists. I really like the principles behind the site and I feel like it's worth sponsoring.

1565363183
dimenus
i use source hut for personal projects

1565363534
euantor
gonz_: Definitely. I've been a supporter of them for a while, though I'm yet to move many of my projects over and I had some issues accessing their sevrices over SSH due to my ISP for a while

1565363801
Tetralux
Is there a way to emit a "note" message at runtime?

1565363836
Tetralux
( .. as part of a panic?)

1565363950
bheads
one thought I had for testing the state of an async fn:  you spawn multiple async file load functions, where you want to resume them but only want to await on them if its done.  ie the async fn checks if the file load is done, else is suspends again

1565364445
fengb
I've been using Github gists

1565365500
riverlakedev


1565365552
fubd
riverlakedev: something like

1565365555
fubd
exe.addCSourceFile("lib/glad/src/glad.c", [_][]const u8{"-std=c99"});

1565365650
Tetralux
If std.ArrayList has an iterator that can remove elements, does it make sense to have that be the default one you get? Or does it make more sense to have to say `var itr = list.iteratorMut();` for that?

1565365784
Tetralux
If an iterator that can remove elements

1565365849
Tetralux
Unless there's a way to determine if the child type of a pointer is const?

1565365864
Tetralux
Though maybe the explicitness is better anyway.

1565365949
fubd
seems like the stdlib usually uses 'const' for const things and (nothing) for mutable things

1565365990
Tetralux
Indeed. In which case, .iterator should give you an iterator that allows you to remove elements?

1565366002
Tetralux
And if you have a `const` list, you have to do .iteratorConst instead.

1565366040
Tetralux
I only ask because you normally do

1565366361
Tetralux
If you attempt to remove the same element twice, should it panic unconditionally?

1565366383
Tetralux
Or should it only panic in debug mode, and be a no-op in release?

1565366569
fengb
I'd expect it to be undefined behavior in release-[notsafe] modes

1565366696
Tetralux
Remind me - does unreachable crash release?

1565366707
riverlakedev
it looks like i cant read stdout of process started with std.os.execve...?

1565366837
fengb
Tetralux: only release-safe

1565366888
fengb
I kinda think we should rename the modes so it sounds like “this should be the standard” and not “training wheels”

1565366914
Tetralux
But in release-fast it MAY have no effect, but MAY also just crash?

1565366920
Tetralux
Or is it always no-effect?

1565366948
fengb
It’s optimized out of -fast and -small

1565366958
fengb
So undefined behavior if those points are reached

1565366968
fengb
Who knows what LLVM would do

1565366985
Tetralux
Meaning that it would be wise to assume that it'll just skip over unreachable in release-fast.

1565367088
Tetralux
Should the iterator's remove procedures return the elem that was removed?

1565367104
Tetralux
I assume that they should.

1565367122
Tetralux
In which case, the fallback if you call remove twice in release-fast, is to return {}.

1565367127
Tetralux
Seem reasonable?

1565367859
Tetralux
Huh...

1565367860
Tetralux
Okay.

1565367868
Tetralux
I can't put a `return {}` after unreachable.

1565367946
Tetralux
I can fix it, but that does seem to be contradict how release-fast works.

1565368107
fengb
release-fast implies removing all runtime checks. This includes overflows, array OOB, uninitialized memory, etc.

1565368155
Tetralux
Indeed. But the compiler acting like you will never go beyond unreachable means that it might lead you into thinking that behavior is dependable.

1565368206
scientes
Tetralux, to the contrary, its preventing you from assuming otherwise

1565368215
Tetralux
It is, but that's not reality xD

1565368218
scientes
oh i see

1565368266
Tetralux
If you assume that unreachable is effectively noreturn, because the compiler essentially says so, and then in release-fast it keeps going, it might REALLY corrupt things.

1565368266
fengb
If you need dependable error processing, you should be returning error unions

1565368292
fengb
That's the point

1565368301
fengb
release-fast == thar be dragons

1565368308
scientes
yeah don't use unreachable if you don't want unreachale

1565368338
fengb
Again, I think it's a copy problem. release-safe should imply "this is the normal release", while release-fast is "I'm driving without the seatbelt because I trust what I'm doing"

1565368373
scientes
and read this blog series about UB

1565368374
scientes
its scary

1565368411
Tetralux
Odin does that actually - in Odin, asserts are

1565368420
Tetralux
There is essentially no such thing as release-fast.

1565368439
Tetralux
It's just "how much optimization do you want? 0, 1, 2, or 3?"

1565368456
Tetralux
You can turn off bounds checks with a seperate flag if you want it though.

1565368469
Tetralux
And you do have the equivalent of @setRuntimeSafety too.

1565368479
Tetralux
But you get my point.

1565368485
scientes
zig provides maximum functionality with minimal options

1565368682
fengb
Maybe we should have safety as a separate flag

1565368708
fengb
--ignore-illlegal-behavior

1565368726
scientes
no

1565368835
fengb
scientes: people (including me) obsess over release-fast but 90% of actual stuff should be release-safe

1565368861
scientes
fengb, with the critical stuff using @setRuntimeSafety(false);

1565368885
scientes
but seriously, zig is NOT optimized

1565368885
companion_cube
how much critical stuff do you have in 90% of the stuff?

1565368890
scientes
so focus on other things

1565368905
companion_cube
if you write an email client or IRC client or whatever, release-safe should be largely sufficient

1565368926
scientes
companion_cube, yeah but you might have a hash table, and that should be optimized

1565368934
scientes
many e-mail clients have unacceptable performance

1565368938
companion_cube
ah, the std hashtable could be optimized indeed

1565368959
companion_cube
yeah but it's not because they miss -O3, but because they're badly written or even worse, webmails

1565368974
companion_cube
I use mutt, and it's fast, except that it's single threaded

1565368979
companion_cube
🤷

1565368984
scientes
it also uses tokyocabinet

1565368987
scientes
which is great

1565368999
companion_cube
you mean for notmuch? I have no idea

1565369003
scientes
although the endianness is backwards in debian, and impossible to fix

1565369008
scientes
companion_cube, no, mutt

1565369016
scientes
the db backend is tokyocabinet

1565369019
companion_cube
hu, really?

1565369029
companion_cube
good to know.

1565369056
companion_cube
I'm keeping an eye on aerc because it should be more concurrent, and still keep the general goodness of CLI mutt

1565369607
scientes
i.e. zig's memcopy is unoptimized

1565369615
scientes
e.g.

1565370596
andrewrk
It's not accurate to say that Zig's memcpy is not optimized

1565370635
andrewrk
First of all if you link with libc you get libc's memcpy

1565370657
andrewrk
And when zig provides memcpy it does get optimized/vectorized

1565370666
andrewrk
But yes there's room for improvement

1565370689
Tetralux
What is

1565370975
donpdonp


1565371183
Tetralux
donpdonp: The bit field at the end of the second one?

1565371221
donpdonp
oh thats something the zig translation doesnt handle yet?

1565371231
Tetralux
Does Zig even

1565371251
Tetralux
It doesn't, right?

1565371257
gonz_
Ls

1565371259
gonz_
No

1565371275
donpdonp
gonz_: dvorak? :-)

1565371281
gonz_
Indeed :D

1565371288
gonz_
Svorak A5

1565371296
donpdonp
i recognized that typo :)

1565371302
Tetralux
I tried learning Dvorak once.

1565371372
donpdonp
colemak is a better choice, imho.

1565371390
Tetralux
Why's that?

1565371402
donpdonp
90% of the benefit, 30% of the learning curve

1565371425
fengb
Zig has bitfields. C bitfields are underdefined so it's hard to translate properly

1565371427
Tetralux
Is that because more of the buttons are the same as QWERTY?

1565371442
donpdonp
Tetralux: yes.

1565371547
donpdonp
fengb: hmm.

1565371732
fengb
Clang example: struct { int a:8 }, the struct size is usize but "a" is only 8 bits. We magically gain padding, and the C standard doesn't specify where the padding goes

1565375176
oats
does zig not have a mutable string type yet?

1565375192
companion_cube
[]u8?

1565375247
oats
so could that be used with unicode.zig in the stdlib for safe unicode strings?

1565375313
companion_cube
safe mutable strings? :s

1565375349
fengb
I think the plan is to keep Unicode in std rather than be a language feature

1565376026
Tetralux
Do we have a way to test if something panics yet?

1565376033
Tetralux
And ideally also what message you get.

1565377877
fengb
scientes: these undefined behavior articles are amazing

1565378155
companion_cube
damn, I don't understand the code in yesterday's stream

1565378164
companion_cube
it's not clear which functions are async :/

1565378837
scientes
fengb, the llvm developers did change their opinion about one part of that however

1565378863
scientes
they back-tracked about #2

1565378869
scientes
and llvm-9 does not follow that

1565379390
fengb
lol...

1565379478
nairou
Are they skipping 9.0?

1565379501
fengb
Oh I found it:

1565379591
fengb
It's in final release testing, but apparently it also promoted 10.0 to master and links haven't been created for 9.0 yet

1565380393
dimenus
Does the AutoHashMap assume that keys with common values probably point to the same memory?

1565380790
Tetralux
Just created

1565382351
andrewrk
dimenus, that's an important question that should be added to the docs. I believe the answer is "no it does not assume that". it certainly doesn't make a probabalistic assumption, it either assumes it or it doesn't

1565382504
dimenus
apologies for adding 'probably' to that

1565382505
dimenus
lol

1565382596
dimenus
from my perspective, the hash doesn't seem to work with slices as it's the ptr of the slice itself that is hashed, not the contents

1565382653
dimenus
i'll put together a test

1565383127
andrewrk
the auto hasher? that's easy to check

1565383171
andrewrk
it hashes the pointer as an int and the length

1565383219
andrewrk
that's a counter intuitive default. I personally think it should either hash the contents or emit a compile error

1565383286
Sahnvour
hashing keys should not follow pointers

1565383297
Sahnvour
nor slices as they're just fat pointers

1565383329
Sahnvour
if you want it to do that, provide your own hash function (to hash []const u8 as strings for example)

1565383449
andrewrk
that's a reasonable stance to take

1565383505
companion_cube
following pointers means having to handle cycles

1565383508
Sahnvour
I'm sorry I don't have a clear rationale, but having pointers as keys in a hashmap is somewhat frequent and does not necessarily require hashing the pointees

1565383513
andrewrk
maybe we can provide std.BytesTable(V) or something that has `[]const u8` key with the eq and hash functions set

1565383530
andrewrk
weird name, but that's a pretty common use case

1565383579
andrewrk
another brainstorming idea: std.DeepAutoHashMap(K, V)

1565383586
andrewrk
"deep" meaning "it follows pointers"

1565383623
Akuli
std.PointerFollowingAutoHashMap

1565383624
dimenus
maybe make it not handle top level slices?

1565383626
Akuli
hmm that's java

1565383629
dimenus
that seems not intuitive then

1565383641
dimenus
if i wanted the ptr, I'd give it a pointer

1565383804
dimenus
i think a compile error is the most reasonable stance there, if it's &foo[0] instead, that's a lot more explicit

1565383862
andrewrk
dimenus, a slice

1565383874
dimenus
agreed

1565383896
dimenus
but as the user of a function, i would have to dig through the source to know that it's not actually hashing the contents

1565383904
dimenus
emitting a @compileError points the user in the right direction

1565383917
dimenus
eg "either give me just a pointer or use your own hash fn"

1565383925
andrewrk
I do agree there is an organization / docs / naming / discoverability problem here

1565383963
Sahnvour
would you expect a naked pointer to hash the content or not ?

1565383968
dimenus
no

1565383984
andrewrk
oh interesting, I'm using std.AutoHashMap incorrectly in tools/process_headers.zig

1565384017
dimenus
Sahnvour: doesn't the current implementation follow the pointer though?

1565384020
Akuli
why not have AutoHashMap take an argument to help it decode how to hash

1565384026
Akuli
decide

1565384027
Sahnvour
no it doesn't

1565384034
dimenus
nvm

1565384035
andrewrk
did it used to?

1565384036
dimenus
sorry

1565384056
dimenus
because it's an Auto, you can explicitly pass a hash function

1565384059
Sahnvour
andrewrk: this changed in my recent PR, I assumed the CI tests would be enough to discover such cases

1565384065
dimenus
I'm just trying to figure out a reasonable default

1565384075
dimenus
Sahnvour: it does not, you're not doing that particular test

1565384080
dimenus
i already have a broken test sample

1565384104
andrewrk
Sahnvour, I think you made a reasonable decision. but I also think we do have an API usability problem - people are going to guess wrong about how this works

1565384121
Sahnvour
agreed it needs documentation

1565384122
Akuli
i think something like std.HashMap([]const u8, MyStruct, std.pointer_hash) would be quite good

1565384139
companion_cube
what if you have a struct with 2 strings inside?

1565384146
companion_cube
there you have to get into hash combinators

1565384148
dimenus
Sahnvour:

1565384160
dimenus
that test fails

1565384184
dimenus
and i apologize if I'm coming off as confrontational, i'm definitely just looking for discussion

1565384199
Sahnvour
dimenus: that's expected, from my point of view

1565384214
Sahnvour
to get your test passing, use a custom hash for strings

1565384220
Sahnvour
autoHash does not follow pointers

1565384229
dimenus
understood, I'm not arguing that it isn't possible

1565384233
dimenus
i'm asking what a reasonable default is

1565384249
andrewrk
AutoHash([]const u8, V) behavior changed in 5bd407b27890fbed82891289e6a2bf2da93c2a41

1565384252
Akuli
doesn't zig distinguish "pointer to one item" and "pointer to array" clearly? i think using that here would be very good?

1565384268
Sahnvour
I thinks that's similar as using `const char*` as a key, opposed to w `std::string`, in c++

1565384285
dimenus
Akuli: it does, it's just the default implementation only hashes the ptr itself

1565384302
Akuli
i think it should hash the contents for "pointer to array" cases

1565384312
Akuli
but not for non-array pointers

1565384324
dimenus
I'm more in favor of a compile error than changing the behavior of the implementation

1565384342
dimenus
If you want naked ptrs, give it a naked ptr

1565384349
andrewrk
my only claim is that if people are, in practice, being surprised at how something works, we probably need to change the API

1565384355
Sahnvour
but can we be sure that's always an error to shallow-hash a slice ?

1565384367
Sahnvour
I doubt it

1565384375
dimenus
in what case would it not be?

1565384387
andrewrk
not necessarily. the point of making a compile error would be to direct the programmer to choose a more explicit type. for example: ShallowAutoHash or DeepAutoHash

1565384392
Sahnvour
I think there isn't much difference between a pointer and a slice. I totally agree this can be confusing though

1565384400
andrewrk
this is a precedent set by, for example, the division operator

1565384406
dimenus
there is a usage difference

1565384415
andrewrk
for unsigned types, it does what you expect. for signed integers, does anyone know what it does?

1565384416
dimenus
even if it's a very minute difference at the low level

1565384441
gonz_
Doesn't it seem less surprising and more consistent to never follow any pointers at all?

1565384441
andrewrk
does zig have floored division or truncating division for signed integers?

1565384470
dimenus
I'm not suggesting that it follow the pointer

1565384489
dimenus
I'd rather have it be a compile error so the user knows "oooh, this default doesn't follow pointers - I need to make something that does"

1565384495
dimenus
or something that reflects what I need

1565384499
gonz_
Well, I agree with that

1565384505
Akuli
python has flooring / and i have done e.g. (-nbits) / (-8) to figure out how many bytes are needed for storing a sequence of bits

1565384514
gonz_
I was just trying to gauge whether or not the consensus was any different.

1565384526
andrewrk
"auto" means "do what I mean." so if it's ambiguous what the user means, then it should be a compile error, and the user should have to choose a more precise API

1565384541
Sahnvour
fair point andrewrk

1565384560
dimenus
my point here is just that u8 slices are very commonly strings so by default, the AutoHash does not do what is intuitive with regards to string hashing

1565384565
Akuli
hmm i think i actually did -(nbits // (-8)) for whatever reason

1565384583
andrewrk
Akuli, zig gives a compile error for signed division

1565384592
Akuli
yeah i think that's better than python's behaviour

1565384603
Akuli
i mean ... lol

1565384614
Sahnvour
dimenus: to be coherent, if we go with your proposal, autoHash-ing a pointer should also error, right ?

1565384618
mq32
andrewrk: i just explained the error handling of zig to a friend and i noticed: it's really easy to convey zig knowledge. good job, man!

1565384633
Akuli
even the very basic identity -(x/y) = (-x)/y doesn't work with python's int division

1565384653
dimenus
Sahnvour: I'm really only proposing this for slices, buuut I could see an argument made either way on pointers

1565384681
dimenus
if you have two pointers, you really don't even need the hash fn, you just need an equal fn

1565384681
Akuli
i would expect it to treat pointers as pointers, if it hashes by value then it breaks when the value changes

1565384692
andrewrk
Akuli,

1565384709
Akuli
awesome :D

1565384971
Sahnvour
dimenus: in the end I agree, a compile error would be better to just get confusion out of the equation

1565385027
dimenus
I also agree that chasing pointers in a default implementation is not useful

1565385033
dimenus
If you want a deep copy, it should be explicit somewhere

1565385037
dimenus
*deep hash

1565385063
Sahnvour
Akuli: since we have default values for struct members now, the std.HashMap API could evolve to take a comptime configuration struct, indicating if the users wants deep hashing or not, and to provide custom hash/eql function, for example

1565385141
Akuli
std.HashMap(K, V, std.HashMapConf{ .deep = false })

1565385158
Akuli
might be neat

1565385170
Sahnvour
`false` would be the default, but yeah something like that

1565385195
Akuli
i would expect []const u8 keys to "just work" with whatever the default is, because that is the most common case

1565385260
dimenus
it's just the AutoHash, you can easily specify a different hash function

1565385321
Akuli
how about std.PointerHashMap, very explicit

1565385402
Sahnvour
I'm not found of demultiplying the hashmap types when the only change is already expressible in the base API

1565385666
dimenus
andrewrk: do you want an issue created for this or just a PR?

1565385725
dimenus
this is going to break a lot of tests though......

1565385726
dimenus
hmmm

1565385740
dimenus
wait nvm, the hash tests don't use slices

1565385764
Sahnvour
maybe we can try to flesh out the design of the hash module a bit more by the way

1565385796
dimenus
sounds good

1565385876
Sahnvour
I'd go for an issue

1565390309
nrdmn
andrewrk: when compiling EFI apps with >4kB stack usage, zig complains "lld: error: undefined symbol: __chkstk". We don't need stack checks on uefi. Do you know any elegant solution to this? I have not found any way to turn off stack checking globally for EFI binaries, only for individual functions.

1565390494
andrewrk
nrdmn, yes, I belive target_supports_stack_probing sholud be modified to return false for uefi

1565390569
andrewrk
or, maybe, the correct solution is to modify this logic:

1565390578
andrewrk
so that it gets defined for uefi

1565390646
nrdmn
I tried returning false in target_supports_stack_probing, but that doesn't seem to help

1565390686
andrewrk
that might be the one where llvm decides to emit calls to chkstk based on the target, so we should provide the implementation. can you try adjusting the logic in that compiler_rt code to include the uefi target?

1565390718
andrewrk
if your goal is to not emit calls to uefi, that might require upstream patch to llvm or figuring out how to set a configuration flag on the target

1565390724
andrewrk
*emit calls to chkstk on uefi

1565391741
nrdmn
builtin.os is not builtin.Os.windows on uefi

1565391791
nrdmn
I found this to work for me:

1565392000
andrewrk
nrdmn, that's good to know. would you also be willing to try modifying the logic in compiler_rt (linked above) so that the if statement did builtin.os == .windows or builtin.os == .uefi ?

1565392017
andrewrk
I don't see a reason why not to have debug features enabled for debug builds even on uefi

1565392218
nrdmn
apparently, in llvm, Subtarget.isOSWindows() == true for uefi applications

1565392286
andrewrk
nrdmn, that is decided by the function get_llvm_os_type in target.cpp

1565392303
andrewrk
do you think it should be different?

1565392323
andrewrk
I considered it briefly in the past and made this decision

1565393808
nrdmn
ZigLLVM_Win32 directly translates to Triple::Win32, right? LLVM's Triple.h doesn't offer any better alternative and I'm not sure what it implies if we set it to Triple::UnknownOS for UEFI

1565393953
andrewrk
nrdmn, yes that's right

1565393975
andrewrk
it has to do with the ABI of function calls chkstk and stuff

1565394398
nrdmn
checking for uefi in std/special/compiler_rt.zig makes the error message go away, but won't that add pointless stack probes?

1565394419
andrewrk
what makes them pointless?

1565394470
andrewrk
in debug mode, they turn undefined behavior into a panic that tells you stack overflow occurred

1565394488
andrewrk
and the cost is pretty cheap, the checks are only needed for functions with large stack frames

1565394603
nrdmn
uefi only guarantees a minimum stack size of 128K in boot mode, but there's no way to determine the actual stack size

1565394662
nrdmn
If I'm writing my own OS, I'm going to set up my own stack at some point, which very well may be much larger than that. I don't want it to panic in debug mode because zig doesn't know about my stack

1565394855
andrewrk
if the provided chkstk implementation is invalid for uefi then certainly the correct solution is the diff you linked earlier

1565394879
andrewrk
at this point you're the only zig community member doing UEFI stuff, so I trust your judgement

1565394991
nrdmn
I have no idea what my diff means for other targets

