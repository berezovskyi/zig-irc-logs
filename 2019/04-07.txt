1554595821
hryx
Oh, maybe it means "or no token". I would have guessed something more like (A / B / C)? instead but this would make sense too

1554596332
dembones
hryx: I agree. my initial thought was no token; but then I stopped reading the bison manual to watch the last minute of VA/Auburn. LOL

1554596367
hryx
ha!

1554596802
dembones
so, hryx, any thoughts on generics? I think anytime I try to declare a pointer to a function returning a type, it complains about the type not being known at comptime; but I've been stuffing `comptime` between practically every token to see if it satisfies the compiler, but it just won't.

1554596846
hryx
Hm, I'm not sure dembones

1554596872
dembones
the non-inline for call is maybe the problem. I might try an inline for instead

1554596873
hryx
I've had issues with both fn pointers and comptime in the past, but I'm sure there have been many changes since I tried working with either

1554596903
hryx
oh, that's worth a shot

1554596906
dembones
I'm a n00b to zig... started working with it last weekend

1554596933
hryx
well you already seem more versed in it than I was in my first week

1554596959
hryx
also andrew is extremely helpful on IRC, but I think he's pretty busy this weekend

1554596975
dembones
you are not kidding about Andrew

1554596997
dembones
I posted a bug, and he jumped on it in minutes. Really extraordinary

1554597017
hryx
:>

1554597028
hryx
unrleated, I'm working on #1729

1554597053
hryx
sometimes it's extremely relaxing to do repetetive code refactoring tasks...

1554597058
hryx
like washing dishes

1554597081
dembones
lol... that looks like a heavy lift

1554597091
hryx
the sink is full

1554597145
dembones
my bug was a puny little issue in @divFloor, which Andrew fixed in a day or two

1554597233
hryx
dembones: your date project looks like a great one to start with BTW

1554597244
hryx
have you looked at Go's time.Time?

1554597249
dembones
oh yes

1554597256
hryx
awesome

1554597268
hryx
I'm sure that would be useful for stdlib in zig

1554597278
dembones
also

1554597294
dembones
C++

1554597310
dembones
I met him at a cppcon years ago

1554597378
hryx
that date.h is a big boi

1554597394
hryx
but I suppose that happens when you need #ifdef instead of comptime

1554597394
dembones
so I'm probably going to parse tzif files and write some locality code to pick up timezone functionality

1554597430
hryx
very cool

1554597508
dembones
but then I was sidetracked by different division operations. @divFloor @rem et al are defined only for positive divisors

1554597551
dembones
so that's code that belongs in an integer math lib, which is how I got to divInteger.zig

1554597600
dembones
and it looks like a good opportunity to learn generics, but my brain is not latching onto it as quickly as I'd like.

1554597638
dembones
I shouldn't be too surprised, generics in C++ is also opaque

1554597731
dembones
OMG 8000 lines in date.h O_o

1554597745
dembones
it was a little shorter when HH originally presented it

1554597932
dembones
it appears that HH's date lib has been adopted in C++20... I think it's far too much for a zig std lib

1554597974
dembones
Google's cctz is a little more along the lines I'm thinking:

1554598700
dembones
so, `inline for` fixed my problem

1554598712
dembones
well,

1554598776
hryx
ah, great

1554601245
hryx
Should the grammar define an EnumLiteral rule?

1554601983
hryx
ok, the skeleton of a recursive std/zig/parse.zig is about 650 lines with grammar comments

1554601989
hryx
and aside from those comments, well under 100 columns

1554602023
hryx
I estimate it'll be around the same size as the stage1 parser, but we'll see

1554602077
hryx
feeling good about the readability of this so far!

1554604698
shritesh
andrewrk, cool but I'll pass on C and stick with Zig ;)

1554623313
wilsonk
scientes: you still around?

1554630379
daurnimator
hryx: go's time.Time has a problem.... they never clarified if it was wallclock or absolute... so now it's both. and hence takes twice the syscalls and twice the memory to use...

1554630450
daurnimator
it would be an example of one of the worser time apis around IMO.

1554630505
daurnimator
dembones: (I think they left... someone repeat this message to them if they rejoin): for parsing tz files, I wrote

1554630633
hryx
daurnimator: I agree the fact that they shoved monotonic time into the same struct is kind of awkward, and has bitten me a little in the past, mainly in tests. But in general I've found the type to be fairly painless and robust

1554630686
hryx
(disclosure, speaking as someone with limited experience with time APIs)

1554630836
daurnimator
you really need 4 types: wallclock time (with timezone), monotonic time, and duration of each.

1554630955
daurnimator
note that duration of monotonic time can be measured in a single number. duration of wall clock time usually need to be stored as seconds/mins/hours/days/weeks/months/years

1554630994
hryx
Interesting, I hadn't thought about the two types of time using different duration types. But that makes sense

1554632353
daurnimator
I have lots to say around time types. but I think it can+should mostly wait until coroutines

1554632415
daurnimator
reasoning: for timeout-ing operations (usually network operations) you want to configure them with a monotonic duration, but pass it to the actual function as a deadline

1554632503
daurnimator
usually for a statically typed lanugage I would say that you'd overload functions to have no-timeout, timeout and deadline taking forms

1554632514
daurnimator
but zig doesn't do overloading....

1554632559
daurnimator
so optional monotonic duration (i.e. a timeout argument) is probably the best solution

1554632632
daurnimator
though you end up with network code full of deadline<>timeout translations. see e.g.

1554633590
scientes
wilsonk, now. It was 3AM here

1554634681
wilsonk
scientes: oh yeah, no problems. It is 4:50am here now, but I usually program late :)

1554634755
wilsonk
scientes: I noticed you asked someone if the had the EPYC machine to build with...just mentioning that it is actually me that has that machine. Did you need anything? Or was it just a comment in passing?

1554634770
scientes
it was just a comment in passing

1554634807
scientes
I ended up with a vps running on one of them, but it turns out it still doesn't have the super hot new AVX512VBMI instructions i wanted to play with

1554634839
wilsonk
Ah, I see

1554634925
scientes
the only exist in a cpu that was released a week ago

1554634998
telemach
hello, does anyone know how to #include <OpenGL/gl.h> in Zig on macOS? adding OpenGL framework in build.zig doesn't help (and probably shouldn't as it's about linking i guess)

1554635026
telemach
though test.c with just #include <OpenGL/gl.h> and main function is compiled by cc w/o any extra args

1554635054
telemach
Zig fails with  note: 'OpenGL/gl.h' file not found

1554635166
wilsonk
I thought zig-tetris used opengl?  Perhaps check Andrews code there:

1554635216
telemach
it uses glfw, but i can't use it as i'm writing lv2/vst plugin

1554635238
telemach
glfw is not designed for having multiple instances

1554635238
wilsonk
Looks like it uses glfw at least...ah, I was just commenting on that...hmm

1554635735
Sahnvour
telemach, I don't use macOS, but I assume you tried equivalent c/c++ code and it works ?

1554641820
gamester
telemach: What have you done in build.zig? What's the error? Are you on master? In master, system directories are not looked into by default. In build.zig you could do exe.linkSystemLibrary("some-lib") and it'll then also look into system directories so long as you call linkSystemLibrary on more than just the c library:

1554641845
gamester
but you can also manually do "exe.addLibPath" and "exe.addIncludeDir"

1554641944
gamester
I'm sure this will all be better explained once 0.4 is released

1554641974
gamester
Lots of changes are being made :)

1554643899
scientes
I wanted to use the type to imply which saturating instruction to use

1554643913
scientes
but I can't resolve the type in ir.cpp, only analyze.cpp

1554644165
scientes
got it

1554644704
wrl
telemach: i'm using a GL loader for macos

1554644712
wrl
i don't include the system GL header at all

1554644723
wrl
tbqh i'm using a GL loader for all platforms but who's counting

1554644764
wrl
i'm using this one:

1554644769
wrl
3.2 core profile

1554645162
wrl
telemach: you building right on top of vst2/lv2 or do you have a shim/abstraction layer?

1554660453
hryx
Another question about the grammar. According to this, a ContainerField can include an `= expr`, which doesn't make sense to me:

1554660523
hryx
The NodeTypeStructField in stage1 seems to support this expression part (though parsing still fails), but stage2 seems to be lacking the expr part altogether

1554660548
hryx
am I right in thinking that this was supported at some point but removed? I don't see any examples in the documentation of it either

1554660635
hryx
An example of what I assume would be legal if this syntax were supported: `const T = struct { a: bool = false, };`

1554660638
hryx
like a default value?

1554660795
hryx
well wouldja just look at that

1554660835
hryx
It is for default values!

1554660840
andrewrk
yep

1554665226
scientes
i am against default values

1554665238
scientes
you can always put a default in your function

1554665281
scientes
or have an init() function if it is an object

1554665425
scientes
oh wow accepted

1554665515
scientes
oh i c

1554668762
telemach
Sahnvour: yes, equivalent include in c file works fine without any extra include/lib dirs provided

1554668822
telemach
gamester: I'm on master and in build.zig I have standard setup for a dynamic library plus lib.linkFramework("OpenGL")

1554668894
andrewrk
telemach, what directory is OpenGL/gl.h found in on your system?

1554668948
telemach
I found gl.h in ` /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Headers`, but somehow clang understands this directory when just OpenGL prefix is given

1554668961
telemach
i failed to find OpenGL/gl.h combo on my system

1554668983
andrewrk
so the full path is `/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Headers/gl.h`?

1554669027
telemach
wrl: nice to see you here! thanks for suggestion about loader. i build straight on top of lv2, and for vst2 i use x42/lv2vst

1554669033
telemach
andrewrk: yes

1554669052
andrewrk
I think we need to teach zig build how to find headers of macos frameworks

1554669110
andrewrk
here's where the patch would go:

1554669209
andrewrk
hmm actually I think the logic would go in `fn make` of LibExeObjStep, and it would look at self.frameworks, and then add some additional -isystem args to zig

1554669257
andrewrk
here:

1554669259
scientes
I don't think implicit widen_or_shorten is a good idea for vector types

1554669310
andrewrk
telemach, do you have a source build? willing to try something?

1554669318
Sahnvour
are macos frameworks shipped with the OS, or some kind of packages that can be installed ?

1554669777
andrewrk
telemach, I don't understand how clang understands OpenGL/gl.h given that the path does not exist. I'll have to learn why that works before I can make it work in zig

1554669811
andrewrk
as a workaround you can manually add `-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Headers` and then `#include <gl.h>`

1554669845
andrewrk
hmm no that workaround won't work either, gl.h itself expects OpenGL/foo to work

1554670227
torque
I expect there may be some special-case handling that concatenates the framework name with the header name when you pass -framework to clang

1554670304
andrewrk
hmm. I just tried adding `-framework OpenGL` and still getting file not found

1554670978
mikdusan
-F/System/Library/Frameworks -framework OpenGL

1554670985
mikdusan
and make sure #include <OpenGL/gl.h>

1554671445
hryx
oh shoot telemach I ran into this problem recently and was able to solve it. let me see if I can go find what I did

1554671488
andrewrk
mikdusan, I can't even get that to work with a fresh build of clang from source

1554671523
andrewrk
it seems the compiler shipped with xcode has a patch

1554671607
telemach
andrewrk: i don't have a source build of zig atm, but i can do it, what's your idea to try?

1554671623
andrewrk
telemach, never mind - I've reproduced the problem and I'm working on it

1554671630
telemach
thanks!

1554671644
hryx
telemach: did you install Xcode? Kind of dumb, but what I remember is that you actually have to install all of Xcode (not just the CLI tools) and run it once to it finishes setting up

1554671646
andrewrk
it's turning out to be hairy, I'll probably open an issue for it and get back to writing release notes

1554671666
telemach
yes, i have xcode installed

1554671666
hryx
this is something that changed in the last major release or two if I recall

1554671677
telemach
and even started it recently

1554671691
andrewrk
hryx, the weird thing is the system compiler (clang) supports `#include <OpenGL/gl.h>` but a fresh build of clang-8 from source does not

1554671703
andrewrk
it seems apple has a patch on top of clang

1554671754
telemach
andrewrk: yes, definitely focus on release, my case is not super-urgent

1554671798
hryx
ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Headers/ /usr/local/include/OpenGL

1554671808
hryx
I think that was the hack I did to make it work ^

1554671849
telemach
hryx: neat as a temp workaround

1554671857
andrewrk
I suppose if it comes down to it, zig could do that hack for you if you use -framework OpenGL

1554671873
andrewrk
but it's strange that a source build of clang doesn't recognize frameworks

1554671884
hryx
telemach: some straight up poop is what it is

1554671885
andrewrk
that's why it doesn't work in zig

1554671900
mikdusan
here’s my guess: andrewrk you don’t have xcode installed. so the ROOT /System/Libraries/Frameworks has no headers

1554671929
andrewrk
the headers are there. the problem is apple's clang fork is doing magic with #include paths

1554671933
mikdusan
or xcode changed and never installs headers there anymore. anyways, try -F to the correct SDK’s frameworks.

1554671958
mikdusan
i have clang from llvm-8.0.0 and it found OpenGL/gl.h

1554671966
andrewrk
mikdusan, I tried the -F thing with a fresh build of clang from source, and it doesn't support the #include magic

1554671987
andrewrk
mikdusan, did you build it from source manually? or homebrew?

1554671993
mikdusan
completely manually.

1554672005
andrewrk
do you have OpenGL/gl.h on your system?

1554672012
andrewrk
what's the full path?

1554672027
mikdusan
here is one from root: /System/Library/Frameworks/OpenGL.framework/Headers/gl.h

1554672041
andrewrk
note that doesn't match OpenGL/gl.h

1554672057
mikdusan
doesn’t have to. -framework always inserts the framework name

1554672098
mikdusan
and here’s an SDK based path:

1554672114
mikdusan
too big. one sec.

1554672177
mikdusan


1554672215
andrewrk
I wonder why your source build works and mine doesn't

1554672282
andrewrk
when I pass -framework OpenGL clang says warning: -framework OpenGL: 'linker' input unused

1554672307
andrewrk
followed by 'OpenGL/gl.h' file not found

1554672330
mikdusan
needs to be passed to cc

1554672347
andrewrk
cc? you mean the system compiler? the one that you didn't build from source?

1554672363
mikdusan
the cc1 driver . as opposed to linker.

1554672375
scientes
this llvm vector stuff is pretty slick

1554672406
andrewrk
mikdusan, ~/local/llvm8-release/bin/clang-8 -c test.c -F/System/Library/Frameworks -framework OpenGL

1554672412
andrewrk
that's my command line

1554672437
andrewrk
scientes, the zig issue is

1554672455
scientes
I just did @subAdd and @subMul

1554672456
mikdusan
put -v in there. and let’s compare searches

1554672464
scientes
and am doing the rest of the bit manip functions now

1554672483
scientes
*@satAdd and @satSub

1554672502
mikdusan
added comment with my -v output. u can see the framework search path.

1554672562
andrewrk
mine has the same framework search paths, regardless of -F and -framework args

1554672617
mikdusan
do you have a gl.h from ROOT or only in deep SDK directory?

1554672625
andrewrk
mikdusan, ok, I have found a difference

1554672651
andrewrk
/System/Library/Frameworks/OpenGL.framework/Versions/A/Headers/ does not exist for me

1554672659
mikdusan
see above :)

1554672663
andrewrk
but it does exist elsewhere

1554672698
andrewrk
so you think installing xcode would resolve this?

1554672725
mikdusan
yes. but this brings up an interesting issue.

1554672726
hryx
andrewrk: that was part of the solution for me -- see the long path I posted above for where it went after that

1554672746
hryx
there is a GH issue for an unrelated project that had this problem, I'll see if I can find it

1554672777
andrewrk
why does it work for the system c compiler without xcode installed then?

1554672778
mikdusan
SDK selection for building on macos is quite common. a mechanism might need to be documented for that because i’m sure it will come up.

1554672820
andrewrk
thanks for the help on this btw mikdusan

1554672851
mikdusan
andrewrk: your suspicion i think is correct in that a /usr/bin/clang or /usr/bin/cc. but apple plays tricks with tools installed /usr/bin by adding launch binaries that set env variables.

1554672857
mikdusan
env variables, the kind that point to SDK

1554673216
telemach
mikdusan: but /System/Library/Frameworks/OpenGL.framework/Versions/A/Headers/  exist on my machine and i still have the issue

1554673251
hryx
discussion here implies that the location of the framework changed on 10.13

1554673289
mikdusan
telemach: have you tried the -F option?

1554673315
telemach
not yet, give me a second

1554673397
telemach
oh wait i don't have vanilla clang

1554673407
telemach
how can i pass -F via zig?

1554673438
mikdusan
i think that is what andrewrk was working on for you and then he ran into these pecularities

1554673441
andrewrk
I tried all manner of -F and it had no effect. I think -F is a red herring

1554673536
andrewrk
but you can pass additional c compiler args by putting them in between `--c-source` and the .c argument, or in the [][]const u8 arg of builder.addCSource

1554673807
mikdusan
bottom comment; i forced my compiler to use SDK header. u can see the path used, and see with -H it shows exactly where header was found.

1554674120
andrewrk
oh I see, you used -F with the deeper framework path

1554674314
mikdusan
heh i managed to use -F with zig —c-source (no space after -F) and segault.

1554674365
emekankurumeh[m]
does zig adhere to semver?

1554674407
hryx
emekankurumeh[m]: There are a few issues open about semver

1554674432
hryx
but right now I don't think it does

1554674484
mikdusan
oh right. i got segfault because my .c file has no symbols.

1554674530
andrewrk
mikdusan, I got the segfault too but I couldn't reproduce it in lldb

1554674545
mikdusan
it’s because we have empty .c file. i’ve seen that before

1554674555
andrewrk
ok telemach it seems we found a workaround

1554674559
andrewrk
well, mikdusan found it :)

1554674598
andrewrk
anyone willing to type this issue up for me?

1554674602
mikdusan
ok try this command; NOTE: NO SPACE AFTER `-F`. and use your correct folder for SDK.

1554674603
mikdusan


1554674607
telemach
so just pass framework path with -F via --c-source?

1554674614
mikdusan
yes

1554674641
andrewrk
telemach, if you use zig build there is also a place for extra c args

1554674646
telemach
thanks! i'll try

1554674829
hryx
I can write the issue, unless one of mikdusan or telemach is already on it

1554674898
telemach
hmmm... so it works when you include in foo.c, right? but I need it in zig file, available via usual @cInclude/@cImport

1554674916
telemach
I tried  zig build-lib src/ui.zig --name convotron_ui --ver-major 0 --ver-minor 0 --ver-patch 1 -dynamic --disable-gen-h -framework OpenGL --output-dir . --c-source -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks foo.c

1554674932
telemach
and when I di @cInclude in ui.zig it fails to find header

1554674970
andrewrk
ah, right. translate-c doesn't provide a way to inject additional args

1554675017
andrewrk
I'll just add a -F argument to zig so that it can be used as a workaround

1554675232
andrewrk
macos keeps moving their shit around

1554675272
andrewrk
every 6 months it's like "bet you can't guess where we put stdlib.h!"

1554675336
andrewrk
thanks hryx

1554675337
hryx
their M.O.

1554675342
hryx
fo sho andrewrk

1554675444
hryx
I feel your pain. A significant portion of my job is working around (and discovering) Apple inconsistencies. I have stories that would make your toes curl

1554676583
shritesh
Is there a way to detect if a non-pointer value was passed to a `var` function parameter? std.os.spawnThread could use a better comptime error than "unable to evaluate constant expression" for invalid context.

1554676648
scientes
shritesh, @typeOf() and @typeInfo()

1554676648
andrewrk
shritesh, are you aware of @typeInfo?

1554676707
shritesh
I missed that. I'll look into it. Thanks.

1554676752
andrewrk
shritesh, btw I don't think spawnThread requires Context to be a pointer

1554676783
shritesh
`const arg = if (@sizeOf(Context) == 0) {} else @ptrCast(*Context, @alignCast(@alignOf(Context), raw_arg)).*;` breaks otherwise

1554676825
emekankurumeh[m]
something must have broke somewhere else then

1554676976
andrewrk
this passes for me:

1554676993
andrewrk
on linux, with and without --library c

1554677012
andrewrk
also it builds with -target x86_64-windows

1554677032
emekankurumeh[m]
wouldn't run be a function pointer though?

1554677051
andrewrk
what do you mean

1554677074
shritesh
Looks like passing a comptime_int was breaking things

1554677086
shritesh
Is that a bug?

1554677114
andrewrk
hmm we should be able to make it work fine with comptime_int

1554677362
shritesh
Also, I copy-pasted the incorrect line above. The assertion on `comptime assert(@ArgType(@typeOf(startFn), 0) == Context);` is causing the problem.

1554677548
andrewrk
ah yes. that could probably be more helpful

1554677585
shritesh
Sorry :)

1554677618
andrewrk
I mean, I'm agreeing with you with what you said earlier

1554677772
wrl
telemach: hah, great idea using lv2 as your base plugin format :)

1554678136
telemach
it's really nice, i like it much better than vst

1554678148
telemach
it feels thought-out

1554678223
telemach
but in both cases i bang my head against the wall trying to add gui

1554678420
telemach
because of all those problem outlined many times in rust-vst chat

1554679037
telemach
what exactly happens when I use --c-source? will this file only compiled, or linked as well?

1554679753
telemach
omg warning: 'NSOpenGLView' is deprecated: first deprecated in macOS 10.14

1554679783
telemach
sorry for OT

1554680112
hryx
telemach: Apple is deprecating OpenGL so they can push Metal

1554680209
mikdusan
telemach; —c-source comes after the zig “command”. so `build-lib` or `build-exe` or `build-obj` are all distinct. build-obj will produce a .o; others will cause a lib to link or an exe to link, respectively

1554680266
telemach
mikdusan: ty

1554680319
telemach
hryx: I knew about pushing, but Metal is not x-platform, why to deprecate opengl when people want to write portable stuff

1554680580
hryx
beats me!

1554680789
wrl
telemach: they don't want people writing portable stuff

1554680797
wrl
best interpretation i can come up with

1554680800
wrl
otherwise they'd back vulkan

1554680813
wrl
my plan is to eventually move to vulkan and use MoltenVK on mac

1554680836
wrl
but i'm waiting a few more years until hardware support stabilises/grows, unless apple forces my hand by removing GL

1554681011
scientes
yeah the future is vulcan, not metal

1554681068
scientes
and Apple doesn't have the momentum that Windows had when they launched DirectX

1554681132
scientes


1554681140
wrl
yep, moltenvk <3

1554681153
wrl
so dope that khronos got it open-sourced

1554681181
scientes
before vulkan it is true opengl is legacy, some developers wanted to support directX11 after the other modernization project of opengl was scrapped

1554681221
wrl
yeah opengl's not great or nothing – vulkan just needs a few years more imo to have a critical mass for hardware

1554681262
wrl
i think if you're writing games it's already there, but telemach and i are doing audio software that just uses the GPU for the UI, and so the hardware skews a bit older

1554681339
hryx
nice to see some fellow audio people here :D

1554681402
telemach
yes, and I in particular don't need event OpenGL's low-level, not talking about Vulkan, I'm resorting to OpenGL because most of frameworks are not friendly to plug-in type embedding

1554681409
telemach
s/event/even/

1554681434
wrl
yea

1554681449
scientes
what do you mean?

1554681450
wrl
i do enjoy offloading rendering to the GPU – I make heavy use of shaders, both vertex and fragment

1554681461
scientes
"not friendly to plug-in type embedding"

1554681469
wrl
just agreeing with you about the plug-in type embedding

1554681483
wrl
there's like 4 or 5 publicly available libs/frameworks

1554681488
hryx
telemach & wrl, are you working together on a project?

1554681499
wrl
hryx: nope, i'm independent

1554681502
telemach
no, just similar projects

1554681507
hryx
neat

1554681515
telemach
hmmm, similar in sense they are audio plug-ins

1554681520
telemach
not more i guess

1554681540
wrl
currently working all in C because I started a few years before the advent of the new-school c/c++-killer langs like zig and rust

1554681558
wrl
but always keeping tabs on what's current in the field :)

1554681570
hryx
same here

