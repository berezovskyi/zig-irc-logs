1559174430
gamester
oh and coroutines ofc

1559174621
andrewrk
wtf why is the linux CI build trying to access

1559174643
andrewrk
a dependency on google.com that we don't have is causing master branch CI failures

1559174659
gamester
Ö_Ö

1559174880
gamester
oh never mind, it would be quiet awkward to try to support inline loop vars

1559175960
andrewrk
oh look at this, one of these PRs to merge is my own

1559176317
tgschultz
hmm... use working in structs might offer some improvement on #2533, but it would largely function the same so I'll only bother with it if we go that way.

1559176864
shritesh
I was stressing out about out of bounds on my state machine but then I realized I can force @setRuntimeSafety for the scope. This is awesome.

1559176891
andrewrk
:) see also

1559176916
shritesh
I literally have it open right now

1559176949
andrewrk
haha

1559177024
andrewrk
lots of great PRs recently. I love it when I can just press the big green button

1559177472
shritesh
I wish there was a different word that’s like a middle ground between “fast” and “unsafe”. It currently sounds like “safe” is “very very slow” and “fast” is “very very unsafe” to outsiders and newcomers.

1559177514
fengb
thar-be-dragons

1559177615
shritesh
release-fast should be fast-as-c and release-safe should be fast-as-rust 😉

1559177645
andrewrk
release-safe can't be as fast as rust, that's sort of the main advantage of rust over zig

1559177658
shritesh
Yeah. That’s why the wink.

1559177662
andrewrk
however debug and safe are planned to get faster, as the compiler gets better and can prove that certain safety checks are not necessary

1559177665
andrewrk
haha

1559177686
andrewrk
that sounds fine as long as the fast-as-rust CLI switch has an actual wink face emoji in it

1559177759
shritesh
Should be an Easter egg

1559177798
shritesh
--fast-as-rust-😉

1559178455
shritesh
Should I submit a PR?

1559178488
shritesh
Should be release-safe. My bad lol

1559178986
gamester
that's a weird @ symbol :)

1559179058
shritesh
It’s Fira Code

1559179087
shritesh
Gotta have them ligatures

1559180966
shritesh
Related to 2289/995, can’t we accept members of tagged unions with void parameter like `Type{ .Member }` instead of needing `Type{ .Member = {} }`?

1559181328
donpdonp
i copied a zig-built binary of my app from my intel laptop to my intel desktop, and when I try to run it I got:

1559181332
donpdonp
hread 1 "zootdeck" received signal SIGILL, Illegal instruction.

1559181334
donpdonp
0x0000000000241fe3 in std.json.State.fromInt (x=0) at /opt/zig/2019-05-20/lib/zig/std/json.zig:182

1559181594
gamester
webassembly compiled code editor inside a video game, editing the source code of the video game, hot reload

1559181796
gamester
edit the video game while inside of it and see the results, never leave the game. Hehe. Or just use two monitors, but where's the fun in that? :)

1559182079
gamester
"Eh I don't like these constants, need to tune them" -> mark them with slider tags -> UI auto built in-game. Interact with UI in-game -> code hot reloaded

1559182570
donpdonp
thats hot.

1559183136
gamester
donpdonp: Yep! -- I don't know what's going on with your code but I'm guessing it's 'unreachable' being converted into the illegal instruction to detect undefined behavior.

1559183163
gamester
that's something that clang and llvm do

1559183454
gamester
donpdonp: looking at json.zig, x is probably not being converted into a valid enum

1559183570
donpdonp
gamester: any idea why that might be happening?

1559183603
gamester
donpdonp: Did you compile with release-fast? Are you doing json parsing and passing in different data on your desktop?

1559183624
donpdonp
hmm im using build-exe and not specifying a release type

1559183635
donpdonp
should be the same json file on disk as the laptop but i'll doublecheck

1559183872
gamester
donpdonp: this sounds like something that shouldn't happen, I think andrewrk is gone for the day but he should take a look tomorrow

1559183889
gamester
you should get a stacktrace, not a SIGILL

1559183995
andrewrk
shritesh, try using Type.Member or even just .Member

1559184019
andrewrk
donpdonp, if you want to cross compile you need the -target flag

1559184050
andrewrk
even if the target is the same architecture as your native platform

1559184064
andrewrk
zig turns on native CPU features if you don't use -target

1559184081
andrewrk
I should put SIGILL somewhere searchable in the docs

1559184107
donpdonp
hmm both recent intel cpus, still might have instruction incompatibilities?

1559184228
donpdonp
(core i5-5200 (zig build-exe here) and core i7-3770 (SIGILL here))

1559184243
gamester
AVX

1559184258
gamester
AVX2*

1559184269
donpdonp
there sure are a lot of cpu flags these days in /proc/cpuinfo :O

1559184275
donpdonp
gamester: hmm.

1559184328
andrewrk
copying binaries that were created without -target parameter to another target is not supported

1559184351
gamester
Well it's still fun to figure out what instruction this might be :)

1559184357
andrewrk
sure :)

1559184357
shritesh
andrewrk: Type.Member causes 2289 to trigger later. .Member errors with “variable of type '(enum literal)' must be const or comptime”

1559184358
donpdonp
okay im just unclear as to what constitutes another target

1559184416
donpdonp
i can believe an i5 and an i7 are different targets, its just not something ive seen before. what is the -target name to use?

1559184467
shritesh
Type{.Member} would have looked more uniform

1559184619
gamester
andrewrk: I don't see a way to choose architectural features (AVX, AVX2, ...), just x86_64. How does this work?

1559184698
andrewrk
gamester, looks like I didn't type up an issue yet, for adding the ability to choose cpu features as part of the target

1559184800
gamester
andrewrk: But there's some default set of instructions that llvm is permitted to use?

1559184888
gamester
donpdonp: It wouldn't be i5 vs i7. It's newer intel architectures with new instruction sets vs older architectures

1559184937
donpdonp
i need to do a diff on each set of flags and see what comes up

1559184982
gamester
andrewrk: oh maybe it's -target uses no instruction set extensions at the moment. That's the concept I was looking forward (extensions).

1559185011
gamester
for*

1559185132
gamester
donpdonp: For cross compile you choose x86_64 as the target and it will run on all x86_64 CPUs. Later you'll be able to restrict that by choosing additional CPU features like AVX

1559185510
hoppetosse
emekankurumeh[m] regarding the live reloading in tick - it has worked, but I started that like... 2 years ago... I think some of the osurce still has old syntax

1559185534
hoppetosse
I've been splitting it up into its useful parts

1559185552
hoppetosse
There's an example of reloading in the examples/live directory

1559185601
hoppetosse
and in src/core/window.zig and app.zig is it being used

1559185617
hoppetosse
(reimplemented)

1559185645
hoppetosse
I've been meaning to clean it up, but work and uni have kept me busy. I'll get back to it someday...

1559185660
hoppetosse
meanwhile, feel free to carve it for parts

1559185720
hoppetosse
I think there's still some c code in there, stuff from old tutorials, and some of the files haven't been updated to the new synta

1559185794
hoppetosse
Also, the live reload stuff is just wrapping c - not pure zig

1559197112
IntoxicatedHippo
If I have an extern enum with an explicit type (let's say u64 for example) as a parameter in an extern fn will the enum argument be passed in the same way as a u64?

1559197648
IntoxicatedHippo
Nevermind, I found a relevant issue (

1559224635
fengb
How important is large alignments (> double word) in general programming?

1559224730
scientes
fengb, not as important to x86

1559224740
scientes
but very important to other architectures

1559224752
scientes
16-byte alignment generally

1559224757
scientes
for SIMD stuff

1559224844
fengb
Blah, I had hoped that stumbling upon 8 byte alignment was good enough :(

1559225306
tgschultz
it depends on what you're doing with it. there's no need for every allocator to be general purpose, because zig doesn't have any requirement for one allocator to rule them all.

1559225392
fengb
I'm just reinventing many wheels :)

1559225451
nrdmn
I'm getting "inline assembly allows up to one output value". Why can't I have multiple output values?

1559225652
scientes
limitation of the compiler

1559225677
scientes
but you can fix it by just using more asm instructions

1559225693
scientes
i don't think that any instruction actually more than one output value

1559225698
scientes
even multiplication

1559225722
nrdmn
interrupts may have multiple

1559225737
scientes
you only have interrupts in kernel mode

1559225777
andrewrk
fengb, you can define your allocator to only support up to 8 byte alignment and then return error.OutOfMemory if it's greater. that's allowed

1559225779
nrdmn
that's what I'm doing

1559225813
scientes
nrdmn, I think Linux generally uses the assembler (and not even inline assembly) for this type of stuff

1559225838
scientes
and there should be public functions (and not marked GPL) for all this type of stuff too

1559225851
scientes
but that is if you are programming Linux, and not bare metal

1559225891
fengb
andrewrk: sounds good thanks!

1559225895
nrdmn
I'm programming bare metal

1559225987
andrewrk
fengb, don't forget to document that behavior!

1559226059
scientes
it would be kinda cool if the interrupt entrace could be a calling convention, and you could just those registers as arguments

1559226740
tgschultz
is anyone aware of the reasoning for functions like @popCount to take the type as a parameter? From what the documentation says, it returns the smallest int type that can store the result, and the type of whatever it is popCounting could just be inferred. So I have to specify the type for no apparent reason and then still have to cast it.

1559226812
scientes
tgschultz, they shouldn't, they should return the smallest type. If not, the bug is mine

1559226852
scientes
however the type will be one bit bigger than you might perhaps expect, because the way those work

1559226883
tgschultz
I may not have made myself clear: they do indeed return the smallest type, but then I have to upcast that to do math with it. My question is, what is the purpose of specifying the type in the first parameter?

1559226903
scientes
to make it not a foot-gun

1559226916
tgschultz
what's the footgun case?

1559226934
scientes
like @clz(u64) will return 32 more than @clz(u32)

1559226945
tgschultz
but popCount doesn't have that problem

1559226953
scientes
it does on negative numbers

1559226966
tgschultz
ok, that's fair.

1559226985
scientes
I also proposed to not allow implicit upcasting, but that was rejected

1559226992
tgschultz
it just seems weird to me that if I pass a i32 to I would expect anything else

1559226999
scientes
yeah that is a good point

1559227008
scientes
the llvm intrinsic returns that

1559227010
nrdmn
is there a direct way to return flags from inline assembler?

1559227013
scientes
but we downcast it

1559227336
scientes
nrdmn, you mean cpu flags? Your best bet is to look at entry.S in linux, or the BSDs

1559227378
scientes
or just read your architecture manual

1559227400
scientes
assembler can of course write to the stack, or put stuff in the C ABI registers

1559227405
scientes
zig supports the C ABI

1559227462
scientes
tgschultz, it will implicitly upcast to that however, if you just declare the type of the variable first

1559227579
nrdmn
scientes: yes, I mean cpu flags and I'd like to write this in zig, not in C or any other language. There are probably plenty of lenghty solutions, but I'd prefer a neat little one-liner with the tools that I already use.

1559227595
tgschultz
here's the problem it caused me: originally I had `@intCast(i15, @popCount(x));` which I later do some math with. I thought this could become `@popCount(i15, x)`, but because of the return type being the smallest unsigned that can hold the result I end up having to `@intCast` it anyway. This isn't a big deal or anything, it just seems weird to me.

1559227634
scientes
nrdmn, the thing is that this is only supported in assembly, that is how everyone does it---if you write a zig library that abstracts this and is cross platform you are free to submit it, but zig and llvm just don't know about this stuff (and shouldn't)

1559227649
andrewrk
nrdmn, you can bind any number of variables to the inline assembly, and store the cpu flags in them

1559227650
scientes
assemblers don't even know about very rare instructions, like MMU instructions

1559227806
scientes
tgschultz, yeah I think making it clear that you are doing a 15-bit

1559227827
scientes
and it is useful that you don't have to unsafely downcast it if you want a narrower type

1559227857
scientes
(even if you know it is safe you have to use @intCast() to down-cast)

1559227882
scientes
tgschultz, you don't need to use @intCast there, you can just i15(@popCount(i15, x))

1559227967
tgschultz
actually it would be `i15(@popCount(u9, x));` the input is u9, the output needs to be i15. From the signature I got the wrong idea about how it worked is all.

1559228062
scientes
other languages prohibit the bit manipulation on signed numbers, but I don't see the reason to do that

1559228091
scientes
as twos-complement is here to stay

1559228266
tgschultz
yeah. since zig enforces a po2 alignment it wouldn't be suitable for esoteric architectures anyway.

1559228309
scientes
maybe 8-bit

1559228309
andrewrk
if we wanted to support such an esoteric architecture we would have to give up LLVM as well, since they have the same requirement

1559228349
scientes
but i hear llvm-avr isn't as good as gcc-avr (which still isn't great)

1559228351
tgschultz
someday I hope zig can have other backends. but targeting such things in 1.0 is unreasonable.

1559228359
scientes
at least gcc

1559228375
scientes
native just seems like too much work

1559228393
andrewrk
tgschultz, I agree

1559228395
scientes
and some of go's internals for doing syscalls are pretty ugly

1559228399
andrewrk
on both counts

1559228453
fengb
Just curious... would that mean embedding multiple backends and possibly frontends into the same binary?

1559228493
scientes
I think one of the points of having multiple implementations is to have them be pseudo-independent

1559228498
tgschultz
any idea yet wtf is up with CI breaking frequently now?

1559228508
tgschultz
in ways that aren't our fault, I mean?

1559228873
andrewrk
tgschultz, I thought it was fine now? yesterday one of the apt repositories on the linux ci was down

1559228897
tgschultz
oh it might be, I'm was looking at stuff merged yesterday.

1559230011
shritesh
Can I use the c_allocator to free() memory that was given to me by a C function that malloc’d? (readline)

1559230263
tgschultz
c_allocator is just a wrapper for malloc, so that should work.

1559230347
andrewrk
shritesh, yes that's defined to be correct

1559230383
Sahnvour
isn't there a catch if the function lives in another module that has its own libc ?

1559230405
scientes
i don't think musl and glibc can co-exist in the same process

1559230413
scientes
but I would love to see someone proove me wrong

1559230444
scientes
but yes, that would apply if someone was using tcmalloc or jmalloc Sahnvour

1559230468
scientes
or samba's tmalloc(), which has different semantics

1559230500
Sahnvour
I don't know about linux world, but remember that on windows you have to pay attention to this kind of stuff, even if you are using the system's malloc/free on both ends

1559230555
scientes
and with's zig concept of an allocator interface ;)

1559230584
Sahnvour
of course but at least that's explicit :)

1559230598
andrewrk
malloc is global

1559230610
scientes
except when it isn't, as we were discussing

1559230627
andrewrk
I don't think it's possible to have 2 malloc symbols

1559230639
andrewrk
the linker would error out

1559230640
scientes
chromium does monkey patching with C

1559230645
scientes
with dlopen

1559230649
Sahnvour
I remembered right :

1559230680
Sahnvour
andrewrk, the problem happens with dynamic libraries

1559230718
scientes
Sahnvour, you still have to use dlopen, because the dynamic linker can only see one of a symbol name

1559230723
andrewrk
you can't have a static libc and then have your api return libc-allocated buffers and then expect the API user to free them. that's just broken

1559230724
scientes
or partial static linking

1559230734
scientes
indeed it is broken

1559230748
andrewrk
that's the same as saying "this allocates memory and you can never free it, it's always a leak"

1559230765
scientes
unless they provided a special deallocation function

1559230774
scientes
which is actually quite common

1559230778
andrewrk
yeah that's fine. then the function is documented that you have to free it with in that way

1559230791
andrewrk
that's what std.process.argsAlloc does

1559230964
Sahnvour
I'm not sure which messages are adressed to me ; but shritesh did not specify how their executable is built. The example I linked is not about defined malloc in multiple object files, but the fact that malloc/free sometimes are

1559230986
scientes
generally that should be expected to be broken

1559231056
Sahnvour
that's how c/c++ projects are built on windows, call it broken if you want, but it's not rare

1559231059
nrdmn
scientes: in C, I can read a flag with asm("" : "=@cco" (overflow)). How would I do that in Zig? (note that I am not specifically interested in the overflow flag but in flags in general)

1559231067
andrewrk
dynamic libraries either need to dynamically link c or not have an API that expects the API user to use their own libc free() function

1559231087
scientes
nrdmn, what arch is this?

1559231094
nrdmn
x86

1559231131
tgschultz
speaking of argsAlloc, I'm not sure it is necessary on windows. We could include an [8192]u8 buffer and on first call to args interator process the commandline into it. Unless I'm mistaken, 8192 is the limit of the command line on Windows and the parsing should always make it <=. If the user never calls args interator in their code, the buffer shouldn't be included anyway.

1559231143
andrewrk
Sahnvour, I see your point but if the API expects you to call free(), from a zig programmer's perspective, std.heap.c_allocator is correct (even if the API is flawed)

1559231145
shritesh
Sahnvour: I’m just running zig run source.zig --library c

1559231148
Sahnvour
nrdmn, I think that's currently broken, some issue mentions this already, let me find it

1559231180
Sahnvour
andrewrk, yes, I agree, just wanted to mention this gotcha in case it's needed

1559231190
andrewrk
Sahnvour, I'm glad you mentioned it

1559231194
andrewrk
tgschultz, I like where this is going

1559231223
scientes
tgschultz, I also want to allowing looking at the environment in a separate startup function on Linux, and then have main() start at the very beginning of the stack, after

1559231228
tgschultz
something similar should be doable for args, but the buffer is much bigger.

1559231240
tgschultz
*env, not args

1559231257
Sahnvour
nrdmn, I think

1559231284
tgschultz
this way we could eliminate some of the headaches people have with windows

1559231302
andrewrk
nrdmn, you should be able to do the same thing in zig, if not it's a bug that can probably be fixed in a relatively straigthforward way

1559231370
scientes
nrdmn, this works, but I don't know how to get @ to work

1559231409
scientes
oh the source says "TODO

1559231416
scientes
so thar you go nrdmn

1559231456
scientes
and your multiple return issue is also discussed there

1559233486
SamTebbs33
Hi all, is it possible to get zig to warn/error when something (variable, function etc.) is unused?

1559233541
scientes
no

1559233575
andrewrk
SamTebbs33, that's something I want and I have an idea of how to do it, but due to the nature of zig's design it's going to be a feat to pull off

1559233579
scientes
thats the short answer, it might be possible in a scope, but because zig analysis is lazy, I don't think it is possible in general

1559233595
scientes
andrewrk, oh interesting

1559233595
andrewrk
I should type up this idea, because it has to do with doc generation too

1559233627
scientes
andrewrk, you are going to put it in the tokenizer/parser?

1559233640
SamTebbs33
Yeah that's an issue. The lazy analysis is the reason why warning on unused is useful :p

1559233644
andrewrk
I call it "multibuilds", the idea is that you specify a "set" of targets to build, and the compiler builds them all at once. this would enable things such as unused function, unused variable, and is kind of just necessary for actually useful documentation generation

1559233770
SamTebbs33
By targets do you mean x86, aarch64 etc.?

1559233792
scientes
wouldn't that be expensive, and more and more targets are added?

1559233805
scientes
especially as you have a matrix of os's * arches

1559233812
andrewrk
SamTebbs33, yes but that also includes build options - build mode, link options, etc

1559233824
scientes
oses * arches * build-flags

1559233829
scientes
its too expensive

1559233870
andrewrk
generally a project has a fixed number of configurations they support. it's not all of the ones supported by the compiler

1559233893
andrewrk
also, it only matters when branching. if your function doesn't do any if / switch on build configuration, it applies to all configurations

1559233910
andrewrk
what has to happen is during comptime evaluation, it might have to take multiple branches if they correspond to multiple build configurations

1559233948
scientes
yeah but this will greatly change the compiler, because LLVM-IR generally ends up arch-specific (especially with data-layout

1559233965
scientes
if you want to speed it up like that

1559233966
andrewrk
for doc generation it wouldn't even make it to LLVM IR

1559233977
andrewrk
you could have a doc generator that didn't link against LLVM

1559234009
nrdmn
aha, seems like llvm 8.0.0 doesn't support flags as output parameters yet. This has been added somewhat recently

1559234046
scientes
doesn't appear like zig has a llvm-9 branch yet

1559234047
nrdmn
s/llvm/clang/

1559234048
scientes
too soon

1559234059
andrewrk
"multibuilds" could support generating multiple artifacts, or maybe artifacts for only 1 configuration, or maybe none, and it's just doing compile error detection

1559234114
andrewrk
I'm pretty sure we just have to implement this in order to have doc gen

1559234132
andrewrk
I spent a few hours discussing it last night with thejoshwolfe

1559235803
tgschultz
mem.readInt variant appear to use (bit_count / 8), when reading, but streams use @sizeOf. Is this intended or should these match? My gut feeling is that the mem variant is correct.

1559235824
andrewrk
I can answer that question

1559235881
andrewrk
@sizeOf is the number of bytes that the type takes up in memory. loads and stores may access this many bytes

1559235908
andrewrk
bit_count / 8 will give you the number of bytes that the integer uses, logically. u24 is a good example

1559235918
andrewrk
for u24 bit_count / 8 is 3, but @sizeOf is 4

1559235966
andrewrk
so for readInt, the function is looking at a slice of bytes, and a given endianness, and wants to interpret the bytes logically

1559235985
andrewrk
however if it were to use @ptrCast and then a memory load, it would have to respect @sizeOf

1559236235
tgschultz
that doesn't really answer my question though, which is ultimately this: should in_stream.readInt(u24) consume 3 bytes or 4? Right now it consumes 4.

1559236304
tralamazza
I'm new to zig, sorry if this is a stupid question. I am trying to crosscompile (from linux to osx), does zig link to libSystem (or whatever the osx libc is)?

1559236332
andrewrk
tralamazza, yes - that is the only supported syscall ABI by macos

1559236363
tralamazza
and a mild rant, it's insane how annoying it is to crosscompile things to osx

1559236413
andrewrk
yes there are quite a few obstacles for that particular target

1559236434
tralamazza
I have SDL cross compiled, but giving me errors about ___error undefined, there is no end to the yak queue

1559236465
andrewrk
when running on macos? or when linking on your linux system?

1559236475
tralamazza
running on osx

1559236477
tralamazza
when*

1559236489
andrewrk
hmmm

1559236500
tralamazza
now I am thinking of implementing a simple sdl/glfw in pure zig

1559236549
andrewrk
that's an exciting project that several members of the zig community (including myself) are interested in, and there are a lot of problems to solve for every platform besides Windows

1559236565
tralamazza
I've zero experience w/ windows API

1559236589
andrewrk
I started looking into doing an X11 zig library. I concluded that I wanted better async/await/coroutines semantics first

1559236602
tralamazza
I will not go into opengl/vulkan straight away in any case

1559236610
andrewrk
the x11 C library that everyone uses is blocking, but that actually doesn't match the nature of x11 which is a server

1559236634
tralamazza
yah I was looking into xlib now

1559236667
tgschultz
oh, I see. readVarInt is meant to cover the usecase I'm looking at.

1559236689
andrewrk
tgschultz, oops missed your question. I think it should consume 3

1559236691
tralamazza
I'm just an annoyed embedded developer that cannot stand this electron app craze, i just want a stupid UI to work

1559236702
andrewrk
tgschultz, which means that @ptrCast + memory load is incorrect for u24

1559236733
tgschultz
so it would seem. I'll see about fixing it. It isn't blocking me right now, but it is relevant to what I'm doing.

1559236837
andrewrk
tralamazza, UI is an inherently difficult problem. there are 2 things in particular that conflict with each other: (1) accessibility / standardization within an OS, and (2) simplicity / cross compilation / standardization across OS's

1559236897
tralamazza
I will try my hand at writing a zig library

1559236922
donpdonp
the number of existing UI libraries is dizzying.

1559236987
tralamazza
is there a way to visualize what is parsed/returned from a @cInclude?

1559236995
tralamazza
a debug output of some sort

1559237001
andrewrk
tralamazza, --verbose-cimport

1559237008
tralamazza
oh

1559237011
tralamazza
<3

1559237011
andrewrk
it will print the path to a generated .zig file you can then look at

1559237084
donpdonp
grep -r gtk_c_func zig-cache/ is a quick and dirty way to look up constants

1559237139
tralamazza
maybe this command (--verbose-cimport) should display the file path even if a zig build only hits cache

1559237191
andrewrk
I thought it did

1559237215
tralamazza
hm nope

1559237229
tralamazza
I need to change a file or clear the cache folder

1559237265
tralamazza
it's minor ofc

1559237280
andrewrk
ah I see

1559237372
tralamazza
great language btw andrewrk, please don't let it become rust =P

1559237414
andrewrk
I think I have a pretty solid understanding of exactly the niche that zig fills

1559237423
andrewrk
so don't worry, it's not going to do that

1559238376
andrewrk
tgschultz, it just occurred to me that you could use usingnamespace + @This() in functions to potentially implement comptime interfaces

1559238399
andrewrk
I haven't looked at either of your PRs yet, for all I know you already did this

1559238663
tgschultz
andrewrk: I didn't yet because usingnamespace on structs wasn't a thing when I started. The end result would be similar to #2533 in usage but the implementation would be similar. #2533 could be improved to work at comptime too. I'm holding off making those improvements unless there's interest in going that direction.

1559238680
tgschultz
However, it is worth noting that usingnamespace doesn't allow you to use self

1559238706
tgschultz
at least it didn't in my test, but now that I think about it... hold on

1559238742
andrewrk
oh right. @This() would refer to where it was declared. that makes sense. it wouldn't get hijacked

1559238795
andrewrk
when you look at @This() you don't have to wonder, where is this function getting included or whatever. you can just look up the scope to struct/union/enum, and that's what it's talking about

1559238913
tgschultz
even if you define it `pub fn foo(self: var)` and usingnamespace on it, you still can't call self.

1559238947
andrewrk
ahh right. usingnamespace does not affect method call syntax

1559238973
tgschultz
not today anyway

1559238976
andrewrk
I wasn't trying to have an opinion on this at this time. just had a false realization

1559239221
tgschultz
there's a lot to consider re: interfaces. are we ok with a "comptime"/"runtime" separation? if so, what's the balance between clarity and ergonomics? If not, how do we handle ErrorSets? etc. It is not a decision I'd want to rush.

1559239338
andrewrk
agreed. that's why I've been doing the other language stuff first, where it seems reasonable to reach a stable conclusion which could inform this one

1559239425
tgschultz
but speaking of interfaces, I had the thought that In/OutStream should unify with SeekableStream. Most existing stream targets (slices, files) are seekable, and when it isn't we can throw error.Unimplemented. this would mean we could eliminate PeekStream.

1559239482
tralamazza
can zig import C macros with parameters? or rather, what is the macro import rule?

1559239581
andrewrk
tgschultz, that seems reasonable

1559239612
andrewrk
maybe the implementation could check if Unimplemented was one of the errors in the provided set, and put `unreachable` instead of `return error.Unimplemented`?

1559239643
andrewrk
so you could have an error set that does not include Unimplemented, and promise to never call the seek functions

1559239817
andrewrk
tralamazza, C macros are resolved when they produce actual exports - functions, types, variables, etc. but when the macro itself is the API, it's all heuristics based

1559239874
andrewrk
e.g. we're pretty sure `#define PI 3.14` should be `pub const PI = 3.14;` but if it's `#define x {` wtf is zig supposed to do?

1559240362
tralamazza
in the case of xlib is a bunch of macros to access an opaque pointer

1559240400
andrewrk
the actual ABI of the server is pretty simple

1559240505
tralamazza
i will try things, i don't have a plan for any of this

1559240523
tralamazza
thanks for the help

1559240635
donpdonp
lol @ c macro logic. there was a fair amount of GDK "type casting" in macros that I had to wade through

1559240708
mikdusan1
andrewrk: i think zig fmt on tests for dep_tokenizer is going to remove carriage-returns which are needed

1559240724
mikdusan1
oh wait i see it did a good job

1559240726
mikdusan1
my bad

1559240740
donpdonp
another example is linux's errno.h, its a lot of macro confusion but zig cuts to the real function involved: const errnoPtr: [*c]c_int = c.__errno_location();

1559240742
andrewrk
mikdusan1, that was my manual edit

1559240751
andrewrk
the 0x0d right?

1559240766
mikdusan1
yes

1559240785
andrewrk
zig fmt emitted an error which was correct, so then I just fixed it manually

1559240795
andrewrk
it's ok that stage2 parser is more strict than stage1

1559240843
mikdusan1
that's one of the reasons i had to implement a "hexdump" compare output for the tests... cr-lf vs lf, whitespace characters, tabs. so that added to size of pr

1559241196
mikdusan1
heh "\x0d" == "\r"

1559241442
donpdonp
this build.zig works fine with exe.linkSystemLibrary("c"); but when I try to specify a target with exe.setTarget(builtin.Arch.x86_64, builtin.Os.linux, builtin.Abi.gnu); then zig build throws const c = @cImport({ => error: C import failed

1559241447
donpdonp
am I missing something?

1559241702
tralamazza
hm @cDefine does not accept a {} as value for void (like the docs suggest)

1559242271
andrewrk
donpdonp, can I see more information?

1559242296
andrewrk
tralamazza, what error do you get?

1559242347
tralamazza
c.zig:2:29: error: expected type '[]const u8', found 'void'

1559242348
tralamazza
@cDefine("_GNU_SOURCE", {});

1559242375
andrewrk
tralamazza, that's probably a mistake, but you can work around it with ""

1559242388
tralamazza
yup, doing the "" right now

1559242594
donpdonp
andrewrk: does this help

1559242634
andrewrk
donpdonp, note that you can do  exe.setTarget(.x86_64, .linux, .gnu)

1559242695
andrewrk
donpdonp, do you see the more interesting error?

1559242730
tralamazza
some include folder shenanigan

1559242876
tralamazza
that's another thing, folders. I'm getting used to fedora, and that means libs are in /usr/lib64..

1559242931
donpdonp
andrewrk: I dont see a more interesting error :(

1559242935
andrewrk
tralamazza, see

1559242947
andrewrk
donpdonp, I'll give you a hint, it's one of the hints

1559243044
donpdonp
i see two 'error:'s and two 'note:'s but no hints

1559243068
donpdonp
the obviuos error of those .h files not existing doesnt happen with target is unspecified.

1559243121
andrewrk
donpdonp, yeah the .h files not existing is what I was talking about. so the question is: "why doesn't Zig find the .h files when target is specified?"

1559243152
andrewrk
the answer is that when you compile natively, zig can look at your native system for .h files. when you cross compile, you have to specify explicitly where the .h files are, because your system ones are not necessarily correct

1559243178
scientes
yeah both the debian thing and the FHS thing that Debian explicitely rejected (to come up with multi-arch)

1559243198
scientes
oh, so Debian isn't supported!

1559243218
andrewrk
scientes, hm what's that?

1559243222
scientes


1559243223
andrewrk
what do you mean

1559243231
scientes
specifically Debian multi-arch

1559243265
scientes
>  it will not access any system directories unless explicitly requested.

1559243338
tralamazza
oh yah i see, 2041 is a big one

1559243362
scientes
its not THAT big

1559243380
tralamazza
anything that even mentions a package manager scares me

1559243391
scientes
its actually really great

1559243401
scientes
because it makes Zig support Linux, all Linuxes, even android

1559243424
scientes
(although no-one has really tried Android AFAIK)

1559243432
andrewrk
scientes, I think someone did recently!

1559243496
andrewrk


1559243560
scientes
-fPIC is correct, but as he is not using bionic he isn't forced into that

1559243599
tralamazza
2041 is interesting because in a way is a discussion on how fancy you make your build system or how much you push to packages

1559243657
andrewrk
tralamazza, the cross-compilation / cross-platform focus of zig pushes us in the direction of preferring zig packages to system packages

1559243679
andrewrk
eliminating system dependencies improves reliability and consistency

1559243736
andrewrk
of course, system package maintainers can always patch zig projects to use system dependencies - and I fully expect e.g. Debian to do this - but as far as the project is concerned, collaborating on it will be streamlined

1559243769
andrewrk
and Debian users are encouraged by Debian itself to file bugs with Debian first and not upstream

1559243784
andrewrk
this is already the case

1559243815
scientes
as long as llvm and zig are version synced it should lead to too many problems

1559243825
scientes
*shouldn't

1559243842
andrewrk
that's the plan. although I already have an open bug with debian regarding that

1559243851
andrewrk


1559243857
scientes
and is zig building against musl?

1559243857
tralamazza
my gut feeling (because I don't really know much) is that pushing to packages is the best option, since you make the build system simpler and more robust, while not creating a bottleneck for new/upgraded systems

1559243871
andrewrk
scientes, the linux builds on ziglang.org/download are built against musl

1559244038
andrewrk
alright I know I broke a lot of stuff recently so I gave a gift for everybody as a consolation prize

1559244044
andrewrk
*s/gave/have/

1559244452
scientes
Turkish delight?

1559244476
andrewrk
even better. default struct field initialization values

1559244501
scientes
awww sweet

1559244538
andrewrk
as soon as the tests finish

1559245382
emekankurumeh[m]
christmas came early this year?

1559245583
andrewrk
pushed

1559245807
scientes
wow it was such a small change

1559245812
scientes
beautiful

1559246157
lygaret
I'm not even paying attention and I'm stoked

1559248992
andrewrk
I'm omw to the airport for my marathon trip (race is on Sunday). Planning on using the 5 hour plane ride to get some copy elision progress

1559249296
apoddubn
Hi! I'm playing around with wasm stuff but I'm having problems getting the functions exported. This shouldn't be a problem with llvm 8, so I'm not sure if that's the issue here. I'm on a mac and used homebrew to get the latest llvm, but maybe zig still uses the xcode version?

1559249378
shritesh
apoddubn: did you compile zig yourself?

1559249388
apoddubn
Or does zig bring its own clang version? not sure I can trust zig cc --version

1559249405
apoddubn
No, I downloaded the executable

1559249409
shritesh
It does.

1559249426
shritesh
The downloaded binary is self contained.

1559249447
apoddubn
ah okay, thanks.

1559249485
shritesh
Have you marked the functions as export?

1559249556
apoddubn
I did.

1559249715
shritesh
What’s the problem you’re seeing?

1559249912
apoddubn
Just redid a minimal example and it works fine now. Originally I tried building raulgrell's tetris repo.

1559258679
fengb
Hey, is there a better way to represent an intrusive list?

1559258707
fengb
I'm really not sure how to shove the next pointer + arbitrary sized array in the same struct

