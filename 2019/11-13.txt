1573603332
protty
did the CI & generating downloads for the website speed up recently?

1573603766
fengb
How do I get the frame of a generic function?

1573604374
fengb
Oof, async recursion with function pointer is painful

1573604540
fengb
Oh, inferred recursive errors has been fixed?

1573607771
andrewrk
fengb, @Frame(@typeOf(foo(a, b, c)))

1573607791
andrewrk
the expression inside @typeOf() is guaranteed to not have side effects

1573607848
fengb
I had a recursive call so I ended up with @typeOf(@frame().*)

1573607870
andrewrk
nice

1573607887
fengb
Oh I see. I was missing @typeOf()

1573607892
fengb
In my other attempt

1573608209
daurnimator
fengb: there is a math.add that is nicer to use than e.g. @addWithOverflow

1573608248
daurnimator
andrewrk: oh I didn't know that @typeOf doesn't evaluate the contents.....

1573608409
andrewrk
daurnimator,

1573608712
daurnimator
andrewrk: not sure why this doesn't work (isn't this how `comptime var` works?) ...

1573608815
andrewrk
daurnimator, global vars can't be comptime. global side effects are not allowed in comptime code

1573608841
andrewrk
top level decls have order-independent analysis

1573611523
daurnimator
andrewrk: what about @export?

1573611616
andrewrk
that's ok because it can not be observed by other comptime code, and multiple colliding @export will be an error

1573611645
andrewrk
but a global comptime var could have different behavior depending on top level declaration evaluation order

1573611918
daurnimator
andrewrk: however it does mean that you could make it an error to `@typeOf(MyFunc())`

1573611954
daurnimator
andrewrk: potential solution is to turn off @export and any other global side effect having built-ins in @typeOf?

1573612091
daurnimator
looking through the list.... I think @export is the only one?

1573617531
fengb
Is github syntax highlighting broken? I'm seeing everything in red or orange

1573617706
daurnimator
andrewrk: when to use os/windows/bits vs os/bits/windows ?

1573617770
andrewrk
fengb, emekoi is the maintainer of

1573617795
fengb
Ah okay

1573617797
andrewrk
daurnimator, os/bits/windows is the posix layer. os/windows/bits is the windows layer

1573618377
daurnimator
andrewrk: what do you mean "posix layer" and "windows layer"?

1573618393
daurnimator
e.g. sockaddr is currently in os/bits/windows... but it is part of the kernel driver ABI

1573618573
daurnimator
the layers for win32 application on winnt are: kernel drivers (many drivers! and are on a sliding scale from ubiquious to single deployments) -> core kernel pieces -> ntdll -> kernel32 -> userspace "helper" system dlls.

1573618628
daurnimator
note that there are 4 different "posix layers" for windows.... the old subsystem, the win32 bare minimums, mingw on top of win32, and WSL

1573618644
daurnimator


1573618675
daurnimator
(I'm asking because for a little bit today I have access to a windows machine; and am working on porting my AFD code)

1573619301
andrewrk
daurnimator, os/bits/windows is stuff that is compatible with POSIX

1573619301
andrewrk
sockaddr_un is a good example

1573620885
daurnimator
andrewrk: 'compatible'?

1573620915
daurnimator
e.g. os/bits/linux/* is full of architecture specific constants....

1573620932
daurnimator
many of which are not posix constants, but linux-specific ones

1573620999
andrewrk
yes but they are still part of the same "layer"

1573621019
andrewrk
e.g. O_LARGEFILE and SO_NOSIGPIPE

1573621278
lattis_
Hello. I'm really excited about zig but I'm having trouble building it on my i686 Gentoo machine. error:

1573621328
lattis_
The reason I thought this might work is from reading the gentoo zig ebuild

1573621339
andrewrk
hi lattis_, welcome. 32 bit linux support currently has tier 3 support:

1573621380
andrewrk
if that static assert is failing then I think you may have a libclang that is not 9.0

1573621970
lattis_
Hmm.  I shouldn't, clang and llvm-config both report version 9.0.0, which I updated last night after zig complained about llvm 8.0.1.

1573622084
lattis_
I see, I didn't read the support table carefully enough.

1573622775
andrewrk
32 bit linux is in scope of the project, it's just not a priority

1573624840
scientes
lots of distros are dropping support

1573624843
scientes
not priority

1573629999
andrewrk
see also

1573631663
daurnimator
std.mem.asBytes doesn't seem to return a slice as it says in the docs...

1573645266
mq32
heyhoh

1573645285
mq32
is there a solution for the following error:

1573645287
mq32
cimport.zig:686:5: error: enum tag value 1 already taken

1573645307
mq32
the header i'm importing has enum fields with aliases

1573645386
mq32
workaround would be: copy cimport.zig to custom file and modify it by hand

1573647669
gonz_
The latter is what I've done in this situation

1573647920
mq32
yeah, i'm doing that now

1573647926
mq32
but with a full "by-hand" conversion

1573647938
mq32
because if i have to touch this, why not make it right in the first place

1573648790
Sahnvour
andrewrk: that would be cool. I'm making a document with the various things that are bothersome on this topic and getting a better understanding of the topic in the process

1573662079
leeward


1573662131
leeward
I was looking at adding docs to math.zig, and it would take an awful lot of duplication, which is not how things should be.

1573663965
Pistahh
in zig do arrays need to have their sizes known at compile time? / What data structure to use if I want to allocate space for n pieces of "things"?

1573663991
mq32
Pistahh, arrays are "values" with multiple elements inside

1573663998
mq32
so yes, their size is comptime known

1573664007
mq32
there are slices that allow dynamicly sized ranges

1573664015
mq32
[]u8, <<= slice of mutable u8

1573664022
mq32
[2]u8, <<= array of 2 u8

1573664087
Pistahh
ok but what to use if I know the size I need only during runtime?

1573664097
mq32
use slices and allocators

1573664142
mq32


1573664161
mq32
var slice : []MyItem = allocator.alloc(MyItem, 10);

1573664180
mikdusan1
also see std.ArrayList

1573664312
Pistahh
mq32: thx

1573664319
Pistahh
mikdusan: ArrayList is what I was looking for, thx

1573664364
mikdusan
tip: a.toSlice() and a.toSliceConst() are super convenient

1573669332
Pistahh
how to print a number right aligned to n chars where n is a variable?

1573670775
mq32
Pistahh, i don't think there's a function for that yet

1573670784
mq32
the format API is limited to "one value per formatter"

1573670798
mq32
do you need arbitrary sized formats or only a limited range?

1573671555
andrewrk
I think anon struct literals / anon list literals are really going to open up some nice fmt api

1573671565
mq32
yeah true

1573671597
andrewrk
for example there could be fmt.Pad{.before = runtime_value1, .after = runtime_value2, value = runtime_value3}  (with defaults for the pad fields)

1573674626
andrewrk
FireFox317, did you figure out how to make drawing to the framebuffer faster?

1573674640
andrewrk
I got it working on real hardware using markfirmware's repo but it's real slow to clear and redraw

1573674667
mq32
andrewrk: how do you clear/redraw?

1573674672
mq32
double buffering or single buffer?

1573674767
andrewrk
mq32,

1573674797
andrewrk
video_core_frame_buffer.zig clearRect() and then Bitmap.drawRect()

1573674807
andrewrk
double buffering sounds useful

1573674814
andrewrk
idk how to enable that

1573674938
mq32
you just change your frame buffer address

1573674952
mq32
so: fb.words

1573674972
mq32
btw, i probably found a big performance problem

1573674992
mq32
change line 25 to fb.drawPixel32(x + x2, y + y2, color32);

1573674996
mq32
and convert the color only once

1573675035
mq32
you could also change Color to a packed struct and make "toColor" a no-op instead of having 3 shifts and everything

1573675121
andrewrk
is it really down to a few instructions? I thought there would be a lot more headroom than this

1573675133
mq32
probably not

1573675139
mq32
you render 1920x1080 pixels on real hardware

1573675149
mq32
it's a big difference if you do "single instruction" or "20 instructions"

1573675162
mq32
<mq32> probably not <= this is related to headroom

1573675183
andrewrk
nice, ok I'll try that. also will try a release build

1573675190
mq32
oh yeah

1573675193
mq32
that's also a thing :D

1573675201
mq32
never do graphics in debug build

1573675207
andrewrk
btw I'm only clearing a small rect and drawing a small rect, not all 1920x1080 pixels currently

1573675214
mq32
my VGA blitting routine went from 1 FPS to "can't measure with the eye" FPS

1573675239
andrewrk
can you explain the double buffering thing? this fb.words thing is volatile ram

1573675270
mq32
fb.words = @intToPtr([*]volatile u32, fb_addr & 0x3FFFFFFF);

1573675272
andrewrk
so if I put the buffer offscreen, then tried to "swap" that would mean iterating over each pixel and storing it to fb.words right? that would actually be doing more work

1573675285
mq32
is this address "wild" or hardware defined?

1573675310
andrewrk
I believe the hardware gives the address on line 117

1573675338
andrewrk
back in a bit, lunch break

1573676048
mq32
huh

1573676050
shakesoda
i wonder how difficult it is to program the videocore to do these kinds of operations instead of doing it on dumb buffers on cpu

1573676060
mq32
i thought you could change the framebuffer pointer

1573676078
mq32
shakesoda: there's an opengl example here:

1573676194
andrewrk
"mailbox Set virtual offset Tag: 0x00048009." -> there it is

1573676196
shakesoda
mq32: wow, excellent

1573676241
mq32
if you can change that, you can probably allow faster memory access

1573676252
mq32
also i noticed that having volatile on "framebuffer memory" is bad

1573676271
mq32
you should treat that as normal memory, as it's not MMIO per se (not every write

1573676287
mq32
only the last write should have it's effect "applied"

1573676374
andrewrk
hmm, I see

1573676422
jaredmm
I think I saw it mentioned by someone (maybe FireFox317), but is there a repo where people were working on a language server?

1573676528
mq32
andrewrk: also one general tip: try not to do stuff "nice", but efficient

1573676536
mq32
don't multiply, use accumulation with another variable

1573676540
pixelherodev
mq32, wait really?

1573676562
pixelherodev
(fbram volatile)

1573676564
mq32
yes

1573676570
mq32
pixelherodev: i now have the smoothest 60 FPS + vsync you can imagine

1573676584
mq32
framebuffer is "standard memory"

1573676591
pixelherodev
Not on x86 it isn't.

1573676607
pixelherodev
It's MMIO to the GPU in VGA emulation mode IIRC

1573676616
shakesoda
not on rpi :)

1573676620
mq32
doesn't matter, pixelherodev

1573676631
mq32
you don't need every write you make to the memory in the same order

1573676635
mq32
as you write it in code

1573676636
pixelherodev
shakesoda, rpi != x86

1573676640
shakesoda
exactly

1573676655
pixelherodev
I'm asking why that comment is helpful...

1573676659
andrewrk
hm, the video core chip has opengl built into it? that's a surprisingly high level API

1573676660
pixelherodev
mq32, ah right, that makes sense

1573676660
mq32
you only need to make sure your writes actually happen eventually before switching bit planes

1573676679
shakesoda
are we not talking about doing things on a pi

1573676685
mq32
andrewrk: that's not quite right as an "API", but you have the same level of functionality

1573676688
pixelherodev
I literally said "on x86" :P

1573676702
pixelherodev
Multiple separate discussions can occur in tandem ;)

1573676712
shakesoda
ok

1573676712
andrewrk
mq32, are you testing on real hardware?

1573676772
mq32
yes

1573676787
mq32
the stuff i've sent a video some days ago runs also on real hardware

1573676804
mq32
and: i would call that even a "first try" on real hardware!

1573676861
andrewrk
mq32, really impressive!

1573676884
mq32
yeah i just have to find motivation to continue coding :D

1573676893
andrewrk
interesting this videocore chip even supports shaders, if I can figure out how to use them + using memory on the gpu, I should be able to draw real fast

1573676902
mq32
i had a bad day today. running from one annoyance into the other

1573676910
andrewrk
damn

1573676918
shakesoda
yeah everything is shaders on em

1573676919
mq32
yeah, so i stopped coding and started watching youtube :D

1573676928
andrewrk
mq32, thanks for helping me today though!

1573676983
shakesoda
btw i see you use some serial uploading stuff, have you also tried usb booting it entirely with rpiboot

1573676990
shakesoda
* for clashos etc

1573677026
mq32
andrewrk: you're welcome

1573677047
mq32
i'm going to bed now

1573677050
andrewrk
mq32, maybe I could run your thing as a demo? it's a lot more exciting than my shitty slow redrawing logo

1573677074
mq32
you mean that starfield thingy? sure

1573677088
andrewrk
I have an x86 laptop to run it on

1573677118
mq32


1573677131
mq32
you need

1573677143
mq32
gnu make, mono/mcs, zig

1573677174
andrewrk
will the keyboard support work with a laptop keyboard?

1573677179
mq32
as long as you have some megs of RAM and a VGA compatible card it

1573677182
leeward
Is there an established idiom in Zig for when a symbol you want to use as a name clashes with a keyword?

1573677186
mq32
i can check tomorrow

1573677193
mq32
i have two laptops here to test it

1573677205
andrewrk
leeward, here's an example: @"switch"

1573677207
mq32
leeward: @"while" is available

1573677218
mq32
but i got to go, really tired

1573677220
leeward
Ah, thanks.

1573677222
andrewrk
good night mq32

1573677222
mq32
laters!

1573677251
leeward
hmm, kinda awkward, but ok

1573677278
andrewrk
that's if you need your symbol to be the name. if you're choosing an identifier, probably try to pick a non conflicting name

1573677297
andrewrk
e.g. if you were calling an external function called `var` then you would use this feature

1573677299
leeward
Oh, I get it. That's for importing C modules.

1573677335
leeward
Yeah, I don't need this function to be called "and" it's just the most natural name for it.

1573677677
keithdc
Is there a way to do something like this in zig? ->

1573677693
keithdc
It seems like comptime struct fields aren't allowed, unless I made a silly mistake

1573678311
andrewrk
keithdc, there's a proposal #3677 for comptime struct fields, but it wouldn't be compatible with your pseudocode. The proposal requires specifying the comptime value as the default field initialization value and that's the only value it could ever be

1573678425
FireFox317
andrewrk: did you figure it out to make it faster? Because I know that markfirmware's own repo draw much faster on actual hardware even for a debug build

1573678552
keithdc
andrewrk: I see, thanks

1573678598
FireFox317
jaredmm: Someone was working on that yes, but I also don't remember who

1573678720
FireFox317
shakesoda: I got a version where the serial bootloader is working and its only Zig code, which is pretty nice

1573678749
andrewrk
FireFox317, for the game I intend to make it will mean taking more advantage of the videocore chip. see this link for some examples:

1573678786
andrewrk
I gotta go to the airport. hope to see some folks at handmade con this weekend :)

1573678799
FireFox317
Yeah that would be nice, but you think you can finish that before the handmade con weekend? xd

1573678815
FireFox317
andrewrk: Ah nice, have fun there!

1573679297
FireFox317
Unfortunately I live in the Netherlands, so pretty hard to come by xd

1573679558
pixelherodev
And I'm secretly a penguin in a human suit, so I definitely can't make it and risk revealing my true identity

1573679813
shakesoda
FireFox317: depending on the model you can boot them without any sd card at all, i mean

1573679853
shakesoda
it's really useful

