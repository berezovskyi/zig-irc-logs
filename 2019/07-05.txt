1562286423
tgschultz
For the record andrewrk, I'd rather you reject anything I submit than accept something you think is detremental to zig, so don't feel bad about rejecting my stuff anyway.

1562290167
daurnimator
marler8997_: you might find

1562294793
ltr-
andrewrk: is your plan to implement an lsp server as part of the std lib?, for example i can "start" the server with 'zig run-lsp' ?? so the build.zig will eventually run the main function of the server in a separate process when the editors start?

1562294916
lunamn


1562294931
ltr-
yes im writing a comment there

1562294949
ltr-
proposing a way to do it.

1562295028
ltr-
i like the idea of an lsp server in the standard library , so editors can call and execute build.zig with an special argument to spawn a server

1562298624
meowray
there are many lessons we can learn from clangSema for completion. Its on-the-fly diagnostics is great

1562308475
daurnimator
emekankurumeh[m]: you there?

1562308514
emekankurumeh[m]
yes

1562308548
daurnimator
Re: socket module. you've gone with a very classic BSD socket API. I'd like to propose that zig prefers a more modern command buffer approach

1562308596
marler8997_
Is there a library that you could reference that uses such a commmand buffer approach?

1562308614
marler8997_
Also, for any higher level API, I would think it could work on top of the socket api right?

1562308616
daurnimator


1562308642
daurnimator
marler8997_: no. a fast/efficient command buffer api would need to bypass that socket api...

1562308699
daurnimator
marler8997_: in that link have a look at `so_exec`

1562308740
marler8997_
Everything I'm looking at looks like it works on top of the socket api

1562308777
daurnimator
marler8997_: in that file yes. but a fast and efficient one wouldn't

1562308794
marler8997_
is there an example, or can you elaborate?

1562308796
daurnimator
marler8997_: on linux, you'd instead build on top of uring (see

1562308821
daurnimator
on windows you'd use all OVERLAPPED operations

1562308823
emekankurumeh[m]
fyi, everything in that pr is more or less up for debate

1562308841
marler8997_
I'll have to read up on this.  I've done alot of socket programming but am not familiar with "command buffer api"

1562308847
marler8997_
I am familair with overlapped IO though

1562308857
emekankurumeh[m]
i suppose andrewrk would have the final say though

1562308859
marler8997_
it's not a replacement for the socket api

1562308877
marler8997_
it relies on the socket api as well

1562308887
marler8997_
at least parts of it

1562308901
daurnimator
marler8997_: on windows it's all io submission requests underneath

1562308906
emekankurumeh[m]
isn't iocp better than "vanilla" overlapped io

1562308913
daurnimator
emekankurumeh[m]: no IOCP is terrible

1562308914
marler8997_
sure but you still need the socket api, it's not a replacement

1562308925
daurnimator
marler8997_: huh?

1562308926
emekankurumeh[m]
really?

1562308937
marler8997_
overlapped IO is just how you send/receive data

1562308951
marler8997_
you still need a socket library for everything else

1562308967
marler8997_
IOCP is terrible?

1562308984
marler8997_
it's been a few years since I've used this stuff...

1562308999
marler8997_
I recall IOCP being the most scallable and most efficient variant...

1562309022
daurnimator
emekankurumeh[m]: IOCP only allows registering a single IOCP controller per handle. it's better to use overlapped IO yourself.

1562309025
marler8997_
I could be remembering wrong though, it's been a few years

1562309035
daurnimator
but then sockets are different again

1562309042
daurnimator
sockets aren't.... "real" on windows

1562309053
marler8997_
you mean they aren't files like on linux?

1562309065
daurnimator
on windows when you use sockets you are actually talking to the AFD driver

1562309087
marler8997_
never heard of the AFD driver...what is that?

1562309112
marler8997_
not much coming up on google

1562309112
daurnimator
a socket HANDLE is actually just a random handle to the AFD driver, and send/recv are ioctls on the AFD HANDLE

1562309156
marler8997_
is there docs on this?

1562309164
daurnimator
marler8997_: not that it'll help you find info, but AFD stands for "Advanced Function Driver"

1562309173
daurnimator
marler8997_: uh. no I don't think so

1562309184
marler8997_
?? then how do you know this?

1562309205
daurnimator
uh... uh.....

1562309264
daurnimator
marler8997_:

1562309328
marler8997_
cool, some inside look into how windows operates

1562309350
daurnimator
marler8997_:

1562309353
marler8997_
windows is quite odd, it provides a userspace C ABI rather than exposing the kernel interfaces

1562309359
emekankurumeh[m]
mio for rust used iocp and that powers hyper/tokio which score relatively high on the techenpower benchmarks

1562309390
marler8997_
oh, very interesting

1562309406
daurnimator
emekankurumeh[m]: if you want to go fast with sockets on windows you talk directly to the AFD driver.

1562309423
daurnimator
have a look at the libuv core:

1562309434
emekankurumeh[m]
I suppose midpix would be helpful hrre

1562309455
marler8997_
Sounds like an interesting project, but in the immediate, providing a socket library that supports the BSD style socket API also makes sense in my opinion

1562309462
daurnimator
I think I was the one that told midipix this some of this stuff

1562309497
daurnimator
but yes midipix has some good defines for it

1562309515
daurnimator
and in psxscl he wrote the best windows socket polling piece I've ever seen

1562309561
daurnimator
marler8997_: yes and no...

1562309615
daurnimator
I think we can do command buffer style now

1562309635
emekankurumeh[m]
it might make sense to ~~steal~~ port some of that stuff from midipix

1562309651
daurnimator
emekankurumeh[m]: note that midipix is GPL.

1562309664
marler8997_
shouldn't we support the basic well-defined officially supported interface first?

1562309671
mq32
daurnimator, what would "command buffer style" exactly be? i know these words from Vulkan, but not in connection to networking

1562309696
daurnimator
so what am I suggesting now?: the socket object should have: socket.queueListen(), socket.queueSend(); socket.queueRead(); etc. method.

1562309719
daurnimator
and then only finally

1562309764
mq32
so my primary use case would be .queueReceive(), .exec() ?

1562309788
daurnimator
this will then be easy to write different 'backends' internally that use uring/overlapped IO/raw AFD operations without changing the public API

1562309832
emekankurumeh[m]
do you have a proposal typed up?

1562309846
emekankurumeh[m]
(on the issue tracker)

1562309926
daurnimator
emekankurumeh[m]: I don't think so? I've mentioned it before here on IRC and I think in #2525 ?

1562309953
daurnimator
originally #2525 contained the start of my implementation

1562309964
daurnimator
but I changed that PR to be just the uring defines.

1562310095
emekankurumeh[m]
also any async stuff would have to be built on top of this stuff right?

1562310135
daurnimator
emekankurumeh[m]: well you'll notice that if you have .queueReceive(), you already sort of have async ;)

1562310183
emekankurumeh[m]
furthermore the traditional BSD style api could be built on top of this right?

1562310194
daurnimator
emekankurumeh[m]: yep

1562310254
daurnimator
recv() would be .queueReceive() and then .exec()

1562310293
emekankurumeh[m]
I'll try to address some of the comments on the pr and then I'll look into some of this other stuff

1562310346
daurnimator
My branch with this stuff got paused until I see how coroutines end up looking

1562310401
emekankurumeh[m]
most of the code in that pr is from a while ago

1562310419
emekankurumeh[m]
~1400 commits ago

1562321913
IntoxicatedHippo
Does anyone have a NixOS derivation for a recent version of Zig? I'm trying to build it and I'm getting this error: Generating libuserland.a, Unable to create builtin.zig: access denied

1562322536
samtebbs
IntoxicatedHippo: Is that a NixOS-specific error or a general permissions error? I'm pretty sure that andrewrk himself develops on NixOS.

1562322848
IntoxicatedHippo
It's an error from the zig build, but I don't know what within the build causes it or where it's trying to create builtin.zig

1562329479
samtebbs
IntoxicatedHippo: A verbose build might tell you what's causing it

1562334366
bheads
Watching the live stream from yesterday, not done yet but was wondering in andrewk figures out you can use msync to test if a page is mapped

1562334418
bheads
msync sets errno to ENOMEM if the page address is not mapped

1562334509
Tetralux
OOC, what does it set it to if it is?

1562334554
bheads
msync would return 0

1562334561
bheads
no success

1562334588
bheads
on success****

1562334871
samtebbs
Tagging andrewrk for above ^

1562335011
bheads
I think you can also use madvise as well

1562335527
bheads
This might be the most platform safe to use:

1562336055
dimenus
does zig have format specifiers in print?

1562336083
dimenus
or is it intended that you always leverage the RTTI to print it correctly?

1562336286
bheads
fmt does:

1562336299
bheads
but its not document yet, so you need to dig through the code

1562336339
bheads
but to look at the tests at the end of the file

1562336644
dimenus
bheads: thanks

1562336658
bheads
@dimenus: np

1562337694
IntoxicatedHippo
What's the name for the files cached in ~/.local/share/zig/stage1/o/ ?

1562338425
mikdusan
IntoxicatedHippo: that's another level of `zig-cache`; feel free to delete `~/.local/share/zig`; zig will populate it as necessary

1562338514
IntoxicatedHippo
It doesn't seem to get updated when -mllvm options change, I'm trying to work out if that's been reported or not

1562340127
emekankurumeh[m]
should it?

1562340346
IntoxicatedHippo
I assume there are flags that will change the output, I ran in to an issue here when I tried to use `-llvm-features -sse`:

1562341012
mikdusan
--> "Cached files in ~/.local/share/zig are not updated when --llvm-features flags are changed."

1562341025
mikdusan
is that referring to files like compiler_rt.o and libcompiler_rt.a ?

1562341037
IntoxicatedHippo
Yes

1562341086
mikdusan
i did this, and it seems to confirm: `zig run -mllvm -mcpu=avx hello.zig`

1562341115
mikdusan
noticed this: a new `run.o` was populated in cache. but not `compiler_rt.o` and `libcompiler_rt.a`

1562341436
nifker
where can I find docs for 'builtin'?

1562341489
Tetralux
`zig builtin` may help you (cmdline)

1562341588
mikdusan
nifker: if you're looking for TypeInfo docs; search for `@typeInfo` in zig main doc

1562341714
nifker
I dont seem to be able to access "builtin.Arch.Arm32.v7m" somehow

1562341737
emekankurumeh[m]
it's a tagged union

1562341836
nifker
so I found this line which works but doesnt  fit my requirement "exe.setTarget(builtin.Arch{ .aarch64 = builtin.Arch.Arm64.v8 }, builtin.Os.freestanding, builtin.Abi.eabihf);"

1562341856
nifker
but this doesnt "exe.setTarget(builtin.Arch{ .aarch64 = builtin.Arch.Arm64.v8 }, builtin.Os.freestanding, builtin.Abi.eabihf);"

1562341873
emekankurumeh[m]
so you have to do builtin.Arch{ .arm = .v7 }

1562341874
nifker
copied wrong stuff

1562341878
emekankurumeh[m]
*v7m

1562341946
emekankurumeh[m]
these come in handy here

1562341947
nifker
It was this line "exe.setTarget(builtin.Arch{ .thumb = builtin.Arch.Arm32.v7m }, builtin.Os.freestanding, builtin.Abi.eabihf);"

1562341970
nifker
but the first I pasted in works

1562342124
nifker
this is the error I get

1562342206
emekankurumeh[m]
it sounds like you are accessing inactive fields

1562342227
emekankurumeh[m]
if you want to change the active fields you have to reassign the whole variable

1562342231
emekankurumeh[m]
or use @unionInit

1562343101
nifker
I dont get it

1562343137
nifker
paste 1 compiles and did it like there but then it doesnt

1562343331
emekankurumeh[m]
are you on master?

1562343357
emekankurumeh[m]
i can't find that line in the paste anywhere.

1562344258
nifker
I took the line from here

1562344295
emekankurumeh[m]
i mean the compiler_rt line

1562344334
nifker
this is from 0.4

1562344348
emekankurumeh[m]
ok

1562344613
emekankurumeh[m]
are you editing compiler_rt or is this an error from the std that comes shipped with 0.4.0

1562344658
nifker
it comes from there

1562346551
ibutra
I want to explore using zig for embedded development on an STM32f3 alongside the HAL which is written in c. This introduces some quiestions:

1562346568
ibutra
1. do build for that target I have to build with.build-lib not build-exe?

1562346614
ibutra
If I build with build-exe the .text reagion (or all reagions for that matter) are empty, not so fo rbuild-lib. Could I just flash the built lib on the controller?

1562346666
ibutra
2. Can I give the zig buildsystem a linker file where I define the memory layout and the layout in .text? This is crucial for stuff like interrupt tables

1562346692
nifker
2. you can

1562346701
nifker


1562346755
andrewrk
nifker, (looking at your earlier conversation) at this point I'd recommend master over 0.4

1562346773
emekankurumeh[m]
1. can't you just specify in your linker script to keep the text section?

1562346821
andrewrk
ibutra, are you aware of `export` and `@export` in that they are necessary to generate symbols in the output object file?

1562346830
ibutra
nifker, thx I will look into that, it looks helpfull, actually the whole project does

1562346909
ibutra
I am not exactly sure what you mean with that. I want to try to build the whole project with the zig compiler including the c files so the elf will be created by zig, not just a library I want to use from c

1562346934
andrewrk
yes you can do that

1562346972
ibutra
But then I don't need export or do I?

1562346982
nifker
I guess I cant build never versions with an older version of zig

1562346985
andrewrk
build-exe is correct - let us figure out why the text region is empty

1562347024
andrewrk
nifker, yeah, the project is still young and moving quickly, so that's one downside you'd have to put up with

1562347097
andrewrk
zig is still beta software; to build a non-trivial project in zig will probably mean participating in the development process of zig to some degree (at least by reporting bugs)

1562347119
ibutra
I started with a minimal example trying to build for thumbv7em-standalone-eabihf which is basically just a volatile pointer (so it doens't get optimized away) and some operations on it (additons mainly)

1562347143
ibutra
I am aware of that and not reluctant to participate :)

1562347270
ibutra
But looking at the disassembly now it seems maybe it was still optimized away, because all that is present in the lib file is  <std.special.panic>

1562347303
ibutra
I guess I will implement something none trivial and report back.

1562347359
andrewrk
ibutra, have a look at

1562347366
andrewrk
try deleting the `export` keyword there

1562347390
andrewrk
you can see that zig no longer generates code for the function. zig has lazy analysis; anything not reachable from an exported function is not generated

1562347452
andrewrk
so make sure that your entry point (is it `_start`?) is exported

1562347472
nifker
compiling for thumbv7m works now 👍

1562347530
fengb
There's been major breaking changes since 0.4.0 release. We have a few more before 0.5.0 lands

1562347544
ibutra
Ah, I see, thank you! (it normally is _start, yes)

1562347740
fengb
andrewrk: I apparently know someone who works on Github Sponsor. I'm gonna see what can be done :P

1562348352
nifker
And how can I look at the std documentation?

1562348390
andrewrk
nifker,

1562348408
andrewrk
fengb, thanks!

1562348469
andrewrk
wow, this game is really fun already:

1562348590
fengb
Oh? Based on the README I had assumed even the C++ version is pretty unfinished

1562348627
nifker
ok can I output as bin directly or do I need external tools?

1562348738
scientes
Status

1562348738
scientes
Doesn't work.

1562348741
scientes
haha

1562348805
andrewrk
there's about 10 min of gameplay in the zig branch

1562348815
fengb
I've been staring at this code for 2 days trying to figure out why it doesn't work: `while (i < BG_TILES) : (i += 0) {`

1562348830
scientes
hehe

1562348831
andrewrk
omg I just saw it

1562348841
andrewrk
I was about to say "really? that looks pretty simple to me"

1562348894
andrewrk
nifker, build-exe will generate an ELF

1562348902
andrewrk
you want something different than that?

1562348966
nifker
I mostly output to Intel HEX before

1562348997
andrewrk
I see. let me open an issue for this, because I have this same problem here:

1562349049
Tetralux
Is .bin == .hex?

1562349068
andrewrk
I think those are different

1562349104
Tetralux
They sound different xD

1562349116
Tetralux
I missed the context for this

1562349129
Tetralux
But I too have wondered about writing code for MCUs.

1562349140
Tetralux
So being able to do that with Zig would be quite nice.

1562349162
Tetralux
The very little research I did told me I needed to upload .hex files to the chip.

1562349175
fengb


1562349181
fengb
Looks like HEX is ASCII

1562349185
Tetralux
But I'm not familiar enough with them to know if you can actually upload non-dothex files.

1562349206
Tetralux
Maybe literally machine instructions but written as their hex sequences in ASCII?

1562349246
nifker
Both can be used to write them to the ROM

1562349308
fengb
Looks like it also has additional metadata: mostly some basic checksums to validate integrity

1562349346
Tetralux
nifker: As an aside, if you have resources you can link me to that explains that I'd appreciate it.

1562349499
andrewrk
nifker,

1562349508
andrewrk
the workaround for now is objcopy

1562349528
nifker
nice

1562349631
andrewrk
if we end up having to implement intel hex format, it could be done in .zig code

1562349756
scientes
yeah build-obj is always there if you want to use zig as a traditional compiler

1562349792
ibutra
where can i find the builtin file in the source tree? I am trying to figure out how to set the correct target in build.zig

1562349802
andrewrk
ibutra, `zig builtin` will print the source

1562349823
andrewrk
it's a generated file that depends on build parameters

1562349859
ibutra
alright, thx!

1562349915
andrewrk
ibutra, these docs might also help:

1562349936
andrewrk
actually this one:

1562350042
ibutra
Thank you very much it is indeed helpful. Maybe I should actually read the whole documentation and not glance over the parts I thought I don't need right now :)

1562350403
fengb
I've got a controversial proposal: "automatic semicolon insertion" after a closing brace

1562350426
very-mediocre
If JavaScript is any indication, that's gonna be flaky

1562350450
fengb
JS has too many permutations. I just want 1

1562350493
fengb
Is it worth writing up?

1562350502
fengb
Man, he rage quit :(

1562350553
very-mediocre
I didn't rage quit :]

1562350565
very-mediocre
my internet is flaky

1562350611
very-mediocre
some edge cases come to mind, like inline array literals e.g. [_]u8{'x', 'y'}, if/while/for blocks

1562350644
fengb
Argh you're right

1562350751
very-mediocre
you can also have { } scoped blocks anywhere if you're so inclined

1562350818
very-mediocre
I wish we didn't have to label a block to break out of it with a value

1562350863
fengb
I wonder how that'd look with a different keyword

1562350915
fengb
I think "break :blk" and "break" are semantically different enough now

1562350948
fengb
Maybe rename the current "break" into "break loop"?

1562350962
fengb
Then a bare "break" can be block based

1562350963
very-mediocre
hm i'm not sure if you can break out of a while/for loop with a value, but if not, then it's not ambiguous

1562350979
very-mediocre
you could just do `const x = { ... break val; };

1562350992
fengb
I think loops can be expressions

1562351017
very-mediocre
maybe I am abnormal but I take forever trying to come up with variable names, especially for a disposable scope

1562351083
fengb
Everyone sucks at naming. Some people don't recognize it :P

1562351124
fengb
`incompatible types: 'u8' and 'void' — const foo = for (x) |a| {`

1562351130
fengb
I guess you can't make an expression

1562351137
andrewrk
the :blk thing is pretty unpopular. unfortunately people are too used to `break` applying to the innermost loop

1562351212
andrewrk
:blk exists because sometimes you need that level of control. and then I simply didn't add any shortcut syntax

1562351251
very-mediocre
yeah, there's no way around the labels for n>1 block depth

1562351257
fengb
It makes sense for nested loops. It's just a little awkward for blocks

1562351274
fengb
I think most languages just work around it by not allowing block breaking

1562351302
very-mediocre
I really like having a block evaluate to a single value though

1562351325
very-mediocre
it's so desirable JS people do inline self-invoking functions

1562351327
fengb
Yeah it's very natural. Especially with switches and stuff

1562351340
ibutra
How do I declare an array of strings? Or any multidimensional array for that matter?

1562351385
fengb
[N][]const u8

1562351406
ibutra
thx

1562351410
andrewrk
that's an array of slices, not a multi-dimensional array

1562351423
fengb
Oh right

1562351518
very-mediocre
if you're lazy you can do a struct that contains an array, for the 2nd dimension

1562351539
very-mediocre
easier to heap-allocate too

1562351539
ibutra
I want to tell the buildsystem all c files it should add and thought the easiest way is to have an array where I put all the paths in and then just iterate over it to addCSourceFile for everyone. In my mind that is an array of strings therefore an array of array

1562351570
very-mediocre
[n]SecondDimensionStruct

1562351576
fengb
Arrays are fixed size. Is your list known at compile time?

1562351637
ibutra
yes

1562351667
ibutra
I just want to save myself from having to type addCSourceFile for every file again :P

1562351910
very-mediocre
not sure if this is supposed to work in zig. I wrote `var x: [5][5]u8 = undefined; x[0][0] = 67;` and it compiled fine

1562351926
very-mediocre
can't test it rn as im in the middle of sthg

1562351971
andrewrk
ibutra,

1562352007
andrewrk
uh that syntax needs to be updated to [_][]const u8 though

1562352023
ibutra
Thank you, the support here is outstanding!

1562352034
ibutra
ok I think I can do that ;)

1562352043
emekankurumeh[m]
you could even just have the file names and use `++` to append the dirname

1562352074
very-mediocre
andrewrk: dumb question: is that different from what fengb wrote earlier? how is that not an array of slices.

1562352098
andrewrk
very-mediocre, it is, but until the use case was explained we thought ibutra wanted a multi-dimensional array

1562352111
very-mediocre
ah, okay

1562352121
andrewrk
this is why I love use cases :)

1562352131
ibutra
yeah,

1562352147
ibutra
that's why i provided it, I figured there is probably an idiomatic way

1562352534
andrewrk
zig fmt fixes whitespace now

1562352563
emekankurumeh[m]
andrewrk: that was fast

1562352595
very-mediocre
great, CRLF is an annoyance on windows

1562352638
andrewrk
emekankurumeh[m], thanks for the original PR, I wanted to just get it done and add a test, and move the switch cases to one line and not mess up the compiler_rt formatting

1562352715
fengb
I'm always confused when the irc name doesn't match the Github name

1562352851
hryx
thanks for knocking out the whitespace thing quickly emekankurumeh[m] and andrewrk. hopefully will result in less noise on IRC/github now

1562353766
fengb
Is this idiomatic for switching a nullable? `const addr = switch (cmp.active() orelse return null) {`

1562353787
fengb
Feels super weird to have orelse return null squeezed in the middle

1562353870
andrewrk
fengb, it looks good to me

1562353884
fengb
Sounds good

1562353911
Tetralux
I have a slightly related question: You can do `if (optional) |value| { ... }` -- can you do `if (!optional) return;` ?

1562353930
andrewrk
Tetralux, const payload = optional orelse return;

1562353981
Tetralux
andrewrk, Yeah - Figured. Just wondered if there was a way to check it without assigning it to something.

1562354000
andrewrk
if (optional == null) return;

1562354016
Tetralux
Oh of course! xD

1562354043
scientes
well it is special in the compiler

1562354048
scientes
null is its own type

1562354144
Tetralux
I was curious about how `if (!optional) return` does not work, but `if (optional == null) return`

1562354204
fengb
Not operator only works on bools

1562354207
very-mediocre1
I guess optionals do not evaluate to booleans

1562354268
hryx
nothing casts to boolean (I think)

1562354284
scientes
not even u1

1562354285
very-mediocre
I guess the if statement unwrap is like the "if the unwrap is successful" boolean

1562354308
andrewrk
if-optional is separate syntax

1562354531
Tetralux
Zig borrowing from C# over here :P

1562354577
andrewrk
ideas are cheap. implementation is hard work

1562354622
very-mediocre
also it's easy not to see massive problems with ideas when you're not knee-deep in implementation-land

1562354630
very-mediocre
I keep doing that.

1562354662
Tetralux
Why'dya think I was asking? ;P

1562354675
Tetralux
I'm curious about why's and why nots in things.

1562355034
Tetralux
Though I am curious what makes that one hard.

1562355051
very-mediocre
re:allocator pattern - at what point should I stop exposing an allocator param and just decide on one?

1562355096
andrewrk
very-mediocre, in your main() function

1562355126
very-mediocre
say I have a component I really really want people to use an ArenaAllocator for

1562355145
andrewrk
yeah then your component should probably make an arena allocator. the self hosted parser does that

1562355156
very-mediocre
okay

1562355200
very-mediocre
specifically I've got a bunch of tree nodes on the heap and deallocating with traversal would be a pain, and the tree itself shouldn't be seen by the library consumer anyway...

1562355249
marler899749
I just noticed that zig seems to be completely statically compiled.  Doesn't even use a dynamc loader as an interpreter

1562355326
marler899749
makes sense for a self-contained downloadable compiler....will zig use dynamic linking when it's a package in a package manager?

1562355359
Tetralux
I'm  not entirely clear what you mean, but I doubt it.

1562355383
andrewrk
marler8997, yes it will follow the system guidelines

1562355421
marler899749
ok makes sense.  I like that it's statically compiled when you just download it.  Then you only need one version

1562355426
Tetralux
Oh - by package manager you mean like apt etc?

1562355429
andrewrk
yes

1562355438
Tetralux
Okay - that makes sense then xD

1562355452
Tetralux
I read it as "_the_ package manager".

1562355453
Tetralux
Oops.

1562355623
fengb
very-mediocre: if it's not exposed, you can pass around the arena internally, but the entry function should take the underlying allocator for creating the arena

1562355701
very-mediocre
noted

1562355714
andrewrk
there's a plan to make it possible to detect whether an allocator is already an arena:

1562355730
andrewrk
(not just type-matching, but in a semantically meaningful way)

1562355809
andrewrk
basically allocator implementations could specify that free() does nothing, and you could query this

1562355818
very-mediocre
right, looks good

1562355935
hryx
andrewrk: purely just curious, what don't you like about the @cast(T, x) syntax? I reread the thread but couldn't see the flaw in it

1562356018
andrewrk
hryx, @cast is actually not bad. I think it would be worth looking at the std lib diff for that

1562356088
hryx
ah you mean like, is it gonna be too verbose or hard to read if it's everywhere?

1562356129
scientes
hryx, what is the issue #?

1562356146
andrewrk
hryx, right

1562356146
hryx


1562356265
scientes
that makes the @shuffle that I introduced woorse. because its best to use ~ to do indexes from the second vector, and you can't do ~ on comptime_int

1562356273
scientes
(which was rejected)

1562356300
fengb
Do it the C way and put parens around the type :P

1562356318
scientes
yeah that would work too

1562356342
scientes
I have the feeling that it would be confusing that @cast can only do implicit casts, which it looks pretty explicit (but that is already a difference from C)

1562356374
fengb
Does this mean we'll have @cast

1562356429
gamester
Don't some languages do this to specify literal types? 1234'i32, 45.5'f32

1562356437
gamester
Maybe they don't, but I find it short and simple

1562356454
fengb
Oh I see (after rereading)

1562356465
hryx
fengb: it's not settled yet. maybe @cast would replace @intCast

1562356483
hryx
if I understand correctly

1562356501
fengb
I like @cast to replace @intCast... but I feel like it could be a bit much for @ptrCast

1562356577
hryx
do they deserve different builtins? if so maybe @scalarCast and @ptrCast or something

1562356749
fengb
I guess technically @ptrCast is non-destructive so that might be a better candidate?

1562356766
fengb
intCast definitely changes the internal representation

1562356773
fengb
(And floatCast)

1562356890
hryx
oh cool, maybe it could be separated by lossy/not. like @cast and @lossyConvert

1562356949
Tetralux
If we had @cast, I'd expect it to be a combination of @intCast, @floatCast, and @ptrCast - so that seems bad considering that we have those already.

1562357012
emekankurumeh[m]
i think `_` in number literals would be a nice thing in zig

1562357024
hryx
Tetralux: you could propose to replace them. I sure they're not sacred or set in stone

1562357040
hryx
emekankurumeh[m]: wasn't that already rejected?

1562357050
emekankurumeh[m]
was it?

1562357087
hryx
oh jeez, I think I'm remembering a golang/go proposal

1562357091
andrewrk
fengb, @intCast asserts; implicit casting integers never asserts

1562357101
Tetralux
I'd like '_' in Zig personally.

1562357108
Tetralux
(for num literals)

1562357117
Tetralux
esp. for large numbers.

1562357123
andrewrk
hryx,

1562357218
hryx
thanks. perhaps my memory sort of still works

1562357237
Tetralux
Yeah - the whole "you could write 100_00_00" argument - I don't buy that; I'd rather be able to write 1_000_000 than not.

1562357256
Tetralux
I buy the "but 100000" means the same thing in regardless of where you are"

1562357259
Tetralux
Don't buy that either.

1562357267
Tetralux
You don't read the underscores.

1562357278
Tetralux
They're there for clarity when reading/writing the number.

1562357287
Tetralux
It has the same number of digits regardless of what you do

1562357296
Tetralux
Just as when writing a number with a pen.

1562357334
Tetralux
(100_00_00 == 1,000,000)

1562357360
Tetralux
You may have written the underscores that way because the last four digits in the number you are writing means something special in your code.

1562357395
Tetralux
I'm definitely not writing (v1 << 24) | (v2 << 16) | (v3 << 8) | (v4 << 0) - that's for sure.

1562357435
Tetralux
I don't buy the "but 100000" means... *

1562357612
Tetralux
Interestingly--though I don't know about you--but to me, "1000000" is harder to read than "100_00_00"

1562357630
Tetralux
Not by much mind.

1562357651
Tetralux
Whereas 1_000_000 is positively amazing by comparison.

1562357710
emekankurumeh[m]
we could allow those and have zig fmt enforce one formatting method?

1562357747
Tetralux
That would destroy any meaning in where you put the underscores though.

1562357864
Tetralux
Maybe that doesn't matter though /shrug

1562357882
very-mediocre
what's your use case for not grouping by 3 digits

1562357903
very-mediocre
i can see 2 nibbles for hex

1562357952
Tetralux
Isn't the burden a positive one? Why would you limit it?

1562357964
very-mediocre
only thing i can think of for decimal is using an int as a bit array

1562357979
very-mediocre
er

1562358012
Tetralux
Maybe you only care about seperating millions.

1562358016
very-mediocre
I dunno, if there are not conceivable use cases then zig fmt would make things easier

1562358020
Tetralux
(..For that particular literal.)

1562358033
Tetralux
Maybe only ten thousands.

1562358044
Tetralux
Indeed

1562358045
Tetralux
For hex

1562358059
Tetralux
0x11_22_33_44__55_66_77_88

1562358067
Tetralux
(Note the double '_' in the middle)

1562358098
ltr-
is going to be posible to do this in the future? :  for(buf) functionDeclaredElsewere;  ??

1562358116
fengb
I think since we're bickering about what is better, having it be simple is the best approach :P

1562358134
Tetralux
Meaning `for(buf) |x| functionDeclaredElsewhere(x)` ?

1562358169
ltr-
oh you can omit the {

1562358172
Tetralux
fengb, I'd argue "simple" is just "underscores are allowed in indents"

1562358188
fengb
Simple to compiler/parser

1562358190
Tetralux
ltr-, I believe so.

1562358201
Tetralux
fengb, Sounds simple to me.

1562358201
fengb
And language since there's less to define

1562358252
ltr-
Tetralux: yes you can omit them

1562358280
Tetralux
I've even written a parser which parsed underscores in idents; just skip any underscores, done.

1562358297
Tetralux
in numbers*

1562358309
fengb
I'm not saying it's complicated... but it takes a bit more work to support and we're back to bickering about what's better

1562358330
very-mediocre
i don't know that any of this stuff is bickering

1562358341
Tetralux
I mean... "A bit more work" is a bit of a stretch since you're checking if the char is a digit anyway xD

1562358349
ntgg
underscores in numbers makes it much more readable

1562358358
Tetralux
You literally just check for one other char while you're at it.

1562358373
Tetralux
I'm struggling to think of anything simplier XD

1562358377
fengb
n + 1 > n

1562358382
Tetralux
simpler*

1562358384
fengb
nvm

1562358389
fengb
Forget I said anything

1562358397
Tetralux
hahaha

1562358411
Tetralux
I also don't use `zig fmt` so... /shrug.

1562358444
very-mediocre
Really? I adore beautifiers, can type abominable code and have it get fixed automatically

1562358446
hryx
Tetralux: if this is important to you, I suggest formatting a chunk of stdlib the way you want and link to it so that people can visualize the difference

1562358462
hryx
keeping in mind that the proposal has already been rejected in the past

1562358497
fengb
I can't

1562358512
Tetralux
fengb, I'm choosing to ignore that example. ;)

1562358525
Tetralux
fengb, Though I don't really use Vim for editing that much so :p

1562358555
Tetralux
very-mediocre, I don't use them because I usually write code in the way I want for a reason - I don't need a 'beautifier' to undo it all.

1562358573
Tetralux
I'm not sure a uniform way to format code even matters at all.

1562358576
Tetralux


1562358588
Tetralux
For being able to write sloppily and not care because it'll fmt it.

1562358597
Tetralux
But... /shrug.

1562358616
very-mediocre
I find it relieving to just write awkward stuff really really fast

1562358616
Tetralux
In my experience, it's a little hard to write code

1562358627
fengb
Tetralux: check out the Go ecosystem

1562358634
fengb
And try doing autoformatting for a week

1562358637
Tetralux
fengb, That's how I found I hate them xD

1562358646
fengb
I hated it my first 2 days

1562358655
fengb
Then I started to ignore it

1562358658
fengb
And then I loved it

1562358665
very-mediocre
Tetralux: do you hit the space bar 4n times for indentation?

1562358677
fengb
So much of my life has been wasted by bickering about tabs, trailing commas, etc.

1562358708
Tetralux
Nope - Tab once = 4 spaces.

1562358719
Tetralux
If I did have to do 4 spaces (like I have to in Vim) , I'd either not be a programmer, use hard tabs, or my idents would be 1 space.

1562358725
fengb
I still don't like the Go format style, but it's so much better than everyone having their own style

1562358764
Tetralux
Like - the one place I'd find the beautifier useful is when you want to put fn args onto their own lines.

1562358782
Tetralux
But I can do that already by going to the ',' and multi-cursoring those things.

1562358795
fengb
That's not the pont

1562358804
Tetralux
No it isn't xD

1562358806
fengb
It's not for you reading your own code

1562358836
Tetralux
Give me an example of badly written Zig code that you couldn't read.

1562358852
fengb
It's not even about badly written

1562358862
Tetralux
"badly written" = "badly formatted"

1562358869
fengb
Have you ever hopped on a project where someone yells at you "hey turn off tabs"

1562358875
fengb
Or "braces go on a different line"

1562358894
fengb
Or "add a space between opening function calls"

1562358944
fengb
Or a dozen different idiosyncracies that are slightly off from what you're used to

1562358945
Tetralux
I'd argue that if that is important to a project, that they should have a formatter that runs on commits.

1562358956
fengb
Exactly, that's why zig fmt exists

1562358974
fengb
But instead of project based, it's language based

1562359048
very-mediocre
imho zig fmt nails the coding style, and i'm very happy that it handles things smartly, e.g. preserves 1-liners, or breaks up an array declaration into multiple lines only if you have a comma after the last element...

1562359082
Tetralux
If your style is basically what it does anyway, then I can see why you might like it.

1562359101
Tetralux
That thing about "leave a comma after the last element" -- that's useful.

1562359131
fengb
I don't agree with everything zig fmt does, but I agree enough that I'd rather not argue about it

1562359134
Tetralux
That's the example I had in my mind when I said about multi-cursoring things.

1562359149
fengb
(Although I thing zig fmt is better than Go :P)

1562359166
Tetralux
Personally, I'd rather just not have the extra work of having to deal with potential bugs in something I don't need.

1562359201
Tetralux
Simpler my workflow is the better.

1562359209
very-mediocre
well it uses the AST as a source of truth, not much room for "serious" bugs

1562359215
fengb
It's the same parser (or it will be in stage2)

1562359233
Tetralux
> It's the same parser

1562359239
Tetralux
The reading part, I assume you mean.

1562359273
Tetralux
Well - maybe not - because of `zig builtin`.

1562359282
Tetralux
Or does that use `zig fmt` to render it?

1562359287
Tetralux
I imagine it does actually.

1562359300
emekankurumeh[m]
i'm starting to have a growing hatred of windows

1562359305
Tetralux
hehe

1562359309
Tetralux
Sounds about right.

1562359358
Tetralux
Personally, I suspect I'd prefer it if OSes were little more than hypervisors.

1562359431
Tetralux
And programs were little more than just pure x64 code that the hv brokered the actual execution of.

1562359440
Tetralux
more/less.

1562359470
Tetralux
Like - I dunno - but the idea seems worthy of exploration at least.

1562363396
fengb
andrewrk: the compiler is crashing

1562366576
andrewrk
fengb, no - would you mind filing an issue?

1562367147
fengb
Sure

1562367378
fengb
I feel like all I ever do is complain about bugs :/

1562370063
Tetralux
That is a good thing xD

