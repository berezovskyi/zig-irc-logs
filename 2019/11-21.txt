1574299410
mgxm
wilsonk: great, thank you for sharing

1574299417
mgxm
i din't know about tabnine

1574299441
mgxm
neat

1574299979
scientes
simd PR rebased again. When we get further along I will also redo the @shuffle and @gather and @scatter syntax stuff

1574300155
andrewrk
scientes, nice - can you give me the first commit from that PR as a separate one?

1574300170
scientes
oh yes

1574300188
[rg]
what release should I use on windows?

1574300262
scientes
that type of review would be easier with the linux workflow...

1574300357
[rg]
ok, what release is preferred for linux?

1574300470
scientes
[rg], everybody is using master

1574300479
scientes
git

1574300506
[rg]
ok, that makes it seem like zig is really stable

1574300510
[rg]
cool

1574300516
scientes
uggh, more the opposite

1574300525
[rg]
oh, what? lol

1574300531
wilsonk
mgxm: no problems

1574300546
scientes
we use master because things are still changing fast

1574300572
scientes
although the CI must past for every commit so if you write a test for it it will work

1574300693
andrewrk
[rg], zig is very unstable right now. give 0.5.0 a shot, and if you run into bugs or missing features then you can potentially tip your toes into master branch. but there is not planned to be a 5.0.1 release; next planned release is 0.6.0 in April

1574300757
[rg]
ok, thanks

1574300765
[rg]
I'll see if I can have some fun :)

1574301059
[rg]
ah very awesome to see a microbit projet

1574301444
andrewrk
but also know that there are already major breaking changes to the language between 0.5.0 and master. with more on the way

1574301508
andrewrk
I will make this assertion about the future: once we are shipping the self-hosted compiler (rather than stage1), the zig project will start having bug fix releases in addition to minor releases, along the path to 1.0.0

1574301706
[rg]
andrewrk, thanks

1574308258
daurnimator
scientes: I think you could also submit 174a6d4a587e1baacd1bb659f872cd928c6fa04b sooner rather than later

1574308267
daurnimator
scientes: s/loose/lose/

1574308280
daurnimator
(in 25c5ad1be061fa36b7fdf6ee6deac4e1c9b5d16d)

1574308564
daurnimator
andrewrk: any more merges expected today? :)

1574308627
andrewrk
daurnimator, not today. how did you like my counter proposal to #3731

1574308864
daurnimator
andrewrk: 2 thoughts: 1. why is sentinel different enough from align() to be inside the [] vs outside 2. `:` as a separator could be confusing as its also used for bit indexing in various places

1574309082
andrewrk
(1) the [] has to do with the length of the pointer; align does not

1574309133
andrewrk
for (2) I don't think I'm interested in any feedback that isn't a counter proposal

1574309259
daurnimator
1. fair, makes sense. 2. I guess my counter proposal is that with that confusing-ness, I'm still happy with it being outside the [] with a keyword.

1574309471
andrewrk
I see

1574309541
andrewrk
either way I think I agree with you on making it more general rather than using the word `null`

1574309723
daurnimator
`[5 sentinel(0)]u8` ?

1574309814
andrewrk
too noisy, and `sentinel` is likely to clobber an identifier. we're not trying to punish people for using null terminated strings

1574309837
andrewrk
`extern fn printf(format: [*:0]const u8, ...) c_int`

1574309853
daurnimator
why

1574309861
daurnimator
don't we prefer slices with tracked length?

1574309891
andrewrk
generally, but plenty of ABIs use null termination. And tracked length is not strictly better. It has higher memory requirements, for example

1574309935
andrewrk
even if you do not interact in any way with C or libc, you need null termination for interacting with, for example, the linux syscall ABI

1574310016
daurnimator
sure; but not e.g. for windows nt.

1574310021
companion_cube
ugh, saving 1 word minus one byte

1574310044
companion_cube
and paying O(n) length, unsafe strings, and bugs aplenty :/

1574310086
daurnimator
yeah one thing I still don't like about the current null PR is that the length is only a *max*. there could be another null byte in the middle...

1574310166
andrewrk
companion_cube, this is a type feature that makes them safe

1574310214
andrewrk
if you make null pointers hard to annotate, it's not going to make people avoid null pointers; it's going to make them avoid annotating them

1574310265
companion_cube
I'm just ranting about null-terminated strings :)

1574318964
adamkowalski
Whats the recommend way to get a string from an int?

1574319031
adamkowalski
const key = try std.fmt.allocPrint(allocator, "{}", i);

1574319037
adamkowalski
?

1574319584
Pistahh
adamkowalski: or std.fmt.bufPrint - it takes the buffer to print into so no need for allocator

1574319632
adamkowalski
Well who allocates the buffer?

1574319650
adamkowalski
How do you know how big to make it?

1574319697
adamkowalski
I guess you know the max number of digits that an int can be at compile time

1574319705
adamkowalski
Then you can allocate the buffer once and reuse it?

1574320696
Pistahh
yes this only works if you have some idea about the max final size of the string generated. You can just allocate a buffer as a local variable, so it goes into the stack

1574322792
daurnimator
yeah if you e.g. have a u32, then you know that it can't be longer than 10 chars

1574327655
mq32
daurnimator, your mixin style interfaces only work "per instance", right? so i cannot create an array of different object types with the same interface?

1574329433
mq32
oh, funny bug:

1574329437
mq32
zig fmt fails when a tab is in a comment :D

1574333101
scientes
mq32, that might be desired

1574333125
scientes
actually, that is according to spec mq32

1574333750
mq32
scientes: huh? why that?

1574333766
mq32
it fixes tabs when in "blank space", but errors when in "comment space"?

1574333793
scientes
oh zig fmt

1574333798
scientes
i thought you meant the language spec

1574333800
scientes
my bad

1574333901
mq32
no, i'm talking about fmt :D

1574338061
jacereda
hi

1574338366
jacereda
how would you write a 'ctry' function that turns ?T into !T ? To be used like "const foo = ctry(c.CreateFoo()); errdefer c.DeleteFoo;"

1574338496
mq32
foo() orelse error.OptionalWasNull

1574338906
jacereda
mq32: I'm not sure I follow... Is this the idiomatic way?  "const foo = c.CreateFoo() orelse error.OptionalWasNull; errdefer c.DeleteFoo();"

1574340201
mq32
i would code it like that

1574340208
mq32
it doesn't require any special features and

1574357433
muffindrake
I see that there's a choice between blocking and event-based mode in io.zig. How would I set it to use event-based processing in my code?

1574360048
FireFox317
muffindrake: in your top level of your root file put: `pub const io_mode = .evented;`

1574360241
muffindrake
Aah, so that's what that comment meant. Well then, thank you.

1574362681
marler8997
andrew why create an assembler?  Does LLVM not have good ones?

1574362839
mq32
marler8997: to get rid of LLVM as a dependency in the long term

1574371371
ky0ko
i'm toying around with the idea of doing some baremetal code for old MIPS machines, is there a way i can tell the zig build system that i want to output ECOFF format binaries?

1574371389
ky0ko
the bootloader for the platform i have expects that format

1574371407
fengb


1574371426
andrewrk
ky0ko, is ECOFF different than COFF?

1574371493
ky0ko
andrewrk, yes. it's a slightly modified variant of COFF. I'm quite positive LLVM supports outputting ECOFF, as well as XCOFF (another COFF variant of interest to me)

1574371626
mq32
andrewrk: would it be possible to specify any output file type for any build target?

1574371638
ky0ko
specifically ECOFF was used by MIPS operating systems and firmware from the 90s, and XCOFF was the standard for OpenFirmware machines (sparc and powerpc)

1574371640
mq32
i know it would not make sense, but emit ELF for windows builds and PE for linux builds

1574371739
andrewrk
issue #3182 is open for this

1574371762
andrewrk
if it's something that makes sense to do, then yes it's in scope

1574371809
mq32
okay, i'll write some stuff into that issue :)

1574371959
mq32
freestanding does only support ELF right now, right?

1574372096
andrewrk
correct

1574372152
mq32
added

1574373607
terinjokes
just this morning I was thinking about writing an assembler for the Sharp LR35902, and then I opened GitHub

1574374064
gruebite
zig does not have any lambda replacement yeah?

1574374076
mq32
lambda replacement?

1574374084
gruebite
erm, lambda equivalent

1574374208
gruebite
i can kinda see something working at comptime

1574374398
adamkowalski
no lambdas yet I believe, but you can pass a function pointer

1574374409
adamkowalski
whatever you would have closed over, make them additional arguments

1574374442
gruebite
yeah, C style

1574374456
adamkowalski
if it's conveniant you can build an "environment" struct yourself which has the closed over variables and pass that in as the first argument

1574376874
shakesoda
gruebite: there are some issues on the tracker for those

1574376952
shakesoda
idk what kind of priority they have but i would really love them, and otherwise treating functions as just values

1574377170
adamkowalski
andrewrk: hey are you there?

1574377455
daurnimator
mq32: yes that's correct.

1574377486
mq32
daurnimator, answer to what question? :D

1574377503
daurnimator
mq32: though there's sort of a "trick" I have in mind for that: you can create a union of the two types you are interested in, provide the base function, and then mixin to the union

1574377514
daurnimator
mq32:  20:14:12 <mq32>daurnimator, your mixin style interfaces only work "per instance", right? so i cannot create an array of different object types with the same interface?

1574377574
mq32
ah

1574377583
mq32
hmm

1574377586
mq32
i'll figure it out

1574377595
mq32
i need a generic block device interface

1574377605
mq32
brb/driving home

1574377630
fengb
shakesoda: (anonymous) function expressions is scheduled for this release cycle

1574377672
fengb
Closures need a different solution since it probably needs to involve memory allocation

1574377774
daurnimator
mq32: `union(enum) { Foo: Foo, Bar: Bar, pub const ReadError = Foo.ReadError || Bar.ReadError; pub fn read(self: @This(), dst: []const u8) ReadError!usize { return switch(self) { else => |u| u.read(dst); } }`

1574377809
daurnimator
uh I missed the mixin: `union(enum) { Foo: Foo, Bar: Bar, pub const ReadError = Foo.ReadError || Bar.ReadError; pub fn read(self: @This(), dst: []const u8) ReadError!usize { return switch(self) { else => |u| u.read(dst); } usingnamespace io.InStream(@This()); }`

1574378077
daurnimator
gruebite: you can, but it's awkward right now: `const myfunc = struct { pub fn foo() void {} }.foo;` <-- and you can e.g. return this from a compile-time function

1574378629
mq32
daurnimator, yeah, this

1574378650
mq32
as i don't really have "functions" implemented on that interface except for read/write

1574378677
daurnimator
mq32: yeah that's all you're meant to have implemented....

1574378699
mq32
yes, and that's all functions i'm gonna need for that interface :D

1574378706
daurnimator
mq32: my idea for the InStream mixin is that you just implement ReadError and read(); and the rest gets filled out for you.

1574378736
mq32
yeah, that will work for instream

1574378741
mq32
i have a slightly different case

1574378751
mq32
i have functions working with generic block devices

1574378763
mq32
and i need to store them in a uniform list

1574378769
mq32
so yeah, maybe the union way

1574378798
mq32
dunno yet, i haven't even decided on how the UI for that feature should look like, so i cannot reason much about implementation for that ^^

1574378853
mq32
the plan right now is to have something like `ATA → Partition Table → ZGSPartition → Image` and Image is the final block device i will use

1574378854
daurnimator
mq32: you can also probably do this: const embedme = struct { read: fn(self: *This(), dst: []u8) anyerror!usize, usingnamespace io.InStream(@This()); }; const block = { stream: embedme, pub fn init() @This() { return .{ .embedme = .{ read = readFn } } } fn readFn(stream: @This(), dst: []u8) usize { const self = @fieldParentPtr(stream, @This(), "stream"); // implementation here; } }

1574378905
daurnimator
which is pretty much getting back the old/current interface style from the mixin one.

1574379174
mq32
yeah, but the mixin doesn't fit my use casse anyways, was just curious

1574379188
mq32
i need the "old style" interfaces or tagged unions

1574379200
mq32
and the last ones with pointers, not object instances

1574379207
daurnimator
yep

1574379224
daurnimator
hopefully those lines show how you can derive them from the mixin style though :)

1574379246
daurnimator
going the other direction is much more difficult and comes with runtime overheads

1574379301
mq32
hmm

1574379319
mq32
i think i'm just going to implement some kind of list for the UI

1574379332
mq32
"those are your available memory slots to load/save"

1574379340
mq32
like in older games where you have slot 1,2,3

1574379352
mq32
but this time with block devices in the backend

1574379890
marler8997
zig is trying to get rid of llvm as a dependency?

1574379919
mq32
marler8997: "llvm is an implementation detail"

1574379936
daurnimator
marler8997: long term yes; short term no

1574379980
daurnimator
marler8997: but whenever there's something we want that LLVM doesn't have: rather than adding it upstream to LLVM, we are quite happy to implement it ourselves to get closer to the long term goal.

1574380149
marler8997
llvm has hundreds of thousands of hours of development time and a large ongoing support effort.  it's developed to be shared amongst any language. We'd have to make a much better version to justify losing all that shared effort I think

1574380181
marler8997
would zig's version also be meant as a shared framework like LLVM, or just zig-specific?

1574380236
fengb
Zig was always intended to not depend on anything, including LLVM. The reference implementation might be using it as an implementation detail, but the core spec should not require it

1574380255
fengb
And there's a lot of naysayers about LLVM too

1574380291
mq32
it's good to have a spec that does not contain any dependencies

1574380303
mq32
code generation e.g. should be always an implementation detail

1574380336
mq32
compared to "behaviour specification" which just describes what memory transfers and operations happen when and what side effects those must/must not/may have

1574380360
fengb
We're tied in the short term for a good reason, but eventually we'll have at least a GCC backend. Plus all the embedded people hopefully want to write Zig compilers

1574380379
daurnimator
zig can't be truly "self-hosted" with an LLVM dependency.

1574380382
daurnimator
the intention is not to remove support for LLVM: but to turn it down from a requirement to an "optional"

1574380403
marler8997
actually zig could sort of be self-hosted if it added support to compile c++ code as well :)

1574380433
mq32
that's a very weak definition of self hosted

1574380443
mq32
also c++ code cannot implement a lot of features that zig has

1574380450
mq32
@addWithOverflow is one example

1574380466
fengb
__builtin_add_overflow 🙃

1574380480
mq32
ah yes, but that's "c++ for gcc"

1574380483
mq32
:D

1574380511
marler8997
__builtin_add_overflow, that's funny, I just patched a couple tools that were using that

1574380521
fengb
Well it's also for clang so just it's the defacto standard now

1574380543
mq32
heh

1574380555
mq32
i would like to see some more specific features in zig later

1574380567
mq32
but those are very post1.0 features :D

1574380585
mq32
but something like a scriptable linker would be neat

1574380643
mq32
so you could generate custom output formats or implement some more specific rules in the linker

1574380655
fengb
I'm really happy with LLVM too. Wasm was the main reason I started using zig :D

1574380680
mq32
some embedded processors require checksums placed in certain positions and that's always annoying to implement. simplest way is to patch ELF files, but that's also really dirty

1574380684
marler8997
in any case, I hope LLVM remains as a backend option

1574380709
mq32
i don't say we should drop LLVM as a backend, but make it optional

1574380760
protty
hey, would it be reasonable to assume that `std.time.Timer.start()` cannot fail?

1574380779
andrewrk
protty, nope:

