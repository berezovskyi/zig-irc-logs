1556762551
tgschultz
andrewrk: are we not calling @bswap @byteSwap for some particular reason?

1556763491
scientes
i agree, byseswap is not much longer and it is clearer

1556766261
andrewrk
approved

1556766284
andrewrk
I was following the convention established by

1556766506
tgschultz
I wrote a packed array implementation. With a few changes it can save a byte and also be used with slices.

1556766605
tgschultz
tomorrow I'll check the efficiency on godbolt and if it isn't surprisingly inefficient I'd be willing to put a PR together to add it to std if desired.

1556767585
daurnimator
bswap is a very common shortening. I have no problem with byteSwap though. Also makes it less ambiguous in case we want @bitSwap to change bit endianess

1556768632
andrewrk
I think it should be `bswap` or `byteSwap` but not something in between

1556769468
tyler569
you never know, might want aswap and cswap someday

1556771899
andrewrk
I'm going to launch a new ziglang.org homepage tomorrow morning

1556771915
andrewrk
good night

1556772398
emekankurumeh[m]
tgschultz: is it a sparse bitvector?

1556772426
hryx
new homepage hype

1556772829
emekankurumeh[m]
is it still going to be no js?

1556772859
presiden
nice

1556774723
torque
rather than no js we've reversed course entirely and the website will be completely rendered by wasm compiled from zig

1556774935
emekankurumeh[m]
really?

1556780961
tiehuis
emekankurumeh[m]: i'm reasonably sure that it'll remain no js and plain html

1556780979
tiehuis
i think its more to reshuffle some content and make some examples more at the forefront and documentation accessibly etc

1556780994
tiehuis
however, i haven't talked with andrewrk or seen the changes so this is my assumption

1556780999
tiehuis
have to wait and see!

1556781016
daurnimator
tiehuis: huh. I didn't realise you had permissions to the repo

1556787893
hryx
I am happy to finally open #2405 (although it is still a draft and not all the tests pass yet) -- feedback welcome

1556796128
tgschultz
emekankurumeh[m] it is packed, there are no gaps or extraneous information in the contiguous memory of the array.

1556796276
tgschultz
if you have PackedIntArray(i3, 300), it will occupy 113 bytes

1556806272
andrewrk
it's live:

1556807018
shritesh
woohoo

1556807089
redj
nice

1556808558
andrewrk
hmm I don't think this is going to land zig in social media today. what a shame

1556814008
tgschultz
andrewrk: encountered using wget to download zig: ziglang.org appears to have an ipv6 entry but it doesn't respond?

1556815219
andrewrk
hmm let me have a look at something

1556815269
andrewrk
tgschultz, according to cloudflare ipv6 compatibility is on

1556815588
tgschultz
andrewrk:

1556815619
andrewrk
tgschultz, weird, it works for me

1556815672
tgschultz
ok, must be a problem on my end then.

1556815832
strmpnk
I wouldn’t be surprised if an ISP is to blame. I sometimes disable IPv6 on some networks so it doesn’t even try the Happy Eyeballs “algorithm”.

1556816118
tgschultz
isp supports v6, confirmed by my firewall to be working, it's just trafic from the lan not being routed for some reason.

1556816756
scientes
ipv6 works fine

1556816774
scientes
shawn@shawn-ThinkPad-L420:~/git/glibc$ ping6 ziglang.org

1556816774
scientes
PING ziglang.org(2606:4700:20::6819:2c6c (2606:4700:20::6819:2c6c)) 56 data bytes

1556816775
scientes
64 bytes from 2606:4700:20::6819:2c6c (2606:4700:20::6819:2c6c): icmp_seq=1 ttl=58 time=201 ms

1556816866
tgschultz
yeah, it's a problem on my end. I'm trying to work out why, and the answer is becoming "there are reasons IPv6 never took off"

1556817628
donpdonp
heh

1556817879
tgschultz
here's a thing: if I change my struct from `struct` to `packed struct`, suddenly a member function throws "cannot evaluate constant expression".

1556817956
tgschultz
var value = @ptrCast(*const align(1) MinIo, &self.bytes[start_byte]).*;

1556817985
tgschultz
error points to `start_byte`, which is calculated earlier and at runtime.

1556820552
scientes
tgschultz, it's more that when ipv6 is broken there isn't a high priority to fix it

1556822354
andrewrk
alright let me do another round of Pull Request review between now and the stream

1556822472
TheLemonMan
andrewrk, quick question about code organization, what do you think is the best layout for implementing different syscalls for different architectures in the linux layer?

1556822505
TheLemonMan
because I've got a i386 and a 32-bit ARM ports that are waiting to be upstreamed

1556822546
andrewrk
TheLemonMan, there's a pattern for that already, no? std/os/linux/arm64.zig std/os/linux/x86_64.zig

1556822568
andrewrk
I'm having a look at PRs now

1556822638
TheLemonMan
roger that, I'll split the syscalls requiring different handling into their own files

1556822681
TheLemonMan
#2374 is also related to this since I'm planning on using the 64bit file io on 32bit platforms

1556822687
andrewrk
got it

1556823038
tgschultz
andrewrk:

1556823053
tgschultz
am I blind, or is this a bug?

1556823201
tgschultz
because this makes no sense to me

1556823215
andrewrk
tgschultz, definitely seems like a bug with packed structs. I don't see why the array index would need to be compile time known

1556823232
tgschultz
ok good, I'm not crazy. i'll make an issue.

1556823235
andrewrk
thanks

1556823254
tgschultz
other weird thing? this goes away if the array is smaller.

1556823260
andrewrk
that is very weird

1556823274
andrewrk
I did some big foundational changes to structs and especially packed structs just before 0.4.0 but there's another thing that needs to happen

1556823276
tgschultz
possibly has to do with alignment?

1556823278
andrewrk
yes

1556823310
andrewrk
I'm guessing this will be fixed with the implementation of

1556823350
andrewrk
I let this slip by in code review, and I think it was a mistake

1556823356
andrewrk
but it will be fixed with 2174

1556823401
andrewrk
anyway, one thing at a time. the bug report will be very welcome so that we can verify the problem is fixed

1556825043
andrewrk
looks like we get our social media day today after all

1556825132
donpdonp
♥.zig

1556825889
halosghost
totally unrelated, but I don't know why ♥ (the Card Heart Suit) is more prevalently used than ❤ (heart)

1556825892
halosghost
:)

1556826232
tgschultz
guessing: the card heart is part of the extended ascii set?

1556826561
halosghost
tgschultz: U+2665

1556826572
halosghost
tgschultz: ❤ (heart) is U+2764

1556826615
halosghost
so, not quite

1556826619
halosghost
:)

1556826653
companion_cube
what's the social media day?

1556826666
halosghost
both are in the BMP though

1556826930
andrewrk
companion_cube, check hacker news, /r/programming and lobste.rs

1556826945
tgschultz
apparently it wasn't ascii I was thinking of anyway, but codepage 437. According to wikipedia, U+2665 == codepage 437 0x03

1556827009
tgschultz
which means, it is as simple as alt+numpad 3 to enter on windows

1556827012
companion_cube
hu, I guess these count as social media, ok

1556827093
andrewrk
how about "tech news day"?

1556827098
companion_cube
✔

1556827276
halosghost
tgschultz: need to be able to enter hearts fast

1556827296
halosghost
tgschultz: personally, Compose means ❤ is just `compose < 3`

1556827300
halosghost
so, pretty quick here too :)

1556827630
strmpnk
I've gotten used to the new win-. shortcut for characters now. Finally something on par with macOS (though I still miss my custom text replacement rules that emulate latex syntax for typing mathy stuff).

1556827666
andrewrk
tgschultz, I love your comment

1556828126
donpdonp
nng.h: typedef struct nng_aio  nng_aio; translates to pub const struct_nng_aio = @OpaqueType();

1556828146
donpdonp
the .h doesnt seem to actually define nng_aio. what does that mean in C-land?

1556828164
andrewrk
donpdonp, a fwd decl. e.g. `struct nng_aio;`

1556828182
andrewrk
it might mean the struct had something in it zig didn't know how to translate

1556828257
donpdonp
does a forward declaration mean its declared elsewhere? i cant find a definiton anywhere in the .h folder :(

1556828358
andrewrk
donpdonp, that's sort of the point - by not providing the definition, it keeps the size of the struct out of the ABI, so future library updates are compatible with no recompilation needed

1556828378
donpdonp
interesting o^O

1556828380
andrewrk
you probably have to call some function which allocates memory and returns a pointer to the opaque type

1556828399
donpdonp
ah yes im trying to call nng_aio_alloc

1556828481
donpdonp
more specifically, nng_aio_alloc(nng_aio **aiop, ...) i see now its a ptr to memory that has been allocated by the functioncall.

1556828487
donpdonp
tricky!

1556828615
donpdonp
just when i thought my level of knowledge of c and zig points was sufficient, they throw a curve-ball :)

1556828796
donpdonp
is there a zig-ism to fill in a param to c.somefunc(value, <?*c_void> ) im currently having to c.somefunc(value, @intToPtr(?*c_void, 0))

1556828833
andrewrk
`null` should work

1556828861
donpdonp
heh. it does. thx!

1556829496
donpdonp
const myAio: [*c](?*c.nng_aio) = undefined; _ = c.nng_aio_alloc(myAio); c.nng_recv_aio(socket, myAio.*); => attempt to dereference undefined value

1556829521
donpdonp
is there a way to tell zig that its defined? i realize aio_alloc is defining/allocation outside of zig's view/control.

1556829568
andrewrk
donpdonp, look closely! the compiler found a bug

1556829598
andrewrk
also, never type these keys into your keyboard: `[*c]`

1556829630
donpdonp
i type that fairly frequently. #horrors.

1556829640
andrewrk
just use * or [*]

1556829693
donpdonp
oh maybe myAio shouldnt be const

1556829705
andrewrk
I'm going to consider adding extra hoops you have to jump through to use the [*c] type in a given file

1556829793
donpdonp
var myAio looks to be the winner.

1556829898
donpdonp
here's an example of using [*c]. c.wants_null(@intToPtr([*c]c.struct_nng_listener_s, 0)). that works, but c.wants_null(void) says expected type '[*c].cimport:8:11.struct_nng_listener_s', found '(null)'

1556829927
donpdonp
i meant to say c.wants_null(null) (not void)

1556830032
andrewrk
donpdonp, I think this is

1556830039
andrewrk
this is a pretty high priority issue

1556830149
Sahnvour
the final social media achievement would be making it to

1556830156
donpdonp
var myAio is not the fix (from earlier example).

1556830171
tgschultz
unfortunately there are cases right now where you need to type [*c] in the form of a pointer cast.

1556830173
donpdonp
var myAio ends up being ?*.cimport:8:11.struct_nng_aio@aaaaaaaaaaaaaaaa, and the call to aio_alloc segfaults.

1556830234
donpdonp
andrewrk: can you give me a clue as to the error that the compiler found, that you mentioned earlier?

1556830266
andrewrk
aaaaaaaaaaa is the sound memory makes when it is undefined

1556830270
tgschultz
donpdonp: you dereferenced a pointer to uninitialized memory

1556830391
tgschultz
reading that again though, it looks like nng_aio_alloc was expected to initialize it?

1556830393
donpdonp
lol. aaaaaaaaaaa.

1556830429
donpdonp
i think i see now

1556830464
donpdonp
yup seems to be working. wohoo!

1556830533
donpdonp
var myAio: ?*c.nng_aio = undefined; c.nng_aio_alloc(&myAio);

1556830540
donpdonp
easy peasy.

1556830686
donpdonp
the call to actually use the value is recv_aio(socket, myAio); since zig doesnt know what c.aio_alloc() does, shouldnt that be a 'using undefined value' error?

1556830705
andrewrk
I'm about to start the live stream on

1556830743
donpdonp
oh when myAio is used as a value, its the ptr not what it points to. I think thats the answer

1556838168
shritesh
andrewrk, thanks for the s/o on HN :)

1556838178
andrewrk
np, thanks for all the great work!

1556839078
shritesh
...and the stream to. Missed it live. Watching it right now.

1556839109
shritesh
*too

1556839745
adtac
I'm trying to run a std library test and it appears --color off does not actually disable colours in test output error messages (not compilation errors)

1556839751
adtac
can anyone reproduce this?

1556839753
adtac
(master)

1556839951
andrewrk
adtac, I'm guessing you're seeing a stack trace?

1556840021
andrewrk
this is calling std.debug.dumpCurrentStackTrace, which does writeCurrentStackTrace(stderr, debug_info, wantTtyColor(), start_addr)

1556840028
adtac
yes

1556840058
andrewrk
looks like there isn't a way to force it off, but there is a way to force it on. the default is to detect if you're running in a terminal

1556840085
adtac
right, I guess I'll add that first :D

1556840119
adtac
--color off should permeate to stack traces when running zig test, correct?

1556840172
andrewrk
adtac, this is more of a general problem - e.g. what about if you just do `zig run foo.zig`

1556840332
adtac
same, --color off has no effect

1556840350
andrewrk
right, and the exe owns the args, see what I mean?

1556840379
adtac
ah

1556840430
adtac
should `zig run --color off foo.zig` work ideally then?

1556840513
adtac
`zig run foo.zig 2>&1 | cat` produces no colour as expected (not a terminal)

1556840515
mikdusan
workaround by nuking the tty: `zig test foo.zig |& cat` or whatever your shell needs for redirection; but actual source line is not emitted

1556840519
adtac
heh

1556840691
andrewrk
adtac, what about `zig build-exe foo.zig` and then `./foo`? See my point?

1556840720
andrewrk
I think an environment variable to control stack trace colors would be OK. there's already one in there to force it to be on. have a look at std.debug.wantTtyColor

1556840760
mikdusan
anecdotally, bsd and gnu tools seem to favor { `auto`, `never`, `always` } maybe zig should sync

1556840828
adtac
I agree that build-exe can't possibly control colours from the compile command, but I still think it's more intuitive to have test/run follow --color, no?

1556840831
andrewrk
mikdusan, sounds good

