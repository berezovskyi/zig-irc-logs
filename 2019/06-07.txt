1559872080
halosghost


1559872085
halosghost


1559872088
halosghost
tgschultz: ^ :)

1559872112
halosghost
andrewrk: let me know if #2634 includes enough information to be useful; if not, I'll happily expand upon it more

1559872180
daurnimator
tgschultz: halosghost: re: SOA/AOS:

1559872202
halosghost
oh, look at that

1559872207
halosghost
didn't expect it to ping :)

1559872225
halosghost
wait

1559872260
halosghost
daurnimator: I listed it in prior-art for #2634 :)

1559875108
daurnimator
emekankurumeh[m]: the question was targetting mingw; not zig itself

1559875129
emekankurumeh[m]
that works fine too

1559875165
daurnimator
emekankurumeh[m]: in that case: how do you do it? do you have an example anywhere?

1559875224
emekankurumeh[m]
the target is "<arch>-windows-gnu"

1559875278
daurnimator
emekankurumeh[m]: can you mention that in the issue?

1559875306
daurnimator
emekankurumeh[m]: I assume you need to set up a libc file as well?

1559875871
emekankurumeh[m]
I did the work to get linking to libc to work on mingw-w64

1559876059
emekankurumeh[m]
<daurnimator "emekankurumeh: in that case: how"> zig invokes the compiler defined by the env variable CC and uses that to find the necessary libraries

1559876122
emekankurumeh[m]
export CC=`which gcc` is what I do and linking with libc works fine

1559876149
daurnimator
emekankurumeh[m]: huh okay. I thought you'd have to use --libc

1559876164
daurnimator
emekankurumeh[m]: in any case: can you comment on that issue with all this info? :)

1559884273
scientes
what about using clang to implement the C ABI, so that zig is more easily ported?

1559884297
scientes
and having it link against libclang

1559884333
scientes
that might be a really bad idea however

1559899826
SamTebbs33
Has a workaround for the mac azure issue been made or is it still unstable?

1559919485
BitPuffin
can I pass a comptime known size array to a procedure that takes a slice?

1559919523
BitPuffin
I guess I can do arr[0..arr.len]

1559919528
BitPuffin
it can be a bit verbose though

1559919715
shritesh
BitPuffin: arr[0..]

1559919776
BitPuffin
oof

1559919778
BitPuffin
amazing

1559924401
tgschultz
BitPuffin also: &arr

1559924412
tgschultz
the compiler knows to turn that into a slice

1559931620
BitPuffin
tgschultz: that's even more pleasant maybe

1559931640
BitPuffin
But maybe the other one shows intent better

1559931648
halosghost
tgschultz: did you have a chance to take a look at the new issue? if so, is there anything you think I should change in the description right away?

1559932478
tgschultz
No, it looks fine. I have some concerns with the concept itself that I'll post, because if we're going to do this those things will need to be discussed.

1559932534
tgschultz
Actually, i guess one thing you could do before I do that is more clearly state the use case for this. Specifically, why it needs to be so quick and easy to change from SoA to AoS.

1559933145
halosghost
hm

1559933203
halosghost
the way I would likely phrase that would be, “this is a common performance optimization path, so allowing for it to be a simpler transition rather than an extensive refactor can be a big win”

1559933211
halosghost
is that a reasonable explanation, or are you expecting more? and if so, what?

1559933429
I_Right_I
Hey is there any ide that support syntax highlighting for zig?

1559933474
shritesh
VSCode, Sublime, Vim. They might not be IDE enough though.

1559933686
I_Right_I
I see alot of linux devs like Vim, I never broke down and spent the time to learn it.

1559933744
I_Right_I
Maybe I will give it a try.

1559933786
tgschultz
halosghost: well, from my perspective it hides a lot of behind-the-scenes behavior. Take for example how pointers to SoA elements would have to work. I just think we need pretty good justification for that. There are a lot of features zig doesn't have that could make certain usecases easier, but we don't plan to, so why this one?

1559933904
shritesh
I_Right_I: give VSCode a try too if you haven’t already. It’s such a good experience out of the box.

1559934205
I_Right_I
shritesh: I have used VSCode and I haven't given Microsoft kudos for much but I have to hand it to them there....

1559934495
halosghost
tgschultz: that's fair; though, if something like index-stride were implemented as the solution, it might solve the problem more generally only hiding a bit of behavior

1559934528
halosghost
(which is why I posed the issue as a discussion, RFP rather than a “here's what I think we should do” since I don't really have a solid answer for it yet) :)

1559936975
andrewrk
oh good, my macos CI fix worked

1559936999
andrewrk
copy elision is coming along brilliantly. everything is fitting into place

1559937111
andrewrk
this is part 1 of 3 of The Copy Elision Plan

1559937122
andrewrk
only part 1 is needed to proceed with the coroutine rewrite

1559937152
andrewrk
which I plan to do before parts 2 and 3 of copy eliding stuff

1559937191
andrewrk
I think also only part 1 is needed for the "fixed fields" thing

1559937344
halosghost
:D

1559937814
andrewrk
I'm thinking of calling them something other than "coroutines"

1559937840
andrewrk
when people hear that word they think of "light threads" with stacks, but they're actually stackless, which confuses people

1559937852
mikdusan
what's the best PR to look over for what "coroutines" is to become?

1559937867
andrewrk
mikdusan,

1559937871
mikdusan
thank u

1559937877
andrewrk
how about if they were called "continuations"

1559937900
andrewrk
really they're just a way to do Continuation Passing Style that is supported by the language

1559937938
andrewrk
rather than "zig has stackless coroutines" maybe it would be clearer to say "zig has continuation-passing-style syntax"

1559938017
andrewrk
that would also hint that the feature is available in freestanding mode (which it is)

1559938321
scientes
ahh the stackless co-routines stuff

1559938333
scientes
I was thinking about that. This is cool in C:

1559938412
scientes
a big problem with stackless co-routines is that the C ABI often requires passing on the stack, and it differs by arch, so you kinda would want to be able to specify the arches you want to support and have the compiler check for you

1559938592
andrewrk
there's still

1559938616
scientes
oh, well in that case

1559938698
andrewrk
calling a stackless coroutine is a `call` instruction; suspending from one is a `ret` instruction. the only difference is that all the local variables are in a struct passed in as a pointer in a secret first parameter

1559938699
scientes
if you kept the stack pointer and the frame pointer seperate you could probably even just interleave the stacks

1559938714
scientes
but that would require some more thought

1559938719
tgschultz
so it's a state machine

1559938731
scientes
tgschultz, but much easier to read/understand

1559938735
andrewrk
yes, it's syntactic sugar (a lot of it) for a state machine

1559938736
scientes
i.e. here

1559938757
andrewrk
it's a language-aware state machine

1559938777
andrewrk
let me rephrase that, it's a state machine that the language is aware of the semantics of in a few key ways

1559938778
scientes
you are also arranging the states, instead of having them in a flat namespace

1559938783
tgschultz
I just finished writing a bunch of state machines for the redo of my BMP lib. It will be interesting to compare before/after rewriting with "coroutines"

1559938827
tgschultz
maybe we should just call them stateroutines or something.

1559938841
andrewrk
I'd be fine with making up a new word

1559938862
andrewrk
saves me half the trouble of getting someone to forget what they already know to explain how it actually works

1559938899
andrewrk
you can see how this is related to generators now

1559938908
tgschultz
there is a lot of unlreaning to do when learning to write zig well, I think.

1559938935
andrewrk
I wonder if that is a negative, neutral, or positive thing

1559938936
tgschultz
*unlearning, obviously

1559938940
mikdusan
call them `zigzags`

1559938983
tgschultz
positive, in my opinon, because they're mostly the product of working with limitations that don't exist anymore

1559939320
I_Right_I
I think it boast well of the simplicity of zig - In Rust nor C do I believe optimization and simplicity go hand in hand.

1559939430
I_Right_I
Oh! I am very impressed zig and what you folks have done.

1559939457
I_Right_I
* impressed with zig

1559939545
mikdusan
in PR #2377 is `@Frame(...)` intended only for state-storage type of continuaions (i hope i worded that correctly), or potentially other things in the future?

1559939570
mikdusan
oh i see about futures.

1559939669
andrewrk
if you wanted to store something else there one would make it a local variable to the function

1559939710
andrewrk
whether or not you could "reach into" the local vars is under consideration

1559939718
andrewrk
that would be one way to have generators

1559940027
mikdusan
does it make sense to model a continuation function as a merge of fn and struct, and use struct-field syntax for anything you might want to reach; that takes care of differentiating between locals and reachables

1559940041
andrewrk
that's a neat idea

1559940168
andrewrk
that would be going against

1559940221
scientes
yeah i wanted to be able to use global in other files too

1559940229
scientes
hadn't checked if I could do that yet

1559940980
squeek502
andrewrk, still planning on streaming today?

1559941003
andrewrk
squeek502, yeah, any stream topic suggestions? :)

1559941062
tgschultz
it would be interesting to be able to access a function's local vars like it were a struct. take for instance the old comptime dsl parser idea:

1559941086
tgschultz
Interesting, but the kind of thing that probably shouldn't exist.

1559941116
andrewrk
note that generators are merely a "blessed" way of doing this

1559941225
squeek502
i did a bit more on the lua in the browser stuff, used placeholder fns for the io stuff in javascript, wasnt sure how to provide a malloc, and ran into an issue i havent debugged with lua functions not being exported (like luaopen_package), not sure if that would be a good starting point for another stream on that

1559941315
squeek502
havent pushed my changes anywhere yet, can do that if you want to take a look

1559941337
andrewrk
that might be neat - I think I would want to prepare a little more first for that one though

1559941340
andrewrk
hmm, maybe I'll pick a neglected issue on the issue tracker

1559941396
andrewrk
oh, I think it's time to make more progress on the debug allocator

1559941454
squeek502
last thing on the debug allocator was almost completely rethinking how it works iirc

1559941531
squeek502
for double free detection

1559942278
I_Right_I
andrewrk: Have you ever used Raylib for game development?

1559943228
emekankurumeh[m]
that would be neat

1559943760
squeek502
andrewrk, here's my lua-in-the-browser fork, status in the readme gives the current state:

1559943775
andrewrk
squeek502, thanks! I'll look at this tomorrow

1559943783
andrewrk
I'm going to start the stream in about 10 minutes

1559943791
squeek502
cool :)

1559943807
BitPuffin
I_Right_I: I'm doing that rn :)

1559943848
BitPuffin
Zig wasn't able to import the predefined colours though because preprocessor macro memes so I had to do some wrapping

1559943944
I_Right_I
ah cool! Did you finish the wrappers

1559944234
squeek502
btw andrewrk there's a bugfix PR pending on the GPDA:

1559944282
andrewrk
squeek502, ah, thanks, I'll look at that during the stream

1559944297
squeek502
its the same fix that was applied to the std heap allocators

1559944315
andrewrk
stream is going up. 8 minutes until start.

1559944584
fengb
squeek502: I've been working on a wasm "friendly" allocator. It's not actually been tested very thoroughly (or at all really...) but providing malloc/realloc/free is a main goal

1559944643
fengb


1559945295
squeek502
nice, will take a look when that becomes the blocking issue for lua-in-the-browser

1559945340
BitPuffin
I_Right_I: almost, there are a few things missing, like the keys, but you can still access them

1559945353
BitPuffin
I made it so you can do ray.MostThings

1559945366
BitPuffin
but for the keyoard keys you have to do ray.lib.KEY_SPACE

1559945367
BitPuffin
etc

1559945381
BitPuffin
basically ray.lib has everything that zig was able to import

1559945404
fengb
It's definitely broken for alignment > 8 bytes if that would be a blocker

1559945419
BitPuffin
the ray module has everything I just forwarded to everyone plus additional wrappers for color

1559945434
BitPuffin
but there is probably a way to export the stuff in ray.lib that I'm not aware of

1559945439
BitPuffin
which would cut down the file a lot

1559948007
I_Right_I
BitPuffin: did you publish your wrappers?

1559948090
BitPuffin
I_Right_I: yeah they're in my zig raylib experiments repo

1559948091
BitPuffin
lemme link

1559948102
BitPuffin


1559948116
BitPuffin
it's a bit of a mess atm cuz I'm just trying to push ahead :)

1559948129
BitPuffin
but I will eventually take it out of there and put it somewhere if it's desired

1559948945
I_Right_I
well I might give it a try

1559951351
squeek502
anyone know how to pass linker flags to lld through build.zig for a WASM static lib target?

1559951375
squeek502
specifically this build.zig if that helps:

