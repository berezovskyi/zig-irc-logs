1560556908
terinjokes
bummer. i don't know enough zig to send a PR for that issue myself

1560564592
terinjokes
is it possible to call a c pointer function (eg, `[*c]extern fn()`)?

1560565162
terinjokes
I can use @ptrCast, unsure if there's a better way

1560584353
gonz_


1560584431
gonz_
Also, has anyone figured out a way to create phantom types in zig? I don't really know enough about the way to handle comptime to create them.

1560585548
gonz_


1560605691
marijnfs_
i'm trying to make the zigtriangle code work again

1560605701
marijnfs_
but std.os.path moved somewhere?

1560605729
mikdusan
std.fs

1560605969
marijnfs_
mikdusan: thanks, and how does the new [_] syntax work?

1560605973
marijnfs_
it's for runtime slices?

1560606054
mikdusan
it's syntax for array, and meant to differentiate from slices when array size is inferred

1560606143
mikdusan
so old inferred size might be `... = []{ u8(5), u8(10) }` but it looks too much like slice

1560606174
mikdusan
so instead of forcing someone to `[2]{ u8(5), u8(10) }` infer is still supported but now `[_]{ u8(5), u8(10) }`

1560606338
marijnfs_
mikdusan: ah i see

1560606983
gonz_
Why am I seeing a lot of `munmap(NULL, 0)` when using `DirectAllocator`?

1560607030
gonz_
Is this something inherent to the allocator or am I doing something wrong? Or is it simply a nonissue?

1560607110
gonz_
I don't know enough about these system calls to know what's going on.

1560607905
andrewrk
terinjokes, [*c]extern fn() is actually a double pointer

1560607915
andrewrk
you'll have to dereference it once then call it. foo.*()

1560607929
andrewrk
function pointers are already pointers

1560608065
andrewrk
gonz_, size of structs is not guaranteed. if you need guaranteed layout you can use packed or extern structs

1560608120
andrewrk
DirectAllocator is probably not the allocator you want. it directly calls mmap for every allocation and munmap for every free

1560608170
gonz_
Yeah was mostly wondering about these `munmap(NULL, 0)`

1560608184
andrewrk
oh, I see

1560608199
andrewrk
that seems fishy, worthy of investigation

1560608206
gonz_
Pretty much every allocation is followed by one of these and I'm guessing I just don't know enough about the system calls to know what's going

1560608277
andrewrk
probably a regression in this logic

1560608318
gonz_


1560608368
andrewrk
if that's a command line application you probably want to wrap that direct allocator with an arena allocator, but no, nothing crazy

1560608461
daurnimator
gonz_: can you print a stack trace from your munmap function?

1560608521
andrewrk
cloudhop, I'll take on your use case for the live coding stream next thursday

1560608542
andrewrk
e.g. fix the issues with zig that are holding you back

1560609390
marijnfs_
andrewrk: you mentioned copy elision is holding back things like tha package manager, how is that?

1560609702
daurnimator
:(

1560609965
Sahnvour
to be fair since the grammar is likely to change, their choice makes sense

1560610067
mikdusan
daurnimator: nice. it needs one.

1560610132
Sahnvour
getting an article for a new programming language to make it into wikipedia is another long road ...

1560610146
Sahnvour
the nim folks struggled for months/years with it

1560610592
daurnimator
andrewrk: what are the rights on the zig logo?

1560610614
daurnimator
Sahnvour: IMO best thing you can do is create a stub article and start the conversation

1560610752
Sahnvour
probably can't hurt to do this yeah

1560611605
daurnimator
done.

1560611701
scientes
Influenced by

1560611701
scientes
C, LLVM IR

1560611703
scientes
correcto

1560611738
scientes
don't get me started about Wikinazis

1560611762
scientes
its basically a big exercise in bikeshedding

1560611925
daurnimator
scientes: yep. I expect that will get deleted and undeleted 3 times over the next 6 months :P

1560614899
Tetralux
Hey all

1560616362
andrewrk
daurnimator, I think there was even a more complete wikipedia entry previously that got deleted

1560616516
andrewrk
hi Tetralux

1560616788
andrewrk
regarding the logo, uhh I'm not sure. what should the rights be?

1560616847
andrewrk
the only thing I would want to prevent is something like a fork of zig falsely claiming to be the upstream project

1560616865
marler8997_
trademark :)

1560616877
andrewrk
or you know, a web page claiming to be the official zig homepage but it's lying

1560616921
marler8997_
that's exactly what trademark is for

1560616928
andrewrk
ok sounds like that's the answer

1560616999
marler8997_
not sure if it applies to organizations though, might just be for companies

1560617000
donpdonp
speaking of identity, zig-lang does not show up on

1560617066
andrewrk
marijnfs, it's because I want to rely on result location semantics (copy elision part 1) to re-do coroutines. and I want that coroutine rework for doing networking, just because I think it's really nice to have async/await syntax for networking operations. this enables writing "pipeline" style coding which I want for both self hosted compiler and package manager

1560617085
daurnimator
andrewrk: I searched for deleted articles and found nothing

1560617102
andrewrk
daurnimator, me too. I'm not sure what happened

1560617139
daurnimator
andrewrk: the logo needs to be documented as under an acceptable copyright notice

1560617167
daurnimator
wikipedia like cc-by-sa-4.0 or cc-by-4.0 or GFDL

1560617263
daurnimator
andrewrk: where

1560617294
andrewrk
yeah, help me pick a license

1560617495
andrewrk
cc-by-sa 4.0 seems fine

1560617752
scientes
+1 cc-by-sa 4.0, perhaps dual license GPL-2+

1560617842
scientes
also consider a trademark

1560617907
scientes
but its kinda expensive at this point for that

1560617933
daurnimator
donpdonp: added.

1560617974
scientes
oh no dual licensing is more for documentation, where I like it better than CC

1560617975
daurnimator
FWIW the lua logo has its own copyright notice...

1560617985
donpdonp
daurnimator: i see it. awesome.

1560618039
scientes
but logos are really about trademark, not copyright

1560618052
scientes
totally differn't things

1560618061
daurnimator
scientes: they are both. though logos usually fit under fair use

1560618136
scientes
There was a pedicure place that used the GNOME logo, and they were fine with it

1560618145
scientes
so in that case it is 100% trademark

1560618150
scientes
no confusion, no problem

1560618342
andrewrk
daurnimator,

1560618348
andrewrk
my last name has an `e` between l and y

1560618358
daurnimator
Also, I'm happy to have just submitted #2688; I've been working on it for a few days: breaking the rule of "don't implement your own crypto" :P

1560618423
scientes
add the text of the license go github can automatically parse it

1560618427
scientes
in LICENSE

1560618464
andrewrk
I gave up after 5 minutes looking for a plain test cc-by-sa 4.0 LICENSE file

1560618469
andrewrk
*plain text

1560618531
scientes
andrewrk,

1560618552
BitPuffin
Is there a nice way to return multiple values

1560618553
andrewrk
brilliant

1560618564
andrewrk
BitPuffin, not yet, your best bet is a struct

1560618748
andrewrk
alright back to result location branch for me

1560618840
daurnimator
logo uploaded to wikipedia.

1560619372
BitPuffin
andrewrk: does anonymous work? I don't think I managed to figure that out

1560619665
andrewrk
daurnimator:

1560619672
andrewrk
Look for "Wikipedia"

1560619778
daurnimator
andrewrk: ah right. looks like that was in a deleted draft

1560621350
Tetralux
Question: Should release-safe print a stack trace when it hits unreachable code?

1560621356
Tetralux
It _should_, right?

1560621494
Tetralux
Only I have some code that works fine in debug and release-fast, but crashes in release-safe without a stack trace.

1560621534
scientes
paste the code

1560621545
Tetralux
Oh - and the non-crashing behavior behaves differently in zig 0.4 and the 'master' zip from ziglang.org! x'D

1560621556
scientes
it is impossible to have a perfectly safe language (Turing prooved that), so that is always possible

1560621564
scientes
but it may still be a fixable bug

1560621590
scientes
preferrably on godbolt.org

1560621590
Tetralux


1560621598
Tetralux
I'll do that too

1560621643
Tetralux


1560621644
scientes
and it would be nice to show the stack trace when you run it in gdb

1560621653
Tetralux
I'm on Windows x64.

1560621654
scientes
cause gdb should be able to get you a stack trace

1560621655
scientes
or lldb

1560621693
scientes
not sure if the windows debugger works, i'm not a windows person

1560621717
scientes
i know stack traces work, i just know nothing about the debug format with COFF

1560621737
Tetralux
In VS 2019, it points to roughly the right area in the file, but that's about it.

1560621738
Tetralux
Also

1560621744
Tetralux
Totally forgot about lldb XD

1560621745
Tetralux
But

1560621745
companion_cube
Turing din't prove that, it depends on the definition of "safe"

1560621751
Tetralux
That gives me no stack tracce.

1560621756
Tetralux
(lldb doesn't)

1560621789
scientes
companion_cube, i would say that the program never completing is not safe

1560621891
scientes
and should be UB (as it is in C++)

1560621954
Tetralux
(I'm guessing by UB, you mean, "the program may or may not crash" - like if you read uninitted memory.)

1560621963
Tetralux
But yes ;p

1560621971
scientes
crashing is much preferred to incorrect results

1560621978
marijnfs
andrewrk: cool, will await a live coding where all the new copy stuff gets explained!

1560622006
Tetralux
@scientes Agreed - though often incorrect results are unavoidable ime.

1560622007
companion_cube
scientes: that's a possible definition that does indeed preclude turing completeness

1560622016
companion_cube
but other definitions (like safe rust) are pretty valid too

1560622085
scientes
yep

1560622149
Tetralux
I don't really know how best to go about debugging this.

1560622177
scientes
yeah the stack trace is segfaulting

1560622200
Tetralux
Yeah - that's what I thought

1560622218
Tetralux
I tried to narrow it down to figure out if I could jury rig fix it

1560622226
Tetralux
But without being able to check variables... :^)

1560622239
Tetralux
I know nothing about COFF.

1560622252
Tetralux
So there isn't really anything I can even printf on.

1560622263
Tetralux
'less I'm missing something obvious.

1560622286
Tetralux
I'm also interested as to why this code doesn't work the same on master.

1560622290
Tetralux
That seems bad.

1560622309
Tetralux
Normally, it should remove the '4', as it does on 0.4.0 debug mode

1560622322
scientes
you could bisect it

1560622334
scientes
but that would require you to set up a build environment

1560622360
scientes
FWIW I reproduced it in Linux

1560622366
Tetralux
I'm can't really do that on Windows... building LLVM...

1560622372
scientes
no you don't have to build llvm

1560622389
scientes
can can use these binaries

1560622419
Tetralux
I have Clang 8 already - so presumably LLVM 8 too?

1560622423
scientes
yes

1560622426
Tetralux
OK

1560622436
Tetralux
I have no idea how to make Zig use it though.

1560622447
Tetralux
build.zig or env vars?

1560622449
scientes
there is documentation on the wiki

1560622452
scientes
but I don't know

1560622584
Tetralux
What would I be looking for if I bisect?

1560622594
Tetralux
Just who last fiddled with it? xD

1560622611
Tetralux
I'm not the biggest expert at git either XD

1560622652
scientes
well you git checkout 0.4.0, then git bisect good, then git checkout origin/master, then git bisect good

1560622659
scientes
and then it will lead you through it

1560622671
scientes
but you have to build it

1560622748
scientes
*git bisect bad for HEAD

1560622782
scientes
Tetralux, oh no, 0.4.0 is bad for me

1560622793
Tetralux
Bad in what way?

1560622798
scientes
it has the same problem

1560622805
scientes
with your code and --release-safe

1560622819
Tetralux
That's what I meant

1560622823
scientes
you have to have a bad and a good to use git bisect

1560622824
Tetralux
It happens on 0.4.0

1560622841
scientes
i thought you said otherwise

1560622847
Tetralux
Sorry - maybe I wasn't clear xD

1560622865
scientes
nah I'm distracted with programming

1560622878
Tetralux
There's two problems

1560622879
Tetralux
Debug mode on master behaves badly, and 0.4.0 debug mode behaves as it should

1560622888
Tetralux
release-safe on 0.4.0 is bad though.

1560622905
Tetralux
(First one removes too many items when it should only remove the '4')

1560622906
scientes
I can't reproduce it with debug mode on master

1560622912
Tetralux
(And second one crashes without stack trace.)

1560622923
Tetralux
I used master from ziglang.org if that helps.

1560622931
Tetralux
I guess that's fixed now?

1560622932
scientes
I'm not really looking into your code right now. you need a more reduced test case for that

1560622933
Tetralux


1560622942
scientes
well there is a bug there

1560622960
scientes
at least in that the stack trace code seg faults

1560622961
Tetralux
There's actually another bug as well

1560622971
Tetralux
Because if you search it for FIXME

1560622981
Tetralux
There's an if branch I don't need but have to have. x'D

1560622996
Tetralux
This is my feelings right now: Ó.Ó

1560622999
Tetralux


1560623012
Tetralux
But no - the segfault - that's one I can't get past.

1560623016
Tetralux
The rest I can avoid for now.

1560623027
Sahnvour
Tetralux: to build zig from source on windows

1560623432
curtisf
Is there a convenient way to use a tagged union with anonymous structs as the fields? Like, how could I easily make a literal of the type `Op = union(enum) { Assign: struct { d: V, s: V, } }` ?

1560623554
Tetralux
Sahnvour: Ty (y)

1560623562
Tetralux
(PS: IRC noob here)

1560623627
Sahnvour
you're welcome

1560626435
Tetralux
Well

1560626443
Tetralux
I managed to build zig

1560626489
Tetralux
And tested every fifth commit for a while, before and after 0.4.0, and then every tenth commit until I needed LLVM 7.

1560626500
Tetralux
Every single commit does NOT have a stack trace on release-safe.

1560626546
Tetralux
Stupid question but... did release-safe EVER have a stack trace?

1560626569
emekankurumeh[m]
it should

1560626629
gamester
Tetralux: I commented out the asserts in your code and then I get "attempt to unwrap null". Turns out it's index.? in append.

1560626653
gamester
linux + master here

1560626666
gamester
well master from sometime yesterday

1560626756
Tetralux
So, it also commented out the assert for index != null and also got the attempt to unwrap null.

1560626765
Tetralux
I also*

1560626780
Tetralux
So I'm glad THAT is the same!

1560626781
gamester
But only on --release-safe. Even if I insert an explicit if (index == null) { std.debug.warn, std.os.exit ...} then it only hits this branch on release-safe

1560626811
Tetralux
Yeah - on debug or release-fast - everything goes just fine.

1560626847
Tetralux
Well

1560626855
Tetralux
master on release-fast is wrong

1560626857
Tetralux
but doesn't crash

1560626875
Tetralux
but master on debug mode is fine.

1560626882
Tetralux
Also

1560626904
Tetralux
gamester: Can you verify that if you remove the if (occupied) branch and check for if (!occupied) instead

1560626911
Tetralux
gamester: that it also doesn't work.

1560629699
gamester
Tetralux: yeah I think so. Sorry I've been changing the code a bit, I'm in the flow. I've reduced the issue a lot. Also noticed some additional problems, maybe. does the allocator's create function guaranteed initialization? I don't know. But you don't initialize the buckets explicitly but that's not the source of the issue

1560629931
gamester
Tetralux: I've reduced the problem, currently at this:

1560629943
gamester
just a single append

1560629975
gamester
run with --library c

1560629980
gamester
compile*

1560630215
gamester
Tetralux: actually I did the secureZero wrong

1560630236
gamester
Tetralux: the issue is that you don't initialize the buckets

1560630274
gamester
I just winged the secureZero lol, wasn't thinking. This works at least: std.mem.secureZero(Self, @ptrCast([*]Self, &self)[0..1]);

1560630354
marler8997_
Quick question, on the instructions to build llvm/clang from source (

1560630371
marler8997_
why does the example include -DCMAKE_PREFIX_PATH=$HOME/local in the LLVM example?

1560630396
marler8997_
I would think you would only need that argument when building clang, so clang could find LLVM, but why does llvm include it?

1560630467
gamester
Tetralux: So you'll noticed that in the paste that I sent you, if you fix the secureZero call, then both with and without --release-safe will work. If you remove the secureZero or leave it with the wrong slicing syntax, then with --release-safe you'll hit the null index problem

1560630530
gamester
Tetralux: but through this issue didn't you find an issue with a crashing stack trace? It looked like that to me, running the program through gdb. That's a bug.

1560630831
curtisf
Where are slice-literals allocated? On the stack? Where does their lifetime end? The end of the statement they're in? end of block? end of function?

1560631051
gamester
a slice is just a struct with a pointer and a length, so the same as with any struct. It's placed wherever you place it. There's no hidden allocation.

1560631166
curtisf
I mean if I write `x = f([]Obj{a(), b(), c()})` where is the array of 3 elements allocated? The expression doesn't say where it goes

1560631261
emekankurumeh[m]
I'm pretty sure that would be a compile error

1560631303
curtisf
hrm maybe this is only working because it's being evaluated at comptime

1560631326
emekankurumeh[m]
that would be an array not a slice, so that would go in the stack

1560631335
emekankurumeh[m]
nvm

1560631405
marijnfs
man the vulkan triangle code crashes my window manager

1560631411
marijnfs
that's some strong code

1560631419
gamester
vulkan, vulkan, vulkan.... shame on you

1560631432
gamester
that's vulkan for you

1560631455
andrewrk
curtisf, that's an array literal. the new syntax is `[_]Obj{a(), b(), c()}`. if it is known at compile time, it is allocated in the static const data section of the object file

1560631482
andrewrk
function call results are runtime known when not in a comptime context, so that will be a runtime-known array literal. those are allocated on the stack

1560631537
andrewrk
in the result location branch that I'm working on merging soon, array literals are not allocated anywhere; instead they directly instantiate the result location

1560631575
andrewrk
so if you were to, for example, do `some_pointer.* = [_]Obj{a(), b(), c()};` then the array literal would directly initialize some_pointer[0], some_pointer[1], and some_pointer[2]

1560631599
andrewrk
in your example you are passing the array literal to a function foo() as the first argument. the result location for parameters is the stack

1560631779
curtisf
ah, so I should be using `[_]`, didn't realize that. So how do I figure out how long slices/pointers to arrays remain valid? Is it always the end of the enclosing block? or can it be shortened because it will be emplaced somewhere with a shorter lifetime?

1560631858
andrewrk
curtisf, when you update to the latest master, yes

1560631884
Sahnvour
it's valid as long as the original data it is pointing to is

1560631900
andrewrk
the lifetime of something is always determined by the `var` or `const` declaration

1560631926
emekankurumeh[m]
are you going to do another round of PR after you merge the result location branch?

1560631942
andrewrk
emekankurumeh[m], yes

1560631948
andrewrk
at least one

1560632019
andrewrk
for automatically allocated parameters, the lifetime ends when the callee returns

1560632084
andrewrk
if you have an array you declared with `var` or `const` then it's the scope that the declaration is in

1560632162
andrewrk
donpdonp, I didn't realize you had gotten so far on your mastodon client project

1560632178
andrewrk
pretty cool:

1560632183
curtisf
OK. Thanks for explaining! I think what I'm doing is OK. For future learners I think it would be useful to have these rules written down somewhere in the manual with positive&negative examples

1560632229
andrewrk
curtisf, certainly. in fact I plan to do even better than that: have debug & release-safe modes reliably detect violations and produce crashes with useful messages

1560632244
curtisf
:)

1560632543
Tetralux
gamester: Oh man ty!

1560632553
gamester
np!

1560632559
Tetralux
gamester: So basically, the probably was that undefined != zeroing.

1560632565
Tetralux
That seems to be the lesson here.

1560632574
Tetralux
Right?

1560632585
Tetralux
Well - and a bug with release-safe stack traces.

1560632633
Tetralux
If so - I was actually aware of that point of uncertainty as I was writing init, but figured it would be okay because I'd find out later if it was full of junk.

1560632644
Tetralux
But then I found myself unable to debug it x'D

1560632718
Tetralux
It seems very unwiedly to have to slice a unknown-length pointer to Self and then pass that to a zeroing function for just ensuring that your variable is zeroed, considering that's normally what you want.

1560632738
donpdonp
andrewrk: hey thx! I made that page just yesterday. and thanks for Zig. :)

1560632744
gamester
Tetralux: well I introduced the init function for the Bucket. You were just calling allocator.create without initializing the resulting contents of the pointer

1560632774
Tetralux
Oh yeah

1560632777
Tetralux
I remember

1560632799
andrewrk
Tetralux, release-safe stack traces produces more complicated debug info, which zig's standard library isn't capable of understanding yet

1560632801
Tetralux
I actually had an init for it when I wrote it originally, but removed it because again - I figured I'd just discover if it wasn't zeroed later.

1560632805
gamester
Tetralux: well I don't remember the best way to zero things since I never need to. Usually you're more explicit than that. But I do think secureZero is how people do this.

1560632808
andrewrk
but it's something that can be improved

1560632844
andrewrk
secureZero is more to do with leaking sensitive data

1560632852
gamester
ah, between the fields

1560632919
andrewrk
Tetralux, for many types, such as structs, zig purposefully does not define a memory layout. this allows zig to put runtime safety check information in the spaces between fields

1560632930
andrewrk
this is how we have safety for accessing the wrong union field, for example

1560633005
andrewrk
if you were to memset a struct to zero you would mess up the safety information

1560633029
Tetralux
andrewrk: Okay - so - couple of things:

1560633031
Tetralux
andrewrk: RE debug info in release-safe: Ah, I see. I'm guessing then that using if (index == null) { ... } is better than assert(index != null) if you intend to use release-safe then.

1560633050
Tetralux
At least until you have a stack trace for it.

1560633067
andrewrk
assert(false); is defined to call the panic handler function in release-safe mode, and the default panic handler dumps a stack trace and then calls abort()

1560633114
Tetralux
Okay, so until the stack trace, using if (index == null) assert(false) then.

1560633124
andrewrk
it's better to use assert when assert is appropriate; the fact that stack traces lack debug info in release-safe mode is not really relevant in my opinion. you can override the default panic behavior if you don't like it

1560633151
Tetralux
Define appropriate.

1560633156
Tetralux
xD

1560633175
andrewrk
assert is defined simply as: fn assert(ok: bool) { if (!ok) unreachable; }

1560633186
Tetralux
Indeed it is.

1560633187
andrewrk
assert is appropriate when the condition being false is unreachable code

1560633209
Tetralux
I see.

1560633227
andrewrk
note that errors such as parse errors or "file not found" errors are not unreachable code

1560633236
andrewrk
they are in fact quite reachable

1560633282
gamester
yeah you should use assert for index != null except that you actually don't need to since that's what index.? does

1560633282
andrewrk
the less obvious it is that a code path is unreachable, the more helpful an assert will be

1560633299
Tetralux
So, since I tend to use assert to mean "tell me if this isn't true", and assert(index != null) is probably "reachable", I shouldn't use it like that.

1560633320
Tetralux
Okay

1560633323
Tetralux
There's a thing here

1560633326
andrewrk
if it's reachable, then you should handle the situation in some way. probably returning an error or reporting the situation to the user

1560633381
andrewrk
or panicking. that's sometimes quite reasonable

1560633391
Tetralux
In this case, index being null means the code is wrong.

1560633397
Tetralux
And that I need to fix it.

1560633402
Tetralux
Which is why I used assert.

1560633408
Tetralux
But

1560633412
andrewrk
gamester is correct though - if you were to do index.? that is a language-level assert that the index is not null

1560633423
Tetralux
Indeed.

1560633425
Tetralux
Makes sense.

1560633439
Tetralux
But my problem was multi-faceted.

1560633441
Tetralux
In this case.

1560633462
Tetralux
My create'd struct wasn't zeroed.

1560633465
gamester
yeah if the code is wrong when an assert would be untrue then using an assert is correct

1560633474
andrewrk
agreed ^

1560633483
Tetralux
Likewise.

1560633508
Tetralux
It seems like a bit of a corner case to me, perhaps.

1560633520
Tetralux
Because I was using it redundantly to index.?

1560633562
Tetralux
And because my struct wasn't zeroed properly, it was quite hard for me to determine what was actually happening

1560633571
Tetralux
because it didn't happen in a mode with a trace.

1560633614
Tetralux
Though, doing var thing = create(); thing.* = init() will help avoid that.

1560633627
Tetralux
I'm not used to there being copy elision like that :p

1560633700
Tetralux
Well - that's maybe not quite right, but hopefully you get what I mean xD

1560633713
Tetralux
Basically

1560633775
Tetralux
When programming exploratively, use the pattern of thing.* = Thing.init() which should hopefully get you a trace when something does go wrong

1560633810
gamester
marijnfs: the same thing happened to me. Hmmm

1560633923
Tetralux
Asserts are NOT compiled out of release-fast right?

1560633993
Tetralux
Apologises for babbling - thinking out loud. Don't mind me xD

1560634088
Tetralux
Oh right - I remember why I removed Bucket.init now: I was having trouble figuring out how I set the array fields to all zeroes.

1560634160
Tetralux
return Bucket{ .occupied = (an array of items all zeroes), ... }

1560634187
Tetralux
Is the idiomatic way to do that, to use mem.zero?

1560634214
Tetralux
(.occupied is [N]T)

1560634239
marijnfs
gamester: yeah i'm trying to pinpoints where it is

1560634385
andrewrk
Tetralux, you can create an array literal with all zeroes (or any pattern) like this:  [1]i32{0} ** 100

1560634393
Sahnvour
Tetralux: you can assign a default value to occupied in the struct declaration, something like `occupied: [N]T = [_]{ 0 } ** N,`

1560634444
Sahnvour
andrew's syntax is more correct :p

1560634473
andrewrk
Sahnvour, yours looks correct to me too, and that's a good point about default struct field value

1560634493
andrewrk
oh, you forgot the T, I see it now :)

1560634499
curtisf
cls

1560634821
Sahnvour
yup

1560634849
Sahnvour
which makes me think, is the `: [NT]` required in this case ?

1560634966
Tetralux
Yep, I actually remembered I could do that just before I came back to read this. x'D

1560634989
Tetralux
Is `[_]{0} ** N` real syntax?

1560634996
Tetralux
Can you infer the eltype like that?

1560635004
Sahnvour
if you add T, it is, otherwise it's not

1560635016
Sahnvour
that's a typo on my side

1560635030
Tetralux
You mean [T]{0} ** N?

1560635034
scientes
[_] was added very recently

1560635043
Sahnvour
[_]T{0}**N

1560635076
Sahnvour
[_] means you let the compiler determine the size by the number of following elements in braces, iiuc

1560635117
Tetralux
Okay - so on 0.4.0, it's an error to use that to mean "infer the count please"

1560635126
Tetralux
Whereas on master it infers the count as you describe.

1560635136
Tetralux
But you can just omit it in both places and it also works.

1560635149
Tetralux
ie: .occupied = []T{0} ** N,

1560635160
Tetralux
(coerces to a fixed array)

1560635273
Tetralux
Also

1560635275
Tetralux
I just realised

1560635289
Tetralux
The data field isn't always integers right

1560635290
Tetralux
So

1560635295
Tetralux
I can't do

1560635312
Tetralux
thing.* = Bucket{ ..., .data = []T{0} ** N }

1560635321
Tetralux
because 0 isn't a T unless T is an integer.

1560635350
Tetralux
And for the same reason I can't default-struct-field-value it either.

1560635354
Tetralux
Right?

1560635365
Sahnvour
oh, you want to zero-initialize any type ?

1560635382
Tetralux
Well

1560635396
Tetralux
I suppose I can get away with 'undefined' there because I only read it if occupied is true

1560635404
Tetralux
But now you mention it

1560635456
Sahnvour
undefined seems like the good tool to use in that case

1560635506
Tetralux
Also FYI, I actually

1560635523
Tetralux
Without it, it doesn't coerce to a fixed array, like it would if you are creating a struct literal.

1560635531
Tetralux
That seems a little inconsistent.

1560635932
Tetralux
andrewrk: You mentioned that you cannot zero a struct because it will fudge with the safety. Can you elaborate on how that safety works, and what would happen if you

1560636142
fengb
I'm having trouble running tests on mac:

1560636252
fengb
Really weird thing: fd_t is the 4th reference so it seems to just disappear

1560636803
scientes
Tetralux, default values will take care of that use case

1560637690
Tetralux
scientes: It would, yeah. I do want to understand that though ;p

1560638464
Tetralux
Hey - I just want to say thanks for all the help. It is most appreciated!

1560638475
Tetralux
It helped quite a lot :p

1560638522
scientes
Tetralux, welcome!

1560638583
Tetralux
o7

1560638660
gamester
marijnfs: The issue seems to be in the .imageFormat or .imageColorSpace fields of VkSwapchainCreateInfoKHR

1560638673
gamester
I'm really surprised that the validation layers aren't detecting this

1560638744
gamester
I ported over my instance create logic to make sure I had working validation layers and they didn't complain, though I've yet to test them to make sure they're on

1560638991
gamester
well nvm, they are sending me informational messages so obv they're on

1560639055
marijnfs
gamester: yeah are all layers on actually?

1560639096
marijnfs
there are many

1560639102
marijnfs
so whats the fix?

1560639228
gamester
I'm not sure yet

1560639233
gamester
Don't know what the issue is

1560639353
Tetralux
gamester: Thanks for the help and your effort earlier! I appreciate it.

1560639359
gamester
no problem

1560639362
Tetralux
o7

1560639470
marijnfs
gamester: nice catch though, seems strange that any swapchain creation shouldnt be able to do that

1560639474
marijnfs
could be driver bug

1560639577
gamester
invalid enum value

1560639807
gamester
hmm but the format choosing logic is identical to mine

1560640197
marijnfs
gamester: i was printing availableFormats in chooseSwapSurfaceFormat, and it crashes in the fmt function

1560640205
marijnfs
maybe some memory is screwed up

1560640224
gamester
yeah

1560640269
marijnfs
gamester: when i run it in valgrind it goes crazy

1560640274
marijnfs
but actually i get a triangle!

1560640283
gamester
hah

1560640296
marijnfs
lots of writes in not alloced memory..

1560640316
gamester
wow how did I forget about valgrind

1560640568
gamester
marijnfs: details.deinit() shouldn't be there

1560640578
marijnfs
createCommandBuffers (main.zig:189)

1560640581
gamester
in querySwapChainSupport

1560640680
gamester
I think that's the issue. One wrongly placed 'free' is enough to get Vulkan to crash the OS' display manager! YES! PROGRESS!

1560640718
marijnfs
gamester: that actually fixes it, you da man

1560640722
gamester
andrew: ^

1560640727
gamester
andrewrk

1560640864
gamester
marijnfs: maybe you can do a pull request to vulkan triangle stuff? I don't know git

1560640953
gamester
just remember to free that struct elsewhere, and maybe this should be designed differently so this is less likely to happen

1560641114
marijnfs
gamester: sure i will

1560641264
marijnfs
gamester: you would almost want a defer to pass through a return, or attach it to the runtime lifetime of a variable

1560641438
gamester
Also the validation layers should 100% detect this, right? I'm going to sleep but this has to be fixed by them as well.

1560641646
gamester
maybe it is detected but the logic still goes through and we can't see the message cause the OS partly crashes

1560641701
gamester
maybe there is file logging

1560641736
marijnfs
gamester: yeah, anyway i created the pull request

1560641744
marijnfs


1560641792
gamester
awesome!

1560641972
marijnfs
it would be nice to have a lifetimedefer

1560642297
andrewrk
marijnfs, that's a destructor

1560642308
andrewrk
thanks for the PR

1560642406
gamester
ok I redirected stderr and indeed the issue is caught

1560642412
gamester
I should have done that from the start heh

1560642415
marijnfs
andrewrk: does zig have that?

1560642492
andrewrk
no

1560642537
andrewrk
you can just make one though. make a function to call when the variable's lifetime is ending, and then call it

1560642574
andrewrk
the bug here probably originated from porting c++ code (which does have destructors) to zig, and I made a mistake

1560642627
marijnfs
andrewrk: yeah, it would be nice if zig could pick up such mistakes

1560642640
gamester
not possible

1560642650
gamester
valgrind can!

1560642654
andrewrk
even the planned safety features would not have been able to catch this problem, since the type is extern and thus has a well-defined memory layout

1560642714
marijnfs
andrewrk: yeah it's a hard problem

1560642764
andrewrk
interacting with C APIs always has unsafety problems. that's true in rust as well, all this vulkan code would have `unsafe` keywords everywhere

1560642819
andrewrk
this is an area where zig can actually help a bit more than rust, since the seam between safe and unsafe is less rigid

1560642843
marijnfs
the proper debug support is really nice in zig

1560642865
marijnfs
does clangs memory sanitizer pick such things up?

1560642866
andrewrk
it was an invalid free you said? actually in this case the debug allocator I've been working on would have been able to catch it

1560642878
marijnfs
andrewrk: yeah was wondering aobut that

1560642887
andrewrk
we can test that claim

1560642889
marijnfs
is it finally finished:P

1560642894
gamester
the free wasn't invalid

1560642896
gamester
it was too early

1560642907
marijnfs
yeah its not a doubble free

1560642908
andrewrk
ah. so passing bogus pointer to vulkan

1560642943
marijnfs
yes, not even passing, just the info struct that is returned (and not to be used by vulkan) is already freed

1560642948
marijnfs
so it might just have some crazy values

1560642986
gamester
nah, it's the arrays in the struct that get freed

1560642990
gamester
so yes a bogus pointer

1560642991
andrewrk
I'm not sure about memory sanitizer. there is an open issue to investigate what integrating with that would look like

1560643007
andrewrk
there's also an issue about making stack allocations detect safety issues

