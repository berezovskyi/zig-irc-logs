1561342876
gamester
Tetralux: "But it

1561342876
gamester
would be inconsistent with your slicing idea. At this point you've lost the ability to write to slices and pointers.

1561343101
gamester
write to / reassign

1561343329
gamester
So "x[0..n] = expr" would modify the array x but "var slice = x[0..n]; slice = expr" would modify the slice. Huge inconsistency.

1561364180
IntoxicatedHippo
Is there a way to declare a struct with something similar to a flexible array member in C?

1561375635
tgschultz
IntoxicatedHippo: not at this time. Structs must be of fixed size.

1561375698
mq32
tgschultz, what about a function that returns an array with comptime_int size?

1561375813
tgschultz
that's very doable: `fn foo(comptime size: usize) [size]u8` would be the declaration. However, this probably won't work for the usecases of what IntoxicatedHippo is asking about because the size won't be comptime known.

1561375840
tgschultz
though of course, it could return a slice instead

1561386293
Tetralux
gamester: Allow me to play devils advocate a little more here: x[a] = y[a]; x[a..b] = y[a..b]; --- Seems alright to me. Ptrs can be deref'd because they're a primitive thing that the machine can deref and we're a low-level language here. Slices are not primitive to the machine, they are primitive to the language; a little more high-level.

1561386650
Tetralux
Also forgive me if I'm a little slow today. I literally just woke up and I feel like it xD

1561386656
Tetralux
Also hi all o/

1561388800
samtebbs
o/

1561398905
daurnimator
Has anyone implemented any compression algorithms in zig yet?

1561398933
daurnimator
e.g. DEFLATE?

1561398964
daurnimator
looks like I've already found

1561399890
Sahnvour
Tetralux: I thought a bit more about this slice-assignation thing, and the main thing that can be problematic is that the same expression `foo[n..m]` would have a different meaning depending on its context. not sure that's a big deal, but consistency is lost on one side

1561400151
Tetralux
Wouldn't it retain it's meaning of "the elements of foo in [n, m)" regardless of whether it's being assigned to, or not?

1561400178
Tetralux
Just that lhs=assigning them, rhs=reading them.

1561400208
Tetralux
or  rather rhs=a view of them

1561400214
Tetralux
You get my point.

1561400356
Tetralux
Sahnvour, forgot to @ you xD

1561400524
Sahnvour
yeah

1561400937
gamester
Tetralux: Are you aware that this does not read anything? const slice = x[0..n]

1561400980
Tetralux
gamester: I corrected myself.

1561400995
Tetralux
>  or rather rhs=a view of them

1561401463
gamester
s/anything/the array

1561401666
Tetralux
gamester: ?

1561401790
gamester
I was correcting myself. The array is not read from but an address needs to be gotten.

1561401931
Tetralux
gamester: I'd assume that expr copies the ptr to x, adjusts it accordingly (though in that case it doesn't have to), and compute the length.

1561401955
Tetralux
.. and stores the resulting slice into `slice`.

1561402396
daurnimator
Tetralux: You mean "from x"?

1561402425
daurnimator
Tetralux: notably, at no point in `const slice = x[0..n]` is the pointer dereferenced

1561402454
gamester
I do find the point about x[a] = y[a] to be interesting. Also "ptr.* = expr". In both cases the lhs looks like it reads and then we write to that temporary. But instead x[a]= and ptr.*= are like their own operators.

1561402536
daurnimator
Tetralux: Having `x[0..n]` change whether it dereferences the pointer or not based on the LHS doesn't make sense IMO.

1561402550
gamester
Off topic: "Ubuntu to provide select 32-bit packages for Ubuntu 19.10 & 20.04" - Finally the linux world learns about system packages! Wow!

1561402558
Tetralux
daurnimator: "ptr to x" = &x

1561402565
Tetralux
or no

1561402567
Tetralux
x.ptr xD

1561402708
gamester
This is the only syntax that makes sense to me: x[0..n].* = y[0..n].*, equivalent to x[a] = y[a] since x[a] does dereference by default. However std.mem.copy or w/e is fine.

1561403561
daurnimator
gamester: agreed

1561405113
Tetralux
I can kindof see that.

1561405145
Tetralux
gamester: forgot to @ again..

1561405146
tgschultz
daurnimator: I think someone did port a deflate and inflate, not sure if the code is up to date even if I can find it. I wrote an inflate for PNG, but I know I haven't kept that up.

1561405203
tgschultz
oh, I see that was linked in the issue you linked

1561405265
Tetralux
gamester: "assign through the slice" in the same way as `p.* = value` is "assign through the pointer", as it were.

1561407159
daurnimator
Tetralux: you need the `.*` on both sides.

1561407202
Tetralux
Yeah, yeah. Because you want to assign through the LHS slice, the elements within the RHS slice.

1561407213
Tetralux
'within' being the reason there.

1561407655
andrewrk


1561408250
mikdusan
nice. zig's 10% represents 25% to musl (assuming patreon)

1561408273
andrewrk
yeah patreon

1561408515
scientes
yeah when i was paying attention to musl in my systemd patches i got some push-back by Lennary Poettering

1561408600
scientes
andrewrk += 1 on that decision

1561409763
daurnimator
andrewrk: make sure you repost that blog post to your patreon page :)

1561409766
mmx87
andrewrk, have you considered of using Docker images for different OSes and architectures for CI? It might be a nice way to test for multiple platforms (and architectures) easily one one server.

1561409787
daurnimator
mmx87: does docker support different OSes architectures?

1561409793
mmx87
For example for NetBSD x86_64

1561409806
daurnimator
mmx87: doesn't e.g. a linux x86_64 docker host only support linux x86_64 images?

1561409807
mmx87
No, not directly. But they use Qemu.

1561409810
andrewrk
daurnimator, I don't want to spam people who already donating

1561409811
mmx87


1561409839
daurnimator
andrewrk: as a donator I respect that some portion of my donation is flowing through to the musl project

1561409864
andrewrk
I see

1561409878
daurnimator
andrewrk: I wouldn't consider patreon posts spammy unless they were more than once a month without good content

1561409886
andrewrk
noted

1561409893
daurnimator
and your last patreon post was feburary last year :P

1561409902
mmx87
Qemu is for hardware virtualization, it should be quite fast. But I never tried it for compiling and stuff. But it should get the job done.

1561409917
scientes
you should def. mirror release notes there at least

1561409925
mmx87


1561409928
scientes
patreon posts don't all have to be sponsored

1561409935
scientes
patreon/subscribestar

1561409939
daurnimator
mmx87: so what you're really suggesting is "use qemu"... nothing to do with docker at all?

1561409964
scientes
daurnimator, why would use want to use a non-native guest?

1561409986
daurnimator
scientes: to test e.g. for netbsd on our CI boxes that may only support linux/windows?

1561409991
mmx87
Hm, yeah. That's correct, but don't many CI services use Docker images? I mean you can set it up directly, nothing hinders that.

1561409993
scientes
qemu is slow and you quickly run into bugs

1561410017
scientes
daurnimator, oh just use qemu-kvm, I don't think you realize what docker is.....

1561410033
daurnimator
scientes: I very much know what docker is...

1561410034
scientes
docker is not virtualization

1561410043
scientes
and will never support virtualization

1561410083
scientes
perhaps I didn't read the scrollback

1561410106
scientes
mmx87, qemu also supports cpu virtualizations features, which is native-speed

1561410112
scientes
now that kvm was merged

1561410129
mmx87
I was just mentioning Docker images because I thought that most CI services support that.

1561410202
mmx87
Yeah, QEMU + KVM is pretty nice. You can even run Windows at quasi full speed with GPU passthrough on Linux. Though the setup isn't that easy, because it depends a a bit on your Hardware.

1561410228
scientes
>  You can even run Windows at quasi full speed with GPU passthrough on Linux.

1561410232
scientes
because of the work of Wine

1561410247
scientes
that uses libwine to provide directX on OpenGL

1561410279
scientes
anyways, that is off-topic here

1561410292
mmx87
Is that really relevant? I mean it passes the whole GPU to the VM.

1561410298
mmx87
Yeah, I know.

1561410354
andrewrk
general systems programming stuff is on topic here

1561410355
mmx87
Anyways, I don't know how well the more exotic architectures are. But in general it should work fairly well, I think.

1561410460
scientes
mmx87, Power has some difficulty because it actually uses all 64-bits

1561410467
scientes
and some hardware doesn't support that

1561412565
Cadey
andrewrk: please keep doing your work with Zig. You're doing very well on it :)

1561412615
andrewrk
thanks Cadey

1561412632
andrewrk
I saw the patreon pledge :) thanks a lot

1561412659
Cadey
no problem, i wish i could spare more per month

1561412730
companion_cube
oh damn, the V-lang dramaâ€¦ :o

1561412754
companion_cube
(good call out, andrewrk)

1561412776
andrewrk
yeah let's try to keep it on topic in #zig though

1561412832
andrewrk
I'm proud of everybody for keeping it on topic in here over the last few days

1561412844
mikdusan
wheres zig offtopic? `#zigot` :)

1561412846
companion_cube
(sorry, I was just reading your blogpost)

1561412938
mikdusan
andrewrk: how does one go from IrInstruction.result_loc to ResultLoc ?

1561413023
andrewrk
mikdusan, ResultLoc*s are created in the gen_* pass (AST to Zig IR). They have to get "reset" by an instruction in case of inline loops.

1561413046
andrewrk
ir_resolve_result happens in analyze_* pass and that turns ResultLoc*s into IrInstruction*s

1561413073
mikdusan
ok is there an inverse direction?

1561413103
andrewrk
no

1561413466
yhoyhoj
Hello. Beginner question : I am not sure was is the minimal code to add for 'test.zig' example on

1561413645
daurnimator
yhoyhoj: which example? (they're all test.zig)

1561413689
yhoyhoj
the parseInt example, the first test.zig on the Error handling section I linked

1561413733
Tetralux
if you mean, how do you run it, you run it with "zig test test.zig"

1561413825
yhoyhoj
Actually I found the solution. I just needed to add cases in the switch

1561413841
Tetralux
Ah, gotcha xD

1561413848
mikdusan
andrewrk: this is followup to vector alignment fix - segfault existed before fix:

1561413854
mikdusan
any hints? :)

1561413931
mikdusan
(frame 5 calls ir_implicit_cast with nullptr, legit?)

1561414922
andrewrk
mikdusan, all the args to ir_implicit_cast are non-null

1561414957
mikdusan
typo. ir_implicit_cast_with_result(..., nullptr)

1561415002
mikdusan
seems odd to me a function named with_SOMETHING and SOMETHING==nullptr

1561415003
andrewrk
that's allowed, it means that if the cast needs a result loc, it should make one (with no_result_loc() which will allocate a stack variable)

1561415156
samtebbs
quit

1561415326
yhoyhoj
I don't understand why so much of the examples  end with a compiler error. I mean, it does show that the language work but why not show a success instead ? It's making things unecssarily confusing. Eg. the last example of

1561415455
Tetralux
That particular example is meant to demonstrate that you can run code at compile time to ensure that certain conditions are met. In that case, making sure that the array contains 1234 elements.

1561415463
Tetralux
The error

1561415497
Tetralux
I get what you're saying though.

1561415581
Tetralux
In that particular case, the assert is further confirming that fibonacci(6) = 1234.

1561415592
Tetralux
But it isn't, so it errors.

1561415606
Tetralux
I could have said all that clearer, but hopefully you get my point.

1561415695
andrewrk
yhoyhoj, it's also important to know what kind of mistakes the compiler can catch, it can give you a feeling of safety

1561415696
yhoyhoj
Does the failing assert make it clear that the code was executed at compile time ? You mean that if it was a successful assert with no output it won't be as clear that the code work as expected ?

1561415717
Tetralux
In that case yes

1561415728
Tetralux
Because the array length is the result of calling fibonacci.

1561415763
Tetralux
And the call is within the [] of the array type.

1561415770
Tetralux
Which must be comptime known.

1561415896
yhoyhoj
Yes I get that. And the fact that it compiles should be enough to show that comptime expressions are working ? It would be less confusing to have the comptime block confirm that the array length is the exepected result : 6 if I am not mistaken.

1561415985
yhoyhoj
(I mean 8)

1561415990
yhoyhoj
_*

1561415994
yhoyhoj
8*

1561416041
Tetralux
Yeah, it's 8.

1561416064
Tetralux
Thing about that example is that the comptime block around it.

1561416086
Tetralux
Without that, it does the same thing... except that it's only when you run the program that you assert.

1561416208
Tetralux
But the fact you see the assert at comptime is the point of the example.

1561416228
Tetralux
-- That you

1561416295
Tetralux
Namely if some code you write assumes an array has an even number of items, then you can ensure that without having to run it, and so avoid how in Python, you might not notice until you tried to use that code path.

1561416376
yhoyhoj
I see, if you trid to cimpile this code without you would see this error which makes it clear that the assert was executed at compile time. I understand now and it is a great feature. But the problem is that because it is used with 'zig test' that run the program automatically it is hard to see that it is really at compile time and not at runtime.

1561416411
Tetralux
Yeah, I can understand that.

1561416459
Tetralux
You can tell because the test harness says:

1561416459
Tetralux
"n/total test "name of test"...

1561416463
Tetralux
before it runs a test.

1561416530
Tetralux
In that case, it would be "1/1 test "compile-time evaluation"...

1561416570
Tetralux
I believe in that case, if a comptime assert fails, you wouldn't see any of those regardless of how many tests you had.

1561416604
Tetralux
So if you see it at all, no comptime stuff panicked. (e.g. asserted).

1561416655
Tetralux
Also, it says "error: ..."

1561416660
Tetralux
which is only shown at comptime.

1561416674
Tetralux
At runtime you'd get "reached unreachable code" <stack trace>

1561416700
Tetralux
But yeah, it could be worth considering.

1561416712
yhoyhoj
Well, so it's not too bad but I feel it could be made clearer. Adding a sentence explaining why this error is actually what we wanted would make things clearer. Like "You don't see ' 1/1 test...' so it means the code did not compile successfully. What you are telling me are things specific to Zig that a I was not yet familiar with.

1561416755
Tetralux
The most obvious part is that it says "error:" honestly.

1561416763
Tetralux
That's probably what you'd be looking out for.

1561416767
yhoyhoj
Well, I didn't make the difference between an error and a stack trace :/

1561416772
Tetralux
But maybe it's worth pointing that out.

1561416822
Tetralux
I can see why you might have xD

1561417179
yhoyhoj
Thanks for making this clearer. It may also be a worthy feedback. Better programmers may understand this by themselves but I think the introduction to a language should aim to be as easily understandable as possible.

1561417569
andrewrk
yhoyhoj, I agree with you on that. as zig gets more mature it will become more friendly to beginner programmers

1561417743
Tetralux
yhoyhoj: Welcome.

