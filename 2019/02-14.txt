1550106238
suirad
Howdy all. anyone around that could point me in the right direction with my build.zig?

1550106460
suirad
I couldnt find a good example of anyone doing something similar. my project is structured as so: ./src/main.zig, ./deps/<subrepo>/src/<library>.h

1550106495
suirad
how do i setup my build.zig so that in my main.zig i can just do a @cImport("library.h")?

1550107022
rohlem_
andrewrk: I spent the last hour writing an overly-long comment on #1953 (null pointers etc.), seems like I just missed you. Please consider reading at least the first summary paragraph and asking questions if I something is unintelligible.

1550110225
suirad
also, if i am using build.zig, how do I #define something for the see code to see from the build.zig

1550110326
suirad
ahh found it, builder.compileFlags

1550110340
suirad
err object.compileFLags rather

1550110777
emekankurumeh[m]
what's the zig version of c bitflags?

1550111507
rohlem_
emekankurumeh[m]: I think you mean "bitfields"? You would just use the corresponding "uX" and "iX" types in Zig, I think. Packed/exported if you specially care about layout.

1550113562
emekankurumeh[m]
no, I mean bitflags for calls to functions like socket

1550113867
rohlem_
emekankurumeh[m]: Oh. I think you could introduce an enum for the specific "set" flag states, and use its underlying (probably unsigned) integer type for values, like you would in C.

1550113934
rohlem_
emekankurumeh[m]: Alternatively, you could make it into a struct of "u1" members and set those to 0/1 to indicate clear/set state. Doesn't allow the same smooth bit operator tricks, but is probably harder to misuse.

1550113953
rohlem_
(again, packed if you care about layout/size)

1550114346
suirad
if you do it as a union, you could still also do the bit operator stuff

1550114606
emekankurumeh[m]
what if turned error sets into general purpose sets with error sets just being one use?

1550114663
rohlem_
suirad: It should work as a export-C-union (explicitly requesting no hidden tag field). Note that relevant aliasing rules are still up for debate later on (see issue #1643 - currently all aliasing is supported).

1550114790
rohlem_
emekankurumeh[m]: What other use cases could you think of? Error sets actually require a bit of compiler magic to gather error codes from everywhere, figure out the necessary type - some of that behaviour is still unspecified.

1550114818
rohlem_
If the underlying "set hierarchy" structure is of interest to you, I think a (standard) library solution is a reasonable proposal.

1550117222
rohlem_
andrewrk: I now more concisely summarized my thoughts as counter-proposal #1959 ; it's probably more readable, but if you feel something is left out, the original comment went into

1550118112
emekankurumeh[m]
i made a set type a while back, but i have no idea how deal with enums with custom ordinal values.

1550120089
andrewrk
suirad, sounds like you want addIncludeDir

1550120615
daurnimator
emekankurumeh[m]: I like the idea of error sets being more general

1550120621
daurnimator
emekankurumeh[m]: would be very useful for flags!

1550137040
forgot-password
Is it possible to dynamically create a struct or are there any plans to support something like this?

1550138638
Hejsil
forgot-password, Do you mean generating a struct from code at comptime as discussed here

1550139209
daurnimator
Hejsil: I think they mean at runtime?

1550139344
Hejsil
I'm asking because I'm not sure what the question means :)

1550139372
Hejsil
Does he mean, instatiate a struct, create a struct type, is it at comptime, runtime?

1550139410
daurnimator
Hejsil: well they left. so you'll have to wait until they come back :P

1550139416
Hejsil
True :)

1550157329
forgot-password
daurnimator: I'm back :)

1550157376
forgot-password
Hejsil: My intent is to create a struct at comptime and dynamically add fields to it (also at comptime of course).

1550157403
andrewrk
forgot-password,

1550157727
forgot-password
andrewrk: Thanks, what's the current status on that?

1550157759
andrewrk
forgot-password, probably going to be closed

1550157789
andrewrk
feel free to make a case for it in the issue, of course

1550157833
forgot-password
By closed you mean: Not going to be implemented?

1550158024
rohlem
andrewrk: If #1953 is still on your mind / whenever you get to it, if my last comment still failed to get my point across, feel free to ask more direct questions here, if you want.

1550158043
andrewrk
rohlem, I just replied

1550158112
phvse
Hi, I'm trying to understand how the Zig IR is obtaining symbols from other files. IrInstructionCall contains a pointer to fn_ref but I'm having trouble finding out what IrInstruction refers to a *thing*, be it a struct or function or something.

1550158171
andrewrk
hi phvse. look for calls to `find_decl`

1550158226
rohlem_
andrewrk: Want me to reply over there or try being shorter here to make follow-up questions easier?

1550158236
andrewrk
let's chat here for a bit

1550158249
emekankurumeh[m]
was `@reify` planned to work at runtime or would it be a comptime construct?

1550158263
andrewrk
emekankurumeh[m], comptime

1550158272
rohlem_
The use case outlined in that issue, operating on address 0, is not an issue for non-optional Zig pointers.

1550158308
rohlem_
The only corner case that would actually throw us for a loop would be saving this value in an optional Zig pointer, because we already overload the value for "unpopulated".

1550158313
andrewrk
yes it is, it's a [*]u8 pointer

1550158332
andrewrk


1550158339
andrewrk
const text_boot = @intToPtr([*]const u8, 0)[0..@ptrToInt(&__end_init)];

1550158364
rohlem_
Is there a reason why non-optional Zig pointers should special-case a specific value, say address 0 ?

1550158411
andrewrk
yes, on non-freestanding targets, 0 is always invalid, and therefore an available representation of "null" for optionals

1550158428
rohlem_
I understood the issue to be "we want to be able handle 0 like a normal address". So I propose we do just that for non-optional pointers.

1550158445
andrewrk
this also opens up optimization opportunities in LLVM with its "nonnull" attribute

1550158477
andrewrk
we want to be able to handle 0 like a normal address, in freestanding mode, if the mappable-0-address build option is enabled

1550158492
phvse
Does the LLVM define a "null" pointer as being pointed at zero?

1550158515
rohlem_
Correct. And I don't think adding allowzero to the type system, so that code has to juggle allowzero and non-allowzero, actually helps in development anywhere.

1550158525
andrewrk
phvse, yes, currently it is always zero, however some community members have expressed interest in a future version allowing the invalid pointer value to be specified in the data layout string

1550158533
rohlem_
(more than it complicates things, anyway)

1550158593
andrewrk
rohlem_, the use case I linked is currently invoking undefined behavior. doing the `allowzero` proposal will make it instead cause a compile error, and then using `allowzero` will fix it to not have undefined behavior

1550158611
phvse
Is the issue that you want a nullable pointer type that can also refer to address 0?

1550158635
rohlem_
What I propose is basically that all optional pointers are non-allowzero, and all non-optional pointers are allowzero by default.

1550158664
andrewrk
phvse, yes, the problem is that library code, for example, may rely on the property that casting T to ?T results in a non-null value

1550158724
phvse
Doesn't allowing zero by default remove type safety?

1550158739
andrewrk
explain?

1550158789
phvse
@rholem's proposal of "all non-optional pointers are allowzero by default"

1550158807
phvse
would that not remove some type safety from regular pointers?

1550158851
rohlem_
phvse: "regular" as in non-optional pointers do not inherently have invalid addresses (on all theoretical targets).

1550158864
rohlem_
phvse: The same way all bit representations of u8 are valid.

1550158890
phvse
okay that makes sense

1550158906
rohlem_
andrewrk: My pragmatic solution/suggestion for finding an unused/invalid address to signal "unpopulated" under freestanding: Allocate a single byte for this specific purpose.

1550158942
rohlem_
This "null byte" would be used as "unreachable address" instead of address 0, and we get all the same benefits.

1550159096
andrewrk
phvse, that's right, for example there's going to be a really helpful safety-checked undefined behavior on implicit cast from C pointer to Zig pointer

1550159111
andrewrk
which works because 0 is not a valid address

1550159146
rohlem_
That safety check makes sense when casting from any optional pointer (Zig or C) to any non-optional pointer.

1550159169
andrewrk
rohlem_, that's an interesting proposal - a compile option to choose the invalid pointer address value

1550159174
rohlem_
I don't know whether the invalid address we check for is 0 or some arbitrary other value doesn't have too huge performance implications.

1550159198
rohlem_
If it actually does, that's just more reason for freestanding targets to also vouch for address 0 to be their invalid address.

1550159219
rohlem_
But since it's up to their implementation, having the option gives the most flexibility.

1550159266
andrewrk
vouching for address 0 to be invalid in freestanding is indeed desired and that's why allowzero is helpful - for example in my kernel linked above, it only uses allowzero once to copy some bytes, and then all other pointers in the codebase have 0 as invalid address

1550159317
rohlem_
andrewrk: this "allowzero" pointer is incompatible with the entire rest of the code base however.

1550159325
andrewrk
correct

1550159333
rohlem_
I would rather propose that non-optional pointers are _always "allowzero"-enabled.

1550159349
rohlem_
The type system already gives us checks anytime we convert between non-optional and optional.

1550159369
andrewrk
if allow zero is enabled then why would pointer casting do any checks on null?

1550159406
rohlem_
Because "unpopulated" and "the one address we chose" are different values, even if their representations (in incompatible types for this value) line up.

1550159427
rohlem_
The same way i8(-128) and u8(255) aren't "the same value"

1550159468
andrewrk
you're saying optional pointers would not support address zero

1550159476
rohlem_
That is why, on conversion, the type system helps us by checking if we're doing something sensible. Turning "no address" (unpopulated optional) into "a special address we only use in edge cases" is not sensible behaviour.

1550159487
MajorLag
forgot-password: if you check the logs, check out this:

1550159492
andrewrk
so if you have a pointer with address zero, and cast it to an optional, you mangle information

1550159525
rohlem_
andrewrk: Yes, they would not support this one address we reserved for this special purpose and only use in kernel code via non-optional pointers.

1550159541
rohlem_
Again, doesn't have to be 0.

1550159552
rohlem_
(if we make it configurable9

1550159685
andrewrk
I do think you're onto something with configurable invalid pointer address

1550159736
emekankurumeh[m]
the freebsd ci still pulls from the master branch

1550159748
andrewrk
emekankurumeh[m], you would have had to rebase onto master

1550159755
rohlem_
andrewrk: In my mind there would be even simpler solutions than reserving a global byte value, f.e. taking the very first stack address (can be implemented in bootstrap code with a single push and then forgotten about), or maybe using some offset into const compiled function data that will never be read by code.

1550159786
MajorLag
andrewrk: did we already have an issue for configurable "invalid" values for optionals? I feel like it has come up before.

1550159810
andrewrk
MajorLag, not that I remember

1550159816
rohlem_
But we always use some trick to guarantee this address / pointer representation never comes up otherwise, just like the C standard guarantees for null pointers.

1550159829
andrewrk
it's a decent solution though, I would just set it to 0xffffffffffffffff in clashos

1550159886
andrewrk
it breaks people's code who use memset to set everything to zero, but we've been discouraging that for a long time now

1550159924
emekankurumeh[m]
instead of memset are we supposed to use `undefined`?

1550159977
andrewrk
if you use memset, every value becomes undefined, unless the type is specified to have a well-defined 0 bit pattern

1550159982
rohlem_
andrewrk: That code was only C-compliant on platforms whose C-ABI uses 0 as null pointer representation before. Since freestanding has no C-ABI, null pointers need to be defined by freestanding systems themselves. If they're defined to be 0, memset still works the same.

1550160035
andrewrk
emekankurumeh[m], if you want something to be a particular value, then you have to assign that value

1550160117
andrewrk
rohlem_, one more consideration. does gcc or clang allow specifying the null value?

1550160135
andrewrk
I don't think it does. clang's stddef.h has #define NULL (void *) 0

1550160156
rohlem_
andrewrk: That is not the representation, that is the C language definition of null pointers.

1550160163
andrewrk
so if your freestanding project mixed C code and Zig code, your zig code with invalid address configured to be non-zero would be incompatible

1550160171
rohlem_
andrewrk: A 0-valued integer cast to pointer type gives you the null value.

1550160173
andrewrk
oh I see

1550160185
andrewrk
how do you get address 0 in C then?

1550160205
rohlem_
andrewrk: If a platform's ABI has a different null value representation, the compiler fills that in (same for usage as conditions etc.)

1550160265
rohlem_
andrewrk: I did link to this in my original comment:

1550160308
rohlem_
Similar to how type-punning in C is sort-of-unintuitively based on whether your compiler understands what you're doing or not.

1550160520
andrewrk
rohlem_, let me approach this a different way: what are your concerns with my approach as specified in

1550160543
Flaminator
What is the preferred way to replace #define/#ifdef/#ifndef/#if defined()? Can't really find anything in the documentation about it. These are only really used for different configurations.

1550160622
rohlem_
There are a couple of misalignments from the solution proposed there to my understanding of the issue.

1550160638
emekankurumeh[m]
see isse #1646:

1550160778
andrewrk
Flaminator, with zig's comptime features!

1550160802
andrewrk
Flaminator, `if` and `switch` implicitly happen at compile-time if the condition/target expression is comptime known

1550160812
andrewrk
and anything in global scope is implicitly comptime

1550160839
andrewrk
and @import("builtin") to find out endianness, OS, architecture, etc. see `zig builtin` for what's available in @import("builtin")

1550160854
andrewrk
if you're looking to specify additional build options I can guide you on that

1550160868
rohlem_
andrewrk: I think I'm still not convinced that extending the pointer type system by "allowzero" is a worth the effort involved, since it is such an exotic use case, and breaks code reuse around these parts even within a kernel's code base... But with you as the (current) only user and implementor, you're probably in the single best position to judge that cost-effect-ratio.

1550160931
rohlem_
My main point was that it doesn't make sense in the context of the type system, or when reasoning "ordinary operation semantics". It's just this really really fragile special case tool, similar to volatile pointers.

1550161022
rohlem_
No library or otherwise reusable code should ever need/want allowzero. But if it's the cleanest way to implement this special case, and the LLVM nonzero-attribute turns out to be valuable for code everywhere else, I guess there's not much arguments against it.

1550161063
rohlem_
Using ordinary pointer types with special builtin functions probably looks even messier than expanding the pointer type matrix.

1550161080
andrewrk
Flaminator, have a look at

1550161117
andrewrk
rohlem_, I completely agree with this: No library or otherwise reusable code should ever need/want allowzero.

1550161120
rohlem_
And while it might be surprising for the dozen freestanding developers that ever _want to access address 0, if it's easy to find in the documentation, it might be the best solution for this use case. But it shouldn't affect into "ordinary code", if at all possible.

1550161149
andrewrk
given that `allowzero` will be a compile error, I think it's safe to say that it shouldn't effect "ordinary code"

1550161156
andrewrk
*a compile error on non freestanding targets

1550161165
andrewrk
*affect

1550161252
rohlem_
Yes, I suppose that's a reasonable warning/stop sign.

1550161277
andrewrk
emekankurumeh[m], want to rebase your pull request on master and see if the freebsd ci works?

1550162004
Flaminator
I am trying to do

1550162449
andrewrk
Flaminator,

1550162608
Flaminator
Ah didn't think of something so easy.

1550162724
andrewrk
Flaminator, and note the `// Do stuff if GPS` branch is omitted at compile time when appropriate, same as #ifdef

1550162750
Flaminator
Yes the compile time stuff is such a great feature.

1550164226
schme245
what would be the Zig equivalent of something like this?

1550164229
schme245
an inline fn?

1550164248
andrewrk
schme245, why not a normal function?

1550164284
schme245
to ensure that there is no fn call overhead

1550164304
andrewrk
is this a performance concern or do you have a semantic reason for avoiding the call frame?

1550164370
schme245
for performance, I haven't done any benchmarks or anything, just curious if it's possible to sidestep the fn call in the same way that a C macro would

1550164432
MajorLag
usually you'd just let the optimizer get it, but you can explicitly mark it inline and, unlike in C, that isn't a suggestion to the compiler. It will throw an error if it cannot inline it for some reason.

1550164468
MajorLag
you can also use @inlineCall to enforce any arbitrary function be inlined.

1550164554
schme245
great! I don't think the `inline` attribute for functions is mentioned in the docs, it's only mentioned in the context of inline for and while loops

1550164586
schme245
I noticed that it could be used on functions but I didn't know what the semantics were, thanks for clarifying MajorLag

1550165001
DutchGh0st
Are you guys subscribed to PewDiePie? if not, would you please do so? Tseries from India is catching up, and we can't let that happen obviously

1550165015
MajorLag
No

1550165049
companion_cube
quite obviously

1550165145
DutchGh0st
If you want, please make it a yes MajorLag, it'd help a bit!

1550165153
andrewrk
DutchGh0st, please stay on topic

1550165177
andrewrk
no ads

1550165188
DutchGh0st
Okey okey, sowrry, won't start about it again :)

1550165269
andrewrk
(ads for something zig related would be an exception, within reason, e.g. a game somebody made in zig)

1550165419
DutchGh0st
yup, my bad, sorry

1550165808
schme245
quickie:

1550180291
knebulae
@andrewrk: iron fist.  even gave me a full and proper definition of a "clear and concise example"  I'm like bro, it's a kernel, kinda hard to isolate :)

1550180347
andrewrk
knebulae, hmm? what are you referring to?

1550180536
knebulae
@andrewrk: that uefi stuff back in late December.

1550180553
knebulae
@andrewrk: my questions weren't very "organized" :)

1550180563
andrewrk
knebulae, I think your first message(s) got cut off? the first one I see starts with "iron fist"

1550180614
knebulae
@andrewrk: the iron first was just in relation to the comments above referencing PewDiePie (or whoever).

1550180651
knebulae
@andrewrk: the second part of the statement was an example of when you were like "look dude, enough babbling, questions!"

1550182894
emekankurumeh[m]
andrewrk: do plan to be a BDFL for zig?

1550182978
andrewrk
yes. with zig team members ready to take over in the event anything should happen to me

1550184214
Flaminator
Will there be any stream tonight?

1550184960
andrewrk
Flaminator, I think I'm going to cancel tonight, I feel behind on issues and stuff

