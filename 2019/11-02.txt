1572654505
bhansconnect
Is the current for of async await in zig limited to one core/system thread?

1572660767
pixelherodev
Thought experiment: what happens if you have two `defer return VALUE;` statements? :P

1572661135
leeward
Can you return in a defer?

1572661146
leeward
It's supposed to happen when you leave the stack frame, right?

1572661242
pixelherodev
Exactly

1572661260
bhansconnect
error: cannot return from defer expression

1572661266
pixelherodev
Makes sense :)

1572661269
bhansconnect
that is what the compiler will tell you

1572662420
leeward
Yeah, that's what I figured.

1572663322
andrewrk
bhansconnect, no, the default is to use a thread pool with number of threads equal to cpu core count

1572663338
andrewrk
zig's async/await language features are thread safe

1572671235
kenaryn
Hi, does anybody know how to deal with user input?

1572671748
wilsonk
kenaryn: I think there is a guess_number example in test/standalone/guess_number that should serve as an example

1572672163
bhansconnect
andrewrk, So for the fun of it, I converted my go multi goroutine factorial program to zig. In zig it will end up only using pinning to only one cpu for most of the computation and not use many of the threads. Not sure why.

1572672169
bhansconnect
this is the code:

1572672368
bhansconnect
It should asynchronously multiply each chuck of the factorial, so I am not sure why it would be only using 1 thread for most of the computation.

1572672534
gsomix
hey, everyone. I'm novice in zig, could you please review a very small program? thanks!

1572672538
gsomix
the code

1572672589
achaninja
gsomix i think you should abort or return an error instead of issue a warning on failure

1572672621
achaninja
generally you want a non zero exit code on failure

1572673378
gsomix
achaninja thanks!

1572673946
gsomix
I've just installed hexchat. haven't been in IRC in ages :)

1572673964
achaninja
:)

1572674037
bhansconnect
andrewrk, I actually just realized the issue. Zig does not consider primitives like u64 as thread safe even if they are constants. Using a chan of u64 to send the parameters causes everything to run in parallel.

1572674178
kenaryn
Thank you wilsonk.

1572674422
wilsonk
no problems kenaryn :)

1572674545
kenaryn
Perhaps do you know a way to write into an external file instead of standard ouput? I do not see how to proceed, neither in the official documentation, nor the 'test' ghitub repository.

1572674656
achaninja
kenaryn, have you found

1572674762
achaninja
I found this

1572674766
achaninja
maybe its what you need

1572674790
kenaryn
Many thanks! I just finished reading the master documentation a few hours ago, but didn't know about standard library's one, you are very kind.

1572674799
achaninja
no problem , i just found it too

1572674805
achaninja
it was linked from the page, but I missed it too

1572674844
kenaryn
ahah yeah... silly me :)

1572676335
andrewrk
bhansconnect, ah, interesting, nice to see people playing with evented I/O

1572676348
andrewrk
it's very new in the std lib, I'm sure there are issues

1572676916
achaninja
im curious about using it to avoid needing 'self pipe' trick in my process supervisor

1572676953
achaninja
basically only react to signals in an event loop somehow

1572676970
achaninja
and block signals while doing any calculation

1572677005
achaninja
pretty interested in zero allocations regardless, zig is looking fun

1572677210
achaninja
does zig anticipate many big upcoming language changes?

1572677255
andrewrk
achaninja, have you seen the 0.5.0 release notes?

1572677268
andrewrk
I recommend at least reading the table of contents and the roadmap section

1572677275
andrewrk


1572677300
achaninja
thank you

1572677310
achaninja
will read

1572677343
andrewrk
short answer: language is not stable yet, but the remaining issues are numbered, and I fully intend to keep the language small & simple

1572677388
andrewrk
some of the planned changes come with deleting features, so it's not even really making the language bigger, just different

1572677412
kenaryn
achaninja Walter Bright, the creator of Dlang, speaks about allocation by no-allocation strategy (i.e. using chain) at 00:45:00 if the topic interest you:

1572677443
andrewrk
thanks, I'll put this on my "watch during lunch breaks" playlist :)

1572677446
achaninja
sure, im interested, thank you

1572677488
achaninja
I wrote this a while ago in rust:

1572677505
achaninja
just addressing the flaws makes me consider zig

1572677558
andrewrk
if you're aware of the downsides: instability due to immaturity, and tradeoff of safety to gain simplicity, then you're in the right place

1572677623
andrewrk
the best way to get changes that you want around here is to have a good use case, so I love that you're already having a project in mind

1572677977
achaninja
Yeah, I accept those problems. zig already seems to have more backing than lots of the other software we all depend on daily anyway.

1572677993
achaninja
so one regard its wise :P

1572678038
achaninja
btw andrewrk , have you considered doing a 'merch' shop for zig

1572678046
achaninja
so people can buy a t shirt or something

1572678073
achaninja
dunno if it would be a success, but just throwing it out there

1572678145
andrewrk
I've considered it, but it's hard to be motivated to spend time on that when there is so much to do on the actual zig project itself

1572678206
achaninja
Yeah, that's a support role required with lots of logistics I guess.

1572679969
andrewrk
this is exciting:

1572680047
andrewrk
btw bhansconnect just so you know - the std lib is not fully hooked up with evented I/O. as a proof-of-concept, reading is integrated, but writing is not yet. and for example these are also not integrated yet: sleeping/timing, child processes

1572680072
andrewrk
by "not integrated" I mean that even when you select evented I/O, writing currently still blocks

1572680093
andrewrk
oh, also file system stuff is not integrated yet

1572680363
pixelherodev
Out of curiousity, what's needed to implement a new backend to the event loop?

1572680494
dantix
There is a thin wrapper around gmp for go. I guess using it will be more apples to apples comparison performance wise.

1572680903
soveran
hi there, I'm just starting with zig and I'd like to know what's the fastest way to print to stdout lines read from stdin

1572680969
soveran
(I tried std.io.readLineSlice(...), but I'd like to know if there's a faster approach)

1572681055
pixelherodev
In theory you could use raw `std.os.read`/`std.os.write`

1572681070
pixelherodev
That's what `std.fs.File` methods do under the hood

1572681101
pixelherodev
So e.g. `std.os.read(std.os.STDIN_FILENO);` IIRC

1572681108
pixelherodev
Not sure what other arguments you'd need

1572681163
andrewrk
soveran,

1572681204
soveran
perfect :-)

1572681225
soveran
is there a way to read lines from the buffer, or I have to search for newlines myself?

1572681338
pixelherodev
You could read one byte at a time, and if it's a newline continue

1572681390
soveran
excellent, thanks a lot

1572681402
pixelherodev
Keeping in mind that this isn't exactly the fastest method

1572681415
pixelherodev
Suggestion: look at the source for readLineSlice

1572681422
pixelherodev
Keep in mind the first rule of optimization

1572681444
pixelherodev
The flowchart definitely helps

1572681445
pixelherodev


1572681580
soveran
yep :-)

1572681591
soveran
actually I wanted to port a simple C program I have

1572681610
soveran
but the result I got was much slower than the C version

1572681638
pixelherodev
Um. std.mem.copy is annotated with `dest.ptr must be <= src.ptr`

1572681642
pixelherodev
Is - is that accurate?!

1572681672
pixelherodev
soveran, profile it!

1572681679
pixelherodev
Are you sure it's the I/O bogging it down?

1572681687
pixelherodev
... wait, does e.g. callgrind work with Zig?

1572681713
soveran
no idea, you are talking to a one-day n00b

1572681717
soveran
here's the C version:

1572681730
soveran
and the zig version:

1572681760
soveran
(I know the zig version can be improved because I'm using readLine)

1572681822
soveran
and there may be some other optimizations, but readLineSlice seemed like the low hanging fruit

1572681886
pixelherodev
How much slower is it?

1572681894
pixelherodev
Did you build in debug mode or in ReleaseFast mode?

1572681932
pixelherodev
I really doubt that readLine is a bottleneck

1572681941
soveran
I tried fast, safe, and small

1572681961
pixelherodev
Also, your strstr implementation could be improved

1572681965
pixelherodev
See std.mem.eql

1572682030
pixelherodev
The inner loop could probably be replaced with `if (std.mem.eql(u8, str[i..i+s.len], s))`

1572682033
soveran
zig version: 0.472u 1.068s 0:01.55 98.7%0+0k 0+0io 0pf+0w

1572682037
soveran
c version: 0.013u 0.003s 0:00.01 100.0%0+0k 0+0io 0pf+0w

1572682113
pixelherodev
Definitely try running under a profiler then

1572682116
soveran
where can I learn more about std.mem.eql?

1572682143
pixelherodev
Should be in e.g. /usr/lib/zig/std/mem.zig IIRC

1572682153
soveran
ah, gotcha. I tried

1572682154
pixelherodev
A word-matching search for eql shows the source

1572682163
pixelherodev
I don't think it'll make a performance difference though

1572682234
pixelherodev
Again, always rely on a profiler to tell you what's really slowing your programs down, don't try guessing

1572682629
andrewrk
soveran, have a look at the readUntilDelimiter functions in std/io/in_stream.zig

1572682659
andrewrk
pixelherodev, yes callgrind works with zig. zig actually has valgrind integration, emitting valgrind-specific annotations for undefined memory

1572682783
soveran
interesting

1572683627
soveran
yea, readLineSlice was the culprit. Thanks a lot :-)

1572683818
pixelherodev
Suggestion: try using readLineSliceFrom with a constant stdin?

1572683878
pixelherodev
i.e. `const stdin = try std.io.getStdIn(); const stream = std.inStream().stream; readLineSliceFrom(&stream, slice);`?

1572683919
pixelherodev
Ah, never mind - the usage of a Buffer slowing it down makes some sense

1572683920
soveran
good, good :-)

1572683936
pixelherodev
I'd think a lot of this would optimize away...

1572683950
soveran
I'll see if I can build a readLineFromBuffer or something like that

1572683957
pixelherodev
I'll probably profile that test later if you leave it up and see if I can improve the stdlib's performance in this regards

1572683980
soveran
great

1572683985
soveran
that would be great, actually

1572710390
mq32
hello

1572729030
mq32
is it possible to construct a "slice" out of a single element?

1572729036
mq32
something like

1572729059
mq32
var byte : u8 = 'A'; printString(byte[0..1]);

1572729210
pixelherodev
Yes

1572729217
pixelherodev
Just take the address of the element

1572729227
pixelherodev
That gives you a pointer, which you can slice normally

1572729241
pixelherodev
So something like `(&byte)[0..1]`

1572729321
fengb
You can’t slice a single pointer. Need a ptrCast

1572729349
pixelherodev
...I'm fairly certain I've done it...

1572729385
mq32
hmm

1572729388
mq32
have to try :)

1572729412
pixelherodev
Though I may have done it for an

1572729417
fengb
There’s a few examples in std.  IIRC it’s @ptrCast([*]T, &val)[0..1]

1572730288
mq32
std.mem.copy(u8, this.target[this.offset .. this.offset + @sizeOf(T)], @sliceToBytes(@ptrCast([*]T, &value))[0..]);

1572730291
mq32
this is wondefully ugly :D

1572730812
fengb
pixelherodev: yeah arrays cast to array pointers seamlessly

1572730838
pixelherodev
Yeah, that makes sense

1572730860
pixelherodev
This is fun. Trying to determine the correct way to read arbitrary data from an ATA drive given a working readSectors function :)

1572730937
fengb
There was a long discussion about pointer reform before my time. It’s a pretty interesting read

1572730956
mq32
pixelherodev: ATA is kinda cool to work

1572730969
mq32
it's the base of pretty much every "Storage I/O" nowadays

1572730991
mq32
everything uses sectors/blocks instead of singe-byte-access

