1554436350
hryx
Looks like Cloudflare had an interesting side effect. Go to the docs page, view source, and search for "email"

1554436509
hryx
The really funny bit is that it detected ptr=i32@7f375d561020 as an email address

1554436737
hryx
Neat feature, but it did the wrong thing in this case, and is kinda a nuisance because it introduced a new network request and the use of JS to the docs

1554438282
torque
ah the old "parse email with regular expressions" trick

1554438294
torque
*email addresses

1554438394
hryx
code block: "hi, I'm an @ symbol with something on my left and something on my right"

1554438400
hryx
cloudflare: "REPLACE HIM"

1554438460
andrewlm
:q

1554447362
l1x
:D

1554462448
develonepi3
ZipCPU: Good morning.

1554468839
ShrewdSpirit
Hello. Is Zig production ready?

1554471216
slugmatt_
hey, anyone know @typeInfo(my_type).Struct.fields is guaranteed to be in the same order declared when my_type is a packed struct?

1554471296
scientes
it should be

1554471306
scientes
and currently they are all in order IIRC

1554471340
scientes
slugmatt_, but there is planned a by-name API, and you should use that when it exists

1554471388
slugmatt_
<scientes "slugmatt, but there is planned a"> awesome. thanks

1554471411
scientes
what are you using this for?

1554471419
scientes
maybe I should work on it...it was my bug

1554471535
slugmatt_
working on a minimal ECS type lib, I just want to ensure everything is updated in correct order

1554471566
scientes
what is ECS?

1554471707
slugmatt_
Entity component system

1554471778
slugmatt_
popular architecture for games at the moment but also useful elsewhere

1554471781
scientes
ahhh, so MVC for graphics

1554471850
slugmatt_
yeah pretty much

1554472115
slugmatt_
the issue is 'get-by-name api in TypeInfo #1439' ?

1554473746
scientes
yes

1554473918
scientes
but andrew spoke of what the api would look like in the logs

1554474007
scientes
@hasField

1554475088
tgschultz
Why do we need a special compiler builtin for by-name again? What's wrong with a std.meta implementation?

1554475273
scientes
tgschultz, O(1) lookup. enumerating all fields is (n)

1554475278
scientes
O(n)

1554475288
scientes
its stored in a hash table, so it can be O(1)

1554475317
tgschultz
it's comptime though, and the same argument could be made for a neigh infinite number of use cases. Why does this one deserve a language feature?

1554475348
scientes
yeah, sure

1554475502
andrewrk
hryx, wtf this is horrible!

1554475591
scientes
I still think it deserves a language feature.

1554475690
andrewrk
tgschultz, there's also the problem of dependency loops. @typeInfo forces a full evaluation of an entire type; whereas if you just want to look at one name that allows more constructs to work

1554475705
andrewrk
for example look at the example in

1554478196
andrewrk
hryx, the email thing is fixed now

1554479069
hryx
andrewrk: great to hear the Cloudflare issue was fixed. I meant to file an issue on the ziglang.org repo last night but fell asleep while searching for a solution :P

1554479099
andrewrk
it was just a toggle button in their control panel, with an unfortunate default

1554481483
andrewrk
tgschultz, do you do anything with @typeInfo Definitions that isn't solved with @field and @hasField ?

1554482655
shritesh
I'm trying to build for wasm with `zig build-obj --release-small --target-arch wasm32 wasm.zig` but it's giving me "Invalid argument: --target-arch". Am I missing something?

1554482879
andrewrk
shritesh, -target wasm32-freestanding

1554482893
andrewrk
you can also try -target wasm32-wapi

1554482917
andrewrk
sorry, -target wasm32-wasi

1554482943
andrewrk
I've been meaning to do a basic verificationt of web assembly support now that we have llvm 8 but I haven't yet

1554482974
andrewrk
hopefully I can do that within 4 days

1554483013
shritesh
Thanks. I'm giving it a try right now.

1554483313
andrewrk
shritesh, I'm happy to provide guidance if you hit any problems

1554483366
andrewrk
see also this issue:

1554484175
shritesh
andrewrk, thanks. There are many wasm-related issues that seem to have been fixed.

1554484661
andrewrk
who wants their zig project mentioned in the 0.4.0 release notes?

1554484670
andrewrk
paste links

1554486909
tgschultz
andrewrk, I'm not entirely sure what you mean, but with enum fields we have meta functions to search by value instead of name as well. This is used by TagPayloadType for example.

1554486941
andrewrk
yeah that's using the fields though - not the definitions

1554486969
andrewrk
having Definitions in @typeInfo sort of breaks the declarative nature of zig's top level declarations

1554487145
tgschultz
Oh, that's what you're going for. Well, meta does use them, let me see if all the ground is covered by @hasField/@field

1554487466
tgschultz
One thing that comes to mind is that @typeInfo/meta differentiates between field and definitions. I can't recall if @field(some_instance, "SomeInstanceStructDef") would work or not.

1554487678
andrewrk
@field / @hasField operate the same way that field access does, so if the first arg is a type, you get the definitions; if the first arg is an instance, you get the fields

1554487702
andrewrk
it's equivalent to `a.b` except `b` is a comptime string

1554487718
tgschultz
ok. I may be misremembering but I think that was actually ambiguous at one time.

1554487796
tgschultz
Anyway, I don't see anything I've touched (meta, serializer, bitstream) that does definition stuff and wouldn't work with @hasField/@field.

1554487830
tgschultz
Although, if one wanted to list all the definitions of a struct, I guess that would go away

1554487847
tgschultz
Unless definitions just have a name in typeInfo and nothing else?

1554487926
tgschultz
Then you can always @typeInfo(@field(T, field)), so I don't think that'd be a big deal.

1554488011
tgschultz
The same could be said for fields. That might actually help cleanup TypeInfo in the long run.

1554488075
tgschultz
No wait, I'm wrong, because I can't use @field to get the field type easily, I'd have to create an instance.

1554488094
tgschultz
*field type from the type

1554488626
scientes
is there a way for me to rerun the azure devops test suite?

1554488657
scientes
this linux failure look spurious

1554488956
tgschultz
If you'd like I can run the CI tests on my own server and let you know what's failing.

1554488987
scientes
nah, i'll just bump the pull request

1554489248
tgschultz
well, I went ahead and did it anyway since my server is otherwise idling and it takes a while. If it errors again I can get you the info.

1554489286
scientes
ok thanks

1554489292
scientes
are you the one with the EPYX?

1554489341
scientes
although the test suite is single-threaded still.....

1554489395
tgschultz
No, my server is an old PowerEdge 2500 III. Free kit is best kit.

1554489759
scientes
I run Linux

1554489774
scientes
I just like to keep hacking, instead of waiting for the test suite to run

1554489940
andrewrk
that's an alarming failure if it's unrelated to your changes

1554489950
scientes
I know

1554489960
andrewrk
how could std.os.Thread.getCurrentId fail with --single-threaded on?

1554489989
scientes
its just gettid()

1554490035
andrewrk
the first line of that test is if (builtin.single_threaded) return error.SkipZigTest;

1554490114
andrewrk
oh. this whole time it's not actually been passing --single-threaded

1554490136
andrewrk
so this is concerning because it was a non single threaded build that failed that test

1554490165
scientes
maybe its a shared system and it ran out of pids

1554490169
scientes
and returns EAGAIN

1554490184
scientes
*tids

1554490195
andrewrk
that's true it could be resource exhaustion. I should update the test to explain that if it happens. in which case it would actually be a spurious failure and not a bug

1554490288
scientes
ThreadQuotaExceeded

1554490300
scientes
and also SystemResources and OutOfMemory

1554490392
andrewrk
gettid is always successful

1554490413
andrewrk
and the error says "test failure" which means it's the expect() that was wrong

1554490417
scientes
no, but that test spawns a thread

1554490425
andrewrk
yeah but the thread spawning worked

1554490436
andrewrk
it didn't return from try os.spawnThread

1554490468
scientes
are you sure?

1554490476
scientes
oh its a race

1554490487
scientes
you have to create a mutex, and wait for the thread to write

1554490494
scientes
or call wait

1554490515
andrewrk
are you looking at the test? the wait() is right there

1554490518
scientes
oh it does that

1554490525
scientes
yeah i wasn't looking at the test

1554490572
scientes
maybe there is no explicit fence when the thread exits

1554490580
scientes
*implicit

1554490610
andrewrk
this is really important to fix or at least understand what's happening

1554490731
scientes
my guess is that we need a @flush(.Release);

1554490737
scientes
at the end of the thread

1554490772
scientes
or rather .Monotonic

1554490895
andrewrk
CLONE_PARENT_SETTID says Store the child thread ID at the location ptid in  the  parent's   memory. The store operation  completes  before  clone() returns control to user space.

1554490923
andrewrk
so thread_id should be valid

1554490925
scientes
i'm talking about the getCurrentId in the child

1554490932
andrewrk
yeah sorry wasn't responding to you yet

1554490935
scientes
that write needs to be flushed

1554490946
scientes
the wait() doesn't do that

1554490954
scientes
that is my guess

1554490978
andrewrk
so why would that be a problem? because the thread_id.* = os.Thread.getCurrentId(); only updates the thread-local cache?

1554490989
andrewrk
is that even a thing? I don't think CPUs have thread local caches

1554490993
scientes
"The store operation  completes  before  clone() returns control to user space." that is not clear. It doesn't say that a memory flush is issued or not

1554491002
scientes
<andrewrk> so why would that be a problem? because the thread_id.* = os.Thread.getCurrentId(); only updates the thread-local cache?

1554491015
scientes
yes, they only write when they get evicted

1554491023
scientes
at least thats how it works on arm

1554491033
scientes
the cache lines

1554491060
scientes
L1

1554491067
mikdusan
aliasing?

1554491087
scientes


1554491131
scientes
this is better:

1554491137
scientes


1554491261
scientes
its not a thread local cache, its a cpu-local cache, and the other thread was run on a differn't cpu

1554491305
andrewrk
so I wouldn't be able to reproduce this on my laptop because it only has 1 cpu

1554491328
scientes
well core

1554491335
scientes
most cpus have multiple cores these days

1554491370
andrewrk
oh right there are core-local caches. that makes sense. so a fence would make the memory observable to the other core

1554491397
Sahnvour
are you implying caches are incoherent between cores on ARM ? that would be very surprising

1554491399
scientes
and then only write when they are evicted, unless you issue a flush instruction

1554491420
scientes
Sahnvour, yeah thats how it works, x86 has exceptions when it comes to detecting self-modifying code

1554491507
andrewrk
ok I can reproduce this easily with

1554491517
andrewrk
thread_id=0 sometimes

1554491529
scientes
well, it should be 0xaa

1554491562
andrewrk
after about 1600 iterations on average it'll have the race

1554491595
scientes
why is it 0 instead of 0xaaaaaa

1554491615
Sahnvour
(what do you mean x86 has only "exceptions" ? From what I know all recent major x86 chips have coherent caches, hence false sharing for example)

1554491633
scientes
oh well i don't know much about x86

1554491637
scientes
i just know that is the way arm works

1554491646
Sahnvour
okay, TIL

1554491655
scientes
note that the flush instruction is only 16 bits, cause its thumb 2

1554491716
andrewrk
scientes, the memory for threads is mmapped directly

1554491717
scientes
I doubt AMD could release a 64-thread cpu without some cache coherancy model however

1554491738
andrewrk
and spawnThread does not write 0xaa to it

1554491744
scientes
ahh, only the stack is 0xaaaa

1554491777
andrewrk
0xaa comes from 2 places: 1. assignment of undefined, writes 0xaa bytes. 2. std.mem.Allocator memsets 0xaa in create/alloc

1554491800
andrewrk
err, (2) is just (1). it's a for loop that assigns undefined

1554491815
scientes
oh ok

1554491839
andrewrk
assignment of undefined also has valgrind client requests by default so valgrind understand's zig's concept of undefined

1554491845
scientes
yeah i saw that

1554491985
andrewrk
scientes, how do you know it's .release?

1554491997
mikdusan
don’t know if it helps - musl puts in `a_barrier()` in it’s pthread_join.c

1554491999
scientes
oh yes

1554492001
scientes
.Release

1554492006
scientes
i get those confused sometimes

1554492041
andrewrk
@fence(.SeqCst); does not fix the issue

1554492088
scientes
hmm, maybe you need it on both sides

1554492109
scientes
yeah, because that memory is already in the cache of the spawning cpu

1554492141
andrewrk
I need to understand this better

1554492195
scientes
me too

1554492345
Sahnvour
andrewrk did you build zig in debug mode on windows ? because I think the instructions to build llvm from source are incorrect for this usecase

1554492374
andrewrk
Sahnvour, I haven't built zig in debug mode on windows for a long time

1554492389
andrewrk
I was unable to figure out how to build llvm/clang in release mode and zig in debug mode on windows

1554492402
andrewrk
so zig in debug mode is really slow

1554492410
andrewrk
on windows, because of llvm/clang being in debug mode

1554492417
Sahnvour
because of

1554492457
Sahnvour
cmake/llvm's cmake defines the iterator debugging level differently on release that on debug target

1554492469
Sahnvour
and that makes it unable to link against a zig using a different definition

1554492568
Sahnvour
thus I think `-DCMAKE_BUILD_TYPE=Release` in LLVM debug mode instructions is wrong and should be `Debug` instead

1554492648
Sahnvour
it's unfortunate not being able to mix debug/release between zig and llvm

1554492696
andrewrk
Sahnvour, you're talking about the wiki yeah? feel free to update it

1554492714
Sahnvour
yeah, wanted to check with you first

1554492735
Sahnvour
my cmake-fu is weak :p

1554492768
shritesh
FYI: building without `-DCMAKE_BUILD_TYPE=Release` has been failing for me with "unused function 'zig_libc_find_native_crt_dir_posix' [-Werror,-Wunused-function]"

1554492870
andrewrk
shritesh, ah, that probably happened in 5866dfe4d970ad10

1554492874
Sahnvour
looking at the code now shritesh, it should be #ifdef'd out on windows ?

1554492885
andrewrk
just need to shuffle some #ifdefs or functions around

1554492887
shritesh
I'm on a mac

1554492932
andrewrk
I can reproduce it. just a moment

1554493172
andrewrk
fixed

1554493183
Sahnvour
msbuild is also awfully slow, I wonder if we shouldn't instead advertise for ninja unless one wants to have a visual studio solution

1554493190
Sahnvour
but that's an additional dependency

1554493211
scientes
ninja is awesome

1554493217
scientes
i use it to build zig

1554493219
scientes
-GNinja

1554493246
scientes
I wish Linux switched to ninja

1554493360
andrewrk
scientes, I bet I know the problem

1554493390
andrewrk
we're giving CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, and the same address for both. so if the child exits before clone returns, the child pid is already cleared to 0

1554493449
andrewrk
which actually is kind of awesome. maybe std.os.spawnThread should be able to return "I did it and the thread has already finished. no resources are allocated."

1554493472
scientes
woah, thats a cool feature

1554493484
scientes
it even does a futex wakeup

1554493499
andrewrk
what do you mean?

1554493511
scientes
read the docs for CLONE_CHILD_CLEARTID

1554493521
andrewrk
yeah that's important, that's how wait() works

1554493536
scientes
but wait() does it in the kernel

1554493569
andrewrk
huh?

1554493574
scientes
man wait4

1554493589
andrewrk
the fact that CLONE_CHILD_CLEARTID does a futex wake is why wait() works at all and doesn't have a race problem

1554493599
scientes
oh I C

1554493674
scientes
it still has a pid reuse problem, but using FUTEX_WAIT would not

1554493689
andrewrk
what has a pid reuse problem?

1554493692
scientes
so maybe we should implement wait() with FUTEX_WAIT

1554493702
andrewrk
I'm literally telling you that's what we already do

1554493702
scientes
the wait4 syscall---it has its own syscall

1554493709
scientes
oh ok

1554493719
andrewrk
std.os.Thread.wait

1554493785
scientes
yeah that is pretty cool

1554493879
andrewrk
I think... I'm actually going to just document this behavior and say that it is correct

1554493912
scientes
that if it returns 0 the thread has already returned

1554493917
andrewrk
right

1554493930
scientes
thread.handle() returns 0 that is

1554493932
andrewrk
whatever pid it was could be recycled by now anyway

1554494412
andrewrk
this makes sense because if you do anything with the pid of a no-longer-existing thread it's a bug

1554494420
andrewrk
this is actually an anti-footgun

1554494868
scientes
its nice

1554497879
mikdusan
would anyone here with linux be kind enough to this 1 liner test and pastie their stack trace?

1554497963
halosghost
sure

1554498066
halosghost
mikdusan: commented

1554498090
mikdusan
yup. i knew something smelled with my lldb. dammit.

1554498115
halosghost
so, I hope that was helpful :)

1554498240
mikdusan
i’m running a rather old lldb (it is from the last xcode for my macos version), and building a new lldb is not functional. so my stack traces are i think a little suspect.

1554498254
halosghost
ah, I see

1554498283
mikdusan
ie. pretty sure i should see “assertional failure” like your trace shows.

1554498292
halosghost
ah

1554498295
halosghost
fernuff

1554499347
andrewrk
I'm drowning in release notes

1554499387
andrewrk
can everyone please stop being so productive around here

1554499391
andrewrk
(just kidding)

1554499461
andrewrk
so far I've made it through October 17, 2018 commit logs

1554500526
mikdusan
hey it’s one of those good problems to have.

1554500879
hryx
andrewrk: sorry but I want to do 2 more tiny zig fmt things for 0.4.0

1554500882
hryx
since we're on a roll

1554500891
hryx
issues incoming :>

1554501891
shritesh
Master is broken. I've submitted a pull request to fix it.

1554501975
andrewrk
shritesh, ah, thanks. I just responded to that

1554502371
andrewrk
shritesh, thanks

1554502379
andrewrk
how's that web assembly stuff going?

1554502396
shritesh
There's already a pull request for that too ;)

1554502720
andrewrk
ah, here are the web assembly options:

1554502736
andrewrk
shritesh, what happens when you don't do --export-all?

1554502768
shritesh
extern functions don't get exported for some reason

1554502777
andrewrk
you mean export functions right?

1554502784
shritesh
yes my bad

1554502926
andrewrk
hmm. does it export any non-export functions when you use --export-all?

1554502980
shritesh
Nope

1554503020
andrewrk
ok. I think your PR is a good starting point, and we can tighten up handling of undefined symbols later

1554503108
shritesh
Yeah. I liked the `extern "wasm"` idea.

1554503115
andrewrk
is --relocatable no longer a thing?

1554503146
andrewrk
oh, that's a general linker option

1554503221
andrewrk
can you try --relocatable instead of --export-all --allow-undefined?

1554503227
shritesh
Sure.

1554503233
andrewrk
with build-obj and build-lib

1554503255
andrewrk
build-exe is the one where we would want everything to be resolved (but might be ok with --allow-undefined for now)

1554504333
shritesh
andrewrk using only --relocatable doesn't produce a valid wasm file

1554504354
andrewrk
noted. OK I'm going to merge your PR, it's an improvement from status quo

1554504464
shritesh
nice

1554504606
Sahnvour
sometimes i miss macros

1554504672
andrewrk
confessions of a zig programmer

1554506400
scientes
uggggh, i don't miss macros

1554506407
scientes
comptime is way better

1554508587
emekankurumeh[m]
but can you do things like return functions that you built during comptime?

1554508627
andrewrk
yes

1554508654
emekankurumeh[m]
nim also has a relatively power macro system that allows async await to be built using the macro system.

1554508656
andrewrk
what you can't do is control flow

1554508670
emekankurumeh[m]
we can do that with zig?

