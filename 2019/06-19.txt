1560904768
tgschultz
daurnimator: I'm not even being specific to languages. For instance, I think package managers as they exist in all the unixes cause way way more trouble than they have ever solved.

1560905116
AlexMax
Hrm, just found out about the \n on windows thing.

1560905160
marler8997_
Have you tried nix?

1560905192
AlexMax
I'm a fan of being opinionated in terms of source formatting, but enforcing a non-native newline style on windows kind of rubs me the wrong way.

1560905249
AlexMax
Not a big deal to set my editor to something else, but I just hope I don't run into problems elsewhere.

1560905268
marler8997_
also no tabs

1560905284
AlexMax
Yeah I saw that too, no complaints about that.

1560905455
AlexMax
\r\n vs \n doesn't strike me as some sort of formatting holy war topic, more platform convenience.  A text file on windows uses \r\n, and \n is supported on a case-by-case basis.  I haven't had to think about line-endings in a very long time, because git seems to do the right thing automatically - storing internally as \n, checking out in the working copy as \r\n.  Now I have to think about it.

1560905591
AlexMax
It's not a gigantic deal, and there have already probably been countless conversations on the topic, and I'm sure there is justification and concensus was probably reached long ago.  Just saying it's odd.

1560905615
tgschultz
AlexMax: zig fmt is meant to deal with that on your behalf. And yeah, it's been discussed entirely too much for something so insignificant.

1560905685
AlexMax
Oh, zig fmt will fix that?  Gotcha.  I'm using VSCode and at least the plugin I'm using it didn't run on save for me.

1560905722
AlexMax
I think I toyed around with it in vim too, where it did run zig fmt automatically, but for some reason indentation always shifted left 4 spaces on a newline.

1560905768
AlexMax
hrm, zig fmt isn't fixing this for me

1560905782
AlexMax
> .\build.zig:1:28: error: Expected test, comptime, var decl, or container field, found Invalid

1560906021
tgschultz
I'm afraid I can't help, I just tell Notepad++ to use LF only, and only zig fmt when I make PRs.

1560906051
squeek502
zig fmt correcting line endings is planned, not implemented

1560906051
AlexMax
Oh there's nothing to help.  Changing this in my editor is trivial.

1560906099
squeek502


1560906132
tgschultz
ah, well that would do it. it seems a simple enough thing to do, just eat all CRs

1560906155
AlexMax
i was just under the impression that zig fmt already fixed that problem, because of what you said

1560906170
tgschultz
I honestly thought it was implemented

1560906299
AlexMax
No worries.

1560906316
AlexMax
I understand how one could be mistaken.

1560907536
cyanmide
Has there been any progress on a language server for zig?

1560907563
AlexMax
My old C project had some crazy cmake stuff set up where it automatically downloaded, built, and made accessible to my main program some dependencies without actually vendoring the source to my repository.  It was a bear to set up, but when I finally got it working it was really quite nice.  What would be the recommended alternative to this in Zig?

1560907630
AlexMax
ExternalProject I think it was called

1560909217
AlexMax
zig build --verbose doesn't seem to actually print anything

1560909223
AlexMax
Should it?

1560912272
mikdusan
only a few things like install artifacts (zig build install) respond to --verbose. maybe try `--verbose-link` but be aware zig-cache is smart enough to avoid relinking when source, compiler or options are the same

1560913252
AlexMax
I was careless and was missing a few things for a working build script, so zig build literally did nothing

1560913275
AlexMax
so that would explain why --verbose didn't work - it did, there was just nothing to show :P

1560916193
andrewrk
cyanmide, no progress to report, check back in a release cycle or two

1560917496
curtisf
What's the cleanest way to loop over a list-like data structure in zig? I see issue for loop over index range was closed :(

1560918442
andrewrk
curtisf, std.ArrayList?  for (array_list.toSlice()) |item| {}

1560918507
curtisf
It's my own data structure, and converting it to a slice would require allocation because the elements aren't contiguous

1560918517
andrewrk
linked list:  while (maybe_node) |node| : (maybe_node = node.next) {}

1560918653
emekankurumeh[m]
or implement your own custom iterator for it

1560918676
curtisf
an iterator like the linked list seems like it would work

1560919286
andrewrk
yeah optionals & while go well together

1560919318
andrewrk
you can also implement an iterator struct with a "next" method, and then it looks like:   while (it.next()) |item| {}

1560919387
curtisf
hmmm I think I've broken the compiler. I'm getting no output from `zig build-exe` but it's not returning successfully

1560919560
emekankurumeh[m]
did you compile it in debug mode?

1560919563
emekankurumeh[m]
the compiler

1560919607
curtisf
I don't remember... is there a way to tell from the binary?

1560919658
curtisf
ah, no I followed the wiki instructions which are Release

1560919679
andrewrk
on windows I was unable to figure out how to get zig in debug mode with llvm in release mode

1560919688
andrewrk
and llvm is practically unusable in debug mode

1560919723
curtisf
ah, that's unfortunate

1560919766
curtisf
I can try to make a minimal failure tomorrow

1560919832
scientes
andrewrk, maybe you at least build a release tablegen LLVM_OPTIMIZED_TABLEGEN=true

1560919858
andrewrk
scientes, what is that and why is it not on by default?

1560919871
scientes
its for when the rest is debug

1560919876
andrewrk
nice work on fmuladd btw

1560919891
scientes
and the LLVM defaults are horrible, such as doing parallel linking  by default

1560919918
scientes
tablegen is how llvm generates code, its documented here

1560919926
scientes
*generates assembly

1560919939
andrewrk
unrelated: I tried building zig with emscripten for webassembly so that there could be a client-side zig sandbox in the browser. I got 7% through compiling LLVM:

1560919941
scientes
well, tablegen is so important it has its own page

1560919972
scientes
I didn't think emscripten support 64-bit ints

1560919988
scientes
which is part of c99 compat

1560920000
andrewrk
in a turing complete language you can do anything

1560920006
scientes
well......

1560920062
andrewrk
emscripten cannot self-host yet:

1560920085
scientes
if its compiling to wasm then it should support 64-bit ints

1560920095
scientes
i guess emscripten isn't the same thing i knew when asm.js was around

1560921143
curtisf
ooo, it turns out it was caused by me using `var` as a return type

1560921297
andrewrk
curtisf, ah, yes, sorry that is potentially planned but not currently implemented, and in some situations crashes rather than printing a helpful message

1560921317
andrewrk
return type inference proposal:

1560921329
curtisf
Yea, as I started removing things I got that error message

1560921345
curtisf
Would it be useful to share the program that causes the crash without the message? It's rather small

1560921457
andrewrk
it might be, but I can't promise anything

1560921476
curtisf
well, here it is:

1560921523
curtisf
I'm about a week behind master so I guess it's also possible it's been fixed

1560922614
andrewrk
unlikely on this one

1560924428
marler8997_
Is there a way to know which commit the packages were generated from on the download page?

1560924465
marler8997_
oh you know what, I'm an idiot....the sha is right there in the filename

1560924470
marler8997_
der

1560929139
gonz_
What's the magic invocation to get the Visual Studio debugger to correctly watch variables and list locals for a zig executable? The PDB and everything is all there.

1560930184
ki9a
gonz_: you open the .exe as a project in vc++ and it doesn't show locals?

1560930196
gonz_
no

1560935185
gonz_
Nevermind… I was just testing with a too minimal example…

1560940988
BitPuffin
so var as the type in function parameters results in comptime ducktyping or something?

1560940991
BitPuffin
was trying to read some std lib code

1560950487
marijnfs_
BitPuffin: it's more like templating, the function get's explicitly compiled with the type you provide

1560950527
BitPuffin
hmm well they seem to go hand in hand in zig

1560961398
daurnimator
BitPuffin: yeah pretty much compile time ducktyping

1560962300
AlexMax
Hrm, curious.  addIncludeDir() seems to use -isystem instead of -I.

1560962374
AlexMax
I'm not sure it can build one of my C project's without modification, as I (perhaps foolishly) used -Ifoo/#include "bar.h" instead of #include "foo/bar.h"

1560964218
FireFox317
AlexMax: did you know you can use @cInclude and @cImport inside zig code to include c code?

1560965217
tralamazza
FireFox317: the PROVIDE was really the magic, thanks again

1560965229
tralamazza
unfortunately the @export with .Weak did not work

1560965378
FireFox317
tralamazza: Nice! Good to hear. What microcontroller are you programming? I'm trying to program a stm32 cortex m4, but if I set the correct size for the RAM I get a hardfault and if I set the size a bit smaller it works. However, debugging is kinda hard since I can't single step on the actual hardware

1560965591
tralamazza
I have a bluepill laying around, gonna use that for now

1560965597
tralamazza
but eventually port to nrf52

1560965633
tralamazza
which stm32 exactly?

1560965636
tralamazza
f4?

1560965953
FireFox317
tralamazza: Jup: stm32f446re

1560966021
marler8997
I've just finished a tool that will download the latest zig compiler on windows:

1560966025
marler8997
python3 downloadlatest

1560966056
marler8997
currently requires curl, but planning on adding support for more http download clients

1560966112
marler8997
after running this tool, you should be able to execute the latest zig compiler, you don't even need to update your PATH

1560966181
tralamazza
oh there is a zig in chocolatey

1560966211
marler8997
does it let you download the latest zig compiler?

1560966474
Sahnvour
it's also in scoop I think

1560966510
marler8997
you can download the latest zig compiler with these? from master?

1560966714
marler8997
I downloaded chocoloatey but not able to figure out how to download the latest compiler from master

1560966721
Sahnvour
on scoop it's 0.4.0 it seems

1560966773
marler8997
it probably doesn't make since to push every build of zig to a package manager's metadata

1560966781
Sahnvour
yep

1560966794
Sahnvour
I'm not sure they want that

1560966802
Sahnvour
and someone has to do it

1560966839
marler8997
yeah, sounds like chocelatey and scoop are a different use case than what my script does, which is just to download the latest bleeding edge compiler from ziglang.org/download

1560967734
tralamazza
choco seems 0.4 also

1560967781
marler8997
maybe there's a way to ask choco/scoop to install the latest master, but haven't seen a way

1560968668
daurnimator
marler8997: something I've suggested for windows in particular is a fully-self-contained zig binary

1560968700
daurnimator
==> just download zig.exe and e.g. the std library and all the libcs are bundled in there

1560972938
Tetralux
daurnimator: I like to be able to open the source code of std, so I wouldn't want that to be the only choice. Seems okay as an option though. I'm curious if there's a specific reason why you want that.

1560973702
daurnimator
Tetralux: distributing software to windows... standalone .exes are

1560973749
daurnimator
whether its because they copy/paste around the .exe and expect it to work. or they don't have permissions to install anything. or that for some reason people just swap out dlls and expect software to keep working

1560975260
Tetralux
I figured it might be something like that. Was just curious if it was a different reason :p

1560975326
Tetralux
Only reason I like having it not like that is because I can fiddle with code in the std library if I want/need to, and then revert it later.

1560975347
Tetralux
Mainly for debugging or narrowing down problems.

1560975349
Tetralux
Stuff like that.

1560975379
Tetralux
But yeah. Could be cool though. "One file. One programming language." xD

1560975401
Sahnvour
daurnimator: you should be hyped by V then /s

1560975418
mikdusan
oh you had to go there :)

1560975431
daurnimator
Tetralux: it would be just one installation option.

1560975448
daurnimator
and 'installation' here is generous :P

1560975454
Tetralux
Yeah

1560975456
Tetralux
I gotcha.

1560975464
Tetralux
I like the idea.

1560975492
Tetralux
:)

1560976559
emekankurumeh[m]
perhaps zig will have its own std bundled in the executable and you can use --override-std-dirbti override that with a text version

1560976847
marler8997
having the zig compiler binary and standard library as separate files doesn't really  bother me, but maybe it would make distribution easier for others

1560980449
marijnfs
i wish zig didn't have semicolons

1560980512
AlexMax
FireFox317: I know you're not here anymore, but I was trying to do the "zig as build system" thing first, and for whatever reason, cc was ignoring my headers when passed as -isystem but when passed as -I (by using --verbose on the build step and modifying the command line by hand)

1560980521
AlexMax
things worked just fine

1560980568
AlexMax
I know it's probably some misunderstanding of how clang handles headers, but it just seems odd to default to -isystem and give no -I option.

1560980829
AlexMax
through the use of addIncludeDir()

1560982232
marijnfs
to use the serializer, do you need to calculate the memory first?

1560982786
tgschultz
daurnimator: what's the advantage of a single exe over the current status quo of a zipped folder?

1560982867
daurnimator
tgschultz: less effort for a user; less things that can go wrong

1560982890
tgschultz
...than unzipping a folder and putting it anywhere you want?

1560982908
daurnimator
yep.... so many people have weird workflows

1560982933
daurnimator
many projects have standalone .exe downloads for windows

1560983045
tgschultz
I'm aware of many portable (as zig is) applications, but few that are single exe unless they are simple, like putty. Considering the downside of not having immediate access to the std lib code, not to mention that it would probably have to self-extract to a temp dir anyway... it just seems like needless complication for an edge case that probably has better options.

1560983565
AlexMax
So it appears that -isystem only adds header directories for #include <foo.h> style includes, while -I adds it at the very least for #include "foo.h", possibly also #include <foo.h> as well

1560983892
marler8997
Yeah I'm pretty sure -I allows both types of includes

1560983992
marijnfs
how do i serialize to a variable buffer

1560984002
marijnfs
I'm confused by the stream system

1560984782
daurnimator
andrewrk: good work :) almost there!

1560984837
AlexMax
Okay here is the full `zig cc` command that doesn't work

1560984846
AlexMax


1560984887
AlexMax
I get the exact same error if I change zig cc to `clang-8` my local copy of clang

1560984918
AlexMax
(the error being some missing declarations that should actually exist)

1560984999
AlexMax
If I go in and change -isystem /home/alexmax/workspace/portmino/src to -I /home/alexmax/workspace/portmino/src, the declarations are found.

1560985049
AlexMax
.....oh no

1560985053
AlexMax
.......oh no no no no no

1560985062
AlexMax
the missing symbols are in a header called.....error.h

1560985144
AlexMax
There's already a header called error.h

1560985261
AlexMax
Therefore, whatever system header that is loaded earlier in the zig cc line gets loaded first.

1560985547
andrewrk
result location branch: 599 out of 616 behavioral tests passing

1560985562
scientes
sweet

1560985924
andrewrk
marler8997, are you aware of the json version of the download page?

1560985936
andrewrk
I think I forgot to put a link to it anywhere

1560985959
andrewrk


1560987063
marijnfs
thats still copy ellision?

1560987439
AlexMax
man, i feel like a dummy

1560987455
AlexMax
still, defaulting to -isystem seems kind of like an odd choice, so I opened an issue for it

1560988763
andrewrk
marijnfs, yes it's

