1567210471
andrewrk
this is big:

1567211014
shritesh
I still don't understand async/await in Zig (I tried), but this sounds REALLLY EXCITING :D

1567212832
andrewrk
shritesh, I think you were away when the new async/await stuff landed. I'm still planning on doing another pass to the docs, but the new semantics are much simpler and easier to understand

1567212919
andrewrk
in summary: async functions are just functions! the difference is that you can start the function call, without waiting for it to finish

1567212925
shritesh
I think everything will be much easier to grok once the event loop is in place

1567212930
andrewrk
agreed

1567212977
fengb
I’ve been meaning to blog on creating generators using async

1567213004
fengb
But the code I’ve been writing isn’t very reusable

1567213006
shritesh
Like I followed through you explaining it in your stream and I felt like I understood it. Now when I see the clbin, I have no clue what or why anything is being done.

1567213027
andrewrk
yeah the example is admittedly contrived

1567213081
mikdusan
random thought: i'd like to see an OS kernel give up SMT scheduling and only schedule cores and punt SMT scheduling to userspace. imagine async with 2 to 4 SMT available and this is decent cache locality, decent security locality.

1567213108
andrewrk
I would be interested in that too

1567213140
andrewrk
shritesh, the point of this example is, the fib function has safe recursion and it expresses parallelism, yet it doesn't care whether it's used in an application with an event loop, or a blocking one

1567213195
andrewrk
for number crunching, this is silly. but if the (indirect) recursive calls are to, for example, fetchUrl() or fetchFileFromDisk(), the ability of a library to express this parallelism without forcing threads or an event loop lets you write zig packages that are maximally reusable and optimal

1567213468
shritesh
Yeah. As I said, I understand how it works and really do appreciate how it's different from all the other languages that I've dealt with. But, until the event loop is in place, I don't see myself being able to use it (and that's okay).

1567213535
andrewrk
yep, that makes sense. the beauty of this, is that normal blocking code will

1567213545
andrewrk
so that's kinda the whole point, is that you can ignore it

1567213584
andrewrk
I'm still working towards an actual proof of concept & demo

1567213640
andrewrk
one example of this would be `zig fmt` - being able to toggle whether it uses an event loop (and how many threads to use) with a single pub const declaration next to pub fn main

1567213655
andrewrk
and then looking at the strace output and performance characteristics of each setting

1567213822
shritesh
I don't know how this can be implemented but handling interrupts

1567213830
shritesh
...will be great use for this somehow

1567214132
shritesh
More details: I had to build something like an event loop with the ESP8266 for a class project to handle deep sleep, reading a temperature sensor and posting to an HTTP endpoint. I think async/await functions would have been a better abstractions.

1567214546
andrewrk
yeah. it lets you write code in a synchronous manner, even if that code has to "wait" for things to happen

1567214630
andrewrk
you can even implement constant time mem compare with it. var time = async sleep(1); const is_eql = std.mem.eql(u8, a, b); await time;

1567214898
shachaf
That's not for cryptographic use, I hope.

1567214995
fengb
"Instruction does not dominate all uses!"

1567215024
andrewrk
shachaf, nah, I wouldn't use that. it's not sound to guess the maximum time. Also it's not optimal, it could be much faster if it's done with constant-time assembly instructions

1567215066
shachaf
And also I wouldn't be surprised if that approach leaked some timing information anyway?

1567215075
andrewrk
fengb, sounds like 3077 if you're playing with async/await

1567215082
fengb
Oi

1567215092
andrewrk
you can work around it by putting await on its own line

1567215109
fengb
I don't have an await

1567215139
daurnimator
Snektron:

1567215231
fengb


1567215235
meowray
the problem with lld mach-o is that there is no maintainer..

1567215396
daurnimator
knebulae: isn't isaac64 already in std/rand.zig?

1567215700
andrewrk
fengb,

1567215723
fengb
Ah okay

1567215736
fengb
Scary LLVM error

1567215747
andrewrk
yeah. I do want to get that and the await one solved before the release

1567215800
andrewrk
you can see quite a few of these are solved:

1567215991
knebulae
@daurnimator: potentially; but I am not using anything in std

1567216003
daurnimator
knebulae: why?

1567216008
knebulae
@daurnimator: os work

1567216017
daurnimator
?

1567216046
knebulae
@daurnimator: I don't want to rely on any standard library

1567216059
knebulae
@daurnimator: although with zig, I'm not sure that's a big deal

1567216059
daurnimator
knebulae: you can use zig's std in making your own OS. Just avoid std.os...

1567216087
knebulae
No hidden dependencies anywhere?

1567216087
daurnimator
correct

1567216125
knebulae
It's been awhile, but I thought there was a lingering dependency somewhere on libc++.  I may have been completely off base.  Hmm.

1567216167
daurnimator
knebulae: libc is optionally used by some bits of it; by default it doesn't though (unless targetting e.g. OSX where the system ABI

1567216267
andrewrk
yeah libc is only used when that's what you want to do

1567216272
knebulae
@daurnimator: I guess that changes things a bit; I have always avoided all standard libraries when doing osdev.  I guess I never really thought it was an option until now. :/

1567216305
andrewrk
you'll know if something drags in an os dependency. you'll get a compile error

1567216330
knebulae
@andrewrk: gotcha

1567216350
andrewrk
daurnimator, did you see the new test case in

1567216388
daurnimator
andrewrk: not yet. just caught up on irc backlog

1567216756
knebulae
Ok, very cool.  Thanks daurnimator for the heads up that Isaac64 was already there.  It was actually helpful to read the implementation.  Much more "Zig Way" than C guy trying to write C in Zig.

1567216796
knebulae
I think this is the first time I've ever looked at the standard library in Zig.

1567216841
andrewrk
hopefully it should be readable, even to a C programmer who has not read the zig documentation

1567216895
knebulae
@andrewrk: The irony is that I have read quite a bit of the documentation.  I just never stumbled upon anything really about std until I went looking specifically for it.

1567216954
daurnimator
knebulae: yeah std docs are missing right now

1567216991
daurnimator


1567217052
knebulae
So much work.  You're a trooper andrewrk.

1567217337
daurnimator
knebulae: I guess you've got some code swap out for std library things now? :P

1567217350
andrewrk
knebulae, yes I am:

1567217624
fengb
"At this point I felt crazy for even considering Rust. I had accomplished more in 4 days what took me 16 days in Rust."

1567217633
fengb
So when are you porting it to zig?

1567217770
andrewrk
first, package manager. then, rewriting

1567217851
andrewrk
I still use groove basin daily

1567217877
andrewrk
I close it before streaming so people can't see the URL

1567218616
knebulae
@andrewrk: that link brings back memories of a Korg T1, a Roland 808 and Cubase VST in my dorm room. Lol.

1567218701
andrewrk
:)

1567218716
knebulae
@daurnimator: honestly, not yet; there's just not much code there in Zig yet.  This just makes things much easier, and the code is better than mine :)

1567222784
bgiannan
how come a big f64 wont fit into a u64...

1567222900
andrewrk
bgiannan, have you tried @bitCast?

1567222934
daurnimator
bgiannan: are you trying to convert the number? or the memory?

1567223225
bgiannan
bitCast

1567223227
bgiannan
works

1567223267
bgiannan
but i don't get the result i want yet. i'm trying to rewrite a lua snippet and i think in some wrapping is happening

1567223286
bgiannan
i've swapping types around for a while now

1567223351
daurnimator
bgiannan: lua doesn't really have a way to do the equivalent of bitCast... so I'm not sure what you're converting

1567223413
bgiannan
yes that's what i'm saying i should not do a bitCast but some wrapping on a i32?

1567223505
bgiannan
here's the lua (jit) code

1567223563
daurnimator
bgiannan: and x, y, seed are floats?

1567223614
bgiannan
they must be whatever luajit integers are (i32?)

1567223635
daurnimator
bgiannan: luajit integers have semantics of doubles.

1567223668
daurnimator
bgiannan: what I'm asking is: will x, y or seed ever be a non-integer?

1567223686
daurnimator
or is the only float around the return value?

1567223735
bgiannan
yes

1567223770
daurnimator
bgiannan: can you share your zig version?

1567223920
bgiannan
daurnimator,

1567224199
andrewrk
bgiannan, oh, maybe @floatToInt is what you're looking for?

1567224472
daurnimator
bgiannan: looking at it now

1567224485
bgiannan
andrewrk, instead of @bitCast? it will overflow and not compile. But i guess the overflow i what's  making it work in lua

1567224493
bgiannan
is*

1567224722
daurnimator
bgiannan: I'm trying to figure out what luajit does with `bit.band(1.3403027055022e+23, 0x7fffffff)`.

1567224746
daurnimator
reading

1567224881
daurnimator
> Passing ±Inf, NaN or numbers outside the range of ±251 as input yields an undefined result.

1567225304
daurnimator
bgiannan: `bit.tobit(1.3403027055022e+23) == -1081172490` => trying to figure out what the underlying operation for this is

1567225761
bgiannan
daurnimator, btw i tried the equivalent in lua 5.3 and it doesn't work

1567225796
bgiannan
daurnimator, it was in python before:

1567225863
daurnimator
bgiannan: python has bignums. the code there does very different behaviour to your lua version...

1567226351
daurnimator
bgiannan:

1567226982
daurnimator
bgiannan: and translated the python version:

1567227294
andrewrk
ok this is pretty cool: dbandstra made a wasm version of oxid:

1567227509
dbandstra
turned out not to be too hard to do, the main hurdle was the messiness of my own codebase

1567227622
dbandstra
started with a nice copy paste lift from

1567228837
curtisf
Is there any way I can ask the zig compiler for the AST of a source file?

1567228869
curtisf
advanced: with types and comptime info?

1567228944
daurnimator
curtisf: std.parse?

1567228954
daurnimator
uh, std.zig.parse?

1567229015
curtisf
ah, so a library, but not exposed by the compiler

1567229538
daurnimator
curtisf: yeah. though that's the library that will be used by the stage1/stage2 compiler

1567229555
daurnimator
(and what drives `zig fmt` today)

1567229696
curtisf
yea, I guess the unfortunate thing is that I would have to write serialization code for all of the AST. But it's probably too early to commit the compiler itself to a AST serialization format anyway...

1567229962
daurnimator
curtisf: I mean... with enough introspection you should be able to serialize almost any struct to e.g. JSON

1567229981
curtisf
That's true! I'll probably try it out.

1567229990
daurnimator
If you write a JSON serialiser like what I've been planning... you might just be able to pass it an ast node and get it :)

1567232906
curtisf
hmm any guesses why ansi colors are coming out as special characters in command prompt after I updated to current head?

1567242451
bgiannan
daurnimator, thanks!

1567242481
alexander92
btw andrewk

1567242500
alexander92
is there any planned support for a function-level instrumentation api

1567242509
daurnimator
alexander92: 'instrumentation'?

1567242516
alexander92
similar to -finstrument in gcc/clang

1567242601
alexander92
they're useful for writing custom profile/debugging tools

1567242619
alexander92
wich work on a bit higher level than binary instrumentation

1567242662
alexander92
so you can e.g. more easily trace/build profiles/callgraphs etc

1567242693
alexander92
i am not sure how zig generates bitcode

1567242710
alexander92
maybe this is already easy to do with a llvm api?

1567242726
daurnimator
alexander92: yeah if clang has the ability then we can probably add it easily

1567242775
daurnimator
alexander92: btw you might be interested in the use case I reportedin this issue:

1567242978
alexander92
it seems

1567243052
alexander92
this sounds interesting daurnimator, but it requires manual instrumentation

1567243081
alexander92
which is not really feasible in many cases: where you'd like to just compile a big project with auto-instrumenting it in a certain way

1567243111
alexander92
(at least if i understand the issue)

1567243151
Sahnvour
alexander92: I don't know if there is an issue but this is taken into consideration, probably a userland thing though

1567243472
alexander92
sounds great! (i am not sure what you mean by userland in this case tho)

1567243581
Sahnvour
iirc one thing that was considered is patching functions to call a user-provided function that can do whatever you want to log/instrument them

1567243597
Sahnvour
on start and exit

1567243640
Sahnvour
for a more manual instrumenting solution,

1567243859
alexander92
Sahnvour exactly, the first thing "patching to call a user-provided function" is very useful

1567243915
alexander92
e.g. in my job i work on some debugging tools that do similar kind of instrumentation and languages that support that are way easier to work with

1567243940
alexander92
(otherwise we just have to patch a limited set of vm/compiler versions)

1567244031
alexander92
this issue is also important, but it's useful for a different niche: logging libs

1567244104
alexander92
(which is

1567244121
Sahnvour
yep

1567244140
alexander92
especially when you generate 100-s of lines in a longer running async project

1567248632
DutchGh0st
Hi

1567248639
DutchGh0st
I hit a "TODO buf_write_value_bytes union type" compile error?

1567266533
marler8997
is there a way to write a test that makes sure a peice of code fails to compile?

1567267269
kristoff_it
marler8997: I think this is not yet possible. You can momentarily prepare a test in a separate file and check manually that it fails with the right error message. I think some way to do this more cleanly will be added in the future.

1567267290
marler8997
thanks for the info

1567267324
mikdusan
zig standard tests create a harness for that. see test/compile_errors.zig and `test.tests.CompileErrorContext`

1567267396
mikdusan
basically it forks the zig compiler, executes a compile, captures output, groks for expected errors (minus the long part of pathname)

1567267403
marler8997
gotcha

1567267413
marler8997
created proposal here:

1567267418
andrewrk
there's one already

1567267457
marler8997
searching...

1567267475
andrewrk


1567270674
rohlem
andrewrk: Hi; I left 2 maybe-not-so-helpful comments on #1291 (comptime allocators) two days ago (sorry). Today I got a working prototype, but updating to master I think the recent lazy value mechanic threw a wrench in some comptime operations.

1567270748
rohlem
Would you be interested in details, or do you want me to file an issue or something? Or is this already actively under construction and I should just come back to it in a couple of weeks?

1567270963
andrewrk
I'm interested to know what regressed from the lazy value changes

1567270991
andrewrk
if anything I would expect it to help the comptime allocator use case

1567271090
rohlem
Well, my approach was to start with std.heap.FixedBufferAllocator, and simplify that until it all worked in comptime. That was probably less work than anticipated.

1567271334
rohlem
However, now on master the line in mem.zig that `@memset` a new allocation to undefined emits "error: unable to evaluate constant expression"; specifically the subexpression "byte_slice.len - old_byte_slice.len".

1567271394
rohlem
I just checked, and that line was in there before, so I'm pretty sure it "just worked" before and now it "just doesn't".

1567271716
rohlem
actually, maybe control flow changed around there; I'm not so sure anymore

1567271985
rohlem
Okay, a `@compileLog` gets triggered, which means the memset line is definitely comptime-executed

1567271997
andrewrk
that's not what @compileLog means

1567272031
rohlem
Does `@compileLog` trigger in dead code branches?

1567272223
andrewrk
not in comptime dead code branches but yes in runtime dead code branches

1567272255
andrewrk
if @compileLog gets triggered then it means the line is analysed, but not necessarily in a comptime context

1567272407
rohlem
Right; `if(isComptime()) @compileLog();` (using the type trick from #868) is analyzed on the memset line during comptime evaluation. I'm not sure if there's a better way to check.

1567272492
rohlem
Actually, I'll just reduce a test case around the memset, that'll be quicker.

1567277279
rohlem
andrewrk: FINALLY found it; it was due to the change in Allocator.alignedAlloc from 6ab8b2a , but the comptime-known-ness only manifested later in alignedRealloc . So lazy values didn't have directly to do with it.

1567277445
rohlem
Question: Is there a reason mem.zig:237 does `@intToPtr([*]u8,@ptrToInt(ptr))` instead of `@ptrCast([*]u8,ptr)`?

1567277600
rohlem
Also, is there a semantic difference between `@ptrCast([*]T, bytes.ptr)[0..bytes.len]` and `@bytesToSlice(T, bytes)`? Only the former works during comptime.

1567285265
doctorm
On Windows with vcpkg, is there a way to get zig to play nicely with the include dirs it sets up?

1567285376
andrewrk
you can manually add library search paths. I would also accept a PR to integrate linkSystemLibrary with vcpkg

1567285451
doctorm
ok, thanks! new to zig and Windows dev, I may dig into vcpkg a bit and see what it's actually doing

1567285522
andrewrk
have a look at the --help menu if you're using the CLI interface. for build.zig, I believe there are some community members here who have integrated with vcpkg with open source projects that you could look at

1567285833
doctorm
Yeah, I've been looking at a few examples from reddit/github but they seem to have gotten further than I did. Using direct include paths, I managed to get to the point where the files were found, but got a linking error (lld couldn't find libglfw3.a). Tried a different approach using vcpkg export --raw to get a folder, but now GLFW can't find GL/gl

1567285833
doctorm
.h, so don't know if that's problem with the package not declaring its dependencies in a way vcpkg likes, or what.

1567286068
andrewrk
doctorm, did you try --library-path?

1567286095
andrewrk
oh, if it's a .a file you should just put a full path to it on the build line, with --object

1567286133
doctorm
I don't see that the .a file exists, I think it may have been because I was targeting windows-gnu instead of msvc

1567286156
doctorm
I've found the build.zig addLibPath which I assume is equivalent to library-path

1567286178
doctorm
error changed at least when I switched to msvc

1567286184
andrewrk
yes, but if you have a .lib or .a file, that would just be addObjectFile

1567286232
doctorm
ok cool, I'll try and figure out where vcpkg wants me to include gl.h, then use addObjectFile if I can get the linker to complain again

1567286337
andrewrk
it is planned to have a zig package manager. glfw would be a good candidate, because zig could compile it from source without any system dependencies

1567286360
andrewrk
in this case there would be no setup required, you install it as a dependency, wait a minute for it to build, and you're good to go

1567286408
andrewrk
but then the important thing would be that anyone else trying to build your project, would also not have to do anything else besides `zig build`, even if they were on a different OS and wanted to cross compile

1567286429
andrewrk
when you depend on vcpkg you're sort of locked in to a native build

1567286446
andrewrk
but that's not available yet. one thing at a time

1567286491
doctorm
Would love that, cargo was the thing that really helped me start getting into systems programming coming from a scripting language background. Seems like I get stuck on this kind of stuff each time I take a weekend foray in otherwise

1567286509
andrewrk
yeah. dependencies are the trickiest thing in C/C++

1567286524
andrewrk
(and zig until the plans can be realized)

1567286782
doctorm
Yeah, and a better understanding on my part would definitely go a long way, but it's a lot easier to get the motivation to sit down and play with some graphics in a neat new language than it is to sit down and really figure out how to untangle how C/C++ linking works and how it differs between platforms. I was able to at least get zig compiled real

1567286783
doctorm
ly easily with the Wiki entry, so +1 for that.

1567286833
andrewrk
thanks, yeah I meticulously keep that up to date

1567286852
andrewrk
there are downloads of master branch btw though

1567286869
andrewrk
building from source is more when you want to contribute to the std lib or the compiler itself

1567287021
doctorm
Ah yeah, I was actually getting an error on the master branch download from "zig targets". Available glibc versions: Assertion failed.This is a bug in the Zig compiler.Unable to dump stack trace: Unable to open debug info: InvalidPEMagic

1567287050
doctorm
I was figuring out the libc story at the time, and compiling my own made that go away

1567287130
andrewrk
hmm that's good to know

1567287308
rohlem
andrewrk: I'll stop with comptime allocators for today. The basics work now, but a couple of comptime limitations (imo bugs) keep it from being fully usable (for more than integer types).

1567287316
rohlem
I pushed what I have to

1567287339
andrewrk
rohlem, neat, thanks for investigating

1567287367
rohlem
One commit is the file with working test cases (the last one is commented out because it fails to compile), the other contains 3 small patches for std.mem that break the rest of the std but make this work.

1567287497
rohlem
I had to do some workarounds that resulted in really arcane behaviour (slicing in one place working, but not in another). It might be easier for you to just enhance/fix the builtins I had to work around though.

1567287571
rohlem
But the basic ides of initializing and returning a fixed buffer from a comptime block seems to work already, without requiring a new `@comptimeRealloc`.

1567287822
andrewrk
the main point of a new builtin would be releasing memory

1567287914
rohlem
Right. But all the comptime block's "stack" memory is released anyway, right?

1567287952
rohlem
The only thing that "stays behind", when assigned to a global variable, is the block's result value.

1567287972
andrewrk
yes unless it is referenced. with a fixed buffer allocator, let's say it was 10 MiB. 9.9 MiB of it is used at comptime and only a reference to 24 bytes is left over. the entire 10 MiB chunk would end up in the binary

1567288057
rohlem
Worst case we could run the comptime code twice: First with a result buffer "big enough", to determine how much memory we'll end up with, and then with the correct buffer size.

1567288066
andrewrk
but yes if the result is copied, then only the result will end up in the binary

1567288115
rohlem
I was under the impression that returning a struct would trigger copy elision, and use the buffer constructed in-place.

1567288132
rohlem
Or does that not apply during comptime, because the linking-address isn't known yet anyway?

1567288241
rohlem
The buffer size is part of the struct type. The type is implicitly defined by the return statement within the comptime block. So the comptime block could use the first run's "required buffer size" to specify the buffer the returned struct will have... correct?

1567288360
marijnfs
was there no livestream?

1567288383
andrewrk
rohlem, the way it's supposed to work is that the variable's memory is the result location of the block. if you're talking about a global variable initialization

1567288430
andrewrk
marijnfs, not this week. I'm thinking about doing one monday - I hit a milestone last night that I was shooting for

1567289005
Sahnvour
andrewrk: did you think about build.zig files depending on packages already ?

1567289043
andrewrk
yes

1567289140
andrewrk
build.zig is declarative; current plan is there is a build step which is the one that is what the package exports

1567289199
marijnfs
andrewrk: what was it?

1567289229
marijnfs
still some finetuning of async?

1567289231
andrewrk
Sahnvour, current plan is also that there is a separate file, which is not code, it's data, which specifies all the dependencies - with a separate list for unconditional and conditional dependencies - and a field that specifies whether build.zig even needs to execute or whether this is a "simple" package and it's just this one zig file

1567289272
andrewrk
marijnfs, yes -

1567289613
rohlem
andrewrk , if I'm not annoying you yet, here's a (in this branch working) implementation of what I mean.

1567289660
rohlem
Granted, it's just a single block of memory. But if on the first pass-through you could record which allocations end up being relevant, then you could give that information to the allocator the second time around

1567289711
rohlem
so your allocations in pass 2 could end up exactly so that the relevant ones are put into the result location's buffer, and the others are left behind on the comptime-stack.

1567289755
rohlem
(as long as what you're doing is deterministic enough - which, during comptime, should be arrangeable)

1567289935
Sahnvour
andrewrk: I mean what if your project is complex and the build.zig itself needs to depend on packages, not for the project code but to build it

1567289988
andrewrk
Sahnvour, those will go in a build dependencies section in the declarative file, guaranteed to be mapped into place when build.zig runs

1567290008
rohlem
The only scenario I could see being problem were if your operation

1567290058
Sahnvour
okay, so that will be possible, cool

1567290085
andrewrk
rohlem, this all sounds like a bunch of useful stuff that will be relevant when trying to solve #1291. I don't think it's going to be a personal priority for me for a few months

1567290262
rohlem
Okay - your commenting recently made me think it would be within the sooner roadmap. No problem, I'll edit my comment on the issue to include the link to my branch, and hopefully by the time you want to return to it my notes are still decipherable.

1567290689
andrewrk
yeah, fair enough. I just wanted to check in and see what was the new status quo, since I hadn't checked in a while

1567293010
Sahnvour
andrewrk: since creating an object file/library generates a C header by default, it should emit an error if an exported function or type contains zig-specific type that cannot be expressed in C, right? cf

1567293123
andrewrk
Sahnvour, right. for extern structs that check already exists

1567293480
Sahnvour
andrewrk: can you point me where ?

1567294050
andrewrk
Sahnvour: look for type_allowed_in_extern or similar

1567294571
Sahnvour
thanks

1567295875
Sahnvour
so, from the documentation, packed union should follow the same rules as packed struct in that they cannot contain an AutoLayout struct (for example)

1567295906
Sahnvour
in this case, the check is simply missing for unions

