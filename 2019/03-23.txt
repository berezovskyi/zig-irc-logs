1553299487
scientes
pub const arch = Arch{ .aarch64 = Arch.Arm64.v8 };

1553299490
scientes
this is weird

1553299591
scientes
I guess this came from llvm

1553346961
gamester
So I've been working on implementing a kind of "ECS" system that learns from Overwatch and the new stuff Unity is doing, as their approaches are super flexible, simple, and performant at the same time. Definitely the way to go for most code. On top of this Unity is working on something they call the Burst compiler which automatically SIMDifies their ECS code, they say it's already as good as ISPC. This is super interesting and it makes me hope

1553346961
gamester
that I can do something similar at some point by parsing Zig code (using the standard library) and auto converting it to @Vector code. How this will work and how difficult it will be I have no clue at this point as I have yet to think about it. A pipe dream perhaps, or perhaps not!

1553347378
gamester
This would all be directed from tags/comments in the source code which hint to the Zig-to-@vector transpiler on what to do

1553349757
gamester
andrewrk: Could this kind of thing happen in zig?

1553349800
gamester
oops I forgot it's saturday, you might be away :)

1553355258
gamester
andrewrk: Will there be a way to utilize llvm math intrinsics? sqrt, cos, sin, etc

1553361626
andrewrk
gamester,

1553361668
andrewrk
I don't think auto converting to use @Vector makes sense. we should work on manually expressing things using vectors

1553365352
gamester
andrewrk: Well, the Unity Burst compiler is aware of Unity's job system, ECS architecture, containers, and memory layout (not exactly sure what they mean). It's a very specific thing. They need an entire compiler because C# is not powerful enough to let them use a c# to c# transpiler and of course when you've generated code it's always a question on how you combine that with the rest of your codebase especially if you intend it to replace other

1553365353
gamester
code. With Burst they can automatically convert job kernels (that look like very simple c# code) into extremely fast AOSOA code (for example).

1553365428
gamester
In this specific case of using an ECS architecture throughout your engine and game's codebase, I think a solution like this makes sense. In general I agree with you.

1553366147
gamester
andrewrk: Sorry everything's a bit vague still. I wasn't (and still am not) aware of the full details of Unity Burst so I just wrote about the SIMD stuff. I suspect that custom code gen might be worth it, I have some vague ideas about going further than Unity by generating multiple versions of job kernels to optimize some data layout stuff

1553366232
andrewrk
I think this has to do with Just-In-Time vs Ahead Of Time compilation

1553366260
andrewrk
as far as I'm aware, Unity using JIT, and zig is AOT

1553366382
gamester
No, this is about having a compiler that's aware of the details of Unity. (

1553366414
gamester
they're trying to get away from a general purpose compiler

1553366528
gamester
AOT is only part of it

1553369184
gamester
One thing I can do to simplify SIMD programming is making the allocation for all arrays a multiple of the maximum vector length. I wonder if SIMD programmers generally prefer that or if they duplicate their code to handle less data than the vector length

1553369466
gamester
oh or always do a masked load and store

1553377430
Barabas
I think vectorizing existing code is the wrong way to go about it.

1553377555
Barabas
It's better to be explicit about it. Either by writing explicit SSE code or by writing kernels like in graphics apis and ISPC.

1553377571
scientes
yes, auto-vectorization rarely works well

1553377578
scientes
look at how bag gcc's -O3 is

1553377588
scientes
*bad

