1566864414
companion_cube
well, andrewrk, I added billing info on github just for you ;)

1566864496
andrewrk
thanks companion_cube :)

1566864529
companion_cube
smart move from github, I might get a pro account now -_-

1566866203
ntgg
Is there any example code with passing strings from js to zig? I can't seem to figure it out

1566866307
fengb
wasm?

1566866328
fengb
I have an example copying a string out of wasm

1566866384
fengb


1566866443
ntgg
I have out of wasm, I can't figure out how to pass one in

1566866492
fengb
You'll need to clone the bytes into a block of memory accessible in wasm and pass the pointer over

1566866503
fengb
Something like

1566866534
fengb
I malloc some space in wasm, and manually copy the data over

1566866554
ntgg
ah, makes sense, thank you!

1566866671
fengb
np

1566866693
daurnimator
Usually the better solution is to have your zig code provide a buffer to the wasm function

1566866967
fengb
It kinda doesn’t matter for strings since you basically have to do a copy

1566867015
daurnimator
Yes you have to do the copy either way

1566867020
fengb
I suppose in my case I should have serialized directly into a typed buffer

1566867032
daurnimator
But the key thing is that I think its bad for JS code to drive the allocating

1566867036
daurnimator
But also, its rarely a copy

1566867050
daurnimator
You usually want to e.g. convert from JS unicode to wtf-8

1566867162
daurnimator
See

1566867374
fengb
Oh so you can setup ownership at the boundaries?

1566870533
andrewrk
shritesh, I pushed a fix to master for gcc9

1566870611
andrewrk
I tested gcc8 as well and noticed that we didn't need the gcc8 workaround anymore

1566892358
bgiannan
shouldn't i be able to use lldb on zig if i built it with -DCMAKE_BUILD_TYPE=Debug ?

1566892445
bgiannan
zig build is crashing and i'm not able to find what triggers it

1566911188
bgiannan
how can i tell zig that i don't want a variable to be comptime just because it has been initialized with a integer literal?

1566911237
fengb
Um... literals have to be comptime by definition

1566911246
bgiannan
i don't get why

1566911260
kristoff_it
numeric variables at runtime need to explicitly state their type

1566911262
fengb
Because the compiler knows what it is...

1566911266
bgiannan
i'd like to do: var i = 1; if (something) i += 2;

1566911269
kristoff_it
is it usize, i64 or what else?

1566911274
kristoff_it
var i: usize = 1;

1566911284
fengb
Oh that’s what you mean

1566911287
bgiannan
it's: `var height: u32 = 2;`

1566911295
bgiannan
and zig is still saying it's comptime

1566911326
kristoff_it
then it's either a bug or something else, that initialization looks correct to me

1566911335
fengb
What’s the error?

1566911343
bgiannan
error: cannot store runtime value in type 'comptime_int'

1566911354
bgiannan
var height: u32 = 2; height += if (self.title != null) 3 else 0;

1566911364
fengb
Oh bad error

1566911373
fengb
You need u32(3)

1566911424
bgiannan
that worked thanks

1566911441
fengb
The compiler does peer resolution first so it thinks the if statement generates comptime only

1566911465
fengb
There’s an issue to make it use the resulting location instead

1566911650
fengb


1566913797
Tetralux_
m

1566913813
Tetralux_
Whoops wrong window

1566913821
Tetralux_
Afternoon all btw xD

1566913831
mq32
hey Tetralux_

1566913859
Tetralux_
o/

1566913986
mq32
andrewrk, have you figured out how to get an image out of the rasperry pi for clashos?

1566914040
andrewrk
mq32, you mean draw an image on the display?

1566914055
mq32
yeah

1566914092
andrewrk
I didn't personally figure it out but I, incredibly, I got a pull request from someone named "markfirmware" and now there is a zig logo displayed

1566914101
andrewrk


1566914135
mq32
neat!

1566914155
andrewrk
I'm planning on spending some more serious time on this project in october

1566914190
mq32
have to take a look at the code

1566915736
fengb
Buh, since both enum arrays and packed arrays are in userland, I can't actually combine both :(

1566915775
mq32
enum array?

1566915780
mq32
array over enumeration values?

1566916053
fengb


1566916079
samtebbs
I'm gonna be going over some of the oldest issues marked with a milestone of 0.5.0 and seeing if they're still valid or if they've been inadvertently fixed

1566916124
fengb
Just write a bot to auto close old issues :P

1566916126
samtebbs
Hopefully we can get rid of some fixed issues that weren't closed by a PR to make the stats look good

1566916159
samtebbs
fengb: I've actually been thinking of that. Something that will run the code supplied in the issue and see if there are still problems

1566916169
samtebbs
Then auto-close if it's fixed

1566916197
andrewrk
I like to give manual attention to these things

1566916200
samtebbs
You couldn't just close them if they're old since they could still be bugs

1566916206
andrewrk
there is often other important observations besides the test case alone

1566916218
samtebbs
andrewrk: yeah this is a long term project idea of mine

1566916226
fengb
Oh I was joking. A lot of projects closes "stale" issues

1566916244
samtebbs
fengb: Oh right :D Yeah sounds like a bad idea to me

1566916251
fengb
Stale being no recent activity. It's really infuriating

1566916266
fengb
No complaints? Working as intended™

1566916272
andrewrk
I can understand closing "stale" issues that don't have enough information. Other than that, I agree, if it's an open bug with steps to reproduce, wtf?!

1566916284
samtebbs
"We haven't decided to work on fixing this bad bug, hence there's been nop activity, so we're gonna close it!"

1566916308
fengb
I need a better emoji for sarcasm. :P doesn't cut it

1566916317
fengb
I'll bring in the :kappa: if need be

1566916340
samtebbs
"/s" is a reddit favourite

1566916473
andrewrk
Tetralux_, here's your new syntax working:

1566916479
andrewrk
thanks for the help with the parser & zig fmt :)

1566916514
Tetralux_
Outstanding.

1566916521
Tetralux_
And welcome o7

1566916582
andrewrk
I think fixing up / improving the semantics of packed structs will be a separate issue

1566916592
andrewrk
I'm not going to mess with that as part of #3115

1566916679
kristoff_it
is there a way to initialize a struct type with the default type for each field that defines it, and undefined for everything else?

1566916683
samtebbs
andrewrk: Do we know if that helps with #2627 ?

1566916690
kristoff_it
*with the default value

1566916729
andrewrk
samtebbs, that's what I'm not messing with yet

1566916765
Tetralux_
kristoff_it +1

1566916784
andrewrk
kristoff_it, you could set the default value of the other fields to undefined

1566916794
samtebbs
andrewrk: I see, I'll hold off with that issue until then

1566916809
fengb
There's a proposal to expose the default value into @typeInfo

1566916819
kristoff_it
andrewrk: makes sense, but it's generic code, so I don't control the struct definition

1566916894
andrewrk
this seems like a good use case for the proposal mentioned by fengb. if it's possible to briefly explain what you're trying to accomplish on that proposal, it would go a long way toward getting it accepted

1566916915
andrewrk


1566916935
kristoff_it
Ok, I'll write something. Thanks!

1566916971
andrewrk
actually, I think it's pretty reasonable. I'll just accept it. no need to do that chore

1566917018
Tetralux_
std.meta.default(T) anyone? ;;)

1566917178
mq32
fengb: damn, EnumArray is wonderfully straightforward

1566917247
Tetralux_
EnumArray?

1566917412
kristoff_it
oh well, I had already written everything down in this README

1566917436
kristoff_it
which, btw, it's also a good fit for perfect hashing @andrewrk

1566917507
andrewrk
neat

1566917558
fengb
mq32: yeah it's really elegant

1566918246
Tetralux_
Question:

1566918257
Tetralux_
Does @atomicLoad do an atomic add with zero or something?

1566918268
Tetralux_
Or is there an actual instruction it does?

1566918685
andrewrk
see for yourself:

1566918716
andrewrk
on x86_64 it's just a mov. but it has implications for what the optimizer can and can't do.

1566918839
Tetralux_
Wait - x64 loads are always atomic?

1566918964
mq32
Tetralux_, yeah. how do you imagine should the hardware do this? :D

1566918973
mq32
(do it in a non-atomic way)

1566919031
Tetralux_
By naively trying to read a value at the same time as another thread writes it? xD

1566919078
mq32
another "thread" does not exist ;)

1566919084
mq32
you mean "another core"?

1566919096
mq32
there is no "threading" on instruction level

1566919110
Tetralux_
I do mean another core, yeah.

1566919141
mq32
they work in "lockstep", so when a core wants to write memory, the CPU has to make sure that you read that value from the caches right

1566919191
Tetralux
Can another thread not modify the value and invalidate the cache?

1566919196
fengb
There's no half read state for the CPU. That'd be terrible hardware design

1566919216
Tetralux
Or rather, more precisely, is it not the mfence that ensures the cached value is thrown out.

1566919222
andrewrk
atomic instructions are mostly for cache coherence

1566919273
Tetralux
andrewrk: .. meaning that multiple threads will not see the old value after the new value was atomically stored?

1566919284
Tetralux
.. under any circumstances)

1566919302
Tetralux
.. whereas normally each core would read from it's cache.

1566919323
Tetralux
.. and so may not see other's core's writes.

1566919330
mq32
you have to make sure that you actually write your value to the caches, but reading from them is always atomic

1566919330
Tetralux
Or do I have that entirely wrong?

1566919350
companion_cube
I think a core that writes a value will invalidate other cores' cache line on that value

1566919378
Tetralux
mq32: By, "write your values to the caches", you mean "invalidate the other cores caches"?

1566919387
Tetralux
Only I thought that only happened if you use a fence.

1566919437
mq32
i think we have to consult the intel developer manual on that :D

1566919515
Tetralux
The shorter version is, what do I do if I want to ensure that no other core will read the old value once a core atomically writes a new value.

1566919603
andrewrk
that's not how it works in zig or other languages. in zig there are language semantics, and atomic operations have well defined behavior that work across all supported targets, as well as define what the optimizer may do

1566919644
andrewrk
if you write inline assembly, then you can ask yourself this question. but if you're writing zig it's the wrong question to be asking

1566919659
Akuli
what was the question?

1566919680
andrewrk
<Tetralux> The shorter version is, what do I do if I want to ensure that no other core will read the old value once a core atomically writes a new value.

1566919688
Tetralux
Let me be clearer: If you used @atomicLoad/@atomicStore in Zig, then once the call to atomicStore returns, any other atomicLoad will return the new value.

1566919700
Tetralux
That is the semantics on all OSes, correct?

1566919751
andrewrk


1566919770
andrewrk
zig has these same semantics for atomics, except we don't have "consume"

1566919811
andrewrk
(in order for zig language specification to be complete, we will need to have this information in the spec rather than link to c++)

1566919824
Tetralux
My brain hurts just trying to read that page xD

1566919839
andrewrk
see also

1566919857
andrewrk


1566919939
Tetralux
Also, RE asking the wrong question if writing Zig; I disagree - I want to understand the underlying semantics well enough that I can look at the assembly output of Zig and say "Okay - that does <THIS> and looks right to me." - Or the first part, at the very least.

1566919948
Tetralux
But I believe I know what you mean.

1566919974
Tetralux
If you're writing Zig, you shouldn't

1566919993
andrewrk
see also

1566920067
Tetralux


1566920068
Tetralux
See

1566920077
Tetralux
This is why I hate SeqCst and friends...

1566920081
Tetralux
> In addition to the guarantees of unordered, there is a single total order for modifications by monotonic operations on each address. All modification orders must be compatible with the happens-before order.

1566920097
Tetralux
(That's the first sentence for the description of Monotonic.)

1566920112
Tetralux
It tells me nothing. xD

1566920164
fengb
It's funny that C is simultaneous "barely a language atop assembly" and also "not a low-level language"

1566920211
Tetralux
Not a low level language??

1566920235
fengb
That's what andrewrk's article says

1566920259
andrewrk
I'm planning on having the atomics section of the zig language reference be the best resource on the internet for going from 0 atomics knowledge to understanding the nitty gritty details of memory ordering constraints

1566920318
Tetralux
OH MY GOD PLEASE YES

1566920350
fengb
Oh I just read the article. It just means it doesn't map correctly to modern architectures

1566920361
fengb
Kind of a click-baity headline :/

1566920381
Tetralux
But please for the love of something beautiful, mention in those docs that if you just want to make sure that you don't get torn writes ever, to use <insert memory ordering here.>

1566920397
Tetralux
torn reads or writes*

1566920437
Tetralux
Like, I'm guessing that .SeqCst from what I can guess, but I can't make head or tail of the LLVM docs to be confident of that.

1566920448
Tetralux
.. and that just makes me hate the fact that I have to choose one.

1566920569
Tetralux
Like - part of me would rather just use strong cmpxchg everywhere than having to parse the LLVM docs XD

1566920586
Tetralux
JUST because I'm more confident I know what that does.

1566920680
andrewrk
if you're using atomics, you don't get to not think carefully about it and not be informed about the details. if you can't handle that level, use mutexes

1566920734
andrewrk
don't be summoning demons without your necromancer diploma

1566920777
Tetralux
I feel like if just want to make sure that multiple threads can read/write the same value in a sane way, and that summons demons, you're doing it wrong.

1566920813
fengb
I don’t believe they can sanely write to the same memory

1566920841
Tetralux
fengb: You're saying that atomics cannot sanely write to the same memory?

1566920844
fengb
That’s just asking for demons :P

1566920862
Tetralux
Oh - you're referring to two different values aren't you.

1566920864
Tetralux
xD

1566920870
andrewrk
use mutexes or embrace the knowledge of memory ordering constraints. there is no in between

1566920885
Tetralux
I'd rather use cmpxchg everywhere xD

1566920886
fengb
No I’m saying multiple threads with shared write memory is inherently scary

1566920890
Tetralux
Unless you have bloody good docs.

1566920928
mq32
<andrewrk> don't be summoning demons without your necromancer diploma

1566920929
mq32
true dat

1566921017
fengb
Demons aren't undead :(

1566921029
mq32
i still wonder how people mad the concurrent lockless queue

1566921043
mq32
it's over my head, my world is still singlethreaded

1566921076
andrewrk
I tried to make one for 2 weeks straight and failed

1566921129
companion_cube
if you want fun brain puzzles, there's rust' Arc implementation

1566921146
companion_cube
with atomic refcounts using acquire/release and comments about why it's safe 😅

1566921170
mq32
does zig already has some kind of channel/concurrent queue structure?

1566921185
mq32
companion_cube, that's a thing where i say: there MUST be comments about that

1566921194
mq32
nobody understands such stuff without the reasoning behind it

1566921194
Tetralux
mq32: I strongly advise avoiding channels.

1566921197
Tetralux
Just my two cents.

1566921202
Tetralux
For speed.

1566921214
mq32
Tetralux: what alternative would you use?

1566921224
andrewrk
mq32, std.atomic.Queue is a blocking thread safe queue. it needs to get renamed but there it is. for Channel we have std.event.Channel, which interacts with async/await

1566921240
companion_cube
mq32:

1566921265
companion_cube
this does copy-on-write for an Arc<T>, depending on whether the caller is the unique owner of that ref 🙃

1566921331
Tetralux
mq32: Depends on the app; but generally, avoid the copy and intermediate storing of it if you can.

1566921354
Tetralux
There's something else to that, but I'm blanking on it right now xD

1566921378
mq32
yeah, but it's not

1566921406
Tetralux
Semaphore?

1566921433
mq32
and there's the question again

1566921449
mq32
how to try-get a value from a storage with multiple produces lockless?

1566921456
mq32
(so: busy-waiting until something arrives)

1566921461
mq32
but: got to go for now

1566921469
Tetralux
Maybe even just cmpxchg + semaphore for waiting.

1566921482
mq32
yeah but then you have lockstep synchronization

1566921493
Tetralux
That's what the cmpxchg would do, no?

1566921496
mq32
which means each consumer blocks all other consumers

1566921509
mq32
(when waiting)

1566921514
mq32
laters!

1566921519
Tetralux
More later then!

1566922295
mikdusan
andrewrk: if inserting zig-ir during analysis (pass1) should all instr be `ir_mark_gen()` (is_gen=true). and `ir_ref_instruction()` for all added instrs ?

1566922335
mikdusan
(this is in context of hoisting safety checks to llvm-ir -> zig-ir

1566922421
andrewrk
mikdusan, ir_mark_gen just sets is_gen=true. the only thing that does is silence "unreachable code" compile errors when such generated code ends up not being unreachable

1566922467
andrewrk
*ends up getting elided because it is unreachable

1566924335
Tetralux
What should I do if I get linker errors regarding pthread on FreeBSD when attempting to build a zig program?

1566924684
Tetralux
Thoughtful question: Why

1566924690
Tetralux
(see __mm_pause)

1566925074
Tetralux
> What should I do if I get linker errors

1566925080
Tetralux
--library pthread --library c

1566926055
lunamn
are issues where the compiler crashes but i'm not able to find a reproducible test case other than my entire project.. valid?

1566926132
lunamn
it's likely related to coroutine rewrite (even though i don't use coroutines on the projects)

1566926218
Tetralux
lunamn: I've suffered that problem too.

1566926257
Tetralux
Maybe we need a tool that you can run on your codebase that breaks, that makes a source copy and makes changes to the copy until it's like one or two functions but still breaks xD

1566926504
lunamn
well, at least I have tracebacks and know its something related to IR, but other than that i'm completly clueless

1566926573
Tetralux
Do you import other files into your main file in your project?

1566926693
lunamn
i'm unsure what you mean.. one common caracteristic is that they use other libraries and C headers, would that count?

1566926740
Tetralux
I suspect there's a bug related to importing a struct from another file more than once. In my example, a struct field wasn't getting its type set but was trying to resolve it an was asserting.

1566926749
Tetralux
I wasn't able to narrow it down though.

1566926773
Tetralux
It was a Zig struct though.

1566926781
Tetralux
(non extern)

1566926816
Tetralux
Or possibly a union(enum)?

1566926818
Tetralux
I forget exactly.

1566926861
Tetralux
Oh

1566926869
Tetralux
I used GDB to find where it was crashing.

1566926869
lunamn
the tracebacks were related to unions iirc, i'm building current HEAD to make sure

1566926882
Tetralux
Because the stack trace was just a bunch of ???s

1566927229
lunamn
oh huh the traceback mentions the errors happening on llvm, from ir_render_struct_field_ptr

1566927247
andrewrk
lunamn, they're less useful than smaller repros, but I'm willing to have a look at your crash if you make a branch for me and explain steps to reproduce

1566927261
lunamn
gotcha

1566927268
andrewrk
but as you might understand I would prioritize the bugs that already have small test cases

1566927511
marler8997_1
I'd like to use a C library that is installed on the system and has a pkgconfig...zig's build system doesn't already support pkgconfig does it?

1566927527
andrewrk
not yet

1566927558
Akuli
pkg-config support is planned?

1566927560
Akuli
nice

1566927641
Tetralux
Is pkg-config the build system type-thing for Arch?

1566927642
marler8997_1
I'm going to add support for it in my project at least.  I can work on a PR for the standard library as well if you like.  I was just thinking of adding a function to the Builder object to add pkgconfig libraries

1566927702
marler8997_1
It would just run pkg-config, parse it's output and call the corresponding funcitons on builder

1566927749
marler8997_1
let me know if you have a different design in mind and/or if you'd like me to make a PR for std

1566927794
Akuli
Tetralux, no, it's not specific to any linux distro, it's a thing that figures out c compiler flags and linker flags

1566927890
Tetralux
We talking "these are the best flags for building this program on this system"?

1566927903
marler8997_1
pkgconfig provides a tool that you can use to query for libraries installed on the system.   You can ask for C flags or library files for example.  To tell pkgconfig about your package, you install a "*.pc" file with all the information about your package.

1566927906
andrewrk
marler8997_1, I think that it would make sense to integrate pkg-config support with linkSystemLibrary

1566927918
marler8997_1
yeah that interface makes sense

1566927922
andrewrk
linkSystemLibrary should try pkg-config if it exists and is available

1566927924
Akuli
Tetralux,

1566927934
Akuli
Tetralux, i guess you wouldn't want to hard-code things like that into your makefile?

1566927937
marler8997_1
cool I'll work on that

1566927973
andrewrk
marler8997_1, would the api need to be improved? or is just the library name enough?

1566927984
marler8997_1
library name is enough

1566927988
marler8997_1
that's what meson does

1566928035
Tetralux
Akulia, marler, I see. So it's basically a way to say "Hey system! I'd like to link to the system-installed library libfoo. Can you find that for me (and make the flags for the C compiler out of it) ?"

1566928075
Akuli
yeah

1566928084
Tetralux
It seems to me that it would be better to extract out the first part and then just pass on the second part, rather than combining the two, but I guess that makes a little more sense if you want to just have something to make the flags for you.

1566928104
Tetralux
Can pkg-config just print to stdout the paths instead of making them into flags too?

1566928116
Akuli
i don't know, rtfm i guess :D

1566928145
Akuli
hmm the manual page is kinda messy

1566928155
Tetralux
It seems kinda weird to me that you wouldn't validate that the exact version of the lib you want is what the system actually has.

1566928179
Tetralux
I'm not sure why it wouldn't be more useful to vendor it or something.

1566928185
Tetralux
For reliability's sake, that is.

1566928197
Akuli
you can check it with the c compiler though

1566928205
Tetralux
Check it?

1566928207
Akuli
#if LIBFOO_VERSION_MAJOR < 4 #error blabla #endif

1566928213
Tetralux
Oh I gotcha.

1566928221
Akuli
assuming the library defines handy version macros ofc

1566928230
Tetralux
Indeed.

1566928235
Tetralux
Which it prob doesnt xD

1566928242
Tetralux
Or if it does, it ain't consistent or something.

1566928287
Tetralux
Will the zig package manager allow packages to do a similiar thing? "If it's this version, do this, otherwise just do this."

1566928296
Tetralux
Or is the hope that won't be necessary or w/e.

1566928353
andrewrk
so far 2/2 of the false positive "depends on itself" are fixed

1566928360
andrewrk
I'm still looking for more issues

1566928588
FireFox317
Nice andrewrk! Now its time to close al lot of issues right?

1566928596
FireFox317
s/al/a

1566928597
andrewrk
yes

1566928645
Tetralux
OH

1566928653
Tetralux
I JUST REALISED WHAT THAT SUBSTITUTION THING MEANS

1566928666
Tetralux
It's literally the same as

1566928679
Tetralux
> to close a lot*

1566928686
Tetralux
THE WORLD MAKES SENSE NOW

1566928695
andrewrk
easy on the caps lock please

1566928722
Tetralux
Is that because you're afraid everyone'll start doing it? xD

1566928843
fengb
Man, copying over the std is so much faster

1566928896
Tetralux
fengb: the std?

1566928957
fengb
From making zig

1566928971
fengb
It used to take cmake forever but it's now in zig build

1566928980
Tetralux
Oh yeah I gotcha

1566928989
Tetralux
I appreciated that too xD

1566929047
andrewrk
fengb, that's also building libuserland.a at the same time (or skipping it because it's cached) with perfect cache invalidation detection

1566929248
andrewrk
compile errors just got a bit more chatty, we'll see if it's ok or too annoying

1566929278
andrewrk
now there's always a trace of notes saying why something is getting analyzed. it helps with lazy analysis and with dependency loops

1566929327
Akuli
kinda like in gcc?

1566929883
kristoff_it
I'm trying to import a file from the parent directory

1566929896
kristoff_it
whops sorry I tabbed to the wrong window

1566929906
kristoff_it
and by reflex tried to run the last command haha

1566929963
fengb
I'm guilty of dumping :q into all my windows

1566930189
Tetralux
kristoff_it: Yeah - do that exactly thing all the time xD

1566930399
kristoff_it
is any of the lazy evaluation work going to help with recursive functions and error set inference breaking with `function 'foo' not fully analyzed yet`?

1566930446
andrewrk
no, I didn't mess with that in this branch

1566930487
andrewrk
although a similar strategy could work to help with that

1566930718
Sahnvour
andrewrk: about this git-bash assuming mingw thing, I'm not sure it is safe to guess the libc to use based on the shell environment that is detected

1566930777
andrewrk
Sahnvour, I think you're right

1566930777
kristoff_it
I see. Well, to be fair at the moment it's almost a feature because points out when I'm doing bad things with the parser, like a recursion that doesn't have a clear comptime-known end

1566930808
Sahnvour
I bet a lot of people use these shells even for native windows stuff, given how windows' console/terminal emulator is ... meh

1566930827
andrewrk
yes, I've done that myself

1566930851
andrewrk
kristoff_it, I plan on implementing safe recursion soon. I realized that it's related to the async/await stuff.

1566930859
andrewrk
and I have a plan that I think is reasonable

1566930887
andrewrk
code can mostly be structured the same. the only difference will be for recursive functions you'll need an allocator and to handle failure

1566931072
kristoff_it
andrewrk: I think I know what you mean, I'm seeing this when writing the parser for the Redis protocol. 99% of the work is about parsing user-provided types that can be composite (like a struct), so I loop over each field and recur. This works perfectly and the errorset gets resolved, but I also have 'DynamicResponse' type for when you don't know the shape of the reply that you're going to get. That type is recursive because it must be abl

1566931072
kristoff_it
e to parse any possible level of nesting, and as such breaks errorset resk,

1566931079
kristoff_it
*resolution

1566931106
kristoff_it
which is somewhat connected to the fact that it needs to allocate frames when doing async/await

1566931119
andrewrk
kristoff_it, the go-to way to resolve the error inference issues, is to create an explicit error set and use it for a given function, to break the cycle. it's pretty straightforward to do, because you can use an empty set, and then the compile errors tell you which ones you're missing

1566931139
andrewrk
it's true that this stuff is all related

1566931192
andrewrk
there's also a || operator to merge error sets

1566931247
kristoff_it
andrewrk: yes that's what I did too. I have yet to design how I want errors to look like, for now I'm waiting to get a better idea of how the networking part will have to look like.

1566931370
juturnas
How are you intended to perform an async read from a client socket inside an async server's callback?  I've poked around inside the std.event.* code a bit and tried a few things, but no success

1566931412
andrewrk
juturnas, I'm in the middle of redoing all that code. it's leftover from before async/await rewrite

1566931477
andrewrk
the next thing I'm going to try for that API is using std.event.Channel (which also needs to be reworked a little bit) for the connections

1566931563
juturnas
Ah gotcha.  I was hoping to port a little HTTP proxy from OCaml to zig using async.  Is that feasible on either 0.4 or master at the moment?

1566931595
andrewrk
juturnas, not yet, I recommend waiting until the 0.5.0 release which is scheduled for sept 30

1566931627
juturnas
Ah okay, I'll table this for the time being then.  Thanks!

1566931658
andrewrk
it should be quite interesting to play with, we're very close to a big thing here

1566931720
juturnas
Looking forward to it : )

1566932402
andrewrk
one thing that would help, is getting the normal, blocking http API in the std lib improved

1566932439
andrewrk
because that will mostly be the same API for async; the only difference will be the underlying read/write implementation

1566932466
andrewrk
or rather, networking in general, not even http yet

1566932670
juturnas
I haven't written much zig code yet and I'm not sure I could contribute idiomatic code at this point, and the proxy I'm porting also has a custom HTTP implementation because of its use case (fuzzing).  I might start porting it now with sync code, and if I can contribute to the stdlib after getting my feet wet I'd love to

1566932697
Tetralux
I actually went some distance to writing from scratch a thing for sync sockets.

1566932707
Tetralux
It's could use a slimming-pass, but it works.

1566932711
Tetralux
UDP and TCP.

1566932714
Tetralux
Client and server.

1566932749
Tetralux
Only tested on Windows, and that's probably where the slimming pass would help.

1566933072
D3zmodos1
Is there meant to be a difference in the behaviour of command line arguments across windows and linux? I'm getting the name of the executable/command as the first argument on windows but not getting it at all on linux (

1566933220
andrewrk
D3zmodos1, no, that is supposed to be a cross platform abstraction. however , it is possible on linux that the calling process fails to fulfill the convention of giving the executable name as the first arg. what is the calling process in this case? bash?

1566933251
andrewrk
also are you using an old zig version? we had a bug related to this that was fixed

1566933327
D3zmodos1
I'm using zig 0.4.0, and yes its getting run from bash

1566933371
andrewrk
I believe that is fixed in master. next release is sept 30

1566934070
andrewrk
(the following is sarcasm) if anyone is annoyed about the macos CI failures, don't worry. it's an old issue and therefore has been closed as "fixed".

1566934113
fengb
lol

1566934172
Tetralux
Wut

1566934180
Tetralux
The heck are they smoking?

1566934306
THFKA4
same thing as every team i've been on :|

1566934334
Tetralux
Clearly you've not been on the right teams xD

1566934358
Tetralux
Clearly we need more languages where you can easily write an entire software package by yourself in mere minutes.

1566934367
THFKA4
we even have a nifty buzzword for the process, called "bug bankruptcy"

1566934386
THFKA4
you declare bankruptcy, you see, and shed your technical debt

1566934452
bgiannan
andrewrk, is there a way to force the dark mode of ziglang.org?

1566934550
Tetralux
bgiannan: I did it, so I know you _can_.

1566934558
Tetralux
However I do not now know how I did it XD

1566934576
andrewrk
bgiannan, I use the Dark Website Forcer firefox extension

1566934617
bgiannan
ah thx

1566934635
bgiannan
on macOS it switches because of the OS dark mode but on linux i was stuck

1566934637
andrewrk
I would prefer if firefox would respect the system color scheme preferences, but I lost that battle on the bug tracker

1566934649
bgiannan
not possible on chrome?

1566934659
andrewrk
idk I don't use chrome

1566934694
bgiannan
a little switch somewhere on the page would simplify it

1566934727
andrewrk
I think it's better to make the CSS correct, which it is, and let the software ecosystem fix itself

1566934838
Tetralux
"People that use Javascript have the time to fiddle with stuff like that. I thought they had all they're time taken up by just making the thing remotely workable."

1566934845
Tetralux
like that? *

1566935056
marler8997_1
looks like if I call "linkSystemLibrary("xcb")" it just works right now

1566935063
marler8997_1
not sure why

1566935135
andrewrk
most libraries are as simple as -lxcb

1566935174
marler8997_1
well I'm in a nix-shell so the CC environment variables are set...I didn't think zig would use them but it looks like it does

1566935259
andrewrk
yeah, the point of linkSystemLibrary is to integrate with your system. so here, it makes sense to poke around and detect the system

1566935298
marler8997_1
well since it's working now I don't need pkgconfig right now...so I'm going to hold off on implementing that until I find a need for it

1566937839
juturnas
BufferedInStream shouldn't block if the underlying stream doesn't, right?

1566938118
andrewrk
it can still block if the buffer is full

1566938129
andrewrk
err, empty, sorry

1566938460
D3zmodos1
andrewrk: Sorry for the delayed response (I got distracted) but regarding the process arguments differing on windows and linux: Confirmed, after fixing some errors from stdlib changes, I get consistent behaviour across windows and linux when using zig 0.4.0+326b7b79 (the master pre-built binaries on the website)

1566938579
andrewrk
D3zmodos1, good to hear. I'd recommend using that newer version at least until 0.5.0 release

1566938604
andrewrk
zig is getting more stable, but we're still a ways to go before 1.0

1566940025
juturnas
andrewrk what would the design goals be for HTTP in the stdlib?  Ease of use, correctness, perf, ?  Is there a lib in a language at a similar level of abstraction as zig that would be a good reference

1566940345
andrewrk
correctness is primary. I'd start with building the smallest useful abstraction, and then repeat, until the level of abstraction is the desired one

1566940381
halosghost
lwan might be worth looking at

1566940402
halosghost
it definitely has a larger scope than would be wanted in zig's stdlib, but it is a pretty minimal web server in plain C

1566940519
companion_cube
andrewrk: couldn't find why using curl in the stdlib is bad?

1566940571
halosghost
companion_cube: you mean why not to use an external dependency in the stdlib?

1566940586
andrewrk
you're suggesting to ship with curl? that's right out

1566940641
halosghost
yeah, if that's what you're suggesting companion_cube, making a language's stdlib inherently dep on an external project written in a different language is… questionable

1566940651
andrewrk
I think I learned the wrong definition of that phrase from Monty Python. I mean "no we will not ship with curl"

1566940662
fengb
What if we rewrote curl 🤔

1566940669
andrewrk
yeah I mean, that's the idea

1566940676
companion_cube
halosghost: it's the case of almost all languages, isn't it?

1566940679
fengb
zurl

1566940680
andrewrk
what else is std lib networking, but a rewrite of curl

1566940695
fengb
I meant port over all of its quirkiness >_>

1566940702
andrewrk
ah

1566940703
companion_cube
ah, though it'd be socket-level stuff :D

1566940707
companion_cube
thought*

1566940713
companion_cube
curl is much more complicated to replicate

1566940743
andrewrk
the whole point of networking in the std lib is for the package manager, which the main point is to bootstrap dependencies

1566940763
andrewrk
I mean, the whole point of more-than-basic-networking

1566940792
THFKA4
std::ipfs when

1566940793
andrewrk
one of the things zig is bringing to the table is being a reasonably small self contained dependency, that can bring in or build other dependencies

1566940804
companion_cube
do you also plan to reimplement TLS?

1566940900
andrewrk
in addition to declaring package dependencies, there will be a way to declare "fetch dependencies" so that you can get your packages from places that require more involved code such as ipfs or https

1566940914
andrewrk
the recursion has to stop somewhere though

1566941004
andrewrk
we'll start with the stuff that we know needs to be done and continue along those paths until future paths become more clear

1566941095
kristoff_it
andrewrk: yes that's what I did too. I have yet to design how I want errors to look like, for now I'm waiting to get a better idea of how the networking part will have to look like.

1566941104
kristoff_it
jesus sorry I did it again

1566941159
fengb
lol, I tried to follow that chain this time >_>

1566941171
halosghost
companion_cube: not as far as I know

1566941189
companion_cube
so you'd download stuff over http? :s

1566941191
halosghost
companion_cube: any self-hosted language (which should include most systems languages) can't really do that

1566941217
halosghost
companion_cube: I wasn't responding to TLS

1566941221
companion_cube
ah!

1566941236
halosghost
but actually, I think TLS probably doesn't make sense in the stdlib at first

1566941248
companion_cube
I mean, you need a C compiler, right?

1566941267
halosghost
companion_cube: for self-hosting langauges, you only need a different compiler to bootstrap

1566941292
halosghost
Zig is not quite entirely self-hosting yet (that, I believe, is what andrewrk refers to as “stage 2”)

1566941348
juturnas
Probably easier to use HTTP with package signatures of some kind, rather than pulling something gnarly like TLS in, I'd think

1566941358
andrewrk
companion_cube, insecure connections for packages are reasonable given that all dependencies are secured with a cryptographic hash. this is "Trust On First Use"

1566941359
companion_cube
it just sounds to me like, if there's a dep on clang that is to remain, curl isn't that big

1566941373
companion_cube
yeah, using a good hash, ok

1566941402
halosghost
companion_cube: there are plans to allow other backends iirc

1566941409
andrewrk
but yeah I could definitely see a zig curl package being a pretty useful package early on in the ecosystem

1566941434
andrewrk
especially as you noted, zig can build curl from source

1566941450
halosghost
plus, before TLS is in the stdlib (if it ever happens), a TLS-terminating proxy server (à la hitch) might be pretty easy to build in Zig

1566941458
halosghost
that could be a reasonable non-stdlib package

1566941468
companion_cube
so to bootstrap you'd just need to know enough http to download a few archives, check their checksum, and then use curl for the package manager?

1566941508
andrewrk
that's what it will likely look like, early on, for https dependencies

1566941521
companion_cube
ok that makes sense indeed

1566941528
andrewrk
that doesn't address certificate authorities though

1566941575
andrewrk
I need to brush up on how that works, but if those expire on a relatively short basis, that's probably a "system dependency"

1566941612
andrewrk
which in this case, is pretty reasonable I think.

1566941624
THFKA4
they don't. the OSes used to ship with a list of trusted CAs, but these days the browsers have their own lists

1566941645
THFKA4
you could depend on the system's CAs still

1566941724
THFKA4
nixpkgs.cacert is probably on your system right now

1566941827
THFKA4


1566943465
juturnas
So with `BufferedInStreamCustom` with default buffer size (`mem.page_size`), read is blocking.  With buffer_size of 128, it behaves normally, and buffer_size of 64 I'm hitting `EBADF => unreachable, // Always a race condition.` in os.zig.  Before I sink time into debugging this, is there a chance this is working as intended and I misunderstood the

1566943465
juturnas
interface, or does this sound like invalid behavior?

1566943544
andrewrk
hmm is something getting closed too early?

1566943600
juturnas
Let me reduce it and I'll paste it here

1566944678
juturnas
Starting to think I'm making a silly mistake:

1566945212
juturnas
` var handle = std.fs.File{ .handle = client };` is this probably invoking some OS behavior on the socket FD

1566945695
mikdusan
in comptime `var p: [*]u32 = undefined;` non-zero slices are not permitted for undefined pointers (ok):

1566945704
mikdusan
`p[0..0]` is allowed

1566945746
mikdusan
`p[5..5]` is also allowed. is this really desired? would it be ok to require `p[0..0]` ?

1566945944
mikdusan
it's a little inconsistent with arrays comptime checks. an array of len=5 would produce out-of-bounds error with `arr[9..9]`

1566947244
andrewrk
mikdusan, I think there's a good reason to allow 5..5

1566947261
andrewrk
consider, copying 0 bytes into the end of a slice

1566947878
mikdusan
consider `const a = [_]u32{ 1,2,3,4,5 }; var slice = a[6..6];` is out of bounds

1566947886
mikdusan
and `comptime { var p: [*]u32 = undefined; var slice = p[N..N];` is always allowed

