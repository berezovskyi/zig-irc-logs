1568077586
fengb
Casts are noops: u8 in a register == u32

1568077813
Tetralux
That seems strange.

1568077826
Tetralux
Wouldn't the endianness make no difference at all to casts.

1568077924
fengb
LE: loading u8 would be u8 + mask

1568077958
fengb
BE: loading would be u8 + mask + shift

1568078037
fengb
It’s probably trivial but you could chain upcasts and it’d be slightly simpler on LE

1568078088
Tetralux
Remind me

1568078095
Tetralux
If BE is 0x44332211

1568078101
Tetralux
Is LE 0x11223344 ?

1568078103
fengb
Like if you chained instructions like load u8, add u8, mult 16, add 32, there’s multiple casts that’d sorta disappear

1568078118
fengb
Yep

1568078135
Tetralux
So why can't BE just do the same as LE, but from the other end?

1568078157
Tetralux
LE = take first byte, mask off the rest

1568078165
fengb
Because LE: 0x11 = 0x1100 = 0x11000000

1568078171
Tetralux
BE = take 4th byte, mask out the rest.

1568078175
fengb
So bytes never shift when you upcast

1568078187
fengb
So upcast is literally a noop in the register

1568078192
Tetralux
Ah I see what you're saying.

1568078199
Tetralux
But...

1568078207
Tetralux
The registers are in bytes are they.

1568078213
Tetralux
aren't*

1568078218
Tetralux
They're all usize.

1568078265
fengb
Yes, but load also doesn’t need a shift if it’s usize aligned

1568078296
fengb
Again, it’s theoretical and probably doesn’t matter a whole lot

1568078310
Tetralux
My point is

1568078317
Tetralux
Unless I'm not getting how this works

1568078358
Tetralux
They can do the exact same thing as LE, just from the other end.

1568078367
Tetralux
Casts can be noop

1568078393
Tetralux
Because the registers are the same size regardless of endianness.

1568078427
fengb
Ah but we have different register sizes too

1568078446
fengb
u32 vs u64 is more apparent since both exist natively

1568078491
fengb
Oh wait

1568078501
Tetralux
You mean how on most x64 chips, all registers are u64, but you can address a part of them; whereas on your particular BE chip, you have some that are only u32?

1568078537
Tetralux
.. despite being a 64 bit chip

1568078666
fengb
So here’s where I sorta learned the difference:

1568078694
fengb
[]u8 == []u32 for LE

1568078728
fengb
Given regular padding, the pointers start at the same address and the data is “aligned” naturally

1568079244
Tetralux
Huh?

1568079472
fengb
Address are offset by byte count. &[0]u32 == &[0]u8, &[1]u32 == &[4]u8

1568079506
Tetralux
with ya so far xD

1568079518
fengb
The more I think about it... the less I feel like it matters lol

1568079567
Tetralux
XD

1568079586
fengb
On BE, &[0]u32 == &[3]u8 if you’re byte casting

1568079593
fengb
But I’m not sure why you’d do that

1568079639
fengb
Or rather, the 4 bytes of the u32 are reversed if you drill into the bytes

1568079659
fengb
I got that backwards -_-

1568079763
fengb
&[0]u8 is (&[0]u32 + 3 bytes)

1568079774
fengb
This matters for... something...

1568079890
Tetralux
Oh I think I see what you mean

1568079914
Tetralux
Basically, on little, the ptrs are at the "front" of the type, but on big, their at the back

1568079921
Tetralux
back = far end

1568079925
Tetralux
front = near end

1568079974
Tetralux
So, 0x11223344 => &u32 gives you a ptr aligned to the 44, but to 11 for u8.

1568079978
Tetralux
Like

1568079983
Tetralux
The pointer reads to the left.

1568079989
Tetralux
Whereas on little it reads to the right

1568079992
Tetralux
As it were.

1568079994
Tetralux
Is that what you mean?

1568079995
Tetralux
XD

1568080046
mikdusan
i still don't think it matters for casting given equally implemented instruction sets on either machine

1568080095
Tetralux
XD

1568080337
fengb
Historical reason: little endian reads faster because the ALU can operate on lowest byte immediately after fetch >_>

1568080346
fengb
Totally relevant right?

1568080610
daurnimator
fengb: assuming you want to operate on the lowest byte first. In reality you want to work on the highest byte first... that's why network protocols are mostly big endian (and big endianess is called "network byte order")

1568080631
fengb


1568080649
fengb
I was talking pure math :P

1568080670
fengb
And ancient architectures that could only load 8bits per cycle

1568089740
andrewrk
what's a good format to output so that one can copy-paste it into some kind of nice GUI tree view?

1568089771
andrewrk
e.g. if I were to output JSON and then there were some kind of way to expand/collapse nodes

1568090471
hspak
firefox has a native JSON viewer with expand/collapse support, not sure if that's enough to justify JSON though

1568090528
andrewrk
that should be good

1568090532
andrewrk
how do you get to the UI?

1568090601
andrewrk
ah I see, you can simply open a file with ctrl+o

1568090603
andrewrk
this is perfect

1568090615
hspak
yay \o/

1568090641
hspak
you can also just file:///path/to/file.json in the urlbar

1568090842
andrewrk
thx

1568092100
wilsonk_
is there a 'readdir' equivalent in zig?

1568092111
wilsonk_
or just use the C func?

1568092168
andrewrk
wilsonk_, std.fs.Dir.open

1568092182
wilsonk_
ah, ok thanks

1568092193
andrewrk
hspak,

1568094225
hspak
Nice! Glad I could help :)

1568094477
bgiannan
andrewrk, you can also pipe that json output to this tool

1568100898
stratact
After thinking about a project to do in Zig, I'm going to write an mtpfs-like implementation using fuse3 instead of fuse2 with libmtp because the original mtpfs and simple-mtpfs are broken on FreeBSD

1568100938
stratact
hopefully that will solve my problem...

1568106510
samtebbs
Is there a premade allocator made available to tests or do I have to create my own?

1568110885
samtebbs
Scratch that, I can just use the std.heap.direct_allocator

1568113927
bgiannan
samtebbs, std.debug.global_allocator ?

1568125487
dimenus
scientes: I got a garbled stderr print out when using your PR against current master

1568126742
andrewrk
oh, brilliant. I can merge async-std-lib into master. it's just not advised to use until  #3069 is solved

1568126893
dimenus
andrewrk: awhile back you recommended linkers and loaders, would you still recommend that for learning more about the topic?

1568126896
dimenus
or do you have another go-to resource>

1568127304
andrewrk
yes I would recommend it

1568127333
andrewrk
the main thing that it helps with is it gives you the idea of "oh, this isn't some fancy thing, this is just what I would do if I were solving the same problem"

1568127361
andrewrk
so then if you want to understand what a linker or loader is doing, you can just think, "how would I make it work?"

1568130276
firefox317
LemonBoy is on fire fixing all those bugs, nice work!

1568130897
andrewrk
this commit message is worth reading:

1568131164
halosghost
andrewrk: cool!

1568134869
Sahnvour
andrewrk: just became aware that snsystems is doing something kinda similar to zig-cache on a fork of llvm, see

1568134926
andrewrk
indeed that does look to share many of zig's stage2 goals

1568136027
donallen
Sqlite3 has a function sqlite3_bind_text. It takes 5 args, the last two of which are almost always the same. So in C, I define a preprocessor macro, BIND_TEXT, that accepts the first three args and supplies the last two in calling sqlite3_bind_test. I suppose I could do the same in zig by defining a bind_text function and then calling it inline.

1568136027
donallen
But all those @inline calls clutter the code. Is there a better way?

1568136119
Tetralux
Are the last two things basically the same variable throughout the code?

1568136120
Tetralux
Like

1568136128
Tetralux
Can you wrap them into a SqlContext or something?

1568136130
andrewrk
donallen,  how about making a function that has all the args except the last 2, and calling that everywhere?

1568136147
Tetralux
I thought of that too, but where do you store the last two args?

1568136153
andrewrk
if you are compelled to make it inline, you can mark it inline at the declaration. But I don't think you should even do that

1568136172
donallen
Andrew -- yes, that would work, at the expense of function call overhead, which I don't incur with the C macro.

1568136184
Yardanico
donallen: you can define an inline fn

1568136206
andrewrk
zig does not recognize "function call overhead" as a valid concept

1568136220
Tetralux
Huh

1568136221
Tetralux
?

1568136251
Tetralux
Can you elaborate on that? :D

1568136285
andrewrk
absent explicit syntax, zig is free to inline, outline, tail call, sibling call, or otherwise completely re-arrange the logic of programs to optimize the runtime performance. functions are just to communicate semantics, they are not a performance barrier

1568136291
donallen
If I can mark a function "inline" at the fn def site, that's the solution. Except I want to learn more about Andrew's last comment.

1568136407
donallen
Andrew -- I think what you are saying is I should not worry about just calling an ordinary function and leave these little optimizations to the compiler?

1568136409
Yardanico
donallen: instead of "fn" use "inline fn" and zig docs say: "The inline specifier forces a function to be inlined at all call sites. If the function cannot be inlined, it is a compile-time error."

1568136457
donallen
Yardanico -- thanks. I have been playing with zig for all of 2 days, so have not digested all the documentation yet.

1568136461
andrewrk
donallen, yes. putting "inline" on a function definition or callsite is actually

1568136516
andrewrk
in practice, sometimes `inline` can improve performance. It's reasonable to do this when one is maintaining a performance benchmark. But without testing perf, don't do these kind of things

1568136591
Tetralux
I'll just point out that in general, inlining it the primary source of optimization.

1568136592
donallen
Andrew -- ok, got it. I can't tell you how many times I've told other people exactly your last sentence, which amounts to premature optimization. I'll take your advice and leave it to the compiler.

1568136605
Tetralux
That, and being more careful about the cache etc.

1568136644
Tetralux
But yeah, it's no silver bullet.

1568136663
Tetralux
It's just a fairly safe bet, so it seems to me.

1568136787
Tetralux
Also of course, optimizing for speed is not the same as code size, obviously - so if restricting the optimizer gets better speed, but greater code size...  you probably want that a decent chunk of the time.

1568136811
Tetralux
Besides, giving the compiler fewer complicated things to optimize, the better, for compilation speed.

1568136855
Tetralux
.. in debug mode. In release, you obviously don't care quite as much.

1568136904
Tetralux
Though still - giving it loads of work to do - kinda like the linker - the less the better.

1568136941
Tetralux
Inlining is trivial AFAIK - I haven't looked into much of the other fancy things - I imagine tail calling it relatively simple too?

1568137323
Tetralux
Well - either way - I'd probably inline something that simple, but YMMV. Obviously you wanna measure at some point and figure out where the slow parts are.

1568138706
fengb
If it's really simple, Zig tends to inline automatically

1568138711
fengb
Or LLVM does

1568138728
Yardanico


1568138735
scientes
dimenus, can you send me the code to reproduce. The current PR is running into lots of stuff now that it is rebased, some my bugs (and present before), some latent bugs.

1568138878
fengb
How does subarchitecture optimiziation work? Like targeting an Intel family

1568138899
Yardanico
fengb: I think it's like "-march=native" with GCC

1568138927
fengb
Right, but does it prevent executing on other archs?

1568138946
mikdusan
andrewrk: what do you think about splitting out all test-* steps from $REPO/build.zig into their own build files, and have main spawn to call them? it should allow us drop from (4.7G) to about (1.0GB + 1.0GB) of VM requirement. it may complicate build-failure understanding tho.

1568138953
fengb
Or is it just a special arrangement of instructions that goes faster depending on arch

1568138994
mikdusan
i already did a manual trial of test-std, and if that's broken down to 6 groups, we can limit it to 1.0GB

1568139040
Yardanico
fengb: well I don't know if there is a fallback if there's no such feature present, but there was an issue -

1568139230
Tetralux


1568139703
andrewrk
mikdusan, separating into their own build files will save memory in running the build script itself, which I don't think is the problem. they're already executing in child processes

1568139721
andrewrk
splitting std lib tests into multiple could be valuable

1568139786
andrewrk
the first thing I want to do is add a memory profiling configure option so that we can do expensive checks and data collection and present a useful report of what is taking up the most memory

1568139807
Tetralux
Test allocator anyone? :p

1568139820
mikdusan
i admit not having watch test

1568139855
mikdusan
sorry. zig compiling something, not build.zig .

1568139906
andrewrk
I also think that there is probably lots of low hanging fruit in the compiler itself, such that we wouldn't need to do any splitting

1568140052
fengb
Has anyone played with Github actions?

1568140827
andrewrk
Yardanico, I did some basic RISC-V support in the llvm9 branch

1568141471
Yardanico
andrewrk: well, also another thing (not related to Zig though) is that Clang 9 will be able to build the linux kernel, so you potentially (some people might like this) create a fully working non-GNU distro without any usage of GNU programs

1568141485
Yardanico
sadly the xtensa patch didn't get merged to llvm yet

1568141544
andrewrk
Yardanico, it is related to zig because it means you can build the linux kernel with zig :)

1568141659
Tetralux
O.O

1568141665
Tetralux
Sounds good.

1568143313
l1x
:)

1568143325
l1x
andrewrk: i would like to build a non-linux kernel

1568143328
l1x
how about that

1568143434
companion_cube
andrewrk: and when will you be able to run translate-c on linux successfully? 😇

1568143447
Yardanico
companion_cube: wdym? I run it on linux fine

1568143454
andrewrk
probably never. I'm guessing they use macros in silly ways

1568143461
companion_cube
I mean, on the linux source code :p

1568143464
companion_cube
yeah probably

1568143489
andrewrk
oh, actually that doesn't matter for translating source. I actually think we could potentially get that to work

1568144875
Yardanico
hmm, why does Zig compiles with gcc on linux? :D I thought it always used clang even for C++ sources (if clang is available ofc)

1568144897
Yardanico
ah, it seems that the compilation with clang fails because of "undefined reference to symbol '_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@@GLIBCXX_3.4.21'" (at least on my arch linux)

1568144919
Yardanico
ah nvm it seems it used the linker from gcc

1568144995
dimenus
scientes: I'll work on a MRE tonight

1568145027
andrewrk
Yardanico, due to c++ compilers not being ABI compatible, one must use the same compiler to build LLVM/clang and zig

1568145032
andrewrk
I believe this is noted in the readme

1568145035
Yardanico
andrewrk: oh

1568145095
andrewrk
so if you use a system LLVM package you must use the system compiler toolchain to build zig

1568145186
Tetralux
By 'system', you mean if you install LLVM/clang from the system's package manager?

1568145250
Yardanico
well yeah, in my case LLVM and clang were installed from official arch repos (and they use GCC in arch for their packages)

1568145303
Yardanico
it seems the only somewhat working linux distro which uses clang by default is OpenMandriva

1568145354
Tetralux
By 'use', do you mean "compile's their C code with" ?

1568145379
Yardanico
Tetralux: they use clang whether they can in compiling all packages and stuff

1568145403
Tetralux
And where they can't, they use gcc?

1568145424
Yardanico
Tetralux: either try patching the src, or in the most extreme case gcc (e.g. for architectures not supported by LLVM)

1568145428
Yardanico
although I didn't try that distro

1568145477
Tetralux
.. and that LLVM/clang builds more quickly for that matter.

1568145503
Yardanico


1568145614
Yardanico
and their slides for that

1568145668
Yardanico
although that info is a bit outdated, I'm really tempted to try that distro rn

1568145688
Tetralux
Never tried this one.

1568147242
Snektron
LLVM and clang are built with gcc and zig with gcc on my sytem

1568147246
Snektron
No problems

1568147291
andrewrk
that's fine you used the same compiler for both

1568147352
Snektron
Eh sorry, i meant to write clang for zig

1568147378
Snektron
Though clang and llvm are built by the package maintaners

1568147394
andrewrk
you're doing something unsupported. it's fine if it works for you but no help if it breaks

1568147427
Snektron
Haven't run into anything yet

1568147448
Snektron
Afaik clang tries to remain somewhat gcc compatible

1568147450
andrewrk
it can manifest as confusing segfaults

1568148180
Sahnvour
andrewrk: what was the reason to build libuserland unconditionnally again ? instead of depending on std/ and src/ ?

1568148308
andrewrk
Sahnvour, it's unconditionally running `zig build` according to cmake. but `zig build` has its own caching which is correctly resolving the dependencies

1568148474
Sahnvour
the thing is, when you build zig in debug, it's not instant

1568148497
andrewrk
a debug llvm?

1568148511
Sahnvour
both llvm and zig for me

1568148558
Sahnvour
but since it hits the cache, I assume that's only zig-cpp code and llvm is not involved

1568148563
andrewrk
I don't think a debug llvm build of zig is viable for anything other than one-off debugging tasks and the occasional test suite run overnight to catch llvm assertions (as I'm doing now in the llvm9 branch)

1568148724
andrewrk
depending on what you're debugging, you can avoid the libuserland step by making target zig0 instead of zig

1568148747
Sahnvour
with msvc, there's little choice

1568148750
andrewrk
on windows I've been developing with a release build, and switching to debug build only when I need to use the debugger

1568148801
Sahnvour
I mean I could #pragma optimize("", off) every file, or hack CMakelists.txt to turn off optimizations but ...

1568148830
andrewrk
I see zig0.vcxproj

1568148847
andrewrk
msbuild zig0.vcxproj

1568149016
andrewrk
looks like it goes into <build-mode>/zig0.exe

1568149032
Sahnvour
hmm that's OK as long as I don't need features implemented in zig yeah

1568149096
andrewrk
long term, self-hosted zig will let us mix llvm-release with debug-zig

1568149106
andrewrk
short term we're at the mercy of microsoft

1568149153
andrewrk
we could also look into supporting building with clang rather than MSVC on windows

1568149167
andrewrk
idk how complicated that is compared to the msvc instructions

1568149181
Sahnvour
here's the thing : I'm debugging within VS, which will trigger a rebuild of libuserland everytime I start the executable

1568149193
Sahnvour
so, sure, it will hit the cache of previously compiled libuserland

1568149196
Sahnvour
but even that is slow

1568149202
Sahnvour
because it's a debug executable of zig

1568149211
Sahnvour
and llvm is irrelevant here, we're not even calling it

1568149242
andrewrk
it should not trigger a rebuild every time you start the executable

1568149259
Sahnvour
msbuild does

1568149294
andrewrk
running `zig build` makes sense but are you saying zig is actually recompiling libuserland?

1568149323
andrewrk
there's another thing that build step is doing which is installing lib/* files. is that perhaps what is taking the time?

1568149361
Sahnvour
ah ? I thought this was done in the install target

1568149378
dimenus
the install target is the default target now iirc

1568149394
andrewrk
it changed when we moved to zig build doing the install rather than cmake

1568149490
Sahnvour
ok, so that might be it

1568149509
Tetralux_
Sahnvour: Do you mean how, if you run msbuild in a shell, it pauses on "InitializeBuildStatus:

1568149509
Tetralux_
Creating "x64\RelWithDebInfo\zig_build_libuserland\zig_buil.1C4529A9.tlog\unsuccessfulbuild" because "AlwaysCreate" was specifi

1568149509
Tetralux_
ed." ?

1568149521
Tetralux_
Only mine does that every time.

1568149533
andrewrk
Sahnvour, it's avoiding file copy operations if the destination is up to date. but it has to check many files, maybe that is still taking a while

1568149535
Sahnvour
anyways I'd consider it cleaner that the native build system (what cmake generated) be able to tell if there is something to do or not, because in this case it could

1568149571
Sahnvour
andrewrk: would not bu surprised, it's NTFS after all :)

1568149581
Tetralux_
andrewrk: Windows is really slow at enumerating files if you have a lot of them in a directory.

1568149601
andrewrk
Sahnvour, that's not quite correct - previously the instructions were "you have to do the install target after any change, in case lib files are modified". Now the instructions are the same, except it happens in `make` and zig is actually faster at doing the install step than cmake was, according to my timings

1568149627
andrewrk
the difference is that previously it let you avoid the file copying step if you chose the non-install target

1568149642
andrewrk
we often had people here wondering why their changes weren't getting picked up

1568149646
Tetralux_
.. Probably because cmake prints out a line to stdout for every file - notoriously slow on Windows too.

1568149685
andrewrk
Sahnvour, I agree that, for advanced users such as yourself, it would be nice to break the rules and avoid file copies, if you know you didn't modify anything

1568149686
Sahnvour
ok, I see that was error prone

1568149702
andrewrk


1568149736
andrewrk
on linux it's quite fast - `make` with nothing to do is 0m0.669s for me

1568149754
Tetralux
Yeah - in my linux VMs, make with nothing is very fast.

1568149757
Sahnvour
I'm paying much attention to this as I'm deep down into it at work too at the moment ;)

1568149762
andrewrk
and that's checking every single file in lib/* and std/* to see if it is outdated

1568149798
Tetralux
I don't know enough about linux filesystems to know why it's that much faster.

1568149874
Tetralux
Jon Blow ran into the slow Windows file problem before - IIRC it was around ~10,000 files in one directory tree where enumerating them became really slow.

1568149880
Tetralux
lib + std has 8,000.

1568149933
Tetralux
And that's only counting the one's in the root of the repo.

1568149969
Tetralux
(not the build dir)

1568149996
andrewrk
I solved an issue with it being even slower on windows when I made this change

1568150012
Tetralux
Did you have everything in

1568150015
Sahnvour
I guess i'm just not used to work with 'install' targets, instead of having one main target that builds and run directly

1568150089
andrewrk


1568150113
Tetralux
Maybe we have the executable look up a directory for it's lib/std folders, and have the install step just copy zig into root/bin or something.

1568150172
andrewrk
I think building zig0 is a good workaround for this advanced use case

1568150192
andrewrk
--override-std-dir and --override-lib-dir are also available

1568150205
Tetralux
I'm guessing zig0 uses the buildfolder/lib/std for its stdlib?

1568150217
Tetralux
And you could do `--override-std-dir ..` to use the root ones.

1568150224
Tetralux
Is that how that works?

1568150428
Sahnvour
speaking of which, where should --override-lib-dir point to ?

1568150472
andrewrk
lib

1568156690
Tetralux
Is that how that works?

1568156693
Tetralux
Oops

1568156698
Tetralux
Wrong window again lol

1568157519
Tetralux
Hmmm.

1568157538
Tetralux
Does anyone have a good example of struct inheritance in Zig?

1568157562
Tetralux
Like, you have a base  struct which you embed as the first field in the others.

1568157573
Tetralux
And an enum to tell you which sort you have?

1568158993
stratact
Hmm, does Zig have algebraic enums? If so that could work.

1568159178
stratact
With algebraic enums, you can use the values to emulate dynamic dispatch in an inheritance-like fashion

1568159511
stratact
Awesome, Zig does have them, they're called Unions.

