1550027463
emekankurumeh[m]
does the freebsd ci even work? when i submit a pull request that has missing include files it builds just fine.

1550031494
andrewrk
emekankurumeh[m], here are the tests run by the freebsd ci:

1550040956
kristate
andrewrk: hey, are you online?

1550041053
andrewrk
hi kristate

1550041057
kristate
hey

1550041075
kristate
thinking aloud about #1953, but I always wondered why we allow undefined behavior in the first place (instead of using the error infrastructure).

1550041274
andrewrk
kristate, consider that the `+` operator can invoke undefined behavior

1550041316
kristate
andrewrk: right, for these things, at the moment, we would have to panic, but for function calls where we can catch such things, wouldn't it be best to use the error infrastructure?

1550041366
andrewrk
go on

1550041444
kristate
andrewrk: well, we already have the compiler infra in place for calling-out to panic, so I wonder why we couldn't simply return an error up the stack instead of generating code to panic?

1550041598
kristate
likewise, it might make sense to have a special builtin for @intToPtr when the int is zero, ala @zeroPtr and then make @intToPtr try-able,

1550041640
kristate
try @intToPtr([*]const u8, 0) would generate an error.ZeroPointer (for example)

1550041688
kristate
likewise, @intToPtr might be called with a runtime variable that is zero, or another address that might be out of bounds

1550041899
kristate
right now, if you use try in a function that does not handle errors, the compiler complains, and that gives visibility to the programmer

1550042085
andrewrk
that's an interesting idea

1550042101
kristate
think of it this way, I know that we want @intToPtr to map as close as possible to llvm intrinsics, but at the same time, you would check code anyway to see if it equals a nullptr or not. try @intToPtr provides a very zig-way to do it, without the tacky if statement

1550042130
andrewrk
what do you think should happen on implicit cast from C pointer to Zig pointer? e.g. `[*c]u8` to `*u8`

1550042346
kristate
well, I think that there should first be a built-in to do it. it shouldn't be something you can just cast-down to. second, coming from C-land, a nullptr is technically not defined as 0, but is implemented as zero, so I think that this should be impossible: it should only be down-castable to ?*u8

1550042496
kristate
andrewrk: this is debatable and something like bikeshedding, but perhaps ptr to zero should only be available as a [*c] ptr

1550042516
kristate
would we ever have to cast down to *u8?

1550042794
andrewrk
kristate, are you familiar with the motivation behind #1059? are you suggesting only that casting

1550042837
andrewrk
also, I apologize - I am a bit past my bedtime and I'm sure that I am not speaking with as much clarity as normal

1550043096
kristate
andrewrk: please by all means, get some rest :-) about #1059, I am really glad that it is happening and fully supportive of it

1550043221
kristate
andrewrk: maybe we can talk later about this subject. I will post this log as a comment on #1952

1550043234
andrewrk
sounds good to me

1550043239
andrewrk
good night

1550043251
kristate
good night

1550064184
DutchGh0st
have you guys seen this talk?

1550064280
DutchGh0st
Which makes me realize, all the fancy constexpr if stuff he talks about, queries you can make like "does type x have method z?", you can all do in zig *currently*, right?

1550065437
emekankurumeh[m]
i think so, it's just going to be very verbose

1550065543
DutchGh0st
the examples he shows in the D language also are verbose

1550071855
euantor
Endrei is very heavily involved with D if I remember correctly. I remember seeing a video where he was tlaking about some interesting stuff they do with strings, but unfortunately I can't find it now

1550072030
MajorLag
emekankurumeh[m]: it isn't verbose if you use the stdlib: `const has_fn = std.meta.trait.hasFn("fnName")(Type);`

1550072055
emekankurumeh[m]
I forgot about meta

1550073686
ross_k
Hi, I'm trying to build the tetris demo (

1550073688
ross_k
error: no member named 'printf' in 'C:\Users\Ross\Downloads\tetris-master\src\c.zig'     _ = c.printf(c"Error: %s\n", description);

1550073704
ross_k
Tried running from the VS2015 developer command prompt

1550073710
ross_k
(no difference)

1550073776
ross_k
Final zig command line is:

1550073779
ross_k
C:\Users\Ross\Downloads\zig-windows-x86_64-0.3.0+8e68d43a\zig.exe build-exe C:\Users\Ross\Downloads\tetris-master\src\main.zig --cache-dir C:\Users\Ross\Downloads\tetris-master\zig-cache --output C:\Users\Ross\Downloads\tetris-master\zig-cache\tetris.exe --name tetris --library c --library epoxy --library m --library png --library glfw --library z

1550073835
ross_k
Is there an extra step I'm missing to point zig to the MSVC stdio?

1550073930
ross_k
It might be related to

1550083830
andrewrk
hi ross_k, I think I didn't get it building on windows yet.

1550083924
andrewrk
oh, I see you got it building though - I think what happened is @cImport wasn't able to understand the way printf was defined in stdio.h (maybe it was a weird macro or something)

1550083935
andrewrk
we can have a look at the .h file and see if that can be improved

1550093578
schme245
is there an issue for something like Jai's "using" keyword in Zig?

1550093593
schme245
I tried to check on GitHub but that word is hard to search for!

1550093639
andrewrk
schme245, that's where you embed one struct's fields into another, yes?

1550093682
schme245
it might be used for that as well, the use case I'm thinking of is where it brings a structs variable into the scope

1550093737
andrewrk
I believe these are relevant:

1550093997
schme245
well, not really, the case I'm thinking of is more of a syntactic convenience

1550094004
schme245
here's an example:

1550095593
andrewrk
oh I see, you want to use the fields of the struct

1550095620
andrewrk
I don't think that has been proposed, and I would predict resistance to that proposal from myself and others as well

1550095884
schme245
yeah, I kinda figured since it's pure typing avoidance and I know what Zig's stance on that is, but just wanted to throw the question out there!

