1567820758
daurnimator
mikdusan: I was thinking about that the other night. Could we set the popped stack to all `undefined`?

1567820764
daurnimator
(and tell valgrind?)

1567820774
daurnimator
that way valgrind can tell you about stack address escapes....

1567821232
daurnimator
andrewrk: :( I'm sad you committed the start of noasync to master without replying to

1567821687
mikdusan
daurnimator: hmm if valgrind has an api for that (i am oblivious) then something checking return values and in/out params sounds like a win in the pop-direction

1567821717
daurnimator
mikdusan: you tell valgrind which memory is undefined; then valgrind detects reads/writes to those areas.

1567821750
mikdusan
so nesting you are also responsible to remove the undefined range?

1567821776
mikdusan
(or maybe it's smart enough to watch the sp move).

1567821822
mikdusan
ugh. oh i see it just checks immediately. i get it.

1567823151
fengb
I have an odd bug where the switch expression returns the wrong value

1567823181
fengb
return switch(enum) { .match => foo catch bar }

1567823260
fengb
I wonder if it's related to copy elision

1567823272
fengb
"foo catch return bar" fixes it

1567835730
dbandstra
do the std fmt functions support printing c strings?

1567835820
dbandstra
i see some code in there which kind of looks like it could be but i'm not having success using it

1567835928
dbandstra
kind of hard to follow the code in fmt.zig

1567836083
dbandstra
oh, i got it... it's "{s}" (for some reason)

1567836261
dbandstra
for some reason i looked at fmt.zig and saw the "s", but my brain translated it to a "c" by the time i switched to my own source file, so i'd try that and it wouldn't work

1567845425
mq32
hey

1567845446
mq32
i am saddened. it seems like i can't flash my µC right now, something is broken

1567848609
TheLemonMan
nice, build.sr.ht is now failing for no reason

1567848776
daurnimator
TheLemonMan: the reason is spite

1567849701
TheLemonMan
I guess it hates Zig and all it represents

1567853575
mahmudov
just curious why zig causes spite?

1567863443
Yardanico
wow, I found

1567863466
Yardanico
although for smaller languages it might make more sense to have an awesome repo in their own github organization

1567864190
Tetralux
Huh. Didn't know my sublime syntax was on that. Neat :)

1567865602
gonz_
`awesome-zig` is bound to be out of date for a long time

1567865615
gonz_
And I don't think there's any way to tell something is actually "awesome" yet.

1567865747
Tetralux
I mean... There is: Informality. ;)

1567865759
Tetralux
.. which is how that repo intends it, I suspect.

1567865760
Tetralux
But I also get what you mean.

1567865789
Tetralux
Though, perhaps in some sense Zig's wiki page for community stuff could be that.

1567865801
Tetralux
That has a much lesser list.

1567866582
gonz_
Usually these lists will de facto be "Here is what people use", whereas one for a very young language will be "Here is what the owner of the repo + people who have made PRs know exists"

1567866591
gonz_
Those aren't equally useful

1567867379
gonz_
Though I'm open to the idea that I'm wrong and many of the `awesome-*` repos are just people tossing everything they know in there.

1567867569
Tetralux
That's what I imagine it is.

1567867593
Tetralux
Maybe they even tested it too - who knows :p

1567867643
fengb
He put my silly protobuf experiment on the list. I feel compelled to make progress now :(

1567867664
Tetralux
He put zigpaint on there too ;P

1567867671
Tetralux
Still

1567867673
Tetralux
I don't really care

1567867689
Tetralux
First time any repo of mine's been mentioned anywhere so

1567867694
Tetralux
I feel accomplished in life now.

1567868924
Yardanico
how can I tell translate-c to translate parts which are not used?

1567868934
Yardanico
or how can I make it believe that some parts are "used"

1567869978
dingenskirchen
I'm trying to build a minimal TCP server using the stdlib, but ran into an issue I don't quite understand:

1567870053
fengb
Network code hasn’t been updated to the new async semantics yet

1567870155
fengb
Anything in std.event is currently in flux

1567870164
dingenskirchen
ah :|

1567870187
dingenskirchen
guess i'll wait and see if it works after the next release, then

1567870192
dingenskirchen
thanks for the quick response though

1567870248
fengb
I think the goal is to get it better by 0.5.0 but not sure if there’ll be enough time

1567870992
Yardanico
I think I found a (regression?) in the compiler, or maybe it should be the correct behaviour -

1567871005
Yardanico
It works if I remove "orelse null" from that line though

1567871624
Yardanico
I think 2045b4d is the cause (the commit before it works, and on it it starts to fail)

1567872507
fengb
That looks like a bug

1567872991
nrdmn
gonz_, Tetralux: For now I put anything in the list that doesn't look like a test repo. I hope it is useful in case someone wants to check if there are projects of a certain topic to get inspiration from.

1567873029
nrdmn
As soon as there are more and more mature projects, I'll have to start to filter

1567873176
Tetralux
nrdmn: That's what I figured. :)

1567873470
Snektron
Tetralux: did you also publish the sublime text syntax?

1567873491
Snektron
Because i made a pr that was merged like a half year ago and it still needs updating

1567873800
Tetralux
You mean the one that's available through package manager?

1567873829
Tetralux
No. I started out with that, but did not find it to my liking, so I made my own.

1567873890
Tetralux
I update it whenever I'm using it and it doesn't do something that I think it could use.

1567874001
Tetralux
'&&' highlights as illegal, for example.

1567874878
Snektron
Oh nice

1567874888
Snektron
Care to send me that?

1567874971
Tetralux


1567875113
Snektron
Thanc

1567876406
Tetralux
y7

1567876409
Tetralux
o7*

1567881277
gonz_
andrewrk: I painstakingly added library annotations to everything I could find info on and that wasn't some interface stub/proxy or obviously some libc function:

1567881309
gonz_
Unfortunately the modular windows headers were no real help, because they contain almost nothing.

1567881455
gonz_
At some point I should come up with a smarter way of doing this

1567881499
andrewrk
gonz_, fortunately I don't think it changes often, and ABI compatibility is stable

1567881532
gonz_
All in all I guess it wasn't so bad, but it took a couple of hours.

1567881562
andrewrk
yeah that's practically nothing in terms of developer hours

1567881564
gonz_
There are some pretty unqualified guesses in there as well, based on their surrounding functions being from some lib, etc.

1567881566
andrewrk
if it's a one time task

1567884067
andrewrk
I don't remember who was asking about glibc 2.30 but that's in master now

1567884368
curtisf
Is there a good way to profile a zig application on Windows?

1567884409
andrewrk
I don't know the answer to that question but I also want to know. It should be the same answer as how to profile a C/C++ application on Windows

1567884409
gonz_
Debugging works with VS & WinDbg, so I assume VS works.

1567884451
curtisf
I'm not sure if my VS is just outdated or if there's some reason I can't find the cpu profiling tab

1567884530
Sahnvour
curtisf: it's usually under the "DEBUG" menu

1567884574
gonz_
Looks like Debug -> Performance Profiler, yeah.

1567884575
Sahnvour
I mainly use VTune when the executable is not build via a VS project though, it's less of a hassle than profiling random executables inside VS

1567884604
andrewrk
Sahnvour, oh that's good to know. I've been using an empty Project1.sln and just overriding the exe to whatever I wanted to debug

1567884630
gonz_
andrewrk: You can run `devenv binary-name.exe` to open up an on-demand project

1567884636
andrewrk
nice!

1567884637
gonz_
for that exe

1567884791
Sahnvour
trying to profile zig0 (for example) from on-demand project, the CPU Usage tool is greyd out

1567884834
curtisf
Sahnvour: I don't see that there. Is it supposed to be in these menus?

1567884865
Sahnvour
curtisf: you're currently debugging a running executable, it won't be available until you stop it

1567884872
curtisf
Ooo, thanks

1567884906
Sahnvour
then it's performance profiler > CPU usage > go

1567884907
gonz_
VS ¯\\_(ツ)_/¯

1567884933
curtisf
hmmm I still don't see it

1567884988
Sahnvour
what does your current project (inside the solution explorer pane) look like ?

1567885020
curtisf
It's just the EXE. (I have no idea how to use VS, but this is how I managed to debug before)

1567885182
Sahnvour
strange, can you right click on it and set it as startup project ?

1567885265
Sahnvour
here's what it looks like on my machine

1567885282
curtisf
I clicked that, it doesn't seem to do anything. Maybe I should just try updating

1567885333
gonz_
Sahnvour: Is VTune usually a better choice?

1567885410
Sahnvour
I think so

1567885416
Sahnvour
it has more info

1567885464
gonz_
Oh, being that you seem to be in the know: Is there a good interactive disassembler that works well with zig on Windows?

1567885486
gonz_
I tried about 10 or so ones and they all had issues, most of them were anonymizing the names of every function for no reason.

1567885489
Tetralux
gonz_: VS is the best I got, I'm afraid.

1567885505
Sahnvour
overall VTune is better I think (and free since some time), a lot more full featured, but a bit less user friendly

1567885527
Sahnvour
I don't know about disassemblers, sorry

1567885539
gonz_
Tetralux: Yeah, it's what I use, but it's not nearly as nice as some of the disassemblers you can use for C/C++.

1567885547
gonz_
The interactive ones with tree structures, etc.

1567885555
gonz_
Or am I just missing features that VS has?

1567885569
Sahnvour
iirc the good ones have to be bought right ?

1567885591
gonz_
Some of them are free and from what I gather they do the whole tree structure thing for C/C++

1567885602
gonz_
But somehow they just fail at preserving the names of functions in zig

1567885602
Sahnvour
no it's very barebones, maybe WinDBG preview (note the _preview_, it's on windows store also :)) is a better

1567885710
gonz_
I haven't needed it yet, but I was curious when I saw the really interesting ones whether or not they'd work for zig

1567885717
gonz_
in the end the info I wanted I got from VS

1567885926
Sahnvour
in my experience, it's hard to get good asm <-> source line matching in release-fast for zig

1567885983
Sahnvour
I don't know why

1567886084
Sahnvour
so for example you would try to profile a piece of code, but the actual costly instructions will all get mapped to some function at several outer scopes, basically where it wasn't inlined (eventually just main)

1567886121
Sahnvour
and since all the generated code inside this call refers to the single line of the function call, it's rather useless

1567889949
curtisf
It looks like I just needed to update VS. Does VS provide anything finer than function-level profiling? In my case I have one large function and only about 10% of its runtime is attributed to sub-calls

1567890329
mikdusan
given `const X = packed union { small: u32, big: u64 }` what is the expected alignment for X?

1567890364
Sahnvour
curtisf: yes you can see line-level information

1567890384
Sahnvour
you could even see instruction-level before, but I can't find it anymore since VS2017

1567890434
Sahnvour
make sure to generate a full report from your profiling (ends up with a .vsps file) and then you can browse your code with inline costs :)

1567891185
curtisf
Sahnvour: sorry for bugging you repeatedly, but you have been helpful so far :) Do you know I get there? From googling it looks like there should be a "Performance Explorer" window that I'm not seeing

1567891288
Sahnvour
no problem

1567891297
Sahnvour
did you get a report after profiling ?

1567891320
Sahnvour
when you stop or the process ends, it should automatically open a tab with a report inside it

1567891325
Sahnvour
listing the top functions or something like that

1567891336
curtisf
Yep, I see that

1567891381
curtisf


1567891436
Sahnvour
okay then I think that's the "oopen details" link

1567891451
Sahnvour
used to be "generate detailed report" iirc

1567891482
Sahnvour
if I'm right, it will process for some time and then show you a hot path view

1567891489
Sahnvour
from where you can navigate to functions

1567891497
Sahnvour
the "function details" view is especially useful

1567891524
curtisf
OH, I see, thanks!

1567891586
Sahnvour
you're welcome

1567892036
scientes
andrewrk, how do i get the file name in gdb again?

1567892073
andrewrk
scientes, AstNode::src()

1567892083
andrewrk
e.g. (gdb) p instruction.source_node->src()

1567892098
scientes
sweet

1567892127
scientes
*sweat

1567892142
scientes
....

1567892239
Yardanico
im sorry for asking that question but how do I print ascii value of a byte - u8 ?

1567892265
andrewrk
if you are using formatting facilities I believe {c}

1567892309
scientes
you also might want to test if it is ascii

1567892526
Yardanico
thanks :)

1567892846
andrewrk
fengb, I've fixed both the "Instruction does not dominate all uses" bugs regarding async/await. But it looks like there are a few more corner cases to solve, will open new issues soon

1567892864
andrewrk
stability is improved though

1567892911
Tetralux
kristoff_it: Can you run that fast float parsing example measurement again... only with --release-fast on, it's ten times slower than when I wrote it...

1567892930
andrewrk
I'm down to just

1567893016
Tetralux
Can someone else also pull down my fast float parsing example and measure it too

1567893017
Tetralux


1567893032
Tetralux
I'm expecting ~12ns and ~235ns, respectively.

1567893055
Tetralux
But I'm getting ~144 and ~235.

1567893070
Tetralux
I literally haven't changed anything that should affect it that much - so far as I'm aware.

1567893579
scientes
I'd rather the ryu parser that tgschultz is writing IIRC

1567893594
fengb
That’s output, not parsing

1567893602
scientes
oooo

1567893608
tgschultz
sorry, you've got the wrong guy

1567893609
scientes
but its lossless

1567893630
scientes


1567893648
scientes
> Ryu & Ryu Printf Build Status

1567893651
scientes
yeah it goes both ways

1567894574
Tetralux
and by "measure", I mean "run" xD

1567895789
mikdusan
Tetralux: nuke use of error union return value in parseFloat()

1567895795
mikdusan
make it just return T

1567896905
andrewrk
tiehuis is the one working on ryu

1567896937
andrewrk
I wonder what he's blocked on. I'd really like to clear the path for him

1567897285
stratact
andrewrk: I have a quick offtopic question (I don't want to derail). How is FreeBSD's debug-mode output system coming along?

1567897454
andrewrk
stratact, you mean, e.g., stack traces?

1567897459
stratact
yeah

1567897490
andrewrk
It was my understanding those were working at one point in time. We have stack trace regression tests now thanks to mikdusan but I believe they are not yet enabled for FreeBSD

1567897509
stratact
Gotcha, thanks for the update.

1567897510
andrewrk
If someone goes through the trouble of fixing them and enabling test coverage, they'll stay working

1567897534
andrewrk
Personally, I'm prioritizing language stabilization over FreeBSD support, although I do plan to dedicate time to it eventually

1567897555
stratact
I might check it out once I get better at Zig

1567897596
andrewrk
stratact, have you seen the support table / tier system?

1567897609
andrewrk


1567897707
stratact
Gotcha, I'll refer to the Support Table

1567897759
stratact
Well this would be a great way for me to help out

1567898136
andrewrk
:)

1567898151
andrewrk
stratact, see also

1567899333
Tetralux
mikdusan: That's weird. That does help, but it's nowhere near what it was before.

1567899346
Tetralux
And of course, that's at best a stop-gap

1567899359
Tetralux
since it was really fast with the error union return values before.

1567899361
mikdusan
i basically did that and get ~15ns

1567899374
Tetralux
Mine is 10 times slower.

1567899382
Tetralux
And mine

1567899391
Tetralux
That's so strange.

1567899482
Tetralux
Or day before

1567899503
Tetralux
Either way

1567899508
Tetralux
Something's very weird.

1567899562
mikdusan


1567899598
mikdusan
err wait. heheh i garbled the diff.

1567899660
andrewrk
in theory if you kept everything the same but put `catch unreachable` instead of `try` it should have the same effect

1567899667
andrewrk
in main()

1567899779
Tetralux
AH-HA

1567899792
mikdusan
Tetralux: ok i updated gist and just put the full source there. the original was an older pastie from you that i lost.

1567899803
Tetralux
Replace everything with catch unreachable, and leave the `try parseFloat(...)` in main.

1567899812
Tetralux
It compiles and is slow.

1567899814
Tetralux
Remove the try.

1567899817
Tetralux
Back down to 11ns.

1567899821
Tetralux
I spy a compiler bug.

1567899853
Tetralux
Oh wait

1567899871
mikdusan
btw ignore the @setRuntimeSafety ... has no effect on release-fast

1567899892
Tetralux
Sigh. Nevermind...

1567899903
Tetralux
I feel like I've been bitten by that one before.

1567899914
Tetralux
Replaced everything with catch unreachable, but left the rettype as !T

1567899924
Tetralux
Wasn't then checking the return value for error or not

1567899926
Tetralux
However

1567899933
Tetralux
There's still a bug in codegen or something here.

1567899954
Tetralux
Removing the error union from parseFloat's return type

1567899958
Tetralux
BUT

1567899977
Tetralux
It was working at damn-near the same fast speed with the error unions a day or so ago.

1567899983
Tetralux
And now it's ten times slower.

1567900105
Tetralux
And now it's ten times slower.

1567900108
Tetralux
Oops

1567900110
Tetralux
Wrong window again xD

1567900131
Tetralux
I keep switching back to IRC pressing up-arrow and enter expecting it to focus my terminal xD

1567900176
Tetralux
Changing the callsite from `try parseFloat(...)` to `parseFloat(...) catch unreachable;` makes it speed up again.

1567900185
mikdusan
ok i have a 1-liner for you to go from 164ns -> 16ns:

1567900191
mikdusan
yup. callsite.

1567900258
Tetralux
I feel like the bool and the value in the error union was getting allocated to a cpu register before

1567900277
Tetralux
but now it checks the bool and then copies the value out of main memory.

1567900288
Tetralux
Could that be it?

1567900388
Tetralux
Interestingly, doing the `catch unreachable` trick does NOT speed up std.fmt.parseFloat if you do it to that call.

1567900794
Yardanico
Maybe because it also calls another function by itself?

