1572075905
ky0ko
is it possible to get the size of an extern struct in zig? i'm working with (and porting) c code and i am trying to memset a struct to 0.

1572075953
mq32
@sizeOf(StructType)

1572075956
ky0ko
@sizeOf just gives me an error because it expected type 'type' and not '.cimport:2:11.server_t'

1572075981
mq32
@sizeOf(@typeOf(your_server_var))

1572076010
ky0ko
that worked, thanks

1572076017
mq32
you'r welcome!

1572079722
nrdmn
where's builtin.os defined?

1572079877
nrdmn
hmm, I think I've found it

1572080448
mq32
oh man. programming in zig is just a pleasant experience :)

1572080947
mq32
aaand another bug

1572082131
gonz_
Quick check; there weren't a bunch of join/part/quit messages from my client recently, right?

1572082147
gonz_
I've been fiddling around with using IRCCloud as a bouncer

1572082150
gonz_
is why I ask

1572082173
gonz_
I don't want it spamming when I open/close the client

1572082266
mq32
nope, seems fine

1572082839
gonz_
Great

1572085976
FireFox317_
for the OS people in here, an other good resource might be SerenityOS by Andreas Kling (

1572086110
mq32
wow this looks cool

1572090013
gonz_
#serenityos for people interested in it as well

1572090030
gonz_
The IRC channel is the main community spot, so it's not just a dead appendix hanging on for dear life

1572096299
mq32
hey

1572096308
mq32
can someone help me a bit with inline assembly/x86?

1572096314
mq32
pixelherodev probably?

1572096583
nrdmn
mq32: what can we help you with exactly?

1572096596
mq32
i want to implement outb, outw, inb, inw

1572096633
mq32
current attempt looks like this:

1572096930
nrdmn
I think in the first parameter you have to put aliases in %[], like "outw %[port], %[data]"

1572097075
FireFox317_
mq32: This might help a lot,

1572097090
FireFox317_
We use the same syntax I'm pretty sure

1572097331
nrdmn
FireFox317_: clang only implements a subset of gcc's syntax

1572098191
mq32
hm, now it doesn't compile anymore ^^

1572098340
mq32
ah damn.

1572098350
mq32
solution was, that explicit register names require {}

1572098357
mq32
otherwise, it gets handled ... differently

1572098764
mq32
can someone tell me if this is the right way to "read" a register into variable?

1572098764
mq32


1572098787
mq32
_start gets called with with eax and ebx filled and i want to read them into certain values

1572098831
mq32
ah damn. looks like this isn't possible in pure zig and debug mode

1572100593
mq32
can i export a symbol from inline assembler?

1572100822
nrdmn
what do you mean by that?

1572100929
mq32
i need some pure assembler function

1572100942
mq32
but i don't want to create a new assembler file for 4 lines of asm

1572100957
mq32
so i want to export a symbol/label from the inline assembler

1572102124
saskwach
I'm a little confused by the `if` syntax in Zig. Are `if (foo) |bar| { ... }` and `if (foo) { ... }` fundamentally different? It seems like the first one unwraps errors and executes the block regardless of value, while the second one only executes if bar's value is true. Is that right?

1572102133
saskwach
(executes the block)

1572102184
waleee-cl
saskwach:  errors AND optionals

1572102250
saskwach
Ok, so `if (a) |b|` has nothing to do with boolean values?

1572102461
waleee-cl
from my relatively new experience, no, not in that form.

1572102470
saskwach
okers

1572102492
saskwach
Seems like an odd choice.

1572102679
waleee-cl
well, otherwise you'd have to do a bit more ceremony for null-checking &c

1572102741
saskwach
Or just use a different keyword. `unwrap (a) |b| { ... } or |c| { ... }` is a little longer, I guess, and adds a keyword to the language.

1572102784
waleee-cl
I guess you have seen some longish unwrap-chains in rust?

1572102819
saskwach
Maybe a bit.

1572102832
saskwach
Though Rust seems to be all about the chains.

1572102867
saskwach
I do really like just passing types around as values though. And it's refreshing to see something like D's scope statements again.

1572102950
nrdmn
waleee-cl: rust has `if let Some(b) = a { ... }`

1572103087
waleee-cl
yeah, I have seen that one. Not terrible fond of it since it allows for unwrapping of any type

1572103127
waleee-cl
(which can be a good thing)

1572103201
saskwach
I find that weird in Rust. It makes me want to pattern match unwrap things in other contexts, but I can't.

1572104525
pixelherodev
mq32, still need help?

1572104531
mq32
yeah

1572104537
mq32
struggling with exporting that symbol

1572104548
mq32
and i can't use nakedcc as it will clobber eax,ebx in debug mode

1572104551
pixelherodev
For Zig interfaces to I/O right?

1572104574
pixelherodev
I

1572104575
mq32
ah no

1572104586
mq32
for multiboot-to-os-entrypoint

1572104589
mq32
but tell your idea

1572104605
pixelherodev
Ah, you got the inline asm working then?

1572104609
mq32
yes :)

1572104615
mq32
i have output on the serial console

1572104619
pixelherodev
Alright cool :)

1572104625
mq32
yeah

1572104634
pixelherodev
My multiboot stuff is all in Zig, no asm

1572104638
pixelherodev


1572104650
mq32
okay, how did you solve the passing of parameters?

1572104651
pixelherodev
(Except to read %ebx for info)

1572104654
pixelherodev
s/info/address

1572104663
pixelherodev
From what to what?

1572104681
mq32
err

1572104706
mq32
how does your parse() function return the value?

1572104719
pixelherodev
It gets it straight from %ebx

1572104723
pixelherodev
That contains the address

1572104741
mq32
okay, but ebx gets clobbered

1572104750
pixelherodev
When?

1572104769
pixelherodev
The fact that I'm using that address indicates otherwise :)

1572104805
pixelherodev
I'd say it's more accurate to say it

1572104834
pixelherodev
My solution is moving multiboot.parse() into start before the newStackCall to kmain, the using multiboot.get() in kmain

1572104843
pixelherodev
Haven't pushed that yet

1572104876
pixelherodev
...can usingnamespace be using on a pointer-to-struct?

1572104895
andrewrk
it takes a type

1572104913
pixelherodev
So it only works on

1572104916
pixelherodev
Makes sense

1572104923
andrewrk
types are always comptime known

1572104938
pixelherodev
Was trying to think of a way to remove the need for .get()

1572104961
pixelherodev
Without copying the memory pointed to by the multiboot header

1572104982
pixelherodev
Oh wait, I got it :)

1572105050
pixelherodev
Going to leave multiboot.zig alone and just pass the pointer from start to kmain

1572105133
mq32
pixelherodev:

1572105162
mq32
andrewrk, do you know how to export a symbol from inline assembler

1572105202
andrewrk
.symbol

1572105227
pixelherodev
mq32, I'd switch that a bit

1572105229
andrewrk
oops that's the section. `.globl symbol_name_here`

1572105234
pixelherodev
Make it two inline asms which return the value

1572105256
mq32
pixelherodev, yeah but this won't solve my problem ;)

1572105262
mq32
andrewrk, thanks, gonna try i

1572105277
pixelherodev
Why do you need to export from inline asm? What's being exported?

1572105387
mq32
just _start

1572105397
mq32
because i need to save eax, ebx before calling into any zig code

1572105430
pixelherodev
No you don't :)

1572105433
pixelherodev
You can write start in Zig

1572105475
pixelherodev
Try using `var magic = asm("" : [] "={eax}" (->u32));`

1572105483
pixelherodev
Still getting clobbered?

1572105602
mq32
ah no

1572105604
mq32
doesn't seem so

1572105610
pixelherodev
:)

1572105624
pixelherodev
(though of course I forgot that a symbol is required for the label :()

1572105741
pixelherodev
Ah, there's a problem with that too

1572105747
pixelherodev
It puts it on the stack

1572105886
pixelherodev
Minor optimization note: when calling a noreturn function with newStackCall, it still generates instructions after call

1572105892
pixelherodev
(restoring the stack)

1572106019
pixelherodev
More relevant optimization note @mq32 that `const magic` (I set it to const in mine since it's never changed :) generates "movl%eax, -4(%ebp) \ movl -4(%ebp), %ecx`

1572106033
pixelherodev
Instead of moving it straight to ecx, it uses the stack first

1572106060
pixelherodev
Even though it's literally never used for anything other than moving to ecx (which is the parameter used for the function call).

1572106066
pixelherodev
As such, it's undefined behavior.

1572106360
pixelherodev
Also gives the wrong value :(

1572106394
pixelherodev
Hmm, what about pushing it straight to the stack slice? :P

1572106467
pixelherodev
If there was @newStack with calling, this would be much easier :P

1572106879
pixelherodev
Got it working :)

1572106931
mq32
pixelherodev, got it working here. i don't use local variables for the multiboot stuff

1572106936
pixelherodev
Neither am I anymore

1572106948
pixelherodev
Though I am using an @inlineCall to multiboot.parse instead of doing it manually

1572106970
pixelherodev
There is a bug I noticed though, and not with my code, with the Zig compiler: we

1572107008
pixelherodev
It moves the old stack into ebp, the new stack in place, then pushes the old stack to -4(ebp)

1572107021
pixelherodev
ebp isn't set by the entry point, which means it's

1572107106
andrewrk
pixelherodev, it might not be possible to do @newStackCall soundly with llvm

1572107125
pixelherodev
The real problem then is is that practically speaking, ebp is zero at start for me

1572107145
pixelherodev
Which means `ebp - f` is potentially writing to e.g. MMIO at the top of the address space

1572107160
pixelherodev
andrewrk, that makes sense, but is also concerning

1572107181
pixelherodev
Is there no operation for "load stack" without saving the old stack?

1572107195
pixelherodev
@newStackCall as it is makes perfect sense on all non-freestanding targets

1572107207
pixelherodev
And even on freestanding, it's only problematic within the entry point

1572107327
andrewrk
arguably this is a bug in llvm since we're using

1572107407
pixelherodev
Not really

1572107414
pixelherodev
""The ‘llvm.stacksave’ intrinsic is used to remember the current state of the function stack"

1572107423
pixelherodev
That's exactly the problem

1572107431
pixelherodev
We shouldn't use that in the entry point on freestanding

1572107441
pixelherodev
Better yet: that gets back to my optimization note from before

1572107444
andrewrk
oh I see what you're saying

1572107449
pixelherodev
When calling a function marked `noreturn`, we shouldn't use that

1572107464
andrewrk
that's a good point, and should be easy to implement

1572107466
pixelherodev
I'll see if I can implement this one myself

1572107487
andrewrk
codegen.cpp:4212

1572107511
andrewrk
you can look at src_return_type->id == ZigTypeIdUnreachable

1572107698
pixelherodev
Wow yeah that is easy

1572107704
pixelherodev
Just need to test it

1572107733
pixelherodev
GitHub PR the preferred method of sending in patches for ziglang?

1572107958
andrewrk
yes please

1572108011
andrewrk
mikdusan, I wonder if ConstGlobalRefs is the culprit in #3502

1572108029
andrewrk
either that or ConstParent

1572108059
andrewrk
these are used to identify that a value is an array element or a struct field of a parent value

1572108085
andrewrk
so if you interned one of them, that would potentially move it to the wrong parent

1572108098
andrewrk
unless the ConstParent data is out-of-band of the interned value

1572108135
mikdusan
ah i'll take a look at that

1572108152
andrewrk
this would explain why it works for type-has-one-possible-value, because such types have 0 bytes at runtime, and so can't really have meaningful parent values

1572108190
andrewrk
this ConstParent thing is necessary for comptime pointer reinterpreting

1572108250
andrewrk
ConstGlobalRefs is more of an implementation detail of code-generating constants

1572108654
pixelherodev
Found another optimization issue: there's an explicit `andl    $15, %edx` generated for all align(16) objects, which shouldn't be there

1572108665
pixelherodev
(that's an example, but it's true of all align() types)

1572108699
pixelherodev
It's explicitly set to 16-byte alignment in the assembler anyways, so it accomplishes nothing

1572108719
pixelherodev
(just going over the produced asm manually and I noticed this, not touching this now)

1572108777
pixelherodev
There's about three extra instructions whenever an aligned pointer is used AFAICT

1572108842
pixelherodev
Plus it requires usage of another register, which is both unnecessary (it could just use andl 0xFFFFFF00 on the original instead of using andl 0xFF on a copy and subtracting the copy) and potentially damaging in a function that already requires a lot of registers

1572109200
pixelherodev
Yeah, asm looks good to me

1572109202
pixelherodev


1572110721
saskwach
Is there a way to get a method namespaced inside a struct that doesn't take an instance as its first parameter?

1572110728
saskwach
(see also: static methods)

1572110776
saskwach
Oh wait, is it just "don't call the first argument self?"

1572110801
saskwach
Or am I being dumb and there's no implicit passing of the first argument?

1572110896
pixelherodev
calling an object of a struct type implicitly pass that parameter

1572110918
pixelherodev
For static methods, leave out that first parameter, and call it on the base type

1572110941
pixelherodev
e.g. if you have `const a = struct...;const b = a{}...`, do `a.method();`, not `b.method();`

1572111005
fengb
It’s really simple: all functions can be invoked statically or methodly. But static functions would throw a type error

1572111006
saskwach
Is that enforced by the compiler? I guess the first argument's type would have to be the struct for it to get confused.

1572111018
pixelherodev
I've done stuff like use `struct { fn func()void {}}.func();`

1572111021
saskwach
Yeah, that makes sense.

1572111025
pixelherodev
(though of course that's just a reduced example)

1572111076
pixelherodev
saskwach, what you name the first argument has zero effect on anything outside the function's scope

1572111084
fengb
It’s typechecked yes

1572111094
pixelherodev
All it does is give the parameter a label within the function itself

1572111112
pixelherodev
Compiler doesn't give a crap what you call it, self is just the label used by convention

1572111128
saskwach
So are structs the default mechanism for namespacing?

1572111175
andrewrk
yes

1572111184
pixelherodev
And since @import returns a struct...

1572111199
saskwach
Well that's simple enough.

1572111429
pixelherodev
I'm going to work on patching the stdlib for custom OS values now :)

1572111449
pixelherodev
(PR opened for newStackCall fix, lucky number is 3535)

1572111613
andrewrk
thanks!

1572111645
pixelherodev
No problem!

1572111738
pixelherodev
Just need to clean up my repo first (commit existing changes) and then I can get to work

1572112270
pixelherodev
Might want to hold off on that patch for a bit, need to double check something

1572112941
pixelherodev
...never mind, I'm an idiot.

1572112949
pixelherodev
I removed the -sse from codegen.cpp so it wouldn't show up in the patch

1572112955
pixelherodev
I forgot to put it back :P

1572113048
pixelherodev
...oh wait, I think should submit a PR for this too :)

1572113493
pixelherodev
Yeah, 3535 is fine, but without 3636 my code was crashing for a completely unrelated reason :P

1572113663
saskwach
Can structs contain comptime values?

1572113803
saskwach
I'm getting a weird error trying to do it: "invalid token: '*'" when I try to put a `comptime allocator: *Allocator` in my struct.

1572113924
nrdmn
hmm, I got a "Cannot initialize MC for non-Windows COFF object files.". Does that mean llvm can't generate COFF files for non-windows OSes?

1572113970
pixelherodev
saskwach, that's because your syntax is wrong.

1572113976
pixelherodev
It's `name: comptime type`

1572113977
nrdmn
I tried to compile something with x86_64-unknown-uefi-msvc-coff

1572113980
pixelherodev
Not `comptime name: type`

1572113998
saskwach
But in function arguments it's `comptime name: type`?

1572114027
pixelherodev
... that's actually a good point

1572114036
pixelherodev
Right now they're different though

1572114044
saskwach
Good to know.

1572114059
andrewrk
saskwach,

1572114244
saskwach
andrewrk, it looks like that's about implementing the allocator at comptime. I'm just trying to store which one was chosen in the struct.

1572114257
andrewrk
that should be fine

1572114302
saskwach
Yep, it works now; just surprising to have `comptime allocator: *Allocator` in the `new` method and `allocator: comptime *Allocator` in the struct definition.

1572114550
andrewrk
`allocator: comptime *Allocator` the comptime is redundant here and I think there is a proposal to make such a redundant thing be an error

1572114569
andrewrk
expressions which have expected type of `type` are always comptime evaluated

1572114606
saskwach
Ah, I get it.

1572114620
andrewrk
there's no such thing as comptime struct fields, but that is in fact planned

1572114671
saskwach
Ok, so if the struct field's type is of type type, it's comptime and there's nothing I can do about it. If I wanted to store "7" but at comptime, that's a planned feature?

1572114749
saskwach
Or, I guess, more usefully, if I wanted to store a function pointer.

1572114912
andrewrk
there's a good chance your use case is solved with a global const

1572114928
andrewrk
are you making a generic struct?

1572114965
saskwach
I'm making a data structure library.

1572114982
saskwach
Something stupid and easy for learning the language, not something useful.

1572115013
andrewrk
you probably want `pub const foo = bar;`. is there a reason it should be a field?

1572115093
saskwach
It's the allocator that was used to instantiate the struct. I want it to know how to make more of itself (or free itself) without having every function get passed an allocator.

1572115101
saskwach
s/function/method

1572116299
andrewrk
saskwach, have a look at the implementation of std.ArrayList

1572116316
saskwach
will do

1572116481
saskwach
Yeah, that's exactly what I'm doing. Glad it works.

1572117095
andrewrk
it's almost like this musl code is trying to use error sets:

1572117338
pixelherodev
Heh :P

1572118927
pixelherodev
Are macros ignored in @cImport blocks?

1572119200
pixelherodev
Seems both macros and typedefs don't work...

1572119551
andrewrk
macros and typedefs work, if they result in an actual prototype. translating a macro itself into something usable by zig is inherently heuristic based

1572119562
andrewrk
use --verbose-cimport to see warnings

1572120427
andrewrk
related:

1572120973
pixelherodev
So is 2070 an accepted proposal?

1572121673
andrewrk
no, there is an "accepted" label to mark accepted proposals

1572121911
pixelherodev
I know, wasn't sure if you were saying that one was accepted but hadn't been marked yet or something

1572123099
nrdmn
andrewrk: have you had a look at non-windows coff support in llvm? Can you tell why that is not implemented and how much work that would be?

1572123250
andrewrk
nrdmn, I have never looked into this

1572123333
saskwach
I get an error trace when I use std.debug.FailingAllocator with testing.expectError. Is this a bug?

1572123455
saskwach
testing.expectError(error,OutOfMemory, lst.push(1));

1572123480
saskwach
When I zig build test, that line causes lots of crashiness.

1572123495
saskwach
I would expect it to either print that the test failed or do nothing.

1572126759
andrewrk
saskwach, your expectations match mine

1572129702
Snektron
hi

1572130235
pixelherodev
Hello

1572130401
nrdmn
hi

1572132067
pixelherodev
... so I just realized I accidentally wrote a usable scheduler :P

1572132080
pixelherodev
Only works for cooperative multi-threading, but still

1572132091
pixelherodev
And it only runs on one CPU at present

