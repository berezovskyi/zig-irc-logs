1576715473
fengb
How should I represent ternary with vectors?

1576716891
daurnimator
fengb: like are you asking about `all` vs `some`?

1576716905
daurnimator
fengb: or do you mean you want to do a ternary on all members and get a vector result

1576717128
fengb
The latter. I want an array of op(a) ? a : b

1576717135
fengb
Er... vector

1576717212
cshenton
If it's a vector of primitives you could always use a mask and sum the results.

1576717245
cshenton
Which I think is how vector math libraries usually implement ternary if under the hood.

1576717494
fengb
I was trying to avoid figuring out the hard part myself >_>

1576717525
cshenton
Give me a moment I'll see what I can find.

1576717532
fengb
Bit math doesn't come to me naturally so I'd have to spend hours drawing diagrams. Was hoping for some shortcut

1576717537
fengb
Thanks

1576718709
cshenton
fengb: This is non generic but should convey the general idea

1576718801
cshenton
Apologies for any hard edges, only started using the language yesterday :)

1576719085
fengb
Ah cool, thanks!

1576719114
fengb
Well... I only started using vectors ~5 minutes ago so we're all learning :)

1576719330
cshenton
No problem, I'm a fan of how zig's exposing vector types, but at the moment it involves a lot of explicit casting.

1576719352
cshenton
Going to see if I can make a generic version of this.

1576719425
fengb
Scientes had some major changes on his fork:

1576719437
fengb
I think he also wanted to see inferred return types because of the explicit casting

1576719542
scientes
fengb, inferred return types was wanted, but what for is not there

1576719571
scientes
cshenton, there are much more serious problems than the type system

1576719571
cshenton
I'm not a huge fan of inferred return types, you can always be explicit at compile time if you want generic return types.

1576719596
scientes
such as vector index accesses being done wrong, despite me pointing out that the way it is being done is incorrect

1576719607
scientes
and knowing the correct way, which is how gcc does it

1576719622
cshenton
In my experience (using julia) they are error prone because they create accidental union types all over the place.

1576719624
scientes
this mistake means that it is possible I will completely abandon my work

1576719629
cshenton
How so?

1576719766
cshenton
I know it used to be the case in C that you had to cast to array before doing index access.

1576719920
scientes
cshenton, that isn't true

1576719937
scientes
not on any clang or gcc

1576720023
scientes
the only thing that held me back from coding it the right way was not understanding an unrelated piece of code: copy elision.

1576720600
cshenton
I thought pre 4.6 that you had to use a union type for element access, such as on this stackoverflow post from 2009

1576720606
cshenton
(in gcc)

1576720703
cshenton
I'm still curious how you think the vector element access in zig is wrong. I'm going to be doing tonnes of SIMD stuff in userspace so it would be good to know of any hard edges.

1576732033
cshenton
Trying to recreate some of the generic apis I'm used to in scientific computing, zig is pretty nice for this kind of stuff

1576733272
leeward
Does anyone have examples of std.Mutex being used?

1576733353
leeward
Reading the code, it looks like it's safe to deinit after taking the lock, but I'd like someone else to agree that that's the intent before I go using it.

1576740345
mikdusan
leeward: yup just acquire and defer release and for the rest of block scope you are good:

1576740348
mikdusan


1576743840
cshenton
Can anyone link a `zig.build` file that builds a c library from source, then links it with some zig code into a static executable?

1576743915
cshenton
Doing game stuff and I develop on multiple OS' so I want things to be pretty system independent, vendored dependencies etc.

1576752286
pixelherodev
Has lazy analysis changed recently?

1576752290
pixelherodev
Just updated the compiler and suddenly it noticed that a function that isn't being used was invalid :P

1576752339
dingenskirchen
might be

1576752466
pixelherodev
I'm not using @typeInfo at all

1576752717
FireFox317
pixelherodev: Regarding the comment on my PR on ClashOS, did you see this change by daurnimator?

1576753012
pixelherodev
Vaguely a while back

1576753164
pixelherodev
That's the one that introduced the assert?

1576753168
pixelherodev
There's only two asserts shown there

1576753177
pixelherodev
One removed, one added, and AFAICT they're the same

1576753553
FireFox317
Nope, that commit is just some refactoring changing how to call the dwarf debug info methods. The assert was added a long time ago. Are you hitting that same assert?

1576753926
pixelherodev
Not sure at the moment

1576753935
pixelherodev
I haven't checked in at least a montj

1576753937
pixelherodev
month*

1576754001
pixelherodev
Only changes I've made since October were bug fixes / improvements needed for the game I was making

1576754033
pixelherodev
I noticed stack tracing was broken after doing some testing upon merging those changes into my main kernel source tree and removing the overridden standard library and swapping to the custom OS layer

1576754046
pixelherodev
though I vaguely remember it breaking a while before that

1576754162
pixelherodev
On a different note, a suggestion for 0.6: `zig fmt` should automatically update e.g. calls to std.fmt to use tuples

1576754167
pixelherodev
Would make transition a lot smoother

1576754293
FireFox317
Hmm okay, so it just doesn't work? Do you get a already panicking panic?

1576754457
pixelherodev
Yeah

1576754479
pixelherodev
Another unrelated question: did ArrayList.iterator go byebye?

1576754501
pixelherodev
Updating my code in hope that a critical compiler bug has already been fixed :P

1576754567
pixelherodev
Never mind, tests show a better method anyways :)

1576754590
FireFox317
Yes, ArrayList.iterator is gone -> for(list.toSliceConst()) |element|

1576754618
pixelherodev
Hmm... "/usr/local/lib/zig/std/fmt.zig:97:13: error: type 'usize' does not support field access"

1576754655
pixelherodev
Ah

1576754664
pixelherodev
Yeah, the error message isn't clear but it's definitely my code :P

1576754878
pixelherodev
Dangit! All this and the compiler error is still not fixed :(

1576754879
pixelherodev
Whelp

1576754890
pixelherodev
Guess that means I really should open an issue for it

1576754935
FireFox317
What is it about?

1576755072
pixelherodev
Weird comptime crash

1576755084
pixelherodev
I'm using an inline while loop to automatically populate a settings structure

1576755104
pixelherodev
If the structure member is a bool, then e.g. `--hello` sets it true

1576755116
pixelherodev
If it's an optional slice of u8s, it reads the next arg and uses that

1576755127
pixelherodev
It works if there's only one `?[]const u8` in the structure

1576755170
pixelherodev
To make things even more fun, changes in the LLVM IR output by the updated compiler require tweaks to the backend :P

1576755233
pixelherodev
Nothing major though, which is good - just needed to support false/true constants

1576755317
FireFox317
Hmm okay, yeah that is annoying

1576755348
pixelherodev
Which one? :)

1576755390
FireFox317
comptime crashes xd

1576755394
pixelherodev
;)

1576755529
pixelherodev
Huh - so apparently, my compiler build is slightly out of date despite having literally just `git pull && make`d.

1576755582
pixelherodev
and installed ofc

1576755614
pixelherodev
"Fortunately," after fixing that and updating, the error is still here :(

1576764716
protty
would it be a good trade-off to allocate about 3 words per socket, abstract it out and support parallel reading/writing or keep the current exclusive access and avoid the allocation?

1576769684
leeward
mikdusan: I'm talking about freeing the mutex's memory, not just taking and releasing it. For example, pthreads mutexes say this: "It shall be safe to destroy an initialized mutex that is unlocked. Attempting to destroy a locked mutex results in undefined behavior."

1576769761
leeward
Which is slightly inconvenient, since I'd like to use the mutex itself to guarantee that nobody's holding it when I go to free it.

1576769840
leeward
It doesn't look like Zig uses futex, though, so...maybe it's safe?

1576770274
protty
leeward: std.Mutex doesnt allocate any memory, on linux it uses a per thread futex through std.ResetEvent. Its `deinit` is effectively a no-op

1576770433
protty
e.g. if you free it while holding it and you dont call `Held.release()`, then all the other threads trying to acquire/waiting on the mutex would either deadlock or access invalid memory which may be UB

1576770509
leeward
protty: Mmm, so I probably ought to do what I do in pthreads: grab it to make sure nobody else is holding it, release it, then free it and ensure that nothing else tries to acquire it during my shutdown procedure.

1576770696
protty
that is not correct either as when you release it, your thread could be preempted, another thread could then acquire it, get preempted, let yours run and then you try and free a mutex that another thread is now holding. It wouldnt be atomic. A possible solution would be to either make sure that deinit cant be called by multiple threads or use a

1576770696
protty
mutex to synchronize your mutex ... in which case the design should have a second glance

1576770986
protty
actually, nevermind. I can see some cases where using a mutex to access a mutex would be valid

1576775807
leeward
protty: The acquire-before-free thing should never wait. It'd probably be preferable to just peek it and make sure it's unlocked, but there's no mechanism for that with Zig mutexes at the moment.

1576775855
leeward
Wrapping it in a mutex when we're tearing things down just bumps the problem up a level. Now we have to destroy the outer mutex somehow.

1576775929
leeward
The problem is that I'm making a library, and I don't have complete control over the overall thread situation. Documentation only gets you so far.

1576775999
protty
Could you clarify on "should never wait"? As for peeking, there should now be `std.Mutex.tryAcquire(): ?Held` which should work both inside and outside the critical section. But if the goal is "peek, then free" then that needs to be done atomically as pointed out earlier

1576776347
protty
Mostly opinion, but in general code should be written sequentially instead of guarding against possibility of parallel. The latter can lead to slower single threaded performance & design complication.

1576776528
dimenus
can the results of an if expression be directly assigned to a variable?

1576776744
fengb
Yes, `const foo = if (bar) 1 else 2;`

1576776769
dimenus
hmm, maybe because my if expressions were nested

1576776874
fengb
Yeah I noticed nested expressions have some problems

1576780616
dimenus
hmm optional types don't support struct init syntax

1576781661
schme245
is the roadmap posted in the 0.5 release notes still somewhat accurate?

1576787737
leeward
protty (in case you look at the IRC logs): I meant that by design the mutex should never be held when it's about to be deinit'd. The peek-then-free approach is just so I can have slightly better error messages in the event that my library is misused.

1576794124
dimenus
got bitten by [*c] just now, it will take basically any value

1576794153
dimenus
i accidentally fat figured slice.len as the value instead of slice.ptr

1576794161
dimenus
and no complaints from the compiler

1576794256
dimenus
i guess that makes sense though, i should remember to sanitize my cimport's for types like that

