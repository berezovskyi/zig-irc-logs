1573257637
andrewrk
frmdstryr, the issue for that is

1573257670
andrewrk
this issue is a bit messy and unclear but I'm planning to address it soon. after

1573257701
andrewrk
and then finally var args will be fixed or deleted

1573257728
scientes
including return inferred return types?

1573257739
tgschultz
list literals hype.

1573257740
frmdstryr
Got it, thanks

1573257742
andrewrk
that's an entirely separate issue

1573257742
scientes
oh var args

1573257757
scientes
var args and args that are "var", heh

1573257773
andrewrk
yeah, I wonder if `anytype` would be better than `var` for args

1573257795
tgschultz
yeah actually that's a lot more clear

1573257796
andrewrk
considering we have anyframe, anyerror, and there is a proposal for anyopaque

1573257837
andrewrk
although I could see people getting confused and putting `anytype` where simply `type` would be correct

1573257851
scientes
yeah thats a problem

1573257869
scientes
but type wouldn't be valid there

1573257882
scientes
or would it

1573257884
andrewrk
I kinda wanted to make it inferred if you omit the type, but josh wolfe is strongly against it, because it will encourage people to not use parameter types

1573257915
scientes
and that is the main argument against the whole thing

1573257920
scientes
but it does allow nice stuff

1573257938
scientes
and I don't think a language should be responsible for preventing the user from shooting themselves in the foot

1573257941
andrewrk
that's the plan for var args too. `args: var` and then use reflection to iterate over the struct

1573257982
andrewrk
std.fmt.format can support both array literals and struct literals. why not? so you could name your {}'s or have them be index based

1573258023
scientes
yeah that doesn't seem entirely insane

1573258034
scientes
even if they should generally be named

1573258060
scientes
but it reduces the amount of type information in the source code

1573258317
dimenus
hmm, that PR didn't break a lot of things on my Vulkan testbed

1573258328
dimenus
just a a bit of translate-c code

1573258345
dimenus
kjj:q

1573258350
dimenus
whoops, wrong window

1573258760
dimenus
andrewrk: there was a missed cast in lib/std/target.zig:322

1573258814
andrewrk
yeah I'm expecting there to be a handful of these

1573258822
andrewrk
apologies in advance

1573258845
dimenus
no worries, i opened a PR for the one I caught

1573258895
daurnimator
andrewrk: around at the moment?

1573258900
andrewrk
hi daurnimator

1573258978
daurnimator
andrewrk: couple of open questions for you: 1. why isn't fifo in std library docs? => is it getting missed by the test suite or something? 2. I saw you mentioned a "zig foundation" again: did you see what I said the other day about SPI/SFC?

1573259089
andrewrk
daurnimator,

1573259114
andrewrk
I missed your comments about SPI/SFC

1573259255
daurnimator
andrewrk: SPI = software in the public interest. SFC = software freedom conservancy. They're both organisations that do all the book-keeping and other legal paperwork for open source projects

1573259288
andrewrk
I sent an application to the SFC

1573259310
daurnimator
andrewrk: ah okay. I talked to Karen about it a few weeks ago, I might be able to send a follow up if you want?

1573259314
andrewrk
I'll look into SPI

1573259319
andrewrk
sure, that sounds good

1573259328
daurnimator
andrewrk: in general, SPI take 5% and don't do much. SFC take 10% and are more fully featured

1573259394
daurnimator
andrewrk: ah doh. I didn't see that std lib docs are not built off CI

1573259413
daurnimator
I thought I had missed something in my PR :P

1573259442
andrewrk
daurnimator, as another example I don't like that the docs are for the x86_64-linux-gnu target only. I have a merge tool about 40% done

1573259454
daurnimator
yeah I figured that was in progres

1573259512
andrewrk
I pushed an update just now

1573259617
daurnimator
andrewrk: thanks!

1573259672
daurnimator
I guess because FixedSizeFifo itself isn't public (that was an oversight; I've got a followup PR)

1573259694
andrewrk
that's an anonymous error set, should be fine eventually, but as you can see not handled well currently

1573259698
daurnimator
oh wait no sorry it is public

1573259719
andrewrk
generic types aren't done yet either

1573259721
daurnimator
so there's just the general question of: why are all the method docs 404

1573259727
daurnimator
k

1573259752
andrewrk
generic types and merging multiple builds together is the same problem

1573259826
andrewrk
we'll get there

1573259832
daurnimator
no problem

1573259833
andrewrk
some of this is limitations in the js code

1573259855
andrewrk
not the underlying semantic analysis json dump

1573259920
daurnimator
so now with that fifo data structure, how should we start using that from e.g. the socket code? In some ways it partially replaces "Buffer". In others it sort of acts like an BufferedOutStream... and in others its an InStream

1573260022
andrewrk
why would you use the fifo data structure and not InStream/OutStream?

1573260149
daurnimator
andrewrk: compared to InStream, it allows for buffering the data you get. e.g. I think a common usage of InStream might be "read a line" => you usually want to read in e.g. page sized chunks, and then find the newline character.

1573260195
andrewrk
I thought that's what BufferedInStream is for

1573260277
daurnimator
right; so it essentially would be a better replacement for that

1573260293
andrewrk
what makes it better?

1573260349
daurnimator
1. it uses a circular buffer and is more efficient 2. it has a growable buffer

1573260407
andrewrk
1. so let's improve BufferedInStream to be more efficient 2. why is that good?

1573260454
daurnimator
now, compared to OutStream/BufferedOutStream, fifo lets you ask for a slice to write to, and then ".update()" it: in practice i imagine this will be the common usage mode compared to the current OutStream which requires you to pass a slice fully formed

1573260501
daurnimator
andrewrk: 1. fifo is suitable to replace both BufferedInStream and BufferedOutStream: it can hit both "birds with one stone"

1573260579
daurnimator
andrewrk: 2. e.g. imagine you want to read a line in. so you read in a page of data and look for the new line => not found: you probably hit a really long line and need to read in additional pages until you find the newline (buffering the data you have).

1573260582
andrewrk
it sounds like we should do that, then

1573260747
andrewrk
it's tricky to make std lib APIs handle all the use cases correctly; let's do our best

1573260756
daurnimator
andrewrk: agreed. my question was more asking... how far should it go? first thing I have in mind is to try adding .inStream() and .outStream() methods to fifo? that might make at least BufferedOutStream and BufferedInStream removable...

1573260823
andrewrk
it's sort of the end of my day here and so I'm not really thinking clearly about these abstract things. I'll need to read some kind of proposal and mull it over

1573260844
daurnimator
I'm still trying to figure out the best course of action myself

1573260891
daurnimator
But in general, I'm not a fan of how the current stream interfaces get used. e.g. when digging into the elf parser, I found the different seek() and read() streams super weird.

1573260894
andrewrk
I think it helps to always have a concrete use case or two in mind

1573260957
andrewrk
I agree that the current stream interfaces are problematic

1573261586
scientes
the go streaming API is pretty slick

1573261606
scientes
cause you can kinda just chain them together

1573261650
daurnimator
scientes: "kinda chain them together" => can you explain more?

1573261673
scientes


1573261683
daurnimator
so one thing I'm considering for fifo is if a user should supply a "flushFn" => called when the fifo wouldn't mind flushing its contents

1573261695
andrewrk
nodejs streams are noteworthy as well:

1573261704
scientes
like you can add in a compression pass without changing your code

1573261748
daurnimator
scientes: right; so my intention is to build that sort of thing on

1573261760
scientes
like this

1573261765
daurnimator
e.g. you would wrap fifo to create a "compressing fifo"

1573261794
scientes
its really this simple

1573262052
daurnimator
scientes: would you be interested in implementing a "compressing fifo" as a use-case?

1573262079
daurnimator
I imagine that the compression algorithm would prefer certain sized blocks to compress; maybe have alignment concerns?

1573262080
scientes
yeah a byte stream

1573262101
scientes
daurnimator, i think that should be a optimization issue only with the api as simple as possible

1573262108
scientes
and default just buffer

1573262240
andrewrk
a good rule of thumb is that you should be able to have 2 streams and then pipe one into another, and be able to deal with all the edge cases correctly: backpressure, handling errors, clean closing, pausing and resuming

1573262505
daurnimator
scientes: huh? the fifo here

1573262651
daurnimator
scientes: `const input = fifo.readableSlice(0)` => gives you a slice into the fifo's buffer: you'd then operate on that; e.g. `compressBlock(input[0..32])` e.g. if your compression algo had a 32 byte "core"

1573262881
daurnimator
once done you call `fifo.discard(32)`

1573262942
plumm
andrewrk: the comptime docs say All function calls cause the compiler to interpret the function at compile-time, emitting a compile error if the function tries to do something that has global run-time side effects. What exactly are global run-time side effects?

1573263076
andrewrk
plumm, for example: calling an external function, inline assembly, writing to the file system, using the network

1573263124
andrewrk
daurnimator, here's a nice use case of stream APIs:

1573263352
plumm
2

1573263355
plumm
thanks

1573303436
Pistahh_
hi, is it possible to pass args to the compiled program with "zig build run" ?

1573304469
dantix
Usually in this case `-- --args` (e.g `zig build run -- --args`) should do the trick, but I haven't tried it with zig

1573304777
Pistahh
that was the second one I tried (the firstr one was without the --) and it didn't work :)

1573309971
protty
Question for std.event.Loop, does it support treating writing to sockets and reading from sockets as separate streams that can be done in parallel?

1573311970
mq32
protty, it should, as "reading a socket" is the same operation as "reading a file" or more generic "reading any FD"

1573311984
mq32
so if there isn't a special case in std, it should just work

1573312000
mq32
but: i have not looked at the code, just reasoning about a sane implementation

1573312247
protty
it came to mind because theres loop.waitUntilFDReadable/Writable but for the case of epoll: readable & writable could come in the same event and was wondering how it notifies two parallel waitUntils

1573312317
mq32
ah, good question then

1573312321
mq32
and i'm out :D

1573312361
mq32
or well, you can both wait with epoll on a read and write event and you can distinguish those

1573312630
protty
oh, it was in a comment

1573312646
mq32
:)

1573316058
nrdmn
good evening!

1573316331
companion_cube
oy

1573316428
mq32
hello!

1573322491
andrewrk
Pistahh, looks like the CLI for zig run regressed. it should be the -- thing as you tried

1573323503
Pistahh
andrewrk: that was with the 0.5.0 arch linux package, I'm just compiling the latest git version to see if that works

1573323532
andrewrk
Pistahh, I think it is regressed in master as well

1573323557
Pistahh
we'll see, I had another issue which I want to test with the latest

1573323600
Pistahh
(I tried to compile something simple and there were a lot of error messages regarding some windows libs. which is weird as it was on linux)

1573324021
keithdc
const validationLayers: [_][*] const u8 = { c"VK_LAYER_KHRONOS_validation" };

1573324037
keithdc
Is this syntax not valid anymore? I'm getting an error on it and I'm not too sure why

1573324094
andrewrk
the = is in the wrong spot

1573324102
andrewrk
move it to replace the :

1573324122
keithdc
Oh crap, my bad!

1573324728
shakesoda
what does the ! mean for return types? it's all over the place but i can't find what it actually is

1573324756
fengb
Error union

1573324840
fengb
e.g. errors.OutOfMemory!void returns OOM or nothing

1573324845
andrewrk
shakesoda,

1573324945
shakesoda
fengb, andrewrk: thank you

1573333459
shakesoda
is there a documented way to get builder to spit out a header for me, i'm trying to build a library dependency that usually has a generated config.h

1573333596
shakesoda
or if i should just write the file out myself, can i ask it where i should put the thing

1573334865
gonz_
Is there a currently best set of bindings/layer on top for SDL?

1573335032
shakesoda
gonz_: i dunno about best set but i did what's in this example and it went fine

1573335041
shakesoda
a few rough edges with sdl's macros

1573335049
gonz_
That's to be expected.

1573335059
gonz_
I'll probably look at that, thanks.

1573343237
shakesoda
#359 (../... exclusive/inclusive range syntax) is way too subtle and i can't help but feel like it would cause

1573343463
pixelherodev
Unless there's a clear difference in the token used, I think I agree

1573343481
pixelherodev
.. vs ... is waaaay too similar

1573343503
shakesoda
i would definitely confuse them constantly

1573343558
shakesoda
confuse or not even see

1573343664
shakesoda
some of the other proposed syntaxes seem fine in terms of clarity, like ..< and ..<=

1573343668
shakesoda
seems a bit awkward, but not unclear

1573343715
pixelherodev
I think I'd prefer awkward to unclear, but there's probably a better solution

1573343944
shakesoda
the double ended one looks less awkward, if even longer

