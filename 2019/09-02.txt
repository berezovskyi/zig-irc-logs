1567394584
curtisf
Is there any update to date reference on targeting webassembly?

1567395595
andrewrk
Tetralux, if you want a small binary, use --release-small --strip

1567426000
Snektron
Test

1567426129
mq32
Test failed.

1567427283
Snektron
Matrix was acting up

1567432118
kristoff_it
Now that GitHub is letting everyone use build pipelines, a

1567432187
kristoff_it
so that every zig repo gets its own doc immediately available, without intermediary sites like godoc.org

1567432189
daurnimator
kristoff_it: bit of a long path to that I think

1567432265
kristoff_it
daurnimator: yeah I guess, although once we have a package manager even a rudimentary docgen would be enough to get started. The rest can be handled via a simple GitHub Action

1567432320
samtebbs
kristoff_it: How do you see that interacting with actions?

1567432603
shritesh
Not sure if it's the codegen or std.zig.render that's improved, but the wasm output from zigfmt-web is now 262K instead of 1.5M

1567432753
kristoff_it
samtebbs: you setup an action to trigger at every push, for example, and the action runs the tests. If the tests pass, you call a docgen step in zig build which creates a few artifacts in a dir outside of where the repo was cloned (e.g /docgen), then another GH action swtiches branch, copies the contents of /docgen and then pushes a new commit

1567432774
kristoff_it
it's basically what people already do with static websites

1567432778
daurnimator
kristoff_it: rudimentary docgen is a bit far off right now

1567432974
kristoff_it
daurnimator: what about the docs in ziglang.org?

1567433062
daurnimator
kristoff_it:

1567433364
samtebbs
kristoff_it: Yeah that would be a nice idea, we need a doc generator first though

1567435601
andrewrk
I posted dbandstra's game oxid to /r/programming

1567437252
daurnimator
andrewrk: for something like

1567437409
andrewrk
daurnimator, ideally we would identify the underlying cause of the crash before closing it, since the new DirectAllocator API probably just masked the symptoms. However it's pretty likely this case is covered by another report. I'm ok with closing it due to not being able to repro it

1567437467
daurnimator
andrewrk: k. will close as fixed and likely a dupe of #2692

1567437505
andrewrk
sounds good

1567437546
daurnimator
andrewrk: whats your next task to tackle?

1567437762
andrewrk
(1) bugs & PRs to prepare for the release (2) making progress on this branch:

1567437824
daurnimator
(1) sounds fair enough :P 113 open bugs before 0.5.0

1567437859
andrewrk
yeah. they're not all going to get fixed

1567437873
andrewrk
but zig's stability can be greatly improved before the release

1567437956
shritesh
Are there any examples of build.zig linking dylibs on MacOS? I can't seem to find any.

1567438046
andrewrk
shritesh, I don't have an example handy but it's     pub fn linkFramework(self: *LibExeObjStep, framework_name: []const u8) void

1567438078
shritesh
I tried that. But it seems to not respect exe.addLibPath

1567438156
andrewrk
ok yeah I just looked at the docs for LLD command line args and it's -F for framework search paths, and zig doesn't expose this option currently

1567438178
andrewrk
let me wire that up for you real quick

1567438193
shritesh
Thanks

1567438738
andrewrk
shritesh, are you able to test a branch for me?

1567438744
shritesh
Sure

1567438783
andrewrk
framework-dirs

1567438810
andrewrk
the cli option is -F. the build.zig option is addFrameworkDir

1567438943
shritesh
The -F is being passed

1567438952
shritesh
but I got Assertion failed. This is a bug in the Zig compiler.

1567439047
andrewrk
I reproduced it on my mac

1567439093
andrewrk
oh. dammit

1567439188
andrewrk
shritesh, fixed in the branch

1567439453
samtebbs
andrewrk: I would love to fix more bugs and contribute more but find it hard to navigate the codebase and understand what is causing a bug, do you have any tips?

1567439548
andrewrk
samtebbs, here's an idea, if you pick a couple bugs that you tried and were difficult to work on, tell me which one(s) they are. And I'll dedicate one of the livestream days to debugging it and showing how to navigate, understand the bug, and troubleshoot it

1567439640
shritesh
andrewrk: No longer getting the error. BUT, turns out, the library I'm trying to link doesn't have a framework, just a dylib :D

1567439916
andrewrk
shritesh, sometimes eliminating a red herring is the best path to the solution :)

1567439941
andrewrk
I would even go so far as to say nearly always

1567440041
samtebbs
andrewrk: That would be fantastic :) I'm in the UK so can't always watch them live but would definitely watch it when it goes up on YouTube

1567440062
samtebbs
I'll take note of some I looked at yesterday and let you know before the stream on Thursday

1567440078
vegai
does zig test somehow resolve the std library paths differently from build-lib?

1567440092
andrewrk
vegai, no

1567440094
samtebbs
Leaving work now but will drop in later

1567440119
vegai
I'm probably doing something wrong here, I'll paste my output

1567440196
vegai


1567440288
andrewrk
vegai, your build-lib has no exports, it's creating an empty library. the import never happens

1567440294
vegai
zig version says "0.4.0+6ab8b2aa"

1567440308
vegai
ahh, I see

1567440331
andrewrk
you want const parse_float = std.fmt.parseFloat

1567440368
andrewrk
only inside the std lib can the std lib import its own files by path

1567440374
andrewrk
from outside a package you have to use the package's API

1567440418
vegai
yep, that did it. Thank you

1567440448
vegai
package in this case is "std"?

1567440452
andrewrk
yes

1567440461
vegai
great, I'm not totally lost :)

1567441377
daurnimator
huh. I notice std.fmt doesn't print comptime floats

1567441724
andrewrk
var args has a bunch of limitations currently

1567442150
daurnimator
Even e.g. `formatFloatScientific` doesn't

1567442158
daurnimator
or does it?

1567442274
daurnimator
huh. maybe it does. at least it does for 42.0

1567443278
daurnimator
So.... possibly a big topic: I think zig needs a string type: there's far to many times that you want to distinguish between slice of u8 and something that's meant to be utf8 text

1567443283
daurnimator
*too

1567443385
daurnimator
I think I might propose that string literals and e.g. `StructField.name` become a new "Utf8String" type. This type should implicitly cast to `[]const u8`, but not the inverse.

1567444822
Tetralux
daurnimator: In my code, there's a possibility that I do `const string = []const u8;`

1567444842
Tetralux
.. Makes declaring an array of string easier xD

1567444842
daurnimator
Tetralux: so/okay?

1567444860
daurnimator
Tetralux: the Utf8String type I'm proposing would be part of builtin.

1567444893
Tetralux
Indeed.

1567444901
Tetralux
Though, I'd be inclined to use it everywhere.

1567444912
Tetralux
Though that would depend how transparent it was.

1567444922
daurnimator
well it depends on if you have a string or arbitrary bytes...

1567444947
Tetralux
I mean... if you have arbitrary bytes, sure you'd just use []u8?

1567444955
daurnimator
exactly

1567444974
Tetralux
So long as you can cast one to the other.

1567444996
daurnimator
I'm saying you should be able to cast from Utf8String to []u8 but not back the other way.

1567445052
Tetralux
How do you read a Utf8String from a socket then?

1567445081
Tetralux
Utf8String.initAndValidate?

1567445095
daurnimator
You would explicitly have to cast the bytes to Utf8String

1567445110
daurnimator
in debug mode that would include a check that they are actually valid utf8

1567445130
Tetralux
> You would explicitly have to cast: Okay good - that's what I was fishing for.

1567445166
Tetralux
As an aside, I would also suggest you have Utf32String and have it indexable.

1567445201
Tetralux
I would also consider calling it 'string' and 'string32' respectively.

1567445211
daurnimator
.... no

1567445236
daurnimator
the only reason Utf8String needs to exist as a builtin is that string literals would be it

1567445267
daurnimator
as we don't have (and never should have) utf32 string literals, then your Utf32String can live in the standard library or elsewhere

1567445362
curtisf
I guess the counter argument would be that you could just have a function which takes a comptime []const u8 and ensures it's correctly encoded and does the cast for you

1567445493
Tetralux
The reason I say about Utf32, is that I'd consider using it for any program that does string processing.

1567445502
daurnimator
Tetralux: you should almost never do that

1567445508
Tetralux
It makes reasoning about the code easier.

1567445527
daurnimator
Tetralux: it's much faster to work in utf8 space. and you should be using a library for manipulating unicode strings

1567445557
daurnimator
if you're manipulating unicode strings by doing anything other than concatenating them..... you're going to probably be buggy

1567445568
Tetralux
I'd love to see a benchmark of the speed difference.

1567445569
Tetralux
But also

1567445587
Tetralux
Being able to index characters is very handy.

1567445598
daurnimator
Tetralux: citation required

1567445606
andrewrk
indexing characters is a footgun

1567445606
Tetralux
I mean

1567445613
Tetralux
Maybe I'm not understanding unicode correctly

1567445614
Tetralux
But

1567445642
Tetralux
Surely it's obvious that if you reliably index graphems, you're better than if you have to interpret varying-length sequences.

1567445647
curtisf
you can't "index characters", you can only index codepoints, hence footgun

1567445654
daurnimator
Tetralux: one codepoint does not always correpond to one grapheme. it's usually a bug to index a unicode string

1567445683
Tetralux
.. a u32 codepoint?

1567445685
daurnimator
yes

1567445694
Tetralux
Surely that contains every single character in existence.

1567445697
daurnimator
no

1567445710
daurnimator
I think the longest is 22 codepoints?

1567445715
Tetralux
4 billion characters does not contain every possible combination of characters in existence?

1567445731
daurnimator
﷽

1567445731
andrewrk
unicode focuses more on embracing all languages and locales, rather than on ease of implementation or any sort of consistency

1567445737
curtisf
A huge number of characters are encoded using multiple code points (I believe all of Korean's Hangul, for example, are encoded using two codepoints)

1567445759
Tetralux
curtisf: Yeah - I'm asking if that's the case still in utf32.

1567445759
daurnimator
Tetralux: ﷽ that is a single grapheme that is 22 codepoints IIRC.

1567445769
curtisf
UTF32 is an encoding of unicode

1567445774
curtisf
Unicode strings are sequences of codepoints

1567445781
daurnimator
Tetralux: utf32 just means 1 codepoint takes up 32 bits.

1567445785
curtisf
A hangul character is multiple codepoints. Its doesn't matter what encoding you use

1567445856
curtisf
ah, correction; most of Hangul is

1567445879
daurnimator
curtisf: yes there is composed and decomposed forms

1567445908
andrewrk
bottom line is: don't assume you can do anything with strings, without verifying that operation is sound

1567445958
andrewrk
and I mean anything - even comparing for equality has complications.

1567445976
andrewrk
I've been careful to call things "bytes" in the std lib rather than using the word "string"

1567445978
daurnimator
andrewrk: thoughts on my proposal above for Utf8String as a new builtin type?

1567446004
andrewrk
I don't think you successfully justified it. I suggest trying to revive one of the closed proposals for it

1567446075
shritesh
I thought that's what std.unicode.Utf8{View,Iterator} were for

1567446123
daurnimator
The particular use case I'm hitting right now is that I'm jsonifying an arbitrary zig object: but when I hit something with `@typeOf(value) == []const u8` I don't know if I should serialise as an array or a string

1567446166
daurnimator
the type system doesn't currently have a way for a user to express that

1567446198
andrewrk
that's a good use case

1567446204
daurnimator
but also, it requires that I validate (at runtime) that a `[]const u8` is valid utf8. rather than having it encoded into the type system

1567446297
daurnimator
furthermore, serialising as array vs string based on whether a []u8 contains valid utf8 or not, is a footgun waiting to happen that I've immediately eliminated as an option

1567446379
andrewrk
it's relevant for std.fmt.format as well

1567446434
daurnimator
indeed.

1567446470
andrewrk
I'd like to explore the "tags" / field labels first, since that's a more general thing that also addresses this use case

1567446589
daurnimator
sidebar: how do you initialise an anonymous union? `union {Foo: u32, Bar: bool}(.Foo = 42)` doesn't work

1567446636
andrewrk
anonymous unions & structs need the accepted proposals for "struct literal" syntax in order to be useful

1567446669
andrewrk
it would be: .{.Foo = 42}

1567446674
daurnimator
anonymous structs work fine: `struct {foo: u32}{.foo = 42}`

1567446692
andrewrk
not in all contexts, for example as a function return value

1567446718
daurnimator
right

1567446737
daurnimator
I'm just trying to write some one-liner tests for various structs

1567446743
daurnimator
(and unions, and enums)

1567446939
mikdusan
andrewrk: yes tags would be interesting: `const String = ([]const u8)[:utf8];` and std.mem could still be used for many operations but would need specializations for mem.trim et al

1567447095
mikdusan
s/const//

1567447286
mikdusan
ah my example is all wrong. nuke it.

1567447493
Tetralux
I feel like there should be an encoding where each integer value is just another number or something.

1567447495
Tetralux
Cause that...

1567447499
Tetralux
That is kinda silly.

1567447709
nitram91
Hello, I'm trying to use file streams (

1567447873
andrewrk
nitram91, that's a type

1567447880
nitram91
welll yes

1567447906
andrewrk
I think you want to take the pointer to the stream field of the seekable stream

1567447920
andrewrk
const seekstream = &fs.File.seekableStream(a_out).stream;

1567447920
nitram91
but how am I supposed to use it ? How do I get it from a file ? I'm going through the zig's std source but I don't really understand

1567447987
nitram91
oh ok

1567447998
andrewrk
this is how we get "interfaces" without any language feature

1567448003
andrewrk
for now at least

1567448017
nitram91
yeah, that's what I'm starting to understand from reading the comments

1567448038
nitram91
Are there any docs regarding the "traits" in zig ?

1567448043
andrewrk
no

1567448056
andrewrk
just source

1567448063
nitram91
ok, I'll go through the source then

1567448077
nitram91
thanks

1567448084
andrewrk
good luck, feel free to ask questions

1567448118
Tetralux
You do a_out.seekableStream(); - You use that to seek.

1567448184
andrewrk
Tetralux, did you see that they posted a code example?

1567448200
Tetralux
Yeah

1567448203
Tetralux
The key point is

1567448222
Tetralux
That the thing you get from .inStream, .outStream, .seekableStream is how you get that functionality from the thing.

1567448227
Tetralux
Whereas, with real interfaces,

1567448239
Tetralux
They'd just be member functions on the File.

1567448254
Tetralux
It's kinda like casting the File to the SeekableStream interface.

1567448255
Tetralux
Kinda.

1567448325
Tetralux
SeekableStream is a little different to the others.

1567448520
Tetralux
Short version: it's confusing xD

1567448656
nitram91
indeed it is

1567448988
nitram91
what I don't get is, if this pretty much works like an interface, then why do I get this warning ? note: pointer type child 'std.fs.file.SeekableStream' cannot cast into pointer type child 'std.io.seekable_stream.SeekableStream(anyerror,anyerror)'

1567449203
nitram91
I changed my code to this

1567449226
andrewrk
nitram91, those are different structs

1567449249
andrewrk
that second error is

1567449334
andrewrk
I'm still thinking about how to solve this. You can work around this with a ptr cast, because those types are guaranteed to be identical

1567449529
daurnimator
hrm. has anyone actually used std.json for parsing? I don't see how to e.g. actually get the number out of a token?

1567450288
nitram91
when printing a struct, how do you print with newlines between each struct field ? (can I put anythiing in the format string to make it work ?)

1567450368
daurnimator
nitram91: I don't think there's an option for thast

1567450383
nitram91
darn it

1567450588
mikdusan
nitram91: you can create a custom formatter for a struct:

1567450663
mikdusan
basically add a `fn format` to your struct

1567450803
Tetralux
daurnimator: I'd be interested in measurements for that.

1567450893
nitram91
ok thanks mikdusan

1567452322
nitram91
andrewrk I have a question regarding some code (I'm trying to contribute to some TODO: implement me functions), can I ask a small question here or should I open an issue ?

1567452520
andrewrk
ask away

1567452526
andrewrk
open an issue if you don't get a response

1567452561
nitram91
andrewrk I'm trying to implement Elf.openFile in elf.zig and there is a comment on top of the function saying "Call close when done". Which I guess implies it should be closed using Elf.close. Is that really what is wanted, shouldn't the file only be closed by File.close and not by the Elf.close ?. (i hope im being clear)

1567452643
nitram91


1567452681
andrewrk
nitram91, there used to be implementations there and the API changed, that's why those are there. the reason Elf.close exists is that it may have other resources such as allocated memory to clean up

1567452700
andrewrk
Elf.close will probably call File.close

1567452727
andrewrk
if you call openFile then it should leave it open

1567452742
andrewrk
there used to be an Elf.auto_close field to distinguish

1567452755
nitram91
ok, makes sense

1567452961
daurnimator
how can I turn a *T into a slice of length one?

1567453086
curtisf
std.mem.Allocator.destroy does it, though it's not so pretty looking

1567453167
curtisf
maybe it's already wrapped up somewhere else in std

1567453255
daurnimator
`@ptrCast([*]u8, &c)[0..1]` works I guess...

1567453337
andrewrk
better to avoid ptr cast. you can do it with 2 implicit casts

1567453368
andrewrk
([]T)(*[1]T)(&x)

1567453383
Tetralux
Those are implicit casts?

1567453443
andrewrk
yes. did I make a proposal for adding a field as a pointer property of single-item pointers yet? e.g.  ptr.many would turn a *T into a *[1]T

1567453454
daurnimator
andrewrk: k. though TBH I think that's less readable. also I have to repeat `T`

1567453468
curtisf
probably it should be at least a function added to std.mem.?

1567453484
andrewrk
we already have slice.ptr which turns a []T into a [*]T

1567453491
daurnimator
andrewrk: how about a cast directly: `([]T)(&x)`?

1567453510
andrewrk
that's possible. but it sort of defeats the point of separating one-item pointers

1567453533
mikdusan
ptr.many? then if ptr is to a struct, field name must never == "many"

1567453535
daurnimator
andrewrk: FWIW I'm trying to pass a one-item pointer to read()

1567453730
andrewrk
mikdusan, oh right. that's a bad idea

1567453751
andrewrk
daurnimator, yeah I'm aware of this awkwardness

1567453783
andrewrk
making *T cast to []T is not off the table, I'll still consider it

1567453798
andrewrk
but I want to make sure there are no footguns associated with that

1567453819
andrewrk
better to have some awkwardness than an (even rare) footgun

1567453934
daurnimator
FWIW it's not super bad. the `[]T` is already in the function signature, so I only have to write: `self.stream.read((*[1]u8)(&c)))`

1567453991
mikdusan
+1

1567454097
daurnimator
but without you andrewrk I don't think I ever would have thought of the intermediary cast to `*[1]T`

1567454110
daurnimator
so need some sort of discoverability of that...

1567454132
andrewrk
yeah

1567454157
Tetralux
One way might be to make things like `usize(m)` be extended, so that you do it more often.

1567454199
Tetralux
Like `warn("{} / {} ({} %)\n", n, count, f64(n) / f64(count));`

1567454334
daurnimator
andrewrk: currently the compiler error is just `expected type '[]u8', found '*u8'`. Perhaps it should gain a note "did you want a slice of length 1? cast via '*[1]u8'"

1567454342
daurnimator
Tetralux: I have no idea what you're saying there...

1567454349
andrewrk
daurnimator, I agree, PR or issue welcome

1567454366
daurnimator
andrewrk: k.

1567454371
daurnimator
then bed for me :)

1567454382
andrewrk
I was gonna say

1567454389
Tetralux
daurnimator: .. because then you'd be more used to being able to do T(X), and it might therefore occur to you to try it in that circumstance.

1567454394
daurnimator
yeah... 6am

1567454401
andrewrk
goodness. get some sleep!

1567455920
samtebbs33
I think I'm having a brainfart here, but how do I get the address of an array? I've tried various combinations with @ptrToInt but the compiler always complains that "it can't evaluate the constant expression"

1567456009
andrewrk
&array

1567456019
andrewrk
can you show more of the output?

1567456038
andrewrk
it sounds like you're trying to get the address of an array at compile-time

1567456047
samtebbs33
It's within a test

1567456088
Tetralux
You mean you want *[]T?

1567456098
samtebbs33
Which no that I think of it, essentially is compile time

1567456145
andrewrk
within a test is not comptime

1567456152
Tetralux
( .. zig test produces an exe which is then run)

1567456296
samtebbs33
Tetralux, andrewrk: Ah ok

1567456327
samtebbs33
So I had the array declaration outside of the test block which when moved to within the test block compiled fine

1567456342
andrewrk
samtebbs, ah yes that was it. global variable initializations run at comptime

1567456371
andrewrk
in theory that should still work. the new lazy value stuff got us closer to that working

1567456387
Tetralux
Wait - you couldn't take the address of a global array in a test?

1567456397
Tetralux
Yeah - that certainly should work at some point.

1567456401
andrewrk
address of a global array in a global

1567456428
Tetralux
Ah right, right. Just a dependancy-order thing then.

1567456436
andrewrk


1567456442
Tetralux
"This array has to be set up before you can take its ptr."

1567456488
Tetralux
I'm curious about how the lazy stuff actually works.

1567456517
Tetralux
Like, it's

1567456519
Tetralux
Right?

1567456544
Tetralux
It's more, "You don't need to fully evaluate this thing in order to say 'I want the pointer to it's value.'"

1567456691
samtebbs33
andrewrk: It may not have worked because I'm on 0.4.0 in this project. I get some compiler segfaults/assertion failures when analysing build.zig if I use master

1567456709
samtebbs33
I still need to make a test case for that and report it actually

1567456721
mikdusan
ziguana lounges around all day long. he's real lazy and only does what he must.

1567456804
andrewrk
samtebbs, ah. I'd be interested in helping you get onto master before 0.5.0 is released. I'll start with the bugs you have open

1567457567
samtebbs33
andrewrk: Thanks :) I'll try to make a small test case then report it

1567457803
samtebbs33
The ones I currently have open aren't blockers, possibly with the exception of #2791

1567457933
Tetralux
Why can't you compare ?u64?

1567457947
Tetralux
Or presumably any two ?Ts for that matter.

1567458047
samtebbs33
Ok looks like #2791 is the same issue

1567458049
mikdusan
wanting to compare if_null or values or both?

1567458481
Tetralux
mikdusan: For x, y: ?T => x == y

1567458863
mikdusan
i wouldn't mind that feature as long as in that equality (x != null) && (y != null), the value equality follows the same rules as `T1 == T2`

1567458910
Tetralux
I was doing it on integers, so that would work.

1567458942
Tetralux
Also

1567458966
mikdusan
eg. `?u64 == ?u32` ok. but still want a compiler error `?f32 == ?u32`

1567459022
Tetralux
mikdusan: I was looking for `if (a == null and b == null) return true; if (a != null and b != null and a == b) return true; return false`

1567459024
Tetralux
But yes

1567459030
Tetralux
That's a valid use case too I'd imagine.

1567459031
Tetralux
But yes

1567459032
Tetralux
Also

1567459048
Tetralux
Has anyone else seemingly had problems related to list.popOrNull

1567459057
Tetralux
where list is std.ArrayList(?u64)

1567459079
Tetralux
where you'd do `list.popOrNull else unreachable`

1567459103
Tetralux
(.. meaning, I want to get the last elem, which may be null or a u64)

1567459133
Tetralux
But not being able to tell if it was empty, or if the elem was null.

1567459151
mahmudov
hi, any help for building

1567459153
mahmudov


1567459200
andrewrk
mahmudov, do you see the error?   LLVM is missing target AArch64.  Zig requires LLVM to be built with all default targets enabled.

1567459239
mahmudov
yes andrewrk i couldn't figure out it so

1567459284
mahmudov
which cmake flag i need

1567459287
mahmudov
i used this

1567459305
mahmudov


1567459311
mahmudov
as build script

1567459409
andrewrk
mahmudov, your llvm package has been mangled/forked/misconfigured

1567459431
andrewrk
zig is refusing to build against it

1567459438
mikdusan
(ewww that git error is distracting)

1567459463
mahmudov
hmm

1567459528
andrewrk
unrelated: this is the next step in the async/await proof-of-concept:

1567459653
andrewrk
mikdusan, oh, that's coming from zig's cmake isn't it? it's also doing the wrong thing, producing a + there

1567459715
mikdusan
just verified ERROR_QUIET is supported by your cmake 2.8.5 low-mark. that should hush up git fatal.

1567459722
mikdusan
what did you want instead of '+' behavior ?

1567459759
andrewrk
same behavior as if git is not found on the system, leave ZIG_VERSION as the value it is already initialized to

1567459781
mikdusan
ok. i'll do a PR after some trial runs.

1567459785
andrewrk
thanks!

1567460256
Tetralux


1567460656
andrewrk
I'll spend some time on bugs & PRs before getting to 3157

1567460855
mahmudov


1567460866
mahmudov
so i can't buid zig?

1567460877
andrewrk
mahmudov, not without LLVM

1567460908
mahmudov
i have already it

1567460916
Tetralux
.. Not without LLVM that has AArch64 enabled.

1567460924
mahmudov
got it

1567460924
Tetralux
.. Which is set up when LLVM is built.

1567460932
mahmudov
ok

1567460960
Tetralux
So, you either need to build LLVM yourself, or find a binary of it that has that stuff enabled, IIUC.

1567460976
mahmudov
clear Tetralux , thnks

1567460981
Tetralux
o7

1567460985
mahmudov
going to do

1567463771
mikdusan
Tetralux: for #3158 are you getting: LLVM ERROR: Broken module found

1567463796
Snektron
Is it possible to detect an @cDefine from Zig?

1567463817
Snektron
Does that just define a symbol with the same name?

1567463844
Snektron
(i remember something about defines not working with zig translate-c, im not sure if it works now)

1567467052
Tetralux
mikdusan: No.

1567467374
Tetralux
Snektron: @cDefine does the equivalent of #define in the C file IIRc.

1567467422
mahmudov


1567467487
mahmudov
i re-compiled llvm with multi-target

1567467584
Tetralux
Try with Zig master branch.

1567467619
andrewrk
zig 0.4.0 source will not build with gcc 9.1.0

1567467664
andrewrk
mahmudov, I believe you want to be using -DCMAKE_BUILD_TYPE=Release or -DCMAKE_BUILD_TYPE=RelWithDebInfo

1567467673
andrewrk
that disables -Werror

1567467678
mahmudov
ok

1567467694
andrewrk
that should work with gcc 9

1567467727
andrewrk
or - as Tetralux noted, a master branch debug build. I don't see the purpose of a 0.4.0 debug build

1567467782
mahmudov
-DZIG_FORCE_EXTERNAL_LLD=ON

1567467788
mahmudov
shoukd it need?

1567467792
mahmudov
should*

1567467801
andrewrk
I recommend to leave that on the default

1567467814
mahmudov
ok

1567467834
mahmudov
ok -DCMAKE_BUILD_TYPE=Release figure out

1567468018
mahmudov
# zig

1567468019
mahmudov
: CommandLine Error: Option 'xcore-max-threads' registered more than once!

1567468019
mahmudov
LLVM ERROR: inconsistency in registered CommandLine options

1567468069
Tetralux
You did do git checkout master yeah?

1567468088
andrewrk


1567468120
mahmudov


1567468122
mahmudov
i used this

1567468165
andrewrk
looks like daurnimator added this option which should solve it: -DZIG_STATIC_LLVM=ON

1567468185
Tetralux
andrewrk: That isn't in 0.4 though, right?

1567468253
andrewrk
oh, yeah. that patch is in master but not 0.4

1567468317
Tetralux
mahmudov: It should be fine if you use

1567468329
mahmudov
ok

1567468421
Tetralux
Oh right - if you use that you won't have to build it

1567468507
Tetralux
If that still has problems for you, then you can use git and clone it from source - then build that.

1567468514
Tetralux
Hopefully one of those works.

1567468572
mahmudov
i am going to use

1567468578
mahmudov
i nned to build from source

1567468581
mahmudov
need*

