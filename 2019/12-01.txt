1575158422
Spacemonkey2126
And it's dangerous for C programmers that are used to array->pointer decay

1575158435
daurnimator
Spacemonkey2126: are you essentially thinking about:

1575158473
mq32
Spacemonkey2126: yeah, Zig has

1575158475
Spacemonkey2126
Oh, cool. I'll definitely take advantage of Godbolt.

1575158495
mq32
so arrays are value types and are expected to copy when assinging to a new variable

1575158506
andrewrk
Spacemonkey2126, I'm happy to look at godbolt examples or other codegen comparisons

1575158506
mq32
this allows for some very nice code compared to C

1575158522
Spacemonkey2126
Something like 3804, yes

1575158549
Spacemonkey2126
I'd even be more in favor of a loud copy like `@copy(val)`

1575158597
Spacemonkey2126
I hate all implicit copies.. it's a big reason for bad and slow code (see C++ std::string => const char * => std::string => ... etc etc )

1575158634
Spacemonkey2126
Okay, thanks for the explaination

1575158649
andrewrk
3804 won't improve codegen in any way, it will only add compile errors to prevent mistakes

1575158665
Spacemonkey2126
That's fine.

1575158675
andrewrk
what implicit copy are you talking about? zig has even less implicit copies than C

1575158691
mq32
Spacemonkey2126: > I hate all implicit copies

1575158700
Spacemonkey2126
Codegen is good enough at this stage .. C has had decades of tuning compiler heuristics..

1575158707
mq32
copying arrays as in your example above is definitly an explicit copy

1575158717
andrewrk
oh, you copied an array. that's not implicit, that's explicit. simply remove the copy :)

1575158759
andrewrk
if you're concerned about accidental copies, you could make the array a pointer at the site you declared it in

1575158766
lupine
zig master, or zig 0.5 ?

1575158775
Spacemonkey2126
0.5

1575158803
Spacemonkey2126
andrewrk You can make it a ptr without affecting the memory layout?

1575158827
Spacemonkey2126
Are you saying in the struct? Or in the code?

1575158850
andrewrk
var array = [_]i32{1, 2, 3}; // array value

1575158868
andrewrk
const ptr = &[_]i32{1, 2, 3}; // pointer to array

1575158884
lupine
heh, fair enough. AoC in zig this year

1575158886
daurnimator
andrewrk: is the array mutable?

1575158918
daurnimator
lupine: oh right I forgot about that. I should go do todays :)

1575158928
lupine
you've got 5 hours to wait :/

1575158935
lupine
I figured I might as well set up the compiler though

1575158944
andrewrk
lupine, too bad nobody made InStream.scan yet

1575158950
Spacemonkey2126
The struct was: ```const Array = struct {

1575158952
andrewrk
maybe I'll do it tomorrow

1575158957
lupine
:p

1575158961
daurnimator
lupine: oh. right. timezones

1575158962
Spacemonkey2126
(Argh.. sorry)

1575159006
andrewrk
daurnimator, const. if you want mutable you have to make a separate var and take that pointer

1575159080
lupine
d'oh, no llvm8 in buster. binaries it is

1575159132
daurnimator
lupine: you mean 9?

1575159216
andrewrk
lupine, there is also apt.llvm.org if you like

1575159284
Snektron
that or you can even download llvm and clang as pre-built binaries

1575159491
lupine
I meant 9, aye. I'll just slum it with the binaries for now

1575159511
lupine
an arm laptop is showing up next week so I'll probably have to navigate builds at that point anyway ^^

1575159815
andrewrk
lupine, is that the pine book pro?

1575160585
lupine
andrewrk: yeah

1575160621
lupine
hmm, is there a gtksourceview language file for zig hanging around anywhere? found the sublime bundle, but don't see a quick way to convert

1575160891
daurnimator
lupine: not that I know of: if you created one we'd (probably... don't want to put words in andrewrk's mouth) be happy to host it under the ziglang github org

1575160981
lupine
I'll give it a poke. funny all the little things a programming language "needs" ^^

1575161945
emekankurumeh[m]
i just realized that if we implement #3806 for floats as well we could eliminate all divide by zero exceptions by having `/` be an inline function that takes two `@Float(-math.f64_max, math.f64_min) âˆª @Float(math.f64_max, math.f64_min)`

1575162026
daurnimator
emekankurumeh[m]: we don't have unions of types though

1575162282
emekankurumeh[m]
it's a shame we don't though /s

1575163081
andrewrk
lupine, I was able to run the aarch64 binary from ziglang.org/download on a pinebook pro, but when I tried to compile LLVM from source I got a compile error

1575163328
lupine
Oh, i see it, only there for master ^^

1575163643
andrewrk
lupine, yeah, CI builds for aarch64 is new

1575163680
andrewrk
daurnimator, if you look at page_size usage in the std lib, there are a lot of places where it must be compile-time known. for example the size of an array on the stack

1575163896
daurnimator
andrewrk: most of that is just picking a nice performant size for buffers

1575163909
daurnimator
rather than anything

1575163976
daurnimator
infact I can't find any usages that

1575164042
daurnimator
okay I found one test in PackedIntArray that uses it to make a sort of bad assumption

1575165182
andrewrk
daurnimator,  you can try changing that to `var` in the std lib and see what breaks

1575165322
daurnimator
andrewrk: I think its evident what will break: the issue is that we've been using page_size where we meant BUFSIZ

1575165975
daurnimator
andrewrk: I'll send a patch in a minute if you want

1575165991
andrewrk
do not want

1575166051
andrewrk
sorry, I'm being dramatic. I'll take a look, but I don't want to break everything with regards to page_size until it's clear what the decision on #2564 is

1575166824
daurnimator
andrewrk: does the panic on non-matching page size exist? I'm not seeing it

1575166973
andrewrk
hmm I don't see it either. I wonder why I thought we were doing that

1575167309
daurnimator
also I don't think we can put it in a variable: that wouldn't work in a library as there is no libc variable with the page size in it: we need a `mem.get_page_size()` function

1575167472
andrewrk
I think the only thing that should change is to add: /// this is the minimum page size of the target

1575167672
daurnimator
I think we need to be explicit and have mem.min_page_size, mem.max_page_size and mem.bufsiz

1575168016
andrewrk
what's bufsiz?

1575168067
daurnimator
andrewrk: BUFSIZ is the traditional C macro that contains the "recommended" size for buffers

1575168100
andrewrk
sounds misguided

1575168123
daurnimator
why? that's exactly what the majority of our mem.page_size usage is

1575168241
andrewrk
there isn't a single buffer size that makes sense in all contexts, and mem.page_size isn't that value either

1575168315
daurnimator
andrewrk: yet we use it.... as I said, I only found a single usage of mem.page_size in the standard library that

1575168345
andrewrk
ok but BUFSIZ isn't better

1575168409
daurnimator
andrewrk: what you suggest instead for e.g.

1575168417
daurnimator
*what would you

1575168518
andrewrk
I would start by doing this:

1575168546
andrewrk
I mean literally I would do that because I don't know the answer

1575168585
daurnimator
andrewrk: and you might find that the correct answer is "use BUFSIZ" :)

1575168625
mikdusan
device-neutral bufsize. meh...

1575168654
andrewrk
using a page size is sort of nice because that's kind of like 1 stack space unit

1575168655
daurnimator


1575168951
andrewrk
damn, lazy values mean hanging on to references to IrAnalyze longer than preferable

1575168990
mikdusan
I don't know where/when but some copy-on-write management of stage1 structs might be in order

1575169101
andrewrk
completely agree

1575169341
andrewrk
daurnimator, I do welcome you to create a well-thought-out pull request addressing page size if you are empassioned to do so

1575169475
daurnimator
not so much empassioned as procrastinating

1575169482
andrewrk
I wonder what that Unknown_8 is taking up 227 MiB

1575169496
andrewrk
maybe it's eval_branch_quota

1575169541
mikdusan
just going to guess any pointer allocations?

1575169671
andrewrk
oh right we do that with struct fields now

1575169762
mikdusan
Q. in C++ if given a template param type, can it be converted to string name portabily?

1575169793
andrewrk
I briefly looked into that, and concluded implementation and debugging time would far exceed simply adding an optional name parameter

1575169799
mikdusan
ah ok

1575169893
mikdusan
ah now I remember. some platforms would need demangling. boohoo

1575169921
andrewrk
hmm, ZigList (stage1's array list) hides from the memory profiling

1575169947
andrewrk
oh, it just doesn't count frees

1575169968
andrewrk
fixed

1575169996
mikdusan
also I think it's time for arena allocator ported to stage1/c++

1575170112
andrewrk
custom names also allow this: allocate<IrExecutable>(1, "IrExecutablePass1");  allocate<IrExecutable>(1, "IrExecutablePass2");

1575171601
marler8997
what is alignment supposed to be for array types?

1575171605
marler8997
is it just always 0 or something?

1575171762
mikdusan
I think it should be the same alignment as element of array

1575171898
marler8997
thanks that makes sense

1575171979
daurnimator
andrewrk: uh, so why is alignment a u29 again?

1575172007
daurnimator
did you know that the s390x supports 2G pages?.... how are we meant to align to one of those?

1575172088
marler8997
in that case you just wouldn't use zig's type system to ensure alignment of pages

1575172187
marler8997
[*]align(N) is a type superset of [*]align(M) where M is a multiple of N

1575172201
andrewrk
u29 is a limitation of llvm, but that's a good point that the zig language shouldn't be specified by llvm

1575172291
daurnimator
even if we can't support larger aligns on types.... we should at least be able to pass it to .alignedAlloc

1575172343
daurnimator
hell; I'm not even sure how I'm meant to pass 1G to .alignedAlloc and that's available on x86_64

1575176119
andrewrk
mikdusan, I definitely agree with you on the bringing arena allocator into stage1

1575176317
marler8997
hey I'm trying to figure out the right way to fix this sentinel issue

1575176332
marler8997
it looks like TypeInfo.Pointer is storing a dynamically typed value

1575176338
marler8997
sometimes it's optional, and sometimes it isn't

1575176365
marler8997
is it supposed to be dynamic, or should the compiler check the type before it instantiate an instace of TypeInfo.Pointer?

1575176380
andrewrk
it's always supposed to be optional

1575176388
marler8997
ok that makes sense

1575177335
marler8997
I see you can use ir_implicit_cast to go from IrInstruction to ZigValue, is there a way to implicit cast one ZigValue to another?

1575177360
andrewrk
mikdusan, after #3787  there is only 1 failing behavior test case with inlining ConstGlobalRefs into ZigValue, and it seems fixable without reverting

1575177418
marler8997
of course I could be doing this wrong, trying to cast the sentinel value to it's optional type, but I only have a ZigValue where I"m looking, maybe I need to find out where it's analyzing IrInstruction?

1575177476
andrewrk
marler8997, if you're looking at the typeinfo related code, who person who contributed it converted the IrInstruction into a ZigValue too early

1575177493
andrewrk
it will be more obvious what to do if that is corrected

1575177502
marler8997
ok I think I gotcha

1575177814
meowray
zig doesn't call InitTargetOptionsFromCodeGenFlags() to initialize llvm::TargetOptions. this is strange

1575177872
andrewrk
meowray,

1575178702
marler8997
after my fix I get this: error: expected type '[*:0]const u8', found '*const [14:0]u8'

1575178709
marler8997
that's supposed to implicitly convert I think yes

1575178746
andrewrk
yes

1575180412
marler8997
think I fixed most of it, having a hard time figuring out where the sentinel value is set for string literals

1575181417
andrewrk
marler8997, init_const_str_lit calls get_array_type with g->intern.for_zero_byte()

1575181453
andrewrk
they use an interned null byte value

1575181460
andrewrk
to save memory

1575181504
marler8997
thanks!

1575181945
marler8997
should I intern an optional u8 zero for string literal sentinel values?

1575182017
andrewrk
string literal sentinel values are u8 zero, not optional u8 zero

1575182030
andrewrk
types are already interned

1575182041
marler8997
> it's always supposed to be optional

1575182113
marler8997
so then I'm confused, it's not always supposed to be optional?

1575182116
andrewrk
the sentinel field of std.builtin.TypeInfo.Pointer is always an optional type

1575182141
marler8997
but you just said it's u8 zero, not optional u8 zero?

1575182211
andrewrk
string literals are `*const [N:0]u8`, that 0 is type u8, not ?u8

1575182224
marler8997
what?

1575182241
marler8997
you just said that the field is always an optional type

1575182248
andrewrk
the sentinel field of std.builtin.TypeInfo.Pointer

1575182253
marler8997
so the 0 will be implicitly converted to a ?u8

1575182270
andrewrk
the sentinel value is not optional, but pointers optionally have sentinels

1575182280
marler8997
right

1575182288
marler8997
so in the init_const_str_lit function

1575182295
marler8997
it's creating a ZigValue

1575182320
marler8997
and the sentinel value is currently not optional

1575182325
marler8997
you're saing that is correct?

1575182393
andrewrk
I see, this is the same question as, should we intern

1575182415
andrewrk
I don't think ?u8 will need to be a special case

1575182531
marler8997
I think there may be 2 levels of interning, there are 6 special ZigValues that are hardcoded in the "Intern" struct

1575182535
andrewrk
it wouldn't hurt anything though, feel free to add more special case interns

1575182537
marler8997
should it be apart of those?

1575182617
andrewrk
mikdusan, this commit is thanks to your ZigValue PR:

1575182642
andrewrk
what other level are you referring to? types?

1575182655
marler8997
hardcoded interning

1575182660
marler8997
vs what I'm assuming is runtime interning

1575182680
andrewrk
zig code at runtime? I'm talking only about ZigValue

1575182689
marler8997
lol

1575182691
marler8997
compiler runtime

1575182703
andrewrk
what hard coded interning are you talking about?

1575182723
marler8997
the Intern struct in all_types.hpp

1575182752
andrewrk
ok that's 1, what's the other level you are refering to?

1575182768
marler8997
I assume you're interning more than just these 6 values

1575182772
andrewrk
nope

1575182775
marler8997
oh!!

1575182780
marler8997
k, I got it

1575182781
andrewrk
other than types

1575182811
marler8997
I hope I'm not being too annoying with these questions, it's definitely helping me go alot faster

1575182823
andrewrk
nope no worries, sorry if I sound grumpy, I'm about to go to bed

1575182838
mikdusan
andrewrk: wow another 225 MiB. nice

1575182850
andrewrk
if we can sever those other refs to IrAnalyze it will go down a lot more

1575182861
daurnimator
andrewrk: oh I have a couple of misc non-coding tasks if you're finished coding for the day :)

1575182995
leeward
a

1575183004
leeward
whoops

1575183131
leeward
Hmm, got a segfault on build.

1575183178
daurnimator
oh, one thing was: can we set up a discord webhook => if I give you a string can you put it into the repository settings?

1575183430
mikdusan
in five days, net change in maximum resident-set-size for building test for std has gone from 4.8 GiB -> 4.3 GiB (macOS). that's a whopping 0.5 GiB reduction

1575183443
mikdusan
(master branch)

1575183705
leeward
Any ideas why this isn't compiling (on master)

1575183711
leeward
?

1575183845
leeward
The goal is to print 16-bit words in a file in hex; feel free to suggest a better method.

1575183950
marler8997
fs.Dir.cwd()

1575184070
daurnimator
marler8997: no it was moved

1575184219
daurnimator
leeward: I get a crash locally.

1575184221
mikdusan
something wonky. I get a segfault with master, compiling that fs.cwd() code

1575184235
mikdusan
if i make fs.bogus.cwd() then a proper error

1575184244
daurnimator
leeward: but you do need to use `src.read(&bytes)` with the &

1575184295
daurnimator
leeward: oh and you need to `@bitCast(u16, bytes)`

1575184300
daurnimator
you were trying to bitcast the slice

1575184328
leeward
daurnimator:  error: expected type '[]u8', found '*[]u8'

1575184343
daurnimator
leeward: have you rebuilt recently?

1575184349
daurnimator
make -C build

1575184351
daurnimator
:)

1575184387
daurnimator
leeward:

1575184399
leeward
I'm using zig build.

1575184405
leeward
Oh, you mean zig?

1575184423
leeward
Looks like fixing the @bitCast fixed the compilation errors.

1575184435
daurnimator
leeward: yeah. my guess is you pulled but didn't rebuild. so you have an old executable with a new std

1575184461
mikdusan
does godbolt display or can it show `zig version` anywhere?

1575184468
daurnimator
leeward: but otherwise, that was 2 bugs in the zig compiler you just uncovered.

1575184488
daurnimator
leeward: you should file issues :) hopefully with minimal reproductions of each?

1575184525
leeward
I was pretty sure I built.

1575184587
leeward
2 bugs? `@bitCast(u16, bytes[0..])` and what?

1575184673
daurnimator
oh; I thought I was getting a segfault sometimes instead of the error message for the missing &

1575184701
daurnimator
but I think I'm wrong on that

1575184705
daurnimator
so yeah just one bug

1575185296
leeward
hmm, this is harder to reproduce with small amounts of code than I expected.

1575185406
daurnimator
leeward: howso?

1575185434
daurnimator
leeward:

1575185479
leeward
That's what I was trying

1575185485
leeward
but I got a sensible error message.

1575185549
leeward
But I guess I did something wrong.

1575185868
leeward
3818 submitted

1575186114
daurnimator
leeward: thanks :)

1575188167
daurnimator
zig/lib/std/io/test.zig:599:23: error: expected token ';', found 'StringLiteral'

1575188176
daurnimator
uh... are io tests not being run on master or something?

1575188180
daurnimator
andrewrk: ^?

1575188241
daurnimator
nevermind, I'm an idiot

1575188524
leeward
I have a function that takes a pointer to a thing, then tries to modify the thing. I'm getting an error saying that I'm trying to discard const qualifier, but `fn (thing: *Thing) void { thing.val += 1; }` doesn't have const in it.

1575188528
leeward
What am I missing?

1575188837
daurnimator
leeward: all arguments are const. ==> the thing pointer itself is const. you probably have a body that does something like: `thing = thing.next;`

1575189135
leeward
Oh, I'm being dumb.

1575189157
leeward
Never mind, nothing to see here.

1575199022
gonzus
Hello!

1575199044
gonzus
I just had my hour of fun with AoC day #1. :-)

1575199081
gonzus
I am sure my zig code sucks. I have not kept up to date and basically just hammered on it until it ran.

1575199111
gonzus
And now I am wondering: do we have an "official" place where we could upload the code and receive some constructive criticism?

1575199126
gonzus
I would love to hear how I can make my code more idiomatic.

1575199231
gonzus
Also, I don't want to spoil the fun for anybody by simply posting the code here or in the mailing list.

1575199282
lupine
I tend to just create a repository called aoc20xx - that makes it obvious what the code is goiung to be

1575199431
gonzus
lupine that would also work. In fact, it might be better to just take a look at other people's code, rather than asking others to look at mine.

1575200012
daurnimator
oh right advent of code

1575200254
gonzus
Yes, sorry for being cryptic :-)

1575201489
daurnimator
done :)

1575203822
lupine
heh. trying to compile that locally I get: error: type 'std.os.windows.GetStdHandleError!std.fs.file.File' does not support field access

1575203843
lupine
my own attempt was foundering on readUntilDelimiterOrEof not being found

1575203997
daurnimator
lupine: are you on master?

1575204005
lupine
no, 0.5.0

1575204014
daurnimator
that'll be why :)

1575204016
lupine
I did ask in here :D

1575204600
lupine
I'll come back to it with master later

1575205362
gonzus
Yeah, my code is pretty much the same. There isn't much room for variety here anyway :-)  but I did have to fight the boilerplate a bit.

1575206324
Snektron
daurnimator: Do you have any plans for a mixin-style iterator?

1575206390
lupine
Last year (rust) i was opening files and stuff. Never even thought to use stdin

1575206521
daurnimator
Snektron: no.... what would it do?

1575206558
daurnimator
lupine: easier to copy/paste into my terminal than copy/paste into a file, save it, name it, and open it :P

1575206804
Snektron
daurnimator: i was thinking something along the lines of java streams/rust iterators/c++ ranges

1575206869
daurnimator
the stream one will have huge usability improvements though

1575206880
Snektron
i suppose thats a good idea

1575209479
FireFox317
andrewrk: did you know you are mentioned on the homepage of sourcehut?

1575209772
FireFox317
you probably do, but just wanted to mention it xd

1575211378
gonzus
lupine: that's funny, last year I also tried AoC with Rust. It made it clear to my how much I did NOT like Rust. :-)

1575215280
pixelherodev
There's a zig mailing list?

1575215310
pixelherodev
Ohhh, there's an AoC mailing list?

1575217300
leeward
Is there an easy way to use a [_]u8 to initialize something that I can pass to a function that accepts a File?

1575217377
daurnimator
"something"?

1575217390
leeward
A File, preferably

1575217404
leeward
I want to mock out a File to test a function.

1575217408
leeward
io.File

1575217437
leeward
Which seems to be std.fs.File

1575217455
daurnimator
leeward: a file is very tied to having an FD backing it: to test it you'd need to create a file descriptor and give it over.

1575217491
leeward
Should I have my function under test accept a stream instead maybe?

1575217522
leeward
This is one of those bits of the standard library documented with "read the code."

1575217528
daurnimator
sure, if you want to only test stream functionality that's much simpler to mock

1575217562
leeward
Yeah, all it needs to do is read the whole thing 2 bytes at a time.

1575217637
daurnimator
leeward: use a io.SliceInStream

1575217697
leeward
daurnimator, That's what I was looking for, thanks.

1575220301
leeward
Hmm, I'm confused a bit.

1575220373
leeward
If I want a function to accept a stream from a file, does it have to take std.io.File.InStream?

1575220384
leeward
That seems like it would defeat the purpose.

1575222060
leeward
Alright, this shouldn't be a hard thing to do, and I'm running around in circles: I want to read a file, 2 bytes at a time, and do stuff with its contents. I also want to test the function that does this. I was thinking that I could just @embedFile a test file and have the function under test accept a generic stream of some sort, but my head keeps slamming into the wall.

1575222119
lupine
my first zig \o/ (aoc):

1575222128
lupine
jumping to master made things I expected to work, work, which is good

1575222516
andrewrk
pixelherodev, there is a zig mailing list:

1575222522
andrewrk
congrats lupine

1575222649
mikdusan
leeward: I'm not 100% up-to-date with std.io, but my last experience was "stream" type for a file vs slice (byte memory), well they are not equivalent because they differ by errorset,

1575222652
andrewrk
leeward, obtain a BufferedInStream, repeatedly call read() with a slice of len 2. what's the problem there?

1575222680
mikdusan
for example a slice stream doesn't error on reads, while a file stream can

1575222709
andrewrk
mikdusan, I added the ability to set a Zig IR breakpoint on a file + line number. total debugging game changer

1575222712
andrewrk


1575222765
andrewrk
(gdb) p dbg_ir_break("test.zig", 9)

1575222796
andrewrk
and then also you can do (gdb) p ira->break_debug_id = 21

1575222830
andrewrk
now the only thing that's missing is the ability to rewind :)

1575222909
mikdusan
so ("test.zig",9) will break in IR0 at first node of line 9?

1575222921
mikdusan
first AST node

1575222961
andrewrk
it will break when it's looking at a pass1 instruction, about to produce a pass2 instruction, where the pass1 instruction source node matches

1575222994
mikdusan
i like

1575223955
marler8997
been having a heck of a time triaging an issue

1575223972
marler8997
did you know that the lld tool calls _exit on error?

1575224013
andrewrk
yes

1575224026
marler8997
it's weird because I'm not getting an error message

1575224042
andrewrk
upstream lld never tests in non-standalone-binary mode

1575224051
andrewrk
we've had to send several patches to fix issues when using it as a library

1575224088
andrewrk
which is maybe an argument for taking a similar strategy as we do with clang, zig invoking itself as a child process. but that makes it a bit harder to collect error messages

1575224100
marler8997
yeah makes sense

1575224124
marler8997
to figure out what's goin on, I wrote a custom _exit implementation, asserted an error and used gdb to get a stack trace

1575224151
marler8997
took me a while to figure out there is a difference between exit and _exit though

1575224198
andrewrk
it's not supposed to call exit or _exit when you invoke it as a library

1575224221
mikdusan
leeward: maybe this will help; dump a few bytes from 2 kinds of instreams:

1575224248
emekankurumeh[m]
andrewrk is it planned for zasm to read  instruction sets from files so we can define custom instruction sets?

1575224271
andrewrk
yes

1575224289
emekankurumeh[m]
nice

1575224297
mq32
interesting

1575224310
marler8997
hitting line 519 of InputFile.cpp with my sentinel change

1575224312
mq32
i'm keen to see how that will work out

1575224320
marler8997
lld just calls "fatal" which ends up calling _exit

1575224326
marler8997
*InputFiles.cpp

1575224349
andrewrk
marler8997, I'm surprised that your patch affected the linker in any way

1575224373
mikdusan
maybe the sentinal is not working. and inputfiles end is not marked

1575224386
marler8997
yeah, must be something to do with how the sentinel value is translated to llvm?

1575224405
marler8997
we were storing the sentinel value as a regular type, my change changed it to an optional type

1575224420
marler8997
what's also weird is that I don't get an error message

1575224421
andrewrk
emekankurumeh[m], if you're asking whether such instruction set data will be available as comptime values for the zasm implementation, I do want that to be a thing. so maybe you would have to recompile after adding a custom instruction set. but one of the main ideas is to make the instruction set data format describe everything about an architecture

1575224434
marler8997
I noticed using strace that LLVM is trying to call lseek on stdout though

1575224449
marler8997
which you can't do, it returns - ESPIPE

1575224645
marler8997
sh_size is 2840 and entSize is 16

1575224807
marler8997
so the size of the section header is not divisible by 16, only divisible by 8

1575224832
marler8997
the size of the SHF_MERGE section

1575224839
marler8997
any idea what goes in there?

1575225199
emekankurumeh[m]
oh, i meant that perhaps you could have an architecture defined through a json file and load it a runtime

1575225764
marler8997
it's the ".rodata.cst8" section in the "build.o" object file

1575225776
andrewrk
emekankurumeh[m], what use case(s) are you thinking of that require runtime-known architecture definition?

1575225829
marler8997
actually I mean, ".rodata.cst16" (not cst8)

1575225842
marler8997
entry size is 16 but the full size is not divisible by 16

1575226024
marler8997
a weird section, contains a bunch of strings that are 16-bytes wide

1575226051
emekankurumeh[m]
allowing users to add many different targets that aren't included by default without "bloating" the core assembler

1575226302
emekankurumeh[m]
like for example custom architectures

1575226521
mq32
i'm definitly trying to add my own arch to zasm

1575226791
pixelherodev
Wait, so zasm takes Zig IR and produces asm?

1575226988
pixelherodev
Or is it just an assembler?

1575227001
adamkowa1ski
is there a reason literals don't work with std.testing.expectEqual?

1575227018
adamkowa1ski
you need to write std.testing.expectEqual(@as(i32, 5), @as(i32, 10))

1575227074
pixelherodev
It's not that function - at the moment, comptime_int doesn't implicitly cast within function calls IIRC

1575227078
pixelherodev
It's a compiler bug

1575227148
adamkowa1ski
Hmm, okay thanks

1575227161
emekankurumeh[m]
that way zasm can be "done" but still continue to grow

1575227193
marler8997
I think I know what's going on.  I saw a section with 2 entries, one was a string literal and the size was off by 1

1575227223
pixelherodev
Regarding ISAs defined by files: see e.g.

1575227232
marler8997
I think when a string literal gets put into a cst section (when it's length is divisible by 4, 8, 16, 32, etc), it's adding 1 to the size of the section for some reason

1575227245
pixelherodev
Also

1575227268
pixelherodev
scas is an example of an assembler that works in such a manner: it can load an ISA table at runtime and use it for assembly

1575227338
adamkowa1ski
Also is there anyway to clean this up

1575227357
marler8997
does zig calculate the size of the object file sections somehow?

1575227358
adamkowa1ski
When building ndimensional arrays the syntax for array literals starts getting more and more gnarly

1575227461
adamkowa1ski
Is there anyway we could get syntax like this

1575227501
adamkowa1ski
[] isn't being used for anything besides array literals anyway, so we might as well remove the cruft and infer the shape and element type

1575227505
adamkowa1ski
you could provide the type if desired

1575227580
adamkowa1ski
And do we have "type traits" in the standard to get things like the element type of an nd array

1575227586
marler8997
does anyone know if zig has any control over the sections in the elf file, if so, where that would be?

1575227600
pixelherodev
marler8997, linksection(".section")

1575227625
pixelherodev
e.g. `var name: type linksection(".bss") = value;` IIRC

1575227653
marler8997
sorry, not the zig language, the compiler

1575227669
pixelherodev
Ah

1575227673
pixelherodev
That I can't help with

1575227676
pixelherodev
Maybe do a grep?

1575227684
marler8997
yeah been doing that

1575227780
pixelherodev
`grep -r linksection` might help find where that's implemented, from there it;s probably a matter of following the IR

1575227792
marler8997
already tried, not there

1575227802
marler8997
LLVMSetSection looks promising

1575227847
marler8997
I can use grep/investigate myself, just wondering if anyone has pre-existing knowledge that can help :)

1575229387
leeward
mikdusan: Thanks. I was missing the inferred input variable type.

1575229643
mq32
adamkowalski, you can try using the new syntax for array literals:

1575229651
mq32
.{ 1, 2, 3 }

1575229661
mq32
but i don't know if it will work out

1575230026
lupine
one thing I couldn't find offhand. I had a `var x [255]uint8 = undefined;` to act as a buffer, but I'd actually have preferred it to be zero-initialized, without typing out `0` 255 times

1575230047
lupine
var buf: [255]u8 = undefined;

1575230083
lupine
is there a shorthand to . { 0,0,0,0,0,0,0....} that I missed?

1575230089
mq32
pixelherodev, regarding the scas assembler: can you do "particles" in it? (so 'functional bits' that can modify any instruction)?

1575230099
mq32
or is it just "mnemonic op, op, â€¦"?

1575230108
fengb
[_]u8{0} ** 255

1575230114
lupine
oooooooh

1575230132
riba
if i worked with e.g. fmt.allocPrint to get a string, what is the best way to get a null-terminated string to pass back to c? i used the .ptr but the null is probably missing

1575230136
lupine
I'm not sure I even want to look at the precedence rules for that :D

1575230152
riba
i tried adding \0 to the format string but that just lead to a compile error

1575230161
marler8997
yes found it!

1575230171
mq32
riba: try "foo" ++ [_]u8{0}

1575230172
mq32
:D

1575230198
lunamn
that or std.cstr.addNullByte

1575230200
marler8997
problem was in get_const_val, need to check that sentinel pointer is both null and whether the optional value is also null

1575230211
gonz_
Does anyone have a GL project that doesn't use libepoxy?

1575230233
riba
lunamn: is that new after 0.5.0 or am i blind?

1575230251
gonz_
Preferrably also a project that builds out of the box on Linux & Windows.

1575230252
riba
mq32: that... sounds good

1575230265
lunamn
riba: I think that existed before 0.5.0

1575230274
mq32
or you can probably use "\x00" in the string

1575230309
riba
lunamn: oh, maybe the doc generation tool didn't pick it up then? i'll try to find it in the code

1575230329
andrewrk
gonz_, there's an experimental zig-sdl package that can be used for cross compiling against windows. example usage here:

1575230342
lunamn
riba: docgen isn't finished, you're much better off with source

1575230354
andrewrk
gonz_, it compiles sdl from source for windows, but I didn't do that work for other targets yet

1575230375
gonz_
Thanks. :)

1575230392
mq32
gonz_: i have one right now, that runs on linux with OpenGL ES

1575230401
mq32
but never had the chance to test/compile for windows

1575230417
riba
lunamn: i sit down for internet-less 15-minute coding sessions in the train and had not downloaded the source, while the docs are one page which i just keep open so it was pretty useful

1575230427
riba
but i guess i should download the source, yes

1575230986
leeward
riba: I'm intrigued by this 15-minute train ride you have where you can sit down. What country are you in?

1575231104
riba
leeward: germany, but i have to take the very first one if i want to find a seat

1575231138
mq32
riba: hello fellow german! i'm using my 45-minute train rides to code every day :D

1575231225
riba
mq32: nice! probably a bit more useful that way

1575231235
mq32
yeah, you can

1575231239
mq32
and i even have "internet"

1575231245
Snektron
gonz_: if you just wana use OpenGL, i recommend the glad headers

1575231247
mq32
(which means: i can hang out in IRC)

1575231250
Snektron
you can easily translate them into Zig

1575231254
Snektron


1575231270
Snektron
This has been my go-to tool for OpenGL development

1575231280
riba
i'm stuck doing string manipulation for at least a week now

1575231288
gonz_
Ah, yeah, this would probably be relevant.

1575231301
gonz_
Have you run them through `@cInclude`?

1575231324
Snektron
no i haven't done any opengl development on Zig yet

1575231332
riba
using the ptr field of a slice is not the right way to pass a zig string to a c lib it seems?

1575231345
Snektron
but the headers are fairly simply, so i think that it should work

1575231354
andrewrk
riba, we have our first bug prevented by sentinel-terminated pointers!

1575231388
Snektron
actually, theres also a c part to those files, but you can easily incorporate them into your Zig project

1575231390
gonz_
I'll probably take a look at this as well. I'm currently looking at which solution I should use for a vim clone I'm making. It's not going to be some monster thing but I'd probably like a chance to make it in something foundational so as to gain that experience as well.

1575231409
gonz_
I haven't done any GL since ~2008 or so

1575231411
Snektron
it does depend on libc though i just noticed

1575231417
leeward
mq32: That explains why you were online at 3 in the morning.

1575231434
Snektron
Thats a long time, much has changed

1575231492
Snektron
If you're for a general OpenGL project that doesn't use libepoxy, i have one that uses fairly modern OpenGL

1575231493
Snektron
but its c++

1575231509
leeward
andrewrk: That's a pretty great feature. Sentinels are good juju.

1575231539
gonz_
For convenience I'd probably want a zig thing but if the glad headers run fine through the zig machinery I'll most likely just use them with glfw

1575231557
gonz_
And just learn everything from the ground up

1575231558
mq32
gonz_, i wouldn't use GL for a text editor. Text rendering is pure hate ;)

1575231572
Snektron
Its not so bad

1575231590
mq32
Snektron: it depends. i just say "ligatures"

1575231591
Snektron
gonz_: glad + glfw is definitely the way to go

1575231597
gonz_
mq32: Yes, I'm aware. I just think it's a fairly constrained project and I already have a TTF solution for generating textures.

1575231607
Snektron
who uses ligatures anyway

1575231607
mq32
leeward: i

1575231629
gonz_
And I have the opportunity to constrain myself as needed. Ligatures would be nice but whatever, I'll probably just have the editor hardcode Consolas forever anyway.

1575231640
Snektron
jokes aside, you can implement those using the same rendering method

1575231683
Snektron
just make Freetype render a distance texture and render with that

1575231712
mq32
Snektron, does freetype provide distance textures now?

1575231715
mq32
that would be sooo sexy :D

1575231725
Snektron
im not sure actually, i think i saw it somewhere

1575231781
Snektron
Doesn't look like it

1575231790
Snektron
Then implement a nice compute shader to do that

1575231833
pixelherodev
mq32, ?

1575231840
pixelherodev
Did you see the second one?

1575231844
gonz_
I was planning to offload work to stb_truetype

1575231850
pixelherodev
The z80 table?

1575231862
gonz_
Granted, this isn't something I've tried out.

1575231867
pixelherodev
Ah, stb - love those headers

1575231877
Snektron
I'm not a particular fan of stb

1575231882
mq32
pixelherodev, yes, didn't help :D

1575231907
pixelherodev
mq32, details? What do you want to accomplish?

1575231927
mq32
gonna do it in query, would spam this channel too much with offtopic

1575231942
mq32
or is anyone else interested in "unusual assembler architectures"?

1575232035
gonz_
Snektron: Thanks for the reminder about glad; I'd actually seen it in a video series someone made about making their own engine a while ago but had forgotten.

1575232057
Snektron
Well im a Z80 fan

1575232068
leeward
mq32: Sure, but I wouldn't have found it unusual for someone to be awake at 9PM my time.

1575232081
gonz_
I'll check it out and if I remember I'll ping you about it working well or not. Also might bother you about stuff I don't get, I suppose.

1575232114
Snektron
no problem, i love to help

1575232119
mq32
Snektron: I'm talking about my own ISA and the one of the propeller by parallax

1575232126
leeward
mq32: I'm writing an emulator for a somewhat unusual architecture.

1575232137
leeward
So...interested, yes.

1575232140
mq32
i have an ISA that has a 16 bit instruction set, using 10 'functional' bits and 5 'command' bits

1575232170
mq32
'functional bit' means that those bits are the same for every possible instruction and can be changed in a meaningful way for each of the 32 possible "commands"

1575232187
pixelherodev
Yeah you can do that

1575232196
mq32
there is one "command" add (which adds two values) that has 1024 possible ways of execution

1575232206
mq32
most of them would respond to a mnemonic "add"

1575232210
pixelherodev
If you give me an example command, I can show you the line needed

1575232212
leeward
So like 2 5-bit registers?

1575232218
mq32
nah

1575232226
leeward
er, not registers, register indices

1575232230
mq32
nah

1575232235
mq32


1575232249
mq32
pixelherodev, okay i'm trying to make an example, not with "real" bit values because i'm lazy :D

1575232254
leeward
Okay then

1575232258
pixelherodev
I thought that's how the z80 table worked...

1575232266
mq32
example: "cmp stack top with immediate value"

1575232286
pixelherodev
e.g. `INS LD_@A<g3>-,-%B<8>                   00@A110 %B`

1575232352
leeward
I'm guessing "cmp" is the command.

1575232357
pixelherodev
That matches e.g. `ld a, 20` and produces `00 $REGCODE 110 00010100`

1575232377
pixelherodev
For a, regcode is 111, so 00111110 00010100

1575232401
mq32
instruction={cmd=sub, in0=peek, in1=imm, out=discard, modflag=true, exec=always), imm=15

1575232403
pixelherodev
Both tables I linked should have the file format documentation at the top

1575232414
mq32
would result in "0b0100010010110000 0x000F"

1575232440
mq32
where the first binary sequence is grouped [0][10001][00][1][01][10][000]

1575232444
pixelherodev
You can definitely do that, not 100% sure the best way to do it though

1575232477
mq32
my assembler for that architecture does it like this:

1575232500
mq32
sub [i0:peek] [i1:imm] [f:yes] [r:discard] 15

1575232503
Snektron
pixelherodev: is that scas syntax?

1575232509
pixelherodev
Snektron, yeah

1575232510
pixelherodev
Why?

1575232518
Snektron
nice

1575232534
Snektron
well its not so often you meet someone out in the wild who uses that

1575232541
mq32
but you could also write "cmp [i0:peek] [i1:imm] 15"

1575232556
pixelherodev
Snektron, check who provided the most recent commit to scas ;)

1575232577
pixelherodev
I've been contributing to it occasionally for a while now (and the rest of KnightOS)

1575232584
mq32
pixelherodev: is it possible to define something

1575232591
pixelherodev
Yeah

1575232599
Snektron
nice, i've made a few contributions myself

1575232600
pixelherodev
Not sure how easy though

1575232602
mq32
so "particles" are possible?

1575232611
Snektron
oh hey, so actually commented on one of my PRs

1575232614
leeward
mq32: Ah, ok, I get it.

1575232624
mq32
or would i have to "pregenerate" all 16384 possible instructions?

1575232632
Snektron
i wasn't so good with git back then so i fucked up my branch

1575232638
pixelherodev
I

1575232640
leeward
Sounds very easy to implement in vhdl.

1575232650
mq32
leeward: that's my plan <3

1575232658
mq32
if you're interested in my ISA spec:

1575232684
Snektron
pixelherodev: A small world

1575232695
pixelherodev
Yeah :)

1575232707
leeward
Fancy. So is this for embedding?

1575232718
Snektron
I haven't done anything with stuff like that in some 3 years now though

1575232728
mq32
leeward: i want to implement this architecture on real hardware, so kinda yeah

1575232748
Snektron
When i graduated high school i didn't need to waste time on my TI84 anymore

1575232752
mq32
have to focus on that project some days

1575232757
mq32
Snektron: TI83+ user here! :D

1575232833
Snektron
I thought those weren't exam-legal in Germany

1575232861
andrewrk
I spent most of high school writing TI-basic games

1575232872
andrewrk
silver edition, baby, 2.5x faster

1575232881
leeward
I think this is going to be a well-populated club.

1575232888
mq32
Snektron, they aren't but we're using them in school anyways :D

1575232898
mq32
well, for some exams they are allowed, but only in "wiped" state

1575232902
Snektron
andrewrk: Same, (except that i used Axe, a compiled language with TI-Basic syntax)

1575232926
Snektron
The teachers didn't like that i was programming in every class

1575232927
leeward
I wrote an awful lot of TI-basic during classes.

1575232939
mq32
oh yeah. and then the RAM was full :(

1575232954
pixelherodev
I actually took a standardized test with my non-wiped TI-84+, only to realize after I was finished that I had games on there :P

1575232971
mq32
haha. do you know the App FAKE?

1575232977
pixelherodev
Nope

1575232985
mq32
it hooks the OS so you can "wipe" the calc without loosing memory content :D

1575232990
pixelherodev
Heh

1575232991
andrewrk
none of the teachers knew about the archive backup/restore feature

1575232993
pixelherodev
Smart

1575233006
pixelherodev
I also actually password-protected mine because I was bored and I liked tinkering with it :P

1575233010
Snektron
I think i once made a whole math suite to help some other kids pass a math test

1575233021
mq32
i had implemented a chat based on GetVar

1575233028
mq32
and a

1575233036
leeward
Wow, we didn't have any security measures like that. I took all my tests with a TI-82 that had oodles of programs on it.

1575233049
pixelherodev
I still think KnightOS is the single coolest thing I've seen for those calculators

1575233063
mq32
BBC BAsic was also quite impressive

1575233067
pixelherodev
Multi-threaded POSIX-like operating system that runs on a

1575233079
pixelherodev
The fact that I can say that sentence with a straight face is amazing

1575233105
mq32
pixelherodev: it's a really powerful z80 system. z80 is one of the most widespread CPU architecture until like 2008 or so

1575233116
Snektron
Its pretty cool yeah

1575233126
Snektron
my favourite was Axe though

1575233285
mq32
did you know that the â„• variable was much faster than any other variable in TI Basic?

1575233350
andrewrk
wat

1575233352
Snektron
No, but considering the garbage that TI considered an operating system im not surprised

1575233358
pixelherodev
^

1575233384
mq32
â„• is the only

1575233402
mq32
Snektron: i think the TI OS is pretty nice for what it's designed for

1575233410
mq32
beeing a calculator with extensions

1575233586
mq32
btw, pixelherodev, leeward: for crazy CPU architectures in the real world, look at this:

1575233679
Snektron
mp32: Everything is so horribly inefficient. I mean it works, but someone made an actual 3D grapher that works in real time

1575233699
mq32
yeah i know

1575233708
Snektron
compare that with the default grapher for which you had to wait a few seconds before it had finished drawing

1575233717
mq32
but you cannot really implement 9byte fp efficient on z80 :D

1575233721
mq32
f32 yeah

1575233730
mq32
f72? nah :D

1575233731
Snektron
but even without that

1575233748
mq32
all operations work on the REAL datatype

1575233760
mq32
which makes the basic so damn slow

1575233769
Snektron
Its not just the basic interpreter, but the whole thing

1575233776
Snektron
take the screen refresh bcall

1575233786
Snektron
the custom implementation is so much faster

1575233803
mq32
now the hard question: But is it in spec?

1575233806
mq32
or does it "just" work?

1575233822
mq32
that's a difference between homebrew and industry hardware

1575233840
mq32
we use a display in our company that is specified for 14 MHz

1575233854
mq32
i can use that with 75 MHz in my demo, because "it works"

1575233874
mq32
but we cannot ever rely on the display to even work with 15 MHz clock

1575233896
leeward
mq32: That is wacky.

1575233907
mq32
Display thing or cpu arch? :D

1575233910
mq32
probably both :P

1575233929
leeward
The CPU arch

1575233939
mq32
yeah, but it's beautiful as well

1575233954
mq32
coding assembler on a propeller feels more like a highlevel language than lowlevel

1575233964
mq32
except for that weird memory model :D

1575233975
Snektron
mq32: thats a good point yeah

1575233987
Snektron
i just think that TI is very anti people having fun with their products

1575233993
leeward
The display thing reminds me of the story of the engineer who found an extra bit of memory when poking around IO registers on a chip. Then depended on it. Then the manufacturer bumped to a new process and millions of dollars were lost.

1575233996
mq32
maybe ^^

1575234019
mq32
leeward: yeah. always rely on the datasheet, not on the real hardware

1575234042
mq32
you can always argue with the datasheet, but not with "but it worked with the device on my desk!"

1575234048
leeward
Datasheet + errata

1575234073
mq32
yeah

1575234079
mq32
btw, they are building a propeller 2

1575234085
mq32
which is crazyness in perfection

1575234350
leeward
5mA at 80mHz is not too crazy, but that's per cog.

1575234366
leeward
er MHz

1575234384
mq32
milli would be really slow :D

1575234391
leeward
yes

1575234391
mq32
yeah you got 3 cycles per hour

1575234418
leeward
Also, 5mA at basically DC is way too much.

1575234437
mq32
this thing isn't the most efficient CPU

1575234448
leeward
It's not.

1575234449
mq32
but a damn powerful design for 2006

1575234455
leeward
It's certainly interesting.

1575234560
leeward
I think the weirdest processor I ever worked on was the Tile64, which is like MIPS but VLIW and 64 cores.

1575234586
leeward
also MIMD

1575234592
mq32
for me it's definitly "Diehl Combitron"

1575234656
mq32
and i think it's unbeatable in strangeness :D

1575234751
leeward
certainly rare

1575234757
mq32
yes

1575234768
mq32
i know of two devices of combitron and one decitron

1575234768
pixelherodev
The what?

1575234804
mq32
pixelherodev: archicture by Stan Frankel, made in the late 60ies

1575234809
pixelherodev
huh

1575234820
mq32
55 bit architecture, has hardware multiply, uses only 120 transistors

1575234838
pixelherodev
...

1575234841
pixelherodev
I'm sorry

1575234846
mq32
has no address comparator or instruction counter

1575234847
pixelherodev
That's - you're serious?!

1575234850
mq32
but is von neumann

1575234853
mq32
yes.

1575234855
pixelherodev
... WAT

1575234883
mq32
if you can read german (or have an auto-translator at your hands):

1575234891
mq32
that's my bachelor thesis

1575234920
mq32
there is no english documentation available, as afaik it was only used and produced in germany

1575234951
mq32
it's absolutly whack

1575234952
Snektron
Huh

1575234966
mq32
there's also an american patent on a similar architecture by frankel

1575234980
Snektron
You didn't write your Bachelor's thesis in English?

1575234992
Snektron
Here in the Netherlands that is pretty much standard

1575235026
Snektron
i got already frowned upon for doing my half-way presentation in Dutch

1575235071
mq32
Snektron: i did not because i would have to invent a whole lot of terms for that thesis

1575235084
mq32
i thought about it, but as i only had german source material Â¯\_(ãƒ„)_/Â¯

1575235149
Snektron
anyway, looks impressive

1575235150
Snektron
nice work

1575235157
mq32
it sure was fun

1575235167
mq32
at one day, a transistor broke and the CPU stopped adding :D

1575235192
mq32
i went to my supervisor and told him: hey, you're better with electronics than me, could you solder my CPU back toghether

1575235206
mq32
and he was like: "No way the CPU broke! you're doing something wrong."

1575235219
mq32
but i could prove with software that the CPU stopped adding, but otherwise worked :D

1575235220
pixelherodev
That's hilarious :)

1575235227
mq32
pixelherodev: YES! :D

1575235234
lupine
Needs more soviet cpus

1575235234
Snektron
My bachelors thesis was just a lot of stress tbh

1575235239
pixelherodev
How does it work if there's no PC?

1575235246
mq32
pixelherodev: it's all about timing

1575235249
mq32
you don't have "RAM"

1575235255
mq32
you have "RCM"

1575235262
mq32
Re-circulating memory

1575235268
mq32
in a delay line

1575235273
pixelherodev
Whoa

1575235281
mq32
(a long string of metal and some super sonic wave signals)

1575235313
mq32
this string holds 10889 bits of data

1575235326
mq32
there's another string with less bits (218)

1575235336
mq32
and the data is running "in circles"

1575235345
mq32
if you need to "fetch the next instruction"

1575235376
mq32
you just link your "instruction register" to the short delay line and let 5 bits cirulate from and to the instruction register

1575235386
mq32
â†’ you just rol-shift your next instruction

1575235392
mq32
as instructions are 5 bit, but word size is 55 bit

1575235408
mq32
so every word has 11 instructions contained, one is required to be a guaranteed jump

1575235485
mq32
to access memory, you have to "nop" until the right address in the long delay line is "at position" to be circulated through your CPU

1575235495
mq32
=> addressing by waiting

1575235581
pixelherodev
There a C compiler for it? :P

1575235585
mq32
no

1575235591
leeward
Sounds like a good way to go crazy.

1575235599
leeward
LLVM support experimental.

1575235612
mq32
pixelherodev: to write

1575235620
mq32
as assembling linear code is (probably) NP-hard

1575235638
mq32
also there is "no" indirect addressing available

1575235725
leeward
Trying to zig fmt my file, and...

1575235727
leeward
src/decode.zig:1:1: error: expected '}', found invalid bytes

1575235728
leeward
const std = @import("std");

1575235733
mq32
ah

1575235738
mq32
known bug

1575235742
mq32
search and replace all tabs

1575235747
mq32
you have a tab in a comment :D

1575235748
leeward
There are tabs?

1575235764
mq32
(or something similar)

1575235783
mq32
at least for me zig fmt does die when having tabs in comments

1575235793
leeward
Yep, that was it.

1575235807
leeward
I had pasted stuff direct from objdmp in comments.

1575235821
leeward
I actually did replace most of the tabs, but missed 1 line.

1575237852
leeward
If I want to build an executable and drop it somewhere other than zig-cache/bin, what do I have to change in my Builder? I've tried install_prefix, install_dir, install_path, and cache_root.

1575238141
leeward
Ah, it's the output_dir in my LibExeObjStep.

1575241404
leeward
Trying to make a literal that I can turn into a `[]const ?[]const u8` and getting "error: expected type '[]const ?[]const u8', found '[]const []const u8'" Is there a way to make a string literal optional?

1575241770
traviss
did you try @as(?[]const u8, "string") ?

1575241795
leeward
I did.

1575241809
leeward
expected type '[]const u8', found '?[]const u8'

1575241823
leeward
pointing at the @

1575241864
leeward
ugh, that doesn't say what I thought it said...

1575241980
leeward
ahah, that was it but I had type annotations that needed updating

1575242019
leeward
Of course, all this was to set exec_cmd_args and it turns out that doesn't do what I thought it would.

1575242141
traviss
i know that feeling well

1575243145
leeward
I love it when I run a test for some brand new code and it finds a bug. So much better than finding the bug later.

