1557965444
tgschultz
issue is #2501

1557965462
tgschultz
if anyone can see how I'm the cause of the problem, I'll gladly wear the dunce cap to get past this.

1557965584
tgschultz
...of course immediately after I log the issue I find a workaround

1557965867
tgschultz
Ugh, nope. Workaround only helped once. Called from a different test that same thing fails in the same damn way.

1557966496
tgschultz
andrewrk, #2501 is blocking me in ways that seem to defy workarounds. If you get a few minutes I'd appreciate if you could see how involved a fix might be.

1557967958
andrewrk
tgschultz, noted, thanks

1557971564
andrewrk
tgschultz, I'll see if I can get this bug fixed for you, but one random thought for a work around - try calling without method syntax

1557971674
tgschultz
andrewrk: I did that, but where the problem shows up just changes. If I change it in int() it'll work for one test but then fail in a different one. In order for that fix to be used I'd have to do every function that uses any interface that way.

1557971703
tgschultz
depth of the call stack seems related to the problem showing up

1557971710
tgschultz
or something

1557998170
BitPuffin
err is there like a handy compiler switch for linking to libc? Or should I pick the libc from the system manually

1557998231
daurnimator
BitPuffin: --library c

1557998247
BitPuffin
ah, makes sense

1557998249
BitPuffin
thanks!

1557999599
voldial
Am I using -L wrong? "zig translate-c --library-path /usr/include access.c" -> "access.c:2:10: error: 'stdio.h' file not found"

1557999676
voldial
heh. literally 3 comments above... trying... wheeeee that's cool

1558007608
rivten
hello people :) still me with questions. I'm trying to use libclang in a zig project. So i'm including libclang c header, but Zig fails to propertly parse this line :

1558007615
rivten
indeed, this gets parsed as :     CXCursor_CXXAccessSpecifier = 39,     CXCursor_FirstDecl = 1,     CXCursor_LastDecl = 39,

1558007625
rivten
and zig says that the enum taf value 39 is already taken :(

1558008815
tgschultz
that's a known issue

1558008870
tgschultz
a common way to deal with cImport issues right now is to dump the translated C out to a file and manually fix the problems, then import that file.

1558008913
tgschultz


1558008920
tgschultz
no sorry, that's not correct

1558008935
tgschultz
though it is related

1558008960
tgschultz


1558009472
rivten
duh why didn't I think about this solution ? x) thanks a lot tgschultz :)

1558014743
corecode
hi

1558021310
donpdonp
@typeName(T) => "[]const u8". @typeId(T) => TypeId.Pointer. How can I determine if the ptr is an array/slice?

1558023017
tgschultz
@typeInfo(T).Pointer.Size

1558023044
tgschultz
.One => single item. .Slice => slice, .Many => unknown length array

1558023087
tgschultz
type id of array is Array, but pointer to an array is a Pointer.Size.One with the Child type set to the array type

1558023111
tgschultz
of course, you could just use `std.meta.trait.isIndexable(T);`

1558023130
tgschultz
or `std.meta.trait.isSlice(T);`

1558023137
tgschultz
depending on what you're looking for, donpdonp

1558023424
donpdonp
ok thx for the detail.

1558023454
donpdonp
im trying to put together a structToJson(struct: var) []const u8

1558023805
tgschultz
you can look at how std.fmt and std.io.Serializer inspect types

1558024445
donpdonp
ah thx.

1558024459
donpdonp
im slowly realizing just how much zig can do at compiletime. :O

1558024749
donpdonp
why is it I can warn @typeId(T) => "TypeId.Array" but warn @typeInfo(T) => requires comptime.

1558024806
tgschultz
try warning `comptime @typeInfo(T)`

1558024806
kristoff_it
donpdonp: same for me, it's like when neo gets out of the matrix in the beginning, it's that macros never really let us use our eyes

1558024834
andrewrk
@typeInfo always runs at comptime

1558024842
donpdonp
warn("{} {}\n", @typeId(T), comptime @typeInfo(T)); => error: parameter of type 'builtin.TypeInfo' requires comptime

1558024862
andrewrk
this is a var args issue

1558024863
donpdonp
kristoff_it: haha. true.

1558024895
tgschultz
sometimes I think "this should always be comptime, right?" but then I leave off `comptime` and the compiler takes an invalid branch, so I usually sprinkle it in as the very first step in trying to work out what's wrong.

1558024911
tgschultz
case in point: pretty much everything in std.meta

1558025056
donpdonp
ok so I cant warn, but i can still use it. \o/ if(info.Array.child == u8) { ...

1558025098
shritesh
andrewrk: the wasm generated from build-lib still needs to pass through the wasm linker before being usable in the browser. Where would be the best way to introduce this? I have been struggling to figure this out.

1558025151
andrewrk
shritesh, let me take a look

1558025227
andrewrk
shritesh, how about this?

1558025259
shritesh
I tried that. It breaks build-exe.

1558025455
shritesh
build-exe blocks indefinitely with that somehow.

1558025532
andrewrk
ok I'll figure out why

1558025589
shritesh
Thanks

1558026054
dm1try
Hi there! A noob problem, I've just built zig from the source using master branch on osx 10.14.4 and it looks like I have some problem with encoding

1558026061
dm1try
ex

1558026120
shritesh
dm1try, the pointer alignment safety fail is a known issue with building Zig in debug mode on OSX

1558026193
shritesh
Try building it in release mode

1558026294
andrewrk
this is the first I've heard of this issue

1558026305
andrewrk
I've been building debug mode on my OSX laptop

1558026316
shritesh
I thought it was known. I could never build in Debug

1558026320
donpdonp
if (@typeId(@typeOf(value)) == builtin.TypeId.Pointer) { warn("ptr {}\n", @typeId(@typeOf(value.*))); } => attempt to dereference non-pointer type '[]const u8'

1558026362
donpdonp
does that make sense? ohh the value.* has to hold for all cases, ie the if() guard isnt being run at comptime??

1558026379
shritesh
Or more clearly: The tests would never pass in debug

1558026392
andrewrk
donpdonp, this is a bit of a terminology inconsistency. according to @typeInfo, slices are Pointers

1558026406
andrewrk
but you cannot use pointer deref syntax with slices

1558026417
dm1try
sorry, looks like it was bad example, i have a problem with encoding even for simple assertion `assert(1 == 2)`, see

1558026446
andrewrk
dm1try, that looks like stack traces not working

1558026462
donpdonp
andrewrk: ok. is there another test to see if a ptr is a slice instead of say, a pointer to a struct?

1558026485
andrewrk
donpdonp, look at the output of `zig builtin`. look at the TypeInfo struct and you can see the info that you get for Pointer

1558026545
donpdonp
oh Size.Slice, tgschultz pointe me to that earlier. thx.

1558026701
andrewrk
dm1try, stack traces are working for me on my macos laptop with master branch

1558026730
andrewrk
is your source repo up to date?

1558026849
dm1try
andrewrk, thanks for the information, the source repo is fresh

1558026867
dm1try
i've tried precompiled binaries and have the same problem

1558026889
dm1try


1558026899
dm1try
will investigate this later, thx

1558026954
andrewrk
dm1try, thanks for the report. I don't have any ideas yet but I'll keep my eyes open

1558027176
andrewrk
shritesh, the infinite loop: it thinks it has to build std/special/c.zig for std/special/c.zig

1558027255
tgschultz
possibly related to #2500?

1558027270
shritesh
Hmm. It also tries to invoke the linking step for c, compiler_rt and the actual source file with the previous change. I don't know if that's the expected behavior or not.

1558027284
tgschultz
using relative paths in @import has issues under certain circumstances

1558027313
andrewrk
tgschultz, I suspect that is a separate issue

1558027366
tgschultz
yeah, #2500 doesn't so much loop as run out of memory and crash

1558027392
tgschultz
granted that is caused by an infinite loop

1558027870
andrewrk
shritesh, so both wasm object files and wasm library files are ".wasm"?

1558027888
andrewrk
this is problematic, if you do build-exe, the input and output file are the same sometimes

1558027913
shritesh
Yeah. I think that was an error on my part.

1558028138
andrewrk
well it might not even be wrong, but it unfortunately invalidates a previously held premise

1558028263
andrewrk
is it going to break anything if we go back to .o for wasm? maybe we can use ".o.wasm"?

1558028280
shritesh
No. The .wasm isn't really usable anyway

1558028312
andrewrk
ok cool. I have a commit coming shortly which should solve all the use cases

1558028318
shritesh
nice

1558028344
shritesh
I'll work on the docs after that.

1558028377
andrewrk
build-lib -target wasm32-freestanding should produce a *.wasm file though, not *.a, yeah?

1558028389
shritesh
Yes

1558028513
andrewrk
I'll disable the "lib" prefix as well

1558028538
andrewrk
build-lib foo.zig -target wasm32-freestanding => "foo.wasm", not "libfoo.a"

1558028577
shritesh
does it gets passed through the linker?

1558028606
andrewrk
build-lib? yes build-lib will run lld

1558028634
shritesh
that should fix the problem

1558028747
andrewrk
shritesh, did you see that zig also provides --library c for the wasm32-freestanding target? and supports building .c code as well

1558028759
tgschultz
is there a reference for the assembler LLVM uses? Is it just GAS?

1558028761
andrewrk
I wonder if triplefox got any further on their "build lua for the browser" example

1558028780
andrewrk
tgschultz, it's an implementation in LLVM meant to match GAS but it's not the same code

1558028804
tgschultz
but GAS docs should be close? That'll do.

1558028806
shritesh
I saw that. Maybe wasmer can execute those.

1558028913
andrewrk
wit that change, zig entered into emscripten territory

1558028924
donpdonp
value has typeId TypeId.Pointer typeName []*config.ColumnInfo, but value.len == 8 when I "know" value has 1 entry in it. is that something Im doing wrong or a zig bug perhaps?

1558028934
shritesh
AFAIK the ecosystems are moving towards WASI and libc as-is doesn't makes sense

1558028953
andrewrk
shritesh, in the browser though

1558028972
andrewrk
wasi isn't meant to be in the browser, right?

1558028984
shritesh
There's a polyfill that is compiled through emscripten

1558029084
shritesh


1558029106
andrewrk
donpdonp, I'm not sure I understand your question, but note that @typeInfo is only looking at compile time known type information; it's not related to runtime values such as a slice length

1558029176
donpdonp
andrewrk: the typeinfo details are correct, but for(value) |item| {} loops 8 times when value has one entry in it. (it crashes after the first loop).

1558029223
donpdonp
i'll try to make a simpler test case.

1558029556
andrewrk
shritesh, what do you think for wasm objects? .o or .o.wasm?

1558029607
Xe
intermediate objects?

1558029615
shritesh
It doesn't really matter. .o should be fine as it technically isn't a usable wasm file.

1558029667
andrewrk
ok

1558029676
andrewrk
Xe, yes

1558029687
Xe
probably .o then yeah

1558029758
andrewrk
shritesh, Xe:

1558029801
shritesh
I'll test it and report back

1558029852
andrewrk
shritesh, I'm especially curious on your thoughts on what to do with the return value from calling main - you can see in this PR it ignores the result and then does an infinite loop

1558029904
andrewrk
note this is for non-WASI

1558029923
andrewrk
and not relevant for the build-lib use case, which I think has been all of your use cases

1558030052
shritesh
That is dependent on the execution environment. I think the reference sysroot ignores it too

1558030128
shritesh
This is what wasi does

1558030219
andrewrk
wasi is handled correctly already -     if (builtin.os == builtin.Os.wasi) { std.os.wasi.proc_exit(callMain()); }

1558030223
andrewrk
I think you wrote that :)

1558030247
donpdonp
andrewrk: okay pretty sure the problem is on my end, it was accessing an ArrayList items slice while ignoring the arrylist size and i think arraylist is preallocating the slice to 8

1558030261
shritesh
Ah yes. I also think there is a concept of a start function with wasm. Lemme dig it up

1558030263
andrewrk
I think the build-exe use case for in-browser wasm is weird; people should probably be using build-lib for in-browser stuff

1558030298
andrewrk
donpdonp, ah yes. I've been meaning to make that more difficult to do on accident. when you want a slice from an ArrayList use toSlice() not .items

1558030399
shritesh
According to the spec, the start function is void -> void

1558030411
andrewrk
ok well that answers the question then, I'll update the PR

1558030414
donpdonp
oh i would but im comptime land and if I try toJson(value: var) { if(var is an ArrayList) { value.toSlice } else { other types} }; toJson(otherType) => no member named 'toSlice' for otherType

1558030430
donpdonp
if that makes sense.

1558030466
donpdonp
or maybe 'meta land' is more accurate than comptime land

1558030493
shritesh
And wasm-lld assumes the start function is _start

1558030635
shritesh
build-lib definitely makes more sense for the browser. I started with build-exe because I needed the linker to get exec'd

1558030645
andrewrk
shritesh, commit pushed

1558030730
shritesh
I'm still not convinced that build-exe should assume libc-like environment in wasm32-freestanding but I probably have not have encountered that specific usecase yet

1558030823
andrewrk
me either, what makes you think zig is doing that?

1558030975
shritesh
Not after this change.

1558031113
tgschultz
donpdonp: how are you determining if @typeOf(var) is an ArrayList?

1558031161
donpdonp
im embarrased to say i string compare against @typeName(var). I figured I would improve that later.

1558031196
andrewrk
shritesh, can you clarify?

1558031249
shritesh
last night, build-exe was generating a main function implicity for wasm32-freestanding

1558031270
andrewrk
ah, yes, that was a mistake - it's supposed to do that only if you do --library c

1558031278
andrewrk
which is triplefox's use case

1558031383
andrewrk
it's planned that --library c will even work on any freestanding target. obviously the OS stuff won't work but we could provide math functions, memset, memcpy, etc

1558031456
tgschultz
donpdonp actually I'm pretty sure that's the only way to do that short of including a UUID or something as part of the ArrayList.

1558031469
andrewrk
shritesh, ok I'm gonna merge it then

1558031482
shritesh
Cool. The PR looks good to me. build-lib works for the browser.

1558031483
tgschultz
donpdonp I suppose you could just use std.meta.trait to see if it has a .toSlice()

1558031520
tgschultz
std.meta.trait.hasFn("toSlice")(@typeOf(var).Child);

1558031615
shritesh
build-lib's still kinda iffy for wasi but I don't have my machine setup to test that right now. I will be in a better position after Saturday.

1558031819
andrewrk
noted

1558032031
shritesh
The docs are broken on master right now with the change. PR coming up

1558032223
tgschultz
andrewrk: am I recalling correctly that it is a known issue that std.event.lockRunner intermittently breaks in testing?

1558032346
andrewrk
tgschultz, yeah if any of the evented I/O stuff breaks in testing the tests should just be disabled until coroutine rewrite is complete

1558032373
tgschultz
alright, that's what I thought, thanks.

1558032443
andrewrk
shritesh, thanks

1558032461
andrewrk
I didn't realize we had doc coverage for that, that's nice

1558032483
andrewrk
ah I see

1558032559
tgschultz
the different operand order of att syntax asm is screwing with my head.

1558032585
tgschultz
many years of habit are offended.

1558032863
andrewrk
yeah. pretty much everyone agrees the intel syntex is better

1558032872
andrewrk
unfortunately llvm's and therefore zig's support of intel syntax is buggy

1558032962
shritesh
andrewrk, pr'

1558032965
shritesh
's up

1558033129
very-mediocre
is this normal? first field's return type is reported as var here:

1558035223
nrdmn
can I put padding into a struct without giving it a name?

1558035229
donpdonp
tgschultz: hasFn seems sane, but I get the same error: fn toJson(value: var) { if(std.meta.trait.hasFn("toSlice")(@typeOf(value))) { process(value.toslice(); }}; toJson(not_slice) => no member named 'toSlice' in struct NotSlice

1558035264
donpdonp
(toslice is actually toSlice, typo in irc only :)

1558035271
tgschultz
add comptime to the if statement: if(comptime std.meta.trait.hasFn("toSlice")(@typeOf(value)))

1558035283
andrewrk
nrdmn, no but

1558035301
tgschultz
this is the kind of thing I was talking about before. hasFn

1558035310
andrewrk
nrdmn, if your goal is simply to align the next field, this issue will be of interest:

1558035343
donpdonp
tgschultz: ah oh thx

1558035359
tgschultz
very-mediocre I think so, because the function type is generic

1558035414
triplefox
@andrewrk, building now gives this error:

1558035487
andrewrk
triplefox, this is progress! the next step here is going to be improving the zig-libc .h files for the wasm32-freestanding target

1558035490
nrdmn
andrewrk: my goal is to specify a fixed number of unused bytes between two struct fields

1558035577
very-mediocre
tgschultz: this seems to confirm what you said, which throws a small wrench in some shenanigans I'm coding

1558035628
andrewrk
triplefox, maybe I can make this today's live coding stream topic: trying to get lua to compile for web assembly

1558035662
tgschultz
very-mediocre yeah, once a parameter is var, everything after it is also var because it could have its type determined by the first generic parameter.

1558035664
triplefox
andrewrk, sounds like fun

1558035680
andrewrk
that'll be in 1hr20min

1558035703
nrdmn
bits, actually. I'm playing around with bit fields and thought it might be a good idea to declare individual flags as u1 and somehow be able to ignore unused bits in between

1558035785
andrewrk
nrdmn, I think this will work pretty well after those 2 issues I linked are implemented. until then you might hit some rough edges

1558035832
triplefox
i haven't explained why i'm doing this, but you might find it interesting: i am making a fantasy console like pico-8, but i am using wasm as the coding VM. then i got the idea that it would be nice to focus the toolchain around a literal "interpreted rom basic" which you could extend with wasm, instead of supporting a compiler so then i thought i would build lua for it too

1558035852
nrdmn
alright. thanks!

1558035977
andrewrk
triplefox, that does sound interesting

1558036005
andrewrk
well your use case will get a decent amount of attention in about 1 hour

1558036020
andrewrk
I'll give your project a shout out if you're in the twitch chat

1558036111
triplefox
cool :) right now i just have a landing page for it, and it needs updating

1558036240
triplefox
although i want to release a thing soon, actual tooling that makes it fun to work with will probably come in over the summer

1558036527
Sahnvour_
you might want to make your idea map image clickable. cool project :)

1558036903
shritesh
that's so cool triplefox. Are you targeting just the web browser or do you have any plans for it being standalone / on other platforms?

1558037024
triplefox
i'm actually going native first, web browser later...because if i went browser first i would spend more time resolving weird i/o issues that are specific to the browser. the current build is using go and glfw and i've tested it on windows and linux desktop

1558037034
triplefox
for the wasm vm i'm using wagon

1558037158
triplefox
wasm is convenient as a vm target since a lot of people are working on implementations for their cryptocoin server code or whatever and i can just steal that

1558037365
shritesh
nice. I've recently started working on a wasm vm for zig.

1558037435
andrewrk
shritesh, a wasi interpreter?

1558037451
shritesh
a wasm interpreter first.

1558037452
triplefox
ah, awesome.

1558037478
andrewrk
ahh I see so you can embed a wasm interpreter, and have wasm plugins

1558037503
andrewrk
that's a good use case

1558037527
shritesh
I am still on the parse-the-binary stage, I hope to have something to show soon

1558037641
triplefox
zig comes into this picture as the possible "single dependency that does all the stuff you need to build a custom wasm binary" - but i also expect 90% of users to stay in my preconfigured lua

1558037682
andrewrk
that is indeed what zig intends to be

1558037902
shritesh
andrewrk, wasi support will just be a special execution context for the interpreter.

1558037911
andrewrk
makes sense

1558037934
andrewrk
sounds like we're going to be able to add tests for wasm32-freestanding as well as wasm32-wasi

1558037959
shritesh
that's the plan

1558038330
nrdmn
is it possible to have an allowzero pointer to an array?

1558038358
donpdonp
can someone point me to another language that has a comptime mechanism?

1558038394
donpdonp
ie does it exist in other langs, or is it unique to zig to have such an expressive comptime concept (with func params, variables, and blocks)

1558038482
tgschultz
nrdmn, is there a reason to suspect it isn't? `var ptr: *allowzero @typeOf(my_array) = &my_array;`?

1558038570
andrewrk
nrdmn, are you on the freestanding target? are you sure you want allowzero?

1558038827
nrdmn
andrewrk: yes, I tried to access the first few bytes of my memory as a slice

1558038865
andrewrk
makes sense, just checking

1558038998
andrewrk
nrdmn, there might be some places internal to the compiler where it needs to better propagate the allowzero attribute. let me know if you see something that should work but doesn't

1558039028
andrewrk
we don't have any test coverage for freestanding targets yet

1558039303
nrdmn
donpdonp: I think template haskell is similar.

1558039448
nrdmn
andrewrk: I tried to do @intToPtr([*allowzero] u8, 0)[0..16] but the compiler complains about the 'a' after the '*' being invalid. I'm not sure if that'd be the correct syntax.

1558039512
andrewrk
nrdmn, @intToPtr([*]allowzero u8, 0)[0..16]

1558039530
andrewrk
nrdmn,

1558039705
Sahnvour_
donpdonp, not exactly similar but Nim's template and macro system is even more powerful for compile time computation/program modification

1558039730
Sahnvour_
and plenty of lisps of course

1558039773
nrdmn
andrewrk: thanks, that works

1558040007
donpdonp
nrdmn, Sahnvour: great, thx for the pointers.

1558040074
andrewrk
the live stream is starting in 5 min:

1558045577
emekankurumeh[m]
why can `@fieldParentPtr()` fail if zig always passes by reference?

1558047195
scientes
emekankurumeh[m], if you pass it null

1558047234
scientes
not sure how zig handled it, but that is one of the problems with such a thing

1558047238
scientes
is that it changes null

1558047548
BitPuffin
ah sadness, when tabs are banned by the compiler

1558048287
emekankurumeh[m]
scientes: i mean

1558048339
scientes
that is very similar to the null issue i mentioned

1558048381
scientes
this was the best idea to come of that

1558048398
scientes
i think it is a good idea, because it is necessary for strict aliasing to work with @fieldParentPtr()

1558048716
scientes
emekankurumeh[m],

1558048720
scientes
that is the same feature in c

1558050298
andrewrk
daurnimator, shritesh: here is the PR for the changes made on stream:

1558050983
hryx
very exciting stream today. zig/lua/wasm combo is gonna make a big splash I think :D

1558051038
shritesh
andrewrk: I really like the improvements that we got to build.zig. After I'm done with the move, I'll look into the libc i/o aspect and how other wasm exec envs handle / expect it. I know wasmer provides a libc compatible engine

1558051084
andrewrk
shritesh, sounds good. providing a libc shim for file system / OS stuff is something a third party project could do. it could be something you plug into the env: {} object

1558051128
shritesh
Yeah. That's what (I think) wasmer does.

1558051154
shritesh
It also ties into the work I'm doing.

