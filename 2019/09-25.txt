1569403411
daurnimator
tgschultz: you could very much implement a wayland client without glibc...

1569403863
daurnimator
andrewrk: nrdmn: note that I've had lots of issues with a trailing VLA. e.g.

1569408047
samtebbs
Hi all, does anyone know how to print a *u8 as a string?

1569408079
samtebbs
{} and {s} print it as u8@xxxxxx

1569408224
daurnimator
samtebbs: you'd need to dereference it.... `myu8.*`

1569408228
samtebbs
Null terminated string btw

1569408241
daurnimator
samtebbs: oh then you don't have a *u8.... you have a [*]u8

1569408282
daurnimator
samtebbs: I think you'd need to pass it as a slice: `myu8[0..mem.len(myu8)]`

1569408419
samtebbs
daurnimator: I thought I had a *u8 as I have a []*u8 and am looping over it

1569408475
daurnimator
thats a slice (runtime known array) of pointers to

1569408488
daurnimator
samtebbs: do you have a []*u8 or a [][*]u8?

1569408547
samtebbs
I'm allocating with alloc(*u8, elf_headers.num) which I assume would give me elf_headers.num u8 pointers

1569408553
samtebbs
In whatever slice/array representation

1569408573
daurnimator
samtebbs: a

1569408594
samtebbs
daurnimator: Ah yes, I need []*u8 don't I

1569408610
daurnimator
samtebbs: no... you probably want a `[*]u8`

1569408641
samtebbs
Got ya, I struggle to remember the various array types and slices etc.

1569408747
samtebbs
Thanks, that works

1569414687
bgiannan
gst

1569421359
rifkik
Hey Everyone

1569421489
halosghost
o/

1569421651
rifkik
I've started work on a SNES emulator in Zig

1569421657
rifkik


1569421692
rifkik
It really hooked me after writing some trivial programs with it

1569421763
andrewrk
rifkik, welcome :)

1569421774
rifkik
Hey Andrew!

1569421791
andrewrk
you joined at an interesting time; 0.5.0 release is next monday

1569421797
rifkik
I'm really liking your language so far

1569421803
rifkik
really?

1569421827
andrewrk
yes:

1569421840
rifkik
Nice

1569421851
halosghost
andrewrk: I'm quite excited :)

1569421889
fengb
ooo another emulator

1569421899
andrewrk
rifkik, meet fengb

1569421902
halosghost
lol

1569421910
andrewrk


1569421943
rifkik
Ah, a Gameboy Emulator

1569422053
rifkik
I'm writing a SNES emulator thanks to byuu-san's kind words, He's an awesome person

1569422251
fengb
It's a tad harder for sure :P

1569422385
rifkik
Indeed

1569422409
rifkik
Definitely a step up from the NES

1569422432
rifkik
I wrote a NES emulator in go once though, so that will help

1569422502
rifkik
Sorry if this counts as advertising, I just want to see if people are interested in a ZigSNES emulator

1569422608
fengb
We're all interested in new zig projects :)

1569422623
mq32
i'll get back to embedded coding with the new release

1569422643
mq32
october will be much less events for me, so more free time for coding :)

1569422903
andrewrk
I'm going to allocate some time in october to get my rpi bare metal arcade game up to a nice demo for handmade seattle

1569422917
andrewrk
that'll be a nice respite from bug fixing

1569422937
mq32
you mean "it will be a good alternative to find yet undiscovered bugs"?

1569422941
mq32
but yeah, sounds like a plan

1569431661
TheLemonMan
andrewrk, are you able to build any test against musl? for some reason the stdio.h cannot find bits/alltypes.h

1569432314
andrewrk
TheLemonMan, it's working locally for me, also after 35c1d8cef we have CI test coverage for building musl on x86_64-linux-musl and aarch64v8_5a-linux-musl

1569432327
andrewrk
although the test coverage does not test `#include <stdio.h>`

1569432344
andrewrk
--verbose-cc will show the c flags

1569432450
TheLemonMan
have you tried compiling a c file too?

1569432456
andrewrk
yeah I just tried that locally

1569432458
andrewrk


1569432480
andrewrk
in this output, `-isystem /home/andy/dev/zig/build/lib/zig/libc/include/x86_64-linux-musl` has it: ../lib/libc/include/x86_64-linux-musl/bits/alltypes.h

1569432532
andrewrk
I wonder what's different for you, the whole point of `zig cc` is to insulate against system differences

1569433110
TheLemonMan
it's armv7-linux-musleabihf that fails

1569433178
andrewrk
TheLemonMan, ah,

1569433207
andrewrk
after this is fixed the test coverage can be enabled

1569433228
TheLemonMan
yak shaving here I come

1569433258
andrewrk
TheLemonMan, looks like we're not properly constructing the include path

1569433277
andrewrk
arm-linux-musleabihf vs arm-linux-musl

1569433282
andrewrk
this should be an easy fix

1569433318
andrewrk
codegen.cpp: detect_libc in the if (target_can_build_libc

1569433344
andrewrk
I'll be happy to take a look at this later today when I'm done with typing up release notes quota for the day

1569433387
andrewrk
TheLemonMan, out of curiosity, what's the top of your yak stack?

1569433493
TheLemonMan
upstreaming this MIPS port is my top priority right now

1569433514
andrewrk
neat

1569433528
andrewrk
going to try to get it in before the release on monday?

1569433699
andrewrk
TheLemonMan, I'll just fix this arm include thing, I got hooked once I started looking at it

1569433800
TheLemonMan
hah, neat. I'll try to upload a PR in the next few hours, gotta hook up the new arch in the testing harness and I'm done with it

1569434194
andrewrk
TheLemonMan, I fixed the issue but still can't enable test coverage for arm 32 because

1569434222
andrewrk
this is an issue building musl with clang 9, could probably be a nice upstream patch to send to musl

1569434868
andrewrk
or maybe it's an llvm issue. I'm not sure which yet

1569434882
andrewrk
anyway I pushed the include dir fix, going back to typing up release notes now

1569441383
TheLemonMan
andrewrk, I'm also fixing arm+libc stuff heh

1569441401
TheLemonMan
let's coordinate before we end up with duplicated work

1569441405
andrewrk
TheLemonMan, oh, let me throw up a PR so that we don't clobber

1569441671
andrewrk
TheLemonMan,

1569441764
TheLemonMan
here's what I got so far

1569441826
andrewrk
I made it u64 instead of off_t because I think it's better unsigned, you ok with that?

1569441830
TheLemonMan
the fp errors are somewhat expected, we should emit the builtins with the aapcs calling convention

1569441838
andrewrk
ahh

1569441854
TheLemonMan
I'd blindly follow glibc on that matter and use off_t wherever they use it

1569441872
andrewrk
but why would you give a negative offset to mmap or pwrite?

1569441878
TheLemonMan
at least at the c.zig level

1569441888
TheLemonMan
-1 has a special meaning for pwrite

1569441905
andrewrk
where do you see that?

1569441914
TheLemonMan
*preadv2/pwritev2 sorry

1569441933
andrewrk
oh I see

1569441942
andrewrk
ok I agree with you

1569442398
uvx
I have no clue how to fix this error

1569442416
uvx
any ideas?

1569442476
TheLemonMan
you have to @intCast to u6 the << RHS

1569442486
fengb
(T(1) << (nth % Size_of_T_bits)) needs to be u6 or smaller

1569442507
fengb
I mean RHS needs to be â€” "(nth % Size_of_T_bits)"

1569442526
fengb
Anything bigger is potential overflow and undefined behavior

1569442529
uvx
but what if I change my base type, then it will be u7 or other

1569442562
fengb
Because you're doing a mod, you might be able to get away with manual casting, @intCast(u6, blah)

1569442572
andrewrk
TheLemonMan, sounds like the next yak is

1569442583
andrewrk
but I don't think that should happen before 0.5.0

1569442584
fengb
(And it'd catch an actual overflow in debug / safe modes)

1569442625
TheLemonMan
yeah, that yak is definitely postponed to the next release

1569442639
andrewrk
I also have a research topic: ability to specify calling conventions with comptime code in userland

1569442660
andrewrk
imagine if the c calling convention or aapcs cc were fully userland concepts

1569442691
fengb
There's a builtin function to get the natural bitsize

1569442696
fengb
std function

1569442730
fengb
std.math.Log2Int(T)

1569442733
andrewrk
TheLemonMan, sorry for clobbering you, that was follow-up to nsz from #musl sending a patch

1569442767
andrewrk
OK I am way behind on my release notes quota for today

1569442789
TheLemonMan
custom CCs means you have to somehow coerce LLVM into understaning those, unless you want to do the codegen yourself but that's nuts IMO

1569442888
TheLemonMan
no problem, I had just started looking at the build failures

1569442997
mq32
andrewrk, is there a way right now to safe-convert an integer to an enum?

1569443008
mq32
@intToEnum will panic if the int is out-of-range

1569443134
uvx
fengb: thanks! it works!

1569443153
Tetralux_
mq32: meta.intToEnum IIRC

1569443211
mq32
oh right. i could just iterate over the type info

1569448272
_Vi
How do I project create a template (with a public function, a test and example) for Zig library intended to be used in Zig projects?

1569448425
_Vi
`zig init-lib` is for libraries resulting in libmything.a. And the template does not include a Zig example that uses the library.

1569448509
_Vi
`zig-clap` is an example of such library. But I'm not sure the how the project was generated (and if its structure is canonical).

1569449850
nrdmn
what's the current state of iterators in zig? I think there's been some work on them recently?

1569451898
nifker
Oh I am finally unbanned

1569453213
mikdusan
for struct-method `foo.doit()` it is roughly sugar'd to `foo.doit(foo)` . i'd like this too if it doesn't botch the world:

1569453215
mikdusan
`foo.abc.xyz.bar()` to sugar `foo.abc.xyz.bar(foo)`

1569453256
mikdusan
assuming none of intermediates `xyz` or `abc` are `@typeOf(foo)`

1569453289
mikdusan
this would really make for nice mixin components

1569453317
Tetralux_
What's an example of that?

1569453403
mikdusan
you mean a use-case or just a short code example to explain what i mean?

1569453653
mikdusan
short example that doesn't work today:

1569453708
mikdusan
the obvious way today is to add param `*Foo` to barPrinter but it's actually not needed

1569453825
andrewrk
mikdusan, I'm a bit resistant to this one because the exact reason it is useful also makes reading the code more difficult

1569453950
andrewrk
Maybe I'm not understanding the proposal fully

1569454048
mikdusan
it makes the struct-method context transitive. but that in itself, yes i understand if it's not zig zen. no problemo

1569455708
Tetralux_
I can't even quite understand what that example does xD

1569455816
andrewrk
I have a hypothesis about these macOS ci failures. It's not easy to test though

1569455852
andrewrk
It's that they're giving us a nondeterministic amount of RAM and if we run out it does this "could not reach host" thing

1569455890
mikdusan
+1 s/hypothesis/fact/

1569455946
mikdusan
as more tests are added to zig...

