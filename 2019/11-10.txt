1573351557
keithdc
I'm importing some c headers that have enums where a value is used for multiple tags (I.e enum Example {A = 0, B = 0}) and it's causing compile errors. Any advice on what I should do to get around this? I could modify the headers to remove conflicts but would be tedious..

1573352042
traviss
how can i create a union instance from a runtime known tag?  @unionInit and @field both require a comptime known tag.  i found a way, but its messy:

1573352752
traviss
keithdc: is the error something like 'enum tag value already exists'?  did you see this issue

1573352826
keithdc
Yup, that's the one. That's fine, I'll manually remove the conflicts for now. Thanks.

1573353007
traviss
i saw andrew ran into a similar issue in his 'porting vulkan tutorial' video.  i can't remember exactly what he did.  this is close to where he runs into the problem:

1573353111
traviss
i believe he used `zig translate-c` and then cleaned up the resulting zig code.

1573353287
keithdc
Yeah, that's probably a good idea. I watched it but don't think I finished it, I'm pretty much doing the exact same thing.

1573365974
daurnimator
mq32: FYI reading a socket and reading a file unfortunatly

1573373497
Pistahh
can someone pls explain these errors :)

1573374075
daurnimator
Pistahh: I'm confused a bit.... I didn't think godbolt ran on windows.....

1573374101
daurnimator
Pistahh: unrelated: why did you say your main returns anyerror?

1573374979
Pistahh
daurnimator: this is the error I see when I run it on (arch) linux too.. thats why it is so weird :)

1573375013
Pistahh
daurnimator: dunno, probably copypasted from somewhere.. just starting with the language, I'M not always quite sure I do the best thing :)

1573375056
daurnimator
Pistahh:

1573376226
achaninja
Hi there

1573376243
achaninja
are there any really simple wrapper libraries for zig that just wrap the posix apis

1573376247
achaninja
directly

1573376257
achaninja
just adding error handling on top of things like waitpid

1573376692
Pistahh
achaninja: there is an std.os.linux.waitpid, but it uses the syscall directly. I'm a zig noob so I may tell lies :) and hope others will correct me, zig by default tries not to rely on libc, so it cannot wrap the libc defined waitpid

1573376754
Pistahh
achaninja: when trying to answer questions like yours for yourself, I find it very useful to grep (ripgrep) the zig sources for answers.

1573376781
achaninja
except my question was about a library

1573376790
achaninja
e.g. external to the sources

1573376795
achaninja
but sure

1573376824
achaninja
I actually searched in the documentation, but the waitpid definition was grayed out as it has no doc comment and is not tested

1573376839
achaninja


1573376950
daurnimator
achaninja: most of it is going into std if that's your question

1573377008
daurnimator
achaninja: its probably just missing tests/docs. std.os.waitpid should work I think?

1573377115
achaninja
so if you look at

1573377159
achaninja
it doesn't return zig error types

1573377176
achaninja
which was sort of what my question was, I knew I can call c headers from zig

1573377259
achaninja
I suppose the answer is that std.os.linux will provide it once its had more polish

1573377332
daurnimator
achaninja: I think that's because waitpid can't actually error

1573377370
achaninja
no thats not correct

1573377389
daurnimator
achaninja: howso?

1573377408
achaninja


1573377415
achaninja
because it can return errors?

1573377468
gonz_
File a bug

1573377486
daurnimator
achaninja: what errors?

1573377505
daurnimator
achaninja: the only errors are essentially for invalid input; so the zig wrapper there assumes they'll never happen

1573377523
daurnimator
achaninja: see

1573377578
achaninja
there are lots of reasons why you could end up waiting for a process that doesn't exist outside your control.

1573377604
daurnimator
achaninja: like what?

1573377633
gonz_
"If there are no children not previously awaited, -1 is returned with errno set to ECHILD". Non-zero is specifically cited as being errors.

1573377694
daurnimator
gonz_: ??

1573377718
achaninja
if you are pid 1 and want to check for zombies for example

1573377728
gonz_
I don't see how you can claim it doesn't return errors when the documentation gives clear examples of errors being returned.

1573377758
daurnimator
achaninja: that would be wait() though; not waitpid()

1573377768
achaninja
waitpid(-1)

1573377771
daurnimator
ah I see waitpid() can take a -1.

1573377779
daurnimator
I don't think that was considered for the zig wrapper

1573377826
gonz_


1573377859
daurnimator
gonz_: yes; and the zig code I linked above explains why each of them is ignored/unreachable. (and EINTR is handled by repeating the wait)

1573377878
achaninja
its not unreachable though

1573377886
achaninja
but anyway, it can be fixed

1573377905
achaninja
I also think automatically handling EINTR is not helpful

1573377922
achaninja
because sometimes if you are doing low level programming, you actually need the EINTR

1573377927
achaninja
because you got interrupted

1573377973
daurnimator
achaninja: in those circumstances you would usually reach for the lower level os-specific interface, e.g. os.linux.waitpid

1573377980
achaninja
umm

1573377984
achaninja
that code is os.linux.waitpid

1573378006
daurnimator
that code is os.waitpid

1573378006
achaninja
oh sorry

1573378010
achaninja
my mistake

1573378041
achaninja
ah im sorry

1573378048
daurnimator
achaninja: its only unreachable if you pass -1 or 0 as the pid. I think it would be sensible for zig to assert the pid argument is not 0 or -1; and provide another function wait() that does the non-specfic-pid bits that

1573378073
achaninja
yes, for os its ok.

1573378110
achaninja
I somewhat disagree with the term 'unreachable'

1573378123
achaninja
i think 'unexpected'

1573378175
achaninja
though i guess its programmer intent

1573378188
daurnimator
achaninja: how would it be reachable under documented usage (assume we document that -1 and 0 are not valid input; and say that the pid must exist)

1573378237
achaninja
because you might be in a multithreaded application who waits for a pid when you don't expect

1573378253
achaninja
its a bug yeah, im just talking about the terminiology

1573378255
daurnimator
achaninja: that would be a race condition in your application

1573378284
achaninja
I know

1573378294
achaninja
but thats why I disagree with the term unreachable haha

1573378320
achaninja
so anyway

1573378331
achaninja
std.os.linux is unadorned C api

1573378344
achaninja
std.os has zig errors but is not the linux api

1573378378
achaninja
is there a location for the raw linux api, but with error values

1573378450
daurnimator
achaninja: no I don't think so..... cause then it's not "raw" any more

1573378467
achaninja
yeah, I guess errors.EINTR

1573378472
achaninja
for example

1573378515
achaninja
The reason I ask is because Im looking at porting some fairly low level code

1573378529
achaninja
and improved error handling would be nice

1573378533
achaninja
I guess I can wrap them myself

1573378658
daurnimator
achaninja: assuming we add an `assert(pid != 0 and pid != -1)`, how is the std.os wrapper not suitable for you? (you're passing 0/-1?)

1573378972
achaninja
it depends on the application. The last 3 things i wrote were an init daemon, a sandbox, and a shell. In those 3 cases it was more useful to just have the C api exactly as it's specified.

1573378981
achaninja
but C error handling sucks

1573379126
achaninja
I don't mind though, what zig does is sensible

1573379162
achaninja
I was mainly just trying to find out if someone had done that as a library, thats all.

1573379616
gonz_
Does the docs generation also have a static mode to generate a set of docs from a project? It'd be interesting to have static pages, plus it might be useful for things like Zeal/Dash(?).

1573380006
daurnimator
gonz_: yes... that's pretty much what it does

1573380027
gonz_
Not according to the demo

1573380032
daurnimator
hmm?

1573380055
gonz_
it's using JavaScript with just a static frame that's filled in

1573380059
gonz_
so it's pretty much the opposite

1573380065
gonz_
I haven't watched the whole demo

1573380080
daurnimator
The build process emits a .json file with all the docs/details. The doc page itself is generated (yes at runtime) from that

1573380096
gonz_
but what andrewrk was demoing so far is the opposite of a bunch of static pages

1573380105
daurnimator
Usually "static" in a web context means "doesn't require server roundtrips" not "no javascript"

1573380444
gonz_
Fair enough, I don't particularly care about the definition. Executing JS unnecessarily would complicate addition to things like Zeal/Dash, AFAIK, so that's the operative part.

1573380478
gonz_
In general there ought also to be an option that can be passed to do the rendering work beforehand regardless.

1573385921
scientes
daurnimator, it can be no javascript too

1573385937
scientes
but yeah, more like static backend, static frontend

1573386742
kenaryn
Hello, please what does it mean "token/tokenize/tokenisation"? e.g. Zig has line-independant tokenization, a \\ token, each line of code can be tokenized out of context, etc.

1573387458
Sahnvour
kenaryn: tokenization is the process of identifying

1573388243
kenaryn
Thank you Sahnvour, it seems like an exhaustive definition!

1573388843
daurnimator
kenaryn:

1573389114
daurnimator
Pistahh: oh. I figured out your issue: printing a File currently requires evaluating all the method signatures in the struct; which includes windows things..... which aren't available on non-windows.

1573389125
daurnimator
Pistahh: stop printing File and you'll be fine :P

1573389215
mq32
is an allocator allowed to @panic if i try to release an object not allocated with the allocator?

1573389228
daurnimator
mq32: sure.

1573389254
daurnimator
mq32: unreachable (and hence nose demons in release mode) would be expected IMO, so a @panic is one level nicer

1573389620
mq32
okay, good

1573389631
mq32
i'm writing a "bitmap allocator"

1573389641
mq32
or do we have that in std already?

1573389646
mq32
so "all objects have the same size"

1573389654
mq32
and you have a fixed number of objects

1573389671
daurnimator
mq32: with multiple bucket sizes?

1573389676
mq32
no, fixed bucket size

1573389689
mq32
hmm. i can probably make that even dynamic…

1573389703
mq32
have to think about it a moment, if i need "full dynamic" allocation

1573389729
daurnimator
mq32: might be able to write a "single size" implementation that takes a size as a parameter; then we can stack several together

1573389784
mq32
oh that sounds good :D

1573389797
mq32
beeing on freestanding sure has it's ... implications :D

1573389854
daurnimator
mq32: FWIW if you're looking to write things to make a good allocator; the thing we need most right now is a radix tree

1573389900
mq32
for now i'm happy with "i can do alloc(FixedObject)" ^^

1573393838
daurnimator
oh my.... I made a discovery of a new idiom I think

1573393921
daurnimator
`pub const myclass = struct { somefield: usize, usingnamespace if (x) struct { pub fn foo() void {} } else struct { pub fn bar() void {} }; pub fn othermethod() void {} };`

1573394337
mq32
okay?

1573394342
mq32
what is your usecase?

1573394406
tgschultz
using a bitmap for that kind of allocator is probably slower than a freelist.

1573394442
daurnimator
mq32: method signatures that differ based on comptime parameter

1573394455
daurnimator
or even different method names

1573394467
mq32
i was sad to discover that @Type() for enums isn't implemented yet :D

1573394483
mq32
otherwise i could create my scancode tables

1573394564
Sahnvour
daurnimator: interesting, works with fields too ? mixins in zig then ?

1573394590
daurnimator
Sahnvour: no fields. "method-only-mixins" you could call it

1573394651
mq32
Sahnvour: no, for "field mixing" there's a quite interesting proposal, but nothing that is settled yet

1573395060
mq32
oh.

1573395067
mq32
I love Zig :)

1573395091
mq32
for(screenBuffer) |row, y| { for(row) |*pixel, x| { pixel.* = render(x,y); } }

1573395645
scientes
mq32, isn't that a little slow?

1573395681
mq32
why should it?

1573395687
mq32
it should do the same as iterating manually

1573395701
scientes
yeah but you want polyhedral optimizations

1573395703
scientes
and multi-threading

1573395705
scientes
and SIMD

1573395711
scientes
and all sort of optimizations for that sort of thing

1573395749
mq32
scientes: I have freestanding x86 ;)

1573395761
mq32
i don't have SIMD and especially i don't have threads :D

1573395769
scientes
x86 has SIMD

1573395800
mq32
oh wow

1573395805
mq32
yeah ,the pentium iii has SSE :D

1573395817
scientes
and MX before that

1573395820
scientes
on AMD cores

1573395825
scientes
k6

1573395828
mq32
yeah but for rendering text: i don't care for performance

1573395837
scientes
ahhh rendering text

1573395844
mq32
i render 320x200 pixels :D

1573395847
scientes
well fonts are their own thing

1573395855
mq32
i can pretty much ignore

1573395859
scientes
but i guess you are using one bit rendering

1573395884
scientes
that code just looked alot like ray tracing

1573395894
mq32
it's just a usual render loop ;)

1573395900
mq32
i code pretty much all my rendering like that

1573395911
mq32
except for when i know that i don't have to access all pixels anyways

1573395919
mq32
like when doing particles or sprites

1573395921
scientes
I don't know much about graphics, but i don't think bit-bliping is common

1573395923
scientes
cause its so slow

1573395943
scientes
faster stuff is all double rendering and page flipping

1573395966
mq32
that is orthogonal to each other

1573395976
mq32
i have my font as 1 bit data

1573395984
mq32
as it's much smaller than 8 bit per pixel

1573395987
scientes
also tracking of when data changes

1573396146
mq32
well, we'll see how this project turns out

1573396147
mq32
:D

1573396155
scientes
no it seems fine

1573396177
scientes
cause you are pushing so little datat

1573396185
mq32
yeah

1573396186
scientes
this isn't 10-bit-depth 4K at 60hz

1573396251
mq32
definitly not

1573396524
daurnimator
Can you pass an async function as a comptime parameter?

1573396610
daurnimator
Hmm.... how should a user pass in e.g. "onXYZ" callbacks?

1573396668
mq32
btw: The Ziguana is now travelling in southern germany:

1573396714
daurnimator
ah ha I see in InStream.... `pub const ReadFn = if (std.io.is_async)            async fn (self: *Self, buffer: []u8) Error!usize        else            fn (self: *Self, buffer: []u8) Error!usize;` .... how ugly :(

1573396722
scientes
mq32, how do i get one of those stickers?

1573396740
mq32
travel to stuttgart/germany and visit shackspace :D

1573396740
scientes
my laptop has zero stickers

1573396752
scientes
travel in europe is too expensive

1573396752
daurnimator
yeah I've always not liked putting stickers on my laptops

1573396753
mq32
i have printed them at

1573396759
scientes
you have to fly everywhere

1573396761
daurnimator
scientes: compared to where?

1573396766
scientes
Peru and Bolivia

1573396781
daurnimator
scientes: I drove everywhere last time. was pretty cheap $ wise. But train would have given me time to work....

1573396798
scientes
daurnimator, I am in London Luton airport ATM

1573396826
Pistahh
daurnimator: yes that indeed explains it, thanks :) it would be nice though if the compiler gave more frieldly indication of the issue :)

1573396956
scientes


1573396959
scientes
that is pretty cool

1573396961
daurnimator
mq32: Sahnvour: the usecase where I discovered the usingnamespace mixin thing:

1573396997
mq32
this is nice!

1573397052
scientes
I just wrote a slick bisection of variable-length strings (with reserved character, like UTF-8 or null-terminated has)

1573397108
daurnimator
scientes: utf8 doesn't really have a reserved character. it's got an invalid range...

1573397116
scientes
daurnimator, \xfe and \xff

1573397127
scientes
and also \xfd and \xfc

1573397137
scientes
and IIRC \xfb and \xfa

1573397168
Sahnvour
daurnimator: pretty slick

1573397195
Sahnvour
closer and closer to reification :)

1573397245
daurnimator
scientes: \xc0, \xc1 and \xf5-\xff

1573397297
daurnimator
scientes: but well formed utf8 is more than that.. e.g. you need to check the leading codepoint indicates the correct length. and that all continuation bytes have the continuation sequence

1573397308
scientes
ahh yes, but only \xff and \xfe in the original definition

1573397336
daurnimator
scientes: "original".... being superceded in general by 97 and officially in 2003.

1573397424
scientes
anyways, its easy to pass the reserved byte in a register

1573397443
daurnimator
scientes: but there's many reserved bytes here.... how is that helpful?

1573397445
scientes
and escaping is possible, but doesn't seem needed

1573397457
scientes
daurnimator, the string set is comptime

1573397467
scientes
so you just pick what works

1573397476
daurnimator
then what does passing in a register mean?

1573397840
scientes
is there anything like ? : GNU extension?

1573397885
scientes
oh yeah "else"

1573397919
scientes
"orelse"

1573401068
daurnimator
how can I turn a *T into a slice of length 1?

1573401442
daurnimator
`@ptrCast([*]T, x)[0..1]` I guess?

1573402121
mq32
daurnimator, yeah that's afaik the "official way"

1573402488
daurnimator
TIL our current out stream can't indicate a partial write...

1573404204
protty
Does anyone know how you could go about exiting and thread and decommitting its stack without creating a new thread?

1573404310
daurnimator
protty: well how did you create the thread?

1573404364
protty
by using a custom stack for clone()

1573404449
protty
was thinking of using @newStackCall to switch to a different stack, decommit the old one and then pthread_exit() or similar. But couldnt figure out where this new stack would live

1573404467
daurnimator
protty: generally whoever creates something is responsible for deleting it

1573404483
daurnimator
==> whatever spawned the thread should be responsible for waiting on it

1573404578
protty
the spawner in this case doesnt join() until much later on as it does other work in between. thread stacks being recycled during that work and wanted to decrease memory usage of old stacks if possible

1573405350
protty
oh pthread_exit() is thread safe. might have an idea now. sorry for the rubber ducking..

1573405787
daurnimator
hmmmmmm. `usingnamespace Mixin(Self);`

1573405903
daurnimator
Where `Mixin` could be something like: `fn Mixin(Self: type) type { return struct { pub fn foo(self: *Self) void {} pub fn bar(self: Self) usize { return self.otherThing(); }; } }`

1573405955
daurnimator
idea: `InStream` could be a Mixin => it assumes that `self.read()` exists; and adds in all the other utility `readXYZ` methods

1573405969
daurnimator
andrewrk: ^ did I stumble on good? :)

1573406209
nrdmn
mq32: are you going to bring stickers to 36c3?

1573406332
protty
daurnimator: is that like `impl` trait extensions in rust?

1573406398
daurnimator
protty: I'm not familiar with those in rust; so can't say

1573406406
andrewrk
hi protty

1573406435
protty
ello andrewrk

1573406478
daurnimator
I think the above scheme would remove the need for stack_size_std_io_InStream....

1573406535
andrewrk
daurnimator, we can avoid that hack (and the error set annoyances!) if we avoid runtime-known function pointers

1573406554
daurnimator
andrewrk: exactly; the Mixin strategy I mention above would do that!

1573406566
andrewrk
that's definitely worth looking into

1573406580
daurnimator
I think I'll have a go at it

1573406597
andrewrk
the only downside is that apis which want to accept a stream will have to take a `var` (which is currently already true because of the error set)

1573406600
daurnimator
not now.... its 4:30am and I've spent all night thinking about std.fifo :P

1573406617
andrewrk
but that might be worth it because that stack size thing is really bad

1573406625
daurnimator
andrewrk: yes it would;

1573406654
andrewrk
it addresses some of the issues but I wouldn't call it a full solution

1573406665
shakesoda
i asked yesterday, but is there a reasonable way with builder to generate a config.h for a dependency in place of whatever its original build system would make

1573406689
shakesoda
i saw some stuff for getting output h path but it errored out when i tried to use it

1573406730
andrewrk
shakesoda, there is not a high level convenient API yet but you can use the build script to build & run a .zig file which generates your config.h file

1573406770
andrewrk
and there is this addBuildOption API:

1573406778
andrewrk
this will give you @import("build_options")

1573406799
andrewrk
also happy to accept PRs to improve the build system API

1573406934
shakesoda
andrewrk: thanks, i'll see what i can come up with

1573412554
shakesoda
is it documented anywhere how to deal with linking in windows deps? for example i need user32.lib, opengl32.lib etc and i'm not sure what to do about it

1573412731
andrewrk
foo.linkSystemLibrary("user32")

1573412752
shakesoda
hmmm, i tried that, maybe i put it on the wrong thing

1573413033
shakesoda
i seem to be ending up here when i try that

1573413161
andrewrk
shakesoda, hmm that seems like a bug. are you able to learn what the error is in this case?

1573413190
andrewrk
(side note: zig should be improved to treat that situation the same way it does as `catch unreachable` so that you can see the error return trace)

1573413651
shakesoda
andrewrk: i'm not sure what the real error is, my guess is hitting the else case in the error switch in linkSystemLibraryPkgConfigOnly and passing that through

1573413666
shakesoda
if i change the else => unreachable to else => {} i get further, at least

1573413720
shakesoda
actually, i can successfully link if i do that

1573413728
andrewrk
shakesoda, change it to else => |e| e catch unreachable,

1573413735
shakesoda
trying

1573413740
andrewrk
as a temporary workaround, so that it gives you an error return trace

1573413777
andrewrk
maybe you need @as(anyerror!void, e) catch unreachable

1573413840
shakesoda
does that need a git build? that fails on 0.5.0

1573413886
andrewrk
there have been multiple bug fixes related to the code you are looking at since 0.5.0

1573413897
shakesoda
okay, i'll update and see how it goes

1573414157
lunamn
andrewrk: question regarding #3635, would Address.initUnix stay as-is with returning error.UnsupportedOS?

1573414279
lunamn
I forgot to replace its switch on builtin.os to using has_unix_sockets and thought about that for a bit

1573414700
shakesoda
andrewrk: @as(anyerror!void, e) catch unreachable works with master, big trace now which is showing me windows.CreateProcessW throwing error.FileNotFound (presumably for pkg-config) ...

1573414717
shakesoda
andrewrk: but that should be handled already...

1573414835
shakesoda


1573414911
andrewrk
lunamn, I think you can simply remove that switch, and allow the programmer hit a compile error if os.sockaddr_un is not defined

1573414952
andrewrk
shakesoda, the error return trace should show how the error gets propagated. can I see the full trace?

1573414964
shakesoda
sure, one moment

1573415142
lunamn
andrewrk: done, #3635 is ready, feel free to review again

1573415157
shakesoda
ah, i missed the line on top: it's getting error.InvalidName

1573415170
shakesoda
here's the trace though

1573415250
andrewrk
shakesoda, yeah the earlier lines are errors that were hit, but handled

1573415263
andrewrk
a bit confusing, but at least all the information you need is there

1573415265
shakesoda
my zig-fu needs work

1573415269
shakesoda
:)

1573415395
andrewrk
shakesoda, ok I think the problem is at getPkgConfigList, it's not detecting that the pkg-config binary did not execute successfully

1573415598
andrewrk
shakesoda, can you try this patch?

1573415756
andrewrk
lunamn, thanks for the PR! will merge soon

1573415766
andrewrk
have you been trying out your patch locally?

1573415814
andrewrk
I'll solve the SIGPIPE problem soon. I've been discussing with Rich Felker the best way to handle this

1573415829
shakesoda
andrewrk: that works

1573415893
andrewrk
shakesoda, ok, I'll push to master

1573415965
lunamn
andrewrk: yep, it works, at least on linux :P

1573416289
Pistahh
daurnimator: btw, you asked why I used anyerror on fn main.. well, zig init-exe generates it :P :D

1573416412
andrewrk
anyerror!void is a perfectly reasonable return type on main

1573417050
shakesoda
i'm trying to throw around some c function pointers and i'm not entirely sure how to address this error: expected type 'extern fn([*c]const u8) ?*c_void', found 'extern fn([*c]const u8) ?extern fn() void'

1573417066
shakesoda
i see some optionals involved, but have no idea how to convince it that yes i did mean that

1573417253
andrewrk
arguably that type coercion should be allowed

1573417258
andrewrk
but you can work around with @ptrCast

1573417287
andrewrk
I suggest [*]const u8 instead of [*c]const u8 though. assuming that's a c string

1573417344
shakesoda
doesn't it need to be *c? i'm passing this between two c libraries

1573417372
andrewrk
[*c] exclusively exists for auto-translated code.

1573417671
shakesoda
both the struct and the function i'm pointing to are from auto-translated c files

1573417813
shakesoda
it's also working now, thank you

1573417823
andrewrk
your source file is not auto translated c code. so there should be exactly 0 instances of [*c]

1573417864
shakesoda
hm, but if i try to drop the *c it gets mad at me

1573417875
andrewrk
can I see?

1573417998
shakesoda


1573418048
shakesoda
if the ptrcast uses [*c] it builds and works fine, here

1573418531
andrewrk
shakesoda, isn't there hints after the errors?

1573418694
shakesoda
it gives me a cannot cast because it could have null values which are illegal in [*]

1573418724
andrewrk
it's a really good clue

1573418736
andrewrk
[*c] is not the answer

1573418791
andrewrk


1573418818
andrewrk
(also, it would have saved me some time if you included the notes in the error paste earlier, I had to type out the example to get the extra information)

1573418852
andrewrk
the zig build fix is pushed to master

1573418860
shakesoda
sorry, was just trying to keep noise down in the log

1573418866
andrewrk
no problem

1573418881
shakesoda
for the apis i am passing these between, it's completely legal for the pointers to be null, and i don't use anything in this struct in my code

1573418890
shakesoda
i certainly don't believe *c to be the right answer in anything i am using myself

1573418904
shakesoda
zig is very clear to me about this lol

1573418922
andrewrk
if they can be null then use optional pointers

1573418937
andrewrk


1573418951
shakesoda
i'm reading it, will try that

1573419015
andrewrk
`?[*]const u8` "optional unknown-length pointer to constant elements of type u8"

1573419068
shakesoda
yeah, that builds for me

1573419099
shakesoda
?*const u8 worked too, but that is wrong

1573419306
shakesoda
andrewrk: thanks, this makes sense

1573419314
andrewrk
np

1573419531
shakesoda
is there a cleaner way to or flag values together defined in an enum in c header than a ton of bitcasts? this solution seems a bit heavy handed:

1573419708
andrewrk
that also has the disadvantage of using runtime state instead of keeping everything comptime

1573419751
andrewrk
I think that should be compile error too, the proper cast here is @enumToInt

1573419812
shakesoda
that certainly sounds better, although i think it makes sense that bit cast at least builds

1573420088
andrewrk
C lets you implicitly cast an enum value to an int. zig doesn't. so you have to use @enumToInt in this case

1573420129
andrewrk
type theory wise, enum values are not bit flags. it's not really correct for that .h file to do that

1573420232
shakesoda
that's reasonable, seems i still have to bitcast back to the flag type too

1573420267
andrewrk
@intToEnum

1573420275
shakesoda
crashes my program

1573420279
shakesoda
i tried that one first

1573420337
shakesoda
crashes with invalid enum value, which makes sense

1573420363
shakesoda
since what the function is actually taking isn't represented in the enum any longer

1573420389
andrewrk
ah. yeah this is why flags should not be enums

1573420450
shakesoda
i can accept the bitcast, i should make a note to myself to make the typing more sound on this api in the future

1573420539
shakesoda
enums with bit flags aren't that uncommon, but i should certainly drop the enum type when it's expected to pass things which can't be represented with it anymore

1573420558
shakesoda
s/pass/accept/

1573425931
mq32
aaah, by code broke with the latest update

1573425973
mq32
@as is a thing now, good to know

1573426341
andrewrk
mq32, here are some notes:

1573426532
mq32
i think i found a regression in std.fmt.formatIntBuf

1573426583
mq32
also: thankfully, @as can be fixed with search-and-replace

1573426590
mq32
i just replaced ... 100 casts :D

1573427100
mq32
oh

1573427116
mq32
arrays are brokenish when using multidim arrays in packed contexts

1573427210
mq32
do arrays still enforce some alignments?

1573427550
mq32
andrewrk: that was a fast merge...

1573427672
companion_cube
you mean 😁

1573427944
mq32
error: attempt to read 1752 bytes from [1758]u8 at index 8 which is 1750 bytes

1573427958
mq32
this is a ... very specific error message :D

1573429633
pixelherodev
Is WASM supported at the moment? If so, is there a way to compile to WASM w/o graphics and have an in-browser "terminal?"

1573429737
andrewrk
pixelherodev,

1573429787
pixelherodev
Right, thanks :)

