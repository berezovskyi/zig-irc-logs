1566432012
Tetralux
In loops where you did use it, it'd know that it could maybe remove something and so would insert the switch on @removeType(), for example.

1566432024
Tetralux
I'm hypothesising here.

1566432063
Tetralux
But the idea is that the author of the custom struct would only have to ever write one fn to enable iteration with for loops.

1566432064
Tetralux
Period.

1566432153
Tetralux
But yes, it could be:

1566432181
Tetralux
fn iterate(self: *Self, by_pointer: bool, f: fn(ElementType) void) void {}

1566432207
Tetralux
Or rather, `comptime by_pointer: bool`.

1566432255
Tetralux
The idea of using *e to mean "I can remove this elem", is an interesting idea.

1566432284
Tetralux
Though, it's a little strange because that's talking about "can I modify the elem in the iterable?" rather than "can I remove it from the iterable?"

1566432301
Tetralux
Mutability of the value, rather than mutability of existence.

1566432411
mikdusan
to be clear i'm bring this up in regards to mutating an item,

1566432439
mikdusan
i'll try to make time to reply to your PR. thanks for answering

1566432459
Tetralux
Oh, you mean, for instance, "I'm iterating over this iterable thing; if I find an element of a certain value, I want to update it."

1566432470
Tetralux
And I'd appreciate responses, so feel free :)

1566432492
mikdusan
(yes to the Q).

1566432496
Tetralux
AH

1566432497
fengb
In current for loops, without the * implies “const”, like function args

1566432501
Tetralux
In that case yes.

1566432507
Tetralux
It would work like fors do currently.

1566432522
Tetralux
for (iterable) |*e| { e.value += 1 }

1566432530
Tetralux
for (iterable) |e| { e.value += 1 } // error

1566432551
Tetralux
I don't see why that would be a problem. :3

1566432565
Tetralux
It may be for all I know, but I can't think of a reason rn.

1566432631
mikdusan
take a simple primitive like u32. compiler can pass by value for const iteration. for non-const it must use an underlying pointer for reference semantics.

1566432647
mikdusan
that sounds to me like iterator() has 2 different code paths

1566432662
Tetralux
It's comptime known which you take.

1566432698
mikdusan
what i mean is if i have the same program... that iterates one place as const, another place as non-const... i need 2 versions of iterate()

1566432716
Tetralux
Yeah, that seems fair.

1566432738
mikdusan
i guess no big deal if it's generated by compiler. just wanted to suss this out and make sure the programmer doesn't need to define 2 functions.

1566432753
mikdusan
i think you're correct, programmer only needs 1. i was getting confused programmer vs. compiler

1566432757
Tetralux
Oh no - the programmer would

1566432768
Tetralux
If they did, I'd consider it a failure xD

1566432774
Tetralux
That would be quite silly.

1566432797
Tetralux
Unless there's a good reason I'm not thinking of.

1566433867
Mr_Slurpy
just fyi, you might already know this but "zig translate-c" seg faults when you pass it a file that doesn't exist

1566433878
Mr_Slurpy
Confused me at first lol

1566433879
mikdusan
also 0-byte file

1566511619
andrewrk
FireFox317, the logger is back

1566511639
Tetralux
It does pass, yeah :)

1566511659
andrewrk
but does it work with a new test case that has your new align syntax

1566511666
Tetralux


1566511668
Tetralux
ONE MOMENT

1566511703
andrewrk
that will test parsing and rendering both, if you add a testCanonical

1566511771
Tetralux
Add a 'test {}' to align.zig?

1566511778
Tetralux
Where does the testCanonical go?

1566511802
andrewrk
../std/zig/parser_test.zig

1566511844
andrewrk
these test the stage2 parser and renderer

1566511919
Tetralux
Added such a test to parse_test.zig; it fails.

1566511928
Tetralux
It doesn't render the align(N).

1566511959
andrewrk
unless you edited std/zig/parse.zig I would expect parsing to fail as well

1566511967
Tetralux
I did edit it ;)

1566511972
andrewrk
rendering code is in std/zig/render.zig

1566512467
Tetralux
I'm having trouble figuring out how to get the align expression from the tree so I can render it.

1566512596
andrewrk
you might find inspiration from where the other align() syntax is rendered

1566512601
andrewrk
for pointer types

1566513064
Tetralux
I can't even find that xD

1566513102
Tetralux
Ah wait - I think I just found it.

1566513173
Tetralux
When I edited parse.zig, I put the align_expr on ContainerField.

1566513290
Tetralux
Ah yes - foudn it.

1566513614
Tetralux
Man this is awkward to get your head round.

1566513623
Tetralux
Slowly figuring it out though

1566513912
gonz_
Is "{d:<32.3}" in a format string not supposed to be 32 characters wide left-aligned float with 3 decimals precision?

1566514215
gonz_
Getting the fill/alignment to make any difference at all seems a challenge.

1566514348
andrewrk
I think tiehuis either just changed that or is in the middle of changing it

1566514373
andrewrk


1566514482
Tetralux
FINALLY

1566514484
Tetralux
It works.

1566514484
gonz_
Hmm, ok

1566514489
gonz_
But is it actually supposed to work atm?

1566514505
gonz_
I mean, am I just using it wrongly or is it plain not working at all atm?

1566514750
gonz_
I think I have my answer

1566514776
gonz_
it seems `formatFloatDecimal` & `formatFloatScientific` ignore all options except `precision`

1566514827
andrewrk
gonz_, I believe Tetralux is referring to working on a patch to zig fmt, not std.fmt

1566514841
gonz_
I was saying "Hmm, ok" to you

1566514851
gonz_
and the following was also directed at you

1566514863
gonz_
because yeah, people might be rewriting it, but was it even supposed to work before that

1566514865
gonz_
was the question

1566514871
gonz_
and "no" was the answer

1566514901
Tetralux
fmt tests passing.

1566514903
gonz_
it's not strictly a bug that alignment doesn't work for floats because it doesn't seem to ever have been written with that in mind

1566514906
andrewrk
I've only ever updated std.fmt when I personally needed it. I wasn't planning on stabilizing the interface until much closer to 1.0

1566514923
gonz_
Anyway, doesn't matter

1566514933
gonz_
I only needed it for some marginally nicer text output

1566515022
gonz_
In that PR he did add the whole options struct to the float formats

1566515185
gonz_
But it still doesn't seem to check for width in them :/

1566515357
gonz_
So, anyway.

1566515379
gonz_
Life got a whole lot easier when I realized I could actually just `@cInclude("windows.h")` and get everything for free

1566515408
gonz_
and now I've just copied over the generated `cimport.zig` file and removed the libdirs I had to add in the build file

1566515433
gonz_
And added some of the missing things that end up a bit wonky in the import

1566515465
gonz_
~66.9k lines of win32 goodness

1566515522
gonz_
Including hits such as "ERROR_SUCCESS_RESTART_REQUIRED"

1566515545
Tetralux
WOW

1566515622
gonz_
s/libdirs/includedirs

1566515659
Tetralux
andrewrk: Should I PR this?

1566515701
Tetralux
gonz_: I still don't know what "s/xxx/yyy" means... x'D

1566515711
gonz_
replace xxx with yyy

1566515718
gonz_
on the current line

1566515733
gonz_
(the first occurrence only)

1566515738
Tetralux
Ah.

1566515742
Tetralux
Interesting.

1566515745
Tetralux
Vim I assume.

1566515747
mikdusan
it's sed syntax. well almost. missing trailing '/'

1566515775
gonz_
It predates `vi` AFAIK, but was added to it

1566515816
gonz_
People used to use line-oriented editors back in the day like madmen

1566515822
mikdusan
real programmers use cat > a.out

1566515871
gonz_
This is probably the best wikipedia article, mostly because of the example

1566515871
gonz_


1566515871
fengb
Real programmers using a magnetic needle against a spinning platter

1566515922
gonz_
I think there was also a parody of this showing the typical user trying to get out of `ed`

1566515937
fengb
?

1566515951
fengb


1566515961
mikdusan
hahah exiting ed. i seem to recall an os with a default alias of 'e' to ed. royal pain.

1566515976
gonz_
fengb: Haha, yes, indeed

1566516406
Tetralux
andrewrk:

1566516484
mikdusan
"I'm okay with this." <-- :)

1566516514
Tetralux
;P

1566516567
Tetralux
He has worked on it already so he'll merge it with his work.

1566516576
Tetralux
So more "already done" xD

