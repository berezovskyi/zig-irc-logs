1557533295
gamester
andrewrk: since you're working on translate-c, what are your thoughts on this:

1557533497
gamester
tgschultz's solution is pretty clean, maybe that's something that translate c could do in the future

1557534494
daurnimator
andrewrk: also catching up on the stream... I notice that self hosted translate-c has the same allocator bug as the parser

1557534693
mikdusan
terminology: does 'freestanding' mean 'non-libc' / 'without-libc' ?

1557534770
daurnimator
mikdusan: no. it means no operating system

1557535531
mikdusan
are there targets or will there be targets that are freestanding and no-libc?

1557535584
daurnimator
yes

1557536931
tgschultz
andrewrk: ok, I've spent way too much time trying to work out how to make async<> happy with an allocator that isn't a pointer and I've decided it really really isn't worth it. So I guess round 2 of interface reform is also dead pending coroutine reform.

1557536987
tgschultz
I honestly didn't think it would be this complicated, but everything seems to be written with the implicit assumption that allocators are pointers.

1557537142
tgschultz
or maybe I'll just do it without bothering to switch over allocators

1557537148
tgschultz
since that's the pain point

1557537170
tgschultz
yeah, I think that's what I'll do

1557539591
karrick
Hello

1557539807
gamester
Hi!

1557539820
karrick
Hello

1557539907
karrick
I’m incredibly new to zig and just learned about it last weekend. Trying to soak up some knowledge. I am primarily a Go programmer now.

1557540004
daurnimator
karrick: welcome!

1557540176
karrick
Thanks

1557540394
karrick
Did not mean to scare anyone off

1557540580
gamester
huh? You did not :) By the way Zig has improved a lot very quickly and I think you'll enjoy it. Interfacing with C libs via @cImport can be rough but it keeps improving

1557540649
hoppetosse
I've managed to get most of the code shared between the webgl and glfw verisons of tetris. At the moment, it has separate entry points for each platform

1557540663
karrick
I have noticed how much it has changed in the past few years by reading some of the documentation and then just having finished watching the Tetris video.

1557540694
hoppetosse
I tried a couple of ways to share the main, but to no avail. Check it out, let me know if you have any ideas on how to make it one clean codebase

1557540698
hoppetosse


1557540772
karrick
What is that web asm? 😀

1557540904
karrick
Awesome

1557540905
hoppetosse
It's an executable for the web basically - allows compiled languages to be used in the browse

1557540907
hoppetosse
r

1557540919
hoppetosse
C has used emscripten for this for a while

1557540994
karrick
I did not know that Zig had the warm target but I’m not surprised since it sits on top of LLVM

1557541023
karrick
s/warm/wasm/

1557541048
karrick
I’m logged in via mobile phone so I have autocorrect coodies

1557541065
andrewrk
karrick, here's a full list of targets:

1557541167
karrick
I like the tiered breakdown

1557541240
daurnimator
andrewrk: got spare brain space for a design chat? or in the middle of something?

1557541292
karrick
I’m actually watching the compiler internals video from a few years ago.

1557541349
karrick
Kind feel like I need to watch each video in chronological order. But then I know the only way to really learn a new language is to grab a problem and wrestle with it.

1557541400
andrewrk
daurnimator, I'm about to go to bed, got up pretty early this morning. I'd recommend trying to catch me tomorrow

1557541426
daurnimator
karrick: got any areas of personal interest you'd like to work in?

1557541428
andrewrk
karrick, the ziglang.org homepage and then the official documentation is likely the fastest way to catch up

1557541430
daurnimator
andrewrk: k

1557541461
karrick
I spend a lot of time playing with concurrency primitives and standard library stuff in Go

1557541475
karrick


1557541482
daurnimator
karrick: I got started by reading through the 0.3.0 release notes; then the documentation page; then by reading the standard library; then by starting coding. this path isn't suitable for everyone...

1557541495
daurnimator
karrick: ooo, you might be interested in my next project then

1557541507
daurnimator
(which is what I wanted to talk to andrew about)

1557541512
karrick
Shoot

1557541526
daurnimator
karrick: I want to create a "command buffer" abstraction to be used for file and socket IO

1557541553
andrewrk
oh yeah release notes are good too. lots of content there

1557541558
karrick
Care to elaborate a use case?

1557541570
daurnimator
karrick: operations.queueWrite(fd, data); operations.queueRead(fd, buffer); operations.drain();

1557541598
daurnimator
karrick: essentially as a primitive that can be used for not only super high performance IO. but also something that regular file operations can live

1557541621
karrick
is `drain` the common idiom in Zig for flushing a buffer of sorts?

1557541637
daurnimator
karrick: no... it's what the linux kernel calls it in an open patch :P

1557541642
karrick
Lol

1557541681
karrick
I have not spent time in Linux kernel source but I do C from time to time...

1557541683
daurnimator
`myfile.write()` => internally, it could: `command_buffer.queueWrite(fd, data); command_buffer.drain()`

1557541703
karrick
Ok

1557541761
daurnimator
karrick: interested? :)

1557541810
karrick
Yes. I have several non blocking queue libs and ADTs in Go on my profile because this is very interesting to me

1557541825
daurnimator
karrick: okay.... some required reading:

1557541885
karrick
Got it

1557542038
karrick
That doc is just a few days old...

1557542078
daurnimator
karrick: yep. it finally got merged+released in the 5.1 kernel. which came out this week

1557542115
karrick
I assume you have same name on GitHub?

1557542120
daurnimator
yes.

1557542142
karrick
Congrats for getting it merged into 5.1

1557542153
daurnimator
not my work

1557542184
daurnimator
just have been following closely; and now that its in released kernels, it's time to actually use it!

1557542228
karrick
Ah. My misunderstanding. I was going Jeeping this weekend but that got cancelled. Looks like I have homework.

1557542256
daurnimator
IMO it will be*the* way to perform most file descriptor operations: in a couple of releases all the old syscalls can go and be deprecated ;)

1557542273
gamester
oh cool you're working on abstractions over io_uring? Nice!

1557542275
karrick
Wow. Seriously?

1557542277
gamester
I need that

1557542287
gamester
:)

1557542289
daurnimator
gamester: as soon as I finish this general purpose allocator

1557542289
karrick
And gamester returns

1557542300
karrick
:)

1557542369
daurnimator
karrick: not so serious on the syscall deprecation. nothing is deprecated kernel ABI-wise :P

1557542413
daurnimator
karrick: so what brought you over from Go?

1557542425
karrick
I understood your context that effectively it means that all syscall functionality could be replaced

1557542452
daurnimator
karrick: mostly only syscalls that operate on a file descriptor.

1557542494
karrick
Frustrations with decisions based on Go’s runtime architecture. I taught myself assembly on an 8088 years ago, and then learned C and thought, oh this is so much more easy.

1557542507
karrick
I still work in a high performance mindset

1557542563
karrick
I really liked how Zig embraced C, rather than making working with C a detriment to runtime performance.

1557542580
daurnimator
at the moment only read/write/fsync are supported by uring, 5.2 should bring support for sendmsg/recvmsg/sync_file_range; accept() and connect() might make it in too. ioctls soon after

1557542619
karrick
I have been doing small utilities at work in C when needed to skip the runtime overhead of Go. But it’s been a while since I’ve done anything major in C.

1557542703
karrick
Enough rambling from me. How long have you been working with Zig, daurnimator?

1557542727
gamester
The NVMe spec has the concept of a submission queue and completion queue so without io_uring things were pretty awkwardly mapped to the hardware

1557542765
daurnimator
karrick: since october. I got linked the 0.3.0 release notes and really loved what I saw

1557542808
karrick
Any concurrent Zig code I can take a peek at to prime the pump? I read what you say and think in terms of Go concurrency, which is working against me right now I think.

1557542833
tgschultz
zig's coroutines are due for a major reworking

1557542850
gamester
karrick: you're out of luck I think. As tgschultz says people have been waiting for coroutines

1557542856
andrewrk
karrick, for concurrency read this: (1)

1557542858
daurnimator
karrick: I saw similar things for Go and Rust as they were being developed and thought "this looks cool; will be great to use when mature" -> however Go and Rust grew away from what I wanted, and are now irreconcilably differnet to my aims. I decided to dive into zig early so that I could hopefully keep it on target for what I've wanted for years

1557542884
andrewrk
karrick, (2)

1557543023
gamester
karrick: there is of course std.os.spawnThread and atomics

1557543273
andrewrk
it's the beginning of the 0.5.0 release cycle and I've got step 1 underway

1557543296
andrewrk
I took a short break to enhance translate-c to hopefully get people to stop contributing to the C++ code and start contributing to the Zig code

1557543679
gamester
hmm vscode is really helping my flow. It turns out I like having the terminal in the same window. I recommend it.

1557543826
mikdusan
i tried using vscode a while back with older gpu. it was so aggrivatingly slow had to dump it. even had to make workarounds to get it to work minimally.

1557543831
daurnimator
gamester: I generally have my editor (sublime) and a terminal open side by side (using tiling window manager)

1557543865
mikdusan
one of my biggest issues was that when things stopped working with gpu, it didn't tell you. ignored errors. i guess they need zig `try` :)

1557544095
daurnimator
gamester: should I guess that you're interested in this command buffer work too?

1557544147
karrick
Thanks for the links to the concurrency story for Zig. Also adding to my reading list.

1557544204
daurnimator
goals (of mine): 1. add bindings to io_uring to zig's std/linux 2. create more general abstraction on top of it with handy methods 3. create alternate backing implementation that uses traditional read/write syscalls. 4. rewrite File on top of new abstraction

1557544253
karrick
Or I’ll just read the Coroutines status now

1557544265
andrewrk
daurnimator, related:

1557544292
daurnimator
karrick: coroutine status right now is "broken; don't bother looking; wait on andrewrk to fix"

1557544320
gamester
daurnimator: I'm definitely curious about what you're working on, and have a use for it, but I feel 0% qualified in helping with design. I'm just not experienced enough.

1557544328
andrewrk
that's a fair characterization. it's a pretty severe project blocker

1557544344
karrick
First of all that does not bother me that it’s broken. I just want to know the vision

1557544373
daurnimator
karrick: still a little in flux.

1557544376
karrick
I’m very interested in this aspect of programming. Go was not quite doing it right IMO

1557544511
karrick
I think Go has an amazing M:N scheduler. I know Zig does not have the runtime overhead of Go and hence this is not the same thing. I’m just curious how Zig is evolving.

1557544695
gamester
karrick: follow this

1557544697
karrick
What I mean is that I think co-routines are very useful, but I wished they were lighter weight, and I can only imagjne that the lack of a runtime is a requirement for having light-weight coroutines.

1557544738
karrick
Perfect issue to read. Thanks

1557544874
karrick
andrewrk, any regrets for writing a language?

1557544921
andrewrk
nope

1557544968
karrick
That’s awesome. I assumed they would include folks asking you to make Zig do what they wanted. I’m sure you get that a bunch.

1557544976
daurnimator
karrick: I think you'll find that question has some survivorship bios.

1557544978
daurnimator
*bias

1557544995
karrick
Lol that’s great autocorrect for you

1557545007
karrick
Or just your fingers are primed to say BIOS

1557545018
andrewrk
it's not easy to say "no" to so many ideas but I don't want zig to become c++

1557545039
andrewrk
everybody has that 1 feature from c++ that they actually like, and if everybody got theirs into zig, zig would be C++

1557545050
karrick
Yup

1557545109
karrick
How many active contributors are there mostly?

1557545126
karrick
Not necessarily the one offs but folks who keep working on parts

1557545211
andrewrk
have you seen the "pulse" feature of github?

1557545260
karrick
Nice and thank tou

1557545778
andrewrk
good night

1557545818
karrick
👋🏻

1557548575
tgschultz
` error: variables must be initialized` ...since when?

1557548644
tgschultz
oh, nevermind, I see what I did.

1557548657
tgschultz
`var self: PseudoSelf(undefined);`

1557557325
daurnimator
error: pointer to size 0 type has no address

1557557328
daurnimator
but why? :(

1557557478
shachaf
Probably for the reason C++ forbids size 0 types, which is to ensure that distinct objects have distinct addresses?

1557558151
emekankurumeh[m]
can you initialize a union at runtime, given the tag and the payload?

1557559223
emekankurumeh[m]
does endianness affect zig unions?

1557559237
daurnimator
shachaf: any ideas what I should be doing instead?

1557559906
shachaf
I don't know how zero-length arrays work in Zig.

1557559921
shachaf
Or what you're actually doing exactly.

1557560230
daurnimator
shachaf: a variable length struct. related to

1557560362
shachaf
I mean, I know what it is in C (though "VLA" is something else), but not how Zig handles it.

1557560383
shachaf
You can presumably use the suggestion at that link with a dummy 1-octet member at the end?

1557561426
daurnimator
shachaf: nope. order of members in non-extern structs is not defined in zig

1557561516
shachaf
Oh, I see that in a lower comment now.

1557562016
daurnimator
hrm. turns out this may be the same (or related) to #2431

1557562072
daurnimator
added comment there

1557603509
shollrollah951
Hi, I have been following zig for a while, and now I made a sudoku solver in zig:

1557603562
shollrollah951
Hope to get some comments on it.

