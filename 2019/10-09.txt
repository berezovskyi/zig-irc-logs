1570580996
THFKA4
sounds good, thanks

1570582351
THFKA4
opened 3412

1570582510
THFKA4
will try to do it, but no promises. don't think it's urgent either way.

1570592542
gruebite
yo

1570592833
andrewrk
hi gruebite

1570596996
gruebite
man, i was here a while ago. i'm glad to see zig progressing

1570610477
mq32
hey

1570610483
mq32
is there a way to check if a file exists?

1570610563
mq32
(except for "open the file for reading, then close it again")

1570613297
lunamn_
mq32: std.fs.File.access?

1570613312
mq32
lunamn_, yeah i found that as well, but it's a bit clunky to use

1570613341
mq32
var exists = blk: { std.fs.File.access(x) catch break :blk false; break :blk true; };

1570613345
mq32
is my current approach

1570613401
lunamn_
sounds about right, handling wise

1570614218
mq32
hey, anyone here experienced with raw socket programming in windows? i'm having some weird behaviour here…

1570616821
telemach
What's the common technique in Zig for situations where I would do a closure in other languages?

1570620677
mq32
telemach, it depends on what you use the closure for

1570620698
mq32
if you only pass the closure "down" the callstack, just use a function pointer + context-variable

1570621298
mikdusan
mq32: here's one without the block -> `var exists = if (std.fs.File.access("/etc/passwd")) |_| true else |_| false;`

1570621330
mikdusan
and on a related note this works but i'm not sure if it's a syntactic bug: `var exists = if (std.fs.File.access("/etc/passwd")) true else |_| false;`

1570621370
mq32
hmm

1570621375
mq32
i tried something pretty similar

1570621378
mq32
maybe i messed it up :D

1570621481
mikdusan
well the docs say "The else and |err| capture is strictly required" so i think the former is correct:

1570621490
mikdusan
*latter

1570621497
mikdusan
`var exists = if (std.fs.File.access("/etc/passwd")) true else |_| false;`

1570621505
mq32
yeah, i tried to use it with if(call) { … } else |err| { }

1570621511
mq32
i think ^^

1570621526
mq32
but gonna try it later with your if-else-solution

1570621569
mikdusan
yeah as soon as braces are used the expression-as-result is no longer available

1570621824
mq32
yeah but the code i want to do is just

1570621831
mq32
if(exists(path)) { stuff(); }

1570621970
mikdusan
then `if (std.fs.File.access("/etc/passwd") { stuff(); } else |_| {}`

1570621982
mikdusan
forgot a paren there.

1570622048
mq32
yeah that should work

1570622058
mq32
i can't try it right now, still at work :D

1570625839
daurnimator
mq32: checking if a file exists is almost always wrong

1570625849
daurnimator
mq32: what are you going to do with it if it

1570625871
daurnimator
and what are you going to do if it doesn't?

1570626064
mq32
i load 3d models (foo.obj) and if a (foo.ppm) exists, i'm going to load that file

1570626086
mq32
if not, i'm just not even trying to load the file, because it will fail anyways

1570626624
mq32
and daurnimator, i knew that question would emerge :D

1570626818
fengb
You can just try loading the file. Checking existence adds a superfluous slow step that may be a race condition — e.g. if the file was deleted after the existence check

1570627006
mq32
yeah

1570627034
mq32
but i don't like the semantic of "hey, let's load that image file, but it failed with 'file does not exist'" so that's totally okay

1570627068
daurnimator
you should just open both files, and then process them

1570627150
mq32
and what if the one does not exist ;)

1570627160
mq32
it's a legal state that only one of the two files exist

1570627163
daurnimator
then don't continue with the 2nd?

1570627180
mq32
the semantics i want to do is:

1570627183
mq32
load_file_a();

1570627190
mq32
if(file_b_exists()) load_file_b();

1570627226
fengb
But if b gets deleted after your check, that logic fails anyway

1570627242
fengb
And if you properly check it, then it’s redundant

1570627281
mq32
<fengb> But if b gets deleted after your check, that logic fails anyway

1570627298
mq32
this is something i don't consider in this usecase

1570627308
mq32
it's not some "dynamic" data or something but static

1570627320
mq32
and the whole program will be broken if one of those files is deleted

1570627336
mq32
but yeah, the double check is probably redundant

1570627350
fengb
File systems are concurrent unless you guarantee the OS can’t run anything?

1570627361
mq32
yeah, true

1570627379
mq32
but: who does: "./program &; rm *"

1570627438
fengb
I’ve accidentally removed my user directory while running programs before... I got bigger things to worry about but at least my Zig program won’t crash :P

1570627476
daurnimator
I more often run into permissions issues

1570627489
daurnimator
e.g. the file exists, and is writable, but not by the correct user/program

1570627493
daurnimator
or something like that

1570627510
daurnimator
its better to just

1570627514
daurnimator
cause it could error anyway...

1570627622
fengb
Tangential aside: what would the OS do if the physical device is unreadable?

1570627624
daurnimator
There are very few legitimate reasons to use access(); one example is checking to see if a file is in cache or already built.

1570627649
mq32
hm

1570627665
daurnimator
fengb: depends how unreadable. sometimes EIO. sometimes kill process. sometimes kill whole kernel.

1570627726
daurnimator
also depends on how you were reading. e.g. read() can return EIO but reading from an mmap()d file can't

1570627789
mq32
it's really time to have to autogen docs

1570627808
mq32
will be much easier to find out what errors can actually happen

1570627828
mq32
does File.open() distinct between "does not exist", "is a directory" and "permission errors"?

1570627878
daurnimator
mq32: I would expect it propagates an errno-mapped value

1570627893
daurnimator
i.e. yes. but I haven't checked.

1570627903
fengb
Autogen errorsets is so amazing. Probably my biggest problem with Go just magically solved

1570627937
mq32
hm, yeah. i could check that

1570628012
mq32
but for now it's okay, is just a temporary solution anyways :D

1570628028
fengb
Andrew’s latest tweet shows inferred errorsets

1570628065
mq32
yeah, it's awesome :)

1570630769
kenaryn
Hello, do you know whether there are design patterns interesting to apply in Zig or is the language too immature and versatile at the moment to adopt one?

1570631871
andrewrk
mq32, whether a file exists is not a simple boolean

1570632232
mq32
andrewrk, can you elaborate that?

1570632427
andrewrk
there are a few ways it can fail, such as running out of file descriptors. then you don't know whether the file exists or not

1570632510
andrewrk
for example, say a user has a file called "config.ini" and inside it says `no_delete_home_folder=true` but the default is to delete home folder. now your program wants to check if there are any configuration settings. you access config.ini and get ENFILE, and incorrectly conclude the file does not exist, and wipe the home directory

1570632534
andrewrk
generally, you should directly try to open the file and then handle failure, rather than checking whether it exists

1570632559
mq32
yeah it's just weird that "having an error" is a expected thing

1570632566
mq32
because it will be the default then

1570632580
andrewrk
what will be the default?

1570632594
mq32
error.FileNotFound would be my default case then

1570632604
mq32
because having the file is optional

1570632622
mq32
it's just unusual for me to have an error case as the default :D

1570632652
andrewrk
ah I see. but from the perspective of how you're interacting with the operating system, this is perfect. you want exactly that syscall, and you want to handle the file not found response

1570632679
mq32
yeah

1570635008
FireFox317
andrewrk: regarding #3410, do you also want the parameter name of a type inside the docs? Ex: std.mem.compare: `fn compare(T: type, var, var) var`

1570635565
andrewrk
FireFox317, I'm not sure I understand the question

1570635583
andrewrk
btw if you're looking for a more straightforward issue, this one is good:

1570637615
Snektron
The docs work is looking good

1570637797
andrewrk
thanks :)

1570637862
Snektron
One thing i always miss in langauge documentation tools is the ability to navigate to a page without looking it up

1570637905
Snektron
for example zigdocs.ext/std/os/File.html would be useful

1570637920
THFKA4
member VS + MSDN?

1570637951
THFKA4
you could click class names and go straight to docs, done decades ago

1570637995
Snektron
but that's something different right, that is on the site self and is just about adding cross references

1570638034
andrewrk
Snektron, key strokes to get to fs.File docs: `sFile<enter>`

1570638052
andrewrk
I'm not sure I understand what you're suggesting

1570638159
Snektron
I see how the url's are generated now, and the actual path of the item is encoded in the url

1570638174
Snektron
What i mean is with for example Doxygen, url's are just random gibberish

1570638180
Snektron
and it makes it really hard to find stuff

1570638211
FireFox317
andrewrk: see the images in this gist:

1570638270
andrewrk
FireFox317, the T is useful, there could be multiple type params

1570638279
dingenskirchen
I'm running into some errors while trying to build master branch. make runs without complaint until the "Linking CXX executable zig0" stage, at which point ld errors out with a bunch of missing references to names under clang::, even though I did install the relevant clang-devel package. All version requirements mentioned in README match.

1570638336
andrewrk
dingenskirchen, can you double check that your cmake command succeeded?

1570638430
dingenskirchen
ah, thanks. It says "Could NOT find CLANG (missing: CLANG_LIBRARIES)". Guess that explains how make didn't find them either

1570638519
FireFox317
andrewrk: Okay, but we probably also want the parameter names of the generic parameters right? I.e: `fn compare(T: type, lhs: var, rhs: var)`

1570638528
andrewrk
FireFox317, yes

1570638537
andrewrk
the names are even more useful in this case

1570638660
dingenskirchen
where does cmake expect the files to be? the package I have places them under /usr/include/clang and /clang-c.

1570638900
andrewrk
dingenskirchen, did you try this?

1570638966
andrewrk
I see that you're using a package. what OS/distribution is that?

1570639044
andrewrk
the cmake build script uses llvm-config to find clang. that appears to not be working on your system for some reason

1570639173
dingenskirchen
I'm on openSUSE Tumbleweed. Currently using the packages from

1570639396
n_1-c_k
I might have trouble similar to dingenskirchen's, in that I have an llvm-config-9 but not an llvm-config.  This is debian unstable.  My build fails with "undefined reference to symbol 'exp2f@@GLIBC_2.27'".

1570639448
andrewrk
your options are: (1) fix your system package so that llvm-config works (2) build llvm/clang 9 from source (3) (if applicable) improve zig's cmakelists.txt to support this system

1570639467
andrewrk
n_1-c_k, zig looks for llvm-config-9 before llvm-config

1570639527
n_1-c_k
andrewrk, oh, my hope flickers!  I'll paste my build failure...

1570639540
n_1-c_k


1570639719
andrewrk
n_1-c_k, this looks like your system failing to put -lm on the command line for linking libc. seems to be a debian issue

1570639755
n_1-c_k
andrewrk, thanks

1570642555
andrewrk
FireFox317, I'm going to make an adjustment to struct field printing, to have it do a more "verbose" style for fields, and print all the doc comments rather than just the first line

1570642611
andrewrk
stratact, I haven't forgotten about you

1570642615
FireFox317
Ah jup indeed, markdown instead of shortDescMarkdown

1570643409
andrewrk
FireFox317, these docs are starting to look pretty good, eh?

1570643477
FireFox317
Yeah for sure! A lot of progress is being made. I almost finished #3410

1570643484
andrewrk
one thing I haven't figured out how to do: when you are scrolled down, then click a link, and then use the browser's back button, everything works

1570643552
FireFox317
Ah jup haha, that is a funny one

1570643573
andrewrk
I think it's actually the browser's fault

1570643589
andrewrk
it should be activating the previous scroll position

1570644081
FireFox317
andrewrk: How much effort should I put into trying to get the parameter names of var args functions?

1570644235
FireFox317
I'm currently at the point where it renders all the function parameter names, including paramter names for `var` types.

1570644518
andrewrk
FireFox317, the names of parameters should be attached to the astNode objects

1570644528
andrewrk
because they will be the same for all generic instantiations

1570644544
andrewrk
similar to how doc commects are emitted in the dump

1570644559
andrewrk
this will make the names available for generic functions as well as the instantiations

1570644760
FireFox317
Hmm yes, that makes sense. Currently I implemented it by adding the name to the "args" object in the types array, but I will try to do what you suggested

1570644924
FireFox317
Then maybe the name of struct field should also come from the astNode objects?

1570645003
andrewrk
yes, for the same reason

1570645013
andrewrk
I'll do instantiated generic functions soon

1570645049
FireFox317
Okay, I will try to change that

1570645104
dingenskirchen
so, I've identified the first problem: my package, for some reason, consolidates all clang9 .so's into a single file, so Findclang.cmake couldn't pick the individual ones up. Circumvented that by pointing the file at libclang-cpp.so instead.

1570645140
andrewrk
FireFox317, struct types should include a "src" for the decl_node, which can be used to find field names, and field src nodes. but the "type" of struct fields still needs to be given as part of the type, because this can be different

1570645172
dingenskirchen
as "first problem" indicates, there's more where this came from: while zig0 links successfully now, I'm hitting a snag when it tries to build libuserland: "CommandLine Error: Option 'mc-relax-all' registered more than once!"

1570645172
dingenskirchen
This is apparently related to having more than one libLLVM linked to your file (

1570645196
FireFox317
Yes indeed, thanks for the clarification

1570645305
mikdusan
dingenskirchen: there is a WIP for handling the 3 major flavors of llvm library builds:

1570645307
mikdusan


1570645463
dingenskirchen
>If CLANG_LINK_CLANG_DYLIB (available since clang 9) is ON, libclang-cpp.so instead of libclang*.so will be linked. It currently does not work because zig_cpp/libembedded_lld_lib.a has global constructors that conflict with libclang-cpp.so

1570645463
dingenskirchen
Seems as if I need to build from source then since it's built as one .so for me

1570645471
dingenskirchen
Thank you for the link!

1570645507
andrewrk
dingenskirchen, zig's cmake script should be improved to support libclang-cpp.so, if there is a reliable way to detect it

1570647102
mps
is there vim syntax plugin for zig somewhere

1570647138
andrewrk
mps,

1570647219
mps
andrewrk: thanks, I should look one dir up, sorry for asking such obvious thing

1570647261
andrewrk
no worries :)

1570650750
mq32
hey

1570650765
mq32
is there a way to get the "current zig build from CI" without having to parse

1570650789
fengb


1570650805
mq32
thanks <3

1570650813
mq32
now i can hack myself a "zig-update" script :)

1570650848
andrewrk
FireFox317, how's it going over there? I want to make sure I'm not clobbering you

1570650891
FireFox317
andrewrk: I will show you my progress in a PR, one moment.

1570650900
FireFox317
Just want to add one more thing quickly

1570650968
andrewrk
FireFox317, I'm thinking we display the functions in the functions section as normal syntax, you know, like `fn foo(arg: type) type`, but still in table format with short desc to the right

1570650984
andrewrk
this will simplify some of the js logic and probably look better anyway

1570651116
FireFox317
Yes indeed, the same as how it is rendered on the page that you will go to when you click on the function name

1570651433
FireFox317
andrewrk:

1570651615
andrewrk
FireFox317, thanks, I'll try not to step on your toes - let me know when it's ready for merge

1570653200
FireFox317
andrewrk: regarding my PR, it means that I can get rid of the AstNode *decl_ref in FnTypeParamInfo, right?

1570653264
andrewrk
FireFox317, yes

1570653283
andrewrk
if you have to change anything in that header type, it's a smell

1570653289
andrewrk
not necessarily wrong, but worth double checking

1570653302
andrewrk
*in that header file. specifically for the purposes of doc generation

1570653337
FireFox317
Jup, sounds logical :)

1570653464
stratact
andrewrk: I appreciate it. I'm just doing other hobbies atm.

1570654552
FireFox317
andrewrk: I don't get it. Is it about the struct fields or the parameter names?

1570654625
andrewrk
FireFox317, both struct fields and parameter names need to be solved the same way: via ast nodes

1570655159
FireFox317
Hmm, I thought I am doing that right now. Because I only store the "src" as a index in the astNodes array

1570655209
nrdmn
Why would I use (*const [1]u8)(&x)[0..]) instead of ([_]u8{x})[0..]?

1570655538
andrewrk
FireFox317, anal_dump_struct_field is called from every type instance, causing the src field to be emitted N times. instead this src field should be part of the ast node for containers, causing it to be emitted 1 time

1570655588
andrewrk
nrdmn, the latter is creating a new storage location, the former is referencing an existing storage location

1570655608
andrewrk
where is the [_]u8{x} array stored? it depends on context

1570655638
andrewrk
FireFox317, consider the ArrayList items field

1570655657
andrewrk
if you have ArrayList(i32) and ArrayList(u64), there is only 1 ast node they share for the field

1570655670
andrewrk
having both of them refer to it is redundant data

1570655709
nrdmn
andrewrk: What's a "storage location" in this context? I assumed the compiler would compile both variants into the same instructions

1570655797
andrewrk
nrdmn, array literals have to live somewhere in memory. the former construct does not have an array literal

1570655801
FireFox317
andrewrk: Okay, yes. I think I get it now

1570655842
nrdmn
hmm.. okay, thanks

1570655883
andrewrk
FireFox317, the struct type -> decl_node -> [field_node].  field_node -> {name, docs}

1570655935
andrewrk
it's equivalent for parameter names

1570655942
andrewrk
and parameter doc comments

1570655955
FireFox317
And the former is what I'm doing now, and the latter is how it should be right?

1570655983
FireFox317
No, nvm

1570655989
andrewrk
this thing is all one concept: " struct type -> decl_node -> [field_node].  field_node -> {name, docs}"

1570656010
andrewrk
this would be a lot easier with whiteboard markers

1570656045
FireFox317
Hahah, jup indeed

1570656862
FireFox317
andrewrk: So how do I then get this AstNodeContainerDecl to go into the astnodes list? Because currently it is not in there..

1570657083
andrewrk
FireFox317, in anal_dump_type() for ZigTypeIdStruct, you need to add jw_object_field(jw, "src"); with     AstNode *decl_node; from the struct ZigTypeStruct

1570657098
andrewrk
this will cause the node to be referenced, causing it to go into the astNodes list

1570657128
andrewrk
so instead of each field pointing to each field node, only the struct itself points to the struct decl node

1570657148
andrewrk
and then the struct ast node can list its field ast nodes

1570657155
andrewrk
make sense?

1570657200
andrewrk
you'll need to add that in anal_dump_node, look for NodeTypeContainerDecl and list the field nodes

1570657249
FireFox317
Thanks for the help man, appreciate it! I'm learning a lot. I'm pretty sure I understand it now xD

1570657291
andrewrk
no problem, it's easy to help when I can see your WIP code

1570658812
FireFox317
So the struct ast node gets an array called "fields" with field_node objects in there. Like this?: "fields" : [ { "name" : "name", "docs": "some docs"}, {....} ] Or: "fields" : [<index_into_astnodes_pointing_to_a_field_ast_node>, ...]

1570658838
andrewrk
FireFox317, the latter

1570659589
FireFox317
But that means that I have to call anal_dump_node_ref from within anal_dump_node, and that causes problems because anal_dump_node_ref can change the size of the astnodes list right?

1570659746
FireFox317
Wait, i just have to be sure that I first add the fields to the astNodes list and then the struct ast node

1570660090
andrewrk
FireFox317, it's no problem, the list can grow while iterating over it

1570660100
andrewrk
I don't think you need to do anything special

1570660704
FireFox317
Hmm, I think that jw_int isn't working in anal_dump_node

1570660745
FireFox317
This assert is failing:

1570660745
FireFox317
assert(jw->state[jw->state_index] == JsonWriterStateValue);

1570660773
andrewrk
FireFox317, have a look at the stack trace, you probably forgot jw_array_elem or jw_object_field

1570660805
mps
andrewrk: we have zig in alpine

1570660823
andrewrk
nice work mps

1570660839
andrewrk
mps, this makes me want to solve

1570660845
mps
thanks, but you helped me a lot

1570660867
andrewrk
the alpine package might actually be OK if it is dynamically linking musl

1570660878
mps
and daurnimator which PKGBUILD I looked

1570660930
mps
well, it is in testing for now, and patches are welcome

1570660996
FireFox317
andrewrk, THANKS! Damn, I forgot the jw_array_elem and was stuck on that for half an our :(

1570661002
FireFox317
hour*

1570661098
andrewrk
FireFox317, this is an instance where the stack traces actually point exactly to the problem :)

1570661114
andrewrk
for semantic analysis it can be a lot more complicated

1570661468
FireFox317
Okay, I'm gonna call it a day. Thanks for the help andrew! It turned out a bit harder than expected, but I think I can finish it tomorrow :)

