1574035365
adamkowalski
This is how I approached the test case

1574036352
Snektron
cota: Did you forget extern or something like that? And why do you import a header file in your zig library? (or did you mean exported?)

1574036483
Snektron
adamkowalski: i'd declare n and p before their respective while loops

1574036580
Snektron
Did anyone already propose something like newtype? i was just programming c++ and i thought that would be a nice addition

1574036592
Snektron
basically a stronger version of @OpaqueType()

1574036618
Snektron
in fact, that would be equivalent to @NewType(void)

1574036681
cota
Snektron: the library is a "plugin" that is dlopen'ed from the C binary.

1574036737
Snektron
oh, i think i see what you mean

1574036768
cota
that's why the types are opaque

1574036810
cota
for now I just defined a foo.h where I define struct opaque { int unused; }, but that is dodgy

1574036843
Snektron
you can do it in zig with the builtin @OpaqueType i think

1574036991
Snektron
cota: When exactly does this happen? I jsut made a simple test program which seems to work

1574037024
dbandstra
adamkowalski: there is `std.meta.eql` which is a userspace implementation of deep equality check

1574037042
cota
Snektron: can you please provide a paste to your test program?

1574037087
Snektron


1574037123
dbandstra
adamkowalski: also you should use `std.testing.expect` instead of `std.debug.assert`. there's also a `std.testing.expectEqual` but it currently only supports one-level-deep arrays

1574037126
daurnimator
huzzah; merging

1574037146
daurnimator
dbandstra: oh it doesn't support multi level arrays? that should be easily fixed

1574037395
dbandstra
true, although you could get carried away if you try to make it give nice failure messages

1574038055
daurnimator
that's fine; "uninformative error messages" is better than "doesn't work"

1574038687
traviss
adamkowalski does

1574038694
cota
Snektron: thx for the example. I've modified it a bit:

1574038831
traviss
and you should be able to find a test executable to debug in zig-cache/o/*/test

1574038862
traviss
`ls zig-cache/o/*/test`

1574039904
daurnimator
andrewrk: around?

1574040267
fengb
Is there a way to convince LLVM to partially unroll a loop?

1574040322
adamkowalski
dbandstra: thanks I changed my implementation to use expectEqual!

1574040353
adamkowalski
Snektron: I changed my variables to be created by the while loop

1574040363
fengb
I miss duff's device ðŸ™ƒ

1574040384
adamkowalski
so with std.meta.eql, std.mem.eql, and == I feel like we're trying to work around not having traits or overloading

1574040402
adamkowalski
whats the reasoning behind not doing something akin to those?

1574040415
adamkowalski
then we could extend our own types with equality comparisons

1574040432
adamkowalski
because otherwise I will need to implement yet another equality check for nd arrays right?

1574040439
daurnimator
no?

1574040466
adamkowalski
right now i'm doing a while loop and checking equality for each row of the inner array

1574040471
karrick
IIRC overloading is one of the major things the language does not support, because it adds uncertainty to what a particular block of code will do, based on the structureâ€™s overloaded methods.

1574040489
adamkowalski
Which I get, but whats the proposed alternative I guess

1574040499
adamkowalski
Since we have "methods"

1574040499
karrick
Yeah I donâ€™t know yet

1574040519
adamkowalski
you can add functions inside structs and get some syntax sugar

1574040532
daurnimator
adamkowalski: how are you defining your nds? arrays of arrays?

1574040533
adamkowalski
then you can take any generic type as long as you can call .eql on it or something

1574040536
karrick
In other languages without overloading I typically define the functionality as a method or two.

1574040552
adamkowalski
but I don't get how thats different to overloading

1574040561
adamkowalski
just whether you want to call f(x) or x.f()

1574040570
adamkowalski
either way it's polymorphic and depends on the type

1574040580
karrick
Overloading is exactly that but where that method is bound to a different token used for something else for a different structure. Especially when that token is a reserved token.

1574040612
adamkowalski
well overloading also allows you to extend types you don't own with new behavior

1574040626
adamkowalski
same with traits/protocols/concepts/etc

1574040633
karrick
I have not ever wished I had overloading. I used it in college for C++, and have not needed it again

1574040659
daurnimator
actually I'm not sure why meta.eql is not the same as the == operator

1574040692
adamkowalski
karrick it is incredibly useful when writing generic code

1574040699
karrick
Interesting comment about extending structures from outside the current namespace.

1574040708
adamkowalski
you don't necesarrily care what type gets passed in

1574040716
adamkowalski
instead you care about the interface it conforms to

1574040732
adamkowalski
it allows in my opinion for a much higher level of abstraction

1574040736
karrick
I do like that adamkowalski

1574040753
karrick
I use extensively in Go

1574040756
adamkowalski
we already do that in zig for +, -, /, *

1574040765
adamkowalski
it is defined for floats, ints, and mixtures of the two

1574040767
adamkowalski
but it's a closed set

1574040775
adamkowalski
meaning you cannot extend it's usage to new types

1574040784
adamkowalski
so we end up creating functions called add, mul, whatever

1574040786
karrick
Kind of, say for int addition and floating point addition?

1574040800
adamkowalski
now you need to memorize multiple different names for the same concept

1574040802
karrick
Sorry Iâ€™m typing on cell phone and sliw

1574040818
karrick
While I type my response you also type the same thing

1574040834
karrick
ðŸ˜œ

1574040835
adamkowalski
if you want to see this concept in action I recomend looking at iterators in C++ and the whole standard template library

1574040853
adamkowalski
it means you can use linked lists, vectors, arrays, maps, sets, etc, all in a common interface

1574040874
adamkowalski
you can simply replace the input and see how it changes the performance characteristics of your application

1574040945
daurnimator
except in C++ no bit orgs use the standard template library

1574040949
daurnimator
s/bit/big/

1574041068
adamkowalski
thats not true at all. i've noticed a lot of c programmers hate it, but i've never heard the rational for why

1574041211
daurnimator
adamkowalski: I'm more referring to how most corps end up creating their own "standard library" for C++ as the STL is deficient in some way, e.g. EASTL

1574041611
traviss
adamkowalski, maybe related to some of you ideas are std.meta.trait.hasField / hasFn

1574041828
traviss
i haven't used traits in zig before. this might be more informative than the docs:

1574041916
fengb
Zig doesnâ€™t have runtime interfaces/traits/protocols yet

1574041936
karrick
I just went through Andrewâ€™s most recent live coding and followed along. Really great. But the std lib has already changed since he did it. So I actually went through std source code, rectified the example against the new std lib code, and got it working. I now feel like I am starting to understand how to make non trivial software.

1574041978
fengb
The existing trait infrastructure is effectively comptime duck typing

1574043550
adamkowalski
daurnimator: people may end up making their own stls but the fundamental idea is the same. we want a set of abstractions that can work across a class of types.

1574043590
adamkowalski
fengb: yeah thats how templates worked for a long time. C++ 20 introduced concepts which is something we could steal ideas from. It allows you to constrain generic types to only those which meet some interface

1574043638
adamkowalski
But unlike traits/protocols/etc concepts allow you to operate on many types at the same time

1574043664
adamkowalski
so you can say that my function accepts ANY two arguments as long as addition is defined between them. That means you can take a matrix on the left and a scalar on the right

1574043697
adamkowalski
overloading also pairs really nicely with concepts, because you can define a function such as std::transform which can operate on iterators

1574043711
adamkowalski
but if you only support .next() like zig then you must do a forward traversal

1574043715
cota
What is the right type to use when importing a 'char' from C? u8?

1574043730
adamkowalski
if your iterator also supports random access, you can opearte in parallel across the entire data structure

1574043736
cota
(I tried with c_char: error: use of undeclared identifier 'c_char'

1574043789
adamkowalski
what happens when you try u8?

1574043808
cota
It compiles

1574043845
cota
so c_char is just a remnant of the past? Then we should remove it from doc/docgen.zig

1574043860
adamkowalski
u8 should be int8_t

1574043866
adamkowalski
so thats effectively char

1574044097
cota
It's a little tricky though, see

1574045059
fengb
c_anything is strictly for C. Itâ€™s ambiguous in Zig land (can be either u8 or i8) so translate-c wonâ€™t narrow it down

1574046080
daurnimator
I'm suprised there's not a c_char

1574046089
daurnimator
in C, sometimes char is signed; sometimes unsigned

1574048171
daurnimator
are stack traces meant to work on windows?

1574049277
pixelherodev
I think so?

1574053520
gruebite
hmmm `pointer type child '.cimport:2:12.struct_godot_gdnative_core_api_struct' cannot cast into pointer type child '.cimport:1:11.struct_godot_gdnative_core_api_struct'`

1574053980
daurnimator
pixelherodev: I've never had them work => I just get error.FileNotFound

1574053990
daurnimator
I've copied across the .pdb file as well

1574054406
gruebite
can I import more than one header at a time?

1574054417
gruebite
into the same variable and have all the resolutions.

1574054437
gruebite
I have opaque struct that is declared in one header, but defined in another generated one.

1574054460
gruebite
so all the prototypes have incompatible struct definitions

1574055135
gruebite
easy way to call an optional function?

1574055146
gruebite
expected function, found '?extern fn([*c].cimport:1:11.godot_variant, i64) void'

1574055823
gruebite
nvm on all that, just using if || {} syntax

1574055860
gruebite
daurnimator: got it all working, thanks. i can communicate with zig from godot now. rest is just filling in abstracting over it

1574056293
cota
any tips for using @cInclude and @OpaqueType? i.e. when the .h file to be included declares some opaque types. I've worked around this by either (1) adding a dummy .h file that is @cInclude'd first or (2) using @OpaqueType and redeclaring (in Zig) the functions that use the opaque type (this is bad because it defeats the purpose of using @cInclude)

1574056330
cota
(I started looking at Zig today so it's likely I'm missing something.)

1574056551
gruebite
i had the same issue and just ended up making a separate h. if there is a better way i have not found it

1574057131
gruebite
getting this now though "variable of type '.cimport:1' not allowed zig"

1574057138
gruebite
where cimport is some C struct

1574057151
gruebite
it's defined and not opaque

1574057242
cota
this is with the additional header? I'm confused

1574057281
gruebite
no additional header, likey separate issue :P

1574057295
cota
oh I see =)

1574057376
cota
I might file a bug tomorrow for the @cInclude/@OpaqueType thing -- meanwhile I'll use the separate .h file

1574057397
cota
thanks for your help! at least I see that I'm not the only one who noticed it

1574057921
daurnimator
gruebite: great.

1574057932
daurnimator
gruebite: you might have to provide a snippet for us to debug that one :P

1574057952
daurnimator
gruebite: yes you can include multiple headers in a single @cImport block.

1574058315
gruebite
how? i tried commas :D

1574060019
gruebite
oh man: error: enum tag value 3 already taken

1574060035
gruebite
this one will be tough. zig does not support enums pointing to the same value? D:

1574060041
gruebite
with the same value?

1574060053
gruebite
i would have to modify the enum

1574060578
adamkowalski
How do I print a unicode character which was stored in a u16 with std.debug.warn?

1574060634
adamkowalski
I'm building a unicode plotting library and I want to use the braille alphabet

1574060649
adamkowalski
I need to bitwise or two unicode characters together and print the output

1574060665
adamkowalski
This is the look i'm going for

1574061129
nomadgamma
I noticed Zig has Tier 4 support for nvptx and renderscript, are there any other ways to target GPGPU?

1574061225
nomadgamma
I guess the other option would be to keep the kernels in C, and use Zig to interface with libCL etc.

1574061272
scientes
nomadgamma, I was at LLVM Dev Mtg and AMD uses LLVM internally for everything

1574061278
scientes
so if there is a way, you can figure it out

1574061292
scientes
and patches to make it work with zig are welcome

1574061330
scientes
it is just that nobody with expertise in that has worked on it yet

1574061388
nomadgamma
ah, I think I will go the easy route for now and stick with C and OpenCL for that stuff

1574062039
adamkowalski
Is this the recommended way to turn a unicode character to utf8 that can be printed by std.debug.warn?

1574062043
adamkowalski
const result = try std.unicode.utf16leToUtf8Alloc(allocator, [1]u16{i});

1574065490
nomadgamma
so, related question about Zig, I am writing code which can be executed symbolically (emits opcodes for later analysis) or evaluated at runtime, with the idea being that I can write the algorithm(s) once and execute natively with zero overhead or output opcodes for processing & analysis by a second stage, with C++ and Python I can use operator overloading to have near zero boilerplate (although C++ templates are getting

1574065490
nomadgamma
tedious in some cases, hence looking for different ways)... looking at Zig's compile time evaluation looks like I could do this but it would still need a lot of boilerplate - any suggestions?

1574066108
mq32
nomadgamma, so you want to have both "record what my code does" and "execute the code" with switchable behaviour?

1574066210
nomadgamma
yea essentially

1574066427
nomadgamma
there is only really 1 underlying type (some field), but many wrappers around it, in symbolic mode you get all the variables in SSA form and a trace of the operations performed

1574066457
mq32
hmm

1574066467
mq32
so more a kind of metaprogramming

1574066530
mq32
you can probably do something like this with zig comptime, but you don't have the luxury of operator overloading

1574067653
ikan-keli_
are we having this on Zig in the future?

1574073086
mq32
ikan-keli_: we already have a scheduler/event loop today :)

1574073169
scientes
a real scheduler is too much however, we have linux for that

1574073182
scientes
it should never be preemptable

1574073221
scientes
I guess go has preemption between function calls

1574073235
scientes
so maybe explicit preemption points

1574073307
hooo
is the Zig webassembly stuff working now, in a sort of production ready state?

1574073307
mq32
scientes: there could be something like "await std.event.scheduleStuff();"

1574073365
scientes
hooo, we are based on llvm, like everyone else, so I would say as much as anyone else's stuff is production-ready, and also zig is not stable as a language yet

1574073387
scientes
mq32, sched_yield()

1574074007
mq32
or even just "yield()": await std.event.EventLoop.yield();

1574074070
scientes
i was referencing the linux syscall

1574074074
scientes
which is sched_yield()

1574074121
mq32
ah

1574074158
mq32
afaik tokio.rs is similar to our std.event.EventLoop

1574076103
ikan-keli_
thanks mq32, scientes

1574077024
daurnimator
mq32: isn't ours closer to the original one (mentioned in the article) under "The Tokio 0.1 scheduler"

1574079518
mq32
good question

1574079557
mq32
haven't used tokio much, it did just bloat my code

1574079650
daurnimator
My first reaction is how much better these approaches are compared to what I consider the "dumb simple" way of your tasks having intrusive linked list member(s) and having your scheduler just go through them....

1574080635
mq32
oh, on the topic of bloat: does zig clean up the cache at some time?=

1574080640
mq32
or does it grow infinitly?

1574080825
daurnimator
I'm not sure. But I'm very glad its in ~/.cache now....I had to delete most of my backups because they were full of zig-cache

1574080838
daurnimator
(I exclude .cache from backups)

1574080881
mq32
i don't think everything is in .cache

1574080898
mq32
the shared stuff (libc, ...) is in .cache, but there is still a project-related zig-cache

1574084616
ikan-keli_
what is the C++'s std::vector equivalent for Zig?

1574084721
mq32
std.ArrayList

1574085408
ikan-keli_


1574085444
mq32
ikan-keli_: nope. zig does not have default allocators

1574085471
mq32
read here:

1574085516
fengb
Unfortunately thereâ€™s no general purpose allocator yet

1574085554
ikan-keli_
Impossible, or not there yet?

1574085581
daurnimator
not there yet

1574090077
fengb
So... Godbolt doesn't emit code unless I select Zig 0.3

1574090152
mq32
fengb: yeah, I'm ignoring this for a while now... :D

1574090159
daurnimator
fengb: yeah I noticed the other day..... any idea why?

1574090173
daurnimator
I'm still also curious about how to get a traceback on windows....

1574090405
fengb
I don't know much about Godbolt. 0.5 was working when it first released :/

1574090958
scientes
oh yes, its been that way for a few weeks....

1574090963
scientes
since the 0.5 release

1574092060
fengb
scientes: do you know if there's a way to convince LLVM to partially unroll a loop?

1574092157
scientes
fengb,

1574092175
fengb
Bah

1574092202
fengb
I guess I'll test this code out in C before migrating it to Zig

1574092218
scientes
fengb,

1574092249
scientes
>

1574092250
scientes
I'll be sending out a LLVM patch which consumes the generated metadata right after this.

1574092255
scientes
oh, appears there is a llvm feature

1574092280
fengb
Yeah I was hoping there's somethiing we could do in Zig to activate it

1574092293
scientes
yeah look at link

1574092293
fengb
I basically want duff's device lol

1574092304
scientes
ahhh, duffs device is more complicated

1574092317
scientes
not sure if it does that

1574092323
scientes
actually, why wouldn't it

1574092338
scientes
I know the hardware loop pass does duffs device

1574092583
fengb
Also... llvm doesn't seem to be using cmov?

1574092809
fengb
nvm, found this:

1574092923
scientes
fengb, when you realize the compiler is out-smarting you :)

1574092940
scientes
like when it converts you careful avoidance of multiplication into multiplication :)

1574092973
fengb
An older article from 2012 relied on cmov being faster. Maybe times have changed

1574092997
fengb
7 years of branch prediction work? I dunno

1574093002
scientes
the branch predictor is insanely complicated

1574093012
fengb
It's binary search so the branch prediction would never be very good :/

1574093031
scientes
it can even handle

1574093052
scientes
<fengb> It's binary search so the branch prediction would never be very good :/

1574093108
scientes
ahh yes, then you should be able to attach branch weight meta-data to effect code-gen

1574093138
daurnimator
fengb:

1574093257
scientes
modern CPUs branch predict both branch directions, right?

1574093267
scientes
just far deeper into the expected direction

1574093270
daurnimator
scientes: you should also read throw my link

1574093273
daurnimator
*through

1574093279
daurnimator
and that typo is how I know I need to head to bed

1574093307
scientes
daurnimator, I made it a little, but I too need sleep before reading this

1574093310
scientes
its quite in depth

1574093344
scientes
ijts also a little too specific to current hardware for me

1574093349
scientes
and will have nothing about spectre/meltdown

1574093358
scientes
which I would like to have included in the paper

1574093405
mq32
scientes: afaik modern CPUs do not only predict, but actually

1574093415
mq32
that's the basic idea behind the meltdown attack

1574093436
scientes
mq32, branch prediction is all about execution

1574093443
scientes
especially of loads

1574093470
mq32
nah. the basic idea of branch prediction is not flushing your pipeline

1574093478
scientes
ahh I see

1574093485
mq32
executing both branches is a pretty

1574093493
scientes
but the back branch predictor has an alternate pipeline

1574093505
scientes
(a shallow one)

1574093506
mq32
the simplest version is just "if branch was taken last time, fill pipeline with stuff from that direction"

1574093519
mq32
otherwise, use the other direction

1574093526
scientes
mq32, yeah, and without even a "undo" transactional model to it

1574093535
scientes
cause the memory stuff means you need transactions

1574093572
scientes
but that is branch prediction 486 style

1574093577
scientes
**686

1574093579
scientes
Pentium I

1574093694
mq32
yeah, i know

1574093702
mq32
modern CPUs are quite crazy

1574093712
mq32
speedup * 3 with the same clock count

1574093727
scientes
except the power efficient ones, without power-hungry OOO

1574093730
mq32
"Just throw more transistors at the problem" is the current solution :D

1574093734
scientes
they are still superscalars

1574093762
scientes
mq32, that stopped working years ago, now its "throw 64 threads at the problem"

1574093779
fengb
Back in the day, we could simply ratchet up clockspeed to improve performance

1574093781
scientes
or I mean 128 threads

1574093785
mq32
hehe

1574093794
mq32
scientes: nah, also single core perf has increased

1574093796
scientes
The Rome 2

1574093797
fengb
Hardware guys have been carrying us on their backs :/

1574093802
mq32
not that much anymore, but it still does

1574093814
mq32
oh, btw. is there any frontend html dev here? :D

1574093820
scientes
yeah but its can't much more

1574093826
mq32
i have an annoyance i'd like to fix

1574093832
scientes
IBM too put lots of research into it

1574093848
mq32
scientes: i really should get back to my CPU project and start implementing it...

1574093860
fengb
I am

1574093863
scientes
I have a project to improve the switch statement

1574093865
fengb
Frontend

1574093876
scientes
and also the switch on strings that needs that optimization

1574093890
scientes
but not the shitty D implementation

1574093896
mq32
fengb: firefox stores form state over page reloads. can i prevent that? i'm building a user interface that should not have some stuff from previous iterations

1574093905
scientes
or equally shitty gperf implementation

1574093937
scientes
x86 is indeed a well-polished turd

1574093970
fengb
I think the easiest way is to set a default value on the input. Even empty string can convince the browser to stop doing stuff

1574093985
mq32
<scientes> "x86 is indeed a well-polished turd" this is a quite wonderful sentence :D

1574094005
mq32
fengb: i'm talking about radio buttons

1574094012
mq32
i'm using them to implement a tab view

1574094024
scientes
mq32, whenever I do asm I do arm or PPC cause x86 is so insane

1574094026
mq32
and firefox stores what tab was active the last time, but doesn't trigger click events for that

1574094034
mq32
ARM is quite nice

1574094045
scientes
I refuse to read x86 just to understand the compiler

1574094086
fengb
`Unlike other browsers, Firefox by default persists the dynamic checked state of an <input> across page loads. Use the autocomplete attribute to control this feature.`

1574094094
fengb


1574094108
mq32
oof

1574094110
fengb
Another case of "stop helping"

1574094110
mq32
thanks mozilla :D

1574094175
mq32
fengb: Array.from(document.querySelectorAll("form")).forEach(f => f.reset())

1574094177
mq32
this works as well

1574094251
daurnimator
mq32: document.forms :)

1574094292
mq32
who knew :D

1574094307
mq32
but thanks, daurnimator and fengb :)

1574094385
mq32
i wonder how much work a semi-complex CSS engine would be

1574094398
mq32
would be cool allow styles for my UI project....

1574094425
fengb
Also, autocomplete="off" probably will work

1574094427
companion_cube
CSS -> too much work

1574094457
mq32
autocomplete is an attribute for input elements, right?

1574094473
mq32
companion_cube: yeah, but it's really conventient to have it

1574094485
mq32
i implemented most of the UI stuff only via CSS

1574094525
fengb
CSS is terrible, but it's still the standard for the web. Any attempt at replacing it so far have been even worse

1574094564
mq32
why is it terrible?

1574094564
fengb
For web I mean. People have written their own layout systems in JS and they become just as complicated but woefully underdocumented

1574094566
scientes
fengb, you can't replace something like that, you can just add a second more complicated thing to be used and supported

1574094569
scientes
which is a nightmare

1574094578
mq32
there's a lot of unnecessary stuff in it, but you don't need to use that

1574094596
mq32
i don't like CSS for layouting, though

1574094614
scientes
mq32, its alot better than tables without CSS

1574094625
fengb
But you have to worry about it. Inline elements have baselines, so images have magic floating whitespace. Floats do silly stuff. Flexbox is pretty sane but it interferes with position absolute (and have performance issues)

1574094630
mq32
scientes: yes, true

1574094635
scientes
(for anyone that remembers such things)

1574094638
companion_cube
juste produce .tex files ðŸ¤”

1574094663
fengb
Basically, none of the layout related styles are orthogonal. And there's like 5 ways of defining them

1574094668
scientes
you have to remember the web was built progressively, and without much thought

1574094669
mq32
fengb: yeah, true. i don't like the implementation of CSS regarding to web, but i like the idea of cascading styles

1574094696
fengb
But hey, job security :P

1574094811
daurnimator
So who's ported cassowary to zig? :)

1574094857
mq32
what about this "proposal": Use language A (e.g. XAML) to define layout and content, use language B (CSS) for (visual) styling the content

1574094867
daurnimator
(

1574094978
mq32
wow

1574094987
fengb
Oh the constraints engine. Yeah it's pretty nice

1574094990
mq32
all nice talk and no  examples on how to define even simple constraints :D

1574095029
fengb
But... it's a pain to work with outside of a visual design tool :(

1574095046
fengb
mq32: the best demo is using Xcode

1574095054
fengb
Assuming you have access...

1574095067
mq32
i've used an apple device like ... 5 times in my live yet?

1574095085
mq32
2 times iphone, 1 times ipad and 2 times a MAC

1574095087
fengb
Doing it manually is really complicated :(. But the visual tool is quite nice

1574095094
mq32
so: haven't had contact with that world :D

1574095116
mq32
have you worked with XAML/WPF?

1574095124
mq32
it's also a quite nice way to define UI layouts/constraints

1574095206
fengb
Nope

1574095213
mq32
you have different kind of "layout containers" and widgets

1574095254
mq32
layouts available are (from mind): stacking, docking, tabular, canvas(xy-position), flowing

1574095273
mq32
a button with a icon and a text would be something like this:

1574095310
mq32
Button { DockLayout { Image { .dock=left, .image="bla.png" }, Text { .text="foo" } } }

1574095319
daurnimator
Those all sound like one liners using cassowary

1574095321
fengb


1574095364
mq32
only with XML and not that nice as i wrote that above :D

1574095381
mq32
daurnimator: probably. i have never used any constraint engine

1574095413
daurnimator
mq32: maybe the rust docs are useful?

1574095420
daurnimator
I can't find a great introductory link :(

1574095427
fengb
Mac/iOS autolayout Cassowary is the least bad layout engine I've used

1574095435
fengb
But underneath the covers is pretty complicated stuff

1574095449
daurnimator
fengb: the core algorithm is pretty portable

1574095471
daurnimator
the trickest thing for zig would be how to be expressive... without operator overloading it's going to be hard

1574095478
fengb
I don't doubt it, but making it palatable to users gets pretty hairy

1574095491
mq32
daurnimator: comptime strings?

1574095523
fengb
I used RubyMotion which forces devs to do it programmatically, and every one of them we wrote was broken in awkward ways

1574095527
daurnimator
mq32: system.addVariable("x"); system.addConstraint("x + 20 = y") => you'd want to parse that at comptime? I guess it would work...

1574095544
mq32
we still need a comptime allocator though :D

1574095550
mq32
(a usable one...) :D

1574095573
daurnimator
why?

1574095606
mq32
would make some stuff (like building tree/graph structures) simpler

1574096138
mq32
daurnimator: my layout engine in the UI system is pretty simplistic

1574096139
mq32


1574096155
mq32
this is a "complex" example i made with it

1574096872
scientes
daurnimator, eventually we will enable calling llvm bindings at comptime

1574096893
scientes
and also having using the llvm jit for comptime perhaps, so its actually the same code path

1574096913
scientes
that means we need a sandbox in another process

1574096950
scientes
julia does this

1574096971
scientes
you can construct a llvm function, build it, and then insert it into the run-time linker

1574096991
scientes
which makes it easy to write a customer interpreter in julia

1574097028
mq32
scientes: i don't think that's a viable path for zig, as this is pretty LLVM-specific and makes implementing stage2 much harder

1574097043
scientes
the compiler wouldn't use it

1574097059
scientes
the issue with zig is that we don't have this run-time linker than julia has

1574097072
scientes
and julia links all applications to libllvm already (even if the language doesn't strictly require llvm)

1574101807
jessemeyer
How do I take the first n bytes of a C string (known as ?LPWSTR type)?

1574101910
jessemeyer
To store in a u16 array.

1574102411
jessemeyer
I'm working on build a Windows program (subsystem windows) through WinMain and running into surprises.

1574102429
jessemeyer
If I define WinMain as: export fn WinMain(hInstance: ?HINSTANCE, hPrevInstance: ?HINSTANCE, lpCmdLine: ?LPWSTR, nShowCmd: INT) INT

1574102492
jessemeyer
The parameters do not appear to be passed successfully, I suppose, because the calling convention is not supplied. So if I add stdcallcc, Zig complains about a lack of main() function...

1574102504
jessemeyer
So if I provide an empty main(), WinMain() is no longer called at all!

1574102583
adamkowalski
How do you all attach gdb/lldb to a test case?

1574102848
mikdusan
a crashing test case?

1574102872
adamkowalski
no just any test case

1574102872
FireFox317
jessemeyer: I think you are forgetting a `pub` in front of the `WinMain` function. I also had this problem earlier

1574102892
mikdusan
adamkowalski: afaik, you either have to use a few tricks to find the executable name inside zig-cache yourself,

1574102892
adamkowalski
I can attach a debugger to my actual binary

1574102907
adamkowalski
but then you need to move your test case into your actual program

1574102911
adamkowalski
that doesn't sound right

1574102930
adamkowalski
I want to keep things test driven, and when something is wrong just debug the test case

1574102933
mikdusan
`zig test` actually creates an executable. it's just hidden inside zig-cache/

1574102943
FireFox317
jessemeyer:

1574102952
adamkowalski
mkdusan do you know where in zig-cache?

1574102966
adamkowalski
and does nobody else have that workflow? is debugging a test case not a common thing in zig?

1574103011
mikdusan
should be in current dir that runs `zig test ...`

1574103012
adamkowalski
what do you all do instead?

1574103057
adamkowalski
mikdusan it's not

1574103063
adamkowalski
I ran zig test src/plot.zig

1574103066
adamkowalski
it ran the test case

1574103078
adamkowalski
I looked at my root dir, no new artifacts

1574103088
adamkowalski
I went inside zig-cache/bin

1574103098
adamkowalski
there is a binary there, but it runs the main program

1574103101
mikdusan
which OS?

1574103115
adamkowalski
mac os catalina

1574103168
adamkowalski
the zig cache folder has a h folder and an o folder

1574103193
mikdusan
right. inside the o folder will be a big hash name of another folder, then "/test" which is the executable.

1574103251
mikdusan
it's easy when there is only 1 "o/*/test" but everytime a change or diff test is created, there will be another exe.

1574103261
adamkowalski
hmm

1574103278
adamkowalski
so if I delete everything and run the one test case then I will just have one hash with one exe

1574103291
adamkowalski
that doens't sound like the nicest workflow though haha

1574103300
adamkowalski
I guess it goes back to my question of what you all are doing?

1574103309
adamkowalski
I don't want to swim upstream if there is a better way

1574103316
jessemeyer
Making WinMain pub didn't seem to improve things, but it's hard to say.

1574103335
fengb
There should be a --verbose flag that spits out the program itâ€™s executing

1574103339
jessemeyer
For some reason, I don't have to specify main() if WinMain is just exported.

1574103352
mikdusan
adamkowalski: one trick you can use is `zig test ... --verbose-link` and if it's the

1574103373
jessemeyer
But, if I qualify WinMain has having stdcallcc, Zig requires main() to be defined, irregardless if the exported function is public or not (I think exporting makes it public)

1574103397
FireFox317
jessemeyer: That is correct I think, you don't need a `main` when you define a `WinMain`

1574103399
jessemeyer
Apparently, if main() is defined alongside WinMain(), only main() is ever called.

1574103414
jessemeyer
Then it's a bug on Master.

1574103427
FireFox317
You only want `WinMain()` I'm pretty sure

1574103451
jessemeyer
Roger. I'll submit a bug report. It's a blocking issue for me.

1574103498
FireFox317
jessemeyer:

1574103517
FireFox317
I mean if you remove the `compilelog`

1574103555
adamkowalski
âžœ  pinnacle git:(master) zig test src/plot.zig --verbose-link

1574103555
adamkowalski
Build Dependencies...lld -demangle -dynamic -arch x86_64 -macosx_version_min 10.14.0 -sdk_version 10.14.0 -pie -o zig-cache/o/EwewtdK_mk80bNqZS3h4CLKtpnGiPuT_oueukqxoOCWlzGu2-0bkFKqzJ4dTWfBN/test zig-cache/o/EwewtdK_mk80bNqZS3h4CLKtpnGiPuT_oueukqxoOCWlzGu2-0bkFKqzJ4dTWfBN/test.o /Users/adamkowalski/Library/Application

1574103560
adamkowalski
Support/zig/stage1/o/AvP0t-z5AbZjwU9LDQ6c9VNf7Rt_YI2_rsJHpYJOR1gvvfWeGU1RwzW9xbZWah3f/libcompiler_rt.a -lSystem

1574103563
adamkowalski
Test [1/4] test "scatterplot"...

1574103563
adamkowalski
thats the output

1574103564
fengb
I think itâ€™d be nice if on test failure it outputs the file name

1574103573
fengb
It does for hard crashes

1574103590
mikdusan
andrewrk: look at the ARG following `-o` . that's the path . --> `lldb zig-cache/o/EwewtdK_mk80bNqZS3h4CLKtpnGiPuT_oueukqxoOCWlzGu2-0bkFKqzJ4dTWfBN/test`

1574103608
mikdusan
whups wrong person. ^^ is meant for adamkowalski

1574103617
jessemeyer


1574103654
jessemeyer
FireFox317 When I define it that way, the parameters are not passed correctly.

1574103667
jessemeyer
FireFox317 So I think it needs to be stdcallcc'd.

1574103676
FireFox317
Hmm yeah I see indeed

1574103768
jessemeyer
FireFox317 I managed around the subsystem issue by manually setting that by overriding --subsystem.

1574104308
adamkowalski
thanks I was able to find the test binary and break inside of it!

1574104364
gruebite
What would be the short term recommendation for resolving this?

1574104374
gruebite
run a patch over the headers during build?

1574104493
mikdusan
adamkowalski: oh i just found something that might even be easier: `zig test foo.zig --cache off --verbose-link` <-- this will create an executable named "./test" which is very convenient

1574104655
adamkowalski
mikdusan awesome! thanks i'll try that now

1574104816
adamkowalski
mikdusan for some reason lldb is giving me error: process launch failed: failed to get reply to handshake packet

1574104824
adamkowalski
when you actually try to run the project

1574104966
mikdusan
odd. i'm able to lldb/break into a simple ./test without issue on catalina

1574105026
mikdusan
for now then i'd suggest just use what so far was working

1574105398
adamkowalski
which lldb are you using/

1574105420
kristoff_it
hello everyone! I've been away a couple of weeks and it feels like forever. I have a quick question about the new way of doing varags: what is the canonical way of knowing if a given struct is an "arg list"?

1574105421
adamkowalski
I've built llvm from source so I can get access to c++20 concepts and i'm using the lldb

1574105463
adamkowalski
kristoff_it can you use reflection and ask for the type of each argument and check if it maches the struct?

1574105477
mikdusan
oh, i've seen that error before with a custom build of lldb and never been able to solve it

1574105495
mikdusan
i am on catalina/10.15.1, xcode 11.3 beta, lldb-1100.0.30.10

1574105495
adamkowalski
mikdsuan are you using the one that apple provides with xcode?

1574105496
jessemeyer
kristoff_it Are you aware of the recent anon structs?

1574105526
fengb
So many new faces >_>

1574105554
adamkowalski
mikdusan i'll check what version I'm on. catalina was a disaster. ever since i've upgraded they disabled nvidia driver support so I can't use cuda anymore

1574105558
adamkowalski
they want to force you to use metal

1574105575
kristoff_it
jessemeyer: yes I'm aware and I'm asking precisely about that. I want to distinguish between `.{10, true, "banana"}` and `.{key="hello", .prop1 = true}`

1574105576
adamkowalski
we need something like opencl but thats actually reasonable to use haha

1574105605
adamkowalski
has anybody tried using vulkan for compute rather then graphics?

1574105649
jessemeyer
kristoff_it Ah, got it. I don't know the answer ... I'm not sure if that's even been resolved yet.  What may be the answer today may change tomorrow.

1574105655
FireFox317
gruebite: Probably running `zig translate-c` manually on the file and then make some changes by hand.

1574105666
jessemeyer
kristoff_it have you read this discussion?

1574105667
mikdusan
adamkowalski: also it might be viable to use your custom llvm/clang with latest xcode llvm

1574105702
mikdusan
oops. i meant 'latest xcode lldb'

1574105715
gruebite
FireFox317: I have to run a patch anyway because of some

1574105721
gruebite
there's a PR now for it, but in the mean time

1574105764
fengb
kristoff_it: not sure this is the

1574105775
gruebite
FireFox317:

1574105797
kristoff_it
jessemeyer: yeah I read it, but the subject is not mentioned

1574105799
FireFox317
Ah yes I saw that one coming by. It's just really hard to properly translate all the c-code

1574105804
fengb
I also don't think the new varargs is in std yet so we'll have to establish some pattern

1574105812
gruebite
yep :) all good

1574105831
kristoff_it
fengb: thanks, I guess that works

1574105887
kristoff_it
So I'm still working on my Redis client and all seems working with async/await, so I'm updating the interface to the new syntax.

1574105925
fengb
I think this would be a nice function in std.meta

1574106092
FireFox317_
gruebite: But for sure the multiple enumerations should be solved, because that such a common thing in imported C code

1574106242
gruebite
oh yeah, i've done it too in my C code

1574112260
andrewrk
dimenus, related to your @Vector based matrix project:

1574112296
andrewrk
Tom Forsyth is one of the main Intel people who designed SIMD

1574112401
dimenus
what is ISPC?

1574112712
mikdusan
Intel SPMD Program Compiler

1574112769
dimenus
andrewrk: i'm not really using any hadds / hmuls at the moment - but good to know that it's not really worth pursuing

1574112974
dimenus
andrewrk: did you and gingerBill get into any recorded discussions? :)

1574113248
fengb
Oh how did Handmade go?

1574114267
andrewrk
I think it went well!

1574114298
andrewrk
dimenus, ha! I didn't even consider that

1574114772
dimenus
andrewrk: the discussion part or just the recorded part?

1574114808
andrewrk
the recording part

1574114837
dimenus
he's always been very supportive of what your doing but firmly against the Zig style of error handling, so I'm just curious if you guys got to discuss that in person

1574114842
dimenus
*you're

1574115401
fengb
"Error cases are handled like any other piece of code." that's what Go does and everyone reinvents error traces :(

1574115469
dimenus
errors are way way more ergonomic in Zig than they before the great desigiling

1574115487
dimenus
in 2017 i think I was on GB's side of the fense

1574115490
quetzalb
i successfully cross compiled from windows amd64 to windows aarch64 with today's zig master but I had to make some hacks. Does anyone know the correct way to generate lib/libc/mingw/libarm64/*.def files?  I copied them from lib64 and hand edited to make it work.

1574115490
dimenus
*fence

1574115509
fengb
Ah yeah the old %% syntax scared me

1574115560
fengb
Although quite a few people now think try / catch are exceptions, even though the behave a lot more like Rust (or even Go if there's some syntax sugar)

1574115582
dimenus
i was annoyed by exceptions in c# and wanted something that was supposed to be simplier

1574115595
dimenus
but zig is actually simple for the READER, it's easy to see at the callsite if something can fail

1574115601
dimenus
and i've grown to really enjoy that feature

1574115603
andrewrk
quetzalb, those files are provided by the mingw-w64 project. if you have improvements to them, then we can return the favor from the zig community back to the mingw-w64 community by sending them patches

1574115671
dimenus
fengb: yeah, i can see how that might be confusing

1574115799
andrewrk
quetzalb, there is also a #mingw-w64 channel on OFTC

1574115924
quetzalb
andrewrk: thanks! I see the gendef program is in mingw-w64 project. I'll see if I can make it work to generate legit .def files.

1574116002
AlexMax
speaking of mingw, perhaps you might be able to bring in the .def file for shlwapi?

1574116008
AlexMax


1574116011
andrewrk
zig currently has mingw-w64 v6.0.0. it looks like since then they have released v7.0.0, so one open task is to upgrade

1574116042
andrewrk
AlexMax, yes, will do

1574116062
AlexMax
at least I think that's the issue, I'm not familiar enough with internals

1574116118
AlexMax
also, while you're here, what exactly would .rc file support look like in Zig?  It requires a separate compilation step and needs either windres or clang -E > llvm-rc.

1574116229
andrewrk
I saw that issue - that's a good question. I don't have an answer without looking into it

1574116257
AlexMax


1574116567
fengb
til what maven means

1574118443
quetzalb
I'm trying to use @cInclude("bthsdpdef.h") but I get "file not found".  I see that header is included in zig sources at lib\libc\include\any-windows-any.  Can I compile using that header or do I need my own copy somewhere else?

1574119881
andrewrk
quetzalb, you probably need -lc

1574119986
quetzalb
andrewrk: thank you that was it

