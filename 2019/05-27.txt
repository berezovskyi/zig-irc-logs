1558915628
hryx
pretty cool hoppetosse

1558915670
hryx
neato, threadlocal was super easy to add to translate-c. new test cases!

1558917541
hoppetosse
hryx thanks

1558917590
andrewrk
hryx, nice!

1558918015
hryx
a lot of C++ features are foreign to me, but could `constexpr` be translated to `comptime`?

1558918071
hryx
though of course this is translate-c, not translate-c++

1558918098
andrewrk
hryx, I think the answer to that is not simple

1558918110
andrewrk
but, we currently pass `-x c` with no plan to change it, so I think constexpr would be a compile error

1558918129
mikdusan
yeah c11 doesn't have constexpr

1558918152
hryx
ah, glad I asked in that case!

1558927070
daurnimator
is there a way to de-volatile a pointer?

1558927579
daurnimator
nevermind, figured it out...

1558927592
scientes
daurnimator,

1558927601
scientes
zig supposedly exports those, but i haven't needed them yet

1558928017
tgschultz
daurnimator: I wouldn't get too excited, there's a good chance all my work gets thrown out because all it accomplishes its proving that userland solutions are insufficient. But we'll see.

1558928119
daurnimator
tgschultz: yeah it does get a big ugly

1558928132
daurnimator
tgschultz: but maybe it proves that just a little sugar is needed?

1558928156
tgschultz
well that's what we're trying to work out

1558928221
daurnimator
tgschultz: your most recent PR makes me think it could be related to variable length structs?

1558928254
daurnimator
tgschultz: in the current PR, you have a *impl member. What if the implementation was instead a variable size trailing bit of the struct?

1558928259
tgschultz
I don't follow

1558928439
andrewrk
I marked

1558928451
andrewrk
don't worry, it's only +11,248 −11,270 lines

1558928644
daurnimator
tgschultz: so what is the issue with e.g. struct { const Self = @This(); var interface = FooInterface{.foo = Self.foo}; data: i32, fn foo(interface: *FooInterface) i32 { const self = @fieldParentPointer(Self, "interface", interface); return self.data; } };

1558928918
tgschultz
we started down this path for three reasons: 1) the footgun of copying an inerface struct instead of taking a pointer to it, 2) the additional complication of error sets (see Sterams), and 3) @fieldParentPtr doesn't optimize well for some reason.

1558928976
tgschultz
your exampe wouldn't work because .foo is just a pointer to a function, the function is static, not part of an instance of the struct

1558929010
tgschultz
oh wait, nevermind, it's late

1558929014
tgschultz
this is just status quo

1558929019
daurnimator
tgschultz: 1) that footgun should be fixed soon with 'fixed'/'nocopy'... right? 2) FooInterface() could be parametized by e.g. error set?. 3) oh? that's news to me... do we have an open issue for that?

1558929034
tgschultz
no.. I was right the first time, because interface is also static

1558929095
daurnimator
tgschultz: oh right. it would have to be `var interface: FooInterface`, and then in e.g. an .init function you would have to initialise it.

1558929164
tgschultz
1) yep, that's probably a good idea. 2) that's status quo with streams and it gets painful. Even andrew just gave up in dwarf.zig and uses an SeekableStream(anyerror, anyerror). 3) yeah, there is. It's referenced by the big "redo std lib with different interfaces pattern" issue

1558929192
tgschultz
3) is also something we could probably just fix

1558929409
tgschultz
1) and 3) are also solved by my latest PR, and my next one will attempt to handle 2), but like my first 2 PRs it may bring more cons than pros and waiting for new language features might be better.

1558929459
tgschultz
but I'll sleep better knowing that all the options were explored.

1558929492
daurnimator
tgschultz: so I've been thinking about how I might need it for e.g. std.LinkedList

1558929544
daurnimator
tgschultz: e.g. I need to std.LinkedList to really be an interface... and then sometimes I need to implement it with atomic operations; other times with locks; etc...

1558929587
tgschultz
isn't there already a linked list that's intrusive? That's basically what status-quo interfaces are, intrusive pointers with a vtable attached.

1558929615
daurnimator
tgschultz: you can create an intrusive linked list today with std.LinkedList(void) and then embedding .Node in your struct.

1558929666
daurnimator
tgschultz: I meant that sometimes for my linked list `.next` needs to be an @atomicLoad

1558929716
tgschultz
I see, so you need the Node to be an interface so the operation of getting the next node can have differing behavior

1558929738
daurnimator
yep. likewise .first in the main 'linkedlist' structure itself

1558930463
redj
\\

1558932193
daurnimator
andrewrk: indeed it's a lot to review... concentration ran out after reading 3 or 4 files; will try and do another round later

1558932220
andrewrk
daurnimator, thanks for the review

1558932244
daurnimator
time for tea :)

1558932269
daurnimator
andrewrk: also it's hard to know what code is fresh/changed vs what is just moved from another location and should be fixed in another PR

1558932397
andrewrk
yeah. I have no solution to that, sorry

1558932411
andrewrk
I've been working really hard on this for a week, and it's taken a lot of time, it makes sense it would be hard to review

1558933122
shritesh
Guess the number example works on WASI with the PR.

1558933140
andrewrk
great

1558933338
shritesh
The new organization will make it easier to implement libpreopen-style capability-based file/socket operations on WASI. It was really difficult to shoehorn on top of existing interfaces before.

1558936901
andrewrk
thanks everybody for the review comments, I'm going to go to sleep and then respond to everything / wrap things up in the morning

1558936924
emekankurumeh[m]
gn

1558936925
andrewrk
and then spend some time on these 40 (!!) open pull requests

1558938036
daurnimator
I'm sure many of the PRs will need to be rebased after this breaking PR

1558971645
shritesh
What’s the recommended way to do regex right now?

1558971691
andrewrk
I think tiehuis has a library

1558971702
andrewrk
runtime compilation only afaik

1558971734
andrewrk
we're going to need quite a few bug fixes & improvements to comptime before comptime regex compilation becomes practical, but it'll happen

1558971877
shritesh
Thanks. I’ll try it out.

1558972132
scientes
andrewrk, I have wanted that for years in GCC but I don't think it will ever happen

1558972146
scientes
andrewrk, both compilation and execution

1558972182
andrewrk
zig's design allows it. just need to improve zig a lot

1558972227
scientes
it also makes a clearer language, from a theoretical standpoint

1558972258
scientes
as long as they do not support backtracking

1558972304
emekankurumeh[m]
why not? there is a rust project that supports compile time regex compilation.

1558972319
scientes
emekankurumeh[m], with what engine?

1558972990
mikdusan
i get real oddball branch:posix_layer build error genearting userland.o. some duplicates, but the weirdest one is "linux.zig" showing up everywhere and I'm building on macos

1558973020
andrewrk
mikdusan, I haven't tested on macos yet

1558973165
shritesh
The library doesn’t compile on master.

1558973173
emekankurumeh[m]
i was thinking of nim

1558973178
emekankurumeh[m]


1558973212
andrewrk
shritesh, it's about to not compile on master even harder when I merge this branch

1558973220
mikdusan
heh

1558973235
andrewrk
I'm sure the upgrade path is straightforward. zig hasn't lost abilities

1558973321
shritesh
Haha. In this case it’s the allocator.create function. It used to take a value and now it takes the type and you have to write to the returned memory address now.

1558973408
shritesh
271 non trivial changes (and probably more). I’ll just write a state machine.

1558973532
scientes
I am wondering how to implement this in zig, which doesn't have the crazy duff's device thing

1558973552
scientes
allows state machines to be more readable in some cases

1558974938
Aransentin
Some C libraries have functions that take a lot of variable-length parameters; e.g. to connect with libpq there's a ton of options you can set.

1558974941
Aransentin
libs also tend to solve this in many different ways. Vulkan has you passing large struct pointers as arguments,

1558974943
Aransentin
in libpq you can either pass a "foo=bar blah=bloo" string or two null-terminated arrays of strings with the keys/values in each.

1558974947
Aransentin
Is there any way you folks would prefer? Anything Zig-specific?

1558974965
andrewrk
Aransentin, a struct

1558974982
andrewrk
after

1558974989
Aransentin
Ah

1558975014
andrewrk
there are also plans for an anonymous struct literal which would make such a function call look very similar to passing keyword args

1558975032
andrewrk
unrelated, I think I need to do a blog post about undefined behavior

1558975051
Aransentin
Like vulkan, then? Would it be okay to arbitrarily add more options in later releases?

1558975067
Aransentin
(insted of doing it like Vulkan, and having an extra void pointer for extensions)

1558975074
andrewrk
if you added struct fields and gave them default init values then it would avoid breaking the API of callsites

1558975109
Aransentin
You'd presumably break dynamic linking, if that's even a thing in Zig :)

1558975125
andrewrk
I respect whitequark a lot, and she's the one who wrote the IRC logger for this channel, but even she thinks zig's approach to undefined behavior is "ridiculous" and "fundamentally wrong"

1558975138
andrewrk
if someone like that misunderstands the situation, I think I need to write an article to clarify

1558975153
scientes
andrewrk, I agree

1558975166
scientes
doesn't get that zig makes undefined behavior more managable than C

1558975169
scientes
less scary

1558975191
andrewrk
if and when it comes time that people use zig for web servers of businesses, I think the preferred build mode for production will be release-safe

1558975202
andrewrk
release-fast is more for game devs and for perf bottlenecks

1558975223
scientes
yes

1558975231
andrewrk
and if this is combined with the plans in

1558975236
scientes
in which case it is safer than C, because unsigned integer overflow is the source of many C bugs

1558975241
scientes
even if it is deterministic and defined

1558975246
andrewrk
yes

1558975301
scientes
but I think you should keep strict aliasing open as a future possibility

1558975341
scientes
even if there are more important things right now

1558975443
andrewrk
strict aliasing is not eliminated from possibilities yet

1558975457
andrewrk
but maybe there is an even better approach to aliasing

1558975502
andrewrk
you know what zig could already do though is enable strict aliasing optimizations for types that have no in-memory layout guarantee

1558975520
scientes
oh yeah, that would accomplish alot

1558975582
scientes
I was mainly referring to this

1558976075
mikdusan
i wonder why anyone would place value on C unsigned integer wraparound. frankly i've never once relied on that behavior. if it is useful, it smells like special case useful.

1558976106
rain1
i always wanted carry bits to be exposed

1558976135
rain1
I suppose i can just code in assembly if i want that though

1558976152
andrewrk
rain1, if you're writing zig you can simply use the wraparound operators

1558976168
andrewrk


1558976309
mikdusan
so in fact looking at zig's features; if you want wraparound you explicitly use it. if not, you get undefined. seems ok to me.

1558976349
scientes
mikdusan, the advantage is the determinism

1558976371
scientes
undefined behavior is def. woorse than determinism

1558976383
scientes
and until zig, no language "got" undefined behavior

1558976398
shritesh
“Write in Rust” or “write C and provide proofs of your code” is not feasible for everyone. I have done the former professionally and I’m too dumb for the later. With Zig (and release-safe), I’m as confident as writing python and ruby and actually enjoying it.

1558976419
scientes
same shritesh

1558976448
scientes
there is a good essay by llvm about undefined behavior

1558976461
scientes
but they didn't solve it the way zig finially does

1558976502
scientes
actually, there would probably be a desire for the same thing in C---it is implemented for the string formatting function now because of a long history of security problems

1558976523
scientes
and go uses -fwrapv just because they are so scared of the UB

1558976526
scientes
so does java

1558976564
andrewrk
I had to look that up: "This option instructs the compiler to assume that signed arithmetic overflow of addition, subtraction and multiplication wraps around using twos-complement representation. This flag enables some optimizations and disables others. This option is enabled by default for the Java front-end, as required by the Java language specification. "

1558976586
scientes
andrewrk, it just turns off UB

1558976606
andrewrk
yeah makes sense. the `v` made me incorrectly think it had to do with vectors

1558976680
scientes
<andrewrk> I had to look that up:

1558976682
scientes
this is like -fPIC

1558976703
scientes
its best to have consistancy where possible

1558978726
Aransentin
Can you conditionally add a function to a generic struct depending on some comptime value?

1558979063
scientes
Aransentin, you are not being clear, however you can check for comptime values in the fucntion

1558979098
andrewrk
Aransentin, yes you can. the strict answer to your question would utilize the `use` keyword but there may be an even simpler way to do what you're trying to do

1558979232
Aransentin
I have a server that can be connected to with a unix socket and regular TCP, and figured I'd make a generic connection struct that didn't contain any host info if you were to only use the unix socket

1558979286
Aransentin
So you'd have two init() functions in the struct, differing with each other depending on the enum you fed the function that returned the type

1558979315
Aransentin
dunno if I'm making myself clear or not

1558979469
andrewrk
Aransentin, one approach would be to simply put both init functions in the struct, and don't try to make one of them missing

1558979483
andrewrk
the one that isn't called won't be analyzed

1558979491
Aransentin
Oh, that's true

1558979499
andrewrk
this is the pattern used by the standard library in many places

1558979989
shritesh
How do I pass build options to my code?

1558980061
andrewrk
that use case needs some improvements, but here's an example (just a sec, digging around)

1558980147
andrewrk
shritesh, std.addBuildOption is the API. Here's an example of usage:

1558980185
mikdusan
accessed via -D<option_name> right?

1558980209
andrewrk


1558980225
andrewrk
mikdusan, that's a separate concept but you can connect the two

1558980239
shritesh
Thanks. The second link was what I wanted.

1558980265
andrewrk
this API just helps you create @import("build_options")

1558980274
mikdusan
ah ok

1558980289
andrewrk
but with the package manager this will be more streamlined and it will make sense with how to configure dependencies

1558980332
andrewrk
we're incrementally approaching a build system. it'll be a rough ride but the end result will be great

1558980849
mq32
hey zig community!

1558980855
andrewrk
welcome mq32

1558980872
mq32
i discovered zig at saturday and now i'm reading the manual

1558980890
mq32
i'm pleased to see that there are still new and useful languages out there! :)

1558980910
mq32
useful as "useful for a low level programmer"

1558980917
scientes
mq32, me2

1558980949
scientes
there is alot of work to be done

1558980960
mq32
yeah, that's true

1558981022
mq32
i did create a concept for a programming language in the last years and zig seems to cover pretty much all of my ideas :D

1558981039
mq32
the templating-by-functioncall is just an awesome concept

1558981062
scientes
well its just an optimization, gcc can do it for C

1558981068
scientes
but not as generally as zig can

1558981098
mq32
how can i do this in c?

1558981105
mq32
except for preprocessor magic

1558981122
scientes
give me a sec

1558981209
scientes
mq32,

1558981219
scientes
again, not as general

1558981223
emekankurumeh[m]
andrewrk: how is @floatToInt implemented? does it use an llvm intrinsic or something else?

1558981272
mq32
scientes, that's not what i meant

1558981279
andrewrk
emekankurumeh[m],

1558981281
scientes
emekankurumeh[m], you should probably just use ceil() and then read the bits

1558981307
mq32
fn List(comptime T : type) { return struct { value : T; }; }

1558981314
emekankurumeh[m]


1558981327
mq32
(i missed a `type` there...)

1558981373
emekankurumeh[m]
now that i think about it, we can get rid of a lot of builtins and replace them with userland calls to llvm builtins.

1558981375
andrewrk
mq32, yeah! I was pleased that sort of fell onto my lap when tackling comptime semantics

1558981405
andrewrk
emekankurumeh[m], what do you mean by that? abusing the @"" bug?

1558981447
mq32
andrewrk, i assume Zig is mostly your design? (from the stuff i found your name was most prominent)

1558981482
andrewrk
mq32, I'm the BDFL but lately the contributions have been numerous and significant

1558981515
mq32
yeah, that's what i though

1558981516
mq32
nice work!

1558981548
mq32
as i'm doing some crazy stuff with embedded hardware: how well does zig and linker script work toghether?

1558981552
emekankurumeh[m]
i wouldn't call it abusing

1558981562
scientes
mq32, we would love to have users of that use-case

1558981585
andrewrk
mq32, it's been working fine for me and a few others for similar use cases

1558981597
mq32
okay, nice

1558981604
mq32
i'll give it a try the next weeks

1558981611
andrewrk
currently zig's linker is LLD which does the linker script parsing and utilization

1558981629
mq32
i'll dig into it, still using the gnu ld

1558981634
mq32
what caught my attention was @embedFile()

1558981637
scientes
mq32, there are two gnu lds

1558981644
mq32
"old ld", not gold

1558981647
scientes
mq32, @embedFile() is quite slow currently

1558981656
mq32
doesn't care, my current way is much slower :D

1558981661
mq32
because my biggest problem was embeddeding files in a certain format

1558981678
scientes
the assembler also has .incbin

1558981680
scientes
which is the same

1558981695
mq32
and with comptime + embedFile i could do image processing at compile time and fit the resources to my will

1558981698
scientes
but i haven't used that from zig

1558981702
mq32
(as long as i understood the semantics correctly)

1558981702
andrewrk
LLD is a sub-project of LLVM that is somewhat smaller and less bureaucratic so it's easier to get changes merged upstream

1558981714
andrewrk
also we have an in-tree fork so we can carry patches before they land upstream

1558981718
scientes
andrewrk, I've befriended meowray recently

1558981726
scientes
who works on it for Google

1558981733
andrewrk
brilliant

1558981747
scientes
I set him up with a ppc64le VPS

1558981749
andrewrk
mq32, you can do that. you may run into a few compiler bugs

1558981761
mq32
would be good, so i can make you work! :D

1558981766
mq32
*create you work

1558981773
mq32
and make the compiler better

1558981792
andrewrk
yeah. unfortunately at this point we have lots of people willing to do work but not enough funding to hire somebody besides me to work full time

1558981812
emekankurumeh[m]
zig supports linker scripts just fine

1558981817
andrewrk
oops. I meant that we have lots of contributors doing pull requests, which creates work

1558981827
emekankurumeh[m]
have you seen

1558981847
mq32
nope, will look into it

1558981850
andrewrk
the problem is I have to balance between those and the core changes that are unavailable to contributors

1558981896
mq32
andrewrk: that's okay... i hope my projects never go that much public that they start to create actual work for me to maintain

1558981962
mq32
is there a possibility to put variables into different sections?

1558981970
mq32
i may need something like .data and .data2

1558981987
emekankurumeh[m]
yup

1558981988
andrewrk
mq32, yes, the linksection keyword

1558981997
mq32


1558982006
andrewrk
here it is on a function:

1558982008
andrewrk
it also works on variables

1558982012
andrewrk
not documented yet though sorry

1558982027
mq32
:D

1558982052
andrewrk
mq32, I will say: have a look at the support table here:

1558982087
andrewrk
and keep in mind that anything that isn't Tier 1, you're probably going to have to get involved in the zig project development in some way for your project to be practical

1558982094
mq32
arm cortex-m3, so arm 32bit

1558982101
mq32
i'm fully aware of that

1558982148
mq32
i'm going back to reading the manual, already half way through with some peeks forward

1558984261
mq32
andrewrk, do you plan to make it possible to have a kind of "type builder"?

1558984269
mq32
so i could fully meta-program my own types?

1558984543
shritesh
Isn’t that what comptime does?

1558984592
mq32
comptime is a requirement for "type builder"

1558984593
emekankurumeh[m]
i remeber a post about comp-time psuedo structs a while back

1558984607
mq32
what i mean is doing unions of types, adding fields to a struct type and so on

1558984620
hryx
like @reify?

1558984859
emekankurumeh[m]


1558985293
mq32
yes something like @reify

1558985326
mq32
because you can also bake functions with comptime, you could create API generators

1558985340
mq32
ultimate goal would be something like:

1558985377
mq32
const ClockAPI = RestAPI("clock-api.xml");

1558985395
mq32
var clock = ClockAPI.create("my-server.org");

1558985418
mq32
const time = clock.get_time();

1558985441
mq32
where RestAPI would create a struct type with member functions which provide a wrapper around a REST api

1558985446
hryx
sort of reminds me of gRPC+protobuf but without the intermediate code generation step

1558985450
hryx
neato

1558985454
mq32
exactly that

1558985465
mq32
zig could have it's comptime protobuf support :D

1558985477
hryx
I'm into it

1558985479
mq32
"yeah just protobuf me that multiline stringliteral, okaaay?"

1558985721
hoppetosse
I'm trying out tgschultz's pseudostruct to build shader structs with attributes and uniforms as fields

1558985747
hoppetosse
typesafe shaders, w00t XD

1558985773
mq32
hoppetosse, neat!

1558985773
hoppetosse
do people still say 'w00t'?

1558985786
mq32
wØØt?

1558985845
mq32
but yeah, that's also an application

1558985850
hoppetosse
i guess it's the same as leet -> 1337, but an exclamation of happiness instead of skill

1558986386
Frank-Lesser
Hi all, first thanks to Andrew Kelley and all contributors for creating ZIG

1558986568
Frank-Lesser
just to mention since a few commits the example/hello_world/hello_windows.zig can't be build

1558986592
scientes
I don't think anything works on Windows right now

1558986621
scientes
big change, it will be fixed

1558986672
andrewrk
scientes, careful saying stuff like that plz. do you have any cause to believe master branch is broken on Windows?

1558986684
andrewrk
welcome Frank-Lesser

1558986738
andrewrk
I'll take a peek at hello_windows.zig after these tests finish running

1558987009
Frank-Lesser
Hi Andrew, hi Shawn , thx for the fast answer, just to introduce my self a little - I am maintainging a Smalltalk Virtual Machine since long time ( C / ASM )

1558987035
Frank-Lesser
and I am lurking for porting it to ZIG

1558987198
Frank-Lesser
as a small exercise my son ( who is studying computer science nearby Berlin ) have ported a small Path-Tracer to ZIG, hope to publish it soon

1558987242
hryx
welcome Frank-Lesser. those sound like cool projects

1558987275
shritesh
Is there another way to extract the value from a tagged union? My code is full of single case switch and empty else.

1558987313
andrewrk
shritesh, you can access the union field directly just like in C - but in zig it's safety-checked

1558987323
shritesh
Oooh. Nice.

1558987382
mikdusan
fyi, branch:master builds examples ok for me on windows -> `zig build test -Dskip-release -Dskip-non-native`  (0.4.0+df7aa9a4)

1558987389
scientes
andrewrk, yeah i'm sorry. I was thinking #2527 landed

1558987446
mq32
Frank-Lesser, thank's for the inspiration! wanted to write some pathtracer anyways, so why not do it in zig?

1558987557
mq32
andrewrk, scientes: is there already some kind of "package"/"library" list for zig?

1558987571
Frank-Lesser
mike, thx I shall have a look, I shall ask my son ( he did the most work ) to publish it SAP - he is very busy now  so hope it wil be soon

1558987802
hryx
mq32: there's no comprehensive list yet, but one of the next release cycles (not the current one) will be focused on creating a package manager and package ecosystem

1558987825
hryx
For now you can check out some of these projects:

1558987876
hryx
If you create something usable in zig that you want others to know about, you can announce it here or on the mailing list

1558987904
hryx
or maybe it doesn't even need to be "usable", I dunno :>

1558988080
andrewrk
anything "demoable" is eligible for that list :)

1558988145
andrewrk
mq32, even when the package manager is fully complete it will be decentralized. so there is need of third party services to do package discovery

1558988439
mq32
cool thing @ package manager

1558988536
shritesh
Will it use the blockchain?

1558988572
mq32
so everyone

1558988602
mq32
what's the essential idea of packages? precompiled binaries or "include everything as source"?

1558988619
mikdusan
the more pure zig (source) the better imo

1558988667
andrewrk
mq32, source

1558988669
hryx
ooooh shritesh now you dunnit! :D

1558988672
mq32
i preferred binaries in my old days, but nowadays source is better ♥

1558988690
mq32
has way better optimization potential

1558988691
andrewrk
source lets us achieve out-of-the-box cross compilation

1558988700
mq32
i think i read about zig doing "Link time optimization"?

1558988703
mq32
and that, yes

1558988729
andrewrk
you don't need LTO if you only create 1 .o file

1558988740
mq32
aaaah!

1558988759
andrewrk
I got your LTO right here

1558988762
mikdusan
zig already does a really good job at build-dependencies; think ccache for .zig files

1558988840
mikdusan
whoa. posix-layer branch just passed `zig build test -Dskip-release -Dskip-non-native` for me on macos,linux,windows. i smell a merge coming.

1558988853
shritesh
I hope we do *whatever rust does*. Using the Vulkano crate without having to install anything in Win/Mac/Linux was mind blowing when I first used it.

1558988876
andrewrk
yeah zig is all about that, even moreso than rust

1558988899
mq32
is there a "human readable documentation" of "std" or do i have to use

1558988903
andrewrk
(shipping with multiple libcs for example)

1558988915
andrewrk
nope sorry you have to read source for that for now

1558988920
mq32
okay, no problem

1558988940
mq32
reading more code probably diffuses more zig into my head

1558988948
hryx
mq32: I'm really hoping to ship auto-generated HTML docs by next release

1558988955
hryx
but today ya just gotta read the src

1558988964
mq32
still cool thing!

1558988984
mq32
i hope you guys can create a good alternative to c++ for me :P

1558989041
andrewrk
emekankurumeh[m], I think your comments on #2527 are all fixed, I hadn't tested on windows yet but now it's working

1558989086
andrewrk
it's times like these I wish I had a 4th laptop so I could test freebsd without booting up a VM

1558989089
mq32
os.File is similar to FILE in C?

1558989096
andrewrk
yes

1558989134
mikdusan
curious which VM sw are you using

1558989237
andrewrk
vultr.com

1558989242
andrewrk
I don't have enough memory to run an actual VM

1558989255
andrewrk
it's bad enough when linking LLVM crashes my computer

1558989257
shritesh
I love how new WASM projects mention Zig prominently now

1558989279
andrewrk
nice

1558989305
mikdusan
yeah unless you have RAM to comfortably spare, it's not worth risking crashing your host desktop.

1558989424
mikdusan
ahhhh. i just noticed if i ssh into msys2-ssh-server on windows, run `zig build test` and ctrl-c ... it doesn't really ctrl-c. it keeps running.

1558989577
andrewrk
there's no code that is intentionally blocking this

1558989589
andrewrk
are you sure it's zig specific?

1558989611
mikdusan
i'll poke around a bit after some merges. it might just be my choice of ssh/shell/env . i don't know yet.

1558989679
shritesh
It could be one of ssh’s issues that the mosh project digs so much about.

1558989750
shritesh
(You should totally try out mosh if you haven’t)

1558989781
mikdusan
the behavior i'm seeing is: zig test runs.... output lines are coming... then ctrl-C and i get back to shell prompt... output keeps coming :)

1558989824
andrewrk
maybe it's only killing the child process?

1558990283
mq32


1558990288
hryx
andrewrk: in zig_clang.cpp, I'm seeing alternating uses of reinterpret_cast<> and bitcast(). Do I understand correctly that reinterpret_cast is

1558990306
hryx
e.g. between the ZigClangXxx struct poitners and clang::Xxx class pointers?

1558990326
andrewrk
hryx, that's correct. bitcast is used to safely convert the types that can't be pointers (some clang types are like this, such as QualType)

1558990339
hryx
dope, thanks

1558990357
andrewrk
we could provide bitcast overloads for the pointers too but I think that would be overkill

1558990390
hryx
I see. I'm learning a lot about C++ features on this translate-c project :P

1558990394
hryx
mq32 I'll take q peek

1558990435
andrewrk
hryx, yeah, unfortunately the C API of libclang is completely nerfed

1558990474
mq32
hryx, nevermind

1558990482
mq32
i'm used to anything autoconverts :D

1558990583
andrewrk
mq32, it was the u8 -> u4 - has the possibility of losing information

1558990589
mq32
yep

1558990594
mq32
@truncate(u4, ...)

1558990613
andrewrk
that will chop off the upper 4 bits. another option is @intCast which will assert that the value is in the correct range

1558990635
mq32
(my code snippet contains another bug, but that is fixed as well)

1558990669
mq32
it'S really funny that in one project, i did an ascii to number conversion by "c & 0xF"

1558990749
mq32
the "test" feature is cool :)

1558990855
mikdusan
so i wrote a tiny loop in zig. sleep 1 second. print line. built executable, ran it. ctrl-c. runs in background and output keeps coming. had to powershell kill PID to stop it.

1558990887
andrewrk
mq32, your function looks suspiciously like std.fmt.charToDigit

1558990945
mq32
nice to know :D

1558990984
scientes
why can't i divide by a comptime_int?

1558990994
scientes
ome/shawn/git/zig/std/math/exp.zig:53:19: error: float value 6755399441055744.000000 cannot be implicitly casted to type 'comptime_int'

1558991002
andrewrk
mq32, this is one of the difficult to explain but very intentional ways zig is designed. you, a brand new zig user, wrote basically an identical function as what's in the standard library, written by me & others

1558991023
mq32
yeah, it's the obvious way

1558991046
andrewrk
scientes, that looks like it should work. maybe there are hidden decimals after the zeroes that are getting rounded?

1558991050
andrewrk
or maybe it's a bug

1558991068
scientes
>

1558991068
scientes
<mq32> it'S really funny that in one project, i did an ascii to number conversion by "c & 0xF"

1558991089
scientes
but that won't truncate

1558991115
mq32
scientes, yeah, but that was on a PDP-8 in PAL assembler

1558991133
scientes
andrewrk,   .shift_scaled = 0x1.8p+52 / N,

1558991140
mq32
when you only have ~100 cycles to process all data from serial port, you scrape everything

1558991145
scientes
its because the comptime_int is bound

1558991150
scientes
rather than a literal

1558991182
andrewrk
scientes, I doubt it's that. the compiler doesn't distinguish

1558991189
scientes
mq32, they produce the same code, the truncate gets gets you better optimizations

1558991210
mq32
yeah i know :)

1558991236
mq32
and as i know that i have my range secured, i can safely truncate

1558991265
mq32
question: i have a function that returns error{NoHash}!Color

1558991266
scientes
mq32, zig has two, @intCast() where if it doesn't fit is undefined, and @truncate() that is always well defined

1558991279
scientes
these come directly from LLVM-IR

1558991300
mq32
i did some LLVM stuff myself :)

1558991314
mq32
and i do a "try std.fmt.charToDigit()" in my function

1558991321
mq32
is the error type automatically expanded?

1558991331
andrewrk
what do you mean expanded?

1558991341
mq32


1558991362
mq32
my assumption was that this would not compile as my error union does not contain InvalidCharacter

1558991386
scientes
yeah it wont

1558991399
mq32
huh

1558991415
andrewrk
you'll get an error message explaining that you'll need to address the InvalidCharacter error - try it out

1558991417
mq32
oh, it only won't compile if the function is actually used

1558991430
scientes
^^^ zig doesn't even look at code that isn't used

1558991436
andrewrk
right - zig has lazy analysis. this is a core design premise that is relied on for many things

1558991449
mq32
oh well, didn't think of that

1558991506
scientes
just like with similar C optimizations you can generally work around it with volatile and extern

1558991539
scientes
except that zig doesn't even

1558991549
scientes
only tokenizes it

1558991569
andrewrk
it does parse it

1558991586
scientes
i thought it could just get the top-level declaration

1558991592
mq32
but no semantic evaluation?

1558991603
andrewrk
mq32, right

1558991616
scientes
i guess you have to because it is infinitely recursive

1558991629
scientes
but you could add that to the tokenizer

1558991660
mq32
okay, next thing: can i trivially compare two structs beeing equal?

1558991664
mq32
or do i have to memcmp?

1558991675
scientes
mq32, mem.compare

1558991701
scientes
which is quite similar to memcmp, but allows arbitrary length types instead of just bytes

1558991739
hryx
andrewrk: I'm trying to track down a crash I've caused in translate_c.zig. Is my assumption correct that it is safe to cast back and forth between ZigClangStmt * and ZigClangExpr * using @ptrCast()?

1558991752
andrewrk
hryx, yes I believe that is correct & safe

1558991763
andrewrk
I think Expr is a subclass of Stmt in clang API

1558991771
hryx
k, great. I'll push what I've got in a sec and think some more

1558991781
andrewrk
you can assert that it's safe by having an unused function in zig_clang.cpp which implicit casts one to the other

1558991806
andrewrk
do yo usee what I mean? take advantage of c++ semantics to make it be a compile error if the class hierarchy disagrees with you

1558991817
hryx
oh cool, ok!

1558991835
andrewrk
I don't remember what the syntax for that would be in C++ offhand but in theory it should be possible

1558991920
mq32
scientes, mem.compare is for slices, not single objects

1558991934
mq32
i want something like "RGB(…) == Color { … }"

1558991943
scientes
mq32, use @bytesToSlice

1558991944
hryx
this question also arises partially because I'm wondering if I need to create e.g. `ZigClangImplicitCastExpr_getBeginLoc` when `ZigClangExpr_getBeginLoc` already exists, of I can just cast willy-nilly

1558991967
hryx
not that I mind the extra typing

1558991971
andrewrk
mq32, only some types in zig do not provide well defined memory layout. it would give you undefined results (not undefined behavior) to use memcmp with them

1558991980
andrewrk
*only some types in zig provide well defined memory layout

1558991992
mq32
yeah, that was my thought as well

1558992020
mq32
what i want to do is this:

1558992020
mq32
assert((try RGB("#123456")) == Color { .R = 0x12, .G = 0x34, .B = 0x56 });

1558992037
scientes
that needs a helper function

1558992049
scientes
that returns the enum mem.Compare

1558992055
scientes
or maybe just true/false

1558992073
mq32
okay, so something like color_compare

1558992109
scientes
colorEqual

1558992134
scientes
but you could just have RGB return Color, and then you can just use ==

1558992161
mq32
RGB returns error{…}!Color

1558992169
scientes
then unwrap it

1558992174
mq32
and i assumed that try either fails or returns Color

1558992183
scientes
errors are values

1558992185
scientes
this isn't c++

1558992203
mq32
yeah, i know

1558992237
mq32
but my assumption was "try x" == "if(x) |v| v else |err| return err"

1558992295
gamester
Can someone explain to me what whitequark's issue with zig is? Clearly being explicit about whether overflow is intended or not is strictly superior, without it you won't even realize when your code is behaving bad! Is the issue about the "undefined behavior" label and not knowing what behavior the software will exhibit IF unintended overflow were to occur in release-fast mode?

1558992321
mikdusan
gamester: unfortunately i cannot. that gripe is beyond my understanding

1558992385
mq32
scientes: the error i'm getting is

1558992387
mq32
error: operator not allowed for type 'Color'

1558992389
mq32
where operator is ==

1558992430
andrewrk
gamester, I believe the argument is that people will choose ReleaseFast in practice, and there will be bugs in practice, and so in practice zig will cause the existence of undefined behavior security exploits

1558992442
andrewrk
it's a reasonable concern

1558992473
mikdusan
mq32: inside Color define fn eql. then do (try RGB(...)).eql( Color { .R = 0x12... } )

1558992585
jjido
will there actually be bugs? that's only if the codepath wasn't tested in normal mode right?

1558992608
mq32
jjido, you cannot possibly test all cases where an addition of two i64

1558992633
mq32
but some people want

1558992634
scientes
mq32, but there are often bugs whether it is UB or not

1558992649
scientes
when they overflow or underflow

1558992659
mq32
yeah, but with ReleaseSafe it isn't UB, isn't it? :P

1558992666
scientes
so it isn't

1558992673
scientes
its defined to crash

1558992688
mq32
i like that, btw!

1558992694
mq32
i can decide between performance and security

1558992728
jjido
performance isn't exactly bad with ReleaseSafe

1558992745
scientes
especially if key parts have the safety turned off

1558992751
jjido
but yeah, people will go for ReleaseFast

1558992771
shritesh
Rename release-fast to release-unsafe and release-safe to release. Then, Zig becomes Rust.

1558992786
gamester
andrewrk: Ah okay, so the compiler 'knows' that a variable will never overflow and will optimize based on that, and it's this optimization that makes code more brittle/dangerous in the face of bugs?

1558992790
scientes
rofl shritesh

1558992792
andrewrk
one disconnect here is that I consider unintentional integer overflow to be a bug on par with undefined behavior

1558992799
scientes
^^^

1558992807
scientes
it is

1558992825
gamester
andrewrk: compiler meaning llvm

1558992849
scientes
I use SaturatingAdd and SaturatingMultiply defensively when coding LLVM

1558992860
scientes
and I had some patches to add those to zig....

1558992876
hryx
educating people through the official docs may be important ReleaseSafe should become the norm. Especially if you emphasize that non-security-critical hot loops can have checks disabled with a builtin fn call

1558992889
hryx
*if it should become the norm

1558992896
andrewrk
shritesh, there's an important distinction - Rust's release-fast mode still benefits from the safety features

1558992904
andrewrk
...except for integers

1558992931
andrewrk
scientes, btw you are of course welcome to resubmit any patches from closed PRs - just make it easier to merge them

1558992939
mq32
i would appreciate not kicking out a "release fast" or "release unsafe" or whatever because sometimes even that teeny tiny bit performances matters

1558992941
scientes
yes, I am just doing so much right now

1558992982
shritesh
andrewrk: but that comes at a perf penalty, right?

1558993023
scientes
shritesh, but rust has a goal to have the code be secure from itsself

1558993029
scientes
which isn't really a goal for zig

1558993041
andrewrk
shritesh, rust's borrow checker runs at compile time only. its release mode has defined integer overflow to be twos complement wraparound in release; trap in debug

1558993089
andrewrk
zig is a general purpose programming language. that makes release-fast appropriate for plenty of use cases

1558993104
mq32
if i want to have a member function with mutable self, do i have to "pointer" the self?

1558993111
andrewrk
I agree hryx

1558993121
andrewrk
yes mq32

1558993167
mikdusan
mq32: if it helps quick mockup;

1558993201
shritesh
Isn’t that what the wrapping operators do in Zig though?

1558993250
andrewrk
shritesh, the wrapping operators do the same thing in all modes

1558993261
mq32
mikdusan, thanks :)

1558993296
shritesh
So how is Zig less safe? Sorry if I’m sounding stupid.

1558993412
mq32
does Zig forbids tabs on purpose?

1558993470
hryx
mq32: yep, see this for historical context:

1558993498
mq32
:(

1558993552
andrewrk
mq32, quick poll question: are you using an editor with zig fmt on save?

1558993581
mq32
using visual studio code, but zig fmt currently failes because of syntax error

1558993586
mq32
not having any "auto" stuff enabled

1558993628
hryx
If anyone has a moment and the desire to help me debug something, I would greatly appreciate some eyes. Can't quite identify what is causing this to crash:

1558993648
andrewrk
hryx, I'll try to get to it today

1558993655
andrewrk
I have a lot of PRs to look at

1558993665
hryx
thanks a ton. I know you have a bunch on yer plate

1558993671
scientes
why can't volatile be used on values, only pointers?

1558993722
hryx
isn't it because volatile describes guarantees of a load/store?

1558993736
scientes
C allows it on values

1558993749
hryx
oh yeah

1558993767
scientes
and i'm doing some float stuff where i need to force a calculation

1558993768
andrewrk
you can always cast your value pointer to a volatile one

1558993783
scientes
its just annoying to have to use a pointer

1558993798
scientes
because float calculations can have side-effects in setting cpu status bits

1558993799
andrewrk
if you're using volatile for something other than memory mapped I/O it's a code smell

1558993843
andrewrk
zig currently has no way to accomplish those side-effects except through inline assembly

1558993851
scientes
volatile does it

1558993866
scientes
oh I C

1558993877
scientes
yeah you need volatile on values

1558993889
andrewrk
I'm not sure that's correct

1558993906
andrewrk
well maybe that's needed, but it would introduce semantics

1558993918
andrewrk
what are these status bits?

1558993925
scientes
overflow, underflow and nan

1558993944
andrewrk
can you type up a use case / proposal?

1558993950
scientes
yeah

1558993972
mq32
are arrays packed by default?

1558993976
scientes
no

1558993982
scientes
oh array

1558993985
scientes
i was thinking structs

1558994029
scientes
mq32, @sizeOf

1558994041
mq32
?

1558994063
scientes
mq32, that gives you the packing of the array

1558994088
andrewrk
shritesh, so the main feature of rust is that the safety is at compile time, which means you get it in both debug and release mode

1558994119
andrewrk
in exchange, rust rejects some perfectly fine code that it cannot prove is safe

1558994148
mikdusan
doesn't rust have -ffast-math option too?

1558994177
shritesh
Yeah. My only concern was with the overflow issue.

1558994184
andrewrk
assuming that zig manages to solve use-after-free etc in release-safe mode, there will not be a difference in safety between zig release-safe & rust release modes. however the rust release build will be much faster

1558994222
andrewrk
oh if you're only talking about integer overflow, rust and zig are basically identical, except release-safe of zig has integer overflow checks enabled

1558994433
gamester
andrewrk: Identical? Isn't integer overflow defined in rust, meaning that x + 1 > x can't be assumed to be true? Whereas in Zig it can, and this is what whitequark is complaining about?

1558994476
andrewrk
gamester, oops, correct - I misspoke above

1558994547
mq32
have you ever heard the story of PGM image the gray? :P

1558994552
mikdusan
hryx: where is 2569 crashing?

1558994563
mq32
now that my basics are standing, let's do some colors! :)

1558994667
hryx
mikdusan:

1558994677
mq32
is there an option to do a range-based loop like for(1...100) ?

1558994795
mikdusan
hryx: i just cloned branch:translate-c-userland (3bbee1ba2e758d4bb5ea7d03b27133ffd6e4e9e2) built and ran a skip-non-native, skip release `zig build test` on macos and linux. no crash.

1558994818
andrewrk
hryx, have you tried using valgrind?

1558994826
hryx
mikdusan: can you run this: `bin/zig translate-c-2 <some C file>`

1558994833
hryx
good idea, I'll try valgrind

1558994882
hryx
mikdusan: I just updated the gist with the C code that triggers the crash for translate-c-2

1558994891
mikdusan
ah yes that triggers.

1558994949
mikdusan
which os are you on

1558994971
shritesh
mq32: no. Range-like syntax is only used in slices.

1558994977
hryx
linux mint kernel 4.15.0

1558995000
mq32
so a c-style for loop is more work?

1558995007
Arghblarg
Hi, a follow-up to my questions from yesterday -- don't know if this sheds any new light but I was able to somewhat mitigate my issue using @inlineCall() -

1558995050
hryx
mikdusan: that fault address looks suspiciously like a stack addy maybe?

1558995071
andrewrk
Arghblarg, your getStdOut code is victim of

1558995092
andrewrk
this is an example of use-after-free that we've been discussing today

1558995097
Arghblarg
OK, I had been told this might be the case, just wanted to be sure & post a simplified example. Thanks!

1558995157
Arghblarg
Amazing stuff BTW, really excited at the prospect of being able to use zig in future projects. Thanks.

1558995165
hryx
mikdusan: The `it.*` on line 352 is suspect to me. I'll step debug through this. thanks for your eyes BTW

1558995166
shritesh
mq32: my understanding is that for is used for iteration over existing items. While is better here and has some neat capabilities compared to C

1558995230
mq32
shritesh, my point was more "how can i count from 0 to n-1 in the least amount of characters"?

1558995274
shritesh
mq32: while is probably the only way to do it.

1558995316
mq32
for(Range(usize, 0, 240)) |y| { … }

1558995317
mq32
... :D

1558995367
mq32


1558995374
mq32
okay, so here's my stuff for today

1558995385
shritesh
I didn’t know Range was a thing in zig 😅

1558995401
mq32
shritesh:

1558995515
andrewrk
mq32, the "least amount of characters"  use case will cause you a lot of friction in zig

1558995553
mq32
yeah but a stupid iteration from a to b is one of my most usecases

1558995572
mq32
and declaring a variable in outer scope (before the while) and then writing a while loop bugs me

1558995690
mq32
something like

1558995802
andrewrk
for loop ranges is rejected, not gonna happen

1558995919
mikdusan
can we start a contest for worst use of zig code ever? here's 0 to 99 :) `for ([]usize{0}**100) |_,i| { .. }`

1558996028
hryx
slap an inline on that for, grab that blue ribbon

1558996087
scientes
iterators in c++ are a horror

1558996112
mikdusan
yes and to prove the point: they should change the name to `++c`

1558996202
mq32
andrewrk, on your comment

1558996227
mq32
i see one problem with the code: you spill the loop variable (only semantically useful in the loop) in the outer scope of the loop

1558996257
mq32
so i have a variable i of type usize i can't reuse in a loop behind if i want to change the type (or reuse the variable in another subscope)

1558996284
scientes
yeah its a minor nuisance, but it is fine

1558996289
mq32
{ var i : usize = a; while(i < b) : (i += 1) { … } } would be semantically preferrable

1558996290
andrewrk
mq32, every variable in zig is spilled if you don't use braces

1558996295
hryx
mikdusan: I am so confused. I stepped through, and as soon as it calls ZigClangImplicitCastExpr_getCastKind(expr) it crashes -- it doesn't even step into that function. The arg `expr` looks like a totally normal address.

1558996297
shritesh
I had a TA who bragged about knowing how to implement C++ iterators correctly.

1558996312
mq32
andrewrk, yeah but i like to have my variables in the closest scope possible

1558996313
andrewrk
hryx, that's a sign that the ABI is incorrect

1558996314
scientes
shritesh, rofl

1558996326
mq32
that's why i love the C++17 feature of "initializer if":

1558996332
mikdusan
hryx: for me i'm getting what looks to be infinite recursion

1558996347
andrewrk
hryx, e.g. check zig_clang.h file against clang.zig

1558996348
hryx
andrewrk: would that mean an incorrect cast somewhere maybe?

1558996349
mq32
if(auto it = vector.find(…); it != vector.end()) { /* do stuff with it */ }

1558996363
hryx
ok. I've double checked a few times but it's gotta be somewhere in there

1558996365
scientes
mq32, that is horrible, you don't even know the type of it

1558996370
andrewrk
hryx, ah, sorry it was just a guess

1558996385
hryx
mikdusan: I get that recursion when it doesn't crash (another problem to solve afterwards)

1558996406
scientes
mq32, these are not real problems

1558996407
mq32
scientes, zig does the same thing ;)

1558996468
shritesh
mq32: not use, implement the STL iterator “interface”

1558996483
hryx
hm, this is the first function to return a `ZigClangCK` enum

1558996494
mq32
shritesh, nah, i'd rather built my own :D

1558996497
andrewrk
hryx, you can try testing it in translate_c.cpp first

1558996511
mq32
have enough c++ experience to know that iterators are broken beyond repair

1558996513
andrewrk
and make sure the tests still pass

1558996529
hryx
roger, I'll check that

1558996544
mq32
scientes: yeah, but my inner semantic fetishist tells me to "not use the same variable for a different job again"

1558996551
andrewrk
(that's still a worthwile change too, to make translate_c.cpp closer to using the C API)

1558996573
andrewrk
mq32, if we wanted to actually solve that problem we'd need something like `deletevar` to end the scope of a variable without braces

1558996577
scientes
mq32, its safe in zig, unlike C, because you can't reuse the same name in a nested scope

1558996599
mq32
i have a problem with the "inverse" thing

1558996605
hryx
BTW `ZigClangCK` is supposed to be `clang::CastKind` right? that's the only instance of the name not matching up exactly

1558996607
andrewrk
but I think `deletevar` would be Too Complicated

1558996614
mq32
nah, no deletevar

1558996632
mq32
use the same variable (actual instance) for different semantic task (like iterating in another loop)

1558996635
hryx
all tests pass for translate-c

1558996644
scientes
you just use braces {}

1558996651
mq32
yeah, probably

1558996654
scientes
i've had reviewers complain about them, but they work

1558996682
mq32
damn, i need to get some sleep. it's 0:37 already

1558996696
mq32
i'll be back and built my raytracer!

1558996702
mq32
*build

1558996752
andrewrk
hryx, so that eliminates zig_clang.h and zig_clang.cpp as culprits

1558996760
hryx
oh, sorry, I understand your suggestion now -- use that new function in the C++ code

1558996762
hryx
I'll try now

1558996764
andrewrk
ahh yes

1558997314
emekankurumeh[m]
mq32 see std.meta.eql

1558997375
emekankurumeh[m]
mikdusan that's a problem with mingw itself I think. zig build has the same error

1558997406
hryx
ok, replaced the `stmt->getCastKind()` with `ZigClangImplicitCastExpr_getCastKind()` everywhere. All translate-c tests pass still, no crash

1558997424
hryx
so perhaps a bad @ptrCast?

1558997618
hryx
pretty sure this pub extern fn is correct

1558997835
mikdusan
emekankurumeh[m]: re: ctrl-c issue?

1558997976
mikdusan
i'm just chalking it up to msys2 subsystem job control and signals are not applicable to non-msys2 subsystem binaries

1558998341
emekankurumeh[m]
yeah crtl- c doesn't seem to kill child processes

1558998551
hryx
one more possibility about this crash. I did introduce a @fieldParentPointer, maybe someone can check I didn't screw that up:

1558998606
scientes
i'm look at a crash too

1558998619
scientes
I patched zig before to include the file name in source_node

1558998626
scientes
but i forgot where my patch went

1558999248
andrewrk
hryx, I'm having a look now

1558999297
hryx
awesome

1558999813
andrewrk
hryx, what's your example c file?

1558999845
hryx
andrewrk:

1558999902
andrewrk
ok I can repro the segfault

1558999921
hryx
the C is taken from one of the existing test cases BTW

1558999930
andrewrk
valgrind has a lot to say

1558999975
hryx
oh dang, it says stack overflow for me. I didn't look close enough last time -_-

1558999984
andrewrk
the first reported issue is

1559000035
hryx
interesting, I don't get that error

1559000088
hryx
I wonder if this is related to the infinite recursion problem that still exists on this branch

1559000207
andrewrk
I haven't had success running valgrind on platforms other than linux

1559000244
hryx
I hear it doesn't work on newer macOS releases. Either way, I'm on linux today too

1559000402
andrewrk
hryx, this seems to imply that the SegmentedList is undefined, at translate_c.zig:788 - e.g. c.tree.root_node.decls

1559000431
andrewrk
but it looks to me like it's getting initialized at line 160

1559000596
andrewrk
but indeed the actual crash comes from  Address 0xaaaaaaaaaaaaac8a is not stack'd, malloc'd or (recently) free'd

1559000630
andrewrk
ooh I know how to find this. check this out hryx. we're going to set a watch point on root_node.decls after initialization

1559000655
hryx
ooh okdk

1559000821
andrewrk
hryx, oh, hm, even with gdb I'm getting a segfault with a different trace than you are

1559000914
hryx
andrewrk: I added one more thing, is this suspicious?

1559000922
hryx
the root_node file

1559000930
hryx
that's post-initialization

1559000972
andrewrk
that looks fine - but I realized I'm not reproducing your issue - I'm seeing something different

1559001009
hryx
oh boy, dang. Yeah I think you and I are getting different errors in valgrind. Mine only has stack overflow, no jump on uninitialized

1559001064
andrewrk
i'm also getting something different from gdb

1559001077
andrewrk
did you push everything to hryx/translate-c-userland ?

1559001118
hryx
I have one more small change I think - I'll push

1559001223
hryx
latest is there now. I did also have changes where I was using ZigClangImplicitCastExpr_getCastKind instead of expr->getCastKind(), but I'm testing again with what's on GitHub just in case

1559001272
hryx
same results

1559001298
hryx
(my local working tree is what you see now)

1559001521
hryx
FWIW `root_node.eof_token` does not seem to get set ever

