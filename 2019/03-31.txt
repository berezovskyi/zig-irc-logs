1553995940
scientes
something is broken regarding error sets in comptime

1554002366
scientes
my program crashes writing to 0x1 despite the mmap() succeeding, if I add a debug statement printing the address, the bug disappears :/

1554002447
scientes
there is some over-eager pruning going on somewhere--also doesn't show up in debug mode

1554052110
mikdusan
on zig command line; would like to pass args to main run by “zig run [source]” . i don’t see any command-line options for that

1554052192
andrewrk
mikdusan, I think I broke that, sorry. It's supposed to be any args after the positional [source] argument

1554052258
mikdusan
do you think there is value in creating a consistent sub-process args syntax a’la unix style? double-hyphen

1554052270
mikdusan
zig run main.zig — 1 2 3

1554052273
mikdusan
or

1554052285
mikdusan
zig test main.zig —test-filter … — 1 2 3

1554052322
andrewrk
tests don't have the capability of accepting user args

1554052392
andrewrk
as for the other one, I think if it were `zig run` it would make sense to do the double hyphen. but if we do

1554052562
andrewrk
I'm reconsidering though about zig run. not sure what to do. anyway in the meantime mikdusan if you are thinking of submitting a pull request to enable passing runtime args to zig run, I would merge it however you decided to do it

1554053901
mikdusan
i need to install a linux vm to investigate this further. /usr/bin/env on macos is splitting on whitespace.

1554055725
hryx
andrewrk: I marked #2144 as ready -- do you want me to squash & rebase into 1 commit before it's merged?

1554055738
hryx
Not sure which way you prefer in general

1554056615
hryx
Sorry, I'll comment on the PR. Just realized I'm fragmenting the conversation by asking here

1554056854
andrewrk
hryx, nice work

1554056896
hryx
thankee, very happy to finally have made a contribution to the code

1554059277
mikdusan
i think a lot of #!/usr/bin/env use is unecessary. if you need to modify ENV vars then it makes sense. unfortunately /usr/bin/env itself is creating the dilemma because between linux’ /usr/bin/env, gnu’s newer version, and bsd older/newer… it’s a bit of a mess.

1554059302
mikdusan
funny thing is; this works predictably on both linux and macos. —> #!zig run -one -two -three

1554059332
andrewrk
mmm that does not match my experience

1554059355
tankf33der
andrewrk: ping

1554059360
andrewrk
the args passed would be "-one -two -three", rather than the expected "-one" "-two" "-three"

1554059382
tankf33der
o/

1554059387
andrewrk
hi tankf33der

1554059417
tankf33der


1554059424
tankf33der
there is compile error

1554059442
mikdusan
`#!zig run -one -two -three` ends up as —> arg[0] = “run -one -two -three” and arg[1] = “zig” or if zig is found in path “/path/to/zig” . so 2 args.

1554059462
mikdusan
the docs i found on this is before freebsd 6.0, this 2-arg behavior didn’t exist. i don’t know how far back linux 2-arg behaviour goes.

1554059471
andrewrk
tankf33der, I suggest to upgrade to master branch rather than 0.3.0. because 0.4.0 is to be released in 8 days from now

1554059509
tankf33der
now i just compilation.

1554059516
tankf33der
now i just need compilation.

1554059527
andrewrk
tankf33der,  I suggest you achieve compilation with master branch rather than 0.3.0

1554059544
tankf33der
ok, i see.

1554059557
tankf33der
will it help here ?

1554059559
andrewrk
yes

1554059561
tankf33der
recompiling.

1554059565
tankf33der
i see.

1554059567
andrewrk
because of C pointer types

1554059579
mikdusan
the interesting thing is this DIRECT shebang is stil workable even before 2-arg behavior. if it does split, it’s still consistent in that the LAST arg would always be the arg[0] to shebang line.

1554059638
mikdusan
so /usr/bin/env compats aside, from what it looks like #!zig would work. obviously there is no mechanism for ENV var modifications.

1554059683
andrewrk
tankf33der, this example can help you see how to update build.zig:

1554059707
hryx
Is there an example of another compiled language which supports shebang?

1554059711
andrewrk
now zig compiles C code with libclang rather than system C compiler

1554059718
andrewrk
hryx, D

1554059722
hryx
Ah

1554059744
hryx
I'm still curious if it's actually useful

1554059770
andrewrk
I'm starting to think it is not very useful

1554059812
tankf33der
sleep. thanks.

1554059881
mikdusan
all the details aside, yeah i don’t find it too useful. neat tho.

1554059957
mikdusan
i’ll move forward on a pr to enable passing runtime args to zig run

1554060188
hryx
8 days. we got lots of time to remove stuff before the next release °u°

1554060427
andrewrk
yes, time to remove a lot of bugs

1554061685
andrewrk
welcome to master branch

1554064971
mikdusan
what looks better in usage?

1554064984
mikdusan
—> run [source] [—] [args]

1554064997
mikdusan
—> run [source] [— [args]]

1554065027
hryx
don't they mean different things?

1554065057
andrewrk
mikdusan, it's a bit confusing because your IRC client is collapsing -- into —

1554065062
mikdusan
oh.

1554065115
mikdusan
so it’s not 100% required, but i’d like a way to show that double-hyphen needs to proceed executable arguments.

1554065120
mikdusan
in help usage.

1554065126
andrewrk
ahh in usage text

1554065133
andrewrk
the second one I think is clearer

1554065204
mikdusan
(i did a typo.  proceed should be *precede). ok i’ll go with second one.

1554066077
andrewrk
thanks mikdusan

1554067278
shawn_
mikdusan, splitting in sh is effected by the IFS environment variable, just a heads up

1554068121
hryx
On master, when I make a test fail, it spews a stack trace forever, seemingly in a loop

1554068127
hryx


1554068133
hryx
is this known?

1554068145
hryx
doesn't matter what test

1554068252
andrewrk
uhh I think that's a new bug

1554068262
hryx
daym

1554068279
hryx
I noticed last night while working on the column alignment ticket. I get it for both macOS and linux

1554068289
andrewrk
it's probably in std.debug.writeStackTrace

1554068313
andrewrk
00d8f4a1bb634ec5b0569e6ff6c2679ade2bd6b0 is suspect

1554068328
emekankurumeh[m]
i don't think it's an infinite loop

1554068358
emekankurumeh[m]
it's just a really long stack trace

1554068366
hryx
want me to see how long it goes?

1554068372
andrewrk
I'm pretty sure there's a bug. the most frames it should ever print is 32

1554068375
emekankurumeh[m]
hmm, on second glance it just loops printing the stack trace

1554068388
emekankurumeh[m]


1554068396
andrewrk
this is also related to

1554068645
hryx
I'll make a ticket real quick

1554069055
hryx
it has been did

1554070014
emekankurumeh[m]
hryx: you'll need to update that second example because that build got deleted

1554070048
hryx
oh, wack

1554070067
hryx
it was there a minute ago! I'll see if I can find another (or just remove it)

1554070074
andrewrk
build logs are ephemeral

1554070093
hryx
aren't we all

1554070112
emekankurumeh[m]
is this a problem with zig or the testing api

1554070336
hryx
ok, I fixed the link

1554076119
scientes
yes agree

1554076132
andrewrk
scientes, we already have robust futexes in std/mutex.zig

1554076135
andrewrk
have you looked at the code?

1554076163
scientes
I wrote that linux code

1554076169
hryx
more juicy fmt fixes

1554076178
andrewrk
yes I thought so

1554076189
andrewrk
so what's this about robust futexes for linux then?

1554076202
scientes


1554076211
scientes
its mutexes between processes

1554076245
scientes
because otherwise when a process dies it still holds the locks

1554076262
scientes
this allows the kernel to release its locks when it dies

1554076428
mikdusan
“robust” as in the OS guarantees some kind of unlock/cleanup

1554076445
scientes
exactly

1554076508
andrewrk
zig does not currently have a cross platform abstraction for a mutex shareable between processes

1554076533
andrewrk
nor does it currently have an abstraction for a linux-specific mutex shareable between processes

1554076544
andrewrk
ok, now I understand scientes, you are proposing such a thing

1554076564
scientes
yeah, it doesn't make sense to share between processes unless you make them robust

1554076575
mikdusan
scientes: can u point me to the issue/proposal

1554076600
andrewrk
agreed. note that current mutex implementation is robust, however, since it is not shared between processes, there is no problem with resource cleanup

1554076679
andrewrk
hryx, looking now

1554076694
hryx
tite

1554076748
scientes
mikdusan,

1554076779
andrewrk
scientes, that's not a proposal for an abstraction for mutexes shared across processes

