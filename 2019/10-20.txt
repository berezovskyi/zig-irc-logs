1571539131
rifkik
Hello Everyone

1571539350
pixelherodev
hi

1571543138
tgschultz
ntgg, you can just for loop over slices: for(my_slice)|item, index| { ... }

1571543227
pixelherodev
Is the repo on git.sr.ht abandoned?

1571560975
daurnimator
mq32: right. but if that function has side effects....

1571561018
mq32
daurnimator: can comptime functions have side effects?

1571561026
mq32
ah well

1571561032
mq32
probably could modify a comptime var

1571561043
daurnimator
yep

1571561049
daurnimator
or e.g. @export someting

1571561052
mq32
this is a bit creepy

1571561057
mq32
:D

1571561110
mq32
hm. i'm trying to hack together some basic markdown renderer

1571561125
mq32
i looked at the spec for common mark because i thought that would be reasonable

1571561131
mq32
it is not. :D

1571562375
mq32
daurnimator, do you think it's sane to assume that programmers write valid markdown? :D

1571562414
daurnimator
mq32: this sort of thing I usually use a peg engine....

1571562465
mq32
i don't think PEG can express markdown

1571562545
mq32


1571562547
mq32
whereas

1571562559
mq32


1571562560
mq32
and

1571562569
mq32


1571563981
daurnimator
mq32: lunamark is peg based IIRC.

1571564153
daurnimator
mq32:

1571564208
mq32
huh crazy

1571564469
mq32
ah. lpeg can do backcaptures

1571564475
mq32
didn't know that

1571565182
mq32
my hacky parser also works now

1571565206
mq32
support for links, images and internal refs is still missing, but the "rest" of my planned feature set works

1571566539
pixelherodev
Weird Zig bug with my kernel: if try/catch are used in kmain, backtracing fails

1571566569
pixelherodev
Weirdest part is, this happens even with a catch that literally never triggers

1571566595
pixelherodev
Fortunately, once i realized the cause, it's really easy to work around :P

1571566801
mq32
if you "try" in your entry function, it will probably fail because of an invalid return type

1571566998
pixelherodev
Correction: if I do, for instance, `_ = serial.setup() catch null;` backtracing fails

1571567025
pixelherodev
If I change the return type of serial.setup to bool and have it catch memory allocation errors internally, suddenly backtracing works again

1571567039
pixelherodev
It's very easy to demonstrate the causal link

1571567083
pixelherodev
Oh yeah - on that note, my kernel now supports serial using a stream opened with `std.fs.File.openWrite("/dev/ttyS0")` :D

1571567126
pixelherodev
But yeah, even just writing a shell function that does `catch return` and calling that works

1571567145
pixelherodev
As long as I don't have `catch` in kmain, it's fine

1571569926
pixelherodev
These stack traces are amazing though

1571569956
pixelherodev
Deliberately set a slice too small to read just to see the stack trace :P

1571597209
andrewrk
pixelherodev, nice. no color though?

1571597218
andrewrk
you can also use @panic("blah")

1571598609
nrdmn
speaking of that topic... std currently expects stderr to be a file, i.e. something that has a file descriptor and implements a file interface. in UEFI, file handles and character devices have different interfaces. a write operation on a file is a completely different operation than a write on stdout or stderr.

1571598682
nrdmn
should we just have a wrapper structure around file descriptors for uefi that contains a flag whether it's a regular file or something else, which then decides internally which interface to call?

1571599273
andrewrk
on posix std.os.fd_t is i32, on windows std.os.fd_t is std.os.windows.HANDLE. Is there a sensible value that fd_t could be for UEFI?

1571599521
nrdmn
andrewrk: simply a pointer to the struct representing the file or character device would come clostest to a "file descriptor"

1571599543
nrdmn
but a write() would have to do different things to write to a file or to a character device

1571599555
nrdmn
so we'd have to put type information on that pointer

1571599601
andrewrk
so it could be a tagged union

1571599796
nrdmn
that could work

1571601091
riba
what does "pointer type child x cannot cast into pointer type child y" mean

1571601142
riba
i re-declared a struct i need to pass to C code because annoyingly some things were not const there and i just wanna pass static strings

1571601161
riba
otherwise i just copied the generated definition so it should fit

1571601932
andrewrk
riba, that is telling you why the types don't match

1571601940
andrewrk
more notes might follow

1571605943
riba
andrewrk: thanks, but it seems i simply was not paying attention. i cast the wrong variable and imagined the output to be different from before

1571605967
riba
too tired for this rn, i think :D

1571606152
pixelherodev
andrewrk, only color there is foreground/background color; I'm not doing anything fancy just yet

1571607213
andrewrk
someone added a zig benchmark here and put mmap calls in the hot path ðŸ¤¦

1571607301
pixelherodev
That's...

1571607364
andrewrk
if zig is below C in any benchmark, it's a bug in the code somewhere

1571607373
andrewrk
I'm not kidding

1571607552
pixelherodev
On a different note, thanks for reminding me about `catch unreachable`

1571607566
pixelherodev
A lot more useful in a kernel where a lot of operations can

1571607612
andrewrk
yeah. use it with caution, but it definitely has places where it is the correct thing to do

1571607693
pixelherodev
Yeah - for instance, my overridden I/O stuffs. `std.fs.File.openWrite/openRead` are guaranteed to succeed on my target, so instead of using an optional type an unwrapping whenever I want to print, I can just do `var ttyS0 = std.fs.File.openWrite("/dev/ttyS0") catch unreachable`

1571607761
andrewrk
that checks out

1571607785
fengb
Itâ€™s like theyâ€™re intentionally making zig much harder -_-

1571607798
pixelherodev
Though I'm starting to think that while this is cool, it might not be worth having to manually update my standard library periodically

1571607825
pixelherodev
Well, Zig

1571607839
pixelherodev
I spent a few days trying to program it as if it was C also

1571607903
fengb
I suppose HeapAllocator kinda sounds correct heh

1571607906
andrewrk
ugh. this person who did the benchmarks repo is a V community member. so of course they wrote a shitty zig benchmark and then ranked zig lower than v in the results

1571607922
andrewrk
when the fixed benchmark is actually faster than their reference C code...

1571607967
andrewrk
it's hard not to feel a little bit hostile when someone is being actively deceitful about performance

1571607974
jaredmm
Trying to replicate WNDCLASSA wndClass = { 0 }; in Zig turns into something like...std.mem.set(u8, ([]u8)(&wndClass)[0..1], 0), right?

1571608020
andrewrk
jaredmm, that should work, if the type checker lets you do it

1571608021
pixelherodev
Wow, yeah, did not know that

1571608051
pixelherodev
It's not just faster than the reference implementation, it's faster than the

1571608086
pixelherodev
... and unlike V, it doesn't need

1571608094
fengb
Wow

1571608173
pixelherodev
This is honestly incredibly impressive. How

1571608206
andrewrk
pixelherodev, zig is great at cross compiling right? so when you're not cross compiling, zig knows OK, this is the native target for sure, if they were cross compiling, they would have told me

1571608220
andrewrk
so it does the equivalent of -mcpu=native for the native targets

1571608225
pixelherodev
...

1571608249
andrewrk
it does this if you use zig as a C compiler as well

1571608264
pixelherodev
That - that should probably be in the docs, right?

1571608353
pixelherodev
Now the real question is how does it compare to the C example under -mcpu=native

1571608614
pixelherodev
I wouldn't be surprised if it's still faster, but it's probably closer

1571608822
pixelherodev
ah well, not important. At least, not to me. Performance is a really nice bonus, but it's probably, like, #3 or 4 on my list of favorite parts of Zig :)

1571609572
andrewrk
pixelherodev, it's mentioned here:

1571609600
andrewrk
the adjusted zig example code is faster, because they use malloc() in the hot path in the c example...

1571609611
andrewrk
the person is complaining that zig is hard to use, citing issues with allocating memory, but then goes and puts malloc() in the hot path of a base64 benchmark. it's almost like the language is providing friction for doing it wrong

1571609618
andrewrk
I should ignore this, the real benchmark game to care about is

1571609623
andrewrk
tiehuis has some work towards this:

1571610779
pixelherodev
Huh, so it is :)

1571610846
emekankurumeh[m]
for that "benchmark" couldn't we just get zig to do that at comptime, with a static buffer?

1571610901
pixelherodev
Probably, but I think that would violate the point

1571610923
pixelherodev
The point isn't "embed statically calculated base64 encoding", it's do it at runtime and see how quickly you can

1571610962
andrewrk
technically the benchmark does not actually utilize the results of the computation, if llvm were smart enough it would delete all the loops

1571611064
emekankurumeh[m]
but their example is more or less asking how fast the allocator is :/

1571611091
andrewrk
it should be called test-allocation then instead of test-base64

1571611353
andrewrk
does windows have the equivalent of AT_FDCWD? for use with NtQueryDirectoryFile

1571611539
pixelherodev
sorry

1571612122
emekankurumeh[m]
wouldn't you just get a handle for the cwd and just call it with that>

1571612226
andrewrk
emekankurumeh[m], yes but AT_FDCWD for example is an integer so it can be initialized at comptime, whereas getting the handle for cwd (which function is that, btw?) would have to be done at runtime, protected by a lock, or before main()

1571612901
emekankurumeh[m]


1571612936
emekankurumeh[m]
though you might be able to find the nt functions it calls and search from there

1571612994
andrewrk
yeah that's the best I found too

