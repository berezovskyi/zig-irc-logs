1575345008
pixelherodev
How stable is the Zig IR?

1575345037
pixelherodev
If I wanted to try writing a program that takes Zig IR and produces arbitrary output, is that feasible? Or would it be better to take the LLVM IR and process that instead?

1575345119
andrewrk
not stable at all, and that's not feasible. we don't have a binary or textual format for it

1575345643
traviss
good news. vscode is showing error squiggles now after zig fmt on save. did something change?  i upgraded vscode yesterday on debian.

1575345741
andrewrk


1575346900
traviss
looks like some recent commits about a week ago. thanks emekoi and tiehuis. nice work guys!

1575347339
pixelherodev
andrewrk, alright thanks

1575347378
pixelherodev
With `--emit llvm-ir --release-fast`, is the generated IR optimized, or is that overridden by emitting IR?

1575347881
andrewrk
yes the generated ir is optimized in this case

1575348327
pixelherodev
Perfect - working on a translater to a custom ISA :)

1575348355
pixelherodev
Not writing an official LLVM backend, because I'll probably have an easier time parsing the IR directly :P

1575348754
andrewrk
I'll hopefully have a better solution to offer you for this use case in the future, but that's bit far away

1575348877
diltsman
Why does it give an error when I assign this function "stdcallcc fn WndProc(……)" to a member of type "pub const WNDPROC = stdcallcc fn (……)"?  It says "expected type 'extern fn([*c].cimport:1:11.struct_HWND__, c_uint, c_ulonglong, c_longlong) c_longlong', found 'stdcallcc fn([*c].cimport:1:11.struct_HWng) c_longlong'"

1575348896
daurnimator
diltsman: missing 'extern'?

1575348933
diltsman
Does it need extern and stdcallcc?  I seem to remember that having an error too.

1575348986
diltsman
Using only extern compiled, but the functionality seemed to me like something wasn't working right.

1575349064
daurnimator
diltsman: where is your WNDPROC definition coming from?

1575349086
diltsman
daurnimator const c = @cImport({

1575349087
diltsman
@cInclude("Windows.h");

1575349087
diltsman
});

1575349117
andrewrk
diltsman, those definitions don't match at all, they don't even have the same number of args

1575349177
diltsman
Copy paste error...I will recompile once I finish unzipping the latest Zig.

1575349194
diltsman
pub const WNDPROC = stdcallcc fn (hwnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;

1575349211
diltsman
stdcallcc fn WndProc(hwnd: c.HWND,

1575349211
diltsman
uMsg: c.UINT,

1575349212
diltsman
wParam: c.WPARAM,

1575349212
diltsman
lParam: c.LPARAM) c.LRESULT {

1575349248
diltsman
That is the function and the function type, as in code.  If I replace stdcallcc of WndProc with extern, then it compiles.

1575349408
pixelherodev
LLVM doesn't have any multiline

1575349456
pixelherodev
Actually, i should start asking stuff in LLVM so as not to clog this chat up

1575349614
andrewrk
pixelherodev, have you found this yet?

1575349620
pixelherodev
Yeah

1575350201
diltsman
I don't know if this went through before I got disconnected: The error is expected type 'extern fn([*c].cimport:1:11.struct_HWND__, c_uint, c_ulonglong, c_longlong) c_longlong', found 'stdcallcc fn([*c].cimport:1:11.struct_HWND__, c_uint, c_ulonglong, c_longlong) c_longlong'

1575350234
diltsman
I am assigning the function to this member: lpfnWndProc: ?WNDPROC,

1575350351
diltsman
I would almost guess that the conversion to a function pointer strips the stdcallcc qualifier...

1575353332
pixelherodev
There a readUntilDelimiter that takes multiple delimiters?

1575353348
pixelherodev
e.g. strtok in C with strtok(str, "\n "); will delimit by both spaces and newlines

1575353350
fengb
I’m getting a segfault when trying to create an array larger than ~4MB. Is this due to the fixed stack size?

1575353742
pixelherodev
If I finish this LLVM IR parser, should I submit it to the standard library?

1575354271
daurnimator
pixelherodev: hmmm. what users can you forsee?

1575354288
pixelherodev
There's a Zig parser already

1575354291
pixelherodev
That's what made me think of it

1575354303
daurnimator
we have the zig parser because `zig fmt` is implemented in zig

1575354320
daurnimator
also because it's a requirement for self-hosted

1575354357
pixelherodev
It might be useful for custom backends for self-hosted, but I'm going to not worry about that anytime soon

1575354513
daurnimator
pixelherodev: if its something you see as generally useful; or as a requirement for zig 1.0 (self-hosted + package manager + any other tooling in the zig executable) then it should be in the standard library

1575355055
fengb
Bumping the stack didn't resolve it :(

1575355079
pixelherodev
fengb, heap allocate?

1575355183
fengb
Why didn't I think of that?

1575355184
fengb
lol

1575355226
fengb
Oh it must be because I'm trying to return megabytes

1575355373
fengb
Okay it's working. Thanks

1575355418
pixelherodev
np

1575355526
fengb
I blew out the heap at 10GB lol

1575356005
pixelherodev
annnnnd I ran into #3028. *Yay*.

1575356012
pixelherodev
s/8/9

1575362818
pixelherodev
There a workaround for "Assertion failed at /home/noam/Documents/Development/Builds/zig/src/codegen.cpp:5274 in ir_render_slice. This is a bug in the Zig compiler."?

1575362894
pixelherodev
Context: the existence of `std.ArrayList([]const u8).init(allocator)` causes that to show up

1575362941
pixelherodev
... or not. Argh.

1575363116
daurnimator
pixelherodev: often those sort of errors are encountered when something is already wrong

1575363198
pixelherodev
It occurs when trying to instantiate `const AttributeGroup = struct { id: usize, attributes: std.ArrayList([]const u8) };`

1575363271
pixelherodev
Huh. ... is there any reason slicing a slice would throw that?

1575363294
pixelherodev
Oh riiiight, it was an implcit casting thing

1575363328
pixelherodev
Should have been a compiler error but yeah that was a code issue

1575363600
pixelherodev
Thanks!

1575366517
mq32
andrewrk: would async/await be the right thing to schedule stuff in game logic? i would like to write my game code linear, even though it would require "background tasks" like rendering

1575366521
mq32
so my idea right now is something like

1575366541
mq32
var userResponse = await ui.showMessageBox("Please click yes or no!");

1575366949
Pistahh
mq32: I just played with async/await a couple of days ago, based on that I think your idea can work. Obviously a lot depends on the rest of your stuff

1575366989
mq32
yeah i know

1575367013
mq32
my idea is that the game logic yields to the framework and will be resumed as soon as the framework finished the action

1575367020
mq32
so like

1575367027
mq32
await movePlayer(.up);

1575367043
mq32
and this will resume after the player has moved a tile

1575367142
mq32
i still struggle with what "await" actually does

1575367219
mq32
i have understood suspend and resume, but the async/await is still a mystery to mee

1575367606
Pistahh
it may or may not make it easier to understand if in your mind you replace "frame" with "coroutine"

1575367631
Pistahh
i.e. foo = async something() makes a coroutine that can be referred to as "foo"

1575367672
Pistahh
this "coroutine" may suspend itself (waiting for something else to produce the data it needs, and that producer can use suspend to "wake it up"

1575367687
Pistahh
sorry, the producer can use "resume" to "wake it up"

1575367712
Pistahh
then this coroutine can return some walue, and "await foo" receives that result

1575367729
Pistahh
value.. bah, it is morning and I haven't reached the 3rd coffee yet

1575368243
mq32
hehe

1575368249
mq32
yeah, thats all "kinda" clear to me

1575368260
mq32
but i think i need a flow chart or something :D

1575368323
Pistahh
ugh, given the nature of the issue - things getting suspended/resumed, I can't imagine how to represent it on a flow chart in a meaningful way :D

1575368337
Pistahh
for me a flowchart would just make it worse :)

1575368348
mq32
hehe

1575368375
mq32
maybe not flowchart, but sequence diagram

1575368393
mq32
because afaik await is also a suspend point

1575368573
mq32
Snektron, btw: I've made a volume visualization tool at Uni as well:

1575368590
mq32
was a fun project, and probably the thing with the biggest data sets i've worked with

1575369099
Pistahh
mq32: yes, await essentially suspends the calling frame, and it is resumed when the await-ed function returns

1575369133
mq32
but where? :D

1575369142
mq32
that's my problem right now

1575369148
mq32
is that stored in the frame of the awaited function?

1575369766
Pistahh
I don't know how zig actually does it; if I needed to implement it the code for await-ing a function generated by the compiler would get the frame for the actual function (@frame), put it on the stack of the called function, and make the called function use that when returning to resume the calling function

1575369848
mq32
hmm

1575369864
mq32
i have to play around with async/await a bit to get a grasp on what happens when

1575370921
mq32
btw, on the discussion of safe recursion from yesterday:

1575370965
mq32
it would be possible to create a "StackFrameAllocator" that does continuous memory allocation and thus, create a reasonable stack memory layout working together with CPU architectures

1575371826
daurnimator
mq32: it should be the opposite: async/await are easy, suspend/resume are tricky :)

1575371849
mq32
usage: yes

1575371852
mq32
understanding: no

1575371853
mq32
:D

1575371867
mq32
suspend/resume are quite clear to me what they do and how i would implement that in assembler

1575371880
daurnimator
are they though?

1575372188
pixelherodev
`Variable: panic: pointer to fn (%[]u8*, %std.builtin.StackTrace*) void = VariableValue{ .Pointer = VariableValue{ .Function = LLVMIdentifier{ .global = true, .name = std.builtin.default_panic } } }`

1575372192
pixelherodev
Parser is coming along nicely :D

1575380068
paulriddle
Hello everyone. I know Zig can cross-compile C code. However I'm not sure to what extend I can control the whole process. It has default set of options for compilation and I'm not sure how I can overwrite them. So I figured it's simpler to cross-compile with Clang. I've seen how it can be done, but it used some parts from already cross-compiled GCC toolchain. I'm wondering if it's possible to avoid

1575380074
paulriddle
relying on GCC and use whatever comes with Zig instead?

1575380081
pixelherodev
It is

1575380094
pixelherodev
Most clang options can be passed directly to zig

1575380103
pixelherodev
s/most/most relevant

1575380225
paulriddle
I've seen some questionable stuff in the logs. For example I cross-compiled for MIPS with musl, and have seen musl being complied without stack protector. What if I want musl with stack protector?

1575380280
paulriddle
But it's good to know that I can pass options to clang.

1575380717
paulriddle
There has been project called The Clang Universal Driver. It seems to be dead. Doesn't Zig essentially implement it?

1575380794
paulriddle
What's the difference between libgcc and glibc?

1575380832
mq32
glibc is a C library

1575380855
paulriddle
I know that. But so is libgcc,

1575380856
mq32
libgcc is a supplement library that provides implementation for instructions that do not exist on target HW

1575380903
mq32
so for example 64 bit multiplication

1575380913
paulriddle
For clang compiler-rt is the same as libgcc for GCC?

1575380952
mq32
yeah

1575380965
paulriddle
When cross-compiling C with Zig, does it compile compiler-rt for the target platform?

1575381362
mq32
it should

1575381453
paulriddle
I cannot pass -O0 to clang via zig, I give `zig build-exe --c-source hello.c --library c --verbose-cc -O0 -target aarch64v8-linux-gnu` it says Invalid argument

1575381533
mq32
maybe you can use "zig cc"

1575381537
mq32
that's just "clang"

1575381559
mq32
it emits an object file you can use for linking with zig build-exe later

1575384517
gonzus
I know how to create a HashMap with `var map = std.AutoHashMap(i32, void).init(std.heap.direct_allocator);` -- but how do you declare a variable in a struct to hold that map? What type should it have?

1575384585
fengb
The type should be std.AutoHashMap(i32, void)

1575384599
fengb
You can assign that to a const

1575384628
andrewrk
this is the answer to paulriddle's question:

1575384696
Pistahh
andrewrk: when using "suspend" what is the purpose of its code block "parameter"? When is it executed? How is it different than just simply execute it before the suspend statement?

1575384763
gonzus
@feng

1575384773
gonzus
fengb: thanks, that works.

1575385414
Snektron
mq32: cool

1575385424
Snektron
What kind of visualization method does voxie use?

1575385445
mq32
i have implemented three styles

1575385451
mq32
(btw, it uses OpenCL)

1575385463
mq32
first style is marching cubes + OpenGL

1575385472
mq32
second style is "solid surface detection" with raymarching

1575385472
Snektron
My project was also for CT data really, but the illustris volumes proved quite nice for it too

1575385486
mq32
and the third style was raymarching with addition

1575385499
Snektron
Ah

1575385504
Snektron
Mine uses full on ray tracing

1575385516
mq32
what does "raytracing" mean in this context?

1575385535
mq32
raymarching is pretty much

1575385535
Snektron
Good question

1575385553
mq32
while(density(voxelpos) < threshold) { voxelpos += raydir; }

1575385554
Snektron
This uses voxel-based ray tracing

1575385596
Snektron
Mine is slightly more complicated

1575385617
Snektron
Basically, the ray is cast through every voxel of the input dataset

1575385662
Snektron
The distance of the intersection is calculated and based on that the color intensity of the ray through the voxel is calculated

1575385696
Snektron
Final pixel color is these simply summed for every voxel the ray passes through

1575385720
Snektron
I implemented i think 5 different tree structures

1575385728
mq32


1575385729
Snektron
Or rather, storage structures

1575385735
mq32
that's pretty much the whole magic of the algo i'm using

1575385832
Snektron
Theres uniform array, depth-first octree traversal, "efficient sparse voxel octree" traversal, rope-tree traversal

1575385844
Snektron
Oh yeah, just the naive traversal too

1575385850
Snektron
And there was another which i forget

1575385860
mq32
hm

1575385872
mq32
i remember myself of a octree traversal i implemented in OpenCL

1575385887
mq32
traversal without the requirement of a stack

1575385892
mq32
was kinda neat

1575385913
mq32
but would require too much additional memory for voxel grids

1575385985
Snektron
mq32, the integration you used doesn't quite produce the correct colors

1575386009
Snektron
Its good enough

1575386155
Snektron
Stack isnt really the end of the world

1575386164
mq32
hehe

1575386170
mq32
yeah it isn't "correct" but!

1575386176
Snektron
For bvh you can just set a pointer to the parent though

1575386177
mq32
we have postprocessing for that

1575386183
Snektron
For octrees also

1575386184
Snektron
But

1575386184
mq32
the 3D part is just for "getting a first view"

1575386202
mq32
for real inspection, you have a 2D slicing tool with finegranular settings

1575386211
Snektron
You can deduplicate the octree to make the volume a lot more compact

1575386225
mq32
that's a neat technique

1575386229
mq32
i got to go

1575386230
mq32
laters

1575386412
andrewrk
Pistahh, it has to do with multi threading. the suspend state is set upon entry to the block, so the function is considered to be suspended already, during the execution of the suspend block. this is useful if you need to for example spawn a thread that will resume the function - if it wasn't already suspended you'd have a race condition

1575386525
Pistahh
andrewrk: makes sense, thx

1575386629
andrewrk
async/await are the higher level APIs, a bit harder to get wrong

1575386648
andrewrk
suspend/resume are lower level, useful tools when writing the "guts" of your application

1575387480
gonzus
If I create a struct with an init method that allocates memory, I guess I cannot just put a `defer` in the init method to clean it up, because that defer will be called when exiting the init method, right?

1575387498
gonzus
If this is correct, can you use a defer at all to manage the memory here?

1575387625
dingenskirchen
yeah you'll need to provide a free/deinit method for your struct gonzus

1575387636
dingenskirchen
but users can `defer` that immediately after calling init

1575387662
gonzus
Ah, I see. So you transfer the `defer` call to where you are initting your larger structure? Ok.

1575389280
mq32
gonzus: there is also errdefer for when something gets wrong

1575389315
fengb
Why would release-small be 10x faster than release-fast?

1575389379
gonzus
mq32: yeah, I am aware. Thanks!

1575389459
mq32
fengb: cache

1575389465
mq32
and "order of modules"

1575389500
fengb
But... 10x

1575389503
mq32
there's a talk from this cppcon on "global optimizations" where some where just "swap those two modules in the build order"

1575389504
mq32
yes

1575389511
mq32
imagine you have a function on the hot path

1575389515
mq32
close to your currnet function

1575389520
mq32
or far away

1575389527
mq32
caches will mess up or not

1575389529
fengb
I'm benchmarking

1575389545
mq32
perf should measure that

1575389548
fengb
So this should be the only hotpath

1575389555
mq32
(cache misses and so on)

1575389590
fengb
And the difference is only 1.5k

1575390438
fengb
Bleh, I spent all night implementing a bit twiddling algorithm, and the 10 minute iterative version is better :(

1575390464
mq32
that's usually the case :D

1575391077
andrewrk
fengb, maybe you can rescue the project by introducing vectors

1575391114
fengb
wasm doesn't have simd yet

1575391265
andrewrk
oh. hmm I wonder if this is would theoretically be better with a different interpreter / jitter

1575391275
andrewrk
hard to measure perf with non-machine-code

1575391420
fengb
I haven't noticed this in real world applications so not sure what's going on

1575392595
andrewrk
fengb, I'm a little bit surprised that this is turning out to be so involved - I would have expected a page allocator to be pretty minimal

1575392740
fengb
I'm making it harder than it is :P

1575392807
fengb
I want to make sure iterating through 65536 bits wouldn't be terrible

1575393068
andrewrk
you could have another integer whose bits map to multiple of the 65536 bits, telling whether there are any 0 bits

1575393093
andrewrk
e.g. a u8 where each bit represents 8192 bits

1575393104
fengb
Yep that's the thing I just did in 10 minutes >_>

1575393110
andrewrk
nice :D

1575393128
fengb
I spent all last night doing the bit twiddling magic only to discover this is just faster for most cases

1575393135
fengb
So it's my fault for not exploring that first

1575393140
andrewrk
this is O(log32(N)), pretty efficient

1575393146
FireFox317
andrewrk: weren't you saying that you were going to stream after the AoC of yesterday? I didn't saw anything on YT :)

1575393189
andrewrk
FireFox317, yeah, I'll do it today!

1575393196
andrewrk
last night I prepared the codebase

1575393209
FireFox317
oooh nice, looking forward to it :) doing AoC day 3 now

1575393585
fengb


1575393597
fengb
So I'm guessing we're using an i32 here :P

1575393631
fengb
(Also Godbolt being back 😁)

1575394444
andrewrk
fengb, hmm that should be not too tricky of a fix

1575394474
andrewrk
ohh! nvm I see what you did

1575395563
frmdstryr
Is it possible to log the stack/return trace of an error from code?

1575395762
mq32
frmdstryr, yeah!

1575395776
mq32
just take a look at the zig startup code

1575395790
mq32
the stack trace output is actually written in zig :)

1575395867
mq32


1575395900
frmdstryr
Got it

1575395910
frmdstryr
Is there any concept of an error level?

1575395945
frmdstryr
I'm thinking of catching and loggin any "minor" errors but want to abort on a serious error

1575396100
andrewrk
frmdstryr, you may be interested in

1575396616
frmdstryr
Yeah sort of, that'd be nice

1575397760
andrewrk
argh, not being able to mix release llvm + debug zig on windows is really annoying

1575397775
andrewrk
it's such a strange limitation of msvc

1575398408
Prf_Jakob
andrewrk: Linking against LLVM statically?

1575398605
andrewrk
I've tried both ways. If you don't give the same Debug/Release configuration parameter to LLVM as you give to Zig, then MSVC spits out linking errors

1575398887
lupine
awesome, I managed to crash teh compiler :D

1575398997
Prf_Jakob
andrewrk: Yes because MSVC selects different compiler-, C- and C++-runtimes depending Debug/Release and Single- or Multi-Threading.

1575399327
lupine
but more immediately, I'm trying to use

1575399491
frmdstryr
lupine, make a copy

1575399546
andrewrk
lupine, consider the situation intuitively. why is your slice const? why does the function need a mutable slice?

1575399634
lupine
well, I just changed the function to pub fn parse(in: []const u8) and that worked

1575399640
lupine
back to the compiler crash :D

1575399977
andrewrk
Prf_Jakob, I understand why it's happening. But it's a problematic limitation that does not exist on other platforms

1575399996
frmdstryr
Can I call a function using a compile time string? like @call(T, "someFn") ?

1575400018
andrewrk
frmdstryr,

1575400051
andrewrk
you might also consider not doing that

1575400078
lupine
ah, down to a missing try, I'll see i can get a repro together. the naive attempt correctly fails

1575400696
frmdstryr
I'm trying to do if (hasFn("someFn")) @field(T, "someFn")() but it doesn't allow me :)

1575403199
tgschultz
frmdstryr, what isn't working?

1575403264
tgschultz
because in the code you've given, std.meta.trait.hasFn returns a function and you need to do this: if(hasFn("someFn")(T))

1575403281
frmdstryr
Yeah that's what I had

1575403312
tgschultz
is there an error reported?

1575403342
frmdstryr
Yea it says T has no field someFn

1575403482
protty
is someFn a T struct field (`someFn: fn() void,`) or a function inside the T struct (`fn someFn() void {}`)?

1575403486
tgschultz
weird. I can confirm something odd here with a quick godbolt session. Let me see if I can track down more because hasFn seems to be broken.

1575403508
tgschultz
In the meantime, you can use @hasDecl("")

1575403522
tgschultz
@hasDecl(T, "someFn")

1575403682
tgschultz
oh, nevermind, my issue was user error.

1575403703
tgschultz
hasFn should work as long as T has an fn decl called "someFn"

1575403752
tgschultz


1575403827
frmdstryr
hasDecl is working

1575403855
andrewrk
tgschultz, how you doing btw? what zig issue(s) are most of interest to you these days?

1575403865
andrewrk
still the vtable / interface thing?

1575403937
tgschultz
andrewrk, I've been busy outside the zig world for a while now and haven't had time to dive back in. The interface thing is still of interest to me since I think it is important to get right for a lot of reasons.

1575404053
andrewrk
good to know

1575404146
plumm
are there any special commands for building on mac os? im getting linker errors, specifically dyld_stub_binder. I've set the macos min version, linked c and set the target to gnu

1575404183
tgschultz
frmdstryr there is some confusion here caused by the use of the term "field" to refer to both declarations and instance fields. #1439 has more information.

1575404275
tgschultz
andrewrk, since that issue was closed I'm wondering if the last bit about "field" being renamed or split got lost from the todo list.

1575404353
andrewrk
tgschultz, I think that did get lost

1575404378
tgschultz
Shall I open a proposal to add it, jsut so we can keep track of it?

1575404805
tgschultz
I went ahead and did that

1575405496
frmdstryr
Has there been any benchmarks done on zig's streams?

1575405568
andrewrk
frmdstryr, yeah, llvm has a hard time optimizing them

1575405688
frmdstryr
My hello world http server is doing 300 req/s

1575406632
plumm
v_v

1575406762
companion_cube
that's not just llvm then :)

1575406992
andrewrk
plumm, people are thankful for your godbolt pull request

1575407051
frmdstryr
If I try to use a large fixed buffer I get "allocation failed" when trying to build

1575407076
andrewrk
frmdstryr, what allocator are you using?

1575407100
frmdstryr
The direct allocator which I'm guessing why it's so slow

1575407123
andrewrk
that's mmap() for every call, and munmap() for every free

1575407132
frmdstryr
Trying to use a FixedBufferAllocator but it wont let me use more than like 10k?

1575407165
andrewrk
what are you initializing the buffer with?

1575407173
andrewrk
and where are you putting it?

1575407189
frmdstryr
var buf: [250 * 1024 * 1024]u8 = undefined;

1575407252
frmdstryr
Also zig is using 22GB of Ram

1575407264
frmdstryr
so that's probably it

1575407336
andrewrk
that's a bug, it should definitely figure out not to expand that undef array

1575407336
companion_cube
frmdstryr: are you following any existing codebase for your httpd?

1575407440
frmdstryr
It's loosely based on tornadoweb

1575407522
companion_cube
the C part? hmmmm no idea what that looks like ^^

1575408326
plumm
frmdstryr: why not use an arena?

1575408328
frmdstryr
Ok using a fixed buffer it got up to 1329 req/s

1575408635
plumm
frmdstryr:

1575409519
frmdstryr
Does zig have any profiling features (other than using a timer)?

1575409631
andrewrk
no but profiling tooling that works on native binaries works on zig

1575410338
andrewrk
I'm planning to stream on zasm in about 30 minutes

1575410412
companion_cube
the stdlib docs are a bit sparse on streams, there's just these `var` types :/

1575410528
frmdstryr
Pushed the code here

1575410749
andrewrk
which release mode did you choose to test?

1575410789
frmdstryr
Just using zig build run debug?

1575410801
andrewrk
yes the default build mode is debug

1575410814
andrewrk
it looks like you have 1 arena allocator for the entire process. that's not quite what you want, I think. you probably want 1 arena per request

1575410838
andrewrk
and rather than freeing the arena, you probably want to reset it, and return it to a pool

1575410918
andrewrk
also the comment on line 1 of main.zig looks outdated :)

1575410938
frmdstryr
Ha, yes, it is far from that now

1575410971
andrewrk
another thing to keep in mind is that zig std lib integration with evented I/O is not complete. many things that are planned to be async, will instead still block

1575410994
andrewrk
for example, std.os.read is integrated with evented I/O, but std.os.write is not. this compromises the entire thing

1575411012
frmdstryr
Oh....

1575411028
andrewrk
and then there's also that zig's event loop implementation is still experimental and not good quality yet. you can see a comparison of it compared to Go:

1575411034
protty
It also looks like Application.start() runs each http handler synchronously (each incoming connection cant be accepted until the current one is finished processing and disconnects)

1575411059
andrewrk
but it's really useful to have projects like this, so we can see if they improve from making these modifications to the std lib

1575411137
andrewrk
yes I haven't found the place where it accepts a request yet, but I would expect to see an async there, something like: `async handleRequest();`

1575411256
frmdstryr
its in Application.connectionMade

1575411269
frmdstryr
Sorry Application.start

1575411306
frmdstryr
If I run wrk with a single thread and 1 connections it's about 1k req/s

1575411319
frmdstryr
with a single thread and 128 connections its around 1.7k req/s

1575411407
frmdstryr
I'm never calling "await" anywhere in start so I'm not really sure how it works at all

1575411605
andrewrk
if you've used go before, you can think of an async function call similar to a go function call

1575411642
andrewrk
go doesn't allow collecting the return value; you have to use channels for that. but zig lets you `await` the result to obtain the return value of the function

1575411708
frmdstryr
So in the loop in start it should be "async self.connectionMade(" ?

1575411737
protty
andrewrk: would it be possible for `resume` to return an option type of the async functions result (similar to rust's `std::Future::poll()`) to know when the async function completed?

1575411844
andrewrk
protty, currently, `resume` asserts that the function is suspended. that would be a departure from the current semantics

1575411890
andrewrk
there's a problem with the option type thing, because it would potentially race with the function completing and having its frame freed. the `resume` could be a use-after-free

1575411948
andrewrk
you should be able to orchestrate this manually though - with a flag that is a local variable in the function, which the suspend block makes accessible to the code that wants to resume

1575411957
andrewrk
I'm about to start streaming

1575411981
protty
what about if the function changes its status atomically: resume would do `casStrong(.Suspended, .Running)`, suspension could do `assert(Xchg(.Suspended) == .Running)`

1575411989
protty
alrighty, see you there o/

1575413392
daurnimator
frmdstryr: also have an arena per-connection

