1577752654
Snektron
VLAs are evil

1577758065
daurnimator
Snektron: howso? I need one for e.g. my allocator

1577758763
daurnimator
andrewrk: wasn't

1577762312
andrewrk
daurnimator, nah, we have zig_llvm.cpp/zig_llvm.h so that we don't have to rely on the llvm-c API wrapper

1577762335
andrewrk
the official llvm-c API wrapper doesn't keep up with the c++ API fast enough

1577762341
andrewrk
this is the main reason zig is written in C++

1577762350
andrewrk
s/zig/stage1/

1577764668
daurnimator
>  comptime parameters are in scope for the calling convention expression.

1577764669
daurnimator
makes sense

1577764675
daurnimator
though I wish it didn't :P

1577764705
daurnimator
sort of makes me want to have the `->` symbol back

1577765405
andrewrk
yeah it doesn't look amazing syntactically

1577765447
andrewrk
it is progress though. for example:

1577765672
daurnimator
as a hack.... `pub usingnamespace if (builtin.os == .windows) struct { extern stdcallcc fn debugCallback(....... ) } else struct { stdcallcc fn debugCallback(....... ) };`

1577765685
daurnimator
or whatever I meant to write :P

1577765692
daurnimator
but yeah I know why we need it

1577765712
daurnimator
andrewrk: what's next on your priority list?

1577765760
andrewrk
1. internal ir.cpp stuff to solve some technical debt with regards to comptime variables

1577765809
andrewrk
2. minimal viable implementation of #2765. possibly with  #3804 for safety

1577765843
andrewrk
3. rewrite std.fmt.format to not use a function pointer or error set. make it return an iterator of `[]const u8` items

1577765864
andrewrk
4. integrate std.os.write with async I/O

1577765908
andrewrk
5. improve robustness of async I/O in std

1577765920
andrewrk
and then there's a fork in the path, either networking/package manager, or progress on self-hosted

1577765954
andrewrk
each of these numbered items is a prerequisite for the next one

1577766046
daurnimator
thanks

1577766057
hryx
sup andrewrk ! long time no see

1577766068
andrewrk
howdy hryx! how've you been?

1577766069
daurnimator
FWIW I'm hoping to remove blockers from writing a good linux kernel module (would be great to have ready for conference in <2 weeks)

1577766092
hryx
I've missed working on zig super bad, so time to get back into it :)

1577766108
andrewrk
I can try to help with that. I see

1577766141
andrewrk
daurnimator, ah, looking at these blockers, I was planning on trying to get #3973 merged tomorrow

1577766181
andrewrk
hryx, did you see that Vexu finished self-hosted translate-c? can't wait to delete all this c++ code

1577766252
hryx
Yeah, that work was so badass

1577766258
daurnimator
andrewrk: yeah its probably worth merging #3973 sooner rather than later and fixing regressions later

1577766258
hryx
vexu is on fire

1577766300
andrewrk
daurnimator, that's a good point, but I do want to get the CI green

1577766308
andrewrk
now that I have access to all my computers, it should be easy :)

1577766309
daurnimator
true

1577766357
andrewrk
daurnimator, bitfields in translate-c in under two weeks is a stretch. can you do without?

1577766378
daurnimator
set vexu on it ;)

1577766400
daurnimator
andrewrk: not without some way to override bits of a @cImport

1577766403
andrewrk
I'll see what I can do

1577766413
andrewrk
I do want your conference to go well

1577766424
daurnimator
I don't have a formal talk planned; so it's not major

1577766432
daurnimator
Was just going to slot in for a lightning talk

1577766456
daurnimator
But also probably keep talking about zig to kernel developers; make sure we're on their radar for when the language is more stable

1577766550
hryx
Finally caught up on months of GitHub notifications and thinking of starting #1717 -- andrewrk any reason I shouldn't start that yet?

1577766557
hryx
could also warm up with some bugs

1577766582
hryx
daurnimator: oh neat, where/when are you presenting?

1577766657
daurnimator
hryx:

1577766669
andrewrk
hryx, prereq of #1717 is to re-evaluate

1577766701
andrewrk
I'll try to speed that re-evaluation along to get an accepted/rejected status on #181 to unblock you for #1717

1577766782
hryx
gotcha, I'll read that thread so I understand it

1577766840
hryx
I was catching up on (among everything else) the comments on 1717, mainly around `extern`. I think it's totally solveable

1577766880
daurnimator
isn't extern part of the calling convention?

1577766903
hryx
after digesting it, it looks like extern means a few things, one of which is a calling convention

1577766907
andrewrk
daurnimator, not after  #3977. I have a review about to press send with some more details

1577766927
hryx
it also means a data layout for struct/enum/union, and it can also mean that a value is defined externally (other object)

1577766930
andrewrk
`extern` is about to stop being related to calling conventions

1577766951
hryx
oh! sweet

1577766952
daurnimator
hryx: right. its overloaded :(

1577766957
andrewrk
I do think there are a few prereqs before it makes sense to start on #1717

1577766980
andrewrk
I'll try to get those out of your way

1577766990
daurnimator
I'd love to see #1669 accepted/rejected

1577766991
hryx
yeah, looks like there are some things that are changing. I am totally down to hold off on 1717 and help in some other way

1577767017
daurnimator
hryx: things are always changing round here ;)

1577767059
hryx
true! it's for the greater good of course :)

1577767106
hryx
daurnimator: I was eyeballing that one super hard recently. I think it is important to figure out the "interface/trait pattern" thing since it might affect the "pinned memory" proposals et. al

1577767151
daurnimator
hryx: did you see my mixin proposal?

1577767172
hryx
afraid I can't recall it - link?

1577767205
daurnimator
hryx:

1577767367
andrewrk
re: 1669 - it looks like a very popular proposal, but I have a hard time understanding the value proposition. is it different than `comptime assert(...);` in the first line of the function?

1577767395
andrewrk
because it is a user definable function, the compiler has to treat it as a black box; it wouldn't solve the error sets problem, for example

1577767451
andrewrk
I have a list of problems that the interface language feature should address (error sets being one of them). I'll make this list explicitly visible on #130 so that people can measure their proposals against it

1577767615
daurnimator
andrewrk: I've linked to 1669 from a few places where I felt it would be cleaner

1577767650
andrewrk
hryx, what kinds of things are you interested? another project which could be quite interesting would be the self-hosted assembler. it's a large project, but self-contained, and necessary for inline assembly to work for the non-llvm backend

1577767740
hryx
Ooh, that does sound fun. I should admit that I have barely touched anything like that, but of course down to learn

1577767757
andrewrk
there's a bunch of std lib legwork that has to be done for package manager - supporting various compression formats, and networking

1577767770
hryx
is that andrewrk/zasm?

1577767773
daurnimator
Re; 1717 "Roughly speaking, assigning a function to a const would equate to existing behavior, while assigning to a var would equate to assigning a function pointer." -> shouldn't they

1577767774
andrewrk
yes

1577767813
hryx
dope, I'll check out zasm for an idea if I could potentially handle something like that

1577767835
andrewrk
daurnimator, yes all functions are function pointers, and it matters whether the value is comptime known

1577767850
andrewrk
that's status quo and will remain true after the proposal is implemented

1577767871
hryx
daurnimator: Oh my wording was weird. I meant that it's the difference between today's `fn f() void {...}` and `var f = someFunction`

1577767876
andrewrk
hryx, the project is barely started, it's a minimum viable thingie to pass the "hello world" test

1577767989
andrewrk
part of the goal is to build a multi-architecture database of instructions, both for inline assembly to work, and for instruction selection in the non-llvm backend of the self-hosted compiler. whether that database is a .zig file, another text file format, binary format, or something else entirely is up for consideration. that project is a bit greenfield; you'd sort of have to become a pioneer

1577768006
andrewrk
good if you like freedom and want to explore, bad if you want something more focused and with a clear direction

1577768120
hryx
andrewrk: this looks super fun - let me take a couple days to mess around with it and see if I can click with it

1577768137
hryx
Be warned I will probably have a lot of questions, heh

1577768150
hryx
If it doesn't work out I can always pick up something in another direction

1577768153
andrewrk
I live streamed some of the coding on it

1577768195
andrewrk
the readme has a roadmap section with some ideas of directions to explore

1577768234
hryx
ah great, I almost forgot to watch the live streams I'd missed - I'll check'm

1577768414
andrewrk
hryx, one more little thing, I did a one day hack demo thing with a friend, and we got the symbol table working in an ELF file, if you want to see some very messy code that adds that functionality:

1577768495
andrewrk
the symbol table makes tools such as gdb, objdump, and readelf work

1577768523
andrewrk
part of that project is PortableExecutable format as well

1577768711
hryx
all great material! I'm gonna dive into all this stuff tonight

1577769411
daurnimator
that reminds me... I haven't had the zig compiler give me a traceback in months....

1577769422
daurnimator
(which is to say; it's always full of ??????)

1577769765
daurnimator
yet they work fine in gdb

1577781692
wilsonk
was @noInlineCall removed from the language?

1577781857
wilsonk
oh, got it...changed to @call with options

1577795590
schme245
if I have a function that contains an if statement that depends on a parameter, and I call that with a value known at compile time, will it get inlined?

1577795606
schme245
or must the parameter be marked as `comptime` for that to happen?

1577795685
mq32
schme245, i think that depends on your optimization level

1577795908
mikdusan
also (i haven't used it myself) keyword can be used to decorate a function: `inline fn foo() void {}`, and at callsite builtin `@call()` can be used with .inline

1577795940
mikdusan
(well .inline is wrong literal, but see docs for full list)

1577822031
diltsman
Has anyone else tried to compile with WinMain or wWinMain for the main function?

1577822070
diltsman
I had it working a while ago, but the latest compilers give this error: error: root source file has no member called 'main'

1577822071
diltsman
switch (@typeInfo(@TypeOf(root.main).ReturnType)) {

1577822874
andrewrk
diltsman, make it pub. it'll be a bit awkward because it will be both export and pub

1577822889
andrewrk
the logic for entry points is now entirely in userland, no longer hard-coded into the compiler

1577823320
swoogan
would it be possible for the compiler to add a newline before listing errors?

1577823371
swoogan
"Semantic Analysis [739/751] /snap/zig/1..." this makes it hard to regex the errors out of the output

1577824151
andrewrk
swoogan, yes

1577825431
diltsman
andrewrk That worked.  Thanks.

1577830026
diltsman
Is there a way to cast a function pointer to a function pointer with stdcallcc to one with extern instead?  I believe that Zig is changing the calling convention of the function pointer, and I want to experiment before I file a bug.

1577830176
andrewrk
diltsman, @ptrCast

1577830825
wilsonk
hey andrewrk or Sahnvour_: with this diff (

1577830868
wilsonk
@call( .{ .modifier = .always_inline }, f, .{&ctx});  the caret points at 'f'

1577830869
andrewrk
I'm getting 404 for the second link

1577830887
andrewrk
oh, found it though

1577830895
wilsonk


1577830949
andrewrk
did you mean to go from "never inline" to "always inline" ?

1577830966
wilsonk
oh, woops...nope

1577830973
andrewrk
when you perform an inline call, it requires the function to be compile-time known

1577830979
andrewrk
which makes sense if you think about it

1577831024
wilsonk
changed to never, but still the same error

1577831098
wilsonk
right, I think I get the comptile-time known part, but I am just curious why it worked with @noInlineCall but doesn't work with @call

1577831256
wilsonk
perhaps a comptime check for @call is more strict than it was for @noInlineCall?

1577831298
andrewrk
wilsonk, hmm, looks like zig is unconditionally requiring comptime-known function there, but that's incorrect. it should be only doing that for always_inline and a couple others

1577831359
andrewrk
looks like a pretty easy fix too. would you mind filing an issue?

1577831373
wilsonk
Ok, I will get on it

1577831379
andrewrk
or rather than easy, I should, say, a contributor friendly fix

1577832068
wilsonk
issue filed

1577832153
andrewrk
thanks!

1577833406
Snektron
Happy new year

1577833418
adamkowalski
Happy new year!

1577833510
hryx
happy new year! (for you. I've got another 9 hours of 2019)

1577833771
wilsonk
Happy New Year to those that have passed into the new year already :)

1577834072
fengb
Happy perfect vision

