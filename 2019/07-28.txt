1564272563
hryx
would it be useful to have a `zig analyze` subcommand which is like `build-obj` but stops before codegen?

1564279394
daurnimator
hryx: what would it be used for?

1564279418
daurnimator
hryx: like.... is it a linter?

1564279719
daurnimator
emekankurumeh[m]: sockaddr_storage should be for more than linux

1564279736
daurnimator
emekankurumeh[m]: also.... you should be using sockaddr_any in most of your routines

1564280576
daurnimator
andrewrk: what is @sizeOf(anyframe->T)?

1564281404
hryx
daurnimator: not sure, I was wondering if anyone had any ideas. is that how one might accomplish IDE errors/integration without LSP?

1564281432
hryx
come to think of it, wouldn't that be what clang-check does? (Not sure, I've never used it)

1564281452
daurnimator
hryx: the guideline for zig is that anything we can detect... should be an error not a warning

1564281491
daurnimator
hryx: what would be the difference compared to running `zig fmt`?

1564281606
hryx
didn't mean to imply the output would be warnings - only errors, of course

1564281628
hryx
zig fmt 1) alters the code in place and 2) doesn't do semantic analysis

1564281671
daurnimator
hryx: 1) lets add a --dry-run flag? 2) ah.

1564281750
hryx
I'm a fan of --dry-run (or --check). it'd be useful e.g. as a CI check

1564281785
daurnimator
agreed

1564282110
scientes
hryx, clang implements LSP

1564282172
hryx
sure, but I'd assume not ever IDE does. (not sure if that's a valid argument for it, but still)

1564282183
hryx
*not every

1564282195
scientes
i think you miss the point of LSP

1564282209
scientes
anyways, its not reasonable until stage2

1564282243
hryx
only meant to ask if there'd be a use for it

1564285551
daurnimator
TIL link time warnings are a thing

1564285618
daurnimator


1564288096
curtisf
Is there a standard way to portably serialize/deserialize an integer to bytes in zig's standard library?

1564288318
daurnimator
curtisf: std.mem.writeInt ?

1564288322
daurnimator
(and friends)

1564288361
curtisf
exactly, thanks!

1564291782
curtisf
I feel like I must be doing something dumb wrong. Has someone used Zig on Windows to write to files? I'm getting `Access is denied` whatever I try

1564291954
diltsman
Why would this have an error after func();?

1564291986
diltsman
Basically trying to create a compile-time function to create a custom prologue/epilogue for interrupt handlers.

1564292011
diltsman
If I remove the semicolon it compiles.

1564292163
diltsman
However, removing the semicolon starts complaining about array access to non-array type.

1564292780
diltsman
Seems to be something with trying to write higher-order functions.  It appears that it thinks that the {} pair to delimit the function body is actually for something with arrays.

1564293156
emekankurumeh[m]
daurnimator: on windows it would just be the same as `sockaddr_storage` right?

1564293542
gonz_
diltsman: As far as I'm aware we don't have anonymous functions

1564293753
gonz_
curtisf: Do you have a code example?

1564294197
curtisf
It's specifically trying to read from a file I opened with `fs.File.openWrite`. Is that maybe not allowed?

1564294235
emekankurumeh[m]
wouldn't you open it with `openRead` if you wanted to read from it?

1564294262
curtisf
I want to read and write to the file

1564294369
emekankurumeh[m]
i don't think there is a function for opening a file with read and write permissions

1564294583
curtisf
Oh, I guess so, I should have read that more closely. That is something that C allows, isn't it?

1564294593
gonz_
`os.open`?

1564294613
gonz_
`pub fn open(file_path: []const u8, flags: u32, perm: usize) OpenError!fd_t { ... }`

1564294655
curtisf
so use that with `File.openHandle`?

1564294698
gonz_
The way the `File`s are created they just set `.handle` in there to this returned `fd_t`

1564294727
gonz_
With that said there may be other problems, I've never done this

1564294730
curtisf
are the flags for `open` portable?

1564294813
gonz_
They are passed to `system.open`

1564294826
gonz_
`system` is OS-specific

1564294875
gonz_
`os.open` is just a surface function and zig is meant to be portable, so it would seem like a mistake to not make these support all platforms.

1564294876
curtisf
hm. So I guess I should open a issue for read/write to be added to `File`

1564294967
curtisf
or are you suggesting something else? I don't quite understand what you mean

1564295032
gonz_
Currently I'm not really suggesting anything, I'm just exploring the interplay here myself

1564295092
gonz_
`os/windows.zig` doesn't export `open`

1564295118
gonz_
Or I'm just not seeing it

1564295130
curtisf
I wasn't seeing it either. Might be because it doesn't take flags the same way?

1564295152
gonz_
Presumably. It's a good way to ensure  it just plain doesn't compile

1564295169
gonz_
Same way as it returns an empty struct (empty module) when it doesn't know what OS you're compiling for

1564296441
gonz_
Can someone update me; does Go do any exhaustiveness checks on error return values?

1564296450
gonz_
Last I checked it doesn't, and can't

1564296457
gonz_
They can't do exhaustiveness checks, period.

1564296573
curtisf
what would you mean by exhaustive check on error return? `error` is just an interface type you're not really supposed to inspect except to print the message, there's nothing to really branch on

1564296644
gonz_
Well, you certainly want to handle errors differently depending on which error you're getting

1564296717
curtisf
I'm not sure I've ever actually seen go code do that

1564296732
curtisf
I guess you can do a type case check

1564296880
gonz_
This doesn't seem like taking error handling seriously to me

1564296925
gonz_


1564296935
curtisf
Agree. The only thing that Go really does over C is require you check function return values

1564296938
gonz_
If it's still like the above blog post that just seems a bit cowboy to me

1564297013
curtisf
Without unions (or equivalently, checked exceptions) it's hard to actually handle errors right. But since Go doesn't even have enums...

1564297039
gonz_
Exactly

1564297061
gonz_
There's very little base there to build something robust in terms of error handling on

1564297074
gonz_
Explicit error handling is super nice

1564297090
gonz_
But ideally it should also be machine checked

1564297109
curtisf
Zig's error handling is really great. It's all of the good of checked exceptions and also of not having exceptions. I'm surprised it took this long to appear

1564297144
gonz_
There is an issue up right now about how Go's error handling could supposedly be taken as inspiration to improve the error handling in Zig, but I'm wondering if there's actually any inspiration to be had at all.

1564297175
curtisf
I haven't seen that issue

1564297187
gonz_


1564297350
curtisf
I'm reminded of the discussions about checked exceptions in Java, which I haven't really understood. Usually someone says something like, if you make a change to the code that throws a new/different checked exception, you've broken all of your callers if the exception is checked, which is a violation of the open/closed principle because an implemen

1564297351
curtisf
tation detail is leaking. But that's not really true; exceptions are part of your function's interface; they should be explicit and every caller should handle every one of them explicitly

1564297397
gonz_
Yes

1564297407
gonz_
I

1564297781
daurnimator
emekankurumeh[m]: yes on windows,.

1564297860
emekankurumeh[m]
do any of you know of any guides to understanding atomic orderings?

1564298143
daurnimator
emekankurumeh[m]: rust has the same atomic types as zig. see

1564298197
emekankurumeh[m]
huh, non-exhaustive enums

1564304114
gonz_
In the case of `@distinct` I find myself thinking that this one would probably be good to have, but at the same time that's what everyone thinks about their arbitrary set of nice features, even the obviously reader hostile ones.

1564304201
gonz_
If wrapping distinct types in structs only has the issue of people losing their operators, etc., maybe that's fine. Defining the behaviors you need for the type you've made should not be the issue.

1564313230
Poetastrophe
When running tests on "rb.zig" does it pass for you guys?

1564313298
Poetastrophe
specifically the master version of zig

1564313647
mikdusan
Poetastrophe: can u paste error?

1564313720
Poetastrophe


1564313786
mikdusan
yes i get the same one on master

1564313839
Poetastrophe
Alright, thanks man.

1564313882
Poetastrophe
I will open an issue

1564313895
mikdusan
btw it's a safety-check error. looks to me compiler is being over-zealous in that error in debug/release-safe modes

1564314690
nrdmn
Why can't enum(T) be implicitly cast to T?

1564315216
Poetastrophe
My guess is that it is one of those types of conversions you do not want to happen on accident. Similar reasoning behind enum class in C++ and why they do not have implicit cast to the underlying type:

1564315864
mikdusan
'compiler is being over-zealous'; changed my mind. it's a legit error. have tiny userland patch.

1564321181
scientes
how do i do bold in the documentation?

1564321190
scientes
oh, i'll just use <b> heh

1564324687
Tetralux
gonz_: Phantom types?

1564324724
gonz_
Types that disappear after compilation and are effectively only there to make types distinctive at compile-time

1564324761
gonz_
In PL dweeb circles they're usually called phantom types

1564324767
gonz_
because that sounds cool :D

1564324820
gonz_
`newtype` in Haskell defines a phantom type and adding a type parameter you never use in the data type when using `data` will do the same

1564324872
gonz_
`data User a = User { name :: String, age :: Int }`

1564324901
gonz_
You can now put any piece of data in the `a` spot to distinguish the particular type of `User` you have

1564324927
daurnimator
gonz_: the proposal in zig is called "distinct types".

1564324929
gonz_
`sanitizeBeforeLogging :: User LogUnsafe -> User LogSafe`, etc.

1564324953
gonz_
daurnimator: Sure. Your point?

1564324980
daurnimator
gonz_: that things are more clear if you use the established terms in the zig community? :P

1564324990
gonz_
There are no established terms in the zig community

1564325006
gonz_
And there are already established terms for that concept

1564325010
Tetralux
gonz_: You mean things like `const int = distinct i64;` ?

1564325011
gonz_
i.e.

1564325021
daurnimator


1564325039
Tetralux
.. A type that's the same as i64, but requires comptime casting, even though it's just an i64 at runtime.

1564325084
gonz_
"distinct types" are just phantom types, yes

1564325093
gonz_
This is just hidden behind a keyword

1564325106
Tetralux
I'm alright with that  idea.

1564325160
gonz_
Yes, I was just answering what you were asking

1564325174
gonz_
They're called phantom types because they don't exist at run-time

1564325311
gonz_
I'm not against the specialization, especially since the crowd is so different. As I said before, Haskell has a specialization for it as well

1564325344
gonz_
`newtype Kilometer = Kilometer Double`

1564325371
gonz_
I don't think having "distinct" types is something that's needed either

1564325428
gonz_
I don't think "no one will want to distinguish types because they have to type too much" is a good argument for them

1564325547
daurnimator
gonz_: the key conversation around distinct types for zig is if operators will work

1564325573
daurnimator
as we don't have operator overloading; people want some way to avoid mixing different units but still be readable

1564325576
gonz_
I read the issue. I don't think they have to.

1564325604
daurnimator
yeah I'm on the side that isn't probably not worth it

1564325609
daurnimator
uh *is

1564325755
fengb
I think some people are confusing “simple is good” with “simpler is always better”

1564325779
fengb
C is really simple for all the wrong reasons :P

1564325865
gonz_
I think some people forget that if everyone gets "that one feature in" you end up with an unreasonable set of features

1564325891
gonz_
When the argument pretty much is "I don't want to type too much" I think it's pretty easy to say it's not super important

1564325926
daurnimator
yeah. that's why I noted that non-exhaustive enums get you distinct integer types (but without operators)

1564325934
gonz_
Correctness is good and that's part of the argument for the distinct types, but wrapping them in structs gives you the same thing except you have to also treat it as its own type completely, not just a little bit.

1564325938
fengb
I don’t mean adding features is always good, but we should at least do a real trade off analysis

1564326015
fengb
I’ve been wrapping types in structs a decent amount in C. It’s dumb and I want a language construct to capture this

1564326079
Tetralux
The thing about distinct types for me, is that the point of them is largely just that I want to remind the programmer that it is not just an old integer. The values mean things.

1564326093
fengb
I dunno why I’m stating my points when you already agree >_>

1564326096
Tetralux
Thing is, that doesn't necessarily mean that you should be able to do arithmetic.

1564326118
Tetralux
Personally, I want to be able to have a distinct integer type which you

1564326128
Tetralux
But have to cast between it and it's base type.

1564326135
Tetralux
Or any other integer type.

1564326141
daurnimator
Tetralux: one issue with that is.... who says that the arithmetic is "normal" arithmetic

1564326169
Tetralux
The programmer who says "I want to be clear that is not just any old integer and it means a specific thing.

1564326179
Tetralux
Like READ/WRITE/EXEC, for instance.

1564326184
Tetralux
FileFlags

1564326189
gonz_
Tetralux: The self-documentation/programmer bit is just type aliases and I'm not saying I don't see the point. I've used these to great effect in other languages. I don't need to be sold on it, to be honest.

1564326215
fengb
How about: no implicit casts but allow operator overloading? Distinct i32 only adds others of the same type or comptime

1564326217
Tetralux
If it was just you I had to convince, I  wouldn't be saying anything xD

1564326217
daurnimator
Tetralux: see

1564326257
Tetralux
daurimator: More simply, you're idea is "use an enum"

1564326260
fengb
Actually that would only be natural with addition/subtraction. Multiplication breaks that blah

1564326321
Tetralux
My point is, if you want an integer to be distinct, it generally means that it's still an integer, and you want to do arithmetic - otherwise, you would have used an enum to begin with.

1564326336
Tetralux
The whole point "I want it to be clear that this is not

1564326366
Tetralux
bitflags would solve the enum part, I think.

1564326383
daurnimator
bit flags should be done with a packed struct

1564326396
Tetralux
It's like how you have SlotIndex in the gpda.

1564326399
Tetralux
It's an integer.

1564326408
Tetralux
It's just not

1564326411
daurnimator
Tetralux: but would you ever add/subtract/multiply it?

1564326422
Tetralux
In the case I just gave, you might.

1564326439
Tetralux
The point of the name is make it's role explicit.

1564326454
gonz_
In the case that you want to do interesting things with it, doesn't it make sense to have them all laid out where the type itself is defined?

1564326465
gonz_
The things you want to do, that is.

1564326480
Tetralux
It does, if it's more than just +, -, /, *.

1564326490
fengb
daurnimator: I think what he’s trying to say is that it conceptually behaves much more like an int than an enum

1564326491
Tetralux
Though if it's +, -, /, *,

1564326510
Tetralux
That could be a bit annoying.

1564326517
fengb
In my emulator, memory and registers are just numbers. Trying to make them enums feel super weird

1564326518
daurnimator
fengb: the key thing about an integer is that all math operators are well defined.

1564326525
Tetralux
fengb: Yeah - I guess so.

1564326529
daurnimator
fengb: why does making them enums feel weird?

1564326536
fengb
But they also need to be distinct because mixing them up is super easy and leads to stupid behaviors

1564326565
Tetralux
daurnimator: Because there may not be specific values that matter.

1564326566
fengb
Because it’s any number in u8 space. It’s just an int and there’s no defined values anywhere

1564326602
fengb
None of the values are distinctive so using enum doesn’t make conceptual sense

1564326608
Tetralux
If you had specific values that mattered, you'd have an enum.

1564326647
Tetralux
Though if you had a range of values that were fine, plus a couple of others, you'd have to panic at runtime if you tried to cast to it, which you'd have to use a struct for in status quo Zig.

1564326690
Tetralux
But the main use of distinct over enum is just that any int value that fits is okay, it's just that I want it to be clear that it's not

1564326797
Tetralux
It's like "I want to use arithmetic on this thing and I want to name it, but I want it to be differently typed than the underlying int type so I don't make a mistake.

1564326820
gonz_
I dunno, drawing the line at operators seems weird to me

1564326836
fengb
Random thought: would it be weird to have an unwrap operator?

1564326850
Tetralux
It's more drawing the line at types than it is operators, really.

1564326857
Tetralux
fengb: unwrap how?

1564326859
fengb
km.* += 1;

1564326883
gonz_
Tetralux: You said you wanted people to have to specify the things they wanna do with the distinct types, except operators, no?

1564326887
fengb
Not technically overloading and you can’t do normal math but the extra syntax would help out a little

1564326892
gonz_
That's the part I just find odd.

1564326942
gonz_
But I guess this is just another point for operator overloading, to be honest

1564327000
fengb
It doesn’t have to be the pointer syntax. I couldn’t find a better a symbol on mobile :P

1564327015
gonz_
I guess it's a point for overloading in general in some sense

1564327362
mikdusan
`@distinct(T: type, ops: bool)`

1564327409
mq32
hey

1564327419
mq32
mikdusan, sounds like a nice thing

1564327649
Tetralux
mikdusan: I think I'd prefer @distinctWithOps for clarity, but sure.

1564327697
Tetralux
gonz_: You just want people to have to cast an int to this type.

1564327716
Tetralux
Much in the same way you might for `Miles(1) + Kilometer(5)`

1564327723
Tetralux
That would not work.

1564327738
Tetralux
Of course, if you had op overloading, you

1564327743
Tetralux
But that's not the point of the example

1564327777
Tetralux
The simple point is that you are essentially just annotating the "type" of the thing that the otherwise-normal-integer is representing.

1564327786
mq32
but i'm in for distinct types for distinct semantics

1564327808
mq32
also the example of daurnimator in the issue is quite a thing. i'm using OpenGL a lot and want to have the methods of OpenGL objects as methods, not function calls

1564327829
mq32
it's so annoying that OpenGL just has GLuint for object identifiers

1564328091
diltsman
Is there a way to do generic functions like there is a way to do generic structs?

1564328193
fengb
Sticking in a comptime argument would generate a separate runtime function, like with std.debug.warn. Can you be more specific at what you’re trying to do?

1564328203
mq32
fn(comptime T : type, a : T, b : T) T { return a + b; }

1564328218
diltsman
This is the code that I was trying to get to work:

1564328250
fengb
Oh you can’t define functions in functions atm. The current pattern is return an empty struct with a method

1564328253
diltsman
Basically, interrupt handlers for my platform (armv7-m) can be...interesting.  I need to provide custom calling conventions.

1564328278
diltsman
I need the function to return something that can be assigned to a function pointer in a struct.

1564328313
diltsman
Basically, I want a helper function to wrap different prologue/epiloge around a function.

1564328375
diltsman
Otherwise I have to insert the same inline assembly in every interrupt handler (~30 functions).

1564328492
fengb
Posted a reply. I’m not at my computer so it might not work >_>

1564328777
diltsman
fengb, I did not see a reply.

1564328792
fengb
Replied to the gist

1564329033
diltsman
Ok, I replied to that.

1564329468
fengb
Oh maybe try assigning the struct to a const and returning from that? Coding is hard from memory :/

1564329482
diltsman
Fair enough.

1564329548
fengb
e.g. `const s = struct { ... }; return s.f;`

1564329890
diltsman
Ok, finally got things working.  Thanks.

1564329930
fengb
Great! Anonymous functions are a pain point atm

1564329970
diltsman
My biggest pain trying to get your code working was that I replaced the variable type in the struct definition rather than the initialization in the variable.

1564330342
daurnimator
Oh I also realised something..... closures will be really easy once we have @Frame from the coroutine work

1564330667
mq32
daurnimator, yeah we noticed that yesterday too :)

1564330705
mq32
maybe closures may even be a userspace thing

1564330721
daurnimator
I do think we'd want language support

1564330730
mq32
yeah, that's true

1564330747
mikdusan
i assumed difficulty in closures would be deciding on what to copy vs. reference

1564330799
mq32
yeah, that's true

1564330818
daurnimator
mq32: I would assume anything `const` => copy. anything `var` => reference

1564330838
mq32
hmm

1564330842
daurnimator
but of course.... the copy of a `const` can be skipped if it has long lifetime

1564330893
mq32
i think the use should have full control over what to capture by-ref and by-value

1564330900
mq32
that's just a thing Zig promotes

1564330917
daurnimator
yeah I'll have to think about the copy vs reference a bit more

1564331124
mq32
var closure = fn [&x,y] (i : i32) { };

1564331151
mq32
similar to c++ syntax

1564331153
mq32
would be a thing

1564331362
mikdusan
I imagine if the compiler can prove the closure will stay on (nested) stack, captures could all be refs

1564331951
gonz_
Tetralux: I know exactly what it is you want and I've used exactly that thing. My point about overloading was that there's so much grinding on in from different angles that all of those things point to people really wanting overloading.

1564331994
gonz_
"distinct types" are not a special thing outside of lower level languages, it's not that I don't see what you want with them.

1564332176
gonz_
If the idea is "Everyone wants this" = "People will have it", overloading will be added

1564332289
Tetralux
id stick to just an int over using a custom struct with op overloadig for that

1564332295
scientes
no overloading, thank you

1564332299
Tetralux
too much boilkerplate / friction

1564332306
Tetralux
boilerplate*

1564332341
gonz_
Historically I've overstated the role boilerplate plays

1564332347
gonz_
I'm ready for something different

1564332355
gonz_
This isn't my third language

1564332436
Sahnvour
hooray, stage1 stack traces are now working on windows !

1564332466
gonz_
I'm ready for a language that makes a point out of not necessarily having an abundance of ceremony and boilerplate, but leans heavily toward a very small feature set and people being able to rely on that feature set being small and predictable

1564332536
scientes
well, there are also places where the language is more complicated to make user code less complicated

1564332541
scientes
an example of this is u0

1564332555
scientes
and when the user-code is well defined

1564332576
scientes
like I am adding an implicit cast that only happens with doing a & between a vector and a vector of bools

1564333822
Tetralux


1564333837
Tetralux
Here's an issue I've found in my travels.

1564334845
gonz_
Tetralux: I deleted my response. Maybe just add what you replied with in the top post

1564334849
gonz_
I misunderstood what the issue was

1564334977
Tetralux
Done.

1564334981
Tetralux
Ta for interest though.

1564338723
emekankurumeh[m]
nice Sahnvour

1564344020
nrdmn
is it possible to completely disable stack checking for PE binaries? If yes, where would I configure that?

1564345828
emekankurumeh[m]
nrdmn I don't think so, but a workaround might be linking libc

1564346284
nrdmn
emekankurumeh[m]: by "configure" I mean "modify the compiler"

1564346306
nrdmn
I don't have a libc on my platform and I don't want to provide an empty __chkstk as a workaround

1564349267
gamester
I'm curious to see how the function syntax change will turn out. It's more consistent but also takes 8 more characters of horizontal space and makes grepping more awkward.

1564349361
gonz_
Function syntax change?

1564349375
hryx
gamester: are you talking about 1717?

1564349402
gamester
hryx: yes

1564349462
hryx
not sure I understand the space difference. `pub fn main()` -> `pub main = fn()` is +2 characters

1564349505
gamester
Isn't it "pub const main = fn()"

1564349505
hryx
do you have an example?

1564349523
hryx
oh yes it is. I of all people...

1564349528
gamester
haha

1564349546
gamester
It's certainly a change that makes sense for Zig

1564349549
hryx
I should have finished my first coffee :|

1564349575
hryx
Personally I'm excited about it, not for the syntax itself but because it opens the door a little better for passing anonymous functions

1564349591
gonz_
I think the consistency is nice

1564349626
hryx
but you're not alone with concerns about grep-ability. some of my other proposals were rejected because the community had similar qualms

1564349697
gamester
Zig is not afraid to have character :) - It's probably a good change

1564349862
scientes
no, every function does not have to start as an annonymous function

1564349868
scientes
but its a valid idea

1564350640
hryx
scientes: who/what are you responding to?

1564350650
scientes
<hryx> not sure I understand the space difference. `pub fn main()` -> `pub main = fn()` is +2 characters

1564350718
gamester
scientes: your comment is hard to decipher. We were discussing this issue which has been accepted:

1564350772
scientes
Make the following true:

1564350775
scientes
All functions are anonymous

1564350788
scientes
but I guess it has been accepted, so OK

1564350886
scientes
funny, we were discussing annonymous function earlier today, and nobody brought up 1717

1564350984
scientes
yeah its not bad

1564350997
scientes
I should probably type up my function and variable attribute proposal

1564351005
scientes
because that resolves the extern question there

1564351441
fengb
I throughly we were discussing just closures and assumed anon funcs were already accepted

1564351466
fengb
Thought*

1564352189
hryx
daurnimator: if I recall you know about PEGs. feel free to correct me if I misspoke here:

1564352287
scientes
fengb, they are in 1717

1564352301
scientes
lets get those implemented before talking about closures ;)

1564352744
curtisf
strictly speaking LALR/LL/RR are weaker than CFG. You can almost surely write a CFG for Zig. But it is still true that PEG is more powerful than constant lookahead parsers

1564352844
hryx
curtisf: I see. was my comment incorrect? don't want my ignorance to be misleading or misrepresentative

1564352855
curtisf
> If your goal is to write a CFG for Zig, that may not be possible

1564352860
curtisf
That's the only part that's incorrect

1564352875
curtisf
Replace "CFG" with "LL/LR/LALR" and it's correct

1564352886
hryx
ah, thank you very much

1564352930
curtisf
fun fact, as far as I know it's still open whether or not CFGs can recognize the same thing as PEGs

1564352945
curtisf
sorry, that PEGs can recognize all CFGs*

1564352954
curtisf
PEGs can match some non context-free languages

1564353073
hryx
interesting!

1564353403
scientes
hryx, there are four classes of language, as described by Noam Chomsky

1564353445
scientes
1) regular, 2) recursive, context-free, 3) recursive, context-sensitive 4) Turing complete

1564353529
scientes
This talk gives a great introduction to this hryx

1564353669
hryx
scientes: thanks! I'm fascinated by this stuff but unfortunatly have not yet completed my degree from University of Wikipedia

1564353681
presiden
hryx, and for some brief history

1564353699
scientes
hehe, hryx yes that is where by sheepskin is from

1564353751
scientes
Alan Turing and Alan Church discovered the same thing at the same time

1564353758
scientes
and then Noam Chomsky improved on it

1564353760
hryx
presiden: double rad

1564353779
curtisf
I still feel like the importance of constant-lookahead parsers is over-emphasized nowadays since we don't have to be so sparing with memory. PEG seems to be a much better place to be for parsing computer languages

1564353781
scientes
syntax is not the only interesting thing in language, but Noam Chomsky was pretty influential

1564353827
scientes
curtisf, if you want to be

1564353853
scientes
and you can

1564353859
scientes
*with regular expressions

1564353913
scientes
I am still looking forward for a compile regexp engine

1564353924
curtisf
I don't follow what you mean. You can still tokenize with regular expressions but capture the syntax with PEG

1564353948
curtisf
What I'm complaining about is LL(k), LR(k), etc, not regular languages

1564353987
scientes
comptime regexp engine

1564354022
curtisf
be the change you want to see!

1564354035
scientes
well zig finially makes it possible

1564354050
scientes
I wanted this in C, but C just isn't designed that that (where its called Forward constant propagation)

1564354108
scientes
proof:

1564354131
scientes
and quite a few years before that bug

