1569804351
andrewrk
daurnimator, that looks like you didn't give privileges to `make` to do the `install` step to the installation prefix

1569804414
andrewrk
release notes skeleton is done and many sections are complete. I still have the following sections to flesh out:

1569804494
andrewrk
daurnimator, did you read

1569804541
andrewrk
it's going to be a long night for me

1569827565
andrewrk
I'm going to bed. Still have the following sections to finish in the release notes:

1569827577
andrewrk
hopefully can finish those up in the morning and release early afternoon

1569827732
andrewrk
release notes suggestions to the finished sections are welcome in the form of pull requests to

1569827744
andrewrk
good night

1569830530
ceymard
is the grammar up to date in the documentation ?

1569830661
ceymard
I see there is a "use" construct

1569830667
ceymard
but can find no documentation about it

1569830676
ceymard
does it still exist, or should it be removed from the language ?

1569830695
ceymard
also, it doesn't seem to mention async / await

1569830717
ceymard
oh wait it does, sorry

1569830729
mq32
ceymard, use is now usingnamespace

1569830811
ceymard
oh ok

1569831658
Snektron
It release day

1569831929
presiden
nice

1569833261
daurnimator
andrewrk: that was just running `make` not `make install`

1569833267
ceymard
are varargs still a thing ?

1569833272
daurnimator
ceymard: yes.

1569833273
ceymard
the whole `: ...` thing

1569833286
ceymard
I saw sometime that it was going to be replaced

1569833297
daurnimator
ceymard: yep. its time has not come yet though

1569833304
ceymard
alright

1569834026
kenaryn
Hello people, is there something to help me build Zig from source please?

1569834061
kenaryn
I'm using Debian stable branch 10.1

1569834140
kenaryn
And I am looking for an explanation with regard to

1569835269
ceymard
are promise part of async / await ? they're undocumented as of now ?

1569835301
mq32
ceymard, async values are promises

1569835307
mq32
var x = async foo();

1569835325
mq32
x is a promise that can be awaited with "var x_unpacked = await x"

1569835955
daurnimator
andrewrk: seems like ZIG_SKIP_INSTALL_LIB_FILES is required if `make` doesn't have write priveledges to the final location.... which is super odd. `make; sudo make install` is a pretty class flow...

1569835984
daurnimator
in any case, I'm now running the full test suite after just a `make`. now heading to bed.

1569836018
kenaryn
Please, doess llvm-9.0.0.src need to be located in '~/local' before running 'cmake' command with prefix=$HOME/local?

1569836106
TheLemonMan
kenaryn, grab llvm (and clang) from

1569836109
TheLemonMan
scientes, ping

1569837476
kenaryn
Thanks TheLemonMan but now I have to add the unverified signature of the apt.llvm.org to a trusted vault. But gpg fails to add a new key. It tells 'no keyserver available' when I try to connect to gpgkeys.mit.edu. My /etc/resolv.conf contains only 1 line: 'name 192.168.0.1', is that normal?

1569837628
TheLemonMan
did you do `wget -O -

1569837724
kenaryn
Nope, for several years I'm doing the following:

1569837743
kenaryn
gpg --keyserver gpgkeys.mit.edu --recv-keys <PUB_KEY>

1569837770
kenaryn
gpg -a --export <PUB_KEY> | apt-key add -

1569837880
kenaryn
For from now, it doesn't work anymore. I tried also to install Zig with snap but did'nt work and corrupted several apparmor profiles (which cannot be de-activated since the snap files doesn't exist anymore)

1569837933
kenaryn
Is that normal my /etc/network/interfaces contains only:

1569837935
kenaryn
auto lo

1569837943
kenaryn
iface lo inet loopback

1569837945
kenaryn
?

1569838003
kenaryn
It is quite discouraging and painfully to install zig and begining to learn... :(

1569838071
mq32
kenaryn, why that?

1569838081
mq32
download a prebuilt tarbal, untar it and just rock everything ;)

1569838142
kenaryn
There is none in the wiki for POSIX systems.

1569838176
mq32


1569838179
mq32
macos, freebsd, linux

1569838212
TheLemonMan
just use wget + apt-key, it's not that hard

1569838248
TheLemonMan
configuring gpg is a completely different tarpit/topic

1569838345
kenaryn
I tried, but it returns 'Cannot write to ‘-’ (Broken pipe).'

1569838380
kenaryn
Did you accidently add a non-required dash '-'?

1569838469
TheLemonMan
you have to be root in order to use apt-key

1569838488
kenaryn
switching to root.

1569838570
kenaryn
returned OK, trying the next step.

1569838974
kenaryn
in fact, I do not know the next step. It's really weird to be finally able to use Zig.

1569839019
kenaryn
Do I have to type this: wget

1569839020
kenaryn
chmod +x llvm.sh

1569839022
kenaryn
sudo ./llvm.sh <version number>

1569839025
kenaryn
?

1569839162
TheLemonMan
I guess that `apt install llvm-9-dev libclang9-dev` is enough

1569839267
kenaryn
Thank you for your patience but it returns E: Unable to locate package libclang9-dev

1569839300
kenaryn
The total absence of documentation is a deal-breaker for Zig adoption.

1569839415
mq32
kenaryn, why do you want to build zig from source?

1569839425
kenaryn
There will always be off-topic and pain-in-the-ass like my while there will be none user-friendly doc

1569839452
kenaryn
mq32 I am just trying to install Zig to create softwares in Zig, for several days.

1569839466
mq32
yeah, so still my question: why not use the provided pre-built tarball?

1569839472
kenaryn
At this point I do not care how to achieve it, I just want to accomplish it.

1569839475
mq32
what OS are you on? linux? windows? macos? freebsd?

1569839483
kenaryn
Debian stable 10.1

1569839492
mq32
so just download the linux prebuilt binary?

1569839495
mq32
link is above

1569839508
kenaryn
Yes, thank you, it is now downloaded.

1569839534
mq32
this tarball provides everything you need. no need for setup,install,nothing

1569839538
mq32
just unpack and have fun ;)

1569839573
kenaryn
Do I have to make it executable whith chmod +x before unpacking it?

1569839595
mq32
nope, the contents of the tarball should be alright already

1569839649
kenaryn
It is now unpacked.

1569839709
kenaryn
But now a situation remains, how to use it? there is still no doc about it...

1569839749
mq32
just run the zig executable

1569839755
mq32
it is self-documenting

1569839763
kenaryn
The terminal still tells me 'zig: Command not found.'

1569839787
mq32
if you want to have the zig executable globally available, you have to add it to your PATH variable

1569839800
mq32
(like with every program manually installed)

1569839852
kenaryn
It is amazing the amount of expertise required to use it even in a allegedly simply way.

1569839883
mq32
kenaryn: this is basic linux expertise, nothing to do with zig

1569839886
TheLemonMan
oh come on, you're having problems with linux

1569839894
kenaryn
I do not see .exe extension so I suppose it is zig (137 MiB shared library)?

1569839910
mq32
kenaryn, linux executables don't have .exe extensions

1569839916
kenaryn
Allright

1569839917
mq32
they usually have no extension at all

1569839938
mq32
if you "ls" your zig directory, it should similar to this:

1569839943
mq32
[felix@denkplatte zig]$ ls

1569839943
mq32
lib  LICENSE  langref.html  zig

1569839999
kenaryn
yes i see zig with a star (i.d. zig*)

1569840019
kenaryn
can I rename zig-linux-x86_64-0.4.0+543e7293 into zig without breaking anything?

1569840023
mq32
yes

1569840028
kenaryn
Thank you.

1569840060
mq32
if you want to know more about PATH, read here:

1569840107
kenaryn
I tried zig/zig but it returns ^?ELF^B^A^A^C: Command not found.

1569840109
kenaryn
Too many )'s.

1569840151
mq32
huh

1569840158
mq32
you're doing something weird

1569840163
kenaryn
sorry I tried tcsh zig/zig

1569840177
kenaryn
i just abandonned bash a week ago.

1569840332
ceymard
kenaryn: how about ./zig ?

1569840345
ceymard
while being in the same directory

1569840400
kenaryn
lol you were right, but now I have to export the new path variable but I do not know in which file, since tcsh do not call .bashrc to make the change permanent

1569840414
mq32
kenaryn: look here:

1569840414
mq32


1569840416
mq32
how to install zig

1569840435
mq32
then look up the docs for tcsh ;)

1569840588
kenaryn
thanks a lot for your kindness

1569840846
ceymard
the grammar shows that a statement like `const myvar = contine` is valid, is it normal ?

1569840849
ceymard
continue*

1569840994
mq32
yes

1569841000
mq32
continue is an expression

1569841133
mq32
ceymard:

1569841161
kenaryn
the terminal returns Bad : modifier in $ '/'. when I type export PATH=$PATH:/home/aurele/local/zig

1569841227
kenaryn
Do you know why?

1569841301
kenaryn
export PATH=$PATH:`pwd` returned the same error.

1569841348
mq32
because you don't use bash, but tcsh

1569841360
mq32
use the correct syntax for tcsh, then it will work

1569841413
kenaryn
Allright, thank you for your patience.

1569843370
kenaryn
Allright, just to say my first hello world program finally worked, so thank you kindly ceymard, mq32 and TheLemonMan

1569843523
ceymard
mq32: is it the noreturn type ?

1569843551
ceymard
oh it is

1569845340
ceymard
what's the difference between a for statement and a for expression ?

1569845429
mq32
good question

1569845439
mq32
i think a for expression must be breaked and have an else branch

1569845462
mq32
var x = loop: for() { … break :loop 10 } else { 20 };

1569845492
ceymard
is there a reason there is a difference between then in the grammar ?

1569845522
mq32
dunno, you can write for() { } as a statement

1569845527
mq32
and don't require breaking and "else"

1569845533
mq32
but i don't know the grammar for this point

1569845556
ceymard
ok

1569845662
rifkik
Who's ready for 0.5.0?

1569845699
fengb
Probably not andrewrk 😘

1569845700
fengb
🙃

1569845717
fengb
Wrong smiley. That looks so creepy

1569845727
ceymard
I thought it was perfect

1569845855
andrewrk
daurnimator, your questions are answered in

1569845898
andrewrk
I have a cup of tea and 6 hours of sleep. let's do this

1569845967
rifkik
Andrew is on l33t Hacker Mode

1569847430
LargeEpsilon_
Hi, I have a small question regarding zig lang. Is it possible to use OpenMP with zig ? and if not for the moment is it planed to be supported one day ? Thanks in advance

1569850144
Cadey
LargeEpsilon_: what do you think that means?

1569850150
Cadey
just so we're on the same page

1569850888
LargeEpsilon_
It would be the equivalent of #pragma omp X

1569850902
LargeEpsilon_
for parallelization and SIMD

1569850933
LargeEpsilon_
as supported by clang for C/C++/Fortran

1569851975
fengb
`try await try async fs.openReadWrite` that was so clunky :P

1569852193
andrewrk
scientes, can you link me to your llvm talk?

1569852210
andrewrk
fengb, yeah now it's try fs.openReadWrite

1569852232
scientes
andrewrk, the abstract?

1569852249
scientes
I still need to review the slides

1569852249
andrewrk
yeah I was just going to link to it in the release notes if that's ok

1569852254
scientes
yeah fine

1569852259
fengb
I'm pre-gaming with old release notes >_>

1569852288
andrewrk
I'm about to make the tag

1569852309
scientes
i'm working on updating the glibc symbols and this line doesn't work

1569852310
scientes
./update_glibc ~/multi/install/glibcs ../lib

1569852317
andrewrk
then I still need the hour it takes to pass CI to write up the Async Functions section. Haven't started that section yet :(

1569852318
scientes
rather ./update_glibc ~/downloads/glibc ../lib

1569852327
scientes
not sure where ~/downloads should be fixed to

1569852338
andrewrk
I don't have the energy to do a really good async functions section in the release notes today. that's going to have to be a separate post or something

1569852339
scientes
heh, the glibc build is like 15 hours

1569852412
andrewrk
scientes, the first arg to ./update_glibc is the source tree of glibc

1569852414
scientes
oh i got it

1569852424
andrewrk
it's looking for those abi list files

1569852427
scientes
~/multi/src/glibc

1569852427
ceymard
is it possible to create new functions during compile time ?

1569852690
scientes
ceymard, not yet

1569852711
scientes
well, you are asking about a JIT, that is different from anonymous functions

1569853349
scientes
is "32" in abi.txt glibc 2.22?

1569853498
ceymard
scientes: so it is planned ?

1569853519
scientes
ceymard, i'm not sure if you are talking about anonymous functions or a JIT

1569853540
ceymard
neither

1569853549
ceymard
I want to know if I can generate a function during comptime

1569853561
scientes
I think anonymous functions would be able to do that

1569853563
ceymard
just like inline for inlines a loop

1569853578
scientes
like a template

1569853582
ceymard
yup

1569853588
ceymard
exactly like that

1569853634
owl_000
is there function overloading or something like that

1569853638
owl_000
in zig

1569853653
scientes
owl_000, no, shadowing is explicitely disallowed

1569853667
scientes
of course, if you use dynamic linking than that type of stuff still exists

1569853681
owl_000
what is the procedure to pass float and int

1569853689
fengb
If it’s template like behavior, you can do a lot of that with comptime args

1569853724
scientes
owl_000, you can pass any type to "var", but you can't return arbitrary types yet, and that is controversial

1569853890
owl_000
ok, i am actually trying out zig. but i like the idea of lean and clean c replacement.

1569853964
dimenus
0.5 is almost here!

1569853977
owl_000
`warn("{} {}",1,2);` #557 still exists

1569853982
owl_000
why?

1569854029
fengb
Because the workaround is probably easier than the fix

1569854046
tencho
Is it bad to return a slice of a local array?  like this

1569854133
fengb
tencho: yes that's undefined behavior and mostly referencing garbage memory

1569854135
fengb
most likely*

1569854290
euantor
Guess I better prepare to update the chocolatey package - last time I was a day late and managed to get a comment asking where it was even with that short delay 😆

1569854317
andrewrk
euantor, you still have ~40 minutes until the CI finishes :D

1569854328
andrewrk
which is good, I'm still writing the release notes @_@

1569854359
euantor
I'll get a PR open ready for it, then I just have to wait for the chocolatey reviewers

1569854393
konv
andrewrk, is there any way I can help you with that?

1569854417
andrewrk
konv, not anymore, it's almost done

1569854436
andrewrk
you can help me in 6 months by reminding me to leave more than 1 week for writing release notes

1569854454
andrewrk
ya'll were too damn productive this cycle

1569854588
owl_000
351 issues were closed before this release. lot of work. great job

1569855162
ceymard
why not having a changelog somewhere ?

1569855182
ceymard
it would allow people to check on zig's development more often than every 6 months

1569855230
andrewrk
ceymard, here it is:

1569855366
ceymard
andrewrk: I meant something a little more curated :D

1569855422
ceymard
but I get how it could be a hassle given the sheer amount of commits...

1569855469
andrewrk
I'm happy with the division of time I've chosen on docs vs progress

1569856040
andrewrk
the fact that it's been 6 months since 0.4.0 will give us a nice media day today

1569856081
companion_cube
is the release happening right now?

1569856198
andrewrk
CI is building the 0.5.0 tag. I'm wrapping up release notes, will have them uploaded soon

1569856225
hasanyasin
Congratulations for 0.5!!!

1569856334
hasanyasin
Newbie Question: Is there a native way to map strings to enum values directly? When I print an enum value, it prints the name instead of integer value, so I guess enum names are available as strings to the compiler already. If this could work vice versa as well, that would be awesome.

1569856336
fengb
🎉

1569856336
scientes
where does it strip -lc and -lm ?

1569856349
scientes
when linking against the glibc stubs

1569856372
scientes
anyways, that is kinda minor

1569856409
hasanyasin
Typical use cases may be for example mapping headers/messages on text-based network protocols or command line arguments.

1569856447
andrewrk
hasanyasin, @enumToInt / @intToEnum

1569856472
hasanyasin
I mean something like @labelToEnum? :D

1569856482
andrewrk
oh, check std.meta

1569856495
hasanyasin
Thank you!

1569857183
hasanyasin
This is so cool! With Go, to use enum labels like this (const names in Go), I would use code generation, so kinda two-phase compilation.

1569857206
hasanyasin
With zig, just a single line:

1569857212
hasanyasin
return std.meta.stringToEnum(Cmd, str) orelse CliError.CommandNotFound;

1569857227
hasanyasin
This is so beautiful.

1569857500
hasanyasin
andrewrk: Do you think it would fit the language style/design and your taste to have this function in std as a builtin such as @labelToEnum or maybe even T.fromLabel where T is any enum type?

1569858128
shritesh
0.5.0 tests have passed!!!

1569858149
konv
\o/

1569858234
andrewrk
release notes done, uploading now

1569858384
halosghost
:D

1569858451
tgschultz
hasanyasin: std.meta was started with the opposite intention, to move builtins to userland code where possible. I'm not sure if that is still the direction we're headed or not though.

1569858474
hasanyasin
I see!

1569858587
hasanyasin
Maybe two separate directions make more sense based on the functionality. HashMap fits standard library perfectly when we have enums and enum labels can be used as strings with the mentioned function in std.meta.

1569858631
hasanyasin
Of course, I am probably coming from a very different background than most Zig users so I may not be making any sense. Sorry if that is the case.

1569858679
Tetralux
I'm not sure why you wouldn't just use a map with enum keys in that case

1569858703
Tetralux
Or even just an array, depending.

1569858745
hasanyasin
All the keys are known at compile time so enum makes perfect sense. I am already very happy with what we have now. What I was trying to suggest is that if this is a very common case, maybe it would make sense to have this function as a builtin as well.

1569858824
hasanyasin
Let's say you are writing an http server. In almost every modern HTTP server library that I used, method was defined as string which never made sense to me.

1569858838
hasanyasin
In Go, you check request method as req.Method and it has type "string"

1569858878
hasanyasin
There might be of course optimizations in compilation, but using integers for HTTP methods seems much more correct to me.

1569858893
fengb
It's because the method can be arbitrary... eventually

1569858901
hasanyasin
And with zig enums and std.meta.strToEnum, it is crazy easy and fun to do! :D

1569858903
fengb
Spec is open to extending at any point

1569858956
hasanyasin
fengb, do you mean HTTP spec?

1569858969
Tetralux
You could have an enum with values .Get and .Post and then strToEnum and toUppercase (though, I don't think we have the second one in the stdlib.) :)

1569858990
Tetralux
Or rather enumToString, or whatever it's called.

1569859002
Tetralux
.. You know what I mean Xd

1569859011
fengb
Yeah, IIRC PATCH was shoehorned in

1569859016
hasanyasin
Yes, we already have this use case perfectly addressed in Zig. Compile time work is awesome.

1569859030
Tetralux
+1

1569859036
Tetralux
The more you can do at comptime, the better.

1569859071
tgschultz
PseudoStructs can act as a sort of comptime-know-string 0-runtime-cost hashmap, but there's probably a simpler solution.

1569859098
hasanyasin
fengb, I just tried to give an example with HTTP. When you are implementing a library for any protocol, it doesn't make sense to have your code cover future cases before those cases exist. :D If HTTP 3 brings in new protocols, your library will not know those protocols so it will be an error case for your version until you add the new methods to the enum type you designed.

1569859112
Tetralux
tgschultz: I'm probably not gonna do it if it's not running the same code as at runtime.

1569859130
scientes
just use HTTP/1.1 for now

1569859133
fengb
I suppose that's true. I'm giving an excuse for existing implementations :P

1569859139
scientes
that is WAY easier, and still works everywhere

1569859139
hasanyasin
:D :D :D

1569859159
fengb
Since technically the data is a string, keeping it as a string sorta makes sense

1569859176
scientes
zig doesn't have strings

1569859178
hasanyasin
scientes, that was just an example. What I was trying to say has nothing to do with HTTP actually.

1569859192
plumm
just came to say congratulations :)

1569859207
rifkik
Congrats!

1569859220
hasanyasin
Yeah, very happy to see 0.5. I have already updated my local binary.

1569859224
scientes
oh cool, it is here!

1569859327
Tetralux
It's kinda weird to do `zig version` and have it just say `0.5.0`

1569859333
Tetralux
WHAT SORCERY IS THIS

1569859336
Tetralux
:D

1569859490
tgschultz
I'll have to schedule some time to update all my public code. Also to wrap my head around the new coroutines to see if replacing my state machine implementations with them would be cleaner.

1569859517
andrewrk


1569859523
andrewrk
download page is live

1569859545
hasanyasin
I don't know if you watched the videos of last few live sessions, but I believe those are very good to understand async/await.

1569859548
Tetralux
tgschultz: While you're at it, I'm interested how much performance changes. I'd imagine you are too :)

1569859550
mikdusan
1541 commits 👍

1569859567
hasanyasin
Congratulations @andrewrk!

1569859581
konv
Congrats!

1569859602
FireFox317
Congrats Andrew!!

1569859611
andrewrk
great work everyone, typing up these release notes made me realize just how much the community has pitched in

1569859648
andrewrk
if anyone is mentioned in the notes and wants things to be reworded, shoot me a pull request

1569859775
mq32
<mikdusan> 1541 commits 👍

1569859782
mq32
sounds like i have to fire up my floppy drive again…

1569859791
mq32
congrats on the release!

1569859941
euantor
Chocolatey package published, awaiting moderation:

1569859971
scientes
andrewrk, the C ABI is also not fully implemented for arm64

1569859989
andrewrk
scientes, I'll make note of that

1569860025
fengb


1569860052
halosghost
fengb: oh?

1569860059
halosghost
fengb: that page looks good to me?

1569860078
fengb
nvm

1569860080
halosghost
:)

1569860090
fengb
I'm blind. I just assumed the first bulletpoint is master

1569860114
halosghost
it's true that master is not on that list

1569860133
halosghost
so, if it should be, then yes, that should be changed

1569860135
andrewrk
halosghost, master == 0.5.0 currently. it'll get overwritten from the template next time the CI server finishes

1569860145
halosghost
andrewrk: makes sense

1569860159
kristoff_it
congrats to andrew and everyone that contributed for the new release!!

1569860167
halosghost
indeed

1569860320
plumm
is there any current time library btws?

1569860330
shritesh
Submitted 0.5.0 to homebrew

1569860333
plumm
people on the discord also send their congratulations

1569860419
andrewrk
<3 shritesh & euantor

1569860512
Cadey
yay 0.5.0 :D

1569860534
Cadey
andrewrk: congrats on the release!

1569860705
andrewrk
thanks everybody :)

1569860711
Tetralux
andrewrk: Is {1:5.9} meant to be {0:5.9} in `Formatted Printing`?

1569860711
Barabas
Hello

1569860726
Tetralux
Barabas: o/

1569860731
Barabas
I tried some zig a while ago, but it seems the syntax has changed a bit

1569860757
Barabas
How do I initialize a slice (member) to an empty slice?

1569860780
andrewrk
Tetralux, good catch

1569860782
Tetralux
`field: []T = [_]T{}` IIRC.

1569860788
Barabas
Ah

1569860816
Barabas
I could have thought of that myself :P

1569860831
Tetralux
You can populate it to all zeroes, for instance, with `[_]T{0} ** count` also :)

1569860836
Tetralux
andrewrk: ;)

1569860895
Tetralux
Am I to guess that big.Rational cannot represent an arbitrary precision fractional value?

1569860925
donpdonp


1569860952
donpdonp
new Zig lang today. long live zig!

1569860979
Barabas
oh wow, so I actually missed two whole version :o

1569860989
andrewrk
I'm hoping to see the release notes on HN and reddit today

1569861095
shritesh
I may have just submitted it to HN ;)

1569861109
donpdonp


1569861186
tgschultz
segfault stack traces, nice.

1569861292
donpdonp
okay now i can sit down and read the thing. the number of systems mentioned with some kind of support is amazing.

1569861335
andrewrk
with test coverage now too

1569861381
donpdonp
and.. front page of hackernews. (currently #13 for me)

1569861458
plumm
yep, 13

1569861534
plumm
lol @ the 69 & 420, doubt any other language would let that slide hehe

1569861616
halosghost
oh, it already got posted

1569861618
halosghost
nevermind

1569862243
donpdonp
#2 spot on both hackernews and lobsters. word travels fast.

1569862430
andrewrk
oh crap I forgot to search for TODO in the release notes

1569862443
plumm
lmao i was gonna point it out but assumed you left it there for a reason

1569862452
Tetralux
There's 10 of those :)

1569862495
Barabas
This also looks weird

1569862505
andrewrk
TODO make code example of this -> NOPE! TODO: pull code example -> Nope!

1569862531
andrewrk
Barabas, so you can see the fn signature

1569862550
andrewrk
oh, I see

1569862554
andrewrk
so many  mistakes

1569862562
Tetralux
I know the feeling

1569862576
FireFox317
andrewrk, you're gonna put it on r/programming yourself?

1569862582
andrewrk
no

1569862587
Tetralux
Every time I write anything, I always check multiple times for errors, and then still have to spend 15 minutes fixing mistakes after I posted it xD

1569862592
andrewrk
I'll upvote it really hard though

1569862612
andrewrk
I usually do that but I ran out of time

1569862685
Sahnvour
congrats everyone on the release

1569862693
andrewrk
you too Sahnvour

1569862748
FireFox317
Posted!

1569862753
Sahnvour
thanks ! now let's enjoy these release notes :)

1569862907
Barabas
> Async functions are no longer generic, and do not require the async keyword. Zig infers that a function is async when it observes that the function contains a suspension point.

1569862915
Barabas
Doesn't this make it hard to see whether a function is async or not?

1569862934
Barabas
Especially when it's only async because calls another function which has a suspension point.

1569862942
andrewrk
yes, similarly to how it's hard to see whether a function can execute at comptime or not

1569862950
donpdonp


1569863076
Cadey
andrewrk: what would an event loop for something that spawns multiple indepdendent HTTP downloads look like?

1569863121
andrewrk
Cadey, this:

1569863123
andrewrk
:-)

1569863152
Tetralux
Did std.event.Loop get fixed for the new async?

1569863169
Cadey
oh

1569863173
Cadey
because stack frames are variables

1569863174
shritesh
I love that the theme of 0.6 is going to be safety.

1569863178
Cadey
oh shit

1569863183
andrewrk
it's still correct for the new async. there are bugs though, it needs to be audited & fuzz tested

1569863193
Tetralux
andrewrk: Gotcha.

1569863218
andrewrk
Cadey, you might enjoy the most recent stream I did, some fun async demos

1569863254
Tetralux


1569863313
Barabas
Oh I see. Async functions can also be non-async, somehow. Kinda cool, also kinda confusing.

1569863326
andrewrk
yeah that one. also this older one

1569863341
andrewrk
I plan to make these demos in text form eventually

1569863355
andrewrk
but right now I'm going to go have lunch

1569863373
Tetralux
Barabas: `noasync async_function()` just asserts that the otherwise-async function does not actually suspend on that particular call.

1569863379
Cadey
andrewrk: i really like that you managed to do async without hard depping an allocator

1569863385
plumm
my main confusion is that global frame var, whats the point of that?

1569863387
Cadey
that's just nuts to me at some level

1569863389
shritesh
Cadey: Async functions also work across WASM boundary

1569863396
Cadey
shritesh: ?

1569863477
shritesh
Cadey:

1569863492
Tetralux
plumn: The global frame is because when the function suspends, you have to "have a plan" for resuming it. In that example, you aren't using an event loop (which is normally how you'd do it), so instead, when it suspends it filled out the global with it's own frame, which is used to resume it later.

1569863512
shritesh
You can suspend from zig and resume from wasm (vice versa too I guess).

1569863526
Cadey
hahahahaha

1569863531
Cadey
i love that

1569863532
Tetralux
Normally, you wouldn't call resume or suspend manually; you'd use async/await instead.

1569863532
FireFox317
That is so cool tho

1569863549
Tetralux
> You can suspend [...]

1569863550
Tetralux
Wait

1569863550
donpdonp
andrewrk: unrequested advice incoming, I hope you take more than lunch off and rest up a bit. seems to be you're doing an incredible amount of work and management and burnout is real.

1569863551
Tetralux
How

1569863586
Cadey
i'm gonna compile that to webassembly and read the compiler output

1569863616
plumm
Tetralux: is there not already an event loop?

1569863643
Tetralux
plumn: Only if you make one and call .run on it, IIUC.

1569863661
Cadey
plumm: the stdlib has one yeah

1569863668
shritesh
If you're using WASM in a JS-host environment, it makes sense to use the JS event loop itself.

1569863713
Tetralux
I'm not clear what std.event.Loop.instance [or whatever it's called] is about, though.

1569863737
Tetralux
Does that get populated when you make an event loop? I'm guessing not.

1569863773
Tetralux
andrewrk: Also, the first example in 'Async Functions' -- does that not produce a compile error; the one about _start cannot be async?

1569863784
andrewrk
thanks donpdonp

1569863839
andrewrk
Tetralux, it's not doing `func()`, it's doing `async func()`. async fn call is not a suspend point; await is

1569863868
Tetralux
Ah.

1569863884
Tetralux
I guess I got a little confused because normally your examples have asyncMain() xD

1569863901
Cadey
andrewrk: why doesn't zig use the start section?

1569863923
andrewrk
Cadey, I don't remember but I remember there is a good reason for this

1569863932
Cadey
oh is it LLVM dumbness?

1569863948
Cadey
i remember reading something about LLVM being really dumb wrt the start section

1569863959
shritesh
The runtime will not have any initialized memory

1569864102
shritesh
Details:

1569864127
Cadey
oh

1569864130
Cadey
ugh

1569864131
Cadey
that's dumb

1569864153
scientes
daurnimator, does worksforarm have M-profile processors so i can test helium SIMD instructions?

1569864304
andrewrk
I don't mind negative comments at all, but false claims with no evidence drive me insane

1569864319
plumm
whos hurting you

1569864366
andrewrk
it's just annoying to do the chore of responding so that drive by viewers don't get incorrect facts

1569864375
fengb
Is this the guy who claims "Zig is too complicated"?

1569864382
andrewrk
yeah haha

1569864411
FireFox317
Jup those people will always be there

1569864431
Cadey
haters gonna hate

1569864433
Cadey
ponies gonna pwn

1569864435
Cadey
etc

1569864452
tgschultz
what happens if I `await` a function with `suspend` in it, having not called `resume` anywhere?

1569864477
Cadey
shritesh:

1569864482
Cadey
i like how simple it is

1569864503
Cadey
you can see the suspend point getting inlined into the amain function

1569864518
Cadey
er

1569864524
Cadey
you can see it do the thing

1569864528
Cadey
i words good not

1569864539
andrewrk
tgschultz, then your `await` suspends indefinitely

1569864561
shritesh
Yeah, `call_indirect` is where the magic happens.

1569864568
andrewrk
tgschultz, it's a lot like not calling free(). it makes sense to not do sometimes, like with arena allocators

1569864674
tgschultz
yeah, I'm just trying to figure out how I'd alter state machines that currently exist to use async instead, and if that would actually be less complicated or not. For my bmp lib, so far it seems like it wouldn't have any benefit in terms of cleaning things up. that isn't a criticism, it isn't really designed to replace arbitrary state machines.

1569864723
fengb
tgschultz: I've cobbled together a paradigm for generators. That could possibly work for state machines

1569866369
Tetralux
Wait - in the #2046, a backslash with a newline immediately after it isn't enough to disambiguate it?

1569866428
Cadey
andrewrk: thank you for making async work without function colors

1569866622
fengb
The most amazing thing is that blocking IO just works. I really didn’t expect that

1569866629
mikdusan
Tetralux: .d escapes are shockingly bad; and also a prime example of technical debt

1569867052
Cadey
oh damn

1569867069
Cadey
this means i can make my templeos code ported to zig example about 500x more efficient

1569867190
Barabas
Somehow while(pointer) and expecting it to stop when pointer becomes null doesn't work anymore?

1569867194
Barabas
Or at least this is broken

1569867250
Tetralux
That smells of result location.

1569867540
Barabas
There's not even a result =L

1569867581
Tetralux
I forget exactly how this was fixed in std.

1569867603
Tetralux
When implementing result location semantics, a similar piece of code was a problem that was worked around.

1569867606
Tetralux
andrewrk, ping.

1569867612
Tetralux
Try getting rid of the temporary 'node'.

1569867669
fengb
Barabas: what's the error?

1569867687
Barabas
while (self.head) |n| {    self.head = n.next;    self.allocator.destroy(n);}

1569867691
Barabas
this also doesn't work

1569867707
fengb
What's the error?

1569867709
Barabas
fengb 'cast causes pointer to be null'

1569867716
Tetralux
Oh interesting.

1569867718
Tetralux
Nevermind.

1569867731
Tetralux
The problem I was talking about was not a compile error.

1569867743
Tetralux
Might be related to a recent issue.

1569867752
Tetralux


1569867754
Barabas
it's at runtime

1569867759
Barabas
2/10 test "SingleLinkedList prepend"...cast causes pointer to be nullC:\Users\Bas\lib\zig\std\mem.zig:91:31: 0x7ff63edc39b6 in std.mem.Allocator::std.mem.Allocator.destroy (test.obj)C:\Projects\ZigZag\containers\single_linked_list.zig:41:39: 0x7ff63edc2bb8 in SingleLinkedList(u32)::SingleLinkedList(u32).deinit

1569867759
Barabas
(test.obj)C:\Projects\ZigZag\containers\single_linked_list.zig:136:27: 0x7ff63edc1c54 in test "SingleLinkedList prepend" (test.obj)C:\Users\Bas\lib\zig\std\special\test_runner.zig:13:25: 0x7ff63ede360e in std.special.main (test.obj)C:\Users\Bas\lib\zig\std\special\start.zig:113:49: 0x7ff63ede33df in ??? (test.obj)

1569867768
Barabas
oh, that's unreadable

1569867893
Barabas
Tetralux interesting, looks similar to the error I get.

1569867903
Barabas
Though that means I've run into two bugs =P

1569867926
Tetralux
Consider yourself privileged :p

1569867930
fengb
Hmm, logging gives me Node@1071d2038, Node@0

1569867932
Barabas
The error points to the destroy function in the std lib

1569867933
Barabas
const non_const_ptr = @intToPtr([*]u8, @ptrToInt(ptr));

1569867935
fengb
That's not right

1569867939
Barabas
with that line

1569867945
fengb
Yeah it's iterating the null

1569867968
Barabas
Yes =|

1569868323
fengb
Hmm, I stuck an if statement there and that works as expected

1569868353
Tetralux
You mean like, `if (node == null) break` ?

1569868464
fengb
Was doing if(node) |nn| self.allocator.destroy(n)

1569868474
fengb
The break also doesn't work...

1569868544
Tetralux
So it's acting like `n` in still a nullable type, but destroy doesn't take a nullable and therefore it errors?

1569868544
fengb
Oh

1569868549
fengb
Yeah it's result location

1569868556
fengb
`while (node) |n| {`

1569868561
fengb
This makes "n" a window into the  variable

1569868574
fengb
So when you reassign node, you also reassign "n"

1569868593
Barabas
cool

1569868605
fengb
Try `const n_copy = n`

1569868622
fengb
That explicitly copies the value out

1569868634
Tetralux
Does `while (node) |n| : (node = n.next) {}` work?

1569868646
Tetralux
[[ I forget exactly where the ':' goes there. ]]

1569868656
fengb
Oh yeah that should work too

1569868657
Barabas
the const thing works

1569868704
Barabas
And that other thing as well

1569868716
Barabas
Thanks for looking into it :)

1569868724
fengb
Use the other thing. it's more idiomatic

1569868725
Tetralux
Basically - the error should be "cannot modify content of 'n' because it is unwrapped; you can copy it with an explicit assignment and use that instead or possibly use the after-loop statement."

1569868775
Barabas
So that just calls destroy before re-assigning node, right?

1569868790
Tetralux
Or rather - "because the unwrapped optional value is const" - sometihng like that.

1569868797
Tetralux
Barabas: And yes.

1569868808
Tetralux
Runs the loop block; runs the statement after ':'

1569868815
Barabas
hmhm

1569868825
Tetralux
Just like in:

1569868831
Tetralux
.. `while (i < n) : (i += 1) {}`

1569868852
Barabas
There's some other test which fails now, so I'm betting that's due to a similar construct

1569868870
Tetralux
Probably xD

1569868912
Barabas
This is probably also broken:

1569868971
fengb
Yeah, it'll return the address of the current self.node.value

1569868976
Barabas
Yeah =|

1569868997
Barabas
I kinda feel like it shouldn't be like this.

1569869010
Barabas
(I'll fix it with defer?)

1569869011
Tetralux
That sounds like something that should be a compile error.

1569869013
FireFox317
Such a pity you weren't in here before the release

1569869056
fengb
This is a known footgun :/

1569869060
Barabas
I almost was! I just got sick the day before yesterday.

1569869075
Barabas
Otherwise I'd have done it yesterday ^^

1569869136
Barabas
xD

1569869143
Tetralux
Barabas: I'd suggest either `if (...) |_| {` or `if (self.node != null)1

1569869154
Tetralux
But if defer is cleaner ... :)

1569869158
Barabas


1569869222
Barabas
I'm not sure what you're suggesting.

1569869291
Tetralux
Basically, avoid using node at all.

1569869441
Barabas
I can manually do the unwrapping, yes.

1569869541
FireFox317
I think you would want to hear andrew's option about this use case

1569869561
Barabas
I'll open an issue

1569870299
_Vi
How idiomatic is omitting braces after `if()` or `while()` in Zig?

1569870367
halosghost
is it even legal to omit braces?

1569870373
Barabas
FireFox317 Tetralux

1569870430
Barabas
halosghost apparently it is... :/

1569870438
Barabas
at least it compiles

1569870457
halosghost
mm

1569870468
halosghost
that's a bummer

1569870474
Barabas
Agreed =D

1569870682
Barabas
wow, the singly linked list in std is weird.

1569870702
Barabas
it takes an allocator per node

1569870743
Tetralux
Wait - it does?

1569870816
Barabas
yes:

1569870845
Tetralux
Oh right - I gotcha.

1569870895
Barabas
I don't know what the use case there is though. If you ever allocate different nodes with different allocators, you've to keep track of which node used which allocator somehow =/

1569870998
mikdusan
Barabas: afaik all unwrapped optionals/unions/etc are aliases since result-location branch was merged. and this is how it's supposed to work

1569871044
Barabas
hm... well it's confusing.

1569871063
mikdusan
well it saves a forced copy

1569871128
Barabas
sure...

1569871129
mikdusan
i think if there was syntax like this it would help:  `if (wrapped) |var unwrapped|` or something similar... that would handle your usecases and clarity, right?

1569871156
Barabas
You can already do `if (wrapped) |*unwrapped|`

1569871169
Tetralux
.. where 'var' generally means 'make storahe for this here'

1569871172
Barabas
Which handles the 'I don't want a copy' usecase.

1569871178
mikdusan
that's not the same thing; `*` means mutability

1569871191
Barabas
hmm

1569871208
Tetralux
well no

1569871214
Tetralux
* means 'pointer to'

1569871216
Tetralux
but yes

1569871241
fengb
mikdusan: his case was that he mutated the original location, and it affected the unwrapped value

1569871248
fengb
The code doesn't make it look obvious what's going on

1569871442
fengb
It's sort of akin to how Go functions close around for loop variables. Sure we can learn it, but it still feels wrong

1569871470
Tetralux
?

1569871485
mikdusan
if the rule is "unwrapping makes alias" then it is obvious

1569871490
fengb


1569871527
Tetralux
Oh . Huh. Ugh.

1569871623
andrewrk
I don't consider this to be "stable" part of the language yet, it's still under consideration what the best semantics are here

1569871760
Barabas
Well, you can make arguments for both ways. So it's not obviously wrong. Just a bit confusing imho.

1569871883
knebulae
@andrewrk: congrats on 0.5.0!

1569871973
andrewrk
thanks knebulae  :)

1569872052
Barabas
Yes, overal the progress looks very good :)

1569872517
FireFox317
damn, so many new issues already after the release xd

1569873666
_Vi
How do I do a block N times in Zig without introducing a new variable for a counter?

1569873828
mq32
_Vi, somebody beat me, but

1569873829
_Vi
Is there some trick like `for([1]void{}  ** N) |_| { .... }`?  Preferrably for non-const N.

1569873844
mq32
for([_]{0} ** N) |_| { ... }

1569873854
mq32
but that only works for comptime known

1569873884
_Vi
What is idiomatic way to print (warn) N spaces where N is indentation level supplied as argument?

1569873896
_Vi
(function argument)

1569873982
mq32
("\t" ** 50)[0..n]

1569873993
mq32
for values from 0..n

1569873996
mq32
otherwise you need an allocator

1569874855
daurnimator
andrewrk: ==> WARNING: Package contains reference to $srcdir

1569874927
ceymard
congrats on 0.5.0 to andrewrk and all the contributors

1569875218
daurnimator
scientes: I have no idea about M-profile: how would I tell?

1569875227
fengb
daurnimator: you're up early :P

1569875237
scientes
daurnimator, i actually contacted someone at ARM and got a response

1569875242
scientes
there is no silicon yet

1569875376
daurnimator
fengb: yeah adjusting myself for an early flight tomorrow

1569875400
fengb
Fun vacation plan?

1569875408
daurnimator
fengb: nope; conferences

1569875427
daurnimator
I'll be in europe for 2 weeks, so if anyone wants to do an impromptue zig meetup...

1569875588
scientes
Europe is a kinda big place....

1569875648
daurnimator
scientes: I'll be in germany, austria, netherlands, france, italy and UK at various times and most of it is flexible.

1569875658
scientes
dang

1569875667
scientes
that's alot of places in 2 weeks

1569875726
daurnimator
scientes: still not that big of an area :P it's barely bigger than my state :P

1569875750
scientes
bigger than Texas

1569875773
scientes
oh, those are state's too

1569875784
ceymard
files can have container members ?

1569875795
ceymard
does that mean they can be used like a struct ?

1569875806
ceymard
with methods and fields and such

1569875820
daurnimator
ceymard: yes

1569875830
daurnimator
ceymard: a file is just the "inside" of a struct.

1569875844
ceymard
how may a method target the file as its self type

1569875853
ceymard
I mean, what's the type of the struct

1569875855
ceymard
@This() ?

1569875860
tgschultz
Yes

1569875884
ceymard
can they be extern as well ? (I suppose not ?)

1569875888
daurnimator
ceymard: `const somefile = @import("file.zig");` is the same as `const somefile = struct { .... contents of file here ..... }`

1569875899
ceymard
'aight

1569875991
daurnimator
scientes: indeed.

1569876082
scientes
can i use access() in zig?

1569876087
scientes
(does it work on windows)?

1569876111
scientes
ok, I can do it cleaner

1569876175
scientes
actually, I would rather not have this data in zig

1569876257
scientes


1569876309
scientes
os_file_exists

1569876316
scientes
so we don't use _access

1569876421
daurnimator
scientes: on windows an access check is just an open+a close

1569876442
scientes
yeah we already have os_file_exists

1569876505
daurnimator
oh you mean from c++; not from zig itself

1569876550
scientes
oh yeah, wasn't specific

1569876591
daurnimator
andrewrk: in the Support Table I think we should colour things; freestanding maxes out at tier 2, so we should indicate that as a "good" state

1569876615
scientes
so (void) doesn't silence the unused result....

1569876651
daurnimator
wow. I got 19 mentions in the release notes

1569876720
scientes
I got a bunch too

1569876722
daurnimator
I think LemonBoy gets the high score of 61 though :P

1569876760
mikdusan
62. "LemonMan" was used once :)

1569876804
nrdmn
good evening!

1569876810
nrdmn
I missed most of the party

1569877117
Sahnvour
nrdmn: the whole zig party is only beginning though :)

1569877189
nrdmn
:D

1569877317
kllr_sbstn
Hey, is it possible to set a custom equals method for `std.testing.expectEqual`? I have structs containing floats, so the values don't need to be 100% exact.

1569877546
daurnimator
kllr_sbstn: you would write your own helper around std.testing.expect

1569877616
kllr_sbstn
alright, i already do that. i thought there might be a a more 'clever' may. Thanks!

1569877624
kllr_sbstn
*way

1569877690
daurnimator
kllr_sbstn: expectEqual is simply a wrapper around expect itself

1569877975
daurnimator
scientes: expectEqual gives much nicer error messages. I use it when possible

1569877987
scientes
ahh i see

1569878457
fengb
I've noticed type inferrence to be much better when the literal is on the right :/

1569878656
Tetralux
When is it not?

1569878688
scientes
The CI is down

1569878693
scientes
gpg: keyserver receive failed: unknown pubkey algorithm

1569879413
scientes
The CI is down

1569881956
daurnimator
zig W: Directory (usr/lib/zig/std/unicode) is empty

1569881958
daurnimator
zig W: Directory (usr/lib/zig/std/json) is empty

1569882148
daurnimator
uploaded zig 0.5.0 to arch community-staging. Still waiting for LLVM9 to finish QA before moving to community

1569882160
daurnimator


1569882165
daurnimator
Arch users welcome to test :)

1569884888
andrewrk
daurnimator, I'm annoyed at cmake for not letting me do a custom step on install

1569885696
fengb
How do I install the staging package? :/

1569886246
traviss
anyone know when the 0.5.0 binaries will be available?

1569886324
Tetralux
traviss: Already are AFAIK

1569886331
fengb
Should be downloadable already:

1569886385
traviss
oh thanks. i expected them on github

