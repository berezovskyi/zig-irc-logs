1564705222
daurnimator
andrewrk: btw, we might want to rename "cancellation point". people coming from C/POSIX will get very confused....

1564705257
scientes
daurnimator, did you figure out the arm64 ci?

1564705278
daurnimator
scientes: what do you mean by "figure out"

1564705287
scientes
oh there was a confusion that it wouldn't work

1564705294
daurnimator
scientes: I ran into an issue where at least the docker driver is completely broken on arm64

1564705300
scientes
just use shell mode

1564705303
scientes
instead of docker

1564705313
scientes
its faster anyways

1564705317
scientes
zig doesn't need docker

1564705319
daurnimator
shell mode leaves quite a lot of potential for mess left behind

1564705339
scientes
it starts with a clean checkout every time

1564705343
fengb
Reboot every night? :P

1564705349
scientes
otherwise the "mkdir" would fail

1564705352
scientes
as it lacks a -p

1564705362
daurnimator
scientes: I meant files leaking elsewhere onto the system

1564705372
scientes
yes, that is possible, but in the case of ccache that is desired

1564705391
daurnimator
usually for CI systems you explicitly call out certain directories to be kept

1564705406
daurnimator
fengb: reboot won't erase things :P

1564705426
daurnimator
I wonder if we can use shell mode but do all the operations in a container manually

1564705447
scientes
its not really necessary

1564705457
daurnimator
docker run -it debian bash -s << EOF ............ script here ...............

1564705462
daurnimator
or something like that

1564705470
scientes
for systemd, yes you need it, but zig doesn't need some complicatedness

1564705470
fengb
Toss /usr into a ramdisk. Problem solved!

1564705486
fengb
Er, /var, /home, whatever

1564705498
scientes
/usr/lib/gitlab-runner

1564705654
daurnimator
scientes: assuming no bugs in zig.... or stupidness. but recall that we're running arbitrary code from people sending PRs: we don't want a bad PR messing up the system

1564705674
scientes
> but recall that we're running arbitrary code from people sending PRs

1564705676
scientes
ahhh good point

1564705776
scientes
we could add a before script that just deletes everything in ~ (which is the only writable directory, aside from /tmp)

1564706100
scientes
or even better

1564706144
scientes
run a script that creates a new mount namespace, in which only the build directory is writable

1564706215
daurnimator
yep... you could call that script.... docker :P

1564706230
scientes
docker is overkill however

1564706236
scientes
all the COW stuff

1564706241
daurnimator
overkill is still a kill

1564707894
dimenus
did andrewrk stream tonight?

1564708944
daurnimator
andrewrk: no

1564708946
daurnimator
oops

1564708948
daurnimator
dimenus: no

1564708968
dimenus
hah

1564709081
nairou
What is the process for building zig on Linux? My distro doesn't have a premade package, and I only see Windows/Mac instructions on the website.

1564709169
daurnimator
nairou:

1564709227
nairou
Oh thanks! I should have looked there, I was digging through the wiki for it.

1564709296
scientes
nairou, there are also pre-built binaries for linux, of master

1564709308
scientes
nairou, they are built every commit

1564709326
nairou
Nice. I'll try that if I have any issues.

1564709350
daurnimator
nairou: yeah grabbing the linux binary from

1564709368
daurnimator
particularly if your distro has an old llvm

1564709625
nairou
For someone just getting started and learning the language, would you recommend master or stick with 0.4.0?

1564709661
dimenus
master imo

1564709663
daurnimator
nairou: at this point, master

1564709675
dimenus
tests are part of CI, so master shouldn't have that many regressions

1564709689
daurnimator
nairou: about a month ago there were some large changes in master since 0.4.0.

1564709828
nairou
Awesome

1564710524
ntgg
is there a way to go from @tagName to an enum variant?

1564710591
daurnimator
ntgg: I think there's something in std.meta for it

1564710884
ntgg
daurnimator: There is! thanks

1564710919
daurnimator
ntgg: std.meta.stringToEnum?

1564711061
ntgg
yeah, that is what I was looking for

1564711381
nairou
Anyone seen this when building zig? "... can not be used when making a PIE object; recompile with -fPIC"

1564711468
nairou
Looks like it's all centered around the libembedded_softfloat.a library

1564722068
emekankurumeh[m]
dimenus: zig emits codeview, llvm supports emitting codeview and DWARF

1564722426
daurnimator
andrewrk: in #1778 you have @handle() in your examples. what does that map to in the current design?

1564722471
andrewrk
I've got await working in the rewrite-coroutines branch. most coroutine tests passing now. it felt great to delete all those `catch unreachable`, `async`, and `<allocator>`

1564722476
andrewrk
daurnimator, @frame

1564722579
daurnimator
andrewrk: so it would be e.g. `event_loop.queueFsWrite(@frame(), &msg);`? where .queueFsWrite would call it's first argument to resume the coroutine?

1564722588
andrewrk
these semantics are slick. I think people are going to be happy with this

1564722636
daurnimator
And that @frame() could be stored in some heap-allocated location?

1564722685
andrewrk
daurnimator, `resume foo;` works with these types: `*@Frame(func)`, `anyframe->T`, or `anyframe`. all 3 of those are pointer types

1564722716
andrewrk
I'll push a test case with a heap allocated frame so you can see

1564723096
nrdmn
daurnimator: I uploaded a few demo apps for my PR :)

1564723128
daurnimator
nrdmn: cool :)

1564723628
andrewrk
daurnimator, ok actually I need to fix a result location issue to make that work:

1564723713
daurnimator
andrewrk: also I tried poking about on top of your branch but kept hitting assertions; obviously its not ready yet so I think I just need to keep waiting :P

1564723809
andrewrk
yes, that or stick to minor deviations from the set of passing tests (behavior tests are all passing in the branch)

1564723856
daurnimator
andrewrk: so in e.g. "calling an inferred async function", what

1564723963
daurnimator
and then if I apply

1564723997
andrewrk
1. pointer to the function to call when resuming 2. pointer to the awaiter frame / cancel bit 3. pointer to the return value 4. return value 5. all the parameters 6. all the local variables

1564724182
andrewrk
oh, oops. I didn't even wire up result location semantics for the assignment operator

1564724379
daurnimator


1564724414
andrewrk
yes you can't resume a function which has returned

1564724442
andrewrk
each suspend should have exactly 1 resume corresponding to it

1564724456
daurnimator
I thought all its state would be 'snapshot' into `extra_frame` so that it wouldn't know it hasn't returned

1564724511
andrewrk
@frame() returns a `anyframe->T` which is a pointer type

1564724533
andrewrk
sorry, it returns *@Frame(other) as you have in your source, which are pointer types

1564724563
andrewrk
other_frame == extra_frame in your example. they are both the address of `p` inside doTheTest

1564724594
daurnimator
ah okay, so it's really just `p`

1564724666
daurnimator
so instead of `resume other_frame.*` I could write `resume p`?

1564724669
andrewrk
yes

1564724753
daurnimator
test failure says otherwise :P

1564724789
andrewrk
yeah I wouldn't go about trying to fix the event loop code with this branch just yet :)

1564724837
daurnimator
andrewrk: btw, try and use `expectEqual` instead of `expect`?

1564724873
andrewrk
sure

1564724920
daurnimator
FWIW

1564724940
daurnimator
x is 1 instead of the expected 2.

1564725102
andrewrk
damn this assignment result loc thing is nontrivial to fix

1564725130
daurnimator
andrewrk: back to the copy elison mines?

1564725156
andrewrk
a bit

1564725805
daurnimator
andrewrk: so are you saying that a heap-allocated frame is blocked on copy elision fixes?

1564726301
andrewrk
you can look at the BRANCH_TODO file in that branch to see my list of things to do before merging

1564728088
firefox317
Nice progress andrewrk!

1564740554
mq32
hey

1564740574
mq32
does zig currently has any user-defined types where the user is not able to add any methods?

1564740591
mq32
@OpaqueType would be a candidate, but it's a rather special case

1564741209
samtebbs
mq32: Could you elaborate on what you mean by "user-defined types"?

1564741232
mq32
anything that is not a built-in type

1564741239
samtebbs
I don't quite understand how a user (i.e. programmer) would define a type but not be able to add a func/method

1564741244
mq32
struct, enum, union, ... are used-defined type

1564741254
mq32
u32 would be built-in

1564741286
mq32
but @OpaqueType is kinda user-defined (as in: the user has to give the type a name) but also not (as in: the user cannot decide anything about the types properties)

1564741289
samtebbs
That makes sense

1564741308
samtebbs
What's your use case?

1564741328
mq32
"writing issues on github"

1564741338
mq32
or better: answering to issues on github

1564741366
mq32
looks like we only have "error" and @OpaqueType and both are special…

1564741862
samtebbs
Oh I see :)

1564741883
samtebbs
Yeah it doesn't look like it's possible with standard zig

1564741903
samtebbs
It's an unusual feature

1564742178
mq32
which one do you mean?

1564742201
mq32
i don't want to add methods to each opaquetype and error :P

1564743616
ntgg
why is auto indent spaces sometimes when I have indentation as tabs?

1564743626
daurnimator
ntgg: zig is always spaces.

1564743628
ntgg
wrong channel

1564743638
ntgg
my b

1564743800
mq32
just indent with backspaces!

1564744379
daurnimator
pffft. everyone knows to use non-breaking spaces. it makes no sense for indentation to get line-broken

1564744621
mq32
true dat

1564746151
euantor
Any idea why the following code would cause `error: container 'std.os' has no member called 'getrandom'`? Same goes for `os.open()`, `os.close()`,  etc...

1564746169
euantor
Also fails on godbolt as well as locally with master

1564746364
daurnimator
euantor: works for me.

1564746419
euantor
ok, works on zig trunk on godbolt but not 0.4.0

1564746451
daurnimator
std.os was rearranged between 0.4.0 and now.

1564746464
euantor
ah, that's probably the problem then. Thanks!

1564746498
daurnimator
euantor: btw, you might prefer std.crypto.randomBytes

1564746568
daurnimator
oh wait now. there's even std.rand now.

1564746642
euantor
I'm looking to see if I can fix an old issue I made to dip my toes into the stdlib

1564748875
samtebbs
mq32: I mean the feature of having a user-defined type that you can't define functions for. It's quite unusual so there probably isn't a clean way to do it.

1564749048
ntgg
why does this cause a segfault?

1564749132
ntgg
it only happens on a struct with more than one field

1564749217
fengb
Go allows it for aliases. It’s where I learned that it’s possible

1564749714
mq32
samtebbs, i think we're talking about different things, but very similar

1564749851
ntgg
My issue seems to be caused by returning an error, even if it doesn't go down that path

1564749919
samtebbs
ntgg: You could try to minimise it then run it through gdb

1564750925
ntgg
samtebbs: the error is seemingly when compiling the tests, so I'm not quite sure how to run it through gdb

1564751337
samtebbs
ntgg: What command are you using to compile?

1564751410
samtebbs
If you're using `zig build`, then add --verbose to see what it's running, then run `gdb --args <the command that segfaults>`

1564751426
samtebbs
Otherwise run `gdb --args <your zig command here>`

1564752966
ntgg
samtebbs: it says the segfault is in llvm::BasicBlock::getContext()

1564753073
samtebbs
ntgg: Ok, so Zig is passing some as null that shouldn't be. Do you see what line it's failing on?

1564753366
ntgg
I don't use gdb that much, so I'm not sure if I'm missing something, but I don't see any line numbers anywhere

1564753538
ntgg
actually it says no line number information

1564753657
samtebbs
Ah that's probably because it's LLVM and gdb isn't reading the debug symbols for it. You could probably read them in but it may not give us what we want.

1564753722
samtebbs
You could create an issue with the information that you have (if there isn't one open for the problem already).

1564754273
ntgg
it seems to be

1564754604
samtebbs
Oh yeah, that one. Nice

1564754854
samtebbs
ntgg: Your example is quite different from the example code in the issue, so it would be worth you adding yours as a comment.

1564755797
ntgg
alright, done.

1564762443
nrdmn
are bools C ABI compatible?

1564762586
fengb
They should be yes

1564762650
nrdmn
what size are they?

1564762832
fengb
`std.debug.warn("{}\n", @intCast(usize, @sizeOf(bool)));` => 1

1564762846
firefox317
The C standard says this: 6.2.5

1564762869
firefox317
So it is compiler dependent

1564762953
firefox317
Hmm diving a bit deeper C99 says that is must be one byte

1564762970
fengb
So we match :P

1564762972
nrdmn
where does it say so?

1564763021
firefox317


1564763022
nrdmn
C11 says it's at least CHAR_BIT bits wide

1564763127
firefox317
Hmm reading the comments there I think what nrdmn says is correct, at least one byte, but it can be bigger

1564763464
fengb
I'm actually curious now. We do store abi_size separately but I ahven't tracked down where it comes from

1564763538
mikdusan
LLVM api?

1564763701
torque
is there even real life actual hardware that anyone uses where CHAR_BIT != 8

1564763819
nrdmn
torque: PDP 10, some PIC microcontrollers...

1564763931
nrdmn
actually I do need a bool that is exactly 1 byte large, not more, not less. I could use u8, but I like the convenience of being able to write if (condition) instead of if (condition != 0)

1564763937
fengb
A lot of pre-C99 used int/word as bool

1564763973
fengb
Processor word, not wintel “word”

1564764137
nrdmn
I'm not sure if intel is to blame for C ints on recent x86 being larger than what they call a "word"

1564764212
nrdmn
and by 'recent' I mean >= i386

1564764279
fengb
It’s in their documentation that word = 16 bits. It’s also hard coded in Windows

1564764339
fengb
Defined in 8086 apparently

1564766576
nrdmn
I'd like to propose the types boolN, where N is any natural number. their size is N bits. bool can be an alias for bool1. boolN types can be used in conditions without additional comparison operators being necessary. They can be implicitly cast into into other boolN types because their only valid values are 0 and 1.

1564766585
nrdmn
(don't take this too seriously)

1564766675
dimenus
i can't get zig on mingw to build again

1564766683
dimenus
and i can't figure out what's different from what I did the other day

1564766690
dimenus
getting linker errors to z3_*

1564766695
dimenus
z3 is installed

1564769752
andrewrk
nrdmn, @sizeOf(bool) == 1 on all targets

1564769771
scientes
nrdmn, there is a proposal to have bit slices

1564769792
scientes
so you can address individual bits

1564769818
scientes
nrdmn,

1564769881
scientes
fengb, its also hard coded into the intel processor manuals, while everybody else word == 32

1564770251
fengb
Am I weird if I mean native processor size?

1564770318
andrewrk
I try to avoid the word "word" in the context of integer sizes

1564770328
andrewrk
it's pretty ambiguous

1564770571
scientes
as is all the C language

1564770578
scientes
int, char, short

1564770584
scientes
esp. long

1564770620
scientes
fengb, but processors don't have native sizes anymore, unless you mean the size of a pointer

1564770639
scientes
and even then, sometimes its 48-bits, sometimes its 52 or 56 bits, and sometimes it is 64-bits

1564770647
scientes
and they almost all also support 32-bit pointers

1564770657
scientes
(and even 16-bit mode)

1564775762
halosghost
I love the idea of 1-bit addressing

1564775773
halosghost
I've always wanted a 1-bit-byte machine

1564776200
Tetralux
halosghost: I am legally obligated to know why.

1564776211
halosghost
lol

1564776244
halosghost
for which part? loving the idea in Zig or wanting to have a 1-bit-byte machine

1564776258
Tetralux
Both, really.

1564776422
mq32
halosghost: do you know serial computers?

1564776433
mq32
they are literally one-bit-machines

1564776469
mq32


1564777038
halosghost
mq32: I don't and they sound like fun

1564777057
mq32
i've made my bachelor thesis about a bit-serial machine

1564777064
mq32
crazy thing, 55 bit word size

1564777146
emekankurumeh[m]
dimenus: try this CMake file:

1564777212
halosghost
Tetralux: partly because I enjoy bit-packing and you could implement arbitrarily-sized, fixed-width integers on top of 1-bit bytes

1564777225
halosghost
doesn't matter as much in zig because I already have those

1564777257
halosghost
but, I could implement 2's complement arithmetic on top of a bit array and then, whatever size of array you have is the size of the integer :D

1564777346
dimenus
emekankurumeh[m]: what did you change?

1564777360
dimenus
i got it to link statically, but only with lld

1564777376
emekankurumeh[m]


1564777388
emekankurumeh[m]
that adds a search for z3

1564777757
mq32
i have a quick question:

1564777776
mq32
if i want to interface with a C library (dll), don't require a libc, right?

1564778009
andrewrk
alright daurnimator, here's your (test now passing) heap-allocated async function frame example:

1564778048
andrewrk
mq32, that's correct, but usually C libraries do depend on libc

1564778075
andrewrk
zig does not assume it though, so you have the choice of linking c or not even when linking a c library

1564778086
mq32
okay, good :)

1564778125
mq32
hm

1564778144
mq32
c strings will be a "problem" with zig, right?

1564778153
mq32
(in terms of: i have to make sure a slice gets zero-terminated)

1564778233
andrewrk
mq32, the type system will be able to help with null terminated strings after

1564778397
mq32
okay :)

1564778412
mq32
i'm going to try some zig game dev tomorrow :)

1564778431
mq32
have an old game engine i love and want to create games again

1564778460
emekankurumeh[m]
nice

1564778473
mq32
Does anyone know Gamestudio A8?

1564778686
mq32
andrewrk: is defer going to work with coroutines?

1564778818
firefox317


1564778882
andrewrk
mq32, yes, defer and errdefer will work identically whether a function is async or not. the only difference is that async functions have the possibility of running the errdefers when a function returns if the caller "cancels"

1564778929
andrewrk
this is already idiomatic zig, however, which is that when a function returns, the errdefers in scope should be correct, so that e.g. a `try` could be used directly before the `return`

1564778954
mq32
hm

1564778968
mq32
so if i cancel a function that uses defer, i got a potential memory leak?

1564778995
andrewrk
that's not quite right. I can see that I'm going to need to use more intuitive names for these semantics

1564779053
andrewrk
a function call is the same whether or not it is async. just like the operating system can suspend and resume your normal blocking functions, in zig, async functions can be suspended and resumed, but without the kernel intervening

1564779075
fengb
Would a cancel have its own error code?

1564779125
fengb
I should save my questions until I have a chance to play with it :P

1564779193
andrewrk
no - cancel is the same as await, except: (1) it sets a cancel flag that the caller may choose to read at any time, and (2) if the async function gets to a `return` and the cancel flag is set, then it runs not just the defers but also the errdefers

1564779244
andrewrk
if you want to make there be a cancelling error code, you would do something like this: if (@isCancelled()) { return error.PardonMeButThereHasBeenAnInterruption; }

1564779297
andrewrk
without anything like that, functions proceed from start to end just like normal. no hidden control flow. again the only difference is that `return` might end up running the errdefers even if there wasn't an error

1564779351
andrewrk
`cancel` from the caller's perspective, in english, means, "I am choosing to not await this. If it was going to do any side effects or resources, I don't want them and I shan't be keeping track of them."

1564779399
andrewrk
maybe cancel can be renamed to `noawait`

1564779440
dimenus
andrewrk: do we still call ld.link with mingw64 builds

1564779491
emekankurumeh[m]
yes but with the -lldmingw flag first

1564779492
andrewrk
dimenus, yes, with -lldmingw

1564779528
mq32
andrewrk: i was asking as the engine i want to work with utilized endless coroutines in the original version to implement entity behaviour

1564779562
mq32
and i am tempted to recreate that behaviour with zig, but with the option to have safe memory allocation in those coroutines (by deferring the memory release)

1564779601
dimenus
andrewrk: hmm, clang calls ld.lld - thinking through using dwarf on mingw

1564779632
fengb
In single threaded, does that mean cancel would still await?

1564779633
emekankurumeh[m]
would it be undefined behavior for a coroutine to free it's own memory in it's defer

1564779650
emekankurumeh[m]
dimenus:

1564779663
dimenus
it generates debug info now (with the fix you specified in #2951 but no table

1564779675
dimenus
yeah i already did that, before I didn't have debug info

1564779678
dimenus
now i do but no symbol table

1564779703
andrewrk
fengb, yes, cancel represents a suspend point, and the function completes before control flow continues

1564779711
emekankurumeh[m]
#2958?

1564779729
andrewrk
fengb, if an operation should be cancellable faster, then it must be made so explicitly by doing the example above

1564779739
dimenus
no, 2951

1564779752
dimenus
i made the change you linked in the comment

1564779765
dimenus
and now i have debug info (meaning the source file is correctly opened/referenced)

1564779769
dimenus
but gdb complains that there's no symbol table

1564779771
fengb
Ah I see

1564779772
dimenus
and i can confirm with objdump

1564779777
emekankurumeh[m]
removing the -lldmimgw flag?

1564779794
emekankurumeh[m]
or changing the order of sections searched?

1564779819
fengb
I’ve wanted cancellable promises forever in JS so this sounds really great

1564779877
andrewrk
emekankurumeh[m], that's a great question. I think that use case will work if the defer is the first thing in the function

1564779908
dimenus
emekankurumeh[m], no i just emit DWARF if it's COFF & !GNU

1564779926
dimenus
it looks like even msvc link doesn't emit symbols in an image (exe)

1564779937
dimenus
they're stripped during pdb generation

1564780030
emekankurumeh[m]
so you emit dwarf for msvc "abi"?

1564780041
dimenus
no

1564780042
dimenus
oops

1564780053
dimenus
COFF & GNU = dwarf, COFF & MSVC = codeview

1564780096
emekankurumeh[m]
that makes more sense

1564780113
emekankurumeh[m]
you'll need to edit debug to use dwarf instead of coff now, to get backtraces

1564780141
dimenus
yeah, i'm just not sure this is a road worth going down

1564780153
emekankurumeh[m]
how so?

1564781383
aeqwa
Hi, maybe somebody can help. How can i link a static *.lib file to my zig program in my build.zig file?

1564781413
scientes
--library

1564781413
scientes
oh, I don't use build.zig

1564781611
andrewrk
aeqwa, how is your .lib file obtained? you have a hard coded path to it?

1564781711
aeqwa
i have it in deps/raylib/lib relativ from my project root

1564781834
andrewrk
aeqwa, your_thing.addObjectFile("deps/raylib/foo.lib");

1564781851
aeqwa
ahh ty <3

1564781909
andrewrk
yeah bit of a weird name. currently object files and static libraries are indistinguishable from each other as far as zig is concered

1564781925
emekankurumeh[m]
why does the ci take so long on windows?

1564781963
andrewrk
I'm not sure

1564781982
andrewrk
I think it's something to do with azure because even the compilation part takes longer, not just the zig stuff

1564781992
andrewrk
I mean even the stage1 c++ code compilation

1564782339
Sahnvour
do you know the specs of the machine it runs on ?

1564782735
andrewrk
no idea. maybe it's in the azure docs

1564784404
nrdmn


1564784841
emekankurumeh[m]
that's really cool

1564785165
andrewrk
nrdmn, may I share this on twitter?

1564785330
nrdmn
andrewrk: sure! :)

1564787030
hryx
nrdmn: so coooool

1564789420
AlexMax
Got a question.  The DEFLATE ticket noted that the implementation of zig-deflate library wasn't built for speed.  What does that mean?  There's lots of deflate implementations out there of varying complexity, and it seems wise to have implementation preferences up front if they exist.

1564789430
AlexMax


1564789556
AlexMax
I note that the source implementation for zig-deflate appears to be puff.c, which seems to be aimed at correctness and not speed.  So I suppose pretty much any other implementation other than that would be preferred?  (zlib proper?, zlib-ng?, possibly Go's implementation?)

