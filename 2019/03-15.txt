1552608769
andrewrk
vramana, yes it's a problem. I've been putting off doc generation, hoping to only do it in self hosted

1552613669
dirkson
andrewrk: Say, mind if I ask what distro you tend to code on?

1552614280
andrewrk
dirkson, NixOS

1552614304
andrewrk
it helps isolate environments so you don't have accidental system dependencies

1552614409
dirkson
andrewrk: Interesting! I stumbled across your name in #alpine-linux and got curious. You're easy to notice because "Party Hard" plays in my head whenever I see your name.

1552614664
daurnimator
dirkson: why party hard music?

1552614704
daurnimator
dirkson: last night a friend put on the "party boy" music.... all I could think was that it wasn't that different to "party hard"'s music

1552614714
dirkson
daurnimator: It's sung by "Andrew WK"

1552614843
daurnimator
dirkson: oh. that party hard. I was thinking of

1552614886
dirkson
I was not familiar with this, but I am now and I love it.

1552614920
daurnimator
pretty fun game. good local coop too

1552614973
diltsman
Why do I remember Compiler-RT being included in the source download for Clang or LLVM?

1552615647
wilsonk|2
diltsman: I don't remember compiler-rt ever being included. I always have to remember to download separately and unpack it in the tools dir (along with clang)...then build llvm :)

1552617363
diltsman
Huh.  Anybody know the repository for compiler-rt?

1552617548
diltsman
Nevermind.  I found the Github mirror.

1552619457
andrewrk
wilsonk|2, if you're getting that error you probably didn't build the INSTALL target

1552619553
wilsonk|2
andrewrk: basically cut and pasted from the build instructions? (just changed the install dir)

1552619627
wilsonk|2
So I used the 'INSTALL.vcxproj' arg to msbuild in other words

1552619809
vramana
Currently I am a bit stuck on how to do heap allocation. Hopefully docs around the can be improved soon.

1552620500
wilsonk|2
Ah, strange...I thought the 'zig.exe' in the Release directory was the zig to use from the command line but apparently the '[path-to-zig-install]/Userswilsonkzigbuild/bin/zig.exe' is the one to use...that way there is no 'unable to find zig lib directory' error

1552620966
wilsonk|2
back in a minute

1552621456
andrewrk
vramana,

1552622152
vramana
andrewrk: Thanks

1552623995
vramana


1552624011
vramana
andrewrk: ^

1552624523
vramana
Also thank you for making a vim plugin that works really nicely.

1552629247
mikdusan
vramana: i suspect compiler error messages will get usability improvements in the self-hosted compiler

1552629294
vramana
When I run zig binary am I using stage-1 compiler ?

1552629548
emekankurumeh[m]
there is an existing issue for that but things like nicer error messages will be primarily in the self-hosted compiler

1552629612
emekankurumeh[m]
vramana: you are most likely using stage 1 as the self-hosted compiler is incomplete

1552631911
vramana
mikdusan: emekankurumeh[m] Thanks

1552647511
mikdusan
is there an @import “using” that folds names into importing space?

1552647745
vramana
Just don't assign the @import to const. That should do what you are asking for is what I heard in a video iirc.

1552650757
Hejsil
mikdusan, use @import("something.zig")

1552650789
Hejsil
I don't recommend using 'use' though

1552651468
mikdusan
i have a corner-case — benchmarking different code snippets. so i want the bench block to share some “base” without qualifying it. eg. making an iterator for binary data, and want to changeout just the “next()” function with various Zig and C implementations. so i’m parting those out into their own .zig files.

1552652186
Hejsil
I think I could come up with a way to do it without use, but I don't think it's a bad use case. Do you have the code somewhere?

1552652233
mikdusan
i’ll put it on github in a day or so. want to get a few benches tied in.

1552652274
Hejsil
Well, as long as the use case is better than "writing out the namespace names is a pain" then I think 'use' is fine

1552662606
Akuli
how do i convert []const u8 to [*c]const u8? i want to call a @cImport function

1552662650
Akuli
i tried creating a 0-terminated []u8 and copying the []const u8 there, but i get a type error when i try to call the c function

1552662668
Akuli
error: expected type '[*c]const u8', found '[]u8'

1552662700
Akuli
ummmmm nevermind... i just need to use .ptr

1552666538
Akuli
how do i catch a specific error?

1552666556
Akuli
something like:   doSomething() catch(error.WhatEver) { ... }

1552666790
Akuli
nevermind, turns out that an enum is better for this use case

1552666793
Akuli
nevermind, turns out that an enum is better for this use case

1552666795
Akuli
oops

1552667410
andrewrk
Akuli, I recommend the pattern foo() catch |e| switch (e) { // enumerate all the errors

1552667431
andrewrk
you can start with enumerating none of them and the compiler error will tell you all the errors you need to handle

1552667463
andrewrk
this has the benefit that when you remove a possible error or add a new one, you'll get a compile error here telling you to update your code

1552667937
andrewrk
it just occurred to me that we could make the pub fn panic thing a userland concept

1552669184
Akuli
i remember looking at the @panic builtin and feeling like why is this not implemented in pure zig :D but that would still need some powerful way to abort i guess? libc has abort()

1552669232
andrewrk
@panic isn't going away

1552669248
andrewrk
just the internal compiler magic of detecting pub fn panic

1552672300
Akuli
should the compiler find integer macros defined in .h files?

1552672356
Akuli
it's not finding all of them to me

1552672521
andrewrk
some are impossible to translate; for others zig's C parsing isn't sophisticated enough yet

1552672541
Akuli
i think this is the latter kind

1552672545
Akuli
should i make an issue?

1552672563
andrewrk


1552672781
Akuli
i commented there

1552673221
vegecode
Quick question, do I need to build llvm from source now in order to build master branch? My ubuntu repository version use to work fine but now I get build errors.

1552673261
Akuli
vegecode, no, but you need to download llvm from their ppa

1552673279
Akuli
zig on master works with llvm 7

1552673295
andrewrk
vegecode, what build errors do you get?

1552674563
Hejsil
andrewrk, how is the ResultUsed system ment to work in translate-c? Should ResultUsed be passed to trans_integer_literal or should the caller of trans_integer_literal wrap with _ = 1?

1552674703
andrewrk
Hejsil, let me read some code to refresh my memory

1552674866
andrewrk
Hejsil, I think it's currently assumed to be ResultUsedYes for integer literals

1552674899
andrewrk
sorry I don't fully understand your question and my memory is fuzzy

1552674904
Hejsil
Well, the trans_integer_literal was just an example. I'm asking a little more generally

1552674921
Hejsil
'1;' is a valid statement, but it currently translated incorrectly

1552674963
andrewrk
I see, so the question is, where in the code is it supposed to insert the `_ = `

1552674968
Hejsil
Yes

1552675005
andrewrk
maybe_suppress_result is a clue

1552675437
Hejsil
Hmm, it's probably best to call maybe_suppress_result in all trans_stmt_extra cases where relevant

1552675443
Hejsil
So not for 'return

1552675451
Hejsil
but for '1'

1552675518
Hejsil
And then not pass ResultUsed further down

1552675582
andrewrk
at this point I think your understanding is more fresh than mine, I'd be doing the same process as you to figure it out

1552675603
Hejsil
Alright, I

1552675609
Hejsil
'll mess around with it a little

1552675624
andrewrk
btw I'm hoping to migrate translate.cpp over to userland during the 0.5.0 release cycle

1552675650
andrewrk


1552675678
Hejsil
Wont we need translate-c because of clang headers?

1552675691
Hejsil
Or custom headers even

1552675691
andrewrk
what do you mean?

1552675709
Hejsil
Hmm

1552675731
Hejsil
Im guessing we will have a zig_clang.cpp, and then a zig_clang.zig which is a "zig header" for zig_clang.cpp

1552675740
Hejsil
is that the plan?

1552675745
andrewrk
the only downside as far as I can see is having to maintain zig_clang.h as well as a .zig equivalent of the .h file

1552675757
andrewrk
ah you just said that :)

1552675764
Hejsil
Alright that makes sense :)

1552675789
andrewrk
what's kinda cool about this idea though - is that we'll link stage 1 2x

1552675811
andrewrk
the first time it won't have @cImport / translate-c support. then we build a userland library, and re-link, and now it has translate-c powers

1552675839
andrewrk
point being that we can have translate-c in userland even before we have the stage2 compiler done. because that will take a long time

1552675877
andrewrk
and then we can be investing in the real, userland implementation of translate-c

1552675880
Hejsil
Why link twice? wouldn't translate-c work like stage 1 fmt

1552675908
andrewrk
that's one possible way to implement it, with a child process. another way is with a function call to a static library

1552675942
andrewrk
as far as I see it, function calls are cheaper (especially on Windows) and less can go wrong

1552675958
Hejsil
Right

1552675991
andrewrk
so even stage1 will be a "hybrid" of self-hosted and C++ code

1552676001
Hejsil
stage 1.5 :)

1552676005
andrewrk
:)

1552676032
andrewrk
once stage2 is done, if we don't rely on @cImport, we could remove stage 1.5, and just go straight from 1 to 2

1552676058
andrewrk
not much of a difference, really

1552676090
Hejsil
Because we are gonna maintain "zig" headers for things like "zig_llvm" and "zig_clang"

1552676092
Hejsil
?

1552676175
andrewrk
right - the clang one is necessary either way if we want userland translate-c. and already it's kinda nice to have zig pointers rather than C pointers for the llvm API

1552676209
Hejsil
Alrighty, then I wont work to much on perfecting this PR. I'll just what I need to work

1552676233
andrewrk
sounds reasonable

1552676258
andrewrk
we start taking pride in the translate-c code when we get to userland

1552676298
andrewrk
it's a non trivial chunk of work to create zig_clang.h

1552676395
andrewrk
the list of tasks required to keep up with third party projects is growing - but it's worth it

1552676413
andrewrk
that's one of the things that zig is abstracting for its users

1552676741
vegecode
sorry I have to go

1552678787
Akuli
Hejsil, how do i use zig-clap in my zig project? with a git submodule?

1552678823
Hejsil
Akuli, that's probably the best option right now

1552678950
Hejsil
Wasn't there someone who used reflection to load opengl functions or something like that?

1552679107
Akuli
umm... how do i import it then? i guess @import("../zig-clap/src/whatever") is not particularly good style?

1552679267
andrewrk
Akuli, you're using build.zig right?

1552679298
Akuli
yes

1552679328
Hejsil


1552679348
Hejsil
Hmm, link is longer than the line I wanted to show, lol

1552679357
Akuli
neat!

1552679384
andrewrk
zig package manager isn't here yet, but you can sort of fudge it in the meantime :)

1552679405
Akuli
so then i just @import("zig-clap")?

1552679410
andrewrk
yep

1552679413
Akuli
awesome

1552679422
Hejsil
zig-clap is used an old style of namespacing. I haven't really updated my repos to the new style yet.

1552679438
Hejsil
I'm kinda blocked on the @typeOf(@bytesToSlice()) issue

1552679449
andrewrk
ah I didn't know that

1552679466
andrewrk
I can prioritize that one

1552679476
andrewrk
do you have a link handy?

1552679503
Hejsil


1552679586
andrewrk
thanks

1552679613
andrewrk
ah this one

1552679639
Hejsil
andrewrk, I tend to post an issue and the try to work around, or fix it before claiming that an issue is blocking me :)

1552679735
andrewrk
Hejsil, as a workaround can you make the type explicitly with `[]T` syntax?

1552679846
Hejsil
Hmmm, actually I might be able to do it that simple. I have some tests that ensure that all pointer properties are transfered as expected but in my code I only ever need the const property

1552680616
andrewrk
ah I see, it's a matter of the pointer properties

1552682515
Akuli
how to get the biggest value of an unsigned integer type? there are some mentions of maxValue(T) in comments of stdlib

1552682681
andrewrk
std.math.maxInt(T)

1552682707
Akuli
thanks again :D sorry for not finding these things myself

1552682930
mikdusan
i inverted some syntax and the compiler crashes:

1552687109
andrewrk
I just pushed a breaking change to std.mem.Allocator interface API

1552687953
Sahnvour
hi

1552687996
Sahnvour
andrewrk: about the c_abi test failing on windows, is it expected that the C module (cfuncs.obj) have debug symbols ?

1552688051
andrewrk
Sahnvour, yes, because we add `-g` to the options

1552688076
andrewrk
I wonder, is some other step needed to make clang output pdb debug symbols on Windows?

1552688133
Sahnvour
I don't know yet; the build.zig does not specify -g, however adding it myself does not seem to work either

1552688158
andrewrk
Sahnvour,

1552688176
Sahnvour
ok, right

1552688193
andrewrk
here we try to make C source code match zig args. I think we probably need to figure out how to enable PDB debugging with clang, now that I think of it I think it is behind some flag

1552688235
Sahnvour
I'm used to clang-cl.exe on windows, which accepts the same args as regular cl.exe

1552688260
Sahnvour
but I don't know if it is simply remapping them to classic GCC-style arguments

1552688264
andrewrk
that should match `zig cc` exactly

1552688270
Sahnvour
if it's not, maybe additional behaviour is wanted for windows

1552688286
andrewrk
I think -Z7 ?

1552688291
andrewrk


1552688292
Sahnvour
yes

1552688325
andrewrk
so codegen.cpp in that line I linked, should check if the target is windows, and add -Z7 too

1552688357
andrewrk
idk what -MTd does, I couldn't find docs for that. looking at

1552688376
Sahnvour
it says to link against multithreaded libc in debug version iirc

1552688401
andrewrk
ahh

1552688420
andrewrk
I think that is irrelevant. I expect the -Z7 arg to fix debug info

1552688422
Sahnvour
the debug part I'm sure about

1552688443
andrewrk
I'll be back in a bit

1552688832
Sahnvour
given that internal clang is fed with gcc arguments, I don't know how to make it accept a cl.exe one

1552688871
Sahnvour
the other way around is easy, giving gcc arguments to cl.exe

1552689028
Sahnvour
-Z7 gives `zig.exe: error: unsupported use of internal gcc -Z option '-Z7'`

1552689047
Sahnvour
and /Z7 in cl.exe style `zig.exe: error: no such file or directory: '/Z7'`

1552689080
Sahnvour
we'd have to use the cl.exe driver somehow

1552689192
Sahnvour
trying -mllvm /Z7 `clang (LLVM option parsing): Unknown command line argument '/Z7'.  Try: 'clang (LLVM option parsing) -help'`

1552689319
Sahnvour
ha, found it, --driver-mode=cl

1552690146
keegans
" type '[*]const u8' does not support array initialization" with `const command = [*]const u8{c"sh", c"-c", c"echo hello"};`, for example -- what should I be doing instead (just started writing zig)

1552690778
keegans
got it using `    var command: [4][*]const u8 = undefined;` -- but that's annoying

1552690782
keegans
or 3, rather

1552691059
andrewrk
keegans, there are 2 planned issues that will make this better, but here's the answer: const command = [][*]const u8{c"sh", c"-c", c"echo hello"};

1552691080
andrewrk
Sahnvour_, does --driver-mode=cl interfere with anything else?

1552691113
Sahnvour_
yes, i'm trying to prefix all arguments with -Xclang except /Z7 but I'm having trouble making it work

1552691145
andrewrk
keegans, this will remove the necessity of prefixing with `c`:

1552691171
keegans
ah, very nice

1552691188
andrewrk
this will make the syntax [_][*]const u8 instead of [][*]const u8:

1552691222
keegans
makes more sense

1552691234
andrewrk
so after these issues it would be: const command = [_][*]null const u8{"sh", "-c", "echo hello"};

1552691241
keegans
:D

1552691255
keegans
ah this is very strange ??

1552691258
keegans
given `const command = [][*]const u8{c"-c", c"echo hello"};` and `const status = execve(c"/bin/sh", &command, @intToPtr([*]const ?[*]const u8, 0));`

1552691264
keegans
some data is leaking into the system call

1552691287
keegans
they are all null terminated, yet strace is showing something else is getting passed causing -1 EFAULT (Bad address)

1552691300
keegans
` execve("/bin/sh", ["-c", "echo hello", "  -D{}=[{}]Expected argument aft"..., " `

1552691302
andrewrk
your command itself does not have a null entry. this would also be solved by #265

1552691316
andrewrk
const command = []?[*]const u8{c"sh", c"-c", c"echo hello", null};

1552691328
andrewrk
I'm going afk, bye

1552691335
keegans
ah thank you for your help

1552691347
keegans
i cant believe i forgot to terminate the end of the array, yeah

1552691361
keegans
the proposal will certainly help me not make these dumb mistakes lol

1552692482
keegans
how can i concat strings , i.e.: like `const target_file_path = current_work_dir ++ "/src/main.zig";`

1552692488
keegans
yet current_work_dir is not known at compile time

1552692498
keegans
and is MAX_PATH_BYTES in size

1552692950
keegans
got it with mem.copy, but is there a proposal for a shorthand for `x[0..x.len]`

1552693777
andrewrk
keegans, not sure what you mean - x[0..x.len] is just x

1552693799
keegans
oops

1552693813
andrewrk
unless x is an array, in which case you want &x

1552693831
keegans
i am having trouble understanding when something is a copy

1552693844
keegans
if i have an array in a function and i return it, it is copied, yes ?

1552693861
keegans
because it is allocated on the stack likely

1552693987
keegans
nope

1552694012
andrewrk
the result location for the return value is determined at the callsite

1552694024
andrewrk
right now there's an intermediate copy but that's soon to change

1552694055
keegans
ok , good to know ,thank you

