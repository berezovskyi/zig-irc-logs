1551357365
tleguern
Hello

1551357401
tleguern
I am really sorry for the time in takes me for the OpenBSD.

1551357441
tleguern
I am reimplementing selfExePath at the moment, as it migrated from C++ to zig.

1551361148
DutchGh0st
tgschultz: , perhaps I can see if I can come up with something that works, and is simple to use for recursive field enumeration?

1551361170
DutchGh0st
I think iit would be usefull to have

1551361674
andrewrk
tleguern, there is a C++ implementation in os.cpp and a zig implementation in std/os/index.zig

1551361679
andrewrk
both are required

1551361818
DutchGh0st
mhh, how is recursive comptime evaluation?

1551361863
andrewrk
DutchGh0st, it works fine

1551361882
andrewrk
I think your meta function sounds application-specific

1551361886
DutchGh0st
okey, cool. Most structs don't have that many depths anyway

1551361896
DutchGh0st
at least I think :3

1551362815
DutchGh0st


1551362817
DutchGh0st
there

1551363030
DutchGh0st
I suppose I wouldn't need 2 inline fors there

1551363046
DutchGh0st
but just call the mem.eql, and the recursive call in the inline for

1551363364
andrewrk
DutchGh0st, neat! and then until

1551363414
DutchGh0st
oh! yeah!

1551363476
DutchGh0st


1551363490
DutchGh0st
it has a slightly more complicated testcase

1551365575
DutchGh0st
oh, I just had a little thought about it andrewrk. the current std.meta hasField function could take a const boolean, to specify if it should search recursively, or just to search the struct you gave it

1551365795
andrewrk
DutchGh0st, I think recursive search is application specific logic

1551366064
DutchGh0st
yeahh, probablyy

1551366075
tgschultz
yeah, I'm having difficulty seeing how it would be generally useful. I imagine this is for some kind of assistence with flattening composed structs? How would I access the field, given that I don't know where in the structure it is? What if there are two matches? etc.

1551366171
DutchGh0st
huh, 2 matches, have not though of that one..oopsy

1551366189
DutchGh0st
well it just returns true on the first one it finds

1551366202
tgschultz
Sure, but how is that information useful?

1551366250
DutchGh0st
maybe fieldnames aren't that usefull recusively, fieldtypes however could be

1551366280
DutchGh0st
in a way that you can have a dummy struct that specifies `phantom` behaviour,

1551366313
DutchGh0st
kind of like marker traits in Rust, but in this case it would be marker fields

1551366945
tgschultz
I'm not following. I'm not familiar with marker traits in Rust (or Rust in general). What are they used for?

1551367011
DutchGh0st
For example there's been quite some changes in the way they want to kind of ensure safety with regards to generators that have references across yield points

1551367092
DutchGh0st
in other words, if you resume the generator, then you'd move, all the references become invalid. To solve this, they have a marker trait called Unpin. In this specific case, Unpin specifies that a type is `safe` to move

1551367139
DutchGh0st
generators are !Unpin (not Unpin)

1551367181
DutchGh0st
but because we don't have traits, but you can simulate this marker behaviour with just an empty struct,

1551368618
DutchGh0st
for example this:

1551368620
DutchGh0st


1551370240
tgschultz
DutchGh0st: I think instead of a field for that you want a definition. `struct { const unpin = void{}; };` vs `struct { unpin: void, };`. it won't make any difference to the compiler, but you also won't have to initialize the void field. The change in the metafunction would be to iterate over all definitions then recursively through each field.

1551370289
tgschultz
actually the iteration over definitions could just be replaced by 'hasDef()'

1551370364
DutchGh0st
mhhh

1551370410
DutchGh0st
but then I steal a possible fieldname away?

1551370469
DutchGh0st
I guess hasDef i'm going to write then haha

1551373965
develonepi3
andrewrk, I just updated my documentation of openjpeg for Ultibo. This is found

1551374110
develonepi3
andrewrk, This work also demonstrates what can be done with bare metal on the RPi. Since this provides an EBCOT bit stream not just the lifting step.

1551374868
AlexMax
Zig is one of those languages that I put a pin in because the back-of-the-box pitch looked pretty neat

1551374902
AlexMax
However, in conversation about this language, someone else pointed out that the "Why Zig?" wiki page claimed that Zig has no metaprogramming.

1551374959
AlexMax
While at the same time providing generics through comptime

1551375009
AlexMax
What is the disinction...or I suppose the difference in practice - between C++ templates and Zig's comptime T?

1551375061
AlexMax
The same wiki page also claims that allocators are explicit, but I think most C++ types that allocate memory allow you to pass a custom alloactor to them.

1551375279
AlexMax
basically, `fn max(comptime T: type, a: T, b: T) T` vs `<typename T> T max(T a, T b)`

1551375309
tgschultz
Zig has no default allocator. If something doesn't take an allocator as a parameter in idiomatic Zig, it doesn't allocate.

1551375338
tgschultz
In C/Cpp there are no such guarantees.

1551375363
AlexMax
Yeah, and some functions don't even take alternative allocators in a trivial way (asprintf, strdup)

1551375469
AlexMax
I see.  What about C++ templates vs zig generics?

1551375539
AlexMax
What make's Zig's approach better?  Is it faster?  Does it produce more comprehensible error messages?

1551375564
tgschultz
I'm not sure. If I had to guess, I'd say that the difference is Zig doesn't have a separate language for meta programming. Type is a type of type `type`. It definitely produces better error messages than Cpp templates, but to be frank that's a really low bar.

1551375636
andrewrk
AlexMax, c++ templates vs zig comptime parameters are almost equivalent. some differences are: * zig has no overloading/inference, which makes compile errors much simpler * it's much faster in zig because we have a module system instead of a preprocessor. with C++ the compiler does the work N times and the linker has to deduplicate the work

1551375793
andrewrk
* in zig when you have a comptime parameter, that parameter can participate in comptime expressions ("static if"). I don't believe that works in C++

1551376068
AlexMax
C++ might have that last one...

1551376130
andrewrk
if it is guaranteed to work on template parameters, then that last bullet point is equivalent

1551376345
AlexMax
I see.  Still, perhaps the "Why Zig" wiki page could be updated to be worded differently.

1551376373
andrewrk
what is your proposed change?

1551376400
AlexMax
I'm not sure what to change it to, but the point that tripped up my friend is the part about "no metaprogramming"

1551376510
AlexMax
Since it seemed to him that comptime + types implementation seemed to him to be broadly equivalent to C++ templates.

1551376531
AlexMax
I did a google search and somebody on the D language forum brought up the same point on the same wiki article.

1551376844
gunnarahlberg
Hi again!

1551376864
andrewrk
I should probably move that wiki page to my personal blog as it was not really a community created page anyway. I'll do that and then update the content. I can make this case much more clearly now (2 years later)

1551376869
andrewrk
hi gunnarahlberg

1551377321
gunnarahlberg
I see zig test is missing documentation  at

1551377349
gunnarahlberg
Any way I could contribute and maintain something there?

1551377363
andrewrk
gunnarahlberg,

1551377368
andrewrk
sure thing, any contribution would be welcome

1551377393
andrewrk
I think someone may have started this effort, I'd have to search the IRC logs for --test-name-prefix to remind myself

1551377412
gunnarahlberg
I'll search logs

1551378626
DutchGh0st
I tried to do an `if(comptime expr) {}` in a struct declaration, and it didn't work, why actually doesn't that work?

1551379112
andrewrk
DutchGh0st, that's never been a feature - if statements are only valid in block scope

1551379130
DutchGh0st
well, guess I can just get around it

1551379147
andrewrk
sorry not block scope. but they're not valid top level declarations

1551379165
DutchGh0st
`var s = undefined; if (expr) { s = struct { whatever } } else { s = struct { otherstuff }  }`

1551379167
andrewrk
struct fields are declarative

1551379174
DutchGh0st
*var s: type = undefined

1551379227
DutchGh0st
which seems to work actually

1551379232
andrewrk
why not: const s = if (expr) struct {whatever } else struct { otherstuff };

1551379240
gamester
you can do "struct_field: if(comptime expr) A else B", that's all I know

1551379267
andrewrk
gamester, that's correct, and the `comptime` is redundant in that example

1551379274
gamester
yes

1551379293
DutchGh0st
huh, mh, I guess, but depending on the if, I have a struct with 1 field, else 2

1551379330
andrewrk
it's still declarative. never at any point does a struct exist which only has some of its fields and then more are added later

1551379350
gamester
DutchGh0st: field: if(expr) T else void

1551379352
andrewrk
it's important for structs to be declarative because they can reference themselves

1551379437
DutchGh0st
I was actually looking at andre alexandrescu's bits of his checkedInt implementation, where he does use if's and else's to include fields in structs

1551379465
DutchGh0st
so I figured I'd try it out in Zig

1551379474
gamester
the zig way is "else void"

1551379488
andrewrk
AlexMax, ^ example of zig not having metaprogramming

1551379542
DutchGh0st
ehh, I shouldn't do this anyway I think:

1551379544
DutchGh0st
const s = if (@sizeOf(Hook) > 0) struct { int: I, hook: Hook } else { struct { int: I } };

1551379568
DutchGh0st
'cuz a 0 sized type is nothing after compilation anyway

1551379577
andrewrk
DutchGh0st,

1551379834
hg
I never checked; I'm glad that u0 and i0 exist

1551379865
DutchGh0st
and conditionally specifying functions for the type?

1551379904
DutchGh0st
I suppose you could do this with an array of function definitions or whatever

1551380175
andrewrk
no you cannot do that

1551380193
andrewrk


1551381107
andrewrk
with llvm 8.0.0rc3 tagged yesterday, I am happy to announce all zig tests passing in llvm8 branch

1551381171
andrewrk
when this branch is merged into master, web assembly goes from tier 4 to tier 3

1551381212
scientes
sweet

1551381237
scientes
that is a place where zig could really have an edge too

1551381817
DutchGh0st
how should std.meta's hasFn be used?

1551381832
DutchGh0st
does it only look at a function's name?

1551382375
DutchGh0st
oh, my function I was checking for was not pub ._.

1551382790
tgschultz
yeah, it looks for functions by name that are pub. Reasoning was that non-pub functions probably couldn't be called by whatever was inspecting anyway.

1551383047
DutchGh0st
huh, its kind of interesting how this is working out

1551383112
DutchGh0st


1551383369
DutchGh0st
and Im not even using traits!

1551389300
WilhelmVonWeiner
...what is a group of Zig programmers called?

1551389337
andrewrk
off topic

1551389338
WilhelmVonWeiner
my momma would whoop my ass if I called a group of anyone "ziggers"...

1551389468
WilhelmVonWeiner
Also while it's being ported to OpenBSD I spun up an Ubuntu box to try the language out

1551389540
WilhelmVonWeiner
I work with an ISP doing VoIP (SIP) stuff and Python scripts are great and all but a robust compiled language would be better

1551389701
WilhelmVonWeiner
Are there any plans to implement associative arrays as a language feature?

1551389715
andrewrk
WilhelmVonWeiner, it's planned to never do that

1551389723
WilhelmVonWeiner
Lol.

1551389729
andrewrk
associative arrays are firmly in userland territory

1551389855
WilhelmVonWeiner
that's cool

1551389900
hg
mmmmmmmmmmmmmmmmmmmmassociativearrays

1551389931
hg
WilhelmVonWeiner: ziggies!

1551390577
tgschultz
this is a bit off topic, but is anyone aware of a comprehensive list of actively maintained llvm targets?

1551390718
andrewrk
tgschultz, is that different than the list of default targets that llvm builds?

1551390770
andrewrk
btw as of ade10387a5, `zig targets` will only show architectures that are compiled into LLVM

1551390882
tgschultz
I think so? I've found a few scattered github projects for architectures that aren't part of normal llvm's target list. Like dcpu-16 and z80.

1551390895
andrewrk
live coding stream starting in 5 minutes - implementing GeneralPurposeDebugAllocator, part 2:

1551390925
andrewrk
tgschultz, I see, so that would include third party projects that are not in llvm mainline

1551390936
andrewrk
I think the successful, well maintained ones usually end up getting merged upstream into llvm

1551390960
andrewrk
I'll be back after the stream

1551391137
tgschultz
that makes sense. too bad though. What I'm really looking for is a simple VM target. A non-physical architecture. Like, I dunno, CHIP8 only not so simple.

