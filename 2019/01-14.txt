1547466904
forgot-password
Calling @typeInfo on a slice gives me back a TypeInfo.Pointer with a size value of 'Slice', correct?

1547467763
Hejsil
Yes, forgot-password

1547467869
forgot-password
So if I were to create a function that could handle slices

1547467954
Hejsil
I'm not sure exactly what you're trying to do. Why do you need to know that it's an array or a slice

1547467974
Hejsil
These types support most of the same operations

1547468002
forgot-password
Wait, I'm gonna put together a little sample. I want to pass the data to OpenGL

1547468020
Hejsil
Alright

1547468038
Hejsil
I guess you need a ?[*]T correct?

1547468060
Hejsil
You could do: arr_or_slice[0..].ptr

1547468273
forgot-password
I need a ?*const c_void

1547468285
forgot-password
And my function takes a parameter "geometry: var"

1547468304
forgot-password
To that I need a pointer

1547468331
forgot-password
&geometry works fine for arrays, but it fails for structs. Presumably to the aforementioned reason

1547468391
Hejsil
This should work too: &arr_or_slice[0]

1547468407
Hejsil
I would think

1547468433
Hejsil
Hmm, unless your slice/array is len 0

1547468475
forgot-password
At least currently it fails if I pass an array of len 0

1547468504
Hejsil
This is my best hack: &arr_or_slice[0..].ptr[0]

1547468542
Hejsil
There should probably be a unified way for arrays and slices to get the underlying data

1547469521
forgot-password
Thanks, &arr_or_slice[0] worked perfectly fine

1547469960
forgot-password
Though I agree with you about the unified way to access the underlying data. It was rather confusing the first time I tried to pass &slice to glBufferData

1547494922
MajorLag
RE: #1503, It kinda feels like an issue you'd get when dealing with padded data buffers and forgetting to adjust for the padding. I'm not sure what that would mean in this context though.

1547494970
MajorLag
by padded, I mean aligned. Like how BMP aligns rows of pixels to 4-byte boundaries.

1547507261
forgot-password
Hey, I was just wondering if the parameters are flipped intentionally between std.math.atan2 and its underlying functions atan2_32/64.

1547507378
andrewrk
forgot-password, good catch. the names are incorrect in std.math.atan2. the first arg is y and second is x. I'll push a fix

1547507633
andrewrk
pushed

1547507820
forgot-password
andrewrk: Nice, thank you

1547507937
forgot-password
I was playing around with custom format functions earlier today, and I thought that the fmt parameter to said function is just what's inbetween the braces, but that doesn't seem to be the case, right?

1547508014
andrewrk
I'm not sure, I haven't looked at the details of that code recently. But keep in mind there's an API overhaul planned:

