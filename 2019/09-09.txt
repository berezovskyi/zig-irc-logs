1567989526
Yardanico
So after a bit of work even raw libui C API looks not that bad:

1567989613
Tetralux
Should be using [*]c.uiControl, ?*c.uiControl, or *c.uiControl instead of [*c]c.uiControl, but yes. Looks a little busy, but could be much worse :)

1567991980
Tetralux
I'm curious, how many of you can recall getting a stack overflow when it WAS NOT a programming logic error.

1567992108
Tetralux
(Relates to the async await demo.)

1568004329
curtisf
Why is `@typeOf` lowercase and not uppercase `@TypeOf` like `@TagType` or `@This`?

1568005842
stratact
andrewrk: I got your patch in my PR while the FreeBSD CI was running, but the build log says the process got killed? I was kind of surprised it failed...

1568019624
mikdusan
stratact: moar RAM. moar RAM

1568021966
stratact
mikdusan: gotcha, thanks for finding that out. Is it possible for me to set the vm to 6GB?

1568022188
mikdusan
sorry i don't know much about sourcehut

1568022239
stratact
Then I'll assume andrewrk has control of that.

1568022342
stratact
Well that takes the worry out of my back, so thanks again

1568023052
samtebbs
Snektron: Apologies for the noise on the packed struct issue, I removed my comment as it was innacurate

1568026096
Snektron
No worries

1568026102
Snektron
Im taking a quick look at it now

1568026104
euantor
As far as I know, builds.sr.ht doesn't give any control over VMs running builds - all you can do is run standard commands inside the build script

1568026476
samtebbs
Snektron: nice. andrewrk did say he wanted to revamp packed structs so any work you do for this issue may be undone later on

1568027006
Snektron
Just looking for a temporary solution

1568027024
Snektron
I suspect its just a programming error in struct offset calculatiob

1568027036
Snektron
It seems like a bit of a mess right now

1568027057
Snektron
It should be a lot simpler if every field's offset was represented in bits

1568032620
samtebbs
Snektron: It really would. Keep me updated as a fix to this would help me refactor some of my code :)

1568032651
fengb
How about compromise and return floats? :P

1568033050
daurnimator
anyone else getting LLVM broken module errors?

1568034371
kristoff_it
daurnimator: I've got a few of those when I made mistakes with return types in somewhat complex call chains. it happened whenever there was a mistake made by me and I would immediately return the result of a call `return bad_call(...);`

1568034400
daurnimator
kristoff_it: I get them when I compile zig myself; but not when I download a binary

1568034427
kristoff_it
daurnimator: ah ok, then it's something out of my paygrade :D

1568035100
andrewrk
that is explained here:

1568035133
andrewrk
it would be reasonable to turn this on unconditionally in stage1.

1568035202
daurnimator
andrewrk: so if that is not hit; the generated code just ..... does something else?

1568035366
andrewrk
the entire build artifact is undefined behavior

1568035378
andrewrk
if the llvm module is invalid and not verified

1568035523
daurnimator
okay. so would be good to turn on until we hit 1.0 or so...

1568035556
andrewrk
it can stay on unconditionally in stage1. self-hosted will have it off in release builds

1568035962
andrewrk
I'll do that now. I've been meaning to make a couple other improvements regarding "release" builds of stage1

1568036340
Snektron
Oh man

1568036360
Snektron
What is going on with this offset calculation

1568036459
Snektron
andrewrk:

1568036475
Snektron
Why is the abi size calculated on a packed struct?

1568036544
andrewrk
all types that exist at runtime have an abi size

1568036559
andrewrk
that's what @sizeOf is

1568036583
Snektron
Yeah but it returns invalid valurs

1568036593
Snektron
It returns 4 for a [3]u8

1568036602
Snektron
Which is fine when you have a normal struct

1568036608
Snektron
But not when the struct is packed

1568036622
andrewrk
you're asking why did this bug happen?

1568036724
Snektron
Yeah, would be nice if there was a temporary fix until the new packed struct idea gets worked out

1568036743
Snektron
Kind of blocked on that generating invalid offsetd

1568036820
fengb
Just count manually :P

1568036962
Snektron
Neu

1568037147
andrewrk
bugs happen because the requirements and assumptions are constantly changing out from underneath the code as the language evolves

1568037174
andrewrk
this is already the 3rd or 4th major reworking of packed structs

1568038028
daurnimator
andrewrk: want me to send a PR?

1568038046
andrewrk
daurnimator, for what?

1568038074
daurnimator
andrewrk: removing the NDEBUG around the broken module-ness

1568038095
andrewrk
I pushed 2482bdf2 already

1568038131
daurnimator
ah. too quick you are :)

1568038156
andrewrk
this should also slightly reduce the tarball size, I think, since it won't pointlessly include the debug info handling code

1568038231
andrewrk
a while ago I made asserts on in release builds

1568038325
daurnimator
andrewrk: additional change I made in my commit:

1568038353
daurnimator
==> I always find the LLVM abort more jaring than a zig panic

1568038447
andrewrk
I don't want to bother testing whether that messes up the output

1568038615
daurnimator


1568038853
andrewrk
I actually prefer the former, but you can have this one if you feel strongly about it :)

1568038901
daurnimator
not that strongly :P

1568041737
daurnimator
GCC gaining eBPF target:

1568042712
samtebbs
Builder.standardTargetOptions() adds an option for each target supported, but an IMO better way of doing it would be to add a "target" option that takes a string and is parsed to one of the supported targets

1568042717
samtebbs
What do you think?

1568042778
andrewrk
samtebbs, that's what happens if you pass `null` for supported target list.     /// Exposes standard `zig build` options for choosing a target. Pass `null` to support all targets.

1568042816
samtebbs
E.g. by passing avr and i386 both with freestanding and gnu abi, you get

1568042819
samtebbs
-Di386-freestanding-gnu=[bool] i386-freestanding-gnu

1568042819
samtebbs
-Davr-freestanding-gnu=[bool] avr-freestanding-gnu

1568042834
samtebbs
andrewrk: that's actually when you pass a non-null array, see above

1568042856
andrewrk
yeah the CLI API is not good, I agree with you

1568042857
samtebbs
It doesn't make sense for them to be bools as they are mutually exclusive (multibuilds will change that however)

1568042884
samtebbs
andrewrk: I'll draft up a PR :)

1568042887
andrewrk
:)

1568042919
Yardanico
is it possible to somehow tell cmake to use "-lclang" and other link flags when compiling? I'm trying to build zig in termux (android linux-like environment with a package manager), but it fails at the final linking stage because it can't find clang symbols

1568042919
andrewrk
I think it should be unified; whether you try to support all targets or a whitelist, it should have the same CLI to choose a target. this is currently not the case

1568042925
samtebbs
It's a welcome feature though. Makes accepting multiple targets nice and uniform

1568043004
andrewrk
samtebbs, maybe there should be standardTargetOptions() which returns a single target, and standardTargetOptionsMulti() which returns a set of targets

1568043027
andrewrk
I don't think anyone has a use case for the multi version yet

1568043042
samtebbs
yeah I'm not sure what multiple targets would be used for

1568043107
samtebbs
The question I have is what to list as the possible values when passing null. There's a lot of combinations and it would fill up the terminal when doing zig build --help

1568043200
andrewrk
no list when all targets are supported, it should just note that selecting a target is an available option

1568043241
samtebbs
andrewrk: +1

1568043350
samtebbs
Another request for debugging tips :p There have been some bugs I've tried to investigate lately that have segfaulted in LLVM code. Any tips on building a reasonable (i.e. not 10s of GBs) debug build of LLVM and getting Zig to use it?

1568043389
stratact
andrewrk: I threw a comment in my PR suggesting a heap profiler tool to see where the build is using more memory. Dunno if it will help

1568043581
Yardanico
hmm, so with ZIG_LLVM_STATIC the linking step seems to work fine, but I get an error later

1568043591
Yardanico
"/data/data/com.termux/files/home/stuff/zig/test/tests.zig:190:78: error: operator not allowed for type 'builtin.Arch'"

1568043690
andrewrk
samtebbs, my tip is get a bigger hard drive and invest the time in an llvm debug build

1568043711
andrewrk
andy@ark ~> ls ~/local/

1568043714
andrewrk
llvm8-debug  llvm8-release  llvm9-debug  llvm9-release

1568043820
Yardanico
so right after zig0 finished linking I get this:

1568043839
Yardanico
the architecture of the phone (and the compiler) is aarch64

1568043854
andrewrk
Yardanico,

1568043869
Yardanico
oh, ok

1568043893
andrewrk
Yardanico, oh, actually that's not right. you can't do that equality comparison because the union field has a type

1568043900
andrewrk
the arch has a sub-arch

1568043932
andrewrk


1568043961
Yardanico
ok, I'll try that now

1568044403
samtebbs
andrewrk: macbooks weren't meant for this :p

1568044569
scientes
samtebbs, build a debug llvm with optimized table gen

1568044579
scientes
those are way faster than full-debug-builds

1568044600
scientes
samtebbs, and your machine is far faster than mine, i promise

1568044605
samtebbs
scientes: sounds intriguing. Is that an option to cmake?

1568044609
scientes
yes it is

1568044615
samtebbs
I've only ever tried RelWithDebInfo before

1568044633
scientes
oh, that is even faster

1568044638
scientes
but if you are getting a segfault

1568044648
scientes
then a debug build with probably have an assert that catches it

1568044669
samtebbs
scientes: Debug it is then

1568044677
scientes
also, build with shared libs, those are much smaller

1568044716
samtebbs
scientes: Will do, cheers

1568044754
samtebbs
Then the normal zig cmake and make steps will bring in the new llvm build?

1568044782
scientes
no

1568044788
scientes
i actually haven't had to do that yet

1568044803
scientes
but if you build the same llvm version (8-8 9-9) then you can just use LD_PRELOAD

1568044809
Yardanico
hmm, for some reason I believed that you can't have global variables in Zig (although I tested and it works) :D

1568044811
scientes
well, LD_LIBRARY_PATH=

1568044825
Yardanico
probably got confused with V

1568044989
samtebbs
scientes: :thumbs up:

1568045011
samtebbs
Yardanico: yeah it's always been supported :)

1568045507
scientes
I don't get why auto_hash even works on vector

1568045512
scientes
mem.asBytes should work

1568045517
scientes
as Vectors are not stored in memory

1568045526
scientes
*should not

1568045595
scientes
I think its because of the funky way we pass arguments around

1568045689
gonz_
"funky way"? :D

1568045771
samtebbs
scientes: You can store vectors in memory though right?

1568045778
scientes
yes

1568045799
scientes
llvm implements pointers to vectors

1568046207
scientes
there really should be a better way to zero-initialize an array

1568046210
scientes
*a vector

1568046373
samtebbs
patches welcome

1568046390
andrewrk
scientes, var is_special_case2 = @splat(vlen, false);

1568046399
scientes
ahh yes of course

1568048338
Tetralux
@splat is a thing?

1568048356
Tetralux
Only for @Vector?

1568048624
scientes
Tetralux, only in my patch set

1568049173
Sahnvour
Tetralux: I compared the asm generated on my machine for your example, and the difference is that in the fast version (without recently added comparison on std.mem), the parseFloat() call is totally inlined such that even the "4.777777777" string disappears from the generated code

1568049194
Sahnvour
in other words it has generated a parseFloat4.7777777777() function

1568049253
Sahnvour
which isn't very interesting to time in itself

1568049323
Tetralux
See my comment on the issue - I discovered some fun stuff after you went.

1568049329
Tetralux


1568049379
Tetralux
But yeah that makes some sense.

1568049392
Tetralux
I did try inlining the call to parseFloat and that didn't seem to do anything.

1568049395
Tetralux
I'll try it again though.

1568049509
Sahnvour
I mean it's inlined in both cases, but the fast one seems to have more knowledge about the input propagated through the code

1568049520
Tetralux
Ah, I see.

1568049549
Tetralux
Apparently you can read asm more easily than I can xD

1568049552
Tetralux
Ta for that :p

1568049582
Sahnvour
not 100% sure about what's going on, but I highly suspect this is some side effect on the benchmark not being robust enough

1568049653
Tetralux
Oh?

1568049660
Sahnvour
also on godbolt (both local and web) there's no diff in the asm, for some reason

1568049706
Tetralux
Also - I just measured with string literals again - that does slow it down a lot.

1568049723
Tetralux
So it seems the extra knowledge it has makes it misread the sitation.

1568049752
Tetralux
I'm not even using the result of the parsing, and it slows down a bunch.

1568049850
Tetralux
Seems related to error unions.

1568049859
Tetralux
catch unreachable makes it faster again.

1568049888
andrewrk
catch unreachable makes it undefined behavior if an error is returned. it's not a valid performance test

1568049897
andrewrk
your real code will have to handle errors

1568049906
Tetralux
In the general case, sure.

1568049912
Tetralux
But it

1568049924
Tetralux
Specifically because it was fast, despite using errors, before.

1568049941
Tetralux
And now it's an order of magnitude worse with string literals.

1568050043
Sahnvour
I suggest you build a better benchmark if you're really interested in this, such that the compiler cannot guess any unfair information on the input you're parsing

1568050082
Tetralux
You mean like read the string from a file? ;)

1568050088
Sahnvour
also in zig-benchmark I added a doNotOptimize function to prevent some unwanted optimizations on results

1568050104
Tetralux
Actually - scratch that. That's only valid for runtime values, not literals.

1568050112
Tetralux
For the non-literal case, I'm already using random numbers.

1568050113
Sahnvour
for example, and read lots of them, with varying sizes and values

1568050538
Tetralux
Hmmm.

1568052316
andrewrk
I ordered a pine book pro, expected to arrive in october

1568052331
andrewrk
that'll give me arm64 hardware to develop & test on

1568052592
Yardanico
andrewrk: it's pretty low-end though

1568052605
Yardanico
ah it's a pro version, hmm

1568052668
donpdonp
andrewrk: nice. i was just looking at the order page for the pinebookpro.

1568052942
bgiannan
andrewrk, should 2482bdf2 have fixed the llvm broken module error?

1568053005
andrewrk
bgiannan, no, 2482bdf2 makes it so that if the llvm module is broken, the builds provided on ziglang.org/download will abort() rather than silently miscompile

1568053059
bgiannan
ah

1568053077
bgiannan
so what does that error actually means then? how do i fix it?

1568053086
bgiannan
i know nothing about llvm

1568053156
bgiannan
here's my full error:

1568053301
andrewrk
bgiannan, it's a bug in zig compiler, you will have to find a workaround, until it is fixed. Here is how you can find a workaround. add `--verbose-llvm-ir 2>stderr.txt` to that "following command" line. Next, look at stderr.txt for !14997

1568053340
andrewrk
you will see something like this: !14997 = !DILocation(line: 481, column: 13, scope: !6947). that's the line and column of the problem

1568053400
andrewrk
if you look for the scope: !6947 = distinct !DILexicalBlock(scope: !6948, file: !233, line: 478, column: 24), and then look for that file, you'll see something like !233 = !DIFile(filename: "elf.zig", directory: "/home/andy/downloads/zig/build/lib/zig/std")

1568053439
andrewrk
so now you have a clue: the file, line, and column of the zig source code that is triggering the compiler bug

1568053498
andrewrk
if you take the time to produce a small test case that triggers the bug, and then file an issue, that is a helpful contribution to the zig project

1568053523
andrewrk
either way, this will lead you to how to work around the bug until it is fixed

1568054162
scientes
yeah the test suite has grown too be for me to runn

1568054257
andrewrk
I do want to address that. But the opportunity cost is high

1568054277
scientes
yes i understand

1568054284
andrewrk
I wonder if this is something mikdusan would find interesting

1568054285
scientes
I will be getting a new laptop in a few months

1568054652
bgiannan
andrewrk, thanks for the pointer i'll give it a go right now

1568054933
mikdusan
andrewrk: tests.addPkgTests() iterates on a hard-coded target list of { linux,macosx,windows } without regard to say freebsd. make sense if i change to:

1568054957
mikdusan
symbolically speaking, { <whatever_host_target>, <all_tier_1_targets> } ?

1568055068
andrewrk
mikdusan, the complication here is that non-freebsd will fail to cross compile freebsd because they can't yet build the freebsd libc startup files (#2876)

1568055094
andrewrk
however I was thinking we could, for now, add a flag that at least will run that target if it is the native one

1568055127
andrewrk
mikdusan, reading your suggestion again - I like that, let's go with it

1568055129
mikdusan
ok. how about then I just add the host target to addPkgTest's loop if it's missing. i don't think freebsd even executes right now.

1568055157
mikdusan
it'll build the cross targs but never actually builds/runs freebsd (on freebsd)

1568055159
scientes
there is a bug in --release-safe where @frameAddress returns null

1568055182
andrewrk
I believe that is due to omitting the frame pointer in release builds

1568055201
andrewrk
maybe @frameAddress should be a compile error if it is known the frame pointer will not be available

1568055375
bgiannan
andrewrk, found the issue: i was calling a function which could fail without a try or a catch. So this probably should have been a `ignored result` error.

1568058624
andrewrk
I wonder if interning strings would be a way to reclaim some memory in stage1

1568058637
andrewrk
it's worth a try, I think

1568058674
andrewrk
I suspect Buf has a lot of overhead, but the first thing to do is measure it. I'm thinking a configure variable so we can do some #ifdefs to guard expensive data collection

1568058832
mikdusan
is there a std.Set or a way to use HashMap with keys only?

1568058853
andrewrk
mikdusan, you can use `void` as the value :)

1568058872
mikdusan
thanks

1568058888
andrewrk
this use case was one of the driving ideas behind how void & other zero bit types work

1568059087
samtebbs
Does anyone know a nice way to get the position of the first clear bit in a usize?

1568059163
andrewrk
@clz(~x)

1568059178
andrewrk


1568059232
scientes
^^^^that will do it

1568059267
scientes
but @clz(usize, ~x)

1568059823
samtebbs
I had to use ctz

1568059929
andrewrk
we should clarify what "leading" and "trailing" means in these docs with the words "most significant" and "least significant"

1568059981
samtebbs
Thanks andrewrk and scientes

1568059990
samtebbs
andrewrk: Agreed

1568060120
scientes
absolutely

1568060129
scientes
especially as that is big-endian terminology

1568060171
scientes
I made it really clear on the @Vector documentation that they are numbered little-Endian

1568065357
Tetralux
Snektron: I just made sublime-zig highlight enum literals and function calls, though I've tried to do it in such a way that it's not hard to find colorings that do not highlight them. It's an experiment. Let me know if it's a little too much or not.

1568065510
Tetralux
scientes: It's always fun when things like "leading" and "trailing" is not longer clear that it means "most" and "least significant" respectively.

1568065520
Tetralux
I didn't know anyone got those confused.

1568065647
fengb
On little endian, lsb technically leads

1568065755
Tetralux
Right, but you never inspect integers in little endian do you.

1568065765
Tetralux
Though I've never worked on BE machines so.

1568065798
Tetralux
The clz/ctz instructions presumably always work from the high/low end respectively.

1568066294
batok
@andrewrk you were mentioned here

1568066321
batok
and this blog post appeared at hacker news

1568066828
scientes
well i guess it isn't technicall little-endian

1568066834
scientes
but r->l

1568066857
scientes
because they are distinct numbers, and none is more significant than the others

1568066861
scientes
anyways, the docs are clear about this

1568066925
scientes
ugggh, r->l is also super confusing

1568066948
scientes
cause it assumes that you are reading left->right

1568066985
scientes
ugggh

1568067217
fengb
Apparently there's systems that are bitwise r->l and bytewise l->r just to be extra confusing

1568067227
Tetralux
"leading" was always just the same as "most significant" to me xD

1568067240
Tetralux
most significant first*

1568067449
scientes
fengb, armv4 floating point is mixed-endian

1568067470
scientes
one endianness for 32-32, and the other for 64-64

1568067475
scientes
of the same number

1568067478
scientes
or somethin glike that

1568067481
scientes
its insane

1568067499
scientes
or 8-8-8-8, 2-1-4-3 or something

1568068012
fengb
I feel spoiled by Intel dominance :P

1568068130
scientes
those chips are ancient

1568068287
fengb
I mean how intel endianness basically crowded out everything. ARM, Power, etc are all mostly little endian now

1568068361
scientes
and arm had to start supporting unaligned memory access

1568068370
scientes
same with power

1568068373
Snektron
Its surprising when something puts intels idiocity to shame

1568068403
scientes
little-endian is better however

1568068417
scientes
because you can zero-extent a number in place

1568068421
fengb
LE makes pointers easier

1568068434
scientes
fengb, ?

1568068488
fengb
Zero extent thing. That’s more accurate

1568069334
fengb
I'm not sure why I've always thought of it as pointers

1568069357
fengb
Maybe because in a union, *u8 == *u16 == *u32? I'm just confused >_>

1568069833
Snektron
I would't be surprised if it originated of a "they did it like this, so we have to do it differently" type of argument

1568070126
fengb
Funnily enough, we naturally do math in little endian anyway so maybe little endian is more "natural"?

1568072050
Tetralux__
I believe it's meant to be more efficent, though I'm not sure why.

