1553566474
vegecode


1553566499
vegecode
Can someone please help me. I've tried everything I can think of to make this work.

1553566543
vegecode
I can't find any examples of something similar in the standard lib

1553566677
vegecode
Holy shit I think I just got it finally. It's literally been days.

1553566754
vegecode
Jesus. Got it finally.

1553566864
emekankurumeh[m]
I was planning on working on an inflate/deflate implementation but then zig broke on my system and upgraded to llvm8

1553567555
vegecode
I'm working off the static-base:llvm8-1 docker image. You can override the entry point and mount a volume in the container to access the files. That seems to be easier then trying to get all the dependencies working on your own laptop.

1553568220
mikdusan
vegecode: that’s like a nested union. do you need a nested switch?

1553569655
vegecode
That's a great example. Thank you.

1553579183
andrewrk
vegecode, mikdusan, we have enum literals now too

1553579300
andrewrk


1553608435
mikdusan
andrewrk: enum literals 👍

1553619010
scientes
How do i enumerate the functions in a imported file?

1553619016
scientes


1553619108
andrewrk
scientes,

1553619441
scientes
@memberName =>

1553619441
scientes
It does not include functions, variables, or constants.

1553619442
scientes
ahh

1553619908
scientes
it seems that the imported file really is an empty struct, without anything in it ?????

1553619936
andrewrk
what are you trying to do?

1553619945
scientes
call a function only if it exists

1553619997
andrewrk
why?

1553620021
scientes
Well that is a differn't issue, but here it goes....

1553620102
scientes
Linux process initialization includes a bunch of stuff, including environment variables, above the stack. If you use a beforeMain() to get what you want from this, you could re-use all this, instead of wasting all this space (about 2 pages on my Ubuntu machine, and a long file name would make that 4, because argv[0] is in there twice)

1553620160
scientes
but there is also this:

1553620206
scientes
actually, I just realized such a feature would go against one of the zig rules: no hidden control flow

1553620258
scientes
a simpler thing would just be to call memunmap() on the memory, instead of jumping the stack backwards

1553620280
scientes
Linux will

1553620377
andrewrk
it's planned to be able to access the root source file with @import("root") or something like that. and then I think also planned is something like @hasField, which would exist because scanning over @typeInfo is O(N). combining these features pub fn panic can move to become a userland concept, and userland could introduce other things like this

1553620398
andrewrk
does that fit your use case?

1553620405
scientes
yes

1553620475
scientes
I'm revamping the startup code cause it could be leaner, but doing this beforeMain() thing would make it quite a bit leaner

1553620499
scientes
but maybe it would be rejected, because it is a second "special" function in root, and kinda goes against the hidden control flow rule

1553620535
scientes
but yeah, the @import("root") would allow it in user-space, instead of only in special/bootstrap.zig

1553620601
andrewrk
you can always provide the _start symbol yourself and bypass main. I believe this even works with build-exe

1553620637
scientes
it could easily be done after main()

1553620649
andrewrk
how is it leaner? it unmaps memory?

1553620697
andrewrk
so leaner in terms of resident memory, is that what you're talking about?

1553620711
scientes
yes

1553620746
scientes
It puts the stack on top of the environment variables (safely, except for the /proc/self/environ, but a prctl() can fix that)

1553620774
scientes
so you get another 8K or so of stack space, and because stack is allocated on demand, it frees memory

1553620871
andrewrk
allocating stack on demand goes against one of the main planned features of zig which is determining the stack upper bound at compile time and making sure the entire stack is reserved before beginning execution

1553620892
scientes
no, it doesn't change the stack size, i'm just talking about the way linux Virtual Memory works

1553620900
scientes
it doesn't allocate memory until it is touched

1553620909
scientes
but either way, it gives you "free" stack space

1553620917
andrewrk
right I'm saying that the default behavior will be to mlock the entire stack

1553620921
scientes
because the environment can take up up to 128KB of memory

1553621029
scientes
and after Linux 2.6.23, the environment can be up to 1/4 the size of the stack

1553621042
scientes
*allowed stack, as set in RLIMITS

1553621076
scientes
so even bigger

