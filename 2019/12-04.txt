1575418132
lupine
finally got around to day 3:

1575419921
andrewrk
on stream, we got to successfully assembling hello_world.s directly into an x86_64 ELF binary and running it :)

1575420589
daurnimator
andrewrk: I wasn't able to watch the stream; but are you writing it as an executable or a library?

1575421266
andrewrk
at such an early stage of a project there is no difference

1575421635
emekankurumeh[m]
instead of pinned fields, has relative pointer types  been discussed?

1575421774
shachaf
The video is pretty low-resolution -- is it just a thing where it takes a while to encode?

1575421781
shachaf
(Is the code up somewhere?)

1575421845
emekankurumeh[m]


1575421930
shachaf
Aha.

1575422411
emekankurumeh[m]
i.e. a pointer that is just an offset into the struct where another field resides

1575422434
emekankurumeh[m]
these would be then safe to copy

1575422920
pixelherodev
Is it possible to have a member shared in a tagged union?

1575422933
pixelherodev
e.g. a struct that's always valid + the tagged union?

1575422969
pixelherodev
Besides the obvious "nest tagged union in a struct"

1575423079
daurnimator
pixelherodev: I hit the same question in capnp

1575423168
andrewrk
shachaf, yes it takes about 20 min before the hd res version comes online

1575423485
traviss
i posted my advent zig code too:

1575423679
fengb
I used a 2d array. Took up 10GB lol

1575423763
traviss
heh. i tried similar but gave up as i kept going out of bounds.

1575423897
fengb
I crashed the stack first. Then I crashed the heap too

1575423917
traviss
i liked how easy getting a set intersection was. iterate over all the points in map a and then

1575423921
traviss
if (b.get(key)) |_| _ = try res.put(ak, {});

1575423924
fengb
Probably should have switched but nah, what’s the point of having unlimited memory if I don’t use it

1575423948
traviss
s/ak/key

1575424616
Snektron
I first checked what the min and max bounds were

1575424661
Snektron
Then i used a stack array of (2^24)^2 = 32 MB

1575435432
leeward
Does anyone know an easy way to get `zig build test` to stick its output somewhere other than zig-cache/o/somegobbledygook/?

1575435473
leeward
I tried changing tests.output-dir, but it had no effect.

1575441128
Snektron
leeward, theres a function in build.zig to do that

1575442131
leeward
Snektron: which?

1575442859
adamkowalski
Is there something you all can recommend for me here? I have two minimal code snippets

1575442919
adamkowalski
In the first I have a struct which has a generic type T. Because T is now in scope, I can have a member function which takes in a struct which uses that type T as well as a value which is of the same type

1575442928
adamkowalski
This makes the test code nice and clean

1575442977
adamkowalski
In the second case however, I cannot do the same because I try to make it into a free function. I have to pass the type explictly and then I can use it further on in the arguments. It makes the API much more clunky

1575443039
adamkowalski
The solution I've thought of is to make the function accept parameters by var, then use introspection to check if the types match, but that makes the functions much more verbose

1575443052
adamkowalski
Any ideas?

1575443136
adamkowalski
I would like for everything to be a free function so I don't have to cram everything into the struct just to avoid writing the type down explicitly for every function

1575443410
mikdusan
letoram: `zig build ...` is going to create various artifacts that go in hash'd dir names, but the

1575443447
mikdusan
leeward ^^

1575446932
Snektron
leeward, i think its `exe.setOutputDir`

1575446973
Snektron
can you combine that with the testing functionality?

1575447222
traviss
adamkowalski how does this look?

1575447893
Snektron
I made this nice c++ implementation of yesterdays AOC which i wanted to share

1575447915
Snektron


1575448000
mq32
you can probbaly also output the result as a compile error :D

1575448940
Snektron
That's what it does

1575448992
mq32
oh

1575448993
mq32
neat :D

1575458276
mq32
hm, can someone help me out?

1575458279
mq32
i get the following error:

1575458294
mq32
error: struct 'tilemap.Node' depends on itself

1575458349
mq32


1575458367
mq32
hm

1575458377
mq32
seems like the array type isn't lazy enough...

1575458479
mq32
is there already a bug report for this? using "[2][2]?*T" does not work, but "?*T" does

1575460593
daurnimator
andrewrk: watching the stream now: re: Q&A: I think a good instream.scan() requires a peek stream.

1575474976
dimenus
is it possible in zig to create a type that has functions that point to different functions based on a passed in comptime value?

1575474987
dimenus
the scenario i'm thinking here is a graphics frontend that points to either vulkan or opengl

1575475046
andrewrk
dimenus, yes

1575475070
andrewrk
pub const foo = if (x) a else b; //option 1

1575475091
dimenus
that's basically what i have, but it doesn't work at the callsite

1575475098
dimenus
i'm sure i'm butchering something though

1575475141
andrewrk
option2 is usingnamespace:

1575475188
Snektron
I made a pr for some changes to sort.zig

1575475300
dimenus
andrewrk:

1575475492
Snektron
i would rather make a VulkanBackend and an OpenGlBackend (for example)

1575475516
Snektron
And then return that from Backend

1575475525
dimenus
yeah, good point

1575475899
andrewrk
yeah put some logic in the BackendContext function

1575476008
dimenus
i had a brain fart, my bad guys. I thin using function pointers is probably too C like here. better to return a regular struct with functions with similar names

1575476525
andrewrk
that sounds much better

1575476542
andrewrk
zig is allergic to runtime-known function pointers

1575476602
dimenus
yeah, that would require having completely common function signatures

1575476603
dimenus
which is bleh

1575477378
Snektron
andrewrk: one this i was wondering about is whether std.sort.min/max should return ?T in case the slice is empty

1575477385
Snektron
s/this/thing

1575477593
andrewrk
Snektron, I could see there being value in any of the following APIs: * provide default value as parameter, return is T * assert len > 0, return is T * allow len 0, return is ?T

1575477801
Snektron
I suppose version 1 is encompassed by version 3

1575477830
Snektron
and version 2 is equal to version 1 and a `.?`

1575477900
Snektron
suppose a function `f` is `fn(a: i32) ?i32` and one writes `f(x).?`

1575477925
andrewrk
I think I like the ? version, because you can get the first version with `orelse` and the second version with `.?`

1575477944
Snektron
Would `f` internally still return whether the call was successful?

1575477953
Snektron
or does that depend on wether `f` gets inlined in that expression?

1575477967
andrewrk
that would be up to the optimizer. high chance that it could figure it out

1575477971
andrewrk
let's try a godbolt example

1575478162
Snektron
huh

1575478164
andrewrk


1575478169
andrewrk
even release-safe mode was able to figure it out

1575478171
Snektron


1575478189
Snektron
great

1575478193
Snektron
take a look at my example though

1575478197
andrewrk
looking

1575478226
andrewrk
what am I looking for here?

1575478269
Snektron
Why does the function return what it does when b = 0

1575478369
andrewrk
oh I see, that branch should in theory be eliminated

1575478382
Snektron
i suppose it isn't perfect though

1575478415
Snektron
also, why exactlky is it accessing the stack in the b != 0 part?

1575478418
andrewrk
if you replace `null` with `unreachable` then llvm figures it out. so yeah there's room for improvement here

1575478462
andrewrk
zig could help too, if we wanted to try that. for example zig could generate a specialization of div where returning null is unreachable, since the callsite has .?

1575478473
andrewrk
but I don't think such an optimization belongs in stage1

1575478478
Snektron
I suppose to optimize that it would need to look at the entire expression including expressions in called functions

1575478508
Snektron
maybe .? should be a special case though, but i agree that thats maybe too much for now

1575478553
Snektron
I am still wondering about the stack part though

1575478630
andrewrk
I think that's a constant to represent `@as(?i32, null)`

1575478652
andrewrk
llvm didn't figure out to inline it

1575478680
Snektron
hm, odd

1575478688
Snektron
Anyway i'll make the changes to std.sort.min and max

1575478702
andrewrk
yeah especially strange because the constant is all zeroes. that's pretty easy to inline

1575478778
Snektron
also strange how eax is first stored to [rsp - 8], and then loaded again

1575478786
Snektron
peephole optimization should have taken care of that

1575478866
andrewrk
I guess llvm is not magic after all :)

1575478913
Snektron
certainly not, but this case should be rather trivial

1575479190
andrewrk
I think it's safe to say that this case will be solved in the future. there's nothing fundamentally preventing it from working

1575479373
andrewrk
emekankurumeh[m], I'm going to finally unblock #2598 for you

1575480123
Snektron
alright, i've made min/max return ?T,

1575480140
Snektron
i've also added argMin and argMax, these return the index of the min/max item instead of the item itself

1575482008
dimenus
man, debugging c++ is just not fun

1575482059
andrewrk
dimenus, true that. one thing I've learned is that it's worth it to invest in debug infrastructure

1575482071
andrewrk
if you're debugging some zig internals, I should teach you the new debug stuff I added

1575482117
dimenus
nah, vulkan examples from sascha willems (but I will take you up on that at some point)

1575482451
frmdstryr
Could zig do just in time compiling? It'd be awesome to have something like ipython to test code on the fly/embed and debug

1575482481
andrewrk
nope, zig is an Ahead Of Time compiler

1575482743
dimenus
zig's type information makes for a nice api, i can store the type in my resource pool to ensure that there's no stomping on other buffers or memory corruption (well much less of a risk anyway)

1575482914
Snektron
frmdstryr: i usually use `zig run`

1575482919
Snektron
at least, thats what i've been using for aoc

1575482957
Snektron
dimenus: if you have Vulkan problems, i could try to answer those as well. I have some amount of experience.

1575483000
FireFox317
andrewrk, another stream today? :))) It's so fun to see you coding xd

1575483246
andrewrk
FireFox317, not today, but maybe some more zasm this weekend :)

1575483297
FireFox317
hahah no problem man! Appreciate your streams yesterday and the day before :^)

1575483330
andrewrk
that was so fun to get hello_world.s assembling directly into an ELF binary and running it

1575483339
andrewrk
that's full bootstrap, baby! no C++, no LLVM

1575483598
bgiannan
i'd like to do something for each case of an enum, can i iterate over it somehow ?

1575483646
Snektron
yeah, see @typeInfo

1575483669
bgiannan
ah great thx

1575484208
stratact
Oh, I would love to have this so badly:

1575484276
andrewrk
stratact, I just marked it contributor friendly

1575484476
stratact
andrewrk: alright, I'll take it. I guess better to do something about it than wait ;)

1575485030
FireFox317
andrewrk: the new code in start.zig doesn't work for freestanding/clashos, you mind adjusting it? I'm getting errors that it is trying to find root.main and system.exit etc. I'm not sure what the correct thing to do will be regarding freestanding, that's why i'm asking

1575485276
FireFox317
still working on a PR btw, but uni is time consuming :)

1575485565
andrewrk
FireFox317, yeah, taking a look

1575485878
dimenus
Snektron, thanks. I'll keep that in mind. Atm I'm building the learnopengl.com breakout game but in Zig & Vulkan

1575485916
dimenus
probably use libsoundio for sound instead of irrklang as well

1575486413
andrewrk
FireFox317, I have local tests running, should have fix pushed soon

1575486501
andrewrk
pixelherodev, this might be a breaking change for your use case, but hopefully in a good way. if you were relying on your _start symbol being found for your custom os app, you'll want to use the new `other` OS rather than `freestanding`

1575486544
stratact
hahaha, what did I get myself into? I started watching a youtube video about TUIs with Miguel de Icaza (the GNOME creator) speaking, to help me learn terminfo a bit better, and as brilliant as that guy is, the first thing he is says is creating these UIs is "relatively painful" and "very annoying" ... 😄😄😄

1575486557
andrewrk
I mean if your entry point was _start it will continue to work the same but if you were using `pub fn main` then this will affect you

1575486609
andrewrk
stratact, personally, I'd start with reading the lua implementation and understanding what they're doing. it seemed like the "data" component of it was most of the code, the actual logic was just a couple functions

1575487015
stratact
Fair enough, I should take advantage of daurnimator's existing work. I let curiousity get the best of me.

1575487107
FireFox317
andrewrk: Thanks!

1575487187
andrewrk
stratact, well geez I wouldn't put it that way. if you were inspired to learn stuff, that's great

1575487342
stratact
Ah, thank you. Well that's part of my strategy is just to get into unfamiliar terrirority and learn how it works, so it takes away the uncertainty/fear.

1575487722
andrewrk
good plan

1575487734
stratact
I need to find material that ressonates with me though. Reading the details in the very detailed man page for terminfo makes it hard for me to jump into, so I'm looking for prerequisite material to make it easier to reference

1575487836
stratact
With all that said, I still very much would love to have a curses lib for Zig and use it for a project.

1575488036
dimenus
andrewrk: does this look like it should be valid zig?

1575488043
dimenus
i'm hitting the else branch unexpectedly

1575488196
dimenus
here's the full struct

1575488322
stratact
Okay, I'm buying this book:

1575488359
andrewrk
dimenus, you're missing comptime on backend_type

1575488367
andrewrk
so the switch is not comptime

1575488386
dimenus
thank you sir

1575488440
andrewrk
one way to diagnose this is to put comptime in the switch target expression, it would have said "unable to evaluate constant expression" and that would be a clue

1575488568
andrewrk
FireFox317, fix pushed to master

1575491292
andrewrk
frmdstryr, huh, actually llvm does seem to be able to understand zig's interface pattern:

1575491442
andrewrk
it even figures it out with --release-safe

1575491636
andrewrk
oh no!! it's the std.mem.copy

1575492172
andrewrk
frmdstryr, in your experiment, try removing all the std.mem.copy and replace with @memcpy

1575492241
Sahnvour_
andrewrk: is @memcpy based on a llvm intrinsic ?

1575492261
andrewrk
yes

1575492338
andrewrk
I wonder if this is us hitting

1575493560
dimenus
is this idiomatic zig or abuse of var?

1575493711
andrewrk
hmm nvm about @memcpy. everything is fine:

1575493826
andrewrk
dimenus, personally I would accept the element type as a parameter. have a look at std/mem.zig for examples

1575493888
dimenus
i had it that way at first and changed it just to test :D

1575493895
dimenus
what do we really need var for?

1575493913
andrewrk
std.fmt.format

1575494038
andrewrk
the "context" variable when spawning a therad

1575494166
dimenus
yeah, the callsite is still super simple `try ctx.createBufferFromSlice(.Vertex, f32, vertices);`

1575494298
andrewrk
and then you can delete all your meta code

1575494330
dimenus
a bit more typing in exchange for less complexity :P

1575494354
andrewrk
that's a tradeoff zig is generally happy to make

1575494907
Sahnvour_
good to see std.mem.copy can be easily optimized too, phew

1575495011
Sahnvour_
do we have access to optimization reports using llvm as a lib ?

1575495488
andrewrk
Sahnvour_, I haven't played with that yet

1575495525
fengb
Hey, who runs the unofficial zig store?

1575495563
andrewrk
wilsonk,

1575496191
fengb
andrewrk: wrt llvm snippet, did it unroll the stream and buffer into a constant?

1575496229
andrewrk
yes

1575497453
pixelherodev
andrewrk, what commit / PR am I looking at?

1575497491
andrewrk
10e172b1d77619469653b0521d8f65604fa549c7

1575497544
andrewrk
pixelherodev, looking at Indomitable, I think it does not affect you, since your entry point is `start`

1575497551
andrewrk
so, nothign to see here

1575497655
pixelherodev
Looking at that commit I don't think it should affect that regardless

1575497793
pixelherodev
Either way, that _start is only exported if root file doesn't have _start

1575497805
pixelherodev
Now, it's not exported regardless

1575497825
pixelherodev
The practical difference to me is that there isn't an unused function _start being optimized out

1575497843
andrewrk
`export` guarantees that it is considered "used"

1575497862
pixelherodev
Ah right - either way it doesn't matter

1575497869
pixelherodev
It wasn't being used, so its presence isn't a concern

1575497897
pixelherodev
If I rename to _start, nothing will happen (except that there will no longer be an entry pointer since my linker script expects `start`)

1575498433
daurnimator
stratact: are you frmdstryr?

1575498510
daurnimator
oh wait no. frmdstryr is frmdstryr

1575498550
daurnimator
frmdstryr: could you try with

1575498575
frmdstryr
yea give me a sec

1575498672
daurnimator
stratact: terminfo is pretty simple.... just have a go at porting that lua file?

1575499068
frmdstryr
daurnimator: that changed the api? no member inStream

1575499428
frmdstryr
913447424 bytes (913 MB, 871 MiB) copied, 9.6256 s, 94.9 MB/s

1575499439
frmdstryr
const in_stream = &std.io.BufferedInStream(File).init(conn.file);

1575499455
frmdstryr
I like that better than the other way

1575502179
daurnimator
frmdstryr: suprising that its not as fast.... what does perf say? Could you do a flame graph?

1575502839
daurnimator
frmdstryr: oh also, you don't have to take the address of it

1575502844
daurnimator
not sure if that will make a difference

1575502873
plumm
andrewrk: is there any reason `fmt.ParseUnsinedError` is private? I wan't to merge error sets with it

1575503087
andrewrk
plumm, it's public now

1575503106
andrewrk
thx

1575503507
fengb
Hmm, I think I'm starting to understand why int ranges are important

1575503739
lupine
bruteforcing day 4 was fast

1575503908
plumm
andrewrk: are compile errors the go-to debug tool? I wonder if instead of telling me the file & which errors I don't have merged into my set, could it just tell me which set I'm missing (if there is one); is that reasonable ?

