1557016209
emekankurumeh[m]
andrewrk:

1557016225
emekankurumeh[m]
is @breakpoint supposed to work in test blocks?

1557032141
tgschultz
error: container 'generateStructFieldFn(generateStructFieldFn(generateStructFieldFn(generateStructFieldFn(EndMarker,usize,usizeEqual).FieldFn(u8,0),usize,usizeEqual).FieldFn(u10,1),usize,usizeEqual).FieldFn(i16,2),usize,usizeEqual).FieldFn(void,3)' has no member called 'field_id'

1557032148
tgschultz
The joys of comptime type construction

1557032168
daurnimator
tgschultz: and that's why I name my intermediaries :)

1557032170
tgschultz
This isn't a complaint, I know I've brought this on myself through practicing whitchcraft

1557032188
tgschultz
This type is recursively constructed, so that isn't possible.

1557032439
daurnimator
tgschultz: are you sure?

1557032463
daurnimator
tgschultz: can't call it MyStruct1, MyStruct2, MyStruct3, etc as you build it?

1557032482
daurnimator
tgschultz: show me the witchcraft you're using :)

1557032507
tgschultz
pretty sure, yeah. this is how its built:

1557032645
daurnimator
tgschultz: and the body of .Field?

1557032652
tgschultz
there's a base struct of functions, wrapped by a struct that's generated by (and contains) a FieldFn generated by another function. you chain generated FieldFns together to built a recursively defined struct

1557032660
tgschultz
pub const Field = generateStructFieldFn(Self, Id, equal);

1557032704
daurnimator
==> that was a request for the body of generateStructFieldFn :P

1557032798
tgschultz


1557032897
daurnimator
okay so it's a recursive stack

1557032910
daurnimator
I thought you might have done it with `use` abuse

1557032916
tgschultz
the hardest part about this is that if something goes wrong there's about an 80% chance the compiler just asserts

1557033147
tgschultz
this is mostly an experiment, but I did find a use for a less extreme version: typing together a group of type-specific things into one object.

1557033156
tgschultz
*tying

1557033269
tgschultz
when/if use starts working in structs I might try that. I don't really want to deal with a bunch of different files to do it.

1557033310
tgschultz
it would also be nice if I didn't have to create a struct just to store a function that I then return.

1557033482
daurnimator
tgschultz: I think `use` at the moment only imports functions? not variables?

1557033650
daurnimator
oh... nope :(

1557033668
tgschultz
namepsaces are structs now

1557033693
tgschultz
you can have top level fields in a file.

1557033911
tgschultz
and do this: const std = @import("std"); const std_inst = std(undefined); @typeOf(std_inst).os.exit(0);

1557052610
daurnimator
hrm. what would you shorten "Reverse Variable-length Integers" too?

1557052650
daurnimator
the existing code I'm looking at uses 'rbits' => reverse bit strings

1557052665
daurnimator
I started writing "packed" instead..... but that has another meaning in zig

1557061745
daurnimator
oh fun

1557061778
daurnimator
Debugging the failing test in #2424 I found some buggy code in the parser

1557061785
daurnimator
(that was the cause of the bug)

1557061803
daurnimator
I hate to say it; but this was a bug that rust would have found really easily

1557061809
daurnimator
instead of taking 3 hours >.<

1557062048
daurnimator
the 'nocopy'/'fixed' annotation may have helped though

1557064933
TheLemonMan
how lovely of llvm to silently "upgrade" all the f16 to f32 for targets that do not natively support them

1557066308
daurnimator
TheLemonMan: oh I didn't realise you were in here (I'm assuming you're LemonBoy?)

1557066326
scientes
I have to agree that using mlock() on the stack by default is a good idea

1557066356
scientes
like i just ran into that git clone crashes on a system with 512MB of ram

1557066363
scientes
like 512MB is not small....

1557066462
TheLemonMan
daurnimator, yup

1557066708
scientes
and linux already supports this, up to 64MB (per user?)

1557066727
scientes
or is it 64K

1557066951
TheLemonMan
ulimit -l says 65536 here

1557066967
scientes
ulimit -a says that is kb

1557066983
TheLemonMan
yup

1557067003
scientes
probably the default would be to mlock() but continue if it fails

1557067020
daurnimator
scientes: hmm? where is this discussion continuing from?

1557067050
scientes
It was a suggestion by andrew, i can't find it, and it depends on #157

1557067061
scientes
without #157 it would waste memory

1557067091
scientes
but few test with low memory systems, and it isn't fun when you use them

1557067097
scientes
even 512MB is "low-memory" these days

1557067134
daurnimator
scientes: I don't see a reason to mlock the stack.... if the OS wants to page in stack frames, let it...

1557067149
daurnimator
*page out

1557067159
scientes
that isn't the problem

1557067169
scientes
actually it would be nice if there was a mlock that could allow that

1557067177
scientes
the problem is OOM when extending the stack

1557067181
scientes
due to overcommit

1557067214
TheLemonMan
sometimes you don't want to have the stack contents spill on disk as that may leak some secrets

1557067227
scientes
the oom killer is this ominous black box of uncertainty

1557067289
scientes
yeah swap subsystem should have encryption support

1557067314
scientes
but then you can't hibernate

1557067387
scientes
it is done with dm-crypt

1557067664
daurnimator
TheLemonMan: well the obvious answer there is that you shouldn't have secrets on the stack.... should be in their own heap with MADV_DONTDUMP and MADV_WIPEONFORK

1557067715
daurnimator
(yes I know that isn't always, or even mostly, the case for programs today)

1557068317
TheLemonMan
that's a nice idea for a SecureHeapAllocator

1557068336
daurnimator
TheLemonMan: can just use the direct allocator and madvise yourself....

1557068389
TheLemonMan
but I love the idea of stacking allocators :(

1557068455
daurnimator
TheLemonMan: so do I!

1557068500
daurnimator
TheLemonMan: DirectAllocator => MadviseSecureAllocator => PoolAllocator...

1557068648
TheLemonMan
we're just missing a CloudAllocator...

1557068774
daurnimator
TheLemonMan: just use a ramdisk on

1557068794
daurnimator
uh not ramdisk. just mmap it

1557074856
daurnimator
doh...

1557074892
daurnimator
I didn't realise that zig's allocator interface (unlike C's) passes along the allocated pointer length to realloc/free

1557074909
daurnimator
I just went through hours of coding to make it efficient to recover that into from only a pointer

1557076040
scientes
daurnimator, lua also does it that way

1557076057
scientes
even tough it just ends up using malloc()/free() usually

1557077544
andrewrk
daurnimator, note that since shrink is guaranteed to succeed, you might need some of that fancy code

1557077629
andrewrk
TheLemonMan, it seems like a bug if llvm is doing that:

1557077635
andrewrk
"The binary format of half, float, double, and fp128 correspond to the IEEE-754-2008 specifications for binary16, binary32, binary64, and binary128 respectively."

1557077653
andrewrk
well, as long as it makes the memory model work, I'm fine with it

1557077751
andrewrk
I would love to unconditionally mlockall() by default but unfortunately the resource limits in practice make that not an option

1557078001
daurnimator
andrewrk: so this isn't finished yet and I need to go to bed.

1557078015
daurnimator
andrewrk: do you want to have a look now in incomlete state?

1557078076
daurnimator
currently trying to fight: unreachable: /deps/zig/src/codegen.cpp:gen_const_val_ptr:6010

1557078260
TheLemonMan
andrewrk,

1557078271
TheLemonMan
lovely, isn't it?

1557078403
andrewrk
as long as they make bitcasts / ptrcasts work correctly it should be ok

1557078451
andrewrk
it's a shame because the zig project is willing to add library calls for such things

1557078490
andrewrk
related:

1557078611
TheLemonMan
it's yak shaving all the way down heh

1557078891
andrewrk
daurnimator, any time I have today I want to spend on copy elision

1557078905
daurnimator
k, go for it :)

1557079385
daurnimator
or which file to put it in in std/

1557079407
scientes
daurnimator, what does it do?

1557079443
scientes
daurnimator, cause unsigned little endian numbers can be extended in-place

1557079449
daurnimator
scientes:

1557079501
scientes
daurnimator, don't call it "reverese" just call it little-endian. If you read Jane Austen she uses that "four-and-twenty", and in Arabic, arabic numerals are little-endian (cause it is a right-to-left language

1557079532
daurnimator
scientes: its 'reverse' because you have to seek backwards in memory to find the 'end' bit

1557079549
daurnimator
if the high bit isn't set, you have another byte to seek backwards to

1557079556
scientes
daurnimator, oh I did something similar once for AVR programming

1557079579
daurnimator
scientes: its used in my allocator so that I can store data before the user's pointer and find it again

1557079581
scientes
but there are much cleverer ways of stuffing bits

1557079622
scientes
you could also use something similar to utf-8

1557079636
daurnimator
scientes: it sort of is like utf-8. but in reverse :)

1557079848
daurnimator
/bed

1557079906
scientes
what time zone you in?

1557079916
scientes
I might go swimming at the beach in a sec as a break :)

1557079933
scientes
daurnimator, ^

1557080137
andrewrk
scientes, are you still working on #2240?

1557080153
andrewrk
ball's in your court

1557080161
scientes
yeah i'll update it

1557081613
scientes
I wanted a FMA, so i'll do more work on getting all the llvm intrinsics added

1557082032
TheLemonMan
iirc LLVM will generate FMAs by itself if you enable -ffast-math or however the flag is called

1557082613
scientes
TheLemonMan, sometimes FMA is correct however

1557082618
scientes
not just faster

1557082624
scientes
thats why it was added to the instruction set

1557082635
scientes
it does a single rounding instead of two

1557082674
TheLemonMan
yeah, but reordering the fp instructions is a big no-no if you care about accuracy

1557082702
scientes
i could them update some of our std/math.zig too

1557082736
scientes
cause we take from musl and musl took from some arm (non-arm specific) stuff after it was brought into glibc

1557082754
scientes
so we are using the old code

1557082794
scientes
What does llvm do when you don't have a fma instruction if you use that intrinsic?

1557082818
scientes
do we need to add feature flags to zig?

1557082919
TheLemonMan
possibly call an intrinsic, that's what it usually does when the lowering pass chickens out

1557082953
scientes
but i don't think compiler-rt has a soft-float library

1557082961
scientes
and that is the only way to do it with the same accuracy

1557082980
scientes
so it would probably have to bail

1557083187
TheLemonMan
right, X86ISelLowering.cpp seems to suggest that the expression is just rewritten as a + b * c

1557083198
scientes
ouch

1557083237
scientes
well, for 64-bit IEEE you might be similar accuracy if it used 80-bit IEEEE, but it still wouldn't be the same

1557083262
scientes
thats nasty, cause like i've seen library use differn't tables when fma is available or not

1557083278
andrewrk
I think it's going to be up to the Zig project to propose an extension specification to compiler-rt to enable more LLVM stuff to work, and then potentially even contribute the code to LLVM to take advantage of it

1557083281
scientes
that should be a -ffast-math only thing

1557083296
andrewrk
I would love for someone other than me to drive this

1557083420
TheLemonMan
meh, that's too much work for little or no return IMO

1557083617
scientes


1557083968
andrewrk
TheLemonMan, fair enough :)

1557084670
andrewrk
TheLemonMan, I think your std/os/linux/tls.zig file is a good example of system level code that is a lot cleaner in zig than C

1557084707
andrewrk
a lot of little things add up. being able to have that CustomData thing to show how future code can be modified, actually helps readability. good stuff

1557084746
andrewrk
I'm ready to merge it unless you wanted to do any modifications to the branch

1557084781
TheLemonMan
I was sooo happy not to have a thousand #ifdef and #define heh

1557084806
TheLemonMan
I only wanted to ask you a small question about the Thread type

1557084813
andrewrk
sure what's the question

1557084827
TheLemonMan
right now we're packing everything in a struct that's passed around

1557084841
andrewrk
right now -> master branch?

1557084869
TheLemonMan
but we may also go the pthread route, stash all we need to know about the thread in the CustomData and return the user a pointer to it

1557084872
TheLemonMan
yeah

1557084928
TheLemonMan
this way we can also "introspect" the current running thread since the CustomData structure is relative to the tp register

1557084931
andrewrk
it's more fresh in your mind than mine right now; which way do you prefer?

1557084945
andrewrk
ahh I see

1557084953
andrewrk
that seems beneficial

1557084977
TheLemonMan
scientes, I remember reading you were getting a ppc64 machine, is that right?

1557084989
scientes
nah, i'm just using a VPS

1557084993
scientes
but yeah i'm using it right now

1557085014
andrewrk
one could argue that matching the pthread ABI for threads would also make tools "just work". So if there weren't any downsides, that might be worth doing

1557085066
TheLemonMan
ppc64 is one of the few arches using a slight variation of the TLS variant I, it'd be interesting to port Zig to it heh

1557085156
TheLemonMan
andrewrk, I'll experiment a bit in a separate branch and report back

1557085166
andrewrk
TheLemonMan, one thing for your consideration:

1557085203
andrewrk
builtin.single_threaded does not guarantee no TLS

1557085257
andrewrk
I think that means simply in bootstrap.zig we have to look for the TLS elf header and ignore builtin.single_threaded

1557085308
TheLemonMan
sounds about right

1557085327
andrewrk
but I think we could avoid the check if !builtin.single_threaded and !builtin.link_libc

1557085339
andrewrk
right?

1557085368
andrewrk
well or we could introduce a new builtin.tls_needed

1557085398
scientes
TheLemonMan, sure, perhaps I will get some free time

1557085398
andrewrk
I'll open an issue for this, but for now, can you make it unconditionally look for the TLS elf header?

1557085399
TheLemonMan
well we're always gonna need a TLS if we store the thread context there

1557085413
scientes
settings up a ppc64el VPS actually took too much time, like half a day

1557085439
TheLemonMan
andrewrk, sure thing, can you please leave a comment on the PR?

1557085449
andrewrk
yes

1557085455
TheLemonMan
thank you

1557096712
hoppetosse
andrewrk: almost got your tetris working on webgl

1557096713
hoppetosse


1557096751
emekankurumeh[m]
nice

1557096986
emekankurumeh[m]
does anyone know what cmake commands to write to make cmake output `-Wl,-Bstatic -lpthread` to gcc?

1557097201
andrewrk
hoppetosse, neat! I'm pretty sure I got a high score but I can't tell :P

1557097252
hoppetosse
hahaha yeah, gonna try get the shape right first then I'll work on the font

1557097320
hoppetosse
I just embed a raw pixel binary to sidestep any png issues, hopefully that's enough

