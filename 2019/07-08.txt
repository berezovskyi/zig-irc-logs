1562545372
ianlilleyt
what is the best way to install debug symbols in build.zig?

1562545417
Tetralux
.. Into the binary you're making with build.zig?

1562545427
ianlilleyt
i was semi-expecting the pdb files to be copied over with exe

1562545474
ianlilleyt
for debug builds at least

1562545552
Tetralux
Oh right. Huh.

1562545587
Tetralux
andrewrk, is this related to how you made installation the default build step recently?

1562545613
Tetralux
Or is this expected behavior?

1562545840
ianlilleyt
for now, im wondering what a decent workaround is. Any way to copy the pdb to the installation dir without a hardcoded path? i'm pretty new to the build system internals

1562545922
Tetralux
I forget where the PDB ends up, but you should just be able to call std.fs.copyFile I think.

1562545946
Tetralux
I've never tried to do that though, so it's possible I'm forgetting something.

1562545951
ianlilleyt
it ends up in one of the zig-cache folders

1562545985
Tetralux
I'm not 100% sure how you'd get it to run

1562545994
Tetralux
In which case you couldn't just copy it yourself...

1562546025
Tetralux
If not, I guess a batch/bash script that calls `zig build` and then copies it is what I've got right now.

1562546042
ianlilleyt
that's difficult because i cant predict the zig-cache folder names

1562546053
ianlilleyt
they are for my purposes just random characters

1562546067
Tetralux
Oh yeah - damn xD

1562546953
Tetralux
Maybe there should be a way to say "Hey Zig! Call this fn when this step is about-to-be-run/has-been-run.

1562547008
ianlilleyt
it would be nice to have built-in support for debug symbols. Like in environments where you are allowed to embed them into exe vs not, move them to install dir optionally, etc

1562547060
Tetralux
By "built-in" support, do you mean "support for embeddeding the symbols into the exe"

1562547069
Tetralux
embedding*

1562547102
ianlilleyt
no sorry, i just mean more explicit support for debug symbols inside the build system

1562547121
ianlilleyt
and embedded symbols is one example of where explicit support would come in handy

1562547131
Tetralux
Oh, you mean things like builder.enableDebugSymbols(false).

1562547165
Tetralux
Or builder.setDebugSymbols(.Embedded)

1562547180
ianlilleyt
something like that

1562547218
Tetralux
I think the idea is that if you want debug symbols, you either use Debug or ReleaseSafe modes.

1562547256
Tetralux
But that doesn't have the granularity of "put them in the exe" or not.

1562547274
Tetralux
I forget if Zig puts the symbols into the exe on Windows anyway.

1562547282
Tetralux
Or if it always reads them from the pdb or something.

1562547287
ianlilleyt
pdb only afaik

1562547296
Tetralux
I know that VS needs the pdb.

1562547298
ianlilleyt
i think MS discourages embedded symbols

1562547298
Tetralux
IIRC.

1562547316
Tetralux
Does gdb works with them embedded on Windows?

1562547321
Tetralux
I've never tested that.

1562547442
emekankurumeh[m]
gdb uses gnu style debug info

1562547458
emekankurumeh[m]
but I think pdbs work

1562547653
ianlilleyt
im gonna make an issue for this

1562548102
ianlilleyt


1562548866
daurnimator
hryx: re: closures: the answer is the same as "what happens if I return a pointer to a stack variable"

1562548900
daurnimator
hryx: but that's why we have things like @newStackCall to make a differently-lived-stack. + the coroutine frame management things coming up....

1562549000
hryx
yeah. "differently-lived stack" is a good way to summarize the concept. it's a little head-tweaky but I'm sure it will become clearer

1562549185
daurnimator
hryx: for cases like a `y = map(x, fn(m:T) { return m^42; });` you don't need a differently-lived-stack though :) but that can just be an optimization. Probably not too different to copy ellision. "stack-ellision"?

1562549309
hryx
I'm excited for anonymous functions. That example doesn't even necessitate a capture though, which is nice

1562549478
daurnimator
hryx: I'm more excited for coroutines :)

1562549488
daurnimator
or co-frames

1562549491
daurnimator
or whatever they are now :P

1562549507
daurnimator
--> I have plenty of ideas for things to do once they are in the language

1562549510
hryx
hell yeah :)

1562549902
daurnimator
hryx: I dont' suppose I've managed to change your mind on do-while yet?

1562549945
daurnimator
hryx:

1562549946
hryx
afraid I haven't really been thinking about it since last time. was there a snippet you wanted me to look at?

1562549948
hryx
ah

1562549978
daurnimator
--> instead of using the proper loop variable type; I ended up swapping to a usize and having to use `@intCast` in the loop body

1562550090
hryx
Hm, I don't quite understand. Can you show me what it would look like in your ideal?

1562550114
hryx
what I mean is I don't understand how that cast is affected by do-while

1562550373
daurnimator
hryx:

1562550432
hryx
thanks, checking it out

1562550525
andrewrk
daurnimator, while (true) { ...  if (foo) break; i += 1 }

1562550557
hryx
hmm, why did you have to use usize instead of `var i: BF.Index`?

1562550583
daurnimator
hryx: because BF.items is `maxInt(BF.Index)+1`

1562550596
hryx
to be quite honest, I actually find the existing while easier to understand than the do-while version. That may be because I haven't used them much

1562550616
hryx
I see

1562550642
daurnimator
andrewrk: I guess you could still use the loop continuation? `while (true) : (i += 1) { ...  if (foo) break; }`

1562550673
hryx
can you not use `intFittingRange` to create a new type that fits BF.Index + 1?

1562550692
hryx
oh wait, nfm

1562550698
daurnimator
hryx: .getCell() takes a BF.Index. if you use anything larger you need an @intCast

1562550699
hryx
you would still need the cast

1562550703
hryx
yeah

1562551149
dimenus
is it ok to pass a maybe ptr to a c func?

1562551205
daurnimator
dimenus: yes. if null it will be NULL on the C side.

1562553727
hryx
regarding

1562554121
hryx
nevermind, I think I understand the problem now

1562554564
Tetralux
I don't really understand the use case for that.

1562554584
Tetralux
On face value, it seems overly complicated.

1562554701
daurnimator
hryx: removal of varargs is a bit of a spiny issue:

1562554721
daurnimator
varargs are part of the C ABI: sometimes you

1562554741
hryx
aw shucks

1562554742
daurnimator
however, I believe

1562554825
hryx
daurnimator: this wouldn't work for #173 would it?

1562554832
hryx
because the size isn't the same?

1562554940
daurnimator
hryx: 1. you end up wasting the space of a pointer. 2. the size is variable at runtime: that solution requires a different struct per-size

1562554962
daurnimator
3. you can't copy the struct around without breaking it

1562554995
hryx
what do people actually use VLAs for?

1562555305
daurnimator
I use them all the time....

1562555327
daurnimator
hryx: e.g. In my memory allocator

1562561172
emekankurumeh[m]
can we make the compiler output to stdout for things that aren't errors?

1562561185
daurnimator
@compileLog ?

1562561238
emekankurumeh[m]
no, i mean the --verbose-* options all output to stderr despite the fact they aren't errors

1562572538
ibutra
Good morning, I see you already added the libC file option to the zig build system. Sry I got hold up yesterday.

1562572570
ibutra
I was thinking about this and maybe it would also be a good idea to give an user the option to overwrite this path with his own vie the --libc command line argument.

1562572620
ibutra
Because these path probably differ for different users it is maybe not optimal having them only setable in a file which is normally checked into version control?

1562572703
daurnimator
ibutra: you're too late.

1562572721
ibutra
yes, I know.

1562572737
ibutra
But that only gives the option to set the libc file path in the build.zig file

1562572762
ibutra
I propose to add a command line argument to zig build to be able to overwrite this setting in the build.zig file

1562580819
fubd
if i'm using a zig library

1562580824
fubd
and it calls std.debug.warn

1562580832
fubd
but i'm building for wasm

1562580850
fubd
I get this errror:

1562580855
fubd
C:\Users\Kevin\src\wasm-tetris>zig build-lib --pkg-begin gbe ../oxid/gbe/src/gbe.zig --cache off --color on -target wasm32-freestanding src/main_web.zig --pkg-end

1562580882
fubd
i suppose that's a case where a @compileError or something could make explicit that there are no file handles on this particular platform?

1562580935
fubd
but also: how to "provide" a logging function for libraries?

1562581591
samtebbs
fubd: Yeah a compile error would be good for this case IMO.

1562581651
samtebbs
The logging interface should be handled by each library individually and they shouldn't really be doing std.debug.warn

1562581780
daurnimator
I think there was an issue around that mentioned a 'log' in the root file to pick where things went

1562582543
very-mediocre
while(something) : (i += 1) {} will never not bug me

1562582554
very-mediocre
while(something) {  defer i+=1; } seems far superior

1562582645
very-mediocre
#nitpicking

1562582681
very-mediocre
I don't get why a whole construct exists when defer already covers it

1562582839
mikdusan
that's kinda slick.

1562582876
mikdusan
in a good way

1562583026
very-mediocre
feels a bit like defer got pigeonholed as a memory cleanup thing

1562583116
daurnimator
very-mediocre: anything cleanup (also file descriptors; mutexes; etc)

1562583131
very-mediocre
sure

1562583133
daurnimator
had never thought of using it for the loop continuation

1562583145
daurnimator
very-mediocre: also I had a comment for you the other day.... but you had gone offline

1562583208
very-mediocre
hit me

1562583216
daurnimator


1562583346
samtebbs
very-mediocre: That's smart, +1

1562583379
daurnimator
very-mediocre: oh found it. you were talking about huffman encoding. I was going to ask if you'd looked into writing a HPACK module

1562583422
very-mediocre
I'm not super familiar with that unfortunately

1562583442
very-mediocre
I'm also struggling with making Huffman trees usable without traversal

1562583485
daurnimator
very-mediocre: HPACK would be a perfect testing ground for it :) :) :)

1562583489
very-mediocre


1562583494
daurnimator


1562583596
very-mediocre
has CRIME ever been done in practice?

1562583641
daurnimator
very-mediocre: why do you ask?

1562583669
daurnimator
very-mediocre: note that entries in our http.headers structure have a never_index field which maps correctly into HPACK.

1562583670
very-mediocre
because reading that HPACK spec has made me acutely aware of deflate being vulnerable

1562583703
very-mediocre
i see

1562583717
very-mediocre
let me see if i can get deflate working first :)

1562583732
very-mediocre
I've got an unfortunate work project coming up so my time is about to get squashed

1562583738
daurnimator
very-mediocre: I think HPACK might be more trivial if you need a test bed :)

1562583744
very-mediocre
it is definitely much easier

1562583760
very-mediocre
static huffman codes make everything so much easier

1562583802
daurnimator
a very zig solution would be an implementation that generates huffman trees either at comptime

1562583827
very-mediocre
in deflate, you have to build a huffman tree to encode a length+literal alphabet huffman tree and a distance alphabet huffman tree, in some obscenely short shorthand format (codelengths + ranges), i'm knee deep in thsi now

1562583889
very-mediocre
for dynamic huffman tree support, the same code can't be used for comptime trees

1562583894
very-mediocre
at least not my code. it allocates

1562583915
very-mediocre
hrmm

1562583946
very-mediocre
i guess you're right, i could have it all on the stack

1562583968
very-mediocre
judgment call: say you have an alphabet that ends up as 288 nodes of a huffman tree, would you allocate that?

1562583979
very-mediocre
I'm always afraid of using too much stack space

1562584112
very-mediocre
#thinkingoutloud I should invest in a rubber duck

1562584742
mq32
hey

1562584777
mq32
is it somehow possible to "allocate" memory at comptime in Zig?

1562584792
very-mediocre1
not currently but there's an issue for that

1562584798
mq32
i could just create an array large enough, right?

1562584814
mikdusan
yes

1562585244
very-mediocre
daurnimator: here's what i'm doing to generate dynamic huffman trees, based on the frequency that symbols appear at:

1562585291
very-mediocre
shouldn't be too hard to rework to be fully stack based, the main annoyance is line 22 -> new nodes have to be created, and these nodes need to live somewhere

1562585553
very-mediocre
the alphabet size is comptime known so we can codegen different variants, whereas I'm just using dynamic memory to accept any alphabet size

1562585741
very-mediocre
you could simply be inefficient and provide a generously-sized buffer on the stack at the callsite that you can use for the "new" nodes

1562585918
very-mediocre
tl;dr: in the calling scope (wherever we call HuffmanTree.fromFrequencies from), we need an array of nodes for the entire alphabet + enough buffer for creating new nodes

1562585979
very-mediocre
and the resulting "tree" which is output is simply the root node, which when traversed, results in the desired tree.

1562586013
very-mediocre
apologies for rambling, but tl;dr: it's actually non-trivial and I'd rather just do it separately for HPACK should I take that on

1562586070
very-mediocre
or just use dynamic memory for HPACK anyway, in C++ i'd be using `new` like no tomorrow for this problem

1562587057
daurnimator
very-mediocre: just got back to computer. will read your code

1562587077
very-mediocre
no worries, i rambled on a

1562587114
very-mediocre
last 2 lines of that block of text is what you want. :)

1562587136
daurnimator
very-mediocre: I don't quite understand how to write a good/fast/correct huffman decoder

1562587146
daurnimator
very-mediocre: so what is the data structure you need?

1562587161
very-mediocre
treenodes

1562587192
very-mediocre
there's no getting around that for building the tree, but then for lookup it's obnoxious as you have to traverse it using depth-first search

1562587214
very-mediocre
so at this point you add a lookup table with the final huffman codes, which is what I'm working on now

1562587262
daurnimator
very-mediocre: do you need actual 'follow the pointer' trees? or could you just use a segmented list of the necessary depth?

1562587301
very-mediocre
good question, I'm not familiar with segmented lists

1562587325
daurnimator
the comment at the top of segmented_list.zig is quite a good explanation

1562587335
very-mediocre
i'm reading that right now

1562587379
very-mediocre
i don't think it'll work because there isn't always a power of 2 size increase

1562587424
daurnimator
yeah I think much of the time the tree would be quite unbalanced

1562587479
very-mediocre
rn im thinking of just doing a breadth-first traversal and document all final codes in a lookup table

1562587526
very-mediocre
whatever's in the fringe goes into a table

1562587596
very-mediocre
everything in the fringe, by definition, will have the same code prefix

1562587634
very-mediocre
what's holding me back is super petty: just use std.ArrayList for the fringe (i.e. current "line" of the tree at a given depth)?

1562587649
very-mediocre
but std.ArrayList over-provisions as it grows... I'm that petty.

1562587733
daurnimator
very-mediocre: huh? just use appendAssumeCapacity

1562587764
daurnimator
assuming you `ensureCapacity` first

1562587774
very-mediocre
ensureCapacity overprovisions

1562587806
very-mediocre
that's actually very normal and i should

1562587808
very-mediocre
i'm just petty.

1562587813
very-mediocre
I'll get over it in a few minutes.

1562587893
daurnimator
oh weird. I don't remember ensureCapacity doing that

1562587898
very-mediocre
if we're gonna overprovision may as well use a sufficiently large buffer on the stack in the first place

1562587914
daurnimator
I wonder if andrewrk would accept a PR to add a `setCapacity` function

1562587915
very-mediocre
no wait, needs to be heap since we have to return a pointer to it.

1562587933
very-mediocre
well it should overprovision as it grows, or else it'll realloac each time you add 1 item

1562587938
daurnimator
very-mediocre: but your heap could be on the stack ;)

1562587948
very-mediocre
seriously all of this is some kind of OCD I have

1562587954
very-mediocre
i should just use std.ArrayList

1562587963
daurnimator
very-mediocre: sure, we can have `ensureCapacity` do that; but `setCapacity` would be for those that know their exact max size.

1562587970
very-mediocre
right

1562587979
very-mediocre
but I don't even know that here, could be any huffman tree

1562588001
daurnimator
Though really if I (or anyone else) ever gets around to it, we can replace it all with a maple tree :P

1562588047
very-mediocre
"in general, there can only be log2n-1 n-bit codes" <-- maybe we can know the exact size in advance

1562588209
very-mediocre1
maple trees, apparently:

1562588212
very-mediocre1
never heard of it before

1562588294
very-mediocre1
n-bit codes -> if n is the depth, we

1562588320
very-mediocre
diagnosis: premature optimization ocd

1562588341
daurnimator
very-mediocre:

1562588359
very-mediocre
thanks, will watch that later

1562588372
daurnimator
watch it in bed/on the train/etc.

1562588387
very-mediocre
there's no trains here, I live in Dubai :)

1562588393
very-mediocre
i'll watch it soon

1562588436
very-mediocre
breadth-first search it is then

1562588485
daurnimator
very-mediocre: FWIW i'm reading various huffman decoding pieces of code.

1562588507
very-mediocre
thanks. I'm still on encoding

1562588530
daurnimator
oh. write the decoder first; it's more useful ;)

1562588537
very-mediocre
it's easier

1562588546
daurnimator
then its an even better place to start

1562588555
very-mediocre
I prefer to start with the hardest things

1562588563
very-mediocre
a little knowledge is worse than no knowledge

1562588580
very-mediocre
doing the decoder would lead me to underestimate the encoding

1562588669
daurnimator
I generally (in order): 1. do background research until I think I know everything there is. 2. do the obvious thing "why does everyone make it so complicated?" 3. fail: realise why no one did it that way. 4. do the next most obvious thing. 5. goto 3.

1562588689
very-mediocre
haha, that sounds about right

1562588725
daurnimator
sometimes you get lucky and 2. works. other times you wonder how anyone made this work, so you read other source code and find bugs, bugs everywhere.

1562588755
very-mediocre
confession: I hate reading source code, especially C with macros

1562588792
very-mediocre
your 1...5 points are spot on

1562588807
very-mediocre
deflate is insanely convoluted and the RFC is deceptively simple

1562588821
daurnimator
but in this case, I would start with the decoder, cause it

1562588869
very-mediocre
eh, i guess. but the decoder takes for granted that certain pre-prepared data is coming in

1562588880
very-mediocre
that pre-prepared data is where the true challenge lies

1562588905
daurnimator
at least for hpack it comes with a few test cases: make them work :)

1562588909
very-mediocre
i feel strongly that writing the decoder does not at all prepare you for writing the encoder

1562588931
very-mediocre
anyway, different strokes and all that

1562588947
daurnimator
In video/audio codecs

1562588954
very-mediocre
I see

1562589529
daurnimator
okay now I've nerd sniped myself and am trying to write a huffman decoder..

1562589536
very-mediocre
haha

1562589549
very-mediocre
look up puff.c which is the de-facto reference for inflate

1562589558
very-mediocre
it's annotated for learning purposes

1562589687
very-mediocre
if you play your cards right you could produce a working deflate/inflate before I do :]

1562589692
very-mediocre
i'm slow

1562589723
very-mediocre
for example I'm still hung up on the lookup table.

1562590046
very-mediocre
You'll need this for decoding:

1562590063
very-mediocre
yet another convoluted lookup table

1562590203
very-mediocre
note that DEFLATE uses a canonical huffman coding, which has some guarantees that let you have a compact lookup table

1562590268
very-mediocre
on the encoding side i'm going to have it keyed by the code (not huffman code) e.g. 0-288 for the main alphabet

1562590316
very-mediocre
for decoding you could have it keyed by by codelength

1562590356
daurnimator
welp, this looks like too much for tonight

1562590370
daurnimator
You unsniped me

1562590495
very-mediocre
haha

1562590512
very-mediocre
i know the feeling

1562595269
daurnimator
Are release-safe stack traces known to be broken?

1562597665
daurnimator
Filed #2849 as I'm not sure if its a known issue...

1562598042
daurnimator
well crap.... the issue seems to be bad codegen in non debug mode

1562599321
mikdusan
daurnimator: windows platform? then yeah i've seen release-safe segfaulting 3 weeks ago

1562599330
daurnimator
nope linux

1562599832
fengb
Oh I just created a release-safe segfault issue

1562599876
fengb


1562600300
daurnimator
So I finally managed to reproduce my original issue in debug mode. #2850

1562600328
daurnimator
As I kept reducing the test case in release-safe mode eventually it started triggering in debug mode too. which was lucky I guess

1562602466
andrewrk
thanks daurnimator

1562603511
ffddr
Hi! Is it appropriate place to ask beginner questions? If so - could anyone take a look on my very first zig code and give any advices on how to simplify it?

1562603542
andrewrk
ffddr, absolutely

1562603579
andrewrk
are there any parts in particular you feel could be simpler?

1562603598
andrewrk
at first glance it all looks reasonable

1562603633
donpdonp
so a return value of !T creates an "error union type", im just wondering is a union type generally available? eg. UnionType = T1 | T2;

1562603654
andrewrk
ffddr, I see an `orelse unreachable` there. that can be directly simplified to `.?`

1562603707
andrewrk
donpdonp, you mean this?

1562603811
ffddr
The first thing I tried to simplify - explicit pointer aligments and using []u8 instead. Is it a good idea?  I messed up all the casts for []u8 and just used *u8

1562603846
ffddr
Thanks for ```.?```!

1562603848
donpdonp
hmm i think that does fill what i would expect from a union type, especially with switch and union(enum).

1562603906
donpdonp
in other langs it would be A = B | C, and the place holder names of union A = { someB: B, someC: C} seems a little different but still the same thing.

1562603922
donpdonp
(by placeholder i mean field names of someB,someC)

1562603925
andrewrk
donpdonp, unions in zig have safety checks, so if you access the wrong field in debug mode you'll get a panic

1562603985
andrewrk
ffddr, you're sort of destroying the type information of the pointer intentionally for your data thing

1562604004
andrewrk
in this case i would suggest just going with @ptrToInt and @intToPtr

1562604028
donpdonp
after zig's type system, my fav thing is the "if (optType) |type| { }" syntax. such an easy-to-read way to handle null checking

1562604082
andrewrk
ffddr, you may also be interested in

1562604099
andrewrk
hmm those docs should really have an example. but you can find plenty of examples in the std lib

1562604100
ffddr
and store u64 instead of *u8? This make sense, thanks!

1562604114
andrewrk
ffddr, usize is the integer type that is guaranteed to be the same size as a pointer

1562604214
andrewrk
ffddr, and here's a related issue for the future:

1562604240
andrewrk
for now, you'll want to be careful with that, because it's an easy way to introduce memory unsafety

1562604298
ffddr
andrewrk thanks, just tried with the usize, looks way better than `*align(4) u8`

1562604324
andrewrk
ffddr, your inner @ptrCast is redundant on line 39

1562604342
andrewrk
also the outer @ptrCast on line 47

1562604389
ffddr
oh, I see, thanks!

1562604530
ffddr
maybe `allocator.create`(line 35) is somehow avoidable? I was looking for some kind of `std::move` alternative, maybe I missed something?

1562604753
andrewrk
std::move is a c++ concept that only makes sense in the context of constructors and destructors, which zig does not have

1562604771
andrewrk
it is to avoid inefficiencies that don't exist in zig

1562605080
ffddr
I am totally fine with `allocator.create`, asked just to check that I did not miss some utility function that can help in that particular case. Like I missed `ptrToInt` and other things :)

1562606098
andrewrk
oh no, tgschultz I finally got to your interface reform PR and the conflicts with master branch are quite intimidating

1562606453
tgschultz
I'm sure. I can redo it when we know which direction we want to go with it

1562606485
tgschultz
....but I may not be able to get to it for a while, so if you just want to close them I'm fine with that.

1562606507
andrewrk
I'll have a look though, the diff is enough for me to see the idea that you discovered

1562606515
andrewrk
and thanks for the writeup

1562607936
dimenus
andrewrk: do you have a preferred resolution to this issue?

1562607949
dimenus
should the global constants just be of integer type?

1562608072
andrewrk
dimenus, step 1 is decide whether to accept this proposal:

1562608420
donpdonp
$ zig --color on build => Unrecognized command: build.

1562608454
andrewrk
donpdonp,

1562608473
donpdonp
oh haha. thx

1562608555
donpdonp
i ended up here because zig build has 3 lines of the error, then 15 lines of "the following command failed". I wanted to zig build 2>&1 | egrep those out, but then I lost color.

1562608695
andrewrk
I see

1562608703
dimenus
can you generate c headers from zig code?

1562608705
andrewrk
that's good to know

1562609274
dimenus
can you have distinct integer types in zig?

1562609301
emekankurumeh[m]
no, but there is a proposal for distinct types

1562609317
dimenus
we could make extern enums distinct integer types instead

1562609334
dimenus
that way we keep the type information but don't muck up the enum system

1562609345
emekankurumeh[m]


1562609374
dimenus
thanks

1562609516
emekankurumeh[m]
and to answer your previous question zig can output header files from zig code but iirc the functionality isn't complete, for example you can't output function prototypes

1562609850
dimenus
@OpaqueHandle would cover a lot of cases

1562609856
dimenus
except bitflags

1562609864
dimenus
(which he notes later in the thread)

1562610085
emekankurumeh[m]
@intToPtr(@OpaqueType(), ...)

1562621105
FireFox317
andrewrk: The homepage of ziglang still mentioned the issue of the 'big' binaries, this can be removed because we have small binaries now :)

1562621884
andrewrk
FireFox317, updated, thanks

1562621892
HelloThere54321
For testing using the 'test "TEST" {}' syntax, is it possible to would be made possible to have the tests in one file and the code being tested in another and when running under 'zig test' the private const/vars/function would be made visible to the testing file

1562622027
andrewrk
HelloThere54321, sounds like a good proposal

1562622226
HelloThere54321
Shall i create a new issue for this

1562622386
andrewrk
yes please

