1570499918
kurufu
Oh i found the reason linkages were not working. I needed to link libc for the loader to trigger. You learn something every day.

1570523775
kenaryn
Hello, I do not see 'class' concept in the official documentation, but there are struct anyway with field names and unary operator (i.d. spacenames) to access it, does it even leave Zig with an object-oriented paradigm or is it "just" a declarative programming language?

1570524940
mq32
kenaryn, zig structs are a mix of namespace and record

1570524972
mq32
so for object oriented terms: a zig struct is both namespace (so: static members) and a non-derivable, non-interfaceable class without constructors #buzzwords

1570524986
mq32
or simpler: C structs with "member function call syntax"

1570525131
kenaryn
Lol I like your hash tag, thank you for instructing me.

1570525517
kenaryn
I thought for a time that purely functional languages would be the future, likely to dominate both RISCV and edge-computing hardware.

1570525596
kenaryn
But each year, there is only one paradigm discussed at the programming language symposium: the declarative one.

1570525706
earnestly
It's popular in academia, like microkernels

1570525804
mq32
kenaryn, i think there's only one "real" paradigm: imperative, because that's how computers work and someone has to do the imperative work

1570525866
earnestly
Everyone forgets about proceedural :/

1570525998
mq32
earnestly, a quick search says:

1570526251
earnestly
All hail the google search

1570526313
kenaryn
:)

1570526560
mq32
:D

1570528058
mps
mq32: +1 (regarding imperative)

1570528250
kenaryn
I just read that, perhaps it will please someone:

1570528269
kenaryn
It is very short and stay simple.

1570528432
rifkik
gingerBill on Discord says: Does anyone here work on the Zig compiler and could answer a technical question regarding calling conventions? I'm personally trying to figure out how LLVM deals with the System V ABI.

1570528446
rifkik
can anyone answer this?

1570530106
earnestly
kenaryn: you might like this:

1570530755
ceymard
does anyone know what the anyframe-> construct is ?

1570530770
ceymard
or even the -> operator

1570533233
mq32
ceymard, anyframe->T is a "future" value from the async stuff

1570533251
mq32
-> isn't an operator here, but part of the typename (at least that's how i understood it)

1570536200
tgschultz
-> operator always struck me as incongruent with the rest of the language since it is only ever used in async. Seems like it should be @anyframe(T) or something.

1570536346
mq32
@AnyFrame(T) probably

1570536352
mq32
anyframe would be a function :P

1570537082
kenaryn
Many thanks earnerstly, I did not see your message sooner.

1570537324
ceymard
mq32: so which part's which ? is anyframe a keyword ?

1570538087
kenaryn
ceymard according to

1570538307
daurnimator
I think there are plans to turn several types back into keywords

1570538340
daurnimator
the issue is that keywords can be avoided with @"keyword" but non-keywords end up with a shadowing error

1570539317
kenaryn
Why do not remove `@"keyword"` from the Parsing Expression Grammer? Is it justified to keep it?

1570539384
mq32
kenaryn, it's quite relevant actually

1570539409
mq32
just imagine you want to import a c-function named "fn"

1570539824
kenaryn
I understand, thanks for the obvious use case :D

1570539896
mq32
or the reoccuring joke here: if you want to export a poop emoji named variable :D

1570539908
kenaryn
LOL

1570540369
daurnimator
huh?

1570540429
daurnimator
kenaryn: e.g. `somestruct.@"while"` because `somestruct.while` is a syntax error. also `somestruct.@"field with e.g. spaces"`

1570540854
kenaryn
Allright, it is quite relevant indeed.

1570540944
kenaryn
In a normal struct, bool type has 1 byte-length, I am right?

1570541025
mq32
i think bool has "1 bit length" and whatever the struct layouter makes out of your boolean

1570541026
kenaryn
1 byte-width*

1570541041
fgenesis
if it's a non-exported struct, probably yes

1570541066
fgenesis
i mean, bool = u1

1570541083
mq32
fgenesis, for non-exported it may also be a 32 bit wide type

1570541093
kenaryn
I just read in documentation that 1 bit-width is for packed struct

1570541095
mq32
but i don't know if there are some restrictions

1570541155
kenaryn
So bool has the same alignment whether it is used in a packed struct or a normal struct?

1570541187
fgenesis
well you can godbolt it and test, i guess

1570541187
mq32
is that relevant?

1570541220
mq32
packed structs guarantee "the exact layout i've written with zero bits padding", extern structs guarantee "the same thing as C would do"

1570541234
kenaryn
I do not know, I never understood when alignement is useful and/or required. Do you know at least one use case?

1570541239
mq32
neither packed nor extern doesn't guarantee anything except for "every type has natural alignment except otherwise specified"

1570541259
mq32
arm32 has the requirement that 32 bit words must be 32 bit aligned

1570541267
mq32
otherwise it will crash on access

1570541289
fengb
Normal structs don‚Äôt have guaranteed memory layout

1570541297
mq32
also you can align types so that can be accessed faster (imagine 3 byte alignment vs. 4 byte alignment: one address calculation is a shift, the other one a multiplcation)

1570541310
fengb
So the alignment is undefined... but it‚Äôs probably usize aligned

1570541349
kenaryn
Allright, I think I'm catching it a bit (joke inside).

1570541358
fengb
Oh I‚Äôm just being slow and reiterating mq32

1570541396
mq32
i really love that zig structs don't have any guarantees about memory layout by default

1570541404
mq32
this allows so many nice optimizations for speed or size :)

1570541421
fgenesis
especially when paired with PGO later on

1570541425
mq32
for speed, just reorder everything to "native alignment", for size just pack everything as tight as possible

1570541432
mq32
PGO?

1570541435
fgenesis
but i don't even know if there's any PGO that considers such things at the moment

1570541440
fgenesis
profile guided optimization

1570541447
kenaryn
Profile Guided Optimizations

1570541452
fengb
But back in my day, we reordered struct fields for fun optimizations!

1570541457
fengb
Kids these days

1570541483
fgenesis
it's like, think of java people that order class fields alphabetically, because "it's neatly ordered that way"

1570541522
andrewrk
no guaranteed memory layout also lets us insert a safety field, and detect bad pointer casts, and detect undefined values

1570541641
fengb
Docgen üòç

1570541688
mq32
fengb, fgenesis: want a good read on "How to really optimize code?" enjoy this:

1570541699
mq32
related to: <fengb> But back in my day, we reordered struct fields for fun optimizations!

1570541707
fgenesis
mq32: old

1570541716
mq32
yes, very old

1570541716
fgenesis
but good, indeed

1570541720
andrewrk
fengb, are you playing with it on your computer?

1570541739
fengb
Not yet. I just saw your tweet

1570542576
andrewrk
this same semantic analysis dump that powers the docs can be used for a reasonable IDE integration. It won't be as fast or nice as the plan for self-hosted, but it's a "90% solution"

1570542943
mq32
oh man

1570542950
mq32
0.6 development is gonna be an exciting time!

1570542989
Cadey
andrewrk: yeah but basically catalina's gatekeeper only flags binaries from the web. curl2bash and the like aren't affected somehow.

1570542993
Cadey
er

1570542999
Cadey
binaries from web

1570543014
andrewrk
that sounds like a gross hack

1570543031
Cadey
however

1570543040
Cadey
downloading a tarball with wget/curl is unaffected

1570543050
andrewrk
interesting, that's good to know, thanks!

1570543066
Cadey
i'm going to do some research and see about writing up some instructions

1570543096
mikdusan
when using browser (safari) i don't know about chrome, downloaded files are attributed with `com.apple.quarantine`

1570543127
andrewrk
maybe browsers are opting into this API?

1570543145
mikdusan
that is my guess

1570543211
mikdusan
`xattr -d com.apple.quarantine ...` is one way to remove the attr

1570543246
Cadey
there's a few ways

1570543259
Cadey
1. make your terminal exempt from gatekeeper (very powerful hammer)

1570543269
Cadey
2. tell gatekeeper to ignore binaries

1570543279
Cadey
3. disable gatekeeper entirely (overly powerful hammer)

1570543285
Cadey
4. delete the xattrs

1570543332
Cadey
however

1570543338
Cadey
if you download the file via the command line

1570543341
Cadey
none of that is needed

1570543439
andrewrk
sounds like this change will not be disruptive to zig

1570543521
fgenesis
Cadey: didn't they make gatekeeper mandatory in the newest osx?

1570543534
fgenesis
as in, no more unsigned binaries at all?

1570543568
Cadey
fgenesis: when you download it with safari, firefox or chrome

1570543582
Cadey
there's a lot of FUD about this

1570543583
fgenesis
i've seen someone at apple say they wanted to do this eventually but not sure if it's now like this or not yet

1570543606
Cadey
one moment, getting a screenshot

1570543609
fgenesis
because no unsigned binaries is going to be a huge blow for any dev

1570543635
andrewrk
fgenesis, Cadey just did a bunch of testing, did you see above?

1570543650
fgenesis
i don't care, i'll just stop compiling stuff for osx, but for any dev still targeting osx it's going to be baaad

1570543661
fgenesis
yes but that was about the quarantine bit

1570543682
fgenesis
that is very similar to how windows tracks binaries downloaded from the interent and warns you

1570543695
andrewrk
what makes you think the quarantine bit is unrelated to signed binaries?

1570543695
fgenesis
(search for "windows zone checking" for the details)

1570543704
fgenesis
quanratine bit is fs-based

1570543708
Cadey


1570543723
fgenesis
signature is attached to the binary and can't be faked

1570543743
Cadey
fgenesis: you are making emotional arguments, please see my screenshot

1570543768
fgenesis
Cadey: did you turn off gatekeeper?

1570543796
Cadey
no

1570543807
Cadey
like i said

1570543817
Cadey
binaries

1570543828
fgenesis
that is just weird. i've had a lot of problems shipping osx binaries lately

1570543839
fgenesis
another thing to test, thx for the pointer

1570543869
Cadey
now downloading it with safari

1570543953
fgenesis
maybe there's a difference for console progs vs UI progs?

1570543969
mikdusan
apparently the date is January 2020 for whatever this notarization requirement turns out to be for command-line, if any

1570543976
fgenesis
since console stuff isn't typically targeted towards the "end user"?

1570543995
Cadey


1570543995
fgenesis
um what

1570544014
Cadey
mikdusan: citation needed

1570544021
mikdusan


1570544067
andrewrk
ah yes this ^ is the thing I was thinking of

1570544103
fgenesis
so that means if you set back your clock and build so the binary has an older timestamp it'll continue to run? o_O

1570544113
Cadey
andrewrk: even then, there's going to be the spctl --add workaround

1570544125
mikdusan
tbh i'm still confused by all this how it applies to command line exe, dylib, and .app bundles

1570544152
fgenesis
mikdusan: from what i've gathered when reading up on this a while ago, everything in an app bundle must be signed, recursively

1570544153
Cadey
mikdusan: until there is clarity about it, it's fair to assume that the existing state of the world will be maintained for command line software

1570544160
Cadey
fgenesis:

1570544163
fgenesis
means you can't just load a random .dylib, it'll fail

1570544170
Cadey
zig does not distribute itself as an

1570544174
andrewrk
I agree with Cadey

1570544185
Cadey
and tbh

1570544196
Cadey
if it does turn out that we need to notarize zig

1570544201
Cadey
we'll figure it out when it happens

1570544211
Cadey
we don't know if that will happen though

1570544222
Cadey
so it's probably a waste of time and effort to care until proven otherwise

1570544225
andrewrk
yes

1570544253
Cadey
there are currently four workarounds for installing zig on macs

1570544296
Cadey
hell 5 if you include homebrew

1570548777
donpdonp
i was just reading about

1570549928
fengb
Hmm... could X32 be faster due to being more cache friendly?

1570549979
fengb
Wikipedia says 5-8% faster :P

1570550658
fgenesis
depends on the data structures in use

1570550665
fgenesis
for pointer heavy things it'll save RAM too

1570553085
donpdonp
turns out i rarely need to reference 12PB beyond $0000 :)

1570554379
andrewrk
the addresss space is nice though

1570554400
andrewrk
x32 reduces the safety mechanism of GeneralPurposeDebugAllocator

1570555283
tgschultz
andrewrk, how is Windows's non-compliant UTF16 handled currently in std? From a little poking around I'm guessing it is ignored?

1570555320
andrewrk
tgschultz,

1570555338
andrewrk
I consider this unsolved. If it works, it's an accident

1570555401
tgschultz
I'm more concernd about the other direction. Specifically if there is any consideration for unpaired surrogates.

1570555842
andrewrk
I believe we either assume windows gives correct unicode or an error code

1570555868
andrewrk
this is not the planned final state of the API. zig std lib should be able to deal with invalid unicode file names, if windows allows it

1570556080
tgschultz
it does in certain contexts. it's a pain for everyone

1570556302
FireFox317
andrewrk: I've been poking around a bit with the new documentation stuff, is there anything i can help with?

1570556308
andrewrk
FireFox317, yes, absolutely

1570556326
andrewrk
we'll want to coordinate a bit to not clobber, but there is much to do

1570556384
andrewrk
big picture: poke around in the generated docs and find docs that don't look good or could be improved, figure out what can be done, do it, repeat

1570556396
andrewrk
here's a concrete suggestion; add fields to struct types

1570556413
andrewrk
let me push what I have

1570556462
andrewrk
I'm about to add error sets :)

1570556465
FireFox317
I would like to try to implement that (the fields to struct types)

1570556489
FireFox317
Yeah, i thought it would be better if you do the error sets yourself, because that seems pretty complicated xd

1570556503
andrewrk
give me 10 min to run local tests and I'll push 1 more commit

1570556553
andrewrk
let me know if you want tips setting up edit/build/test cycle. once you have a semantic analysis dump, it's easy to modify just the js file and refresh

1570556556
FireFox317
Sure!

1570556609
FireFox317
Currently I'm generating the docs with this: `./zig test ../lib/std/std.zig -fgenerate-docs --output-dir zig-cache --override-lib-dir ../lib`. That is correct right?

1570556614
andrewrk
yes

1570556646
andrewrk
and then I just manually run `cp ../lib/std/special/docs/main.js zig-cache/docs/ && cp ../lib/std/special/docs/index.html zig-cache/docs/` (using bash ctrl+r) and f5 in firefox

1570556729
andrewrk
if you want to poke around the data dump with a repl, you can run require("./build/zig-cache/docs/data.js") in a nodejs repl, and look at `zigAnalysis`

1570556750
companion_cube
andrewrk: have you considered using gh-pages instead of docs/?

1570556750
andrewrk
or in the firefox dev console

1570556760
companion_cube
in my experience it doesn't clutter the git history as much

1570556776
andrewrk
companion_cube, I think you are misunderstanding what the latest commits in master branch are doing

1570556794
companion_cube
I'm reacting to

1570556796
companion_cube
:(

1570556798
FireFox317
Ah yeah, that seems handy. You also said something about opening the json output in firefox right?

1570556798
companion_cube
:)

1570556800
companion_cube
damnit

1570556846
andrewrk
companion_cube, that's just what the name of the generated directory is, which is now `docs/`. the github thing is just taken to be a hint about what a more "standard" directory name is

1570556854
andrewrk
if there's evidence that doc/ is more "standard" then we can revert.

1570556952
companion_cube
heh, ok

1570556965
companion_cube
(thought you were publishing on github pages, my bad)

1570557458
andrewrk
my guess is you saw how fast those files were changing and thought they were output files rather than source :)

1570557506
andrewrk
FireFox317, ok my working dir is clean now

1570557516
andrewrk
I think if you do struct fields it will not clobber

1570557774
FireFox317
Okay, what do you think of putting the struct fields into types->fields in the json (ofcourse only when the kind is a struct)

1570557846
andrewrk
FireFox317, yes, that will go here:

1570557913
FireFox317
Yes indeed!

1570558271
andrewrk
FireFox317, let me know if you have any questions. this code is brand new, so there are lots of loose ends

1570558289
andrewrk
it's also really easy & fun to hack on :)

1570558306
andrewrk
well. easy is subjective but I think it's fair to say relative to ir.cpp

1570558318
FireFox317
Jup, I will ask if I have any

1570558554
FireFox317
andrewrk: What would be a good file in the std to start with, instead of testing the whole std?

1570558602
andrewrk
what's the goal here? reduce time waiting for `zig test` to complete?

1570558611
andrewrk
smaller more manageable json?

1570558620
FireFox317
smaller json indeed

1570558673
andrewrk
even a minimal source file is going to drag a lot in. you can do that with

1570558674
FireFox317
Something like buffer maybe?

1570558690
andrewrk
then add your struct

1570558705
FireFox317
Ah jup of course, thanks

1570559794
FireFox317
andrewrk: I'm wondering if i should use 'src_field_count' or 'gen_field_count' to loop over all the fields in a struct. Or should I just loop over the 'fields_by_name' HashMap?

1570559843
andrewrk
src. gen has to do with llvm ir

1570559895
FireFox317
Okay

1570561566
FireFox317
andrewrk: just so i'm doing this correct, would you also store a field as a json object with a name and a type? ex: "fields" : [ {"name": "some_name", "type": <type_index> } ]

1570561583
andrewrk
FireFox317, yes looks right

1570561595
FireFox317
Cool!

1570561843
Cadey
i'm not sure if this is a grammar bug or not, but

1570561852
andrewrk
FireFox317, you'll also want "src": and then ref the ast node of the decl_node. that will give us access to the doc comments for the field

1570561877
andrewrk
Cadey, it should be s/that/of/

1570561896
andrewrk
the difference is rather academic to non-native english speakers

1570561915
andrewrk
feel free to fix it though

1570561918
Cadey
"show the source code of of ..." or "show the source code of"?

1570561925
FireFox317
andrewrk: Okay, I will add that. First I'm gonna try to render it in the html :)

1570561932
andrewrk
Cadey, pardon me, yes, s/that//

1570561942
Cadey
:+1: just making sure

1570561946
Cadey
making a patch

1570562008
andrewrk
FireFox317, I highly recommend using the integrated debugger in the browser, if you're not accustomed to that

1570562036
andrewrk
you can even put expressions on breakpoints

1570562037
Cadey
andrewrk:

1570562054
andrewrk
Cadey, thanks!

1570562055
FireFox317
Hahah okay, I will see if i have to use it

1570562063
Cadey
andrewrk: no problem! glad to help

1570562085
Cadey
also that got me one step closer to a free tshirt \o/

1570562098
andrewrk
lol where did you get that idea?

1570562106
andrewrk
or is this you trying to incept it

1570562110
Cadey
hacktoberfest

1570562881
Cadey
though i have actually had ideas for a proper zig tshirt

1570562909
Cadey
showing the zig logo on a {light|dark} background and the text 'for great justice' either below it or on the back

1570563083
doublex
you know what you doing

1570563431
fengb
Are you volunteering to organize shirts? üòá

1570563956
FireFox317
andrewrk: How would you display the fields in the DOM? Right now I added an extra section similar to Functions and called it Fields. Should I put the type on that page too, something like: "reallocFn: <link to type>"

1570564067
andrewrk
FireFox317, Fields section is good. I think it should be at the top, above Types and Functions

1570564100
FireFox317
Okay!

1570564103
andrewrk
look for callsites of typeIndexName() for how you can display types with proper coloring and hyperlinks

1570564113
andrewrk
I hooked this up with parameter types

1570564415
tgschultz
oh, we're using GetCommandLineA()?

1570564590
andrewrk
tgschultz, I believe that's the last holdout for A vs W APIs

1570564603
tgschultz
may as well fix that then if I'm doing this

1570564605
andrewrk
there's a really stupid thing with the API for this case which I haven't figured out how to solve

1570564632
andrewrk
apparently when you start a child process, the

1570564648
tgschultz
hmm

1570564698
andrewrk
I need to refresh my memory on this

1570564739
tgschultz
and why aren't we using CommandLineToArgs? Seems like it avoids manually parsing the commandline, but maybe there's some catch I'm not aware of?

1570564750
tgschultz
*CommandLineToArgv

1570564787
andrewrk
CommandLineToArgs is all userspace, no need for a dependency on Windows there

1570564811
andrewrk
ability to do it at comptime, cross compile, statically allocate, etc

1570564898
tgschultz
I think I'm missing something.

1570565025
tgschultz
The code to parse the commandline is already windows-only code in the windows ArgIterator. Why not just use CommandLineToArgv instead?

1570565281
andrewrk
I'm pretty sure we run those tests for all targets

1570565307
andrewrk
it also depends on Shell32.dll which is an unnecessary dependency

1570565324
andrewrk
currently the only dep on shell32 is fs.getAppDataDir

1570565415
andrewrk
our version works at comptime, can be inlined by the optimizer. I also don't trust CommandLineToArgvW. Does it panic on OOM? what else does it do? no need to depend on system things unless necessary

1570565759
FireFox317
I'm getting closer ^^

1570565831
andrewrk
me too with regards to error sets :)

1570566261
FireFox317
andrewrk: It looks like this currently:

1570566314
andrewrk
FireFox317, looks good!

1570566402
tgschultz
andrewrk: I'm really confused about how one can parse a commandline at compile time.

1570566418
tgschultz
however, the extra dll dependency is good enough for me

1570566439
tgschultz
we already can fail to parse commandline anyway because it could theoretically contain invalid unicode

1570566665
FireFox317
Should I add a PR for this? I cannot completely finish it now, since it is getting late here

1570566684
andrewrk
FireFox317, sure, I'd be happy to finish it up & merge it for you

1570567273
Sahnvour
andrewrk: using

1570567315
andrewrk
Sahnvour, I'd prefer to not support that, why do you need to do that?

1570567386
Sahnvour
can be helpful to temporary lower the optimization level in release and workaround the codegen bug ; but mostly I want to have zig build with /MD in Debug to try to link to a Release llvm

1570567412
mps
I made ziglang apk's and installed them on alpine linux, running 'zig build docgen.zig' I got 'Unable to find zig lib directory'

1570567455
mps
I have /usr/lib/zig/ with subdirs 'include/   libc/      libcxx/    libunwind/'

1570567489
andrewrk
mps, that's missing std/. where is the binary?

1570567497
mps
do I need to set some ENV variable or some cli parameters to tell zig where to search libs

1570567514
mps
/usr/bin/zig

1570567540
andrewrk
zig looks for ../lib/zig/ relative to its own executable

1570567543
andrewrk
so that should be ok

1570567643
mps
that is /usr/lib/zig

1570567676
andrewrk
maybe you can do an strace looking for open() calls to see where it is looking

1570567797
mps
ah, I don't have /usr/lib/zig/std/

1570567814
mps
so, my build is of pkg is broken

1570567849
mps
s/is of/of/

1570567963
FireFox317
andrewrk: Would you sort the fields by name?

1570568038
andrewrk
hmm good question. the fields are observable by comptime reflection, which is an argument against. there is no guaranteed in-memory layout, which is an argument for

1570568072
andrewrk
it's uncommon to have a large number of fields, which is an argument against

1570568079
andrewrk
I'd say no

1570568145
FireFox317
üëç

1570568402
FireFox317
andrewrk:

1570568421
FireFox317
It's not really a lot of code, but it was a nice to contribute a bit :)

1570568445
mps
andrewrk: here is new build log

1570568558
mps
I have seen that the Arch linux maintainer set it in PKGBUILD to build it in two pass, but don't understand why

1570568560
andrewrk
mps, you're trying to copy files to root-owned directories without root

1570568599
mps
I'm using standard alpine 'abuild'

1570568621
mps
I think it uses fakeroot

1570568642
mps
let me see, will try as root

1570568880
andrewrk
if your build process insists on separating `make` and `make install` then you can set -DZIG_SKIP_INSTALL_LIB_FILES=ON during make, then `cmake -DZIG_SKIP_INSTALL_LIB_FILES=OFF` before your install step

1570568911
andrewrk
that should not be necessary though. I recommend to leave the option as the default (off) and do the `make install` in 1 step.

1570568963
andrewrk
FireFox317, nice work, are you afk now or sticking around for fixups?

1570568986
mps
I think 'abuild' set something which causes that issue

1570569007
mps
will try manually as it is written on zig site

1570569088
andrewrk
this would Just Work if cmake let us add a custom command to the install target

1570569093
andrewrk
I'm not happy about that

1570569129
mps
'su ; make' worked

1570569143
mps
not good, but better

1570569154
FireFox317
andrewrk: I'm here for some fixups :)

1570569172
andrewrk
mps, it's fine. just leave that option as the default and skip the unnecessary `make` step

1570569190
andrewrk
go straight to make install, do not pass go, do not collect 200 USD

1570569247
mps
eh, it will not pass alpine builders then

1570569366
andrewrk
I believe it will if you set `make` to be simply: true

1570569371
andrewrk
(no-op)

1570569467
mps
hm, makes sense, good point

1570569855
mps
'zig build-exe docgen.zig' works

1570569885
mps
time to 'hello world!' in zig

1570570035
FireFox317
andrewrk: I pushed the changes!

1570570150
andrewrk
FireFox317, nice work, merged!

1570570272
FireFox317
Now that I'm into this, it is actually really fun coding

1570570402
andrewrk
just got this working:

1570570464
FireFox317
Damn, so cool!

1570570608
donpdonp
wow. docs for the win.

1570570702
andrewrk
one thing it doesn't do yet, which would be nice, is better infer the doc comments for errors when possible

1570570938
FireFox317
andrewrk: What would be the next thing I could work on tomorrow? :) I like this, but its quite late now, so I will continue tomorrow

1570570951
FireFox317
Enums?

1570571144
andrewrk
FireFox317, I'll update #21 in a bit, so that when you look at it tomorrow there will be some ideas for you to pick

1570571177
FireFox317
Great! Goodnight y'all!

1570571274
andrewrk
good night

1570571279
mps
using 'tab' for indent code not allowed?

1570571321
andrewrk
if you run zig fmt on save or before building it will fix it for you

1570571370
mps
understand, but tabs can't be used?

1570571397
mps
some people prefer tabs for indentation

1570571403
andrewrk


1570571496
mps
ah, I see. although I agree and mostly use spaces for my code

1570571870
earnestly
Do you know how much larger the Linux kernel code would be if the tabs were replaced with correspondingly sized sequences of spaces?

1570572017
companion_cube
do you know how much shorter the linux kernel code would be if it used Zig? :)

1570572193
earnestly
I shouldn't be surprised a language specific channel would have users that find the cult-of-language persuasive.  I don't know the answer to either question, I wondered if it had been considered

1570572205
andrewrk
tabs vs spaces is off topic here

1570572214
andrewrk
take it somewhere else

1570572231
earnestly
I'm not asking about tabs vs. spaces

1570572301
waleee-cl
You phrased your question about the linux kernel a bit like it was

1570572328
earnestly
Ah, sorry about that then

1570572340
andrewrk
discussing whether something was a conversation about tabs v spaces is even more off topic, just drop it plz

1570572360
earnestly


1570572387
andrewrk
there are 126 people in here; it's important to keep the signal-to-noise ratio high.

1570574329
mq32
andrewrk, i've just seen your tweet about inferred error set documentation... this is gonna be great!

1570574797
andrewrk
The oldest open Zig issue has gone from #21 to #25

1570574816
fengb
20% improvement!

1570575172
mq32
nice!

1570575188
mq32
i think #75 will be a long term "blocker" :D

1570576569
THFKA4


1570576590
THFKA4


1570576615
THFKA4
so file.zig will always fail to build on arm32. what is the right thing to do here, get timespec def from glibc headers?

1570576766
andrewrk
the fs.File API is trying to abstract across multiple operating systems and architectures; this API should accept the i64 type and do appropriate behavior based on the target. perhaps it will make an assertion that we need to document, or introduce a new possible error code

1570576939
THFKA4
so if timespec.tv_sec is only 32 bits on the target, updateTimes should downcast it?

1570577529
andrewrk
THFKA4, I think that's a reasonable solution in this case

1570577603
andrewrk
and that assertion should be documented in the doc comments: the maximum number of seconds is pow(2, 34) or whatever it is (the division gives us more bits)

