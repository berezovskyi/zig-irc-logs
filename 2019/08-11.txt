1565485685
daurnimator
o/

1565486559
fengb
\o

1565486819
daurnimator
I might attack the event loopy stuff today

1565486833
daurnimator
Now that coroutines are far enough along for me to have a picture

1565486867
fengb
You stream too?

1565486879
fengb
Maybe I should get back to streaming

1565487018
fengb
Post a link. I wanna watch :)

1565487019
daurnimator
fengb: only like once a month or so

1565487341
fengb
main.ZeeAlloc((struct main.Config constant)).realloc

1565487353
fengb
Is there a way to make that say `ZeeAlloc(defaults)`?

1565487597
daurnimator
fengb: you can always override the format function for your struct

1565487923
fengb
That doesn't seem to work for the debug info

1565488171
scientes
I'm hoping there isn't too much merge pain

1565488177
scientes
my patch set is already huge

1565490885
daurnimator
fengb: about to stream now. just grabbing a coffee

1565491851
daurnimator
(

1565500453
daurnimator
I love hitting kernel bugs mid stream :P

1565510089
daurnimator
gonz_: thanks for interacting :)

1565510119
gonz_
Thanks for streaming :)

1565510129
daurnimator
pushed the updated code to

1565510159
gonz_
Always nice to get a bit of narrative to things

1565510179
gonz_
Our timezones line up as well so you streaming is pretty ace for me :D

1565515411
daurnimator
in the spirit of

1565515432
daurnimator
ziglet? ziguanadon?

1565515450
daurnimator
Ziggy the missing Zigsaw piece

1565515489
daurnimator
You really have to de-zig-nate a good mascot

1565515512
sarna
> rat dressed as a spacepilot

1565515516
sarna
where did that come from?

1565515626
daurnimator
"you're just being zignorant"

1565515683
daurnimator
alzigator

1565515774
daurnimator
This is a lot of zigmarole; time for a zigarette break

1565515792
daurnimator
ziguratively...

1565515806
DutchGh0st
Thats not zuggy

1565515883
daurnimator
sorry it was a zignominius end my pun chain

1565515887
daurnimator
*of

1565515896
DutchGh0st
Will we reach Zigularity?

1565515913
daurnimator
You will need to investzigate

1565515978
daurnimator
I'm sure the result will be zignificant

1565516037
DutchGh0st
We'll have to ziglify the problem

1565516070
daurnimator
The root of the problem will need to be dezignated.

1565516096
DutchGh0st
Under the nice sound of the 'summer of zigxty nine'

1565516163
daurnimator
I feel inzignant about that.

1565516324
DutchGh0st
Its claszig

1565516347
DutchGh0st
its good muzig

1565516424
daurnimator
I'm not going to zignify those with an answer.

1565516472
DutchGh0st
can we get back to the bazigs?

1565516526
daurnimator
That would be zignoble

1565517015
sarna
hi, how do I specify an int is /not/ comptime? I declared an index outside of a loop and I get "error: variable of type 'comptime_int' must be const or comptime"

1565517120
sarna
: usize did the trick, whew

1565517366
nrdmn
sarna: or any integer type that is not comptime_int

1565517397
sarna
nrdmn: yeah, I didn't expect literals to be comptime by default

1565517407
DutchGh0st
so whats the type of `comptime var x: usize = 0` ?

1565517432
DutchGh0st
still comptime_int ?

1565517580
daurnimator
sarna: `u32(0)`

1565517615
sarna
think you meant to ping DutchGh0st :)

1565517642
daurnimator
sarna: no. the way to get from comptime_int to anything else is by e.g. `u32(your_comptime_int_here)`

1565517666
sarna
ohhh

1565517680
sarna
thanks :)

1565517705
sarna
DutchGh0st: I tried to print it, but compiler linked me to github issues a couple of times and I gave up

1565517736
nrdmn
huh. Is there any difference between T(U) and @intCast(T, U) ?

1565517738
daurnimator
DutchGh0st: its a usize known at comptime .

1565517769
daurnimator
nrdmn: yes. `T(u)` will throw an error at comptime if u can't fit in T. `@intCast` will throw an error at runtime.

1565517809
nrdmn
ahh okay

1565517818
daurnimator
(and @truncate will throw an error at neither, and mask off the bits)

1565518058
DutchGh0st
heh, I implemented transmute

1565518089
DutchGh0st
it just doesnt work at compiletime, thats sad

1565518135
DutchGh0st
but I use a packed enum, why does it complain that one field is set but I access the other?

1565518149
daurnimator
?

1565518151
DutchGh0st
the docs say a packed union doesnt have that check

1565518178
DutchGh0st


1565518226
daurnimator
DutchGh0st: are you looking for bitcast?

1565518244
DutchGh0st
transmute works for all types

1565518247
DutchGh0st
bitcast doesnt

1565518381
DutchGh0st
aka, `Transmute(void, u32, {})` is okey

1565518639
daurnimator
DutchGh0st: that would just be invoking undefined behaviour...

1565518670
DutchGh0st
why? you crate the union, which has the size of the largest thing it holds, in this case a size of 4

1565518698
daurnimator
DutchGh0st: when you set a u32 in a u64 union, the other 32bits have undefined contents

1565518700
DutchGh0st
you create it with void, and then access the int. Im not saying you can rely on the value of the int, but its probably always 0

1565518709
daurnimator
DutchGh0st: no. the value is undefined

1565518729
daurnimator
and (in release-fast mode) once that value is undefined, the nasal demons are released

1565518758
daurnimator
on that point. we should rename --release-fast to --release-nasal-demons

1565518759
DutchGh0st
well then you just do like 'var x = Transmute(u32, u64, 10); x = 0`

1565518772
daurnimator
DutchGh0st: huh?

1565518797
DutchGh0st
you said `x` has undefined bits, then I say you just overwrite em

1565518812
daurnimator
it doesn't work like that

1565518829
DutchGh0st
then how does it work?

1565518882
daurnimator
DutchGh0st: e.g. if I have a `foo = struct { x: u32, y: u32}{.x = 42, .y = 100}` and I send `Transmute(u32, u64, foo.y)` then you could end up with e.g. whatever `42 << 32 | y` is

1565518975
daurnimator
but really it could be anything. e.g. the compiler could be using the top bits of a 64bit register holding your 32bit value to hold onto some temporary

1565519104
DutchGh0st
well then just overwrite it

1565519225
daurnimator
overwrite what?

1565519754
SimonNa
Hi, I'm on Arch 64-bit, trying to build Zig myself from its C++ source. (Packages zig and zig-git build and run fine, but I want to build myself.)

1565519783
daurnimator
SimonNa: okay... did you run into an issue?

1565519786
SimonNa
CMake didn't find some LLVM files, I added symlinks to get CMake to comply.

1565519792
daurnimator
SimonNa: you shouldn't need to

1565519796
SimonNa
Ah

1565519814
daurnimator
SimonNa: `mkdir -p build; cd build; cmake ..; make install` should work

1565519841
SimonNa
Hmm. Even after compilation, Zig (stage 1 compiler) didn't link, with lots of llvm undefined refs.

1565519852
daurnimator
SimonNa: can you paste your terminal session?

1565519854
SimonNa
Very good, I'll try that

1565519871
SimonNa
Okay, I'll paste the linker output before trying your idea

1565519961
SimonNa
daurnimator:

1565519983
daurnimator
SimonNa: please also include how you got to that point

1565519984
SimonNa
(is output of ninja)

1565519995
SimonNa
yep, let me try to repro the entire build

1565520035
SimonNa
(As said, I created symlinks last week, I can fish those if you want too)

1565520108
daurnimator
you shouldn't need/have them at all

1565520118
daurnimator
I would remove them and start afresh :)

1565520152
SimonNa
Right. Anyway, command line to get to my output: mkdir simon; cd simon; cmake .. -G Ninja; ninja

1565520179
SimonNa
I will now delete the symlinks, which will presumably produce CMake errors, hold on.

1565520239
daurnimator
SimonNa: you are building current master right?

1565520271
SimonNa
I'm building the git repo master from last week.

1565520621
SimonNa
daurnimator: I deleted my symlinks, pulled today's master, deleted all build artifacts, mkdir simon, cd simon, cmake .. -G Ninja > daur-output-2.txt 2> daur-stderr-3.txt

1565520633
SimonNa
daurnimator:

1565520732
daurnimator
SimonNa: do you have llvm installed?

1565520739
daurnimator
pacman -S llvm

1565520773
SimonNa
llvm-8.0.1-1 is up to date

1565520828
daurnimator
SimonNa: to narrow things down, can you try without ninja?

1565520847
SimonNa
I'll try vanilla 'cmake ..'

1565520867
SimonNa
Yes, both CMake warnings re-happen

1565520951
daurnimator
SimonNa: thats... weird. can you `ls ../cmake`?

1565520964
daurnimator
(that is, the cmake directory inside of your zig clone)

1565520983
SimonNa
No such directory

1565520993
SimonNa
Wow

1565520993
daurnimator
`git status`?

1565520999
SimonNa
right, git status shows missing files

1565521007
SimonNa
hold on, I'll get a clean checkout

1565521060
SimonNa
Yes, that seems to have been it >_<

1565521079
SimonNa
Apologies for not trying from 100 % fresh clone

1565521623
SimonNa
daurnimator: I built Zig successfully; both its zig and zig0 build my examples and they run. Thanks, quality debugging, and apologies for the awkward setup.

1565521759
daurnimator
SimonNa: now go tackle an open issue ;)

1565521770
SimonNa
Yep, that's the plan :)

1565523808
DutchGh0st100
AHH DutchGh0st go away :3

1565527704
SimonNa
If I write "fn blub(arg: someUndefType1) someUndefType2 { return arg; }" but never call blub, this passes compilation (zig build, producing an executable) without errors. Only if I call blub, Zig complains about the missing type someUndefType1. Is it desired that it builds despite missing types?

1565527909
DutchGh0st
yes and no in my opinion

1565527929
DutchGh0st
it's cool when you write a prototype and just want see if other things are still compiling

1565527959
DutchGh0st
its not cool when you write a bunch of stuff, and now you gotta test it

1565527995
SimonNa
Hmm

1565528019
SimonNa
Yeah, I tend to write features bottom-up and would really like the typechecking

1565528114
SimonNa
I'll see what tricks there are around this. Maybe unittest everything immediately.

1565528229
daurnimator
SimonNa: zig has lazy compilation: a method isn't compiled unless it is referenced.

1565528255
daurnimator
this allows us to write functions that e.g. only work on linux; without breaking the windows build

1565528287
SimonNa
Hmm, even in debug mode, and it's a feature then.

1565528379
DutchGh0st
mhh

1565528381
DutchGh0st
I wonder

1565528398
DutchGh0st
how do I as a called function know whether Im called at compile time or not?

1565528435
daurnimator
DutchGh0st: you don't....

1565528445
daurnimator
DutchGh0st: and infact you might be both

1565528459
DutchGh0st
Well it'd be cool if you could

1565528501
daurnimator
DutchGh0st: not really. a whole ethos is that all functions work at either comptime or runtime. if we allowed you to disambiguate, suddenly we're likely to see you prevent something working at either comptime or runtime

1565528516
daurnimator
DutchGh0st: the only thing you

1565528706
DutchGh0st


1565528727
DutchGh0st
shouldn't that be noted there as well?

1565530229
DutchGh0st
also

1565530269
DutchGh0st
`testing.expectEqual(@typeOf(i32), @typeOf(void))` returns true

1565530308
DutchGh0st
or does say `type == type` >

1565533127
Tetralux
SimonNa: I would advise against unittest as much as is reasonable xD

1565533222
SimonNa
Tetralux: heh, why? A language-independent aversion against unittest?

1565537302
Tetralux_
SimonNa: Something like that yeah. Behavioral tests seem much less of a waste of time to me.

1565537351
Tetralux_
Like,

1565537365
Tetralux_
For CI - stuff like that.

1565537370
SimonNa
Hmm.

1565537370
Tetralux_
But unittests.... Ugh.

1565537385
Tetralux_
You spend as much, if not more time writing those tests.

1565537392
Tetralux_
And they change if you rework the API.

1565537401
Tetralux_
Which you are going to doing, unless you're a long way along.

1565537415
Tetralux_
And even then, only if you're using the tests for CI is that a good idea IMO.

1565537427
Tetralux_
for CI / regression tests.

1565537438
DutchGh0st11
you dont like tdd?

1565537458
Tetralux_
OH MY GOD DON'T EVER MENTION THOSE WORDS IN MY PRESCENCE EVER AGAIN

1565537462
Tetralux_


1565537477
Tetralux_
My reaction is so strongly against that that I misspelled a word.

1565537509
Tetralux_
Maybe that has some use for automotive stuff; software that

1565537514
SimonNa
I found that the most helpful tests are those that repro a bug, so you can then keep them as regression test afterwards.

1565537515
Tetralux_
Like... NEEDS.

1565537517
Tetralux_
BUT

1565537517
DutchGh0st
yeah but its all amazing because then you think first before you write, right?

1565537520
Tetralux_
Even then

1565537521
SimonNa
Unittests, hmm

1565537536
Tetralux_
TDD tests prob won't catch everything anyway, so.

1565537542
DutchGh0st
and you get twice the code you have to maintain because now you're also including all the tests

1565537542
Tetralux_
Not

1565537556
mq32
Tetralux_, i can relate to you :)

1565537557
Tetralux_
SimonNa: Yeah - that's a reasonable use of it.

1565537559
DutchGh0st
and you're only half as fast because well you gotta write tests

1565537572
Tetralux_
SimonNa: I'd call those regression tests though ;)

1565537583
Tetralux_
Or integration  tests.

1565537585
Tetralux_
That works too.

1565537588
SimonNa
yeah, that's what they are :)

1565537621
Tetralux_
DutchGh0st: Precisely.

1565537635
SimonNa
TDD, if it inspires one to write code that can be easily tested, it's done its job even if you don't write the myopic tests that TDD would really call for

1565537669
andrewrk
imagine if zig didn't have tests

1565537684
SimonNa
case at hand today is really to force Zig to check my function that isn't called yet

1565537693
Tetralux_
I think I'd rather have a program that just exercised the code paths, and checked all the errors instead of writing a test for the API.

1565537721
Tetralux_
Though, if I designed a user-facing interface, I'd want to think much more carefully about its design.

1565537734
DutchGh0st
btw, `const testing: type = if (@import("builtin").is_test) @import("std").testing else void;`. Will that be `void` if not compiled with `zig test src/file.zig` ?

1565537749
mikdusan
i don't know what "kind" of tests they would be... but Zig benefits from and needs tests that cover code. lazy nature of zig means swaths of code can get bugged without notice

1565537785
Tetralux_
Oh we should absolutely have `zig check` and `zig build-exe/run file.zig --check-all

1565537799
Tetralux_
I've experienced that too.

1565537839
andrewrk
--check-all is not coming back

1565537893
DutchGh0st
why not? it breaks stdlib massively?

1565537898
andrewrk


1565537916
andrewrk
it doesn't even solve the problem. how does --check-all get your ArrayList code to be checked?

1565537926
andrewrk
or any function with a comptime parameter

1565538055
DutchGh0st
trough a generator that scans the programm for all types used in the ArrayList, and then it would just check all those

1565538209
andrewrk
you're on the path to coming up with #3028 yourself

1565538598
DutchGh0st
I donnow, maybe std.testing could be improved to help you cover most common types

1565538624
DutchGh0st
so that at least you know those work, or dont

1565540153
voldyman
andrewrk: i was watching the async-await stream and had this question. how do i know from a return value that the caller needs to free it?

1565540231
andrewrk
voldyman, you don't. you have to read the documentation of the function you call

1565540273
voldyman
ah, coming from C++ i thought there might be something like unique_ptr which means you own it and raw pointer that you don't own

1565540327
voldyman
i don't know of a good solution, C++ or pony like type system or rust. is that a problem that zig will try to solve?

1565540351
andrewrk
voldyman, this is the consequence of "manual memory management"

1565540458
voldyman
andrewrk: for sure, i was thinking that if there was a way to attach a 'defer' to a scope of a variable then we'll have deterministic memory free's

1565540459
andrewrk
there are some conventions to make it manageable. For example, typically a function which has "init", "create", or "alloc" in the name needs to be paired with a function which has "deinit", "destroy", or "free"

1565540472
voldyman
and errdefer & defer could be merged

1565540520
voldyman
defer(my_mem) { log("freeing object"); allocator.free(my_mem) }

1565540599
gonz_
The allocating function would be doing this?

1565540610
voldyman
"could" do this

1565540640
gonz_
That "could" is a bit of a problem itself in my book

1565540649
gonz_
Some people would, some people wouldn't

1565540677
gonz_
Some people use some part of the language, some people use more, etc.

1565540680
voldyman
agreed, hence my first question. is there a way to differentiate between owned & unowned memory

1565540713
voldyman
calling free twice won't cause a segfault right?

1565540734
voldyman
if you want to be defensive, then attach a free'er to every object received from 3p libs

1565540748
companion_cube
double free is generally a segfault?

1565540774
voldyman
not in zig IIRC (or c++ for that matter)

1565540859
mq32
in c++ double free is UB

1565540867
mq32
and i assume that is for

1565540882
voldyman
i wanted to hack together an prototype but am not familiar with llvm and the zig codebase

1565540968
gonz_
I think this kind of thing necessitates a proposal regardless

1565541004
mikdusan
+1 gonz_

1565541020
gonz_
Personally I think it's super unintuitive if I get something from a function and it's decided that it should be freed magically.

1565541059
gonz_
Whereas without this I can work under the assumption that if something takes an allocator and returns something allocated for me it's my responsibility and my choice when to free it.

1565541079
companion_cube
esp. if there is no free() in that allocator

1565541086
voldyman
i think it simplifies the mental model, you don't have to ask "is this on the stack? or on the heap?" "who owns this?"

1565541105
voldyman
the object you receive will be freed when it goes out of scope

1565541130
voldyman
unless ... (received from new/alloc function, has a decorated type, etc.)

1565541153
gonz_
Does it actually simplify anything, though?

1565541178
gonz_
Isn't there just more behavior to take into account?

1565541217
mikdusan
voldyman: to be honest, since Zig is a manual memory management language, it would have to be inverted. default is manual, decoration would indicate some auto end-of-scope hooking. which btw, is technically what defer/errdefer already is. just different sugar.

1565541263
gonz_
`defer` and `errdefer` are obvious from which scope they're in, whereas this would affect other scopes

1565541298
voldyman
mikdusan:  true, my idea is attach a function/block to the end of life of the variable. how the rest of the language evolves around it is left open

1565541320
gonz_
This seems a step towards something like RAII to me

1565541326
mq32
voldyman: defer already does this

1565541326
fengb
Like a destructor?

1565541328
voldyman
yes, that is my intention

1565541338
gonz_
And I think that's not something that's proven to simplify anything

1565541347
voldyman
mq32: but for the current scope, not the scope of the variable

1565541360
voldyman
(unless i am missing something)

1565541372
mq32
same difference if you do defer directly after variable init ;)

1565541377
mq32
var x = …; defer x.free();

1565541425
mq32
point is: as soon as you want the same behaviour for non-local variables (so struct fields) you have full featured RAII with copy and move semantics

1565541431
voldyman
if the variable isn't transferred to a difference scope, if it is then the current defer isn't useful

1565541456
voldyman
mq32: aren't the current semantics move only?

1565541457
mq32
if it is transferred to another scope, that scope has the job to delete the variable

1565541466
gonz_
Attaching defers to variable lifetimes is very non-obvious and magic

1565541471
mq32
voldyman: zig has neither move- nor copy-semantics

1565541490
mikdusan
voldyman: one thing to

1565541494
mq32
also: what is "variable lifetime"?

1565541505
fengb
Zig doesn’t have ownership semantics. There’d have to be a radical shift in the language

1565541508
mq32
lifetime of the variable, the content or the content pointed to by a pointer variable?

1565541556
voldyman
hmm, i allocate an object, return is from the current function means i am transferring the point to the caller right?

1565541563
gonz_
mq32: That was my phrasing, not voldyman's.

1565541568
gonz_
(I think?)

1565541587
fengb
But zig has no concept of a resource

1565541604
voldyman
i think defer right now would be as magical as defer(var)

1565541607
fengb
So it’s just a variable / data copy

1565541621
gonz_
voldyman: How so? It defers to the end of the exact scope you put it in.

1565541643
voldyman
defer(var) is run when var is no longer in any scope

1565541645
gonz_
It doesn't touch other scopes at all. It's very clear what's going to happen if you defer something.

1565541712
andrewrk
if you put a defer directly after a variable declaration, that defer runs right before the end of the variable's lifetime

1565541770
andrewrk
a new syntax for a "variable scoped defer" would be entirely redundant

1565541786
voldyman
yes, what happens when we "return" a variable? is the one received by the caller a new entity pointing to the same memory?

1565541821
andrewrk
it copies the return operand to the return result location

1565541841
andrewrk
related:

1565542106
voldyman
andrewrk: if copies will be elided then a variable being returned and used by callers and then returned are all the same, right?

1565544005
Tetralux
Q: What does the "(struct) does not support field access" mean?

1565545416
DutchGh0st
I was wondering,

1565545466
DutchGh0st
is that line true? is it generally better to call a function that takes `Self` rather than `*const Self`, and both return a field of the thing by value back the caller

1565545515
Tetralux
I mean,  you're returning a copy either way..

1565545522
Tetralux
Hmmm.

1565545530
Tetralux
I'm not sure which would be better.

1565545598
Tetralux
Is it possible for "does not support field access to tell you why it doesn't" ?

1565545618
Tetralux
Only I really have no idea why I can't access a field of a returned struct...

1565545628
DutchGh0st
hehe

1565545633
DutchGh0st
pub vs private?

1565545662
DutchGh0st
or, did you assign the struct to a const variable, and now try to write to it? something like that?

1565545684
Tetralux
Ah! Figured it out...

1565545693
DutchGh0st
what was it?>

1565545698
Tetralux
I did `var x = f();` instead of `var x = try f();`

1565545709
Tetralux
And the error was so wordy that I didn't notice.

1565545710
DutchGh0st
ahhhaaa

1565545800
Tetralux
That's one of those errors that I wish was clearer...

1565545825
Tetralux
error: type '@typeof(X.Y.A.B.C).ReturnType.ErrorSet!ReturnValue' does not support field access"

1565545889
DutchGh0st
can have .map(some_func_if_the_result_was_ok).and_then(some_func_converting_an_ok_result_to_another_result)

1565545897
Tetralux
Ugh.

1565545905
Tetralux
Why can't it just be "errorset!ResultType does not support field access."

1565545916
Tetralux
DID YOU MEAN TO USE `try` HERE????

1565545958
Tetralux
note: inferred error set is here: (location of function signature you are calling)

1565546136
Tetralux
What I want generated docs to do is allow me to very quickly become familiar with a codebase... x'D

1565546142
Tetralux
RandomThought.

1565546159
Tetralux
If the zig codebase had that, I'd consider making those errors myself.

1565546165
Tetralux
Maybe I even still will.

1565546183
Tetralux
But regardless xD

1565547338
dftxbs3e
hi, what facility does Zig have to allow performant I/O?

1565547377
fengb
Zig is currently rewriting async function semantics

1565547407
fengb
So once that’s done, we’ll have non-blocking IO with optional event loop or thread pool support

1565547567
fengb


1565547807
dftxbs3e
fengb: alright

1565547840
fengb
Is that what you’re looking for?

1565547856
dftxbs3e
I'm wondering.. wouldnt there be a way to express I/O processing logic agnostic of the underlying facility, which would allow code to follow suit with improvements

1565547884
dftxbs3e
I feel like we're in an endless route with these I/O facilities

1565547895
dftxbs3e
Rust, Golang, now Zig, they each have their own code for this

1565547921
dftxbs3e
Golang coroutines are suboptimal, Rust's async is currently not ready and confusing to use, Zig is replicating this work

1565547992
DutchGh0st
how is rust's async confusing to use?

1565548037
DutchGh0st
it uses futures under the hood, but you need an executor and reactor to drive the future to completion, and those are implemented mostly in terms of mio, but you could make your own if you wanted to

1565548053
andrewrk
dftxbs3e, it sounds like you're describing exactly what zig is doing:

1565548059
andrewrk
have a look at that issue and then come back and discuss

1565548088
dftxbs3e
oh cool, I didnt meant to criticize Zig in any way, just emptying my ideas here

1565548090
andrewrk
it's not accurate to say that zig is replicating rust's work

1565548105
andrewrk
they're fundamentally different, as far as I understand

1565548142
andrewrk
dftxbs3e, no worries, sorry if my tone of voice sounded hostile, I didn't mean it that way

1565548200
andrewrk
for anyone who was watching that follow-up async/await stream from yesterday, I got that other example working

1565548221
DutchGh0st
Zig is more verbose and lets you take a deeper look at whats really happening, thats how I view it

1565548232
dftxbs3e
DutchGh0st: current state doesnt allow to write good code, just writeonly code

1565548239
andrewrk
what was happening is `cancel` codegen didn't set the error return trace pointer to null, so it was trying to populate it when you did `cancel`. that's fixed now

1565548265
DutchGh0st
'writeonly'?

1565548275
dftxbs3e
that you can't read and understand

1565548283
dftxbs3e
like 6 months later, or another person

1565548300
DutchGh0st
its fairly readable by now

1565548364
dftxbs3e
I write Rust since a year and that's not my experience, library support is very low too, when you're writing something more than just PoC projects, it's not pleasant

1565548392
dftxbs3e
I'm hopeful on latest async/await improvements but a long road is ahead

1565548443
andrewrk
there are 2 major things left to solve now in the async/await branch:

1565548446
dftxbs3e
that's why I was proposing what

1565548464
andrewrk
* "lazy values" so that async functions can defer destroying their own frames without zig thinking it is a circular dependency

1565548487
DutchGh0st
They thought Futures was it (back in 2016, 2017), then they figured combinators where hard, and they needed `async fn`. They started with await!(future), but that now has become future.await,

1565548493
andrewrk
* making async/await/cancel work on normal blocking functions

1565548529
DutchGh0st
and the rest of the story is just like any other language does it, async fn's can be awaited, and you need some evenloop to resolve everything

1565548628
DutchGh0st
andrewrk, what about `async streams` ?

1565548643
DutchGh0st
where you have a continuous stream of data, but asynchronously

1565548650
fengb
Like generators?

1565548671
DutchGh0st
like a server listening on a port that is waiting for devices to connect with it

1565548730
andrewrk
DutchGh0st, that works but it requires an async function pointer call, which has 2 limitations: your function pointer has to explicitly have the `async` type. and you have to provide a byte buffer that is big enough (runtime-checked) for the frame of whatever async function you call

1565548804
DutchGh0st
async function pointer call?

1565548834
andrewrk
look for @asyncCall in the rewrite-coroutines branch if you're curious

1565548896
dftxbs3e
DutchGh0st: combinators specially are hard to use with the borrow checker and Send + Sync requirements in any performant setup

1565548978
DutchGh0st
yeah well you dont have that anymore now dftxbs3e

1565549297
DutchGh0st
@asyncCall, where can I find that?

1565549800
DutchGh0st
also, am I getting this right,

1565549835
DutchGh0st
with async function you probably have 1 main function that handles the evenloop stuff, and from that function you 'spawn' other functions or something?

1565550529
dftxbs3e
am I dreaming or has C++ failed to catch up with convenient abstractions for performant I/O?

1565550642
DutchGh0st
they have this `futures` thing as well, right?

1565550653
dftxbs3e
yes but IIRC you can't control the executor

1565550654
DutchGh0st
but I dont know what it means to be a c++ future

1565551191
DutchGh0st
how does this @Vector thing works?

1565552825
tav
great to see a project still using IRC :)

1565553482
andrewrk
tav, thanks for the sponsorship :)

1565553516
tav
thanks for the fantastic work!

1565553711
tav
are there any community packages that I should check out to see what the established practices are in terms of writing Zig packages?

1565553810
andrewrk
tav, we're a few months away from having an MVP of a package manager available

1565553844
andrewrk
so there isn't a great example of what a package will look like yet. But there are plenty of community projects to look at to see how they organize their build scripts and source

1565553960
tav
is this the list of community projects?

1565554006
andrewrk
that's a small subset of them. there's also this wiki page:

1565554027
tav
doh! missed that — thanks

1565554034
andrewrk
I'll add a link to it in the readme

1565554116
tav
re: the package manager, any chance, it would be more like Go, and less like Rust? Rust's insistence on a single global namespace for crates, and minimal support for monorepos with multiple packages makes it rather painful to work with at scale

1565554183
tav
by contrast, in Go, it's just `go mod init host.com/path` and then you can have as many packages as you want just based on directory layout

1565554190
andrewrk
zig's package manager will be decentralized

1565554208
andrewrk
that's the main design constraint

1565554269
tav
sweet!

1565554324
andrewrk
currently I'm about 2/3 done with reworking async/await semantics, in preparation for adding networking to the std lib. And then package manager can take advantage of that networking

1565554354
andrewrk
the package manager can be written in zig itself; even though the compiler is not yet self-hosted, it's capable of being linked with zig code

1565554394
andrewrk
which is how, for example, `zig fmt` works

1565554472
tav
nice. re: async/await, what does `try await try async` mean btw?

1565554506
tav
sorry for asking questions you've no doubt answered already somewhere

1565554524
andrewrk
tav, it's a remnant of old semantics that are about to be deleted. see this issue:

1565554548
andrewrk
and this is the branch:

1565554595
andrewrk
with the new semantics, `try await try async foo()` can be rewritten as `try foo()`

1565554803
tav
oh wow

1565554851
tav
any current thoughts on cancellation too?

1565554906
andrewrk
I have that all hooked up and working in the branch with tests. Any questions on how it works?

1565555052
Tetralux
[sidenote] DutchGh0st, replied to your comment.

1565555101
Tetralux
Do async fns, always run to the next suspend point, or to completion, when they are cancelled?

1565555183
andrewrk
all functions, including async functions, run from beginning to the `return` statement. cancellation does not affect that.

1565555210
andrewrk
however functions can check if a cancel is requested, and choose to have different control flow, such as returning early

1565555468
tav
so, `cancel handle` marks a cancel as having been requested?

1565555509
tav
how does a function know that cancel has been requested?

1565555552
Tetralux
It either gets to the return statement and then discard it's result, running errdefers, or it checks if it's been cancelled part-way through and returns early.

1565555558
Tetralux
I believe that's right, yeah?

1565555670
andrewrk
tav, correct. it does 3 things: 1. marks the frame as being cancel-requested 2. stores its own frame pointer as wanting to be resumed 3. suspends

1565555712
andrewrk


1565560594
tav
if it could be brought down to just `cancelpoint return error.Cancelled;` for the common case, that would be amazing

1565560639
tav
I could well imagine some standard constructs being built to do async operations with deadlines/timeouts

1565563452
daurnimator
dftxbs3e: fwiw I'm working on performant I/O abstractions

1565563686
andrewrk
daurnimator, where did you end up landing last night?

1565563757
daurnimator
andrewrk: ran into a kernel bug that made it impossible to use urings any more without rebooting :P so switched gears and worked on external debug info.

1565563809
daurnimator
andrewrk: new commits were pushed to

1565566223
scientes
daurnimator, are you trying with the latest binutils because there was a breaking change recently

1565566235
daurnimator
scientes: ????

1565566262
scientes
daurnimator,

1565566309
daurnimator
scientes: why is that relevant? binutils isn't part of the situation at all

1565567650
andrewrk
I still have a list of things to do before merging but the async/await branch has all tests passing now

1565567776
daurnimator
yay

1565567826
tav
\o/

1565567841
tav
andrewrk: btw, what did you use to generate

1565567842
daurnimator
andrewrk: I'm not quite sure about the whole "return is a cancellation point" thing.

1565567857
daurnimator
tav: will be `zig translate-c`

1565567899
tav
ah

1565567916
andrewrk
daurnimator, objections to return as a cancellation point should come with a counter proposal of how to write this code:

1565567950
andrewrk
tav: `zig translate-c` and then manually updating some things

1565567985
tav
is there something that can parse and render documentation from .zig files by any chance? if not, is there some way to parse zig from within zig?

