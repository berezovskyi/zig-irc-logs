1562631963
daurnimator
dimenus: did you see my comment later in #1595 about #2524 ?

1562632633
rsdimenus
daurnimator: I did, thank you sir

1562632677
rsdimenus
I think I'm partial to #1595

1562632710
rsdimenus
**distinct types

1562632719
daurnimator
rsdimenus: what is your usecase?

1562632735
rsdimenus
c interop / bitflags

1562632747
rsdimenus
(vulkan in this case)

1562632845
rsdimenus
vulkan has a lot of enum values that identify min/max/default/range (of an enum) values

1562633255
daurnimator
rsdimenus: got an example I can look at?

1562633322
daurnimator
rsdimenus: usually you'd flags in zig with a struct of bitflags: `packed struct { a: u1 = some_default, b: u5, c: u2 = other_default }`

1562633422
rsdimenus
agreed, if the original code is Zig - but this is C

1562633430
rsdimenus
that would be a large undertaking to manually translate that each time

1562633461
rsdimenus
aurnimator:

1562633499
rsdimenus
*daurnimator, sorry

1562633525
rsdimenus
look at eg line 754

1562633679
daurnimator
rsdimenus: to me it looks like you really want an enum for each group there, e.g. 1000053*

1562633722
daurnimator
also who does that sort of thing in decimal.... sigh

1562636075
rsdimenus
daurnimator: that's what we have. but Zig doesn't allow an enum to have two fields with the same value

1562636085
rsdimenus
so we either need to allow extern enums to contain the same value

1562636091
rsdimenus
or come up with a new system to handle this

1562638415
marler8997
andrewrk: got on irc for a bit in case you wanted to chat about the PR

1562638435
marler8997
I'm on vacation on the Oregon coast so not as available as I would be normally

1562639466
marler8997
ok, back to the vacation for now

1562643414
lunamn
is there a reasoning why pointers don't implicitly cast to

1562644275
ntgg
I am getting 'error: values of type ?(enum literal) must be comptime known', but it's an enum literal, so the size should be known?

1562644292
ntgg
code here:

1562644465
fengb
Maybe try giving it a size? enum(u3)

1562644508
ntgg
same error

1562644847
fengb
Oh

1562644852
fengb
Bad error message

1562644871
fengb
Zig can't infer types into bodies

1562644877
fengb
You need `Key.Up` etc.

1562645544
ntgg
ah! is that a planned feature, or always gonna be that way?

1562645635
ntgg
also, is that error message the kind of think that I should open an issue for, or is that already known?

1562645779
fengb
Probably open an issue. I'm not sure what the parser thinks a hanging `.Up` would be

1562645795
daurnimator
ntgg: you're running into

1562645833
fengb
daurnimator: it's not just optionals, the switch won't allow regular inferred enums either

1562645962
daurnimator
if so then yeah please make a new bug report (without the confounding factor of the optional enum) unless you can find another relevant issue

1562646075
fengb
I think this one is missing implicit cast on return values. I had the same problem for if statements

1562646087
fengb
Or rather, it tries to cast to sibling branches instead of the return values

1562646434
ntgg
fengb: It is seemingly fine for if statements for me?

1562646449
fengb
Hmm I must be confused

1562646461
fengb
So probably a bug in switches

1562646856
ntgg
wait nvm, it doesn't work it if's either, I was just doing it wrong

1562648555
ntgg
is there a way to print a number in hex?

1562648596
daurnimator
{x}

1562648969
ntgg
thanks, what about padding 0's or something like that?

1562649395
daurnimator
ntgg: not sure. maybe it was {:4x} where 4 is the number of 0s?

1562649418
daurnimator
or is it {x:4}

1562649421
daurnimator
I never remember

1562649639
daurnimator
zig gets a small mention in

1562656115
scientes
how do i allocate on the stack, because the API expects a pointer an not a value?

1562656490
mmx870
Can't you just take the address?

1562656572
scientes
no its an llvm value

1562656578
scientes
anyways, i'm working on it

1562656744
mmx870
Oh

1562667501
ntgg
does the `pub` keyword do anything?

1562668616
fubd
andrewrk was there any movement on windows DLL linkage w/

1562669081
samtebbs
ntgg: It makes the symbol visible to files importing the file

1562669238
ntgg
samtebbs: what about in structs? I can access functions without the `pub` keyword fine from other files

1562669701
samtebbs
ntgg: Could you give a code example?

1562669976
ntgg
samtebbs:

1562671920
samtebbs
ntgg: You can access it because you're in the same file

1562671933
samtebbs
Try moving the test to another file and import the struct, then it won't be visible

1562671976
ntgg
samtebbs: I have it like that, that is just a comment to show you what it is

1562671996
samtebbs
Oh yeah sorry

1562678223
dimenus
is there a way to get zig fmt to stop removing extra newlines? (eg I really want code to be < 85 chars wide on a given line)

1562679451
ntgg
you can comment zig fmt: (on|off) to toggle zig fmt on or off

1562679453
ntgg


1562679483
Tetralux
ntgg: The 'pub' keyword causes declarations to be available in other files. (They are visible within the same file regardless of pub or not.)

1562679534
Tetralux
Oh - For some reason I didn't see someone already addressed that.

1562679539
Tetralux
Never-the-mind. xD

1562679556
Tetralux
dimenus: Don't use zig fmt ;P /s

1562679586
fengb
You can add some comments to prevent wrapping

1562679586
Tetralux
I don't think there's built-in options to do that.

1562679632
fengb
zig fmt has no options and should have no options

1562679903
gonz_
Depending on the construct you can just add a comma, etc., in a parameter list or the like to have it split it over several lines

1562679926
dimenus
i just disabled it :D

1562679932
gonz_
The plus side of that is that it's then consistent and not up to you to suddenly wrap only on the 5th argument, etc.

1562679941
gonz_
Because then suddenly it's "your style"

1562679949
gonz_
And everyone else hates your style

1562679968
gonz_
(as we should)

1562679981
gonz_
The only good style is everyones' style

1562679986
fengb
To paraphrase, zig fmt is nobody's favorite and thus everyone's favorite

1562679996
gonz_
Exactly

1562680004
Tetralux
Personally I think that you shouldn't wrap lines in the actual file, just in the editor.

1562680015
gonz_
Yuck

1562680037
fengb
So semicolon for ages? :P

1562680075
Tetralux
Just leave those lines as long as you need em. Maybe wrapping for things that make obvious sense, but not always.

1562680096
Tetralux
Anything longer than n chars can be auto-wrapped by the editor.

1562680119
gonz_
The way `zig fmt` does it is reasonable, though I would prefer if it just forced newlines on long enough lines personally

1562680143
gonz_
Either that or just force no newlines at all

1562680147
gonz_
Just pick one

1562680150
gonz_
Leave people 0 choice

1562680159
gonz_
Not even with notation in code

1562680183
Tetralux
I think pragmatism is the best approach.

1562680192
Tetralux
"What will people have least trouble with?"

1562680225
Tetralux
Since the editors can wrap the code and set up the tabs and stuff to whatever they like, I'd rather have the text itself be as dumb as bricks and have the editor be smart.

1562680265
Tetralux
zig fmt is one way to do that.. ish.

1562680275
Tetralux
But it's just another cog in the machine to work around.

1562680291
Tetralux
Which is why I don't tend to use that kind of tooling.

1562680310
gonz_
There is nothing pragmatic about leaving people choice here

1562680332
gonz_
The pragmatic thing would be cohesion

1562680343
Tetralux
I like programming. And people forcing decisions on me makes me not like what you're offering. xD

1562680349
gonz_
Choice doesn't promote cohesive and unified style

1562680357
gonz_
Well, don't call it something it's not

1562680369
gonz_
Don't invoke pragmatism

1562680385
gonz_
It's inherently a weasel word that can mean whatever you want it to mean

1562680405
gonz_
In this very instance it's actually the very opposite of what you're arguing for

1562680411
Tetralux
I made clear what I meant. If you don't feel like calling it pragmatism - that's totally okay.

1562680427
gonz_
"If you don't feel like calling it..." :D

1562680430
gonz_
Yeah, ok

1562680473
fengb
Be excellent to each other /andrewrk

1562680485
Tetralux
I'm not that bothered how you feel about what you wanna call it xD - I just think that leaving things as free as possible tends to make for a better experience if you want to work without friction.

1562680505
Tetralux
And it's totally okay to like the auto formatting tools.

1562680526
Tetralux
fengb: +1

1562680530
gonz_
Give me a shout when you find an editor that doesn't make long lines look like garbage

1562680558
gonz_
Also show me an auto formatter that provides choice that actually has done good for the community

1562680560
Tetralux
What would you consider a non-garbage looking way to display it?

1562680584
Tetralux
(.. And I'd rather not use one that customize it. Being able to is just as bad as having one IMO.)

1562680600
Tetralux
than customize it*

1562680634
gonz_
How is it bad to have an auto formatter? Every community that has unified around one is much better off for it, IMO

1562680645
gonz_
They don't have pointless conversations about style, etc.

1562680679
gonz_
You don't have people coming into new projects suddenly writing code that looks drastically different, etc.

1562680738
Tetralux
The point about suddenly writing code that's different is an non-issue. In projects without a formatter, you just use the style that's obvious from the rest of the code.

1562680779
Tetralux
But I get why you'd think a formatter is better than otherwise if you want to avoid the conflict of "I cannot accept this commit. Wrong style."

1562680869
gonz_
It's not even only for commits, to be honest. Even cross-projects it's better to have one style in an open source community.

1562680899
gonz_
The abundance of choice in language features in C++ is proof that choice isn't a strictly positive thing.

1562680984
gonz_
In a primarily closed source community where everyone builds their own private toolbox "personal style" might be preferrable

1562681042
gonz_
But it's a needless complication on top of trying to figure out whether or not the library you use has a bug to have it also be written in some odd style that the creator thought was nice (and that he's so proud of)

1562681153
gonz_
So if I could I'd force newlines when lines are of a certain length and build auto formatting into a publishing step for a package manager

1562681196
gonz_
Because consistency is more important than peoples' egos

1562681641
Tetralux
I think C++ is a bad example of how lots of features are good anyway.

1562681647
Tetralux
The features they chose are.... questionable.

1562681657
Tetralux
You want several, extremely powerful features.

1562681668
Tetralux
Not loads of weird cruft built on weird cruft.

1562681706
gonz_
Even if you look at the subsets that reasonable people use in f.e. game development C++'s amount of choice is a problem.

1562681728
gonz_
Those are features that most people have agreed are good but you still end up in a position where they all just choose different subsets.

1562681754
gonz_
Haskell has tons of great features but suffers from the same problem. The problem is choice, regardless of feature quality. Needless choice like formatting is even worse.

1562681761
Tetralux
I'm not sure that "people agreeing they're good" means much there unfortunately.

1562681777
Tetralux
There's so many things they could've done better.

1562681812
gonz_
And not providing as much choice would've been better than choosing good features is my point.

1562681813
Tetralux
At this point, the only things that's good about C is that you can build fast static code with it, on many archs.

1562681826
Tetralux
I half agree with you.

1562681836
Tetralux
I'd just say that they should have chosen better features to begin with.

1562681841
Tetralux
.. That are very powerfu.

1562681847
Tetralux
And then they wouldn't need as many anyway.

1562681848
gonz_
I agree

1562681857
Tetralux
Like

1562681874
Tetralux
By which I mean,  you can run your entire program at compile time if you want to.

1562681884
Tetralux
Like... your 200,000 line game.

1562681920
Tetralux
.. Not that you'd probably want to do

1562681922
Tetralux
xD

1562681945
Tetralux
That would allow you to... for instance... enforce the MISRA standard on parts of your codebase.

1562681962
Tetralux
Ensure that Entities that live in one location don't get used the wrong way...

1562681963
Tetralux
etc.

1562682066
Tetralux
..And write code like you're writing a normal program, but yet still run it at comptime.

1562682333
ntgg
is it possible to switch on two things at once?

1562682386
Tetralux
I don't think so.

1562682390
Tetralux
What's your usecase?

1562682515
ntgg
I want to rotate a matrix based on an two enums representing the in/out direction

1562682537
ntgg
I can just use if/else

1562682549
ntgg
but a switch would be cleaner

1562684888
emekankurumeh[m]
wish zig had pattern matching

1562684903
halosghost
k

1562685246
dimenus
is it safe to take the address of a function returning a struct?

1562685249
dimenus
or is that unintended?

1562686327
Tetralux
The address of a fn that returns a struct?

1562686333
Tetralux
That seems perfectly reasonable.

1562686347
Tetralux
I'm not sure I quite get your usecase xP

1562692025
very-mediocre
is there, or should there be, a convention for things that allocate heap memory vs things that don't? Also, "static" vs dynamic variations of things, e.g. I've got a ring buffer with comptime known capacity (if it's a power of 2, modulus is replaced at comptime with a bitmask)

1562692038
very-mediocre
I mean a naming convention

1562692069
very-mediocre
I find myself needing to write a dynamic capacity version of the ring buffer now, and I'm running out of names

1562692137
very-mediocre
er bad example maybe, i guess that just makes it a queue

1562692985
mikdusan
not sure about convention but i've seen "fixed" used in naming quite a lot to indicate static sizing

1562692993
FireFox317
Hmm, some recent commit broke the compilation of the zig compiler. I now get an error when running make install

1562693142
very-mediocre
mikdusan: thanks, I'll just go with that. gets messy fast, and imho ruins C code

1562693157
very-mediocre
probably not so bad in zig thanks to the other niceties

1562693244
mikdusan
FireFox317: most recent commit d23798a296ddab023009dab860b6cb9361a62abd breaks building zig for me macOS

1562693297
FireFox317
mikdusan: Yeah, i'm checking it too right now. It is indeed the last commit, now it builds fine

1562693315
FireFox317
andrewrk ^^

1562693316
Tetralux
Most recent commit breaks on my Linux machine too.

1562693324
mikdusan
seems to not be an issue on CI builds

1562693325
andrewrk
ok reverting now

1562693346
FireFox317
Maybe its a small fix

1562693362
mikdusan
ninja: error: '/opt/llvm-8.0.1/lib/-lLLVMSymbolize', needed by 'zig0', missing and no known rule to make it`

1562693379
andrewrk
ah

1562693382
FireFox317
Same for linux

1562693391
Tetralux
Yeah - By "most recent" - I mean the one that changes the Findllvm file.

1562693395
FireFox317
*make i mean

1562693409
andrewrk
damn github is down

1562693430
mikdusan
i blame microsoft

1562693446
andrewrk
can you comment your build errors on

1562693460
andrewrk
github is back up

1562693532
FireFox317
Does the CI build the compiler too?

1562693536
FireFox317
Nvm it does

1562693541
andrewrk
ok the problematic commit is reverted

1562693601
mikdusan
might be related to `Debug` build of zig

1562693702
mikdusan
switched to `-DCMAKE_BUILD_TYPE=Release` and am able to build

1562693929
Tetralux
I get "'xcore-max-threads' registered more than once" if I try to build release on linux...

1562693937
Tetralux
I don't think that's related to this commit though.

1562694168
very-mediocre
for whomever may find this interesting: a solution to the ringbuffer issue above is - whether the capacity will be static is known at comptime, so I can add a comptime flag that says it will be dynamic - in which case an ensureCapacity function will get codegen'd into the various functions

1562694244
very-mediocre
I love how comptime works. I'm not used to thinking this way.

1562694528
very-mediocre
the only thing that remains is hypothetically whether to call it, say, AllocatingRingBuf, to distinguish from one that's always fixed backed by stack memory

1562694615
very-mediocre
#ocd

1562694991
Tetralux
Another option is to have an init fn for it that you supply a slice to.

1562694996
Tetralux
(.. which could be stack memory.)

1562695004
Tetralux
That seems the simplest :)

1562695029
very-mediocre
true but that doesn't address whether to call ensureCapacity or not

1562695059
very-mediocre
oh, what you said works for the second scenario (naming convention)

1562695061
Tetralux
You can supply it an allocator for heap, or call .initFixed or w/e for stack.

1562695099
Tetralux
If slice, slice.len is the capacity, if allocator, ensureCapacity.

1562695119
very-mediocre
or just use the "comptime param determines whether it resizes dynamically" solution, and then make it false and accept a buffer here on the stack

1562695121
Tetralux
I've not looked at what ensureCapacity does, but I assume it just ensures that there's at least a certain amount of space xD

1562695160
Tetralux
I assume you'd be resizing dynamically if you tried to allocate something from the ring buffer that's bigger than the size of the bufer?

1562695186
Tetralux
If so, I think I'd make it either panic or return OutOfMemory.

1562695207
Tetralux
Maybe in debug panic, in release OOM.

1562695215
very-mediocre
it's basically a queue so you put() and take() stuff, but I also sometimes want a dynamic queue with good cache locality (read: not a linked list), hence this discussion

1562695232
very-mediocre
for the latter scenario, yes, it needs to grow

1562695271
Tetralux
If it's a queue, it should auto-expand if it needs to... Could try a BucketArray of some kind.

1562695277
Tetralux
(.. constant time append.)

1562695328
Tetralux
It's not too clear to me why you

1562695346
very-mediocre
because i'm attempting deflate and it uses a lot of fixed-size buffers with queue characteristics

1562695447
Tetralux
Maybe have .init take an optional allocator which it uses if the fixed-array is depleted.

1562695463
very-mediocre
the solution discussed above is fine, i'll stick with that

1562695872
DutchGhost
can we have `compile_error_if(condition: bool, msg: []const u8)` ? :3

1562695917
very-mediocre
maybe `comptime if(condition) { @compileLog(message) }`

1562695947
andrewrk
you don't even need the comptime

1562695949
very-mediocre
actually the comptime keyword is unnecessary, if the condition is comptime it should be implied

1562695952
very-mediocre
yep!

1562696192
DutchGhost
noo it would be `if(...) { @compileError(....) }`. However then you need to write the if's each time and the @compileError each time

1562696245
very-mediocre
make it a function and run it at comptime with the comptime keyword

1562696388
mikdusan
that works but does add a stack frame in diagnostic output

1562696399
very-mediocre
Could be wrong, I'm a bit burned out: define `fn compile_error_if(comptime condition: bool, msg: []const u8` then call it like `comptime compile_error_if(somethingDeterminedAtComptime, "Something bad happened at comptime!");`

1562696409
DutchGhost


1562696420
DutchGhost
I do it like that yeah

1562696518
DutchGhost
I wonder if I handle the *const T and *T Iterators in a good way?

1562698885
hryx
since files are just structs, is it possible to "instantiate a file"? I.e. `const r = @import("robot_type.zig"){.height = 20, .color = .Green};`

1562698911
andrewrk
yes

1562698940
hryx
that's pretty cool. would that be considered a good pattern? `@import("Allocator.zig")`

1562698954
hryx
it could set an interesting precedent

1562698985
andrewrk
I think we're slowly moving towards that being the pattern

1562699018
very-mediocre
It's basically a statically analyzed version of node.js `require`

1562699024
andrewrk
yes

1562699054
companion_cube
there are some posts on D that emphasize local imports (as opposed to toplevel ones), since their imports are also scoped

1562699146
hryx
it's also the same as require in lua

1562699304
ntgg
Is there a way to test for a compile error?

1562699420
DutchGhost
wait so how do you defined the `height` and `color` fields in the file? `const r = @import("robot_type.zig"){.height = 20, .color = .Green};`

1562699447
very-mediocre
you can write them like members, no var or const

1562699503
andrewrk


1562699509
DutchGhost
so you have a file called `example.zig`, and you literally write: "height: usize; color: Color;"?

1562699520
andrewrk
ntgg,

1562699553
andrewrk
DutchGhost, yes, in zig files are structs

1562699560
DutchGhost
man that's crazy

1562699566
DutchGhost
but cool!

1562699596
very-mediocre
any chance of making it C# or Javaish (I know, I know) where you're obligated to write a struct? Would be more explicit

1562699622
DutchGhost
so wait, does this enable kinda like a `workspace` thing?

1562699661
andrewrk
very-mediocre, probably not

1562699664
DutchGhost
where you can have multiple `workspaces` as being different instantiatiens of a file?

1562699696
DutchGhost
*instantiations

1562699712
andrewrk
that's just structs

1562699787
very-mediocre
Oh, I see. I thought it could be a top-level anonymous struct expression to make it clear, just like struct{ (your code contents here) }

1562699799
DutchGhost
Yeah, but then you could have a file declaring for example an allocator, and use that globally...and oh well, just hot swap it with another instance of it that puts in a different allocator

1562699803
companion_cube
it'd be in every file then

1562699819
DutchGhost
and suddenly your programm uses a different global allocator and its all good

1562699839
Tetralux


1562699906
DutchGhost
why do you people come up with such cool things ohmy hahaha

1562699975
very-mediocre
Lots and lots of precedent for neat programming language features in 2019. I don't envy andrewrk's position here.

1562700024
andrewrk
there's an infinite number of neat programming language features that zig won't ever have

1562700086
gonzus
I was just watching the latest twitch video. Great new stuff in zig, congrats!

1562700142
companion_cube
andrewrk: well it has dependent types and staged programming, that'd qualify for a lot of neat features :p

1562700193
DutchGhost
staged programming?

1562700218
gonzus
A humble request: would it be possible to avoid the music track? I personally find it very difficult to concentrate on what is being said.

1562700230
companion_cube
DutchGhost: 2 stages of evaluation (comptime+runtime)

1562700238
DutchGhost
ahhh yeahh

1562700243
gonzus
Also, the video was in fact muted at some points, probably due to copyright protection?

1562700247
andrewrk
gonzus, that's the first one I did music with, just an experiment. thanks for the feedback

1562700253
andrewrk
damn I was worried that would happen

1562700272
andrewrk
I really should upload somewhere other than google

1562700276
gonzus
The music was cool. I just want to concentrate on what you are saying... :-)

1562700307
andrewrk
these 3 features were pretty difficult to do together: result location semantics + inferred comptime + peer type resolution

1562700830
DutchGhost
Zig.... It's a small hello world, but a giant leap for programmers?

1562701102
DutchGhost
andrewrk, I do spot some Rust in you

1562701106
DutchGhost


1562714844
via
whats the best way to pass a []u8 to a c function as a string/pointer-to-bytes?

1562714896
Tetralux
First thing I'd think of is: .ptr, .len.

1562714918
Tetralux
(.. Both are fields of the slice.)

1562714935
Tetralux
I believe the length is a usize.

1562714944
via
thank you, working now

1562714948
Tetralux
o7

1562714949
via
was trying various sliceToBytes things

1562714965
Tetralux
Be warned, .ptr is the

1562715022
Tetralux
I'm fairly sure you can do `&s[i]` for a ptr at an offset.

1562715116
via
confirmed that also works

1562715148
via
.ptr seems nicer, cause then its just .ptr and .len (a write(2) style call)

1562715169
Tetralux
Indeed. :)

1562715283
fengb
.ptr returns a [*], which supports pointer math

1562715849
via
i'm just getting into writing my first actual zig in this project, haven't figured out any good practices yet

1562715880
via
const slice = std.fmt.bufPrint(buf[0..], "rpm: {}\n", c_tfi.config.decoder.rpm) catch "error\n"[0..];

1562715934
via
can my catch be cleaner?

1562715970
via
tackling my c string handling code first, since thats some of the crappier/error-prone code

1562716045
Tetralux
What error does bufPrint return?

1562716049
Tetralux
Is it one you care about?

1562716096
via
yeah, figure if there's not enough room in buf, useful to show something

1562716109
via
(slice gets write(2)en)

1562716114
Tetralux
Only thing is that "error" doesn't really tell you anything. :3

1562716124
via
yeah, just playing around, it'll get there

1562716153
Tetralux
Maybe: if(std.fmt.bufPrint(...)) |slice| { ... } else |err| { ... }

1562716156
via
super unfamiliar with the syntax at this point, so its gonna be that for a while

1562716160
Tetralux
Depends on your exactly usecase.

1562716178
Tetralux
( .. You can omit the else.)

1562716197
via
if i omit the else, buf will be left undefined (because i defined it that way)?

1562716215
Tetralux
I think you'd just ignore the error.

1562716259
via
yeah, i like that, then i can just put dedicated error handling output in the else

1562716267
Tetralux
Indeed.

1562716343
Tetralux
You prob already know this, but you could also do const slice = try std.fmt.bufPrint(...) too.

1562716350
Tetralux
Which would make the fn scope cleaner.

1562716357
via
actually does that work? says it expected an optional type, got an error![]8]

1562716410
Tetralux
I'm under the impression that you can.

1562716574
via
need to handle the else (for now this is a c function, its return type is void, not !something)

1562716582
via
which makes sense

1562716735
Tetralux
That's kinda odd. Maybe I'm being silly but here's an example of it working:

1562716736
Tetralux


1562716747
fengb
try {...} bubbles up the error, like Go's new try()

1562716796
via
yeah, and Tetralux in that case the return type is !void, so that works. as i move more stuff over i can move error handling up

