1554250689
scientes
how do i generate an undefined in ir.cpp?

1554250723
scientes
oh wait, 0 is still safe there

1554250742
scientes
because you have the type

1554298127
mikdusan
is there any .zig code in zig repository that calls c/cpp API from stage1 compiler code? looking for example of how to compile/link against .cpp for because I’d like to use zig’s test harness.

1554299747
scientes
andrewrk, is there some limitation of the bigint.cpp code I should know about, because my new @fshl/@fshr code is breaking on comptime ints u64 and larger

1554303473
mikdusan
ah never mind my earlier question about .cpp test harness. i worked around it.

1554310730
Sahnvour
have you seen this

1554310743
tgschultz
enum literals are a great convenience. Mysterious bools in function calls should become much more rare.

1554310791
andrewrk
Sahnvour, I haven't seen this before, reading now

1554310890
andrewrk
oh actually I have seen this

1554311025
Sahnvour
right

1554311047
Sahnvour
I can't remember if I already asked this, but is top-notch performance a goal of stage1 ? (I guess not)

1554311083
andrewrk
no it's not

1554311088
andrewrk
it is for stage2 though

1554311213
andrewrk
I wonder if we will see the rise of a new compiler backend project which is optimized for debugging and fast compilation speed

1554311246
scientes
so for is guaranteed to iterate forward?

1554311273
andrewrk
yes. I suppose that should go into the lang ref

1554311778
Sahnvour
that would be awesome ... I wonder how much work Jai's debug backend represents

1554311898
andrewrk
I'm sure jon's implementation is tightly coupled with the rest of the project, and that he has no interest in collaborating. he's not very friendly to the open source software movement

1554312051
Sahnvour
my point is, something tailored to a specific project arguably is less work than a general framework like LLVM and since he apparently did it, that may be a radical move paying off

1554312133
andrewrk
yeah. it makes sense for him since he's mostly only targeting x86_64 windows

1554312152
andrewrk
zig is a much more ambitious project

1554312170
Sahnvour
indeed

1554312251
andrewrk
it's so tempting to bypass llvm... we could do so much to speed up compilation

1554312275
andrewrk
but then all the sudden zig has to be an assembler too

1554312281
scientes
and an optimizer

1554312300
andrewrk
well, even if we used llvm only for optimization

1554312334
andrewrk
*only for release builds, I mean

1554312346
Sahnvour
a (optional) fast debug backend, even limited to x64, would still be hugely beneficial imo

1554312356
andrewrk
yeah you're not wrong

1554312374
andrewrk
that comes at a cost of complexity for stage2 though

1554312419
andrewrk
I think there are fundamentally different ways that the code would be structured, if we only had an LLVM backend, vs if we had an LLVM backend and a custom backend for some targets

1554312434
andrewrk
maybe the differences can be reconciled

1554312458
andrewrk
maybe having a custom x64 backend from the start would help prevent us from designing ourselves into a corner with stage2

1554312537
Sahnvour
making custom backend an afterthought would probably be problematic when implementing it, but I would understand that it isn't a main goal for 1.0 OTOH

1554313012
andrewrk
inline assembly is one of the main problems with a custom backend

1554313068
andrewrk
on windows it's not an issue because dynamic libraries are the interface to the kernel

1554313282
Sahnvour
why is that a problem ?

1554313456
andrewrk
well maybe not a problem, but a huge project

1554313479
andrewrk
as scientes pointed out, there is a lot of maintenance work associated with an assembler because instruction sets get updated on a regular basis

1554313557
bheads
one option is to include another backend with the stage2 compiler, to avoid the llvm dependency

1554313571
bheads
it doesnt solve the debugging performance per say

1554313586
andrewrk
I don't see how that is an option or what the benefit would be

1554313616
bheads
"I think there are fundamentally different ways that the code would be structured, if we only had an LLVM backend, vs if we had an LLVM backend and a custom backend for some targets"

1554313638
bheads
to deal with that ^

1554313767
bheads
a possbile example

1554313878
bheads
They did this in D, the frontend was rewritten to support multiple backends, thus it enabled D to have 3 different compilers that were compatible

1554315261
andrewrk
my AWS CloudFront charges for the month of March was $22. about 250 GB downloaded from ziglang.org

1554315320
andrewrk
up from $15 in february, $8 in january. this is growing fast

1554315352
bheads
tats awesome

1554315354
scientes
andrewrk, use scaleway

1554315360
scientes
bandwidth is free

1554315430
scientes
well, it doesn't scale as well

1554315453
scientes
for 8eu/mo you get 200mb/s however it has to cross the atlantic to get to the us

1554315499
andrewrk
ziglang.org is a static site. I don't need a VPS

1554315535
scientes
static sites are the way to go. I just wanted to say that "cloud" is actually very expensive

1554315543
scientes
the mark up are insane

1554315611
mikdusan
250 GB including everything (binary downloads of zig builds) ?

1554315627
scientes
mikdusan, not including github

1554315634
andrewrk
mikdusan, yes

1554315665
andrewrk
I think cloudflare might actually do what I want for free

1554315695
scientes
cloud flare is also always at the cutting edge regarding features

1554315707
scientes
like they support Encrypted SNI

1554315739
scientes
which allow you to hide that you are using zig :)

1554315779
mikdusan
mkvtoolnix uses fosshub for millions of downloads if you wanted to sep packages from website.

1554315783
bheads


1554315897
andrewrk
bheads, ok yes I should definitely be using this

1554315909
bheads
lol

1554315930
bheads
cloudfront is overkill for the zig site

1554315959
andrewrk
$22/month is a lot for me

1554315976
bheads
and its going to get worse

1554315991
scientes
thats why i shut down the arm64 test server--it was 3eu/mo

1554316034
andrewrk
hopefully sr.ht gets arm64 support soon:

1554316058
andrewrk
looks like they have experimental arm64 support using debian sid

1554316106
scientes
andrewrk, super experimental, its running in qemu

1554316335
andrewrk
cloudflare's onboarding was awesome except for one little thing- I don't see how to set the origin server

1554316350
andrewrk
if I swapped over the DNS now it would just be an empty site

1554316410
andrewrk
oh maybe it figured it out from the DNS records

1554316425
andrewrk
I'm going to try this real quick

1554316443
scientes
use /etc/hosts

1554316453
scientes
cause the dns wont propagate immediately anyways

1554316457
wrl
andrewrk: for static, i'm using netlify

1554316495
scientes
there will be a gap without https, because they are using letsencrypt, which requires the site to be live

1554316499
wrl
the pro plans all include stuff that's not really useful

1554316974
andrewrk
wow, that's done. cloudflare's onboarding is incredible

1554316987
andrewrk
It's been a while since I've seen a user experience that streamlined

1554317153
andrewrk
as long as they respect `Cache-Control: max-age=0, must-revalidate` this chore is done

1554317173
scientes
where are you using that?

1554317208
andrewrk
for all content on ziglang.org except for binaries

1554317766
scientes
how do i free memory that was alocated with allocate in bigint.cpp ?

1554317776
scientes
If i use free() it seg faults

1554317825
andrewrk
don't free memory in stage1

1554317844
scientes
oh ok

1554318265
scientes
...I extended bigint_shl and shr to work with larger than 64-bit and now (void

1554318268
scientes
strange

1554318721
Sahnvour
I'd like to do a cartesian product of variadic (array) parameters, is this possible in current zig ?

1554319481
andrewrk
Sahnvour, no, but it will be easy to do once var args is replaced with anonymous heterogenous list literals

1554319507
andrewrk
that's the plan to replace var args

1554319514
scientes
I wrote a simpler doubly-linked-list

1554319517
Sahnvour
is there an issue ?

1554319533
scientes
oh list literals

1554319556
andrewrk
Sahnvour,

1554319565
Sahnvour
thanks

1554329638
scientes
how is u128 represented in stage1?

1554329685
scientes
when i return a correct bigint 64-bit it still doesn't work....

1554329701
scientes
but i can't use bigint_as_unsigned or it wont work 128-bit

1554329727
scientes
oh &result->value.data.x_bigint

1554329930
scientes
oh wait, it was working with small bigints

1554330014
scientes
I don't get why it isn't working when bswap works....

1554330026
scientes
the return type is right

1554330080
scientes
and the bigint is right

