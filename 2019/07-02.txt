1562026360
ianlilleyt
I'm interested in using build.zig for a custom build system that doesn't use std's builder. Is there a way to remove the Builder param from the build function?

1562026379
ianlilleyt
for reference, here's the error: /Users/ianlilley/Documents/Zig/lib/zig/std/special/build_runner.zig:147:42: error: expected 0 arguments, found 1        builtin.TypeId.Void => root.build(builder),

1562026474
ianlilleyt
and the code: pub fn build() void {}

1562028711
ianlilleyt
similarly, is there a way to pass custom command line arguments to build.zig without going through the std builder?

1562029101
ianlilleyt
basically, im trying to use build.zig as any other zig file, but instead executed at compile time

1562046122
daurnimator
top of HN right now!

1562046432
hryx
nice nice

1562047432
hryx
that's a really pleasant read

1562049479
mikdusan
no longer top. some shenanigans going on; comments were moved to a

1562049511
hryx
weird, what happened there?

1562058691
Sahnvour
ManDeJan: thank you for doing the first :) helped a lot

1562061901
FireFox317
Does someone know how we are going to solve `#define` in translate-c stage 2? Is it gonna be similar to `process_preprocessor_entities` in translate_c.cpp?

1562064852
IntoxicatedHippo
In C structs and unions can be nested like this, is there a way to do something similar in zig without declaring the struct outside of the union?

1562065687
BitPuffin
IntoxicatedHippo: you could can nest struct declarations

1562066008
IntoxicatedHippo
I can declare b as a const inside A, but there doesn't seem to be a way to reference B if I declare it like this:

1562066748
tgschultz
IntoxicatedHippo, you can, it's just convoluted: @TypeOf(@field(A(undefined), "B")){ .x = 1, .y = 2, };

1562066795
BitPuffin
IntoxicatedHippo: it would probably just be easier to do const InnerStruct  = struct { ... }; b: InnerStruct; in your union

1562066810
tgschultz
yeah, that's definitely preferred

1562066856
tgschultz
Oh way, it's a union? A tagged union? Then we have std.meta.TagPayloadType(A, A.B)

1562066917
tgschultz
which could have a minor improvement now with enum literals but I haven't gotten around to fixing it.

1562067144
BitPuffin
does anyone know a good example of compiling just C code with build.zig

1562067159
BitPuffin
I started doing a translation from C to zig but I want to have it built and working untouched first

1562067355
FireFox317
BitPuffin: `addCSourceFile` maybe?

1562067417
BitPuffin
yeah but what about for the file with main?

1562067425
BitPuffin
when you create the exe

1562067444
BitPuffin
like when you run addExecutable

1562067446
BitPuffin
do you put a C file there?

1562067457
BitPuffin
an empty zig file?

1562067510
FireFox317
Ah only c files without any zig code?

1562067606
BitPuffin
yeah

1562067607
BitPuffin
to start with

1562067668
IntoxicatedHippo
Are nested consts in structs meant to shadow? On line 8, Self from line 2 is used:

1562067670
BitPuffin
I already have managed to get C modules building harmoniously with zig sources with my game

1562067765
BitPuffin
that should probably be a compile error

1562069439
samtebbs
ianlilleyt: Could you describe your use case a bit more? I can't see why you'd want to subvert the build system in that way.

1562069453
samtebbs
BitPuffin: You can use addCExecutable AFAIK

1562070102
BitPuffin
not from what I can see on github samtebbs

1562070379
Sahnvour
this (reduced example) segfaults the compiler

1562070517
samtebbs
Sahnvour: Well segfaults are never supposed to happen :) Whether or not the code should compile is another matter

1562070559
Sahnvour
yeah, but that's what I'm interested in at the moment :p

1562070655
samtebbs
BitPuffin: My source:

1562070658
samtebbs


1562070686
samtebbs
But yeah there doesn't seem to be any code occurrence of it

1562070876
BitPuffin
hmm wat

1562071119
BitPuffin
was it removed?

1562071148
BitPuffin


1562071165
BitPuffin
so judging by this you should just addExecutable and pass null

1562073066
samtebbs
Sahnvour: Have you tried removing `inline`? I've seen that cause compiler problems before

1562073107
samtebbs
BitPuffin: Ah ok, nice

1562073303
Sahnvour
samtebbs: it has to be there, so not really (or maybe with uglier and slower code)

1562078179
samtebbs
Sahnvour: Can you try removing it for testing purposes though? It may be the cause of the segfault

1562078179
darithorn
does zig fmt use its own parser?

1562078211
samtebbs
darithorn: It does indeed: src/parser.cpp

1562078272
andrewrk
samtebbs, zig fmt uses the self hosted parser

1562078295
andrewrk
which is std/zig/parse.zig

1562078350
Sahnvour
samtebbs: removing it leads to a compile error, but yes I suspect like you that it's involved in the crash

1562078394
Sahnvour
what happens is zig ends up with the break instruction that points to a basic block without a llvm_block

1562078406
darithorn
okay i thought i remembered it being the case i just wasn't sure

1562078410
Sahnvour
didn't find yet why

1562078442
Sahnvour
andrewrk: if you maybe have a minute to look at it

1562078450
samtebbs
darithorn, andrewrk: Oh sorry, I didn't register that you wrote 'zig fmt'

1562078464
darithorn
samtebbs np

1562078643
darithorn
would using zig as a config format be viable? or at least using the same syntax?

1562078777
andrewrk
Sahnvour, let me finish up this other thing I'm working on and then take a look

1562078786
andrewrk
darithorn, I think a normal configuration format would be better

1562078852
darithorn
i'm trying to use zig build to build a C project but it uses a combination of Makefiles and config files that generates a new Makefile that actually builds the project

1562078892
darithorn
the config files turns on/off certain features

1562078917
andrewrk
if you're already using make, you might consider using make to build your zig code too

1562078936
andrewrk
oh, I see - that's less of a configuration format and more of simply generated code from config. that's reasonable

1562078995
darithorn
yeah.

1562079027
darithorn
and the reason i wanted to use zig build over make is just for ease of cross compiling and all that fun stuff

1562079088
darithorn
and eventually i want to start porting it to zig but that's a topic for another time

1562079118
andrewrk
yeah fair enough

1562079454
samtebbs
Sahnvour: It's probably worth opening an issue for that if there isn't one already :)

1562084339
fubd
is there a reason you can't "pub usingnamespace variable_name;" ?

1562084342
fubd
as in:

1562084344
fubd
/ c.zig;

1562084412
fubd
^^ that results in "src\platform\c.zig:10:20: error: use of undeclared identifier 'c'

1562084419
fubd
even though I have const c = @cImport above it

1562084476
emekankurumeh[m]
you can, but usingnamespace is kinda broken, so i think you need pub usingnamespace and usingnamespace

1562084502
fubd
oh, I just found

1562084505
fubd
yep, thanks

1562084535
fubd
seems bad to @cImport twice though

1562084577
emekankurumeh[m]
you can try assigning to a const first then `usingnamespace` that

1562088323
ltr-
hello

1562088343
ltr-
are there any efforts to implement an language server for zig?

1562088377
andrewrk
ltr-,

1562088683
ltr-
do you think it would be woth to implement an stand-alone lsp for zig?, i was working on a rewrite of quake (ezquake to be more precise) , but im not productive yet on zig so, lsp would be a nice start to get used to the language.

1562088708
andrewrk
my plan is to implement it only in the self hosted compiler

1562088760
emekankurumeh[m]
i did a little bit of work implementing a dart analyzer-like lsp for zig

1562088910
ltr-
emekankurumeh[m]: using the c++ compiler?

1562088936
emekankurumeh[m]
no, it was all in zig

1562090012
emekankurumeh[m]
andrewrk:  in your segfault handler are all the functions you call signal safe?

1562090035
andrewrk
no

1562090036
emekankurumeh[m]


1562090070
andrewrk
good point. there's a better way to solve this though, because we have 1 trick up our sleeves

1562090079
andrewrk
which is that the segfault handler is going to crash

1562090087
andrewrk
so we can simply mask all signals in the handler

1562090088
emekankurumeh[m]
does it matter though because we abort?

1562090103
emekankurumeh[m]
i see

1562090147
BitPuffin
andrewrk: when you did the compile lua for webassembly with zig did you just compile the lua C code or did you do any porting?

1562090167
andrewrk
BitPuffin, I chose a subset of the C files to build

1562090176
andrewrk
I don't think I made any source modifications though

1562090194
BitPuffin
alright, thanks for answering :)

1562090300
BitPuffin
I'm a bit curious about the while loops in zig. Is there a specific reason why (unless we use a block) we can't really get a loop counter variable that doesn't outlive the loop

1562090321
BitPuffin
I'm thinking maybe it's to discourage that kind of loop

1562090355
andrewrk
it's the same problem as any local variable in a function

1562090382
andrewrk
all local variables in zig have the problem that their scope won't end without explicitly putting them in a block

1562090434
BitPuffin
yeah but other languages make it easy for you to just have it in the for loop or something

1562090463
andrewrk
zig is either going to solve this problem for all local variables or none, but not just the loop iteration variable

1562090500
andrewrk
anyway let's talk about it after generators are implemented (or rejected)

1562090581
BitPuffin
I see

1562090603
BitPuffin
didn't know generators were on the way (maybe), that's gonna make things easier

1562090662
emekankurumeh[m]
generators through coroutines/continuations? is there a proposal open for that?

1562090907
via
anyone used zig freestanding on a cortex-m4? possibly with libopencm3?

1562090945
via
i'm playing around, and tried building a freestanding binary for target thumbv7em-freestanding, but i get an error 'TODO populate this table with stack pointer register name for this CPU architecture'

1562090953
andrewrk
emekankurumeh[m], I don't think generators have their own issue yet

1562090980
andrewrk
via, do you know what the stack pointer register name is for that CPU architecture?

1562091083
via
there are two, msp and psp, depending on the mode, iirc

1562091103
andrewrk
what mode?

1562091142
via
i'll have to look, but there's a system mode and user mode, and for example i think interrupts will use msp by default. i'd need to check which settings are default

1562091246
andrewrk
adding the register to that table in zig will make @newStackCall work. otherwise you can avoid the TODO by avoiding that builtin

1562091254
via
i'm pretty used to having newlib on these, and it handles the initialization

1562091262
via
okay, i can probably avoid the builtin

1562091275
via
i think hardware initializes them to at least be usable

1562091281
andrewrk
or we can improve zig by adding the register, if we know what it's called

1562091309
via
i'm at work right now and can't really look, but i imagine having the two different stack pointers might make that more complicated?

1562091353
andrewrk
yeah that's good to know about. the API of that builtin might need to get adjusted in lieu of this new information

1562091432
via
i'm about 95% sure that by default psp is for normal code and msp is for interrupts, dependent on a flag in psr, i can check tonight

1562091433
andrewrk
or maybe the code generated can be improved, to detect the mode

1562091450
andrewrk
if it detected the psr flag, then everything can "just work"

1562091478
via
cool, i'll double check that tonight

1562091574
via
if i link with libopencm3, it owns the start functions and sets all that up anyway (calls main), so probably not an issue for me personally if i can get that to work

1562091581
via
guessing its needed for something like coroutines to work though

1562091730
andrewrk
I'm in the middle of reworking coroutines, but neither the status quo implementation or the new implementation depend on @newStackCall. they're much more lightweight than that

1562091750
andrewrk
they're stackless. maybe better called "continuations" than "coroutines"

1562091819
via
cool, i hadn't actually looked at them, its just the only reason i know anything about msp/psp is last year i wrote a really crappy lightweight multithreading scheduler for that chip. stackfull.

1562092104
gonz_
What does the current timeline for coroutines look like?

1562092135
andrewrk
gonz_, so far, on schedule for the 0.5.0 release cycle

1562092147
emekankurumeh[m]
not to be pushy, but when is the next round of PR review?

1562092151
andrewrk
branch is already started:

1562092168
andrewrk
emekankurumeh[m], today! I just completed the oldest PR, moving on to next oldest

1562092246
emekankurumeh[m]
nice

1562092349
gonz_
andrewrk: Great to hear. :)

1562092350
emekankurumeh[m]
with result location if i return a struct field from an initialization of the the struct would a @fieldParetntPtr be UB?

1562092397
andrewrk
emekankurumeh[m], if you paste some code I'll walk you through how the result location semantics work

1562092804
emekankurumeh[m]
hmm, it might be a while. looking closer at my code i'm kinda confused by what i'm trying to do

1562092863
andrewrk
emekankurumeh[m], the way to think about it is from "left to right" or "outside to inside" expressions. e.g. with `var foo = ...;` start with "foo" as the "result location" and then trace the result location all the way to the innermost thing

1562092897
andrewrk
each expression has a way that result locations propagate. array and struct initializations are able to propagate the result location to the fields/elements

1562092908
andrewrk
`return` propagates the return value result location

1562092928
andrewrk
however

1562092958
andrewrk
each variable declaration is its own result location-

1562095303
donpdonp
extern struct { mv_size: usize, mv_data: ?*c_void }

1562095318
donpdonp
im trying to populate that from string.len and string.ptr

1562095353
donpdonp
but im getting hung up on how to deal with 'cast discards const qualifier'

1562095415
donpdonp
i realize that string.ptr is const and mv_data is not const. i know the function using this struct does not modify the mv_data, so i want to force the situation

1562095456
donpdonp
i thought "@ptrCast(*c_void, value.ptr)" would handle it but nope

1562095561
andrewrk
where is this struct declared?

1562095584
donpdonp
in a C .h file

1562095605
donpdonp
what I pasted is the zig translation from zig-cache/

1562095613
donpdonp
the lmdb database, to be specific

1562095769
andrewrk
donpdonp, what's going on here is that it's not actually a mutable pointer. in the h file it's incorretly specified as `void *` when it should really be `uintptr_t`. given that you (I'm guessing) can't change the .h file you'll have to work around the type being incorrect

1562095832
andrewrk
like this: @intToPtr(?*c_void, @ptrToInt(value.ptr))

1562095921
donpdonp
hmm, ok thx.

1562096049
donpdonp
some googling says 'uintptr doesn't represent a pointer to an unsigned integer, as *uint, but is a type to treat a pointer as an unsigned integer, to ease some specific arithmetic operations mostly.' TodayILearned

1562096072
andrewrk
uintptr_t is equivalent to zig's usize

1562096102
companion_cube
on all platforms‽

1562096105
andrewrk
yes

1562096124
companion_cube
ok, I thought sometimes the sizes actually differed

1562096135
andrewrk
ok but at first I thought this was a `void * context` sort of situation, but looking again it looks more like a slice, as in mv_size is the amount of bytes

1562096150
andrewrk
if that's the case then maybe it actually is supposed to be mutable? I'd have to look at the API

1562096155
donpdonp
yes it looks like lmdb wishing it was written in zig :)

1562096183
donpdonp
mdb.put(key,value); should just store the value in the db file without modifying it.

1562096203
andrewrk
I think the API is missing a `const` on the type

1562096230
donpdonp


1562096239
donpdonp
fyi thats the original definition

1562096343
andrewrk
I'm guessing they're using the same type whether or not mv_data is const. so that means sometimes having to hack around the type system.

1562097921
dimenus
andrewrk: does translate-c expand macros (eg for OpenGL function pointers)

1562097934
dimenus
or rather, should it?

1562097973
andrewrk
dimenus, yes libclang has full preprocessing support

1562097979
dimenus
hmmm, no warnings

1562097996
andrewrk
however that is easy to confuse with the fact that if the macro

1562098043
andrewrk
which is fundamentally heuristics based

1562098753
emekankurumeh[m]
would the more zig approach to iterators be a rust-like iterator api or a generator based one?

1562099136
andrewrk
the rust language is iterator-aware. I don't have plans to make zig language iterator-aware

1562099160
companion_cube
you can still have a standard abstraction for it, right?

1562099351
andrewrk
sure

1562099412
companion_cube
(afaict the only thing baked in rust is the for loop, which is convenient)

1562099476
marler8997
pretty much the same thing in D, but I think andrewrk will respond with zig's idea of no hidden code/allocations

1562099485
dimenus
andrewrk:

1562099538
andrewrk
dimenus, yep, will need to add special detection for that in translate-c

1562099555
emekankurumeh[m]
zigs while loop is better imo

1562099610
companion_cube
it's hard to beat `for x in y { … }` when that's what you want, tho

1562099669
marler8997
this doesn't seem to bad `while (y.next()) |x| { ...}`

1562099748
companion_cube
rust's would be `while let Some(x) = y.next() { … }` but it's still more verbose and you still have to name `y`

1562099856
emekankurumeh[m]
I was working on porting part of the rust iterator trait to zig

1562099895
emekankurumeh[m]
it's a bit more verbose without traits, but it hasn't been too bad

1562099908
emekankurumeh[m]
I wish zig had closures though

1562099945
companion_cube
seems to me closures would also be useful to properly deallocate/move ArrayList elements when it's shrunk or cleared, for example

1562099955
andrewrk
emekankurumeh[m], coroutines and closures are closely related

1562100008
companion_cube
if you have comptime closures, you can just inline them, too, I imagine

1562100028
marler8997
something like c++ closures might be a good proposal

1562100030
companion_cube
or rather, specialize the higher-order functions that use these closures

1562100049
marler8997
basically lowers to creating an anonymous struct and passing all the variables to the lambda/function

1562100055
andrewrk
emekankurumeh[m], is

1562100059
marler8997
since zig is already getting anonymous structs, maybe that could already be leveraged?

1562100438
emekankurumeh[m]
yes, we still need that userland function. I was writing one but I ran into some errors when getting the typeInfo for a function

1562100520
andrewrk
emekankurumeh[m], oh, you should be able to remove the "TODO make the compiler even more lazy. don't emit "use of undeclared identifier" errors"

1562100528
andrewrk
I did the make it more lazy thing

1562100543
emekankurumeh[m]
actually nevermind, it's fine for now. I'll open a new pr with that function

1562100630
emekankurumeh[m]
it'll be a little bit before I can make that change

1562100955
andrewrk
I'll wait for #2799 to be done so that #2787 can be improved

1562101626
Sahnvour
andrewrk: what was the rationale behind using `inline` keyword in front of comptime while/for loops?

1562101735
andrewrk
the other keyword I considered was `unroll` but that's an unusual keyword, and inlining a function / inlining a loop is analagous

1562101778
andrewrk
note that `comptime` is not correct since the loop expression does not have to be comptime-known. just the iterator variable and branching

1562101796
Sahnvour
yeah

1562101869
emekankurumeh[m]
is unalias currently unimplemented?

1562101889
andrewrk
`noalias` is implemented, is that what you're talking about?

1562101892
Sahnvour
I was thinking `unroll` would better express the intent, as `inline` has (imo) a quite different meaning for functions

1562101937
andrewrk
Sahnvour, I invite you to open a proposal for that. even if we don't end up doing it, then the rationale will be documented. I didn't find the rationale documented when I searched for it a minute ago when you asked

1562101939
Sahnvour
granted that, in zig, inline is a strong directive at least, unlike inc/c++, so that uncertainty about its effect is a non-issue

1562101958
Sahnvour
ok

1562102013
andrewrk
Sahnvour, what was the issue you wanted me to look at?

1562102038
andrewrk
donpdonp, zootdeck is ok since the result location branch merge?

1562102073
Sahnvour
andrewrk:

1562102079
andrewrk
thanks

1562102149
emekankurumeh[m]
yeah I meant noalias

1562102187
andrewrk
emekankurumeh[m], there are no safety checks for noalias, but it does make it into llvm IR attributes

1562102196
Sahnvour
it's nothing urgent, but I had the impression it might be simple to fix

1562102203
emekankurumeh[m]
I saw a comment about implemented safety for it in memcpy in it.cpp so I wasn't sure

1562102276
andrewrk
there are a couple research issues open for aliasing

1562102567
donpdonp
andrewrk: my zig is june-28, should i replace it with the current HEAD?

1562102610
donpdonp
the june28 ver is building/working fine with zootdeck

1562102879
andrewrk
donpdonp, result location was merged Jun 26 so I think you're good

1562103217
hryx
andrewrk: happy Monday 'n' good luck with all those PR reviews. curious what you'll think of the translate-c one when you get to it (no rush). some mysterious Windows failures that Sahnvour was helping me debug

1562103450
andrewrk
hryx, thanks!

1562104254
scientes
yes, that you for everything

1562105182
emekankurumeh[m]
Monday?

1562105421
hryx
wow

1562105424
hryx
what year is it even

1562110309
fubd
using zig build-lib to make .wasm files via -target wasm32-freestanding is amazing!

1562110317
fubd
a snag I ran into:

1562110328
fubd
any code that panics sets the browser into an infinite loop

1562110336
fubd
making it VERY hard to figure out where the problem is.

1562110346
andrewrk
fubd, what would be better behavior?

1562110365
andrewrk
here is the default panic handler:

1562110378
andrewrk
you can override that with your own panic function, or you can contribute a better default to the std lib

1562110393
andrewrk
maybe @breakpoint() would be good?

1562110396
fubd
ok, looks like i need to finally build from source

1562110408
andrewrk
you don't need to build from source to provide your own panic handler

1562110413
fubd
yes, especially in browsers which don't handle hung processes gracefully at all

1562110420
shachaf
Browsers tend to handle infinite loops very badly.

1562110420
andrewrk
just put `pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {` in your root source file

1562110428
fubd
ah, even if I'm just building a .wasm file?

1562110431
fubd
gotcha

1562110448
shachaf
I think emscripten throws a JavaScript exception which is probably reasonable?

1562110454
shachaf
What does @breakpoint() do?

1562110476
andrewrk
I haven't tested it with wasm in the browser, but ideally it would bring up the debugger

1562110496
andrewrk
fubd, play around with some better panic behavior and let me know what you think would be a better default

1562110519
shachaf
Oh, does WebAssembly have a breakpint instruction?

1562110536
fubd
will do. looks like i need to do SOME kind of abort to keep the type checker happy with the "noreturn" part of the function's type

1562110537
shachaf
Oh, 0x00, unreachable.

1562110560
shachaf
That sounds reasonable.

1562110581
andrewrk
I'd try while (true) { @breakpoint(); }

1562110754
fubd
andrewrk: that works perfectly

1562110775
andrewrk
fubd, noted, thanks, in that case I'll update the std lib right now

1562110775
fubd
wasm-2231b9a6-1:15 Uncaught (in promise) RuntimeError: unreachable    at panic (wasm-function[1]:31)    at doSomethingThatPanics (wasm-function[2]:304)    at

1562110791
fubd
although I'm confused about why the RuntimeError up in the javascript console says "unreachable"

1562110815
fubd
i mean, i understand what unreachable is

1562110864
andrewrk
based on what shachaf said, I believe @breakpoint() lowers to the "unreachable" instruction, which has that behavior when it gets run

1562110906
shachaf
Oh, you go through LLVM, which has a way to emit breakpoints.

1562110907
andrewrk
this is actually quite elegant when you think about it because if you were to use zig's `unreachable` statement, in debug mode that would call panic and end up literally outputting the unreachable wasm instruction

1562110956
fubd
ah I see :)

1562110974
andrewrk
I'm going to go ahead and make this the default on all freestanding targets, I think that should be OK

1562111145
andrewrk
fubd, ok it's pushed. new build should clear the CI within 3-4 hours

1562111156
andrewrk
thanks for the report :)

1562111218
fubd
andrewrk yep! will keep you posted on any other thorny bits in this wasm/gamedev experiment. thx for the quick answer

1562111236
andrewrk
np

1562111378
fengb
I'm having trouble exporting `?[*c]u8`

1562111409
fengb
Oh... is [*c] automatically nullable?

1562111641
andrewrk
exporting? use a normal pointer

1562111656
fengb
Shouldn't I mark it as null terminated?

1562111666
daurnimator
fengb: we don't have null terminated yet

1562111679
daurnimator
(see

1562111686
fengb
I thought [*c] meant that... my mistake

1562111692
andrewrk
null terminated pointers are still scheduled for this release cycle

1562111727
andrewrk
[*c] is only for auto-translated types where it's ambiguous how many items are at that address

1562111742
fengb
Ahh

1562111752
andrewrk
if you are typing [*c] into your keyboard, something is wrong

1562111766
daurnimator
andrewrk: not always

1562111789
daurnimator
andrewrk: e.g. I have to use it when I create callbacks that I pass to C functions

1562111806
andrewrk
are you sure? that's a bug if so

1562111910
andrewrk
just like foo(*const i32) can cast into foo(*i32), foo(*i32) can cast into foo([*c]i32)

1562111923
daurnimator
ah hmm

1562111935
daurnimator
I don't have a sample with me right now to check

