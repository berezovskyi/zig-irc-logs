1563494655
andrewrk
ntgg, I'm sorry it wasn't available until 1d07bbb which I just pushed to master

1563494669
andrewrk
but now you can do: artifact.valgrind_support = true

1563529827
nrdmn
I've started to add uefi support to zig's standard library. I can get a demo program to boot and output text in debug mode, but it's behaving weird in release mode

1563536593
Tetralux
nrdum: Interesting. On both counts.

1563542747
mq32
andrewrk, thanks for the stream, it was very informational!

1563542768
mq32
also huge thumbs up on the SDL2 demo, really looking forward for the package manager and everything :)

1563544342
fengb
I'm reading old release notes. It's pretty interesting that seemingly obvious designs now were really not at all a few years ago

1563547695
dimenus_
i'm working on vectors/matrices & vulkan

1563547754
companion_cube
fengb: do you have a link that contains them all?

1563547763
companion_cube
it's sign of good design anyway, things change with experience

1563548651
fengb


1563548655
fengb
Following the release notes chain

1563548683
fengb
The two things that jumped out at me are pointer reform and control flow via keywords

1563549623
fubd
the great sigil purge

1563549699
companion_cube
oh wow, 0.2 that removes goto

1563549711
companion_cube
I started looking at zig at 0.3 ðŸ˜…

1563549770
halosghost
I was incredibly happy with both pointer-reform and the sigil-purge

1563549900
halosghost
e.g., arbitrarily-sized, fixed-width floats

1563549909
halosghost
which is somewhat unreasonable since nothing supports that anyway

1563549988
andrewrk
that's a popular opinion around here

1563550025
gonz_
All things considered that's a very good "just wants" to have

1563550027
gonz_
:D

1563550071
halosghost
andrewrk: also, I don't know that I've properly conveyed to you how much I love that zig has arbitrarily-sized, fixed-width integers

1563550074
halosghost
andrewrk: thank you for that

1563550088
halosghost
everyone should do that

1563550116
fengb
Yeah, it's pretty amazing for packed structs. C feels so ancient in comparison

1563550175
andrewrk
fengb, btw I don't know how you did it, but fundude's key bindings worked for me even though I use dvorak

1563550194
gonz_
SDL used to handle this correctly if I remember correctly

1563550225
gonz_
2 engines ago Dota2 worked for me without switching keybindings (I use Svorak)

1563550247
fengb
lol... I just did "[]" and "<>" because it felt less random

1563550252
gonz_
I think they were actually using SDL back then for input, but I may be wrong. In any case it used to work.

1563550271
fengb
I almost didn't key in arrow keys because nobody would use them

1563550273
fengb
>_>

1563550299
fengb
Thanks for the demo!

1563550312
fengb
It went smoother than I had feared lol

1563550326
andrewrk
it was a very "just works" experience. I didn't try it before the stream

1563550330
andrewrk
kudos

1563550410
fengb
It's a good thing you didn't try a different game :P

1563550434
andrewrk
I knew better than that, I saw your comments about testing mario

1563550437
fengb
I was cringing when you were scanning your library

1563550440
andrewrk
hahahaha

1563550452
fengb
"Oh gosh is he gonna upload the zip file directly?"

1563550457
andrewrk
I would never

1563550475
fengb
"Why is that cart size all messed up??"

1563551064
companion_cube
damn the windows demo on yesterday's stream is blowing my mind

1563551132
wootehfoot
companion_cube, link?

1563551175
companion_cube


1563558136
ExtraVeral
Hi all, I'm as newbie as can be... and I've tried to run the test from "String Literals and Character Literals"

1563558165
ExtraVeral
...and I've  got : test.zig:11:15: error: invalid digit: '{'    assert('\u{1f4a9}' == 128169);

1563558187
ExtraVeral
what am I doing wrong?

1563558296
andrewrk
ExtraVeral, you'll need to use master branch of zig for that

1563558313
ExtraVeral
oki, will do, 10x

1563560572
dec05eba
anyone working on ide utils for autocomplete?

1563560633
dec05eba
im editing std.zig.parse to make it easier for ide to work with code for autocomplete but im wondering if somebody else is also working on a similar solution

1563568606
darithorn
Here's a TOML parser I wrote in Zig. The tests I wrote say it's fairly stable so here it is:

1563568616
andrewrk
neat!

1563568719
darithorn
Thanks! The source is a bit messy since I realized only half way TOML is partially whitespace significant. But it still works nonetheless.

1563568887
hryx
super cool, darithorn

1563569322
gonz_
How does one provide `WinMain` and all in order to have a win32 program start, again?

1563569333
gonz_
All I've found googling is a super obnoxious issue about it

1563570361
andrewrk
gonz_,

1563570385
gonz_
andrewrk: TY

1563570388
andrewrk
I just fixed a relevant bug, so you'll need master branch for this example

1563570397
gonz_
Ah, ok

1563570399
gonz_
Good to know

1563570533
emekankurumeh[m]
nice, we are going to have to remove some workaround then

1563570787
ffddr
Any ideas how to implement this, but with StreamedParser? I was previously advised to build a hashmap in Deserializer.init() for all struct fields. But with nested structs and arrays I got super complicated code with memory consumption comparable to Parser without copy_strings :(

1563572935
nrdmn
seems like my issue with uefi binaries is that references to the data section use the addresses from the object file, not where the section is actually loaded

1563572975
emekankurumeh[m]
is uefi pic?

1563573083
nrdmn
should be. You can have multiple uefi apps loaded simultaneously and all share the same address space

1563573158
nrdmn
the generated code within the text section is pic, but references into the data section are not

1563573208
nrdmn
I'm not sure if the offset between sections needs to be constant

1563578918
darithorn
has there been any talk about allowing additional information to be attached to errors?

1563579017
hryx
darithorn:

1563579087
darithorn
okay sweet, i looked but couldn't find an issue. thanks

