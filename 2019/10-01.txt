1569888143
jaredmm
Can't wait for the day I don't have to troubleshoot another gd build that has "simple" build instructions that never work on the platforms they say they do.

1569888649
traviss
on windows, binary zig 0.5.0 is giving this error which i didn't see from binary 0.4.0: ...VCRUNTIME140_1.dll was not found... does anyone know what i need to do?

1569888761
traviss
i tried updating my VS build tools from VS installer but that didn't work.  i have VS community 2017 installed btw (not updated recently).

1569889043
traviss
.. along with VS build tools 2017.  i updated both just now but that didn't seem to help.

1569889439
andrewrk
traviss, github updated

1569889769
traviss
thanks so much andrewk and everyone. amazing release!

1569890745
traviss
installing the visual c++ 2019 redistributable fixed my problem.  i don't think i needed to do the updates i mentioned above. here is the link i used:

1569896142
scientes
Yeah, my libmvec function works with armv7-32bit but not qemu

1569896151
scientes
as I was saying, qemu support for SIMD stuff is buggy

1569896389
knebulae
@andrewrk: I have been giving a lot of though to the comment about zig perhaps one day supporting its own inline assembler.  Would it be possible to pass certain blocks to nasm for assembly?  Of course this can be done with C function linkage, but then you have to abide by the C ABI.  I'm thinking more a naked function with a nasm {....} block. It would be highly naughty though.

1569896425
scientes
damn i need that mips router i bought

1569896428
scientes
it supports mips SIMD

1569896495
scientes
allowing 2x16b

1569896495
scientes
or 4x8b operations to occur simultaneously.

1569896499
scientes
oh thats a differn't type of SIMD

1569896543
scientes
that's not the full thing: 16 x 8-bit, 8 x 16-bit, 4 x 32-bit, and 2 x 64

1569896546
shachaf
knebulae: Integrating an external assembler on that level seems very complicated and not worth the trouble.

1569896564
knebulae
That was what I figured :(

1569896579
knebulae
it'd have to be deep in llvm to make it play nice.

1569896626
scientes
yeah you can always link to those functions from zig

1569896634
scientes
using assembly if you want to do weird calling conventions

1569896823
shachaf
I feel like the benefits of inline assembly in the first place are pretty limited, when you have top-level assembly and intrinsics.

1569897023
knebulae
@shachaf: 99.99% of the time, yes. In my case, no. But it's all good.  So many cool things in the new release.

1569897823
scientes
should we have a signed version of truncate, and keeps the sign of the old number?

1569899356
scientes
developing a memory model for comptime would really improve the usefulness of comptime

1569899374
scientes
or at least first, array indexing at comptime

1569899397
scientes
its a huge project

1569921744
gustav_o
hi!

1569921777
mq32
hey

1569921788
konv
o/

1569921829
gustav_o
0.5.0 is looking great :) I started a project today and ran into a problem: what is the proper way to add a zig library (build.zig file) to the build process of a(nother) zig executable?

1569922579
lunamn_
b.addPackagePath?

1569923026
mq32
ceymard, your code completion works pretty well!

1569923444
gustav_o
lunamn_thanks! the import seems to work, I just can't seem to access anything public though @import("mylibrary").hello where pub const hello = "hello world!"; exists in main.zig of mylibrary

1569923520
gustav_o
oh nm, I accidentally supplied the build.zig file to addPackagePath() instead of main.zig

1569923940
Gertm
How much C knowledge does one need to get going with Zig?

1569924080
mq32
pretty much zero

1569924095
mq32
you should know how a computer works (in terms of memory, pointers, stack, heap)

1569924104
mq32
but you don't need to know syntax or semantics of C

1569924121
Gertm
Interesting! Thanks.

1569929212
tencho
why do I get OutOfMemory

1569929533
tencho
I mean I get OutOfMemory error on line 11. If I set a breakpoint in heap.zig:450  then self.buffer.len is 0. How ?

1569932099
kenaryn
Hello people, I'm reading the 0.5.0 release notes and new builtin @hasDecl in particular, but I do not know the meaning of the 'declaration' word? (i.d. in a programming sense). Is there someone who accepts to explain it to me please?

1569932297
kenaryn
Another question: is there a lexikon associated with the Parsin Expression Grammar? same implication as the previous one but in a higher abtract reasoning. Thank you.

1569932304
kenaryn
Parsing*

1569932332
mq32
hey kenaryn

1569932342
mq32
a declaration "declares" that a variable exists

1569932358
mq32
"hereby, i declare that a is a variable of type i32!"

1569932360
mq32
or in zig terms

1569932364
mq32
var a : i32;

1569932380
mq32
declarations "create" objects like variables or functions

1569932434
kenaryn
Allright but does a function isn't a declaration too? like exposed by Andrew in the official documentation

1569932505
mq32
a function declaration is also a declaration ;)

1569932522
mq32
fn fun() void { } // this declares a function

1569932528
kenaryn
sorry, I missed your before-last sentence!

1569932542
kenaryn
I understand now, you are very kind mq32.

1569932660
gustav_o
Another question: is there a way to initialize all struct fields to 0 in zig?

1569932889
mq32
@memset

1569932889
mq32
or std.mem.set

1569932890
mq32
or use default-initialization with 0

1569932948
fengb
Try not to memset arbitrarily. Zig has some built in safety, like slices, that could be overwritten

1569933015
fengb
Except packed structs and extern structs. They can probably be memset without worries since their memory layout is well defined

1569933076
gustav_o
how do I default-initialize with 0? this is a c struct so I cannot change the struct fields to have defaults

1569933100
fengb
Oh C structs are extern so doing memset is fine

1569933412
dingenskirchen
re: PEG grammar, kenaryn:

1569933434
gustav_o
@fengb ok!

1569934423
gustav_o
Hm, I can't quite figure out how to add my library as a dependency of my executable. exe.addPackagePath("mylib", "../../src/main.zig"); makes it possible to import zig code from main.zig but how do I inherit the library declaration? Do I break out b.addStaticLibrary() into its own function in mylib build.zig and then call that from my executable

1569934424
gustav_o
build script?

1569934691
gustav_o
I want to specify lib.addCSourceFile("src/deps/mycfile.c", [_][]u8{}); etc only once in the build.zig of mylib, not in all places that use the lib

1569936661
gustav_o
Ok I worked around the problem by creating the executable inside of the library build script (these are "test" executables anyway), but I would be really interested to know the proper way to do this. Maybe it doesn't exist yet and it is waiting for the package manager?

1569939403
kenaryn
Thank you digenskirchen! This is very instructing :)

1569941275
shritesh
FYI homebrew has 0.5.0 now. `brew install zig` away.

1569941414
fengb
Driveby announcement o_O

1569941888
Barabas
How would one extent functionality of an existing struct?

1569941933
Barabas
(Without changing the existing implementation, because that could be in some library.)

1569941960
n_1-c_k
Calling the nextPosix() function in ArgIterator got me this,

1569945724
_Vi
Is comptime-unrolled loop of ifs, comparing x to large-ish set of constant numbers going to be as efficient as switch?

1569945785
fengb
I believe LLVM optimizes that into a jump table

1569945960
scientes
llvm is very conservative about jump tables

1569945967
scientes
i was working on it, but C++ is so slow

1569946015
scientes
you can't do a jump table out of that without a bit map

1569946018
scientes
which llvm doesn't implement

1569946025
scientes
so the switch just does binary search

1569946046
Barabas
in general a switch can't really be a jump table, unless you assume the default case never happens.

1569946066
Barabas
And no holes in your cases etc ^^

1569946071
scientes
yes it can

1569946089
Barabas
How does that work?

1569946141
scientes


1569946144
scientes
use a bitmap

1569946153
scientes
that doesn't describe it well however

1569946159
halosghost
scientes: if you're working on it in C++, can you use the && GNU extension?

1569946187
scientes
I'm talking about the pain of hacking LLVM

1569946190
halosghost
ah

1569946192
halosghost
nevermind then :)

1569946272
_Vi
Is there reliable way to generate jump table with variable, but comptime-known number of variants?

1569946292
scientes
yes, fix llvm

1569946312
scientes
or pay me to finish the patch set I was working on

1569946337
_Vi
I mean using Zig things. Maybe there is something like `inline switch` besides `inline while`?

1569946355
scientes
you don't understand what switch is

1569946360
scientes
llvm has to do it

1569946364
scientes
and inline makes no sense

1569946404
_Vi
Or does switch and a series of `if`s from zig-unrolled loop lower to the same LLVM IR anyway?

1569946413
fengb
Hmm it's not optimizing my simple case :(

1569946413
Barabas
Can't say I fully understand what the code does there in the bugreport, but I'll take your word for it ^^

1569946425
scientes
yeah that doesn't describe it well

1569946433
fengb


1569946485
scientes
Barabas,

1569946785
Barabas
hmm... I think I get it.

1569946896
fengb
scientes: I think _Vi wants to generate switch branches using a loop

1569946915
_Vi
Yes.

1569946919
scientes
ooooo

1569946933
scientes
good question

1569946974
scientes
yeah, make up a proposal

1569946998
scientes
but keep in mind that the llvm switch interface sucks

1569947007
scientes
but i gues we can just ignore that

1569947015
scientes
gcc's is better

1569947040
_Vi
Is that `llvm switch interface` the only way to make it generate jump table or it can also do it from equivalent series of `if`s?

1569947081
scientes
i don't believe llvm generates switch statements

1569947091
Barabas
fengb what's it doing with lea there?

1569947094
scientes
but i could be wrong

1569947131
scientes
but yeah that is probably the way to do it

1569947173
Barabas
fengb lol, if you change `x - 1` to `num - 1` it does optimize it :P

1569947200
fengb
Oh that makes sense

1569947242
fengb
Wait... it means you can't use the switch match in the body :(

1569947251
Barabas
Well... x and num should be the same. The compiler should know that, but hey... it's a compiler :D

1569947273
fengb
I was hoping LLVM would recognize this as a switch

1569947291
scientes
fengb, you just have to write the patch to llvm

1569947295
scientes
i think this is the way to do it

1569947493
_Vi
Is converting the big switch to a jump table implemented in Zig code (without relying on LLVM) a good idea?

1569947520
scientes
no

1569947670
_Vi
Will the big chain of `if (x == 0x123456) return MyEnum.Var1;`-like things (more than 200 items) be optimized by LLVM somehow (even if it is not a jump table)?

1569947725
fengb
Only way to be sure is inspecting the output

1569948137
mq32
_Vi, it's not a good idea to specify what optimizations are guaranteed

1569948150
mq32
because this would prevent optimal code generation

1569948176
_Vi
Tried godbolting a switch with 19 variants and observing a lot of `cmp`s and conditional jumps.

1569948199
mq32
it's probably better for the pipeline than a jump table

1569948210
mq32
as jump tables are more common to enforce pipeline stalling

1569948427
fengb
Well... chained conditional jumps are worse than jump tables

1569948459
Tetralux
mq32: I hear this a lot; the point about not tying the hands of the compiler; I've yet to see any actual evidence that this is actually true. Indeed, more the opposite.

1569948490
mq32
Tetralux: i once "optimized" my code from what the compiler did to a jump table

1569948503
Tetralux
It was slower?

1569948506
mq32
yes

1569948508
mq32
by factor 3

1569948514
Tetralux
That's because jump tables are terrible xD

1569948522
Tetralux
if-else branches are better.

1569948540
Tetralux
It's okay if you've got like 20,000 arms

1569948543
Tetralux
But not for like 10.

1569948545
mq32
yeah but even then the compiler would have emitted the same code as for the switch ^^

1569948547
mq32
i had 256

1569948561
Tetralux
I've never measured personally where the threshold is.

1569948569
Tetralux
So I can only really guess, in part.

1569948584
Tetralux
Point is, jump tables aren't worth the optimization to unless you've got a lot of them.

1569948593
Tetralux
Like - thousands, probably.

1569948596
mq32
yeah

1569948602
Barabas
Why are they so slow?

1569948609
Tetralux
Cache probably.

1569948611
mq32
because of how modern CPUs work

1569948618
Tetralux
Both instruction and memory.

1569948619
Tetralux
But yes

1569948622
Tetralux
Also the branch predictor

1569948628
mq32
cache, pipeline, lookahead, branch predictor

1569948630
fengb
It really depends. Jump table forces 2 unpredicable branches

1569948630
_Vi
Tried comparing switch and ifs:

1569948640
Tetralux
mq32: This.

1569948642
fengb
But if your if-else chain has a jump per branch, it's possibly slower already

1569948650
_Vi
Will it be similar for 200 variants instead of 18?

1569948666
mq32
btw, is our BDFL taking a break? he isn't here in the IRC :D

1569948668
Barabas
wait, a jump table is computed goto

1569948670
Barabas
right?

1569948722
fengb
For instance, my emulator core is better as a jump table because each branch is complex and the cache doesn't help too much

1569948768
fengb
Barabas: computed goto is an optimization step beyond jump table but they're related yeah

1569948774
Barabas
Yes I can see that. I once helped optimize some vm thingy to generate computed goto's for the instruction handling and it got 30% faster in some cases.

1569948778
Barabas
ok

1569948834
fengb
It really depends on cache characteristics. If you have one branch that's hit often, pushing that to the top and prevent jumps is much faster than anythiing else

1569948843
Barabas
Yeah I can see that.

1569948883
fengb
Or if each branch is not actually jumping, if-else chain would always be faster

1569948892
Tetralux
I did hear that someone wrote a parser as a jump table and then rewrote it as--I think it was recursive-decent; it went from 60 to 2 ms.

1569948902
Barabas
^^

1569948907
Tetralux
Anecdotal of course, but.

1569948921
Tetralux
That is somewhat representative, is my point.

1569948955
_Vi
In a big series of `if(num == <comptime_int>) return <comptime_int>;`, is it advisable to place popular variants at the top or optimiser would shuffle them anyway?

1569948980
Barabas
I once 'optimized' something from a virtual function call to just calling a function pointer. Thinking that would be less lookups... but eh... it was twice as slow xD

1569948993
Tetralux
I'd suggest you always help the optimizer in any way you can.

1569949003
mq32
Barabas: c++ can optimize most virtual function calls away if the type is inferrable

1569949012
Barabas
It wasn't.

1569949022
Tetralux
Isn't a virt call the same as calling a fn ptr?

1569949033
mq32
Tetralux, double dispatch

1569949037
Tetralux
Except with one extra vtable lookup potentially.

1569949039
mq32
you look up the vtable, then look up the fnptr

1569949060
mq32
but: vtable can be cached for a whole function or even call tree

1569949082
Barabas
Yeah, that's probably why the virtual function was faster.

1569949099
Tetralux
That sounds like their just the same - except that the compiler set it up and so can optimize it to a static call.

1569949125
Barabas
virtual function call is

1569949126
Tetralux
In which case, "optimizing" to a fn ptr call would end up with manual-fn-ptr-call vs optimized-to-static-call

1569949133
Barabas
vtable->function(args)

1569949141
Tetralux
i.e: get rid of the fn ptr altogether.

1569949143
Barabas
kinda... plus some offset

1569949153
Tetralux
You want everything to be static calls.

1569949156
Tetralux
Everything.

1569949156
Barabas
sure

1569949179
Barabas
but a virtual function call is not static... unless it knows what actual type it is.

1569949190
Tetralux
That's why I avoid them :)

1569949200
Barabas
duh

1569949239
Barabas
We use them a lot at work, because we mock out half the things for unit testing =|

1569949261
Barabas
And then you get into arguments about making classes final and ugh

1569949296
Tetralux
Yeah just make everything static. xD

1569949308
Tetralux
It's so much easier.

1569949313
Tetralux
And faster.

1569949348
Tetralux
If you're gonna complicate things with abstractions - use ones that are actually good to begin with.

1569949363
via
would it be possible to instead of having the concept of interfaces use function pointers to instead build them at comptime like generics? like an outstream that takes in a comptime writeFn

1569949376
Tetralux
That's my ideal scenario.

1569949387
Tetralux
I believe gonz_ has a way of doing that now.

1569949418
fengb
Yes, comptime duck typing works pretty well

1569949421
via
i mean, i haven't tried it, is there anything in the language preventing that? also specifically maybe having the fact that its async or not be comptime?

1569949491
fengb


1569949535
fengb
I allow any var that matches instream or outstream

1569949869
via
i'm not clear on how thats working, is that type  checked at compile time?

1569949948
gustav_o
What do you guys think about "Default Struct Field Values" for C structs? That way one can initialize a C struct in zig just like in C (omitting fields that should be 0)

1569950028
via
fengb: if that works, i still think a genericed stream interface would look better, so that function type signatures indicate what its actually taking

1569950553
fengb
via: yeah it’s typechecked by ensuring the method exists

1569950620
fengb
Not the best type checking. There’s a proposal for comptime checked types

1569951690
via
cool

1569951721
via
it occured to me since i wrote what i did that comptime generic streams won't work, because everywhere that wanted to take a stream would need to know what function it writes with

1569954851
dec0de
Hey guys, can I help you with the website? I am a programmer and I really like the idea of zig! But the website needs some work, maybe I can help on that? (Feee ofcourse)

1569954859
dec0de
*free

1569954989
nrdmn
dec0de: what do you think could be improved?

1569955067
dec0de
The design layout and everything, right now it looks like a html only site

1569955102
dec0de
While the top bar looks good, the text as no margin, which makes it harder to read

1569955217
donpdonp
dec0de: it might be better to simply fork the site, make some edits, then post a link here saying Hey doesnt this look better?

1569955257
Sahnvour
dec0de: I think many people here like the fact that it's html-only, but feel free to propose improvements to

1569955287
nrdmn
it is a html only site (not counting css). No Javascript, no serverside processing.

1569955318
nrdmn
I think there could be something done about the legibility, but that's up to Andrew to decide

1569955465
nrdmn
the paragraph headings kinda disappear when scrolling quickly over the main page

1569956621
traviss
via: what your twitch channel?

1569956737
dec0de
Guys, I am not looking into making a heavy slow loading site

1569956827
andrewrk
dec0de, if you're looking for "blessing" before starting on such a project, you won't get one. your options are to do such work no-strings-attached and hope it gets merged, or to be content with status quo

1569956869
mq32
wb andrewrk!

1569956894
andrewrk
thanks. the hard drive on my home server finally died and I had to move some stuff

1569956905
andrewrk
lost all my music, most recent backup is years old :(

1569956938
konv
damn

1569956966
konv
also no js is good

1569956993
andrewrk
I want to point out the entire home page is 22 KB transferred with a cold cache

1569957049
mq32
damn, my sympathies! lost a lot of projects due to a dropbox bugs years ago. sucked...

1569957073
itsMontoya
Hey andrewrk, do you have a slack and/or discord for Zig? Or is IRC the primary?

1569957154
konv


1569957169
itsMontoya
Thanks konv!

1569957176
konv
:D

1569957189
marijnfs
andrewrk: dam, I made a backup tool in c++, I should port it to Zig

1569957274
itsMontoya
Is there anyone familiar with the async changes in .5? Or is it only andrew?

1569957289
itsMontoya
I wanted to code up a simple PoC messing with async changes

1569957295
konv
You can watch the livestreams

1569957311
itsMontoya
I was watching the last livestream and at the time he only had io.Read

1569957313
konv
watch the last two

1569957314
itsMontoya
Working

1569957330
itsMontoya
He said Write was still not done, but should have been before .5 release

1569957409
andrewrk
itsMontoya, there is a lot more to do as far as async/await stuff goes

1569957425
andrewrk
choosing evented I/O mode is still experimental

1569957450
itsMontoya
Is there any way to utilize async with a timer?

1569957459
itsMontoya
Let's say I wanted to fork a thread, sleep for 3 seconds

1569957464
itsMontoya
then return "hello world"

1569957662
andrewrk
yes

1569957835
itsMontoya
Ok, I'll re-watch the latest live stream and try to figure it out

1569957859
itsMontoya
Do you know roughly how far in you showed enough example for me to reference for this PoC?

1569957871
itsMontoya
Or even a gist of a code example

1569958399
andrewrk
itsMontoya, yeah let me put together a gist of the example

1569958579
itsMontoya
Thanks man :)

1569958583
itsMontoya
I'm really excited for these changes

1569958608
itsMontoya
If I get comfortable enough, maybe I can assist with an http server lib

1569958718
andrewrk
that will be valuable because that's one of the next things we need for the package manager :)

1569958760
andrewrk
itsMontoya, here's the example. I'm transcribing it now; I didn't keep any copies around on my system.

1569958899
scientes
I'm more interested in language features, rather than icing on the cake

1569958938
scientes
like I want comptime to work with a memory model

1569959130
andrewrk
scientes, yeah that's a high priority

1569959206
scientes
and libmvec needs symbol multi-versioning

1569959217
scientes
with hardware detection

1569959399
itsMontoya
OH this is great andrewrk

1569959419
itsMontoya
So anything can be async func if it has a suspend block?

1569959424
itsMontoya
Is that the determining factor?

1569960078
andrewrk
itsMontoya, yes, if it has a suspend point:

1569960715
scientes
<optimized out>

1569962272
mq32
andrewrk, i have hacked together some "real coroutines" (so: "threads light") with the new async/await stuff:

1569962293
mq32
is this the right way to use resume/suspend?

1569962302
mq32
(i know it's not the intended one)

1569962418
andrewrk
mq32, in your comment you suggest that storing frames in main() instead of the heap is problematic - actually the way you have it now is better

1569962428
andrewrk
why heap allocate when you don't need to?

1569962444
mq32
yeah for my example it works with storing it in main

1569962450
andrewrk
unless in a real usage, main() would return and you want the frames to live

1569962459
mq32
but for a more dynamic system (with different coroutines/thread functions)

1569962476
mq32
so when i have something like "player_loop" and "enemy_loop"

1569962491
andrewrk
that's a neat example

1569962493
mq32
those functions would have different frames, but could be suspended with the same scheduler logic

1569962582
mq32
but yeah, you're right. for the example, non-heap allocation is the right thing to do

1569962759
mq32
i'm still not happy with the solution in my snippet. probably improving the whole code until i am :D

1569962786
itsMontoya
mq32: Isn't this a potential race condition?

1569962815
mq32
no, my code right now is single threaded

1569962830
mq32
there is nothing "racing" against each other

1569962852
mq32
i'm even thinking about removing the need for a coroutine parameter and just set it globally

1569962853
itsMontoya
Right, but if this goes to multi threaded. That would need to be atomically set, correct?

1569962873
mq32
it would be much more complicated in a multithreaded environment

1569962890
mq32
there would be at least two variables required

1569962908
mq32
and some mutexes probably as wel

1569962924
itsMontoya
Totally, I was just thinking about future use. This is very cool though

1569962941
mq32
the coroutine would announce: "i am about to quit", then a scheduler has to remove that coroutine and shut it down safely

1569962953
mq32
my thought was actually cloning the Gamestudio API

1569962961
mq32
which uses coroutine for entity logic

1569963001
mq32
where you can write fully imperative, straight forward code for each entity and run them in parallel, with a function that "waits" a frame

1569963020
mq32
sadly, this is horribly implemented in the original engine and explodes as soon as you do

1569963303
itsMontoya
OH

1569963308
itsMontoya
Very interesting

1569963323
mq32
the concept is great, but semantics were much underdefined

1569963686
mq32
as i wanted to play around with zig and OpenGL, i could hack some simple demo together using such a system

1569963734
itsMontoya
hello_world/main.zig:6:20: note: referenced here

1569963748
itsMontoya
Is the error supposed to be this vague?

1569963787
mq32
this is not an error, but a note

1569963792
mq32
i think there's stuff missing

1569963792
andrewrk
itsMontoya, scroll up, the error notes are a bit out of control at the moment

1569963799
itsMontoya
Oh ok

1569963811
itsMontoya
Nothing is running, so I figured my note was causing an issue

1569963829
andrewrk
notes are attached to errors

1569963868
itsMontoya
Ah ok

1569963969
itsMontoya
w00t

1569963970
itsMontoya
Compiled!

1569964240
itsMontoya
error: container 'std.os' has no member called 'time'

1569964242
itsMontoya
Did this update?

1569964269
andrewrk
itsMontoya,

1569964279
itsMontoya
OH

1569964280
andrewrk
it's now std.time

1569964283
itsMontoya
I just saw it in your youtube lol

1569964284
itsMontoya
Sorry

1569964293
itsMontoya
"Oh! No os anymore"

1569964295
andrewrk
no worries :)

1569964345
itsMontoya
Is there any documentation on time lib?

1569964355
itsMontoya
Like it's available funcs/structs

1569964471
Tetralux
Nothing for anything, basically still.

1569964513
andrewrk
I've an idea to make std lib docs happen soon

1569964524
Tetralux
But `var t = time.Timer.start(); var time_since_start = t.read();` is useful to know :)

1569964544
Tetralux
.. time_since_starts is in nanos

1569964565
mq32
<andrewrk> I've an idea to make std lib docs happen soon

1569964566
mq32
♥

1569964709
companion_cube
sr.ht has this cool feature of hyperlinks between source files, wonder if the stdlib docs could have something similar…

1569964733
Sahnvour
andrewrk: can we get more details ?

1569964816
andrewrk
Sahnvour, stage1 dump json. self-hosted code parse & format into docs

1569964852
andrewrk
the process will be to do the stage1 json dump multiple times, and the self-hosted code will merge multiple & process multiple dumps  ("multibuilds")

1569964905
andrewrk
this way at least a large portion of the code can get re-used when we self-host

1569964928
andrewrk
this will also help with IDE integration until self-hosted is available

1569964934
itsMontoya
Hey andrewrk, I feel like I'm close

1569964935
itsMontoya


1569964951
itsMontoya
Would you mind nudging me in the right direction?

1569964996
andrewrk
itsMontoya, your addSlow function is resuming itself, it may as well be written to just do time.sleep(ns); x += 1;  - you're not actually taking advantage of async functions

1569965019
andrewrk
we also have std.time.ns_per_s

1569965052
itsMontoya
So what I wanted to simulate was a long task and waiting for it

1569965055
itsMontoya
Maybe I had another thread

1569965059
itsMontoya
do long task

1569965066
itsMontoya
and I could call await on it from the main thread

1569965076
itsMontoya
So I figured that was how I was supposed to handle it

1569965077
andrewrk
itsMontoya, look at @typeOf(frame), I think you may be surprised

1569965091
mq32
<andrewrk> Sahnvour, stage1 dump json. self-hosted code parse & format into docs

1569965104
mq32
this is a cool approach for "multibuilds"

1569965135
andrewrk
mq32, this way inferred error sets, for example, will be correct even if the set is different across windows and linux

1569965156
itsMontoya
Even though I'm not utilizing async per-say. How would I need to adjust this?

1569965164
mq32
i imagine some documentation where for each function, there is a marker like "Win32: error{OutOfSpace}, Linux: error{OutOfSpace,OutOfTIme}"

1569965174
andrewrk
itsMontoya, the idea is to do the work on another thread right?

1569965174
itsMontoya
The next step is forking a thread, making the work occur on that thread

1569965178
itsMontoya
YEa

1569965196
andrewrk
did you see the code from the video at the time that I linked to?

1569965202
itsMontoya
I'll watch it now

1569965209
andrewrk
just that one frame, look at the code

1569965210
itsMontoya
I have the screen open and I was referencing the code

1569965225
itsMontoya
sleepThreadRun?

1569965237
andrewrk
you can actually make a function `switchToAnotherThread();` with zig's async

1569965268
itsMontoya
OH

1569965274
itsMontoya
I see how you did it

1569965310
andrewrk
this will be especially useful with e.g. switchToGuiThread();

1569965781
itsMontoya
$ zig run main.zig

1569965781
itsMontoya
1 + 2 + 3 + 4  = 10

1569965782
itsMontoya
Yay!

1569965839
andrewrk
scientes, I'm going to try to merge 1 commit from your SIMD branch into zig per day

1569965840
mq32
that sounds like basic math is still working :D

1569965859
itsMontoya
mq32, aysnc math in another thread :D

1569965867
mq32
^^

1569965879
andrewrk
`await` and `return` are lock-free and thread-safe; go nuts

1569965905
itsMontoya
Whoa!

1569965929
andrewrk
also `suspend` and `resume`, which don't even require an atomic instruction

1569965950
itsMontoya
Does zig have interfaces or impl?

1569965954
andrewrk
no

1569965961
andrewrk
that part of the language is not stable

1569965965
itsMontoya
Ah ok

1569965970
itsMontoya
So for now, I'd lean on generics?

1569966044
andrewrk
or

1569966050
andrewrk
see for example std.mem.Allocator

1569966248
itsMontoya
I'll check it out :)

1569967148
itsMontoya
This is really cool stuff

1569967151
itsMontoya
Nice work andrewrk

1569967290
Sahnvour
andrewrk: just updated to master and I get `lib\std\debug.zig:227:9: error: invalid builtin function: 'atomicRmw'` when building libuserland, on windows

1569967297
Sahnvour
did I miss something ?

1569967354
itsMontoya
Sahnvour: Maybe something changed here?

1569967472
kllr_sbstn
andrewrk: is there any reason why there are consts for e and pi (in std.math) but not for M_PI_2, M_PI_4, M_SQRT2 and so on? I could create a pull request for that

1569967615
Sahnvour
itsMontoya: this concerns zig's std lib, the error I get is from the stage1 compiler

1569967748
itsMontoya
OH! Sorry

1569967757
Sahnvour
leaving for tonight, will investigate tomorrow if I find some time

1569967761
Sahnvour
no problem :)

1569967768
itsMontoya
Have a nice evening friend!

1569969395
andrewrk
Sahnvour: I think you're hitting the MSVC bad codegen bug

1569969437
andrewrk


1569969457
andrewrk
I had to change the CI server to MinSizeRel to work around this

1569969497
andrewrk
I looked at the relevant code and I don't think we're invoking UB. It appears to be a legit bug that Microsoft has acknowledged and is fixing

