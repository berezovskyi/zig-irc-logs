1569547579
andrewrk
nice we have our first mips regression caught by CI

1569547682
stratact
Awesome

1569547872
stratact
andrewrk: I know you're very busy, especially getting Zig ready for 0.5.0 this coming Monday and I was wondering if my PR is mergeable? Or are you saving it until after the release?

1569547926
andrewrk
stratact, ah, is that ready for review? I'll give it a look before monday

1569547940
stratact
It's been ready for a while :)

1569547952
andrewrk
nice I thought you had gotten frustrated and gave up

1569547998
stratact
I was getting tired of thinking about it and wanted to finish it up as soon as possible :)

1569548030
fengb
Was musl ported to riscv? Or does everything just work like magic

1569548117
andrewrk
fengb, I worked with dalias on riscv a bit when llvm9 came out, and carried the resulting patches in zig while waiting for a new release

1569548156
andrewrk
all the patches are upstream in master, except 40e77dad836abf130bf49af1838d108f0fc2e94e which I'm confused why they haven't merged upstream yet

1569548277
stratact
andrewrk: I'm sorry for being misleading though, I didn't give up on completing it. When you said that large fixed sized buffer are a-okay, that was the que for me to wrap the PR up and ship it. ðŸ˜„

1569548305
andrewrk
got it :)

1569548312
andrewrk
looking forward to reading it

1569548376
stratact
Should be a nice and easy read

1569548637
stratact
Oh I probably should rebase from master though, since std/ is in lib/

1569548712
andrewrk
I heard that git rebase is smart enough to figure it out

1569548741
stratact
Awesome, I'll try it

1569548913
fengb
Catching up on the stream and holy crap itâ€™s amazing to see the window library be maximally performant without knowing about async

1569549073
stratact
andrewrk: Perfection worked as expected. Rebased and squashed.

1569549106
andrewrk
thanks! hopefully will get a chance to peek tomorrow. I'm a bit behind on release notes quota today from the stream

1569549134
stratact
No worries and thanks

1569549136
andrewrk
and I still want to play Noita tonight :)

1569549576
stratact
Sounds fun. I'm rebooting into system upgrade, I'll brb

1569564753
nrdmn
eh, wasn't sure if I should move a few things in std/os/uefi, but I think I'll leave it for now.

1569564806
nrdmn
but I've added a PR for allocatePool and exitBootServices, which is what most OS developers will be looking for

1569566892
mq32
i'm just watching

1569571934
ceymard
is it possible to pass defines to `zig translate-c` ?

1569572450
ceymard
also, is it normal that translate-c bugs on .h files in my /usr/include ?

1569574742
ceymard
andrewrk: is there a way to find in the zig-cache the name of the file responsible for a cimport ?

1569577383
owl_000
currently zig version is 0.4.0, how long it may take to become v 1.0

1569577575
owl_000
safety becomes a big buzz word in programing space, how much zig focuses on safety.

1569577775
ceymard
null checked pointers that can't be null unless you tell them they can't be

1569577780
ceymard
can*

1569577784
ceymard
that and the whole slice thing

1569577795
ceymard
but for memory leaks you're on your own :)

1569577803
owl_000
i am looking for a language which i can keep in my head. zig seems to be that kind of language. best wishes for zig team.

1569577803
Yardanico
ceymard: well they're easy to fix :P

1569577811
Yardanico
just use valgrind

1569577814
ceymard
haha

1569579322
rifkik
lol

1569583908
ceymard
can I mix optionals and error types ?

1569583916
ceymard
what's the priority when used in if / else ?

1569583961
ceymard
if a value is Error!?Type and I use a payload in the if, do I get Type or ?Type ?

1569586421
_Vi
How do I @intCast from `?u64` to `?u32`?

1569586436
_Vi
Which way is readable and idiomatic?

1569586519
_Vi
Is `if(from_var)|x|@intCast(u32,x)else null` good enough?

1569586780
_Vi
Is there a cosy method to hex-print a byte slice in std? Preferably with abbreviation if it is too long.

1569588051
dimenus
unwrap the integer first

1569588057
dimenus
eg foo.?

1569588199
dimenus
but yes, your if statement will work as well

1569590136
dimenus
what's the target for rpi4 bare metal?

1569590723
dimenus
oops, ignore that question

1569594495
ceymard
just for fear that the question has been lost ; is it possible to find out which file a zig-cache/**/cimport.zig corresponds to ?

1569594527
andrewrk
ceymard, to pass defines to translate-c make a c file and do whatever defines you want in it

1569594529
ceymard
or does cimport contain every symbol ?

1569594544
andrewrk
actually zig now has -D as well

1569594549
ceymard
wow

1569594556
companion_cube
andrewrk: that qemu demo was insane

1569594561
ceymard
that's impressive

1569594574
ceymard
what about the cimport.zig file ?

1569594579
ceymard
does it contain every symbol ?

1569594593
ceymard
to all @cImport resolve to a single cimport file with everything ?

1569594599
ceymard
s/to/do/

1569594617
andrewrk
ceymard, use --verbose-cimport and it'll print the filename of the translated  zig file

1569594653
andrewrk
each @cImport will be done separately. It's usually advised to combine all your C imports into 1 yourself

1569594662
andrewrk
but there are use cases for not doing that

1569594703
andrewrk
owl_000, 0.5.0 is monday. it will probably be at least 2 more years until 1.0

1569594746
andrewrk
owl_000, regarding safety, someone asked a similar question yesterday and I took the time to make a detailed response:

1569595331
andrewrk
nrdmn, I'm pretty much going to accept any PR you send my way if it's UEFI related and doesn't affect anything else

1569595339
andrewrk
at this point I trust your judgement on these matters

1569595380
donaldallen
const lib = @import("../library/lib.zig"); results in the compiler error: import of file outside package path: '../library/lib.zig'. I can take care of this with a symlink, but curious as to why the relative path doesn't work.

1569595466
donaldallen
I should add that the relative path is valid and the symlink does work.

1569595651
andrewrk
donaldallen, this is in preparation for package manager. the best way to deal with this is not with a symlink but by setting the package root dir explicitly. --main-pkg-path

1569595681
andrewrk
a symlink introduces a system dependency into your project, and one of zig's main goals is to reduce system dependencies

1569595710
donaldallen
Ok, thnx.

1569595729
andrewrk
donaldallen, if it helps, the default main package path is the cwd from where zig is run

1569595839
donaldallen
I've got a directory for the whole project, with subdirs for each component, including the library. This occurred in building one of the components. Making the --main-pkg-path the project directory should fix this. I'll let you know if not.

1569595958
andrewrk
donaldallen, another way to solve this would be in your build script using addPackagePath. you can use this to create arbitrary mappings for use with @import

1569596223
donaldallen
--main-pkg-path works fine. Still building the old fashioned way, with a makefile, but switching to the build system is high on the agenda.

1569596276
andrewrk
oh, the cli version of addPackagePath is --pkg-begin [name] [path] and --pkg-end

1569596301
andrewrk
the build system is still invoking the CLI

1569596368
donaldallen
Thanks for the help. Gotta go ....

1569599089
keegans
how can i tell the zig build system to use the Android NDK sysroot and link against the libc ? the farthest i've gotten was some linking errors while looking for crt* stuff

1569599097
keegans
looking to build an Android aarch64 executable with zig

1569599118
andrewrk
keegans, have you looked at the --libc parameter and `zig libc` command?

1569599166
keegans
yes- not certain i fully understand it . i dumped the libc configuration for the default setup and then modified it a bit but ran into some issues , let me give it another try

1569599179
andrewrk
keegans, that's all I was asking, if you had tried that, ok

1569599208
Yardanico
keegans: hmm, you reminded me, gonna try to build zig in termux on android again

1569599233
andrewrk
keegans, zig probably needs some android-specific adjustments to link.cpp for android

1569599267
keegans
i'm willing to put in some work to get it going , i will just need a little bit of direction

1569599275
keegans
let me get back to the broken state where i was and then i'll work from there

1569599278
andrewrk
keegans, it will probably be helpful to look at what a c compiler puts on the linker line when targeting android, and compare to what zig is doing with --verbose-link

1569599295
andrewrk
keegans, I'll be here all day :)

1569599308
keegans
awesome :D i'll give the verbose link a try

1569599453
ceymard
is it normal that `zig translate-c stdio.h` segfaults ?

1569599456
ceymard
I suppose not

1569599573
Yardanico
btw, I'll also test some Zig stuff on an aarch64 android tv box with amlogic s912 (8 cortex a-53 cores + 3gb ram) when it arrives (I'll install linux there though)

1569599657
andrewrk
ceymard, segfaults always a bug

1569599709
rifkik
3 More days until 0.5

1569599764
keegans
yeah so it looks like it

1569599783
keegans
and from what i see with zig it tries to link against gcc_shared and crt1, Scrt etc.

1569599810
keegans
so that behaviour just needs to be corrected for android then i should be able to link against the Android NDK libc

1569599889
andrewrk
keegans, do you have --verbose-link output from zig?

1569599908
keegans
i did and then i lost all my previous work on this

1569599911
andrewrk
this output from gcc is good, this will help us solve it

1569599914
keegans
just give me a minute and i'll grab it again

1569600002
andrewrk
keegans, we can test adjusting the linker line by calling lld directly, and then update link.cpp with the knowledge gained

1569600106
_Vi
How do I cast `u64` to `?u64`?

1569600125
scientes
_Vi, there is an implicit cast

1569600147
Tetralux
(Which means `(?u64)(x)` - because confusing.)

1569600169
scientes
?u64(x), this isn't C

1569600181
_Vi
scientes, How do I use std.testing.expectEqual for `?u64` expected values?

1569600184
scientes
but that will go away

1569600192
scientes
and become @as(?u64, x)

1569600198
andrewrk
const x: ?u64 = y;

1569600219
_Vi
`(?u64)(x)` - this works.

1569600237
rifkik
Which reminds me

1569600240
keegans


1569600254
rifkik
I think my SNES emulator code has too much parens

1569600256
keegans
so it wrongly links against gcc shared and the gcc_eh lib

1569600260
keegans
as well as the wrong crt files

1569600294
keegans
i just edited the file to show the link errors as proof

1569600303
keegans
( so refresh the gist )

1569600365
Tetralux
scientes: I suspect ?u64(x) will not work.

1569600392
andrewrk
keegans, can I see your libc.txt?

1569600399
keegans
yeah i'll add it to the gist

1569600448
keegans
added.

1569600483
keegans
the link crtdir contains crtbegin.o  libgcc.a  libgcc_real.a

1569600746
keegans
yeah i modified the lld command that zig outputs and it links fine when i do the proper android stuff

1569600801
andrewrk
keegans, -lgcc is not needed; that's solved by libcompiler_rt.a

1569600838
dimenus
does anyone here use arch and have compiled the compiler_rt builtins for arm?

1569600864
keegans
it looks like the Android libc was statically compiled into it too

1569600866
andrewrk
keegans, I'm pretty sure we can get away without crtbegin_dynamic.o and crtend_android.o as well

1569600873
keegans
and it runs with qemu-aarch64

1569600881
keegans
ah ?

1569600912
keegans


1569600916
andrewrk
yeah that has to do with some stupid constructor/destructor thing that nobody in their right mind uses

1569600919
keegans
that was the script i used to link the produced Zig object file

1569600946
keegans
sounds good

1569600964
Yardanico
btw, is there a simple way to iterate over lines in file? or do I have to open the file, read the data, create a slicestream, and only then get stream of data from that?

1569601017
keegans
also when using zig build-exe how do i specify that i'd like a dynamically linked executable , just for future reference?

1569601026
andrewrk
Yardanico, did you see readUntilDelimiter functions?

1569601029
keegans
because i run this stuff in a chroot so there is really no need for this to be static honestly

1569601039
keegans
( since i ship the libc and android bins in the chroot )

1569601044
andrewrk
Yardanico, there isn't a non-allocating one though

1569601087
Yardanico
well yeah, basically that's what I used before

1569601209
andrewrk
keegans, -dynamic. zig generally tries to make things static where possible though

1569601267
keegans
ah i was misled by the description : -dynamic                     create a shared library (.so; .dll; .dylib)

1569601290
andrewrk
yes the description is outdated. that flag also does not have good test coverage for build-exe

1569601302
andrewrk
keegans, are you interested in submitting a pull request to link.cpp to make android stuff work?

1569601316
keegans
yeah , if that's cool

1569601337
andrewrk
yeah if you can describe the testing process; I'd like to try setting up the ndk and running some of the examples myself

1569601348
Tetralux
Wait - what does -dynamic actually do then?

1569601402
keegans
for sure . i'll get zig built and then hack away at it. i am not clear on exactly how i should get the NDK path from the user , though

1569601411
keegans
should there be like a configuration file or another flag in libc.txt ... i am not sure

1569601431
keegans
because we also need to request an Android SDK version

1569601462
keegans
and only like NDK 19+ is clang-only, so supporting old NDK versions is probably? not easily doable

1569601470
andrewrk
keegans, this is where the libc.txt file comes in

1569601500
andrewrk
the current fields are not adequate to find all the directories?

1569601569
keegans
is it possible for me to pass multiple link directories ?

1569601581
keegans
if so then yes i guess you could specify all the paths but it won't be exactly intuitive

1569601600
andrewrk
crt_dir and static_crt_dir are both link directories

1569601625
andrewrk
if it makes sense to do we can also add fields or adjust the comments on that file

1569601639
keegans
yeah i'll play around and let you know what's up

1569601642
andrewrk
that file is exactly for this purpose; if it's not correct then it needs to be adjusted to be correct

1569602024
rifkik
Should I upgrade my Emulator Code to Master now?, or should I wait until 5.0 stabilises

1569602118
andrewrk
master now

1569602126
andrewrk
0.4.0 is dead to me

1569602368
rifkik


1569603837
keegans
andrewrk: so can i specify multiple include dirs and library dirs with libc.txt ?

1569604659
FireFox317
6 more PRs merged and we have 1000 closed PRs, would be so nice if we have exactly 1000 PRs closed at the 0.5.0 release ^^

1569604719
rifkik
andrewrk, how much do you want to add and stabilise until you can make a 1.0 release?

1569604787
FireFox317
rifkik, so much. Just scroll a bit through the open github issue. Especially the accepted proposals and you will see some nice things there

1569606909
keegans
i compiled LLVM with z3 support, and that ultimately breaks the linking phase of Zig because it incorrectly links LLVM ( i.e. : doesnt use pkgconfig )

1569606931
keegans
what is the fix for this ? just patch it locally by linking against z3 explicitly in the zig_cpp target link libraries, or actually fixing the llvm linkage in the Cmake

1569606940
keegans
for now i have just patched it locally

1569607053
companion_cube
wait, llvm uses z3? :s

1569607090
keegans
you can optionally enable SMT solving for the clang static analyzer

1569607125
keegans
the flag is LLVM_ENABLE_Z3_SOLVER

1569607137
companion_cube
oh, static analyzer, right.

1569607152
keegans
yeah sorry what i said didnt actually make any sense now that i read it over lol

1569607767
andrewrk
keegans, that should work since we use `llvm-config --system-libs` in the build

1569607783
andrewrk
can you confirm that `llvm-config --system-libs` has -lz3 for you?

1569607801
keegans
ha nope

1569607803
keegans
it doesn't

1569607806
andrewrk
sounds like an upstream bug

1569607808
keegans
yep

1569607857
keegans
i'm almost done this android linkage stuff then i'll have to take a look over it to make sure i haven't gone and randomly broken other shit

1569608173
andrewrk
keegans, does the NDK come pre-built? (with the .o files and stuff) is it open source?

1569608248
keegans
yes and yes

1569608357
keegans
the libc is bionic which is also open but a massive pain in the ass to build

1569608373
scientes
and sucky

1569608384
andrewrk
typical google software

1569608449
andrewrk
wow even on the home page for bionic: # This is the biggest mess. The C++ files are ...

1569608486
scientes
nobody ever took that libc seriously

1569608488
andrewrk
if you write zig for android you might not need libc

1569608492
scientes
it was done that way to avoid glibc

1569608516
andrewrk
honestly it might be more worth to flesh out our own multi-target libc than to try to ship bionic

1569608517
scientes
andrewrk, well some libraries might need a libc

1569608526
keegans
yeah in my case i need bionic

1569608534
keegans
because i want to dlopen

1569608536
scientes
keegans, for what, specifically?

1569608551
andrewrk
does zig provide dlopen in its libc yet? let me check

1569608555
scientes
keegans, yeah but that is what libhybris does and its a blank hole of wasted time

1569608561
keegans
nah libhybris is great

1569608583
keegans
like yeah it is garbage but like when it works it is super useful

1569608593
andrewrk
hm not yet, but zig's libc will support dlopen eventually

1569608597
keegans
we used it to make

1569608607
keegans
which lets us launch Minecraft Android on Linux

1569608627
keegans
hybris is just a copy-paste of Android's linker code and then hacks to fix binary incompatibilties between glibc and bionic

1569608632
keegans
so you can load bionic applications on glibc linux

1569608644
keegans
i've used it for a many other android natives , too

1569608668
keegans
"zig's libc will support dlopen eventually" what do you mean ?

1569608685
andrewrk
zig has its own (not fully complete) implementation of libc that works for all targets

1569608691
scientes
by dlopen he means loading non-free bionic libraries

1569608709
keegans
right so you have to implement all the random garbage that the bionic linker does then too

1569608738
scientes
keegans, zig does namespace C symbols which means you can mix and match libcs (although that is not fully tested, and there might be problems that come up)

1569608750
scientes
*C names

1569608756
scientes
symbols is another namespace

1569608762
keegans
ah interesting

1569608768
andrewrk
keegans, yeah that's fine, that'll just be part of the arm-linux-android target

1569608811
keegans
cool ! i will certainly be using that linker for other things too then ...

1569608828
andrewrk
I'm describing vaporware, but the point is it's in scope of the zig project

1569608864
keegans
yeah

1569608897
keegans
ok with my changes ldd is complaining that it's missing __errno_location

1569608899
keegans
hmm

1569608916
andrewrk
that sounds like it should be provided by -lc

1569608917
keegans
right that doesn't exist on bionic, right

1569608937
scientes
ewwww, errno was a massive mistake

1569608948
scientes
what a stupid idea

1569608952
keegans
no i am saying yeah bionic does not have __errno_location

1569608953
andrewrk
oh, have a look here:

1569608963
andrewrk
keegans, ^ put android-specific logic here

1569608967
keegans
ah thx

1569608984
andrewrk
@import("builtin").c_abi == .android

1569609057
andrewrk
but you do need `_errno` to be a function that returns a pointer to an integer

1569609080
keegans
errno is a function in zig what ?

1569609110
andrewrk
this is just cross platform abstraction over libc errno

1569609157
keegans
ah

1569609170
andrewrk
how does errno work in bionic?

1569609186
keegans
__errno_location is just &errno on Android iirc

1569609225
scientes
that doesn't make any sense

1569609236
scientes
you can share globals between shared objects like that

1569609251
scientes
that's why you need a function that returns a pointer

1569609331
keegans
right so then __errno_location would be emulated with func(){return &errno;} i mean

1569609366
keegans
not sure the best way to do this , how do i even get errno as a symbol in Zig

1569609370
scientes
keegans, that still doesn't work, as the libc functions wouldn't where where &errno is

1569609390
scientes
ohhhhhh, you mean it is a elf global symbol

1569609391
keegans
its a relocated symbol , no?

1569609395
keegans
yeah

1569609407
scientes
yeah I'm not sure we have support for those in zig

1569609411
andrewrk
we do

1569609412
keegans
i see lib/libc/glibc/fns.txt

1569609417
keegans
but this is not glibc

1569609431
keegans
ill be back in 5

1569609508
scientes
(KEYWORD_export / KEYWORD_extern STRINGLITERAL?)? KEYWORD_threadlocal? VarDecl

1569609509
scientes
ahh yes

1569609515
andrewrk
extern "c" var errno() c_int; pub fn _errno() *c_int { return &errno; }

1569609529
andrewrk
it might need to be specified threadlocal

1569609532
andrewrk
which we also support

1569609564
Tetralux
Wait - `extern var errno() c_int` is valid syntax?

1569609576
Tetralux
A var with parens and a return type is valid syntax?

1569609587
andrewrk
typo fixed: extern "c" var errno c_int; pub fn _errno() *c_int { return &errno; }

1569609600
andrewrk
typo fixed 2: extern "c" var errno: c_int; pub fn _errno() *c_int { return &errno; }

1569609607
Tetralux
Was just gonna say ;P

1569609611
Tetralux
That makes more sense.

1569609639
scientes
still doesn't have to be assigned

1569609756
FireFox317
Yesterday's stream was so cool andrewrk!

1569609806
andrewrk
thanks :)

1569609878
andrewrk
FireFox317, oh, I just realized I forgot to demo -fstack-report

1569609907
FireFox317
Ah regarding the stack size usage with async stuff right?

1569610057
andrewrk
right, it helps explain what the frame sizes of async functions are and why

1569610073
andrewrk
it answers the question "why is @frameSize(foo) so big?"

1569610483
andrewrk
LemonBoy keeps giving me more release notes chores to do, now I have to talk about how zig supports cross compiling for mipsel-linux-musl

1569610646
keegans
/usr/bin/ld: errno: TLS definition in /usr/lib/libc.so.6 section .tbss mismatches non-TLS reference in libuserland.a

1569610651
keegans
/usr/bin/ld: /usr/lib/libc.so.6: error adding symbols: bad value

1569610672
andrewrk
keegans, did you see <andrewrk> it might need to be specified threadlocal

1569610681
keegans
oh

1569610685
keegans
no i missed that sorry

1569610689
andrewrk
no worries

1569610719
andrewrk
keegans, here's a little snippet of 0.5.0 release notes I typed up yesterday:

1569610739
andrewrk
it's quite a relevant example :)

1569610746
keegans
ah , thanks because it was not clear where the heck that threadlocal went

1569610752
keegans
as in what position

1569610816
keegans
have you considered adding some sort of attribute feature rather than making a keyword for all these things

1569610859
keegans
i can also think of a lot of cool things i could do with attributes and compile time reflection ...

1569610877
andrewrk
like this?

1569611000
keegans
sure but i mean i can have my own annotations as an end user

1569611043
Tetralux
Like `annotate(XXX)`

1569611082
keegans
yeah my thinking was i can mark really anything , function or struct with an annotation that has an arbitrary name and then i can pass whatever comptime stuff i want to it as well

1569611108
keegans
and noinline, threadlocal, and all this calling convention stuff can also just be an annotation

1569611125
andrewrk
that's a good proposal

1569611269
keegans
i will think about it a bit more and then write something up

1569611288
keegans
anyway back to what i was doing on Android -- why can i not have a top-level compile time if in linux.zig

1569611305
keegans
it is angry because it says invalid token if and i am unclear as to whats up

1569611315
keegans
or how i should implement this checking for ABI

1569611352
andrewrk
you can have top level compile time

1569611360
andrewrk
happy to help if you show the output

1569611396
mq32
andrewrk, cool thing pro annotations: you could comptime the argument (so changing calling convention by comptime computations)

1569611405
keegans
sure , thanks one sec

1569611467
keegans
andrewrk:

1569611653
andrewrk
keegans, I suggest to do this:

1569611687
keegans
yeah i wouldn't have been able to dream that up on my own

1569611689
keegans
thx

1569611707
andrewrk
files are just structs

1569611816
keegans
zig/lib/std/os/darwin.zig:7:5: error: import of '_errno' overrides existing definition ???

1569611935
andrewrk
can I see the full error

1569611983
keegans
andrewrk:

1569611993
keegans
i will say that the error formatting is annoying

1569611997
keegans
i gotta scroll all the way up each time

1569612022
andrewrk
keegans, what version of master branch are you working based on?

1569612044
keegans
just cloned like an hour ago

1569612069
keegans
then started my own branch

1569612165
andrewrk
hmm. this looks like something that was fixed by 2c8864f yesterday

1569612242
andrewrk
oh lovely I can reproduce this

1569612281
andrewrk
the big stack of "referenced here" is a recent problem, that won't stick around forever. it was originally to help with dependency loops, but I took it too far

1569612394
andrewrk
keegans, give me a minute I'll fix this

1569612436
keegans
thank you

1569613284
andrewrk
keegans, this has uncovered 2 separate issues, which I am interested in fixing. But not today. So I'm going to do a workaround here for you

1569613590
scientes
why does translate C create AstNodes?

1569613600
scientes
it seems it would be saner to create ZigType first

1569613612
andrewrk
scientes, you're looking at deprecated code. see

1569613780
scientes
oh OK, I just ran into the deprecated code not supporting gcc's vector extensions

1569613808
andrewrk
we're trying to move to self-hosted translate-c

1569613838
andrewrk
see src-self-hosted/translate_c.zig and `zig translate-c-2`

1569613850
scientes
which my patch set supports for creating C header files

1569613857
andrewrk
and test/translate_c.zig

1569613924
scientes
ahh its in clang.zig

1569613971
andrewrk
scientes, that file is synchronized with zig_clang.h and zig_clang.cpp

1569614041
scientes
and how do i get @cInclude to use translate-c-2?

1569614095
scientes
and i guess in the self-hosted code we could use ZigType without @reify

1569614101
scientes
*couldn't use

1569614138
andrewrk
scientes, that's not wired up because it's not passing enough tests

1569614152
andrewrk
you can see the coverage in test/translate_c.zig

1569614174
scientes
ok, guess i'll have to write my benchmark in C

1569614175
andrewrk
even in the self-hosted version your question is still applicable

1569614191
andrewrk
we're going from C-with-types to zig source

1569614204
andrewrk
creating a .zig file, and then that gets loaded and analyzed like normal

1569614221
scientes
oh yeah, Zig types are consts so we have to have ZigType there too

1569614223
andrewrk
we used to create zig types directly. I'm confident that going straight to source is a better approach, having done it both ways

1569614231
scientes
oh ok

1569614238
andrewrk
this is better for caching and debugging

1569614627
andrewrk
keegans, I'll open an issue for the other thing. It's a bug in Zig. Here's my suggested workaround for you:

1569614758
keegans
thanks

1569615471
keegans
ok it seems that this threadlocal approach is not working andrewrk , "lld: error: undefined symbol: __emutls_v.errno"

1569615487
keegans
the symbol is referenced from ./main.o:(std.c.linux._errno.getErrno) as expected

1569615513
keegans
so the symbol is not being bound to errno but rather __emutls_v.errno which is strange

1569615518
keegans
i did not know of this behaviour

1569615529
scientes
keegans, you need to use thread_local

1569615538
scientes
or whatever the zig keyword is

1569615539
andrewrk
I wonder if this is llvm or lld being too clever with the android target

1569615559
keegans
scientes: yes it is marked as threadlocal, which is the cause of this problem

1569615642
andrewrk
I'm asking in #llvm

1569615726
keegans
thanks

1569615773
andrewrk
keegans, is it aarch64 or arm? v8? v7?

1569615778
keegans
aarch64v8

1569615847
andrewrk
keegans,

1569615869
keegans
ha

1569615873
keegans
so they are doing some hackery

1569615986
andrewrk
keegans, can you join #llvm on OFTC?

1569615993
keegans
yeah one sec

1569616073
keegans
im here

1569616081
keegans
missed the context though

1569616276
keegans
so if i remove the threadlocal i now have `lld: error: undefined symbol: errno` what

1569616306
andrewrk
the symbol might be named something else, such as `_errno`. check the .o file / .a file with objdump

1569616316
keegans
oooh

1569616321
keegans
yeah it's __errno duh

1569616381
andrewrk
that's weird that it's not threadlocal though. how is that supposed to work?

1569616405
keegans
yeah good question

1569616415
keegans
i will investigate further soon

1569616418
keegans
anyway it links now !

1569616420
keegans
"./main": error: Android 5.0 and later only support position-independent executables (-fPIE).

1569616423
keegans
but it is not a PIE

1569616433
keegans
zig is not pie by default when dynamic ?

1569616471
andrewrk
keegans, make target_requires_pic return true in target.cpp when target_is_android is true

1569616480
keegans
will do thanks

1569616582
andrewrk
keegans, we may also want to introduce target_requires_pie (side note: love that function name) and make link.cpp check it for construct_linker_job_elf() and add -pie to the linker line in this case

1569616587
keegans
unfortunately it doesnt seem like that fixes it

1569616598
keegans
ah

1569616603
andrewrk
yeah the pic thing is still a good change to make though

1569616616
keegans
true^ and yeah that seems like a good way to go

1569616619
keegans
i'll do that

1569616628
keegans
what other platforms do i add to target_requires_pie , though ?

1569616629
andrewrk
we can talk about -dynamic making things PIE later, but this is still a good thing to do, force it on android

1569616631
scientes
yeah android requires pic

1569616644
andrewrk
only enable it for android for now

1569616667
andrewrk
it's just going to have 1 callsite, in construct_linker_job_elf

1569616670
andrewrk
for now

1569616718
keegans
:+1:

1569616790
keegans
"All your base are belong to us." success!

1569616797
andrewrk
keegans, this is good stuff, I think we're going to be able to add a column to the support table for Android after your changes are merged

1569616812
keegans
exciting !

1569616820
keegans
thank you for your help

1569616829
andrewrk
np, looking forward to your patch

1569616911
philipwhite
what is the right way to read stdout from a ChildProcess? I'm rather confused by the standard library. running v0.4.0, so maybe there's been some changes, but I imagine not too much.

1569618798
keegans
so i can no longer produce fully static executables like i could earlier hmm

1569618887
keegans
i'll put up the pr but i've gotta fix that before you should merge

1569618985
keegans
because it is confusing what libc do i link against anyway

1569619105
keegans


1569619603
keegans
if i have a project that may only be built for AArch64 android, can i set up my libc.txt in the build.zig somehow ?

1569620050
keegans
alright andrewrk ready for your review

1569620062
keegans
( no rush i am just letting you know )

1569622300
ceymard
mq32: I almost have something showable

1569622317
ceymard
complete works for imports, but also somewhat for cImport

1569622334
ceymard
the limitation being that it considers that you may have only one

1569622349
ceymard
and zig-cache should be at the root of your workspace

1569622380
ceymard
I'm also missing a couple of things, and completion is a little wonky ; it ignores for instance ?, * and !

1569622395
ceymard
also still no completion on switch () statements

1569622405
ceymard
but hey, it's still better than no complete. :)

1569622463
ceymard
also I have show symbol in order (ctrl+shift+o), go to definition (f12) and hover

1569622476
ceymard
they're all in fairly "alpha" stages though

1569622488
ceymard
but I'm getting there

1569623546
rifkik
zagSNES just hit 10 stars!

1569623744
keegans
now it's 11 :D

1569625002
ceymard
anyone wants to try out some klunky zig code completion in vscode ?

1569625014
rifkik
Sure!

1569625087
ceymard
you might have to remove the current extension first

1569625088
ceymard


1569625095
ceymard
clone it in your extension folder

1569625099
ceymard
it's still very much a WIP

1569625114
ceymard
but I'm trying to hack together something to wait until the stage 2 compiler is go

1569625127
ceymard
cause I can't live without intellisense :(

1569625130
ceymard
my life is sad.

1569625160
ceymard
oh, make sure zig is in your path or that you set it in the preferences

1569625203
ceymard
(also run npm install or yarn in the freshly checkouted folder)

1569625221
ceymard
it's js only, no compiled code

1569625239
ceymard
but so far it's showing promising results here

1569625264
ceymard
I'm interested in feedback

