1572480017
andrewrk
that was over a year ago, maybe 2

1572480029
daurnimator
Looks like there is no way for me to reply to your issue

1572480033
andrewrk
nothing is going to happen unless some wheels make some loud squeaks

1572480173
daurnimator
andrewrk: I get the feeling this is something to backchannel at conferences....

1572480204
andrewrk
I was rather thinking of holding their children hostage

1572480206
andrewrk
j/k

1572480295
pixelherodev
Aren't they engineers? What are the odds they even

1572480466
daurnimator
pixelherodev:

1572480640
pixelherodev
Uh

1572480643
pixelherodev
Oh wait

1572480647
pixelherodev
I see now what that was in response to

1572480648
pixelherodev
:P

1572480712
mikdusan
that webpage kinda feels like a video game

1572481049
pixelherodev
mq32, thanks for that interrupt cleanup, much more readable now :)

1572487245
pixelherodev
Was there an open issue for extending the standard library to import from the root source file in freestanding mode?

1572487252
pixelherodev
Or was that just a discussion we had here?

1572487378
daurnimator
andrewrk: did you ever look at my fifo paste?

1572487477
pixelherodev
andrewrk, I'm just about done with a blog post on Zig, would you like to look it over and give thoughts before I publish?

1572488359
daurnimator
pixelherodev: please do link once public :)

1572488514
pixelherodev
For sure!

1572489542
andrewrk
pixelherodev, sure

1572489606
pixelherodev
There an email to send it too?

1572489610
pixelherodev
Gah! s/too/to

1572489691
pixelherodev
Never mind, found it from your blog :)

1572489800
andrewrk
you could also check any one of the 4,622 commits in the zig git log :P

1572489829
andrewrk
got it

1572489834
pixelherodev
That was fast

1572490076
saskwach
Ok, I've read

1572490110
saskwach
Can someone explain the difference between []u8, [_]u8, [*]u8, and [2]u8, and in what contexts each is valid?

1572490116
saskwach
Or point me at something that does?

1572490183
daurnimator
saskwach: [] is a slice. which is a pointer and a length

1572490207
daurnimator
saskwach: [_] is an inferred length array. only valid when creating an array literal

1572490223
daurnimator
saskwach: [*] is a pointer to an unknown number of items

1572490255
daurnimator
saskwach: [2] is an array of length 2 (not a pointer to an array: but two elements of the type)

1572490344
daurnimator
saskwach:

1572490391
saskwach
Ok, so if I have a function that wants to process an array of, say 10 bools, it would have `arr: [10]bool` in its parameters, but if I want it to accept an arbitrary number of bools I'd have it take `slice: []bool`?

1572490412
daurnimator
saskwach: sure

1572490458
saskwach
Oh, hmm, so there's no such thing as an array of void pointers in Zig?

1572490482
daurnimator
saskwach: whats a 'void pointer' for your definition here...

1572490488
saskwach
Oh, those aren't void pointers.

1572490509
saskwach
I was confused by "T must have a known size, which means that it cannot be c_void "

1572490521
saskwach
but c_void isn't pointer to void, it's actual `void`.

1572490525
daurnimator
yup

1572490613
saskwach
Oh, is it true that `[100]void` takes up no memory?

1572490723
daurnimator
saskwach: I think so. same with e.g `[100]u0`

1572490843
saskwach
Also, if I have a struct that contains an array of bools that I want initialized to true, my reading of the docs is that I can do...

1572490846
saskwach
fn Foo(num: usize) type { return struct { stuff: [num]bool = [_]bool{ true } ** num; }; }

1572490890
daurnimator
saskwach: sounds correct to me

1572490899
saskwach
It seems to make the array const though.

1572490945
daurnimator
saskwach: your instance is probably const. did you do `const a = Foo(100);` ?

1572490957
saskwach
If I have a method in the struct that tries to set `self.stuff[0] = false`, I get errors about assigning to const.

1572490964
saskwach
Nope, `var`

1572490970
saskwach
I'm pretty sure...

1572490971
saskwach
checking

1572490994
daurnimator
saskwach: can you paste your code? (FWIW godbolt supports running zig so good for a pastebin)

1572491001
saskwach
fancy

1572491010
saskwach
Umm, I might have rewritten it since then.

1572491018
saskwach
I will the next time I manage to reproduce it.

1572491275
saskwach
I'm also a little confused about structs. Here's the set of rules I've inferred: If it's a member that takes up memory at runtime, it ends with a comma; if it's a method, it ends with its closing curly brace, and if it's a nested struct, it ends with a semicolon. Is that right?

1572491303
saskwach
Also, those three things can be mixed in with each other inside a struct?

1572491346
daurnimator
saskwach:

1572491488
saskwach
daurnimator, Huh, I must have done something differently. Thanks.

1572491529
daurnimator
andrewrk: why is sockaddr_un now part of IpAddress??

1572491609
andrewrk
daurnimator, where do you see this?

1572491673
andrewrk
it's the other way around. I had incorrectly done this with os.sockaddr, fixed in 0de862e8bafce9a58c1018e9b6f81b3d17279c10. see that commit msg

1572491678
daurnimator
andrewrk: "Previously I had made it a union ofsockaddr_in, sockaddr_in6, and sockaddr_un. The new abstraction forthis is now `std.net.IpAddress`."

1572491734
daurnimator
Ah looks like the code is fine

1572491734
andrewrk
yes the new abstraction for it is IpAddress,

1572491742
daurnimator
That'll teach me for just reading the commit message :p

1572491754
andrewrk
yeah I mean in your defense, it was wrong for a long time

1572491815
daurnimator
andrewrk: so the general thing when it comes to sockaddr, is that sockaddr_storage is everything except sockaddr_un. and then the customary name of sockaddr_any is everything including sockaddr_un

1572491892
andrewrk
pixelherodev, oops, I got distracted. reading now

1572492009
pixelherodev
No worries :)

1572492090
daurnimator
andrewrk: so std.net now has TcpServer .... but really there's only a couple of things that make it not also a valid unix socket server. the main thing being that it takes an IpAddress instead of a sockaddr....

1572492199
andrewrk
daurnimator, sounds like a nice improvement

1572492301
daurnimator
andrewrk: so I'd probably rename it to StreamServer or something.....

1572492323
daurnimator
or even ConnectionOrientatedServer...

1572492327
daurnimator
naming is hard.

1572492630
andrewrk
net.Server if it supports virtually every protocol

1572493220
daurnimator
andrewrk: sometimes you want to do e.g. connection-less UDP

1572493223
daurnimator
or multicast

1572493236
daurnimator
not everything fits the same paradigm/set of methods

1572493275
saskwach
I'm trying to print an array with gdb, and it's pegged my CPU.

1572493287
saskwach
This is...interesting.

1572493317
saskwach
It's 100 elements long.

1572493986
andrewrk
I can't reproduce this macos CI failure locally

1572495032
mikdusan
perhaps they bumped something on azure. yml file selects 'macOS 10.14' and I seriously doubt they began with SDK 10.15, yet failing logs show SDK 10.15 in being used?

1572495051
mikdusan
unfortunately a successful build doesn't tell me which SDK was used

1572495330
mikdusan
seems like Xcode 10.3 is being used for a build, against SDK 10.15; <-- this is not standard. Xcode 10.3 is supposed to have SDK 10.14

1572495438
mikdusan
and i'm thinking gcc-8.3.0 can't handle SDK 10.15 either

1572500856
andrewrk
mikdusan, ah, nice find

1572501161
daurnimator
andrewrk: shouldn't you be in bed? :P

1572501263
andrewrk
probably

1572514142
pixelherodev


1572514149
pixelherodev
That's the post I mentioned regarding Zig

1572514179
pixelherodev
Note that, while the post itself works, and the /index.html works, for some inexplicable reason going to the main page (

1572514454
euantor
I don't get a 404 on the index pixelherodev

1572514480
pixelherodev
... never mind then

1572514493
pixelherodev
Huh, just started showing up for me

1572519065
joethephish
Anyone watched any of Jonathan Blow's latest Jai programming stream? He's demoing how to do some metaprogramming by making a general purpose argument parser (that can fill a struct with arguments based on the types).

1572519078
joethephish
I'd been excited about Jai but now when I watch this stream I just think about how much more elegant it would be written in Zig! In this case of this stream there’s sooo much stuff that would be way better with Zig’s comptime features, and error handling too.

1572519093
joethephish


1572519121
joethephish
I find it interesting given that I think some Zig features were inspired by some Jai stuff?

1572520142
FireFox317
pixelherodev: Nice post!

1572520371
pixelherodev
Thanks!

1572520871
ntgg
is there a way to use -femit-docs with zig build?

1572529360
bgiannan
I built zig to investigate a compiler bug but i'm getting `Unable to dump stack trace: FileNotFound`. Am I missing something? The error being: `Assertion failed at /Users/giann/incoming/zig/src/analyze.cpp:5367 in type_has_bits.`

1572529480
bgiannan
ah found it, it doesn't like empty enum

1572535791
dimenus
is it expected to pass optimization flags and debug status in cflags when using build.zig?

1572535796
dimenus
or should that really come from the build options?

1572535810
andrewrk
typically the only flag you should be passing is -std

1572535832
andrewrk
everything that makes sense to propagate to C flags does already

1572535837
andrewrk
you can see this with --verbose-cc

1572536167
dimenus
getting up and running for embedded stuff on zig is so easy :)

1572536168
dimenus
well done

1572536200
andrewrk
:)

1572536215
andrewrk
there are a lot of open issues, but I think we're on the right track

1572536239
dimenus
is there an easy way to force a rebuild of your artifacts?

1572536280
andrewrk
not really. are you trying to use one of the --verbose flags?

1572536307
dimenus
yep

1572536326
dimenus
i can delete the cache, but that's not a good idea ( i spose i can just delete my artifact)

1572536334
andrewrk
you could make an edit that modifies the checksum

1572536395
saskwach
I figured out what was wrong with my build. I'm hitting

1572536414
andrewrk
goodness, that's a rather show stopping bug

1572536414
saskwach
Looks like llvm-9-dev is broken on Sid right now.

1572536433
andrewrk
apt.llvm.org has sid support

1572536489
saskwach
My plan is to just roll back to the previous version.

1572536528
saskwach
I'm kinda surprised they released the package like that though. It's hard to imagine how any tests passed when nothing links.

1572536769
saskwach
Looks like the version in experimental has it fixed. I'll try that.

1572537215
saskwach
Yep, looks like that worked.

1572539112
andrewrk
pixelherodev, are you going to submit your blog article to any news aggregation sites?

1572540126
dimenus
andrewrk: did you run into an issue when using llvm-objcopy where .text* didn't end up at the beginning of the image?

1572540144
dimenus
in most linker scripts I see for rpi3, .text begins at 0x80000 but in yours it's 0x0

1572540201
andrewrk
dimenus, you're probably looking at examples intended to be used with boot loader

1572540207
andrewrk
the boot loader itself will start at 0x0

1572540224
andrewrk
in my project the app itself is its own bootloader

1572540267
dimenus
andrewrk:

1572540267
dimenus
<dimenus> well done

1572540268
dimenus
oops

1572540348
dimenus
andrewrk:

1572540362
dimenus
this is just a base kernel

1572541248
pixelherodev
andrewrk, such as?

1572541385
andrewrk


1572541852
pixelherodev
I'll do that soon, yeah

1572542315
dimenus
andrewrk: here's my repo

1572542320
dimenus
while kernel8.img does not (this is the zig binary)

1572542399
dimenus
the *.elf files both show that the .text section begins at 0x80000

1572542454
dimenus
both call the same linker script

1572542645
kenaryn
Hello people, I have a very simple question and yet I think it is necessary for me to ask it anyway in order to be less ignorant (that is the pessimist way to say I need to learn): please what does it mean "out of the box"? e.g. Zig supports building for WebAssembly out of the box.

1572543037
andrewrk
kenaryn, it means that you need nothing except to unzip a tarball from ziglang.org/download, no other installation steps

1572543076
andrewrk
it also means that your system's configuration will not affect whether or not this feature is available

1572543079
kenaryn
Is is equivalent to an pre-built binary?

1572543157
andrewrk
the download page has pre-built binaries as well as source tarballs

1572543176
kenaryn
Allright, thank you for your explanation :)

1572543255
kenaryn
I have another question, is it a desired behaviour to NOT print the 'n/n test "my test name"... OK' input after successful tests for the last builds?

1572543288
kenaryn
Because there is now a little assymetry with the official documentation.

1572543362
kenaryn
sorry for the french, unsymmetry*

1572543363
andrewrk
good point

1572543389
andrewrk
recently I made this output more of a "progress bar" when stderr is a terminal

1572543432
kenaryn
Yes, it looks like a --quiet mode :)

1572543486
kenaryn
But it is understable, you like keeping a high signal/ratio like you said two weeks ago.

1572543500
kenaryn
understandable*

1572543571
kenaryn
high signal/noise ratio, sorry for the awkwardness

1572544619
andrewrk
mikdusan, it's also weird that it only has this error on util.cpp. that's not the first time we #include <stdlib.h> - other .cpp files do it

1572544653
mikdusan
interesting. i'll examine a local build here and see if some .cpp files have different flags

1572544675
pixelherodev
andrewrk, title suggestion for Reddit?

1572544827
andrewrk
doesn't your blog post have a title?

1572544913
pixelherodev
Yes, but it's also not a very good one :P

1572544933
pixelherodev
Literally just called it "programming languages" because it was 3 AM and I figured "I'll give it a real title later" and then I forgot to do that

1572544962
andrewrk
mikdusan, I fiddled with the #include order in 790d439ce2288 and that apparently fixed it

1572545454
kenaryn
It is of low importance but into the subsection

1572545966
mikdusan
andrewrk: include-order seems to have fixed the latest running CI build,

1572546004
andrewrk
mikdusan, I guess this is a bug in apple's libc that happens if you #include <stdlib.h> before anything else

1572546023
mikdusan
i suspect gcc830 is built against a particular SDK version and while it could be built against a different one, i think there is a kind of "binding" maybe related to gcc fixincludes, and figuring stuff out and it stays that way

1572546150
mikdusan
and yes i'm sure if we really spent the time, #include_next would be something involved here :)

1572546374
saskwach
Is there more to building the docs than `zig build docs`? It seems to be running a bunch of tests that fail when I do it.

1572546514
dimenus
andrewrk: i should have just looked directly at your repo, that answer my questions I think

1572546622
mikdusan
saskwach: not really. it's usually pretty easy to build docs. maybe post an error log

1572546722
saskwach


1572546736
saskwach
That's the output of "zig build docs"

1572546969
mikdusan
saskwach: i am only guessing, is your `zig` executable the same one built from your git workspace?

1572546988
saskwach
Yep, it is.

1572547105
saskwach
I just rebuilt/reinstalled it, to be sure.

1572547107
saskwach
Same error.

1572549497
waleee-cl
pixelherodev:  great article

1572549556
waleee-cl
for those that don't frequent /r/zig,

1572549557
waleee-cl


1572549704
pixelherodev
waleee-cl, thanks!

1572549724
pixelherodev
Pretty sure I posted the link here this morning though ;)

1572549813
waleee-cl
oh, sorry. I swear I saw andrewrk  asking about an article not that far ago in the irc logs

1572549858
waleee-cl
ok, it was the reddit post he asked about

1572549892
pixelherodev
He was asking if I was going to post it there, yeah

1572550959
companion_cube
surprised that ddevault help proofread this, I thought he didn't like anything with templates

1572550964
companion_cube
/generics

1572551419
pixelherodev
From what I've seen, he doesn't so much have a problem with generics as much as he does a problem with their effect on some languages - though of course, I'm not Drew, so it might be best to just ask him directly :)

1572551568
companion_cube
that'd quickly degenerate into a flamewar ^^

1572551569
saskwach
pixelherodev, our PL stories are very similar, though I expect mine is a bit longer.

1572551600
saskwach
Also, nicely written post.

1572551661
pixelherodev
Thanks!

1572551704
pixelherodev
companion_cube, I don't think "Hey Drew, given your article on generics and Go, do you think generics are inherently bad?" would devolve into a flame war, but I also don't feel comfortable talking about someone who's not in the chat, so let's end this here please

1572551711
companion_cube
:D

1572551761
saskwach
msg pixelherodev Oh, and D and Ada.

1572551774
saskwach
Well, I'm bad at typing.

1572551878
saskwach
I feel like there's another language category that doesn't get a lot of discussion: size.

1572551895
saskwach
C++ is a BIG language, as is Rust.

1572551934
saskwach
C is relatively small, though it's got a lot more surface area than one would think from casual use.

1572551946
companion_cube
rust isn't

1572551950
saskwach
Erlang is a small language.

1572551977
s-ol
hey, how do i define a function in a function? at comptime of course.

1572551983
saskwach
Rust isn't C++ big (yet) but it's got enough large/complex features that it gives me the same feeling as writing in C++.

1572552014
saskwach
Anyway, Zig feels like a small language so far.

1572552034
s-ol
im writing a function that wraps a C function, which takes a callback argument. I would like to implement the callback and forward to the zig handler provided to me as an argument (with different arguments)

1572552067
pixelherodev
saskwach, that's part of what I was referring to when I mentioned simplicity

1572552072
s-ol
so what I would want is for the function to be emitted at the call site, much like that printf example from the zig docs

1572552135
saskwach
pixelherodev: Yeah, I figured. It's just not an aspect of languages that gets talked about a lot. I think it gets lost in the high level/low level and static/dynamic, weak/strong discussions.

1572552143
andrewrk
s-ol, maybe you can look here for inspiration:

1572552291
companion_cube
saskwach: depends on what you call "size", too: size of the spec, of the compiler, of the base installation package, of the executables (if any)… ?

1572552341
saskwach
companion_cube: I'm using the very subjective measure of how much of my own internal RAM I need to dedicate to language features in order to write effectively in it.

1572552358
companion_cube
that's primarily a function of familiarity though :)

1572552366
saskwach
Granted.

1572552392
saskwach
Except with C++, where I'd argue that there are just huge numbers of things to keep in mind all the time.

1572552430
andrewrk
I made this last night, thought people might find it interesting:

1572552431
saskwach
The first time I wrote C++ code was over 25 years ago.

1572552431
companion_cube
exactly, no one can keep all of C++ in mind

1572552469
saskwach
andrewrk: I wrote exactly the same application last night. It will be interesting to see how our implementations differ.

1572552496
companion_cube
reminds me of the classic "fringe equality" problem, which is not trivial if you don't have coroutines or something like that

1572552635
saskwach
Ok, not exactly the same. Mine isn't parallel.

1572552792
saskwach
How much interest is there among people who are not me in getting Zig code running on AVRs? Also, has anyone tried generating AVR code?

1572552848
andrewrk
saskwach, yours is probably closer to the "Idiomatic Zig Implementation" which is noted at the bottom of that README

1572552886
andrewrk
AVR is still an LLVM experimental target, your best bet at this point will be teaming up with Rust community and other LLVM frontends to try to get better support in LLVM

1572552897
saskwach
andrewrk: Ah, I hadn't gotten that far down yet and was wondering what sieve2.zig was for.

1572552900
andrewrk
it is planned to have non-llvm backends in the self hosted compiler eventually, but that's a long way off

1572552930
pixelherodev
So what, going to use a separate IR? :P

1572552946
pixelherodev
Joking, joking; we've had this discussion before I think

1572552962
saskwach
Ugh, making backends for all the targets I use is such a huge task.

1572553051
andrewrk
indeed. shortest path to better AVR support is via LLVM.

1572553060
saskwach
I didn't see this discussion, and now I'm curious. What's the plan for the self-hosted compiler? Obviously generating LLVM IR gets you an awful lot. GCC hooks?

1572553087
andrewrk
first priority will be feature parity with stage1, so that we can start shipping self-hosted instead

1572553091
andrewrk
that means LLVM

1572553118
andrewrk
but then the next thing will be an experimental x86_64-only non-llvm backend whose primary objective is Gotta Go Fast

1572553139
andrewrk
compilation speed, not runtime speed. for debug builds

1572553183
saskwach
Ah, ok.

1572553185
andrewrk
but once this is done there will probably be a build option to disable llvm support altogether, since there's utility in a fully self-hosted compiler

1572553211
companion_cube
full wasm!!

1572553215
andrewrk
a compiler with llvm disabled will have translat-c and c compilation features unavailable

1572553232
andrewrk
which is why these components of the language/compiler will be an "extension"

1572553254
andrewrk
...in the official language reference, I meant to add

1572553289
andrewrk
s/reference/specification/

1572553294
fengb
Super late: C++ doesn’t feel big to start with, e.g. even classes can be mostly ignored. Rust has a lot of conceptual overhead you need to even begin

1572553316
companion_cube
I super disagree, but well

1572553321
pixelherodev
... I'm going to experiment with writing a translate-c that doesn't depend on LLVM later

1572553328
companion_cube
the basics of rust are tiny: sum types, functions, impl blocks

1572553344
saskwach
fengb: agreed. C++'s complexity sneaks up on you, while Rust's is right up there in your face the whole time.

1572553356
pixelherodev
That's not necessarily a bad thing

1572553370
pixelherodev
With Rust, once you overcome the initial hurdle, you're pretty much set

1572553372
fengb
Not sure that's a plus or minus, since C++ is notoriously complicated for all the wrong reasons :P

1572553372
companion_cube
C++ starts directly with the whole of C, and adds a ton of things on top (including a change in the semantics of `struct`)

1572553377
saskwach
I'm not judging. I like Rust a heck of a lot better than I like C++.

1572553385
pixelherodev
C++ will just keep attacking out of nowhere like some sort of bad ninja stereotype

1572553403
fengb
Rust is more honest

1572553404
companion_cube
cargo + error messages makes beginning in rust easier than in C++, imho

1572553404
pixelherodev
Okay, companion_cube, that's blatantly false

1572553412
pixelherodev
C++ is NOT a superset of C; C is NOT a subset of C++

1572553418
pixelherodev
They are

1572553426
companion_cube
pixelherodev: C++ is almost a superset of C, barring a few stricter conversion rules

1572553436
pixelherodev
No, it's not.

1572553440
companion_cube
wait, what?

1572553441
pixelherodev
It's almost a superset of C99.

1572553443
pixelherodev


1572553452
companion_cube
is C99 not C?

1572553453
pixelherodev
It's a superset of a defunct C standard

1572553455
saskwach
pixelherodev: that's true, but C++ was heavily marketed as a superset of C.

1572553463
pixelherodev
And it *was*, originally.

1572553483
saskwach
It was nearly. I don't know if it ever was, except maybe when it had a different name.

1572553486
pixelherodev
C++ isn't the only language that's been changing though; C's gotten better

1572553488
andrewrk
pixelherodev, write a C compiler in Zig that can compile stage1. yo dawg

1572553490
companion_cube
even nowadays, what features of C are not in C++?

1572553497
companion_cube
(_generic maybe, but, lol)

1572553506
pixelherodev
Read the link I posted, it contains a few

1572553526
pixelherodev
Sorry, C++ is more of a superset of C *89*, not 99

1572553528
andrewrk
yeah C++ diverged, especially with C11 :(

1572553530
pixelherodev
C99 code isn't valid C++ anymore

1572553543
saskwach
It's not so much about features that are present or missing. It's got very different semantics in some cases.

1572553548
pixelherodev
To quote floooh: `C++ is also not a ‘replacement’ or a ‘successor’ to C, it’s a fork which slowly ‘devolved’ its C subset into a slightly different dialect of C without much hope that the two languages can ever be united again`

1572553579
companion_cube
and they shouldn't. still, "classic" C is mostly similar to C++ (even the new int/bool types are)

1572553641
pixelherodev
C99 struct initialization is missing in C++

1572553646
companion_cube
ohhh, right

1572553650
companion_cube
that's a good point indeed.

1572553651
saskwach
I think the biggest mistake C++ made, and one of the things that attracts me to Zig, is that you can't really call C++ libraries from C code. There's no consistent ABI. So C is still the least common denominator even if you accept the premise that C++ is a better language.

1572553685
companion_cube
interesting how rust is simpler than both C and C++ when it comes to struct initialization…

1572553707
saskwach
It's that modern language thing.

1572553725
companion_cube
yeah

1572553737
companion_cube
also, there's only `if`, not `if` and `?`

1572553740
companion_cube
see, rust is simple ;)

1572553777
pixelherodev
Well yes, but by that definition C isn't simple either

1572553785
pixelherodev
It has some legacy features like trigrams

1572553792
pixelherodev
The comma operator is another fun one

1572553814
saskwach
In over a decade of writing C professionally, I have only once even considered using trigraphs.

1572553815
pixelherodev
It's actually pretty trivial to come up with a ~3 line snippet of valid C that will confuse most C programmers

1572553824
companion_cube
I don't think C is simple indeed

1572553837
saskwach
Not to say C is simple. It's got a lot of hidden surprises.

1572553864
pixelherodev
I completely agree. C isn't

1572553881
companion_cube
simpler than C++ is kind of a given :D

1572553887
pixelherodev
:P

1572553992
fengb
C's spec was too simple to actually map to the real world

1572554042
saskwach
C is designed to be easy to implement. That may have been the single most effective thing any language designer has ever done, when it comes to gaining wide deployment.

1572554043
fengb
I wonder how it'd have evolved if it actually had a reference compiler that was dejure standard

1572554057
andrewrk
semi related, I'm thinking that in debug mode, zig should pass -fsanitize=undefined when building C objects

1572554250
saskwach
Seems like a good idea.

1572554271
saskwach
UBSan isn't a panacea, but it's sure better than nothing.

1572554302
andrewrk
it's what zig already does for zig code

1572554633
andrewrk
to do this, zig will have to provide its own lib for diagnostics handling. clang emits calls to e.g. __ubsan_handle_pointer_overflow

1572556005
bgiannan
How do i convert a []u8 to a [*]const u8 ?

1572556185
andrewrk
bgiannan, foo.ptr

1572556198
bgiannan
ah of course silly me

1572556200
bgiannan
thx

1572556318
s-ol
is there a way to call a function with an argument sequence that is comptime known, but generic?

1572556359
s-ol
like, I have the TypeInfo of the function and I have matching values somewhere and I want to call it

1572556739
andrewrk
zig catching undefined behavior in C code:

1572557412
bgiannan
how do i tell zig where to look for a non-system dll ?

1572557466
daurnimator
pixelherodev: your blog post needs a better title

1572558306
wilsonk
pixelherodev: better title...but good blog post though :-D

1572560792
dimenus
andrewrk: nice

1572560880
daurnimator
andrewrk: how does that trap work on windows?

1572561079
andrewrk
daurnimator, it's an illegal instruction

1572561100
andrewrk
scientes,

1572561116
andrewrk
I want to get this SIMD stuff merged, what do you think about this plan that I outlined?

1572561149
daurnimator
andrewrk: ah: so it runs an invalid instruction in order to have the OS itself kick off the SIGILL equivalent?

1572561154
andrewrk
yes

1572561257
daurnimator
I guess we still need to set up windows exception handling?

1572561423
andrewrk
we have it already for segfaults, it might already just work for illegal instruction

1572561490
daurnimator
huh. TIL AddVectoredExceptionHandler

1572561583
andrewrk
another strategy which I have not yet explored is providing impls for __ubsan_handle_* functions instead of using -fsanitize-trap, which would then call the panic handler

1572561602
andrewrk
this would be better for freestanding, where an illegal instruction on the hardware isn't helpful

1572561631
andrewrk
unless maybe there's an interrupt for it? but that's hardware dependent

1572561633
daurnimator
would we want to use them for normal "safe" modes too?

1572561854
andrewrk
yes I think it makes sense to enable ubsan for safe modes when compiling C code

1572562274
dimenus
andrewrk: since I'm really in need of the SIMD PR, should I assist with peeling pieces off if I can or just leave it to scientes?

1572562562
andrewrk
dimenus, that would help a lot if you wanted to get involved

1572562575
andrewrk
idea is to break it into smaller more mergable pieces

1572562717
dimenus
makes sense

1572562724
dimenus
i'll give it a shot

1572563111
dimenus
andrewrk: when would a resolved type not have bits at runtime?

1572564148
andrewrk
dimenus, void, u0, struct with no fields

1572564176
dimenus
duh

1572565371
daurnimator
andrewrk: have you looked into oss-fuzz at all?

1572565426
daurnimator


