1570060801
itsMontoya
:)

1570060805
itsMontoya
Just wait

1570060809
itsMontoya
I think I have a pretty interesting idea

1570060817
itsMontoya
Can do both eager and lazy coroutines

1570061256
itsMontoya
I gotta head home, but I'm going to beg the wife to let me work on this more tonight :D

1570063566
andrewrk
itsMontoya: I think you may be interested to read the std.event.Loop code. Specifically if you initMultiThreaded()

1570063608
andrewrk
It creates a thread pool

1570064319
presiden
itsMontoya has quit 30min ago

1570064366
mikdusan
logged channel

1570067622
itsMontoya
Can someone link me to the use-case where you call async before fn

1570067627
itsMontoya
Like async fn add(a: i32, b: i32) i32

1570069067
itsMontoya
Hmmm

1570069075
itsMontoya
I was hoping to pass a pub method as a func

1570069079
itsMontoya
Let me copy my code

1570069264
itsMontoya


1570069284
itsMontoya
So I have the work func arg here

1570069298
itsMontoya
I was hoping this would fulfill that

1570069298
itsMontoya


1570070689
itsMontoya
Updated it :)

1570070705
itsMontoya
andrewrk: I'm having trouble finding any reference to that error

1570071331
fengb
Function expressions aren’t a thing yet

1570071770
itsMontoya
OH

1570071776
itsMontoya
So I can't do what I'm trying here?

1570071782
itsMontoya
I just updated the gist again

1570071785
itsMontoya
I thought I was getting close lol

1570071820
itsMontoya
fengb: You see this line here,

1570071839
itsMontoya
My HOPE was to do this.. var co = NewCoroutine(sa1.add);

1570071845
itsMontoya
But I was getting another error

1570071897
itsMontoya


1570071901
itsMontoya
^^^^ Error here

1570071907
fengb
This isn’t legal syntax yet: “const foo = fn() void { body }”. It needs to be “fn foo() void { body }”

1570071909
fengb
And functions can only be declared at the top level of a file/struct/union

1570071959
fengb
Bound methods can’t be passed around either. They have to be functions

1570072002
itsMontoya
That's a super bummer

1570072008
itsMontoya
My hope was the bound method would be treated as a func pointer

1570072024
itsMontoya
So then that could pave the way for interfaces

1570072036
itsMontoya
(or impl)

1570072058
fengb
Function pointers don’t have defined memory other than the pointer address

1570072064
itsMontoya
True

1570072078
itsMontoya
Is there any way I'd be able to accomplish what I'm trying to do here with the supported syntax?

1570072083
fengb
I think there’s discussion for closures or fat pointers

1570072094
itsMontoya
I saw some git issues about closures

1570072099
itsMontoya
I figured they were already implemented

1570072119
fengb
No closures yet

1570072130
itsMontoya
I think you can do a lot if there is a way to make struct methods more usable

1570072148
itsMontoya
Can get around the concept of interfaces/traits imho

1570072181
itsMontoya
I have to run, daughter has a cold. Going to help out the Mrs. I apologize with leaving more questions than answers :(

1570077938
sarahzrf
hmm, am actually getting slightly slower time from the zig version than the C version

1570077951
sarahzrf
im guessing its probably the overhead from error checking

1570077960
sarahzrf
i didnt do any checking of calloc return values in the c version >.>

1570077981
sarahzrf
and of course in the zig version there's error checking all over the place in order to propagate

1570077998
sarahzrf
only marginally slower tho

1570095495
ceymard
will the `fn <name>(...)` disappear in favor of `const <name> = fn (...` ?

1570095734
lunamn
ceymard: yes, see

1570097140
ceymard
shouldn't extern go with pub / const / var in that case ? aren't we referencing an external symbol ?

1570097158
ceymard
`extern const my_fn_from_c = fn(...`

1570097190
ceymard
oh wait there's a part about it

1570097196
ceymard
don't know if it made it into the spec

1570097224
mq32
ceymard, nothing of #1717 is "spec" yet

1570097287
ceymard
oh ok

1570097319
ceymard
ah there is no "spec" label

1570097344
mq32
nah, it's an accepted proposal, but as long as it's not implemented, it is neither spec nor real :D

1570097701
daurnimator
_Vi: you might have been looking for the 'non-exhaustive enum' proposal

1570097727
daurnimator
_Vi: you were probably also looking for `usingnamespace`

1570097744
daurnimator
andrewrk: whats the shortcut plan for docs?

1570097766
daurnimator
is it the 'make doc comments acceissble from @typeInfo' solution?

1570098221
mq32
daurnimator: the plan for docs is stage1 outputting json code that will be formatted by self-hosted

1570098487
telemach
hello, I continue to explore topic of interfaces; this time I took approach from this PR

1570098487
telemach
I like this approach because it's clear and straightforward, and also allows to have the type conforming multiple interfaces, and cast it back from interface when needed.

1570098487
telemach
Is anyone keen to help me to understand if this approach optimization-friendly? Is generated assembly any optimal for the task in my example?

1570098487
telemach
I renamed things a bit (because Interface there is more about Implementation inside actual interface type) and came up with this silly example:

1570098659
daurnimator
telemach: why the extra indirection via _compare instead of having the user provide the actual `compare`?

1570098703
telemach
just for the calling magic s1.compare(&s2), otherwise need to s1.compare(s1, s2)

1570098705
_Vi
Is there "safe navigation operator" in for optional field access in Zig?

1570098727
telemach
(with `&` before args ofc)

1570098801
telemach
does this indirection have cost expect boilerplate? i assume that it should be easily optimized out, but i don't know for sure and can't read assembly

1570098810
telemach
s/expect/except/

1570098879
daurnimator
_Vi: what would you want to happen if its null?

1570098895
_Vi
daurnimator, Return null, obviously.

1570098972
_Vi
If type of the field is itself nullable, then the result may be doubly nullable (preserves info) or just nullable (flattens).

1570099002
daurnimator
_Vi: in zig there is no non-safe navigation...

1570099017
daurnimator
_Vi: i.e. `x.foo.bar` isn't allowed if `foo` is nullable

1570099024
_Vi
Unsafe navitaion: `mything.?.myfield`

1570099055
_Vi
It is way shorter and nicer to type than safe analogue `if(mything)|x|x.myfield else null`

1570099115
daurnimator
_Vi: have you considered `orelse` and a slight change in your control flow elsewhere?

1570099207
daurnimator
`(x.foo orelse return null).bar`

1570099914
daurnimator
telemach: oh interesting that the self-passing doesn't work if its a function field

1570099987
mikdusan
_Vi:

1570102813
_Vi
How do I make comparable structs? Or how to I otherwise "wrap" a primitive type in some smart object with domain-specific functions and checks?

1570103002
mq32
_Vi, write a compare function for the struct

1570103008
mq32
Point.compare(a, b)

1570103477
_Vi
Maybe better `eq`? Are there standard names for such functions that correspond to primitive operators?

1570103485
_Vi
`a.eq(b)`.

1570104001
via
mem uses eql, could be some precedent there

1570104334
tgschultz
_Vi there is also std.meta.eql, which compares structs on a field-by-field basis if that helps at all

1570104586
_Vi
OK. So struct-specific functions that compares them while keeping field private should be called `eql`.

1570109578
mq32
it's really time for "use" to deprecate

1570111306
mq32
hm, i need some advice

1570111344
mq32
i want to wrap glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) to zig

1570111393
mq32
so my idea was to do "setData(self:Buffer, data: var, usage: BufferUsage)

1570111408
mq32
is that a sane idea?

1570112231
andrewrk
mq32, why not `data: []const u8`

1570113567
mq32
because i always forget we have something beautiful like @sliceToBytes

1570113765
kenaryn
Hello, please is there a discrepancy in performances between calling a builtin or using a keyword, e.g. @export builtin|export keyword?

1570113799
andrewrk
kenaryn, no difference

1570113807
kenaryn
Thank you sir.

1570113832
mikdusan
usingnamespace is too lazy?

1570113833
andrewrk
@export can be useful if you want to do comptime logic like this:

1570113870
andrewrk
mikdusan, I also ran into

1570114037
daurnimator
andrewrk: did we ever get a way to export something without a name?

1570114053
mq32
daurnimator, that doesn't really make sense, does it?

1570114062
daurnimator
mq32:

1570114118
mq32
huh

1570114167
daurnimator
mq32: the `_1` in there... shouldn't need to be

1570114725
mikdusan
if i read code correctly, the "payload" of decls brought in by usingnamespace are

1570114748
mikdusan
and later something triggers a load of payload decls from use_decls -> decl_table

1570114893
mikdusan
there are a few places (namely where I recently patched ir_analyze_container_member_access_inner to support VarDecl struct-method calls),

1570115066
mikdusan
ok i think i see the gap now. just thinking outload :)

1570115080
companion_cube
thinking out loud?

1570115134
mikdusan
yes

1570115599
andrewrk


1570115731
Cadey
that method works great

1570115741
Cadey
even better when you let the rubber duck talk back

1570115758
daurnimator
quack.

1570116052
presiden
\_o< (meow)

1570116208
mikdusan
heh nice

1570117290
daurnimator
mikdusan: I just came to a realisation far far too slowly. your nick is based on your name.

1570117421
mikdusan
nobody ever said I was original :)

1570117443
fengb
It's missing a letter

1570117496
companion_cube
wait until you realize that andrewrk's nick is also based on his name

1570117501
mikdusan
i can't even remember why i did that. maybe mikedusan was taken. or i wanted to limit to 8 chars.

1570117539
fengb
... I now read his name as Andrew R Kelley

1570117541
fengb
Unfortunate implications >_>

1570117651
jaredmm
andrewrk, just as confirmation: the epoxy linking issue happens with a normal C program, so it is something about how it is built on Windows that causes the problem. Only difference I noticed between a working and not working Windows .lib was that the code section included the exported symbol a second time.

1570117688
daurnimator
companion_cube: yeah. but somehow in my head I read it as "andrew work"

1570117715
companion_cube
"andrew worker"

1570117725
companion_cube
it's just one of his worker threads

1570118234
andrewrk
jaredmm, thanks for the follow-up

1570118376
andrewrk
scientes, I'm going to play around with the way you implemented vector element access. I might need to make some adjustments

1570118899
scientes
121/803 behavior.bool.test "behavior-mipsel-linux-none-Debug-bare-multi bool vectors"...test failure

1570118900
scientes
qemu: uncaught target signal 11 (Segmentation fault) - core dumped

1570118906
scientes
see, this is buggy qemu, not zig or llvm

1570118924
andrewrk
scientes, as an example, this crashes the simd branch, where `v` is a vector:  const ptr = &v[1];

1570118932
scientes
SIMD support in qemu is buggy, arm-32 too (arm64 seems to work)

1570118948
scientes
andrewrk, oh yeah, that needs a special exception, which I forgot to put in

1570118957
andrewrk
I'll be happy to rework the Array accesses on vectors commit, but it'll take me some time

1570118974
scientes
yeah I can work on the address not being possible

1570119001
andrewrk
I think this is the same problem as taking the address of a non-byte-aligned packed struct field, which requires additional metadata into the pointer type

1570119016
scientes
except here you just can't take the address

1570119018
andrewrk
and we should just embrace that. a zig pointer type can have metadata that tells you how to access the vector

1570119021
scientes
gcc ang clang will both error

1570119030
andrewrk
that's the same thing with packed structs

1570119090
andrewrk
hmm, you got it working with runtime indexes though, nice. that's a difference

1570119330
andrewrk
scientes, here's a question that I think you are the best poised to answer. would making the vector index required to be comptime be problematic?

1570119356
scientes
andrewrk, not currently, but for RISC-V (which isn't supported by LLVM yet, but they are working on it)

1570119370
scientes
which has variable-length SIMD

1570119370
andrewrk
in what way would that be problematic?

1570119379
scientes
the length is run-time on RISC-V

1570119391
andrewrk
hmm is this what the vscale thing is designed to address?

1570119416
scientes
not sure what that is

1570119428
andrewrk
search for "vscale" on

1570119468
scientes
yes

1570119509
scientes
stage1 will require a overhaul once llvm figures it out, but I have tried to not create problems in the zig code

1570119526
andrewrk
OK, I want to think through this carefully

1570119551
scientes
like maskedLoad and maskedStore are very x86-specific and deprecated

1570119591
andrewrk
it's an important design consideration whether or not the appropriate vector length is comptime-available or not

1570119609
scientes
It is on current architectures

1570119708
andrewrk
I want to learn more about this runtime vector length risc v thing

1570119727
scientes
Mill CPU does the same thing, but that is still vaporware

1570119869
daurnimator
the hardware is vapor...

1570120086
scientes
<andrewrk> and we should just embrace that. a zig pointer type can have metadata that tells you how to access the vector

1570120109
scientes
but you really can't take a pointer

1570120112
scientes
just copy the value

1570120132
scientes
but I guess "pointer" could be reference

1570120156
scientes
and could even support pointer arithmetic

1570120186
andrewrk
scientes, if the index is comptime known, then the index can be part of the pointer metadata. this is how packed structs work

1570120186
scientes
anyways, for now I think it should just be disallowed

1570120202
scientes
ahhhh, I see

1570120230
andrewrk
so that's why it's pivotal whether or not we decide if indexes are allowed to be runtime

1570120300
scientes
oh yes, that's really useful

1570120309
scientes
even if on some architecture it has to be done with bit shifting

1570120340
scientes
no, i think it works on every architecture i've used

1570120403
scientes
I think pointer should be pointers, and they are with packed structs (its just that its a sub-byte pointer)

1570120421
scientes
and in that case it can be runtime too if you just use the high bits

1570120430
scientes
or whatever

1570120464
andrewrk
another option is that index syntax has to have comptime indexes but additionally provide @vectorLoad(v, runtime_index) and @vectorStore(v, runtime_index, new_elem_value)

1570120480
andrewrk
so you can have a "pointer" to a vector but the index has to be comptime known

1570120488
scientes
I don't see that pointers of vector elements is useful at all

1570120499
scientes
and its not even a pointer

1570120533
scientes
If archs supported run-time choosing of vector register it would be differnt

1570120535
scientes
but they don't

1570120589
scientes
andrewrk, cause you wouldn't be able to assign the "pointer" to one vector to the "pointer" to another vector

1570120600
andrewrk
why not?

1570120603
scientes
because the vector register an instruction references is fixed

1570120614
scientes
it would have to refer to the

1570120618
andrewrk
it's the same as integers

1570120626
andrewrk
vectors have a well defined in-memory layout

1570120632
scientes
but we don't have pointers to registers

1570120638
andrewrk
we have pointers to integers

1570120674
andrewrk
zig doesn't have the concept of registers; it only has the concept of memory

1570120695
scientes
ahh yes I see, and then it can be run-time

1570120705
andrewrk
but certainly we are relying on the optimizer to convert memory loads and stores to registers where appropriate

1570120707
scientes
I don't think LLVM knows how to optimize this

1570120717
scientes
you would have to write  to memory and then write back to the register

1570120765
scientes
yeah I get your point

1570120777
scientes
the compilers have just been lazy with vectors

1570120821
andrewrk
in zig a vector is very much like an integer

1570120829
scientes
we could just stack allocate all vectors

1570120835
scientes
like we do with integers

1570120840
andrewrk
and we already support sub-byte pointers to integers

1570120841
scientes
and then we could do this

1570120846
andrewrk
I think we already do that...

1570120855
scientes
oh yes we do

1570120883
andrewrk
yeah even in your branch

1570120912
andrewrk
what I'm suggesting is that in the same way zig already supports sub-byte pointers to integers, that might be the best way to do per-element pointers to vectors

1570120927
scientes
yeah, I think you've convinced me

1570120933
andrewrk
and we can still provide runtime element index access builtins for that use case

1570120941
scientes
no, we can do both

1570120949
andrewrk
this will make all zig pointer semantics work correctly

1570120950
scientes
run-time and comptime index

1570120959
scientes
the problem with that is that the pointer is bigger

1570120972
scientes
at least on 32-bit arches

1570120976
andrewrk
the point of comptime index is that the pointer can be not bigger

1570120983
andrewrk
because the index will be part of the type

1570120990
scientes
oh no, it isn't bigger!

1570121001
scientes
its just pointing to the stack, and its aligned!

1570121004
scientes
so you can use the low bits

1570121006
andrewrk
right

1570121033
scientes
except that only works for byte-sized array elements

1570121046
scientes
and llvm bit-packs sub-byte-sized vector elements

1570121054
scientes
sorry, not array there, then the packing is differn't

1570121068
andrewrk
the runtime address will point to the base of the vector. the comptime pointer metadata will inform how to access the element

1570121110
scientes
we still have 4 bits free

1570121120
andrewrk
yes I'm not even suggesting to use these bits

1570121165
scientes
hmmmmm....id rather support run-time indexes, have it point to to the element, and just have addrof not work on weird-sized integers

1570121177
scientes
in vectors

1570121237
scientes
although then its quite a hack with getelementpointer

1570121314
scientes
yeah, i guess comptime index support is better than no index support, ok agreed

1570121325
andrewrk
&v[2] would have type of something like this, assuming v is @Vector(4, i32) type:   *align(16:0:4:2) i32

1570121354
andrewrk
here I appended another : field to packed struct syntax, this way we can even refer to sub-bytes of elements of a vector

1570121370
scientes
I don't see this a reason to change the syntax

1570121416
andrewrk
`*align(4:0:4) i32` is status quo syntax; and in fact `*align(4:0:4) i32 == *i32`

1570121421
scientes
hmm, I haven't used that type of syntax. RISV-V also has pretty cool bit-shuffle instructions

1570121453
andrewrk
if pointers gain additional metadata for vectors, then it makes sense to add this other field

1570121571
andrewrk
for:  `*align(16:0:4:2) i32` it would mean: "this is a 16-byte aligned address, pointing to index 2 of a vector of i32 elements. Offset starting from bit 0, and the size of the containing integer is 4.

1570121584
andrewrk
this is that bit_offset_in_host, host_int_bytes, thing you were asking about

1570121607
scientes
ahh thanks for the explination of the syntax, i was looking for that

1570121615
andrewrk
let me rephrase the explanation

1570121621
scientes
I think I get it

1570121645
scientes
but vectors don't need the bit_offset and host_int fields

1570121658
andrewrk
for:  `*align(16:0:4:2) i32` it would mean: "this is a 16-byte aligned address, pointing to the base of a vector of i32 elements. We refer to a 4-byte integer at index 2 of the vector, offset starting from bit 0

1570121659
scientes
and they should never be packed like that

1570121682
andrewrk
you could put a vector into a packed struct

1570121699
scientes
oh I guess that is OK

1570121706
andrewrk
hmm that's not quite what this situation would cause

1570121707
scientes
all this stuff is comptime

1570121727
andrewrk
yes, usually nobody would even see these types; it would just look like normal indexing worked

1570121751
scientes
and in this case pointer arithmetic can also be supported

1570121752
andrewrk
but if you tried to do foo(&v[1]) then you'd get something like, expected *i32, found *align(x:y:z) i32

1570121784
andrewrk
(unless you used the correct parameter type, in which case it would work fine!)

1570121796
scientes
yes it would!

1570121802
scientes
as we are not bound to C functions

1570121870
andrewrk
I think I would make the argument that this comptime index restriction is a good place to start

1570122114
scientes
I want to support runtime indexes too

1570122117
scientes
that can't be remove

1570122153
scientes
yeah I'll have a stab at this

1570122601
andrewrk
one way to do that would be to provide  @vectorLoad(v, runtime_index) and @vectorStore(v, runtime_index, new_elem_value)

1570122617
andrewrk
this way they avoid going through a pointer type

1570122626
andrewrk
so you cannot have the &v[x] problem

1570122688
scientes
I'm still not convinced these pointers are useful at all

1570122690
andrewrk
this would probably be the most straightforward way to implement, to avoid having to introduce any additional complexity to the compiler

1570122695
scientes
i see a little use though

1570122714
andrewrk
well you already had to add a hack to avoid pointers

1570122738
scientes
i realized that f16->f128 should be implemented with @shuffle

1570122741
scientes
if you use vectors of u1s

1570122762
andrewrk
this is not sound:

1570122766
scientes
considering that RISC-V now has a bit-shuffle operation the optimizations might actually arrive

1570122795
scientes
yeah i turned it into a pointer as you say

1570122916
scientes
we still don't need the special intrinsics

1570122921
scientes
you just do v.*[4]

1570122928
scientes
or v.*[i]

1570123008
scientes
It isn't that unsound

1570123018
scientes
that's the whole point of SSA is that you can do things like that

1570123080
scientes
and LLVM's neededbits can even prune it

1570123317
scientes
the vector and the index belong together

1570123381
scientes
And I can't even emit that error until codegen.cpp because analyze doesn't have a use list like LLVM does

1570124073
scientes
and types are not resolved when the AddrOf is handled

1570124176
scientes
but that is due to not having an instruction for AddrOf

1570124181
scientes
and just assuming that things are addresses

1570124724
scientes
Hah! gcc 9 now works with constant indexes into vectors!

1570125064
scientes
and variable indexes

1570130684
andrewrk
who is the person who was working on some kind of LSP support?

1570130687
andrewrk
or something like that

1570130853
fengb


1570130974
andrewrk
they were in here a few days ago mentioning it

1570131025
fengb


1570131070
andrewrk
ah yes I think that was it

1570131093
andrewrk
ceymard, I think you are going to be happy with the changes I'll be pushing today

1570131468
Cadey
how do i target wasi in zig?

1570131484
Cadey
-target wasm32-wasi-musl isn't working

1570131500
andrewrk
in what way is it not working?

1570131514
Cadey
Zig is unable to provide a libc for the chosen target 'wasm32-wasi-musl'.

1570131535
andrewrk
that message is accurate

1570131544
andrewrk
what do you need libc for?

1570131562
andrewrk
the wasi spec is incompatible with libc in a lot of ways

1570131644
Cadey
i was curious if i could use zig as a c cross-compiler

1570131726
andrewrk
you can do that for all the targets listed under "Available libcs:" in `zig targets`

1570131745
andrewrk
we've got a W.I.P. wasm32-freestanding-musl libc

1570131748
andrewrk
no wasi one yet

1570131803
andrewrk
it's likely whatever c code you wanted to cross compile would be fundamentally incompatible with a wasi libc

1570131824
andrewrk
things like memcpy, strlen, etc can work, but wasi doesn't support e.g. the concept of a current working directory

1570131832
andrewrk
or any networking

1570131843
andrewrk
or lots of stuff. it's not very mature

1570131857
andrewrk
I mean even as a specification

1570131877
daurnimator
libc doesn't have to provide that stuff...

1570131905
Cadey
so how would i get a pure zig program building against wasi?

1570131925
daurnimator
Cadey: use freestanding rather than trying to link libc?

1570131942
Cadey
should i -target wasm32-wasi?

1570131958
andrewrk
Cadey, your -target param is fine (you can drop the musl if you want, it doesn't matter), but you need to omit -lc

1570131966
Cadey
okay

1570131992
andrewrk
it's just bare bones support in std and some stuff may have regressed because we don't have test coverage for it

1570132015
andrewrk
shritesh did a bunch of nice contributions for wasi but lost interest months ago, and nobody else is driving the use case (until you, right now)

1570132043
fengb
You can also try plugging in the defacto wasi-libc:

1570132043
Cadey
fair enough lol

1570132117
Cadey
what is the default abi for wasm32?

1570132129
fengb
Not defined

1570132159
fengb
Only pointers and u32s are allowed externally atm

1570132184
fengb
It's actually a bit of a problem since the spec doesn't bother defining an ABi

1570132198
Cadey
what value should i put in build.zig?

1570132223
andrewrk
Cadey, .none

1570132226
fengb
Oh... I put musl there

1570132234
andrewrk
musl is fine too

1570132241
fengb
lib.setTarget(.wasm32, .freestanding, .musl);

1570132249
fengb
Oh does .none work? I should do that :P

1570132471
Cadey
this is weird, the default hello world app from `zig init-exe` works when i build it with `zig build-exe -target wasm32-wasi src/main.zig` but not with this build.zig:

1570132505
andrewrk
in what way does it not work?

1570132618
Cadey


1570132698
andrewrk
I can reproduce this

1570132742
andrewrk
I'm guessing std/build.zig is incorrectly choosing the artifact extension name or something like that

1570132825
andrewrk
Cadey, std.build.Target.exeFileExt is incorrect, it doesn't know about the .wasm extension

1570132859
andrewrk
you can see it doesn't match target_exe_file_ext from target.cpp. I'll update it

1570132870
andrewrk
it's also wrong for UEFI

1570132976
andrewrk
Cadey, fix pushed to master

1570133008
Cadey
i'll patch my local copy of std/build.zig

1570133077
Cadey
yep that did it

1570133078
Cadey
thanks!

1570133142
fengb
Curious, what will you be making in WASI?

1570133266
Cadey
i'm trying to see if it's possible to make an echo server

1570133315
Cadey
oh

1570133321
Cadey
apparently you just can't in WASI

1570133333
Cadey
they don't have an ability for programs to create sockets

1570133338
andrewrk


1570133339
Cadey
they can only inherit them from parents

1570133342
Cadey
:(

1570133606
Cadey
how the heck does nginx work then?

1570133667
Cadey
oh

1570133670
Cadey
emscripten

1570133671
Cadey
boo

1570134023
andrewrk
emscripten can't self host yet:

1570134159
Cadey
andrewrk: yeah, i more mean they compiled nginx to wasm using emscripten, which makes a javascript wrapper around a subset of linux system calls

1570134260
andrewrk
yeah, sorry I was selfishly changing the subject

1570134273
Cadey
:+1:

1570134274
andrewrk
I want them to finish self hosting so I can make a zig "sandbox" that is just client side javascript

1570134297
Cadey
i half wonder if wasi is good enough for compiling zig to it

1570134302
Cadey
er

1570134305
Cadey
like the compiler itself

1570135351
samtebbs
I'm getting an error whose @errorName is "Overflow". Is that only caused by addition overflow?

1570135411
andrewrk
samtebbs, if you grep the std lib for `error.Overflow` there are only a few places that comes from

1570135424
andrewrk
mostly std.math functions

1570135571
samtebbs
andrewrk: Thanks, I'm getting it when using std.debug.openElfDebugInfo

1570135580
samtebbs
I'll look into what could be causing it

1570135595
samtebbs
Working on freestanding code does make tracking down things like this difficult

1570135603
andrewrk
yeah

1570135617
andrewrk
you might be able to set up a non-freestanding unit test

1570135877
samtebbs
Perhaps I could. My setup is quite involved though, I'm loading my kernel's elf file as a grub module then creating a SeekableStream using the start and end of the module, then passing that to openElfDebugInfo

1570135890
samtebbs
There's quite a few places where things could be going wrong xD

1570135960
samtebbs
I see that the error is returned in leb128.zig as I've seen that leb128 is used to decompress some parts of elf files

1570135977
samtebbs
and I've seen*

1570136260
FireFox317
Is zig target armv7 to be used for an armv7-A core? I can't find a target arm-v7a

1570136344
andrewrk
FireFox317, I believe the "a" is a target feature, which would be handled by

1570136478
FireFox317
Uhm well, Clang has the triple armv7a-none-eabi. Are you sure it is a target feature?

1570136623
andrewrk
I think they parse that as: arch: arm, sub-arch: v7, features: +a

1570136890
FireFox317
Ah yeah that makes sense

1570136940
andrewrk
(I didn't understand this until a few months ago)

1570140105
andrewrk
I think this will make people happy:

1570141723
samtebbs
andrewrk: That's pretty cool. I've been wanting zig to be able to do IDE-like analysis and code completion which this would help with

1570141734
samtebbs
Are you planning on doing the html generation?

1570141778
andrewrk
I'll at least start it, to entice contributors

1570141795
andrewrk
there's nothing more motivating than something that kinda works but is easy to improve

1570142098
keegans
andrewrk: does #3372 work w/ building the zig std

1570142115
keegans
as in, how could i dump type analysis on the zig std

1570142172
andrewrk
same as testing the std lib, except add -fdump-analysis to the cmd line

1570142203
keegans
ok so it does, cool , ill give that a try now thx

1570142204
andrewrk
./zig test ../lib/std/std.zig -fdump-analysis

1570142226
andrewrk
I already ran the tests locally, I'll merge into master

1570142290
andrewrk
firefox has a built in json viewer which can be handy

1570142431
keegans
assert(@import("std") == std); is failing with the command you sent?

1570142488
keegans
hmm yeah i am yet to have run tests on Zig before, perhaps i have mucked something up

1570142542
scientes
is ???????????????bool really a type?

1570142555
keegans
:D

1570143826
samtebbs
keegans: Try adding `--override-lib-dir lib`

1570143871
samtebbs
Or ``--override-lib-dir ../lib` if that is where the lib folder is

1570144243
keegans
thx

1570145318
samtebbs
No problem

