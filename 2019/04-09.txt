1554768020
scientes
these are a joy to read

1554768024
scientes
PIC doesn't have to be so bad

1554768036
scientes
I have a bug in lld that it should use the pc as an offset

1554768043
scientes
when it is in the same binary

1554768056
scientes
its so obvious i can't believe no-one did it

1554768094
scientes
you still get position-independant-code, but without the slowness

1554768271
andrewrk
That's neat

1554768285
scientes
the linker just has to fill in the offset

1554768324
scientes
its a single extra instruction

1554768344
emekankurumeh[m]
I know it's kinda soon but do you have a projected date for the next release cycle?

1554768352
scientes
emekankurumeh[m], llvm 9

1554768362
andrewrk
Yep, check the milestone on GitHub

1554768377
emekankurumeh[m]
i forgot that they sync up

1554768397
scientes
oh two instructions on x86, because x86 doesn't let you set the destination register of add

1554768401
andrewrk
scientes is correct. The date I put there is my prediction of when it will be 1 week after LLVM 9

1554769853
companion_cube
congrats on 0.4!

1554773356
shritesh
Late to the party but Congratulations!!!

1554773375
hryx
emekankurumeh[m] who told you about the cabbages

1554773439
hryx
(kidding)

1554773454
hryx
shritesh nice work on those fixes for 0.4

1554773481
shritesh
hryx: you too

1554773495
hryx
^_^

1554773515
hryx
next release will be more groundbreaking I'm sure

1554773565
shritesh
Definitely!

1554773644
shritesh
Going through the release notes and I'm like Damn!

1554773708
hryx
so shritesh I know you and I both worked on a lot of formatting issues for this last release (you did more than that too)

1554773715
hryx
what do you have planned for the next release cycle?

1554773839
shritesh
I just went through the issues and tackled the ones that I could understand lol.

1554773889
shritesh
But I do have interest in WASM and GPUs so maybe those?

1554774067
shritesh
Also, what would be the best for the project?

1554774137
emekankurumeh[m]
a spirv backend would pretty cool for writing shaders in zig

1554774199
hryx
shritesh: I know andrewrk is intersted in WASM developers so I totally encourage you to work on that

1554774246
shritesh
I definitely will.

1554774258
hryx
I am working on rewriting the parser as recursive (1729)

1554774270
hryx
this will take a couple weeks, as predicted in the ticket

1554774284
shritesh
emekankurumeh[m]: ..and GPGPU kernels

1554774312
shritesh
hryx: that looks exciting.

1554774324
mikdusan
i was fooling around writing toy parsers and found that i really REALLY like union(enum) for state. works so nice with switch statements.

1554774361
hryx
thanks shritesh, I agree -- pretty much the benefit of this is to make development easier for future developers

1554774397
shritesh
I come from an FP background and when I saw that union(enum) are really sum types, I was sold.

1554775338
Hejsil
Gratz on the release, zig team and all other contributors!

1554776004
scientes
PARTY!

1554777278
scientes
mikdusan, i was just going to comment, that for most purposes you never really need to decode utf-8, only validate it

1554777299
scientes
both UTF-32 and zextened  utf-8 are 32-bits a character

1554778996
mikdusan
i agree.

1554783027
andrewrk
congrast to you too Hejsil :)

1554783116
emekankurumeh[m]
it might be good idea for someone to make a learnxinyminutes.com tour for zig

1554783118
andrewrk
looks like we got our 15 minutes of fame

1554783188
scientes
oh yeah hacker news front page

1554783189
emekankurumeh[m]
i saw it on hackernews but i don't remember seeing it on reddit

1554783194
Hejsil
andrewrk, just posted an issue to celebrate the release!

1554783278
andrewrk
Hejsil, a perfect end to a release day: more bugs!

1554783310
emekankurumeh[m]
technically that's issue #1214

1554783337
emekankurumeh[m]
i think

1554783485
Hejsil
emekankurumeh, well not exactly. I'm not proposing we embed fields, I'm simply stating that since files are now structs, use should work on structs like it works on files

1554783509
Hejsil
But i guess that is part of the issue you point too

1554783528
emekankurumeh[m]
but wouldn't that lead to embedding fields as well?

1554783555
telemach
many C libraries use prefixes as poor man's namespacing; when i do @cImport in Zig I end up with stuff like soundio.soundio_outstream_begin_write

1554783571
andrewrk
it's funny, the programming language posts with less content get more responses. maybe everybody is still reading the release notes :)

1554783580
telemach
which is totally tolerable, but Terra for example allows you to apply rewrite rule

1554783606
telemach
to remove prefix and you have just proper namespace

1554783633
andrewrk
telemach, generally I import all the C stuff into a namespace called `c`

1554783643
Hejsil
emekankurumeh[m], currently we can have fields at top level, but those are not imported with use. Use only imports declarations

1554783659
telemach
probably i should do the same

1554783667
telemach
at the moment i split it into groups

1554783684
andrewrk
telemach, I made a brief note of this here:

1554783788
emekankurumeh[m]
are the imported symbols "references"? for example if i have `var f` in `a.zig` and `use @import("a.zig")` in `b.zig` would changing `f` in `b.zig` change it in `a.zig` as well?

1554783951
Hejsil
emekankurumeh[m], I would think so, but I'll check real quick

1554784074
Hejsil
Yep, they are "references"

1554786237
emekankurumeh[m]
andrewrk: regarding hash functions for build caching have you seen meow_hash?

1554795054
daurnimator
andrewrk: congrats on the release!

1554795578
shritesh
Homebrew has zig 0.4.0 now

1554797723
tiehuis
andrewrk: think the download page has been reverted to an older on ziglang.org, only showing the 0.3.0 release

1554797734
tiehuis
index.json is still up to date showing 0.4.0

1554797766
tiehuis
ahh darunimator: was actually looking at the aur package right this second

1554798432
daurnimator
tiehuis: I'm working on adding it to community right now :)

1554798439
daurnimator
tiehuis: currently I just ran into

1554798485
tiehuis
have you applied that force dynamic patch?

1554798509
tiehuis
just updated it locally and it looks alright, i'll push and you can test it if you want

1554798573
daurnimator
tiehuis: I asked andrewrk yesterday if it was still needed and he said no.

1554798620
tiehuis
i tested without that patch and i was still getting a similar error

1554798918
tiehuis
updated the zig aur packaged for arch to 0.4.0

1554798925
tiehuis
let me know if there are any issues

1554798961
daurnimator
tiehuis: so both patches are still required?

1554799111
tiehuis
the dynamic one yes, the stage2 artifact just cleans up the install target, since we are only using stage1

1554799196
daurnimator
tiehuis: why does it need cleaning up?

1554799530
tiehuis
just checked, since it was a while since i added that, doesn't have any unncessary artifacts on removing that patch, going to remove it

1554799556
daurnimator
tiehuis: I just tested. it does: it has a whole build/ output dir thing.

1554799568
tiehuis
oh, sorry didn't modify my PKGBUILD completely

1554799578
tiehuis
left the patch in prepare()

1554799628
tiehuis
ahh yes, seeing the extra 10MiB

1554799666
daurnimator
tiehuis: have a look at the package with namcap

1554799667
daurnimator
ccccccevclvkrgdiuuklrjtkccnhnrkgjeihfkfhbigj

1554799710
tiehuis
yeah, i'll make an issue upstream since that should be better

1554799727
tiehuis
those artifacts are needed to build the stage2 compiler, but the way they are installed looks wrong

1554799743
daurnimator
yeah they seem to install to build/ ?

1554800054
daurnimator
something else to fix later: all the misc includes get installed to /usr/lib/. they should be in /usr/share

1554800412
daurnimator
tiehuis:

1554801083
tiehuis
won't you still need the llvm package itself for the headers?

1554801123
daurnimator
tiehuis: yeah got small changes there. trying to figure out how to change it to actually run tests

1554801132
daurnimator
zig doesn't seem to like running tests

1554801180
tiehuis
yeah it can be a bit funny, it should use the std library found relative to the binary anyway but i'd need to confirm that again

1554801197
tiehuis
you could try with --override-std-dir

1554801326
tiehuis
actually, should this should work `./zig build --build-file ../build.zig test-std` as expected in check()

1554801349
tiehuis
choosing the appropriate tests, of course

1554801366
forgot-password
Hey andrewrk, can you add a link to the 0.4.0 release notes on the Homepage in the "Reading and Viewing Material" section?

1554801399
tiehuis
nevermind what i mentioned, didn't have a clean environment

1554801541
daurnimator
tiehuis: it fails with Unable to find zig lib directory

1554801704
tiehuis
alright, looks like it checks for the existence for a zig_lib_dir even when an overriden std dir is specified

1554801720
tiehuis
let me check see if i understand this right and i'm not missing something

1554801776
tiehuis
ahh right it still is required for the include dir (for c headers) and there isn't an explicit option there

1554802432
very-mediocre
congrats on shipping 0.4.0

1554802980
gamester
Okay guys time to hold me accountable: I've just registered zig-game.com as a temporary domain name for my project. Before zig 0.5 I will have a blog post on there on how zig helped me do x/y/z, I will have code examples from my project to show people what Zig code looks like, I will have screenshots/videos, I will have a WASM light-weight 3D renderer (written in Zig) for online previewing of certain types of mods that my game will eventually

1554802980
gamester
support, and I will have a list of features that I aim to finish before 0.6 to show that this is an active project. When 0.5 is released I will talk about my project for a bit to try to hype Zig, cause it's a crazy good language and people need social proof! Just remember that this is early in the project, it doens't even have a name, and won't be marketed towards gamers any time soon.

1554803199
schme245
cool, looking forward to the blog posts!

1554803252
very-mediocre
gamester: webgl renderer i presume?

1554803714
gamester
very-mediocre: That's a good question. I'm not sure what the state of webGPU is at the moment, if Chrome begins supporting initial versions of webGPU then I might go directly to it, simply because it's closer to Vulkan which is what I'm using.

1554803787
gamester
I'm not really worried about supporting everybody since this is just for viewing mods

1554803805
very-mediocre
main reason I asked is there are currently a lot of very cool software rendering experiments being done lately

1554803879
very-mediocre
i've been itching to do one but i'm swamped with work sadly

1554803901
very-mediocre
zig seems like the weapon of choice for something like that

1554803943
very-mediocre
zig + some blitting backend probably in c (I haven't thought this through yet...)

1554804571
Kingsquee
tfw already have a ton of rust game engine code

1554804585
Kingsquee
tfw zig didn't exist when I started

1554804595
Kingsquee
why is life so cruel

1554805065
telemach
Kingsquee: what's particularly wrong with Rust?

1554805115
Kingsquee
telemach, it is still averse to most compiletime anything

1554805157
telemach
do procedural macros help in any way or am I missing the essence of the problem?

1554805159
Kingsquee
also type-level numerics

1554805189
Kingsquee
telemach, proc macros can't be used in functions

1554805245
Kingsquee
they can be called *like functions*, but are completely useless for anything you'd pragmatically expect to use a proc-macro for, like compiletime string hashing etc

1554805393
Kingsquee
the whole compile time evaluation situation in rust is a cacophony of different kinds of macros, overlimited const fns, and build system invoked rust code

1554805452
Kingsquee
imo it comes from their insistence on making compiletime things a special case to

1554805606
Kingsquee
also rust has had a bunch of niggling issues that probably won't be much better for any young language, so I'll spare those frustrations

1554805618
Kingsquee
but the fact they broke dynamic library support in a stable release still irks me

1554805920
telemach
huh, i missed that, i mean breaking dl support

1554805926
telemach
do you have a link?

1554806104
daurnimator
0.4.0 now available on arch:

1554806504
very-mediocre
maybe silly: I find stuff like this not intuitive `std.io.BufferedInStream(os.File.ReadError)`

1554806524
very-mediocre
there's no explicit indication that it's returning a type

1554806565
very-mediocre
maybe a convention ought to be used, e.g. `std.io.BufferedInStreamT`

1554806634
very-mediocre
+ instantiation happens lated with a chained `.init()`, in another language with say a `new` keyword this ambiguity would be averted preemptively

1554806854
very-mediocre
maybe extremely silly: I almost want it to be std::io::BufferedInStream<os.File.ReadError>

1554806857
daurnimator
very-mediocre: convention is that if the first letter is caps it returns a type

1554806904
telemach
I get

1554806905
telemach
/Users/rprakapchuk/tmp/zig-libuv/zig-cache/o/Va9QCs88ZDCwrqWsuc1915kvQ6lSsxV3lW3JMIiQlPa5LKPsq8m99pEd6McJitKA/cimport.zig:1736:15: error: dependency loop detected

1554806905
telemach
close_cb: uv_close_cb,

1554806906
telemach
^

1554806908
telemach
/Users/rprakapchuk/tmp/zig-libuv/zig-cache/o/Va9QCs88ZDCwrqWsuc1915kvQ6lSsxV3lW3JMIiQlPa5LKPsq8m99pEd6McJitKA/cimport.zig:1752:15: note: referenced here

1554806910
telemach
close_cb: uv_close_cb,

1554806912
telemach
^

1554806916
telemach
trying to use libuv

1554806970
very-mediocre
daurnimator: you're right of course, maybe it's just a bias I have, but I don't find it intuitive

1554807044
telemach
this is relevant part of cimport.zig:

1554808267
very-mediocre
ok I take it back, need do things zig's way

1554809075
desperek
hi, so are you looking forward to make all the "core" things like os/file etc. have docstrings and then generate docs from that?

1554810602
Hejsil
andrewrk, is there a way to get the path to the test executable even if all tests pass. I want to run valgrind on the tests

1554811399
Hejsil
Hmm. Passing --verbose-link is a way to get the test exe path, but then I'll have to cheat the caching system to force a relink

1554811440
Hejsil
Not a big problem, but it would be nice to just have zig test print the path before running all tests

1554811523
bheads____
can you use --outout-dir and --name to control it?

1554811578
Hejsil
I probably can, but I don't really want it to be somewhere is. I just want to have the path to it. zig test already prints the path if a test fails so you can run gdb on it

1554811598
bheads____
gotcha

1554813998
emekankurumeh[m]
telemach have you seen

1554817161
fengb_
Hey, v0.4.0 isn't linked on

1554817200
fengb_
I'm assuming

1554817332
daurnimator
fengb_: should be.

1554817360
daurnimator
fengb_: I'm curious: why do you choose to download the binary instead building from source?

1554817497
fengb_
It's a little easier to pull into Docker

1554817557
daurnimator
interesting. I hadn't thought of a zig docker container. is there a semi-official one around yet?

1554817564
fengb_
Especially since zig doesn't have any dependencies, it's drop in and go

1554817646
daurnimator
I wonder who manages that

1554820365
tgschultz
building against C on windows broke for me somewhere between 0.3 and 0.4. What's the equivelent of --kernel32-lib-dir and friends now? is it just --library-path? What about -libc-include-dir? -isystem didn't seem to function as a replacement.

1554820489
daurnimator
the 0.4.0 release notes include a bit about std.ArrayList.shrink.... is that correct?

1554820505
mikdusan
tgschultz: maybe this will help:

1554820534
daurnimator
tgschultz: I assume you know about `zig libc`?

1554820836
tgschultz
zig will never detect my libc installation because it isn't actually installed, I just need to point it to where it can find stuff.

1554820910
tgschultz
ah, ok, these seem to have just been moved to that file instead of the command line

1554820941
tgschultz
thanks

1554821100
daurnimator
fengb_: see also

1554821722
gonzus
Hey. I am trying to compile HEAD on my mac and I get this:

1554821724
gonzus
-- Could NOT find CLANG (missing: CLANG_LIBRARIES CLANG_INCLUDE_DIRS)

1554821741
gonzus
I did to a brew install llvm

1554821746
gonzus
*do

1554821767
gonzus
And clang does work... I think.

1554821769
japanoise
you need the clang development libraries too

1554821794
japanoise
not sure how to do it on mac, unfortunately. what I did was install it from source

1554821883
gonzus
Ah, I see. I was going to say I can compile a hello world program with clang, but ok.

1554822183
gonzus
Blergh... I tried this and it doesn't recognise the option: brew install llvm --with-toolchain

1554822216
companion_cube
is converting a whole project from C to (unidiomatic) Zig, something envisioned?

1554822380
scientes
yes

1554822395
scientes
well, idiomatic

1554822412
companion_cube
I mean, with C pointers at first, then you can edit and use the right pointer type, this kind of stuff?

1554822414
scientes
companion_cube, the point is that you can slowly switch a c or c++ project to zig

1554822420
scientes
exactly

1554822434
companion_cube
ah yeah but I mean a tool to initially turn all .c files to .zig files

1554822443
scientes
its called c-translate

1554822453
scientes
its part of the zig tarball

1554822464
companion_cube
is it supposed to be complete? as in, never failing?

1554822475
scientes
no, it fails on some stuff

1554822488
companion_cube
can I read on the limitations somewhere?

1554822489
scientes
but zig also embeds clang, and can compile c code

1554822529
scientes
Zig uses the C ABI so it can interact with C on a first-class basis

1554822545
companion_cube
yeah but if you're converting a big project, doing it by hand is… a lot of work

1554822554
scientes
the point is that you convert one piece at a time

1554822562
scientes
it gives you a migration path

1554822569
scientes
you don't have to rewrite

1554822576
scientes
you just re-write when you need to change things

1554822585
scientes
and you can do that in zig, because of the tools it gives you

1554822621
scientes
there are many things C does very well, and zig isn't trying to change that

1554822641
scientes
it is just trying to be better :)

1554822675
companion_cube
oh well, nevermind then.

1554822735
scientes
companion_cube, never mind on what?

1554822766
companion_cube
on the idea of covnerting from C to zig

1554822800
scientes
zig gives you all the tools to do that

1554822813
scientes
the point is that you would never do it if it had to be done all at once

1554822850
donpdonp
reading through the 0.4.0 while picking my jaw up off the floor. phenominal work! kudos! zig is a breath of fresh air.

1554822865
companion_cube
rust has some tools to do that (converting all at once into unidiomatic rust)

1554822879
scientes
so does zig

1554822895
scientes
just run "zig translate-c"

1554822913
scientes
zig even has c pointers to make it work better

1554822935
scientes
because the improvements zig makes to pointers doesn't work well for c code

1554823000
companion_cube
cool, so what are the limitations of translate-c ? like, is it going to work on a realistic large C project?

1554823013
scientes
I haven't used it in a while

1554823036
tgschultz
the biggest limitation I recall is translating macros

1554823046
tgschultz
many will work, more complicated ones often wont

1554823063
companion_cube
that makes sense.

1554823092
scientes
tgschultz, how about falling back to doing translate-c on the pre-processed file?

1554823092
tgschultz
it's improved a lot since I last used it, so anything else I recall is probably obsolete.

1554823140
tgschultz
that should work as far as I know. Last I'd used it it was already really good at non-macro C.

1554823202
companion_cube
nice. the other tricky part, I guess, is how to 'translate' the build system

1554823951
tgschultz
man, I guess I really haven't been paying attention to recent changes. I had no idea Allocator interface changed.

1554824010
scientes
yeah i noticed

1554824018
scientes
i also noticed it makes too many mmap calls

1554824022
scientes
i should fix that

1554824126
scientes
is there a quick way to make an empty slice?

1554824650
gamester
scientes: Here's what the general purpose allocator does that Andrew is working on: (([*]u8)(undefined))[0..0]

1554824655
gamester
that's for a slice of u8

1554824674
scientes
ok i did it with foo.len = 0

1554824676
scientes
but that is better

1554825962
tgschultz
andrewrk: put me down for a "me too" on #2073

1554826047
scientes
tgschultz, he's got alot on his plat copy-elision and co-routine re-write is blocking alot of things

1554826092
companion_cube
why don't y'all use jemalloc in the mean time?

1554826108
scientes
companion_cube, you can if you want, but zig std lib does not depend on C

1554826125
companion_cube
yeah, not in the stdlib, but as a package :)

1554826142
scientes
there is no package manager yet

1554826189
companion_cube
right, right.

1554826317
daurnimator
companion_cube: you can use jemalloc. or your libc's malloc :)

1554826337
daurnimator
companion_cube: IMO the general purpose debug allocator is more a "something interesting to stream" than a "must have"

1554826371
daurnimator
companion_cube: andrew used to stream things like the copy ellison PR, but there was too much context and quiet periods to make it interesting

1554826374
companion_cube
heh, that's fair

1554826390
companion_cube
I mean, writing an allocator is a pretty good benchmark for a C competitor

1554826403
companion_cube
(that or writing some kind of VM/bytecode interpreter)

1554826429
daurnimator
companion_cube: note that the allocator isn't meant to be fast or optimal; but be able to catch all sorts of bugs automatically. for production usage you'd use libc or jemalloc or something

1554826446
companion_cube
yeah (also I think jemalloc has similar features for safety)

1554826462
scientes
daurnimator, not really

1554826492
daurnimator
scientes: the general purpose debug allocator has a

1554826498
scientes
zig having allocator passed is great, because many things call for differn't type of allocators, which means companion_cube is missing the point

1554826518
daurnimator
companion_cube: scientes: ^ that is also true

1554826520
scientes
daurnimator, it should also allow tagging memory allocations so you can know how much memory differn't data structures are using

1554826531
companion_cube
yeah that's pretty exciting to have custom allocators everywhere

1554826544
daurnimator
companion_cube: e.g. for a http server, I would expect to see per request arenas

1554826552
scientes
like for a compiler using a arena allocator is way better than malloc/free

1554826561
scientes
its way faster

1554826565
scientes
and uses less memory

1554826575
daurnimator
usually you only see that in highly optimized servers and games; in zig its just a normal day

1554826664
scientes
daurnimator, and not using a hash table, but a rb tree, to avoid the DOS attack

1554826681
scientes
or a cryptographic hash table

1554826697
daurnimator
scientes: huh?

1554826704
daurnimator
scientes: for what exactly?

1554826721
daurnimator
I'm still exicted by maple trees to replace all red black trees

1554826778
scientes


1554826811
scientes
daurnimator, i can't find a description of maple trees

1554826825
scientes
rb-trees are great, they just take up quite a bit of memory

1554826839
scientes
they are great if you are inserting and removing often

1554826847
daurnimator
scientes: find presentation from LCA 2019 by willy about xarrays. after 5 minutes he introduces maple trees

1554826856
scientes
also, zig has a great implementation of rb trees

1554826891
daurnimator
scientes: I think it's in

1554826902
daurnimator
I'm on super limited internet right now, so can't look at video

1554826920
scientes
Future improvements to the XArray may make this the only data structure we need, replacing linked lists under all circumstances, the rbtree and even hash tables.

1554826921
scientes
oh wow

1554826945
scientes


1554826952
scientes
here is the original video

1554826958
scientes


1554826961
scientes
ahh, evil redirect

1554826982
daurnimator
scientes: oh I remember that "attack". the solution was pretty much to use a random seed to xor with your hash so that it's unpredictable

1554826997
scientes
but that isn't a complete solution

1554827021
scientes
if you have to make sure that you don't have O(n^2) behavior you have to use a balanced tree

1554827031
daurnimator
it is along with other mitigations normally in http servers.

1554827031
scientes
Donald Knuth said that decades ago

1554827064
scientes
i've met people that say that hash tables are O(nm), these people are abusing asymptotic notation

1554827067
daurnimator
usually headers are e.g. max 4KB. that isn't enough to probe out the random seed. which means that a per-hash table seed is entirely sufficient.

1554827070
scientes
kind of ticks me off

1554827077
scientes
these people usually have more education than me

1554827098
scientes
yeah, but hash tables are O(n^2), end of story

1554827109
strmpnk
I was curious about the maple tree too so I looked the talk up:

1554827113
daurnimator
scientes: huh? I beg to differ.

1554827124
scientes
otherwise you don't know what O() means

1554827146
daurnimator
scientes: e.g. in lua we use brent's variation on chained hash tables. see

1554827170
daurnimator
strmpnk: I beat you to it :)

1554827185
strmpnk
Ah. Missed the scroll back.

1554827215
strmpnk
I've watched a good number of LCA videos but not this one. youtube-dl'ing it for later.

1554827225
scientes
its still O(n^2). thats the upper bound that you will hit if it is all collisions

1554827266
daurnimator
scientes: to quote my link: A main invariant of these tables is that, if an element is not in its main position (i.e. the 'original' position that its hash gives to it), then the colliding element is in its own main position.

1554827282
companion_cube
unless you have real-time constraints, hash maps are… fine?

1554827310
scientes
companion_cube, correct, they are pretty good in the average day

1554827317
scientes
but for real-time systems they should not be used

1554827337
daurnimator
in reality it turns out that cache line behaviour has far more effect on lookup times than anything else

1554827353
scientes
yes but that is still a constant multiplier

1554827357
scientes
even if very large

1554827358
daurnimator
no.

1554827372
scientes
it has an upper bound

1554827381
scientes
same with page table lookups

1554827404
daurnimator
IIRC the upper bound is something around the amount of memory in your computer. If you have more items in your hash table than memory in your computer... I want your hardware

1554827418
scientes
no, i was talking about cache lines and page tables

1554827458
scientes
hash tables are O(n^2), cache and paging is not

1554827497
companion_cube
why O(n^2) and not O(n), btw? in case of terrible hash function

1554827542
daurnimator
scientes: I can't recall the exact findings right now. but essentially within a cache line the next accesses are free; and then within a page it's essentially free; and then within a TLB miss it's essentially free. as our hardware these days only have 3/4/5 levels of page tables, you only have 5 answers to how long does it takes.

1554827585
scientes
companion_cube, because you cannot guarantee that every key is a hash collision

1554827591
scientes
*is not

1554827613
scientes
O() is the UPPER bound

1554827616
scientes
not the average

1554827617
companion_cube
even then, the hashmap is just a linked list or a linear array lookup

1554827637
companion_cube
I don't see where the ^2 comes from

1554827665
daurnimator
scientes: following my logic from above: the upper bound is 5 TLB misses.

1554827676
scientes
in this talk they got rails to take 3 hours to service a request

1554827680
bheads____
I thought a good hash tree way O(n log n)

1554827686
scientes
thats O(n^2), achieved

1554827698
companion_cube
not for a single lookup

1554827699
scientes
bheads____, yeah, but very rarely does a hash use a tree

1554827715
emekankurumeh[m]
what about the vectors from closure? the essentially have O(1) appends, lookups, and updates. (O(log32(n))

1554827716
companion_cube
of course if every access is O(n) you can have O(n^2) if it's accessed in a loop

1554827718
bheads____
true, thats why I said a good hashmap*

1554827774
scientes
emekankurumeh[m], that 32 is meaningless, and missing what O notation is about

1554827923
bheads____
may fav algorithm was the random sort algorithm.. someone claimed is O(n^n) but I think its possibly worse

1554827979
companion_cube
there's the permutation sort, should be O(2^n)

1554827982
scientes
lol

1554827986
scientes
bheads____, that is awesome

1554828010
scientes
yeah its n^n

1554828041
scientes
cause the number of keys is only a scalar multiplier

1554828117
scientes
well i should say anything until i look it up

1554828123
scientes
but i like the idea of a stupid algorithm

1554828125
scientes
that is useless

1554828125
bheads____
lol

1554828154
daurnimator
bheads____:

1554828199
bheads____
if I remember it randomly picked an index from the source list, and appeneded it to the end of the dest array O(n) then checked if it was sorted O(n), repeat till sorted...

1554828259
bheads____
so really its O(2n^R)

1554828275
bheads____
which is just O(n^m)

1554828279
scientes
it is ironic that that makes it a more complicated algorithm

1554828285
scientes
because generating random numbers is hard

1554828340
bheads____
now it makes me think of an even dumber one, hashmap with a random hash generator

1554828360
companion_cube
that'd be plain incorrect, not just inefficient

1554828393
scientes
bheads____,

1554828419
bheads____
right, normally you never get anything back, but sometimes you get wrong data

1554828423
bheads____
makes it fun!

1554828443
bheads____
okay I need to get back to fixing other peoples websites...  sigh....

1554828600
scientes
bheads____, go calls rand() in its hash function

1554828649
companion_cube
surely you mean, it initializes its hashmaps with a random seed?

1554828658
scientes
nope, read the blog post

1554828787
companion_cube
ahah ok, it makes only sense for nan

1554828803
companion_cube
that's such a bad corner case though

1554828827
companion_cube
(and yeah, storing nan as a key in a hashtable is… ugh)

1554829284
Sahnvour
hi, congrats everyone on the release!

1554829348
bheads____
they must hash the kay and use that was the seed

1554829455
emekankurumeh[m]
scientes: I know that is actually O(log n), but the 32 means that in practice is practically O(1)

1554829591
scientes
i just noticed that editors number lines from 1, instead of 0

1554829708
scientes
i guess it makes sense

1554829809
scientes
is there any @fieldParentPtr() stuff in zig stage1, cause i'm getting 8 where a pointer should be

1554830844
tgschultz
my old code is failing in the strangest ways in 0.4.0. Most of it is in dire need of rewriting anyway so I should probably just throw it all out.

1554831014
tgschultz
`error: unable to evaluate constant expression` => `builtin.TypeId.Array => for(ptr.*) |*v, i| {` wat?

1554831039
scientes
ahh the protonode was never populated, and contains junk

1554831582
ShrewdSpirit
Hello. What are the requirements for zig compiler to compile? I'm aiming to use the compiler in an UEFI application so the application is self hosted

1554831659
scientes
llvm and ld is about it

1554831685
scientes
I am not a fan of UEFI, but whatever floats your boat

1554832108
scientes
andrewrk, 0.4.0 is now on the download page anymore

1554832122
scientes
*not

1554832187
ShrewdSpirit
BTW I just downloaded the 0.4.0, like an hour ago

1554832197
scientes
you can download it, but its not on the download page

1554832225
ShrewdSpirit
So I assume I can't use the compiler in UEFI :(

1554832232
ShrewdSpirit
as long as zig isn't self hosted

1554832257
scientes
zig will depend on llvm and lld for the foreseeable future

1554832268
ShrewdSpirit
scientes:

1554832288
scientes
ShrewdSpirit, but not

1554832294
scientes
thats the master build, not the tagged build

1554832304
ShrewdSpirit
What's the difference?

1554832310
scientes
nothing right now

1554832315
scientes
but the release notes are not there either

1554832346
ShrewdSpirit
Oh

1554832595
andrewrk
oops, forgot to update src/download/index.html

1554832636
andrewrk
well that's rather unfortunate

1554832640
andrewrk
all this traffic and no links

1554832837
andrewrk
fixed

1554832968
bheads____
andrewrk, were you able to celebrate last night?

1554833856
gamester
you could put a link to the 0.4 release notes under the homepage's "Reading and Viewing Material" as you've done before

1554834556
scientes
ugggh, debugging takes so much time

1554834708
andrewrk
bheads____, yes, my girlfriend took me out to dinner

1554834711
andrewrk
gamester, good idea, done

1554834916
daurnimator
andrewrk: nice :)

1554834944
daurnimator
andrewrk: make sure you try and keep to a business-like schedule despite working by yourself

1554834974
andrewrk
I do. I wake up to an alarm every day

1554835254
daurnimator
looks like we just fell off the HN frontpage

1554835385
scientes
ok, i verified that this bug I'm looking at is not my bug...

1554836403
gamester
I think it was a while ago daurnimator

1554836436
daurnimator
gamester: was last item on front page for a while; then one refresh it was suddenly down at 81.

1554836459
daurnimator
HN has some.... interesting... heuristics for what gets to stay on the front page

1554836498
daurnimator
in this case it may have coincided with the west coast of the US going on lunch break

1554836503
daurnimator
*east coast

1554836591
gamester
It's crazy how curated it the HN front page is, I see things magically demoted all the time even when it's very popular, and that's just from browsing HN for the last 2 days. They didn't do that to Zig, but they did it for some J language that was up there at the same time. This is off topic though.

1554836623
scientes
oh wow, it was that simple

1554836686
daurnimator
gamester: on one hand; yes its quite curated; on the other: it's very subject to waking/break/sleep times of various timezones

1554836689
scientes
andrewrk, should we introduce Linux's C version of @getParentPtr() into stage1, or should we fix AstNode to not need it?

1554836731
scientes
cause i just found a bunch of code that thinks AstNode works like IrInstruction with the subtypes having IrInstruction base

1554836873
scientes
*fieldparentptr

1554836897
daurnimator
@fieldParentPtr needs the 'fixed' proposal ASAP IMO.

1554836913
scientes
daurnimator, ?

1554836925
scientes
fieldParentPtr is great

1554837010
scientes
daurnimator, please explain?

1554837027
scientes
the only problem with it I've heard it is that is screws up strict aliasing guarantees

1554837050
andrewrk
scientes, "fixed" proposal is a way to note that a struct field is supposed to never be copied

1554837062
daurnimator
scientes:

1554837100
andrewrk
if done right, with no-copy semantics, should remove one of the last footguns from zig

1554837113
daurnimator
it's probably the most common footgun I see in zig-first code

1554837119
andrewrk
yeah it's a big problem

1554837149
scientes
oh, i'm use to dealing with that in C, so i didn't question if it could be fixed

1554837164
scientes
you mean copying, instead of using a pointer, right?

1554837220
daurnimator
scientes: 1. annotate a field with "this can't be copied; you may only deal via reference". 2. fieldParentPtr only works with fields with the prior annotation.

1554837243
scientes
yeah thats a good idea

1554837251
scientes
does it fix the strict aliasing problem?

1554837265
daurnimator
no. strict aliasing is a separate problem

1554837282
halosghost
but, iirc, strict aliasing isn't even a problem in zig

1554837284
daurnimator
it does fix the common issue of e.g. passing an allocator by value

1554837300
scientes
my rb.zig uses @fieldParentPtr because it is the best way to do it

1554837312
andrewrk
scientes,

1554837313
scientes
halosghost, it isn't turned on, but it would be nice to do so in the future

1554837331
halosghost
scientes: what isn't turned on?

1554837341
andrewrk
halosghost, see my link

1554837348
halosghost
ah

1554837383
daurnimator
scientes: in zig, when you pass a variable, it's not defined if it's by value or by reference.

1554837388
halosghost
andrewrk: I was thinking about the fact that (as that link mentions), all aliasing is allowed

1554837445
companion_cube
so if you want reference semantics, you pass a pointer, right?

1554837471
daurnimator
companion_cube: if you pass a pointer, it's not defined whether you get a pointer, or a pointer to a pointer :)

1554837503
daurnimator
i.e. passing a pointer? the pointer is the value. it's not defined if it's by value or by reference.

1554837535
companion_cube
I mean, sure, but at least you can be sure you can modify the parameter

1554837539
scientes
aliasing should be done at some point in some fashion

1554837541
companion_cube
(or its fields, or whatever)

1554837569
daurnimator
companion_cube: correct.... assuming you don't want to e.g. modify the pointer

1554837579
daurnimator
companion_cube: or find the pointer as a member in another struct....

1554837636
companion_cube
yeah I just meant, if you want to pass a struct by reference to modify its content, you can just pass a pointer to it

1554837642
companion_cube
like in C, really

1554837783
daurnimator
companion_cube: yep. one thing I sometimes forget is that all parameters in zig are 'const'.

1554839806
ManDeJan
Hi, what is the Zig equivalent of "void *" in C? Is there a way I can make a function that accepts a slice of any type and then convert it to a slice of u8 with @sliceToBytes?

1554839921
andrewrk
hi ManDeJan, strictly speaking the equivalent is *c_void

1554839936
andrewrk
however if you're not interacting with C code, there is probably a better way to do what you're trying to do

1554839937
daurnimator
ManDeJan: that's something I"ve brought up before... zig code often uses usize in place of such a thing

1554839954
ManDeJan
I'm not trying to interact with C code :)

1554839960
daurnimator
andrewrk: ^^ I've noted this before during your live streams of the debug allocator around mprotect

1554839992
andrewrk
if you're dealing with raw memory addresses, usize is a good type

1554840014
andrewrk
I doubt this is related to ManDeJan's use case

1554840020
daurnimator
andrewrk: one special case being align annotations

1554840028
andrewrk
true

1554840031
daurnimator
align(16) usize

1554840061
ManDeJan
I'm making a hash function and I want to accept a slice of every type but then iterate over it as a slice of u8

1554840084
ManDeJan
I think thats what I want anyway

1554840090
daurnimator
should `align(16) usize` be valid? or should it be `align(16) *c_void`

1554840112
andrewrk
huh, now that I'm looking I don't think the `var` parameter type is explicitly documented

1554840121
andrewrk
ManDeJan, make your parameter type `var`. that lets it be any type

1554840132
daurnimator
ManDeJan: you probably want to @ptrCast to *u8

1554840191
ManDeJan
andrewrk, Does that generate a different function every time I call the hash function with a different type?

1554840208
andrewrk
ManDeJan, yes

1554840210
daurnimator
ManDeJan: at comptime? yes AFAIK.

1554840221
daurnimator
/bed

1554840314
ManDeJan
Is there a way to accept any type of pointer and a length so that it doesn't generate multiple functions?

1554840354
andrewrk
accept a `[]const u8` and then do @sliceToBytes at the callsite

1554840556
ManDeJan
I'll try that, thanks (:

1554841617
tgschultz
andrewrk, there's still no way to specify the alignment of a struct, right?

1554841891
andrewrk
tgschultz,

1554841916
andrewrk
not yet. soon though, the commit ee5064c053526e9e6a0a94d835cd334eea2e5823 paved the way

1554842074
tgschultz
ok, thanks.

1554842800
halo
(sorry about the nick spam there)

1554843503
gamester


1554843530
gamester
regarding aliasing^

1554843537
halo
lolwat

1554843576
gamester
hehehe

1554843715
andrewrk
this is one of the reasons for

1554843859
scientes
balls

1554843867
gamester
yep, and it's one of the reasons Unity has built a special purpose c# compiler

1554843872
scientes
what a stupid chart

1554844083
companion_cube
is there docs/issues about how coroutines are implemented? I'm not sure how it works with a normal OS stack

1554844134
companion_cube
(also in the docs I think the allocator interface referenced in the section about coroutines is not up to date)

1554844392
andrewrk
companion_cube, best wait for another half release cycle for coroutines

1554844491
companion_cube
I'm mostly curious about your plans (#1194 I guess?)

1554844570
companion_cube
(it's exciting for stuff like encoding recursion, to me, not just IO)

1554844588
andrewrk
yeah. for starters coroutine function pointers won't be supported in the first version

1554844591
companion_cube
(you can traverse a tree with a coroutine, and with a local allocator it should be super efficient)

1554844597
andrewrk
so the coroutine function has to be comptime known to call it

1554844635
andrewrk
and instead of all coroutines being generic and using an allocator to allocate and destroy their own frame, the frame is provided to the coroutine when it is called

1554844637
companion_cube
does it have an internal state that is stored in the allocator?

1554844651
andrewrk
allocators will no longer be coupled to coroutines in any way

1554844657
companion_cube
ah! I've wondered, could the state (a tagged union?) be named?

1554844669
companion_cube
that'd be most explicit

1554844680
companion_cube
(so you can store it where you want)

1554844692
andrewrk
yes there will be a way to refer to the type of a specific coroutine's frame

1554844705
andrewrk
so you could put it, e.g. statically, or in a struct, or allocate it explicitly, however you want

1554844708
companion_cube
sounds good!

1554844718
andrewrk
but if you do:  var x = coroutineFn();

1554844722
companion_cube
no magic, very explicit

1554844730
andrewrk
then x has the data; it's in the current stack frame (or coroutine frame)

1554844770
andrewrk
or: const ptr = allocator.create(@Frame(coroutineFn)); ptr.* = coroutineFn();

1554844788
companion_cube
nice.

1554844797
andrewrk
and yes you can see how this helps accomplish safe recursion

1554844798
companion_cube
or push a frame into a vector

1554844813
companion_cube
… I mean arrayList, but whatever

1554844818
companion_cube
yeah definitely

1554844848
andrewrk
there is also this issue, which is a bit of a research topic:

1554844861
andrewrk
I'd like to have an accepted or rejected status on this proposal during this release cycle

1554849315
jjido
andrewrk I am happy you are embracing CPS ;-)

1554849424
jjido
is that only for parallel / async stuff or does it also allow generators (yield)?

1554851264
andrewrk
jjido that's to be determined. definitely something I'll be exploring

