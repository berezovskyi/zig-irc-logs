1559089879
daurnimator
fengb: I think in practice (in a function) it can infer alignment and sometimes length; which should makes it smaller+faster?

1559090831
fengb
andrewrk mentioned they should be identical. I should probably focus on optimizing things not in stdlib though >_>

1559091680
emekankurumeh[m]
i managed to track down what part of the issue with example/hello_windows is

1559091723
emekankurumeh[m]
it's looking in the cwd for std/os/windows/bits.zig but just that file

1559092942
shritesh
Zig master currently thinks my Linux box is Windows

1559093282
shritesh
it’s trying to compile the Windows specific functions from fs.File and failing to type check

1559093304
emekankurumeh[m]
can you paste the error?

1559093381
andrewrk
fengb: that's interesting. I have a few ideas and I'll look into it when I get home

1559093429
andrewrk
What build mode are you using? And are you measuring perf as well as byte size?

1559093484
shritesh


1559093720
emekankurumeh[m]
what does zig target say your target triple is?

1559093848
shritesh
zig builtin says .os = .linux, .arch = .x86_64 and .abi = .gnu

1559094380
shritesh
I can reproduce the issue with the official binary and

1559094423
emekankurumeh[m]
it might be an error in std

1559094694
daurnimator
shritesh: looks like trying to print the File struct results in the functions inside getting compiled. but that fails cause they're windows-only

1559094754
shritesh
Didn’t think of that. Thanks.

1559094796
shritesh
What’s your go to for “dump this thing to stderr”?

1559095272
daurnimator
shritesh: that was just a guess.. unless a function gets

1559095291
daurnimator
andrewrk: ^ thoughts?

1559095292
shritesh
That was it.

1559095426
shritesh
I was also printing a File struct which probably doesn’t make sense

1559095496
shritesh
(spoiled by REPLs)

1559096310
fengb
Just build size. I've tried both release-safe and release-fast and gotten slightly different results

1559096376
fengb
Looks like the library version has a loop while @memcpy is fully unrolled

1559096425
fengb
@memcpy also uses i64 instructions so it's probably faster

1559097355
daurnimator
shritesh: IMO it

1559097703
shritesh
debug.warn’ing structs actually works. Nice.

1559097732
emekankurumeh[m]
i feel so stupid

1559097750
emekankurumeh[m]
i just nuked my home directory

1559097764
shritesh
Oh no

1559098498
shritesh
Someone else ranted about the problem with WASI building a capability system on top of POSIX

1559098913
daurnimator
emekankurumeh[m]: I hope you have backups?

1559099038
daurnimator
after making a similar mistake recently I started using snapper (

1559100018
gamester
emekankurumeh[m]: I don't know anything about file recovery, but try searching for "photorec linux". Here:

1559100048
gamester
emekankurumeh[m]: don't write anything more to the partition that had your home dir, for maximum success

1559100122
emekankurumeh[m]
i'm using msys2 on windows so there thankfully a lot of options

1559100148
gamester
wow I just assumed you were on linux, I'm a monster

1559100155
emekankurumeh[m]
i managed to get back almost everything except for some git files

1559100160
gamester
cool!

1559100208
emekankurumeh[m]
the last time i tried to install linux i wiped my boot partition, so i tend to stay away from linux

1559103408
fengb
"Unable to dump stack trace: FileNotFound"

1559115954
daurnimator


1559117187
mikdusan
re: big size for glibc versioning, maybe in the future, bits required for cross compiling can be treated as a lazy package

1559117225
ki9a
you guys looked at alternative backends to llvm too ?

1559117263
ki9a
(I was looking at cranestation myself, interesting idea, not far enough to be usable by me)

1559117602
mikdusan
i haven't heard any talk from those who understand zig analysis, but mlir caught my attention a few weeks back

1559118849
tralamazza
how do I pass compiler flags (e.g. --verbose-cc) to a build.zig project?

1559119228
mikdusan
is this not working for you? `zig build --verbose-cc`

1559119341
tralamazza
nop

1559119407
mikdusan
things are cached in zig. if the build was already done, it won't do it again unless a dependency has changed.

1559119432
mikdusan
you can tweak a source file to force it, or remove zig-cache directory

1559119499
mikdusan
(by things i mean build artifcats)

1559119537
tralamazza
aha

1559119540
tralamazza
yes the cache

1559119544
tralamazza
ty

1559119588
tralamazza
is there a doc on the build.zig API?

1559119694
mikdusan
not as of yet; i tend to look at std/build.zig looking for 'pub fn' functions. and then peek at the top-level build.zig for some hints at usage.

1559119835
FireFox317
mikdusan: not sure if you noticed, but andrewrk solved the issue i had yesterday :)

1559119904
FireFox317
mikdusan:

1559119928
mikdusan
FireFox317: yes i saw. cool!

1559119981
mikdusan
a side note: i ended up using my periods of "i need a distraction" to install an archlinux vm.

1559120032
mikdusan
pretty cool. but i did bump into a weird "command-line-switch inconsistency" error of some kind using pacman llvm.

1559120064
FireFox317
Jup archlinux is pretty cool xd

1559120067
mikdusan
and just did my usual explicit minimal llvm in /opt and all is good.

1559120204
FireFox317
I'm kinda new to working on a big project on git, how do you keep up with the master when i forked the project? What is your workflow for this?

1559120261
mikdusan
first thing i like to do, is if you intend to keep up with upstream (what you forked from)

1559120266
mikdusan
is always use a different branch.

1559120290
mikdusan
so don't walk over branch names (like master) used in upstream. it just makes things easier imo

1559120317
mikdusan
then you periodically checkout your fork master, do a pull. to keep it up-to-date

1559120343
mikdusan
then switch back to your fork/branch and merge from fork/master

1559120439
FireFox317
Ahh okay, thanks for the suggestions!

1559120445
mikdusan
when i'm not sure about making a mess, i'll "save" my branch. like `git branch -m issue.1001 save.1001` then branch master -> issue.1001 and merge save.1001 -> issue.1001`

1559120477
mikdusan
and then the beauty of this, at this point, i'll go to issue.1001 and `git rbase -i head~N` if needed.

1559120482
mikdusan
rebase.

1559120523
mikdusan
oh i never asked you, did you fork on github?

1559120549
FireFox317
Jup, i did fork on github indeed

1559120591
mikdusan
ah ok. there's kind of a neat way to handle that. so your local clone did you clone from fork or master?

1559120616
mikdusan
(fork or upstream)

1559120642
FireFox317
I cloned from my own fork and then added an extra remote to the upstream (ziglang/zig)

1559120708
mikdusan
ok that's decent

1559120760
FireFox317
Btw you are from the Netherlands too? xd

1559120801
mikdusan
🇨🇦

1559120908
FireFox317
Oh my bad ^^

1559120987
ki9a
heh

1559121020
mikdusan
hmm does archlinux have some kind of security? my fav `sudo zsh` just isn't going into zsh. it's always ending up in bash.

1559121179
FireFox317
Uhm, should just work actually.

1559121382
mikdusan
ah i got a workaround. strangely ~root needed some .zsh files to get around some poor assumption

1559121520
mikdusan
not bad. 5GB filesystem in use, and able to build zig and muck around.

1559121875
FireFox317
mikdusan: did you make a seperate user account or are you just using root? Because then you don't need sudo ofcourse

1559121904
mikdusan
sep account for consistency with my unix'ish build environments.

1559122050
mikdusan
i've got 3 vm now { ubuntu, arch, windows10 } that i can ssh into and build zig, use vim, cmake, and ruby scripting if needed

1559122380
FireFox317
Nice, not bad. What os are you running yourself?

1559122397
mikdusan
macos

1559122412
FireFox317
Aaah, yeah make sense, that is the one that is missing in your vm list xd

1559122496
mikdusan
after 11 years i upgraded a macpro to minimal-spec imac with big display, loaded aftermarket ram on it and running vms are actually convenient when you have globs of host ram (40GB)

1559132210
gonzus
@andrewrk, is this interesting / worthwhile?

1559139617
tgschultz
seems LemonBoy has been busy hunting bugs. I dig it.

1559141062
andrewrk
gonzus, I'll respond on the PR now

1559141760
fengb
tgschultz: I added a potential generic interface in

1559141947
tgschultz
it's a good note, reuses code, doesn't actually obscure anything. no reason I can think of that it shouldn't be done.

1559142462
fengb
Cool, I didn't fully understand OpaqueType so wanted to make sure I'm not butchering any semantics

1559150303
FireFox317
If I change something in std/zig/render.zig, I can just run `make install` to rebuilt the compiler right?

1559150311
andrewrk
right

1559150727
shritesh
If you’re working on the std, --override-std-dir can be helpful to speed up the workflow

1559150841
FireFox317
Hmm, well if I add a line `@compileError("test")` to std/zig/render.zig I don't get an compile error when I rebuilt

1559150859
andrewrk
FireFox317, are you aware of zig's lazy analysis?

1559150872
donpdonp
how do I test if (unionVar == myUnion.optionA). I've tried various forms of typeOf and TagType without success

1559150913
FireFox317
andrewrk: I've heard of it, but I don't really get that in this context

1559150930
andrewrk
donpdonp, cast the union to the enum tag type

1559150971
andrewrk
@TagType(myUnion)(unionVar) == .optionA

1559151005
donpdonp
o^O I've not see .optionA syntax before

1559151023
donpdonp
i'll try that thx.

1559151145
andrewrk
if the field type of optionA is `void` then you don't need the cast

1559151149
andrewrk
unionVar == .optionA

1559151192
FireFox317
andrewrk:  How do I rebuild the std part of the compiler without rebuilding the complete compiler? Or turn off lazy analysis or something

1559151285
andrewrk
FireFox317, `make install` only rebuilds what it needs to

1559151299
tgschultz
donpdonp there's also a std.meta function: std.meta.activeTag(my_union)

1559151307
andrewrk
to get help: show the code / what do you expect to happen / what is happening instead

1559151350
donpdonp
if(@TagType(std.json.Value)(tokenKV.value) == .String) worked fine

1559151355
tgschultz
FireFox317 it sounds like you may want to use --override-std-dir

1559151410
FireFox317
Well, I'm working on a issue in std/zig/render.zig and if I change something in that source file and `make install`, I don't see the change in the actual compiler

1559151433
andrewrk
what change? what do you expect to happen, and what is happening instead?

1559151581
FireFox317
Sorry for being so vague, I'm working on `zig fmt` and I want to change the source code of that, so I add a std.debug.warn() in some code that I know is gonna run. Then I do a `make install` in zig/build and I expect that the change that i've made shows up in the new `zig fmt`, but it doesn't

1559151615
andrewrk
FireFox317, ok I think I know what is happening here

1559151677
andrewrk
zig build's caching system is solid. but cmake is controlling what happens with `make install`. unfortunately I couldn't figure out how to tell cmake, "just always run this zig build command, it does its own caching". so std/zig/render.zig (& more) need to be added to CMakeLists.txt

1559151727
andrewrk
FireFox317,

1559151845
FireFox317
Aha, okay yeah that makes sense why it's not rebuilding.

1559152204
FireFox317
Maybe we can add something like this in the CMakeLists.txt:

1559152443
andrewrk
FireFox317, I created

1559152666
FireFox317
👍

1559158307
marijnfs
whats the easiest way to run lldb on a zig build binary?

1559158326
marijnfs
right now i pick the file from the cache, which is annoyihng

1559158350
andrewrk
marijnfs, if something failed then it prints e.g. "the following command failed:" followed by the zig build binary and all the args

1559158389
marijnfs
yeah I get the terminated unexpectedly: message, and the binary is indeed mentioned

1559158404
marijnfs
but now i have to copy that binary path, and run lldb on that

1559158411
marijnfs
then i change a line and do it over again

1559158425
marijnfs
maybe lldb zig build run can work somehow if i know the right params

1559158461
marijnfs
no that doesnt work of coarse, couse zig build exits

1559158507
andrewrk
what's the problem with the workflow? isn't that normal to change a line and then do it over again?

1559158562
marijnfs
andrewrk: when I have the binary in a fixed location, i just change, rebuild, type lldb and 'up' to run with teh previosu parameters

1559158564
marijnfs
so no copy

1559158596
marijnfs
I guess i can figure out how to save the executable to a fixed location

1559158655
emekankurumeh[m]
andrewrk: does `@hasDecl` report true declarations in a struct that was `use`'d?

1559158691
andrewrk
yes

1559158827
marijnfs
var values : [width * height] f64 = undefined;

1559158840
marijnfs
why doesnt that work when width and height are constant i64?

1559159046
andrewrk
how doesn't it work?

1559159104
andrewrk
I just tested it, worked for me

1559159123
marijnfs
it terminates unexpectedly, wait is that going on stack?

1559159127
marijnfs
i used width and height 1024

1559159187
andrewrk
zig doesn't have stack size calculation yet, this will work after

1559159204
andrewrk
until then it works the same as it does in C, which would also have this behavior if you made a huge array on the stack

1559159232
marijnfs
andrewrk: allright, so i get to try how allcoators work

1559159513
marijnfs
ok sweet that works

1559160589
fengb
What should my allocator do if I call free() on unmanaged memory?

1559160882
marijnfs
how does one turn a i64 into f64? f64(x) doesn't seem to work when x is i64

1559160912
andrewrk
fengb, unreachable

1559160965
fengb
Ah okay

1559160992
andrewrk
fengb, that situation is called "double-free" or "invalid free" and is not always detectable. in safe modes it's important to try to detect. in unsafe modes, assume it never happens

1559161153
fengb
Sounds good, thanks

1559161808
fengb
marijnfs:

1559161883
marijnfs
fengb: thanks

1559162522
andrewrk
emekankurumeh[m], can you help me reproduce

1559162733
emekankurumeh[m]
hmm, it would seem it was solved

1559162860
emekankurumeh[m]
nvm it wasn't

1559162867
emekankurumeh[m]
i just can't trivially reproduce it

1559162882
Xe
hey so dumb question

1559162904
Xe
if i embed a 60 KB file into zig with @includeFile, will that make the webassembly allocator broken?

1559162926
shritesh
Xe i don’t think it should.

1559162931
Xe
embedFile*

1559162936
Xe
okay

1559162940
emekankurumeh[m]
i don't see why it would

1559162962
emekankurumeh[m]
are you having problems with the allocator?

1559162970
andrewrk
Xe, the only thing that does is increase your wasm file by 60 KB

1559163118
shritesh
Also, fengb had ported Rust’s wee_alloc to Zig:

1559163170
shritesh
I haven’t tried it out but it should actually free

1559163207
andrewrk
emekankurumeh[m], can you give me some clues? I'm trying to reproduce it

1559163348
Xe
does zig have support for webassembly start functions?

1559163379
andrewrk
Xe, yes if you use build-exe. if that doesn't work then it's a bug

1559163396
Xe
so main is a start function?

1559163416
andrewrk
yes if you use build-exe with the wasm32 target, your main func is called from the start function

1559163427
Xe
huh

1559163434
Xe
so that's why it wasn't exposing a main symbol

1559163459
shritesh
(This behavior recently changed in master)

1559163474
emekankurumeh[m]
andrewrk: here is a patch to reproduce

1559163683
andrewrk
emekankurumeh[m], confirmed, I can reproduce, thanks!

1559163732
andrewrk
emekankurumeh[m], I think you may have found a way to reproduce this sneaky use bug that I've been suspecting exists

1559163882
fengb
It's not a port. I took spiritual inspiration

1559163899
shritesh
Umm. The start module entry isn’t actually being created for wasm. I’ll look into this.

1559164057
emekankurumeh[m]
yeah another bug exists when trying to build example/hello_windows, in ir_analyze_instruction_import, pkg_root_src_dir changes to the cwd which is what is causing all the errors when trying to build that example

1559164550
marijnfs
arrays have a length in Zig right? how do i turn a [c*] and a length into such a type

1559164559
marijnfs
so i can write it to a file

1559164645
fengb
var ptr: [*c]u8; const slice = ptr[0..len]

1559164677
fengb
arrays are compile time fixed size. Slices are runtime sized

1559164726
shritesh
Welp, lld doesn’t use the start section and it’s a WONTFIX

1559164939
emekankurumeh[m]
i love gcc9 so much

1559164985
emekankurumeh[m]
using -fuse-ld=lld compiling zig went from 24 minutes to 8 minutes

1559165044
andrewrk
shritesh, that's surprising, let me read this...

1559165048
marijnfs
fengb: nice, and the other way? to get a [*]u8 say out of []u8

1559165076
fengb
slice.ptr

1559165133
marijnfs
thanks

1559165178
andrewrk
shritesh, this is onereason zig doesn't have constructors

1559165236
shritesh
Yep. But lld exports __wasm_call_constructors no matter what

1559165274
andrewrk
I'll mention that too

1559165317
Frank-Lesser
Hi everyone

1559165326
shritesh
I hope we do things right with our self hosted linker

1559165387
andrewrk
shritesh,

1559165412
andrewrk
well that's the main benefit of doing it yourself: if you realize you did it wrong you can just change it to be correct :)

1559165432
shritesh
Yeah.

1559165443
andrewrk
if the bug is in your own code it's a lot easier to fix

1559165463
andrewrk
I had permissions to "reopen" the ticket so let's see if that does anything

1559165784
shritesh
I find it funny how this has rippling effects. “We won’t do start because emscripten and C++” -> “WASI needs a separate start function because nobody uses start.”

1559165851
fengb
Never underestimate the amount of duct tape in software

1559166051
shritesh
Xe: a stopgap solution would be to use wasm2wat and wat2wasm to manually add the start section `(start $_start)`

1559166167
andrewrk
my attitude towards this stuff is "ok but how

1559166201
shritesh
Add it to our fork of lld?

1559166248
andrewrk
yeah we can do that, but ideally work with upstream to get it merged there too

1559166290
andrewrk
the idea is to eventually get down to 0 patches and stop maintaining a fork

1559166297
andrewrk
right now we're at 1

1559166325
Frank-Lesser
I have stil the problem to compile hello_windows.zig with the latest master

1559166374
andrewrk
Frank-Lesser, I haven't looked at that yet

1559166432
Frank-Lesser
hi andrew, thx for fast answer - just was guessing from the commit messages that windows was touched.

1559166586
Frank-Lesser
it comes from src\ir.cpp line 17712, I am not enough into the ZIG src ( stil learning in my freetime ) to fix that

1559166597
marijnfs
sweet my mandelbrot in zig is working, zig does develop fast

1559167036
Xe
i'm getting a weird result:

1559167047
mikdusan
emekankurumeh[m]: 24 minutes is a very long time. may i ask which host?

1559167087
emekankurumeh[m]
what do you mean by host?

1559167092
mikdusan
platform

1559167116
emekankurumeh[m]
oh, windows 7 64-bit

1559167130
Xe
that should actually be failing a build

1559167133
Xe
it's not

1559167160
Frank-Lesser
sry for just putting errors here - under windows - if a zig exe is locked - I was debugging it with WinDebug - the zig compiler doesn't complain that the output can't be written

1559167169
emekankurumeh[m]
why would it fail

1559167184
emekankurumeh[m]
Frank-Lesser: i think there is an open issue for that

1559167188
Xe
emekankurumeh[m]: there's no reference to the type Resource

1559167209
emekankurumeh[m]
that means that cwa_main isn't being compiled

1559167210
Frank-Lesser
ah ok

1559167216
Xe
why isn't it?

1559167224
emekankurumeh[m]
try adding export to the function declaration

1559167226
Xe
it's extern in build-lib mode

1559167236
Xe
oh

1559167241
Xe
right, export

1559167283
emekankurumeh[m]
Frank-Lesser:

1559167497
marijnfs
webp integrates nicely

1559167498
marijnfs


1559167612
Xe
error: expected type '[]u8', found '[63178]u8' how do you convert a size-dependent array to a slice?

1559167641
emekankurumeh[m]
&array or array[0..]

1559167662
emekankurumeh[m]
or is it array[0..array.len]?

1559167674
hoppetosse
I prefer the latter because it makes it obvious you're getting a slice

1559167694
hoppetosse
array[0..] is equivalent to array[0..array.len]

1559167727
emekankurumeh[m]
i wasn't sure if that was valid syntax or if i was confusing zig with another language

1559167752
andrewrk
oh man. tab completion works in gdb if you do something like (gdb) break std.zig.parse.<tab>

1559167829
shritesh
The wasm-lldb codebase is surprisingly accessible.

1559167846
shritesh
wasm-lld *

1559167928
shritesh
Removing the constructor export and adding start shouldn’t be a lot of work. The only question is if we should.

1559168004
andrewrk
yeah let's try to work with upstream first

1559168030
shritesh
Agreed

1559168034
emekankurumeh[m]
subsystem doesn't seem to be emitted in builtin.zig

1559168161
andrewrk
emekankurumeh[m], main.cpp isn't setting it for `zig builtin` but it is setting it for the other build commands. just a sec

1559168285
emekankurumeh[m]
if an issue is marked as upstream will patches to forks (ie. lld) be accepted?

1559168320
andrewrk
emekankurumeh[m], fixed

1559168334
Xe
is there existing code to split a slice into subslices by a character match? EG: splitting a []u8 into a [][]u8 on newlines

1559168344
andrewrk
the patch should be sent upstream first and then if upstream accepts it we carry the patch

1559168368
andrewrk
Xe, see std.mem.separate and std.mem.tokenize

1559168370
emekankurumeh[m]
xvilka:

1559168381
emekankurumeh[m]
whoops

1559168410
andrewrk
Xe, take note of the differences, depending on your use case, one of them is subtly wrong and the other correct

1559168496
Xe
what does `it.next().?` mean?

1559168526
andrewrk
x.? is equivalent to x orelse unreachable

1559168599
emekankurumeh[m]
andrewrk: it still doesn't emit subsystem when no subsystem is specified

1559168613
andrewrk
emekankurumeh[m], right that's what we discussed on the issue

1559168626
emekankurumeh[m]
wait, is that intended because no subsystem can actually be detected?

1559168636
emekankurumeh[m]
that makes sense

1559168676
andrewrk


1559168699
andrewrk
so if bootstrap.zig wants to learn the subsystem value it has to check builtin and then fall back to looking to see if the root source file has those functions

1559168725
andrewrk
a bit clunky but it will be correct

1559168765
emekankurumeh[m]
i suppose we can close

1559168865
Xe
how do you iterate over the esult of std.mem.separate?

1559168867
Xe
result*

1559168892
Xe
is it just calling it.next() and ensuring it's not null?

1559168921
emekankurumeh[m]
yes, null signals that the iterator is finished

1559168971
mikdusan
while (it.next()) |segment| {...}

1559169112
emekankurumeh[m]
mikdusan: the mingw ld is known to be very slow

1559169660
emekankurumeh[m]
in the big reorganization did all the types move out of the files in std.os.windows.* and move to bits?

1559169692
shritesh
Yes

1559169704
Frank-Lesser
not sure but looking at <

1559169860
Xe
how do i itoa a string?

1559169863
Xe
er a number

1559169885
emekankurumeh[m]
string -> number?

1559169889
Xe
number -> string

1559169892
emekankurumeh[m]
std.fmt.parse

1559169940
emekankurumeh[m]
*parseInt

1559170062
shritesh
andrewrk: is it possible that zig may have a repl in the future?

1559170117
emekankurumeh[m]


1559170144
shritesh
Ah.

1559170173
andrewrk
shritesh, I think the stage2 compiler will act a lot like a repl

1559170187
andrewrk
it'll be more of a repl for introspection, but it could also do comptime expressions

1559170191
emekankurumeh[m]
with the compiler acting as a server

1559170201
andrewrk
yes

1559170344
shritesh
The compile-run loop is already fast enough. Maybe someone can hack up a “live-reload” system in place.

1559170440
emekankurumeh[m]


1559170518
lygaret
hi all, is there an idiomatic way to handle bitflags in 0.4.0? I'd really like to be able to push them into an enum and then OR them together, to get the base type. I've got a simple method right now that just reduces over them, but pushing this into every flag type, plus the requisite array an casting makes it pretty overkill feeling:

1559170602
lygaret
If I understand correctly,

1559170610
andrewrk
shritesh, jimmy did something like that:

1559170622
andrewrk
also there is

1559170676
andrewrk
lygaret, an enum isn't a good fit for bit flags. if you want some kind of type safety on top of regular integers, maybe you could try a packed struct of u1 fields

1559170744
shritesh
Nice.

1559170793
andrewrk
hot code reloading might end up fitting nicely with the planned design of stage2

1559170802
andrewrk
where the compiler itself stays running

1559170841
andrewrk
so it would know, for example, exactly what you changed and exactly what must be updated in the live running binary

1559170864
lygaret
would you have to provide a value for each field? I'm working through yours and AndreaOrru's zen os, and for flags in the multiboot header, there may be 75 fields, where I want to be selecting only one.

1559170877
Sahnvour
and this is way better than dynamic libraries, i'm really hyped for this feature

1559170915
andrewrk
lygaret, my honest opinion is that unsigned integers are the best thing zig has to offer for bit flags

1559170922
lygaret
ok, that's fair

1559170932
emekankurumeh[m]
so zig would patch the executable file?

1559170962
andrewrk
emekankurumeh[m], it would be in some ways operating system-dependent. it probably wouldn't work in freestanding mode for example

1559170975
andrewrk
this is a research topic so I can't say exactly how it will work

1559170999
Sahnvour
andrewrk, if you didn't already, have a look at live++

1559171007
andrewrk
but some of the concepts involved are atomic function pointer swapping, leaving extra padding in structs in case fields are added

1559171093
andrewrk
the thing that works the best will be changing function logic. the thing that will work the worst will be changing global variables  which are already initialized

1559171136
andrewrk
comptime actually works against hot code swapping, so that's a bit of cognitive dissonance

1559171167
andrewrk
Sahnvour, noted, thanks!

1559171235
lygaret
I have seen proposals for distinct types or something too, so I'll follow those. Thanks for your feedback.

1559171266
andrewrk
lygaret, it is planned to have default struct initialization fields btw

1559171280
andrewrk
so you could set all your fields to 0. that might make packed structs attractive to you

1559171292
lygaret
Yeah that would definitely work

1559171327
lygaret
I'll search GitHub for an issue to follow there

1559171332
Sahnvour
the biggest problem happens when modifying struct layout I think, but compiler support can definitely help where C++ hot reload is stuck, for example

1559171585
andrewrk
lygaret,

1559171610
andrewrk
Sahnvour, agreed. and this is one of the reasons zig does not guarantee in-memory struct layout

1559171709
andrewrk
shritesh, did you see

1559172130
shritesh
I just did.

1559172459
andrewrk
I think for build-exe -target wasm32-freestanding, we just export a start function with the understanding that it's the intended entry point

1559172487
andrewrk
the thing you linked seems to be for initializing constructors, which we definitely don't want, and the fact that other languages need those is causing a lot of confusion and spinning in circles

1559172513
shritesh
Makes sense. But if the memory isn’t available, I dunno if we can do much in the start function

1559172545
andrewrk
right. we don't want to put anything in there. it's for static constructors

1559172559
andrewrk
we don't have those. we just want to export a nice start function for the user to call

1559172601
andrewrk
if it's just a start function by convention and not recognized by the spec, that's probably fine

1559172613
andrewrk
the name of it can be defined somewhere else, e.g. how WASI does it

1559172679
shritesh
Yeah. We’re assuming the programmer is aware of this restriction?

1559172723
shritesh
The start function doesn’t even have to be named. Functions are identified by a number.

1559172815
shritesh
I think wasm-lld’s correct behavior would have been to not export the _start function by name

1559172983
andrewrk
should we always pass --no-entry and then name the function `start` (no `_`)?

1559173008
andrewrk
build-exe just means there is a canonical entry point

1559173052
shritesh
In the current implementation, --no-entry is only used to mark _start as exported.

1559173078
shritesh
*unmark

1559173220
shritesh
I think we can just stick with _start

1559173273
shritesh
Unless we are exporting for the start segment

1559173353
andrewrk
I don't think we care about the wasm start segment

1559173387
shritesh
Then we don’t need to change anything

1559173387
andrewrk
I mean we can expose it as a feature if it's a desired use case, but I don't think anyone has one

1559173673
shritesh
We can put off on that until the spec/ecosystem figures out how to handle that

1559173764
andrewrk
agreed

1559173967
gamester
andrewrk: You're an excellent language designer. In the past I would have disagreed on some designs and I'm sure there have been features that I've wanted that are not in the language, but I've come around to every single feature / lack of feature in Zig. That's insane. I guess there's only that I don't understand why loop variables have to be initialized outside of the for expr, though having said that I 100% do not want initialization inside

1559173968
gamester
if statements. That reads so badly imo.

1559174036
andrewrk
hey thanks gamester those are kind words

1559174070
andrewrk
it's just trial and error. you can see the design process in action with coroutines where I'm rewriting the whole thing, and I'm on my third copy-elision implementation attempt

1559174382
gamester
yeah we're all excited for copy elision which looks to be another simple and well designed feature that will need no language lawyers to understand

