1565914105
scientes
uint32_t host_int_bytes; // size of host integer. 0 means no host integer; this field is aligned

1565914113
scientes
I still have no idea what this means

1565914159
scientes
what the frig is a "host integer"

1565914274
scientes
its part of the align() keyword

1565914434
andrewrk
scientes, it's for packed structs with sub-byte integers

1565914448
andrewrk
"host integer" is  the byte-aligned integer that contains the little ones. you have to bit mask & shift the host integer

1565914454
scientes
ahh i see

1565914471
scientes
so there is "extern packed" and "packed"

1565914474
scientes
which are distinct?

1565915220
daurnimator
andrewrk: congrats on the merge :)

1565915398
scientes
sweet!

1565917586
diltsman
VS Code's debugger automagically worked with Zig.  That was pretty awesome.

1565917604
fengb
Oh? I should try it

1565917650
scientes
diltsman, that is because of tiehuis

1565917695
diltsman
Yeah?  I just pointed the debug configuration at the generated .exe and started debugging.  I assumed it was because of the .pdb file.

1565917722
scientes
but yeah, that too

1565917985
diltsman
Just realized that the Zig plugin will do builds.  Looking at that.

1565920376
daurnimator
fengb: cool example of the generator :)

1565920405
fengb
Thanks!

1565920580
diltsman
Any idea on how to use the VS Code Zig plugin to build the project using build.zig?

1565921607
daurnimator
andrewrk: should there be a @Frame variant that takes arguments for the function (incase it has varying behaviour based on comptime variables?)

1565921628
andrewrk
ah. that's an unsolved problem.

1565921669
andrewrk
theoretically we could use @typeOf(func(foo, bar, dummy_value)) but I think that incorrectly has side effects

1565921889
daurnimator
andrewrk: hmmm. I think this goes back to an older thing I brought up. what if `async foo(bar)` didn't

1565922341
andrewrk
before you suggest any changes, I for sure want to understand what is the use case / problem with status quo

1565922361
andrewrk
oh, I'm sorry. my mind blanked out. the context is right there from minutes ago

1565922407
andrewrk
I'll think about that

1565928377
daurnimator
andrewrk: thoughts? :) or have you gone to bed now?

1565940542
karrick
Daurnimator: long time no chat

1565940590
daurnimator
karrick: hmm? I don't recognize your nick.

1565940680
karrick
Yeah because I actually am new to irc fwiw. Last time I was on here you gave me a link about the Linux kernel merge for polling events

1565940707
daurnimator
karrick: ah. welcome back :)

1565940732
karrick
Are you still kicking around possible solutions, or already waste deep solving it?

1565940754
karrick
Figuring out how to get it into zig

1565940772
daurnimator
karrick: so far just have been playing around. last time I managed to find a kernel bug :P

1565940781
karrick
Lol

1565940791
karrick
Good on you

1565940796
daurnimator


1565940816
karrick
Cool. I will check it out. Perfect

1565940887
daurnimator
note that the current state of that file triggers the kernel bug: the test program hangs and can't be killed. if you run it 5 times your computer will need to be rebooted.

1565940930
daurnimator
so; uh; if you want to play for long; comment out the part of the test case that writes to /dev/null

1565941012
karrick
I’ll give it a proper read when not on my phone tomorrow. Are you positive it’s a kernel bug?

1565941035
karrick
Just playing devil’s advocate

1565941051
daurnimator
I'm pretty sure an unkillable process is a kernel bug no matter what else is happening

1565941120
karrick
Oh yeah. 5 times and boom. Makes sense.

1565941177
karrick
I wonder whether there is a five element queue or buffer in uring that gets filled up, but that seems excruciatingly small

1565941303
karrick
Especially if it’s a circular queue

1565941311
karrick
But still. 5 is small

1565941392
daurnimator
karrick: you're welcome to try and replicate. I only tried on one of my computers so far

1565941438
karrick
Yeah I’ll play with it after I digest the code

1565941554
karrick
I don’t know your local time but I saw you talking recently and said hello. Thanks for the link. This is very interesting work, and I’d be happy at least to give it a look over. Another set of eyes if you will

1565941596
karrick
Also is it

1565941635
daurnimator
I tried 3 times and same result

1565941660
daurnimator
considering it takes a reboot to recover I didn't try more :P

1565941692
karrick
Ok. I also see the code is reading values without atomic, and that is bad. If a value is meant to be accessed atomically, then it must always be atomic. I will also read the uring code for how it accesses the head and tail pointers

1565941719
karrick
Line 23, specifically

1565941792
daurnimator
karrick: ktail is only written by the current process; so no need to protect it

1565941793
karrick
But I’m not sure whether `getTail` is there for development purposes or actually used yet, because I have not read the entire 600 lines yet

1565941832
karrick
But would not the kernel reads it out of band to the current process?

1565941849
daurnimator
huh?

1565941859
daurnimator
getTail will only return your own setTail

1565942180
karrick
Hm. I owe this code a more thorough reading. But I always always always guard every access to atomic variables if ever more than a single thread are accessing the same address in memory, regardless of whether it reads or writes, to prevent split read or split write problems.

1565942308
daurnimator
karrick: if you're coming from the .pdf I linked last time; then start from the top of the file. but if not, you may want to start from the test case(s) at the bottom

1565942320
karrick
Although because those variables are aligned, i admit it is less of a concern

1565942394
daurnimator
the general API is: .queueSomeOperation(unique_token); .submit(); .getCompleted().user_data // will be your unique token back.

1565942440
daurnimator
--> and that you can queue as many operations as you want (well; actually up to number of entries to ask for in creation)

1565942454
karrick
I did read and digest the pdf you sent. But my brain has unfortunately been in other problems as of recently where as your brain is fresh. So I will reread it

1565942492
daurnimator
so .queueRead(somefd, somebuf); .queueRead(someotherfd, somebuf); .queueWrite(anotherfd, "somedata"); .submit(). .getCompleted(); .getCompleted(); .getCompleted();

1565942505
daurnimator
where the only one that's actually a syscall is .submit()

1565942652
daurnimator


1565942750
karrick
`0xCAFEBABE`... :)

1565948004
daurnimator
karrick: so how are you going?

1565955126
FireFox317
I'm getting build errors in zig_llvm.ccp when building master:

1565955622
FireFox317
Hmm I think it is because I updated my Arch system, which resulted in GCC being updated to version 9.1.0 and I think that is causing the build issue. Let me try to use clang

1565956121
FireFox317
Confirmed it is related to GCC 9.1.0, building with clang works fine

1565956937
FireFox317
How do I grab a copy of LLVM 9? Is it the 'release_90' branch of the llvm git repo?

1565960139
samtebbs
FireFox317: I had similar issues too (they seemed to have magically disappeared since, perhaps someone fixed it)

1565960160
samtebbs
You could pull the latest llvm git and checkout a release candidate branch

1565961591
keith52
Hey guys, sorry if this is a question that's been addressed before but I'm wondering is there a way you can use a C++ library in zig without having to port it? I just started a project with Dear ImGui and was thinking of rewriting it in zig.

1565961741
fengb
Zig only interopts with C. What you could do is write a thin C layer that maps the C++

1565961769
fengb
to C

1565961816
keith52
Ah ok. Thanks :)

1565961900
mq32
you

1565961909
scientes
if you are crazy...

1565961917
mq32
for dear imgui that

1565961930
scientes
mq32, have you ever tried to create a symbol file for a C++ library?

1565961965
mq32
what do you mean by "symbol file"?

1565961974
fengb


1565961987
scientes


1565961988
fengb
Zig source does this so we can access Clang

1565962002
scientes
we also do it for some LLVM ABIs

1565962022
fengb
That's beyond me :)

1565963891
scientes
now that we have async we can start working on the self-hosted compiler!

1565964033
fengb
zig fmt deleted my comments :(

1565964040
fengb
I guess I didn't need those anyway

1565964581
andrewrk
oh no

1565964658
andrewrk
fengb, depending on the editor, undo might work to undo the formatting

1565964846
fengb
Yep, I had a commit point

1565964853
fengb
I'm checking if

1565964863
fengb


1565964878
fengb
fmt doesn't like the empty '//' line

1565965251
fengb
Wow you're quick

1565974211
Tetralux
Does @setRuntimeSafety(false) only disable runtime safety for the current function scope, or does it ALSO disable it for every function call down the call stack?

1565974835
mikdusan
Tetralux: only for the current lexical scope

1565974850
Tetralux
That's what I though.

1565974852
Tetralux
thought*

1565974853
Tetralux
Good.

1565974860
Tetralux
Not going senile yet.

1565976842
FireFox317
andrewrk, In the example in issue #3076 which you have just created, It suspends but I don't see a `resume`. Shouldn't there be a resume?

1565976958
andrewrk
FireFox317, good catch. I updated the test

1565976973
andrewrk
(the previous test was still enough to catch the invalid LLVM generated, but you're right it needed to be updated in order to pass)

1565977564
FireFox317
Nice!

1565983828
hoppetosse
keith52: dear imgui has a c binding that's auto generatoed:

1565984213
keith52
Thanks, I'll see how I get on with that

1565985127
gonz_
andrewrk: Am I seeing this right, are you going to Handmade Seattle?

1565985163
andrewrk
correct

1565985478
gonz_
Same talk as ETE?

1565986049
Sahnvour
is that related to handmade network ?

1565986086
Sahnvour
oh yeah, cool

1565986168
andrewrk
gonz_, no talk, just a booth

1565986274
Sahnvour
that is some great lineup of speakers

1565986551
gonz_
andrewrk: Ah, that's too bad. Good exposure anyway, I'm guessing.

1565986556
gonz_
It's probably a very receptive crowd

1565986888
fengb


1565987307
andrewrk
fengb, wow. they're on the path to zig's revelation about inferring whether a function is async or not

1565987316
andrewrk
it's the logical next step...

1565987380
dimenus
i like how zig allows me to build "systems", eg I can build a pool allocator that returns an opaque handle. You can assign it to a var/const but you can't create your own

1565987396
dimenus
it's like C++ but without constructors :P

1565987424
Tetralux
What kind of handle do you mean exactly?

1565987467
dimenus
basically an index where the bottom 4 bytes are the index itself and the top 4 is a unique id

1565987473
dimenus
to protect against double free / dangling usage

1565987491
fengb
I'm just surprised it's right after our big async milestone. And it looks like a clunky change

1565987623
Tetralux
dimenus: That sounds like a good use of @distinct ;)

1565987626
nrdmn
calling a function declared as `fn foo() foo() { return struct {}; }` crashes the compiler

1565987762
dimenus
Tetralux: don't need it. If you don't 'pub const' the opaque type you can't create one yourself

1565987774
dimenus
and there's no way to cast a ptr to a type you can't use :P

1565987821
fengb
"Between tokio, romio, runtime, and async-std (and probably others), I think it can be a little overwhelming for users which ecosystem they should pick."

1565987823
Tetralux
You mean like `const Index = struct{idx: u32, id: u32}` => now can't Index{} outside file?

1565987844
dimenus
tetralux:

1565987853
fengb
With a decentralized package system, how do we prod towards a unified library ecosystem?

1565987899
Tetralux
dimenus: ahhhh - I see.

1565987933
Tetralux
So you're creating an alias for a ptr to an opaque type, using a usize or whatever internally, and then casting to this opaque ptr before returning it.

1565987975
dimenus
yep

1565988000
dimenus
an error union with an OpaqueType actually triggers an assert in the compiler

1565988018
dimenus
which sort of makes sense, since an OpaqueType is supposed to have "unknown but not zero size"

1565988069
Tetralux
You mean if you do `const PI = @OpaqueType();` and then try to return `!PI`?

1565988075
dimenus
yep

1565988083
Tetralux
Yeah, I think I've come across that too.

1565988090
Tetralux
It took me a minute to figure out what it was xD

1565988091
fengb
You can't use opaque directly. It has to be pointers

1565988096
fengb
It's like void*

1565988103
Tetralux
My usecase was a native socket handle.

1565988105
fengb
But better typed

1565988118
Tetralux
I ended up doing `const NativeSocket = *@OpaqueType()`

1565988121
dimenus
indeed that it makes sense, but it should be a compiler error rather than an assert :P

1565988135
Tetralux
Except that means that whereever I'm storing a NativeSocket, I'm actually just storing a ptr to one...

1565988137
dimenus
*agreed

1565988145
dimenus
not really

1565988145
Tetralux
Which is intended, but I'd rather *NativeSocket. xD

1565988154
Tetralux
.. and have it compile error if I tried to deref.

1565988156
dimenus
because you can just @intToPtr

1565988171
dimenus
it's 8 bytes of whatever you want it to be

1565988184
fengb
Yeah there's quite a few OS APIs that are much nicer with @OpaqueType because you can assign a proper name with actual compiler help

1565988232
Tetralux
`const Index = *@OpaqueType(); ... return @intToPtr(Index, calculated_index);` ?

1565988258
dimenus
yep

1565988266
Tetralux
It feels kinda dirty to lie about how it's a pointer xd

1565988316
dimenus
It has to be a pointer though because it has 'unknown size'

1565988326
dimenus
the caller has no idea what it's actually referencing

1565988328
dimenus
so 8 bytes is 8 bytes

1565988384
Tetralux
Maybe some sort of `const Index = @opaque(usize);`, but that's basically distinct at that point - though it is different; you know it's a usize, but other people do not.

1565988402
Tetralux
Whereas with @distinct, you both know.

1565992102
Tetralux
What do people think of the following suggestion

1565992121
Tetralux
Being able to declare that an error has the same value as another, different error?

1565992169
Tetralux
The idea being that you want several errors to be handled the same way by default, because they essentially mean the same thing - except that they

1565992172
Tetralux
But also

1565992183
Tetralux
It would help error diagnosis.

1565992197
Tetralux
The example I thought of is if you have a ring buffer.

1565992218
Tetralux
Rather than returning error.OutOfMemory, you'd:

1565992225
Tetralux


1565992235
Tetralux
const error.RingFull = error.OutOfMemory;

1565992239
Tetralux
return error.RingFull;

1565992255
Tetralux
But because it's the same as OOM, code that checks against OutOfMemory, would match it.

1565992281
Tetralux
But if they had a branch that checked specifically for RingFull, it could do that one instead.

1565992317
Tetralux
The origin of the idea was just that it could make it easier to visualise the problem if you were able to get more information about the context of the error.

1565992334
Tetralux
Especially in the stack trace when it fails.

1565992375
Tetralux
Also, despite the fact that it's equal to OOM, if you returned it from main, it'd still print the name as RingFull.

1565992434
Tetralux
The idea is basically just that you could declare a different error from the one you should return, and return it, but it'd work because it is actually a more specific version _of the same error.)

1565994786
fengb
My rudimentary understanding is that the errorset is a lookup table, and the data passed around is just the int

1565994814
andrewrk
all errors are ints at runtime. error sets are type information only

1565994854
fengb
There's a proposal to extend error unions to have extra context info

1565994959
andrewrk
yeah. I'm willing to experiment with that to see if it can work before closing it

1565995016
scientes
the simd PR was rebased

1565995051
andrewrk
noted

1565995085
shachaf
Is there a common idiom for error handling with additional information right now?

1565995258
fengb
The zig parser stores a list of errors in its context:

