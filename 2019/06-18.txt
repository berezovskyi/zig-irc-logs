1560822598
scientes
daurnimator, what do you mean?

1560822680
scientes
daurnimator, the git diff function start detect seems to work (no idea how)

1560822693
scientes
@@ -149,12 +149,12 @@ pub fn captureStackTrace(first_address: ?usize, stack_trace: *builtin.StackTrace

1560822693
scientes


1560822693
scientes
/// Tries to print a stack trace to stderr, unbuffered, and ignores any error returned.

1560837132
tralamazza
emekankurumeh[m]: do you remember the error exactly?

1560840441
daurnimator
scientes: it's not great for nested definitions

1560843896
marler8997_
looking through some zig code, I just realized that D's input range interface (empty/front/popFront) can be emulated in zig with one function (next)

1560843939
marler8997_
Input Ranges in D: for (; !range.empty; range.popFront) { auto value = range.front; // code }

1560843965
marler8997_
And Zig's solution: while (range.next()) |value| { // code }

1560844524
ki9a
do you guys use official llvm or a fork?

1560844541
mikdusan
official. currently 8.0.0

1560844547
daurnimator
ki9a: since LLVM 8, official.

1560844678
ki9a
ah. Nevermind then. I just did macabi support for my own copy, they won't accept that till it's officially released by apple later this year ofc but if you use official then there's little point in offering.

1560844689
ki9a
(that's uikit on mac)

1560844746
marler8997_
what's macabi?

1560844780
ki9a
as announced at wwdc, you can now run uikit apps (think ios code) on osx.

1560844789
ki9a
but it requires a special set of flags in the object files.

1560844846
marler8997_
interesting, I know very little when it comes to apple's development tools/environment

1560844868
ki9a
It feels like a hack to be honest.

1560844873
marler8997_
sounds similar to adding support to be able to run android apps on linux or something

1560844884
ki9a
yep

1560844890
marler8997_
cool

1560844900
marler8997_
weird, but cool :)

1560844928
ki9a
would have made a lot more sense to properly port uikit

1560851742
FireFox317
emekankurumeh[m]: this doesn't work? ```/DISCARD/ : {         *(.ARM.exidx .ARM.exidx.*);     }```

1560858086
gonz_
andrewrk: No, nothing in particular yet. I have my eye on a few interop use cases for the BEAM (Erlang VM) and things like that at the moment, as well as just exercises in replicating coreutils, etc. just for fun.

1560865730
scientes
ki9a, i believe there is still a single (very small) patch in lld

1560865864
scientes
this copy elision stuff is super exciting!

1560866376
ki9a
scientes: ah.

1560866397
scientes
it is OSX specific

1560867253
emekankurumeh[m]
did we still need those patches or was that because of the wrong flags being passed to lld?

1560867275
scientes
emekankurumeh[m], it was because lld's Mach-O support is unmaintained

1560867280
scientes
it is a hack that up-stream doesn't want

1560867333
emekankurumeh[m]
FireFox317, tralamazza: it was a while ago (pre 0.4.0) and I was trying build a rom for a Gameboy Advance

1560867463
emekankurumeh[m]
I've heard that but another linker error we had a workaround for was due to the wrong flags being passed to lld so I wasn't sure if it was the same error

1560867554
scientes
flags wouldn't be a lld patch

1560869136
emekankurumeh[m]
FireFox317:

1560872884
scientes
I don't understand why zig uses the softfloat library? Can't we just call the llvm intrinsics, and then have that generate calls to the softfloat library if necessary?

1560872888
scientes
that way comptime can be way faster

1560872917
scientes
or rather, use the features of C.

1560872975
scientes
oh i see, we already do that

1560872986
scientes
softfloat is just to guarantee f128 on crappy platforms

1560873487
andrewrk
scientes, it's for comptime f128 code

1560873491
andrewrk
stage2 doesn't need it

1560873517
scientes
also if I use __builtins, I guess I put in some compat so it also works with MSVC?

1560873520
andrewrk
it could probably be dropped as a dependency once we're self hosted if self-hosted compiler doesn't do comptime f128 math

1560873616
andrewrk
anyway the dependency is only holding perf back in stage1, the real solution is to make progress on self-hosted

1560873625
scientes
yeah its not a big deal

1560873652
andrewrk
stage1 perf is garbage, stage2 is going to be much much better

1560873675
andrewrk
the assumptions and language have changed so much, the codebase is optimized for being "hackable"

1560873695
andrewrk
self-hosted gets to be relatively stable, without too many assumptions changing out from underneath

1560873715
andrewrk
the zig ir for self hosted will be completely different

1560873734
scientes
yeah some of it is kinda messy

1560873759
andrewrk
I had to introduce the concept of "suspending" and "resuming" IR analysis for result location branch. the abstractions are getting even more stressed

1560873786
andrewrk
but with knowledge of what had to be done in stage1, stage2 can be much simpler

1560873789
scientes
but its single threaded?

1560873794
andrewrk
yeah still single threaded

1560873806
andrewrk
stage2 is planned to be multithreaded

1560873808
scientes
anyways, i'll look at the code some time

1560873843
scientes
and that is going to stress LLVM, which really isn't ready for multi-threaded

1560873868
andrewrk
it does in theory support it, and I have a proof of concept of it working

1560873890
andrewrk
but I wouldn't be surprised if we triggered a few LLVM bugs

1560873895
scientes
exactly

1560873931
scientes
the model isn't bad though, limiting optimizations by scope

1560873980
andrewrk
oh yeah, that's just for debug builds btw. release builds will probably still be single threaded  (or at least bottlenecked by LLVM)

1560874012
scientes
LLVM's optimizations passes declar the scope they need, so in theory they can operate just on BBs or Functions, and be multi-threaded

1560874029
scientes
but no-one has actually used that

1560874032
andrewrk
I wasn't planning on activating that code path

1560874051
andrewrk
stage2 produces N object files in parallel and then links them together

1560874096
andrewrk
zig doesn't have a stable ABI, but the compiler is obviously free to choose a temporary one for debug builds

1560874103
andrewrk
that's the beauty of it

1560874111
scientes
yes

1560874136
andrewrk
and we can add padding to structs, etc, to minimize the need to rebuild stuff

1560874149
andrewrk
it'll be a fun problem to solve. hopefully not too many bugs

1560874178
scientes
i'm sure there will be lots, but its such exciting work that they will be bearable :)

1560874199
andrewrk
fair :)

1560876147
daurnimator
andrewrk: how goes copy ellision?

1560877998
gonz_
Are the compilation plus tests on Windows supposed to take 1+ hour?

1560878482
Sahnvour
gonz_: could be, what tests are you running, and are you getting output ?

1560879035
gonz_
The default ones suggested on the build instructions page

1560879054
gonz_
`bin\zig.exe build --build-file ..\build.zig test`

1560879163
daurnimator
gonz_: I think we also advise -Dskip-release

1560879174
daurnimator
which should speed things up significantly

1560879248
daurnimator
gonz_: from CONTRIBUTING.md: One of the most helpful ones is `-Dskip-release`. Adding this option to the command in step 2 above will take the time down from around 2 hours to about 6 minutes

1560879308
gonz_
Yeah, I just followed

1560879319
gonz_
Anyway, the second run was much faster

1560879332
gonz_
It seems, at least

1560885611
andrewrk
daurnimator: I was close to full behavior tests passing but then ran into a dead end with how inferred comptime worked for struct and array initializations inside inlined loops

1560885643
andrewrk
So I had to solve some stuff a different way and now I'm back to 0 behavior tests passing. I think I'm close to getting back though

1560886058
scientes
andrewrk, oh that needs to change anyways

1560886073
scientes
it should use insertelement/insertvalue

1560886079
scientes
and extractelement/extractvalue

1560886090
scientes
well only for arrays

1560886098
scientes
*only for vectors

1560886120
scientes
you also need it to avoid a copy when reading from a directly passed argument

1560886128
scientes
but i thnk the optimizer can handle that one

1560886155
scientes
but you can't get a pointer to a vector

1560887190
daurnimator
so misc operation I might need: what I'm going to call "bit expansion" => it would double up bits to get something twice as wide. e.g. 1011 => 11001111.

1560887214
daurnimator
searching around, it looks like intel haswell+ added the PDEP instruction that makes such a thing efficient

1560887259
daurnimator
but I'm left thinking about what to do on other architectures and older processors

1560887749
mikdusan


1560887866
scientes
daurnimator, that probably belongs as an LLVM intrinsic first

1560887885
scientes
but yeah I've done a number of interesting bit hacks too

1560887911
scientes
countPopulationUpto, ProjectBits, and NthBitOfMask

1560888199
daurnimator
mikdusan: thanks. as I should have expected; it's on the famous bit twiddling page

1560888237
daurnimator
Is there any variation of this that belongs in the standard library?

1560888283
daurnimator
I assume that LLVM

1560888308
daurnimator
(i.e. ifunc support)

1560888363
scientes
daurnimator, that is why you add a llvm intrinsic....

1560888468
daurnimator
scientes: huh? wouldn't it be more about adding an llvm optimization pass?

1560888492
daurnimator
but also, that doesn't help with the IFUNC side of things..... I don't really want to have "universal" vs "haswell+" binaries

1560888493
scientes
no, you just add an intrinsic, and then add lowering for the intrinsic

1560888502
scientes
and you then use ifunc

1560888526
scientes
but you can even use the slick target_arch() ifunc frontend

1560888534
scientes
although i think that is currently gcc-only

1560888551
daurnimator
I don't know what that is.... but gcc-only doesn't sound helpful for zig.

1560888564
scientes
llvm has ifunc support

1560888587
scientes
its just a shortcut so you can compile the same function multiple times for multiple arches

1560888598
scientes
and emit a ifunc stub

1560888639
scientes
but isn't ifunc only for shared-libraries?

1560888702
scientes
we also have to implement it ourselves (we already do that for vdso)

1560888727
daurnimator


1560888758
scientes
but zig currently builds -march=native

1560888779
daurnimator
scientes: not if you use -target

1560888820
scientes
i'm having a problem where symbols that should be part of softfloat are not...

1560889359
scientes
undefined reference to `f16_mulAdd'

1560889772
scientes
so it looks like when they released a new version of softfloat they forgot to name the symbols correctly.....

1560890365
scientes
oh nvm

1560892123
andrewrk
daurnimator, alright with

1560892171
daurnimator
yay

1560892289
andrewrk
I'm looking forward to working on anything else

1560892364
andrewrk
all of the elegance of this approach was lost with b025193de5b951734e5108e4762e5dc40359431b, it's all spaghetti now

1560892459
andrewrk
working on zig stage1 compiler is like turning a treehouse into a skyscraper while living in it

1560892471
scientes
heh

1560892483
mikdusan
this quote is wikipedia article material :)

1560892487
scientes
a self-hosted compiler would we woorse

1560892504
marijnfs_
lol

1560892580
scientes
you haven't pushed that one

1560892592
scientes
ohyes you did

1560892637
andrewrk
I actually ended up using a lot of the code from the abandoned copy-elision-2 branch

1560892667
scientes
you probably should work on something else, and then try version 4 in a week

1560892675
andrewrk
nah this is the final version

1560892693
andrewrk
tests passing first, then can decide whether to spend time paying off technical debt

1560892722
andrewrk
I do believe improvements can be made incrementally once

1560893431
andrewrk
woo ok at least the test case that I had to add the spaghetti for now is passing

1560893535
andrewrk
you have to admit this is pretty optimal code generation:

1560893591
andrewrk
so if you were to step through that code with a debugger it would walk you through the inlined loop, showing you all the values, even though they're all comptime known

1560893624
scientes
ahh yes

1560893625
andrewrk
but the function body is empty; the debugger would just be putting on a show for you

1560893637
scientes
that is cool

1560893647
scientes
that is really useful however

1560893669
andrewrk
I haven't tested it. I hope llvm/gdb are good enough that this works

1560893671
scientes
you don't want to remove critical constants from the debug

1560893681
scientes
i don't think it will work

1560893692
andrewrk
I don't think there's any reason it shouldn't

1560893697
andrewrk
testing no

1560893699
andrewrk
*now

1560893792
andrewrk
yeah gdb didn't know about any local variables. I think that's an issue with llvm's debug info generation, or gdb, or both

1560893824
andrewrk
I'll bring it up on the mailing list at some point

1560893845
scientes
gdb can't stop on anything but an instruction i believe

1560893869
andrewrk
it should at least show a local variable though

1560893898
andrewrk
let me try something else

1560893982
andrewrk
damn, when I use `asm volatile ("nop");` it says `result = <optimized out>`. I think this is an llvm issue

1560894022
scientes
as long as you are doing it right others can come around and fix it

1560894027
andrewrk
DWARF is capable of putting constants in the debug info itself and using that for local variables which have a known value. this is what LLVM should be doing

1560894033
scientes
the point is to have a basis that they have to make work

1560894037
andrewrk
yeah

1560894163
andrewrk
ok great all the tricky inline loop comptime tests pass now

1560894546
ross_k
hey, having trouble building the tetris demo on zig 0.4.0 win64. `zig build play` just hangs there.

1560894566
ross_k
was working fine on 0.3.0 - any way I can see what it's stuck on?

1560894584
scientes
ross_k, use gdb/lldb

1560894590
andrewrk
oh I didn't know it was working on 0.3.0

1560894594
scientes
and hit ctrl-c

1560894602
andrewrk
ross_k, if you look at `zig build --help` there are some options there, such as --verbose

1560894645
ross_k
okay, I'll try that

1560894646
andrewrk
I haven't put a lot of effort in getting tetris example working on windows - I figured I'd do it with the package manager once that's available

1560894666
andrewrk
and that will be a lot more resilient to different systems, everything should kinda just work the same on every platform

1560894746
ross_k
that makes sense, though I'll see if I can get it working

1560894758
ross_k
would really like to use zig for a game project

1560894802
andrewrk
yeah it's a good use case. package manager will help that a lot

1560894827
andrewrk
because it's going to be able to package up C (and maybe c++) libraries in addition to zig

1560894847
andrewrk
without any separate installation steps or requirements

1560894858
andrewrk
so that people can actually have dependencies and feel confident that they're going to work everywhere

1560894880
andrewrk
the javascript folks have been able to do this for years

1560894923
andrewrk
people make fun of them, but I have no clue why, they've actually solved code reuse and actually share a lot of code with each other

1560894941
andrewrk
seems like an obvious win to me

1560894989
Tetralux
I'm reminded of the lpad incident. :^)

1560895051
daurnimator
andrewrk: except that in the JS world, you're much better off if you don't do code reuse

1560895058
andrewrk
was it really even that bad though? a bunch of people's CI servers gave an error and they had to point their dependency URL somewhere else temporarily

1560895090
daurnimator
andrewrk: e.g. in fengari, I've had issues with

1560895105
AlexMax
Does Zig have a way to include binary files and make them accessible via an identifier as part of its build process?

1560895118
andrewrk
AlexMax,

1560895119
daurnimator
AlexMax: @embedFile ?

1560895127
daurnimator
AlexMax: what do you mean by "binary" here?

1560895166
AlexMax
andrewrk: Perfect

1560895183
AlexMax
I had a hard time coming up with the right words for what I was looking for

1560895185
tgschultz
I'm personally not convinced that most code-reuse solutions don't cause more problems than they solve.

1560895251
andrewrk
daurnimator, I don't buy that reasoning. there are plenty of incredibly useful dependencies. ffmpeg. llvm. crypto functions. image encoding/decoding. networking abstractions. data structures

1560895294
andrewrk
in c/c++ dependencies are problematic when you depend on the system, and that's a big reason developers shy away from them

1560895298
daurnimator
tgschultz: ehhh, I've found its significantly different on a per language basis

1560895321
daurnimator
I tend to find that C libraries are high quality and I want to use them. Whereas e.g. JS libraries are low quality and you sort of can't

1560895327
andrewrk
zig depends on softfloat (but vendors the code)

1560895327
daurnimator
Maybe its a barrier to entry thing...

1560895369
daurnimator
your average ruby, python and lua libraries tend to be pretty low quality too

1560895394
andrewrk
one day I hope zig is so popular that there exist low quality libraries :)

1560895395
daurnimator
And popular != high quality

1560895408
scientes
andrewrk, good one

1560895444
andrewrk
hopefully with zig code though it should be pretty easy to determine a general sense of quality by quickly skimming over the code

1560895458
andrewrk
you see a bunch of `.?` and `catch unreachable` everywhere and back away slowly

1560895514
andrewrk
I also foresee third party services for package discovery and curating

1560895520
ross_k
imo a decent package manager that works seamlessly across platforms would be great, but satisfying dependencies manually should be an option too

1560895538
andrewrk
yes there will still be a concept of "system dependencies"

1560895552
scientes
and code coverage tools, et cetera

1560895555
daurnimator
yeah the biggest thing I'd like to see in a language package manager is an actual usable integration with the system package manager

1560895556
ross_k
like with nodeJS, it's common to keep hold of the node_modules folder in case the module's host goes down ie. npm

1560895586
andrewrk
daurnimator, I think you're going to be disappointed. I'm focusing on reproducibility and determinism across platforms by default rather than integration

1560895600
daurnimator
andrewrk: then I probably won't use the zig package manager then....

1560895609
andrewrk
but I do consider that to be a valid use case - a dependency that is necessarily a system dependency

1560895629
andrewrk
especially because that's what package maintainers will want to do

1560895664
andrewrk
but it's not what the upstream developers want

1560895665
daurnimator
If we want to make zig able to replace C, then zig libraries need to be packagable into normal distro packages

1560895671
andrewrk
certainly

1560895687
andrewrk
definitely planning on working with you & others on that

1560895701
andrewrk
it's not the default though

1560895840
scientes
yes, that is pherephery work someone else should do

1560897789
scientes
how does compiler_rt get linked in?

1560897799
scientes
cause llvm also implicitely links against libm

1560898447
scientes
we link against libc on windows, right?

1560898456
scientes
and osx

1560898822
daurnimator
scientes: no. windows doesn't have a libc to link to

1560898839
scientes
then how do we make syscalls?

1560898854
scientes
i'm just wondering if we have libm

1560898855
daurnimator
syscalls on windows are done from ntdll; or kernel32.dll

1560898860
scientes
cause i just realized we have to ship a libm

1560898865
scientes
cause llvm implicitely links to it

1560898885
scientes
llvm.fma will emit fma calls

