1554942769
scientes
hmmm union(enum) can't be compared

1554947945
shritesh
hryx: I'm down!

1554967848
ManDeJan
There is something strange going on with integers bigger than 64 bits at compile time

1554967862
ManDeJan
Example:

1554967893
ManDeJan
Every time I press the clear cache en compile button it generates different, incorrect assembly

1554968055
andrewrk
ManDeJan, nice find. would you mind filing a bug report?

1554968087
andrewrk
your zig code, plus the unexpected output is enough to demonstrate the issue

1554968570
daurnimator
andrewrk: oh you're still awake

1554968592
daurnimator
andrewrk: I forgot to ask yesterday: did you see that those 2 patches were required after all?

1554968611
andrewrk
which ones?

1554968624
daurnimator
andrewrk: the two I asked you to review just before the release

1554968663
daurnimator
andrewrk: the two here:

1554968695
andrewrk
marc filed an issue for the install libs, and I'll be sure to fix that before 0.6.0

1554968699
andrewrk
*before 0.5.0

1554968730
andrewrk
I don't understand why the other patch would be necessary. why do you have llvm .a files lying around if you didn't want software to use them?

1554968855
tiehuis
ManDeJan: think that shift issue will be fixed when this PR is merged:

1554968963
andrewrk
merged

1554968992
ManDeJan
andrewrk, That was quick, so no need filing a bug report then? :)

1554969026
andrewrk
ManDeJan, if you build from source or wait until the new binary is available, (and tiehuis's diagnosis is correct) then the issue should be fixed

1554969057
andrewrk
tiehuis - I got the windows ABI thing resolved! It took the better part of today but finally you should be unblocked on big rationals

1554969086
tiehuis
yes, i saw that, nice work, thank you!

1554969090
ManDeJan
andrewrk, cool I was super confused when my hashing function generated different hashes at compiletime

1554969105
ManDeJan
How often does godbolt rebuild trunk?

1554969153
andrewrk
I'm not sure

1554969191
andrewrk
tiehuis, feel free to merge at will

1554969209
tiehuis
sure, i'll just wait till the test suite passes just to confirm, no hurry

1554969253
tiehuis
there was actually a TODO in that big int code related to that larger than limb shift i believe

1554969260
tiehuis
should remove that

1554969594
andrewrk
good night

1554977761
gamester
What's stage 3?

1554979244
daurnimator
Slice stride proposal:

1554979806
gamester
So barring some optimization that checks all callers of a function, all slices would have to store a stride field and @sliceToBytes would fail on those

1554981612
gamester
It's not a clean fit atm but strided memory is a cool idea.

1554986883
daurnimator
gamester: I'm not sure if entirely possible; but could it part of the type? (like align is for pointers?)

1554986991
shritesh
andrewrk: FYI, after revising my gist to "do things right", compiler_rt symbols are no longer linked in the wasm binary and get GC'd

1554988613
tgschultz
daurnimator: I was thinking something similar, and the only problem I can see is if you intend to use a function on it that expects an unstrided slice of whatever. Even if we say 'just make it var' then that doesn't cover exported/extern use cases. Personally, I think this is something to be dealt with in userland with a simple iterator.

1554990622
very-mediocre
hm, epoch.zig has `pub const ios = 978307200; //Jan 01, 2001 AD`

1554990644
very-mediocre
although all the materials I can find indicate ios uses the unix epoch

1554990650
very-mediocre
am i missing something?

1554990699
shritesh


1554990732
very-mediocre
thanks for that, that's really weird

1554990758
very-mediocre
non-api-doc materials refer to the unix epoch

1554990923
shritesh
IIRC it came from the MacOS X epoch

1554991131
very-mediocre
what's worse is google failed me completely at finding this

1554991180
very-mediocre
so, terminal environment is posix compliant, higher level apis use that epoch...

1554991472
shritesh
Yeah. Learned it the hard way working on a swift app.

1554995332
daurnimator
tgschultz: I'm not sure; I can think of scenarios for almost any function that takes a slice to respect a stride instead

1554995343
daurnimator
I guess similarly they could take an iterator

1554995349
daurnimator
at that point.... why have slices?

1554995362
tgschultz
slices have extremely common use cases

1555001858
Jenz
Congratulation on the 0.4.0 release! :D

1555002671
andrewrk
thanks Jenz

1555004278
gamester
I thought I had seen someone talking about a stage 3, what would that be?

1555004493
halosghost
but, a panda can dream

1555004533
Jenz
(it can?)

1555004761
halosghost
Jenz: all pandas go to heaven

1555004883
andrewrk
gamester, "stage3" is the result of building stage2 with stage2

1555004904
andrewrk
and once the self hosted compiler is done, it's what we would ship rather than stage1

1555004920
halosghost
andrewrk: because then it's effectively self-hosting?

1555004927
halosghost
so, stages 1 and 2 are the bootstrap

1555004930
halosghost
(yes?)

1555004939
andrewrk
halosghost,

1555004986
halosghost
I was partially right :)

1555004987
andrewrk
stage1 is the c++ compiler code. stage2 and stage3 are the same .zig code

1555005000
halosghost
ahh

1555005002
halosghost
I see

1555005121
Jenz
How does stage2-zig executables compare to stage1-zig executables?

1555005243
andrewrk
self-hosted compiler can barely build hello world

1555005256
andrewrk
stage1 is what we ship right now

1555005292
halosghost
haha

1555005299
Jenz
Alright, I see; I'm really looking forward to see where zig's going

1555006918
Sahnvour
hi

1555006931
Sahnvour
how would I reinterpret an int as a sequence of bytes ?

1555006942
halosghost
bitcast

1555006974
halosghost
oh

1555006975
halosghost
nope

1555006979
halosghost
that was bad advice

1555006997
halosghost
well, I suppose it would work if you know the length of bytes to be, which you should

1555007114
Sahnvour
@sliceToBytes doc says "Converts a slice or array to a slice of u8." however `const slice = @sliceToBytes([1]u32{x});` does not work: error: expected slice, found '[1]u32'`

1555007134
tgschultz
const byte_slice = mem.asBytes(&my_int);

1555007166
tgschultz
actually it isn't slice, the return value is a *[@sizeOf(T)]u8

1555007219
andrewrk
Sahnvour, have a look at the std.mem.readInt* functions

1555007221
bheads_____
I ran into something like that the other night, what is the zig way of read bytes from a file into a packed struct?

1555007249
andrewrk
bheads_____, I believe std.io.InStream has readStruct

1555007274
Sahnvour
tgschultz thanks

1555007279
tgschultz
there's also deserializer if endianess needs accounting for

1555007350
andrewrk
oops, std.mem.writeInt* functions, I got it backwards

1555007442
bheads_____
ah it makes a [1]T array and slices that, I was trying to directly turn the start into a slice of bytes

1555007468
tgschultz
that's what std.mem.asBytes() does

1555007524
tgschultz
only it returns a pointer to an array since the the length is comptime known, but pointers to arrays implicitly cast to slices

1555007563
bheads_____
so I should be able to file.read(mem.asBytes(&header))

1555007567
tgschultz
there's also std.mem.toBytes() which copies to an array instead of returning a pointer.

1555007684
tgschultz
yeah, that should work.

1555007793
tgschultz
if you had the file as an InStream (which you can get with file.inStream()), you could use readStruct(), but it is functionally equivelent I think. If you need to worry about endianess you should use Deserializer.

1555007856
bheads_____
I may switch to an InStream so I can support other data stream sources (ie files packed in files)

1555007903
bheads_____
but doing compression orientated programming, so... solveing the problem at hand.. reading fastq files...

1555011870
shritesh
andrewrk: How would I go about solving "in function __zig_return_error void (%builtin.StackTrace*): WebAssembly hasn't implemented __builtin_return_address"?

1555013183
andrewrk
shritesh, we'll have to disable error return traces for the web assembly target

1555013412
Sahnvour
I have some code that runs fine on debug and release-safe, but segfaults in release-fast/small

1555013427
Sahnvour
trying to reduce it, but may not be easy

1555013702
andrewrk
that's the hardest kind of bug to troubleshoot

1555014608
shritesh
andrewrk: Thanks. That solved it. PR incoming.

1555015106
andrewrk
shritesh, it would be cool to look into WASI and find out if we can have some std lib tests for wasm

1555015216
shritesh
As in execute stdlib tests in an WASI env?

1555015321
andrewrk
yes

1555015332
andrewrk
I'm not trying to give you a task; I'm just musing

1555015545
shritesh
There's like 2 WASI exec envs. out there, both based on Cranelift.

1555015599
shritesh
First we need to add support for the WASI os

1555015691
shritesh
I'll see what's required to get a hello world working

1555016215
andrewrk
gonna do some more general purpose debug allocator live coding in 5 minutes

