1571703837
plumm
andrewrk: should the test name appear more than once?

1571703847
plumm
or more, is it a possibility?

1571704437
andrewrk
it can happen if the tests write to stdout/stderr

1571704451
andrewrk
this will get better in the future when

1571707523
plumm
andrewrk: testing.expectError does not expose the underlying error return trace, is there a way to substitute return traces so I can see where the issue occured?

1571717179
shachaf
andrewrk: Hmm, you're implementing the X11 protocol after all?

1571717183
shachaf
Did you figure out what to do with GL?

1571717281
andrewrk
shachaf, haven't gotten to that part yet. GL is low priority

1571717286
andrewrk
vulkan first

1571717352
shachaf
Doesn't either one require Xlib?

1571717938
andrewrk
it depends on the target os and window manager

1571718202
stratact
andrewrk: thanks for merging the PR and nice refactoring üëç

1571718255
andrewrk
stratact, thanks for your contribution! I was inspired by your work to continue further on it and do

1571718261
andrewrk
which involved a very deep windows api rabbit hole

1571718372
stratact
I'm glad to help! Yeah, the Windows work is impressive, that's a lot of LoC.

1571718695
shachaf
Is there any OS (/window manager?) that you can do it on?

1571720487
tane
howdy

1571720518
plumm
howdy

1571720588
tane
I'm currently trying to use the ZIG parser implemented in C++ and noticed that some pointers seem to be tagged, e.g their value is 1, does anyone know what that means?

1571724119
scientes
hmmm

1571724120
scientes
no idea

1571726596
andrewrk
shachaf, I'm not sure what you're asking

1571726729
andrewrk
tane, where do you see this?

1571726757
tane
andrewrk, in AstNodeParamDecl's name buffer pointer

1571726825
andrewrk
tane, I don't think that's intentional, it sounds like you're looking at uninitialized memory

1571726855
tane
ok, will have a look again later

1571726891
tane
maybe that's due to my call to ast_parse with NULL for the third argument :)

1571726897
tane
I was too lazy to setup that type properly

1571727062
tane
andrewrk, do you know whether someone is working on a consistency checker for the stdlib, e.g. naming, parameter declarations and so on?

1571727068
shachaf
andrewrk: As far as I know, functions like glXSwapBuffers (and whatever the Vulkan equivalent is that connects Vulkan to the X11 connection) are provided by a shared library that requires an Xlib Display * argument.

1571727078
shachaf
Which forces you to use Xlib rather than implementing the protocol yourself.

1571727225
andrewrk
tane, I'm pretty sure nobody is currently working on that

1571727231
shachaf
I got the impression that you were working on a thing that doesn't go through Xlib, but maybe I misunderstood.

1571727260
andrewrk
I would also caution against doing it too soon before

1571727275
andrewrk
shachaf, it doesn't go through Xlib but it does speak the x11 protocol

1571727303
andrewrk
tane, currently the std lib is still in an experimental phase. when the language stabilizes then the std lib will go into a stabilization phase

1571727328
tane
andrewrk, that's not a problem, I will just play around a bit. My goal was to find some types of inconsistencies programatically, so it might help in the stabilization

1571727330
shachaf
Then how do you call the Vulkan functions?

1571727400
andrewrk
shachaf, that's not implemented yet. but you load the driver as a dynamic library

1571727558
shachaf
Sure, but then how do you call it? The functions exported by libGL (and Vulkan, I'm pretty sure) take an Xlib Display * argument.

1571727570
shachaf
(I hope I'm not missing something really obvious here?)

1571727663
andrewrk
if that's the case then the project is doomed

1571727748
mq32
andrewrk: the usual way to create an OpenGL context is glXCreateContext (

1571727865
andrewrk
I'll look at the source of glXCreateContext and see if it can't be broken down further

1571727871
mq32
source for that function can be found here:

1571728107
andrewrk
thanks mq32. yeah it's doing something with the X protocol which potentially could be done without calling glXCreateContext

1571728132
mq32
cool

1571728151
mq32
i hope zig-window will be a success

1571728199
mq32
as i'm using SDL2 mostly just for "create window with OpenGL context and get input for that", it would be neat to remove that dependency

1571728254
shachaf
If you're using Nvidia drivers it won't go through mesa at all, right?

1571728290
shachaf
I have an X11 layer I replaced SDL with since there are a bunch of things SDL can't do. But my impression was that I had to use Xlib. It would be nice if that's not true.

1571734751
Snektron
Just throwing out there that Vulkan surfaces can also be initialized with wayland handles or even xcb handles

1571735158
Snektron
If someone is making a zig equivalent of glfw, i'd argue usinv xcb instead of Xlib since its a bit nicers (although also incomplete) and split the actual render backend code from the windowing part

1571735219
shachaf
How do you initialize a Vulkan surface with an xcb handle?

1571735227
shachaf
Oh, there's a separate header for it. I guess it has that over GL.

1571737187
Snektron
yeah theres just a surface function like for the other

1571737195
Snektron
surface types

1571738174
muffindrake
I don't think I've seen the noalias keyword in zig docs. Is that like the restrict qualifier in C?

1571738261
muffindrake
noalias appears in function signatures, but it's not explained by itself

1571739327
s-ol
hey, i posted this issue a couple of days ago about C-imported enum types:

1571739358
s-ol
it sees a type mismatch between imported enum values and the enum type (nested in a struct). is that normal?

1571739991
s-ol
mq32 (and andrewrk): and so I learn about zig-window... guess I will be rewriting zig-imgui to run off that soon then

1571740045
s-ol
zig-window is planned to take care of input as well I assume?

1571755273
joethephish
hello! anyone know if any work has been done to see if a zig-compiled static library can be used on Nintendo Switch?

1571755332
joethephish
(I'm no expert with low level compilation / ABI etc, so I don't know whether it's enough that zig supports 64 bit ARM)

1571755952
firefox317
joethephish: That should just work, but maybe you will find some issues on the way. There are a lot of people here that can help you with those. And ofcourse you should be able to run arbritrary code on the switch

1571756066
firefox317
See this issue regarding the current support for arm64:

1571756367
joethephish
Makes sense. Off the top of my head, I feel like not having stdlib might not be an issue? Since most stuff would be done in custom ways via Nintendo's own SDK, whether that's logging, memory allocation, etc etc

1571756460
joethephish
One of the things I'm not sure about is the set of compiler options that Nintendo "requires" to be passed into clang according to their docs. Though not sure whether I should really discuss those here because they're from a confidential doc :-/

1571756723
firefox317
Oh damn, you have access to Nintendo's own SDK. That's some cool stuff, are you a game developer? It really depends on what kind of flags they need, but it should be possible since we use the same backend as clang (LLVM)

1571756840
joethephish
Yep I'm an indie game dev (from inklestudios.com)

1571756854
joethephish
yeah, the same backend is what gives me hope!

1571756936
joethephish
...is there a way in build.zig to tell it to pass arbitrary extra parameters into clang, if they're not already handled natively via zig's own build structs?

1571756958
firefox317
But for some flags you maybe have to change some stuff internally in the compiler. And probably you want to keep track of this issue for cpu features

1571757019
joethephish
ahha yes that's exactly the right issue

1571757032
firefox317
We use clang to compile c code, but for zig code you need to pass parameters to LLVM

1571757049
joethephish
yeah

1571757059
joethephish
that makes sense

1571757221
firefox317
Using `-mllvm` you can pass arbitrary flags to the LLVM backend I think

1571767534
stratact
Hello Zig-iverse o/

1571767560
andrewrk
hi stratact

1571767596
stratact
andrewrk: I'm thinking of getting back into the swing of things. I probably need to relearn and update myself with Zig

1571767632
andrewrk
ha I don't think that much has changed in 2 weeks :)

1571767646
companion_cube
the stdlib docs! woo

1571767676
stratact
Ah, great! And we have stdlib API docs now?

1571767720
stratact
Ohhh! Nice

1571767816
stratact
I'd say there should be a direct link in the website documentation to the API docs

1571767943
andrewrk
stratact,

1571767966
stratact
upvoted

1571768264
mq32
oh that link reminds me that i should continue on the markdown parser...

1571768277
mq32
andrewrk, do you want a specific feature set?

1571768307
companion_cube
hello commonmark

1571768381
mq32
companion_cube, if you want commonmark, you have to implement it yourself :D

1571768382
mq32


1571768399
companion_cube
I mean, is there even another markdown? :p

1571768400
andrewrk
mq32, the main feature I'm interested in is line breaks and internal documentation hyperlinks when `something_like_this` matches a decl in scope

1571768418
mq32
okay, i can serve that already :)

1571768424
andrewrk
that's 90% of usefulness

1571768425
mq32
should prepare a pull request

1571768451
mq32
i also have *emphasis*, **boldness**, - unordered lists  and 1. ordered lists with nesting

1571768465
andrewrk
and I know this might be an unpopular requirement, but no external libs, you have to code the markdown parser in main.js

1571768476
mq32
it's about 200 LOC

1571768828
plumm
‚â†‚â†‚â†‚â†/2

1571768830
plumm
oops

1571769010
andrewrk
mikdusan, nice! I'm happy to see that you started taking advantage of -DZIG_ENABLE_MEM_PROFILE

1571769083
via
~/

1571769085
andrewrk
another idea I had regarding ConstExprValue is to do what many scripting languages do, e.g. with integer types. so for example the integer 1 can always be a certain ConstExprvalue *

1571769085
mikdusan
fyi the results it produces are very consistent with Xcode's memory profiler that i was using

1571769100
andrewrk
good to know

1571769109
mikdusan
i'm toying with interning a ton of the consts to see how that works out

1571769113
andrewrk
also feel free to rename ConstExprValue to ZigValue if you want to

1571769126
andrewrk
ah yeah that's what that's called, "interning"

1571769151
andrewrk
we should be able to free every `Const` IrInstruction

1571769175
andrewrk
I'm pretty sure none of the pass1 instructions need to be alive during codegen phase

1571769227
mikdusan
i hope so. also here's a rough count of some values for typical `test std.zig`:

1571769243
andrewrk
ConstGlobalRefs is a mess. that data/code used to make sense and now I need to audit all of it

1571769262
mikdusan
i'm assuming we can fold all voids.. and undefined... and dedup based on values for bool, and the other numbers

1571769308
andrewrk
yes, anything where type_has_one_possible_value

1571769335
mikdusan
right now as it stands "unembedding" has a penalty of about 100 megabytes because added pointer. so i don't want to commit anything until we get above water

1571769390
andrewrk
that's fair

1571769399
mq32
ha, markdown works well with the new layout:

1571769411
andrewrk
wow that's much more readable

1571769414
mikdusan
oh sweet.

1571769510
plumm
so nice!

1571769591
mq32
it turns out that if you remove a lot of crazy features from markdown, your parser gets quite "short"

1571769665
plumm
what crazy features? id say the same for TOML lol

1571769673
companion_cube
call that micro-markdown ;)

1571769689
mq32
companion_cube, yeah, probably

1571769694
andrewrk
the nice thing about markdown is that it degrades gracefully

1571769698
mq32
plumm, just read some stuff in the spec i posted above

1571769707
companion_cube
tbh I think it's cool, if you're compatible with the correspnding subset of cmark

1571769945
mq32
yeah i made some adjustments like improved code docs

1571769954
mq32
but for code blocks i just went with ``` for entry/exit

1571770703
shachaf
andrewrk: Wayland doesn't solve any of this because the API is written the same way. EGL/Vulkan functions take a wl_display * and so on.

1571772900
andrewrk
btw anyone who is doing generated docs work: you may not have noticed but there is a new flag: -fno-emit-bin

1571772914
andrewrk
shaves off a lot of time when doing std lib docs

1571773511
mq32
oh nice!

1571776023
tgschultz
stdlib docs are going to be pretty big for adoption. I suppose I should go over my contributions and make sure they produce something reasonable.

1571776091
tgschultz
also, kind of a long shot, but is anyone aware of a linux utility (using seccomp maybe?) that can arbitrarily redirect a program's 'open' syscalls?

1571776287
companion_cube
something based on ptrace, maybe?

1571776474
tgschultz
that's a start, thanks. I see someone working on snapd has experimented along these lines. I had hoped for a ready made solution.

1571781496
andrewrk
anyone who has a source build of zig on posix, try pulling latest master (after f65b1d46804bce7) and run: make && ./zig test ../lib/std/std.zig  -lc

1571781501
andrewrk
the progress display is quite nice now

1571781540
mikdusan
is that the "building dependency" stuff?

1571781625
pixelherodev
I would, but my laptop (which has Zig) doesn't have working internet at the moment. I had to quickly replace the screen last week after it broke and I apparently forgot to reconnect the I/O board (so ethernet isn't working) and the wifi antennas are a tad loose (so I don't get a signal where I am right now)

1571781630
pixelherodev
I'll have to try later :P

1571781678
andrewrk
mikdusan, yeah but I messed up the nodes a bit before, now that's fixed and it's integrated with zig's semantic analysis

1571781687
mikdusan
oh neat

1571781701
andrewrk
now it's obvious that most of the time is spent waiting for LLVM :P

1571781738
pixelherodev
In other words, once the stage2 compiler works, we need to replace the LLVM implementation with a new one in Zig?

1571781743
pixelherodev
(joking!)

1571781782
andrewrk
yeah. seriously though, llvm is not fast enough for debug builds, plus lots of zig's target audience is concerned about LLVM monoculture

1571781845
andrewrk
the problem of creating a debug mode code generator is a less difficult task than competing with the performance optimizations

1571781890
andrewrk
it's still a large project though, when you consider you have to do O(N) architectures, object file formats, and debug info targets

1571781921
andrewrk
however the biggest use case for fast debug builds is game devs who are interested in x86_64

1571781932
mikdusan
ah so you're thinking

1571781960
andrewrk
yes, if build-exe is provided and no objects to link

1571781978
andrewrk
this is also related to hot code swapping

1571782002
andrewrk
which could be quite useful if the compiler can take advantage of language semantics, e.g. no guaranteed struct size or layout

1571782014
mikdusan
i mean given that most people

1571782027
pixelherodev
Especially if it leaves room to add more

1571782034
andrewrk
precisely - that would be high reward for relatively small cost

1571782052
pixelherodev
With a proof of concept on the most valuable target, it would be a lot easier for others to join in and add the platforms of their choice

1571782058
andrewrk
yes

1571782059
ky0ko
i'd be somewhat displeased with only having x86_64, but i'm also the sort of person that runs netbsd on a powermac g4 as a primary computing device

1571782066
pixelherodev
The assembler is the easy part though

1571782081
andrewrk
ky0ko, we have to start somewhere, all the targets aren't going to become simultaneously available

1571782097
ky0ko
yeah that's fair

1571782126
pixelherodev
The question is, how do we get to assembly? Write a "simple" LLVM IR -> x64 assembly translator in Zig? Or replace LLVM in the pipeline entirely? Either way, that's going to take a lot of worj

1571782139
pixelherodev
s/worj/work

1571782142
ky0ko
speaking of netbsd on powerpc, how can i set my build target when i'm using "zig build"?

1571782157
ky0ko
is that something that needs to be done in build.zig?

1571782160
andrewrk
jonathan blow demod doing something like this and got very fast results. however his proof of concept is limited to alway-rebuild-everything strategy, which, has the major benefit of simplicity. but it's limited to small-medium size projects, where I plan to support very large projects in zig via incremental compilation & linking

1571782225
andrewrk
ky0ko, const target = b.addStandardTargetOptions(); foo.setTheTarget(target);

1571782266
andrewrk
ky0ko, this will give you the native target by default, and allow overriding it with netbsd-powerpc

1571782286
andrewrk
I missed a `null` parameter to that function there

1571782304
andrewrk
pixelherodev, we don't ever get to assembly, we go straight to machine code

1571782321
andrewrk
in the use case of fast debug builds, LLVM is never touched

1571782333
andrewrk
yes it is a large project

1571782349
pixelherodev
That means changes to the compiler...

1571782373
pixelherodev
Or should this be a stage2 target only?

1571782373
andrewrk
to the self-hosted one yes, which already needs to be reworked due to the new async/await semantics

1571782510
pixelherodev
What would be a good issue to start with wrt the self hosted compiler?

1571782525
pixelherodev
I want to be able to help work on it, but at the moment I haven't touched it yet

1571782882
andrewrk
pixelherodev, I have a good answer to that:

1571782895
pixelherodev
Thanks!

1571782919
andrewrk
have a look at

1571782960
andrewrk
some of the code in translate_c.zig is a bit clunky, which you are welcome to rework as you see fit. it can be quite a satisfying thing to work on, because you have well-defined input (C code) and well defined output (translated zig code)

1571782986
andrewrk
and it lends itself to small improvements ("this 1 new test case now works")

1571783013
andrewrk
completing this sub-project (make translate-c self-hosted) will have to be done before we can make self-hosted the thing we ship

1571783062
andrewrk
but the good news is that if this sub-project is completed, then we can delete 5,162 lines of C++ code, even before the rest of self-hosted is done

1571783125
andrewrk
this goes for anyone else looking to contribute too - this project is large but modular and friendly towards multiple simultaneous contributors with a small bit of coordination

1571783269
mikdusan
heh interning enum_literals for test std.zig saves 40 MiB

1571783314
andrewrk
beautiful

1571783445
andrewrk
it might be nice to do that memory analysis for the compiler_rt tests too. we have those gigantic test files

1571783619
pixelherodev
How many tests are there for that?

1571783624
pixelherodev
(self-hosted translation)

1571783625
andrewrk
oh it's actually smaller than std lib memory usage

1571783663
mikdusan
`g->string_literals_table` is this already string lit interning?

1571783670
andrewrk
mikdusan, also in case you didn't figure this out yet, you can make "Unknown_X" get replaced with a useful name by passing a name in for the relevant allocate() call

1571783711
andrewrk
pixelherodev, have a look at test/translate_c.zig. both stage1 and stage2 tests are in there.

1571783723
pixelherodev
Neat

1571783803
andrewrk
mikdusan, yes, under some conditions arrays go into that table, to make comptime []const u8 parameters cache as expected

1571783814
andrewrk
you can try disabling that and see what behavior tests fail

1571783866
andrewrk
mikdusan, we have a bit of a design issue to consider here with regards to memory: the language semantics currently require comptime calls to always return the same result; this is why ArrayList(u8) == ArrayList(u8)

1571783923
andrewrk
well, I think this is OK. I was going to say that a program can require an arbitrary amount of memory to be stored by doing comptime calls. but this is already true, for any language; a program could be arbitrarily long

1571784394
Snektron
test

1571784436
Snektron
if translate-c is made self hosted, would that mean making an entire c parser in Zig?

1571784439
Snektron
Or would that still be done by clang, then make Zig interact with the whatever clang spits out?

1571784472
Snektron
also is it me or does something not sync up well with the log?

1571784475
andrewrk
Snektron, it means moving more logic from translate_c.cpp to translate_c.zig. the issue I linked explains it:

1571784520
Snektron
ah its me, i was having trouble with matrix

1571784548
pixelherodev
What branch should the work on translate_c.zig go under?

1571784573
pixelherodev
s/should/is/

1571784578
pixelherodev
Is it on the master branch at the moment?

1571784606
Snektron
andrewrk: did you catch what i asked about the recommended style some time ago?

1571784614
andrewrk
pixelherodev, yeah master branch. you can use `zig translate-c-2` to try out the self hosted code. @cImport is hard coded to be the c++ implementation at the moment

1571784632
Snektron
as i recall, enum literals should be formatted in snake case, yet thats not always the case in the standard library

1571784638
andrewrk
Snektron, code style?

1571784666
andrewrk
enums are inconsistent because

1571784674
Snektron
Doesn't mention anything about enums

1571784693
andrewrk
which matters more than just style because

1571784743
Snektron
aha, i see

1571784758
Snektron
since i have been naming my enums in snake case

1571784978
Snektron
regarding #995: i suppose part of the verbosity can be relieved with enum literals

1571785040
andrewrk
it's going to be so, so very satisfying to delete translate_c.cpp

1571785048
Snektron
The example would then be written as `(try result_tree.errors.addOne()).* = Errors{.expected_var_decl_or_fn = .{.token = token_index}}`

