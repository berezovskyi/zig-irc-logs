1573173157
scientes
malloc/free is often a huge performance drain in C++/C apps

1573173165
scientes
both time and memory usage wise

1573173625
daurnimator
marijnfs_: not binary seialization, but is

1573180801
scientes


1573205394
dantix
why I cannot loop through `StructField`'s at runtime? Is it because it has strings and possibly other data memory for which is allocated during comptime, so it cannot be accessed at runtime?

1573212202
daurnimator
andrewrk: why is the fifo module not in the std docs?

1573217295
mq32
is the "index" in builtin.StackTrace the "length" of the trace?

1573217362
kenaryn
Hi computer people. According to rumors, a certain pixelherodev would have written an interesting blog entry few days ago, does anyone know its URI (or URL if you do not know the difference) please? I would be happy to read it.

1573217678
dingenskirchen
kenaryn:

1573218167
kenaryn
Thank you dingenskirchen, now I'm a happy man.

1573218791
mq32
dingenskirchen, i really like your nick. it's like you cannot even forget it ^^

1573218803
dingenskirchen
:p

1573219159
kenaryn
Hey, MasterQ32, what does your 'Q' mean?

1573219297
mq32


1573219314
mq32
mq32/MasterQ32 is my "old" nickname, new one is "xq" (with the same Q)

1573219320
mq32
it's just the first letter of my last name

1573219325
mq32
(and x is the first letter of my first name)

1573219406
kenaryn
I thought there was some kind of embedded joke inside.

1573219464
mq32
nah, it's just a part of my real name

1573219477
kenaryn
Because Q is the phonetic equivalent for 'ass' in french.

1573219481
kenaryn
Allright :)

1573219511
mq32
haha, good to know!

1573223596
companion_cube
and 'bit' of the french equivalent for 'cock' ðŸ¤·

1573223616
companion_cube
(you can imagine the meaning of 'q-bit'â€¦)

1573224736
mq32
quantum bit? :D

1573224798
fengb
Dickbutt?

1573224820
mq32
huh

1573224822
companion_cube
that's how it sounds

1573224841
mq32
anyone an idea why my objdump doesn't intermix source lines for std?

1573224853
bgiannan
companion_cube, fellow french ?

1573224858
companion_cube
oui :p

1573224871
bgiannan
excellent!

1573224926
bgiannan
french people finding each other by chuckling at the sound of 'bit'

1573224932
companion_cube
classic move

1573225228
mq32
oh.

1573225334
mq32
if you embed your debug info, you will lose your debug info with objdump

1573226251
mq32
huh. this is stupid

1573226269
mq32
i have two options: "it doesn't crash, but i have debug symbols" or "it does crash, but i don't have debug symbols"

1573226314
leeward
Right. What's a cubit?

1573226334
leeward
Sorry, that joke hasn't aged well.

1573226503
mq32
hmm

1573226504
mq32


1573226514
mq32
this assertion got hit when walking the stack

1573226519
mq32
anyone an idea why?

1573226750
mq32
andrewrk, can you help me there?

1573227142
euantor
I'm trying to make use of `RegOpenKeyExW` on Windows, but it looks like `HKEY` is defined as a pointer to a struct:

1573227178
mq32
const HKEY = *@OpaqueType(); is probably the best way

1573227188
mq32
"Pointer to unknown type"

1573227226
euantor
I also need to define some pre-defined HKEYs such as `HKEY_LOCAL_MACHINE` to make life easy:

1573227285
euantor
Seems Zig has a libc file that defines those values as follows:

1573227322
dimenus
is there a recommended casing style for various Zig names?

1573227956
mikdusan
dimenus:

1573227988
mikdusan
borked that link. this one is better.

1573227996
dimenus
got it :)

1573228706
companion_cube
bgiannan: what brings you here, btw? :)

1573228830
leeward
This seems like either a bug or a missing feature to me:

1573228877
leeward
Specifically, "error: switch must handle all possibilities"

1573228905
mq32
leeward: switch must handle all possibilities is a quite sane decision ;)

1573228915
leeward
Yes, but look at the code. It does.

1573228922
mq32
yes,

1573228925
mq32
the compiler doesn't

1573228931
mq32
cast your result to u1 and it does

1573228936
leeward
The compiler can know that, too. It knows what "& 0x1" means.

1573228946
mq32
@intCast(u1, byte & 0x1)

1573228965
mikdusan
the

1573228966
leeward
Sure, and that's fine for that example, but it doesn't work well when I'm masking bits that aren't contiguous.

1573229002
leeward
What I'd like to do is "bytes & 0x5" with 4 cases.

1573229023
leeward
I could shift the bits around into a u2, but it's ugly.

1573229023
mq32
mikdusan: do we have a proposal about implicit integer narrowing?

1573229023
fengb
The usual "fix" for that is else => unreachable

1573229036
leeward
Ah, right. I forgot about unreachable.

1573229048
mq32
would be cool to have implicit narrowing when you mask bits away

1573229050
fengb
That also gives you a helpful error in safe builds if it's not true

1573229087
leeward
I agree it would be cool.

1573229115
leeward
It's also a pretty minor feature, so I totally understand if it's not on the list.

1573230773
kenaryn
I noticed an unconsistency with test-related output. When `std.debug.warn();` is called, the compiler print the old `Test [n/n] test "<my_test_name>..."` formula. Otherwise, this kind of feed-back information is silently skipped.

1573236195
andrewrk
awareness of smaller int range on remainder division and masking is planned and there is an open issue for it

1573239377
bgiannan
companion_cube, i'm rewriting my game in zig

1573239406
companion_cube
ah, legit

1573239414
companion_cube
livin' on the edge

1573239585
shakesoda
i've been debating doing the same, in some future version

1573239927
blAckEn3d
Hi. I'm trying to compile a basic X11 program with zig 0.5.0. Almost everything works OK, but I'm not quite sure how to pass a string to a C function. Here's the error message: alex@Binky:/tmp$ ~/Apps/zig-linux-x86_64-0.5.0+4530adbd3/zig build-exe hello.zig -lX11 -lXft -lc -I/usr/include/ -L/usr/lib/x86_64-linux-gnu/ -I/usr/include/freetype2/

1573239933
blAckEn3d
/tmp/hello.zig:43:59: error: expected type '[*c]const c_uint', found '[*]const u8'

1573239935
blAckEn3d
_ = X11.XftDrawString32(xft, &col, f, 10, 50, c"", msg.len);

1573239938
blAckEn3d
^

1573239940
blAckEn3d
/tmp/hello.zig:43:59: note: pointer type child 'u8' cannot cast into pointer type child 'c_uint'

1573239943
blAckEn3d
_ = X11.XftDrawString32(xft, &col, f, 10, 50, c"", msg.len);

1573239946
blAckEn3d
^

1573239948
blAckEn3d
/tmp/hello.zig:43:36: note: referenced here

1573239951
blAckEn3d
_ = X11.XftDrawString32(xft, &col, f, 10, 50, c"", msg.len);

1573239953
blAckEn3d
^

1573240027
andrewrk
hi blAckEn3d. you're going to want to use a pastebin-like service to link to a code snippet here

1573240054
blAckEn3d
Hi andrewrk. Apologies for the spam. Will do

1573240066
andrewrk
that function looks like it is expecting something other than UTF-8

1573240111
shakesoda
you likely want XftDrawString8?

1573240124
shakesoda
isn't that the utf-32 variant, you're using?

1573240142
blAckEn3d
Ah, right. Let's see if that works

1573240182
blAckEn3d
That works, thanks :)

1573240200
shakesoda
it might actually have a specific variant for Utf8

1573240218
shakesoda
try XftDrawStringUtf8, also

1573240325
shakesoda
i can't quite make sense of the description of the functions, it sounds like it's always unicode so 8 and utf8 should be the same thing

1573247666
leeward
Is there a way to trap runtime bounds checks so I can verify that they're working in a test?

1573247706
leeward
I don't want to verify that the bounds checks themselves work, but I do want to verify the bounds themselves. I suppose I could expectEqual(thing, array.len)

1573248316
leeward


1573248331
leeward
There must be a way to do this. What am I missing?

1573248559
leeward
That is, make an array initializer in a constructor method of a struct.

1573249155
kllr_sbstn
leeward, like this?

1573249260
leeward
kllr_sbstn: Not exactly. I want it initialized.

1573249294
leeward
I suppose I could do `= [1] { 0 } ** n` instead of `undefined`.

1573249311
leeward
But I don't need the size to be configurable.

1573249331
leeward
I just want to specify the length once.

1573249728
kllr_sbstn
i guess you could do this

1573249936
leeward
Oh, huh.

1573249942
leeward
Yeah, that works. Thanks.

1573249970
leeward
I wonder if it's a bug though. The struct bit in the big long document is a bit light on details.

1573251387
leeward
21

1573251393
leeward
whoopsie

1573252341
ftxqxd
Hello! I'm trying to build Zig from source for the first time, but am getting a bunch of clang errors about '<var> may be used uninitialized in this function' when running `make zig`

1573252379
andrewrk
ftxqxd, what version of clang

1573252382
ftxqxd
Looking at the source lines causing the errors, none of the variables seem to actually be uninitialized, so I'm very confused

1573252385
ftxqxd
9.0.0

1573252424
andrewrk
is that the same compiler that built the llvm & clang libraries that zig will link against?

1573252462
ftxqxd
It should be

1573252477
ftxqxd
If I remove -Werror from the CMakeLists.txt it compiles fine

1573252699
ftxqxd
(For context, I'm using the NixOS packages llvmPackages_9.clang-unwrapped and llvmPackages_9.llvm to compile)

1573252722
waleee-cl
ftxqxd:  define an overlay instead then?

1573252794
ftxqxd
There's also an unused-result warning/error on src/os.cpp:85, which looks legit

1573252825
ftxqxd
Sorry, src/os.cpp:856

1573253223
marijnfs
did you build llvm yourself?

1573253247
ftxqxd
No, taken straight from the package manager

1573253257
ftxqxd
Might be the issue, haven't figured out what version of clang it was built with

1573253471
waleee-cl


1573253519
waleee-cl
oh, didn't notice the llvmPackages (<-- glaring missing version number)

1573253534
ftxqxd
Yeah, I think it defaults to 7

1573253546
ftxqxd
I think I tried that and it didn't work

1573253569
waleee-cl
which channel are you using? nixos-unstable should have 9 I think

1573253595
ftxqxd
I'm using nixos-unstable but llvmPackages is still llvmPackages_7

1573253613
ftxqxd
But my default.nix uses llvmPackages_9 so it's not a problem

1573253911
ftxqxd
Is clang known to occasionally output bogus maybe-uninitialized warnings?

1573254011
andrewrk
oh, ftxqxd nixos puts a bunch of weird flags. you need this thing I have in my env file

1573254074
andrewrk
ftxqxd,

1573254103
andrewrk
here's my nix-shell file:

1573254116
andrewrk
the hardeningDisable thing is I'm guessing the culprit

1573254125
ftxqxd
andrewrk: Aha! Thank you, trying it now

1573254292
ftxqxd
andrewrk: Great, that seemed to fix it

1573254304
ftxqxd
Thanks

1573254500
andrewrk
ftxqxd, yeah that drove me nuts until I figured it out (notice who filed that issue and the date)

1573255484
THFKA4
i ran into the -Werror thing last week, i think cmake -DCMAKE_BUILD_TYPE=Release .. was my workaround

1573256156
andrewrk
`@as` landed in master branch. godspeed

1573256706
kllr_sbstn
a cast operator?

1573256797
andrewrk
`T(y)` is now `@as(T, y)`. `x(y)` is always a function call now.

1573256812
andrewrk
more details:

1573256994
shakesoda
is there a specific reason there are @builtins for much of the std.math stuff

1573257002
shakesoda
i.e. are they convenience aliases, or actually different

1573257072
andrewrk
shakesoda, see

1573257287
frmdstryr
Is std.net.TcpServer finalized? It looks like the TcpServer.accept returns a file but tosses the address

1573257295
shakesoda
andrewrk: thanks, makes sense

1573257333
shakesoda
the dupes just seem like mysterious clutter without the background knowledge there

1573257337
andrewrk
frmdstryr, it's a brand new API, not stable yet. that's something that needs to be added

1573257362
andrewrk
shakesoda, what dupes?

1573257379
shakesoda
andrewrk: std.math.sin -> @sin etc

1573257387
andrewrk
ah

1573257457
frmdstryr
Thanks. Does zig have a pair/tuple?

1573257458
kllr_sbstn
@andrewrk, wow, that's a big pr. better check if my code still compiles :)

1573257546
scientes
cool

