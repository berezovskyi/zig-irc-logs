1560735336
gamester
How will intellisense-like tooling work with lazy top level analysis? When you're writing a new function you'd want it analyzed. Maybe the function/declaration that you're editing would be analyzed regardless?

1560735940
gamester
or you could always do _ = functionName; before writing it

1560738551
gamester
My plan: Create a simple LSP server that maintains a replica of my codebase..in an in-memory filesystem. LSP client (vim) sends non-saved changes to my LSP server. LSP server 'writes' to disk (in-memory). LSP server invokes compiler and parses error output, sends as diagnostics to client. No I only use terminal to compile and run, not check for errors.

1560738589
gamester
So I get so see all compile errors in-line, but I don't get code completion which I don't care about.

1560738764
gamester
This is a very, very simple and yet non-hacky way to get intellisense-like diagnostics without changing the compiler. I'm going for it.

1560739213
gamester
The compiler will be invoked on each semicolon. If LSP client sends changes that don't end in a semicolon, the LSP server does not compile. Something like that.

1560739947
andrewrk
tralamazza, that's union initialization syntax:

1560739988
andrewrk
builtin.Arch { .thumb = v7m}

1560741254
scientes
yeah there are problems with those unions, i need to look at how do do matches against those

1560741330
scientes
(test_target.os == builtin.os and test_target.arch == builtin.arch)

1560741481
scientes
access of inactive union field

1560741486
scientes
is that really always an error?

1560741500
scientes
oh i see >  This safety is not available for extern or packed unions.

1560741541
scientes
/home/shawn/git/zig/test/tests.zig:177:78: error: operator not allowed for type 'builtin.Arch'

1560750826
tralamazza
builtin.Arch { .thumb = .v7m } seems to make the compier happy, but I get a build: compiler_rt.zig:256:55: error: accessing union field 'arm' while field 'thumb' is set

1560750834
tralamazza
error*

1560752697
gonz_
andrewrk: You deserve it. Keep up the excellent work and just stay on mission and we'll all be better off for it. Most of the reason I'm having fun getting back to low-level-ish programming after 11/12 years away from it is because of zig.

1560762607
meowray
gamester: it is difficult to

1560780959
andrewrk
tralamazza, hmm let me try to reproduce this

1560781879
andrewrk
tralamazza, what version of zig are you on? I can't reproduce this problem

1560789742
tralamazza
andrewrk: 0.4

1560789769
tralamazza
I should try master with that extern fix

1560789786
tralamazza
just got back from work, I can zig for a bit

1560792873
daurnimator
welp, the wikipedia page got moved to "Draft" section

1560792901
daurnimator
if anyone wants to add some extra content in there; especially anything sourceable, then we can try and get it moved back into place

1560793996
tralamazza
andrewrk: yeah I don't get that error on master

1560794028
andrewrk
I would suggest using master at this point. zig is still so young that it's a big difference

1560794072
andrewrk
note that we don't even have bug fix releases yet - everything is happening on master branch

1560794108
daurnimator
yeah 0.4.0 -> master has quite some changes now

1560798056
tralamazza
is it possible to pass arguments to the linker?

1560798484
andrewrk
tralamazza, what are you trying to do? maybe there's a better solution than passing args to the linker

1560798533
andrewrk
gonz_, glad to hear it! are you working on a project in particular and is it open source?

1560798745
gamester
I'm working on parsing compile errors for my LSP server. Redirecting the compiler's stderr to a file I no longer see the section of source code + the caret pointing to the error location. How does this work? Is that a terminal feature?

1560799170
andrewrk
gamester, this is controlled by the --color flag. the default option is "auto" which means it checks if stderr is a terminal or not

1560799197
andrewrk
the carot and source line of code is redundant information; when processing compile errors one should ignore them anyway, so I think that behavior is actually what you want

1560799211
andrewrk
*caret

1560799216
gamester
yes, it is

1560799309
tralamazza
andrewrk: working on a minimal arm embedded example, trying to do all in zig

1560799400
tralamazza
settings up the vector table and having weak symbols for the handlers for instance

1560799403
andrewrk
neat!

1560799407
tralamazza
s/settings/setting

1560799429
andrewrk
I think zig will work well for this use case, although you will probably hit some snags (that we can hopefully get fixed for you)

1560799437
tralamazza
great

1560799452
tralamazza
i know the arm side of things, zig not so much :s

1560799465
andrewrk
that makes our skill sets complementary :)

1560799469
daurnimator
tralamazza: that's good. we need arm experts :)

1560799502
tralamazza
dont worry, i am an expert at nothing ;)

1560799530
tralamazza
so to have something visible to the linker, it has to be declared as "export", which i take it's a strong linkage

1560799531
andrewrk
tralamazza, would it make sense to have "thumb" listed here? or does it make sense for it to be part of the "arm 32-bit" target as it currently stands?

1560799538
tralamazza
I am trying to set a weak linkage with @export

1560799543
tralamazza
do you have an example of that working?

1560799572
andrewrk
tralamazza, yes, first have a look at

1560799597
andrewrk
actually that example is pretty decent

1560799611
andrewrk
enum literals make that linkage argument less cumbersome

1560799621
andrewrk
you can just put `.Weak`

1560799647
tralamazza
hm yah so arm is a bit silly, thumb and arm are instruction sets, they can be executed and mixed together in the same binary

1560799662
tralamazza
I mostly use thumb since it's smaller

1560799669
daurnimator
as long as your processor supports both (which not all do)

1560799669
andrewrk
hmmm

1560799679
daurnimator
and IIRC some instructions only exist in one or the other modes

1560799694
andrewrk
I feel like if I had more experience with this, I might organize things a bit differently

1560799695
scientes
thumb can do everything since armv7

1560799706
andrewrk
but I don't have a good enough intuition for it yet

1560799714
tralamazza
it's really the armv that dictates core instruction set

1560799838
tralamazza
now everything is extra confusing with cortex-m33 and the security stuff

1560799939
gamester
andrewrk: are newlines always \n?

1560799949
gamester
in error messages

1560799951
scientes
gamester, yes

1560799977
scientes
error messages, no idea

1560799985
daurnimator
scientes: yeah and I think cortex-m devices

1560799993
scientes
daurnimator, yeah all the -m cpus

1560800004
scientes
thats the -M instruction set

1560800007
daurnimator
i.e. old devices you must use non-thumb. -m cpus you must use thumb2. other devices support both

1560800012
scientes
and ARMv8-M is 32-bit only as well

1560800144
tralamazza
andrewrk: I guess the question is, if I @export("Foo", Bar, .Weak) can I make Foo visible as a symbol inside the same .zig?

1560800172
scientes
why not just call it as Bar tralamazza ?

1560800247
tralamazza
how do I position them in a vector table?

1560800269
scientes
functions are function pointers until you call them

1560800277
scientes
you just have to get the type signature right

1560800558
daurnimator
scientes: I think the question is more: how do you get the linker to place them at a specified address?

1560800566
daurnimator
or am I misinterpreting things

1560800594
scientes
linkers only support that for _start

1560800609
scientes
.Weak certainly is not that

1560800628
daurnimator
scientes: a linker script for a freestanding device can have all kinds of offsets

1560800691
tralamazza
I probably didn't explain well

1560800728
scientes
ahh you mean a manual vtable, rather than just a zig vtable

1560800763
scientes
I mean if you only need the vtable at a certain place you could probably do this all in zig, but maybe some additional stuff to support linker scripts

1560800787
tralamazza
if by vtable you mean a vector table =P

1560800796
scientes
i thought you meant function table

1560800797
FireFox317
tralamazza: I solved that by making a section in the linker table for the vector table. And then using an array of unions, where one type in the union is a function pointer and the other value is an integer

1560800803
scientes
function pointer table

1560800822
tralamazza
FireFox317: did you compute the top of the stack in the linker script too?

1560800847
tralamazza
right now I have an array of functions, and i have a horrible cast for the top of the stack addr

1560800854
tralamazza
thinking of doing a struct instead

1560800856
scientes
tralamazza, @export() lets the linker handle it, but extern will make it follow the C abi, and you can write your own dynamic linker if you want

1560800891
scientes
but I'm going past my own experience here

1560800892
daurnimator
tralamazza: would a solution be to export the vector table as its own section; and then from a linker script put it at the right location?

1560800904
scientes
^^yeah that is what i was suggesting

1560800909
scientes
but you said it better

1560800919
tralamazza
that is what we/I do

1560800930
tralamazza
export const vectors linksection(".vectors") = [_]?Isr {...

1560800945
scientes
but for arm you don't need an indirect vtable, you can jump directly

1560800948
tralamazza
and the script has .vectors : { etc

1560800948
daurnimator
tralamazza: btw make sure you mark it 'extern'

1560800952
scientes
so you might just want the linker to handle this stuff

1560800952
FireFox317
tralamazza: Yes, the first entry in my vector table (stack pointer) i calculated in the linker script

1560800968
tralamazza
FireFox317: thanks

1560800976
daurnimator
tralamazza: oh right, 'export' implies extern

1560800981
scientes
tralamazza, you can also just use build-obj with export, and then do your own linking

1560800983
tralamazza
it does :)

1560801000
tralamazza
unfortunately I am using a makefile instead of build.zig, too much friction

1560801013
tralamazza
I build the objs and link them manually

1560801040
tralamazza
this is fun

1560801316
FireFox317
tralamazza: This is how I did it using only zig including build.zig:

1560801329
FireFox317
Maybe this can help you a bit, I'm still working on it tho

1560801554
tralamazza
aha using PROVIDE

1560801556
tralamazza
I see

1560801564
tralamazza
didn't think of that

1560801580
tralamazza
great thanks

1560801613
tralamazza
man this .ARM.exidx pops up even if you dont use c++, very annoying

1560801971
FireFox317
Jup, that's why I added the discard thing in the linker script

1560802239
FireFox317
Actually I found the information on the linker script etc on a embedded Rust page xd

1560803628
ross_k
Hi, I'm getting an error trying to upgrade my MSVC zig project to 0.4.0:

1560803632
ross_k
"Zig is unable to provide a libc for the chosen target 'x86_64-unknown-windows-msvc'."

1560803656
daurnimator
ross_k: where is the -unknown- coming from?

1560803672
ross_k
Not sure, it's not something I've specified myself

1560803672
daurnimator
(isn't the target just called x86_64-windows-msvc?)

1560803681
ross_k
My build.zig:

1560803708
ross_k
It's based on the tetris example:

1560803710
daurnimator
hrm. does msvc even have a libc to link?

1560803742
daurnimator
ross_k: I think remove the linking to libc? also I don't think you need the '.lib. postfix on the other libraries

1560803807
ross_k
I thought that too, but removing the .lib means it can't find the files

1560803921
ross_k
Cool, removing the linking to libc seems to get me past that issue

1560806252
emekankurumeh[m]
the unknown comes from llvm. zig use a different form of target triple that discards the second part (vendor) from the llvm triple. that code probably needs to be updated to use zig triples instead of llvm ones.

1560806432
emekankurumeh[m]
FireFox317: whenever I tried discarding .ARM.edix i got a linker error about not being able to discard that section

1560806951
reaysawa
hi, is the language's grammar available somewhere in BNF or some other human-readable format like that?

1560806991
reaysawa
Grammar anchor in the Documentation page doesn't seem to go anywhere

1560806999
daurnimator
reaysawa: its on the docs page

1560807010
terinjokes
it goes to the "Grammar" section at the end of the docs

1560807019
terinjokes
which has the PEG grammar

1560807021
daurnimator
reaysawa:

1560807040
daurnimator
if it doesn't work for you; scroll to the bottom of the page

1560807081
reaysawa
right, it wasn't working for whatever reason O_O thanks

1560807204
reaysawa
my interest is in building some regex rules for generating tags, I'm too used to them for navigating...

1560807398
daurnimator
hrm. speaking of, we should have a good git diff config

