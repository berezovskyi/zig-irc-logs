1561424124
mikdusan
oh oh someone has to "learn how to vertically center text in CSS" now :)

1561424173
andrewrk
lol. no they edited their pledge down from 42 to 2 within 1 minute

1561424180
andrewrk
niiiiice try

1561424352
fengb
Would it be helpful to convert internal parse tokens to the human-readable equivalent?

1561424381
fengb
`error: expected Identifier, found PipePipe` vs `error: expected '[Identifier]', found '||'`

1561424462
fengb
At least Zig doesn't expect `T_PAAMAYIM_NEKUDOTAYIM` :P

1561428478
curtisf
Hm, fun, found another compiler crash... I don't know how to work around this one

1561428996
mikdusan
curtisf: did you instead want `Alpha: ?*Alpha,`

1561430374
curtisf
Unfortunately my real code doesn't literally write that, it has an optional struct which contains a pointer

1561430427
curtisf
sorry, scratch that, reverse it. I have an optional struct field which contains just a pointer

1561430438
curtisf
err I think I have both :)

1561430535
mikdusan
i think the struct needs to be a pointer for recursive solution. maybe someone else can chime in.

1561431734
fengb
Bleh, I haven't been able to run tests on Mac forever now

1561431750
fengb
Is there any hidden cache dir I need to purge?

1561431755
mikdusan
fengb: where does it fail?

1561431804
fengb


1561431832
fengb
I also just downloaded last night's "0.4.0+de2b0cd7" and same errors

1561431878
mikdusan
xcode or gcc?

1561431882
fengb
xcode

1561431926
fengb
The compiler works just fine

1561431937
fengb
But when I try running zig test, it bombs with those errors

1561431957
andrewrk
fengb, that's strange, the CI server runs zig test on macos

1561431995
mikdusan
if you want to scrub cache, one in curdir zig-cache/ and one in ~/Library/Application Support/zig, but i doubt that's issue

1561432013
fengb
Yeah I trashed both

1561432031
fengb
It's been like this since the std.os change. Nobody else has this problem so I'm not sure what's going on

1561432106
andrewrk
fengb, I wonder if it's related to

1561432133
mikdusan
ok i just built master: de2b0cd7, try smaller test... `zig build test-behavior -Dskip-release -Dskip-non-native`

1561432150
mikdusan
this works for me

1561432193
curtisf
mikdusan: I updated the issue with a slightly less reduced version of my code that also causes the crash. Do you spot anything I should obviously be doing differently?

1561432323
fengb
mikdusan: even less luck with testing zig itself `unable to spawn /Users/vsts/llvm+clang-8.0.0-macos-x86_64-gcc8-release/bin/llvm-config: error.FileNotFound`

1561432409
mikdusan
fengb: that is latest ziglang.org binary? let me download it...

1561432589
fengb
Okay after rebuild, zig tests are working. I think it's hardcoded vsts into the path somehow

1561432621
mikdusan
yeah test failed for me with downloaded binary

1561432635
mikdusan
assuming i'm even running it correctly

1561432728
fengb
Something wrong with this:

1561432784
andrewrk
mikdusan, it's intended to be run directly from the dir after unzipping

1561432884
mikdusan
andrewrk: sanity check: i don't have it in path, cd to master/ (git checkout of zig); /PATH/TO/EXTRACTED/zig build test...

1561432902
andrewrk
oh, you can't run the tests from a downloaded build, it doesn't ship with them

1561432915
mikdusan
that explains it :)

1561432924
andrewrk
yeah some of the compiler_rt test files are huge

1561432933
fengb
Ah

1561432951
andrewrk
`zig test` works, just not zig's own test suite

1561432956
andrewrk
it doesn't even ship with build.zig

1561432959
fengb
Well something with Jimmi's bench is causing it to crap out on Mac

1561432972
fengb
I'll create an issue. My other tests are working fine

1561432976
andrewrk
thanks

1561434016
fengb


1561434025
fengb
I think it's `pub usingnamespace`

1561434510
hryx
are escapes \a \b \f \v valid in zig string/char literals? The docs say no, and the compiler doesn't like me doing `\a`, but translate_c.cpp renders them to string literals

1561434661
andrewrk
hryx, I think the grammar spec is correct, just checked and it's: nr\\t'"

1561434672
andrewrk
oh you already noted that

1561434687
andrewrk
I think it's a mistake in translate-c, or it changed and didn't get updated

1561434706
hryx
ah, thanks. sanity in tact

1561434714
hryx
relatively speaking

1561435210
hryx
arrays can implicitly cast to slices in assigment statements, but not in return statements. Is that accurate?

1561435249
hryx
i.e., I'm returning a [2]u8 in a function whose return type is []const u8, and compiler doesn't like it

1561435321
hryx
but I can get around this with something like this: `return ([_]u8{'a', 'b')[0..]` which seems ok, just a little messy

1561435325
andrewrk
I think the issue might be if there are multiple return statements and it's doing peer type resolution?

1561435362
andrewrk
I think that is going to change soon, either with the result location branch or soon after it. the "result type" can be used as the cast target rather than the peer types, when it is available

1561435366
hryx
ohhh, maybe that's it. I always get tripped up by peer type resolution, because it tries to resolve even when the return type is known

1561435383
hryx
that would be awesome

1561435388
andrewrk
yeah, I think that was a mistake. in general I think peer type resolution will be changed so that if there is a result type, it will implicit cast each peer to the result

1561435410
andrewrk
but if there is not a result type (e.g. var x = if(c) a else b;) then it will do peer type resolution

1561435420
hryx
honestly that sounds perfect

1561435433
hryx
should there be an issue to track it? I'd be down to make one

1561435434
andrewrk
or if functions with inferred return type ever becomes a thing, then all the return values would get peer type resolved

1561435444
andrewrk
I would appreciate that, thank you

1561435448
hryx
sure thing

1561435459
andrewrk
I'm a little behind on issue triage, I really want to finish up this branch

1561435479
andrewrk
but I took a day today taking advantage of the state of the internet to run that musl fundraiser

1561435523
hryx
that blog post was crazy. I missed all that fascinating internet drama

1561435555
hryx
but great conclusion at the end about musl

1561436208
andrewrk
I'm gonna get a good night's sleep and then try to make significant progress on that branch tomorrow

1561436209
andrewrk
good night

1561436338
hryx
later o/

1561437853
mikdusan
heh src/analyze.cpp has UTF-8 BOM

1561437871
hryx
D:

1561437881
mikdusan
only file in entire tree

1561438454
gonz_
andrewrk: Good choice on stepping up for musl and making it obvious that you recognize the value of your dependencies.

1561449322
social_cues
why does [_]u16{0} ** 10 from docs only work as constant?

1561449347
social_cues
I'd like to initialize a `var` array to zero instead

1561449514
social_cues
Nevermind, got it

1561453779
squiddlebit
Am I not supposed to call std.os.read() when attempting to receive data from a socket? It works, but it doesn't handle errno 104 (ECONNRESET), aka "connection reset by peer". I'm wondering if that is an oversight or intentional

1561454477
squiddlebit
Oh right I suppose I should mention. This is on Linux and the issue appears in the stdlib of master branch

1561458658
abbiya
hi, where can i find the standard library docs ?

1561458864
samtebbs
abbiya: There are none at the moment, but it is in the pipeline

1561458872
abbiya
ok

1561458912
abbiya
i want to start writing a web api. how do i proceed ? i know Go

1561459071
gonz_
abbiya: I think you probably find that it's pretty hard to do networking stuff at the moment, unless you're familiar with the equivalent in C.

1561459117
samtebbs
abbiya: AFAIK the HTTP-related parts of std haven't been implemented yet as they're blocked on async/await

1561459124
gonz_
I think andrewrk currently recommends to wait until the rewrite of async/await, at least.

1561459127
abbiya
ok, thanks. waiting for 1.0

1561459165
abbiya
i know github stars dont matter much but vlang has more than zig

1561459181
abbiya
is there a comparison btw nim and zig ?

1561459195
abbiya
i was thinking zig but googled nim

1561459220
samtebbs
It does and most would say that it doesn't deserve them

1561459257
gonz_
The prevailing attitude in here is to stay on topic and positive, i.e. focus on what's good about zig and not what's bad about other languages.

1561459268
samtebbs
You could perhaps work with HTTP if you're willing to do so at a very low level without the stdlib helping you outside of file I/O

1561459306
samtebbs
Yeah, talking about other languages is probably best done on reddit etc. :)

1561459340
abbiya
awesome work on zig

1561459341
samtebbs
Although it is useful to compare and see where Zig could improve, as that helps accomplish the goal of making Zig even better

1561459377
abbiya
see y'all in future

1561463852
fubd
hi! I was to build

1561463856
fubd
was *looking

1561463881
fubd
i'm installing its dependencies with "vcpkg" on windows. how do I give extra include directories to "zig build" ?

1561463939
fubd
the "--search-prefix" option in --help looks promising, but it doesn't seem to work for my case

1561464697
fubd
ah, I found addIncludeDir -- but now running into linker errors

1561464704
fubd
what are the best build.zig examples to go from?

1561465081
social_cues
these guys love talking

1561465115
social_cues
(talking about this channel)

1561465261
samtebbs
fubd: You can try looking at any of andrew's projects, such as

1561465296
samtebbs
There are also a few projects linked at

1561465317
fubd
thanks!

1561465328
samtebbs
Then there's also my kernel's build.zig at

1561465341
samtebbs
It doesn't do anything with include dirs though

1561465550
lunamn
had to deal with include dirs when testing gtk with zig:

1561470136
forgot-password
Hi guys, is it possible to use std.io.Deserialize to deserialize a slice of things (e.g. []u8)? I'd rather not add an allocator field to all my structs and use deserializeInto every time.

1561471415
BitPuffin
if you own the memory for the slice couldn't you just do slice.ptr and cast it to a struct or something like that @forgot

1561471419
BitPuffin
@forgot-password

1561471569
forgot-password
I'm not exactly sure what you mean, BitPuffin.

1561471619
BitPuffin
so if you have a struct type called Foo let's say

1561471629
BitPuffin
and you have a slice that contains bytes that you just reads that you want to deserialize into Foo

1561471643
BitPuffin
then you can get the raw pointer of the slice with slice.ptr

1561471647
BitPuffin
and thenyou could cast it to Foo

1561471693
BitPuffin
although I suppose you just have readStruct

1561471694
BitPuffin


1561472008
forgot-password
Wait a second, I'll put together a basic example :) I'm not sure if I can follow you otherwise

1561472396
forgot-password
Here's a pastebin link:

1561472493
forgot-password
What I tried is to add an allocator field to my Container struct and then use `Deserializer.deserializeInto(&container)` where I already set container.allocator.

1561472521
forgot-password
But this gets really ugly when I have to do that for the Entry struct as well (because of the name field, which is a []u8)

1561472854
Tetralux
I've never used the serializer, but I suspect that you

1561472878
Tetralux
I think you can serialize the slice as a len and then that number of elements.

1561472896
Tetralux
...alloc'ing a slice of the length you get

1561472905
Tetralux
..and then passing the slice to deserializeInto

1561472919
via
ee

1561472928
Tetralux
Or deserialize.

1561472933
Tetralux
Like

1561472935
Tetralux
Never tried it

1561472969
Tetralux
Actually no

1561472998
Tetralux
I think you'd just have to store the length as an integer, deserialize that, and then ask for the type that many times.

1561473087
forgot-password
Tetralux: Yes, but the issue is allocating the space for `length` elements

1561473160
forgot-password
Or what do you mean by `ask for the type that many times`?

1561473180
Tetralux
I mean, deserialize an int that tells you how many u8s you have

1561473193
Tetralux
And then 'while' up to that number, calling deserialize(u8) each time.

1561473207
Tetralux
But you need space to put them.

1561473216
Tetralux
Which is why you're asking about how to alloc  that many of them.

1561473221
forgot-password
Exactly

1561473234
Tetralux
I think you just have to have an allocator and alloc it. :')

1561473255
Tetralux
You could have a stack array that you pass to the container thingy

1561473258
Tetralux
Instead of alloc'ing

1561473262
forgot-password
But how do I get that allocator into my deserialize function in a nice way? Because I don't have control over that

1561473264
Tetralux
But that would be fixed-size.

1561473276
forgot-password
But then I have to pass that into nested structures all the time

1561473298
Tetralux
Maybe there's a better way to architect your program.

1561473306
forgot-password
Say I have another Subentry struct, of which an Entry has n items. Then the Entry needs to do the same thing as the container, which leads to a lot of clutter

1561473337
Tetralux
Hmmm.

1561473350
forgot-password
But how? I think deserializing a list of items is a very valid use case for the builtin Deserializer. Maybe the user could pass an allocator when initializing the latter

1561473370
forgot-password
And then you one could use `deserializer.allocator` in the custom deserialize functions

1561473406
Tetralux
Do you have a thing that is responsible for firing off the deserialization?

1561473440
Tetralux
Or are you deserializing in order to use it later?

1561473504
forgot-password
Well, the line `const container = try deserializer.deserialize(&in_stream.stream)` is responsible for starting the deserialization

1561473515
forgot-password
Yes, I intend on using the deserialized value later

1561473729
Tetralux
So

1561473735
Tetralux
Let me see if I have this right

1561473745
Tetralux
You want to essentially read a Container from the stream.

1561473761
Tetralux
To do that, you deserialize it.

1561473768
Tetralux
And it has an array of Entrys.

1561473775
Tetralux
So it needs to make a slice for that.

1561473781
Tetralux
But needs an allocator to make space for them.

1561473805
Tetralux
And then, each Entry has the same problem.

1561473814
Tetralux
Where they have a slice to their name.

1561473818
Tetralux
Which you need to allocate for.

1561473897
forgot-password
Correct, but I don't have any control over what gets passed to the custom deserialization functions, because they are called by the standard library implementation. So there's no way, other than going the ugly route of using deserializeInto every time, to access said allocator.

1561473910
forgot-password
Well, having a global one would work, but that's even worse.

1561473981
Tetralux
Hmmm.

1561474098
Tetralux
Yeah - I don't know how you might deserialize a slice with that interface.

1561474105
forgot-password
Being able to pass an allocator when initializing a Deserializer is a good solution, in my opinion, but I don't have a lot of experience with Zig, so I'd leave the judging to you guys.

1561474145
forgot-password
Then you could use that allocator in your deserialization functions and the end user still has control over which allocator implementation to use

1561474186
Tetralux
I think the idea of the io.Deserializer is that it doesn't allocate memory.

1561474227
Tetralux
But I'm not sure how you'd go about dealing with the slice.

1561474265
forgot-password
But why not have it allocate any memory? Isn't that a valid use case for a deserializer?

1561474302
Tetralux
I don't know honestly. Maybe @andrewrk can shed some light on it.

1561474323
forgot-password
Take a PNG Decoder for example. It needs some place to put the decoded data, doesn't it?

1561474342
andrewrk
sorry I'm going to close IRC for a few hours and try to finish up

1561474353
Tetralux
The issue is that a slice is itself a struct, but it just points to other memory so storing the slice isn't what you want.

1561474361
Tetralux
You want to serialise its contents instead.

1561474383
Tetralux
ie: s.len, s[0], s[1], ... , s[s.len-1]

1561474399
forgot-password
Serialization isn't a problem at all. That works fine

1561474421
forgot-password
It's just the deserialization that's giving me a headache

1561474461
Tetralux
Oh right right

1561474466
Tetralux
Was thinking of something else xD

1561474476
Tetralux
Yeah

1561474480
Tetralux
I'm not sure how you'd best do this.

1561474547
Tetralux
I suspect there's a reason why it's the way it is, but I don't know what it is. xD

1561474562
Tetralux
Can always make an issue for it too of course :)

1561474575
forgot-password
Me neither, but maybe it's already possible and we're just blind ^^^

1561474589
Tetralux
..Also very possible xD

1561474631
forgot-password
I think I'll do that tonight, seems like it's not that obvious

1561474649
forgot-password
Thanks for your help, BitPuffin and Tetralux :)

1561474746
Tetralux
Welcome :)

1561475914
schme245
I have a []u8 with 16 elements that I want to view as a 4x4 two-dimensional array. to get the first row is easy (just foo[0..4]), but how can I get the first column as a slice? (a slice that contains the elements 0, 4, 8, 12)

1561476023
Tetralux
I don't think you can without copying.

1561476040
Tetralux
You could make a struct that implements that behavior though.

1561476059
Tetralux
(See ArrayList, but with different .at implementation.)

1561476179
schme245
hmm... I would like to avoid copying if possible, maybe I should just bite the bullet and make it a two-dimensional array instead :)

1561476210
Tetralux
You can do math to get at each element instead :)

1561476244
Tetralux
I'm not familiar with how multi-dim arrays work in Zig, but I suspect that one big block and a custom structure is more efficient.

1561476298
schme245
that would be my guess as well

1561476303
Tetralux
Mainly for mem fragmentation. But also slightly for cache coherence.

1561476346
Tetralux
I'd have to measure to know for certain, but if each row is only 4 elements, then you'd break the cache line quite often unless every row was allocated right next to each other anyway.

1561476352
Tetralux
Which you could do, to be fair.

1561476372
Tetralux
Again though - never used multi-dim arrays in Zig. Depends on how they're implemented.

1561476413
Tetralux
If it's a slice with elements that are slices, then no - that'd be bad.

1561476420
andrewrk
mikdusan, the union init thing you found was the solution to the rest of the failing std lib tests, all std lib tests passing now in copy-elision-3 branch!

1561476483
Tetralux
Awesome!

1561476492
samtebbs
Oh wow, good work :)

1561476557
schme245
sweet! :D

1561476616
mikdusan
yaay!

1561476902
samtebbs
andrewrk: How would I get a Zig project of mine into the "External projects" page in the wiki?

1561477501
mikdusan
i like how copy-elision-3 branch llvm-ir looks for union-inits now: no longer uses global constants or llvm.memcpy for trivial types

1561478001
tgschultz
I don't think deserialize should be allocating memory. I don't see why deserializeInto is a problem in this use case. Also, FYI, you can call deserializer on a slice and it should fill it in for you.

1561478150
tgschultz
`deserializeInto(my_slice);`

1561478485
andrewrk
samtebbs, it's a wiki, go nuts

1561479024
forgot-password
tgschultz: That gives me a `Cannot deserialize pointer types (unimplemented)

1561479043
mikdusan
andrewrk: re: std lib tests passing; did you run on linux with > 4GB RAM?

1561479054
andrewrk
yes

1561479069
andrewrk
is there significantly more ram usage? I can look into that

1561479094
mikdusan
ok fyi a archlinux @ 4GB it failed; I bumped my VM to 8GB and it passes the first part of std lib tests

1561479132
andrewrk
hm yes it's about 1GiB more

1561479160
andrewrk
there is a lot of wasted memory, probably some easy things to fix

1561479165
forgot-password
tgschultz: I tried to call `self.entries = try deserializer.deserialize([]Entry)`, by the way

1561479454
dimenus
andrewrk: does @cInclude support relative paths?

1561479460
dimenus
also, hello again :)

1561479475
andrewrk
welcome back dimenus

1561479480
dimenus
or have a default search path anyway

1561479593
andrewrk
currently @cInclude works based on -isystem args

1561479749
samtebbs
andrewrk: Awesome, thought I'd make sure there was no edit approval process :D

1561479874
samtebbs
Ok it even says "Feel free to add yours here!"...

1561479901
andrewrk
samtebbs, I added that in response to your question above :)

1561479930
samtebbs
andrewrk: Oh haha xD

1561480029
forgot-password
tgschultz: I can't wrap my head around it, how are you supposed to deserialize something of a dynamic size without allocating space for the data of that size?

1561480411
andrewrk
mikdusan, I bet we could save a lot of memory by introducing an arena allocator into IR analysis

1561480457
andrewrk
some stuff would get perma-allocated, but lots could be freed when the IR analysis completed

1561480515
tgschultz
forgot-password: you can deserialize INTO a slice. not deserialize a slice type.

1561480536
forgot-password
But I need to allocate that slice, don't I?

1561480539
tgschultz
at least that's how I recall writing it... it's possible my memory is faulty.

1561480542
tgschultz
Yes, absolutely

1561480570
forgot-password
But how should I to do that without having access to an allocator in the deserialize function?

1561480638
tgschultz
don't use the deserialize function via the callback, make your own `MyThing.deserialize(deserializer, allocator)`

1561480648
forgot-password
I would need to do that before deserialization, but the size of the data needs to be known for allocating enough space, which one can only obtain via deserializing said size.

1561480703
forgot-password
I basically did that before using std.io.Deserializer, but then what's the point of having that standardized interface?

1561480728
forgot-password
Because you can just the InStream yourself to call readIntLittle, etc.

1561480751
forgot-password
The Deserializer is only a minor convenience in that case

1561480802
andrewrk
mikdusan, I'm gonna ignore the memory issues for now, hopefully we can get away with some more waste until self-hosted is available

1561480821
andrewrk
there's another benefit to never freeing which is that we never have weird memory unsafety bugs

1561480844
tgschultz
yeah, you could. If it is only a minor convenience then don't use it. I find it to be a major convenience when I want to deserialize a bunch of structures from a file, but it obviously can't cover every possible use case without becoming ludicrously more complicated, forcing the user to supply an allocator, etc.

1561480845
mikdusan
what is VM size for azure CI instances?

1561480895
Tetralux
tgschultz, Maybe it should be renamed to SimpleDeserializer then :p

1561480946
forgot-password
tgschultz: I wouldn't call that ludicrously more complicated, isn't passing allocators around a big thing that Zig advertises with?

1561481006
tgschultz
alright, lets say I have deserialize take an allocator. Now you have to supply one even if you're just using basic structures and types that never ever require dynamic allocation, which I have to imagine is the minority use case.

1561481047
forgot-password
Is it really? Most of the things I deserialized required dynamic allocation. However, I always used a managed language to do that.

1561481051
tgschultz
having deserialize call your type's custom deserializer was meant as an escape hatch for things like unions and pointers. Maybe it was a mistake to include it.

1561481195
tgschultz
what are you deserializing that requires so much dynamic allocation?

1561481229
tgschultz
Like, I rewrote my BMP loader recently and didn't need it. I just load the header separate from the image data, it isn't rocket science.

1561481255
tgschultz
That came off more insulting than intended, sorry.

1561481270
forgot-password
No worries, didn't take it that way :)

1561481429
andrewrk
mikdusan, I'm not sure

1561481441
tgschultz
I'm not trying to dismiss your usecase, I just can't see why the custom deserialize callback is a roadblock here. Here's how I did it in BMP, for reference:

1561481464
forgot-password
I'm playing around with a custom file format right now. But if I remember correctly parsing a .kdbx (Keepass Database) required that as well. Let me check if I can find the spec I used to build the parser

1561481510
tgschultz
here I get away with it in a custom deserializer because there's no allocation requirement, but you can just use deserializer like that outside of the custom deserializer too.

1561481555
andrewrk
fwiw, I think there are a bunch of different use cases of serializers/deserializers and there's plenty of room for different approaches. I don't think there will be any in the std lib at 1.0, but tgschultz's APIs are useful for some cases and provide more regression tests for the language

1561481708
forgot-password
tgschultz: I have to leave now, but I'll try get back to you in ~1 hour :)

1561481759
tgschultz
isn't kdbx an xml format?

1561481780
forgot-password
Yes, but I'm not sure if all versions are

1561481920
forgot-password
qa

1561481927
forgot-password
Oops, wrong window :p

1561483370
BitPuffin
Is there a nifty way to depend on some other build.zig to build a library

1561483387
BitPuffin
like I have program A which depends on library B which is linked to somewhere with a relative path and has its own build.zig path

1561485010
andrewrk
BitPuffin, there's an issue open for that

1561485043
andrewrk
in this release cycle (0.5.0) towards the end, zig build system is going to get a lot of attention

1561485094
andrewrk
what do you mean daurnimator?

1561485138
daurnimator
andrewrk: once copy ellision and basic coroutine support is done, please make a release

1561485179
andrewrk
ahh

1561485184
andrewrk
why's that?

1561485225
andrewrk
current plan is september 30

1561485303
BitPuffin
andrewrk: for now adding a packagePath was good enough :)

1561485497
andrewrk
mikdusan, here's my alternate fix for

1561485499
andrewrk
thanks for the test case

1561485533
daurnimator
andrewrk: so much has changed since 0.4.0: the whole std.os refactor; the [] vs [_] change and coroutines: working based on the 0.4.0 release is effectively useless: everyone now has to work from current master

1561485542
andrewrk
oh my goodness, look at those few check boxes left on #2602

1561485590
daurnimator
andrewrk: I think once basic coroutine support is fixed up; it would be a good point to tag a release so that people have a good point for the next 3 months to experiment on top of

1561485609
mmx87
Is there something like an equivalent to the C restrict keyword in Zig?

1561485619
andrewrk
mmx87, noalias

1561485629
andrewrk


1561485655
andrewrk
daurnimator, I'll consider it

1561485667
mmx87
Nice :)

1561485675
mikdusan
andrewrk: awesome. that's a much better location; I wasn't very happy with my location

1561485712
andrewrk
mikdusan, if you're up for more work on this, coming up with a reduced test case for the self-hosted compiler compile errors would be amazing

1561485741
andrewrk


1561485761
andrewrk
oops, not sure where that newline went

1561485779
andrewrk
I'll be plugging away at the compile error tests meanwhile

1561485807
mikdusan
sure i'll take a peek but before i forget i was musing about analysis memory consumption (still doing some instrumentation on it),

1561485826
andrewrk
ah that's nice too, whatever piques your interest :)

1561485832
mikdusan
do i understand correct that zig0 cannot use a zig userland arena because chicken-egg?

1561485850
andrewrk
correct, zig0 cannot use any .zig code

1561485945
mikdusan
musing to let zig0.exe continue using malloc for bulk of analysys, and zig.exe use userland arena?

1561485992
andrewrk
interesting idea, so the API would be the same, but in zig0 the free would do nothing?

1561486012
mikdusan
yes

1561486026
andrewrk
idk for something so simple it might be reasonable to just do the arena in the C++ code

1561486036
mikdusan
there's that too :)

1561486077
andrewrk
eventually, zig stage1 will essentially have the needed part of the zig std lib ported into C++. that's kinda what it's been evolving towards anyway

1561486086
mikdusan
i'll instrument further to get a handle on what proportions of memory analysis uses

1561486150
andrewrk
we could also implement free() with that trick I did here:

1561486204
andrewrk
hmm actually not sure how that would work

1561486231
andrewrk
I don't want to get too distracted with improving stage1 unless it's on the path to self-hosted (which copy elision and coroutines certainly are)

1561486300
daurnimator
Does it really matter if stage 0 is memory hungry? It should only be used to build stage 1 :P

1561486381
andrewrk
that's my point

1561487422
wrl
andrewrk: have you read the bit about speeding up the D compiler by just having it not free memory?

1561487431
wink_
+1 on your musl donation

1561487520
wrl
andrewrk:

1561487521
wrl
it's this

1561487736
mikdusan
andrewrk:

1561487838
mikdusan
weird. for gist files is there some trick to format proper? i can add a comment on the gist with "```zig" as first line and it formats nice. but not an actual file.

1561487908
schme245
I'm thinking about how to implement format for @Vector. Am I correct that there is no way to get the elements of the vector other than casting it to an array? would this be fine for formatting purposes?

1561490380
BitPuffin
mikdusan: how does it not format nice?

1561490657
mikdusan
turns out glitchy. sometimes formatted. sometimes not. github css issue i suppose.

1561490838
mikdusan
(no biggie. this is what i see sometimes. excuse big image.

1561490922
torque
are you using safari? I get that occasionally as well, and refreshing the page usually fixes it (the web is bad)

1561490953
mikdusan
yup safari/macOS Mojave

1561491540
BitPuffin
ah

1561491543
BitPuffin
don't see that in firefox

1561491556
BitPuffin
I concur, the web is bad

1561492322
Tetralux
I wish we could fix it with low-level languages xD

1561492627
companion_cube
that's what webasm is for!

1561492666
Tetralux
Except that webasm is not machine code xD

1561492675
fengb
wasm can't fix UI :(

1561492680
tgschultz
^

1561492709
fengb
It's funny though. Web sucks just like every other UI toolkit

1561492737
Tetralux
"It's rotten all the way down."

1561492757
fengb
I've never seen a UI that's good for consumers and developers

1561492765
fengb
framework*

1561492783
Tetralux
Define your "good" :p

1561492821
fengb
We should just get rid of users. Then our jobs can be nice

1561492963
Tetralux
arent we users too though? XD

1561493029
fengb
Tetralux: I'm semi-tempted to write a wasm baremetal VM. See if I can get a real "OS" going

1561493128
bheads
just dont leave that in stage 2

1561493152
bheads
I have a few D apps that cant compile in 32bit

1561493161
bheads
cause OOM sucks in your compiler

1561493171
Tetralux
fengb: or a web browser that can run x64 machine code at native speed ;)

1561493257
fengb
If anything, our ecosystem is doing the opposite. Electron shells for everyone! 🤮

1561493320
Tetralux
why anyone would use 'electron' as a name for something that is so slow is beyond me.. unless im being cynical anyway

1561493348
fengb
Marketing. It sounds faster

1561493385
Tetralux
clearly a browser that runs x64 should be called positron.

1561493408
Tetralux
no-one steal that name ó.ó

1561494287
daurnimator
Tetralux: time to start work on it. in zig.

1561494381
Sahnvour
I'm trying to switch on an integer i, covering all possible values from 0 to n. I would like to use i as a comptime value in my case, but it seems it's not possible :( `inline switch` anyone ?

1561494486
daurnimator
Sahnvour: what is the error/issue? pretty sure i've switched on comptime befre

1561494598
Sahnvour
the value isn't comptime, but as my switch covers all possible values, I wanted to have cases for ranges of values (for example `3...10`) where I would be able to use the 3...10 value as comptime

1561494608
Sahnvour
to avoid repetition

1561494829
daurnimator
Sahnvour: oh I get it: what is 'n' in your case? a power of two?

1561495111
andrewrk
mikdusan, brilliant, thanks for the reduction

1561495141
andrewrk
schme245, yes that's correct on both counts

1561495250
scientes
scientes, I'm waiting for the copy elision branch and then planning on working on that

1561495269
scientes
oh hes gone

1561495486
mikdusan
stat: when zig runs from empty-cache `zig test std/std.zig ...` it performs 46 million total malloc's and 32-byte is the favourite :)

1561495523
emekankurumeh[m]
social_cues:

1561497006
samtebbs
46 million mallocs O.O

1561497110
samtebbs
I made a little  script that some of you may like:

1561497135
samtebbs
It takes a path to a file containing a gdb backtrace and shows you the execution trail

1561497172
samtebbs
As well as the lines from the source file

1561497183
samtebbs
I thought it might be useful when seeing what causes a zig assertion failure

1561498555
scientes
> Second, corporate development teams are uniquely qualified to utterly

1561498555
scientes
botch a libc, yet still push it into widespread use,

1561498689
daurnimator
scientes: ? what are you quoting

1561498700
scientes
Felkner on llvm-dev

1561498706
scientes
couldn't find a link, and its in my e-mail

1561498803
letoram
daurnimator:

1561498825
daurnimator
letoram: oh hey; didn't realise you were in here :)

1561498868
letoram
here, there, everywhere. also, zig is on my watchlist for tui related projects.

1561498888
scientes
tui?

1561498922
daurnimator
andrewrk: also I just ran into

1561498953
scientes
VLC can do almost anything

1561499027
daurnimator
not really. it's a long story. but I closed the page on that book almost 10 years ago now

1561499028
letoram
ncurses + media embedding without terminal emulator as a middle man

1561499069
daurnimator
scientes: letoram writes

1561499071
Sahnvour
daurnimator: it's a size of remaining data, from 0 to 31, and every 8-sized range has the same behaviour except it uses a different constant, from 0 to 31

1561499078
scientes
oh i see

1561499116
daurnimator
Sahnvour: so do you have it as a comptime_int? or as a `comptime u5`?

1561499153
daurnimator
Sahnvour: a comptime_int is arbitrary precision; vs a comptime-known integer of known size.

1561499156
Sahnvour
it's a bare u5, but what I want in the end is to generate 32 cases, just more succinctly

1561499176
Sahnvour
and each case would use its value as a comptime_int

1561499237
daurnimator
Sahnvour: so you're just looking for something better than: `const i = foo(); switch(i) { case 0..n: do_something_with(i); ..........` ?

1561499263
Sahnvour
yes

1561499300
Sahnvour
where I would do `0...8 => |i| foo(i),` and i would be comptime, for example

1561499304
daurnimator
letoram: zig-arcan-shmif when? :)

1561499568
letoram
daurnimator: likely at the very end, zig-arcan-tui is a much more reasonable target

1561499820
andrewrk
daurnimator, I still use that music player every day (listening now in fact) and planning on a rewrite in zig once networking & package manager is available

1561499907
daurnimator
andrewrk: if you ever do revisit audio tagging; I have many war stories to share

1561499931
andrewrk
I have a plan for that

1561499991
andrewrk
it's just ffmpeg outputting a new audio file with updated tags, and then checking that the output audio is byte-for-byte identical after the tags are updated, and then atomically replacing the original file

1561500008
daurnimator
andrewrk: nothing.

1561500020
daurnimator
mutagen (a python) project is closest

1561500030
andrewrk
mutagen is edit-in-place though, that's problematic. I looked into that

1561500037
daurnimator
I would not trust ffmpeg to edit files

1561500055
andrewrk
that's what the verification process is for. bugs in ffmpeg are detected

1561500099
daurnimator
foobar2000 was the best interface for tagging IMO

1561500109
daurnimator
sadly closed source and windows only (unless that has changed?)

1561503522
fengb
Is there a way to "embed" a function pointer into a struct so I don't have to have a separate hanging function definition?

1561503833
andrewrk
all compile error tests passing in copy-elision-3 branch

1561503889
Tetralux
fengb: Not sure what 'embed' means xD

1561503897
Tetralux
andrewrk: O.o

1561503931
Tetralux
andrewrk: What's left?

1561504008
andrewrk
have a look at the merge checklist:

1561504140
Tetralux


1561504145
Tetralux
xD

1561504199
Tetralux
I'm guessing the 'compile errors on self-hosted' is the one you just dealt with?

1561504214
scientes
andrewrk, that last one about stack allocation of arguments, I was already starting to work on that

1561504250
scientes
we have to use extractelement-aggregate/insertelement-aggregate when possible

1561504262
scientes
but it isn't always possible

1561504324
scientes
oh no, nvm, i'm thinking of something differn't

1561504398
scientes
awesome that you got libuserland.a to build

1561504400
scientes
that is pretty big

1561504918
andrewrk
It's mostly done. I think we're down to just 2-3 regressions

