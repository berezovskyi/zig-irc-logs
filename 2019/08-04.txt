1564878154
scientes
and why don't we replace all of those with a @call(type: builtin.Call, ...

1564878202
scientes
well @newstackCall and @asyncCall have different arguments...

1564878233
scientes
so this will have to wait until after the var args stuff

1564878302
scientes
dimenus gone...

1564890322
diltsman
Does anyone have experience using Windows.h in Zig?

1564890602
andrewrk
diltsman, I'd generally recommend using std.os.windows instead, with additions as necessary

1564890635
diltsman
andrewrk, I am wanting to create a window, memory map files, etc.

1564890658
andrewrk
make your file my_windows.zig and have it do `usingnamespace std.os.windows;`. then you can augment the std lib with whatever you want

1564890785
diltsman
So, create the pub extern "kernel32" prototypes as needed?

1564891530
diltsman
andrewrk, I see that it provides the W variants of the functions.  How do I get 16-bit character sets, since string literals are UTF-8 in Zig?

1564891557
scientes
diltsman, there are conversion in functions in unicode.zig

1564891574
diltsman
Perfect!

1564891646
scientes
however there is no support for the invalid UTF-16 that windows allows

1564891651
scientes
only valid utf-16

1564891915
andrewrk
just use the APIs, they express the correct intent. the implementations will get fixed

1564906031
daurnimator
andrewrk: o.o you're up at a weird hour

1564906053
daurnimator
andrewrk: also fwiw... I'm looking into the faster strace trace issue after all

1564912686
daurnimator
Sahnvour: you requested a review from me. but I don't think you've modified the code since last time?

1564912862
Sahnvour
daurnimator: yes, I missclicked github's review tool

1564918273
akorator
Started with Zig in Windows 10 (64bit, latest master) and running "zig targets" gets me this: Available glibc versions: Assertion failed. This is a bug in the Zig compiler. Unable to dump stack trace: Unable to open debug info: InvalidPEMagic

1564918288
akorator
Maybe this is a known issue or something I did wrong

1564919337
ntgg
is there a plan to have nested inferred size for arrays ([_][_]) or is the current way final?

1564919518
ntgg
akorator: Did you build from master or download the prebuilt?

1564920047
Sahnvour
akorator: zig 0.4.0 is a bit date if that's what you are using, a lot happened on master since the release

1564920642
akorator
@ntgg downloaded the prebuilt: zig-windows-x86_64-0.4.0+f01cb8cc.zip

1564920784
ntgg
akorator: It's probably not you then, I don't see an issue for it on github either, so you should probably open one.

1564922146
samtebbs
Hi all, is anyone having issues building zig master? My issue is "error: initializing ‘llvm::ArrayRef<long unsigned int>::Data’" when building "embedded_softfloat"

1564922268
nrdmn
samtebbs: are you building with gcc >= 9?

1564922598
samtebbs
nrdmn: Yep, 9.1

1564923007
nrdmn
samtebbs: try building with gcc < 9 or with clang

1564924219
samtebbs
nrdmn: I'll try that. Do I have to specify the compiler to use with cmake or make?

1564924342
nrdmn
you can specify it as environment variables, e.g. `CC=gcc-8.3.0 CXX=g++-8.3.0 cmake ..`

1564924482
scientes
/home/shawn/git/zig-libmvec/exp.zig:82:5: error: variable of type '(undefined)' must be const or comptime

1564924497
scientes
but undefined is comptime????

1564924690
nairou
nrdmn: I was about to ask the same thing, errors building with GCC 9 :-)

1564924939
ntgg
scientes: What context is it used in?

1564924984
scientes
ntgg, call

1564924987
scientes
of an intrinsic

1564925002
scientes
i think it has something do with with ->child thingy in IrInstruction

1564925006
scientes
that I don't exactly understand

1564925008
nairou
samtebbs: Do you already have an older GCC installed? I'm trying to figure out how to do that as well.

1564925318
nairou
nrdmn: Do you know how I'd build zig using clang? How do you force cmake to use it?

1564925371
nrdmn
nairou: `CC=clang CXX=clang++ cmake ..`

1564925417
nairou
nrdmn: Thanks!

1564925595
nrdmn
andrewrk: do you know about this issue?

1564925710
samtebbs
nrdmn: I installed gcc-8 then backed-up my old /usr/bin/c++ binary and replaced it with /usr/bin/c++-8

1564925714
scientes
nrdmn, what is the issue?

1564925724
scientes
please paste

1564925744
samtebbs
scientes: The same issue as me above, when building embedded_softfloat

1564925753
samtebbs
Doesn't work with gcc9

1564925822
samtebbs
Hmm, now I'm getting "undefined reference to `std::_Sp_make_shared_tag::_S_eq(std::type_info const&)'" when linking zig0

1564925955
nrdmn
scientes: apparently you can't build zig with gcc 9

1564925969
scientes
just fix the bug, it shouldn't be that difficult

1564925981
nairou
I get a slightly different error than samtebbs. In my case it looks like GCC has --enable-default-pie set by default, and zig doesn't like it: relocation R_X86_64_32S against `.rodata' can not be used when making a PIE object; recompile with -fPIC

1564925983
scientes
also, that is c++, not c

1564926080
nairou
Looks like clang built it just fine, woot

1564926421
samtebbs
scientes: Well yes, but it doesn't seem like many others are experiencing the same issue so it could very well be an environment issue

1564926482
samtebbs
nrdmn: How did you manage to build with clang rather than gcc?

1564926521
daurnimator
I have gcc 9.1.... haven't had issues

1564926554
nairou
daurnimator: I'm curious of your copy has --enable-default-pie built in

1564926598
samtebbs
What llvm version is zig using now? I heard talks of switching to the llvm 9 release candidate branch

1564926600
daurnimator
nairou: how would I check that?

1564926605
samtebbs
That could be something to do with it

1564926615
daurnimator
samtebbs: llvm 8 in master. there's a branch open for llvm 9

1564926679
nairou
daurnimator: gcc -v shows all built-in options

1564926732
daurnimator
nairou: yes it does.

1564926740
nairou
Interesting

1564926799
scientes
uggh, lots of merge pain on my SIMD branch

1564928050
nrdmn
samtebbs: CC=clang CXX=clang++ cmake ..

1564929752
daurnimator
samtebbs: "the symbol is visible to `extern` declarations" I'm not sure what you mean?

1564930964
samtebbs
daurnimator: If you export a symbol, then it becomes possible to use it elsewhere by using `extern`

1564930983
daurnimator
samtebbs: oh right. I forget how overloaded extern is

1564930993
samtebbs
nrdmn: cheers

1564931152
scientes
ahhh yes a5cb0f77d11bdcc504fe broke a bunch of my SIMD stuff

1564931401
scientes
and requires me to do a bunch of work

1564931407
scientes
again because of when types are resolved

1564931526
samtebbs
daurnimator: Yeah :) I always think of it from a linker  point of view rather than an ABI point of view

1564931535
scientes
ugggh its totally broken by that commit

1564931655
scientes
this is really frustrating

1564932117
samtebbs
Now I'm getting "CommandLine Error: Option 'dump-thin-cg-sccs' registered more than once!"... I've been building zig fine up until today

1564932177
scientes
andrewrk, do ResultLoc's get their id set before or after types?

1564932790
gonz_
How does one link `_mm_...` intrinsics into a C build?

1564932804
gonz_
`_mm_set1_epi8`, for example

1564932821
gonz_
I'm trying to build/use `libspng` with zig and having some issues

1564933177
scientes
gonz_, those are not actually C, those special headers do not work with Zig

1564933193
scientes
neon, sse, or altivec

1564933225
scientes
if its not telling you that, that is a bug

1564934190
gonz_
What exactly do you mean "do not work with zig"?

1564934199
scientes
those require compiler integration

1564934200
gonz_
It's the linker that needs them

1564934212
scientes
gonz_, they are not functions, they are not symbols

1564934226
scientes
they are C extensions

1564934262
scientes
gonz_, I have a portable SIMD patch set posted, but I am working on rebasing it because andrew broke it

1564934354
gonz_
So basically the zig compiler right now assumes they're normal functions and that's why `lld` ends up saying they're just undefined?

1564934376
scientes
correct

1564936765
daurnimator
Sahnvour:

1564936797
daurnimator
(was marked resolved but no reply and I can't see it in the code)

1564939157
scientes
uggh, that result loc stuff broke simd badly

1564939177
scientes
it now doesn't want to track an evolving value, but instead load it every time

1564939431
scientes
we don't need two version of every concept

1564939433
scientes
or three

1564939672
scientes
resultloc is totally incompatible with SSA

1564939846
scientes
LLVM just doesn't think this way

1564940627
Sahnvour
daurnimator: I wrote a comment in answer, it disappeared ?

1564940671
Sahnvour
so my point is, gimli is a cryptographic hash so I'd rather not compare it against non-crypto ones

1564940761
Sahnvour
to avoid confusing readers and making them think they can be used for the same things

1564942725
gonz_
C and C++ really have the worst build eco system

1564942751
gonz_
How is it acceptable that you should have python3 installed just to install a C/C++ build tool?

1564942757
gonz_
This shit doesn't make any sense

1564942768
scientes
gonz_, or m4!

1564943328
emekankurumeh[m]
fips?

1564944064
andrewrk
scientes, vectors don't need result locations; they are treated as primitives

1564944270
ntgg
Is it possible to get the active field name of a union?

1564944326
andrewrk
ntgg, yes if the union is tagged

1564944351
andrewrk
cast it to the tag type

1564944381
andrewrk
I believe you can also use @tagName directly

1564944396
ntgg
what about an untagged union?

1564944438
ntgg
is it just not possible?

1564944466
andrewrk
yeah that's the whole point: the knowledge of which field is active is not stored in an untagged union

1564944568
ntgg
Ah, makes sense.

1564946562
emekankurumeh[m]
so there is no safety?

1564946581
emekankurumeh[m]
I hadn't realized that till now

1564946594
andrewrk
there is safety for non-extern, non-packed unions

1564946647
andrewrk
but you can't access the safety field because it's not available in all build modes

1564946785
ntgg
is there a way to access tagged union fields as optional?

1564946832
andrewrk
switch (my_union) { .tag => |x| x, else => null}

1564946862
andrewrk
if (my_union == .tag) my_union.tag else null

1564946935
andrewrk
you could wrap that in a function

1564946985
ntgg
I'm doing currently doing the switch way, just feels a little weird coming from rust.

1564947007
ntgg
It works fine though, just wanted to make sure I wasn't missing something

1564947061
andrewrk
what's the rust way?

1564947138
ntgg
if let Tag(variable_name) = my_union { ... }

1564947236
andrewrk
ah right

1564947290
andrewrk
that's equivalent to the switch, they both create a nested scope if it matches

1564947352
emekankurumeh[m]
pattern matching is one of my favorite features of rust

1564947695
ntgg
yeah, it makes a lot of stuff feel real clean

1564947713
ntgg
but without tuples it kinda reduces the usefulness

1564947847
nrdmn
can I create a struct type with a specific alignment?

1564948068
andrewrk
nrdmn, here's the issue to track:

1564948086
andrewrk
This is one that I hope to resolve in the 0.5.0 milestone rather than postpone

1564948574
nrdmn
andrewrk: I mean the alignment of the whole struct

1564948775
andrewrk
nrdmn, the alignment of a struct is equal to the alignment of its most-aligned field

1564948827
nrdmn
so I just set the alignment of the first field?

1564949059
nrdmn
will `fn foo (x: *align(N) T) { ... } const bar = T{ ... }; foo(&bar);` work?

1564949320
andrewrk
why do you need the struct to be aligned?

1564949366
andrewrk
that example will give you a compile error if the struct is under-aligned but it won't force an alignment on the type

1564951259
ntgg
I have a test that is failing, but there are no errors or failing expects as far as I can tell

1564951275
ntgg
it says that the 'zig test <file>' command is exiting with code 255

1564951347
nrdmn
andrewrk: because the UEFI spec says so

1564951397
nrdmn
the most aligned field of the type EFI_GUID is 4 bytes, but EFI_GUID must be 8 byte aligned

1564951529
andrewrk
nrdmn, you're trying to make a struct match the UEFI spec? what's the target arch?

1564951610
nrdmn
UEFI is specified for i386, amd64, itanium, aach32, aarch64 and riscv

1564951665
ntgg
I fixed the test by removing a `defer File.close()` call

1564951672
ntgg
why would that effect the test?

1564951716
andrewrk
nrdmn, if you're able to put a u64 field in the struct at the end, that could be a workaround until #1512 is solved

1564951732
nrdmn
EFI_GUID is specified in

1564951771
andrewrk
nrdmn, oh, your other option is to choose the alignment at the memory location rather than in the type

1564951781
andrewrk
var bar: T align(8) = undefined;

1564951797
andrewrk
you can override the alignment of any type when you declare a variable

1564951808
nrdmn
that's what I'm doing right now, but I'd like to enforce it somehow

1564951818
andrewrk
yeah. that's 1512.

1564951825
nrdmn
ok

1564953352
ntgg
what reasons would I be getting integer overflow in std.buffer.Buffer.len?

1564953390
ntgg
I am creating it with Buffer.init(allocator, "")

1564953571
curtisf
Is there a simple allocator in the standard library that I can assert has freed all of its memory in a test, to make sure I'm not leaking allocations?

1564953939
andrewrk
curtisf, you can try using

1564953961
andrewrk
it's not quite ready to be merged into std but it's far enough along to be useful

1564953972
curtisf
The readme says posix only, does that mean I can't use it on windows?

1564953988
andrewrk
oh yeah the windows backend isn't done yet

1564954019
andrewrk
you can use `--library c` and `std.heap.c_allocator` and `valgrind --leak-check=full` when running your test

1564954438
scientes
I'm having a problem where bit shifts don't show up in the llvm-ir

1564954674
scientes
oh found it

1564955459
nrdmn
Is there an allocator that I can construct from a list of slices of memory?

1564955708
nrdmn
s/construct from/pass/

1564955865
scientes
nrdmn, a single slice,yes, multiple I don't think so

1564961846
scientes
I need a new intel laptop with the new debugging fetures

