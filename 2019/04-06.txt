1554508952
shritesh
Async await is part of the language already and is being improved upon.

1554509318
Sahnvour
macros are useful for repetitive stuff merging identifiers and string litterals, or control flow, but granted, this was semi-ironic

1554509413
Sahnvour
thinking about C macros, Nim ones look way better but I never got around using them

1554510000
scientes
you can do all that with comptime

1554510027
scientes
like if you want a function that gives you the names of enums, you can do that

1554510058
scientes
while go has to have a "generator" program that makes ugly code to do that

1554510090
scientes
what I don't think I can do with comptime is generate a perfect hash function

1554510113
scientes
I've got a new algorithm for that that I wanted to code up, but haven't gotten around to---because having a program generate code is kinda ugly

1554510166
andrewrk
scientes, you saw this yeah?

1554510171
scientes
yes

1554510201
andrewrk
emekankurumeh[m], that migth give you some ideas of how to use comptime in interesting ways ^

1554510269
shritesh
Are there any kinds of applications / use cases that zig would be a bad fit for once it is 1.0?

1554510277
scientes
I have an algorithm that never fails, and can be created in O(nlogn) time, while gperf is O(n^3)

1554510309
scientes
its not really a hash function, but to the computer it doesn't really matter

1554510342
scientes
just a highly optimized multi-way bisection

1554510369
scientes
shritesh, it isn't a scripting language

1554510498
scientes
I really struggle with assembly in zig

1554510509
scientes
something as simple as porting clang's cpuid.h prooved difficult

1554510523
scientes
i just can't get the syntax right, and the syntax that works in clang is not llvm's syntax

1554510547
scientes
and you can't use cImport unless you are using libc, despite C not requiring a run-time

1554510560
andrewrk
you can use @cImport without libc

1554510568
scientes
oh ok

1554510595
andrewrk
but you can't use, e.g. stdlib.h

1554510600
andrewrk
because that's provided by libc

1554510609
scientes
yeah but the zig tree has <cpuid.h>

1554510615
andrewrk
that's always available

1554510642
andrewrk
but if you need it for otherwise normal zig code, something is wrong

1554510656
scientes
I just struggle to write assembly in zig

1554510671
andrewrk
shritesh, funny, I find that question difficult to answer

1554510679
scientes
cause i can't get the syntax right---its fine if its pure assembly, but i can't get the restraint syntax right

1554510693
andrewrk
I spend a lot of effort trying to make there be fewer ways to say "yes" to that question

1554510699
scientes
i don't think i've gotten it to work even once

1554510714
andrewrk
it should be identical to clang

1554510717
shritesh
andrewrk, I am feeling the same. Unlike, scientes, I think zig can replace a lot of my scripting needs (usually python)

1554510752
scientes
it can, i'm just saying it is differn't

1554510795
scientes
there are many things that a scripting language will require a lot less code for

1554510851
andrewrk
using zig as an embedded scripting language for a game, would be a bad fit

1554510889
andrewrk
game engine itself, sure :)

1554510897
scientes
for scripting I want a language where regexps are extremely accessable

1554510921
andrewrk
well, then again, you could target WASM. maybe that's not even a bad idea

1554510942
scientes
lua would probably run well in WASM

1554510979
shritesh
With comptime, I think we should be able to provide a powerful typed-regex experience.

1554510983
andrewrk
it's one of my goals to have standard library regex that can be compile-time checked if the regex string is comptime known

1554510990
scientes
but then again, you already have javascipr there, so thats what people would use

1554510999
scientes
andrewrk, yes, i've been thinking about that for years

1554511017
scientes
andrewrk, there are two levels of FCP--compiling the regexp, and executing it

1554511025
andrewrk
we'll need faster comptime eval / better memory handling for that. that's probably a bit in the future from now

1554511044
andrewrk
my goal is for stage2 comptime eval to be roughly the same speed as CPython

1554511053
andrewrk
I think that's a reasonable goal

1554511085
andrewrk
it has to do more work than CPython, because sometimes the instructions have to emit at runtime

1554511118
scientes
well regexp is its own special world, so its performance is separate

1554511221
andrewrk
sure, but we also want zig's comptime eval to be reasonable in general

1554511236
scientes
if you mark a function as pure, it can just be compiled and run

1554511248
andrewrk
that's

1554511395
scientes
pure functions depends on multiple returns

1554511405
scientes
and also better array handling

1554511432
hryx
Something I should have asked a long time ago: what does "Avoid local maximums" mean? I'm not familiar with that term

1554511460
scientes
hryx, limits that come from the code rather than the runtime

1554511468
andrewrk
hryx, it's a metaphor:

1554511482
hryx
Ohhhh

1554511501
scientes
oh woah

1554511501
andrewrk
idea being, if you are halfway between "local minimum" and "local maximum" you should actually go to the right, even though it may be tempting to go to the left

1554511554
hryx
I see now! thankye

1554511585
andrewrk
zen of zig shouldn't be taken

1554511621
hryx
so you're saying I

1554511625
andrewrk
haha

1554511652
hryx
oh andrewrk is 0.4.0 scheduled for Monday?

1554511655
andrewrk
yes

1554511659
hryx
cool

1554511661
andrewrk
I am working on the release notes now

1554511671
andrewrk
and then I still need to get down to 30 issues today @_@

1554511679
andrewrk
thanks shritesh for helping with that :)

1554511706
andrewrk
also have to run 15 miles tomorrow

1554511712
hryx
nice shritesh, you've been a busy bee

1554511737
hryx
I didn't quite get to the stage2 parse recursion refactor you recommended andrewrk, but that's the next thing I want to tackle

1554511746
andrewrk
you're into that eh? cool

1554511753
shritesh
It's my way of productive procrastination lol

1554511754
hryx
refactoring feelz good

1554511764
andrewrk
almost feels sad to destroy Jimmi's work of art

1554511774
andrewrk
a recursion-free recursive descent parser

1554511783
hryx
I could never live with myself if I destroy anything of Jimmi's

1554511862
andrewrk
hryx, the arena pattern is probably good to stay though - you can see how it means the parser never has to free() anything

1554511879
andrewrk
I was pretty pleased when I realized that

1554511973
hryx
awesome

1554513470
scientes
Its faster to not free

1554513470
scientes
not to mention it makes the code simpler

1554513633
andrewrk
yeah, arenas are pretty great. If you think about it, every stack frame is a mini-arena

1554513666
andrewrk
coroutine frames too

1554513699
scientes
the arena can be optimized to use a dedicated "aux" stack pointer register

1554513719
scientes
hehe

1554513723
scientes
but thats pretty involved

1554513734
scientes
the stack is insanely fast because of that dedicated register

1554517124
scientes
why is it so hard to find detailed spec of what some avx instructions do

1554517133
scientes
the abstract really doesn't make it clear

1554525897
hryx
I'm unable to build stage1 for commits after 8e6ff8d615820f7f732724a5db1639ae5f12fb4e (fix NaN comparing equal to itself), not sure why. The issue seems to be that isnan is undefined, even though <math.h> is included

1554526050
hryx
correction: "fix NaN" is the first commit after 8e6ff8d6

1554526449
andrewrk
hryx, what os?

1554526501
hryx
Linux Mint based on ubuntu 16.04, kernel 4.15.0, x86_64

1554526539
andrewrk
can you try this?

1554526550
hryx
on it

1554526901
andrewrk
hryx, this diff passes all tests for me, so if it solves the problem for you I will push it to master

1554526967
hryx
andrewrk: looks good!

1554526985
hryx
able to build stage1 with that change

1554527000
hryx
thanks for the quick fix

1554527083
andrewrk
no problem

1554532390
daurnimator
andrewrk: I just read through #164. It reminded me of a different question I had: as zig has no operator overloading or way to create custom primitive types, how should something like unums (

1554532687
hryx
daurnimator: unum looks interesting. I feel like someone shared that months ago -- maybe it was you?

1554532729
daurnimator
hryx: maybe.... not sure

1554532742
hryx
hmm

1554532770
daurnimator
I guess the approach wouldn't be too different to e.g. fixed point types. which seem to have an issue #1974

1554532778
hryx
Wouldn't this type be possible to implement as a struct with methods? Besides convenience and brevity issues, is there a big downside of that approach?

1554532863
hryx
oh unless this is actually supported in hardware somewhere

1554532893
hryx
I guess it could in the future. Maybe dats your point

1554532910
daurnimator
hryx: experimental hardware support exists. the proposal on the unum side is that existing architectures would all get a 'softunum' library like we have softfloat libraries for some processors today

1554539200
kristate
Hi everyone

1554539266
hryx
hello kristate

1554539329
kristate
Jimmi (Hejsil) and I are hacking away here in Kyoto, Japan

1554539354
kristate
might do a live-stream here in a bit to hack on the last bugs before 0.4.0

1554539355
hryx
yay!

1554539373
hryx
kristate I meant to contact you last time I was in Kyoto. Sorry I didn't stop by

1554539385
hryx
I live in san francisco USA

1554539405
kristate
hryx: cool, let me know if you're interested in a job :)

1554539407
hryx
is the stream on twitch?

1554539418
kristate
yeah, hang on -- setting it up

1554539724
kristate
okay, it's comptime:

1554546982
telemach
hey folks, does this error look familiar to anyone?

1554546982
telemach
zig-cache/o/bEb_ELwjbsYjnHh0o5x1-eS8XslMmmgwXSxRE_P14wUmxEkhlKZ8DNQd4pumngX8/cimport.zig:440:5: error: expected optional type, found '[*c].cimport:5:13.LV2_Atom_Forge'

1554546982
telemach
forge.?.Blank = map.?.map.?(map.?.handle, c"

1554547001
telemach
i get a lot of them trying to use LV2's atom/forge.h

1554547018
telemach
seems zig fails to properly process header file

1554547051
telemach


1554547053
telemach
this one

1554547162
telemach
generated fn signature is pub fn lv2_atom_forge_init(forge: [*c]LV2_Atom_Forge, map: [*c]LV2_URID_Map) void

1554547269
telemach
so i guess it either should be ?[*c]LV2_Atom_Forge or no `.?` check for optional?

1554549617
scientes
kristate, hi, I sent you an e-mail

1554568907
andrewrk
telemach, ever since the C pointers update, you don't need the .?

1554568940
andrewrk
telemach,

1554569014
andrewrk
see also

1554569506
Sahnvour
just discovered slices are not `packed`, is there a reason for this ?

1554569821
andrewrk
Sahnvour, what do you mean?

1554569892
scientes
Sahnvour, slices are adorned arrays

1554569897
andrewrk
shritesh, btw you can use zig to compile C code for wasm too

1554569900
scientes
Sahnvour, but i have a bug to investigate that

1554570161
Sahnvour
andrewrk I mean the actual pointer+size struct

1554570231
Sahnvour
this doesn't work:

1554570248
Sahnvour
error: non-packed, non-extern struct '[]u32' not allowed in packed struct; no guaranteed in-memory representation

1554570264
andrewrk
ahh now I understand

1554570322
andrewrk
ok so there are 2 design questions on the table here

1554570369
andrewrk
1. should packed structs be allowed to have a non-guaranteed in-memory representation? (and therefore allow any types in them)

1554570377
andrewrk
2. should slices have a guaranteed in-memory representation?

1554570494
andrewrk
I think the answer to (1) is "yes"; otherwise there would be no way to manually lay out a struct that had zig types in it

1554570508
Sahnvour
given the quite direct mapping of slices to a pair of 64bit values, I did expect 2. to be yes, at least optionally

1554570534
Sahnvour
well, to a pair of machine-sized values but your get the point

1554570538
andrewrk
so whether or not a packed struct has guaranteed in-memory layout would be a property determined by what fields it contained

1554570564
andrewrk
regarding (2) I think that sounds reasonable and would be worth opening a proposal for

1554570578
andrewrk
the only reason not to would be if it enabled some kind of debug safety feature

1554570603
andrewrk
for example bare unions have a secret safety field thanks to not having a guaranteed in-memory layout

1554570788
Sahnvour
what benefits do we get from guaranteed in-memory layout for (userland) packed structs ?

1554570851
andrewrk
types that have guaranteed in-memory layout have well-defined behavior with @ptrCast and @bitCast, even at compile time

1554571283
Sahnvour
if I get this right, the goal is to not surprise the user with hidden or reorganized fields, since the compiler knows everything about the structs in the end

1554571331
Sahnvour
and not a technical difficulty, correct ?

1554571460
andrewrk
correct - for some use cases the programmer wants guaranteed in-memory layout

1554579506
scientes
how do i get the code an IrInstruction comes from?

1554579676
scientes
nvm

1554589174
telemach
andrewrk: yes, but this file is generated by Zig from C header

1554589213
telemach
i'm on relatively recent master 0.3.0+90b6eab0

1554594150
dembones
I'm struggling with pointers to generic functions. I think it's because I'm not getting comptime everywhere I think I am.

1554594216
dembones
The non-generic version is here:

1554594275
dembones
I've rewritten truncatedDivision, flooredDivision, and euclideanDivision so that they operate on all signed integer types

1554594296
dembones
And they pass tests on i32

1554594328
dembones
but I'm trying to write tests for other integer widths, and I'm going in circles a bit.

1554594449
dembones
here's the version which has generics passing on i32:

1554594836
dembones
If you clone that code, you can just do `zig test src/divInteger.zig`

1554595003
dembones
From the code on branch `generics`, I have three consecutive calls to `run`. The first challenge is to rewrite those three calls as a `for` loop.

1554595030
hryx
Why does the grammar rule for ContainerMembers contain a trailing slash (choice operator)? I can't find any information on what this would mean in a PEG

1554595033
hryx


