1571011401
Snektron
gruebite: return the value from a function call  returning !u32

1571011414
Snektron
In a function returning !?u32

1571013693
scientes
what is the difference between ResultLoc, and IrInstruction *result_loc?

1571013697
scientes
and how do i relate them

1571014304
scientes
ill get it

1571014340
emekankurumeh[m]
perhaps a next milestone goal should be docs for the c++ compiler?

1571016290
scientes
well, if any docs they should be very basic

1571016303
scientes
as few people hack on it, and we don't want the docs to be out of date

1571016313
scientes
just a high level overview

1571016345
scientes
basically just comments

1571035292
Foxfir3
Arm nigtmare. success! but with Manjaro minimal install on RPi4, and then some cleaning up. Aarch64 ported from the Raspian experimental kernel. I did'nt succeed turning pure Arch ARM 64 bit :( What a nightmare. But Zig runs.

1571035362
Foxfir3
ARM/Avago really sucks! But they are so huge. And RPi foundation are not in a hurry to support Aarch64. So thats where It's at.

1571035542
mq32
Foxfir3: nice!

1571035613
Foxfir3
mq32: hope It was somewhat useful :) At least Zig will go in my report now. And I gained some insight into the 32 bit vs 64 bit issue.

1571035690
mq32
i want to cross-build my current project for the RPI, but i have the problem that i require some C libraries and i'm too lazy to port dfferent projects to zig build

1571035726
Foxfir3
so install Manjaro minimal like I did?

1571035767
Foxfir3
If you come across something, his name is Dan. In charge of the Manjaro ARM project.

1571035798
mq32
heh, but i don't think i want to build a half-dozen libraries on an RPI :D

1571035830
Foxfir3
The RPi4 with overclocking and cooling is no old lady

1571035834
mq32
also, pi isn't the only platform i want to target, so i should start creating packages for libx11 and such

1571035847
mq32
yeah, but i don't have one at my hands, only pi3

1571035853
Foxfir3
hmm.. and the Odroid N2?

1571035881
Foxfir3
aah.. I see. I have the Pi3B+. there is really no comparison

1571035950
Foxfir3
and I have the Geekworm expansion board with an okay SSD, so IOPS feel more snappy

1571036014
Foxfir3
In hinsight, I would have avoided ARM completely

1571036029
mq32
Foxfir3, another target platform of mine:

1571036074
Foxfir3
but thats 32bit?

1571036098
Foxfir3
What a cool gadget :D

1571036165
Foxfir3
system: Linux for gaming :D

1571036167
mq32
yeah, it's 32bit

1571036187
mq32
i always wanted to create native games for the pandora instead of using emulators

1571036201
mq32
but cross-compiling is a hard world right now

1571036286
Foxfir3
well.. I wan't to go in the opposite direction. But there is no way I will be able to afford the new HiFive board.

1571036433
Foxfir3
plenty of options when It comes to having a stroke. Like the 999$ pricetag on the HiFive SBC. Definately a comma lacking there.

1571036517
Foxfir3
mq32: how did you get into Zig?

1571036639
mq32
a friend of mine from uni and the local hackspace said: "look at zig. it might be a language for you"

1571036645
mq32
and now i'm totally into it :D

1571036784
Foxfir3
hackspace. uni. Danish?

1571036857
Foxfir3
dobra utro brato

1571036882
mq32
nope, german

1571036883
Foxfir3
mq32: im coming to Sofia soon. Maybe we could hook up?

1571036942
mq32
haha. that's only 1500 kilometers :D

1571036960
Foxfir3
for a german that's nothing

1571036976
Foxfir3
Autobahn most of the way :D

1571037001
mq32
sofia is in bulgaria

1571037033
Foxfir3
you will fit right in.

1571037043
mq32
^^

1571037215
Foxfir3
German geeks. I'll never forget the documentary bout German med riding on trains in their backyards. Thats my image of Germany now.

1571037228
Foxfir3
German men

1571037266
Foxfir3
... and wurstsalat. But that goes without saying

1571037761
mq32
haha

1571038415
Foxfir3
okay. zig question. Does zig run compile to a tmp file, or is It JIT?

1571039549
Foxfir3
got It. assuming object file and binary gets deleted as soon as they are done

1571042572
Snektron
"Zig compiler" implies its a compiler. Why would it JIT

1571045522
mq32
Snektron: you can JIT/in-memory-compile code with llvm and run it from memory

1571045529
mq32
there is no need for creating a binary on disk

1571052254
bgiannan
So why can't I do: `defer try somethingThanCanFail();` ?

1571052351
mq32
bgiannan, because defers are executed "after" a return

1571052359
mq32
and try contains a return

1571052374
mq32
fn what_does_this_return() i32 { defer return 1; return 0; }

1571052403
mq32
it's illogical to write such code, because it would be undefined what would happen

1571052422
bgiannan
i see

1571061709
donaldallen
andrewrk Andrew -- I just wanted to follow up on an interchange I had here yesterday. I am trying to find out whether it is possible to call a function in b.zig from a.zig without recompiling either of them when they are unchanged. In other words, I want to do something like the usual C thing of producing .o files as necessary with a make file and

1571061710
donaldallen
then linking them into an executable. I know I can this with an 'extern' in the calling file, but that restricts me to c-objects only, I believe. Is there a way to do this with the build system?

1571061817
donaldallen
To be clear, I want to be able to pass zig objects across the file boundary, as if I had @imported b.zig into a.zig.

1571063225
mq32
donaldallen: why don't you want to use build.zig?

1571063243
mq32
also: just look at the source of std.build on how the build system does the conditional recompilation

1571063438
mq32
donaldallen:

1571063440
mq32
look here

1571063444
mq32
that's what zig build calls

1571063655
fengb
The build system (build-lib, build-exe, build-obj) caches all intermediates by default

1571063750
fengb
It produces .o files but that’s an implementation detail that should be ignored since Zig doesn’t provide ABI guarantees (unless you use extern/export/packed data structures)

1571066223
donaldallen
mq32 You asked why I don't use build.zig? It's not documented yet.

1571066259
mq32
the whole language "isn't really documented yet"

1571066296
mq32
also using make files doesn't help in terms of stability

1571066310
mq32
as the command line of zig is going to change at least once

1571066339
donaldallen
There's usable documentation for significant parts of the language. The build system isn't among them.

1571066424
donaldallen
As for using make files, I use the build system if that were a practical choice at this point. It isn't, for me. I think the real answer is that is see a lot of promise in this project, but I think what I'm trying to do with it is premature. I need to let this thing gestate some more and then I'll come back to it. Thanks.

1571066432
daurnimator
given that there is no 'makedep'-like thing for zig (is there?): how are you using make with zig?

1571066654
mq32
daurnimator, i have no idea how that should work

1571066662
mq32
as recompilation in zig is a curious thing :D

1571066683
mq32
you

1571066687
mq32
because of zigs lazy symbols

1571067208
fengb
build.zig isn’t stable but build-* hasn’t really changed since forever

1571067251
fengb
And you’ll need to rely on that anyway, unless you really want to cobble together things with build-obj, but even that uses most of the internal build stuff

1571071936
kenaryn
Hello, please what does '.is_var_args' do? I do not understand the official example: `assert(@typeOf(assert).is_var_args == false);`

1571071998
daurnimator
kenaryn: various types have undocumented fields.... e.g. T.bit_count. I think the intention is to remove them and direct people to @typeInfo instead?

1571073436
tgschultz
I believe that's still the case, yes. Additionally, varargs themselves are due to be replaced by list/struct literals.

1571073666
nrdmn
tgschultz: what's going to happen to C var args functions?

1571073733
daurnimator
nrdmn: they're going to need to stay. or actually: be added :P

1571073774
daurnimator
nrdmn: e.g. there is no way to create a C vararg function in zig (like you would in C usin use va_start etc.)

1571074156
waleee-cl
is it kosher to "steal" (copy & paste) a function from rust's std docs static main.js-file into zig's main.js without a mentioning in the license-file?

1571074163
waleee-cl
specifically this one:

1571074323
waleee-cl
it fixes an issue where different keyboard-layouts produce a different js keycode for ? from the expected 191

1571074566
kenaryn
thank you both daurnimator and tgschultz :)

1571075344
nrdmn
hmm, I think you could pass a [_]type{struct {pub const value = ...;}, } where each struct's "value" can have a different type

1571075991
nrdmn
or you can access struct members by their index

1571081379
daurnimator
nrdmn: maybe.... interesting idea. but it doesn't solve the question of how to create, call or declare ABI-following vararg functions

