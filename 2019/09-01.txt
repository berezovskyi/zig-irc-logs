1567296477
Sahnvour
unless I'm confused ?

1567297779
fengb
I think youâ€™re right

1567299570
stratact
Hey folks, I'm interested in getting started with Zig and I think I found a great use for it. My question is, how does the "C-binding" functionality work? I'm interested in tapping into the xlib library on my FreeBSD system to get some X11 windowing data using Zig for a special use case.

1567299672
stratact
I used to use Rust for a long time and I dropped it for various reasons, so I think Zig's syntax will come naturally to me.

1567299914
fengb


1567299929
fengb
Slightly old but the concepts should carry over

1567300365
stratact
Oh wow... I'm impressed, so it really converts C code into Zig code?

1567300404
fengb
It converts C headers

1567300436
fengb
Zig uses the C ABI for linking so it understands C library code

1567300482
fengb


1567300697
stratact
Gotcha, that's quite remarkable. I'm excited :)

1567305451
curtisf
Does anyone else use Zig on Windows? It looks like colors in output have become broken somewhere between 6ab8b2a and 57b90d2. Just started bisecting, but compiling takes a long time

1567305647
andrewrk
curtisf, that sounds related to #2991

1567306533
hoppetosse
curtisf: I noticed that too

1567306936
curtisf
That's a good guess andrew. I'm double checking the commits before/after that PR.

1567306977
curtisf
Relatedly, I noticed the `--color off` option also changes the format of the output, it doesn't just remove color. Should there be an option to just remove color but keep the snippet structure the same?

1567306992
andrewrk
if that messed up colors, then we should probably just revert it, because the actual thing it did is planned to get reverted anyway

1567307028
andrewrk
no offense to emekoi

1567307275
curtisf
I haven't really looked into the structure of how zig is compiled, but what exactly takes so long to compile in it? It doesn't look like there's that much code for zig itself. Is it because of building using LLVM or another dependency?

1567307283
andrewrk
LLD

1567307314
andrewrk
until a few days ago we carried a bug fix patch in a fork. But after LLVM 10 (not llvm 9 which is coming out in a couple weeks) then we won't need a fork

1567307336
curtisf
ah, so there's a fork of LLD in zig right now?

1567307359
curtisf
that's exciting that this will improve

1567307373
daurnimator
andrewrk: oh that patch isn't making it into LLVM 9? :(

1567307418
andrewrk
it was a bit late

1567307974
meowray
the patch (if D62185) can be a candidate for 9.0.1

1567308269
andrewrk
nice

1567308505
meowray
tell me if you run lld 9-linked zig executables on risc-v

1567308631
andrewrk
ok :)

1567308648
andrewrk
you can cross compile C executables with lld 9 with the llvm9 branch of zig

1567308685
andrewrk
zig build-exe --c-source hello.c --library c -target riscv64-linux-musl

1567308686
andrewrk
or

1567308691
andrewrk
zig build-exe --c-source hello.c --library c -target riscv64-linux-gnu (for glibc)

1567310422
meowray
LLVM=~/Dev/llvm-9.0.0rc2; cmake -H. -BRelease -G Ninja -DCMAKE_PREFIX_PATH="$LLVM/Release;$LLVM/Release/tools/clang;$LLVM;$LLVM/tools/clang"; ninja -C Release => fatal error: llvm/Config/llvm-co

1567310425
meowray
nfig.h: No such file or directory

1567310616
meowray
in my Dev/llvm-9.0.0rc2/Release/lib/cmake/llvm/LLVMConfig.cmake, LLVM_INCLUDE_DIRS includes both llvm-9.0.0rc2/include and llvm-9.0.0rc2/Release/include, but zig/cmake/Findllvm.cmake  overwrites LLVM_INCLUDE_DIRS with llvm-config --includedir output

1567310677
andrewrk
that looks like an unsupported way to build zig

1567310694
andrewrk
the supported way mirrors how system package managers will build zig

1567310764
meowray
can it use find_package(Clang REQUIRES)? that command justs reads LLVMConfig.cmake and ClangConfig.cmake

1567311027
meowray
just use *_INCLUDE_DIRS *_LIBS in LLVMConfig.cmake and ClangConfig.cmake, not output read from llvm-config, or FIND_AND_ADD_CLANG_LIB

1567311479
andrewrk
why's it gotta be weird? just do the normal cmake thing

1567311658
meowray
this is how i use llvm/clang libs:

1567311693
meowray
this should work at least since llvm 6

1567311805
meowray
there can be multiple versions of clang and llvm installed on a system, so you need to find a way to use the required LLVMConfig.cmake  and ClangConfig.cmake

1567311855
meowray
(-DCMAKE_PREFIX_PATH may do the trick.. though i know cmake too little to understand how things work

1567312362
andrewrk
I recommend -DCMAKE_PREFIX_PATH. that's the way that works with all build systems, not just cmake

1567312369
andrewrk
and in fact that's the only supported way

1567312407
andrewrk
which means, do whatever you want, of course, but I'm not going to help troubleshoot building in a way other than the documented supported way

1567313055
meowray
i was not asking for help. i was suggesting a simpler way that also also makes it easy for an llvm developer

1567313222
meowray
i still have to figure out why commenting out execute_process...LLVM_INCLUDE_DIRS does not work

1567315841
daurnimator
andrewrk: have you thought about including BFLOAT16 support in zig?

1567316959
meowray
daurnimator: "cmake: allow user to select static vs dynamic LLVM" what's the rationale behind this commit?

1567316986
meowray
do you have an llvm install with both .a and .so ?

1567317053
daurnimator
meowray: yes, and I wanted a way to force dynamic linking

1567317091
meowray
how do you build both libLLVMCore.so and libLLVMCore.a?

1567317124
daurnimator
meowray: .so was provided by distro (which I wanted to use) and .a via some other mechanism, I can't recall now

1567317196
meowray
ok, so they are not from the same source. then i think this option should not be added

1567317250
daurnimator
meowray: without it, it was impossible to compile zig against dynamic LLVM: we had to patch the build process:

1567317309
meowray
daurnimator: i think the correct way is

1567317358
daurnimator
meowray: I'm not super familiar with cmake. If you don't think its correct then please send a patch for others to review

1567317359
meowray
it is very rare that a distro provides .so but not .a

1567317368
daurnimator
meowray: archlinux provides .so and not .a

1567317597
daurnimator
(well; sort of)

1567317620
daurnimator
To quote

1567317747
meowray
daurnimator:  on archlinux, extra/llvm provides libLLVM*.a, extra/llvm-libs provides the unified libLLVM.so (LLVM_LINKLLVM_DYLIB).

1567317785
meowray
extra/clang provides libclang*.so that depend on libLLVM.so . it is broken if a project links in libLLVM*.a and libclang*.so

1567317865
meowray
if you somehow linked in system libLLVM*.a with ZIG_STATIC_LLVM, you can run into various ODR issues because both libLLVM.so and libLLVM*.a are in the runtime image

1567317911
daurnimator
meowray: see description of issue in issue 2340 linked above

1567317951
meowray
i rememember the nick name

1567318193
meowray
daurnimator:

1567318267
meowray
daurnimator: i'm very clear about the matters and i'm working on a patch to simplify the cmake. i noticed the strange ZIG_STATIC_LLVM and you hapened to reply.. so i asked you

1567318315
daurnimator
meowray: are you saying that archlinux should drop libLLVM*.a ?

1567318456
meowray
no. i mean you cannot link in both libLLVM*.a and libclang*.so. libLLVM.so+libclang*.so can work if libclang*.so depend on libLLVM.so

1567318488
meowray
ZIG_STATIC_LLVM on Arch Linux with extra/clang doesn't work

1567318698
daurnimator
meowray: okay; but the issue was that the old cmake code would try and link llvm statically if `NOT(CMAKE_BUILD_TYPE STREQUAL "Debug")`

1567318731
daurnimator
i.e. doing a "release" build would link against libLLVM*.a and libclang*.so; and hence fail

1567318757
daurnimator
so I introduced `ZIG_STATIC_LLVM` as a way to say "never even try to statically link libLLVM"

1567319465
meowray
llvm-config --libs --link-static with libLLVM*.so => error: missing .../libLLVM*.a ; llvm-config --libs --link-shared with libLLVM*.a => error: missing .../libLLVM*.so

1567320544
daurnimator
meowray: okay I've done some more reading. looks like archlinux is waiting for the clang 9 release so they can start using CLANG_LINK_CLANG_DYLIB.

1567320583
daurnimator
(see

1567321190
meowray
daurnimator: yes.. i'm preparing a patch to clean Find{llvm,clang}.cmake and add CLANG_LINK_CLANG_DYLIB

1567321191
daurnimator
2019-07-12 03:19:46     andrewrk        zig will never mangle the assembly code, it will either keep it or delete it (and it may not delete it if it has side effects)

1567321209
daurnimator


1567321244
daurnimator
andrewrk: ^ do we use some flag to tell llvm to not optimize our asm blocks? => What if I

1567321303
daurnimator
meowray: for zig? k. you might want to target the llvm9 branch?

1567323034
meowray
daurnimator: yes. i think it should work for llvm 6~10

1567323069
daurnimator
meowray:

1567325079
meowray
daurnimator:

1567325308
stratact
Hmm? I wonder why I can't @cImport("X11/Xlib.h") when it exists in /usr/local/include/X11/Xlib.h?

1567325322
daurnimator
stratact: have you added the relevant include path?

1567325337
daurnimator
stratact: note that by default zig

1567325354
stratact
I have not. How do I accomplish that?

1567325367
daurnimator
stratact: generally you would do so by using `.linkSystemLibrary` in your build.zig

1567325384
meowray
daurnimator: i have tested this with releases.llvm.org clang+llvm 8 prebuilt archive -DBUILD_SHARED_LIBS=off

1567325412
stratact
daurnimator: gotcha, I haven't gotten that far yet. I'm new to Zig.

1567325719
daurnimator
meowray: I see you removed the ZIG_STATIC path: that requires static everything else

1567325747
daurnimator
s/path/piece of code that forces static LLVM when static zig/

1567325901
meowray
you cannot force static if your llvm does not provide libLLVM*.a

1567325947
daurnimator
meowray: right; in which case we want the build to error

1567325974
daurnimator
meowray: -DZIG_STATIC is meant to build a fully-static zig

1567326220
meowray
you can use -static to achieve that..

1567326229
meowray
it will error

1567326237
stratact
daurnimator: thanks for the build.zig suggestion, that helped.

1567326239
meowray
the option ZIG_STATIC_LLVM does not make lots of sense

1567326299
daurnimator
meowray: yeah I understand about ZIG_STATIC_LLVM. I'm just not sure with your PR how ZIG_STATIC gets propagated through to pass -static

1567326318
meowray
actually -DBUILD_SHARED_LIBS=on is reserved for developers. it is arch linux that is weird

1567326339
meowray
on every other distro you get libLLVM*.a libclang*.a

1567326363
daurnimator
meowray: correct. however arch has said they can't fix it until CLANG_LINK_CLANG_DYLIB is supported via release of clang 9 (which will be this month; so not long to wait!)

1567326403
meowray
CLANG_LINK_CLANG_DYLIB cannot be used for ig now because embedded_lld.a is broken

1567326492
daurnimator
meowray: is that not fixed upstream? (or in llvm9 branch?)

1567326498
meowray
maybe you can do -DCMAKE_EXE_LINKER_FLAGS=-static to get an error? i don't know what's the idiomatic cmake approach

1567326515
meowray
daurnimator: no. it's zig embedded_lld.a that is brken

1567326551
meowray
i'm still investigating how you do embedded_lld.a ...

1567326565
daurnimator
meowray: sorry I'm lost/maybe not paying enough attention.... what is the embedded_lld.a issue?

1567326875
meowray
daurnimator:

1567326938
daurnimator
meowray: does the zig llvm9 branch have that same embedded_lld.a issue?

1567326965
meowray
yes

1567327221
meowray
add_library(embedded_lld_lib STATIC ${EMBEDDED_LLD_LIB_SOURCES})

1567327295
meowray
daurnimator: in any case... i don't think ZIG_STATIC_LLVM is the only problem. there are more serious ones: embedded_lld_lib is built with -fno-rtti

1567327321
meowray
this does not work if some GCC versions if the system llvm/clang are built with -fno-rtti

1567331811
Snektron
andrewrk: I noticed std/os/linux.zig has setegid and seteuid, calling respectively SYS_setegid and SYS_setuid, yet no such syscall exists. According to the manpage of seteuid this is implemented as a call to setregid and setreuid.

1567335242
stratact
How do I convert a '[2]u8' to a '[*c]const u8'?

1567335262
daurnimator
stratact: you don't convert it. but you can do & on it and it will get implicitly casted

1567335276
stratact
ah fantastic

1567335474
stratact
Sadly, that didn't work: error: expected type '[*c]const u8', found '*[2]u8'

1567336034
stratact
I solved it, I had to add the & pointer, like you said, and do @ptrCast(*const u8, &":0") to cast the pointer to another pointer

1567336215
daurnimator
stratact: hmm. what about `yourarray[0..].ptr` instead?

1567336333
stratact
That works as well, thank you. :)

1567336460
stratact
Hmm this is weird

1567336464
stratact
lld: error: /usr/local/include/X11/Xlib.h:57: unknown directive: typedef

1567336466
stratact
>>> typedef unsigned long wchar_t;

1567336903
daurnimator
stratact: just `&` not working makes me wonder if there a missing implicit cast from `*[N]T` to `[*c]const T`

1567336988
daurnimator
stratact: maybe file an issue for that?

1567337303
stratact
Before I report it as an issue, I'll try the master standalone binary version to see if it it has been fixed first

1567351021
shritesh
So I think I've understood async await: The async keyword returns a frame to a function after executing it to the first suspension point and await is like suspend followed by an assignment with the return value (bad analogy).

1567351058
shritesh
Is there a way to extract the return value from a frame?

1567351273
daurnimator
shritesh: only by awaiting it

1567351683
shritesh
That makes sense. I'm still trying to figure out why I can't await from main but can resume a frame to completion

1567351794
daurnimator
shritesh: I think because await also is an implicit suspend: and you can't suspend in main.

1567352155
shritesh
That's the part I don't understand. Why can't I extract the return values from the frame without suspending

1567352554
Snektron
Zig's inline assembly is much nicer than gcc's

1567353042
Tetralux
shritesh: Because it may not be done.

1567353078
Tetralux
Though there have been suggestions that you should be able to ask for whether the result is still in flight or not.

1567353154
andrewrk
shritesh, yep sounds like you got it

1567353231
shritesh
What's the internal structure of a Frame? Is it like a container?

1567353280
andrewrk
it's literally a struct with the parameters, return value, local variables, and a few other internal bookkeeping fields

1567353377
shritesh
So technically, it should be possible to access the return value without await creating a suspension point?

1567353412
andrewrk
shritesh, @asyncCall gives you a bit more power - you can specify a different address for the return value, and then observe it independently when you're guaranteed that it's done

1567353452
shritesh
That's exactly what I was looking for.

1567353515
andrewrk
also one other tidbit - you actually can `await` without suspending, if 2 conditions are true: (1) awaiting a @Frame(func) directly and not a anyframe->T and (2) func does not suspend

1567353531
shritesh
(not that I'll use it, but it just made the mental model of how everything works clearer)

1567353544
andrewrk


1567354865
Snektron
Is a Frame in zig literally a stack frame structure?

1567354972
Sahnvour
is it possible to specify the aligment of a struct at its definition ?

1567355030
daurnimator
Sahnvour: the alignment of a struct is that of its highest alignment field

1567355099
daurnimator
Sahnvour: so I wonder if you can include a highly aligned `void` field to set the struct alignment...

1567355498
daurnimator
nope. looks like 0 size fields are not consulted for their alignment

1567355566
daurnimator
andrewrk: ^ how would you feel if we changed that (so that you could do `_alignment: void align(64) = {},`)

1567356419
Snektron
andrewrk: I've noticed a problem with lseek. In std/c.zig, this function is defined as `lseek(fd: fd_t, offset: isize, whence: c_int) isize`, but offset is only isize on x86_64.

1567356478
Snektron
Its u64 with glibc with __USE_FILE_OFFSET64 on a 32-bit system, and it's always u64 with musl

1567356503
daurnimator
Snektron: I think we'd take a PR that changes all the relevant ones to `off_t` and then sets off_t appropriately?

1567356541
Tetralux
shritesh: You

1567356572
Snektron
daurnimator: I think its a more effective solution to force 64-bit off_t everywhere

1567356600
daurnimator
Snektron: if we're compiling against an old system that doesn't have 64 bit off_t then we can't do much about it

1567356614
Snektron
so the appropriate solution would be to not declare lseek but instead declare lseek64

1567356621
Snektron
then define lseek to call lseek64

1567356840
mikdusan
and off64_t

1567356863
TheLemonMan
Snektron, you probably want to define all the 64-bit IO ops and use them on 32-bit systems

1567356874
TheLemonMan
including fstat & friends

1567356986
TheLemonMan
and I see you had some questions about the EABI thread-pointer hook, I'd define it as mcr for every arch > v6 and use __kuser_get_tls otherwise

1567357034
TheLemonMan
iirc you can't go below v6 without implementing some fallback mechanism for the atomic ops (and that's booooring)

1567357089
Snektron
i've left that part open for now since i don't exactly know how to do that, and i cant verify it if i implement it

1567357090
mikdusan
(fyi lseek64 appeared in glibc 2.1 around 20 years ago)

1567357118
Snektron
I've made a check for HWCAPS_TLS and an @panic with some pointers for the next person

1567357152
Snektron
Furthermore TheLemonMan: that's what i'm trying to suggest

1567357179
Snektron
There are a few more of these issues, for example Zig's std defines llseek and lseek as seperate functions, but they would be better suited as a single one

1567357182
Snektron
Which is doable

1567357206
Snektron
But they return usize now, and if i change that to u64 i will get a problem with getErrno

1567357271
TheLemonMan
yeah, this busywork is what made me drop the ball on arm32

1567357279
Snektron
I would say it's more elegant to move the checks of the return values up to the functions declared in std/os/linux.zig, though thats a lot of work

1567357335
Snektron
Not every syscall can be implemented naively of course (like the 32-bit versions of getuid and friends) so you can't really write a generator either

1567357385
TheLemonMan
are you sure? ;) I've explored that in #2490

1567357414
Snektron
i guess you can just define a list of exceptions and special cases

1567357428
TheLemonMan
and google is doing so too for their bionic libc (see

1567357450
TheLemonMan
but, again, it's yaks all the way down

1567357546
Snektron
interesting

1567357555
Snektron
Have you made any progress on it?

1567357573
Snektron
i was suggesting a similar thing but with function types a few days ago

1567357612
TheLemonMan
not really, iirc the generator included in #2490 is working with a few (many) quirks

1567357706
TheLemonMan
andrewrk, glad to see the lld patch got in after ~3 months of radio silence

1567358977
scientes
TheLemonMan, yes armv5t needs the 8-byte atomics. Also ARM doesn't sell armv5 chips anymore

1567359056
TheLemonMan
but my junk drawer is full of old-ish ARM chips

1567359287
stratact
daurnimator: I solved my earlier problem and it wasn't a bug that needed reporting. ;) I ignorantly used `exe.linkSystemLibrary("/usr/local/include/X11/Xlib.h")` in build.zig, but I was suppose to do `exe.lilnkSysteLibrary("X11")`, due to how the linker works on Linux/BSD.

1567359324
stratact
*exe.linkSystemLibrary("X11")

1567359506
Snektron
TheLemonMan: The bionic thing is a little different of course, it seems like that is just adding type info to syscall constants and generating code out of that

1567359516
Snektron
which is nice

1567359540
Snektron
But the purpose of std/os/linux.zig is also to provide an abstraction of some of the quirks of linux

1567359564
Snektron
(or so the comment at the top of the file says)

1567359620
TheLemonMan
yeah, the plan was to generate per-arch stubs and then wire them together in linux.zig as needed

1567359624
TheLemonMan
a huge time sink

1567359683
Snektron
I think its too much to do that with all syscalls, but a handfull (like the ones that are declared now) should be doable

1567360004
Snektron
but anyway, thats more part of the linux os stuff. The original question was about the functions declared in c.zig

1567360079
Snektron
i think those should use *64 variants where applicable, or force glibc to use _USE_FILE_OFFSET64

1567360170
TheLemonMan
the former is the sensible thing to do, you never know how the user libc is configured

1567360253
Snektron
thats what i was thinking

1567360322
Snektron
that should also make it more compatible with other libc's

1567360377
TheLemonMan
well glibc is the only one (that I know of) that carries this historical baggage

1567365088
andrewrk
Hey TheLemonMan welcome back

1567365117
andrewrk
I managed to get your glibc and musl stuff fixed in a clean way

1567367833
Snektron
andrewrk: what do you think about using *64 versions of libc functions (in c.zig) instead of the normal ones?

1567368506
andrewrk
Snektron: yes

1567368555
andrewrk
Do you want to start upstreaming your work? I get the impression you have a massive branch that is going to be hard to merge

1567368648
Snektron
theres not a lot of stuff added really

1567368663
Snektron
Its more a few small things - namely the added constants and a few small changes to the wrappers in linux.zig

1567368676
Snektron
but i can make a pr for that if you want

1567370761
stratact
How do I cast to C pointers in Zig?

1567370785
stratact
or use a C pointer off the bat?

1567370861
shritesh


1567371024
stratact
Ah, got it, thank you

1567371596
Snektron
btw

1567371632
Snektron
the functions in c.zig, are they more intended for internal use, or also users?

1567371663
Snektron
like should they only contain functions that are only used in the stdlib or should it contain all libc functions in the future?

1567371697
fengb
I believe itâ€™s intended to eventually be a full port of libc

1567372498
Tetralux__
Ry

1567372500
Tetralux__
So*

1567372510
Tetralux
I just found something interesting.

1567372720
stratact
sigh, why must working with c libraries be so painful ðŸ˜¢

1567372821
Tetralux


1567372902
Snektron
debug info?

1567372950
stratact
Just segmentation faults. Also here is the code:

1567373228
Tetralux
The interesting thing I found is that by compiling to asm and then making an exe from that asm, zig cc, aka clang, produces an executable that is 17KB - and that's -static and -g.

1567373239
Tetralux
But if you don't go via asm, its 828KB.

1567373264
mikdusan
is it? when you go from .asm -> exe i don't see -g options

1567373282
Tetralux
I didn't provide -g in the asm->exe step.

1567373288
Tetralux
Only in the source->asm step.

1567373813
Snektron
oh

1567373840
Tetralux
Unfortunately my gdb is broken so I can't verify that it actually has debug symbols.

1567373854
Snektron
i just noticed glibc doesnt export *64 versions of functions like musl does (of course), and also doesnt export llseek if some 64-bit define isn't met

1567373859
Snektron
what a nuisance

1567373886
Tetralux
It does seem to though: `Reading symbols from hello...

1567373887
Tetralux
`

1567373978
Snektron
oh yes it does, but they're defines

1567374006
Tetralux
And I just figured out that it

1567378464
Snektron
Made a PR with the arm stuff i have and an issue regarding the libc misery

