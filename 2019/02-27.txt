1551225612
gamester
okay, that makes sense

1551225641
andrewrk
and the bummer thing about this is that due to the fact that they made the protocol in the C library (libwayland in this example), you the video game creator targeting linux, will have to distribute multiple linux binaries.

1551225668
dec05eba
that's one nice thing about x11. We can parse xcb xml files to generate zig client for x11 with 0 dependencies

1551225699
andrewrk
dec05eba, x11 has the same issue that we're talking about though

1551225702
andrewrk
it's not specific to wayland

1551225720
dec05eba
what do you mean?

1551225733
andrewrk
the bottom line is the vulkan/opengl drivers require being loaded into your process

1551225768
dec05eba
ah graphics drivers...

1551225833
andrewrk
anyway gamester worst case scenario, you end up having to create a lot of builds because of the state of graphics drivers on linux, but zig makes it easy with cross compiling

1551230925
diltsman
Anybody know if there are plans to support fixed-point types in Zig?

1551230976
shachaf
I thought you meant recursive types but I guess there's a more straightforward interepretation in this context.

1551231508
diltsman
I'm not certain that I have ever seen recursive types.  Is there a language that supports them that I could look at?

1551231716
shachaf
I mean, things like struct Node { struct Node *next; }; are recursive.

1551231752
shachaf
And they're probably the least fixed point of some functor or something, though Zig is not really the language for that sort of thing.

1551232321
gamester
diltsman:

1551233905
andrewrk
diltsman, the proposal gamester linked is not "accepted" which means that if you feel it belongs in the language, you are invited to explain your use case

1551237603
tgschultz
andrewrk, would the solution to #1810/#1923 do anything for #1386

1551237605
tgschultz
?

1551238003
diltsman
andrewrk: I can see that.  I made a comment on it.  I will think on it more in depth.  I just know that many problem domains that I have worked in have used fixed-point arithmetic exclusively due to hardware limitations.

1551238768
andrewrk
tgschultz, I think they're unrelated. the former has to do with runtime bookkeeping of error return traces; the latter has to do with analysis of error set types

1551238928
tgschultz
darn

1551243303
tgschultz
I contend that an empty errorset is not the same as having no errorset, so it should be inferable. Not having it be inferable has forced workaround code into interfaces.

1551244389
emekankurumeh[m]
I agree

1551271873
andrewrk
I also agree

1551282146
tgschultz
oh, for some reaosn I'd missed that 1386 was marked as a bug. Thought there was some reasoning behind it acting the way it did that was still under consideration.

1551282256
andrewrk
tgschultz, I'm just trying to make it so that your use case works (which currently doesn't and requires a workaround) and the status quo use case continues to work (you forgot to return a possible error, or refactored a function to no longer return error and forgot to change return type)

1551282332
andrewrk
btw I started working on

1551282602
tgschultz
wouldn't the heruistc be that `try`,`catch`, or returning an error union was used anywhere in the function?

1551282724
andrewrk
tgschultz, I must apologize, I don't know why I thought those two issues were duplicates

1551282729
andrewrk
these are completely unrelated

1551282735
andrewrk
I have no idea what I was thinking

1551282776
andrewrk
I must have pasted the wrong number in

1551282855
tgschultz
aside from the fact that we're not getting two bugfixes for the price of one, no big deal.

1551282890
andrewrk
to answer your question again

1551282910
andrewrk
>  would the solution to #1810/#1923 do anything for #1386

1551282950
andrewrk
I absolutely think that #1386 and  #1810 are related, quite possibly the same issue

1551282962
andrewrk
I'll make sure to examine them together, when working on it

1551283056
andrewrk
with this in mind, does your `try`/`catch` question still apply to #1923?

1551283307
andrewrk
unrelated, I'm considering deleting `use`. it just won't be available. but you would be able to use `pub foo;` to "splat" a struct to @import()ers

1551283328
andrewrk
but it wouldn't apply to the current file

1551283525
andrewrk
hmm, that's problematic. you could still get the old behavior by introducing a file as a layer of indirection

1551283564
andrewrk
probably status quo will stay then. but I guess it will be a compile error if `use` occurs in generic structs or functions

1551283582
andrewrk
idk, I'll play with it.

1551284718
tgschultz
the try/catch thing only applied to the errorset inference

1551284916
tgschultz
use is... well, I can see both how it is a problem and how it isn't.

1551284939
andrewrk


1551286915
daurnimator
andrewrk: `use X` should be equivalent to something like: `for (X) |thing| { @This()[X] = thing[X]; }`

1551287414
andrewrk
daurnimator, I believe you're talking about a different concept

1551287441
andrewrk


1551289332
daurnimator
andrewrk: no I wasn't; but that issue is interesting

1551289569
daurnimator
andrewrk:

1551289606
daurnimator
andrewrk: and then combine with making a struct dynamically at comptime

1551290891
emekankurumeh[m]
daurnimator: for dynamic structs at comptime, `@reify` was proposed

1551290987
daurnimator
emekankurumeh[m]: if you think about the idea of "a file is a struct body", then you

1551291071
emekankurumeh[m]
true

1551291630
bheads
For #2014 would it be simpler to just have  pub @useImport("c.zig")  over renaming use to usenamespace

1551291654
andrewrk
bheads, I covered that question in the proposal

1551291883
bheads
Not sure I see that

1551291960
andrewrk
to answer your question directly: no, it would not be simpler

1551291996
andrewrk
renaming a keyword is one of the simplest modifications possible. if you're saying it would simplify the semantics of the language, I fail to see how it does that

1551292042
bheads
I get that renaming use to usingnamespace is a easy fix, but removing a keyword does simplify the language

1551292080
bheads
was just a thought

1551292402
andrewrk
in this case the builtin has important side effects one has to be aware of. this makes it equivalent (or perhaps worse) than a keyword in terms of semantic simplicity

1551292437
andrewrk
bheads, sorry, I thought at first you meant special casing the use case of "pub use"

1551292447
bheads
ah, gotcha

1551292484
bheads
yeah, I was thinking use can really change a lot of things

1551292497
bheads
pub @use(@import("std"));

1551292535
bheads
that would still enable the usage in

1551292537
andrewrk
that's actually an important use case though

1551292568
andrewrk
not the std lib in particular, but imagine depending on a package, and adding some extra functionality to it

1551292616
bheads
right (I just pick std cause its short to type)

1551292622
andrewrk
maybe something like a "full windows.h" package which does `pub usingnamespace @import("std").os.windows;`

1551292643
andrewrk
and then adds all the decls that zig does not include because they are unnecessary

1551292649
bheads
exactly

1551294120
gamester
I doubt that people who dislike "obj.method()" pattern and would rather write method(obj) would subject themselves to File.method(obj) for every method in their project, nor would they pull every method out by hand: const method = File.method; What remains for them is not using zig or littering their code with "usingnamespace" which is more verbose now.

1551294250
gamester
I like obj.method() myself and for that I first do const Object = @import("file.zig").Object; as we all do

1551294258
andrewrk
gamester, the only difference from C is that namespaces are mandatory, and instead of a `prefix_` convention, it's `prefix.` in zig

1551294270
andrewrk
I don't think there's any room to complain, for those coming from C

1551294322
andrewrk
you can even rename the prefix like this: `const p = @import("libpng");`

1551294322
tgschultz
you can kinda build a struct dynamically at comptime. you have to reference the fields in code using getters and setters though.

1551294414
andrewrk
s/mandatory/automatically created for files/

1551294520
gamester
andrewrk: if C people use a prefix, it could be anything, such as a per project prefix. The file name could be completely meaningless

1551294577
tgschultz
the filename is only relevant to @import()

1551294581
gamester
err I mean, it would hold so little meaning that having a prefix based on it would be confusing

1551294608
andrewrk
gamester, are you advocating for changing something?

1551294707
gamester
Is it possible to import multiple files into a single prefix?

1551294741
andrewrk
yes, just use multiple usingnamespace declarations in the same file

1551294770
andrewrk
and then `const x = @This();`

1551294791
andrewrk
or you can @import("thefile.zig") from another file if you did `pub usingnamespace`

1551294860
andrewrk
the thing with @This() isn't necessary but you could do it if you anticipated cutting & pasting code to somewhere outside the file

1551297699
andrewrk
emekankurumeh[m], you were asking about caching earlier yeah? here's something relevant I just typed up:

1551298231
andrewrk
^ arguably this will make Zig even better than a C compiler for C projects

1551298271
andrewrk
because it will auto cache everything perfectly, with no need to set up a makefile or other build system

1551298434
WilhelmVonWeiner
When compiling I get the error "/home/dch/src/zig/src/os.cpp:111:88: error: use of undeclared identifier

1551298447
WilhelmVonWeiner
/home/dch/src/zig/src/os.cpp:1828:2: error: unimplemented

1551298463
WilhelmVonWeiner
should I build 0.3.0 instead of master?

1551298471
andrewrk
WilhelmVonWeiner, what OS are you on?

1551298476
WilhelmVonWeiner
OpenBSD.

1551298485
andrewrk
are you the one working on porting it?

1551298492
andrewrk
*are you the one working on porting zig to openbsd?

1551298502
WilhelmVonWeiner
Unfortunately, not

1551298535
andrewrk
here's a work-in-progress branch which you could try:

1551298655
andrewrk
until that's done zig does not have any level of support for OpenBSD

1551298659
WilhelmVonWeiner
how would I check that out?

1551298675
WilhelmVonWeiner
I don't use git often more than `git clone` kekeke

1551298731
andrewrk
you would clone Aversiste's repository and then checkout the `openbsd` branch. you can find that out from "Aversiste wants to merge 5 commits into ziglang:master from Aversiste:openbsd"  at the top

1551298764
andrewrk
but please note the official answer to your question is: Zig does not support OpenBSD yet

1551298791
WilhelmVonWeiner
thanks for the help.

1551299116
andrewrk
WilhelmVonWeiner, here's an issue you can subscribe to if you wish:

1551299147
DutchGh0st
what happened to @maxValue() ?

1551299170
andrewrk
DutchGh0st, std.math.maxInt

1551299183
DutchGh0st
ohh, hehe, oops

1551299197
DutchGh0st
guess I shouldn't use 2 compilers :3

1551299275
andrewrk
DutchGh0st, explain?

1551299294
DutchGh0st
on Windows I used the 0.3 release,

1551299325
DutchGh0st
while on Manjaro I have 0.3, but some version later than the actual release

1551299347
DutchGh0st
0.3.0+ba361f31 to be exact

1551299381
andrewrk
there have been quite a few improvements since then :)

1551299474
DutchGh0st
yeahh...I should keep it all up to date :3

1551299525
DutchGh0st
but on the other hand, isn't 0.4 coming kinda soon-ish?

1551299597
andrewrk
yes, in march

1551299726
DutchGh0st
woopwoop

1551299800
DutchGh0st
oh, I also wondered a couple days ago, coroutines...They are still being worked on, but will there be some mechanism to prevent putting the coroutine in an invalid state by `moving` it?

1551299844
DutchGh0st
or won't there be the issue of like ' ohhh, but if I move the thing at this point I invalidate references it has to itself and blahblahblah'  ?

1551300726
andrewrk
hard to say for sure but it's my intention that that mistake will be difficult to make, ideally with compile errors, but perhaps with debug runtime safety checking

1551300749
andrewrk
that's definitely an important consideration in the design

1551300936
DutchGh0st
I actually wondered if you could add like an extra field if you are 'unsafe' to be moved, and then have a special pointer type that can only give you a mutable pointer if your struct doesnt have the extra field

1551300987
DutchGh0st
and then coro's could only be advances trough the special ptr type

1551301004
DutchGh0st
but maybe there's another better way other than this pin-like behaviour :)

1551301406
andrewrk
that's something that will become more clear how to do once copy-elision is done

1551301547
DutchGh0st
ah yeahh you're bussy with that

1551301605
DutchGh0st
in std.meta, is there a way to make a query like 'hey, does this type have this field (indirectly)` ?

1551301654
DutchGh0st
by indirect I mean you might ask for a field "Bar" , but because of all the nesting, only the most deep type has a field "Bar"

1551302397
tgschultz
Did anyone answe DutchGh0st's question about std.meta? If not, and if I understand the question correctly, then no. There isn't a convenience function for recursive field enumeration.

