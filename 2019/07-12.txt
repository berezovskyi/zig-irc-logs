1562890169
Tetralux_
Pretty sure this is a solved problem - but how what's the recommended way to turn a `[]const u8` into `[]u8`?

1562890189
Tetralux_
alloc + copy? Or is there a cleaner way?

1562890503
geemili
Heyo, I just saw the email about the github sponsorship thing

1562890597
geemili
andrewk: Are you planning on putting a regular patreon post up so that newcomers on patreon can see it?

1562890862
andrewrk
geemili, yes I will do that after one month

1562890890
geemili
Ah, okay

1562891319
emekankurumeh[m]
andrewrk:have you seen

1562891410
andrewrk
nope, looking now

1562891417
andrewrk
I can't wait to work on this, it looks so fun

1562891479
andrewrk
this is also up for grabs for contributors since parsing is self-hosted already

1562891526
andrewrk
such a change would be welcome to modify the types and representation, as long as zig fmt tests still pass

1562893604
daurnimator
andrewrk: what was that you were saying about github sponsoring not having the same "levels" as patreon?

1562893669
andrewrk
they don't allow arbitrary donation amounts yet

1562893677
daurnimator
ah right

1562893688
daurnimator
you might want to keep an option at $1 or $2 a month?

1562893707
andrewrk
well they also require unique rewards for each tier

1562893803
daurnimator
I think your tiers might be a bit close together... 5/15/25/50/100/400. I might recommend 2/5/25/100/500/2500

1562893860
daurnimator
--> if I actually was to start using zig in production

1562894012
strmpnk
I assume you can see what level folks have signed up for so far and which is most popular?

1562894246
andrewrk
if anyone wants to donate more than 400/month please contact me privately

1562894714
daurnimator
andrewrk: I still think you need an expensive tier to make the other ones look cheaper by comparison; it's a pretty widely used effective technique

1562894798
andrewrk
I'll consider it

1562896516
fgenesis
so i found zig a couple weeks ago by recommendation and i like those ideas

1562896519
fgenesis
just had to throw that in

1562896536
andrewrk
hi fgenesis, what ideas are you referring to?

1562896548
fgenesis
didn't get around to write code and prolly won't for the forseeable future but it's made its way to the top of the list, somewhere above rust. probably a good sign

1562896560
fgenesis
oh just the general things i got from the comparison with C

1562896579
fgenesis
as a C++ coder i really like the language, but i stick to c++03 because that's still manageable

1562896601
fgenesis
gotta jump that boat before c++25 implodes under its own complexity

1562896622
fgenesis
and zig looks just about what i've always wanted to have

1562896631
fgenesis
the comptime stuff is amazing

1562896667
fgenesis
wanted to do a constexpr thing just today and turns out that was impossible to do even with c++11 so yeah, there.

1562896694
andrewrk
glad you like it

1562896704
andrewrk
it's still very beta of course, but moving fast

1562896721
fgenesis
the other end of the spectrum is obviously generating code and eval'ing it :P

1562896741
andrewrk
there's an important problem with that approach

1562896747
andrewrk
it's a cross-compilation footgun

1562896759
andrewrk
the way zig does comptime, it emulates the target

1562896778
fgenesis
yeah no i'm not asking for compile-time string-to-code things, that would be insane :P

1562896807
fgenesis
oh really

1562896811
fgenesis
that wasn't obvious from the docs

1562896814
fgenesis
like that idea

1562896818
andrewrk
yes so for example, endianness works as you would expect

1562896821
fgenesis
so it'd do big endian properly as well?

1562896826
fgenesis
ooooh yesss

1562896844
fgenesis
one thing i was wondering about tho

1562896847
fgenesis
@functions

1562896865
fgenesis
they seems so clunky. is that @ intentional to make it obvious it's a builtin?

1562896870
andrewrk
yes

1562896876
fgenesis
makes sense then

1562896892
fgenesis
and i assume zero-cost wrapping them for syntax would be possible as well?

1562896922
andrewrk
they're not all functions in the strict sense; the language can treat them specially. for example @unionInit participates in result location semantics which would not be possible to implement in userland

1562896999
andrewrk
but you have to admit, it's easy to learn. if it has @ then it's in this list:

1562897181
fgenesis
fun fact: what really sold me was that zig was already on godbolt.org and someone sent me an example

1562897197
fgenesis
so gz for getting this for. godbolt seems to be

1562897200
fgenesis
*far

1562897255
fgenesis
some example that generated a sine table at compile time, something i did a day before but with scripts and glue, and i love how easy that looked, right there

1562897259
andrewrk
github syntax too. popularity is picking up

1562897354
fgenesis
one last question before i shut up for today: any plans for runtime compilation?

1562897378
andrewrk
elaborate?

1562897392
fgenesis
so far i've been sold on C++ glued with Lua, but the dynamic typing is more often getting in the way than not

1562897412
fgenesis
being able to (re-)load code at runtime would fill that nice as well

1562897418
fgenesis
*niche

1562897434
fgenesis
even if it's JITed and ran through llvmjit

1562897495
andrewrk
no plans for language JIT support

1562897496
fgenesis
so far i've been missing a dynamically loadable language like lua but statically typed, and please don't mention JS/typescript/... :P

1562897517
fgenesis
ok, fair enough

1562897517
andrewrk
closest thing to that planned is hot code swapping

1562897541
andrewrk
but that's more to make the development cycle quick

1562897719
Tetralux
> being able to (re-)load code at runtime would fill that niche as well

1562897728
Tetralux
I should note, that you could already do that.

1562897738
fgenesis
not as dll though

1562897742
Tetralux


1562897747
fgenesis
i mean throw source at it

1562897767
daurnimator
fgenesis: I actually see a path to it in zig

1562897805
Tetralux
It's not clear to me how that would be more useful, or simpler, than a dynamic library that you hotload.

1562897840
Tetralux
Though, as someone's who's dabbled with Lua briefly in the past, I can see why you're thinking that.

1562897848
Tetralux
I can imagine why*

1562897853
fgenesis
okay maybe i DID get a bit too used to being able to generate strings at runtime and load them as a function. send help

1562897864
daurnimator
1. make `asm` return a function. 2. make `asm` work at runtime (i.e. write a dynamic assembler). 3. work up from there

1562897867
Tetralux


1562897898
Tetralux


1562897908
Tetralux
I'm not sure if that's good or not... xD

1562897944
daurnimator
Tetralux: for whom? :P

1562897944
fgenesis
most i've done in lua is a 5.1 bytecode mangler that makes things platform independent and self-decrunching, and i regret nothing

1562897958
Tetralux
O.O

1562897973
Tetralux
You lost me at "mangler" xD

1562897982
Tetralux
#TheSignOfOvercomplication.

1562898006
via
can you instantiate an element in a struct with another value on the struct? like...

1562898012
fgenesis
well you do what you gotta do when you want to ship but keep the source code under wraps, no?

1562898015
Tetralux
Then again, I've spent hours writing Lua code for a Minecraft mod which used it to control robots that would build stuff for you - so who am I to judge.

1562898054
Tetralux
You could just make the closed-source thing load the DLL that the user writes to hook into the behavior, no?

1562898056
daurnimator
via: you'll need to set it to undefined and fix it up after.

1562898063
fgenesis
having a non-portable bytecode is an absolutely horrible idea and working around that in plain lua that doesn't even have fucking bitops is a "fun" exercise

1562898068
andrewrk
daurnimator, I mean, you

1562898083
via
daurnimator: damn, that just doesn't look as clean :(

1562898088
andrewrk
that's how you would, e.g. implement a lua jit in zig

1562898138
andrewrk
via, daurnimator's workaround is correct. I vaguely recall an issue open for this

1562898140
daurnimator
andrewrk: yep. funny to call out luajit here. luajit is written using 'dynasm' -> a preprocessor that compiles inline assembly. and you know what we think about preprocessors....

1562898172
fgenesis
well, looking at the zig printf format string example... ehehe

1562898186
Tetralux
That reminds me, are there docs of some sort for understanding the zig asm syntax? - Also, why does it not seem very obvious how to read it? ;p

1562898199
daurnimator
Tetralux: no docs. it's pretty much llvm asm syntax

1562898211
daurnimator
which itself is terrible documented. espeically the clobber options

1562898226
Tetralux
Not to put a too-fine-a-point upon it, but I can read

1562898233
fgenesis
worse than gcc inline asm?

1562898248
daurnimator
fgenesis: gcc inline asm you can at least find docs for some of the time

1562898251
fgenesis
(gnu syntax)

1562898285
daurnimator
writing e.g. the valgrind code in zig I wrote it in gcc inline asm first, then read the llvm source code to figure out what the equivalent options were...

1562898293
fgenesis
daurnimator, indeed, but that doesn't make it any less confusing

1562898328
daurnimator
fgenesis: oh it does.

1562898330
via
yeah, that worked, thanks

1562898352
Tetralux
Are there any plans to adjust the asm syntax in zig to more closely match that of zig's asm volatile?

1562898366
Tetralux
i.e: multi-line string with a return value - to name an example.

1562898368
andrewrk
the gcc inline asm docs should be correct for zig

1562898380
daurnimator
e.g.

1562898406
andrewrk
asm is something that would benefit from havingf another backend

1562898411
daurnimator
andrewrk: want me to join a <title/> bot to the channel? I miss having "about" for links

1562898423
andrewrk
sure go for it, as long as it's written in zig

1562898426
andrewrk
just kidding. go for it.

1562898440
daurnimator
andrewrk: I'll rewrite it in zig once you add coroutines ;)

1562898446
andrewrk
fair enough :)

1562898454
andrewrk
it has to be registered with freenode, we get mad spam without that setting on

1562898459
fgenesis
ooooh coros

1562898470
Tetralux
See - I'm the kind of programmer that reads "asm constraint code" and stares blankly wondering why it's not a simple sequence of asm instructions xD

1562898472
andrewrk
stackless coroutines, aka Continuation Passing Style

1562898489
andrewrk
Tetralux, it's all about telling the optimizer wtf is going on in the asm

1562898522
Tetralux
Curious. Isn't the point of writing inline asm because you want to run a very specific set of instructions?

1562898532
fgenesis
so no explicit main coro calls sub coros, like lua

1562898543
fgenesis
just curious because that's what i know and worked with so far

1562898544
daurnimator
Tetralux: yes. but then e.g. where do you want the output to be?

1562898573
fgenesis
CPS seems a bit too much like mad science, at times

1562898594
daurnimator
Tetralux: you need to tell the compiler "this asm snippet needs 2 registers free; it writes to rax, so make sure you don't keep anything you need there"

1562898658
strmpnk
Tetralux: there is no ABI that arbitrary asm must follow so it must be explicit. Registers can be trampled, inputs and outputs need to be handled, etc.

1562898658
fgenesis
Tetralux: that's so that the compiler can still optimize surrounding code, as opposed to msvc. msvc's inline asm has no such thing so all it can do is entirely disable the optimizer in functions that use inline asm

1562898713
fgenesis
even being able to tell the compiler your code isn't going to modify memory helps a lot

1562898871
strmpnk
That reminds me of a question, where did Zig land on aliasing rules? I know there is the noalias keyword, so I assume there aren't special case types like C?

1562898907
Tetralux
If all the constraints are doing is saying "Hey - these are the registers I care about", then could it not just be something like this?

1562898910
fgenesis
please burn C's strict aliasing rules with fire

1562898923
andrewrk
strmpnk, there are a couple "research" issues open regarding aliasing

1562898940
andrewrk
currently there is a well-defined memory model, and no type-based alias analysis is planned

1562898944
fgenesis
there's a restrict keyword for a reason

1562898963
daurnimator
Tetralux: yep that's sort of what the constraint syntax is

1562898982
diltsman
No inline assembly, only Zig and a linker script.  I have my processor up and running and have it finally running at 84 MHz (max frequency supoorted).

1562899002
fgenesis
diltsman: architecture?

1562899024
diltsman
Cortes M3.  SAM3X8E.  Arduino Due.

1562899025
daurnimator
Tetralux: the other info you need is what registers the asm uses: i.e. what is going to get "clobbered"

1562899032
Tetralux
daurnimator: Indeed. Except it's unreadable by comparison to Zig.

1562899041
Tetralux
Also re clobbered regs

1562899048
Tetralux
Just add those to the list after RAX.

1562899067
daurnimator
Tetralux: yep. that's all it is

1562899086
strmpnk
andrewrk: Ok. Reasonable defaults it sounds like.

1562899139
daurnimator
Tetralux: now to go slightly further: why do

1562899213
fgenesis
something else i've wondered about. did you consider harvard architectures?

1562899253
fgenesis
like avr's PROGMEM annotation

1562899281
Tetralux
daurnimator: I think that it's clearer if you are

1562899301
Tetralux
Esp in debug mode.

1562899306
daurnimator
Tetralux: but that's tying the optimizer's hands. it might be able to go faster if it uses RDX instead

1562899335
Tetralux
There's some weeds there - like: "how much faster?"

1562899338
Tetralux
But

1562899346
Tetralux
Assuming it would be worth it to allow it to do that

1562899351
daurnimator
Tetralux: with llvm or gcc inline asm you

1562899362
Tetralux
( .. enough to sacrifice the ability to know which one it chose)

1562899379
Tetralux
Then maybe you should have a way to state that.

1562899383
strmpnk
fgenesis: linker scripts are used for that sort of thing in other cases. Not my area of expertise but that's what I've done with playing with micro controllers in the past.

1562899384
daurnimator
Tetralux: you do

1562899393
Tetralux
In a way that doesn't require a special syntax for it.

1562899397
Tetralux
Or at least one that reads like Zig.

1562899406
Tetralux
( .. or more like it, anyway.)

1562899417
daurnimator
now you're getting somewhere

1562899435
fgenesis
strmpnk: not really. usually you want to have different data end up in different segments, without exposing things to the linker

1562899443
fgenesis
think local, static const arrays

1562899458
daurnimator
yes I agree we should make the ASM syntax's OutputOperands, InputOperands and Clobbers more zig-like

1562899479
strmpnk
fgenesis: I guess so but that's how I got my static constants into flash. ¯\_(ツ)_/¯

1562899513
andrewrk
if we ever want to support more backends than LLVM (which I think we do someday) then we'll need our own assemblers for each architecture

1562899526
andrewrk
this would enable zig to have better inline assembly syntax (even for llvm backend)

1562899539
andrewrk
but that's a lot of work. O(N) for each supported architecture

1562899548
fgenesis
dynasm for the rescue!

1562899610
strmpnk
fgenesis: I should look up PROGMEM itself but I think it's doing the same thing. It's probably a section attribute which then relates to the sections outlined in the linker script.

1562899635
fgenesis
strmpnk: yes, it's a section annotation that the default linker script uses

1562899673
daurnimator
fgenesis: indeed. time to port dynasm to zig :)

1562899677
fgenesis
strmpnk: my main problem is that i can't modify the linker script because of "arduino", so everything must be in the compiler

1562899698
strmpnk
Yeah. I see what you mean.

1562899702
fgenesis
and this piece of poopcode is probably the worst compiler and inline asm abuse i've ever done

1562899749
fgenesis
also linker are pain. i wonder who came up with the concept of a linker script. seems like an unnecessary complication on top

1562899760
fgenesis
also it's scary

1562899800
fgenesis
it's like automake just for the linker

1562899975
strmpnk
I do like the idea of a simple zig assembler though. I've always hated the notation borrowed from GCC.

1562899985
Tetralux
daurimator: I'm still not really convinced that allowing the optimizer to fiddle with what registers you use is actually enough of a gain over the loss of simplicity.

1562900013
Tetralux
daurimator: I'd have to see some real world examples where that actually made a difference - and even then - not in debug builds.

1562900027
Tetralux
I want to stay sane when attempting to debug when I write the asm wrong xD

1562900039
fgenesis
Tetralux: is an extra push/pop not convincing enough?

1562900042
strmpnk
Tetralux: register selection and spills are a very expensive part of the optimizer so removing some of these constraints could make a big difference in a hot loop which predicated the asm in the first place.

1562900062
fgenesis
congrats for going to memory for nothing :P

1562900097
Tetralux
Personally, I view asm similarly to nakedcc: If you use it, it's because you are attempting to do something

1562900107
Tetralux
I do

1562900139
Tetralux
There's enough complication as it is without having the optimizer to contend with too xD

1562900153
Tetralux
But

1562900164
Tetralux
If you really don't want to hardcode it.

1562900168
fgenesis
if you don't absolutely need a specific reg, let the optimizer select it

1562900187
Tetralux
Seems reasonable on face value.

1562900195
fgenesis
it's effectively solved an optimal map coloring problem for you and it's not nice of you to un-optimal its solution :P

1562900214
Tetralux
I just like being able to reason about the code I'm writing ;)

1562900228
Tetralux
And also being able to fix it if something breaks.

1562900233
Tetralux
I cannot fix the optimizer if it breaks

1562900238
Tetralux
Therefore I want a way to turn it off.

1562900266
fgenesis
if you want it un-optimal there's always java

1562900292
Tetralux
e.g: const res = asm volatile(r1 = RAX .noOptimize) { ... }

1562900309
daurnimator
Tetralux: that's what volatile means

1562900318
daurnimator
Tetralux: volatile = "no optimization please"

1562900333
Tetralux
Okay - that's something then. xD

1562900348
Tetralux
Though it also means "Don't optimize this away"

1562900353
Tetralux
.. which is a little different.

1562900368
fgenesis
really? the way C specifies this is that reads and writes may not be reordered and must happen even if they'd be considered unnecessary

1562900381
fgenesis
it doesn't turn off the optimizer entirely

1562900387
daurnimator
fgenesis: that's what volatile means on a variable. not on an asm block

1562900392
fgenesis
and it really shouldn't, imo

1562900397
fgenesis
oh, right

1562900419
fgenesis
wait so an asm block without volatile will be optimized?

1562900424
daurnimator
yep

1562900428
Tetralux
It

1562900443
fgenesis
first time anyone ever told me, good to know

1562900452
Tetralux
If LLVM or w/e decides it "doesn't actually do anything."

1562900457
daurnimator
fgenesis: volatile on a variable also doesn't mean what you said: what it really means is "one read of this variable in source code = one read of the variable in machine code"

1562900459
Tetralux
Something like that IIRC.

1562900471
daurnimator
fgenesis: you need memory barriers/fences to prevent reordering

1562900471
fgenesis
daurnimator: yes, meant that

1562900492
fgenesis
daurnimator: no, that depends on the arch

1562900501
fgenesis
for no

1562900512
fgenesis
what the memory model makes of it is another issue

1562900526
daurnimator
fgenesis: "depends on the arch" is just a way to say that you need it; but sometimes it'll be a no-op

1562900551
Tetralux
For non-volatile, you could have: const res = asm(r1, r2, ...) { ... } // optimizer is free to pick which regs are actually used.

1562900561
fgenesis
iirc on x86 a compiler barrier is strong enough to act as a full memory barrier

1562900562
Tetralux
For volatile: const res = asm volatile(RAX, RDI, ...) { ... }

1562900577
fgenesis
(most of the time?)

1562900620
Tetralux
THAT

1562900623
Tetralux
RIGHT THERE

1562900645
Tetralux
.. Is why I like keeping things so simple that I could understand them coherently even if blackout drunk.

1562900664
Tetralux
Seems a reasonable goal. :)

1562900675
fgenesis
you're on point right there

1562900737
Tetralux
As you can see - kinda obstructs your view does this.

1562900757
Tetralux
I like having clear vision x)

1562900816
Tetralux
Fortunately I was somewhat prepared for this.

1562900939
andrewrk
wait let's be very clear about what volatile means

1562900958
andrewrk
the docs have it correct:

1562900967
andrewrk
"Loads and stores are assumed to not have side effects. If a given load or store should have side effects, such as Memory Mapped Input/Output (MMIO), use volatile. "

1562901004
fgenesis
" If you see code that is using volatile for something other than Memory Mapped Input/Output, it is probably a bug."

1562901007
fgenesis
thank you for this

1562901025
fgenesis
this is the most concise way of expressing how not to do it wrong

1562901207
daurnimator
fgenesis: yes... most of the time. where most of the time means as long as you're only in one process

1562901260
daurnimator
fgenesis: importantly if you're dealing with shared memory (including memory shared with the kernel!) then you need manual barriers on x86_64

1562901295
daurnimator
andrewrk: the confusion above was volatile on a variable vs `asm volatile`.

1562901336
andrewrk
it does mean the same thing in both cases though - it means "side effects"

1562901345
andrewrk
"this memory has side effects" and "this assembly has side effects"

1562901403
Tetralux
It's interesting to me that 'volatile' is the word that people came up with to describe that.

1562901423
daurnimator
andrewrk: `asm volatile` more means "don't change this assembly from what I've written" e.g. because you want an exact byte sequence to be in your output binary. or in the case of e.g. valgrind: you have a VM that triggers a special code path depending on exact instruction sequences

1562901470
daurnimator
or in the case of crypto code "please for the love of god don't touch this and introduce a timing attack"

1562901524
Tetralux
Maybe "sideeffected" for volatile vars, and "fixed asm {...}" for asm.

1562901529
Tetralux
I'd argue the meaning is clearer.

1562901534
daurnimator
notably for that last crypto case: the assembly

1562901534
andrewrk
daurnimator, no that's not what it means, it means "it has side effects"

1562901558
andrewrk


1562901587
andrewrk
zig will never mangle the assembly code, it will either keep it or delete it (and it may not delete it if it has side effects)

1562901613
daurnimator
huh. okay I was wrong then

1562901641
emekankurumeh[m]
andrewrk: in that post the box areay is the same thing as the segmented list in the stdlib right?

1562901661
andrewrk
emekankurumeh[m], sorry what post?

1562901757
emekankurumeh[m]
the one on parsing from a while back

1562901912
andrewrk
emekankurumeh[m], ahhh, let me double check

1562901965
andrewrk
emekankurumeh[m], oh interesting! yes it appears we independently came up with the same data structure

1562901985
emekankurumeh[m]
on a closer inspection of that bjou language it looks like it shares a lot of qualities with zig

1562902000
andrewrk
I was actually considering a different data structure for lists however

1562902019
emekankurumeh[m]
except it's metaprogramming seems more powerful

1562902475
hryx
bJou has a cute logo °u°

1562905027
hspak
is there a way to check to see if a value is undefined or am I using it wrong if I have to ask?

1562905127
andrewrk
the latter is correct: it's a bug if you have to ask

1562905143
hryx
if it's expected/legitimate to be unset, null is the right value for it

1562905186
andrewrk
+1 ^.  undefined means the value could be anything, so you can't check if it's undefined. (however it's planned that safety checks could detect branching on undefined and call @panic rather than invoking undefined behavior)

1562905225
hspak
cool, thanks guys

1562905453
hryx
oh, speaking of that safety check, I was poking around ir.cpp to see how to implement it. (After one short evening of digging around, didn't figure it out yet, but might be a fun project)

1562906011
andrewrk
hryx, I think it's going to be different per type

1562906152
hryx
my completely uneducated guess would be that there is some way to guard all variable accesses with the safety check. but maybe that's naive -- I couldn't immediately see what "variable access" actually translates to

1562906174
hryx
oh, and I guess there's field access and array access too

1562906194
hryx
not sure if that's what you meant by "per type"

1562906454
andrewrk
I mean how are you going to tell if it's undefined?

1562906574
hryx
good point. My intuition said memcmp with 0xAA, but then I guess we still gotta know the size

1562906624
andrewrk
consider though, if it's a u8, 0xaa is a valid byte. that's the decimal number 170

1562906667
hryx
Oh shoot, of course. You mentioned quietly making it an optional (or something like it) behind the scenes

1562906682
hryx
which makes more sense

1562906781
andrewrk
this would require making @sizeOf(u8) != 1

1562906798
andrewrk
which... maybe would be ok? if it's not in a packed struct

1562906817
andrewrk
that would be breaking semantics though

1562906829
andrewrk
you can see how solving safety for types which have no guaranteed memory layout would be a good first project

1562906906
hryx
huh, I'd never understood why non-guarnateed layout was beneficial. but that application makes total sense

1562906958
andrewrk
there's also the Profile-Guided Optimization use case

1562906967
andrewrk
as another motivation for not guaranteeing layout

1562906994
daurnimator
andrewrk: I'd love a way to add manual annotations for that sort of thing

1562907013
daurnimator
also a way to check if the layout of something is what I want or not

1562907073
daurnimator
e.g. `if (@layOut(linux.iov) == @layOut([]u8))` -> can pass a slice directly in a linux.msghdr

1562907108
daurnimator
I guess you can already do that with @byteOffsetOf

1562907111
daurnimator
that's good :)

1562907242
daurnimator
andrewrk: meet the bot [[]]. I just had to hack in nickserv support :P

1562907254
andrewrk
is it written in lua?

1562907256
daurnimator
yep

1562907260
daurnimator
!source

1562907261
[[]]
See my source at

1562907270
hryx
would it be silly (or even possible) to keep a hidden table of undefined variables? Something like: when x = undefined happens, add a reference to x in this hidden set, then removes x when a value is assigned to it

1562907271
andrewrk
fair enough, more motivation to get coroutines/networking going :)

1562907284
hryx
I am totally spitballing obviously

1562907293
hryx
oh hi bot

1562907308
andrewrk
hryx, I like where you're going with this. one thing to consider is you can pass a pointer to C code, and you don't control the loads/stores from that memory

1562907341
andrewrk
*from that codebase

1562907365
andrewrk
and by C code I mean any external library

1562907419
hryx
woof! good point, once you pass it to another library, who knows what will happen to it

1562907457
daurnimator
hryx: well if it's not an `extern` struct then in

1562907487
andrewrk
but for non-C-ABI-compatible types: yes as daurnimator says they don't know the layout, and the semantics require that they don't mess with the data directly, so we can rely on being in control of loads/stores for these types

1562907514
daurnimator
andrewrk: oh? which semantics are those?

1562907536
andrewrk
if you pass a pointer to a non-extern struct to an external function, it's an "opaque type"

1562907560
daurnimator
what if I e.g. had a C function: `writeMyInt(&nonexternstruct, @byteOffsetOf(nonexternstruct, "foo"))`

1562907571
andrewrk
ok yeah good question - hang on, I might have gotten confused for a second...

1562907632
hryx
So maybe there are a few different strategies to employ for the undefined check, and it will depend on some factors: is it extern? or maybe, have you passed it to an extern function? Is it a struct, array, or scalar?

1562907641
hryx
there must be prior art on this kinda stuff

1562907655
andrewrk
that's a good point, in theory, we do know if a given type has been used in any external context

1562907719
hryx
to me this feels like a good place to spend this kind of energy - undefined access has definitely effed me even in Debug mode

1562907732
hryx
(just a meta-thought)

1562907764
daurnimator
hryx: and that's why we have valgrind :)

1562907771
andrewrk
I definitely think we can accomplish undefined-safety for non-well-defined-memory-layout types.

1562907808
hryx
daurnimator: let's make it so zig folx don't have to use valgrind! :D

1562907814
hryx
might be a stretch of course :)

1562907824
daurnimator
hryx: we don't have that power :P

1562907839
andrewrk
accomplishing undefined safety for well-defined memory layout types (such as integers and packed structs) will be a separate challenge

1562907854
daurnimator
hryx: really, I don't think we can ever catch this in all circumstances. just a few common ones (though that's good). you need a runtime VM like valgrind to get everything.

1562907869
hryx
what if Debug mode runs in a VM

1562907878
hryx
or is the perf cost too high

1562907887
andrewrk
we are talking about runtime checks though. and as hryx is hinting, there's a lot you can do with a runtime

1562907893
andrewrk
I think a runtime in debug mode is quite reasonable

1562907930
andrewrk
we've already given up the simplicity of having only 1 build mode

1562907943
andrewrk
we may as well take full advantage of Debug Mode

1562907965
hryx
are there any other langs that have such a hybrid "debug runtime, release machine" approach?

1562907998
andrewrk
rust has integer overflow checks in debug mode, guaranteed wraparound in release mode

1562908077
andrewrk
I'm not aware of a language that does what zig is considering doing with stack variable references that escape

1562908122
andrewrk
which is, essentially having stack variables that escape, allocated on the heap, but memset to 0xaa (or other sentinel value) when the function returns, so that use-after-free can be detected

1562908192
hryx
yeah, that is pretty neato. I only learned of "stack escaping" via Go, but obviously it only does part of what you said

1562908199
andrewrk
what's unique about zig code is that the semantics require the lifetimes to still be bounded by the function, so that the code still does work in freestanding mode (where the safety checks will be unavailable (unless a global allocator fitting the requirements can be provided!))

1562908253
andrewrk
the big idea here is that zig code is "lowest common denominator" so that it supports maximal code reuse in any environment

1562908299
andrewrk
however when the "denominator" is not so low after all (managed os such as linux/windows/macos/freebsd), then debug mode can have quite capable safety checks to enforce semantics and prevent undefined behavior

1562908310
hryx
I can't wait to see what people do on small chips with zig, especially if custom targets are added

1562908327
daurnimator
that reminds me... I had a quick look into writing zig for my watch

1562908362
daurnimator
I got stuck on setting up the toolchain on non-ubuntu :(

1562908376
andrewrk
setting up the toolchain? that's what zig is supposed to save you from

1562908397
daurnimator
andrewrk: gotta link with the libc etc....

1562908410
daurnimator
which means having the libc :P

1562908425
andrewrk
are you sure? what functions does it provide?

1562908469
daurnimator
uh.... a shit load.

1562908469
[[]]
d​aurnimator: Title "Native Application | Tizen Developers" Shortened <

1562908471
andrewrk
because if it's strcmp, sin, cos, pow, strchr, etc, zig can provide those

1562908484
andrewrk
fopen.. now it starts to get tricky

1562908529
daurnimator
andrewrk: no... things like `bt_hid_host_connect` -> connect to a bluetooth device

1562908558
andrewrk
that's more than libc

1562908583
daurnimator
their OS... they can put in libc what they want :P

1562908633
andrewrk
sure, I'm just saying that's not libc, that's them requiring you to link their SDK, so fair enough that you have to install it

1562908762
hryx
andrewrk: For blue-sky safety checks ideas (e.g. run in a VM) is this the best place for discussion?

1562908763
[[]]
h​ryx: Title "make Debug and ReleaseSafe modes fully safe · Issue #2301 · ziglang/zig · GitHub" Shortened <

1562908770
hryx
whoa

1562908793
hryx
ok that's a pretty useful bot feature daurnimator

1562908796
andrewrk
yep that's a good place for general discussion

1562908802
hryx
ok dope

1562908817
andrewrk
if an idea starts to turn into a concrete proposal that can be done, then it can be a new issue

1562908844
andrewrk
hryx, see also this related issue:

1562908845
[[]]
a​ndrewrk: Title "audit analysis of undefined values; make it clear when undefined is allowed or not · Issue #1947 · ziglang/zig · GitHub" Shortened <

1562908887
andrewrk
every time I see that bot do the title I narrow my eyes and think to myself, "that should be zig code running that bot, not lua."

1562908903
andrewrk
that's good. extra motivation for #2377

1562908904
daurnimator
andrewrk: get on coroutines then ;)

1562908935
hryx
damn daurnimator

1562908959
hryx
j/k

1562908989
daurnimator
(though the title bit the bot uses a fork of gumbo... getting that to work with zig is a whole other task)

1562909006
andrewrk
too late! you promised! :D

1562909112
daurnimator
hryx: actually that's a task you might be interested in

1562909128
daurnimator
(you seem to like parsers and things...)

1562909182
hryx
hm, which task?

1562909183
daurnimator
hryx: could you port

1562909183
[[]]
d​aurnimator: Title "lib · master · Craig Barnes / lua-gumbo · GitLab" Shortened <

1562909340
hryx
ooh, I see. could be fun :D

1562910606
daurnimator
hryx: so you'll do it? :D

1562911565
andrewrk
I think a title extractor could be based on a very simple html tokenizer. no parsing needed

1562911628
daurnimator
andrewrk: we used to do that.... it broke a lot. lots of websites have crazy html

1562911649
daurnimator
a good rule is: do not attempt to summon zalgo

1562911755
gonz_
Like all "the good old days" technologies, too permissive and they all end up being just a mishmash of choices and opinions

1562911827
gonz_
Embedded even in the zeitgeist as Postel's law

1562911869
gonz_
A lot of people seem to think protocols were better or good back in the day, but things are broken in part due to those attitudes

1562911942
daurnimator
gonz_: if you don't know it already:

1562911945
[[]]
d​aurnimator: Title "draft-iab-protocol-maintenance-03 - The Harmful Consequences of the Robustness Principle" Shortened <

1562911985
gonz_
Topical :D

1562912014
daurnimator
And for anyone else really out of the loop on parsing HTML.

1562912015
[[]]
d​aurnimator: Title "html - RegEx match open tags except XHTML self-contained tags - Stack Overflow" Shortened <

1562914080
gonz_
andrewrk: Just switched over to github sponsors, thanks for the email laying out the bottom line (them matching it). I had completely missed the point, apparently.

1562914123
andrewrk
thanks gonz_!

1562914856
daurnimator
andrewrk: thanks for the shoutout in the stream :)

1562914889
andrewrk
daurnimator, np, I meant it

1562914893
andrewrk
good night

1562926602
BitPuffin
andrewrk: when you say (in your video) that zig fmt will protect people from inconsistency that doesn't mean it's gonna get in the way of proper tabs for indent, spaces for alignment style right?  :P

1562926640
BitPuffin
basically the way I usually use tabs is if I have a function call like

1562926642
BitPuffin
f(a,

1562926645
BitPuffin
b,

1562926647
BitPuffin
c)

1562926668
BitPuffin
for the b and c lines I'd tab to the same place that f is, but then use space to get b and c aligned with a

1562926962
ffddr
Hi! What options should I consider if I want to use relatively big cmake-based c library (

1562926963
ffddr
b/master/build.zig. Maybe some there are some other options?

1562926963
[[]]
f​fddr: Title "Page not found · GitHub · GitHub" Shortened <

1562926964
[[]]
f​fddr: Title "Page not found · GitHub · GitHub" Shortened <

1562937932
ffddr
ok, I came that in libwebsockets case it will make more sense to just link against system's libwebsockets.o :)

1562941218
ltr-
how many times ppl get in here asking for operator overloading? just courious. Im asking cos started to code more in zig and sometimes i found my self wanting a custom operator like | or a comparator, but then i realize that the code is much more clear without overloading and just name the binary function.

1562941276
mq32
ltr-, i think that happens more often

1562941300
mq32
i have the same backstory as you, but i still think vectors require operator overloads…

1562941301
diltsman
Operator overloading is extremely powerful in C++, but it is incredibly easy to overuse.  Probably 90% of the time when people use it they shouldn't.  Same goes for most moderatly advanced features.

1562941338
gonz_
If there is any hope for the continued readability of zig that shit will get shut down fast

1562941382
mq32
diltsman, yeah, that's true

1562941396
mq32
i restrict myself in C++ to arithmetic overloading only

1562941412
ltr-
may be only custom operators like <=> |~!@@# any non standard combination of signs

1562941421
gonz_
Or maybe none of them

1562941436
mq32
so: overload an operator for a type only if: 1) type is an arithmetic type 2) operator is an arithmetic operator (no bitstuff or shifts)

1562941444
ltr-
i have seen scary things like overloading the ,

1562941445
diltsman
Most of the advanced C++ features are for implementers of low-level high preformance libraries.  I can play all kinds of stupid games in C++ to make my library fast, and I love writing that kind of code.  I also believe that anyone who writes application code that way should be fired.

1562941485
mq32
ltr-, you mean like: "vec3 = v(1),2,3" ?

1562941500
ltr-
yes you can override the , operator

1562941511
mq32
you can even overload "operator&"

1562941516
ltr-
eeww

1562941522
mq32
which is actually kinda great :D

1562941528
mq32
but: only for library stuff

1562941546
gonz_
I don't get why people think their typing is so precious

1562941548
mq32
property<MyClass, int> prop; // public getter, private/friend setter

1562941549
gonz_
Just make it a function

1562941582
ltr-
infix function some times helps redeability IMO

1562941608
ltr-
may be one can create new operators , and in the code should be clear that is a custom infix operator

1562941629
gonz_
In that case make infix enabling tokens like putting a procedure name between `

1562941639
ltr-
like haskell yes

1562941640
gonz_
Not hijacking operators

1562941651
mq32
a `plus` b `mult` c

1562941712
mq32
gonz_: Have you ever written linear algebra heavy code in a language without operator overloading?

1562941738
gonz_
In any case the solution isn't to try to please people who could either solve their problem by splitting the parts out into separate bindings for readability or could accept a readable infix syntax enabler

1562941766
gonz_
mq32: Nope, but it's obvious that adopting something that will enable you to completely hide the meaning of an operator is bad for readability

1562941791
very-mediocre
You could always write a comptime parser for your own DSL with operators

1562941793
ltr-
ofc, i think zig syntax is very healthy right now

1562941793
mq32
yeah, that's true

1562941793
gonz_
It doesn't matter if you special case it or make rules for it, no one could look at zig's stated goals and say this is a good idea

1562941834
mq32
i'm with you. i'm just saying: "there are viable applications for operator overloading but they don't fit zen of zig"

1562941855
mq32
btw, is there any example code on how to use @Vector yet?

1562941856
ltr-
i can see ppl doing preprocesors in the build.zig file :D

1562941971
mq32
also i see that @Vector types support operators

1562941973
mq32
this is neat

1562942041
fengb
I have a few cases where += would have been cleaner than .set(.get() + val)

1562942050
fengb
Basically... mathy stuff

1562942160
gonz_
vec3 stuff and C++ I've used operator overloading for

1562942172
gonz_
but I'd rather take a hit syntactically than enable it wholesale

1562942195
gonz_
and making rules for it just invites people to somehow snake their usage in there

1562942198
fengb
I miss it, but not by that much

1562942379
fengb
Of course, I come from Java, Javascript, and Go so I never really had much use >_>

1562942387
fengb
And Ruby operator overloading is pretty terribad

1562942406
halosghost
if I have to have overloading, I think I'd like it the way lua does it

1562942413
fengb
s/terribad/abused heavily

1562942415
halosghost
but that doesn't really have any relevance to how Zig does operators :)

1562942456
andrewrk
I have a game written in JavaScript with some fairly sophisticated linear algebra (AI for spaceships to fight each other)

1562942475
andrewrk
I didn't have any problem with the function-based math

1562942508
fengb
Gosh I hate math in JS. That's the one thing that convinced me to use Typescript

1562942520
fengb
"Oops you used a + operator. You get NaN everywhere now!"

1562942522
daurnimator
fengb: I hate math in typescript :p

1562942543
mq32
andrewrk, nice demonstration with SDL2 yesterday!

1562942543
daurnimator
fengb: typescript seems to do nothing useful in terms of numeric types... it just has floats

1562942574
fengb
Well that's just Javascript. It protects against accidental type coercion

1562942575
andrewrk
mq32: it's a tiny taste of what the package manager is going to be able to do

1562942576
very-mediocre
Typescript secretly hates Javascript. Good luck using libraries that don't have typings. The maintainers expect you to do ludicrous workarounds for using unwashed (untyped) JS modules. So much for the incremental adoption.

1562942576
halosghost
daurnimator: you mean like js

1562942577
daurnimator
fengb: you should be able to introduce different integer types that are e.g. masked on access.

1562942580
mq32
do i understand it correctly that you compile C code to zig and then compile the zig code?

1562942609
fengb
I wrote my own type library just to prevent undefined and strings from propagating NaNs everywhere

1562942638
daurnimator
halosghost: not really.. JS you sort of get integer annotations (which asm.js really standardized)

1562942640
andrewrk
mq32: the c code gets directly compiled to machine code and the zig code gets directly compiled to machine code, then they are linked together

1562942648
gonz_
very-mediocre: Running the risk of offtopicing too much, I'll just say that I've been very happy since we switched to TS. It's 100% a good thing and yes, we've run into issues with untyped/old libraries.

1562942657
fengb
daurnimator: asmjs is dead so...

1562942661
daurnimator
halosghost: e.g. `>>> 0` is a u32. `|0` is an i32. etc.

1562942669
daurnimator
fengb: it's only dead in that wasm exists now....

1562942669
halosghost
daurnimator: the first non-float numeric type in js just happened; bigints

1562942673
gonz_
For more type stuff I've written our own standard library

1562942678
halosghost
daurnimator: and it's an extension

1562942718
daurnimator
gonz_: any chance I can get you do review a PR open against one of my projects? I don't know the TS ecosystem at all

1562942726
mq32
andrewrk, okay thanks. sounded a bit like you compiled two steps... :D

1562942726
fengb
very-mediocre: it's a wonder some libraries can even be typed. JS can be hideously complicated

1562942746
companion_cube
typescript has a very powerful type system for that reason

1562942755
fengb
Yeah it's complicated... but necessary

1562942781
halosghost
or, we could all just put a lua engine in our web browsers, cut js support, leave it behind forever, and move on with our lives :)

1562942783
daurnimator
(or anyone else that knows TS well)

1562942785
fengb
Anyway... sorry to derail this channel lol

1562942788
andrewrk
mq32: well step 1 is make SDL2.lib and step 2 is make the_game.obj

1562942795
companion_cube
halosghost: you mean wasm, surely

1562942800
andrewrk
And step 3 is link them together

1562942801
fengb
Port Lua to wasm

1562942807
halosghost
companion_cube: not really; but fine, I guess

1562942811
daurnimator
fengb: I have a talk on why that doesn't work :P

1562942811
companion_cube
why tie ourselves to one single (script) language?

1562942812
fengb
Wasm is too low level to be consumed directly

1562942825
gonz_
daurnimator: It's unlikely that I represent some kind of "default TypeScript user" since most of what I did for our standard library was port parts of Haskell into it, etc.

1562942826
halosghost
companion_cube: I'm a little skeptical of wasm

1562942841
halosghost
companion_cube: actually, I'm skeptical of any programming on the web

1562942842
companion_cube
I'm very enthusiastic, at least we can use proper langs on the web

1562942853
companion_cube
well yeah, but it's there to stay

1562942859
daurnimator
halosghost: companion_cube: fengb:

1562942868
gonz_
daurnimator: We/I do a lot of type systemy stuff to keep invalid states unable to happen, etc.

1562942868
andrewrk
Yeah I just want more browser API exposed to wasm

1562942882
halosghost
daurnimator: expired cert

1562942883
daurnimator
oh crap is my cert expired

1562942898
daurnimator
one sec... checking letsencrypt cron job

1562942911
halosghost
that reminds me, I really need to finish migrating from acme-client to uacme

1562942917
halosghost
maybe I can manage that this weekend…

1562942963
daurnimator
halosghost: I use dehyrdrated.

1562942970
halosghost
never heard of it

1562942979
halosghost
if it works for you, I'm glad :)

1562942990
halosghost
my webpage is written in C and I try to keep the thing as small as possible

1562942993
halosghost
including dependencies

1562943000
halosghost
uacme is pretty light-weight

1562943003
daurnimator
halosghost: dehydrated is a bash script.

1562943010
fengb
andrewrk: I don't think wasm proper will ever have browser APIs. But we might be able to get pretty standard "userland" wrappers

1562943011
daurnimator
that you can easily read yourself

1562943023
halosghost
daurnimator: sounds fair; I'm planning on not having bash on my next machine

1562943033
halosghost
like I said though; if it works for you, I'm glad :)

1562943085
daurnimator
halosghost: cert fixed try

1562943085
[[]]
d​aurnimator: Title "Fengari"

1562943114
halosghost
ah yes

1562943116
halosghost
the lua vm in js

1562943119
halosghost
I've seen this

1562943123
halosghost
daurnimator: you made it?

1562943128
daurnimator
halosghost: yep

1562943130
halosghost
nice

1562943153
halosghost
it's terrifying, but cool

1562943158
daurnimator
you'll see a link at the bottom of the page to a talk I did on why wasm isn't the answer

1562943169
companion_cube
daurnimator: I dislike untyped languages, so lua in the browser isn't exactly exciting :p

1562943173
daurnimator
though I think the audio got fucked up :(

1562943181
companion_cube
especially now that TS exists

1562943195
fengb
wat, you look nothing like what I had thought

1562943252
daurnimator
fengb: ha. what did you imagine?

1562943283
fengb


1562943283
[[]]
f​engb: Shortened <

1562943302
fengb
Again, you're a pokemon in my brain

1562943371
halosghost
daurnimator: is that your main webpage or do you have another

1562943409
very-mediocre
There's no nice way to say this. I discovered that Zig is a bad word where I live.

1562943421
daurnimator
halosghost: for fengari? there's also the github page...

1562943422
[[]]
d​aurnimator: Title "Fengari · GitHub" Shortened <

1562943426
very-mediocre
So is Go, to some people, apparently

1562943430
halosghost
daurnimator: no, I meant for you

1562943456
daurnimator
halosghost: well this alias (daurnimator) has a blog.

1562943457
[[]]
d​aurnimator: Title "Daurnimator's Hovel" Shortened <

1562943519
fengb
Ah GC problems

1562943542
halosghost
daurnimator: kewl

1562943544
companion_cube
didn't find the video about why wasm isn't the answer

1562943558
daurnimator
fengb: yep. solving GC cycles across DOM and Wasm is essentially impossible.

1562943589
companion_cube
isn't the answer to do everything in wasm? :p

1562943601
daurnimator
companion_cube: sure. and at that point who needs a web browser :P

1562943602
fengb
Its interop with the DOM is pretty poor

1562943621
fengb
By poor, I mean nonexistent. You have to wire in things manually and there isn't a convergence of strategies yet

1562943624
halosghost
daurnimator: I need more lua people in my life; good to meet you :)

1562943633
companion_cube
daurnimator: you'd still have a DOM

1562943633
halosghost
daurnimator: cf.

1562943634
[[]]
h​alosghost: Title "/home/halosghost"

1562943642
companion_cube
well it's not like wasm is finished…

1562943678
fengb
The base spec will probably never have DOM bindings. It's designed to be platform agnostic

1562943688
halosghost
daurnimator: (not that that page will say much regarding my lua exploits)

1562943704
halosghost
that reminds me, I really need to finish my port of the punycode encoder/decoder to lua

1562943731
companion_cube
fengb: doesn't preclude spec extensions

1562943739
companion_cube
same as JS, after all

1562943746
daurnimator
halosghost: I just saw that project... I once did something similar. and then I learnt that TR46 is a thing

1562943756
halosghost
daurnimator: TR46?

1562943759
daurnimator
ha

1562943761
daurnimator
yeah

1562943763
daurnimator
that's everyones answer

1562943780
halosghost
linky?

1562943781
daurnimator
TR46 is a stupidly complex list of obscure normalisation rules you

1562943794
daurnimator
complex enough that they require ~8 MB of unicode tables

1562943801
fengb
o_O

1562943806
halosghost
mmm

1562943808
halosghost
that sounds fun

1562943847
daurnimator
halosghost:

1562943875
fengb
Unicode is the best and worst thing that's ever happened to strings

1562943879
halosghost
ohhh yes

1562943882
daurnimator
the

1562943882
halosghost
I've read this

1562943902
daurnimator
guess why libidn2 suddenly became part of the core of all linux distributions about a year ago

1562943909
halosghost
heh

1562943911
companion_cube
it's like datetime, it's inherently messy

1562943940
daurnimator
halosghost: so I wrote

1562943940
[[]]
d​aurnimator: Title "lua-idn2" Shortened <

1562943953
halosghost
daurnimator: to be fair, this is only required for idna-compat

1562943961
halosghost
daurnimator: you don't actually have to do this for general punycode usage

1562944001
daurnimator
but then I realised that I don't need to use libidn2 directly. instead libpsl includes libidn2 and also punycode routines. so I wrote

1562944001
[[]]
d​aurnimator: Title "lua-psl" Shortened <

1562944045
daurnimator
I'm going to claim this is ontopic because we'll need to do all these same things in zig

1562944057
andrewrk
very-mediocre, what language is this? what does the word mean?

1562944075
daurnimator
==> bindings to libidn2 and/or libpsl will be essential for zig in future for e.g. the http client

1562944080
andrewrk
daurnimator, yeah you're good, technical stuff like this is welcome

1562944112
halosghost
hehe

1562944122
fengb
Should we port libidn2 to zig?

1562944127
fengb
Is that too much work?

1562944127
very-mediocre
andrewrk: I live in Dubai. I told a friend about Zig and he told me it's local slang for pooping. That would be the local dialect only.

1562944133
andrewrk
fengb, why do you think that? it seems like the natural progression to me

1562944148
daurnimator
fengb: eventually. start with a comptime parser for the unicode data files

1562944168
very-mediocre
If it makes you feel better, I've worked with Iranian people and they informed me that Go also means poop.

1562944197
andrewrk
interesting. I predict that is a problem that is likely to happen with any single-syllable word

1562944210
daurnimator
but I'm not sure if we'll want to write libpsl in zig: most linux distros ship with libpsl with a compiled in list that gets updated

1562944227
very-mediocre
Yes most likely.

1562944238
very-mediocre
Fortunately almost nobody who uses that dialect is a programmer.

1562944254
fengb
Maybe we could switch to a single letter? :P

1562944258
halosghost
I mean, that's just the nature of language

1562944274
fengb
Zed

1562944278
tgschultz
andrewrk: happens with multi-syllable words too, there's really no avoiding it with a world of 8 billion people and constantly shifting languages

1562944279
companion_cube
I mean, in french "bit" sounds exactly like "cock", so…

1562944283
halosghost
a reasonably good-faith effort is about as much as can be expected

1562944283
companion_cube
we get over it

1562944288
halosghost
companion_cube: indeed

1562944289
fengb
Even the english world wouldn't agree on the pronunciation :D

1562944300
daurnimator
ooo, I just did a system update and linux 5.2 is downloading. I'll un-draft that PR now before I go to bed

1562944327
companion_cube
anyway, unicode is awesome 💞✨💃

1562944366
daurnimator
halosghost: if you need a unicode domain to practice on https://ȱ.com is another project of mine (bring written in zig! that's what the bloomfilter PR is for)

1562944403
halosghost
bloom filters!

1562944417
andrewrk
daurnimator, nice

1562944429
daurnimator
andrewrk: "last checkbox item"?

1562944434
tgschultz
I don't think unicode is awesome. Unicode is a barely tollerable complex solution to a problem I'm not sure is real. It's an out there opinion, but I think language should adapt to computing more than the other way around.

1562944464
fengb
ASCII or bust :P

1562944472
Akuli
daurnimator, i used to work on a programming language called Ö

1562944479
Akuli
that's not O, that's Ö

1562944481
halosghost
tgschultz: that's a pretty western-centric view

1562944484
companion_cube
ascii is such an anglo centric hill to die on

1562944492
halosghost
but conversations like that are definitely headed towards OT

1562944509
tgschultz
halosghost: I didn't say we had to standardize on ASCII

1562944546
daurnimator
Akuli: ȱ is a cooler letter; it's from a dead language called livonian and sounds sort of like "eugh" ;)

1562944548
halosghost
tgschultz: nor did I

1562944559
companion_cube
so what subset of utf8 would y'all rather have?

1562944568
daurnimator
Akuli: also there's only so many single letter domains I can obtain

1562944574
very-mediocre
companion_cube: better English than something like Esperanto.

1562944577
Akuli
daurnimator, but i have an ö key on my keyboard

1562944579
halosghost
companion_cube: I don't care which one as long as it contains box-drawing chars and the four separators

1562944581
halosghost
:)

1562944592
Akuli
daurnimator,

1562944593
[[]]
A​kuli: Title "GitHub - Akuli/odotdot: Funny programming language" Shortened <

1562944593
companion_cube
very-mediocre: neither can become  the one true language™

1562944597
tgschultz
I'm just saying, maybe languages should adapt to be more easily representable on computers rather than forcing computers to learn our complex, ever changing, and frankly irrational languages. Just look at how complex it is to do simple things like match text in unicode.

1562944612
daurnimator
Akuli: haha. I laughed out loud.

1562944620
companion_cube
yeah, maybe english should be written with kanjis

1562944628
very-mediocre
tgschultz is giving me some "assimilate or die" borg vibes

1562944631
fengb
tgschultz: I don't think you can just ignore Arabic or Chinese and expect it to work

1562944641
daurnimator
Akuli: you can type ȱ in most linux programs with ctrl+shift+u 2 3 1

1562944648
fengb
They'll just invent their own standards

1562944654
tgschultz
Unicode isn't quite as bad as making a writing system out of drawing the waveforms for spoken words, but it is in the same ballpark of universal but not appropriate.

1562944657
fengb
It's a miracle Unicode is even a real standard

1562944673
companion_cube
well before unicode there was one standard per language, so… 🤷

1562944680
tgschultz
Why does everyone think I'm being language centric here?

1562944683
Akuli
daurnimator, i can type ö with one key press in any program :D

1562944694
companion_cube
tgschultz: well you said languages had to adapt

1562944699
tgschultz
yes

1562944711
tgschultz
The same way languages adapted to be written when we invented writing

1562944716
companion_cube
I don't imagine you suggest removing some ascii chars, heh?

1562944724
fengb
... they didn't adapt to writing

1562944736
fengb
Chinese has hundreds of different spoken dialects with 1 written form

1562944746
tgschultz
fengb: the fact that we aren't writing down waveforms says they did

1562944753
andrewrk
I tend to agree with tgschultz on this, although I recognize it's a bit easier for me with my native language than for others'

1562944755
very-mediocre
Don't underestimate English. There's a recent trend of western sociocultural guilt, but imho English is the most effective language I know out of 4.

1562944774
companion_cube
doesn't mean other people should given up theirs

1562944784
companion_cube
or all the existing text corpus in their language

1562944789
very-mediocre
well nobody's being asked to give up their language

1562944790
tgschultz
andrewk: oh yeah, no doubt english is already well suited, which does give me some cause for doubt.

1562944790
andrewrk
I like the part about unicode that it has all the characters from every language. the part I don't like is where there are multiple ways to represent the same thing

1562944790
fengb
I know English and Chinese natively. And English is much better for just about everything

1562944791
companion_cube
"sorry, this book doesn't fit unicode 2.0"

1562944800
fengb
But you can't just ignore a language and hope it'll change

1562944817
tgschultz
language adapts to medium all the time

1562944821
companion_cube
very-mediocre: s/give up/adapt/ ?

1562944826
companion_cube
what would that even mean?

1562944827
andrewrk
I don't like that some codepoints are not characters, but modifiers

1562944830
companion_cube
give up accents?

1562944843
companion_cube
andrewrk: some languages are apparently inherently modifier based :/

1562944861
companion_cube
even é I'd rather type as e+'

1562944866
tgschultz
I'm not sure what it would mean outside of latin derived languages, which are pretty much all I have experience in.

1562944876
fengb
I don't like that modifiers and characters can be "equal"

1562944938
companion_cube
that's a fair point

1562944948
tgschultz
companion_cube: here's the thing, the fact that you were easily able to recognize, through convention, that é and e+ are the same thing is the kind of adaptation I'm talking about. Hardly anyone uses interrobang because !? works fine.

1562944957
companion_cube
‽

1562944961
companion_cube
I use interrobang a lot, sorry

1562944981
fengb
⸘

1562944986
Akuli
ö

1562944986
fengb
Ha, I didn't expect that to be a thing

1562944994
very-mediocre
companion_cube: ...in french?...

1562944999
companion_cube
on IRC

1562945006
companion_cube
language adapts to the medium ;)

1562945013
tgschultz
fengb: didn't even render in my client, whatever it was.

1562945019
companion_cube
emojis are a prime example of that: electronic communications need another way of conveying emotions

1562945020
fengb
Inverted interrobang

1562945020
very-mediocre
OK, parce que je n'en ai jamais entendu parler.

1562945023
companion_cube
or body language

1562945028
andrewrk
it looks like a glitch to me, before I read the conversation I thought my IRC client had a bug

1562945030
companion_cube
very-mediocre: vraiment‽

1562945036
fengb
Emoji is a new language

1562945042
fengb
Humans love creating new languages

1562945052
companion_cube
it's an evolution of ascii smileys

1562945060
companion_cube
and it addresses a need

1562945096
very-mediocre
Non-English codebases are scary, tbh.

1562945107
very-mediocre
There's so much friction with the naming.

1562945117
companion_cube
for coding I agree it's a different problem

1562945119
tgschultz
I've heard that there are programmers insane enough to use emoji in code.

1562945130
companion_cube
s/insane/cheeky/ ? 🙃

1562945141
andrewrk
here is one thing I will say: some languages are fundamentally easier to represent. objectively! in terms of information theory

1562945165
andrewrk
and in software - open source software in particular - difficulty means that progress costs more time

1562945176
andrewrk
progress & time are the currency of software

1562945186
fengb
I agree from a technical perspective

1562945201
andrewrk
and so, languages which are fundamentally easier to represent, in practice, will end up getting more support. that's just a fact of life

1562945210
companion_cube
reusability means this kind of problems should be easier to solve only once, though

1562945211
andrewrk
no matter what we decide is ethically correct to do as a society

1562945217
companion_cube
(like canonizing, sorting, etc.)

1562945218
very-mediocre
There's nothing wrong with that. Everyone's too afraid of everything being perceived as racist.

1562945222
fengb
But you can't really force people to change culturally

1562945228
daurnimator
Any of those typescript lovers able to do a review for me? :) fengb?

1562945229
companion_cube
but there's not "a society", but a collection of societies

1562945238
fengb
Unicode is intentionally descriptive, for better or for worse

1562945269
tgschultz
all societies are collections of societies. It's like saying there is no animal there are only cells.

1562945287
fengb
Trying to describe all of language in one standard... it's insane that it's even possible

1562945292
companion_cube
do you consider that there's one big human society we're all part of?

1562945300
tgschultz
yes? why wouldn't that be true.

1562945309
very-mediocre
I find anyone who would try to unify everything is a scary control freak.

1562945314
companion_cube
I mean it's somewhat true, but it never takes decisions

1562945321
very-mediocre
There's nothing unethical about division, people form groups naturally.

1562945322
companion_cube
very-mediocre: would you rather go back to latin1 ?

1562945334
very-mediocre
I mean socially, and worldwide :)

1562945348
very-mediocre
e.g. Esperanto, the language of the world to be.

1562945356
companion_cube
heh, what a pipe dream

1562945370
companion_cube
it's as hopeless as having one true programming language™

1562945378
tgschultz
companion_cube: yes it does, but I think I've dragged this off topic enough.

1562945382
very-mediocre
Computers are not humans, unify as you please :)

1562945412
companion_cube
well we need an offtopic for this chan then, if there isn't one :p

1562945420
fengb
Although thanks to pop culture and technology... we're sorta unifying around English that's been unheard of before

1562945430
very-mediocre
hey it's not

1562945444
very-mediocre
it does feed back into utf-8

1562945447
andrewrk
unicode & society can be on topic as long as everybody is nice to each other

1562945448
companion_cube
(personnally I love utf8 and you can pry it off my cold dead hands)

1562945466
companion_cube
there's no viable alternative

1562945479
fengb
As a user, I love that UTF8 exists... and as a developer I hate it for all the same reasons

1562945479
tgschultz
english is kind of the "worse is better" of languages in a lot of ways isn't it....

1562945499
companion_cube
but even among english speaking users, no one uses only ascii nowadays

1562945503
companion_cube
most people use emojis

1562945511
companion_cube
(on their phone)

1562945519
companion_cube
(or on social media)

1562945523
daurnimator
/bed

1562945535
companion_cube
and who doesn't love Σ and λ and other math symbols? :)

1562945548
tgschultz
I haven't found that to be true, but I don't engage in basically any social media and have no data for emoji usage.

1562945550
daurnimator
companion_cube: the domain name people :(

1562945552
fengb
tgschultz: I think English is the defacto because 1) ASCII is easy and 2) Hollywood has a really wide reach

1562945562
gonz_
daurnimator: Which timezone are you in?

1562945573
fengb
Even people who don't care about tech care about English because mah movies

1562945574
daurnimator
gonz_: Melbourne/Australia

1562945580
gonz_
Ah

1562945584
companion_cube
fengb: movies can be dubbed

1562945595
very-mediocre
Even if English was de facto for "wrong" reasons, there's no undo button on history without creating more problems

1562945597
gonz_
daurnimator: GN :)

1562945600
companion_cube
(although I feel like it's becoming less cool)

1562945606
daurnimator
gonz_:

1562945608
[[]]
d​aurnimator: Title "Typescript typings: First cut by roddypratt · Pull Request #157 · fengari-lua/fengari · GitHub" Shortened <

1562945671
companion_cube
daurnimator: why doesn't lua have a good type system?

1562945743
fengb
companion_cube: I mean people are more willing to learn English just to consume our media

1562945761
companion_cube
and they still won't give up their mother tongue

1562945763
fengb
Corollary to Americans learning Japanese

1562945764
tgschultz
being a net exporter of culture does have its upsides

1562945766
andrewrk
I'm going to be the conductor of this off topic train for a moment and ask this question: what did V do to attract so many people worldwide? is it because the main dev is russian and not american? is there something else the project did? am I doing something wrong? I want zig to be a global community

1562945768
companion_cube
but yeah, english has an unprecedented reach

1562945779
companion_cube
andrewrk: wild promises? :D

1562945793
andrewrk
was that really it though? surely there must have been something else

1562945794
companion_cube
V attracted people by promising unrealistic features and being super assertive

1562945798
fengb
Marketing <=> Truth

1562945800
fengb
Pick one :P

1562945814
tgschultz
I'm not sure unrealistic promises alone can account

1562945818
fengb
I think it generated a lot of controversy

1562945819
companion_cube
it's like "Go but faster and with generics and simpler and with rust's goodness"

1562945825
fengb
Which yielded free notoriety

1562945845
tgschultz
fengb: that could be part of it, yes, I was thinking something similar.

1562945851
very-mediocre
If naivete follows a normal distribution, I'd expect such a representation

1562945868
ffddr
Is there any workarounds for "warning: struct lws_http_mount demoted to opaque type" (from

1562945869
[[]]
f​fddr: Title "libwebsockets/lws-context-vhost.h at master · warmcat/libwebsockets · GitHub" Shortened <

1562945925
andrewrk
ffddr, to fix the issue, the `translate-c` feature of zig must be improved. the workaround is to manually translate the struct and put that into your codebase

1562945961
andrewrk
oh, this is a bitfield

1562946001
dimenus
can Zig do conditional compilation based on platform?

1562946004
andrewrk
yes, the workaround here will be to find out how the struct is laid out in memory and match it with a zig struct. you'll probably have to use a u32 for all the bit field fields

1562946014
dimenus
Or is it recommended that you use a compile time constant to if out code?

1562946025
dimenus
*conditional file compilation

1562946027
andrewrk
dimenus, @import("builtin"). you can see the contents of that with `zig builtin`

1562946058
andrewrk
zig has lazy analysis, so if your @import is inside an if or switch, then it can be conditionally compiled

1562946061
companion_cube
andrewrk: imho you're taking the high road of not over promising and doing things well

1562946072
companion_cube
V has consistently done the opposite, and people wanted to believe

1562946138
ffddr
andrewrk how to manual impelent the struct? I mean, I got `import of 'struct_lws_http_mount' overrides existing definition` error, probably I need to put the manual implentation to some special location?

1562946350
andrewrk
ffddr, you could name it a new name, and @ptrCast to/from the "real" one where you need to

1562946363
andrewrk
it's annoying, I know - the real fix is to improve translate-c

1562946468
ffddr
the header file have this: `    mounts: [*c]const struct_lws_http_mount```, and it fails to compile with struct_lws_http_mount = @OpaqueType :(

1562946553
andrewrk
why doesn't that compile?

1562946584
ffddr
The initial header have this: `const struct lws_http_mount *mounts;` in one of the structs

1562946603
ffddr
in the cimport.zig lws_http_mount is @OpaqueType

1562946618
ffddr
error: C pointers cannot point opaque types    mounts: [*c]const struct_lws_http_mount,

1562946659
andrewrk
ffddr, I believe that can be fixed quickly. let me take a look.

1562946695
ffddr
I can make minimal reproducible example if it will help somehow

1562946993
andrewrk
I can reproduce it

1562947038
dimenus
sigh, oh C. andrewrk, I'm walking through vulkan-tutorial and on Windows the extension names were reading past the names

1562947044
dimenus
and all of the types are [256]u8

1562947046
dimenus
-_-

1562947088
dimenus
should a string format specifier override that and look for a null?

1562947249
andrewrk
dimenus, I think it will be more clear what should happen once we have #265

1562947416
ffddr
am I right that using packed struct and u1 will probably match memory layout of C's bitfields for this particular struct?

1562947520
mq32
ffddr, i think zig gives more guarantees than C

1562947533
mq32
but afaik you are not to assume bit order of C bit fields

1562947566
andrewrk
you can assume bit order of C bit fields to be consistent when the target C ABI matches

1562947584
andrewrk
that's the third component of "target"

1562947605
fengb
C bitfields are woefully underdefined :(

1562947617
andrewrk
however packed struct with u1 is not guaranteed to match C ABI

1562947622
mq32
C is woefully underdefined

1562947626
tgschultz
^

1562947666
mq32
my collegues be like: "wait, i can not assume that $thing is given? But i do this since years and it works, it must be guaranteed!"

1562947728
companion_cube
"b-b-b-b-but C is so simple!"

1562947758
mq32
*a++ = *b++;

1562947827
fengb
I was actually going to try tackling bitfields... but then I encountered bits spanning alignments

1562947940
andrewrk
ffddr, I pushed 4e58855a to fix the "error: C pointers cannot point opaque types"

1562947972
andrewrk
just a small improvement to help your use case along, until translate-c-2 can catch up and become the official translate-c and then be further improved

1562948174
ffddr
wow, thanks!

1562948480
ffddr
while its building I am trying to figure out how unsafe "packed struct" is. If I'll use u1 for this case and will check struct size and layout once - will it be enough to be sure that its safe to use (with given particular target, compiler etc)?

1562948811
fengb
Packed struct is fine in Zig. It's just undefined behavior when linking with C

1562948853
andrewrk
fengb, it's not undefined behavior - packed structs have well-defined in-memory layout, and so does the C bit fields

1562948862
fengb
Oh yeah it's consistent and well defined. So if you mirror the structure in C it'll work

1562948896
fengb
andrewrk: I meant the C spec doesn't define how the bitfields are laid out so it's ABI specific

1562948930
andrewrk
right. it's per-ABI, so you should probably put a comptime assert in there to say "hey I  didn't test this C ABI yet, make sure the code works and then allow this target"

1562949039
ffddr
got it, thanks!

1562949203
fgenesis
re: default struct layout without ordering guarantees

1562949250
fgenesis
what about cache effects? like some fields that should be placed in a certain way so that they are on the same cache line

1562949289
fgenesis
(plus is there a comptime function that returns the platform cache line size?)

1562949337
andrewrk
fgenesis, zig's answer to that is: zig plans to make it easy to do profile-guided optimization, so letting the compiler choose the field layout will improve that

1562949357
andrewrk
however if you need tight control, that's what packed struct is for. there are still some improvements to packed struct planned to make it more robust and generally useful

1562949397
fgenesis
as in, compose a struct with smaller ones that have a forced alignment of $cacheLineSize

1562949423
fgenesis
and comptime assert that each small one actually fits in a cache line

1562949468
ffddr
can confirm, now its ` ?*const struct_lws_http_mount` and so `@cInclude(libwebsockets.h)` compiles just fine! :)

1562949484
andrewrk
such a feature is a possibility but it will probably require handling the case when the cache line size is not known. when compiling natively, cache line size can be comptime known. but when cross compiling (creating a build meant to work on multiple targets) it is runtime known

1562949496
andrewrk
there's a related issue which is function multi-versioning

1562949723
Tetralux
Fn multi-versioning?

1562950167
fgenesis
oh right, nobody is stopping from AMD releasing a 256-byte-cacheline cpu

1562950174
fgenesis
*AMD from

1562950176
fgenesis
for example

1562951610
andrewrk
ffddr, great, hope that can unblock you until the better solution is available

1562951721
ffddr
it will, thank you very much for such a fast fix!

1562954732
gonz_
Uhh, `var arena_allocator = ArenaAllocator.init(std.heap.direct_allocator)` is what you're supposed to do now, right?

1562954819
andrewrk
gonz_, yes thanks to Sauhnvor's changes DirectAllocator can be globally initialized at compile time

1562954826
andrewrk
so there is just one of them

1562954928
gonz_
Coolcool :)

1562954935
gonz_
I should update from master more often

1562955492
fgenesis
re, allocators:

1562955493
[[]]
f​genesis: Shortened <

1562955535
fgenesis
this looks like a really interesting concept

1562955591
fgenesis
keep raw pointers valid while the underlying memory is defragmented, kind of

1562955813
Tetralux
If you're problem is that you are suffering memory fragmentation, I shudder to think how much memory you are wasting due to poor architecture.

1562955837
fgenesis
well...

1562955837
MH026
is someone able to compile zig master on aarch64?

1562955857
Tetralux
fgenesis: Yeah - that's not even worth attempting to justify xD

1562955863
andrewrk
MH026, paging scientes

1562955868
Tetralux
MH026: You getting problems with xcore-max-threads by any chance?

1562955873
fgenesis
i mean any longer-running process has that problem

1562955881
MH026
last time, this was the problem

1562955883
[[]]
M​H026: Title "compile error on Arm64 · Issue #2251 · ziglang/zig · GitHub" Shortened <

1562955895
fgenesis
where longer-running i'd arbitrarily set at 3 minutes upwards

1562955900
Tetralux
fgensis: To a point - A significantly lesser point than what anything uses.

1562955903
MH026
wondering if there was a quick workaroudn that wouldnt have side-effects

1562955949
Tetralux
#2858?

1562955959
Tetralux
If so, this?

1562955960
[[]]
T​etralux: Title "cmake: allow user to select static vs dynamic LLVM by daurnimator · Pull Request #2858 · ziglang/zig · GitHub" Shortened <

1562956035
Tetralux
fgensis: If Firefox saved the rendered page and wrote it to disk after a few minutes of not looking at a tab it'd help...

1562956067
Tetralux
The latent 1.5GB or w/e it is now is insane. Firefox does NOT need that much memory.

1562956077
Tetralux
I doubt it even needs half that.

1562956087
Tetralux
Like really - wtf is it doing?

1562956161
gonz_
I just blindly assume that FF (& Chrome) are both like "Oh, you have RAM left, I'll have some of that"

1562956176
gonz_
I had a gander at Task Manager today and saw that FF had grabbed 6GB

1562956191
Tetralux
Oh yeah - that sounds perfectly reasonable /s

1562956199
GrooveStomp
Hello

1562956214
Tetralux
I'd laugh if it had something to do with JS...

1562956220
Tetralux
Groovestomp: o/

1562956286
fgenesis
Tetralux: actually CSS evaluation can be as costly as JS nowadays

1562956298
fgenesis
if you consider that html5+CSS is already turing complete

1562956315
gonz_
It's taking 4GB right now with just my zig tabgroup open

1562956333
gonz_
I have zero idea what it could even be caching to grab that much

1562956343
emekankurumeh[m]
that's why I switched back to chrome

1562956346
gonz_
13 tabs

1562956355
gonz_
Chrome is as bad but without good extensions

1562956358
fgenesis
i use noscript excessively and yet it racks up memory quickly, and some sites are VERY slow even though js is totally off

1562956359
gonz_
There are no good browsers

1562956403
gonz_
Like I said, I want to believe that maybe it's grabbing memory because it can, through some kind of negotiation with Windows. It wasn't like this when I had less memory.

1562956418
gonz_
I have 32GB now so I can only assume it's at least a bit related.

1562956433
fgenesis
yeah right? FF 3.6 on a 1 GB machine was totally fine

1562956464
fgenesis
two browsers with a single tab open on a x32/1 GB ram machine nowdays is completely impossible

1562956475
Tetralux
I have 32GB too.

1562956477
Tetralux
I should point out

1562956480
fgenesis
(swap disabled ofc)

1562956491
Tetralux
That I have auto-tab-discarding extensions in all my browsers...

1562956496
Tetralux
Including FF.

1562956499
Tetralux
Still 3GB.

1562956505
Tetralux
I think I've seen it taking 8 before.

1562956510
Tetralux
(..hence the ext.)

1562956532
fgenesis
hrm. 30 tabs open here, some extensions, FF 59 ESR, and it's at 1.6 GB ram used with a process uptime of ~2 weeks

1562956537
fgenesis
you're doing something wrong :P

1562956543
Tetralux
Also RE CSS - if that's taking more than 100MB of memory, everyone should be fired.

1562956557
Tetralux
That's beyond ridiculous.

1562956593
fgenesis
actually 40 tabs, some of them with js, most form different sites

1562956597
Tetralux
I have over 100.

1562956598
fgenesis
so i really dunno

1562956614
emekankurumeh[m]
?

1562956618
emekankurumeh[m]
100 tabs?

1562956631
Tetralux
Yup :)

1562956654
fgenesis
tabsplosion

1562956661
Tetralux
That's a low estimate.

1562956806
Tetralux
I swear to god, do NOT make me write a browser! x'D

1562956819
halosghost
Tetralux: please write me a browser

1562956838
halosghost
requirments: terminal-only, graphics via sixel, no scripting support required

1562956858
Tetralux
Alright - let's ditch JS, CSS, HTML... hmmm. What else can we get rid of.

1562956868
Tetralux
Obviously replace it with native x64 code.

1562956872
Tetralux
Oh - get rid of the DOM too.

1562956899
MH026
just make a browser with electron, ez

1562956922
MH026
:^)

1562956923
Tetralux
Just

1562956929
fgenesis
Tetralux:

1562956930
[[]]
f​genesis: Title "Codenet - IndividualComputers" Shortened <

1562956932
fengb
Someone needs to write a browser in wasm

1562956939
halosghost
gross

1562956960
Tetralux
I'd rather have the client browser tell the server what it's arch is and have the browser produce native code for it to run or something.

1562956977
fgenesis
the best implementation is that with zero overhead. but i don't think that "put network packet into buffer and jump into it" is a good, secure solution nowadays :P

1562957021
Tetralux
This is true. But there's probably a way to handle that reasonable.

1562957022
fgenesis
actually webasm is a good idea i think. or something like SPIR-V if you need compute power

1562957023
Tetralux
reasonably*

1562957037
fgenesis
something to transpile to hardware quickly

1562957050
Tetralux
My problem with webasm is that it's not what the hardware is.

1562957056
Tetralux
I don't want a VM.

1562957058
Tetralux
I want code.

1562957059
Tetralux
That runs.

1562957061
Tetralux
Fast.

1562957061
fengb
wasm isn't intended to be a VM

1562957066
fgenesis
so llvm bytecode it is, then

1562957069
fengb
But it's possible to transpile wasm into native

1562957106
fgenesis
as long as dynamic typing is out of the equation lowering to hardware should be simple enough

1562957112
Tetralux
It is. It's also possible to just have the source code on the server [...]

1562957116
Tetralux
And when a client asks for it

1562957120
Tetralux
It tells it what arch it is

1562957124
Tetralux
The server compiles it

1562957129
Tetralux
And hands it native code.

1562957134
fgenesis
DDoS made easy, i see

1562957147
fengb
Staring at wasm for awhile, it's sorta like high level LLVM (not really but it matches closer than actual hardware)

1562957148
companion_cube
why is that simpler than downloading the wasm and compiling it locally?

1562957158
companion_cube
(which also helps using native instructions, in theory)

1562957188
Tetralux
I'm not sure what you mean by "which also helps using native instrs"

1562957189
fgenesis
server will be like "what, you're big endian? haha lol"

1562957195
Tetralux
HAHA

1562957206
Tetralux
What safeguards does wasm have that native would not?

1562957224
Tetralux
Or put differently

1562957236
Tetralux
How does it know what to prevent you from doing?

1562957236
companion_cube
Tetralux: well same as using `-march=native` instead of generic x86_64

1562957284
fengb
wasm is specced for sandbox

1562957292
Tetralux
It's better because the server is a powerful computer that needs to compile the code for every client arch.

1562957300
Tetralux
So it could cache it.

1562957317
Tetralux
There's no point having the client recompile something that literaelly every client is gonna need.

1562957331
Tetralux
The only issue I have is how to effectively sandbox it.

1562957355
fgenesis
so it's compile+cache on the server if it wants to / is able to, and otherwise compile on client

1562957373
fgenesis
that would be good

1562957382
Tetralux
The "compile on client" part is unnecessary I think.

1562957392
Tetralux
Just download it from the server - the server can RAM cache it.

1562957402
fgenesis
say that again when your shiny new RISC-V computer arrives

1562957409
fgenesis
and no server ever supports it

1562957439
Tetralux
We already do.

1562957449
Tetralux
Zig, for instance, can already target RISC-V.

1562957460
fgenesis
ok, whatever, i mean any weird architecture

1562957469
fgenesis
something not widely supported

1562957485
fgenesis
like a browser on an AVR microcontroller or some weird shit

1562957503
Tetralux
If LLVM supports RISC-V -- which is not widely supported -- then why not add another one when the same exact thing happens? xD

1562957504
fgenesis
ok, that thing is harvard, forget about the "transpile code" thing, but you know what i mean :P

1562957538
andrewrk
btw, it looks like RISC-V is getting promoted from an experimental target to an installed-by-default target in LLVM 9

1562957562
Tetralux
Personally I want to get my hands on a RISC-V PC that's actually powerful and see how useful it is.

1562957564
andrewrk
which means it goes from tier 4 to tier 3 support in zig

1562957572
Tetralux
But that seems a way out yet.

1562957584
Tetralux
Also that seems good :)

1562957681
Tetralux
Oh right - That was one though I had. Perhaps you could have the code from the server just be -- essentially inserted as the body of a function. And then the code can only call code that's within that framework.

1562957695
Tetralux
.. which could have specially wired syscalls that don't let you just do anything.

1562957751
Tetralux
You have some skeleton code that the server's code gets inserted into. A harness, if you will.

1562957849
Tetralux
I'm not entirely sure how you'd make the harness work to prevent it from doing arbitrary things, but I haven't researched into that, so.

1562957885
fengb
By creating a sandboxed vm >_>

1562957936
Tetralux
:^)

1562957944
Tetralux
For the sake of exploration, let's ignore that one for now.

1562957977
Tetralux
And because that's not solving the problem of running native code - because it's a VM. x')

1562957982
Tetralux
Though I take your point.

1562958010
Tetralux
But I'd like to actually think about it before admitting defeat lol

1562963101
hryx
andrewrk: regarding last night's saftey checks discussion: when self-hosted is feature complete, would it make sense to remove safety checks from stage1? In particular if we add some more complex safety checks

1562963115
andrewrk
yes

1562963117
hryx
and I guess at that point, the question becomes would stage1 even need Debug

1562963122
hryx
cool

1562963129
andrewrk
I think the question would be, wolud it even need Release

1562963141
hryx
even better

1562963159
Tetralux
So long as I can build the compiler in debug and release modes... :)

1562963173
hryx
I'm toying with the "undefined values table" some more to see if it holds water

1562963207
andrewrk
once we're shipping stage2, the only point of stage1 is to build stage2

1562963243
Tetralux
Shoud be interesting :p

1562963347
andrewrk
emekankurumeh[m], after #2868 is merged we can delete libc detection for mingw

1562963951
emekankurumeh[m]
would that work with compiling stage 1?

1562964361
andrewrk
not sure what you're asking

1562966273
GrooveStomp
I just found out about Ziglang very recently after integrating libsoundio into a personal project.  I like it, it speaks exactly to my interests.

1562966301
GrooveStomp
Just now while reading through the docs I saw that it supports tagged unions with switches.  Perfect. I'm sold. :-)

1562966384
emekankurumeh[m]
stage 1 requires linking to libc using stage 0

1562966400
emekankurumeh[m]
nvm

1562966461
emekankurumeh[m]
if we use a bundled libc then the executables will "static" as in they won't depend on any mingw-w64 runtime dlls

1562966469
emekankurumeh[m]
that's really nice

1562966793
andrewrk
emekankurumeh[m], can you test the windows-libc branch in your build?

1562966828
emekankurumeh[m]
sure

1562966837
andrewrk
I changed the default windows C ABI to be gnu

1562966842
andrewrk
since we have a libc for it

1562966922
andrewrk
if it works fine for you I'm going to delete the mingw native libc detection code

1562966961
andrewrk
ooh, you know what, even better. the default windows C ABI can be msvc when not linking libc, but gnu when linking libc

1562967123
emekankurumeh[m]
my only gripe is now installs are going to take even longer

1562967148
emekankurumeh[m]
is there a way to tell cmake to only install zig and the std dir?

1562967211
andrewrk
you're talking about waiting for cmake to print the entire goddamn list of installation files right?

1562967230
andrewrk
it's sad, the time spent is waiting for it to print to the terminal, not even the actual file system operations

1562967256
emekankurumeh[m]
yes

1562967281
Tetralux
Does it print the "Installing" lines to stdout, and the "updating" to stderr?

1562967308
andrewrk
I think it's starting to make more and more sense to support testing without installing. however I'm concerned this will start introducing bugs where we forget to install files and the tarballs we ship will be missing files

1562967310
emekankurumeh[m]
i usually pipe the output to /dev/null, but that makes it hard to debug build errors

1562967323
emekankurumeh[m]
it all goes to stdout

1562967364
Tetralux
Maybe you could pipe to grep for "Installing"?

1562967383
Tetralux
So it would only show those lines.

1562967392
andrewrk
I have an even better idea

1562967400
andrewrk
move installing the files to stage2

1562967427
Tetralux
Doesn't the Zig binary need those to work?

1562967445
Tetralux
I seem to remember that I accidentally tried build-exe without doing the install step once and it failed.

1562967458
emekankurumeh[m]
andrewrk: do we link to the system libc in the system libc branch or the embedded one?

1562967461
andrewrk
zig0 builds libuserland which gets linked into zig. then the files are installed

1562967498
andrewrk
so `zig build install-the-files` will work fine

1562967570
andrewrk
emekankurumeh[m], sorry i don't understand, can you elaborate?

1562967579
emekankurumeh[m]
does zig have dead code elimination for c files linked?

1562967611
andrewrk
the linker can garbage collect unused sections

1562967631
andrewrk
most code is compiled all into the .text section so if any functions are used then nothing can be garbage collected

1562967665
andrewrk
zig's libcompiler_rt.a and zig's libc.a are compiled with -ffunction-sections which puts each function into its own section

1562967774
emekankurumeh[m]
in the windows-libc branch, when building stage 1 (zig1) do we link to the system libc like before, or does zig use the bundled libc?

1562967846
andrewrk
in the windows-libc branch, for the x86_64-windows-gnu target (which now the default target on windows), when linking against libc, zig uses the bundled libc, and does not touch any system files

1562967899
andrewrk
which is why non-windows users can now build C libraries targeting windows with zig

1562967915
emekankurumeh[m]
finally switched to github sponsors

1562967945
andrewrk
thanks!

1562968165
emekankurumeh[m]
are you sure that the bundled libc is being used?

1562968214
andrewrk
emekankurumeh[m], to convince yourself, try deleting the g->libc != nullptr branch in add_mingw_link_args

1562968275
andrewrk
try this command: ./zig build-exe --c-source hello.c -target x86_64-windows-gnu --library c  --verbose-cc

1562968284
andrewrk
(the --verbose-cc is just to get progress)

1562968298
andrewrk
uh and you don't need the -target

1562968320
andrewrk
hello.c is

1562968320
[[]]
a​ndrewrk: Shortened <

1562968623
andrewrk
moving the install files to stage2 is going to be way cleaner

1562968666
andrewrk
we can also implement globbing (correctly! where it will detect new files!) in zig build and then delete thousands of pointless lines

1562968761
emekankurumeh[m]
no problem building zig, stage0 and stage1

1562968762
hryx
ugh, beautiful

1562968826
andrewrk
emekankurumeh[m], no problem building and running hello-world.c?

1562968892
emekankurumeh[m]
no

1562968905
andrewrk
but you had to wait about 60 seconds for it to build libc right?

1562968921
emekankurumeh[m]
yes

1562968928
andrewrk
ok great sounds like everything "just works"

1562968943
emekankurumeh[m]
verbose-cc showed a lot of compiler invocations

1562968955
andrewrk
yep, ok great so that's working in your mingw environment

1562968966
andrewrk
this is going into master branch now

1562969005
emekankurumeh[m]
i'm kinda of going to be sad to see some of that code go

1562969008
andrewrk
I know

1562969027
andrewrk
it will rest in peace next to Jimmi's non-recursive recursive-descent parser

1562969132
emekankurumeh[m]
regarding the `zig update` command proposed perhaps we could go a route similar to rustup and allow for installing libc source for a given target

1562969157
emekankurumeh[m]
to reduce tarball size

1562969222
andrewrk
that sounds a lot like package management

1562969287
andrewrk
emekankurumeh[m], btw your mingw linker changes were super helpful in this branch

1562969308
andrewrk
your code in link.cpp was a treasure map for how to navigate the mingw-w64 sources

1562969342
andrewrk
also the person `wbs` in #mingw-w64 chat was incredibly helpful

1562969405
emekankurumeh[m]
np, i still have some more patches to get stage2 compiling on mingw-w64 that i'll have to open a pr for

1562969479
andrewrk
oh stage2 is broken in master btw. I let it regress until coroutine rewrite is done

1562969498
emekankurumeh[m]
before you merge that branch, i have a patch to submit

1562969553
andrewrk
oops

1562969566
andrewrk
what's the patch?

1562969586
andrewrk
make it against master now

1562969602
emekankurumeh[m]
nvm i had a typo somewhere

1562969992
emekankurumeh[m]
these lines here are to work around __stack_chk_fail and __stack_chk_guard no being found depsite the fact that they are exporteds

1562969993
[[]]
e​mekankurumeh[m]: Title "zig/CMakeLists.txt at master · ziglang/zig · GitHub" Shortened <

1562970008
andrewrk
oh!

1562970021
emekankurumeh[m]
i was going to try to fix that workaround

1562970023
andrewrk
zig is providing those now

1562970044
emekankurumeh[m]
without that i get mounds of linker errors

1562970060
andrewrk
daurnimator, can I request disabling the "shortened" feature of [[]] ?

1562970078
andrewrk
when do you get the linker errors?

1562970118
fgenesis
re: [[]] shortening: at least make it a normal message, i get pinged all the time

1562970140
andrewrk
oh, yeah that's actually pretty important, let's not be pinging people

1562970184
andrewrk
if that's not possible, no problem, let's not have the bot then

1562970208
tghume
just checking: is there currently any way to construct a struct type with members determined by code? Like take one struct type and create another struct type with only the fields of type i32.

1562970230
tghume
as far as I can tell this isn't currently possible, just want to make sure I'm not missing something

1562970247
andrewrk
tghume, it's not possible and the relevant issue is

1562970249
[[]]
a​ndrewrk: Title "builtin function @reify to create a type from a TypeInfo instance · Issue #383 · ziglang/zig · GitHub" Shortened <

1562970309
tghume
thanks

1562970774
andrewrk
emekankurumeh[m], also what linker errors? I think this can be solved in a clean way

1562970822
emekankurumeh[m]
undefined references to __stack_chk_fail and __stack_chk_guard

1562970923
andrewrk
this is when linking what?

1562970938
emekankurumeh[m]
stage1

1562970954
emekankurumeh[m]
libuserland specifically

1562971048
andrewrk
we pass --bundle-compiler-rt when making libuserland, which should supply both of those

1562971067
emekankurumeh[m]
thats what's confusing me

1562971122
andrewrk


1562971123
[[]]
a​ndrewrk: Title "zig/compiler_rt.zig at master · ziglang/zig · GitHub" Shortened <

1562973048
emekankurumeh[m]
nvm i think something is wrong on my end

1562973162
emekankurumeh[m]
andrewrk: nvm about those patches it seems you implemented all that stuff in the windows-libc branch

1562973273
andrewrk
cool

1562973281
andrewrk
oh were you a couple commits behind?

1562973325
emekankurumeh[m]
no compiling on mingw-w64 is broken right now, but because i never clean my build dir it was working

