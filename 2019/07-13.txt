1562988770
belgin
why hello there

1562988778
belgin
does zig work without llvm?

1562988848
diltsman
Zig uses LLVM as the backend to do optimization and code generation.

1562988928
belgin
are you planning on implementing zig's own backend?

1562988991
diltsman
I doubt that there are plans for that as that is a huge undertaking to make one that generates good code.   andrewrk would know better than I do.

1562989034
hryx
hi belgin, welcome. right now zig depends on LLVM 100%. zig may add additional backends that LLVM doesn't have in the future -- that has been discussed a bit

1562989039
diltsman
Besides, using LLVM as a backend means that code generation is supported for any target that LLVM has.

1562989111
belgin
ok thanks

1562989274
hryx
belgin: if you have a use case for not using LLVM, of course please do share -- the community is often very interested in addressing less common cases

1562989523
laaron
hi, zig not use system libc on my archlinux default. I found argument `--libc [file]`, but what is the file format?

1562989968
emekankurumeh[m]
you can use `zig libc > libc.txt` to get a libc file

1562990146
belgin
hryx, llvm is slow

1562990356
belgin
i guess it's too early to consider compilation speed at this point, but i suggest it's a nice thing to keep in mind

1562990389
hryx
belgin: slow compared to what?

1562990409
hryx
additionally LLVM supports a large number of targets, which is an important goal for zig

1562990493
belgin
i was compiling a small zig program and it took like 2 seconds on debug, even with the cache thingy

1562990518
belgin
but maybe a 1mloc program will also take 2 seconds, in which case it's ok

1562990638
hryx
fast debug builds are a goal of zig's. do you have a link to your program (and maybe your hardware)?

1562990693
belgin
that's cool! let me see if i can reproduce it

1562990721
belgin
oh yeah, i've been meaning to ask, do i need visual studio to run zig on windows?

1562990847
hryx
good question - I think emekankurumeh[m] can help answer that. there has been a lot of work this week on mingw-w64 (I'm not totally sure if that would affect it)

1562990909
laaron
thanks, i got a syslibc.cfg, but when use `--libc  syslibc.cfg`, seems no affect, the executable binary still a static linked.

1562991107
belgin
laaron, have you tried putting the .so of the libc in there?

1562991132
andrewrk
laaron, what is your system libc?

1562991186
laaron
glibc, install via package manager

1562991208
andrewrk
belgin, no you do not need msvc to run zig on windows

1562991221
belgin
thanks

1562991310
laaron
belgin, no custom libc.so, it in default search path /usr/lib/libc.so, i think

1562991486
belgin
hryx, i can't reproduce it, sorry for wasting your time

1562991498
belgin
it's under a second now

1562991523
andrewrk
laaron, can you test something for me? `llc --version | grep Default`

1562991548
andrewrk
llc would be provided from an llvm package

1562991567
laaron
andrewrk,  result: Default target: x86_64-pc-linux-gnu

1562991599
andrewrk
but now I wonder if arch has patched llvm to make this so, or if a source build would do the same thing

1562991655
andrewrk
laaron, and `zig targets | grep native` ?

1562991691
laaron
x86_64 (native)

1562991691
laaron
linux (native)

1562991691
laaron
gnu (native)

1562991691
laaron
2.17 (native)

1562991691
laaron
x86_64-linux-gnu (native)

1562991712
andrewrk
ok zig is correctly identifying glibc as your target. you must be saying that 2.17 is incorrect, yes?

1562991745
andrewrk
hmm no you said that the binary is statically linked. I don't understand how this would be

1562991761
andrewrk
oh, are you linking against libc? zig does not link against libc by default

1562991784
andrewrk
can I see your build.zig or your zig command line?

1562991878
laaron
when zig will link against libc,  this maybe the problem, my code is simple empty, `const std = @import("std"); pub fn main() void {}`

1562991901
andrewrk
laaron, this program has no dependency on libc

1562991927
andrewrk
if you wish to force it, you may do so with `--library c`

1562992064
laaron
i see, thanks. another error when use `--library c`

1562992073
laaron
full command: `zig build-exe --libc ./syslibc.cfg -dynamic --verbose-link --verbose-cc --cache off --library c a.zig`

1562992089
laaron
lld: error: unable to find library -lgcc

1562992137
hryx
belgin: hey no worries at all

1562992434
andrewrk
laaron, the --libc advice was incorrect

1562992461
belgin
hey, andrewrk, i just wanted to say your talk at the recurse center has been very inspirational for me, thank you for opening my eyes

1562992464
andrewrk
sorry, I mean, you do not need --libc

1562992483
andrewrk
also don't pass -dynamic or --cache off

1562992491
andrewrk
why are you overriding all these defaults? the defaults are good

1562992545
andrewrk
`zig build-exe a.zig` is correct

1562992565
andrewrk
if you want it to be linked against libc for some reason (why?), `zig build-exe a.zig --library c`

1562992572
andrewrk
thanks belgin

1562992575
andrewrk
there is a second talk

1562992579
andrewrk
if you're interested

1562992584
belgin
i know, i haven't seen that one yet

1562992657
laaron
yeap, works.  only `--libc` and `--library c` conflict

1562992805
laaron
so i think it's mean `--libc` for custom libc, `--library c-or-other` for system libraries, right?

1562992881
andrewrk
correct

1562995602
wilsonk__
andrewrk: how do you emit .ll code again?  -mllvm -emit-llvm doesn't seem to work

1562995641
wilsonk__
hmm, or maybe you aren't on anymore...kinda late Friday over there ;)

1562995823
daurnimator
andrewrk: hmm? why not the shortening feature? (it's in the same message as the title, so its not like it's an extra message)

1562995823
wilsonk__
oh, nvm I suppose -emit-llvm-ir is the correct option. my bad

1562995832
daurnimator
fgenesis: why do you get pinged?

1562999933
hryx
the URL shortening is both unexpected and perhaps a minor privacy violation: it sends your text to a third party service (is.gd) automatically without consent. I think users on chat could be rightly surprised by that

1563000160
hryx
as for "pinging" I think the bot makes some kind of announcement type post. a screenshot of an iOS client that might demonstrate:

1563000161
[[]]
h​ryx: Title "Dropbox - 2019-07-12 23.17.15.jpg - Simplify your life" Shortened <

1563000220
daurnimator
hryx: it's a "Notice" (rather than a privmsg), as they are usually

1563000235
daurnimator
hryx: also logs for this channel are public :P

1563000268
hryx
I know. to me the behavior was still surprising

1563018958
andersfr
how do I make a pull request? I have my changes committed in a local branch but no permissions to submit anything to github...

1563019475
emekankurumeh[m]
first you make a fork of the zig repo

1563019787
andersfr
Having to fork to do a pull request seems retarded. But apparently that is the only thing GitHub supports :(

1563021103
ffddr


1563021104
[[]]
f​fddr: Title "C interoperability: zero-init and partial initialization for imported C structs? · Issue #1031 · ziglang/zig · GitHub" Shortened <

1563021245
ffddr
oh, sorry, wrong error, actual one is `error: expected type '[]u8', found '*.cimport:1:20.struct_lws_context_creation_info'`

1563021549
mikdusan
ffddr: maybe `mem.toBytes()` ?

1563021668
ffddr
mikdusan it looks like toBytes returns a copy of the input, not the pointer valid for memset

1563021717
ffddr
hm, but `asBytes` is probably the thing I am looking for!

1563021795
ffddr
yes, it looks like it works, thanks again! `std.mem.set(u8, std.mem.asBytes(&info), 0);`

1563023196
emekankurumeh[m]
perhaps we should change men.set to take a var parameter?

1563024874
ffddr
Is there any way to zero initialize struct on comptime?

1563025126
via
i feel like i'm going crazy, but is there something very wrong about what i'm doing here?

1563025183
via
stepping through with gdb, i can see the prints doing std.mem.copy's of the bytes, and the outstream pos gets incremented, the outstream's slice len gets incremented, but nothing gets put into the slice but nulls

1563025336
marijnfs
maybe resetting the stream resets everything?

1563025342
marijnfs
just guessing

1563025387
via
it just sets pos=0, but it doesn't matter, i do the printing after the reset

1563025443
via
i mean by the time it gets to the warn()ing of the slice, its just null bytes. even stepping through the print() function, once its done with output(), the slice bytes are null (but len incremented)

1563025457
mikdusan
`ret.buf = undefined` then what does `ret.buf[0..]` mean?

1563025502
ffddr
Came up to this

1563025502
[[]]
f​fddr: Title "const TypeId = @import(\"builtin\").TypeId; fn init_zeroes(comptime T: type) T - Pastebin.com" Shortened <

1563025563
Tetralux_
via: ret.buf is undefined isn't it?

1563025591
via
but its an array, its just the bytes that are undefined, right?

1563025678
Tetralux
via: Ah yeah.

1563025698
via
i suppose i'm also asking, is this the right way to instantiate that struct -- buf is allocated as part of the struct on the stack of the caller to init(), right?

1563025717
via
it has a stack-looking address in gdb

1563025753
Tetralux
Yeah - [N]T arrays are inline to the struct.

1563025768
Tetralux
So @sizeOf(Console) should be > 1024.

1563025787
ffddr
maybe there is some better way to get zero initialzied struct in comptime?

1563025815
Tetralux
ffddr: Give all fields a default value of zero and then use const x = T{};

1563025837
Tetralux
i.e: Same as C++... :")

1563025844
ffddr
Tetralux unfortunately its C struct came from .h file, some of them are quite large

1563025878
Tetralux
If you use an editor with multiple cursors, you could match the ':' for each field and type it that way.

1563025882
Tetralux
Or, you can memset.

1563025897
Tetralux
You can't memset a Zig struct apparently because of hidden safety stuff

1563025907
Tetralux
But you can an  extern struct I believe

1563025908
via
i'm not really sure that the undefined assignments are the issue here -- i was using more or less the same process with a buf and SliceOutStream successfully before moving it into a struct

1563025917
ffddr
Hm, could I? I tried but it always crashed the compiler - I guess its because I cant use pointers on comptime

1563025951
Tetralux
via: Yeah - I don't think it should be.

1563025970
Tetralux
via: But it's not clear to me what the problem is from a cursory glance.

1563026007
via
i'll gist some gdb output to make the weirdness more clear

1563026044
andrewrk
andersfr, you can also send patches to the mailing list. the "retard" comment is not appreciated

1563026067
husho
can zig compiler compile c++ code?

1563026086
Tetralux
husho: With libclang IIRC.

1563026104
andrewrk
husho, I have not put testing into compiling C++ code but it should work

1563026126
Tetralux
Oh my bad - read that as "how can" xD

1563026129
andrewrk
eventually we plan to support it for self-hosting:

1563026130
[[]]
a​ndrewrk: Title "The Grand Bootstrapping Plan · Issue #853 · ziglang/zig · GitHub" Shortened <

1563026226
via
okay, so clearly something weird is going on with my second print:

1563026227
[[]]
v​ia: Title "gist:ff9b7e39b183feb41e731150fb5b6b63 · GitHub" Shortened <

1563026236
andersfr
@andrewrk: sorry about the bad language. I forked and created the PR as was suggested

1563026253
andrewrk
thanks!

1563026367
andersfr
btw is there any way to detect availability of SSE instructions?

1563026486
via
it looks to me like my slice is getting clobbered somewhere in SliceOutStream

1563026487
[[]]
v​ia: Title "gist:15ebaf533a677cb4058da45d63cedbf8 · GitHub" Shortened <

1563026905
mikdusan
via: i think issue is that init uses a stack var for console and outstream stores a slice (pointer) to that buffer

1563027047
via
i was assuming that the struct (and thus buf?) was allocated on the caller's stack frame, though if not that would make sense

1563027088
via
whats the best way to do what i'm doing? using an allocator doesn't feel like it should be necessary, i want it stack allocated

1563027176
via
that also seems like a pretty easy thing to do without realizing it if so, it'd be great if the compiler would catch that, thats very unsafe

1563027336
mikdusan
i can't answer for best; need to find a place after init() to initialize outstream. 2-stage init. or if your process() is a 1-time gig, put it before outstream.reset()

1563027337
andrewrk
andersfr, good question. there is currently not but that is now planned

1563027385
andrewrk
andersfr, in general @import("builtin") has all the information about the target, and it's missing that information, but should be added

1563027394
andrewrk
you can see the contents with `zig builtin`

1563027431
andrewrk
I'll make an issue

1563027462
mikdusan
via: maybe something like this.

1563027462
[[]]
m​ikdusan: Title "via.zig · GitHub" Shortened <

1563027472
andersfr
I think it should be possible to determine the level of support as well. Pretty sure LLVM exposes this in its target information

1563027609
andrewrk
what does that mean, level of support?

1563027654
via
mikdusan: i guess i'm confused as to why that would be different -- the space for both buf and the stream are allocated as part of the struct. init() for the stream isn't actually allocating anything right?

1563027739
andrewrk
andersfr, here's an issue for this:

1563027740
[[]]
a​ndrewrk: Title "ability to specify target CPU features · Issue #2883 · ziglang/zig · GitHub" Shortened <

1563027894
andersfr
andrewrk looks good

1563027947
mikdusan
via: SliceOutStream stores a pointer to `init()` stack frame `ret.buf`; then it is returned, and the frame vanishes. yet outstream still has that pointer.

1563028004
via
is ret.buf not the Console struct's buf?

1563028162
mikdusan
via: i'll add comment to your gist in a moment...

1563028280
via
i suppose, when you slicify an array, does that do a stack frame allocation of the slice's metadata? and if so, i'm wondering if there's a way to do this in init(). especially since there's room for the slice in the stream in my struct

1563028290
via
i imagine i could directly assign outstream.slice, but that feels super hacky

1563028753
mikdusan
via: i added comment to your orig gist. that's my understanding of the issue.

1563028857
via
yeah, the reason i am structuring it this way in the first place is because of the lack of that feature you're referring to for the time being

1563028864
mikdusan
yup!

1563028971
via
but still, there's got to be a way to do this with just my Console init() function, without having to do the slice creation in main or process

1563029080
mikdusan
i guess you could change the nature of init() and pass it a pointer. so callsite does `var console: Console = undefined; console.init();` as now it has a pointer to its storage.

1563029194
via
is there any plan for the compiler to be aware of (and error for) returning pointers to stuff allocated on the stack like that?

1563029227
mikdusan
i think there is an issue discussing that. let me see if i can find it

1563029322
mikdusan
via: this one is about having access to result-location (eg. from inside init()):

1563029324
[[]]
m​ikdusan: Title "result location: ability to refer to the return result location before the `return` statement · Issue #2765 · ziglang/zig · GitHub" Shortened <

1563029806
via
mikdusan: so if thats the issue, then why wouldn't this work?

1563029807
[[]]
v​ia: Title "gist:5601df999e08953ab65d597db4cb792f · GitHub" Shortened <

1563029822
via
e.g. store a slice in the struct too

1563029885
mikdusan
because no matter what, `ret` and field `ret.buf` is on init() stack frame.

1563029973
via
but if i understand the issues, its all about doing copy elision instead of what i assume is currently a memcpy? if not, i don't understand how pretty much half the std library works, its all about returning structs from init

1563030030
via
init isn't returning a pointer to a struct, its returning something that i assume gets copied into the caller's stack allocated struct

1563030115
mikdusan
most of std library init()'s do a `return SomeType { ... };` directly and this is copy-elided. but putting it in a stack var first, then returning that var, you end up copying from stack-var to call-site storage.

1563030144
via
yeah, but point is its still copied

1563030157
via
so i get that its not optimal, but it should still work

1563030204
andrewrk
also note that it probably gets elided in optimized builds, but zig can't guarantee that according to the semantics (until that linked issue is solved)

1563030306
mikdusan
i'm piss poor at explaining things; but maybe this helps. this would be bad: `var buf: [1024]u8 = undefined; var p = &buf; return p;` because we let the address of stack storage escape

1563030321
mikdusan
and that's essentially what is happening with your code

1563030327
via
sure, but in that gist i pasted, "p" is in the struct

1563030374
via
and i'm returning the struct, which should get copied in entirety (buf, _buf, outstream, byte for byte) right?

1563030441
via
oh, i guess _buf would be pointing to the stack allocated one, and not the destination one -_-

1563030446
mikdusan
outstream.slice.ptr will be copied. and so will _buf.ptr

1563030453
mikdusan
right

1563030497
mikdusan
this kind of issue only comes up with you have a self-referential struct

1563030510
mikdusan
*when

1563030657
via
well, bummer. thank you

1563033583
ffddr
what does this `error: cast discards const qualifier` error means in the context of function pointer cast? I got it from `@ptrCast([*c]lws_callback_function, callback_http);`.

1563033763
andrewrk
don't cast something to a C pointer

1563033770
andrewrk
there's never a reason to do that

1563033828
ffddr
I need to pass a function pointer to a struct with `callback: [*c]lws_callback_function`

1563033869
andrewrk


1563033870
[[]]
a​ndrewrk: Title "Documentation - The Zig Programming Language" Shortened <

1563033943
andrewrk
what error do you get when you directly pass `callback_http`?

1563033977
ffddr
error: expected type '[*c]extern fn(?*.cimport:1:20.struct_lws, .cimport:1:20.enum_lws_callback_reasons, ?*c_void, ?*c_void, usize) c_int', found 'fn(?*.cimport:1:20.struct_lws, .cimport:1:20.enum_lws_callback_reasons, ?*c_void, ?*c_void, usize) c_int'    p.callback = callback_http;

1563034011
andrewrk
you're missing `extern` on your callback function

1563034060
ffddr
`error: expected type '[*c]extern fn(?*.cimport:1:20.struct_lws, .cimport:1:20.enum_lws_callback_reasons, ?*c_void, ?*c_void, usize) c_int', found 'extern fn(?*.cimport:1:20.struct_lws, .cimport:1:20.enum_lws_callback_reasons, ?*c_void, ?*c_void, usize) c_int'`

1563034115
ffddr
`p.callback = &@ptrCast(lws_callback_function, callback_http);` <- this compiles, but looks like its pointer of a pointer :(

1563034199
ffddr
`p.callback = @intToPtr([*c]lws_callback_function, @ptrToInt(callback_http));` works (and callback is actually callable), but it doesnt work on compiletime (not sure that it could)

1563034231
andrewrk
[*c]extern fn (...) is a double pointer, which seems like something got translated incorrectly

1563034321
andrewrk
do you know where this type is declared in the .h file?

1563034328
andrewrk
I'm trying to find it in

1563034329
[[]]
a​ndrewrk: Title "GitHub - warmcat/libwebsockets: canonical libwebsockets.org websocket library" Shortened <

1563034389
andrewrk
found it

1563034404
andrewrk
what type is `p` in your example

1563034464
ffddr
` var p: lws_protocols`

1563034643
andrewrk


1563034644
[[]]
a​ndrewrk: Shortened <

1563034659
andrewrk
I need to double check what this C code even means, is that a double pointer or not? I'm not sure

1563034675
andrewrk
you can see the simpler struct field got translated as expected

1563034758
ffddr
I am not sure about everything in C to be honest, but I thought its a single function pointer.

1563034798
andrewrk
a workaround for this, is to indeed use @ptrCast but you still do not need C pointers

1563034843
ffddr
hm, from the C usage code:

1563034844
[[]]
f​fddr: Title "ChatChannel/server.c at 1636d24242acaecbbca15e7f2fc583f698b11b42 · apaulin/ChatChannel · GitHub" Shortened <

1563034866
ffddr
like, funciton name is a first pointer and they use it with &

1563034923
andrewrk
workaround: p.callback_http = @ptrCast(*extern fn(?*struct_lws, enum_lws_callback_reasons, ?*c_void, ?*c_void, usize) c_int, callback_http);

1563034971
ffddr
`error: cast discards const qualifier` :(

1563035019
andrewrk
here's an issue:

1563035020
[[]]
a​ndrewrk: Title "incorrectly translated double function pointer · Issue #2887 · ziglang/zig · GitHub" Shortened <

1563035024
andrewrk
workaround: p.callback_http = @ptrCast(*const extern fn(?*struct_lws, enum_lws_callback_reasons, ?*c_void, ?*c_void, usize) c_int, callback_http);

1563035093
ffddr
still that const qualifier error

1563035353
andrewrk
oh, right, the problem is that the destination type is incorrect

1563035361
andrewrk
this needs to be fixed in translate-c

1563035408
ffddr


1563035409
[[]]
f​fddr: Title "libwebsockets/vhost.c at 3c1eb97537b41d615f52bc2965c54df661381a6b · warmcat/libwebsockets · GitHub" Shortened <

1563035914
ffddr
Hm, why I can @ptrCast on comptime, but cant @ptrToInt?

1563035928
andrewrk
ffddr, I pushed c0489abcdba to master to fix this

1563035939
ffddr
wow!

1563036030
ffddr
@ptrToInt hack is not needed anymore, but I am still trying to figure out why I cant store pointer as int on comptime? the error: `error: cannot store runtime value in compile time variable`

1563036083
andrewrk
is the pointer address known at comptime?

1563036153
andrewrk
for global variables and functions the address is computed during linking, so it can participate in some comptime expressions, but the integer value is not available for comptime computations

1563036155
ffddr
actually I am not sure, its that extern fn pointer. But I thought that @ptrCast and @ptrToInt have same restrictions

1563036187
andrewrk
this sounds like an issue that will be resolved by

1563036188
[[]]
a​ndrewrk: Title "introduce \"lazy values\" concept to fix false positive dependency loops · Issue #2174 · ziglang/zig · GitHub" Shortened <

1563036232
ffddr
`    p.callback = callback_http;` it works now!

1563036250
andrewrk
good

1563036431
fgenesis
07:30 < daurnimator> fgenesis: why do you get pinged?

1563036445
fgenesis
my client (irssi) triggers a hilight every time the bot sends a message like this

1563036464
ffddr
I think I got the difference between @ptrCast and @ptrToInt - @ptrCast can be somehow lazy evaluated with link-time known variables, while @intToPtr cant, right?

1563036471
fgenesis
maybe because it's this out-of-channel message style, dunno

1563036596
andrewrk
ffddr, right

1563036619
andrewrk
well even @intToPtr can get a bit lazier

1563036941
ffddr
wow, it all really works, that callback is actually receiving some network messages! Thanks again :)

1563037020
andrewrk
great, happy hacking

1563051311
emekankurumeh[m]
andrewrk: is segfault safety enabled for stage0?

1563052182
ntgg
I want to use

1563052183
[[]]
n​tgg: Title "GitHub - Hejsil/zig-clap: Simple command line argument parsing library" Shortened <

1563052239
emekankurumeh[m]
that's the status quo, but a package manger is planned.

1563052262
Tetralux
I'd suggest you make a vendor dir in your project and put it in there.

1563052276
Tetralux
Usually the simplest.

1563052291
emekankurumeh[m]


1563052292
[[]]
e​mekankurumeh[m]: Title "package manager · Issue #943 · ziglang/zig · GitHub" Shortened <

1563052443
ntgg
thanks!

1563053551
hryx
is there already an issue/proposal for supporting implicitly casting between struct types?

1563053574
emekankurumeh[m]
i don't think so

1563053598
hryx
ok. I was looking at the anonymous struct literal issue, and I think it's a related issue

1563053602
hryx
but not necessarily a blocker

1563053613
emekankurumeh[m]
but i think a feature like nim's converters might be nice for that

1563053625
emekankurumeh[m]
thought that breaks one of the zens of zig :/

1563053644
hryx
never heard of "converters" - I'll have to look that up

1563053721
emekankurumeh[m]
basically they are functions that the nim runtime will insert implicit calls to in order to implement implicit casts

1563053742
emekankurumeh[m]
it allows users to define their own implicit casts

1563053772
emekankurumeh[m]


1563053773
[[]]
e​mekankurumeh[m]: Title "Nim Manual" Shortened <

1563060818
hryx
damn. just spent a while working on a struct casting proposal, but I think it's flawed

1563060867
scientes
heh, it took andrew 3 trys to get something on copy elision

1563060867
hryx
The only real use case I had was supporting int/float literals in anonymous struct literals. But I'm pretty sure that's already inherently covered in that proposal

1563060986
hryx
scientes: what do you mean? you mean iterating over the proposal?

1563061004
scientes
i'm just saying you don't have to succeed every time

1563061015
hryx
true :>

1563061039
hryx
But I think my original idea isn't fundamentally justifiable, nor necessary

1563061130
hryx
Looking back, I think my proposal boils down to "make structs totally duck typed". which is cool, but I don't see a real use case for it yet

1563061153
hryx
and it has tons of problems to work out

1563061172
scientes
ewwww

1563061180
scientes
well I would have to see it

1563061192
scientes
do you mean structs, or stuct literals?

1563061205
hryx
scientes: I'll make a gist and post it here, even though I don't like it anymore

1563061228
scientes
so the unicode literals patch is stalled because the compiler is crashing

1563061250
scientes


1563061251
[[]]
s​cientes: Title "GitHub - shawnl/zig at utf8-less" Shortened <

1563061331
hryx
scientes: here you go, let me know if there's anything in here that you find potentially valuable:

1563061331
[[]]
h​ryx: Title "A somewhat misguided proposal · GitHub" Shortened <

1563061397
scientes
yeah I think that is a bad idea

1563061398
hryx
scientes: I'll never get used to the poop emoji

1563061419
scientes
if you even need that you can write a function to do it explicitely

1563061444
scientes
hell, what you have there can even be done with generics

1563061446
hryx
of course. did you read the Alternatives section?

1563061453
scientes
it doesn't need to be part of the language

1563061490
scientes
no i didn't make it that far :)

1563062100
hryx
ok. I appreciate your input, but it's a little hurtful to say my proposal is a bad idea without having read it

1563062131
scientes
i read half way through

1563062139
scientes
I'm sorry

1563062193
scientes
how about @bitCast() on structs?

1563062202
scientes
which would be similar to an extern union

1563062253
scientes
and I have personally run across the casting of fields issue

1563062255
scientes
which is quite annoying

1563062270
hryx
my main concern would be about how the order/adding of fields isn't guaranteed, so @bitCast on structs might have undefined results

1563062283
scientes
it would only work on extern structs

1563062314
scientes
*which would be the same as an extern union

1563062367
scientes
it would be the same as doing a pointer-cast thingy

1563062372
scientes
as well

1563062379
scientes
(because we don't have strict aliasing)

