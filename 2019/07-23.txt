1563841187
daurnimator
mq32: oooo, interesting

1563850681
fubd
that feeling when there's a bug blocking you that is fixed in a fork but you don't want to build zig from source

1563850709
fubd
i meant the commit here

1563850725
fubd
guess it's time to buckle up and build :)

1563854545
daurnimator
error: declaration shadows primitive type 'bool'

1563854548
daurnimator
pub fn @"bool"() bool {

1563854559
daurnimator
^^ intentional that you can't ever create a struct method called "bool"?

1563857068
daurnimator
error: parameter of type 'type' requires comptime

1563857078
daurnimator
^^ :( getting in the way of a refactor

1563862265
daurnimator
How can I set a field (dynamically)?

1563862276
daurnimator
we can use @field to get it... but how do we set it?

1563862712
hryx
daurnimator: curious, what's your use case?

1563862719
daurnimator
hryx: for?

1563862726
hryx
setting a field dynamically

1563862760
daurnimator
hryx: initialising a struct with dynamically provided values

1563862875
hryx
I'd love to see a hypothetical example if you have one off-hand. I had a thought about that feature but might be mixing it up with something else

1563862929
hryx
ah heck, I was totally mixing @field up with @hasDecl

1563863216
hryx
this is the thing that (wrongly) came to mind:

1563863286
hryx
which made me concerned that a naughtly library could do e.g. `@import("@root").log_level = .Fatal` -- but I probably misunderstand something

1563863292
hryx
sorry to derail!

1563863497
daurnimator
hryx: to try and think of a simple example of what I want: `const ptr = allocator.alloc(MyConfig); for (@typeInfo(MyConfig).Struct.StructFields) |f| { @setField(ptr, f.name, conf.get(f.name, f.field_type)) }`

1563863650
hryx
oh that is an interesting example

1563863968
hryx
daurnimator: if I understand your example, you're taking a user-supplied config (json/toml/yaml/blah) and populating fields of an arbitrary struct with it?

1563863981
daurnimator
hryx: yep

1563864091
hryx
I'm used to struct tags in Go (the language I use at work) and that's how you'd normally solve this in Go (decoding a config to a struct). but I haven't thought much if that's appropriate for zig

1563864239
gonz_
Given the nature of zig this is what I'd expect to be able to do

1563864252
hryx
oh yeah, here it is

1563864316
hryx
nothing in the "tags" proposal is particuarly compelling. maybe a builtin like @setField would be better

1563864502
hryx
daurnimator, @setField seems reasonable, I say make a proposal. I'd link to #1099 and show how your idea is cheaper/simpler than tags and can accomplish similar things

1563864565
hryx
(by "cheaper", I just mean that new builtins are cheaper to implement than syntax changes)

1563864733
gonz_
Well, it's cheaper in terms of everything

1563864740
gonz_
Less to learn, less to understand when reading source

1563864747
gonz_
less to investigate

1563864787
gonz_
"What does this tag do and where?"

1563864806
hryx
damn good point

1563864879
daurnimator
I haven't got to a point yet where I know I can't do it

1563864904
daurnimator
e.g. maybe `@field(MyConfig, "foo") = blah` just works already

1563865136
daurnimator
I'm on this weird issue where adding @panic makes the compiler segfault...

1563865193
daurnimator
ha. `@field(MyConfig, "foo") = bar` already works

1563865197
daurnimator
no need for a new proposal

1563865240
gonz_
That's great

1563865275
gonz_
This also works when iterating over the fields, then?

1563865281
hryx
haha I just tried it to

1563865306
hryx
I wouldn't have thought that @field works as an lvalue

1563865346
daurnimator
gonz_: I don't understand that question?

1563865362
hryx
daurnimator: run your original example you posted above

1563865369
gonz_
Well, you were iterating over the fields before, no?

1563865380
daurnimator
gonz_: yes iterating over the type fields works.

1563865390
daurnimator
hryx: that was very very boiled down from what I have :P

1563865424
gonz_
Yeah, I just wanted clarification that not only did the very basic example work, but the one you also pointed out before

1563865522
daurnimator
this is what I have at the moment:

1563865542
daurnimator
which works..... as long as I don't uncomment lines there for the reasons given

1563865598
gonz_
This is pretty neat

1563865617
gonz_
How did the TS PR go, by the way?

1563865628
gonz_
I haven't gotten any notifications about it

1563865657
daurnimator
TS?

1563865702
gonz_
TypeScript, for your lua thing

1563865718
daurnimator
oh. yeah the PR author hasn't come back :(

1563865801
gonz_
There were some really good notes to give, pretty much all related to the way type narrowing works in TS

1563874992
gonz_
There is a certain sense of "JAI has this so it must be a good idea" that I think backdrops a lot of feature discussions.

1563875037
gonz_
Even though JAI practically speaking doesn't really exist in any meaningful capacity

1563876062
gonz_
It also makes a ton of choices that aren't good for readability in an even medium sized eco system.

1563876081
gonz_
Libraries looking for arbitrary things in contexts, arbitrary tags, etc.

1563885335
fengb
I think comparison to Jai is inevitable since it exists in roughly the same space. But I’m not a big fan of how it’s being developed

1563885633
scientes
the readability decisions of zig are great

1563885644
scientes
Reading < Writing

1563885650
scientes
** Reading > Writing

1563885870
fengb
I just wish it’d actually get released so we can analyze it technically rather than handwave everything

1563885908
scientes
you mean there isn't any public code?

1563885913
scientes
its vaporware?

1563885918
fengb
Nope

1563885935
fengb
It’s supposedly in use for The Witness

1563885954
scientes
for me anything that isn't open source is vaporware

1563885957
scientes
irrelevent

1563885968
fengb
But no code or executable

1563886006
fengb
I don’t think it’s like V since Jon Blow has shown many demos of it, but they are just demos

1563886054
fengb
... I also didn’t mean to shittalk. That  language which shall not be named >_>

1563886563
scientes
vaporware to me

1563886753
fengb
One thing I really hope wasm would do is get rid of all these damn Electron apps

1563886804
scientes
hmm, i really haven't been effected by that

1563886855
scientes
affected*

1563886867
dimenus
can you have an anonymous union within a struct in zig?

1563886871
fengb
I just started using Riot.im and it's okay... but the desktop "app" is Electron

1563886985
scientes
electron isn't that horrible of an idea

1563886989
scientes
except that it used chromium

1563886996
scientes
someone should port it to firefox

1563887019
fengb
There's actually a decent tool that uses macOS's native renderer

1563887105
mq32
scientes, it shouldn't use firefox either, but use a really stripped-down renderer

1563887116
scientes
well yeah

1563887117
scientes
webkit

1563887121
scientes
skia

1563887124
fengb
dimenus:

1563887125
mq32
that only has 1 feature: render html+css3

1563887126
scientes
servo

1563887139
mq32
so UI can be controlled from code behind directly

1563887191
scientes
ahh so electron is very tightly coupled to nodejs and chromium's process architecture

1563887208
fengb
s/nodejs/v8 but yeah

1563887217
fengb
It's just packaging the entire browser into each app

1563887230
fengb
Well... partially stripped down, but most of the meat is there

1563887267
fengb
Anyway, it's big and bloated. I get why it's done but I'm never really happy

1563887312
dimenus
fengb: I would consider that a named union

1563887317
dimenus
ideally i'd be doing blah.a = 1

1563887327
dimenus
but i appreciate the example

1563887372
fengb
Oh I thought you meant anonymous like it has no type reference

1563887377
scientes
so calling electron html+css+js is kinda disengenuous

1563887382
scientes
its basically just a chrome frontend

1563887383
fengb
I don't think we can do C11 style unions or structs

1563887397
mq32
fengb, the sad thing is that most developers don't even get that it's just their usual chrome browser and you can actually get into the dev console in a lot of games and fiddle around with JS

1563887398
scientes
fengb, also nodejs

1563887455
fengb
scientes: I didn't not realize that... why is it so bloated

1563887475
scientes
this is based on reading this

1563887482
scientes
and he would certainly know

1563887487
fengb
Yeah I see it. That seems extra dumb though

1563887524
fengb
I don't remember any time I wanted any nodejs runtime in my frontend code

1563887827
fengb
dimenus:

1563890136
mikdusan
Cone (lang) author article:

1563891691
Tetralux
fengb: Re Jai being used in the Witness - AFAIK it's not - it is being used to make a complete game that Blow's planning to sell as his next game.

1563891724
Tetralux
I also would

1563891745
Tetralux
It does share the trait that it isn't publicly available in any form yet though - I can give you that.

1563891872
Tetralux
I also can see where he's coming from on the "closed source until a little after release" - he wants to ensure it goes the way he wants without much external influence, and he doesn't want to deal with the wider community yet.

1563891875
Tetralux
So I understand.

1563891899
Tetralux
And he also wants to present a fully finished product so that people can rely on it like they do the C compiler.

1563891906
fengb
I don't really agree with that. Zig has gone through radical changes for the better

1563891921
Tetralux
Indeed - that was my first thought as well when he said that.

1563891933
Tetralux
But it's also true that I don't want to deal with compiler bugs.

1563891948
Tetralux
And if I want to write a fully-featured program in Zig - I would probably want to wait until it's more stable.

1563891957
Tetralux
(I still might, but it's a consideration.)

1563891970
Tetralux
And his point is that most people that use C++ are like that.

1563891984
Tetralux
Well - "most people" - he doesn't want to "waste their time", as he put iot.

1563891985
Tetralux
it*

1563891998
Tetralux
I respect that reasoning.

1563892002
fengb
Yeah I figured the game dev community is kinda like that... but it feels really different from what I'm used to

1563892036
Tetralux
Likewise - but that's part of why I'm resisting the temptation to tell him that it's the wrong call.

1563892052
fengb
As for stability... I've been mostly tinkering with wasm. And Zig's low-level wasm support is quite good, arguably better than C and I don't really understand Rust

1563892067
Tetralux
Though honestly, if the compiler ends up being what it's like in his videos when/if it finally comes out, I'll be happy.

1563892086
Tetralux
I think it made some pretty good decisions for what he wanted.

1563892106
Tetralux
Quick iteration, allows 'exploratative' programming, etc.

1563892121
fengb
I just want to see what we can learn technologically. I don't really agree with a lot of design decisions

1563892122
Tetralux
And powerful enough where you have the power to implement compiler functionality if you want.

1563892127
gonz_
Tetralux: For practical purposes Jai doesn't exist. It certainly isn't a good idea to argue for unproven things in it out of sheer speculation (with regards to features for zig, for example).

1563892147
fengb
It has a bit too much magic for my taste

1563892148
gonz_
The thing that spawned this discussion in particular; it makes some choices that are guaranteed to be reader hostile.

1563892213
Tetralux
I'm inclined to point out that just because you don't have access to it, doesn't mean you cannot discuss the ideas.

1563892220
fengb
But... I'm also not a game dev so it doesn't really speak to me :P

1563892221
Tetralux
Though I do recongnise the benefit of having it in my hands.

1563892228
Tetralux
And obviously would rather have it in my hands.

1563892258
Tetralux
Further, yes gonz_, it's certainly less inclined towards readability.

1563892276
Tetralux
But instead leans towards expressive power, and simplicity.

1563892292
fengb
There's a lot of memory management in his videos that I only vaguely understand. That's not tuning I'm familiar with or even really care about

1563892314
Tetralux
Like not having to name the iteration variable when you don't have to.

1563892325
fengb
That's a perlism lol

1563892344
Tetralux
It's also a nice one. How many times do you need to name that thing 'i' ?

1563892351
gonz_
I think that pales in comparison to putting arbitrary things in contexts that may or may not be picked up by libraries, etc.

1563892385
fengb
Zig favors explicitness. I can always track down where a variable came from. I think that's a big plus that's lost in many languages

1563892396
gonz_
The amount of "What does this do when it's set in the context?" questions that will arise in even a moderately sized community will probably be ridiculous.

1563892398
Tetralux
fengb: Any particular one? Or just in general? :p - And yeah - I do like that part of Zig honestly.

1563892427
Tetralux
gonz_: My understanding is that the library would add the thing to the Context and you wouldn't care about it.

1563892436
fengb
Tetralux: particular which? I'm not sure which line you're responding to

1563892437
Tetralux
I mean - you'd read the library code before using it anyway, right? xD

1563892449
Tetralux
fengb: The memory management one :)

1563892453
gonz_
Jai also favors tagging AST nodes with arbitrary tags that may or may not be picked up by things. Anything, arbitrary tags. Those all also need to be figured out.

1563892484
Tetralux
gonz_: Personally, I like that. Means that I'm not constrained by what Jon Blow thinks the compiler should be able to do for you.

1563892490
Tetralux
I can just write a metaprogram that does it.

1563892501
gonz_
Tetralux: Right, read the whole library just to figure out where they use the context and tags you have in your code? I think this is reader hostile.

1563892524
fengb
Tetralux:  the idea of manually allocating a large chunk of stack memory and breaking it down manually. I get why it's done... but it's not something I had ever considered doing

1563892532
Tetralux
gonz_: You

1563892547
gonz_
You can already do source tagging on a library level with a sufficiently simple surface syntax. I don't think encouraging an ecosystem full of this is a great idea.

1563892588
Tetralux
fengb: I don't remember seeing that.

1563892593
gonz_
Tetralux: And get all of the hits for everything it might be using? Again, I think this is a pretty big cost to pay for something that probably was a bad idea from the beginning. At least with a certain set of values.

1563892629
dimenus
is there a way to ignore the safety check in a regular union?

1563892630
gonz_
Being explicit in the right place is IMO a much simpler choice to make

1563892640
dimenus
eg my union is just two different views into the same data

1563892649
fengb
It's in Jon Blow's "intro" rant video. It might not be in Jai proper...

1563892650
Tetralux
gonz_: grepping for 'context.' would show you usage; grepping for '#add_context' would show you everything that's added to it, AFAIK.

1563892658
fengb
dimenus: packed union

1563892669
gonz_
Spreading out these kinds of things in other people's code is a proposition I'm not ready to accept as a good choice, least of all in a language that only exists on like 10 computers in the world.

1563892671
Tetralux
But yes - it's fair to say that he's designing the language

1563892703
Tetralux
I've already polluted #zig with this for long enough probably but

1563892712
dimenus
fengb: thanks

1563892718
Tetralux
Suffice it to say, I think it's makes for a good exploratory programming language.

1563892739
Tetralux
And I think that being able to do a simple grep to find everything like that, is a good step to make.

1563892807
gonz_
It would be even easier if the code was simply in the correct place instead of using a context as a middle man

1563892821
gonz_
i.e. passed as a parameter

1563892969
fengb
I like Jai for the concepts it represents. I don't think I'd use it much though

1563893131
scientes
but it stands for vaporware

1563893138
scientes
until you can run something you never know

1563893141
scientes
especially with software

1563893170
fengb
"This syntax is borrowed from the Pascal family, along with using ^ to denote a pointer, as it is pointy."

1563893183
scientes
hehe

1563893205
Tetralux_
fengb: Isn't that Odin xD

1563893213
fengb
Random history question: why did C choose * ?

1563893228
Tetralux_
Commonly available character?

1563893244
Tetralux_
I don't actually know - though I think I did know at one point.

1563893284
fengb
Oh yeah... Zig actually rejected ^ because it's harder to type on a non-English keyboard

1563893288
gonz_
I always thought that `->` made sense, because it points to a think.

1563893293
gonz_
thing*

1563893303
mq32
var x : →int;

1563893305
scientes
yeah but its annoying

1563893321
scientes
i spend too much time fixing C compiler errors because i got the . vs -> wrong

1563893332
fengb
Ha that looks pretty cool

1563893340
mq32
i don't really understand why they made a difference in the first place

1563893347
scientes
but meh, it would be fine, the reading vs writing thing

1563893349
mq32
it's not like i could access a pointer with "." anyway

1563893365
fengb
Because -> isn't just a struct thing (confusingly enough)

1563893377
scientes
arrays are also confusing

1563893384
scientes
because they automatically become pointers

1563893394
mq32
but only sometimes

1563893399
scientes
half the time i use &foo[0] just to make it clearer

1563893408
mq32
yeah, true dat

1563893416
mq32
oh, btw

1563893447
mq32
did you know that arrays actually decompose into a pointer to the array which then conventiently coerces to a pointer to the first element?

1563893464
fengb
&0[foo]

1563893494
mq32
one of the best constructs i saw in the last time was the XML comment

1563893495
fengb
Cause why shouldn't we index literals by variables?

1563893498
mq32
a <!-- b;

1563893505
Tetralux_
It would be kinda neat if typing special chars like the arrow was trivial.

1563893517
Tetralux_
Like `->int`

1563893517
mq32
Tetralux_, do you use windows or linux?

1563893520
mq32
→int

1563893532
Tetralux_
Technically both. Usually Windows though.

1563893535
fengb
My favorite "anti-pattern" in C is while `(i --> 0)`

1563893544
mq32
linux has ternary and quarterny mappings with AltGr and Shift+AltGr

1563893552
mq32
you have a lot of symbols like … or × or ÷

1563893580
mq32
also i have a compose key instead of caps lock and dead keys

1563893588
mq32
that's just more convenient to type

1563893623
Tetralux_
It's just like... I think the `->int` is easier to read if it's literally an arrow... but I can't type it xD

1563893640
mq32
we need more compose key!

1563893641
Tetralux_
I'd have to either type 5 chars to Alt-code it or something, or set up a hotkey.

1563893662
mq32
"compose", "-", ">" => "→"

1563893666
mq32
♥

1563893678
Tetralux_
At least that would make more sense to remember how to type it XD

1563893684
fengb
That'd actually fix accent keyboards too

1563893693
fengb
"Fix". I suppose it's not technically broken

1563893696
mq32
fengb, yeah

1563893709
mq32
compose key is really great

1563893711
Tetralux_
fengb: I'm not sure about that - people that type accent'd chars all the time prob would not like that XD

1563893716
mq32
"c" + "," => "ç"

1563893718
lunamn
the real solution would be alt+shift+u then type emoji representing the operator manually /s

1563893747
fengb
We need a /s emoji

1563893752
Tetralux_
Definitely.

1563893833
lunamn
who wouldn't want to use U+000027a1 BLACK RIGHTWARDS ARROW to access struct members :)

1563893893
scientes
and why the hell did they need an emoji of that?

1563893900
scientes
there already are plenty of other arrows in unicode

1563893926
mq32
i think nowadays emoji and "unicode codepoint" is pretty similar

1563893988
fengb
I don't think people conside 芋 an emoji >_>

1563893991
mq32
also wikipedia has a wonderful page:

1563894017
mikdusan
so i looked it up. BCPL used 'rv', then '!' -- B used '*' because it liked '!' for negation and C adopted B's unary '*'

1563894099
mq32
what would also be great: "var i : ℤ; var n : ℕ;"

1563894157
mikdusan
const x: []const u8 = “real quotes”;

1563894199
mq32
heh

1563894263
mq32
if((x ∉ array) ∧ (x ≃ 1.0)) { }

1563894263
lunamn
does zig have checking against a semicolon and the u+037e greek question mark character ;)

1563894428
Tetralux
You know, I get the distinct impression that I have opened Pandora's Box... I'm not... entirely sure why.

1563894436
Tetralux
Just a feeling - you know?

1563894438
Tetralux
xD

1563894482
mikdusan
ok so `undefined` is 9 chars. how about `var i: u32 = ☢︎;`

1563894532
Tetralux
I'd suggest `---` but my face might meet the ground and become a pancake.. x'D

1563894892
fengb
I didn't know radiation was in unicode

1563894959
mikdusan
they also have biohazard but it needs larger fontsize to read: ☣︎

1563894982
gonz_
They should replace `unsafe` with that one

1563895257
scientes
everything is in unicode

1563895270
scientes
if you type on the android keyboard it will actual match your english words to the names of the unicode characters

1563895282
scientes
so they will pop up in the suggestions

1563895312
scientes
apparently social media wil be 100% pictographs in a few years :)

1563895345
scientes
mikdusan, yeah but that is still 4 bytes

1563895351
mikdusan
does "identical to" give you triple bar: ≡

1563895467
mq32
for undefined i prefer "var x : i32 = ‽;"

1563895479
fengb
Unicode is still missing Asian skin tones :(

1563895543
emekankurumeh[m]
what about porting

1563895571
mq32
"var b : bool = 👍 ∧ ¬👎; // the only viable way for bools

1563895589
scientes
mq32, that is good

1563895640
scientes
👍 + 👍 == 👎

1563895640
mq32
emekankurumeh[m], i really LOVE that windows screenshot with "upgrade IE"

1563895656
scientes
oh i guess that is why we have bool types in zig in the first place

1563895662
scientes
as distinct from u1

1563895693
scientes
however 👍 ^ 👍 == 👎

1563895713
emekankurumeh[m]
well why would

1563895732
emekankurumeh[m]
not want to upgrade /s

1563895740
fengb
C-like languages, 👍 + 👍 = 2

1563895962
mikdusan
var lambda = ƛ(a: u32) {};

1563896016
mq32
i already like lambda syntax with "var lambda = \(a: u32) { };"

1563896030
mq32
i think haskell does this, right?

1563896076
fengb
Kotlin is “fun” so we might as well 😀(a: u32)

1563896090
mikdusan
ruby uses keyword 'lambda' or operator: `var foo = ->(a: u32) {};

1563896130
mikdusan
`var foo = →(a: u32) {};`  how did i miss that opportunity?

1563896137
fengb
We’re back where we started

1563896208
halosghost
mq32: haskell uses \space separated args -> body

1563896710
halosghost
mq32: and, incidentally, I like the idea of using ℕ and ℤ for bignats and bigints, and using nN and zN (or, alternatively, nN and iN) for width-constrained types

1563896724
halosghost
mq32: I just don't propose it these days because people seem to hate it when I make that suggestion

1563896910
halosghost
Tetralux: also, there's a port of Compose to windows that leverages XCompose files

1563896934
halosghost
Tetralux:

1563896943
halosghost
it's one of the first things I install on a windows machine when I'm forced to use it

1563897148
Tetralux
Curious

1563897168
halosghost
I use compose constantl

1563897170
halosghost
s/$/y/

1563897191
halosghost
being without it feels like I cannot type half the things I want (despite the fact that it's certainly less than that, in reality)

1563897204
halosghost
but, I use it for small things like “curly quotes” or ellipses…

1563897216
halosghost
being able to just type them has been wonderful for my typographical life

1563897240
emekankurumeh[m]
uh can you annotate a container field as noalias or comptime?

1563897273
Tetralux
halosghost: XDD

1563897275
halosghost
I'm minorly tempted to remap i to be ı and then have `<∘> <period> <i>` generate a dotted-i

1563897277
halosghost
it'd make more sense

1563897287
halosghost
plus, then, if I ever managed to learn Turkish, I could type it more easily :D

1563897292
Tetralux
HA

1563897328
halosghost
🤷

1563897368
scientes
how do i use the alt gr key?

1563897377
halosghost
scientes: to do what?

1563897395
scientes
and the international keyboard sucks for programming

1563897395
halosghost
on windows?

1563897398
scientes
Linux

1563897402
halosghost
do you have compose enabled?

1563897407
scientes
that's what i want

1563897424
halosghost
setxkbmap -option compose:ralt

1563897433
scientes
is that permanent?

1563897434
halosghost
personally, I use compose:caps

1563897436
halosghost
scientes: no

1563897445
halosghost
scientes: you would want to persist it in a Xorg.conf.d section

1563897463
scientes


1563897476
halosghost
or, if you're lazier and you don't mind some odd behavior every once in a while, you can just put that in your .xinitrc (or similar for your DM if you use one)

1563897497
halosghost
…

1563897499
halosghost
wow

1563897501
halosghost
that's…

1563897505
halosghost
k

1563897539
scientes
well i want it to work for wayland too

1563897565
halosghost
huh

1563897568
halosghost
is that possible?

1563897582
scientes
oh course it is

1563897583
halosghost
I was under the impression that compose in wayland had not been accomplished yet

1563897587
scientes
oh......

1563897598
halosghost
afaik, compose is handled by the IME

1563897624
halosghost
I haven't read yet about wayland-compatible IMEs that do compose

1563897628
halosghost
that doesn't mean they don't exist

1563897636
halosghost
it's been about six months since I last seriously looked into wayland

1563897672
scientes
fixed in qt 5.11

1563897678
scientes


1563897868
scientes
CÓÓL

1563897882
scientes
AHH NOW I AM STUCK WITH CAPS

1563897916
scientes
Béttér

1563897934
scientes
ñ

1563897958
scientes
Piñata

1563897985
halosghost
lol

1563897996
scientes
Naïve

1563898063
scientes
yeah you can change it just in gnome-tweaks

1563898084
scientes
annd it works with wayland

1563898125
halosghost
cool

1563898134
halosghost
I wonder if it works when using sway or something else not-gnome

1563898227
halosghost
scientes: I'm glad you have it working

1563898233
halosghost
scientes: does it feel like a whole new world? :)

1563898254
halosghost
also, if you are interested in some of the things I've added, I have them in my .dotfiles:

1563903413
SyrupThinker
I have found this std lib error that I can reproduce for several 32 bit architectures:

1563903451
SyrupThinker
I'm not certain whether replacing usize() with a intCast is the correct way to solve this

1563903477
SyrupThinker
Should I just open a issue or make a PR with that as a possible fix

1563903653
fengb
That looks like a bug

1563903673
SyrupThinker
Also I'm getting a bunch of compiler warnings with gcc 8, not sure whether thats considered issues worthy considering its pretty obvious

1563903698
emekankurumeh[m]
what sorts of warnings?

1563903714
emekankurumeh[m]
because the compiler is supposed to be compiled with -Werror

1563903735
SyrupThinker
Yes, sorry, they are errors

1563903756
SyrupThinker
I took Werror out to see whether it fails on something else

1563903759
SyrupThinker
It didn't

1563903802
SyrupThinker
The most common was maybe-uninitialized

1563903840
emekankurumeh[m]
can you upload a paste somewhere of the warnings?

1563903974
fengb
For the rand issue, it makes the most sense if we could rand(usize) instead of u64... but if not, explicitly casting makes sense since we mask it

1563904267
SyrupThinker


1563904284
SyrupThinker
Actually it was only gcc 7.4

1563906735
emekankurumeh[m]
can any of you who use sublime text try out the zig plugin as it is in this branch:

1563906751
emekankurumeh[m]
or check my regexes

1563907593
strmpnk
emekankurumeh[m]: I occasionally use sublime with Zig. I'll look at it. It's worth noting that Sublime Text supports test files for syntax definitions, which might be worth the investment.

1563907754
emekankurumeh[m]
syntax tests only sublime-syntax files and github's linguist doesn't support sublime-syntax files

1563907793
emekankurumeh[m]
but thank you for taking time to check

1563907812
strmpnk
emekankurumeh[m]: Ah. So this is for linguist as well as sublime?

1563907892
emekankurumeh[m]
yes, that's why i don't want to accidentally break zig highlighting on all of github for a couple months

1563907921
andrewrk
appreciate that :)

1563908031
emekankurumeh[m]
no problem, now i just need to update the vscode syntax

1563908033
strmpnk
Browsing lots of the standard library... seems to be good so far.

1563908164
emekankurumeh[m]
it might choke on async function declarations, but i didn't bother with those because async is getting reworked

1563908297
strmpnk
Good point. I don't have any real examples of that handy but I imagine it'll be easier to patch once it appears in the repo anyway.

1563908406
strmpnk
The scopes on the grammar are pretty basic, which limits some of the more advanced syntax features and can look odd in some color schemes but overall I think this looks good. No glaring bugs found.

1563908509
emekankurumeh[m]
the meta scopes were the hardest for me

1563908552
emekankurumeh[m]
i also tried adding a config file to make more scope visible in the index but that didn't seem to work

1563908764
strmpnk
The scope taxonomy seems to be a little non-portable anyway. Some of the meta scopes only make sense for certain kinds of languages.

1563908785
andrewrk
async syntax is about to change

1563909104
emekankurumeh[m]
i was kind of on the fence about breaking up the next release on the grounds of that wouldn't be enough time but andrew seems to be proving me wrong

1563909460
andrewrk
what do you mean?

1563909637
dimenus
is there a way to set parts of a @Vector without casting?

1563909645
dimenus
eg implementing _mm_set_ss

1563909654
emekankurumeh[m]
i don't mean to be rude or insulting but the 0.5.0 release seemed really ambitious to me, at least in terms of scope

1563909694
dimenus
nvm, ignore that question

1563909717
gonz_
Heh, how is that rude?

1563909735
emekankurumeh[m]
but i suppose the whole zig project needs to be ambitious if it plans to overthrow c

1563909882
andrewrk
emekankurumeh[m], oh yeah sure. I don't see those milestones as accurate estimates of what will actually be done for each release. the milestones just mean "decide what to do regarding this issue before the release"

1563909901
andrewrk
"Accept and resolve these issues, reject, or postpone them before releasing 0.5.0."

1563918506
ltr-
what is the elegant way to cast an slice to [*c]u8 ?

1563918709
fengb
slice.ptr

1563918866
ltr-
nice!, missed that field

1563918868
ltr-
:D

1563918914
ltr-
@ptrCast([*c]const u8, &slice[0]) i was using that ugly thing.

1563919071
ltr-
ty

1563920398
ffddr
I draw a triangle!

1563920466
dimenus
_MM_SHUFFLE is confusing

1563920468
dimenus
thanks microsoft

1563920489
ffddr
Tried to illustrate and make an example for this issue

1563920871
Sahnvour
ffddr: nice!

1563920897
Sahnvour
how was the experience getting sokol to work in zig?

1563921308
ffddr
With my hack to make a defaults for all the sokol's structs - it was pretty good, but its super not production ready solution obviously. With the master zig sokol usage will be a bit too painfull right now - it will involve hand writing or generating somehow a lot of wrappers like

1563925082
shachaf
andrewrk: What's the reason for having "async" be implicit in function declarations when it presumably resuls in very different generated code?

1563925111
shachaf
I think this is pretty surprising for a language that e.g. doesn't allow operator overloading for this reason (I think).

1563925213
andrewrk
shachaf, here's the proposal:

1563925384
Cadey
andrewrk: thank you so much for that

1563925473
shachaf
Hmm. If a function used the async notation, it could presumably still be implemented with blocking, and just never suspend, right?

1563925484
shachaf
Why would there be additional overhead in that case?

1563925572
shachaf
Maybe that's also an argument that they're more similar than I was thinking, though.

