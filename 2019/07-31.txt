1564531332
daurnimator
andrewrk:

1564531359
andrewrk
gitlab won't let me fix having 2 accounts that should have been the same one

1564531416
daurnimator
I'm missing context to understand your statement.

1564531503
andrewrk
I'm annoyed that I have 2 accounts on gitlab and it won't let me merge them into one

1564532227
andrewrk
um... no:

1564532340
andrewrk
I'll try to set it up without that authorization

1564532548
daurnimator
andrewrk:

1564533344
hryx
damn, that's a lot of permissions. such a tragic thing about OAuth apps. I really wish apps could ask for permissions as needed/desired, per integration feature

1564533629
NI33_
andrewrk: If i am not mistaken, when you want to integrate to accounts (and continue to use a non-paid membership) you need to do something very old fashioned, namely send an e-mail and ask them to integrate your accounts (i could be mistaken, but i do think i ran into the same issue a while ago, and just gave up, seeing that)

1564533642
NI33_
*to=two

1564533717
NI33_
If the gitlab service was just a little older, i am sure you would have had to send them a letter via PO-BOX 372834 :-)

1564533804
NI33_
(Note: It might have been some other REPO/CI service that had this, and i am mistaking it for gitlab)

1564533960
NI33_
Please discard my message above. Did a little digging and it was SemaphoreCI requiring me to e-mail them. Sorry about that.

1564538732
mikdusan
daurnimator: awesome. you got that arm account!

1564538742
daurnimator
mikdusan: yep

1564545232
daurnimator
emekankurumeh[m]: there?

1564576600
FireFox317
andrewrk: Regarding the `pub extern` issue, should we mark all the exported functions as `pub` internally in the compiler?

1564576699
FireFox317
*export

1564580372
Poetastrophe
Hey guys! I am using std.debug.c_allocator in a small project and I can't seem to link against libc. I tried to specify it in the build.zig like so:

1564580405
Poetastrophe
But when I build and then run I get:

1564580416
Poetastrophe
As if I haven't specified it

1564581182
fengb
"zig run" doesn't actually use the build file

1564581230
companion_cube
why not?

1564581233
fengb
You'll need to enable "zig build run" manually, like this

1564581249
fengb
Only "zig build [x]" uses the build file

1564581266
fengb
Other commands just invoke the compiler directly

1564581301
fengb
Oh that's an old reference. Lemme find a more recent one

1564581355
fengb


1564581486
fengb
Oh wait, you added the run step already. Just do "zig build run"

1564581612
Poetastrophe
Ahh I see fengb, thanks!

1564582130
mq32
mikdusan, i just read your "inhertance & interfaces" proposal

1564582144
mq32
sounds pretty good already :)

1564582186
mq32
do you have an idea how interface references are stored?

1564582223
Poetastrophe
Though fengb it produces FileNotFound (seems to have trouble finding the executable). Cannot really deduce why it would do so:

1564582350
mikdusan
mq32: tbh i am not sure of those details yet; want to hash out what can be hashed out before those details

1564582409
mikdusan
mq32: i admit there is more to add about interfaces since revising the proposal. i must be more clear. working on that.

1564582519
fengb
Poetastrophe: I’ve been getting that error too. I think it’s a recent bug

1564582604
Poetastrophe
fengb aight that's unfortunate

1564582672
bheads
What happened to the comptime type checking proposal?

1564582730
scientes
bheads, ??? types are checked at comptime

1564582738
bheads
pub fn quack(duck: var<meta.is_a_duck()) void { ... }

1564582758
bheads
pub fn quack(duck: var<meta.is_a_duck>) void { ... } **

1564582758
scientes
just put it in your function

1564582771
bheads
you want the compiler to reject the call site

1564582772
scientes
if (@typeOf(  @compileError()....

1564582775
bheads
not the function

1564582782
scientes
its still comptime

1564582790
bheads
call site

1564582804
scientes
then use another function

1564582808
scientes
with differn't requirements

1564582808
bheads
then we dont need inheritance

1564582819
scientes
i don't see the problem

1564582872
bheads
I was responding to the new inheritance proposal

1564582897
scientes
yeah , i'd rather not have inheritance

1564582904
bheads
exactly

1564582915
scientes
@fieldParentPtr is sufficient

1564582917
scientes
once it is fixed

1564582929
fengb
That’s more “traits” than inheritance

1564582930
bheads
@fieldParentPtr is messy

1564582938
scientes
it just has to be fixed

1564582946
scientes
its still beautiful

1564582962
fengb
Yeah I don’t really want inheritance either

1564582980
scientes
OO is best used sparingly

1564582993
bheads
the idea was to make "traits" cleaner

1564583038
bheads
with the trait in the signature not in the body

1564583130
mq32
mikdusan, i hope i get some time later to write a response to your proposal. i have some more specific ideas and commets

1564583190
bheads
easier to debug that:  quack(a_dog);  is the error then   if ( std.meta.hasFn(duck, some long fn signature)) ...... in duck.quack ...

1564583222
mikdusan
mq32: would love to hear them

1564583243
daurnimator
bheads: hrm. I can't find it now, but theres a comment around that proposes you can provide a function as a type and it would get called to check if it was valid

1564583348
bheads
I think that pattern would cleanup things like the Allocator and Iterator patterns

1564583401
bheads
even cleaner would be to define the trait as a type

1564583418
bheads
const Allocator: type = var<std.mem.is_allocator>;

1564583439
mikdusan


1564583463
daurnimator
mikdusan: ah ha, thanks

1564583467
daurnimator
bheads:

1564583474
mikdusan
that proposal is sneaky powerful.

1564583483
bheads
yeah thats it!

1564583504
bheads
yeah it would solve a lot of these kind of issues

1564583593
scientes
wut

1564583613
bheads
and we wouldnt need @fieldParentPtr as much

1564583619
scientes
we still need it

1564583621
scientes
it is performant

1564583633
bheads
sure but not as much

1564583639
scientes
(once it is fixed to not interfere with other things)

1564583753
scientes
there was a issue to make it only callable on types that declare support for it

1564583759
scientes
which fixes the strict aliasing issues

1564583767
scientes
and makes it less of a foot-gun

1564583777
bheads
lol scientes, I dont think its going anywhere

1564583785
daurnimator
@fieldParentPtr needs 'nocopy'/'fixed' to be less of a footgun

1564583806
daurnimator
I recall andrewrk saying it was the number 1 mistake by new zig programmers. it sure was for me.

1564583842
daurnimator


1564583860
daurnimator


1564583872
scientes
the impossibility of @fieldParentPtr was one of the reasons I stopped trying to learn go

1564583933
fengb
It’s also hostile to optimization

1564583981
scientes
which optimizations?

1564583990
scientes
I only see strict aliasing (which isn't a zig thing right now)

1564583999
scientes
cause its just an addition/subtraction

1564584072
fengb


1564584135
scientes
oh yeah now i remember

1564584262
scientes
well, anyways, my use-case for fieldparentptr is for data structures (like my rb.zig), where it is just a add/sub

1564584316
daurnimator
I use it for e.g. intrusive linked-list nodes

1564584343
scientes
I should look at the code

1564584347
scientes
cause I wrote something similar

1564584350
scientes
and then never polished it

1564584355
scientes
but yeah, that is what "intrusive" means

1564584455
scientes
how do i turn off the segfault handler?

1564584557
mikdusan
try adding `const enable_segfault_handler = false;` to @root ?

1564584595
daurnimator
mikdusan: yep that should do it.

1564584622
scientes
@import("root")

1564584629
scientes
oh nvm

1564589211
Poetastrophe
I tried to make an ordered_map datastructure (which should have a identical interface as the buf_map) using the rb.zig library. But I seem to be getting a dangling pointer. The implementation is under 100 lines:

1564589211
Poetastrophe
e/84d5fd3441139f98936f177d2dab65a5 . Any help would be much appreciated

1564589719
euantor
Gist URL from above seems to have been cut off:

1564593241
dimenus
andrewrk: do you have anything written up on error return traces vs exceptions?

1564593246
dimenus
just curious

1564593265
dimenus
is it just simpler in zig because we don't have constructors/destructors?

1564595630
emekankurumeh[m]
daurnimator: thanks!

1564596029
emekankurumeh[m]
andrewrk: I'm working on adding a ci job for mingw-w64, what would it take to get it added to the downloads page?

1564596094
andrewrk
emekankurumeh[m], in theory is it possible for the windows download to be appropriate for mingw-w64 as well as native windows?

1564596102
andrewrk
or is there some reason the builds have to be different?

1564596184
andrewrk
dimenus, the only thing I've written up is

1564596266
emekankurumeh[m]
mostly it just makes things nicer as the binary front the downloads page assumes the c ABI as msvc even on gnu

1564596298
dimenus
mingw64 does use the msvc abi

1564596308
emekankurumeh[m]
i suppose we could just add runtime detection for the c ABI

1564596309
dimenus
it's meant to interop without any extra dlls

1564596312
dimenus
unlike cygwin

1564596341
emekankurumeh[m]
by c ABI I mean the libc (basically)

1564596346
dimenus
ah

1564596353
dimenus
yeah in that case they have their own wrappers for certain things

1564596362
emekankurumeh[m]
as that's how zig refers to it in the triple

1564596394
andrewrk
emekankurumeh[m], perhaps we can improve native ABI detection. are there are environment variables or something that mingw-w64 provides?

1564596399
dimenus
i'm making good progress with Vulkan

1564596429
dimenus
other than the occasional hand edits of the translated c, it's been pretty easy to use with Zig

1564596502
dimenus
environment variables or #defines?

1564596596
andrewrk
dimenus, we're talking about an executable at runtime detecting that the native ABI should be mingw

1564596792
emekankurumeh[m]
sure, I think we already do something like that by checking if certain pipe handles exist

1564596940
emekankurumeh[m]
but also using lld with mingw-w64 is faster that msvc and cl

1564596975
dimenus
i haven't experienced that except on a first build

1564596977
emekankurumeh[m]
I'd rather not make the windows ci job any longer

1564596980
dimenus
cl has incremental linking

1564596986
dimenus
er link does

1564597005
dimenus
i'm not sure I understand why you guys keep referring to this as 'ABI' though other than the target triple being kind of misleading

1564597019
dimenus
the calling conventions of mingw compiled applications are the same as that of native MSVC compiled applications

1564597021
emekankurumeh[m]
really? maybe we should take advantage of pipeline caching

1564597087
dimenus
on msys2/cygin that's a different story

1564597097
dimenus
those programs literally won't load / link with the msvc toolchain

1564597100
dimenus
*cygwin

1564597103
emekankurumeh[m]
in the target triple when targeting mingw the ABI we pass is gnu, there is no difference but llvm pretends there is so we do too

1564597106
andrewrk
dimenus, yes they have ABI compatibility but there are still differences in the target

1564597121
emekankurumeh[m]
msys2 isn't cygwin

1564597171
dimenus
i didn't say they were

1564597222
andrewrk
the linker acts quite differently for the mingw abi vs msvc

1564597279
dimenus
msys-2.0.dll and cygwin.dll both provide a posix translation layer

1564597284
dimenus
agreed

1564597285
andrewrk
we might even want to have std.fs.path.sep be `/` rather than `\` for windows-gnu target

1564597298
emekankurumeh[m]
yes please

1564597307
andrewrk
let's do it

1564597316
dimenus
i don't think that's right

1564597324
dimenus
msys-2.0 is not linked into mingw64 programs

1564597326
dimenus
only msys programs

1564597338
emekankurumeh[m]
though all of zig works with / instead of \ except for zig fmt

1564597370
emekankurumeh[m]
oh, that explains what you mean

1564597395
dimenus
i'm just trying to make sure we're differentiating between msys2/cygwin (which do provide posix translation)

1564597397
dimenus
and mingw64

1564597400
dimenus
which is a regular windows binary

1564597425
dimenus
if you don't link in libc on mingw64, i'd be curious to see if the path actually gets translated

1564597431
dimenus
my guess is that it will not

1564597602
emekankurumeh[m]
translated?

1564597802
emekankurumeh[m]
I can't wait for @result, the result variable was something i really liked in nim

1564598019
emekankurumeh[m]
i'll make a pr for this stuff

1564598099
scientes
emekankurumeh[m], but why, just have a differn't variable, and then return it?

1564598236
emekankurumeh[m]
copy elision, plus i don't like just declaring the variable just to return it, @result feels a lot cleaner imo

1564598442
scientes
I think copy elision can just be done with static analysis

1564598453
scientes
and I'd rather avoid an extra feature in the language

1564598528
gokr
Hi all, I am new to Zig since... 24h, but find it interesting. Was wondering, anyone here with experience in Nim that can ... contrast Zig with Nim? I have done a fair bit of Nim.

1564598618
andrewrk
zig has fewer features than nim, compiles directly to machine code (not C), and emphasizes cross compilation

1564598649
gokr
Those parts I already got ;)

1564598665
halosghost
zig also emphasizes safety and predictability

1564598672
gokr
Although there is also an experimental LLVM backend for Nim, though... not primary work there AFAIK

1564598752
gonz_
Hang on, what's this about `@result`?

1564598760
halosghost
nim, in large part because it compiles to C, still has quite a bit of undefined behavior

1564598761
andrewrk
dimenus, I see your point. Yes I think we would only want `/` instead of `\` if it was msys2/cygwin

1564598800
andrewrk
halosghost, I'm not sure that's correct, be careful accusing another language of that

1564598803
dimenus
agreed

1564598849
andrewrk
it's pretty easy to avoid the undefined behavior of C when using it as the output of a compiler

1564598853
gokr
I made Spry (sprylang.se) in Nim and also used it together with Urho3D in my old job etc. It's a beast, but... strangely practical also. Regarding the "undefined behavior" - I have heard that being brought forward lots f times, especially from Rusters - but... it feels largely theoretical.

1564598865
halosghost
andrewrk: it has been a while since I've looked into nim, but the last time I did, it had made some decisions such as defaulting all integers to signed integers and not providing unsigned integers; and, at least at the time, it didn't do anything to catch/prevent overflow

1564598891
andrewrk
halosghost, that's a fair criticism, but that's unrelated to C having undefined behavior - see what I mean?

1564598930
halosghost
mm

1564598936
gonz_
gokr: zig emphasizes compile-time evaluation of normal code in contrast to Nim and many other languages.

1564598956
gokr
"in contrast to nim"?

1564598957
halosghost
I suppose, though I think claiming that it isn't related to C's UB is actually more of an assertion about the language authors than I had made

1564598983
andrewrk
gokr, you might enjoy this talk I gave recently:

1564598992
halosghost
andrewrk: I suppose I was trying to offer the benefit of the doubt to the nim authors that they just had to bite that UB because C has it; suggesting that they should do otherwise is an assertion that they made a poor choice

1564598996
halosghost
which is not necessarily incorrect

1564599006
gokr
Compile time evaluation is exactly what Nim also can do.

1564599018
gonz_
gokr: Correct me if I'm wrong, but does Nim not emphasize macros as opposed to just compile time evaluation?

1564599021
halosghost
but, it was my hope by my phrasing explicitly to not indict them

1564599027
halosghost
it seems like I failed in that, so my apologies

1564599038
gokr
andrewrk: I actually watched that (although speed flipping)

1564599046
andrewrk
halosghost, I think a fair way to put it would be that you disagree with the design decisions about integers

1564599056
halosghost
andrewrk: fair enough

1564599066
halosghost
oh, I can say this

1564599078
halosghost
afaik, nim doesn't have arbitrarily-sized, fixed-width integers and zig does

1564599120
halosghost
which, I think, should award 2^252 (one for each extra integer type that zig supports) points to zig :P

1564599126
gokr
gonz_: Eh.... Nim has a macro system that operates on the AST level, and it does so by using Nim. In fact, Andreas even wrote a Nim interpreter mainly to be used during compilation.

1564599132
gonz_
gokr: Note that AST manipulation is different than what zig does. zig does not try to give you a macro system.

1564599138
halosghost
(seriously, it's one of my favorite things about zig; which I know is a little silly)

1564599164
gokr
gonz_: I know Zig doesn't do AST manipulation, but.... Nim also runs Nim during compile time.

1564599177
andrewrk
that's neat, I didn't know nim had that

1564599190
gonz_
Having used many macro systems I can tell you zig is a different idea than all of them.

1564599199
gonz_
I suggest you make use of it.

1564599214
gokr
For example you can write a const proc that produces a CRC table, and have it run at compile time. It may even be more advanced than Zig in this arena- though I am not sure about Zig's limitations.

1564599231
gonz_
Yes, it

1564599247
batok
Is there a source code example about a tcp server or client?

1564599259
gonz_
zig is a much smaller idea with much more bang for your buck than any macro system.

1564599264
andrewrk
does nim let you do any of these during compile time code execution? inline assembly, external function calls, syscalls

1564599310
andrewrk
batok, yes but that's a bit under construction for the moment. I suggest using C libraries for that (or libc) or waiting a couple months

1564599321
gokr
andrewrk: Unsure about the limitations, the const stuff is meant to be deterministic - so there such stuff is "forbidden" of course.

1564599325
andrewrk
batok, I'm working on async/await right now, and next up after that is event-based networking API in the std lib

1564599344
batok
ok i will wait tks

1564599365
gokr
andrewrk: But nimscript is also based on the same interpreter - and it can do quite a lot of such stuff (since it's used to make "portable shell scripts" etc)

1564599369
andrewrk
gokr, sounds like nim & zig made the same decision then and the features should be roughly equivalent

1564599400
gonz_
gokr: I don't think soliciting responses about differences and mounting defenses about the responses is going to net you more than sitting down and writing some zig. It's a very small, simple language and you can pick it up very fast.

1564599405
gokr
I am a Smalltalker at heart so... I am used to "blurring" runtime and compile time ;)

1564599435
gonz_
Having written production code in Racket and Elixir I can tell you that there is a qualitative difference between the kind of compile-time features you get in zig and macro systems.

1564599445
gokr
gonz_: I am not mounting defenses - I am trying to find the ... major differences.

1564599460
gonz_
You're not going to theorize your way to this, I don't think

1564599486
gokr
Probably not, I know. Was just hoping to find some people knowing both.

1564599514
batok
can nim compile to wasm these days?

1564599521
gokr
gonz_: So you think Zig goes further towards Lisp/Smalltalk etc?

1564599521
andrewrk
gonz_, I think your suggestions are reasonable, but let's try to have a welcoming attitude to the newcomers :)

1564599533
gonz_
batok: If it compiles to C it can

1564599591
gokr
andrewrk: I am cool, no problem. I may sound as one of those coming to "argue" - but... I am a sucker for languages simply.

1564599606
andrewrk
I agree with gonz_ though that the best way to find out is to try it out

1564599609
strmpnk
I'd call zig more of a staged compilation setup for metaprogramming, which is really different from macro based metaprogramming. Staging isn't as common as AST based metaprogramming but has a lot of advantages with uniformity of language when moving concepts between the two layers...

1564599616
gonz_
gokr: zig is much more limited in what it exposes as an interface for compile-time stuff. The compile-time stuff you write is exactly what you would have for non-compile-time. Pound for pound it's very valuable but as with everything in zig it's intentionally simple.

1564599617
strmpnk
It's a lot easier to lift into or out of comptime than switch an AST manipulation into straight-line code.

1564599701
gonz_
strmpnk: Right? Precisely because it's just zig code and the only thing you really need to consider are the stage requirements.

1564599760
strmpnk
Yes. Constraints like comptime are very expressive IF given good reflection, which Zig has done a good job with.

1564599773
gokr
Yeah, sounds reasonable. Loved the way generics works in Zig btw.

1564599787
gokr
As a Smalltalker I love it when things are reified :)

1564599833
gonz_
Exactly, and that's part of what makes it such a pound for pound good feature

1564599889
gokr
Spry is about .. 2.5k Nim code, I was thinking of porting over to Dart (I work a lot in Dart these days) - but... Zig is tempting.

1564599924
andrewrk
zig is still immature, lots of bugs, beta software, but if you're cool with that then it would be a great fit

1564599945
gokr
I do however rely quite a bit on runtime polymorphism (Nim methods) - is the answer in Zig country.... tagged unions?

1564599946
gonz_
gokr: Do you work at a big dart shop? This sounds interesting.

1564599961
gokr
No, I work at a company making... robot gloves ;)

1564599976
gokr


1564599995
gokr
Anyway, I decided to go "all Dart" there for both server side and mobile apps etc.

1564600001
gokr
Has worked really well so far.

1564600008
andrewrk
gokr, tagged unions work well (even untagged unions have runtime safety with a secret tag field) but if you want runtime polymorphism, the current solution is to roll your own using @fieldParentPtr. the relevant issue to track is

1564600024
gokr
Ah, super. Thanks

1564600050
fengb
andrewrk: I’ve been getting a weird error in master:

1564600057
fengb
Should I create an issue?

1564600059
gonz_
`@fieldParentPtr` is a bit controversial, though, it should be said?

1564600104
gokr
Spry is... just a trivial little AST interpreter - but a fun little experiment. I also noted you mentioned doing "stackless" parsing somewhere - in fact exactly what I wanted to do in Spry next (it's currently just a silly recursive interpreter).

1564600128
andrewrk
fengb, looks like the install step is not doing mkdir -p and that's causing the error

1564600148
andrewrk
fengb, an issue would be appreciated

1564600170
andrewrk
gonz_, I'd say @fieldParentPtr as

1564600185
gonz_
Right, yes

1564600185
fengb
Ah if it’s the install step, I think I can take care of that

1564600187
andrewrk
but that's why #130 is still open

1564600218
andrewrk
fengb, yeah. I think what's confusing about that error return trace is that one of those errors was handled, but then ultimately the call still errored out

1564600220
gonz_
gokr: Did pure function annotations land in Nim yet?

1564600237
andersfr
andrewrk: I made a context-free LALR parser of Zig. I had my doubts at first but it was indeed possible

1564600237
andrewrk
but that actually gives you more information if you think about it

1564600285
gonz_
gokr: Ah, found it in the manual.

1564600380
andrewrk
andersfr, interesting! I would be interested in engaging with you more on this once the syntax is stabilized - as it is more changes are planned (specifically with regards to async/await and a couple other things)

1564600437
gokr
andrewrk: Not sure if it is of interest - but async/await in Nim was made purely with macros actually.

1564600500
andrewrk
gokr, that's neat. is it based on stackless coroutines / CPS?

1564600515
andrewrk
does it work with a thread-pool based event loop?

1564600517
gokr
Extremely good question - have no idea :)

1564600527
gokr
But it was dom96 who wrote it IIRC

1564600539
gokr
He is on IRC

1564600553
gonz_
What's this about `@result`, by the way? Is there an issue to look at? GitHub search taunts me as usual.

1564600565
gokr
He also wrote the Nim book and lots of the web stuff in Nim etc. Very nice guy

1564600871
andersfr
andrewrk, you can find the implementation at

1564601972
emekankurumeh[m]
andrewrk: it is based on iterators

1564602000
emekankurumeh[m]
I do think they use a threadpool under the hood for it

1564602079
emekankurumeh[m]
here is a link to a talk in how their async is implemented:

1564602697
Sahnvour
if I get this right, it's planned to have a thread pool tightly coupled with the async/await feature ?

1564602737
andrewrk
Sahnvour, not tightly coupleid

1564602764
Sahnvour
relieved

1564602797
andrewrk
async/await is lock-free and atomic, which means that it is compatible with a thread pool event loop implementation in the standard library

1564602821
andrewrk
there's already a proof of concept of this (albeit with the async/await semantics that I'm currently reworking)

1564603146
dimenus
how would i discard only a specific type of error?

1564603171
Sahnvour
I fail to see where the delimitation between language support (`await`) and library support (thread pool) is, feels abstract to me for now

1564603217
dimenus
_ = try std.fs.deleteFile(full_out) catch error.FileNotFound;

1564603227
dimenus
i just want to delete a file if it exists

1564603246
fengb
async/await only denotes runtime semantics. It could theoretically be backed by any execution strategy, of which thread pool is one (and event loop would be another)

1564603401
nrdmn
feature request: bitwise assignment operators (^=, &= etc.) for bool

1564603448
andrewrk
dimenus, switch on the error, handle the one error, and then `else => |e| return e,`

1564603458
dimenus
ah i was missing the second capture

1564603459
halosghost
nrdmn: at least one other person here (scientes iirc) is planning on PR'ing that iirc

1564603467
andrewrk
dimenus, the captured error set in the else will omit the ones you handled

1564603543
nrdmn
alright

1564603642
halosghost
hmm, I might be wrong about that

1564603702
Sahnvour
fengb: and is an event loop something more than just a thread pool with only 1 thread, conceptually ?

1564603727
dimenus
maybe this doesn't work in build.zig

1564603735
dimenus
i'm not even seeing my function call

1564603816
andrewrk
dimenus, I'm not sure what you're saying - build.zig is just zig code. you can read the full source of the main() entry point here:

1564603839
scientes
halosghost, nrdmn it would help if someone wrote up a proposal

1564603849
scientes
I have the code somewhere and it works

1564604118
dimenus
andrewrk: sorry for the false alarm, there's just a big in my zig code

1564604131
dimenus
*bug

1564604150
dimenus
i was trying to copy the *.spv files before the systemCommand actually ran

1564604158
fengb
Sahnvour: I suppose it can be modelled as an infinite loop against 1 thread. I'm not sure how OSs or node.js does it internally

1564604292
dimenus
essentially i'm just trying to copy shaders/*foo.spv to my bin directory

1564604309
dimenus
but the system command hasn't run yet

1564604364
andrewrk
dimenus, ah yes one thing to remember is that build.zig is declarative

1564604373
andrewrk
it'll become more clear why that is in the future

1564604386
dimenus
sorry i'm being obtuse, i don't know what you mean by that

1564604399
dimenus
i can just move the copy to later in the process

1564604426
andrewrk
once your build() function completes, nothing is actually done yet. build() only creates a graph of build steps

1564604454
andrewrk
that's why, for example, `zig build --help` contains the options and user-defined steps

1564604466
Tetralux
(The build fn is basically just the system asking you what you want - and then after it returns it then goes and actually does it all.)

1564604513
dimenus
ok, so i have a very similar setup to your vulkan example

1564604523
dimenus
accept I'm also copying the shaders to the output bin directory

1564604525
dimenus
*except

1564604546
andrewrk
dimenus, for your compiled shaders I recommend using the install functions, and then finding them at runtime based on the installation path, or relative to the binary path

1564604569
andrewrk
or `@embedFile` at build time

1564604575
dimenus
i am using installBinFile, the problem is the compiled shader isn't built yet

1564604587
dimenus
or do i just need an extra step?

1564604599
andrewrk
you probably just need to declare a step dependency

1564604649
andrewrk
b.getInstallStep().dependOn(the_step_that_compiles_the_shaders)

1564604712
andrewrk
I should update the vulkan example to do this

1564604758
dimenus
that was it

1564604790
dimenus
just need to have the install step depend on the compilation step (rather than the exe compilation)

1564604794
dimenus
can the install step depend on both?

1564604878
dimenus
nvm, i'm good to go. thanks andrewrk/Tetralux

1564604906
Tetralux
dimenus: o7

1564605096
andrewrk
dimenus, at some point here the API will be improved so that zig build does caching on system commands if you go through the trouble to specify all the inputs and outputs

1564605161
andrewrk
this will also make it easier to make the API friendlier with regards to step dependencies

1564606769
dimenus
on to an obj loader!

1564606834
andrewrk
neat

1564610224
scientes
dimenus, are you writing a dynamic loader?

1564610458
andrewrk
scientes, I believe obj in this context is a mesh (for 3d graphics)

1564610468
scientes
oh cool

1564610478
scientes
dimenus, if you need some specific SIMD thing let me know

1564610627
dimenus
yes, that is correct (mesh loader)

1564610653
dimenus
i have a working 3d scene w/ depth buffer in vulkan

1564610656
dimenus
and now i need meshes

1564610700
scientes
oh, yeah yulkan does its own SIMD/shader compilation

1564610711
scientes
although it actually uses llvm to do it........

1564610721
dimenus
amd wrote another shader compiler

1564610728
dimenus
i haven't tinkered with it yet though

1564610932
dimenus
scientes: I have a local branch with shawnl's vector specific enhancements

1564610935
dimenus
it's worked out well so far

1564610970
scientes
dimenus, type /whois scietes

1564610986
dimenus
ah :D

1564611134
dimenus
scientes: i don't have a link to the specific thread in the llvm mailing list, but they were looking at removing the experimental tag from hadd/hmul

1564611141
dimenus
hadd would be nice for matrix operations

1564611153
nrdmn
what's the correct way to write a C void pointer? *c_void, [*c]c_void or something else?

1564611157
scientes
dimenus, no problem with adding it, but we need a syntax

1564611192
dimenus
scientes:

1564611195
scientes
I guess I could just add builtins and think about that later

1564611224
scientes
oh yeah you def. need it

1564611233
scientes
did you even check if llvm optimizes those?

1564611239
dimenus
it doesn't

1564611247
dimenus
well they're already in xmm registers

1564611253
dimenus
but the adds are one at at time

1564611262
dimenus
the muls work great

1564611270
dimenus
*regular muls

1564611288
scientes
but that could be a vector mul

1564611303
dimenus
it is a vector mul, sorry by regular i meant component wise

1564611308
dimenus
rather than horizontal

1564611311
scientes
just use @splat on the vector eement

1564611320
fengb
nrdmn: c_void or []c_void. [*c] means you don’t know whether it’s an array or singular pointer and generally be used only by translate-c

1564611333
scientes


1564611350
dimenus
huh?

1564611352
scientes
this could be lhs.vecs * @splat(4, rhs.vecs[0])

1564611364
dimenus
why do i need splat there?

1564611370
dimenus
that's a vector / vector mul

1564611372
scientes
to turn 4 lines into one

1564611375
scientes
ohhhh

1564611376
nrdmn
In zig's source code there's plenty of *c_void and one [*]c_void

1564611385
dimenus
look at

1564611401
nrdmn
fengb: c_void is a void. I want a void pointer.

1564611412
fengb
Yeah, I just mean you shouldn’t need to type [*c]

1564611455
nrdmn
[]c_void is a slice of c_voids, I think (?)

1564611473
andrewrk
nrdmn, if you can, try to make an @OpaqueType() specifically for the underlying type. if you need a globally opaque type, consider using the pointer address (usize)

1564611488
fengb
In zig we distinguish singular pointer, c_void is a pointer to an item, and array pointer, []c_void is a pointer to an array of items

1564611517
fengb
Slice is not ABI compatible with C

1564611567
nrdmn
fengb: according to the documentation c_void is a void, not a *void

1564611609
fengb
I think my asterisks are disappearing in this app

1564611613
fengb
Ugh..

1564611640
fengb
Sorry those lines were supposed to have asterisks

1564611660
nrdmn
:D alright

1564611699
fengb
*c_void is a pointer to an item, and array pointer, [*]c_void is a pointer to an array of items

1564611719
fengb
Okay I have extra text now... but hopefully that’s parseable

1564611849
fengb
Both translate into *void in C but they carry a little bit of semantic meaning in Zig

1564611936
ofelas
i'm getting some weird errors with File.openRead,

1564612022
scientes
oh what a load of bollucks

1564612027
scientes
C++......

1564612051
scientes
if you type cast something it does differentiate it on type signatures

1564612071
scientes
what a great language

1564612087
scientes
*typedef

1564612169
mikdusan
it needs a new feature: ACINAE - ambiguous cast is not an error

1564612188
scientes
nice sarcasm

1564612205
nrdmn
andrewrk: what is a 'globally opaque type'?

1564612219
scientes
nrdmn, it means sizeof is not known

1564612226
scientes
we need it because C has it

1564612291
fengb
C can export a struct pointer but never defines the struct. That sort of thing

1564617232
nrdmn
in std/fs/file.zig there are `const`s in a struct. It doesn't seem to be documented that this is possible

1564617332
gonz_


1564617363
gonz_


1564617398
nrdmn
oh right

1564617401
nrdmn
thanks

1564617505
gonz_
NP :)

1564617522
gonz_
Super hard to find stuff atm

