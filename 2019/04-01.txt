1554076813
andrewrk
it doesn't say that anywhere. it's a proposal for improving std.Mutex which is a single-process mutex

1554076846
andrewrk
I think it would help me to approve your work faster if you took some time to explain in more detail what you want to do. I find myself confused a lot when I try to understand what you want

1554076860
scientes
yes, i think that is good advice

1554076887
andrewrk
you're very smart, and impressively quick coder

1554076905
andrewrk
but sometimes it might help to slow down and help everyone else follow along

1554076970
andrewrk
especially when I'm 2061 insertions, 1819 deletions into a bug fix branch and trying to also merge PRs @_@

1554076988
scientes
yes, communication is key to programming

1554077033
mikdusan
for IPC mutex, wouldn’t it be better to model it completely separate from a same-process mutex? it’s a very high-end thing. and i suspect each platform will require some wizard level expertise

1554077079
andrewrk
that's what I was thinking

1554077106
andrewrk
though this robust futexes thing may be some kind of standard that is worth supporting

1554077147
mikdusan
yes like how linux syscalls vs. posix are supported. i think that makes sense.

1554077149
scientes
mikdusan, it won't share any code

1554077149
scientes
I also was thinking of a circular buffer lock

1554077152
scientes
I'll write up a proposal

1554077337
scientes
I wish I could run the test suite without having an open pull request

1554077365
scientes
My laptop is not really that fast, so its easier to run the test-suite remotely

1554077374
mikdusan
andrewrk: unrelated; to current topic; for zig invocation of clang for C code, this is probably how it will work long-term? ie. rely on clang? i ask re: #2046 . wondering if it’s ok to assume -MV (nmake/jom) dep format as opposed to regular make’ish stuff.

1554077395
andrewrk
scientes, do you know about -Dskip-release

1554077407
andrewrk
you can use the --help menu of zig build to see more options

1554077431
andrewrk
for example: ./zig build --build-file ../build.zig -Dskip-release  test-std

1554077483
andrewrk
mikdusan, yes we can rely on -MV, because zig is tightly coupled to LLVM/libclang

1554077526
mikdusan
if u had the choice; would you have a preference between -MV or not? i’ll try to take a stab at a pr for the tokenizer.

1554077698
scientes
mikdusan, the cross-platform Mutex it would have to support the same API so that algorithms could use either, depending on context.

1554078600
andrewrk
mikdusan, you have to use -MV otherwise it generates ambiguous .d files

1554078710
mikdusan
conundrum. clang is always emitting the target name in make/compatible format, with pre-reqs adhering to -MV options.

1554078763
andrewrk
test with small file names, and with file names with spaces. those are the problem cases

1554081007
andrewrk
hryx, loving these zig fmt improvements

1554081042
hryx
thank you andrewrk! Gonna attempt one more today (1269)

1554081090
andrewrk
hryx, I'll post another example on that issue

1554081345
hryx
ooh, good call, I'll make sure that new one is covered

1554084873
scientes
Is there a technical reason that alignment is only u29, instead of u30?

1554084929
andrewrk
scientes, search llvm.org/docs/LangRef.html for "maximum alignment"

1554085040
scientes
there should be a better way than (size + alignment) to get large alignments out of mmap()....but of course there isn't

1554085069
scientes
besides reading all currant mappings from proc

1554085371
andrewrk
yeah it's unfortunate

1554085392
andrewrk
I also would like a way to request a specific address with one size, but if that address cannot be provided then I want a different size

1554085407
andrewrk
for growing a memory mapping

1554085431
scientes
you can do that

1554085445
scientes
just use MMP_FIXED

1554085449
scientes
MAP_FIXED

1554085458
scientes
on the first call

1554085514
scientes
and also use MAP_FIXED_NOREPLACE for safety

1554085561
scientes
MAP_FIXED_NOREPLACE (since Linux 4.17)

1554085622
andrewrk
ah great

1554086310
andrewrk
scientes, this documentation seems to contradict itself

1554086346
andrewrk
the notes for MAP_FIXED_NOREPLACE says that you can use MAP_FIXED on older kernels and rely on the result address to not match the hint address to find out if it failed

1554086360
scientes
yeah i noticed that too

1554086363
andrewrk
but the NOTES at the bottom imply that it would clobber existing mappings

1554093917
hryx
whew... finally finished the last zig fmt PR for tonight

1554114997
forgot-password
Can somebody point me to the implementation of @field in the source code?

1554115059
tiehuis
Interesting mention of zig on this post on rust, in regards to moving towards preferring compile time function over macros:

1554115366
tiehuis
Ahh it is april 1st, seems like this was partly in jest. Seemed reasonable to me on surface. Ha

1554122739
hio
That's actually not nice to make an april fools joke and attack another language in it

1554122749
hio
especially since they are clearly wrong

1554130869
andrewrk
it's fine, it's not necessarily an attack

1554131199
andrewrk
most commented post on

1554132470
fengb_
Half the replies want the stated features. I think it’s just a bad “joke”

1554133122
andrewrk
there's no zig april fools joke today. ain't nobody got time for that shit

1554133405
bheads
But a blog about adding in a GC to zig would be some funny :)

1554133853
mikdusan
in stage1 land, `src/cache_hash.cpp`

1554133878
tgschultz
I don't think stage1 frees at all

1554133884
andrewrk
correct

1554133899
andrewrk
it's a bit of a problem in long-running compile time evaluation

1554133910
andrewrk
the current plan to fix it is to write stage2 :)

1554133935
mikdusan
ok well that’s easy!

1554134123
hryx
Is this supposed to be @panic() while all the others in testing use std.debug.panic() ?

1554134192
andrewrk
hryx, the difference is that @panic would invoke the user's panic override function, while std.debug.panic does whatever std.debug.panic does

1554134206
andrewrk
by default if there is no panic override function then it calls std.debug.panic

1554134249
andrewrk
when using `zig test` there is no way to override panic as far as I remember, so they should be the same

1554134275
andrewrk
@panic is a little bit better in terms of a compile time failure since var args at comptime is still broken

1554134292
hryx
roger that, just wondering if the inconsistency with the other functions in testing was intentional or an oversight

1554134293
andrewrk
in summary it's a bit messy right now, but it's in practice the same

1554134324
hryx
great, very clear explanation

1554134396
andrewrk
I take a breadth-first approach to working on zig

1554134424
andrewrk
so sometimes I have to leave the details to be a bit messy and go work on another big tree branch

1554134445
scientes
I think that is a good way to go about a large project

1554134448
hryx
breadth-first creation

1554134451
hryx
I like it :>

1554134452
scientes
leave the low-hanging fruit for new contributors

1554134461
scientes
so they can get confident in the code-base

1554135039
gamester
I think this is a very important way to remain productive when working on any large project. You wouldn't write a book page-by-page, finishing one before working on the next.

1554135091
gamester
page/chapter

1554135457
bheads
I ran across this old article from Casey Muratori (

1554135498
bheads
I have been trying to do that kinda of coding myself, though I work in java at my day job, kinda hard to avoid over using oop

1554139079
andrewrk
hryx, I wouldn't wish this task upon anyone who didn't for some reason find it incredibly appealing, but one thing that is on the table is rewriting std/zig/parse.zig to use recursion. for context:

1554139113
andrewrk
Hejsil wrote that code when we didn't think recursion would be able to be safe

1554139180
andrewrk
it would be neat to get a benchmark going for the parser for this project. we have no excuses for the stage2 parser being slow!

1554139235
andrewrk
strategies for doing this project could include rewriting the logic, or simply deleting everything and starting over, since we have the grammar neatly documented thanks to Hejsil

1554140324
scientes
andrewrk, I'm doing a bunch of work on the stage2 parser

1554140341
andrewrk
what kind of work?

1554140358
scientes
I make CharLiteral and StringLiteral work

1554140361
scientes
with the new syntax

1554140370
andrewrk
ah that makes sense

1554140374
scientes
and now I'm working on doing circular buffers to stream the input

1554140401
andrewrk
what's the use case for streaming the input?

1554140402
scientes
between reading the file-> validators (utf8 mainly) -> tokenizer -> parser

1554140411
scientes
doing things in parallel ^

1554140425
andrewrk
I see

1554140477
scientes
however there is a major llvm bug on getting the performance as it should be

1554140503
scientes


1554140556
scientes
thats a very difficult bug

1554140621
andrewrk
that's an important issue for llvm to tackle I think. I agree with your reasoning in the bug description

1554141618
scientes
so I think we should have the bit-wise builtins all take a type, in order to prevent having a foot-gun

1554141980
andrewrk
scientes, let me think on that for the rest of today, and then give you an "approved"

1554142089
scientes
I mean, intel syntax doesn't have the type, and you guys seem to prefer that

1554142111
scientes
but you can always do @typeOf() if you really need it

1554145746
Sahnvour
hi all

1554145771
Sahnvour
what do you use for zig dependencies until the package manager comes to life ?

1554145840
scientes
Sahnvour, git submodule

1554145938
Sahnvour
I guess that's a safe default choice, but found them cumbersome on my single experience of them ... maybe that's ok for mini projects though

1554145968
andrewrk
copy paste is not so crazy for now

1554145992
andrewrk
I'll note that's what zig stage1 does with C and C++ code

1554146037
andrewrk
copy pasted code modules will be one of many supported ways to fetch a zig package

1554146106
andrewrk
download an http(s) resource, svn checkout, git clone, file system path

1554146175
andrewrk
alright I'm going dark for a couple hours to try to finish this branch

1554146193
hryx
g'luck

1554148547
mikdusan
can anyone point me to some projects using ugly windows ‘backslash’ pathnames in c or c++ include directives?

1554154316
hryx
oh andrewrk, I just noticed your earlier message about recursion. I'd love to take a look tonight

1554158640
andrewrk
mikdusan, if you use zig to build "hello world" in C, and use --verbose-cc it'll print some .d paths for you to look out. and some of the paths will be MSVC paths

1554158764
andrewrk
I do think it will be worth our time to bring this up with clang developers and find out if backslash can be escaped

1554158989
mikdusan
i wonder if they’d be open to a raw slice-like binary output format with lengths, or even list of nullz strings. -MZ :)

1554159003
mikdusan
but that doesn’t solve our immediate issue

1554159012
andrewrk
I'd be satisfied if the format was lossless

1554159025
andrewrk
it's a pretty low bar

1554159283
mikdusan
here’s trace output of the new tok engaged with a few thousand 1-char and 2-char “header files”

1554159374
andrewrk
your poor filesystem

1554159410
andrewrk
does it work on windows though?

1554159469
mikdusan
not tested on windows/linux yet

