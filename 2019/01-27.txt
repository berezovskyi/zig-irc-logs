1548608216
schme245
yo! new Zig user here, just started playing around with it yesterday, having lots of fun so far :D

1548608251
schme245
one thing that has me stumped so far: when I try to compile this code

1548608256
schme245
const Player = enum {

1548608256
schme245
Cross,

1548608256
schme245
Circle,

1548608258
schme245
fn asInt(player: Player) i32 {

1548608260
schme245
return switch (player) {

1548608262
schme245
Player.Cross => -1,

1548608264
schme245
Player.Circle => -1,

1548608266
schme245
};

1548608268
schme245
}

1548608270
schme245
};

1548608280
schme245
/zig/tictactoe/tictactoe.zig:14:16: error: unable to infer expression type

1548608281
schme245
return switch (player) {

1548608285
schme245
I get this error ^

1548608334
schme245
I've tried to add some casts and whatnot but to no avail, does anyone know how to make it work?

1548608776
forgot-password
Is there a way to express that my functions accepts a slice or an array, without the use of var?

1548609655
donpdonp
schme245: perhaps the return values of the difference cases in the switch are different?

1548609770
schme245
well, one arm returns -1, the other 1, and the function returns i32, so it seems to me that the compiler should be able to figure it out

1548609900
donpdonp
oh i didnt see the switch was in your paste.

1548609926
donpdonp
a function as an enum value? thats new to me

1548610727
schme245
it's pretty neat! it just namedspaces the function so you can call it as `Player.asInt(...)`

1548615612
Flaminator
Schme245 you can use @intCast(i32, -1) or define the values using const one: i32 = 1; const minus_one: i32 = -1; The compiler probably sees the -1 in your code as a comptime_int instead of an i32.

1548615675
schme245
Flaminator: ahh, that explains it, thanks!

1548616246
Flaminator
Pretty sure both of those ways aren't the way it should work though.

1548617118
emekankurumeh[m]
forgot-password:  if you are using the latest version of zig, you can just say it accepts a slice and when you need to pass an array just take the address of it. [here's](

1548617577
emekankurumeh[m]
schme245: have you tried [this](

1548618952
wilsonk
emekankurumeh[m]: you forgot the squiggly braces inside the warn statements double quotes on lines 16 and 17 in your godbolt example ;). (and probably some '\n's also)

1548619040
emekankurumeh[m]
whoops

1548624828
porky11
does zig support some type of compile time lists?

1548624882
porky11
I want to do something like that: fn Multivector(comptime C: usize, comptime B: [C]u32, comptime T: type) type { return struct... }

