1575504023
plumm
same with function arguments; if there is an argument mismatch can't the compiler show me the signature so I don't have to jump to the source to know which place things go?

1575504124
stratact
daurnimator: I'm working on it, thank you for the lua source too. Earlier I just didn't have the confidence and I felt inspired by andrewrk when he made it contributor friendly to learn it more. I also got that book for reference/learning

1575504175
daurnimator
stratact: `man tzfile` is all you need :)

1575504421
stratact
I see what you did there. Thank you :)

1575504508
protty
andrewrk: do you remember how you recorded time spent in functions using `perf`?

1575504570
daurnimator
protty: `perf record`?

1575504616
protty
am getting perf.data and trying to open it with perf report but it doesnt seem to display anything noteworthy

1575504668
daurnimator
protty: -g ?

1575504720
daurnimator
protty: may also want -F 99

1575507290
Flaminator
Is there any specific reason why the `address of` operator is a prefix operator instead of a postfix operator like .* is?

1575507339
daurnimator
Flaminator: I've actually been asking that question myself lately. I think its because a postfix

1575507367
daurnimator
Flaminator: e.g. &foo.bar -> it's not getting bar and taking the address of it; it's changing the "." operator for the current expression

1575507483
Flaminator
Isn't &foo.bar actually foo.bar.&?

1575507618
Flaminator
So you get the address of bar and not foo.

1575507745
daurnimator
Flaminator: but foo.bar might load bar into a register. or make a copy on the stack

1575507862
Flaminator
But wouldn't the end result be the same? a.b has a higher precedence than & has.

1575508110
daurnimator
Flaminator: no. imagine if `foo.bar` made a copy of bar on the stack

1575508670
daurnimator
--> then `foo.bar.&` would be a stack address.

1575508685
daurnimator
rather than the location of `bar` inside of `foo`

1575508727
daurnimator
likewise `&foo.bar.qux` -> the & operator essentially changes the semantics of `.` for the expression.

1575508843
shachaf
lvalues are the weird thing here, not &

1575508882
shachaf
Assignment also "changes the semantics" because x.y = 5 doesn't read the value of x.y.

1575509153
shachaf
The difference, I guess, is that in a.*, a is used an rvalue (i.e. just a value). In &a, a is used as an lvalue (which is really more like a memory location).

1575513834
fengb


1575513855
fengb
seems like alignment is broken for a default 0 size array

1575513882
fengb
Setting it explicitly in the struct body works

1575515256
fengb
It looks like it's due to the recent removal of automatic slice coercion. I'll create an issue

1575516848
daurnimator
fengb: I mean.... your array there is

1575516897
fengb
0 size implies aligned to nothing, yet aligned to everything ðŸ¤”

1575516917
daurnimator
but I did manage to find another bug while playing:

1575516975
fengb
Yeah trying to explicitly align a 0 value crashes the compiler

1575516986
fengb
Probably a divide by 0 error

1575520058
fengb
Wow, the wasm "mmap" is super slow

1575520774
fengb
Oof, I'm glad I ran this memory fuzzer

1575520889
adamkowalski
Can I make the output type of a function be a function of one of the inputs? Assuming that variable is a var

1575520906
adamkowalski
something like fn f(x: var) g(@typeOf(x))

1575520982
daurnimator
yes.

1575521012
adamkowalski
Care to elaborate haha

1575521072
fengb


1575521158
adamkowalski
Huh it's literarly the syntax I posted? I wonder why it wasn't working for me. I'll try again

1575521364
adamkowalski
Also if I have a struct with a compile time parameter how do I get get access to it from outside of that struct?

1575521371
plumm
Foo.bar

1575521397
plumm
compile time parameter being... sorry if i misunderstood

1575521408
adamkowalski
fn Foo(comptime T: type) type {

1575521416
adamkowalski
return struct {

1575521427
adamkowalski
bar: type = T,

1575521427
plumm
ok, wdym outside?

1575521428
adamkowalski
}

1575521431
adamkowalski
}

1575521443
plumm
@typeOf(Foo(usize).bar) ?

1575521488
adamkowalski
bar is a type

1575521491
adamkowalski
it's not a value

1575521498
plumm
ok, so then just access bar directly

1575521516
plumm
you can also use the above if bar's type is computed based on T

1575521522
adamkowalski
Okay I'll post some code on pastebin, because I tried that and it doens't work

1575521574
adamkowalski
Actually I want to do the oposite. I have a graph and it will contain elements of type T. I want to write a free function which takes a graph and a value as long as value can be converted to the element type of the graph

1575521641
plumm
var?

1575521819
adamkowalski


1575521836
adamkowalski
Okay so inside of the graph struct I have something called elementType: type = T

1575521840
traviss
adamkowalski i posted this yesterday in response to your question/patste?

1575521847
adamkowalski
without that line it compiles

1575521899
adamkowalski
traviss: sorry I didn't reply to that earlier. But I am not a fan of that solution. I think it's interesting, however constant is still now a privleged function

1575521935
adamkowalski
People who want to add new functions that modify the graph will not be able to leverage that as the struct is in a library presumably

1575521936
traviss
ok just making sure you saw it

1575521971
adamkowalski
I am not a fan of member functions in general since you cannot crack open the struct and add new ones

1575521980
daurnimator
adamkowalski: you probably want: `const elementType = T;`

1575521983
adamkowalski
So I want what you posted but only using free functions haha

1575522022
adamkowalski
daurnimator: awesome, thanks!!

1575522024
daurnimator
adamkowalski: fields of type `type` need to be comptime known; which means they have to be const; or inside a comptime-only struct.

1575522039
adamkowalski
I was trying the comptime keyword instead of const haha

1575522066
adamkowalski
Man everything in Zig ends up being so clean and simple. Sometimes I feel like I overcomplicate things and the right solution ends up being the obvious thing to try haha

1575522450
adamkowalski
I got it to compile. Is this how you all would approach writing that function? There is some repition with the type deduction:

1575523595
plumm
andrewrk:

1575525039
daurnimator
plumm: looks.... coarse

1575525119
plumm
i use it for lumbar support

1575530364
muffindrake
I was told by andrew that something were something interesting hitting zig on Dec 1st. What was it?

1575534650
FireFox317


1575535118
mq32
FireFox317: Foone is a general recommendation for computer nerds :D

1575535220
FireFox317
Yeah I'm figuring that out xd, quite new to computer nerds twitter world :P

1575535311
mq32
hehe

1575535328
mq32
btw, it's a quite fun experience to actually program a computer by punching in bits by hand

1575535454
FireFox317
You did that too? Working on microcontrollers is a bit like that, changing bits by bits

1575535496
mq32


1575535507
mq32
i programmed that machine a bit (literally the thing on the photo)

1575535547
mq32
it's a quite cool architecture to code, but the machine we (i'm a bit with the computer museum) have has some glitch that will make the core memory lose its contents :(

1575535574
mq32
also, if you ever come to stuttgart: visit the computer museum!

1575535627
FireFox317
Owh, that's a nasty glitch indeed XD But the computer looks so cool tho!

1575535639
mq32
yeah that's why i wanted to hack some stuff with it :D

1575535645
mq32
but i failed at a "better" bootloader

1575535681
FireFox317
Yes! I'm only 6 hours from stuttgart, so will probably be there some time :)

1575535716
mq32
:D

1575535718
mq32


1575535724
mq32
that's the assembler i wrote

1575535731
mq32
there's a opcodes.txt where you can look up the instruction set

1575535959
FireFox317
I see, only 82 lines compared to the 2,034 of x86-64 :)

1575536263
FireFox317
I'm wondering how many of these instructions are actually used xd

1575536963
mq32
hehe

1575536986
mq32
i really like how they made the instruction encoding :D

1575537041
mq32
you have variable-sized operands depending on the most significant nibble of the instruction

