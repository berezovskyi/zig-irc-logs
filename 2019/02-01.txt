1548979228
andrewrk
kristate, I should be getting through your PRs soon! thanks for the patience

1548979325
kristate
andrewrk: after CE backport, a number of crypto related tests at work have triggered test asserts

1548979358
andrewrk
hmm that's good to know

1548979378
andrewrk
any test cases you can make public?

1548979383
kristate
andrewrk: yeah, trying to get to the bottom of it

1548979404
kristate
I am glad that you found the timeval stuff, too

1548979417
andrewrk
yeah that's been a long standing issue

1548979421
kristate
in our branch, we have const time_t

1548979434
kristate
and on darwin time_t maps to c_long

1548979445
andrewrk
got it

1548981302
kristate
andrewrk: X catch unreachable seems to trigger linker errors on macos

1548981329
kristate
that is, it generates malformed mach-o

1548981365
andrewrk
hmm, that expression is covered in behavior tests

1548981389
kristate
andrewrk: yeah, it's weird because it only pops-up ever so often

1548981435
andrewrk
if you have an .o file that reliably causes the error can you try linking with the system linker, to see if it's a problem with linking?

1548981461
kristate
andrewrk: good idea, I will check with verbose-link

1548981492
andrewrk
the poor quality of LLD's mach-o code is one of the main reasons for

1548985414
diltsman
Does anyone know if one of the assembly compiler_rt functions has been ported over?  I would like to look over an example before I try porting some of the ARM routines.

1548985751
andrewrk
diltsman, I believe there is some inline assembly in std/special/compiler_rt/index.zig

1548985981
diltsman
So, __eabi_memcpy4 and __eabi_memcpy8 just call memcpy.  Suggestions on what to do instead?  I suspect some assembly.

1548986043
andrewrk
I think you should be able to port the compiler_rt source from LLVM directly

1548986046
andrewrk
any reason not to?

1548986080
diltsman
The src is "b memcpy"

1548986171
diltsman
Slightly more compliecated than that, but basically that.

1548986172
andrewrk
sounds like we should port that assembly directly

1548986209
andrewrk
I'll be back in a bit

1548986287
diltsman
Doesn't that just call the C function memcpy?  We don't want a dependency on libc, right?

1548986373
andrewrk
LLVM code generation always has a memcpy dependency

1548986385
andrewrk
that's why we provide it in std/special/builtin.zig

1548986397
andrewrk
zig automatically builds it when you do build-exe or build-lib

1548986861
diltsman
Ah!  Didn't realize that.  That simplifies things greatly.

1548986899
diltsman
Should I make an arm directory in std/special/compiler_rt to match the directory layout of compiler_rt?

1548987171
strmpnk
andrewrk: I caught the stream for a short while earlier but had to leave a bit early. re streaming topics: It'd be interesting to hear some discussion about various things you're leaving out of Zig and why.

1548987172
strmpnk
I'm sure common ones come up like affine types (Rust comparisons in general), Jai comparisons too perhaps. But also various aspects of generics, macros, etc that you think compile time execution takes care of instead.

1548987356
strmpnk
(and if some of this is covered in many streams that I've missed, I'd be happy to see some pointers at videos+time ranges or articles. Perhaps we could all work on creating a topical index into the streamed content.)

1548987516
kristate
andrewrk: still online?

1548988711
daurnimator
andrewrk: catching up on the stream now. I think the package manager issue needs to be split as it won't be all done in the current milestone.

1548989117
daurnimator
and agreed that waiting on networking stuff before the coroutine rewrite is done is a bad idea. even blocking networking should probably wait for it.

1548989126
daurnimator
s/waiting/working/

1548989209
daurnimator
heh.

1548989994
kristate
daurnimator: got a link?

1548990005
daurnimator
kristate: to?

1548990016
kristate
daurnimator: your proposal

1548990108
kristate
I am generally against committing any blocking networking -- the stopgap should be an event runtime, but I am generally against that too

1548990158
andrewrk
diltsman, an arm directory sounds good

1548990173
andrewrk
strmpnk, noted, thanks!

1548990198
andrewrk
hi kristate

1548990208
kristate
andrewrk: hello good sir

1548990256
daurnimator
kristate:

1548990261
andrewrk
kristate, I believe daurnimator is referring to

1548990267
andrewrk
:)

1548990272
kristate
andrewrk: daurnimator: thanks

1548990341
emekankurumeh[m]
will we get tls in 0.4.0 or will that come in 0.5.0?

1548990359
daurnimator
emekankurumeh[m]: tls being thread local storage?

1548990363
kristate
andrewrk: so, what is the zig best practice for zeroing a variable on stack when defined? []u8{0} ** len ?

1548990384
emekankurumeh[m]
daurnimator: yeah

1548990399
kristate
I like that undefined sets memory to 0xAA on debug mode

1548990557
diltsman
andrewrk: Will I need to do anything anywhere else to get it to pick up the files in compiler_rt/arm?

1548990585
andrewrk
kristate, ah yes, I wonder if those are your crypto failures. It was actually a bug that debug mode

1548990625
emekankurumeh[m]
diltsman: make sure to add them to the CMake file

1548990630
andrewrk
emekankurumeh[m], I think we can have Thread Local Storage in 0.4.0. it's a small enough change

1548990760
kristate
andrewrk: yes, I am glad that was fixed

1548990857
andrewrk
kristate, for initializing aggregate data structures, the official recommendation is to explicitly initialize all fields

1548990878
andrewrk
for arrays, `[]T{x} ** len` as you mentioned is recommended

1548990914
andrewrk
of course you can always drop down to a @memset if you need to do something other than what is officially recommended (perhaps when using a C API)

1548990967
kristate
yeah, currently secure_zero does something like that -- but I think it is rather aggressive

1548991219
emekankurumeh[m]
would there be any penalty in making all globals threa local by default?

1548991681
andrewrk
yes

1548991689
andrewrk
first of all it's semantically incorrect

1548991711
daurnimator
emekankurumeh[m]: see

1548991721
andrewrk
or at least semantically different; it can be subjective which is a better default and I am personally in the status quo camp

1548992377
kristate
tls should be defined not given

1548997489
scientes
kristate, secure_zero uses a memset AND somehow tells the compiler not to optimize it

1548997531
scientes
like explicit_bzero()

1548997841
kristate
scientes: wed

1548997854
kristate
scientes: we don't have anything to tell the compiler not to optimize it yet

1548997981
emekankurumeh[m]
have you guys seen github actions:

1548998009
emekankurumeh[m]
could be useful for running `zig fmt` after a merge or push

1549023019
schme245
is there a function in the std lib for printing the contents of an array/slice, not the type@address?

1549023711
MajorLag
schme245: []u8 should print as a string automatically, but any other type you need to do something like: `for(slice) |e| debug.warn("{},", e);`

1549023777
MajorLag
unless someone added a fmt switch for it... which may have happened.

1549023785
schme245
ok. that is simple enough to write, but do you think something like this would be considered as a format string?

1549023811
schme245
so you could write `warn("{a}", arrayOrSlice)` to get the same effect with some nice brackets to boot?

1549023993
MajorLag
yeah, that'd be a relatively straight forward addition to std.fmt, but it doesn't look like anyone has done it yet. Probably because we're planning on redoing std.fmt:

1549024397
schme245
cool, I'll shot a PR for it tonight and we'll see what happens

1549046124
andrewrk
hmm I need to define what happens when you try to @bitCast(u4, u8(x))

1549046338
halosghost
andrewrk: you mean whether it becomes the high nybble or the low nybble?

1549046352
halosghost
or do you mean something else?

1549046369
andrewrk
well right now it causes undefined behavior in LLVM IR codegen, so that's a problem

1549046382
halosghost
haha

1549046385
halosghost
yes, that's not good :)

1549046411
andrewrk
didn't mean to make them evenly divisible. also a problem is:  @bitCast(u7, u8(x))

1549046453
andrewrk
I think I will make it a compile error for now

1549046541
halosghost
the compile error being @bitCast'ing a thing to a wider target type?

1549046554
halosghost
or a smaller target type? (it's been a sec since I looked at @bitCast)

1549046604
andrewrk
to a smaller one

1549046632
andrewrk
it already gives an error if the @sizeOf's don't match. but @sizeOf(u7) == 1, so the analysis didn't catch it

1549046711
andrewrk
@sizeOf is "store size" - how many bytes you need to store the type. but for @bitCast to work the bit size has to match

1549046750
andrewrk
maybe we need @bitSizeOf

1549046772
andrewrk
since we have @byteOffsetOf and @bitOffsetOf

1549046913
MajorLag
we also should make a clearer distinction between "store size" and "aligned size", but we've already talked about that regarding arrays.

1549046963
andrewrk
yeah, I don't think that is resolved yet

1549047101
MajorLag
in #1851 kristateÂ added an @alignedSizeOf

1549047166
andrewrk
ah right. I'll have a look at that one next

1549047535
andrewrk
MajorLag, in Deserializer.deserializeInt, what's supposed to happen regarding endianness when T == u7?

1549047587
andrewrk
do we want the logical big end, logical small end, or does it depend on builtin.endian?

1549047949
MajorLag
I believe it would always take the 7 least significant bits in byte-packed mode. I'll have to look at the code quick to refresh my memory.

1549047989
andrewrk
ok cool, I'm pushing a small fix to master branch in a sec

1549048080
andrewrk
MajorLag, does this look ok?

1549048421
MajorLag
Yeah, I think so.

1549048659
MajorLag
I'm surprised we can get away with not marking `endian: builtin.Endian` as comptime though.

1549048676
MajorLag
in the Serializer/Deserializer generators.

1549048696
andrewrk
yeah. I must have made it implicitly comptime, but there should probably be an error for that

1549048710
andrewrk
I bet if you call the function with a runtime value (and parameter not marked comptime) it crashes

1549048822
andrewrk
nope, no crash. it implicitly marks parameters comptime when the return type is a comptime type

1549048852
MajorLag
ah, that makes sense. we didn't always do that though did we? probably how I got into the habbit.

1549048905
andrewrk
that's something we can decide: * embrace implicit comptime parameters and make it an error to redundantly specify, or * embrace explicitly labeling comptime and make it an error if you forget to do it

1549048938
MajorLag
I'm not even sure which way I lean on that.

1549048957
andrewrk
me either, which is why it lets you do either way for now

1549062737
daurnimator
andrewrk: is making atomics... not, really a good choice?

1549062764
daurnimator
andrewrk: e.g. what if you're reading from a buffer shared with the kernel or an external (DMA) device?

1549063660
andrewrk
daurnimator, volatile is for DMA

1549063685
andrewrk
can you elaborate on the other case?

1549063709
andrewrk
a comment on the issue would be good - I gotta run

