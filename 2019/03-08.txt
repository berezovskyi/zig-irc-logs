1552019125
andrewrk
I broke some zig build stuff in master branch - will fix tomorrow

1552063188
Hejsil_
andrewrk, The only place I can find where it would seem that we init a type with one possible value is in ir_analyze_container_field_ptr

1552063204
Hejsil_
If OnePossibleValueYes, then ir_const(ira, source_instr, field->type_entry)

1552063264
Hejsil_
As far as I can see, ir_const just 0 allocates and then sets value.type = type and value.special = ConstValSpecialStatic

1552063309
andrewrk
Hejsil_, oh you know what - this works because memset BigInt to 0 is correct

1552063326
andrewrk
so in fact if OnePossibleValueYes, then no further initialization is required

1552063350
Hejsil_
I'll add the type_has_one_possible_value check and then do the thing then

1552063366
andrewrk
and then I'm guessing you'll get a compile error? but that should be one step closer to correct behavior

1552063393
andrewrk
I'm working on the master branch CI failures - sorry for jumping the gun

1552063408
andrewrk
the good news is that zig build system is about to have full and correct caching support :)

1552063444
Hejsil_
Nice :)

1552063558
andrewrk
the zig package manager pieces are starting to come together... the next piece of the puzzle is event-driven networking support in userland (which depends on non-allocating coroutines, which depends on no-copy-semantics part 1a)

1552063677
Hejsil_
Looking forward to the blog post about all this. You seem to have a good idea about how all of this will come together, and git submodules are starting to annoy me

1552063987
andrewrk
yes, and dependencies of dependencies are very awkward right now

1552067851
emekankurumeh[m]
andrewrk: have you seen mio for rust? would the event based io in

1552067852
emekankurumeh[m]
zig be similar to that?

1552068778
andrewrk
emekankurumeh[m], it will be what we already have in std/event/* except with better coroutine semantics

1552069390
emekankurumeh[m]
does std.event use iocp on Windows or does it use overlapped io

1552069450
andrewrk
iocp

1552069475
andrewrk
I'm pretty sure those concepts are not mutually exclusive

1552069584
wrl
you can do overlapped without iocp

1552069597
wrl
not sure you can do iocp without overlapped

1552069888
emekankurumeh[m]
I meant just overlapped to without iocp.

1552075914
Akuli
currently, to run all tests i do:  zig test tester.zig --library c --library foo --library bar

1552075921
Akuli
where tester.zig is a zig file that imports all the files

1552075930
schme245
there is one common situation in Zig where the "Only one obvious way to do things" is not clear to me: declaring variables integer types

1552075934
Akuli
can i have 'zig build test' or something?

1552075952
schme245
`const x: u8 = 0` works, and so does `const x = u8(0)`

1552075960
schme245
I'm always unsure of which one is preferred

1552075969
andrewrk
schme245, they are semantically identical

1552075976
Akuli
i use the first one because it also works with other types than integers

1552076035
andrewrk
I would say prefer the former for now, but this is a known "more than one way to do things" violation as you mentioned, so maybe this will change in the future

1552076055
very-mediocre
Is it really a violation? The former is more "obvious" imho

1552076070
schme245
sounds good, just wanted to throw it out there to see if it had been discussed

1552076089
Akuli
the latter is more obvious if you have never seen the former syntax, but you have seen the () conversions

1552076091
andrewrk
related issue:

1552076113
very-mediocre
Akuli: you called it a conversion, to me that betrays that it's a non-obvious form

1552076142
Akuli
i don't know what the correct word is in zig, but i think of it as converting the comptime_int 0 to an u8

1552076152
Akuli
u8(0)

1552076170
andrewrk
currently the docs call this "implicit cast":

1552076258
very-mediocre
Not to split hairs, but you could argue both forms are obvious ways of doing different somethings

1552076273
very-mediocre
the former being an obvious way to do it implicitly, the latter explicitly.

1552076283
very-mediocre
This feels like a Seinfeld conversation.

1552076341
very-mediocre
At the risk of entering into "Was it a shimmy? I think it was more of a tumble" conversation territory, what's a "something" in the context of there being an obvious way to do something

1552076380
andrewrk
the idea is that two people who solve the same problem, end up writing roughly the same code

1552076450
andrewrk
encouraging code reuse and code sharing

1552076462
very-mediocre
ok, so I have just descended us into pedantry then

1552076590
very-mediocre
btw andrewrk, is there a non-patreon way to give you a donation?

1552076649
very-mediocre
I really like this project and wanna pitch in

1552076688
andrewrk
soon, I'll have a charitable non profit foundation

1552076729
andrewrk
dedicated to advancing zig and its associated tools, teaching best practices system programming, and in general encouraging more widespread adoption of higher quality software

1552076787
very-mediocre
sounds good.

1552079124
kristate
andrewrk: that's good news -- we already have 5 paid programmers working on zig related technologies at connectFree. If anyone wants a job hacking on zig, we pay about 1,000,000 JPY a month, which is around 10k USD

1552079294
kristate
andrewrk: connectFree also has interest in becoming a ground member of your foundation, so please keep us in the loop

1552079312
andrewrk
kristate, glad to hear that. will do!

1552079829
Akuli
i wonder what happens if zig now gets lots of non-backwards-compat changes D:

1552079846
halosghost
Akuli: I mean, it's version 0.3

1552079855
halosghost
it's not exactly meant to be long-term-stable, yet :)

1552079860
andrewrk
Akuli, there are lots of breaking changes planned

1552079862
Akuli
but if it's actually being used somewhere

1552079879
Akuli
even though it's 0.3 and it has been changing a lot in the past

1552079883
halosghost
it shouldn't be used in-production by anyone who isn't willing and able to update their code frequently

1552079893
andrewrk
^

1552079895
Akuli
ok that's what i thought

1552079903
halosghost
honestly, it may be better to just say “it shouldn't be used in-production yet”

1552079916
halosghost
it depends on the cost-benefit calculation at your place of work

1552079930
halosghost
but, despite how interesting and exciting Zig is; it's not quite ready for prime-time yet imho

1552079969
andrewrk
1.0.0 will be the first production ready release

1552079975
halosghost
makes sense

1552080008
halosghost
andrewrk: so, now that arbitrarily-sized, fixed-width integers are a thing; what do you think about arbitrarily-sized, fixed-width floats? :P

1552080018
halosghost
(noting that llvm doesn't actually support those)

1552080036
halosghost
(though, I suppose arbitrarily-sized, fixed-width posits are actually accomplishable)

1552080057
andrewrk
is there actually a use case for that?

1552080071
halosghost
well, for posits, yes

1552080086
Akuli
how do i write this so that this works and is not horribly unidiomatic

1552080103
halosghost
it's the same as for arbitrarily-sized, fixed-width integers (asfw from here forward because I'm lazy): steadily-increasing precision / representable range

1552080107
halosghost
for floats? probably not

1552080112
Akuli
mpz_get_str(buf, ...) doesn't work because buf is not a c string

1552080133
halosghost
and floats would be really hard to do actualy (particularly if you wanted to match the standard's sizes for the predefined sizes since they don't actually match any sane algorithm afaik)

1552080159
halosghost
though, to be fair, they'll be implemented on top of integers anyway, so asfw posits would be for-free

1552080226
andrewrk
Akuli, we have std.mem.len for that strlen at the bottom

1552080257
Akuli
but how about the c string thing? now it says:  error: expected type '[*c]u8', found '[]u8'

1552080259
andrewrk
std.mem.len(u8, buf.ptr)

1552080277
andrewrk
you can get from a []T to a [*]T by using `.ptr`

1552080293
Akuli
is [*]u8 close enough to [*c]u8?

1552080318
andrewrk
yes, [*c]u8 is the cowboy pointer, it casts to and from all other pointers

1552080343
Akuli
is it c as in cowboy?

1552080347
Akuli
not c as in the programming language

1552080350
halosghost
andrewrk: tangentially related: I don't believe I've properly freaked out enough about how awesome it is to have a separation between pointer-to-item, pointer-to-bounded-aggregate and pointer-to-unbounded-aggregate

1552080355
halosghost
andrewrk: I love that

1552080382
Akuli
anyway thanks :) now that part of my code seems to be compiling without errors

1552080386
andrewrk
Akuli, happy coincidence :)

1552080422
andrewrk
this can't be repeated enough... there is never ever a reason to type [*c] into your keyboard. The only use case, no exceptions, is auto generated zig code

1552080434
halosghost
lol

1552080464
halosghost
andrewrk: out of interest, is there not a way to make that construct only valid in internal code?

1552080510
andrewrk
i've been considering making "none" a special C ABI that outlaws all the c types, @cImports, C pointers, and C strings

1552080541
andrewrk
it still makes sense for [*c] to be in user code because they might have used translate-c and have not fully ported the result yet

1552080575
halosghost
ahh, I see

1552080976
andrewrk
halosghost, one of my goals is to propose an extension to .h files to encode pointer-to-item, pointer-to-bounded-aggregate and pointer-to-unbounded-aggregate information

1552080991
andrewrk
and get clang/gcc to adopt a new warning for them, so that C programmers start using the annotation

1552081000
andrewrk
which will benefit zig users doing @cImport

1552081012
andrewrk
plus zig generated .h files could have these annotations

1552081610
halosghost
andrewrk: having that added to C would be amazing

1552081756
halosghost
who knows; maybe with the proposal for C2x to remove the unfortunate requirements of {u,}intmax_t so that we can have types greater than 64-bits on supported platforms, we can get asfw integers in C

1552081760
halosghost
that would be astounding

1552081780
halosghost
though, I still really want a structured way to achieve overflow handling

1552081794
halosghost
^ that's the main proposal I want to put in front of the C committee

1552082335
andrewrk
I've always thought it was silly that unsigned and signed ints have different overflow behavior

1552082400
halosghost
I understand why it is the way it is

1552082407
halosghost
and I don't begrudge the history

1552082420
halosghost
but I'm definitely not happy that there isn't a structural way to control it

1552082442
halosghost
namely, I want to be able to say, “for this block of code, I want overflow to result in saturation”

1552082453
halosghost
and control both signed and unsigned independently

1552082462
halosghost
okay

1552082464
halosghost
o/

1552088427
ganderzz
Having some cross-platform issues. When running tests on Windows the following code passes, but on OSX it fails on the first test. Is this a compiler issue, or just my own weird code? :) (

1552088669
andrewrk
ganderzz, I can take a look in a bit

1552088771
ganderzz
Thanks!

1552088786
andrewrk
you could try running your code in valgrind

1552088797
schme245
is it supposed to be possible to get "access of inactive union field" when you're doing a switch over a tagged union?

1552088849
andrewrk
schme245, I believe that's what currently happens if your union memory is corrupt. I'd have to double check

1552088882
andrewrk
it's not supposed to be possible if your value is defined

1552088899
schme245
it wouldn't surprise me in the slightest if I have corrupted the whole thing somehow :D

1552088910
schme245
first time doing recursive structs/unions

1552088976
schme245
I'm pretty sure it's my code, but if not I'll try to make a minimal repro and open an issue

