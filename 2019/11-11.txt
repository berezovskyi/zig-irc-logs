1573432820
daurnimator
The windows failure in CI for

1573437868
andrewrk
I believe it

1573440672
daurnimator
andrewrk: hmmm? "The following command exited with error code 3221225477: D:\a\1\s\build\dist\bin\zig.exe test D:\a\1\s\test\stage1\behavior.zig --library c --test-name-prefix behavior-aarch64-linux-musl-Debug-c-multi  --cache-dir D:\a\1\s\zig-cache --name test -target aarch64v8_5a-linux-musl --override-lib-dir D:\a\1\s\lib"

1573440724
andrewrk
that's not a particularly helpful error message is it

1573440958
andrewrk
appears to be EXCEPTION_ACCESS_VIOLATION. not sure what that means

1573441037
andrewrk
oh, that's a segfault

1573441057
andrewrk
hmm I thought we had segfault handlers set up for windows

1573450781
daurnimator
andrewrk: still around?

1573459370
Snektron
What's the difference between @as and @cast?

1573466627
mq32
hello people :)

1573466720
mq32
pixelherodev: my "kernel" has some nice progress:

1573466827
daurnimator
mq32: nice

1573466860
mq32
writing a good text editor is pain

1573467458
daurnimator
indeed

1573467489
mq32
btw, that editor is what i needed the allocator for :D

1573467521
daurnimator
hell even a good terminal UI library is super hard

1573467576
mq32
oh yeah

1573467589
mq32
and i

1573467598
mq32
@setRuntimeSafety(false); assert(dest.len >= source.len);

1573467609
mq32
that assert should never trigger as the compiler doesn't check for unreachable

1573467611
mq32
or am i wrong?

1573467643
daurnimator
sounds about right :P

1573467652
daurnimator
I know scientes has a PR open at the moment for mem.copy

1573467793
mq32
if i have some motivation, iÃ„'

1573467802
mq32
I'll do some stdlib documentation the next days

1573467808
mq32
there's still a lot missing or could be better

1573468587
Sahnvour
playing with async, am I doing something wrong here ? The output of @frameSize is unexpected

1573468640
mq32
Sahnvour: this is 0x9090909090909090

1573468645
mq32
i think this is rather unexcpected

1573468761
daurnimator
Sahnvour: what arch? I get: 8658703, 48 74900186333184, 32

1573468819
mq32
8658703 same here, x86_64-linux

1573468845
Sahnvour
windows

1573468859
Sahnvour
x64

1573468888
Sahnvour
both values on each line should be equal, as the doc states, right ?

1573468963
daurnimator
Sahnvour: oh. you found a bug

1573468971
daurnimator
Sahnvour: @frameSize() doesn't take arguments

1573468977
daurnimator
it returns the size of the

1573468991
Sahnvour
actually it does, even if the doc says otherwise

1573468995
daurnimator
its an error that it doesn't throw an error for invalid number of arguments

1573468996
Sahnvour
doesn't compile without argument

1573469186
Sahnvour
that's what I suspected first :) seems there's a bug somewhere

1573469240
daurnimator
hrm yeah; the tests in std lib pass a value

1573469254
daurnimator
either way sounds like a bug to file

1573469473
Sahnvour
doing it

1573473979
daurnimator
wow std/debug.zig really needs tidying up.

1573474012
daurnimator
I already did some in

1573474027
daurnimator
I'm hesitant to go too far without having that re-reviewed first

1573474128
daurnimator
hell right now I can't figure out how openSelfDebugInfoPosix even works

1573474175
daurnimator
oh..... is `S` essentially a "static" variable? oh god

1573477337
daurnimator
so other than a bit of a hatchet job in std/debug.zig; this is going quite well

1573477344
daurnimator
heaps of little usability improvements all around the place

1573477440
daurnimator
really speaks well of zig that this has been possible the whole time; it just had to be discovered

1573478091
daurnimator
andrewrk: This commit

1573478137
daurnimator
std lib tests pass on my machine :)

1573478191
daurnimator
stupidly I did it on top of my open PR #3644; so I won't send a draft PR for this new code until that is merged or closed

1573480576
via
daurnimator: i haven't been keeping up, but how does your change affect using streams with async read functions?

1573487138
fengb
daurnimator: could this replace runtime interface pointers too?

1573487586
andrewrk
mq32, wow, cool demo!

1573487711
fengb
andrewrk: so all initialization will use anonymous syntax?

1573487931
andrewrk
yes

1573487981
andrewrk
`Foo{.a = b}` becomes redundant syntax

1573488258
mq32
andrewrk, thanks :) will get even cooler!

1573489712
mq32
daurnimator: nice thing with mixin!

1573489738
mq32
fengb: probably not as mixins don't have a common pointer type

1573489793
andrewrk
daurnimator, nice, I'll check this out soon

1573489820
andrewrk
this could be an important step in making the std lib integrate better with evented I/O for writes

1573489893
mq32
coolest thing about the mixin style is that you don't have the error problem anymore :)

1573490057
andrewrk
it removes a runtime-known function pointer call, which is a big deal in zig

1573490082
andrewrk
it's not obvious yet but it also avoids issues with stack overflow

1573490168
mq32
yeah, but if i'm right you loose the ability to make

1573490245
andrewrk
I believe that works fine, but you will have to use `input_stream: var` to accept the pointer as a parameter

1573490301
mq32
yeah

1573490316
mq32
but: my "size bloat" sense tingles

1573490334
mq32
as with this, any function call with a differnet stream type gets instantiated seprarately

1573490451
andrewrk
I agree, that is something to consider

1573490508
mq32
it's a big problem in C++ with templates

1573490521
fengb
With mixins: I've had issues in the past tracking down where they come from. Could we have something like namespaced methods?

1573490525
mq32
at work i have a badly optimizing compiler (means: no LTO or comdat folding)

1573490535
mq32
the executables for

1573490537
andrewrk
I've had the same problem as fengb before

1573490696
mq32
i still think #2938 is a nice approach on this whole object oriented/interfacy thing

1573490919
mq32
how well does something like this optimize?

1573491201
dimenus
is this suppsoed to be valid zig?

1573491238
andrewrk
dimenus, yes

1573491255
andrewrk
and with the anon struct literal syntax that is coming soon that will become actually usable in practice

1573491269
mq32
â™¥

1573491275
mq32
i'm using this with enums already

1573491279
mq32
it's great

1573491285
mq32
"oh, i need some two-state local variable"

1573491287
dimenus
andrewrk: ah, yeah i was struggling with the utilization syntax

1573491291
mq32
var foo : enum { a, b } = .a;

1573491315
mq32
do we already have an issue on switch() => comptime_int ?

1573491332
fengb
enum {  .true, .false, .filenotfound } ðŸ™ƒ

1573491337
mq32
fengb: +1

1573491350
mq32
it's really annoying to cast each switch prong to the target type

1573491352
fengb
I think this is a peer cast failure:

1573491356
mq32
especially if the target type changes

1573491393
andrewrk
something that I think will become a common pattern is:  fn foo(args: struct {a: i32 = 1, other: enum{enable_thing, disable_thing} = .enable_thing}) void { ... }

1573491460
andrewrk
fengb, I'll solve this soon:

1573491516
mq32
is it okay to spice up my code with `// BAH, FOOTGUNS`? :D

1573491533
fengb
Ah okay

1573491565
fengb
I think this might be an indirect symptom but it may be fully addressed with that fix

1573491595
fengb
Geez, this release cycle is fixing everything :D

1573491639
mq32
i thought the same thing right now

1573491654
mq32
0.6 will be a good thing. stability fixes are nice :)

1573492461
andrewrk
the sooner the language is stabilized, the sooner self-hosted can be a thing

1573492512
dimenus
is the anon struct literal syntax planned to land soon?

1573492518
dimenus
I might just shelve this until then

1573493113
andrewrk
dimenus, it's going so well, I think I can merge it today

1573493162
andrewrk
at least the part when there is a result location. the part where it infers a type based on the literal values has some problems to solve

1573493372
mq32
andrewrk: is there a way to query if an async function frame is "finished"/"resumable?"

1573493517
andrewrk
mq32, no, if you need that then you are probably trying to make generators out of async functions, which is a bit of a mismatch for the semantics that async functions provide

1573493535
andrewrk
however, actual generators are a possibility

1573493547
fengb
Heh, I wrote an issue for this for making generators >_>

1573493575
mq32
i can still implement that with a simple "wrapper call" which is fn(finished:*bool) void { actualFunction(); finished.*=true; }

1573493588
andrewrk
the very short summary is that `suspend` and `yield` are fundamentally different concepts, and you might want an async generator

1573493609
mq32
but if i'm right that information

1573493623
mq32
nah i was thinking of your async chat demo

1573493657
andrewrk
it is but using it in the way you want to would be a race condition

1573493661
mq32
right now i have no idea how to remove the frame from the set without deleting the frame that is currently running or introducing some kind of "runtime list" with "stuff to delete later"

1573493670
andrewrk
assuming the async function participated in a thread pool event loop

1573493911
mq32
why that?

1573493939
andrewrk
because you're checking if it is resumable or not, but another thread may be in the process of resuming it

1573493957
mq32
ah

1573493963
andrewrk
each `suspend` corresponds to a `resume` that has to be coordinated somehow

1573493969
mq32
"resumable" was the "wrong" thing then

1573493975
mq32
"finished" is the more correct term

1573493981
mq32
so, if it's not possible to resume it anymore

1573493989
mq32
(because then no thread can resume it anyways)

1573494025
andrewrk
with "finished" the question is where should this bit live? if it's inside the frame, that's problematic because maybe the frame's memory is gone when it is finished

1573494046
andrewrk
it could work, but not generally

1573494070
andrewrk
what are you trying to do?

1573494080
mq32
understand async

1573494086
mq32
i should probably read the event loop implementation

1573494144
mq32
i understood the basics of resume/suspend, but not what "await" does in detail

1573494211
mq32
<andrewrk> what are you trying to do?

1573494217
mq32
my though is something like

1573494229
mq32
"spawn 100 async render functions" and await them in the order they finish

1573494232
andrewrk
`await` suspends and gets resumed by the awaitee when it returns

1573494252
andrewrk
if you're awaiting all of them, the order you await them in doesn't matter

1573494297
andrewrk
mq32, have you seen this repo yet?

1573494316
andrewrk
check out sieve first and then factorial

1573494361
andrewrk
the factorial one demonstrates how you can take advantage of await to clean up the code

1573494435
mq32
maybe i still think too "thready" for async/await

1573494597
andrewrk
think of them as functions that you can start at one callsite and finish at another one

1573494629
andrewrk
I realized the concurrency model is a lot like go's

1573494634
andrewrk
except if goroutines had return values

1573494758
mq32
hm

1573494786
andrewrk
wow, working on the self-hosted parser with the new anon struct syntax is an absolute joy

1573494794
mq32
that's good to hear :)

1573494795
andrewrk
it's way easier to refactor code around

1573494814
fengb
Goroutines also pretend like theyâ€™re like threads

1573494831
andrewrk
yeah that's a difference. goroutines have stacks

1573494854
mq32
oh that was a question i had

1573494869
mq32
will it possible to "remove" stuff from the frame with noasync?

1573494915
fengb
They also have auto inserted suspend points

1573494936
andrewrk
`noasync` is an assertion that the async function will not end up suspending at runtime

1573494989
mq32
hm, then i have discovered a bug when playing around

1573495000
mq32
because i tried to call a sync function and the compiler wanted to have an @asyncCall for that

1573495007
mq32
(sync function pointer)

1573496232
andrewrk
nice find, mq32

1573500153
dimenus
andrewrk: just an fyi, this code doesnt' compile under your current branch:

1573500172
dimenus
i realize you're still working on the branch, just through I'd point it out

1573500201
andrewrk
dimenus, the anon struct literal branch?

1573500207
dimenus
yep

1573500238
andrewrk
if you have a test case that passes in master but regresses in the branch, please do share

1573500255
dimenus
ok, let me clean this up a second

1573502186
dimenus
andrewrk:

1573502333
andrewrk
dimenus, I believe this is actually a bug fix. you're missing const on []VertType

1573502371
dimenus
awesome, thanks

1573502454
andrewrk
good point though, I should add a compile error test for this

1573502872
andrewrk
mq32, can I (or you) post your video demo to /r/zig?

1573504630
dimenus
i'm really digging being able to use anon struct/union literals

1573504752
andrewrk
ha, grabbed the branch already?

1573504917
dimenus
yep, i'm working a basic abstraction layer over vulkan and I want to be able to just pass a description struct

1573504925
dimenus
your branch makes filling that out more 'C' like

1573505096
dimenus
are you planning on deprecating `var foo = Foo { .a = 42 }` as well?

1573505133
andrewrk
yes

1573505151
andrewrk
also planning to fix var args with this (by deleting var args)

1573505190
dimenus
why not just require a type on the LHS then?

1573505205
dimenus
ah, nvm

1573505226
dimenus
because zig can have comptime expressions that can return different types

1573505230
dimenus
so that doesn't make sense

1573505619
FireFox317
Finally fixed the raspberry pi bootloader issue in clashOS andrewrk :) It was the UART1 that we were using which was causing the problem. I switched to UART0 which fixed the issue, however that one is harder to setup since there has to be some mailbox stuff done before UART0 works XD

1573505652
andrewrk
FireFox317, ah interesting. do you have the framebuffer working on real hardware?

1573505653
dimenus
are you using the latest firmware?

1573505716
FireFox317
andrewrk, Yes! But I just got it working so, don't have a PR yet :)

1573505737
FireFox317
dimenus, you mean the latest firmware that you have to put on the sd card?

1573505749
andrewrk
FireFox317, brilliant. that'll be more time over today and tomorrow to finish up #3652, which I think will make people here happy :)

1573505846
dimenus
FireFox317: yep

1573505926
FireFox317
dimenus, Yes I'm using the latest firmware

1573506957
FireFox317
Damn, the so called mini uart we were using has really small buffers of only 8 symbols, no wonder why it didn't worked

1573508587
frmdstryr
Does zig have any regex support in the std lib?

1573508661
andrewrk
frmdstryr, no. the closest thing we have is

1573508694
andrewrk
someday it would be neat to take advantage of comptime for regex, but that's probably too advanced for number of bugs & perf issues comptime currently has

1573508829
fengb
Really offtopic:

1573508841
fengb
Closed with "still a bug but we don't want to look at it"

1573508871
frmdstryr
Thanks, that'll work

1573508921
andrewrk
fengb, they're moving issue tracking to a *forum*?

1573508970
fengb
lol... the website redirects bugs to Github issues

1573509009
andrewrk
it's really easy to explain the root cause of this weirdness. npm inc is a VC-funded, for-profit entity

1573509016
andrewrk
that's all you need to know

1573509109
dimenus
I thank the FSM weekly that I barely have to touch web technologies

1573509541
andrewrk
I'm looking forward to rewriting groove basin in zig. the time is getting nearer and nearer...

1573509725
dimenus
nice

1573509772
fengb
Is there a way to defer a suspend to "next loop"? I do that semi-often in JS for better UI responsiveness

1573509802
pixlark
is there an opposite to comptime? Some sort of runtime keyword that will ensure an expression is always evaluated at runtime?

1573509906
andrewrk
fengb, this works in both async and blocking contexts: if (std.event.Loop.instance) |loop| loop.yield();

1573509940
andrewrk
related: std.event.Loop.startCpuBoundOperation();

1573510017
fengb
Ah cool

1573511678
andrewrk
this code works in my branch now:

1573511766
fengb
Is that a fully anonymous struct?

1573511801
andrewrk
yes

1573511818
andrewrk
I was looking for the isseu that will make it work without those casts too, but I didn't find it so I will file it now

1573511847
andrewrk
you can see why I don't think we need var args anymore

1573511900
dimenus
andrewrk: offtopic, but how long ago did you switch to nixos?

1573511931
andrewrk
I can answer that by finding the commit to my dotfiles repo that added nix config

1573511950
andrewrk
Date:   Mon Jun 15 17:34:14 2015 -0700

1573511970
dimenus
oh wow

1573511989
andrewrk
yeah, I never looked back. this distro rules

1573512031
andrewrk
especially if you code C or C++. with zig it doesn't (or at least won't) matter as much :)

1573512268
leeward
What was the switch for `zig build test` that stuffs the test binary somewhere accessible?

1573512395
andrewrk
leeward, you can expose an option that calls setOutputDir

1573512444
leeward
andrewrk: ah, so it's not automagic

1573512458
leeward
I get it. I think the thing I used it on was the zig build system.

1573515243
mq32
<andrewrk> this code works in my branch now:

1573515261
mq32
neat!

1573515283
mq32
so when you deprecate varargs, this will make some really interesting formatting API!

1573515313
mq32
std.fmt.format(â€¦, "i={i}, s={s}", .{ i=10, s="Hello, World!" });

1573515609
mq32
and andrewrk: sorry for that half-ass bug report. my battery died in the moment of typing it

1573515632
andrewrk
no problem, thanks for the report

1573515862
mq32
i hope i never forget to report a bug

1573515868
mq32
that's the least i can do

1573516318
daurnimator
mq32: doesn't LLVM/zig have some sort of function duplication detection/elimination thing?

1573516350
mq32
daurnimator, probably, but that will only work if the function is bit-by-bit the same

1573516362
mq32
(and it's called comdat folding in MSVC world)

1573516547
daurnimator
mq32: with the mixin approach; aren't all functions except for the inner-inner (e.g.) 'read()' function the same?

1573516565
daurnimator
I suppose excepting error sets and async vs non-async.

1573516578
mq32
hmm, good question

1573516582
daurnimator
Would error sets end up being the same function wise? I think so....

1573516599
daurnimator
so you'd really only ever just get two versions: async and non-async. which I'm okay with.

1573516626
mq32
but: this only applies if the "read" is never inlined

1573516646
andrewrk
daurnimator, we don't get async and non-async versions of anything

1573516653
andrewrk
you get 1 or the other

1573516666
daurnimator
mq32: assuming that 'comdat' happens after inlining

1573516667
andrewrk
this might help you understand noasync better

1573516678
daurnimator
andrewrk: not with mixins I think.

1573516689
andrewrk
ah

1573516707
mq32
daurnimator: afaik that comdat thing happens "at the end"

1573516719
mq32
but i don't know exacty

1573516760
daurnimator
andrewrk: depending on if your "base" function is async vs non-async; your mixin helpers will sometimes be async, sometimes non-async.

