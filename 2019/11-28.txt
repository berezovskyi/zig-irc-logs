1574899239
mq32
yeah, zig now has automatic memory management with garbage collection </troll>

1574899261
pixelherodev
pft

1574899282
pixelherodev
I mean, you're not 100% wrong. I may or may not have partially implemented that in my kernel as OS-level garbage collection

1574899303
mq32
^^

1574899315
mq32
i remember some stuff from old bash.org

1574899320
pixelherodev
Okay mostly joking, but I probably could do that relatively easily

1574899327
mq32
"how do i clean up my ram?" "use: init 6"

1574899371
mq32
well, technically correct :D

1574899376
mq32
it frees up all memory :D

1574899381
pixelherodev
I'd say compressed air would be more effective

1574899384
pixelherodev
;)

1574899416
mq32
:D

1574899442
pixelherodev
Anyways, I'm going to clean up my OS patch and submit that now, then decide what to do with myself :P

1574899505
pixelherodev
Major cleanup is doing stuff like `@hasDecl`ing various root.os functions and giving a more useful compiler error if it's missing

1574899550
pixelherodev
What's the point of explicit noasync calls?

1574899739
pixelherodev
Hmm... question on the custom OS layer: should it work for non-freestanding OSes?

1574899762
mq32
what is a non-freestanding OS?

1574899764
pixelherodev
Not really any gain I can think of to doing that, but it's not like it's any harder to only check @hasDecl instead of also checking if in freestanding mode...

1574899768
pixelherodev
Linux, Windows, etc

1574899793
Snektron
.

1574899807
pixelherodev
e.g. should it be `else if freestanding then check oslayer else panic`, or `else check oslayer`

1574899847
pixelherodev
Good example: std.debug currently uses std.heap.direct_allocator

1574899860
pixelherodev
It might be desirable to replace that with a custom allocator in normal code

1574899888
pixelherodev
So should the OS layer be checked always, or only when not targeting a known OS?

1574899937
mq32
i don't see a reason to ues a custom OS layer instead of the already existing one

1574899991
pixelherodev
Well, the most obvious is for if an official OS backend is outdated

1574900000
pixelherodev
Or if you want to try not-yet-supported features

1574900016
pixelherodev
Might be a good way to test features before upstreaming them

1574900037
pixelherodev
But the point is, it's actually easier to support always, ad I can't think of any reason why it would be

1574900054
mq32
yeah, point

1574900840
pixelherodev
On a similar note, DirectAllocator could easily be routed to check the OS layer for a custom implementation also...

1574900946
mikdusan
(heads up: DirectAllocator is now PageAllocator)

1574900997
pixelherodev
Wait what?

1574901008
pixelherodev
I literally just pulled the source like ten minutes ago

1574901033
pixelherodev
Accepted proposal that hasn't been implemented yet?

1574901071
mikdusan


1574901080
mikdusan
(master)

1574901117
mikdusan
maybe you pulled from a fork that is behind

1574901621
pixelherodev
I pulled from upstream...

1574901671
pixelherodev
but it didn't check out apparently

1574901754
mikdusan
deprecation exists if all you are using is const direct_allocator: ./lib/std/heap.zig:pub const direct_allocator = page_allocator;

1574901809
pixelherodev
I'm not

1574903841
andrewrk
it's just a name change, s/DirectAllocator/PageAllocator/ before merging and you won't have any conflicts

1574903867
andrewrk
you get what I mean? one nice way to resolve conflicts is to do the upstream edit to your own branch, before merging

1574904355
andrewrk
I think I might need to take a step back, and redesign the guts of the stage1 compiler. this result location stuff is not maintainable

1574904386
daurnimator
andrewrk: we know that because of the 3 attempts it took

1574904407
daurnimator
but I believe you said at the time: the complexity is

1574904565
andrewrk
there has got to be a better way to implement it though, I don't think it has to be this complex

1574904580
andrewrk
the rules of the language are quite simple

1574905031
andrewrk
for example, things got much simpler when I introduced Zig IR into the compiler, this has enabled lots of stuff to work while being reasonably understandable

1574905077
andrewrk
but result location stuff is kinda hacked on on top of that. maybe if I took the time to design some kind of internal syntax, or something like that, working result locations into the design of the IR, it can be easier to understand

1574905132
andrewrk
one of the main problems is that the rules aren't clear for how they're supposed to work internally

1574905170
andrewrk
from the language semantics perspective it's fine, I mean like the nitty gritty details of what `skipped`, `written`, the meaning of null pointers, etc of the internal structs

1574905486
mikdusan
working backwards, I understand that EndExpr is how each expression gets associated to a result location; but I'm not clear on what multiple ResetResult(none) does

1574905568
mikdusan
maybe what I'll do is prepare an issue with several reduced IR dumps and ask for the broad strokes; I'd like to help with this rework

1574905579
mikdusan
(broad strokes of status quo)

1574905807
MysoftZBB
theres no downloads for binaries for windows...

1574905812
MysoftZBB
just for wincrap64

1574906257
plumm
~2

1574906548
plumm
a longshot but does anyone know what the demangler on godbolt intends to execute for zig?

1574906751
andrewrk
mikdusan, I would welcome your fresh perspective on this, that sounds great

1574906863
plumm
!log

1574906897
andrewrk
this user had unacceptable behavior on github, so they're gone. for others wondering about 32 bit windows support, here's the issue:

1574907034
andrewrk
plumm, I don't understand the question - when you say "demangler" I'm thinking of c++

1574907072
plumm
andrewrk: i fixed the asm emit output bug for compiler explorer. this uncovers however another issue where the demangler feature doesn't work

1574907106
andrewrk
plumm, ah, nice. can you tell me more about it? zig doesn't mangle symbols

1574907124
plumm
trying to search around the codebase is really tiresome since a lot of fuzzy searches are dead ends and was hoping to get a lead on what it's attempting here; the demangler executable for zig is simply '.'

1574907135
plumm
ok, if thats the case I think I can just disable the feature

1574907140
andrewrk
yes I think that is correct

1574907173
muffindrake
Is there a scanf equivalent in std yet?

1574907179
muffindrake
Perhaps I simply missed it

1574907211
andrewrk
muffindrake, I don't believe so - and such a missing feature is about to gain the spotlight on Dec 1st

1574907228
muffindrake
I see, thank you.

1574907238
andrewrk
muffindrake, if there were such a feature it would be a function of std.io.InStream

1574907309
pixelherodev
If I get "invalid token: var" for sentinel in builtin.zig, I'm guessing that means I need to update the compiler too?

1574907365
pixelherodev
On a related note, proposal: builtin.zig should be embedded into the compiler instead of part of the standard library

1574907383
pixelherodev
It's

1574907447
andrewrk
pixelherodev, I can walk you through the reasoning of why it is where it is

1574907470
pixelherodev
Nah, if there is a reasoning I'll take your word for it

1574907486
andrewrk
but maybe this will be enough: since it's no longer in the generated builtin code, the doc merging tool can correctly deal with it when there are built docs for multiple targets

1574907526
pixelherodev
Wait, if that's it, wouldn't it be better to improve the doc merging tool and leave it embedded?

1574907572
andrewrk
no matter how much the doc merging tool improves, code that is generated into different source files for different targets cannot be merged, since merging needs to observe that the AST nodes are the same file, line, column

1574907672
pixelherodev
Unless you give it a special case in which to treat distinct files as identical

1574907717
andrewrk
mikdusan, thanks for starting this effort, I'm probably gonna be done for today pretty soon but looking forward to working with you on this, will update that issue soon

1574907739
mikdusan
no problem. as your time permits sir

1574907959
pixelherodev
Is it just me or has the compiler gotten a bit faster?

1574907970
pixelherodev
At least whenthere's an error

1574908106
pixelherodev
Is this related to #3502? Or am I imagining this?

1574908219
andrewrk
it's possible that 3502 had a performance impact, although that wasn't the explicit goal

1574908230
andrewrk
maybe the interning helped

1574908280
pixelherodev
I'd be curious about benchmarks, but don't have time to check :P

1574908302
daurnimator
andrewrk: any suggestions on how I should check to see if Mixins bloat? I was surprised to see that mixin made the rand tests smaler

1574908314
pixelherodev
What I can say is that when there's an error it completes in less than half of a second

1574908406
andrewrk
daurnimator, I suggest to look at the size of the std lib tests binary

1574908434
andrewrk
it will be interesting to see the difference between mixins branch and master branch, and debug vs release-fast will also be interesting

1574908463
andrewrk
pixelherodev, you're probably hitting a tokenization or parse error

1574908505
pixelherodev
Right but it notices the error faster I think

1574908515
pixelherodev
No wait, not one of those

1574908522
pixelherodev
`/home/noam/Documents/Development/indomitable/src/zig/std/fs/file.zig:14:15: error: container 'std.os' has no member called 'fd_t'`

1574908632
pixelherodev
... was there a debug info rework recently?

1574908643
pixelherodev
Because it looks like there was a debug info rework recently

1574909097
daurnimator
andrewrk:

1574909147
daurnimator
pixelherodev: I moved things that operate on DwarfInfo into DwarfInfo methods.  I think that's about it

1574909157
pixelherodev
daurnimator, yeah, that's what I was noticing :)

1574909203
andrewrk
daurnimator, do you have a streams mixin branch too?

1574909261
pixelherodev
Also, you were right about the EAGAIN being all over the place, so I'm not sure the best way to handle this short of preventing std.event.loop from being analyzed when it's guaranteed null at comptime

1574909272
pixelherodev
Which is very very different from the work i'm doing right now

1574909308
pixelherodev
Different proposal: a @deprecated builtin that can be used to mark e.g. direct_allocator

1574909316
daurnimator
andrewrk: this was just the Random changes. I guess I can see if my streams branch merges cleanly on top

1574909971
plumm


1574909976
plumm
ciao

1574910016
pixelherodev
Yay!

1574910098
fengb
😁

1574910342
pixelherodev
Ugh, rebuilding musl every time I upgrade Zig gets old real fast

1574910848
daurnimator
pixelherodev: I think you need a better computer....

1574910856
daurnimator
it takes me a couple of seconds

1574911907
andrewrk
that process is highly parallelizable as well

1574911961
andrewrk
btw why do you link libc? I thought your target was freestanding?

1574912074
pixelherodev
andrewrk, it targets both static Linux and freestanding

1574912095
pixelherodev
daurnimator, it's not my computer, it's something wrong with the build process

1574912102
qbradley
I have been working with new evented io and the std.event.Channel. I sent a pull request for a fix to the Channel buffer wrapping logic. However, when I look at performance of a ping pong test (sending data through the channel between two task) it spends a lot of time in the Mutex in std.atomic.Queue. A lot of the other code seems to try and be

1574912102
qbradley
lock free.  I wrote my own simple channel implementation using straightforward mutex locking and suspend/resume and it is 40x faster in my test. Is it worthwhile to try and contribute that back to std library, or rather do we expect std.atomic.Queue to get faster later?

1574912525
pixelherodev
PR opened for os layer (finally) - still needs work for a lot of use cases, but it's a start

1574912644
daurnimator
qbradley: when did you test?

1574912704
qbradley
I'm one commit behind master (I see one commit since I last pulled)

1574912725
daurnimator
qbradley:

1574912746
qbradley
Yes I have those

1574912752
qbradley
I don't think there is anything wrong with Mutex

1574912778
qbradley
It is just that Channel uses two std.atomic.Queue and complicated logic for moving things in and out of them, so it calls the mutex a lot

1574912804
qbradley
I figured if you have to take a mutex anyway, why not just take it once per call

1574912852
andrewrk
qbradley, I'd be interested in seeing your implementation

1574912853
qbradley
Here is my channel implementation:

1574912889
andrewrk
this is all experimental right now, so any experiments you do are great :)

1574912936
andrewrk
I wonder how your channel implementation affects these numbers:

1574912967
qbradley
I'll see if I can give it a try

1574914177
qbradley
Ha! My implementation is much slower for the factorial-channel.zig and factorial-channel-gmp.zig.  I notice from top that fact-channel.zig compiled with master spikes at 500% %CPU at the start for a while then settles down to 100% for most of the time.  With my changes, it is 100% the whole time.

1574914207
andrewrk
qbradley, I suspect this is because a kernel-level mutex breaks the assumptions of evented I/O

1574914247
andrewrk
with evented I/O, functions are split across kernel threads; rather than a mutex, code should be using std.event.Lock (which needs to be audited)

1574914278
andrewrk
also I want to look into if it's possible to make a locking API that does the right thing in either case (mutex for blocking I/O, std.event.Lock-style protection for evented I/O)

1574914282
andrewrk
I think it is possible

1574914332
qbradley
I didn't use std.event.Lock because it uses std.atomic.Queue which brings the Mutex back behind the scenes again :-)

1574914363
andrewrk
I think the real solution will come down to a better event loop implementation

1574914399
andrewrk
perhaps thread-local jobs, work-stealing, all that traditional runtime stuff. we're essentially solving the same problem as Go, except in the std lib instead of the language

1574914536
qbradley
Meanwhile I'll send my channel implementation into hiding unless it can do better on the factorial example :-)

1574918337
pixelherodev
Okay, fixed a stupid that was preventing tests from passings; looks good now

1574918558
pixelherodev
There's just one minor problem

1574918621
pixelherodev
`zig test std/std.zig` seems to fail, because it ends up using std.os as std.os.system when std.zig is the root source file - as @import("root").os ends up == std.os

1574918650
pixelherodev
I suppose a check for root file != std would be a simple enough fix

1574918667
pixelherodev
That can wait for tomorrow, g'night

1574919817
daurnimator
that took me a while to rebase my stream branch. hopefully the results are worth it :)

1574919835
daurnimator
(

1574919968
adamkowalski
andrewrk: I rewatched that video by Mike Acton that you linked me and I've been trying to learn more about data oriented design

1574919997
adamkowalski
I am currently storing a hashmap that maps from ids to structs which contain the data that came to me from the payload (the request made by the client)

1574920040
adamkowalski
Rather then storing pointers, structs may contain ids that can be used to look up other entries that can be useful if you need them as a data dependency

1574920052
adamkowalski
Is this considered object oriented? What would be the data oriented alternative?

1574920094
adamkowalski
Would I have a array which contains all my structs of a particular type? Then have some function which can map the id to an index into this array

1574920140
adamkowalski
and the structs would not contain fields, but instead contain arraylists of fields? So now when you want to operate on a particular field you operate on every entry of that type and only load into the cache line the particular data you care about

1574920314
andrewrk
daurnimator, your comparison seems to be missing master branch (or the stream branch?)

1574926231
bgiannan
is there a way to print the stack trace without raising an error?

1574926361
andrewrk
bgiannan, std.debug.dumpCurrentStackTrace

1574926378
bgiannan
great thx!

1574926494
andrewrk
bgiannan, you can also collect a stack trace without printing it , saving it for later

1574926522
bgiannan
i have to take a look at std.debug

1574926539
andrewrk
here's an example:

1574926625
bgiannan
👍

1574927181
bgiannan
andrewrk, i'm curious what your thoughts are on

1574928695
andrewrk
bgiannan, sorry :(

1574928963
mq32
andrewrk: It's weird that it didn't occurred to me yesterday that i can just check both optionals to be not-null, then just use .? to access them both m(

1574928993
mq32
i now feel kinda stupid

1574929005
andrewrk
mq32, that pattern is intended

1574929011
andrewrk
err, not the part about feeling stupid

1574929011
bgiannan
andrewrk, fair enough

1574929051
andrewrk
but it's understood that the type system can't always perfectly represent the state. sometimes you have to assert stuff at runtime (.?)

1574929062
andrewrk
that's kinda the point of zig over rust

1574929266
bgiannan
no idea how rust does optionals

1574929336
bgiannan
i have to shake off some swift expectations... swift is more like ruby in the sense that it gives you a million syntax sugar to help you which is a totally different mindset than zig

1574929897
mq32
<andrewrk> mq32, that pattern is intended

1574929904
mq32
yeah, i thought so after seeing it

1574929948
mq32
but now i'm looking forward on hacking onwards on the UI system

1574929956
mq32
hat a kind of mental blocker yesterday

1574932213
soulofdeveloper
any ideas for weekend project in Zig?

1574932243
soulofdeveloper
I'd make some microservices, but i would need small http server with support of streaming response in C

1574932258
mq32
just write a small HTTP server in zig!

1574932306
soulofdeveloper
i saw the video with tcp chat) It wasn't very motivating to do connection stuff using current standard library of Zig

1574932348
mq32
why that?

1574932370
mq32
it's the "standard" pretty much everywhere when you work with sockets

1574932470
soulofdeveloper
i mean maturity, in live stream while developing tcp chat andrew had to fix some things in standard library, and in the end he got some very strange program lock

1574932529
mq32
you will have those problems in all areas with zig right now

1574932553
mq32
as i dig deeper into zig coding, i have to fix or workaround stuff on daily basis

1574932601
soulofdeveloper
Zig works better as a language without using it's standard library i think

1574932646
mq32
nah

1574932663
mq32
it works much greater with zig std than C already :)

1574932702
mq32
more

1574932703
soulofdeveloper
idk, last time i tried i had problems even with using some container from std, something like arraylist

1574932712
mq32
huh

1574932730
mq32
i cannot confirm this from my experience

1574932734
soulofdeveloper
i've created my own container library and it worked well for my webassembly purposes

1574932797
soulofdeveloper
the language is good and the standard library is, it just needs some work and time to get to stable state

1574932834
mq32
you can help with that ;)

1574932841
mq32
so zig std also fits your needs

1574932863
soulofdeveloper
by the way i'm not against writing http server, but from what i found in standard library about tcp functions i have no idea how to use them, and also i dont know if they will change api tomorrow

1574933011
mq32
idk the state of all socket API right now, but you can just use the POSIX api and be happy with that

1574933018
mq32
it didn't change much in the last 40 years :D

1574933034
soulofdeveloper
you mean the one from libc?

1574933250
mq32
soulofdeveloper: nah, the ones from "posix api"

1574933251
mq32
std.os.socket

1574933351
soulofdeveloper
just how to use it?

1574933476
mq32
there are plenty of examples in the wild on how to use POSIX sockets

1574933530
soulofdeveloper
domain u32, what can it be?

1574933539
mq32
the domain type of the socket

1574933551
mq32
AF_INET, AF_INET6, AF_SOCKET, ...

1574933569
mq32
if you want an example for a simple HTTP server, look up "nweb" from IBM

1574933579
mq32
that's a 250 loc web server in C, using only POSIX sockets

1574933950
soulofdeveloper
socket() function returns fd_t, but listen one accepts sockfd: i32

1574933977
mq32
should be the same type :D

1574933995
mq32
oh, no

1574933999
mq32
socket() returns usiz

1574934015
soulofdeveloper
pub fn socket(domain: u32, socket_type: u32, protocol: u32) SocketError!fd_t {

1574934036
soulofdeveloper
no idea of what fd_t is though

1574934045
soulofdeveloper
some... file descriptor maybe

1574934107
mq32
take some look at std.net namespace

1574934116
mq32
there are abstractions over the socket functions

1574934155
soulofdeveloper
i see it there as os.fd_t

1574934237
soulofdeveloper


1574934268
soulofdeveloper
so... doesn't look like i32 or usize for listen()

1574934419
soulofdeveloper
it definitely looks like apis will change yet, but i see StreamServer

1574934426
soulofdeveloper
in net namespace

1574935261
mq32
yeah i think StreamServer is what you want to use

1574935267
mq32
it's the abstraction over listen, socket, ...

1574935635
mq32
btw: thanks, zig, for making writing tests so easy :)

1574935836
soulofdeveloper
by the way listen actually takes fd_t generated by socket(), idk how it works

1574936211
soulofdeveloper
found it

1574936229
soulofdeveloper
fd_t = i32 on linux

1574936269
soulofdeveloper
so listen will only work on systems with fd_t = i32

1574945029
protty
soulofdeveloper: fd_t changes based on the system its running on (usize for windows, i32 for posix). It should ideally work for all since most systems implement bsd-style sockets but there doesnt seem to be windows support yet. It would be simple to add however and could work as a nice PR starting point

1574961743
marler8997
is there a plan to add the sentinel value to TypeInfo?

1574962469
marler8997
what's the right way to convert an array pointer to a single-value pointer?

1574962494
pixelherodev
@as ?

1574962556
marler8997
works

1574962564
marler8997
I'm surprised it doesn't implicitly convert

1574962586
pixelherodev
Implicit conversion isn't something Zig eagerly embraces as I understand it

1574962635
marler8997
it does quite a bit of implicit conversion

1574962641
marler8997
not as much as other languages

1574962643
marler8997
which is good

1574965227
pixelherodev
What's the reasoning for depending on specific LLVM versions? Shouldn't it be possible to support older versions? Is it just not worth the effort?

1574966873
waleee-cl
andrewrk seen this?

1574967068
pixelherodev
Oof

1574967094
pixelherodev
Prefilled IRS complaint form for those in the USA:

1574967187
pixelherodev
Because of course someone already made one :P

1574967645
waleee-cl
I was mainly thinking about costs for the domain and ways to mitigate it

1574968665
pixelherodev
Get a different one? :P

1574969068
jonathon
Is there an idiomatic way of calling a Linux executable from with a Zig program? Is it just std.os.linux.execve as per

1574969202
pixelherodev
Not quite

1574969204
pixelherodev
"exec is a functionality of an operating system that runs an executable file in the context of an already existing process, replacing the previous executable"

1574969221
pixelherodev
If you do that (exec /bin/sh), it'll replace the Zig program with /bin/sh

1574969261
pixelherodev
The idiomatic way on Linux is the same in Zig as in C AFAIK: fork/exec, not just exec

1574969329
jonathon
ok, replacing the running executable is not really what i want to do. 😅

1574969593
jonathon
hmm... maybe std.ChildProcess then

1574969692
pixelherodev
yeah that looks right ;)

1574969749
euantor
yeah,

1574969819
jonathon
ta, reading it now

1574970492
pixelherodev
Ugh, so apparently LLVM 9 doesn't even support AVR :P Need to build 10 before I can work on e.g. #3634

1574970916
jonathon
Just for future logs, std.ChildProcess.exec was what I was looking for (

1574973180
andrewrk
pixelherodev, it's stil experimental in llvm trunk

1574973284
stratact
Hello Zigsters! 😄

1574973314
pixelherodev
Right, but Gentoo supports AVR in the LLVM-10 experimental build

1574973339
protty
stratact: ello

1574974582
stratact
Ah, Zig improved the contributing build style by providing an option to skip copying the lib files (or previously the std files last time I contributed)

1574977170
stratact
Then again I probably need to work on another personal project to get a thought-catalyst going

