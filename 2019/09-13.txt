1568350962
stratact
Sigh, I would love to see Zig supported in codewars.com

1568354556
bgiannan
n

1568383216
Hirezias
Hello, does something equivalent to __attribute__((constructore))/((destructor) exist in zig ?

1568383826
fengb
No constructors/destructors

1568384178
Hirezias
I'm not talking about OO programming, I'm talking about dynamic library loading/unloading, right ?

1568384417
fengb
Oh. I don't think zig will support that since it falls under hidden behavior

1568384585
Hirezias
Ok, it makes sense. Thank you :)

1568384613
samtebbs
Hirezias: Just for my interest, what do they do?

1568384669
Hirezias
I'm not really sure about how it works exactly, but this attributes are a way to specify a function must be called at dynamic library load or unload

1568384791
Hirezias
A use case I have is to build a library A with the same symbols than another one (B) used by a program. I use LD_PRELOAD in order to load A before B at program startup, wich link my functions instead of the B one's.

1568384894
Hirezias
I use __attribute__((constructor)) in order to run a function between library loading and the program execution in wich I get the B symbols with delsym in order to call it in my wrapper functions, even if thez have the same symbols names.

1568384982
Hirezias
*dlsym (sorry, I hope my explanation is clear)

1568385084
TheLemonMan
Hirezias, here you go kind sir

1568385110
mikdusan
zig has a built-in clang compiler. i suppose you could make a c-func to invoke zig code

1568385181
TheLemonMan
please keep in mind that you have to link against the libc in order to have the crt process the init/fini

1568385199
mikdusan
TheLemonMan: which os supports those link sections?

1568385227
TheLemonMan
the only ones that matter, linux (and I guess the BSDs)

1568385351
TheLemonMan
for osx you may be able to use __mod_init_func/__mod_term_func for the same purpose

1568385693
fgenesis
windows does too but it's some magic the CRT invokes at DLlMain(), iirc

1568385700
fgenesis
*DllMain()

1568385744
TheLemonMan
yeah, it has more to do with the libc's CRT than with the OS itself

1568385791
mikdusan
also .dylib on macos has old convention of _init() and _fini() . which sounds like windows mechanism. linux also has linker-line to add functions via -init and -fini flags

1568387939
Hirezias
When I include dlfcn.h and write const RTLD_NEXT = c.RTLD_NEXT; I have an error saying that a C pointers cannot point to non-C-ABI-compatible type 'void' (in cimport.zig)

1568387952
Tetralux
mikdusan: Why would you want to make defer free illegal in a particular instance?

1568388033
meowray
mikdusan: elf linkers don't have options to add .init_aray or .fini_array

1568388443
TheLemonMan
meowray, the -init/-fini switches in LLD should append/remove entries in the init/fini arrays

1568388507
mikdusan
Tetralux: why would i want the option to defer a no-op ?

1568388541
Tetralux
mikdusan: In case it isn't xD

1568388555
Tetralux
I'm assuming it's library code.

1568388575
Tetralux
Because otherwise, if you knew it was always a no-op, you wouldn't write that code.

1568388582
Tetralux
(.. you'd omit the defer.)

1568388585
mikdusan
statically in my case it is always a no-op because i'll always be using an allocator that only free's in bulk

1568388643
Tetralux
In such a case, is the free a no-op in the output?

1568388669
Tetralux
Or does it still do a fnptr call that does nothing?

1568388717
mikdusan
let's assume the best-case scenerio that the compiler elide's it entirely.

1568388746
Tetralux
Indeed.

1568388769
Tetralux
I'm not entirely clear what the reasoning is here.

1568388799
Tetralux
You want to be able to get an error if you attempt to free something that does a no-op?

1568388854
mikdusan
i want to prevent someone from sticking an unsuitable allocator into the struct

1568388875
Tetralux
You want to only allow a push-buffer style allocator?

1568388899
Tetralux
.. or rather, one that frees everything at once, or nothing.

1568388919
Tetralux
.. but without using a custom allocator interface.

1568389620
mikdusan
i have a struct init that accepts an *Allocator and the "doc" would stipulate that it must be arena-style because I won't be adding defer's all over the place for nothing. and so if the wrong allocator is passed in, it's an automatic leak

1568389671
mikdusan
i mean yeah the caller is doing it wrong. but shouldn't there be a way for me to statically prevent this?

1568389858
Tetralux
The obvious way to statically do it would be as you suggested: have an allocator type that does not free.

1568389884
Tetralux
Docs wise, you could just simply include "Does not free".

1568389919
Tetralux
And then if you pass a direct_allocator or something, you expect it to leak

1568389927
Tetralux
Which may be absolutely fine.

1568389949
fengb
So if shrinkFn is optional, you can add an assert

1568389966
Tetralux
Making shrinkFn optional definitely means that it would not get optimized.

1568389975
fengb


1568389984
Tetralux
I'd just make it either do literally nothing, or panic.

1568389989
fengb
None of this is optimized since they're all function pointers

1568390027
Tetralux
Then it's probably better just to make it do nothing.

1568390039
Tetralux
You don't want users of allocators to have to check that.

1568390047
Tetralux
The whole point is that they don't.

1568390067
Tetralux
The whole point generally is that they will use whatever allocator you give them.

1568390073
Tetralux
So far, they assume that they must call free.

1568390104
Tetralux
This pattern of never freeing though is perhaps what temporary storage could be used for.

1568390113
Tetralux
But I don't that zigian.

1568390204
Tetralux
It's basically just push buffer that the user resets on demand where the whole point is that you allocate it all up front and then when you want to make a cstring version of a string, or format a string to be output every frame, you want it to be fast and not allocate, but still be able to be used with otherwise allocating functions.

1568390232
Tetralux
In Zig, you're expected to make an fixedbufferallocator, though you can't reset that.

1568390253
Tetralux
Might make a PR for that at some point actually.

1568390291
Tetralux
fba.reset(); // forgets you ever alloc'd anything

1568390417
Tetralux
But yes, I think I'd just doc it and allow any allocator.

1568395185
Hirezias
TheLemonMan: Thank you very much for your help :)

1568396207
TheLemonMan
np, it's a nice party trick :)

1568398232
Tetralux
We should have a better error message if you attempt to 'try' from within a fn that does not return an error.

1568398340
fengb
Like injecting a yodaism?

1568398708
Tetralux
fengb: ?

1568398719
Tetralux
Og

1568398721
Tetralux
Oh&

1568398723
Tetralux
Oh***

1568398737
Tetralux
You mean "This isn't the return type you were looking for..." ;D

1568398850
Tetralux
I was thinking of something like, "expected return type of []u8, got ![]u8`

1568398878
Tetralux
Or even just, "<function name> does not return an error"

1568398906
Tetralux
"note: function signature here"

1568398916
Tetralux
"fn blah() []u8 {"

1568398933
Tetralux
"          ^"

1568399038
Tetralux


1568399154
TheLemonMan
Tetralux, I always mistake your GH avatar for Sonic the Hedgehog

1568399202
Tetralux
GH?

1568399211
halosghost
github, presumably

1568399219
Tetralux
Ah yeah

1568399222
Tetralux
XD

1568399225
fengb
Do or do not. There is no try

1568399249
fengb
Yoda is a lousy teacher

1568399263
Tetralux
LemonMan: I'm not entirely sure how you can mistake Sonic for an eyeball, but... ;)

1568399280
Tetralux
fengb: That took me longer than I'd like to admit to realise what the fuck you were talking about.

1568399283
Tetralux
I am ashamed of myself.

1568399289
Tetralux
Also well played :p

1568399300
fengb
It was a bad joke so I didn't want to say it outright

1568399786
Tetralux
HAHAH

1568399795
TheLemonMan
Tetralux, well, it's blue and small

1568399816
Tetralux
TheLemonMan: This is a true fact is that.

1568399824
Tetralux
Also question:

1568399836
Tetralux
Why is the alignment for alignedAlloc comptime?

1568399879
TheLemonMan
check out the return type

1568400016
Tetralux
Only I'm making an allocator which calls a child allocator.

1568400024
Tetralux
But I want to pass new_align through to it and can't.

1568400043
Tetralux
new_align is non-comptime and that's the mem.Allocator signature so I can't change it.

1568400130
fengb


1568400142
fengb
Recent change

1568400170
fengb
Er wait

1568400175
fengb
Ignore me

1568400258
fengb
TheLemonMan is right, it's needed for the return signature

1568400442
Tetralux


1568402105
TheLemonMan
a better error for `unreachable`:

1568403755
halosghost
lol

1568405930
dimenus_
wow, that uefi pr is nice work

1568405938
dimenus_
should make working with uefi in zig pretty easy

1568406278
FireFox317
This guy (is he in here?) is making some pretty nice code:

1568418320
dimenus
has anyone considered picking up a riscv board?

1568418325
dimenus
if so, who did you get it from?

