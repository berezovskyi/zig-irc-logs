1570256021
daurnimator
woo, I got accepted into github sponsors

1570256358
andrewrk
nice daurnimator

1570256466
andrewrk
good night

1570261346
mq32
hey

1570261358
mq32
tgschultz, is your BMP library usable?

1570267154
mq32
broken LLVM module found: Call parameter type does not match function signature!

1570267155
mq32
whoops

1570273989
rifkik
I'm gonna stream live coding again

1570273994
rifkik
Anyone wanna join?

1570274032
mq32
sorry, i have another livestream running already :D

1570274151
rifkik
It's fine

1570274174
mq32
but i have great progress with my game coding :)

1570274186
mq32
have implemented a netbpm loader this morning

1570274257
rifkik
Naisu

1570274447
mq32
yeah

1570274457
mq32
i should start packaging this on github

1570275307
n_1-c_k
How to set the colours in runtime errors or switch them off?  I can't read my errors!

1570275593
mikdusan
andrewrk: #3383 -> do we need to add LazyValueIdArrayType ?

1570275735
mq32
mikdusan, i remember someone talking about using "usingnamespace" for mixins. was that you?

1570275743
mikdusan
yup

1570275764
mq32
i'm a bit sad that it doesn't work for member calls

1570275799
mikdusan
it does but in a limited fashion due to a bug. I have a PR ready to commit just want andrew to eyeball it first.

1570275808
mq32
oh neat :)

1570275821
mq32
oh i see

1570275823
mq32
the heck :D

1570275836
mq32
as soon as i call the "mixed in" function, it is available as a member function :D

1570275874
mikdusan
yeah it had to be primed by something else.

1570275887
mq32
looking forward for this to work :)

1570275896
mikdusan
if you have a sec try applying #3368 it's a 2-liner.

1570275897
mq32
it will be really helpful feature to simplify my vector library :)

1570275910
mq32
i don't have a self-built zig over here

1570275917
mikdusan
i know -- for code organization this is simply fantastic

1570275936
mq32
usingnamespace GenericVectorFunctions(Self);

1570275938
mq32
:)

1570276082
mouseghost
hi, is zig ever gonna have try without having to do assingnment?

1570276086
mouseghost
assingment

1570276089
rifkik
How do I exit my program in Zig?

1570276097
rifkik
like how do I do it in code?

1570276101
mikdusan
std.process.exit(0)

1570276120
rifkik
thanks!

1570276151
mikdusan
mouseghost: what do you mean?

1570276206
mouseghost
mikdusan, well, currently i have to do _ = try fs.File.write(f, "hi"); now, so will there be this requirement for "_ =" part be removed? (unless i didnt get it at all then)

1570276236
mq32
mouseghost, no, that will not be removed

1570276240
mouseghost
thanks

1570276248
mouseghost
aaalso

1570276253
mq32
you are not allowed to discard any return values unless you do it explicitly by assigning it to _

1570276272
mikdusan
try doesn't require `_ =`, it's that particular function. given a function returning `!void` and you don't have any assignment

1570276286
mouseghost
is there some kind of sugar syntax thing to make something like f:write("hi") so that f becomes first argument or self?

1570276314
mouseghost
oh

1570276355
mq32
f.write("hi");

1570276421
mouseghost
hmmm now i wonder why didnt it work when i tried it first time .w. maybe i misread the error back then. thanks!

1570276507
rifkik
dumb question, but what's the equivalent of this. for (c = 0; c < 256; c += 1) ?

1570276607
mq32
var c : usize = 0; while(c < 256) : (c += 1) { â€¦ }

1570276711
mouseghost
mq32, shouldnt the comparison be different?

1570276757
mouseghost
i mean, statement

1570276762
mouseghost
expression

1570276805
mq32
nope, that should work

1570277011
mq32
huh

1570277019
mq32
i think i found a bug in @field()

1570277150
mouseghost
huh

1570277248
mq32
mikdusan, andrewrk: can you confirm this?

1570277667
mikdusan
looks like a bug to me

1570277709
mq32
okay, i'm writing an issue

1570277716
mq32
i have some more information already

1570277723
rifkik
Ended my stream early

1570277751
rifkik
Man I wished you can do variable = otherVariable = 0; in Zig

1570277834
mq32
rifkik, i consider that an antipattern

1570277841
mq32
it looks nice, but will get you eventually

1570277938
rifkik
Try translating this to Zig

1570277988
mq32
oof

1570277994
mq32
can't you use translate c?

1570278093
rifkik
It just ignores the damn thing :)

1570279460
Barabas
Are there any simple examples of how to use the build system?

1570279467
rifkik
mq32 Do you think there's a better way to do it?

1570279477
Barabas
I want to try and use it for my C++ project

1570279496
rifkik
Zig only supports building C

1570279500
rifkik
not C++

1570279526
Barabas
Oh, meh

1570279765
Barabas
How to escape the hell which is C++? D=

1570284600
scientes
rifkik, actually, if you passed -lang=c++ it would probably build it

1570284604
scientes
as it is just clang

1570285113
mq32
what's the maximum file size i can format with "zig fmt"?

1570285898
mouseghost
what does & do?

1570285917
scientes
&mouseghost

1570285935
mouseghost
scientes, well what does it do

1570285945
scientes
gets the address to something

1570285968
mouseghost
ah

1570285990
mouseghost
thx

1570286374
mq32
i released the stuff i created in the last few days:

1570287332
tgschultz
mq32: in zig 0.5.0 no, bmp lib is broken due to bad codegen I've yet to track down completely. In 0.4.0 it worked.

1570287377
mq32
yeah i've built myself a netbpm library :D

1570287386
mq32
have to write some tests for it though

1570287416
mouseghost
pfff only real tests are the ones in prod

1570287498
mq32
hey i even tested against 6 files! :D

1570287553
mouseghost
ohno

1570287554
tgschultz
its possible the old version of bmp and/or png would work if I updated them with syntax changes, but they were very quick and dirty.

1570287582
mouseghost
cant you just use cinclude?

1570287601
mq32
mouseghost, for what exactly?

1570287610
mouseghost
mq32, emmm lib bmp?

1570287612
mouseghost
or whatever is it?

1570287614
mouseghost
it is*

1570287631
mq32
haha

1570287634
tgschultz
One could use C libraries yes, but these were pure-zig libs.

1570287642
tgschultz
no dependencies

1570287647
mq32
i think tgschultz hasn't written any C header for his zig libraries :D

1570287666
tgschultz
My goal with zig is specifically never to have to use C again

1570287686
mq32
tgschultz, yeah i'm trying the same here

1570287712
mq32
but i think we have to wait some time until we can replace SDL2 with something pure

1570287712
mouseghost
then what do you mean codegen

1570287715
mouseghost
c to zig transport?

1570287725
mq32
zig 0.4.0 to zig 0.5.0

1570287745
mouseghost
ah

1570287747
tgschultz
no, the codegen bug I refer to is in the way the compiler turns zig code into LLVM

1570287794
tgschultz
something was broken there with 0.5.0, probably the result-location changes

1570287809
mikdusan
tgschultz: llvm type not matching errors?

1570287828
tgschultz
calls not matching function signatures

1570287889
tgschultz
I think zig is incorrectly generating comptime-variadic functions, specifically when they involve packed structs with non-byte aligned members.

1570287924
tgschultz
but I haven't created a minimal example yet

1570287926
mikdusan


1570287965
mikdusan
it should be acompiler error. but ends up codegen error. just fix the types to match and should work

1570288002
tgschultz
I don't think this is the same, because the exact same code worked in 0.4.0. It's possible I made a mistake and the compiler didn't catch it and it just happened to work, I'm just skeptical.

1570288131
tgschultz
Though, bmp does use a lot of comptime stuff. For example, you can just pass it a struct with r,g,b and a members and it will write pixels out in that format for you regardless of what they were in the bmp file. You can construct your decoder instance to only support certain formats, etc.

1570288192
tgschultz
So it is totally possible there's something non-obviously wrong because of how that all fits together, I just have trouble believing it since it worked fine and passed the entire bmp suite worth of tests.

1570288254
tgschultz
which include craziness like rgba16-1924

1570288284
tgschultz
which is 16-bit RGB with 1 bit for red, 9 for green, 2 for blue and a 4 bit alpha channel

1570289163
mouseghost
so i have this issue 'sys/socket.h' file not found

1570289202
mouseghost
i do const c = @cImport(@cInclude("sys/socket.h"));

1570289212
mouseghost
so how am i supposed to do this

1570289327
mq32
do you link libc?

1570289333
mq32
have you added the system include directory?

1570289366
mouseghost
mq32, ive added -lc to the command, and i didnt add any system include dirs

1570289543
mouseghost
lol it turns out i probably cant have sys/socket.h here on windows

1570289627
mq32
mouseghost, yeah, that's correct

1570289632
mq32
windows uses different libraries

1570289643
mouseghost
i do have msys though

1570289669
mouseghost
ok i found include dir

1570289701
mouseghost
it still says it's failed c import but it threw other imports in

1570289709
mouseghost
so im happy

1570289964
kahiru
is there a "native" tcp library or should I just include sys/socket.h and friends and do things the same way as I would in C?

1570289998
mq32
afaik there's a socket abstraction in std

1570291121
diltsman
Is there a way to dump struct layout?  I'm wanting to make sure that I didn't mess up a C compatible struct.

1570291147
andrewrk
diltsman, you can use comptime asserts and @byteOffset

1570291204
diltsman
Clang has -fdump-record-layouts.  Does Zig have something similar?

1570291231
andrewrk
no

1570295545
traviss
mq32: you stream on twitch? what is your channel name?

1570295638
mq32
nah, i don't stream

1570295644
mq32
i'm just watching streams :D

1570295710
traviss
ah dang

1570295729
mq32
my internet connection doesn't allow streaming

1570297983
mikdusan
andrewrk: may i go ahead and merge #3368?

1570298079
andrewrk
mikdusan, can you add that reduction as a behavior test first?

1570298085
mikdusan
aye

1570298089
andrewrk
the impl looks good

1570298803
collector_of_pre
Hello, newbie to Zig here with a possibly misunderstanding...

1570298835
collector_of_pre
If I have an invalid function, does `zig build-exe` (or some such command) not show the compilation error until I actually use that function in my code?

1570298881
collector_of_pre
I would have imagined that `build`, `build-exe` or `run` (if not `test`) would have at least given a compilation error even if the function is not called from anywhere in the code?

1570298920
collector_of_pre
I am using zig version `0.5.0+dca6e74f` by the way (from `master`)

1570298924
mq32
collector_of_pre, zig is really lazy

1570298933
mq32
it doesn't semantically analyze your functions until you use them

1570298943
collector_of_pre
Oh. Is there any way to force that behaviour?

1570298950
collector_of_pre
I mean to analyse it fully

1570298954
mq32
no

1570298958
collector_of_pre
:(

1570298959
mq32
not that i know of

1570298961
mq32
write tests!

1570299009
tgschultz
That is something that has been brought up a few times as being a useful idea. I think there's an issue for it in the tracker, but it is low priority

1570299012
collector_of_pre
Sure, tests are good, but during exploratory programming, it can be a real hassle

1570299021
collector_of_pre
Hmmm...

1570299049
collector_of_pre
Okay, at least I know now that it's expected behaviour... I was thinking I was missing something!

1570299058
collector_of_pre
Thanks for the help, folks.

1570299215
mps
Hi, I'm trying to make zig package (apk) for Alpine Linux, but have issue in linking phase. is it ok to ask for help here about building it?

1570299745
fengb
collector_of_pre: you can force it to compile with `_ = func` in a test block

1570301459
andrewrk
mps, yes, what seems to be the problem?

1570301924
mps
would you mind if I post my APKBUILD file for alpine and build log

1570301990
mps
in short, it seems linker can't find libstdc++

1570302162
mps
andrewrk: we are using llvm9 and batteries, and I'm trying to build zig 0.5.0

1570302355
andrewrk
mps, I'm not sure what batteries is, but can you try putting libc++ on the linker line? look for target_link_libraries in CMakeLists.txt

1570302366
andrewrk
it should be just `c++`

1570302391
andrewrk
I'll take a look at the build log

1570302420
mps
ok, give me a minute

1570302535
mps
here is the build log

1570302580
mps
and here is the APKBUILD (Alpine build file)

1570302700
mps
I have installed gcc, g++, musl-dev, llvm9-libs, clang-libs, clang-dev, llvm9-dev, lld-dev ... (I call it llvm batteries)

1570302868
mps
I have to add that I'm not much versed with cmake

1570302871
andrewrk
mps, hmm interesting, so these linker errors are coming from clang driver code that zig carries. this would suggest that there are alpine linux patches on the clang or llvm libraries being linked against which have made ABI incompatible changes

1570302899
andrewrk
or it would suggest that you used a different compiler for the clang/llvm libraries than the one used for zig

1570302953
andrewrk
uhh you're also using gcc for the c compiler but clang for the c++ compiler? that's not a good idea

1570302955
mps
yes, patch which add add-musl-triples.patch

1570302984
andrewrk
it also says -- Could NOT find CLANG (missing: CLANG_LIBRARIES) - Could NOT find LLD (missing: LLD_LIBRARIES)

1570302994
mps
right

1570302997
andrewrk
does your script run make even if cmake failed?

1570303003
andrewrk
if cmake fails then it failed

1570303058
mps
iiuc, cmake just make config, and make builds. or I'm wrong

1570303072
andrewrk
please change your script to not blindly continue if cmake fails

1570303172
mps
hm, I also looked at Arch linux PKGBUILD which is similar to my, here it is

1570303224
mps
but, yes, what you say makes sense

1570303294
andrewrk
the -DCMAKE_CXX_COMPILER flag is not allowed; you must build zig with the same compiler that built the system llvm/clang/lld packgaes

1570303485
mps
it doesn't work with c++ in alpine sdk

1570303518
andrewrk
clang, llvm, and lld got compiled with a c++ compiler. you must use the same one

1570303605
mps
yes, I know, but it tells me '"/usr/bin/c++" is not able to compile a simple test program.'

1570303631
mps
and, this c++ can build complicated programs in alpine

1570303676
mps
could it be because we use musl as base libc and not glibc

1570303938
andrewrk
zig compiler uses the system libc

1570303968
andrewrk
I think you are having build issues with your system, if you were to try compiling a "hello world" project you would have the same issue

1570304085
mps
do you mean "hello world" project from zig source?

1570304138
andrewrk
mps, no I mean can you even compile any other c++ cmake project? I don't think zig is an exception here

1570304174
mps
ah, no. I build and test really big software packages in my builders

1570304196
andrewrk
we build and test zig on alpine linux with every ci commit:

1570304232
mps
today I just pushed crystal language to alpine

1570304251
mps
and it requires llvm and other things

1570304264
andrewrk
does crystal use cmake?

1570304272
mps
no

1570304278
mps
makefiles

1570304317
mps
but thanks for url about docker, will look there, maybe I can find what is the issue on my side

1570304548
mps
if you are building it in alpine docker then I have similar environment

1570304663
mq32
<mps> yes, I know, but it tells me '"/usr/bin/c++" is not able to compile a simple test program.'

1570304682
mq32
what  compiler is that?

1570304699
mq32
(also, my brain messed up cpp and c++)

1570304703
mq32
just ignore what i wrote

1570304745
mps
gcc 9.2

1570304776
mps
you can look at alpine edge repository and see what I use

1570305065
andrewrk
if anyone is looking for something to do, we need doc comments in stage1 parser now

1570305198
andrewrk


1570307776
mps
andrewrk: mq32: found the issue, should use static version of libs to build it

1570307864
mps
only need to fix PIE to PIC

1570308612
mq32
andrewrk, what is the easiest way to crosscompile with external library dependencies with zig?

1570308650
mq32
i'm building some stuff right now i want to try on my raspberry pi

1570308668
mq32
but i don't think it's reasonable to build LLVM, clang and zig on the RPI

1570308668
andrewrk
mq32, create "zig packages" for the external libraries

1570308685
mq32
ah okay

1570308687
andrewrk
like this:

1570308694
mq32
so i can start with your zig-sdl project

1570308704
mq32
and start to package libX11

1570308705
andrewrk
this will be easier / more clear with the zig package manager, but you can fudge it with git sub modules or equivalent

1570308730
andrewrk
it requires sort of hacking up the build system from make or whatever to zig build. but the benefit is then that you unlock full cross compilation

1570308739
mq32
:)

1570308761
andrewrk


1570308782
mq32
yeah i thought about that

1570308792
andrewrk
you might go a little insane trying to do this before we have the package manager, fair warning :)

1570308793
mq32
but it will not help that sdl for arm will require libx11

1570308806
andrewrk
well yes dependencies are recursive

1570308809
mq32
yeah i just learnt how to use addPackagePath today :D

1570308814
andrewrk
hence the insanity

1570308821
mq32
i used slackware one :D

1570308823
mq32
*once

1570308827
mq32
i know the drill

1570308893
andrewrk
0.6.0 is gonna be a banger. auto generated docs, SIMD, evented networking, package manager

1570308911
mq32
yeah this will rock!

1570308917
andrewrk
none of this stuff is as hard as result location or the async/await rewrite

1570308927
mq32
hehe

1570308931
mq32
btw, i have to say it again

1570308937
mq32
you did a great job on language design

1570308941
andrewrk
thanks :)

1570308971
mq32
i have coded 1500 LOC in the last two days and it was a really pleasant experience :)

1570308989
mq32
i now have a zig-only OpenGL ES 2.0 binding

1570308998
mq32
so no need for libepoxy for me :)

1570309092
andrewrk
nice! I'll probably try to use your lib when I get to that point

1570309145
mq32
oh, cool

1570309153
mq32
it's pretty convenient

1570309171
mq32
it exports all OpenGL symbols by name (just converted the C headers) and loads a function pointer in background

1570309213
mq32
but you still need to provide a "loader" for this

1570309230
mq32
load_gles2(SDL_GL_GetProcAddress);

1570309230
mq32
load_gles2Extensions(SDL_GL_GetProcAddress);

1570309271
mq32
and then you can just use glGetError() or similar as in other languages :)

1570310267
_Vi
Is there some convention (or keyword) for private struct fields?

1570310299
_Vi
Where "private" means "not a part of stable library API".

1570310367
mikdusan
mq32: mixin fix is in master now. let me know if it works for your case

1570310388
mq32
oh neat!

1570310408
mq32
but i think i have to wait until CI published new build

1570310416
mikdusan
it's there

1570310426
mq32
that's fast

1570310780
mq32
yes, it works

1570310781
mq32
nice!

1570310946
mikdusan
yeehaw

1570311065
mq32
and i can now make generative vector classes

1570311067
mq32
this is neat!

1570311091
mq32
const Vec3 = struct { x:f32, y:f32, z:f32, usingnamespace VectorMixin(@This()); };

1570311097
mq32
and "vector class" is implemented :)

1570311157
mikdusan
now we just need `usingfieldspace` j/k

1570311189
fengb
Somewhere scientes is screaming inside

1570311200
mikdusan
i still think there is a good delegation path to a lot of oo stuff

1570311346
tgschultz
does that work the way I think it does? The VectorMixin generates a set of functions that Vec3 can call in method syntax?

1570311354
mikdusan
yes

1570311378
tgschultz
That potentially can be used to smooth out a lot of our interface stuff.

1570311417
tgschultz
Though I'm really not feeling up to another go at interface reform just yet.

1570311468
tgschultz
I didn't think we were going to let usingnamespace work that way. Personally I was actually against it due to my experience with Go's struct composition.

1570311511
mq32
i'm quite happy that mixin logic now works

1570311534
mq32
i have reduced my copy-paste count of a factor 3

1570311579
tgschultz
I get where you're coming from, but having read a bunch of code with the struct definition spread between 5 or more different files I'm not super keen on it.

1570311625
mq32
yeah, every feature can be used and misused

1570311676
tgschultz
From my experience with Go, I feel like it will be `misused` much more often.

1570311732
mq32
yeah but i don't think we can prevent this kind of "feature"

1570311735
mikdusan
it could be. but isn't go's stuff embedding ?

1570311740
mq32
as it's a side effect of "modules are just structs"

1570311788
tgschultz
I was kinda hoping Andrew would lean the other way and make 'use' only work for cImport or something. But oh well, it's here now.

1570312056
mq32
i think it's better that we can import some full modules into the global namespace

1570312086
mq32
it may reduce readability in the same was as it can increase readability

1570312102
mikdusan
this is really jumping the gun at part of #1717. with that you get this plus the new syntax.

1570312108
mikdusan
*as part*.

1570312121
tgschultz
I disagree there too. I like knowing which of the 3 dozen imports a given thing comes from

1570312150
mq32
yeah, but this will lead to import names like V

1570312162
mq32
because i'm too lazy to type a namespace every 4 characters

1570312169
tgschultz
which is still better than nothing

1570312190
tgschultz
I can at least look for `const V = @import("whatever");`

1570312196
fengb
Iâ€™ve never seen that in any namespace heavy language

1570312202
mikdusan
heh i'm opposite. i just import std and litter code with std.fs.File and std.math.big.Int ...

1570312214
fengb
JS, Python, Elm, all keep sanely qualified names around

1570312282
mq32
my focus is always some math-heavy stuff

1570312313
mq32
and if i clobber `a + b * c` to `xq3d.math3d.Vec3.add(a, xq3d.math3d.Vec3.mul(b, c))`

1570312320
mq32
it's much harder to grasp what actually happens

1570312335
mq32
and this is an easy formula

1570312353
tgschultz
and yet zig doesn't let you overload operators for a variety of good reasons

1570312374
mq32
which drives me crazy already, but i can accept that

1570312381
mikdusan
yeah i'm going to yield to math just seems to want it's own dsl'ish brevity

1570312388
mq32
because now i have to switch on primitive type or "vector type"

1570312438
fengb
Vector types should use @Vector and that supports operators :P

1570312453
mikdusan
math is always a special case. almost every parser in the world does on thing, then does a crazy-ivan just to support math and operator precedence

1570312454
tgschultz
math is alread its own DSL, we should just create a comptime function that turns formula written in tex into real code.

1570312484
mq32
fengb, yeah but afaik vector types don't have readable subscripts like ".x"

1570312563
fengb
mikdusan: except Lisp >_>

1570312583
mikdusan
i see the >_> but i'm still going to say: why'd you go there? why?

1570312659
fengb
Cause Iâ€™m the guy that has to be right, no matter how relevant the discussion

1570312672
mikdusan
i agree

1570313055
_Vi
How do I decode big endian integers and floats in Zig from `[]const u8`?

1570313064
mps
I've built zig on alpine, zig0 shows options, help, etc. only have issue to build libuserland, but will left this for tomorrow

1570313097
mps
thanks for help, and I hope we will have zig on alpine in a few days

1570313099
tgschultz
_Vi: std.mem.readInt and its varients

1570313164
mikdusan
_Vi: i have never used it but maybe std.mem.readVarInt

1570313184
mikdusan
or you know what tgschultz said over a minute before me

1570313235
_Vi
tgschultz, OK, there's readIntBig. How about floats?

1570313236
tgschultz
specifically you probably want readIntSlice(Big|Little)

1570313257
tgschultz
For floats read them as an int, then @bitCast to a float

1570313287
_Vi
Shall such tricks be concentrated in a standard library, not in user code?

1570313330
tgschultz
I dunno, up to andrew. It is not currently well defined what should be in std.

1570313373
tgschultz
I wouldn't even call that a trick though. It's all just bits and how you interpret them.

1570313406
tgschultz
Serialize/Deserialize do the exact same thing

1570313447
companion_cube
int<->float is tricky enough it deserves its own function, imho

1570313555
tgschultz
what's tricky about it? It's the same bits, it's just a matter of how to interpret them. This isn't like @floatToInt/@intToFloat. These bits are a float, we just use readInt to perform the endianess conversion.

1570313558
mq32
btw, is there an option to usingnamespace on function/scope level?

1570313577
companion_cube
tgschultz: you need to know about endianess and the precise representation of floats :/

1570313610
tgschultz
no you don't. It is irrelevant how the float is represented because you aren't doing anything to the bits other than change the endianess.

1570313683
companion_cube
sure. It's just error prone, is all.

1570313687
tgschultz
how?

1570313702
companion_cube
anyway serialization should always use a well defined format, not just dumping structures :s

1570313720
tgschultz
Yeah, because everything understand XML

1570313741
tgschultz
it's not like decades of computing accomplished anything just by putting bits on media or anything.

1570313754
companion_cube
thanks for the strawman

1570313755
andrewrk
mps, zig0 is not zig, please don't make that the alpine package binary

1570313764
companion_cube
I was thinking CBOR, not XMLâ€¦

1570313827
tgschultz
it doesn't matter. there are currently hundreds of protocols and formats in common usage that are just structures on disk.

1570313847
tgschultz
or wire

1570313859
companion_cube
and currently there are a ton of vulnerabilities caused by that pattern, and  the general use of C and unchecked formats

1570313867
mps
andrewrk: ofc, no problem, I just wanted to report where I reached

1570313887
fengb
We canâ€™t fix existing formats

1570313900
tgschultz
The vulnerabilities are not caused by the data, they're caused by bad interpretation of the data.

1570313909
tgschultz
That isn't fixed by using a different format

1570313914
fengb
If we donâ€™t support them then thatâ€™s one less thing zig would support

1570313915
companion_cube
and by the idea that "just read a struct" is acceptable

1570313932
companion_cube
if you read data, you need a parser, that's my opinion.

1570313947
mps
I read about lang few weeks ago and today found some time to look at it, looks really fine

1570313950
companion_cube
(even if you're dealing with bad protocols)

1570314014
tgschultz
Well, I disagree, strongly.

1570314029
companion_cube
what good protocol based on "just dump structs" do you like?

1570314041
tgschultz
You need to verify that the data you load from unknown sources is valid, that's all.

1570314064
tgschultz
How about PNG? PNG is ok, and it's just structures on disk.

1570314075
andrewrk
mps, good progress :)  I will be happy to help with the rest later

1570314158
companion_cube
seems to me like png is a well defined binary format for which you can write a parser?

1570314165
mps
thanks again, and thanks for good language. your docker file helped me to understand it little more

1570314203
tgschultz
...yeah? When you dump structures to disk in a defined way, that's serialization. That's what Serializer/Deserializer do.

1570314240
companion_cube
I'd rather have a library that prints stuff to png for me. Serialization can be just "dump a struct on disk", but deserialization needs to be careful.

1570314296
companion_cube
at some point you need to defined your structs in a way that exactly fits the format

1570314344
tgschultz
I'm not sure what you're saying. Structs are, by definition, defined.

1570314379
companion_cube
I thought zig could arrange their layout in any way it wanted?

1570314404
tgschultz
It sure can, but serializer/deserializer always lays things out the way they are written unless you've overridden it.

1570314467
tgschultz
but even just tagging structs as packed would fix the layout and work fine as long as you don't care about endianess

1570314486
companion_cube
how do you serialize a slice of runtime known length?

1570314537
tgschultz
Serializer/Deserializer don't, they leave any kind of pointer handling up to the caller to deal with and error if they don't.

1570314546
tgschultz
But typically, you'd write length+data

1570314575
companion_cube
ah, well, ok.

1570314596
companion_cube
at this point you can also do a bit of comptime codegen for serializing to msgpack/cbor/â€¦ so it's interoperable

1570316222
_Vi
Is it coincidence that Github's programming language colours for Zig and for Rust are very similar?

1570316250
tgschultz
I doubt it, we used to use Rust coloring before zig had its own

1570316729
rifkik
Did somebody ping me?

1570316942
rifkik
Sorry, unlike Discord, my IRC client limits the messages that I could see

1570317108
jmiven
rifkik: the channel is logged:

1570317148
rifkik
Ah

1570317150
rifkik
Thanks

1570318075
companion_cube
was whitequark around at some point in the past?

