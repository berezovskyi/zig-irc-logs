1559815379
FireFox317
I'm trying to do some freestanding arm programming with zig and I want to use mem.set to zero the bss. I have two pointers (extern var _sbss) to the end and the beginning. However I can't use mem.set because it is telling me: 'slice of non-array type'. How do I go from 2 pointers to an array?

1559815487
FireFox317
I could use @memset as i've seen in andrewrks clashOs, but this only copies bytes and I would like to copy words, because everything is aligned correctly

1559817759
SamTebbs33
FireFox317: I have done something like this before, let me dig an example out

1559817840
SamTebbs33
Is _sbss defined in your linker script?

1559819643
FireFox317
SamTebbs33: Yes I defined the signals in the linker script and I can access them in my zig code too. But I think the problem is that the mem.set wants an array and i only have those pointers.

1559820398
FireFox317
*symbols ^

1559822351
SamTebbs33
FireFox317: Here's a link to some code where I convert a linker script address into a slice

1559822363
SamTebbs33
Oh that was bad timing...

1559822465
SamTebbs33
FireFox317: Replace FIXED_ALLOC_SIZE with the difference between the start and end of bss as that will give the desired length

1559822970
FireFox317
SamTebbs33: Thank you for the reference. I'm gonna try to figure it out.

1559823890
SamTebbs33
FireFox317: sure, no problem

1559826480
FireFox317
I also noticed that if I include the @memset in the code it includes a whole lot of extra symbols like std.math stuff and __div etc. Just by using @memset.

1559826556
FireFox317
I went from 310 to 14 symbols by just commenting out the @memset function. :O

1559826648
SamTebbs33
oh wow :O that must be something that can be optimised

1559826997
FireFox317
and by disassembling the main function it shows that it only calls __aeabi_memclr to do the @memset

1559827003
FireFox317
Should I make an github issue for that?

1559827616
SamTebbs33
FireFox317: If all the other symbols are brought in but never used then I'd say there's a bug so an issue is probably a good idea

1559828995
FireFox317
Nvm, there is already an issue for that:

1559829711
SamTebbs33
FireFox317: oh good, thanks for the link

1559833132
tgschultz
Re: yesterday's brief discussion on Jai and Odin. I actually tried Odin before Zig when looking for a C replacement. Avoiding badmouthing other languages here, I'll say that onething that helped win me over with Zig was that even though the stdlib lacked documentation the language itself didn't and that meant I could dive in and start using it for real things right away, not just in some nebulous future.

1559833185
halosghost
is Jai even evailable yet?

1559833190
halosghost
available* even

1559833197
halosghost
it's one of the ones I've been meaning to look into

1559833205
halosghost
but every time I've looked in the past, there's been no compiler

1559833294
tgschultz
no. It exists only within Thekla right now

1559833305
halosghost
yeah

1559833308
halosghost
that's kind of what I thought

1559833319
halosghost
if it ever actually gets released (and runs on linux), I'll definitely consider it

1559833326
halosghost
but it has overloading now

1559833333
halosghost
which is a bit disqualifying for me

1559833429
tgschultz
there are several features of Jai that I think are not what I want in a language.

1559833448
halosghost
for me as well

1559833458
halosghost
I will say thought that SOA/AOS is kind of amazing

1559833775
tgschultz
that isn't even in the language anymore as I understand it

1559833823
tgschultz
he keeps mentioning a feature that'll replace it that's "much better", but it remains a mystery to everyone outside of Thekla.

1559833849
halosghost
wat

1559833855
halosghost
SOA/AOS was amazing

1559833861
halosghost
if it's not there anymore, that'd be a tragedy

1559833869
halosghost
I'll be impressed if something else really is better

1559833879
halosghost
but I'm surprised

1559833940
tgschultz
hmm...mentioning SOA/AOS got me thinking... I can probably make a pseudo-struct in zig that does that.

1559833956
halosghost
DEWIT

1559833990
halosghost
I would adore that functionality in every other language

1559834014
halosghost
I need to get more into zig, but my personal projects are already taking so much of my time that I haven't had the energy to really dive in

1559834030
halosghost
(part of the problem is that the things I want to write tend to use crazy C libraries like ncurses :P)

1559835930
fengb
Resurrecting the thread: one of the things I like about Zig's philosophy (and Go and Python) is it tries to be consistent and get out of the way

1559835964
fengb
Every language that emphasizes "joy" or what not ends up being quirky around the edges

1559835972
scientes
yes

1559836034
tgschultz
Zig generally aligns with my personal philosophy of "simple is usually better, even if it is harder".

1559836049
scientes
that's why languages have functions...

1559836077
scientes
but zig is quite a bit more powerful than C

1559836082
scientes
except for the bugs that is

1559836100
fengb
tgschultz: even that can get complicated. People also love Clojure because it's "simple"

1559836139
companion_cube
how is clojure not simple? :)

1559836255
tgschultz
what I mean by simplicity is the ability to create an accurate mental model of it with relatively little effort. Simple: files and folders, Complicated: relational databases.

1559836256
fengb
For 1, I've never understood lambda calculus as the "base" of programming when bare metal is all imperative

1559836279
scientes
it just means they think that way

1559836283
companion_cube
it's a convenient high level calculus, is all

1559836284
tgschultz
surely there are cases where more complex solutions are necessary, but in my estimation a whole lot of our industry fetishises complexity.

1559836297
scientes
regular expressions (actual ones) are also important, but not integrated very well

1559836311
scientes
although zig wants to do comptime compilation and evaluation of regular expressions

1559836315
fengb
But also, the details of the core libs are really complicated. Lists are n blocks of memory chained by linked lists

1559836409
fengb
Anyway, I like Clojure. I just don't really think it's that simple, especially when compared with some of the other Lisps

1559836483
companion_cube
ok, I'd agree scheme is simpler‚Ä¶ except for call/cc üòÅ

1559838652
tgschultz
halosghost:

1559838665
tgschultz
godbolt's url shortner seems to be busted.

1559839232
andrewrk
SOA/AOS is a recognized valid use case of the zig project and further recognized as not currently solved

1559839292
andrewrk
argh did the macos CI break? macos is such a moving target

1559839424
scientes
also the lack of struct order guarantees mean it could be better than C, with much less effort on the programmer's part

1559839599
scientes
ohh i see

1559839674
scientes
that allows you to use libmvec too

1559839924
mikdusan
stupid question: in pipelines.yml `vmImage: 'macOS 10.13'` -- docs examples show 'macOS-10.13' or 'macOS-10.14' as choices

1559840110
andrewrk
we should probably choose 10.14

1559840158
mikdusan
that llvm binary indicates it was built on 10.14

1559840258
mikdusan
maybe in macos script add a few lines like: `sw_vers`, and `ld -v` . i suspect ld

1559840295
mikdusan
(but i think that's a 10.14 thing.. so maybe not relevent to this failure)

1559841243
halosghost
tgschultz: fascinating

1559841278
halosghost
andrewrk: I'm really happy to hear zig is interested in solving SOA/AOS

1559842098
halosghost
andrewrk: any chance there's an open issue about SOA/AOS?

1559842205
halosghost
I see a couple of related issues (#2255, #2078), but not a specific umbrella issue

1559842275
halosghost
(also, #383)

1559844903
andrewrk
halosghost: feel free to open a new one specifically for the use case. I think there is not a dedicated issue for it yet

1559844930
andrewrk
I'll leave it open until zig has an official answer for how to do that use case

1559845398
halosghost
sounds fun

1559845423
halosghost
I will open one (probably tonight), and try to go into as much detail as possible

1559845439
halosghost
tgschultz: with your permission, I would include the code you threw together as a basic example of a prototype

1559845511
tgschultz
that's fine by me. If you don't want to include the PseudoStruct portion directly you could link

1559845733
halosghost
I like it

1559845752
halosghost
tgschultz: any chance you could separate out the other code from your example so I can link to both files separately?

1559845785
tgschultz
sure. I'll put it in a gist

1559845827
halosghost
‚ù§

1559846122
tgschultz


1559846187
halosghost
‚ù§

1559848700
hoppetosse
andrewrk: is there a stream tonight?

1559848715
hoppetosse
I keep missing the broadcast but I really enjoy the videos

1559848800
andrewrk
hoppetosse, I'm postponing it until tomorrow

1559848816
andrewrk
I'm subletting my apartment to save some money, have to hand over the keys in a couple hours. should be all settled in by tomorrow

1559848852
hoppetosse
sounds great, good luck with all the logistics!

1559850795
scientes
so you are going to live under a bridge?

1559851153
hoppetosse
My family did that once when I was younger, we lived in the basement for a couple of months

1559851164
hoppetosse
It was a nice basement =)

1559851179
scientes
with friendly cockroaches :)

1559851190
scientes
nah, i'm not trying to insult

1559851197
hoppetosse
No cockroaches thankfully, but the occasional mouse

1559851198
scientes
just making fun of life

1559851211
hoppetosse
the cute kind

1559851220
scientes
that poop over everything

1559851233
scientes
and chew everything

1559851296
hoppetosse
It was a pretty cool experience considering, and we made quite a bit of money

1559851314
hoppetosse
kept us up until my parents work picked up again =)

1559851453
fengb
I miss mice. We get rats :/

1559851601
fengb
Is there a profiling library for Zig?

1559852334
andrewrk
fengb, you can use existing profile tools that work for c/c++ code with zig

1559852363
andrewrk
For example valgrind has some profiling tools

1559852372
andrewrk
Also, I think it's called, perf

1559852393
andrewrk
I haven't looked into the equivalent of -fprofile-arcs yet

1559852450
andrewrk
My girlfriend and I are house sitting for her thesis advisor for 3 months, so it's a little better than living under a bridge :-)

1559852533
andrewrk
I also want to look into integrating benchmarks and profile-guided-optimization

1559852574
Cadey
it'd be nice if making a benchmark was as easy as making a test

1559852665
Cadey
consider go's func BenchmarkFoo(b *testing.B) pattern

1559852680
Cadey
(ref:

1559853661
Wolf480pl
Hello. I just learned about zig's error sets, and I was wondering: how does it handle the differences of the possible errors between OSes?

1559853784
Wolf480pl
For example, on Linux close(2) can result in ENOSPC, but POSIX doesn't mention it, so there are probably systems where it can't happen. Is it possible to write a zig wrapper for a C function in such a way, that even on system on which close can't result in ENOSPC, ENOSPC will still be in the wrapper's error set, so that the error set stays consistent across systems?

1559854099
Frank-Lesser
Hi all

1559854198
Frank-Lesser
I was trying to solve the compilation issue & got a bit further - just hanging on debug.zig no member called 'CONSOLE_SCREEN_BUFFER_INFO'

1559854237
emekankurumeh[m]
Wolf480pl: you could just define an error set that contains all possible errors and define the function as one that returns errors from that set.

1559854286
Wolf480pl
so I can declare errors that the current implementation does not return? Nice.

1559854290
emekankurumeh[m]
Frank-Lesser: what compilation issue?

1559854339
Frank-Lesser
I was trying to compile hello_windows.zig with the latest ( andrew know the issue )

1559854351
Frank-Lesser
it is connected with hefty changes

1559854431
Frank-Lesser
it compiles with zig 5d347c07 ( before usenamespace )

1559854512
Frank-Lesser
had to add a bunch of constants back to std/os/windows.zig

1559854547
Frank-Lesser
like DWORD / HANDLE etc

1559854832
emekankurumeh[m]
i think that's due to an error with how imports work

1559854903
Frank-Lesser
hmm no IMO the files have changes - just missing constants

1559855047
emekankurumeh[m]
the constants are imported but due to an issue with imports the constants aren't present

1559855113
emekankurumeh[m]
when i try to build/run hello_window.zig the first error i get is ` error: import of file outside package path: 'windows/bits.zig'` which

1559855113
emekankurumeh[m]
that's where those missing constants are defined

1559855143
Frank-Lesser
yep , just looking

1559855624
Frank-Lesser
hmm yes indeed contains missing things but still errors

1559855744
Frank-Lesser
I get this one now ...debug.zig:549:30: error: container 'std.os.windows' has no member called 'CONSOLE_SCREEN_BUFFER_INFO'

1559855770
Frank-Lesser
but CONSOLE_SCREEN_BUFFER_INFO is in bits.zig

1559855864
emekankurumeh[m]
hence the error with the import system

1559855972
Frank-Lesser
hmm there are 2 bits.zig

1559856166
alexander92
hey guys

1559856187
alexander92
i am a nim guy, but also a big langdev hobby enthusiast

1559856216
alexander92
i wondered if there is a nim(or e.g. rust/crystal) vs zig comparison, or people that used both

1559856286
alexander92
three things i am interested in: metaprogramming, interesting type system guarantees, osdev applicability(ease to write very low level cod)

1559856397
emekankurumeh[m]
i've used all 4 to varying degrees so feel free to ask an questions and i'll do my best to answer

1559856456
alexander92
ok!

1559856467
alexander92
so does zig have some metaprogramming support?

1559856476
alexander92
i know it has compile time fn-s (?)

1559856508
alexander92
but does it have any way to affect somehow ast-s or to at least analyze inline annotations

1559856571
emekankurumeh[m]
it's not well documented but zig has pretty strong metaprogramming support

1559856640
alexander92
hm, so what subset of zig can you run on ct

1559856819
emekankurumeh[m]
you can't run any extern functions at conpile time, some casts don't work but most of those are bugs

1559856886
emekankurumeh[m]
for anything else that zig can't do at comptime it will emit an error

1559856968
alexander92
nice

1559856985
alexander92
so how does it do it? nim uses its own interpreter, i guess zig does something similar

1559857014
alexander92
but this is still not touching the syntax right

1559857038
alexander92
so is zig's goal to not surprise the user (like go), not letting macros affect stuff

1559857042
emekankurumeh[m]
in zig you don't have access to the AST like in nim, and you don't have anything like procedural macros or templates but you full access to all type information and you can see `std/meta.zig` for some examples

1559857048
alexander92
or is it more like rust/nim: having full macros

1559857055
emekankurumeh[m]
correct

1559857064
alexander92
ok

1559857136
alexander92
like that

1559857147
alexander92
i am a big macro fan, but its good to have both options as langs

1559857179
alexander92
otherwise does it have some type stuff which is not related to memory, e.g. typeclass-like things

1559857199
alexander92
dependent-type-like stuff, or is the type system mostly

1559857209
alexander92
focused on making low level code work well

1559857295
alexander92
and how easy is to debug, basically to map zig to the asm code(or equivalent c)/step around, i am working on some nim/c debug tools, so very interested in t

1559857301
emekankurumeh[m]
you can do some pretty crazy stuff using zig's metaprogramming. like userland AoS to SoA:

1559857545
emekankurumeh[m]
in zig it's pretty easy to understand what asm code the compiler will produce, and debuggers like lldb and gdb work with zig executables

1559857686
alexander92
ok, hm, also how fast is compile time

1559857690
alexander92
relatively

1559857698
alexander92
e.g. if hypothetically

1559857703
alexander92
the whole zig compiler is in zig

1559857717
alexander92
how much would it take to rebuild itself on a modern laptop

1559857728
alexander92
this is a very unscientific question ugh

1559858002
emekankurumeh[m]
the self-hosted zig compiler currently doesn't compile as it's waiting on a couple of language changes, but my zig projects always compiler relatively fast, i.e. less that 5 seconds

1559858041
emekankurumeh[m]
though the amount of comptime code present might slow things down

1559858107
alexander92
yes similar to nim ast code

1559858121
alexander92
how is it limited: in nim usually you have a limit on the amount of instructions

1559858127
alexander92
the vm will run on ct

1559858136
alexander92
(compil time)

1559858158
FireFox317
Don't forget the awesome cache system that Zig is using to speed up compilation time

1559858169
alexander92
so after the first compile

1559858174
alexander92
it runs much faster

1559858177
alexander92
?

1559858186
alexander92
can it parallelize compilation somehow

1559858202
alexander92
does it run compilation for each "module" indepenendently (relatively)

1559858214
alexander92
or does it run each pass for the whole codebase and then the next one

1559858218
emekankurumeh[m]
in zig you can use `@setEvalBranchQuota` to change the maximum number of backwards branches that compile-time code execution can use before giving up and making a compile error.

1559858232
emekankurumeh[m]
and that works on a per-block basis

1559858290
emekankurumeh[m]
zig also caches comptime code if i remember correctly

1559858405
alexander92
hmm

1559858407
Frank-Lesser
ok, bye already the next day & need to get up early , hope the import system get fixed

1559858412
emekankurumeh[m]
zig compiles all the code into a single object file for link time optimizations

1559858428
alexander92
ok, but what i wondered is

1559858446
alexander92
how easy is for zig to reuse previous artifacts

1559858455
alexander92
e.g. if it caches IR for certain modules

1559858459
emekankurumeh[m]
see you

1559858462
alexander92
or just ast

1559858471
alexander92
night

1559858472
alexander92
!

1559858519
Frank-Lesser
what I did I renamed bits to bitsw ( the deeper one ) still getting errprs

1559858564
emekankurumeh[m]
it caches all build artifacts as i can tell.

1559858607
emekankurumeh[m]
the higher level bits just re-exports the lower level one

1559858659
Frank-Lesser
the orig doesnt work ( getting the compile errors )

1559858922
emekankurumeh[m]
when you import them into a namespace it works:

1559859359
Frank-Lesser
hmm just tried that - still errors

1559859368
Frank-Lesser
reverted all my changes

1559859381
Frank-Lesser
thx a lot for fast answer

1559859383
emekankurumeh[m]
with the original std files

1559859474
Frank-Lesser
which orig std ? I used the latest one

1559859499
Frank-Lesser
my first error using your hello_windows.zig

1559859501
Frank-Lesser
build-release\lib\zig\std\os\windows.zig:839:13: error: use of undeclared identifier 'FORMAT_MESSAGE_FROM_SYSTEM'

1559859597
emekankurumeh[m]
i meant with no changes

1559859683
emekankurumeh[m]
hmm, it works no problem for me on master

1559859692
Frank-Lesser
downloaded the latest & used your gist hello_world.zig

1559859994
andrewrk
emekankurumeh[m], the  self-hosted zig compiler does compile, it's part of the test suite

1559860006
andrewrk
it takes about 10 seconds to build

1559860046
andrewrk
that's stage1 building stage2 though. stage2 can only build hello world and has a lot more incremental build features planned

1559860789
emekankurumeh[m]
it shouldn't be too much work to get that compiling on mingw64 then

1559860881
Frank-Lesser
this is what I getwith latest C:\Program Files\Zig\lib\zig\std\os\windows.zig:21:20: error: import of file outside package path: 'windows/bits.zig'

1559860964
emekankurumeh[m]
andrewrk: is azure ci for open source projects free?

1559861050
emekankurumeh[m]
Frank-Lesser: that was the error i was describing earlier

1559861140
emekankurumeh[m]
it's because the package path is changing suddenly behind the scenes. if you go into ir.cpp and have it print out the full paths when it's resolving a package for some reason when importing `windows/bits.zig` it looks in the cwd but only for that file

1559861233
Frank-Lesser
hmm would't it be a work around just to rename one of the bits.zig ?

1559861278
emekankurumeh[m]
i don't think so, i tried doing that a while ago and it didn't seem to work

1559861299
Frank-Lesser
ok

1559861615
emekankurumeh[m]
this patch should show when that happens:

1559861682
emekankurumeh[m]
when you namespace the import the cwd is nowhere to be found in the output

1559861883
Frank-Lesser
ok, thx- I shall try tomorrow morning

1559862573
emekankurumeh[m]
i opened an issue for it here:

1559862851
Frank-Lesser
ok thx a lot

1559862873
Frank-Lesser
just compiling zig with printing the pkg root

