1574467694
shachaf
andrewrk: One good tip for reading x86 is to use octal rather than hexadecimal.

1574467763
shachaf
(Since there are eight base registers, so the modrm byte and other things use groups of three bits.)

1574477704
reubend
Is there a convenient way to step by 2 in for loops?

1574478150
daurnimator
reubend: its just as awkward as stepping by 1...

1574478179
reubend
The syntax for stepping by 1 is:

1574478189
daurnimator
`var i: usize = 0; while (i < len) : (i += 1) { ...... }` just swap `+= 1` for `+= 2`  :P

1574478191
reubend
for (array) |item| {}

1574478205
daurnimator
reubend: that's the syntax for iterating over members of a slice

1574478219
reubend
ok I see

1574478221
reubend
thanks!

1574479580
Cucumbas
I built a zig file as a static c library and when i compile c code that uses the library I get undefined symbols __zig_probe_stack, std.sort.sort, etc.. what could this mean?

1574479628
andrewrk
Cucumbas, can I see the full output?

1574479661
Cucumbas
gcc -std=c89 test.c libvec_api.a -o test

1574479661
Cucumbas
Undefined symbols for architecture x86_64:

1574479661
Cucumbas
"___zig_probe_stack", referenced from:

1574479663
Cucumbas
_std.sort.sort in vec_api.o)

1574479665
Cucumbas
_std.debug.printLineFromFileAnyOs in vec_api.o)

1574479667
Cucumbas
ld: symbol(s) not found for architecture x86_64

1574479669
Cucumbas
clang: error: linker command failed with exit code 1 (use -v to see invocation)

1574479704
andrewrk
Cucumbas, note that std.sort.sort is not an undefined symbol - that's where it is referenced from

1574479726
andrewrk
try using the --bundle-compiler-rt option

1574479939
Cucumbas
andrewrk: right, my bad. Alrighty brb

1574479987
andrewrk
Cucumbas, no worries, I wasn't trying to rebuke you

1574480017
Cucumbas
andrewrk: I feel so rebuked... ;)

1574480116
fengb
andrewrk: do you think we can expose stack-size as a linker flag?

1574480153
fengb
Stopgap until we have actual stack sizes, but the default is pretty terrible

1574480176
andrewrk
fengb, can we hard-code increase the default for now? for non wasm, we hard code the default to 16 MiB

1574480207
fengb
That could work as well. I’m just not sure what’d be sane for browsers

1574480220
andrewrk
yeah good point. I'd be OK with exposing a flag until we have actual stack size calculations

1574480247
andrewrk
wasm is a good candidate for this, since there aren't really any extern functions to call

1574480268
fengb
Wasm: where we pretend to be embedded... sometimes...

1574480269
andrewrk
if you don't have any function pointers, zig should theoretically know the stack upper bound pretty accurately

1574480306
fengb
Oh is there a way to access that info? I was looking for a @stackSize function

1574480444
Cucumbas
andrewrk: --bundle-compiler-rt did the work. I'm guessing rt stands for runtime?

1574480675
daurnimator
Cucumbas: correct

1574480847
Cucumbas
daurnimator: why would i need that option? ideally i'd rather not bundle anything with the lib.

1574480873
daurnimator
Cucumbas: you normally need it when crossing compilers; e.g. GCC <> LLVM.

1574481069
daurnimator
Cucumbas: compiler-rt originally comes from LLVM; while libgcc is the GCC version

1574481081
daurnimator
Cucumbas: the zig project reimplements compiler-rt itself in zig.

1574481263
Cucumbas
daurnimator: interesting! didn't know that. thanks. Does it have any implications for portability or performance?

1574481312
daurnimator
implementing it ourselves? more portability; no performance implications

1574481351
Cucumbas
daurnimator: oh i meant bundling it

1574481424
daurnimator
Cucumbas: IIRC it means you need some non-standard linker arguments if you don't want bloat

1574481532
daurnimator
Cucumbas: btw I think your question is

1574481607
daurnimator
see also

1574481648
daurnimator
andrewrk: I think I might close one of those as a dupe

1574481827
Cucumbas
daurnimator: gotcha, thanks a bunch!

1574484169
adamkowalski
andrewrk: sorry if this is a common question or if it's answered somewhere else, but can you discuss why you use nixos? I'm intruiged by it when watching your streams. Is there a reason you don't go with a more conventional os like ubuntu/mint/debian whatever

1574485550
pixelherodev
... whoa, just checked out nixos, looks pretty neat

1574487036
THFKA4
it solves dependency hell and lets you spawn shells with the exact dependency versions that you want

1574487072
THFKA4
so you can be compiling zig with llvm 6 in one terminal and 9 in another

1574487218
adamkowalski
what advantages is there over something like docker?

1574488788
pixelherodev
Proposal: a mechanism for specifying what libc features are needed

1574488804
pixelherodev
That way, if - like me - you're only using the allocator, you don't need to compile the full libc

1574488838
daurnimator
pixelherodev: you only need to compile it once and then it should be cached.... takes like 2-3 seconds the first time ever

1574488846
shakesoda
kinda sounds like a workaround for build performance not being good enough uncached

1574488857
shakesoda
in this case

1574488870
pixelherodev
daurnimator, first time takes minutes

1574488882
shakesoda
low power cpu?

1574488886
pixelherodev
i5

1574488890
pixelherodev
So not really

1574488911
pixelherodev
Plus, I've tweaked the kernel to optimize for performance (even disabling security patches that affect performance)

1574488932
shakesoda
is it only this slow for optimized builds?

1574488959
pixelherodev
It was pretty slow for debug build too

1574488965
shakesoda
regular/debug builds aren't anywhere near that slow on my hardware, which is... very old

1574488972
mikdusan
spinning disk?

1574488975
pixelherodev
Part of it is that it seems to be running single-threaded

1574488977
pixelherodev
SSD

1574488992
pixelherodev
My computer is, relatively speaking, very fast

1574489010
pixelherodev
This is the only task that's slow.

1574489033
pixelherodev
Have you tried with `-target x86_64-linux-musl -lc`?

1574489042
shakesoda
i have not

1574489044
pixelherodev
Because this is also the only time I've had trouble

1574489074
daurnimator
pixelherodev: what exactly are you compiling here?

1574489075
pixelherodev
Now that it's built it's fine though, but that took ~6-7 minutes

1574489127
shakesoda
i've been doing native builds, that would explain the difference

1574489133
pixelherodev


1574489144
mikdusan
yes it's single-threaded right now. zig's build system will get better probably leveraging async

1574489145
pixelherodev
From root folder, `zig build-exe -target x86_64-linux-musl --output-dir bin --name indomitable --object bin/native/linux.o src/native/main.zig --pkg-begin indomitable src/indomitable.zig --pkg-end -lc --release-small`

1574489147
andrewrk
daurnimator, I'm glad you reviewed lazlo's patch rather than ask them to move it to GitHub :)

1574489155
andrewrk
I'll be back in a few, grabbing a slice of pizza

1574489161
daurnimator
andrewrk: its been annoying me sitting in my inbox :P

1574489194
pixelherodev
... well, that command alone won't work anyways; requires already having built other stuff

1574489210
pixelherodev
`make && that_zig_command` should work though

1574489235
pixelherodev
Or `make bin/indomitable && that_zig_command` to avoid building the kernel version

1574489311
mikdusan
pixelherodev: 55 seconds. core i5 @ 3GHz, macOS 10.15.1

1574489336
pixelherodev
That's... hmm.

1574489352
mikdusan
(debug). I'll try release-small

1574489392
pixelherodev
I mean, that

1574489405
pixelherodev
That's more than 80% faster...

1574489421
mikdusan
i just did it against a simple hello world

1574489421
pixelherodev
Oh wait, not i5, i3 for me

1574489434
pixelherodev
Yeah, but it's the libc build that was bottlenecking me so what you build shouldn't matter

1574489444
pixelherodev
i3 @ 2GHz here, not i5

1574489460
pixelherodev
But it still shouldn't be such a huge difference.

1574489523
mikdusan
which platform and zig binary?

1574489553
pixelherodev
Linux, git master

1574489572
pixelherodev
0.5.0+995927055

1574489606
pixelherodev
Might be a crappy build, but I'm 99% sure the configuration was fine, and again, this is the

1574489609
mikdusan
any chance you built against a debug version of LLVM?

1574489632
pixelherodev
Very very low.

1574489659
daurnimator
I'd try myself.... but currently fighting what seems to be a result location bug in my zig checkout

1574489661
mikdusan
you can try and download from ziglang.org latest linux binary and give it run.

1574489708
pixelherodev
I don't think I have debug

1574489715
pixelherodev
mikdusan, i might just do that

1574489798
adamkowalski
Do we have something like @divTrunc but for multiplication?

1574489838
daurnimator
adamkowalski: @mulWithOverflow ?

1574489850
pixelherodev
Oh wow - stripped build with `--release-small`: 100KB :D

1574489872
adamkowalski
Well I want to chop off the decimal portion after a multiplication

1574489884
adamkowalski
i've been working on the date implementation

1574489895
pixelherodev
`floor(result)`?

1574489901
adamkowalski
I'm trying to get the number of days between two dates

1574489923
pixelherodev
Rather, `@floor(result)`?

1574489927
adamkowalski
i'm using the julian day method. unless somebody has a better idea

1574489935
adamkowalski
pixelherodev: thanks I'll do that

1574489974
adamkowalski
const e = @floor(f64, 365.25 * @intToFloat(f64, y) + 4716);

1574489994
adamkowalski
does that look reasonable?

1574490010
pixelherodev
Not a clue :P

1574490021
pixelherodev
Haven't done any date/time stuff in probably ever

1574490055
pixelherodev
At least, nothing more complex than "Yo RTC, what's the current date/time?"

1574490072
pixelherodev
Which is much simpler than actually doing the work yourself

1574490079
adamkowalski
haha yeah I never realized how much goes into it

1574490112
adamkowalski
but honestly it's been really fun. all day at work i'm in high level land in Python or Julia or JavaScript. So on nights and weekends I get to work on Zig and do everything from scratch

1574490319
daurnimator
pixelherodev: you need to update to newer zig :)

1574490346
daurnimator
/tmp/tmp.iKPZEeV2v9/Indomitable/src/os/timer.zig:9:27: error: expected function, found 'type'. const frequency: f64 = f64(1193182) / f64(reload_value);

1574490351
daurnimator
pixelherodev: i.e. you need @as

1574490374
adamkowalski
you're floor idea worked! I added unit tests. we can get the days between two dates

1574490508
pixelherodev
...

1574490518
pixelherodev
daurnimator, great. Thank you. I'm 100% happy to hear that.

1574490519
pixelherodev
:P

1574490571
daurnimator
pixelherodev: should I be trying with 0.5.0 release instead?

1574490630
pixelherodev
Probably :P

1574490641
pixelherodev
SHould be able to test on a hello world thought

1574490645
pixelherodev
s/thought/though

1574490653
pixelherodev
It's the libc build that was slow, not the build of my code

1574490667
pixelherodev
On a different note, small binaries = <3

1574490700
pixelherodev
A 100KB ELF, of which ~64KB is actual binary (the .text section), ~20KB of data (the .rodata section), with a bit more thrown in here and there (.init, .fini, .bss, etc)

1574490739
pixelherodev
Actually, probably closer to ~70KB of .text

1574490774
mikdusan
pixelherodev: do you have env variable "XPG_CACHE_HOME" set?

1574490811
pixelherodev
`env |grep CACHE` turns up no results, so probably not

1574490852
pixelherodev
No zig folder in `~/.cache` though, which I assume is where it'd be with no env variable set...

1574490886
shakesoda
isn't the default location without an xdg dir in .

1574490904
shakesoda
./.zig-cache or something

1574490920
mikdusan
it should be ~/.cache/zig if you are running no older than 3-weeks master

1574490952
pixelherodev
That's probably it then - current build is from October 26

1574490988
pixelherodev
Rebuilding now.

1574491005
mikdusan
ok so then it would be in... ~/.local/share/zig <-- and this should be ok. i was just making sure it wasn't writing to a slow filesystem for your cache

1574491024
pixelherodev
Ah, yeah, that folder exists

1574491068
pixelherodev
Only about 211MB, so writing

1574491150
pixelherodev
Literally less than five seconds to write all of that to the SSD, and that's

1574493245
daurnimator
3644 rebased again.

1574493500
mikdusan
daurnimator: may I pick your brain re: std.fifo ?

1574493559
daurnimator
mikdusan: certainly

1574493614
mikdusan
fifo maintains a single "buffer" allocation at any given time?

1574493635
daurnimator
mikdusan: yes

1574493737
mikdusan
and let's say we init a buffer and .head = 0, .count = 0,

1574493742
daurnimator
okay

1574493762
mikdusan
head is where the next write happens?

1574493806
daurnimator
no, head+count is

1574493820
daurnimator
read happens at head; write happens at head+count

1574494130
mikdusan
ok and one may use realign() to make it so head=0 again? ie. memcpy `[head..head+count]` to `[0..count]` ?

1574494139
daurnimator
yep

1574494246
mikdusan
ok. thanks that clears things up a bit for me. thanks

1574494554
mikdusan
in doc comment for `fn rewind()` -> /// Make `count` bytes available before the current read location

1574494566
mikdusan
should that be: Make `size` bytes ...

1574494732
daurnimator
mikdusan: nope; I need to rename the arg; and say "items" instead of bytes in the comment

1574494734
daurnimator
thanks :)

1574494975
daurnimator
mikdusan: let me know if you find anything else; ideally I'll just have to do one force push after your review...

1574496123
achaninja
andrewrk , watching your stream on youtube, a few comments. An ISA like risc v or mips are much more regular and nicer to learning than x86. Also, worth learning about is assembly relaxation

1574496128
achaninja
heres a good post

1574496131
achaninja


1574496176
achaninja
thanks for making the video :)

1574496766
daurnimator
:( I don't know where my allocator-in-progress went

1574496969
daurnimator
oh I think I found it in an old stash

1574503020
Snektron
Organized

1574505481
mq32
i love zig :D

1574505494
mq32
local scope imports are great

1574505720
daurnimator
mikdusan: any other questions?

1574507647
daurnimator
andrewrk: around?

1574508241
mq32
i just could reduce the problem with packed structs and padding to a single-member stuct

1574511305
mq32
mikdusan, andrewrk: i think i found the solution/problem to #2627

1574511394
mq32
the bug is very subtle, as only a single size is affected: 3 bytes

1574512369
mq32
hm

1574512394
mq32
behaviour tests show that a 24bit type should have size 4

1574512416
mq32
which will break subsequent embedded of such types in other packed structs

1574512424
daurnimator
mq32: size....

1574512426
daurnimator
define size

1574512437
mq32
"size in bytes"

1574512441
mq32
@sizeOf(u24) == 4

1574512509
daurnimator
mq32:

1574512536
mq32
> Note that if you put a u24 in a struct, it becomes size 4 instead of 3

1574512541
mq32
this also applies in packed structs

1574512580
daurnimator
mq32: there is an ongoing argument in that issue #1738 if @sizeOf(u24) should be 3 or 4; or architecture dependant

1574512594
mq32
i have the problem that the following struct is 4 bytes large

1574512602
mq32
pub const CHS = packed struct {

1574512602
mq32
head: u8,

1574512602
mq32
cylinder: u10,

1574512602
mq32
};

1574512602
mq32
sector: u6,

1574512618
mq32
so i cannot put that into a struct

1574512640
mq32
but i cannot put a u24 into the struct as well, because it gets blown up to 32 bits

1574512714
mq32
my next approach is using a

1574512719
daurnimator
mq32: you're probably hitting the general issue that packed struct are currently broken in respects to OffsetOf  and sizeOf

1574512760
mq32
i'm trying to fix this brokenness right now, but first i have to understand why some types get blown up with ABI alignment in packed structs

1574512776
mq32
which i thought was the idea of packed structs to ignore

1574512817
mq32
but now i discover that it is

1574512869
daurnimator
mq32: I think thats #2627

1574512896
mq32
yep

1574512929
mq32
elements in a packed struct get ABI aligned

1574512952
daurnimator
mq32: no actually

1574512958
daurnimator
mq32: see my comment in that same issue

1574512967
mq32
packed struct { one: u8, three: [3]u8, } => 5 byte

1574512973
mq32
packed struct { three: [3]u8, one: u8, } => 4 byte

1574512982
daurnimator
mq32:

1574512997
daurnimator
the math of bit/byte offset is just wrong

1574513037
mq32
i didn't find the "wrong" part in the code yet, but noticed that types of size 3 get aligned to size 4

1574513090
mq32
if i remove the alignment rules (by setting native alignment for all types to 1 in packed structs)

1574513095
mq32
both variants of the struct get size 4

1574513272
mq32
okay, yes

1574513275
mq32
it's the alignment

1574513435
mq32
daurnimator: look here:

1574513450
mq32
this all works with my bugfix, but breaks on master in

1574513581
daurnimator
mq32: yeah someone needs to sit down for an hour and figure out all the offset code

1574513896
mq32
it only fails when you are on even-sized byte offsets

1574513910
mq32
* full byte offsets

1574513923
mq32
and then explodes because the code

1574518963
jonathon
Can someone point me to an example of concatenating runtime strings? The examples in the docs all seem to be for compile time-known strings (unless I'm misunderstanding, which is quite possible).

1574519155
mq32
jonathon: use this:

1574519261
mq32
usage:

1574519459
jonathon
mq32: Ah ha! Thank you.

1574519467
mq32
you're welcome!

1574519475
mq32
daurnimator: my CPU burns right now, running the test suite

1574523454
mq32
okay, my change only breaks two tests :D

1574524531
jonathon
I've trying to use C interop to write a basic MQTT client but can't seem to pass a string to the C library with the expected type,

1574524792
mq32
try c"hello, world" for string literals

1574524805
mq32
and use std.Buffer for creating zero-terminated strings

1574525198
jonathon
(reading)

1574526970
mq32
i feel betrayed

1574526973
mq32
Code Generation [1/2643] Assertion failed at /home/felix/projects/zig/src/analyze.cpp:9051 in get_llvm_type. This is a bug in the Zig compiler.

1574526993
mq32
the function is right... but that was before my change

1574530982
jonathon
Hmm. Any change I make (using std.Buffer, std.cstr.addNullByte, applying

1574531186
jonathon
This probably means I'm fundamentally misunderstanding how slices work.

1574531336
jonathon
Yes indeed. A slice has a pointer, so I needed to pass `var.ptr` rather than `var` or `&var`.

1574535009
mikdusan
mq32: wouldn't it be clearer to have

1574536579
andrewrk
jonathon, the tests aren't even passing in #3728, it doesn't make sense to use that branch yet

1574536606
andrewrk
`'[*c]const u8', found '[]const u8'`  -> use the `ptr` property of slices. slice.ptr

1574541537
jonathon
andrewrk: Yup, I got there in the end. Using the null-terminated-pointers branch was just part of me narrowing down what I was doing wrong.

1574541819
jonathon
On another note, how does Zig handle OS signals, e.g. SIGINT? I can see std.os.SIGINT but can't find any way to detect and handle an interrupt.

1574544566
andrewrk
jonathon, zig doesn't do much on your behalf - you might be interested in reading the code that runs before main()

1574544575
andrewrk


1574545015
jonathon
Oh, it might be std.os.sigaction

1574545029
traviss
i tried building zasm on my debian 10 box with zig master and getting this strange error:

1574545051
andrewrk
traviss, too old version of zig

1574545122
traviss
hmm, i just pulled and built 1/2 hour ago. zig version 0.5.0+29d7b5a80

1574545267
andrewrk
traviss, have a look at the part here regarding installation of lib files:

1574545564
traviss
thanks andrewrk. i removed my build/lib directory and it works now. :)

1574545706
andrewrk
traviss, if you reconfigure with that -D option then you won't have to remove that dir in the future

1574545738
andrewrk
(or you can remember to `make install`)

1574545754
andrewrk
unfortunately cmake doesn't let us run an arbitrary command with the install target, otherwise this would Just Work

1574546053
traviss
yeah, i used `cmake .. -DZIG_SKIP_INSTALL_LIB_FILES=on` and `make -j3 install`. maybe it was an old lib directory?

1574547327
pixelherodev
Gah. Updating all code to use @as is a pain, and there's apparently other breakages too...

1574547349
pixelherodev
I guess that's the downside of using the git build

1574547502
andrewrk
if there are other regressions, I recommend to stick with the working version of zig for now; these recent regressions are a priority

1574547520
andrewrk
I can't remember, is your project open source?

1574547523
pixelherodev
The biggest thing is that I still haven't gotten around to adding in support for custom OSes to the stdlib

1574547524
pixelherodev
Yeah

1574547539
pixelherodev
And I can't do that because it'll take time away from this, and there's only one week left to work on it ;P

1574547565
pixelherodev
So for now, I'll probably try to remember what commit was working and use that

1574547590
andrewrk
I was planning on trying a bunch of folks' projects before merging #3728. I wouldn't mind throwing some regression fixes in there before merging\

1574547751
andrewrk
thanks for putting up with the instability :)

1574547767
pixelherodev
It's worth it :)

1574547802
pixelherodev
Once I get around to fixing up the upstream standard library so I don't need the forked copy, it'll be completely minor to me

1574547831
andrewrk
ahh that's why you have so much @as work to do, merge conflicts in std/

1574547839
pixelherodev
Yeah

1574547870
pixelherodev
And since my project intimately depends on a working standard library, I can't just ignore it :(

1574547897
andrewrk
yeah this "bring your own OS layer" thing is going to be really nice for your use case

1574547954
pixelherodev
Which is why I plan on implementing it the instant this game jam is over :)

1574547976
andrewrk
you know... it might be as simple as a 1 line change in std/std.zig

1574548011
pixelherodev
Eh, I'll see if I can quickly do it tonight

1574548030
andrewrk
you can try this:

1574548030
pixelherodev
If I can, it'll take no more effort than switching back the Zig compiler version :P

1574548071
andrewrk
it's probably a bit more involved than that

1574548094
pixelherodev
Yeah, there's also the os/bits stuff, though that can

1574548103
andrewrk
but maybe not! you could copy paste what you need in your pub const os = struct { ... };

1574548119
andrewrk
only the stuff that is depended on will be looked for

1574548390
jonathon
Just in case anyone is interested, current state of my MQTT client with SIGINT handling:

1574548595
pixelherodev
andrewrk, I think it makes more sense to instead tweak std/os.zig to import a different system instead of replacing os.zig entirely

1574548604
andrewrk
jonathon, evented I/O seems relevant to that use case

1574548616
andrewrk
pixelherodev, that sounds reasonable

1574548712
pixelherodev
Yeah, there's more to do - need to decide how debug info should be handled by default...

1574548741
pixelherodev
Freestanding currently errors out with std.debug as "unsupported OS." The easiest option is to make it use DWARF info there also, but that's not necessarily correct

1574548762
jonathon
andrewrk: I'll look at that next, thx.

1574548890
andrewrk
jonathon, just a heads up, zig's evented I/O support is very promising but still at the "proof-of-concept" stage

1574549186
jonathon
Ah, then I might stick to this "loop" approach for now. In any event, this turned out to be a nice project for learning some Zig.

1574549521
andrewrk
fengb, was that you asking about default field values in @typeInfo?

1574549534
fengb
Yep

1574549591
andrewrk
you might find this commit interesting:

1574549676
andrewrk
it was the same problem with the `sentinel` field of @typeInfo for pointers. so I went ahead and solved it

1574549735
daurnimator
oooo, var as struct field type

1574549756
andrewrk
just like a field of type `type`, it forces the struct to always have a comptime-known value

1574549801
daurnimator
yeah that makes sense

1574549802
andrewrk
it was either this or multiple special builtins specifically for dealing with this field and the default value field, etc

1574549957
fengb
Neat

1574550242
fengb
I’m really liking arbitrary sentinels. Feels a lot more natural than just 0/null

1574550563
pixelherodev
One major annoyance is with disabling evented I/O

1574550600
daurnimator
pixelherodev: huh?

1574550626
pixelherodev
For the "Bring your own OS layer" thingy

1574550646
daurnimator
Why is disabling evented io annoying there?

1574550648
pixelherodev
Evented I/O causes a number of issues, least of which is with std.Thread throwing an Unsupported OS compiler error

1574550725
pixelherodev
Seems to be trying to use the event loop even with blocking I/O enabled

1574550748
daurnimator
that sounds odd...

1574550751
pixelherodev
Which I think might be because std/os.zig has an `if (std.event.Loop.instance) |loop| `

1574550786
pixelherodev
Which indirectly causes the field `extra_threads: []*Thread,` to be validated...

1574550806
pixelherodev
It's not that it's trying to use the event loop, it's that just checking if the event loop exists causes problems if threading isn't supported

1574551020
daurnimator
ah interesting

1574551117
daurnimator
shouldn't we be able to have a `*Thread` without evaluating the definition of Thread?

1574551150
daurnimator
or I guess not: we need to know if its a 0-bit type or not

1574551218
daurnimator
(is that true?)

1574551601
andrewrk
pixelherodev, does your OS even support evented I/O? it would be reasonable to simply say that is unsupported

1574551627
andrewrk
isn't a compile error if the application chooses evented I/O appropriate for your OS?

1574551658
andrewrk
one of the main benefits of zig code being agnostic to evented I/O or not is that it will work on OS's that don't support it

1574551839
pixelherodev
andrewrk, the point is that it's crashing even without evented I/O

1574551874
pixelherodev
<pixelherodev> Which I think might be because std/os.zig has an `if (std.event.Loop.instance) |loop| `

1574551888
andrewrk
std.event.Loop.instance should be comptime known to be null when evented I/O is disabled

1574551889
pixelherodev
That results in it trying to validate a []*std.Thread field

1574551916
pixelherodev
Right, but it's still validating the std.event.Loop type

1574551928
pixelherodev
Which causes a compile error of Threading Unsupported

1574552015
andrewrk
pixelherodev, I see. I can reproduce this in master branch with choosing evented I/O and --single-threaded

1574552038
andrewrk
or maybe that's a different issue

1574552060
pixelherodev
Probably a slightly different issue

1574552069
pixelherodev
Here, the problem is that the types themselves are invalild

1574552076
pixelherodev
s/invalild/invalid

1574552086
pixelherodev
There's a compiler error just parsing std.Thread

1574552185
pixelherodev
The real fix is to modify std/os.zig so that EAGAIN doesn't even check the loop in blocking I/O mode

1574552231
andrewrk
what's the compiler error parsing std.Thread?

1574552239
pixelherodev
Though I suppose a more fundamental fix would be to patch the compiler to not analyze the full type of an optional pointer whose value is known at comptime to be null

1574552241
daurnimator
andrewrk: hits the @compileError unsupported OS

1574552244
pixelherodev
^

1574552357
pixelherodev
Relatively simple workaround though

1574552366
andrewrk
pixelherodev, are you sure you're giving comptime null for event.Loop.instance? I don't see why it would be looking at the fields of the event loop. why is it even looking at Thread?

1574552388
pixelherodev
Changing the if by EAGAIN in std/os.zig to `if (std.io.mode == .evented and std.event.Loop.instance != null) {` fixes the problem

1574552390
pixelherodev
So 99% sure

1574552391
daurnimator
andrewrk: because event.Loop has a `    extra_threads: []*Thread,`

1574552405
pixelherodev
IIUC it's validating the struct

1574552457
pixelherodev
And a comptime block validates that I/O is in blocking mode

1574552481
andrewrk
it seems like it shouldn't be looking at the fields of Loop

1574552495
pixelherodev
`comptime std.debug.assert(std.event.Loop.instance == null);` gives the same error

1574552514
pixelherodev
" /home/noam/Documents/Development/indomitable/src/zig/std/event/loop.zig:21:5: note: while checking this field"

1574552528
pixelherodev
Indirectly caused by that assertion

1574552545
pixelherodev
Anyway, just four errors left to fix (and just four lines!)

1574552546
daurnimator
andrewrk: as Loop.instance is a `?*Loop`, doesn't it need to know what a Loop is?

1574552557
daurnimator
(nevermind that its inside of the Loop definition)

1574552562
pixelherodev
In theory, since it's null, it shouldn't need to...

1574552579
pixelherodev
Lazy analysis shouldn't care since the type isn't ever actually used

1574552592
andrewrk
daurnimator, that's probably why it's happening but it's not theoretically required

1574552620
pixelherodev
An argument could be made that it's a compiler bug since it's analyzing a struct that it doesn't need to, which is a violation of lazy semantics

1574552648
andrewrk
yeah, I'd call this a bug.

1574552658
pixelherodev
Should I open an issue?

1574552690
andrewrk
yes if you're willing to take the time to make a nice small test case. which I wouldn't expect you to do

1574552716
andrewrk
this is the kind of thing that would certainly regress without a test case

1574552738
pixelherodev
Will do once I finish this up

1574552756
daurnimator
pixelherodev: did you have an easy way to replicate?

1574552765
pixelherodev
Next weird problem is that something in the stdlib seems to be using the direct allocator

1574552775
pixelherodev
daurnimator, can probably whip one up really easily

1574552820
pixelherodev
Just make a struct that always throws a compileError when evaluated, have an optional pointer set to null, `comptime std.debug.assert()` will throw a compiler error

1574552829
daurnimator
I'm curious if this would help: `pub const instance: if (std.io.mode == .blocking) void else ?*Loop = if (std.io.mode == .blocking) {} else if (@hasDecl(root, "event_loop")) root.event_loop else default_instance;`

1574552864
pixelherodev
It might, but that's just a different workaround

1574552875
andrewrk
that's also not compatible with if (std.event.Loop.instance) |loop|

1574552885
daurnimator
andrewrk: oh, `?void` then?

1574552914
daurnimator
pixelherodev: but it would be in one place, rather than the many EAGAIN checks and other things../

1574552923
andrewrk
daurnimator, I'm not recommending to do this, but it would be @as(?void, {})

1574552924
pixelherodev
It's already in one place

1574552934
pixelherodev
There's only a single EAGAIN where it occurs

1574552943
andrewrk
it's planned to be in nearly all of them

1574552948
daurnimator
pixelherodev: probably because you're only using one of the functions in std.os.

1574552951
mikdusan
pixelherodev: "something in the stdlib seems to be using the direct allocator" --> event/loop.zig `initThreadPool()` --> // TODO:

1574552986
pixelherodev
daurnimator, ... yeah that's a fair point.

1574553020
andrewrk
evented I/O integration into std.os is only done with read() right now, but it's planned to integrate with all the I/O

1574553023
daurnimator
mikdusan: or std.debug.getDebugInfoAllocator: debug_info_arena_allocator = std.heap.ArenaAllocator.init(std.heap.direct_allocator);

1574553036
pixelherodev
So, in blocking I/O mode, replace event/loop.zig with a struct containing a null pointer to void? That's probably a deeper fix to both issues

1574553053
pixelherodev
daurnimator, shouldn't be th... no wait it's probably that thanks

1574553061
pixelherodev
Forgot I replaced debug.zig with the upstream copy :P

1574553139
pixelherodev
Yep, two bugs left

1574553142
daurnimator
andrewrk: FWIW I'm still of the opinion that the ultimate interface for I/O needs to be more than the evented style you're going for here in std.os

1574553187
pixelherodev
Though this still will probably leave large parts of the standard library usable, it shouldn't

1574553496
andrewrk
daurnimator, go on?

