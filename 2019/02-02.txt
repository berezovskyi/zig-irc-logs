1549073798
kristate
MajorLag: andrewrk: I can rebase #1851, if that helps

1549073938
kristate
andrewrk: btw, can we get a hint about how the values in `hash_const_val` are calculated ?

1549083085
andrewrk
kristate, literally random. I'm sure the hashing in zig compiler is poor quality and could be improved with minimal effort

1549083098
kristate
andrewrk: hey, ok

1549083118
kristate
andrewrk: in some places we are adding to the base magic number

1549083142
andrewrk
yeah it's not even consistent

1549083165
andrewrk
the hash function could return 0 for all cases and everything would still work, it's just a heuristic

1549083179
kristate
andrewrk: understood, okay.

1549083195
andrewrk
but if the hash is quick to calculate and reasonably distributes values, then it will speed up hash table lookups

1549083730
daurnimator
andrewrk: can probably be made much better in stage2 :)

1549083739
daurnimator
because we can have compile time perfect hashing

1549083808
andrewrk
that's only if you know all the inputs at compile time

1549111888
kristate
live streaming with jimmi:

1549118032
kristate
FYI, GEP into vectors is not recommended!

1549128811
Marumoto
It seems like this issue

1549132915
andrewrk
kristate, it's planned for zig to never emit a getelementptr instruction for vectors

1549132944
andrewrk
that's the " compile error for trying to get a pointer to a vector element" checkbox

1549132989
andrewrk
note that vectors of pointers is a different concept

1549133021
andrewrk
and getelementptr on a vector of pointers is 100% ok, that's the same thing as addition on vectors of integers

1549133335
andrewrk
Marumoto, good to know. Once we have a new test in place to cover it, we can close the issue

1549135972
Akuli
i want to use a function that uses an Allocator, so how can i create an Allocator?

1549136089
Akuli
i'm looking at std/mem.zig and thinking of something like const the_allocator = std.mem.Allocator { .allocFn = somethingLikeMalloc, .reallocFn = somethingLikeRealloc, .freeFn = somethingLikeFree };  but there's probably a better way than doing this all myself?

1549136149
Akuli
neeeeeeeevermind... i found std.heap.c_allocator

1549142173
Akuli
how do i print a formatted message to stderr? i tried (try std.io.getStdErr()).outStream().stream and then try stderr.print("Usage: {} arg\n", program_name); but i get a weird EBADF error

1549142462
darithorn
Akuli: use std.debug.warn

1549142487
Akuli
is that still good if i don't want to debug my program, but i want to write a usage message?

1549142538
andrewrk
Akuli, it's good if you want to ignore potential errors from writing to stderr

1549142541
darithorn
I imagine it'd be just fine. It has debug in the name but it's just a wrapper for writing to stderr.

1549142545
darithorn


1549142605
andrewrk
if stderr is important to the correctness of your application then I recommend using std.io.getStdErr()

1549142629
emekankurumeh[m]
are closures planned for zig?

1549142637
Akuli
thanks, i think i'll use std.debug.warn

1549142677
Akuli
how should i debug memory leaks? i tried valgrind but it's not very informative

1549142735
Akuli


1549142805
andrewrk
Akuli, that's

1549142807
andrewrk
--no-rosegment               compromise security to workaround valgrind bug

1549142871
Akuli
ooooo nice! i like this, valgrind works very well now

1549142873
andrewrk
it's also planned to have a debug allocator in the standard library to do leak checking and other useful stuff

1549142890
andrewrk
emekankurumeh[m],

1549142902
andrewrk
it's not planned to have hidden memory allocations

1549142941
andrewrk
but you can right now create a function inside an anonymous struct inside a function

1549142952
Akuli
zig seems like an awesome language so far, i like everything i see

1549142958
Akuli
i wish i was able to learn it faster

1549142968
andrewrk
also, after the coroutine rewrite, coroutines will serve a similar purpose to closures

1549143006
andrewrk
I wish I was able to develop it faster

1549143006
emekankurumeh[m]
i was just about to ask about that :)

1549143109
emekankurumeh[m]
you're only one person though.

1549143133
emekankurumeh[m]
would that debug allocator wrap around another allocator or would it be a standalone allocator?

1549143179
andrewrk
emekankurumeh[m], that's a good question, not sure yet

1549143255
Akuli
an old zig blog post explains how %defer worked, what is it called nowadays? %defer gives me a syntax error

1549143260
andrewrk
errdefer

1549143263
andrewrk
which post is that?

1549143265
Akuli
neat thanks

1549143269
Akuli


1549143275
andrewrk


1549143370
emekankurumeh[m]
i was thinking on porting rpmalloc to zig, so we could have a general purpose allocator in std for 0.4.0

1549143416
andrewrk
neat

1549143422
andrewrk
is that a good one?

1549143427
andrewrk
I have not heard of rpmalloc

1549143438
emekankurumeh[m]


1549143462
emekankurumeh[m]
from the benchmarks shown it looks pretty good.

1549143471
emekankurumeh[m]
it's public domain too

1549143491
andrewrk
cool

1549143517
andrewrk
should work fine, if the API user requests more than 32 byte alignment, you can return error.OutOfMemory

1549144086
schme245
"i wish i was able to learn it faster", haha, I hear you on that one

1549144519
andrewrk
Akuli, wow some of this info is very out of date. I'm updating the post

1549144524
andrewrk
especially with regards to errors

1549144529
Akuli
awesome :D

1549144629
Akuli
how do i free the memory that std.os.args().next(allocator) returns? allocator.free(value)?

1549144636
andrewrk
yes

1549144639
Akuli
nice

1549144663
andrewrk
you might also consider std.os.argsAlloc

1549144697
andrewrk
that will give you a slice of slices which is pretty convenient, and then you can free it all at once with std.os.argsFree

1549144708
andrewrk
btw blame windows for why we have to allocate memory to parse command line arguments

1549144724
Akuli
yes, i had posixNext() before

1549144789
emekankurumeh[m]
some things on macos can only be done in objc right?

1549145030
Akuli
how do i return status 1 to the os so that defers in main() run? std.os.exit(1) in main() doesn't work

1549145041
Akuli
it exits the process, but leaks some memory because i have defer stuff_that_frees()

1549145431
Akuli
well, i created an intMain() function that works like c's main() and put everything into it, defers run correctly now

1549146281
Akuli
i'll be back

1549148135
andrewrk
Akuli, you can make the return type of main be u8

1549149293
andrewrk
Akuli, I updated the intro to zig post:

