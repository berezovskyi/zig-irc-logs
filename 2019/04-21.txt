1555807387
tyler569
I seem to have found an issue that's a dup of #1689 / bad inline asm, generates invalid IR, crashes LLVM.  I see Andrew had some next steps for that but then the ticket closed a few days later, is the expectation that those asm issues should be fixed?

1555807425
tyler569
Happy to report it, just trying to gauge if it would be useful for me to open a new issue saying basically "I see this thing too"

1555807585
andrewrk
tyler569, yes, according to the issue we thought it was fixed by Sahnvour's patch

1555807601
andrewrk
feel free to comment and I'll reopen it, or file a new issue

1555807814
hryx
I pushed changes to my parser branch which exposes the MemoryLeakDetected issue again. Test case from last night should show the leak instead of error.NotImplmented now:

1555808824
mikdusan
is there a control for PR to disable checks until some known issues are worked out?

1555808853
mikdusan
(on github)

1555812241
emekankurumeh[m]
i think opening a draft instead of pull request does what you are asking for

1555815186
emekankurumeh[m]
is there a reason that "-static-libgcc -static-libstdc++" is passed to the compiler only on macos?

1555815361
emekankurumeh[m]
nvm i figured it out.

1555819689
daurnimator
Idea: a CI job that runs `zig fmt` on `std/` and complains if anything isn't already correct

1555819730
daurnimator
Further idea: new flag for `zig fmt` that doesn't format anything, but just exits with a code depending on if something changed or not

1555819801
andrewrk
--check does that

1555819804
mikdusan
like `zig fmt --check` ?

1555819851
andrewrk
it's not time for a ci job yet, the syntax isn't stable enough

1555819912
daurnimator
andrewrk: but shouldn't zig fmt still pass? and if you change zig fmt, then you should add a commit to reformat std/ on the way?

1555819961
daurnimator
same as if you sent a PR, e.g. changing the sigil for optional pointers: you'd have a commit changing the compiler; then a huge commit changing all the stdlib.

1555820006
redj
andrewrk: belated congrats on the recent releases (0.3.0, 0.4.0)... these release notes are impressive!

1555820024
emekankurumeh[m]
a github app that runs `zig fmt` might do what you're looking for

1555820028
redj
andrewrk: what's that talk you're preparing for?

1555820030
emekankurumeh[m]


1555820056
andrewrk
redj,

1555820083
redj
I hope the roadmap for it holds :P

1555820127
emekankurumeh[m]
when's the talk?

1555820131
andrewrk
tuesday

1555820145
emekankurumeh[m]
that's soon

1555820238
andrewrk
daurnimator, I think that will be reasonable soon

1555820248
redj
andrewrk: nice, I wish you a great talk with excellent outcome for zig! :)

1555820278
andrewrk
daurnimator, after hryx's project + putting zig fmt into libuserland.a

1555820289
andrewrk
thank you redj

1555820331
daurnimator
andrewrk: would you accept a PEG module into std/?

1555820351
andrewrk
a zig implementation of a parser expression generator?

1555820354
daurnimator
yes

1555820360
andrewrk
which outputs .zig code?

1555820414
daurnimator
no. which has a function: pub fn match(self: PEGParser, input: []const u8) PEGResult { }

1555820441
daurnimator
(and a large number of functions to create PEGParser objects at either comptime or runtime)

1555820504
andrewrk
that sounds like a nice self contained API. go for it. it'll be good for language test coverage, and then probably a candidate to move to a third party package in the 1.0 std lib audit

1555820548
daurnimator
andrewrk: reason against 3rd party is dependency path: zig package manager => http client => PEG parser for header fields

1555820595
andrewrk
certainly if there is an http client in std and it depends on a PEG then the PEG belongs too

1555820612
andrewrk
why use a PEG for http parsing?

1555820619
andrewrk
is it really that complicated?

1555820625
daurnimator
andrewrk: many header fields are stupidly complex...

1555820647
daurnimator
open up any of

1555820684
daurnimator
core.lua might be a good start

1555820783
emekankurumeh[m]
would it be better to parse them lazily?

1555820820
daurnimator
emekankurumeh[m]: what do you mean?

1555820825
andrewrk
mikdusan, is your PR ready for review?

1555821075
daurnimator
emekankurumeh[m]: my intention was that headers would be parsed as needed e.g. const content_length:usize = std.peg.match(std.http.parsers.content_length, myheaders.at(myheaders.getIndices(name)[0]));

1555821106
emekankurumeh[m]
not lazily per se, but like picohttpparser

1555821172
emekankurumeh[m]
also wouldn't your example need to wrap the return type similar to the json module?

1555821196
daurnimator
emekankurumeh[m]: not sure. ideally note: the result could be a function of the pattern definition

1555821290
daurnimator
pub fn match(self: PEGParser, input: []const u8) PEGResultType(self) { }

1555824243
emekankurumeh[m]
not to nitpick, but if you open a pull request to fix an issue on github, adding "closes #issue-number" closes that issue automatically

1555824872
daurnimator
emekankurumeh[m]: also "Fixes" and "Resolves" IIRC.

1555832253
daurnimator
do we want syscalls to have workarounds like in musl?

1555832388
shachaf
Workarounds?

1555832747
daurnimator
shachaf: some syscalls have known broken corner cases. e.g. right now I'm looking at sendmmsg

1555838260
daurnimator
hrm. awkwardness: `const last:u32 = 0; const mylen:u32 = 500; for (myarray[0..mylen]) |x, i| { last = i; }` //  expected type 'u32', found 'usize'

1555838344
daurnimator
should I fix it by A. changing `last` to a usize? even though it will never use the whole range? or B. add an @intCast in there.

1555842095
daurnimator
Do we have an existing htons-like function?

1555842150
daurnimator
I want to use it as part of an initializer; so writeIntBig taking a destination address doesn't really work

1555857159
shritesh
Anyone with lua experience around?

1555857179
shritesh
More specifically: embedding lua

1555858295
daurnimator
shritesh: yeah. a lot...

1555858894
shritesh
daurnimator: Can a Lua ffi call possibly be generalized? Like say a `fn some_call(ctx: lua_context, arg1: type_1, args...) return_type` do the right thing if this was a feature in the host language?

1555858921
daurnimator
shritesh: sure. are you trying to make

1555858945
shritesh
OMG YES!

1555859018
daurnimator
shritesh: missing primitive is that zig doesn't have a @callfunctionwithargs(myfunc, myargs);

1555859043
daurnimator
`myargs` there needs to be some sort of tuple-y thing.

1555859058
shritesh
@inlineCall?

1555859098
daurnimator
shritesh: nope. you can't build args yourself.

1555859536
shritesh
So here is what I'm doing: I'm trying to add more calling conventions to extern and export functions that know about different FFIs and are able to "do the right thing" for that case. I have some small example working for JS/Wasm with a new `javascript` keyword but it can be generalized when #661 is solved. I realized that we can do the same thing with other languages like Lua, Java JNI?, Objective-C, and have even better cross-language story.

1555859626
shritesh
I wanted to see if it's possible and looks like it is with JS at least.

1555859643
scientes
that's cool

1555859668
scientes
I was thinking about this regarding cockpit--i was trying to tell them that the C ABI is a API

1555859672
scientes
and they could just use it via FFI

1555859686
shritesh
cockpit?

1555859705
daurnimator
shritesh: the lua shared object interface is that your library exports a function: static int luaopen_yourlibname(lua_State *L);

1555859724
daurnimator
uh, not static.

1555859775
scientes
shritesh, its a way of binding to javascript through AJAX

1555859801
scientes
its a web UI to Linux done right

1555859864
scientes
they just didn't get that C is a API

1555859955
shritesh
scientes: So did they create an Enterprise Architecture(tm) instead?

1555860032
scientes
shritesh, no, whats correct about it is that you can directly call stuff on the server, so its not over-engineered

1555860069
shritesh
ah. cool

1555860089
scientes
just not C libraries

1555860109
scientes
using cockpit-bridge

1555860135
scientes
oh that page is pretty bad

1555860262
shritesh
daurnimator: would something like `export fn[CC.lua] func_u32(L: lua_state) u32 { return 42;}` make sense?

1555860295
scientes
why "func_u32"?

1555860324
shritesh
name of the function, I guess

1555860333
scientes
ok, nothing special there

1555860347
shritesh
I'm going with daurnimator's gist

1555860374
shritesh
welp he doesn't have a u32 but let's assume there was one :D

1555860416
scientes
and, "CC.lua", is CC a zig variable? otherwise probably just [lua]--and if we are going to do that, you should probably be able to put llvm calling convetions in there

1555860439
scientes
with "ccc" being the default

1555860473
daurnimator
shritesh: so that would automatically wrap the function for you or something?

1555860479
shritesh
I'm just going with what's suggested in #661

1555860490
scientes
oh, we already have calling convention in @typeInfo

1555860491
shritesh
daurnimator: Yes.

1555860499
scientes
just extend that

1555860510
shritesh
Yes. Only for extern and export

1555860512
scientes
except...that requires adding a keyword

1555860529
scientes
maybe those should be removed, for this [lua] syntax

1555860546
scientes
@setCold(is_cold: bool)

1555860550
scientes
clean that up

1555860551
shritesh
That's what I've done locally right now. But we can just add another item to the enum

1555860551
daurnimator
shritesh: why only for extern/export?

1555860565
shritesh
daurnimator: Does it make sense elsewhere?

1555860574
daurnimator
shritesh: with lua you're meant to pass functions to `lua_pushcfunction(L, yourwrapperhere)`

1555860578
scientes
"extern" basically means "ccc", so yeah that shouldn't be required

1555860591
scientes
and export as well

1555860615
daurnimator
shritesh: in your luaopen_XXX entrypoint, you usually tell lua about your libraries types and push all your wrapped functions into lua.

1555860622
scientes
but there shouldn't be too many ways to do the same thing, so i guess [ccc] would be forbidden

1555860668
scientes
daurnimator, that is not that differnt to creating a header file for export

1555860671
shritesh
gotcha. Right now I have a `extern javascript fn add(..) u32`. And during IR phase it does something else when the function had javascript.

1555860713
scientes
this is slick though, it could work with cpython, cruby, et cetera

1555860714
shritesh
...and it uses the information to generate a .js at the end

1555860733
daurnimator
scientes: the way I was playing with was you do: myluawrappedfunc = ziglua.wrap(myfunc); lua.lua_pushcfunction(L, myluawrappedfunc);

1555860767
shritesh
That too. And I think with stage1 being hybrid, we should be able to have something like std.ffi.{cython, cruby, js, lua, ...}

1555860779
daurnimator
ehhh, I'm not so sure.

1555860792
shritesh
okay :D

1555860818
daurnimator
in the mean time though; a proposal to make calling arbitrary functions possible would be great

1555860824
scientes
shritesh, i think that is really sexy, because it makes zig a go-to language for writing performant parts of scripting languages, instead of C

1555860838
shritesh
Again, let's err on the side of me not knowing what I'm doing / talking about here.

1555860839
scientes
with a much better cross-platform story

1555860880
shritesh
scientes: That's where I want this to go.

1555860915
shritesh
And I think it also makes sense for writing shaders, GPU kernels with those architecture/platform specific boundaries well defined

1555860939
shritesh
`export fn[CC.CudaDevice] myKernel(...) type;`

1555860967
daurnimator
shritesh:

1555861020
shritesh
totally

1555861081
scientes
daurnimator, and that could also be used to call the LLVM bindings at comptime

1555861119
shritesh
I'm also not happy with how I overloaded wasm modulenames with `extern "modulename" fn ..`. That could be `extern fn[CC.Wasm("modulename")]] ...` with a tagged union

1555861122
scientes
which will allow full power comptime (without insane operator overloading)

1555861155
shritesh
yep. I think it creates a boundary for platform specific things.

1555861226
shritesh
WasmAllocator currently uses @"llvm.wasm.memory.size.i32". We should be able to gate that inside functions that are marked fn[CC.Wasm]

1555861250
daurnimator
shritesh: how could you export the same function for multiple targets?

1555861273
shritesh
You don't. You just become really explicit about platform specific things.

1555861324
scientes
daurnimator, you also might want to export the same function for multiple compile targets of the same architecture, like avx2 and sse2

1555861341
daurnimator
e.g. imagine I'm writing a web app and I want to do server-side and client-side rendering with the same code. I have `fn add(x: u32, y: u32) u32` => how do I A. use it in my server. B. have it exported into a wasm object that I can then serve?

1555861344
scientes
and have the most performant one selected at program startup

1555861357
daurnimator
scientes: ifuncs are a special thing of their own

1555861391
scientes
daurnimator, yes, but we should be able to do it without IFUNC, because that is ELF-specific and totally not needed for that feature

1555861409
daurnimator
scientes: for ELF targets; you

1555861424
scientes
yes

1555861462
scientes
although we are not for vdso right now, we just use a function pointer

1555870306
andrewrk
here are some relevant issues to the above discussion

1555870333
andrewrk


1555870345
andrewrk


1555870417
emekankurumeh[m]
what would wwe need ifuncs for?

1555870444
andrewrk
ifuncs is one way to implement function multiversioning

1555870459
andrewrk
which is this: <scientes> daurnimator, you also might want to export the same function for multiple compile targets of the same architecture, like avx2 and sse2

1555870495
emekankurumeh[m]
couldn't we do this instead?

1555870514
andrewrk
emekankurumeh[m], do what?

1555870531
emekankurumeh[m]
function multiversioning

1555870545
andrewrk
the problem that function multiversioning solves is that you have a single binary that works on multiple different CPUs with different capabilities

1555870573
emekankurumeh[m]
so basically whats happening in compiler_rt but at runtime?

1555870577
andrewrk
pay some small upfront cost before main() to detect CPU features and swap out some of your functions for the versions that take advantage of cpu-specific features

1555870593
andrewrk
I'm not sure what you mean, what is happening in compiler_rt?

1555870650
andrewrk
not saying this is a good idea, but to think about it academically, if you extended the function multi-versioning concept further, you would even ship a single binary that worked on all operating systems too

1555870658
emekankurumeh[m]
the file i linked earlier, it decides at comptime which functions to export and under what name to export, which sounds like what ifuncs do if i understand them correctly.

1555870756
emekankurumeh[m]
nevermind, i just realized that ifuncs work at runtime

1555870758
andrewrk


1555870780
andrewrk
note this is only 1 possible way to solve the problem

1555872625
fengb_
How do I keep debug symbols while building the zig compiler? I tried "-DCMAKE_BUILD_TYPE=Debug"

1555872643
andrewrk
fengb_, are you on windows?

1555872689
fengb_
Mac, but I'm using Docker

1555872698
andrewrk
debug is the default, which has debug symbols on

1555872763
fengb_
Hmm, gdb can't load the symbols for my built version

1555872804
fengb_


1555872805
andrewrk
this is the first I've heard of this problem

1555872861
andrewrk
fengb_, it's possible that the crash was in LLVM, which is built in release mode, and the debug info wasn't able to figure out how to get up the stack

1555872869
andrewrk
you could try a debug build of LLVM for this case

1555873205
fengb_
Ah okay. That's probably it

1555874277
fengb_
So... LLVM has no idea what the WASI environment/libc is. Should I just hack around it?

1555874286
fengb_
Or overload one of the existing ones, like musl

1555874305
donpdonp
how do i tell build.zig to include --library c

1555874315
andrewrk
artifact.linkSystemLibrary("c")

1555874329
andrewrk
fengb_, LLVM does know about WASI

1555874349
fengb_
Only the OS. The env target is missing, probably because it's not even officially defined yet

1555874359
donpdonp
andrewrk: thx

1555874412
andrewrk
fengb_, yes, zig will need the ability to have the set of target C ABIs be different than the set that LLVM recognizes. currently it's 1:1. you can see the pattern set by Os

1555874415
fengb_
afaict, it's not attempting to be ABI compatible with anything existing, but it defines a new ABI

1555874439
fengb_
Ah okay, I'll keeping hacking for now. Thanks

1555874659
donpdonp
am I doing this wrong? b.addNativeSystemIncludeDir("../libui"); ls ../libui/ui.h -> is there; zig build -> note: 'ui.h' file not found #include <ui.h>

1555874722
andrewrk
donpdonp, sounds like artifact.addIncludeDir is closer to what you want

1555874745
andrewrk
if it's a relative path that sounds like something in your project directory right? as opposed to something installed on your system

1555874775
donpdonp
andrewrk: ah yeah addIncludeDir is it. i think maybe it used to be on Builder but now its on artifact?

1555874782
andrewrk
that might be true

1555874824
donpdonp
another point of confusion is ive got const exe = b.addExecutable("main", "src/main.zig");b.default_step.dependOn(&exe.step);

1555874833
andrewrk
zig build system has been sort of evolving slowly, I haven't sat down to really streamline it yet

1555874835
donpdonp
zig build completes without error, but no 'main' file in current dir

1555874863
andrewrk
donpdonp, ah yes, see this:

1555874865
donpdonp
(0.4.0+98fa065d fyi)

1555874879
andrewrk
that text explains your options

1555874895
donpdonp
ah ok thx

1555874916
donpdonp
im trying to push this zig 0.3 (or even 0.2) hello-world level code into 0.4 world.

1555875481
shritesh
Here's a proof of concept of how zig might make JS-interop feel better.

1555875510
emekankurumeh[m]
where does zig store information for stack pointer names?

1555875604
emekankurumeh[m]
found it

1555875665
andrewrk
shritesh, what's the benefit of numerics.js rather than using the wasm directly?

1555875679
andrewrk
maybe for non primitives it will be more celar

1555875681
andrewrk
*clear

1555875706
shritesh
For non-primitive types, nothing. But passing strings / structs around requires a lot of coordination with the wasm_allocator.

1555875754
shritesh
*for primitive type

1555876037
shritesh
Just being able to pass u8 slice across would be such an improvement. See

1555876074
emekankurumeh[m]
does anyone know what would cause the error "<unknown>:0: error: invalid symbol redefinition"?

1555876110
andrewrk
shritesh, I think it's a good idea to stick to the C ABI types for this

1555876146
andrewrk
if this proposal is accepted, then slices would be allowed in C ABI functions and types:

1555876227
andrewrk
there will always be some API inconvenience at this place where the ABI is required to be stable

1555876248
andrewrk
a lot of zig semantics rely on not having to be a stable ABI

1555876321
shritesh
That'd be nice. Will the first usize? be the length?

1555876752
shritesh
And here's the thing too: non-javascript embeddings (WASI/Odin/terrarium) do not have this problem at all. All of them follow the C-ABI and work really well out of the box.

1555876782
shritesh
Maybe we put the burden on some foundational libraries with well maintained JS shims instead

1555876854
shritesh
a blessed zig.js of some sorts

1555877160
hryx
Question: the grammar allows for declaring an enum type with or without a parenthetical tag type: `enum {...` or `enum(u8) {...`

1555877170
hryx
So far so good, but it also allows for a parenthetical on struct types

1555877185
hryx
e.g. `struct {...` and `struct(something) {...`

1555877214
hryx
I can't find any examples of that usage anywhere in the compiler code base. What is it for?

1555877250
hryx
For reference, the grammar rule this corresponds to is ContainerDeclType

1555877284
andrewrk
hryx, probably a mistake

1555877314
andrewrk
or a yagni violation

1555877318
hryx
andrewrk: ok, I'll open an issue and maybe Jimmi can weigh in

1555877325
hryx
ah, hehe

1555879494
Xe
working more on olin stuff today, packing is a thing

1555879537
Xe
so the webassembly allocator is at @import("std").heap.wasm_allocator right?

1555880804
shritesh
Xe: yes

1555881249
Xe
shritesh: what is the type of the allocator?

1555881294
shritesh
It's std.heap.WasmAllocator but it conforms to std.mem.Allocator

1555881315
Xe
:+1:

