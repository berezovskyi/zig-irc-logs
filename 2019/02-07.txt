1549512557
emekankurumeh[m]
what's the default tag type for a union?

1549512646
andrewrk
emekankurumeh[m], you mean on of these? union(enum)

1549512675
emekankurumeh[m]
no, when you just have union.

1549512688
andrewrk
for those, there is no tag

1549512734
andrewrk
however if safety is enabled, they have a secret tag, to help catch access of inactive field

1549512762
emekankurumeh[m]
so they are like c unions in release mode?

1549512765
andrewrk
yes

1549512891
daurnimator
andrewrk: I assume you saw my comment about programmer-provided tag functions?

1549512917
andrewrk
daurnimator, yes - however I have not yet taken the time to write a thought out response

1549512935
daurnimator
k :)

1549512963
andrewrk
I'm trying to merge a pull request before bed

1549532544
gamester
Let's say that you're manually translating a header or maybe translating a c++ project one file at a time, in these cases you might want to make sure all the code in a file compiles but the only way to do so is a laburous process of 'touching' the code somehow, say in a test you do "const a = func_name" to see if func_name compiles. Will there be a better alternative?

1549534611
gamester
I just found this:

1549544790
hio
wow I think from the reaction to this post we can see that people really want golang like syntax (no semicolons, no braces around round if/while/for)

1549544977
hio
even the lack of var/const makes a lot of sense in that context. Instead he just says :=, everything is just shorter. No public/private either.

1549546517
schme245
how are you drawing that conclusion from that post? Go is barely mentioned, no one (as far as I could see) is talking about semicolons or braces whatsoever

1549546649
hio
that's what that language looks like

1549546727
schme245
that does not imply that people like it because of the syntax

1549546762
hio
come on man, the language isnt even released yet. Practically nothing other than the syntax is visible

1549549473
andrewrk
gamester, are you checking the IRC logs?

1549551286
companion_cube
hio: to me it mostly seems that people want impossible things, like compiling super fast yet being as fast as C and as expressive as C++

1549551538
andrewrk
it's my goal to accomplish the first 2 things. not sure about exactly what it means to be as expressive as C++

1549551651
companion_cube
I think it was phrased as "can do anything C++ can" or something like that

1549551688
companion_cube
and then also "for memory management, do like rust but simpler" ðŸ˜…

1549552552
hio
any turing complete language can do anything that c++ can do, that's how he means it

1549553382
companion_cube
really? that's not a very interesting property then :/

1549553389
companion_cube
"anything basic can do"

1549553921
very-mediocre
this hn post by andrewrk is super interesting:

1549553940
very-mediocre
any specific plans for differentiating zig?

1549554028
andrewrk
nope, the design of zig is not affected by competing with other languages

1549554041
andrewrk
zig continues on its straight and narrow course

1549554063
gamester
andrewrk: yeah I check the logs

1549554109
andrewrk
gamester, if you're translating C/C++ code and you want your zig code to interact with your C/C++ code then you're probably making exported functions, right?

1549554115
andrewrk
exported stuff gets analyzed

1549554121
very-mediocre
andrewrk: I see. It's certainly an embarrassment of riches. Can't complain.

1549554142
andrewrk
very-mediocre, also, that language is vaporware, just like jai

1549554150
andrewrk
not much to do until they actually release

1549554193
companion_cube
jai seems to have so much ad-hoc parts in its design, iirc, I'm curious if it will lead somewhere

1549554264
very-mediocre
I appreciate the discipline in zig's design

1549554310
very-mediocre
I feel like software is reaching a weird place of overabundance/overcrowding now, so it's a bit worrisome sometimes

1549554322
schme245
I don't understand why people get hyped over something like V: some 10 LOC examples followed by claims like "Faster than C" and "Easier memory management than Rust" with nothing to back it up

1549554333
schme245
of course that sounds fantastic if you take it at face value

1549554338
companion_cube
agreed

1549554356
andrewrk
yeah, I posted that to fish more information from the creator

1549554357
schme245
but then the author mentions, and I quote: "I haven't mentioned memory management because it's not done yet. [...] I want to do something similar to Rust's approach, but much much simpler. It's not an easy task."

1549554368
schme245
you don't say

1549554443
schme245
and also: " V compiles 15 million lines of code per second on an 8-core desktop CPU." well, if you take out memory management from C++ and Rust maybe they would also compile faster...

1549554456
schme245
"/end rant" :D

1549554470
companion_cube
pretty sure tcc compiles fast as well

1549554473
andrewrk
I intend to get to that speed with zig in the self hosted compiler

1549554488
andrewrk
well, we're limited by LLVM, but I have a few tricks up my sleeve

1549554489
companion_cube
that's at odds with optimizations

1549554496
andrewrk
not in debug mode

1549554532
andrewrk
in debug mode zig is willing to trade runtime performance in exchange for faster compilation speed

1549554563
schme245
yeah, I'm sure it can be done, but I don't understand why you would make that claim for a language that has barely implemented any of the features that it claims it will have. of course all those features will have a huge impact on compilation speed

1549554574
schme245
Jai actually exists and it seems to compile pretty darn fast

1549554578
companion_cube
ah yes, ok, if it's for debug I agree

1549554580
andrewrk
and the fact that zig intentionally does not guarantee an ABI for functions / types means the compiler has a lot of tools available to improve compile speed

1549554589
companion_cube
if you disable any form of inlining or lto, that's probably doable

1549554684
schme245
andrewrk, are you planning any streams the coming week(s)?

1549554716
andrewrk
schme245, today at 17:00 EST (in 6 hours) I'm doing one on Thread Local Storage

1549554724
andrewrk
while it's fresh in my mind

1549554759
schme245
cool! I think I'll be able to catch most of it (23:00 for me)

1549554884
andrewrk
looking forward to it :)

1549554896
andrewrk
I also take general questions about zig at the end

1549555492
schme245
random question: is it possible to combine labeled blocks with inline for/while loops to assign values?

1549555515
schme245
I've tried different variations of this:

1549555519
schme245
const a = inline for (array) |x| :blk {

1549555519
schme245
if (x == 4) {

1549555519
schme245
break :blk x;

1549555521
schme245
}

1549555523
schme245
} else {

1549555525
schme245
break :blk 99;

1549555527
schme245
}

1549555533
schme245
but I can't seem to get the order of things right

1549555553
companion_cube
why isn't each construct an expression, in the end? it's simpler and more uniform?

1549555557
andrewrk
schme245, I recommend

1549555575
andrewrk
(I can see this one just fine though)

1549555602
schme245
ahh, roger!

1549555615
andrewrk
that's a good question. it should work but I don't think we have any test cases covering it, so maybe there is a compiler bug

1549555676
andrewrk
companion_cube, in zig nearly everything is an expression. things that are not expressions are variable declarations, and .... I can't actually think of anything else

1549555689
schme245
if statements?

1549555706
companion_cube
andrewrk: except for { â€¦ } blocks without labels, which is surprising

1549555728
andrewrk
that's still an expression, that returns a void value

1549555742
companion_cube
:/

1549555750
andrewrk
zig has no if statements, only if expressions :)

1549555783
companion_cube
I suppose a `if` without else must return void, for example

1549555797
companion_cube
that's what OCaml and rust do, and it's natural

1549555931
schme245
I'm extending my question to about inline for/while to if's as well :)

1549555965
schme245
andrewrk, do you prefer to ask about stuff like this on IRC or to open issues on GitHub? (or to not ask at all? xD)

1549555969
andrewrk
there's no inline if - when an if expression's condition is comptime-known, the compiler analyzes only the active branch

1549555971
andrewrk
same with switch

1549556009
schme245
I mean to combine the if with a named block so that you can "assign" the if to a variable

1549556012
andrewrk
IRC is fine. GitHub is fine too but try to make sure the question is not answered in

1549556042
andrewrk
const x = if (c) a else b;

1549556121
schme245
doh, of course... thanks for reminding me

1549556263
companion_cube
but no `const x = if (c) a else { foo; b }` without label?

1549556292
andrewrk
const x = if (c) a else l: { foo(); break :l b};

1549556325
companion_cube
:s

1549557041
andrewrk
dtz, please help?

1549557412
schme245
companion_cube: AFAIK the syntax around labeled blocks is not 100% set in stone, see

1549557429
companion_cube
I'm looking at

1549557552
schme245
btw, I figured out how to make it work: `const a = blk: inline for (array) |x| { ... }`

1549557620
companion_cube
this issue baffles me, really

1549557681
schme245
nvm, it doesn't work that way either

1549557740
companion_cube
it's like the only "problem" with `{x; y}` returning `y` is that you can return from a function in 2 ways

1549557757
companion_cube
but not having to type `return` is good, it should only be used for early returns

1549557900
andrewrk
"not having to type" is not a strong motivation in zig design decisions

1549557915
andrewrk
zig programmers are willing to type a lot

1549557924
companion_cube
I don't mean it as saving keystrokes, just as being more straightforward

1549557933
companion_cube
expressions are good

1549557963
companion_cube
(this makes me angry every time I write python and I forgot to put `return` and it returns None silently)

1549558019
andrewrk
dtz, never mind, it was fixed in a newer version

1549558049
andrewrk
companion_cube, I see

1549558114
companion_cube
I'm also really used to OCaml where `;` is a separator, I must add (so everything is always an expression, and blocks are just like parenthesis)

1549558129
companion_cube
but rust does the same, and it's quite ergonomic imho

1549558283
Flaminator
I honestly believe that returning by excluding the ; at the end of the statement instead of using return x; is a bad thing in Rust.

1549558304
companion_cube
why?

1549558335
companion_cube
it's the simplest , cleanest way of making every block an expression, I think

1549558503
Flaminator
Because writing something without the ; means different things in different situations. In one of them it returns and in the other case it assigns.

1549558579
companion_cube
in rust, it's pretty simple: `[let] x = a;` is the only way to assign

1549558595
companion_cube
if there's no `=`, it's not an assignment

1549558633
Hejsil
I have a few problems with the 'no semi to return rule'

1549558685
companion_cube
wow, ok, seems like it's the right choice for people here :/

1549558686
Hejsil
Firstly, for a newcommer, how would you look up the semantics for 'no semi at the end of statement' in docs?

1549558707
companion_cube
it'd be in the tutorial, hopefully?

1549558714
companion_cube
or in the docs in "expressions"

1549558716
Hejsil
'break :' is something you can search

1549558732
Hejsil
Also, you probably couldn't do this:

1549558737
andrewrk
I don't mean to gang up on you companion_cube  but it's true that zig syntax is designed to be readable, even for people who have never seen the language before or read any docs

1549558792
companion_cube
andrewrk: no worries, I'm the one making trouble if anything

1549558817
companion_cube
the current trend of expression-oriented languages would make this natural, I'd hope, but apparently it's surprising to many

1549558864
companion_cube
maybe it boils down to different notions of what a block is, really: is it just a scoping construct with a chain of `;` separated expressions, or is it something more important

1549558923
Hejsil
Also, labeled blocks can break out of many scopes, which is really nice

1549558954
Hejsil
But i guess expr langs would probably just 'bubble' the value up

1549558998
companion_cube
yep

1549559045
companion_cube
looking at my rust code, I have a ton of if/match that return expressions (often without a block)

1549559057
Flaminator
I honestly just want a better improved C for embedded programming and Zig seems to give me that.

1549559058
companion_cube
but sometimes I add a `assert(â€¦);` before  the expression to return

1549560459
companion_cube
anyway, I suppose `result` would look ok to me (avoids the need to introduce label names everywhere)

1549560469
companion_cube
sorry for the whole shenanigan

1549560794
companion_cube
andrewrk: is comptime done with a zig interpreter that lives in the compiler?

1549562049
Hejsil
companion_cube, I'm not andrewrk but yes. The compiler compiles Zig into Zig IR which is then interpreted

1549562101
companion_cube
that's neat. it's unsual to see a properly dependently typed language.

1549562104
companion_cube
unusual

1549563133
companion_cube
is it also how the pruning of `if` with comptime conditions is done?

1549569690
andrewrk
companion_cube, the code for each zig ir instruction handles both comptime and runtime interpretation. here's an example...

1549569744
andrewrk


1549569794
andrewrk
you can see the same validation is done whether comptime or runtime. if both operands are comptime known it computes a comptime answer. otherwise it emits a runtime instruction

1549569880
companion_cube
so you mean that compile-time evaluation is always done, and if runtime bits remain in a comptime context there's an error

1549569921
companion_cube
(I mean, comptime evaluation of `if (T==bool) a else b` evaluates everything at comptime, but a and b will be mostly composed of runtime instructions?)

1549570350
andrewrk
yes to your first statement. I'm not sure what you're asking in the parenthetical

1549570521
companion_cube
so things like constant folding is just comptime evaluation in Zig, that's what I mean

1549570565
andrewrk
yes. `1 + 2` turns into a bin op instruction, which notices both operands are known, and so produces a known result

1549570597
andrewrk
it would not re-order them though: `1 + runtime_value + 2` is going to turn into two LLVM add instructions

1549570603
companion_cube
and similarly for `if` I suppose, except you only reduce both branches if the condition is not true/fakse

1549570604
companion_cube
false*

1549570639
companion_cube
so that's really a form of symbolic evaluation in a dependently typed language, you should write a paper :P

1549570640
andrewrk
all the control flow constructs actually get simplified to a Control Flow Graph with goto and conditional goto instructions

1549570650
andrewrk
and zig ir supports comptime goto

1549570679
andrewrk
it used to even be exposed, but turns out we don't need goto after all

1549570730
companion_cube
thanks to defer?

1549570782
shachaf
It seems to me that labeled-break handles almost everything that people want goto for.

1549570802
shachaf
It's nice that Zig has labeled-break-with-value. Almost no other language seems to have it for some reason.

1549570828
companion_cube
rust does both of these, it's in the air perhaps

1549570872
halosghost
if rust fans are called rustaceans, are zig fans called ziggies?

1549570881
shachaf
Hmm, when I looked at Rust it looked like a pretty limited form, I think?

1549570898
andrewrk
goto has 4 use cases: 1. jump backwards (use a labeled loop) 2. jump forwards (use a labeled block) 3. error cleanup (use defer/errdefer) 4. computed goto (ok actually we haven't proven that this isn't needed yet)

1549570901
companion_cube
it mostly has labels on loops + continue/break with labels

1549570921
shachaf
"continue" and "break" are both a kind of early-exit

1549570924
companion_cube
andrewrk: makes a lot of sense, indeed.

1549570949
companion_cube
4. might be useful for writing things like interpreters, but that's a really niche case

1549570973
andrewrk
it's a valid use case of zig, so I won't close the issue that we have open for it until we have a satisfying recommendation

1549571020
shachaf
In "loop { ... }", you can translate it to "outer: { loop { inner: { ... } } }", and then "break" means "break :outer" and "continue" means "break :inner"

1549571041
andrewrk
hmm I think there is no issue open for computed goto. anyway I want someone to have a Real Actual Use Case for computed goto to drive the discussion if it were to happen

1549571089
shachaf
Hmm, I kind of wonder whether the error handling style of goto has a more general use. It's sort of about sharing code between different parts of a function.

1549571099
companion_cube
shachaf: what about continue in non nested loops? :p

1549571099
shachaf
Probably better replaced with other structures wherever possible, though.

1549571112
shachaf
companion_cube: What about it?

1549571118
companion_cube
it's not directly a break

1549571132
shachaf
Yes it is. It early-exits the loop body.

1549571136
companion_cube
(unless you introduce a second block from which you break)

1549571157
shachaf
Yes, sure.

1549571174
shachaf
The thing I wrote isn't a nested loop, it just adds extra labels.

1549571176
companion_cube
ah yes, I read your snippet as nested loops but you did exactly that, my bad

1549571410
shachaf
Python's "for x in xs: BODY else: ELSE" loop can be read as "outer: { for (xs) |x| { inner: { BODY } } { ELSE } }"

1549571483
andrewrk
zig also has else on for and while

1549571528
andrewrk
justification for that is to be consistent with `if`, because `if` works with bools, optionals, and error unions, and so does while

1549571529
shachaf
Oh, I didn't notice that.

1549571561
andrewrk
and they are different syntax, depending on your capture groups

1549571577
shachaf
So regular while always has type void, but while-else can have arbitrary type?

1549571609
andrewrk
so you actually need the `else` on a `while` in order to do while (error_union_value) |payload| {...} else |err| {...}

1549571625
andrewrk
while can be any type

1549571628
andrewrk
break takes a parameter

1549571632
andrewrk
just like return

1549571633
shachaf
I guess while (true) could also have arbitrary type, if you can guarantee it statically.

1549571642
shachaf
Right, but what happens when the loop exits without a break?

1549571643
companion_cube
--> loop{ â€¦ } :)

1549571649
andrewrk
shachaf, the else

1549571672
shachaf
But if there's no else can the while have any type?

1549571680
andrewrk
oh

1549571688
andrewrk
yeah, if the else is unreachable

1549571702
andrewrk
I think zig is smart enough to understand that about while (true) at least

1549571705
shachaf
Ah, I guess.

1549571710
shachaf
Makes sense.

1549571724
shachaf
I should read the whole documentation rather than just bits of it.

1549571735
andrewrk
it's ok, there's a lot of it, and there are a lot of TODOs

1549571746
andrewrk
and it changes

1549571849
andrewrk
once it's more complete it will be my goal to answer every question with a link to documentation

1549571860
andrewrk
not because I don't enjoy chatting or I'm too busy, but because I want the docs to be that good

1549571966
companion_cube
:)

1549577122
emekankurumeh[m]
who is the person working on the documentation generator@

1549577131
emekankurumeh[m]
*?

1549580110
MajorLag
I think the best argument for computed goto is simply that you can't always trust the optimizer to do the right thing, and you'd rather have the option of being explicit than fumbling around trying to trick it into doing the right thing.

1549581532
andrewrk
MajorLag, I would be willing to put the computed goto optimization into the zig frontend if necessary

1549581762
shachaf
I wonder whether any language has goto-with-value

1549581771
shachaf
"x = foo:; ...; goto :x 5;"

1549581793
companion_cube
try/with ? :D

1549581795
shachaf
I guess that's what SSA phi nodes are, sort of.

1549582080
andrewrk
shachaf, zig's labeled block is pretty much that

1549582123
shachaf
But only for early exit, right?

1549582412
andrewrk
hmm, yes you wouldn't be able to give a value forwards and give a value backwards to the same destination

