1551920641
andrewrk
darithorn, that's already in master branch. this is out-of-the-box cross-compiling support for libc on every target

1551920654
andrewrk
(starting with glibc as a proof of concept)

1551920833
scientes
what?

1551920840
scientes
you mean when you build with C?

1551920856
scientes
cause Zig on Linux doesn't use glibc

1551920856
andrewrk
either way, zig or C

1551921006
andrewrk
it's just going to be part of the target. x86_64-linux-gnu is glibc, x86_64-linux-musl will be musl. "native" on linux will be musl

1551921070
andrewrk
there's still a use case for targeting glibc

1551921075
scientes
so giving up on depending on C?

1551921104
andrewrk
on the contrary,

1551921135
scientes
I mean, yes I myself copied some out of musl to do the amd64 patch

1551921145
scientes
and having the ability to build C is awesome

1551921153
andrewrk
this is going to unlock C and C++ libraries for being packaged up with zig package manager

1551921168
scientes
but the stdlib still cannot depend on libc?

1551921182
andrewrk
correct the stdlib does not depend on libc

1551921208
scientes
which means we have to do our own TLS

1551921213
andrewrk
it's more complicated than that though. on some systems (freebsd, macos, netbsd, openbsd) libc

1551921251
andrewrk
further, if the binary

1551921260
andrewrk
which I believe is desirable behavior

1551921272
scientes
agreed

1551921307
scientes
it looked like a bunch of co-routine stuff disappeared from the code when I looked at it recently

1551921318
scientes
in prep for the re-write

1551921362
andrewrk
let me finish my rant real quick - re: unlocking C and C++ libraries for being packaged up with zig package manager

1551921367
andrewrk
so now, 2 things happen

1551921369
scientes
nvm ir_gen_async_return is still the monstrosity it was

1551921398
andrewrk
1. actual C and C++ programmers switch to zig build so that they can use zig package manager and actually have C/C++ dependencies, which nobody does right now because it's too annoying

1551921406
scientes
packaging C and C++ is a huge pain in the ass, so much that meson-build re-invented the wheel recently

1551921461
andrewrk
I got interrupted, back later

1551921468
scientes
I am fluent with the way debian does it, which is probably the most robust (at least for C, which supports symbol files), but it still could be improved

1551921493
scientes
Is there any write-up on how the package manager will work

1551921507
scientes
like will it interact with rpm and dpkg if they are there?

1551921519
scientes
and the Arch package manager

1551922545
andrewrk
it's entirely independent from system package managers. think of it like a project-local package manager.

1551922620
andrewrk
anyway, 2. zig programmers turn C/C++ libraries into zig packages (it's a matter of switching build systems) so that they can use them. so between (1) and (2) zig programmers and c/c++ programmers help each other directly

1551922672
andrewrk
3. C/C++ programmers now depend on zig for the build system (and potentially even building their code to some degree), and so now it's 0 additional dependencies to write some .zig code for their project. that's how we take over the world

1551922680
scientes
it is just that if your program is graphical you DO have dependencies, at least on Linux

1551922693
scientes
particularly on libwayland or libxcb/libx11

1551922866
scientes
but yeah that sounds like a great plan

1551922914
andrewrk
graphical programs is one use case for targeting glibc

1551922984
andrewrk
point being that zig will be able to build entire dependency chains without accessing any files outside the zig installation, which makes it work reliably on all targets

1551923004
andrewrk
which is the requirement for having a dependency

1551923038
scientes
and then build statically

1551923041
scientes
yeah that is quite nice

1551923173
andrewrk
I'm planning on creatign a detailed design document for zig package manager shortly after 0.4.0 release

1551923212
andrewrk
and then full steam ahead on solving the blockers (copy elision, non-allocating-coroutines)

1551923381
scientes
non-allocating-coroutines: unless creating threads of course?

1551923401
andrewrk
what do you mean?

1551923412
andrewrk
the coroutine can do anything, allocate memory, create a thread, call os.exit(1)

1551923428
andrewrk
by non-allocating-coroutines I mean that the creation of a coroutine itself does not use an allocator

1551923451
scientes
yes

1551923461
scientes
you just pass it a stack

1551924725
andrewrk
after the rewrite that will look like:  var stack = coroutineName()

1551924747
andrewrk
which is why it depends on no-copy-semantics

1551927047
wilsonk
andrewrk: did something change since you posted the GeneralPurposeDebugAllocator code? It won't build out of the box on linux for me.  error: expected pointer found usize at line 200  std.debug.captureStackTrace(@ptrToInt(@returnAddress()), &stack_trace);

1551927278
scientes
try removing the @ptrToInt( and the closing brace

1551927359
wilsonk
scientes: yeah, I got that part ;) Just wondering when the change took place as I can't see it in any code being pushed is all

1551927575
wilsonk
scientes:  also the function signature in std.debug seems to show that a usize is optional as the first argument...or am I missing something?

1551927617
scientes
I didn't look at the code, I just read the error ;)

1551927689
wilsonk
scientes: ah, ok

1551929638
scientes
woah, glibc FINIALLY got <threads.h> support

1551931117
andrewrk
wilsonk, yes, @returnAddress now returns a usize. I pushed an update

1551931549
wilsonk
ok, cool thanks andrewrk

1551978704
arBmind
!nick arBmind

1551978732
arBmind
hi :)

1551979269
andrewrk
hi arBmind

1551979431
arBmind
andrewrk: I like your live streams a lot! great respect - I tried the same in the summer, but gave up because it seemed quite unproductive.

1551991296
Vendan
well, lack of tabs were going to be a reason for me to skip over zig, but I dig that it was easy to switch zig and zig fmt to use tabs

1551991329
daurnimator
Vendan: yeah I almost did the same thing

1551991373
andrewrk
speaking of platform differences, I realized I also need to add a compile error to make @import case sensitive

1551991473
Vendan
daurnimator: 4 files changed, 58 insertions(+), 54 deletions(-) and it's compiling tabbed files and `zig fmt` formats files to have tabs

1551991486
Vendan
and most of those changes were actually a sed replace

1551995903
andrewrk
I'm about to stream live coding on general purpose debug allocator

