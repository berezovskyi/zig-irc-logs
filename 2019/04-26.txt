1556249445
shachaf
I wonder whether the best thing you can reasonably do with X11 is use Xlib to get a GL context and then interact with the server yourself.

1556249537
shachaf
Apparently people do that with xcb?

1556249840
daurnimator
shachaf: yeah you can do that with xcb

1556259530
hryx
Are error identities specific to the sets to which they belong? In other words, does `SomeErrorSet.OutOfMemory == DifferentErrorSet.OutOfMemory`?

1556259862
daurnimator
hryx: should be true.

1556259992
hryx
thanks daurnimator

1556260053
hryx
So equal names means equal error values?

1556260076
hryx
I know that's true for the global error set, but then again it one global set

1556260384
andrewrk
shachaf, you can do it without xcb too. xcb introduces a blocking API which is not actually how it works

1556260413
andrewrk
I have some code to talk to the x11 server using zig's async/await but it's one of the things that motivated the upcoming rewrite

1556260432
andrewrk
hryx, yes that's correct

1556260553
hryx
Interesting, so two errors named SomeError in two different error sets, from two different libraries, will be equal to one another?

1556260576
hryx
I like the convenience, but I also wonder if it could cause issues

1556260629
daurnimator
hryx: the whole point is so that e.g. the same OutOfMemory is shared by all libraries

1556260691
hryx
daurnimator: alternative approach: that library function's error set is merged with std.mem.Allocator.Error

1556260722
hryx
but maybe that would only work when errors (error values) are already defined in stdlib

1556260733
hryx
I might be overthinking this of course :>

1556260759
hio
Can I use Zig to compile to Wasm today and call my javascript functions, passing stuff around? I dont see anything in the documentation about this

1556260790
shachaf
andrewrk: Yes, I don't particular want to use xcb, I just meant that non-Xlib code can be used together with Xlib for GLX.

1556260878
andrewrk
hio, wasm is rapidly evolving during this release cycle. cc shritesh

1556260904
andrewrk
I'll make an issue you can track for web assembly documentation

1556260911
hio
ok cool

1556260970
daurnimator
shachaf: so... why do you want to use GLX?

1556260998
andrewrk
hio,

1556260998
shachaf
What are my alternatives?

1556261014
daurnimator
shachaf: to acheive what?

1556261112
shachaf
Showing things on the screen, using the GPU.

1556261326
daurnimator
shachaf: AFAIK, you mainly should just be talking EGL. with different setup functions for X11 vs wayland vs arcan vs android, etc.

1556261531
emekankurumeh[m]
hio:

1556261539
shachaf
I don't know much about EGL. Does it change anything?

1556261630
daurnimator
shachaf: change from?

1556261679
shachaf
Any of the above about GLX.

1556261711
shachaf
It looks like it's pretty new.

1556261844
daurnimator
shachaf: IIRC, it's always been the main API on e.g. android. It's only with wayland that it gained mindshare on desktop

1556261899
shachaf
But I'm not using Android or Wayland.

1556261964
daurnimator
shachaf: so? EGL is the only thing that works everywhere..

1556262041
shachaf
I'm confused. I'm writing a program that runs on X11, so it has to use a bunch of Xlib/xcb functions (or speak the X protocol) anyway. So presumably my program isn't portable to Android without some work.

1556262390
daurnimator
shachaf: not really after setup

1556262435
daurnimator
shachaf: you use xlib functions (or implement yourself) to create a window and get a EGL context for it. then just use EGL (you may very well still need to speak X11 for e.g. input)

1556265153
hio
emekankurumeh[m]: can you tell me the command to invoke for compilation to wasm?

1556265813
hio
ok it's "zig build-obj --release-small -target wasm32-linux ./zigdom.zig" but it has a bunch of errors, e.g std.heap.wasm_allocator doesnt exist apparently

1556279095
forgot-password
Hi guys, I'm attempting to play around with writing inline assemby in zig, but it fails to compile on macOS 10.14.4 (Intel processor).

1556279122
forgot-password
Here's a godbolt link (where it successfully compiles, I put the error at the bottom)

1556279314
forgot-password
When I use popcntq I get the same error.

1556280507
tgschultz
I don't think #2225 was really fixed, or at least there's a similar issue still out there as random.shuffle isn't working right at comptime.

1556280585
tgschultz
also there might be an issue with Windows DirectAllocator and large alignments on Windows. Still haven't entirely ruled out my own code though.

1556280769
tgschultz
rand.zig:273:38: error: index 6386405521297833532 outside slice of size 2500

1556284088
emekankurumeh[m]
hio: you can use the wasm32-freestanding-none or wasm32-freestanding-wasi targets

1556285270
shritesh
hio: Do you still have the issue?

1556290964
vramana
I am looking at the Zig Tokenizer particular how it parses strings

1556291007
vramana
How does it ignore the escaped double quote?

1556292365
shritesh
hio: I have updated the instructions on that repo with information about the wasm_allocator needing Zig master and the command to compile the binary

1556299273
tyler569
anyone know why we have to explicitly define error sets?  I feel like it would be simpler to just have the error {} construct act like a C enum and define the constants, then guarantee they're globally unique across a compilation and let the error return type always be (what we today write as) anyerror!T.

1556299315
tyler569
that way we don't make the symbol names a million characters long from type deduction of every error, and you also never have to worry about naming error sets

1556299324
tyler569
(in my view the fewer things I have to name the better)

1556299354
tyler569
and every !u32 is the same, which aids consistency

1556299391
tgschultz
It was like that before error sets were introduced. What error sets buy us is the ability to know, at compile time, if every possible error case was handled.

1556299483
tyler569
mmm that's a good point, feels like that could be accomplished by a seperate analysis apart from types, but adding complexity there to remove from somewhere else feels only nebulously better

1556299530
tyler569
what I find myself doing in practice is just defining a set at the top of my file with all the errors I use and then not thinking about it again, which is why I'm thinking about this

1556299535
tgschultz
I think there's an open issue discussing the problems error sets have introduced and possible solutions.

1556299537
tyler569
feels like excess friction

1556299546
tyler569
ah ok, I'll look for it

1556299550
tyler569
thanks for the info!

1556299604
tgschultz
Personally I just rely on inference except when that doesn't work, or in interfaces.

1556299633
tyler569
yeah yeah

1556299658
Sahnvour
do you have tips about how to have non totally optimized-out asm output on godbolt ? apaprently exporting my function is not enough to keep it

1556299683
tgschultz
it isn't unoptimized by default?

1556299684
tyler569
I just find it annoying to come up with that throwaway name (AllMyErrors? SubsystemError? ugh) and I also do a lot of asm reading so the symbols annoy me on that level :P

1556299721
tyler569
Are you marking functions `export`?  Zig totally ignores functions it can prove aren't used

1556299722
Sahnvour
it shouldn't as it is allocating, and producing an output mixed with a fake input parameter (to my exported function)

1556299746
tyler569
you can even put a compile error in a function that isn't used, it'll just happily ignore it

1556299779
Sahnvour
woops, I wrote `extern` instead of `export`...

1556303115
andrewrk
tgschultz, I think LemonBoy might have fixed it in the PR I just merged

1556303136
andrewrk
oops I was scrolled up. responding to <tgschultz> rand.zig:273:38: error: index 6386405521297833532 outside slice of size 2500

1556303151
tgschultz
I got what you were referencing regardless

1556303182
andrewrk
tyler569, have you tried using error set inference?

1556303187
tgschultz
I'll rerun the test case when I get home.

1556303256
tgschultz
regarding the DirectAllocator thing, I'm pretty sure that's my code that's the problem and its allocating a lot more than I expect it to.

1556303265
andrewrk
if you don't have any (direct or indirect) recursion, you can typically get away with not declaring any explicit error sets

1556303303
andrewrk
tgschultz,  you're talking about #2357?

1556303398
tgschultz
not directly. earlier (when I mentioned the rand issue) I mentioned a possible issue with Windows DirectAllocator and large alignment, but I'm now pretty sure its behaving correctly and I'm actually allocating too much memory.

1556303673
tyler569
oh I see andrew, I was under the impression that inference only worked on errors that were predefined in error{} blocks - I see that's not the case.  That resolves my frustration!

1556303947
andrewrk
tyler569, glad to hear it. it's also planned to make it work with recursion, but for now you have to use an explicit error set for that case

1556303963
andrewrk
the other time that explicit error sets help is for generic code

1556303978
andrewrk
maybe this error isn't possible on linux but it is on windows, but you still need it to be in the set

1556304016
Sahnvour
tgschultz, what's the issue with DirectAllocator ? I saw you fixed properly the HeapFree thing

1556304725
TheLemonMan
all the debuggers seem to hate the non-power-of-8 types, nice

1556304822
andrewrk
TheLemonMan, to follow up on your question about @setGlobalLinkage - looks like the function is still available

1556304863
TheLemonMan
is it? I got a compile error when trying to use it

1556304948
andrewrk
hmm you're right, apparently it's still in the docs but has been deleted. this is a bit of a mess, I'm opening an issue

1556304981
TheLemonMan
but anyway the weak linkage you've used is pretty useless for the purpose of #2354 since extern_weak is needed to detect if a symbol is unavailable... but that opens another can of worms because using that linkage causes symbols to be null and pointers do not have allowzero...

1556304985
andrewrk
ah this is relevant:

1556305022
TheLemonMan
the bottom line is, let's hope for the best and hope the linker/loader combo provides it for us

1556305052
TheLemonMan
oh right, I must've missed that ticked

1556305092
TheLemonMan
tgschultz, your problem with the shr has been fixed, your code triggered some nasty UB heh

1556305152
andrewrk
TheLemonMan, once #1917 is implemented, that would solve the use case you're talking about right?

1556305250
TheLemonMan
andrewrk, yeah but it's not really a blocker since llvm & gcc emit that symbol in most of the cases

1556305259
andrewrk
ok

1556305342
TheLemonMan
andrewrk, (wrt #2318) I've just noticed you edited the last comment to say the osx failure is unrelated

1556305359
tgschultz
Sahnvour, I don't believe there is an issue. I was getting out of memory for DirectAllocator using large alignments, but I think its because the code actually is trying to allocate too much. Adding a counter showed that between alignment adjustments and the actual allocations I was in the 35GB range.

1556305368
TheLemonMan
I will edit the code to use @alignOf so that the PR is ready to go

1556305391
andrewrk
TheLemonMan, sounds good

1556305403
andrewrk
by the way have you seen the userland translate-c stuff?

1556305407
tgschultz
Thanks, TheLemonMan.

1556305409
andrewrk
I have another commit coming along in that regard

1556305431
andrewrk
at this point the C++ translate-c implementation is deprecated and I want to put effort into the self-hosted one

1556305445
andrewrk
give me another 10 minutes and the path will be extra clear

1556305457
TheLemonMan
I did, but only after I've pushed #2345 so please don't hate me for writing more C++ :P

1556305495
andrewrk
no worries

1556305673
TheLemonMan
the reason I didn't use @alignOf is because the whole decision process about whether to emit an aligncast or not is based on llvm's getTypeAlign and that's ABI (and target?) dependent

1556305937
andrewrk
ahh hmm let me consider that

1556306049
andrewrk
I think the first priority of translate-c is that the generated code will for sure work

1556306081
andrewrk
after that milestone is achieved we can look into annotations or other strategies for cleaning up the output

1556306098
andrewrk
so with that in mind, I'm fine with @alignCast having to participate in every @ptrCast if necessary

1556306182
andrewrk
we could also augment the C pointer rules such that alignment casts are implicit, and are safety-checked

1556306253
andrewrk
that might be our best bet

1556306266
andrewrk
since that's how C pointers work

1556306281
andrewrk
and the point of C pointers is to make translate-c more seamless

1556307380
TheLemonMan
sounds good to me, I'll amend the PR

1556307733
TheLemonMan
andrewrk, next question for you, why the overflow-aware builtins do not return an optional type? the return-by-ref is quite awkward if compared with unpacking-ifs

1556307870
andrewrk
TheLemonMan, before I answer that - have a look at src-self-hosted/translate_c.zig after the commit I just pushed to master, and try out `zig translate-c-2 foo.c`

1556307902
andrewrk
hryx, conflict warning: I changed a lot of lines of std.zig.parser, but the only thing it did is make the return value of parse a *Tree rather than Tree

1556307987
andrewrk
TheLemonMan, hmm I think those builtins might have been made before zig had optionals. I think a proposal to change them to use optionals makes sense

1556308017
andrewrk
in the proposal let's look at the use cases  in the standard library and tests and see what the code would look like with optionals and make sure it looks good

1556308277
andrewrk
I didn't hook up tests for the self-hosted translate-c yet

1556308369
squeek502
tgschultz, note that DirectAllocator on Windows doesn't free unused bytes on large alignments, so the same allocations will use more memory on Windows than POSIX, see

1556308429
tgschultz
yes, I'm aware. That wasn't the problem though, the problem turned out to be simple: during a rewrite of the test I forgot to actually free memory between the 10000 iterations.

1556308438
shritesh
andrewrk: I can work on the documentation for WASM (#2358). Where should it go? langref?

1556308486
hryx
andrewrk: Thanks for the heads up. It won't be much longer till I open a PR, so conflicts shouldn't get out of hand

1556308486
squeek502
ah ok :)

1556308504
hryx
(the parser is feature complete but has bugs still)

1556308986
Sahnvour
so I'm wondering squeek502 tgschultz  ... shouldn't DirectAllocator use VirtualAlloc instead of HeapAlloc? I think that would be closer to the posix behaviour

1556309141
tgschultz
I've been thinking that as well, but HeapAlloc is a lot more efficient when used in general purpose situations. Personal opinion: we should switch to VirtualAlloc and implement a malloc-like general purpose allocator that wraps DirectAllocator.

1556309166
tgschultz
though pursonally I have little use for a general purpose allocator.

1556309197
andrewrk
shritesh, yes I think web assembly deserves a section in the lang ref

1556309215
TheLemonMan
andrewrk, translate-c-2 prints a nice TODO string, nice heh

1556309245
andrewrk
TheLemonMan, yep - errors are hooked up though if you do a C compile error

1556309253
andrewrk
so it's a start

1556309348
andrewrk
tgschultz, that makes a lot of sense - that's the idea of the GeneralPurposeDebugAllocator I've been working on. windows will gain leak detection, use-after-free protection, etc

1556309366
andrewrk
as well as consistent behavior and performance across platforms

1556309465
Sahnvour
I'm under the impression that one might use DirectAllocator and expect it to be page-oriented, which it is not on windows

1556309485
Sahnvour
don't know if that makes much difference in practice though

1556309509
andrewrk
I agree Sahnvour

1556310031
ysgard
I'm trying to write up an SDL2 program using zig, and came across a problem I don't know how to solve.  I'm using IMG_Load from SDL_Image.h, which returns an *SDL_Surface.  To do that I have to @cImport the SDL_Image.h.

1556310073
ysgard
But that results in a conflict, because SDL_Image itself imports SDL.h, and that results in a duplicate declaration of SDL_Surface that zig's c import doesn't like

1556310107
ysgard
error: expected type '[*c].cimport:2:11.struct_SDL_Surface', found '[*c].cimport:3:13.struct_SDL_Surface'

1556310108
ysgard
if (c.SDL_SetColorKey(sprite_surface, true, 0x000000ff) != 0) {

1556310109
scientes
ysgard, there should be include guards in SDL.h

1556310125
scientes
you could add #pragma once to the top of SDL.h

1556310166
scientes
oh i c, so they are identical, but c import is namespacing them too much

1556310169
ysgard
There's an #ifndef SDL_h_ guard

1556310184
ysgard
in SDL.h

1556310204
andrewrk
ysgard, how many @cImports do you have in your entire project?

1556310220
ysgard
Just two

1556310233
andrewrk
have a look at

1556310238
andrewrk
specifically the recommendation to have 1

1556310240
ysgard
const c = @cImport({ @cInclude("SDL2/SDL.h"); });

1556310240
ysgard
const img = @cImport({ @cInclude("SDL2/SDL_Image.h"); });

1556310258
scientes
that would result in differn't types

1556310267
scientes
for the same type

1556310270
ysgard
Oooooh I see, thank you scientes!

1556310303
andrewrk
ysgard, here's a pattern I follow for this:

1556310360
ysgard
Oh, interesting - so if you don't assign the result of @cImport, the c functions just get imported into the local namespace?

1556310413
scientes
no, for that you would have to use use

1556310426
scientes
oh that is what that does

1556310441
ysgard
Sorry, that's what I meant, if you use 'use' instead of assigning the result

1556310479
ysgard
That's nice, I don't have to preface everything as long as I'm willing to make sure nothing collides

1556310502
ysgard
(if I understand this right, sorry, total zig newbie here)

1556310538
ysgard
Thank you andrewk :)

1556310542
scientes
yep that is correct

1556310544
andrewrk
ysgard, that's correct. please note it's generally recommended to avoid `use` except for situations like this where you want to manage the public API of a file

1556310564
ysgard
Gotcha!

1556310620
Sahnvour
andrewrk, what's the current state of linking against C library on windows ? I get a bunch of undefined symbols for __imp_GetCurrentProcessId and friends

1556310679
andrewrk
Sahnvour, I thought that was working and tested

1556310691
andrewrk
are you talking about --library c?

1556310696
Sahnvour
yes

1556310705
Sahnvour
via a build.zig

1556310737
andrewrk
the self hosted compiler links libc and gets built on windows during the test suite

1556310741
Sahnvour
maybe I missed something, I just added my_exe.linkSystemLibrary("c); is that correct ?

1556310746
andrewrk
yes

1556310872
Sahnvour
maybe my code using the c_allocator wants symbols that are not used by the self hosted compiler, thus hiding an issue?

1556310880
tgschultz
you know those bugs where the symptoms tell you it's something really stupid you did, but you can't see it and spend a lot of time narrowing down exactly where it is only to find out it is indeed really stupid and you just wasted half an hour? I've just fixed about four of those. I think I may want to give up programming for today.

1556310903
scientes
tgschultz, I've run into a bunch of those with LLVM

1556310910
scientes
specifically not including a datalayout

1556310914
Sahnvour
if only it was always just half an hour tgschultz

1556311287
shritesh
andrewrk: The generated langref looks very different on my machine. Does it depend on anything linux specific?

1556311301
andrewrk
Sahnvour, hmm, I'm interested in helping you troubleshoot this but right now I need to go do some chores

1556311420
Sahnvour
no problem

1556311868
shritesh
Found it. It runs the linux assembly example and breaks the remaining of the document layout

1556311880
tgschultz
at least the results were worth it:

1556313314
shritesh
turns out, it skips it but doesn't close the opened tags. Submitted a PR to fix that.

1556313674
squeek502
andrewrk, still planning on streaming today?

1556314488
andrewrk
squeek502, if I have time it will be at 19:00 EST (1.5 hrs from now)

1556314506
squeek502
sounds good :)

1556315263
tgschultz
TheLemonMan, andrewrk, confirming the issue with comptime random.shuffle seems to be resolved now.

1556315840
TheLemonMan
awesome, let's hope there are no more bugs in the shr implementation heh

1556315999
yawryck
Hi guys! Can I bother you with a noob question?

1556316297
shritesh
yawryck: Many of us are beginners too. How can we help?

1556316325
yawryck
I want to get a feel of the language

1556316374
shritesh
Have you tried it out yet?

1556316433
yawryck
I want to solve some typical problems from sites such as topcoder

1556316458
yawryck
usually the easiest way to deal with them is to receive input from stdin

1556316483
yawryck
but I'm struggling to parse input

1556316500
yawryck
is there a scanf equivalent in zig?

1556316528
yawryck
something that could read an integer

1556316542
shritesh
There's std.fmt.parseInt

1556316603
shritesh
I don't think you can directly read an int. You need to first read a string and parse it

1556316609
andrewrk
have a look at some of the advent of code solutions

1556316618
andrewrk


1556316627
andrewrk


1556316673
yawryck
I saw some but they pasted the input inside a variable

1556316708
andrewrk


1556316730
andrewrk
looks like Hejsil's has a scan feature that he used

1556316734
andrewrk


1556317081
yawryck
thanks guys!

1556317112
yawryck
they look more complicated than they could be but I think I could adapt them to something simpler

1556317157
yawryck
memory allocators look like an overkill for this type of things. I'll try to use the stack hoping that will make my life easier

1556317321
shritesh
yawryck: std.heap.FixedBufferAllocator will let you do exactly that.

1556317677
scientes
it gives space in the .bss segment

1556319557
andrewrk
I don't think I'm going to have time to stream today, still cleaning for my out of town guest

1556321807
emekankurumeh[m]
Sahnvour: are you using msvc or mingw?

1556321827
Sahnvour
msvc

