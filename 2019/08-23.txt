1566520759
fengb
expectEqual works better if the literal is on the right side

1566542086
bgiannan
?iset

1566542089
bgiannan
arf

1566546295
earnestly
Is it possible to build software with zig without having to use the build.zig mechanism?

1566546387
gonz_
earnestly: `zig build-{exe,obj,lib}`

1566546403
earnestly
I was hoping that was the case, thanks

1566547028
earnestly
The --name compile option seems to have a .o or .h implicitly added to the name given, is there a way to prevent this?

1566547661
earnestly
The build-exe option says it can take a source input or object, however if you supply it with object files it attempts to read them as if they were files

1566547717
earnestly
I.e. hello.o:1:1: error: invalid character: '\x7f'

1566549008
bgiannan
How can i convert a float to an array of u8 ?

1566549388
samtebbs
bgiannan: huh

1566549415
samtebbs
That conversion doesn't make sense to me, feel free to explain

1566549437
bgiannan
it's a rng program i'm trying to rewrite in zig

1566549461
bgiannan
hum maybe i'm misreading it actually

1566549481
bgiannan
yeah i am

1566549521
samtebbs
Do you want to extract the bits from the float and put them in an array as a u8?

1566549935
bgiannan
that's what i though but reading the algorithm again that's not what it does

1566550451
earnestly
Is there a way to prevent zig from creating a ~/.local/share/zig directory?

1566552295
nero57
If a Mutex is declared as global variable, does it mean it does not need to be destroyed?

1566553053
samtebbs
earnestly: Do you know what created it? I.e you installing it, compiling etc.

1566553083
earnestly
samtebbs: when using zig build-obj

1566553581
samtebbs
Hmm I'm not sure. It seems to be creating it even if I turn caching off

1566553961
earnestly
Yeah, although you won't get the cached bits that also live under that tree

1566554698
earnestly
samtebbs: Although a more pressing issue is perhaps zig build-exe foo.o failing as it attempts to read foo.o as a text file

1566555056
samtebbs
earnestly: That is expected behaviour. You should use --object for oject files

1566555070
samtebbs
zig build-exe --object foo.o

1566555081
earnestly
samtebbs: That creates a foo.root.o file though

1566555111
earnestly
samtebbs: Ah hm

1566555142
earnestly
samtebbs: Oh well it works, I must have done something wrong the last time I tried this.  Perhaps it was some issue with caching

1566555235
gonz_
I've never used a compiler that has options that aren't confusing as shit

1566555398
samtebbs
earnestly: Could you paste your build commands here? I don't see that. I'm using `zig build-obj hello.zig; zig build-exe --object hello.o --name hello` and don't see anything out of the ordinary

1566555419
samtebbs
By "I don't see that" I'm referring to the weird root file thing :p

1566555449
earnestly
samtebbs: Yeah it was probably due to the cache and/or already having objects in the directory

1566555497
earnestly
samtebbs: Oh, it may have actually been when using -lib as --object is not documented for compile options

1566555504
earnestly
So I probably tried it with -lib instead

1566555575
earnestly
At least, the documentation is not very clear to me, the lack of a manual is also a bit sore

1566555617
earnestly
I'm going to assume from now on that all options apply and aren't related necessarily to the subcommand itself, just to the various phases implicit within each one

1566555731
gonz_
I think the current users of zig are the ones who'll have to write the manuals

1566555741
gonz_
I think everyone will have to get comfortable with that prospect

1566555857
gonz_
People who aren't up for that have probably adopted the language too early for their tastes

1566555939
gonz_
Generally speaking it seems to me we need more people who cover ground in raw usage in every area + cartographers than we need prospective language designers

1566556023
earnestly
samtebbs: The creation of HOME/.local/share/zig seems implicit, through createRandomOutputPath

1566556033
earnestly
samtebbs: Which is used as part of the renderToLlvm function

1566556073
earnestly
I left a comment on the bug report regarding how hardcoding HOME/.local/share is not exactly correct, but that seems to be the rub of it as it stands

1566556084
earnestly
There's no way to disable this behaviour, but at least the caching can be turned off

1566556112
gonz_
Is it not using `$XDG_DATA_HOME`?

1566556113
earnestly
gonz_: Do you know if zig's build-exe and co. are incremental?  I.e. only rebuilding objects when necessary

1566556120
earnestly
gonz_: Indeed it is not

1566556163
gonz_
No, I don't really know much about it

1566556170
earnestly
gonz_: See

1566556175
gonz_
It should be incremental and be using all the hashed directories you get

1566556181
gonz_
but more than that, /shrug

1566556188
earnestly
Hm, fair enough

1566556199
gonz_
This should be an easy issue

1566556207
gonz_
we'll just have to have it check for XDG stuff

1566556218
gonz_
it's probably useful to do an overhaul

1566556232
gonz_
and for build artifacts you would expect XDG_CACHE

1566556258
earnestly
Yeah for sure

1566556340
earnestly
Although the XBDS is a bit of an odd duck.  It was never really intended to be used outside of XDG (now fdo), hence the "base" qualifier.  It's really unsuitable for compilers and languages since they have the concept of /bin /lib and so on.  Ideally the author would have seen the symmetry between /usr/local and ~/.local and simply replicated the FHS under that point

1566556383
gonz_
I guess I've come to like it because it gives some semblance of order

1566556395
earnestly
But oh well.  So in other words I don't mind how people use it, bikeshedding where files should go, to what location.  In future I likely wouldn't notice usage of .local either, but it shows up now as I don't use that location

1566556402
earnestly
gonz_: Yeah exactly

1566556408
gonz_
I don't use Linux at the moment but if I did I would prefer XDG dirs rather than stray dot dirs everywhere

1566556433
gonz_
IIRC skype and a bunch of other apps don't care one bit

1566556436
earnestly
gonz_: I have my own idea of where to take it, at least something I'll use locally, and that's this:

1566556460
earnestly
gonz_: Yeah, I made an archlinux wiki article on XDG and all the programs that support it, and other alternatives

1566556477
earnestly
Which could be a useful place to look

1566556495
gonz_
FWIW after skimming your idea I guess I prefer it

1566556505
earnestly
gonz_: Apparently skype supports XDG since 0.8:

1566556551
gonz_
Oh, hang on, I knew I recognized your nick from somewhere

1566556572
gonz_
I used to hang out in #archlinux as well

1566556650
earnestly
gonz_: The spec hardcodes HOME/.local to address concerns that openssh devs had, also because I wanted to bypass the problem DJB talked about sarcastically in

1566556671
earnestly
(Those concerns being not knowing where the configs are, if they can be moved around arbitrarily)

1566556874
gonz_
Everything is such a rabbit hole :D

1566556891
earnestly
Of our own making ;p

1566563976
bgiannan
is there an idiomatic way of using c-like flags ? (i.e. FLAG_A | FLAG_B | ...)

1566564142
mq32
make a struct with pub comptime_int s and `use` it?

1566564165
bgiannan
i was thinking of having an enum for possible flags

1566564186
bgiannan
but then it would have been nice to enforce the fact that the flag can only be composed with members of that enum

1566564198
bgiannan
btw why comptime_int?

1566564484
mq32
because it's size isn't specified => casts into any int type

1566564948
fengb
I usually do a packed struct with bitfields

1566568898
bgiannan
is the path given to @import relative to where the zig command is ran?

1566568905
bgiannan
or to something else

1566569041
fengb
Should be relative to the file that’s doing the importing

1566574119
dingenskirchen
is it possible to modify a struct's fields from methods "attached" to it?

1566574148
mrkishi
hey, folks. sorry to bring up a worn out issue, but have accessibility concerns been taken into account on the tabs vs spaces issues? I've recently read up on that and asked about it to my legally blind friend and, to my surprise, they also find spaces harder to work with.

1566574157
dingenskirchen
thinking about it, probably not, but there's bound to be an alternative mechanism for that

1566574161
mrkishi
link on the issues:

1566574281
andrewrk
mrkishi, you're welcome to discuss on

1566574377
mrkishi
sorry about that.

1566574430
andrewrk
no problem

1566574617
nero57
What is the easist way to clone a pointer? such as `[] const T`

1566574661
andrewrk
nero57, perhaps std.mem.copy?

1566574702
earnestly
"cloning pointers" makes me think of aliasing

1566574736
nero57
I want to clone the memory content of the pointer

1566574819
Tetralux
std.mem.copy, std.mem.dupe.

1566574821
nero57
I want clone the memory content pointed by the pointer

1566574891
nero57
Let me try the std.mem.dupe

1566574923
companion_cube
mrkishi: apparently some blind programmers like spaces…

1566575037
mikdusan
some light humor: a 10 sec code review by "Bret Hart":

1566575145
mrkishi
companion_cube: I'm by no means an expert, was just curious if that was considered. let's not derail the channel; I didn't know it was off-topic when I asked that.

1566575947
samtebbs
dingenskirchen: If by "attached" you mean namespaced within it, then you could pass a pointer to that method as `self` and modify it that way?

1566576597
dingenskirchen
perhaps a bit better phrased as an example of what i'm trying to do:

1566576747
Tetralux
Replace `self: Foo` with `self: *Foo`

1566576757
Tetralux
You will then be able to mutate it.

1566576800
Tetralux
We call those kind of functions "member functions" btw :p

1566576867
dingenskirchen
that works, many thanks ^^

1566576955
Tetralux
o7

1566577142
Tetralux
If you have a fn that declares a buffer of bytes, and then passes a slice of that buffer to another fn, which returns a slice, and that slice was sliced from the slice you passed in, is that returned slice allocated in the same stack frame as the original buffer?

1566577174
fengb
A slice is just a pointer + Len

1566577177
andrewrk
Tetralux, yes. slices are just references to data that is somewhere else

1566577188
Tetralux
No no. I mean the slice itself.

1566577250
andrewrk
you can think of slices as primitive types the same as an integer. I don't think the answer to your question is observable in any way

1566577291
Tetralux


1566577323
andrewrk
you can tell where buf2's memory is because it is where the `var` is

1566577335
Tetralux
Okay yeah.

1566577339
Tetralux
That's what I was interested in.

1566577412
Tetralux
It's like I did 'var buf2: *[]u8 = undefined; g(buf, &buf2);'

1566577427
Tetralux
And then &buf2 is used to return the return value.

1566577472
Tetralux
I ask because I was wondering if it was more efficient to have g return an index and then buf[0..index] or just return a slice from g.

1566577536
Tetralux
I'm also assuming then that if g returned ?[]u8, the optional would be on f's stack as well.

1566577554
Tetralux
(along with the slice itself.)

1566577958
fengb
async foo() returns the actual frame, but anyframe and @frame() are pointers?

1566578399
FireFox317
andrewrk: I'm trying to solve issue #3099 (comptime bitcast) and I figured out (using zig-ir) that at some point it is doing `ResolveResult(bitcast(ty=u8))`. This causes the result location to be set to `Foo*`. Should it be allowed to resolve the result of a bitcast using `IrInstructionResolveResult`? Maybe you could point me in some direction

1566578653
andrewrk
fengb, @Frame(func) is not a pointer, but anyframe is

1566578667
andrewrk
*@Frame(func) casts to anyframe

1566578679
fengb
What about @frame() inside the function?

1566578691
andrewrk
that returns type *@Frame(func)

1566578704
fengb
Ah okay, thanks :)

1566578741
andrewrk
FireFox317, I'm sorry I'd have to do the same thing you're doing to figure out the answer. I don't have any guidance to offer

1566578777
FireFox317
Yeah makes sense actually, because you opened the issue xd

1566578898
Tetralux
Q: Does Zig have RTTI?

1566578900
FireFox317
I should probably start with a simpler bug anyways.

1566578913
Tetralux
Or is it all comptime-only?

1566578954
andrewrk
Tetralux, there is no run-time type information, but you can get the information using comptime reflection

1566578959
Tetralux
I have a fn that I want to be able to pass an arbitrary type to, and then store that type in an heterogenous array so that I can process each one according to it's type.

1566579036
fengb
You could use an opaque pointer and a enum for the type

1566579059
Tetralux
Problem is, it can be an arbitrary type.

1566579069
Tetralux
So I'm essentially reduced to a *void.

1566579089
Tetralux
But then I don't know what type it is to actually process it.

1566579107
Tetralux
I'd rather it was statically known anyway for speed

1566579113
Tetralux
But I haven't got there yet xD

1566579229
fengb
You could build a comptime array with ++

1566579247
fengb
That wouldn't work with arbitrary types though...

1566579449
Tetralux
Essentially, I'm writing a format encoder. You queue up things to encode, and then you effectively iterator over the encoder to get the bytes out of it.

1566579466
Tetralux
But it can encode arbitrary types, provided they have the necessary fields / member functions.

1566579487
fengb
Could it take an array of function pointers?

1566579490
Tetralux
Ugh.

1566579498
fengb
Sounds like some dynamic dispatch is needed

1566579508
Tetralux
I want to avoid virtual function calls.

1566579550
fengb
Then all the types need to be known at comptime and it can't be completely arbitrary

1566579586
fengb
I actually do something of the sort:

1566579587
Tetralux
That's the thing though.

1566579593
Tetralux
They are

1566579600
fengb
But I made it mandatory to define into the struct itself

1566579631
fengb
So what I did was comptime duck typing

1566579673
fengb
And the array is generated from a struct definition

1566580096
nero57
`[] const u8` is a slice or a pointer type?

1566580157
Tetralux
It's a slice, but that's considered a kind of pointer in Zig.

1566580160
mrkishi
andrewrk: do all PRs need issues or can simple ones be discussed in-place? it'd be nice for

1566580171
fengb
Slices are fat pointers

1566580215
Tetralux
.. in that they are struct{ptr: [*]u8, len: usize}

1566581196
nero57
This is my function:```export fn handle_msg(msg: [*]const u8) void {    var mstr = util.cstrToSlice(msg);    if (mstr) |str| {        var p = json.Parser.init(allocator, false);        defer p.deinit();        var tree = p.parse(str) catch unreachable;        defer {tree.deinit();warn("deinit\n");}        var root = tree.root;        var act = root

1566581196
nero57
.Object.get("act").?.value.String;                if (mem.eql(u8, act, "play")) {            var path = root.Object.get("path").?.value.String;            warn("path addr {}\n", @ptrToInt(path.ptr));            if (scanMp3TrackTime(path)) |t| {                playInWorker(path);            }            else |err| switch (err) {                else

1566581197
nero57
=> {},            }        }    } else {        warn("recv null message\n");    }    playInTask(&rptCtx);}```Why is the content pointed by the local variable `path` not destroyed?

1566581274
nero57
sorry, so disordered

1566581585
nero57
At the line 13 of

1566581605
nero57
Why is the content pointed by the local variable `path` not destroyed?

1566584264
andrewrk
mrkishi, feel free to open a PR for that

1566585184
jackhalford[m]
Hello all, It looks like I finally got irc to work correctly

1566585211
dingenskirchen
looks like it.

1566585221
halosghost
:D

1566585221
dingenskirchen
hi

1566585313
Tetralux
Greetings, fellow human.

1566585314
jackhalford[m]
First of all thanks for the great language, I'm finding systems programming to be fun again!

1566585443
fengb
o/

1566586645
andrewrk
oh hey jzck, I've been loosly following your kernel project

1566586773
jzck
yes, I had an influx of stars after you started following me ^^ I've been porting my code from rust for a while and I've finally reached feature parity. I'm much happier with the zig version, it's simpler and more readable.

1566586798
andrewrk
happy to hear that

1566586837
jzck
although I did copy quite a bit from zen/clashos, my next goal is to write a virtio-block driver in zig 🙂

1566587034
andrewrk
one of my goals is to have clashos improved to the point that it is a simple game I can demo at handmade seattle in november

1566587065
andrewrk
I might take a few weeks out of the 0.6.0 release cycle to accomplish that

1566587266
jzck
very cool, I see zig's already on the frontpage

1566589066
Tetralux
Does the stdlib have a FIFO buffer?

1566589802
andrewrk
a double linked list? std.TailQueue

1566590057
Tetralux
Thanks!

1566590863
Tetralux
How do you cast a @Frame(f) to anyframe->void?

1566590927
andrewrk
`*@Frame(f)` casts to `anyframe->void` when the return type of `f` is `void`

1566590956
Tetralux
And @Frame(f) casts to anyframe->bool if f  returns bool?

1566590968
andrewrk
no, but *@Frame(f) does

1566591055
Tetralux
I'm trying to put a newly 'async'd frame into a queue.

1566591060
fengb
Is there a way to detect whether a frame is alive?

1566591139
Tetralux
tailQueueSlot.*.data = async f();

1566591162
andrewrk
fengb, no but that could be proposed. the data is available under the hood

1566591175
Tetralux
I'm essentially trying to heap allocate the frame but putting it into a queue that's on the heap.

1566591181
fengb
Alright, I can write something up

1566591200
fengb
It's mostly useful for generators but I've also been using a sentinel value

1566591206
andrewrk
Tetralux, the compiler rejects this for a good reason - if that's a queue of anyframe->T, which is a pointer type, those queue items will be pointing to async frames. which will be allocated where exactly?

1566591219
andrewrk
fengb, I could see that helping cleanup too

1566591249
andrewrk
fengb, instead of requiring extra data here:

1566591288
Tetralux
Ah, I see.

1566591298
Tetralux
The anyframe->bool's are not actually frames.

1566591304
Tetralux
They are pointers to frames.

1566591306
andrewrk
yes

1566591314
fengb
Ah okay, I'll write something up

1566591341
andrewrk
Tetralux, in order for it to be not a pointer, the function has to be known. because the local vars, params, return value, are in the frame

1566591364
Tetralux
Makes sense.

1566591382
Tetralux
I started with the queue elements being @Frame(f), but f is polymorphic :)

1566591393
Tetralux
f(self: *Self, item: var) bool

1566591833
Tetralux
Is there a way provide the args that you want to pass to the generic fn so that you can get it's @Frame?

1566591855
Tetralux
I'm not sure that's a good way to use this whole mechanism though.

1566592150
andrewrk
that's a bit broken at the moment. I think it will be @typeOf(foo(a, b, c)) but this currently will have side effects

1566592168
andrewrk
or rather @typeOf(async foo(a, b, c))

1566592209
andrewrk


1566592934
Tetralux
When I tried it, my first thought was to do @Frame(f, arg1, arg2)

1566592938
Tetralux
FWIW.

1566593040
andrewrk
interesting. that's not a bad idea

1566593063
Tetralux
Symmetric with @inlineCall & friends :3

1566593346
andrewrk
I'm really missing zig's union safety right now. trying to figure out where this union value is getting corrupted after making modifications to stage1

1566593698
Tetralux
Data breakpoints ftw

1566593862
andrewrk
I know where the data is incorrect, but not where it is known to be correct. I tried using gdb's reverse-continue feature but it tripped over some AVX instructions in libc

1566593893
Tetralux
The AstNodes don't have serial numbers do they...

1566593913
Tetralux
If they did, you could set a breakpoint in the set_serial fn when the serial is the one you know gets corrupted.

1566593941
andrewrk
it would be ConstExprValue not AstNode in this case

1566593968
andrewrk
that strategy for debugging would be possible with a bit of setup work

1566593984
andrewrk
I would resort to it if quicker methods didn't pan out

1566594009
Tetralux
I haven't used Zig enough to know if it mitigates the need for that method of debugging.

1566594255
andrewrk
it would solve my problem right now because I would get a stack trace of where the union field gets corrupted

1566594436
Tetralux
I'm curious how many bugs you feel like were discovered immediately because it was written in Zig (stage2)

1566594534
andrewrk
there's 3 or 4 extremely common bugs that I hit all the time in C and C++ that are completely eliminated in zig

1566594553
Tetralux
Any that would have taken hours to debug? xP

1566594555
Sahnvour
+1 for data breakpoints, and +2 for unique ids in internal structs ... really helpful for debugging

1566594612
Tetralux
Sahnvour: I wonder if we could have @dataBreakpoint(x) (where x is a pointer)

1566594704
Sahnvour
is there a benefit over setting the data breakpoint from inside a debugger ?

1566594744
Tetralux
Probably that the breakpoint you want to set depends on the current state of the program.

1566594779
Tetralux
But I haven't personally needed to use databreaks enough to know clearly.

1566594822
Tetralux
Well - more like I haven't needed to use them enough to remember the circumstances of them clearly, but still .xD

1566595070
Sahnvour
I don't see a usecase where it would be useful outside of a debugger, but running arbitrary code when the value at a particular address changes can make for great application-specific debugging tools

1566601547
fengb
I accidentally called a suspending function without async and got a confusing error message: "resumed an async function which already returned"

1566602211
andrewrk
calling a suspending function without async is allowed. it's the same thing as `await async foo()`

1566602288
fengb
Yeah but it died with that error message

1566602302
fengb
I didn't resume it or anything

1566602315
fengb
Lemme toss up a localized example

1566602478
fengb


1566602510
fengb
I'm not sure how it's returning, or how it's resuming since the code isn't doing either correctly

1566602619
andrewrk
fengb, oh, this is a bug that specifically has to do with zig test

1566602633
fengb
Ah okay

1566602656
Tetralux
How do you do that closure thing again?

1566602847
andrewrk
fengb,

1566602866
andrewrk
once I get a bit further on async/await stuff in the std lib, tests that do async stuff will Just Work

1566602881
fengb
Ah I see

1566602898
fengb
Since I don't have a resume strategy, what is that supposed to do?

1566602914
andrewrk
if test were correctly async, the test would hang

1566602996
fengb
I converted it to `_ = async foo()` and it's working as I had expected

1566603017
fengb
My suspend point is the last statement. I'm still fiddling with a generator pattern

1566603057
fengb
Oh since I don't await, this function isn't async

1566603062
fengb
nvm I figured it out heh

