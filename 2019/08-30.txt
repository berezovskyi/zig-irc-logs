1567128436
shritesh
Tetralux: AFAIK, there was some discussion about being able to import a struct from a file directly. Instead of doing `const Yolo = @import("yolo.zig").Yolo`, you could do something like `const Yolo = @import("yolo.zig")` for the same effect. I might be wrong tho.

1567128568
Tetralux
shritesh: I don't remember that, but I haven't seen them all.

1567128627
gonz_
shritesh: That doesn't really even make sense, though...?

1567128671
gonz_
Is there an issue for this?

1567128679
gonz_
Becaus

1567128733
gonz_
because that would somehow mandate that structs are uppercase as well as make it non-obvious at a glance what you're actually importing.

1567128900
shritesh
This is what I am talking about

1567129026
shritesh
The solution was just to use `usingnamespace`

1567129041
gonz_
I guess I'm not seeing what the common bits between what you said and the issue are.

1567129065
gonz_
`usingnamespace` is for bringing everything from an import into scope, no?

1567129103
gonz_
`import` in Elixir, `open` in OCaml, etc.

1567129181
shritesh
Correct. I thought it was some sort of new mechanism that was being worked on. Instead, `usingnamesapce` is what I was looking for.

1567129389
fengb
Not sure if itâ€™s intentional... but you can declare fields into the top level file struct

1567129401
fengb
So you can treat the file as a real struct

1567129621
shritesh
Ohh. I didn't know that. That's interesting

1567129884
shritesh
I'm going to (ab)use the hell out of that :D

1567130441
andrewrk
I haven't started taking advantage of it yet but I think that's the direction things are headed

1567130455
andrewrk
shritesh, see also

1567130669
shritesh
Honestly, I like it.

1567130753
andrewrk
yeah. the main benefit is that reflection on a file is easy to understand because it's literally just a struct

1567130816
shritesh
"A source file is just a special case of a struct."

1567131053
shachaf
Hmm, does the current async/await plan allow for a state-machine-style API for format(), rather than the current callback API?

1567131228
andrewrk
I'm not sure how to answer that question

1567131236
shachaf
Let me be more concrete.

1567131277
shachaf
I was thinking that in C I want an sprintf API that can be used like this:

1567131281
shachaf
char buf[100]; SprintfState state; sprintf_init(&state, "test %d %s\n", 123, some_string); while (!state.done) { sprintf_chunk(&state, buf, sizeof buf); write(1, buf, state.chunk_size); }

1567131317
shachaf
Where you can give it some memory and it'll write into it until it runs out of space, and if it does you can resume it with more memory later.

1567131412
shachaf
This sort of thing seems a bit more flexible than the callback API format() uses, and it can avoid copying.

1567131421
andrewrk
interesting

1567131437
shachaf
It's effectively turning sprintf into a coroutine, and I wonder whether the async @Frame() transformation can be used to do something like that automatically.

1567131512
andrewrk
that sounds more like a generator, which I haven't ruled out as including in the language

1567131525
andrewrk
they are related

1567131559
andrewrk
but note that a generator could be async - in which case getting the next value would be a suspend point -  and you could "async" getting the next value and then await it

1567131595
andrewrk
if you try to use async/await to implement generators, you give up this use case

1567131608
andrewrk
which is one reason I think it might be a reasonable language feature

1567131643
shachaf
What's the distinction you're making between async and generators? The fact that there's a scheduler, or something else?

1567131685
shachaf
They seem like the same feature to me in most respects -- the main trick is turning regular stack frames into @Frame structs, and being able to suspend execution.

1567131703
andrewrk
with a generator, the caller is in charge of resuming it, and asking for the next value. with async, resuming the frame is a safety panic. the only thing you can do is await it, which just suspends until the result is available

1567131822
fengb
Both can be implemented with stackless coroutines, so generators can exist as a userland thing

1567131829
shachaf
The result becomes available through

1567131853
fengb
But semantically they're used rather differently

1567132022
shritesh
Now I'm wishing that there was some way to declare a file as a tagged union. My structs are `const SomeStruct = @import("some_struct.zig")` but tagged unions are now `const SomeTaggedUnion = @import("some_tagged_union.zig).SomeTaggedUnion`.

1567132035
andrewrk
shachaf, with zig's async/await, it's not the caller's responsibility to resume - it's the async function itself, which suspended itself, which must make sure it gets resumed

1567132056
andrewrk
shritesh, yeah... and generic functions, and enums... idk. I think we have to just stick with structs

1567132082
andrewrk
it's one thing to say files are just structs. another thing entirely to start trying to annotate files and other crazy things

1567132094
shritesh
Yeah

1567132179
shachaf
I see. Those seem pretty closely related to me but I can see why you'd distinguish them.

1567132186
shritesh
We need javascript's `export default` /s

1567132283
fengb
The implementation can be based on the same thing, and you can always implement one using the other, but without both you can't do async generators

1567132316
andrewrk
fengb, that's a good way to put it

1567132335
knebulae
Long time no speak guys.  Just wanted to throw out that I've ported the Isaac64 CSPRNG to Zig.  Verified against the C code results.

1567132345
andrewrk
oh hi knebulae

1567132351
knebulae
hey man!

1567132357
andrewrk
nrdmn came in and worked on UEFI support

1567132363
andrewrk
I still have a PR to merge regarding that

1567132369
knebulae
it looks great.

1567132396
knebulae
All the C cleanup is sweet too.  Very nice work!

1567132409
knebulae
*C pointer cleanup

1567132433
andrewrk
ah right, you came in and experienced the worst of it right before I did that work

1567132442
andrewrk
nice work on Isaac64

1567132461
knebulae
Yes, it was hairy.  Thank you btw.

1567132603
knebulae
I'm working my way up into porting some of the C code I worked on in the past several months to Zig.  I use this lib extensively, so this was step 1.

1567136922
bgiannan
i get that zig wont add two int of different types, but does it really need both operands of a comparison to be of the same int type?

1567139879
knebulae
@andrewrk: re-reading my comment from earlier, I meant that the whole C pointer shenanigans were hairy, not porting the Isaac64 code.  That was mostly straightforward.  I figure there has to be a more idiomatic "Zig Way" to write some of this code.

1567139921
knebulae
*though

1567140244
hspak
bgiannan: I believe you do unless you want to follow C's implicit integer promotion model

1567148135
bgiannan
how can i define a runtime variable that is accessible accross all my zig files?

1567154693
mq32
hey

1567154787
bgiannan
hey

1567154823
mq32
anti-rant: please never remove the possibility to declare local types from Zig

1567154849
mq32
i'm coding in c# right now and it's just annoying that you can't declare function-local types

1567154906
mq32
tuples just don't do good semantics

1567156842
bgiannan
can i put a runtime variable inside a struct?

1567156878
bgiannan
something like: const MyType = struct { pub var random = somethingRandom() }?

1567156898
bgiannan
keep running into `unable to evaluate constant expression` errors

1567156961
mq32
should work, as a var in a struct is just the same as a global variable

1567157004
bgiannan
here's my usecase:

1567157056
mq32
i think it's not possible to do runtime code in variable initialization

1567157069
mq32
and Self.init() is not const-evaluatable

1567157082
mq32
so you have to init RNG.Current in your main function

1567157092
bgiannan
yeah

1567157104
bgiannan
did something like that earlier with no luck, let me try again

1567157265
bgiannan
seems to work in a test main, but still constanst expression error somewhere else related to that variable

1567157266
mq32
oh

1567157272
mq32
pub var Current = Self.init();

1567157276
mq32
init may return an error ;)

1567157412
bgiannan
So i initialize RNG.Current in main.zig with a try. When i reference it from another file i get `unable to evaluate constant expression` right when i try to reference it with `@import("./rng.zig").RNG.Current`

1567157430
mq32
huh

1567157435
bgiannan
ah maybe i should not do it in a global variable

1567157444
mq32
how is your variable defined now?

1567157445
bgiannan
but when i need to reference it

1567157451
bgiannan
Current?

1567157458
mq32
pub var Current : Self = undefined; // should be correct to my knowledge

1567157465
bgiannan
yes that's it

1567157495
bgiannan
ok i think i got it

1567157514
bgiannan
i tried to reference RNG.Current when initializing a global variable

1567157532
bgiannan
when i just import RNG and do RNG.Current.random when i need it then it works

1567157604
bgiannan
so i guess global variable are comptime

1567158255
bgiannan
this is slowy getting into high-level and/or scripted languages guy

1567158267
bgiannan
this sentence is horrible

1567160198
vegai
so, the macos build isn't working in master. Is anyone on that?

1567161558
gonz_
vegai: The most consistent way to get it solved is probably to make an issue.

1567161935
mikdusan
vegai:

1567163576
vegai
mikdusan: ah great

1567163599
vegai
gonz_: yeah, I wasn't certain whether that would be wanted, since the azure pipelines already highlighted the problem

1567165324
Snektron
There should be a nicer way than @hasDecl everywhere in std/os/linux.zig

1567165514
Snektron
and i've noticed a mistake in it too

1567171601
FireFox317
andrewrk: Next week the big async/await, networking etc stream is coming?

1567172595
rivten
hey everybody ! quick question : i am building some zig code either to a DLL or to an EXE file, is there a way, within the source code, to differentiate between the two in the file at comptime ? (like I want to take different paths in the code)

1567172644
rivten
I couldn't find anything like that in LinkExeObj that could either tell me what was the target type, or set some comptime known value from the Builder (like is_exe for example)

1567172722
fengb
That needs to happen at link time

1567172766
fengb
comptime is too early to detect since itâ€™s spitting out build objs

1567172801
rivten
yeah but maybe in the build.zig file I can set something in the source file at comptime ?

1567172824
rivten
like I could maybe say at comptime that var is_exe = true in the source file from the build file ?

1567172831
rivten
(i don't know if that's clear or not ^^)

1567173210
rivten
i think basically my question boils down to : how do we do #ifdef in zig and how can we define the ifdef in the build.zig file ?

1567173402
fengb
ifdef etc. is done using comptime. Using `if (comptime var)` allows the compiler to eliminate dead branches immediately

1567173412
fengb
I'm not sure how to inject values at build time though

1567173687
rivten
found it :)      pub fn addBuildOption(self: *LibExeObjStep, comptime T: type, name: []const u8, value: T) void {

1567173714
FireFox317
rivten: it is possible to @import("build_options"), see this example:

1567173767
FireFox317
and indeed use `addBuildOption` in your build.zig

1567173813
fengb
Ah cool

1567174369
rivten
cool !! thanks a lot :)

1567174749
Snektron
Whats the best way to check if a you're compiling for 32 bit?

1567174755
Snektron
just @sizeOf(usize) == 4?

1567175444
rivten
if you use a build.zig file, you have a Target member in a LinkExeObjStep that you can check

1567176771
samtebbs
rivten: Last time I checked, "build_options" wasn't recognised by the compiler. Here's my working attempt at build options

1567176812
rivten
samtebbs : well i'm trying it on the main branch and it seems to work very fine on my side

1567177311
fengb
But but... pluto was demoted

1567177860
samtebbs
fengb: Hmm interesting, I can never get the compiler to recognise @import("build_options")

1567178052
fengb
I think you tagged the wrong person. I'm just here for the snark

1567178059
samtebbs
Oh lol I did

1567178067
samtebbs
rivten: ^

1567178082
samtebbs
Seems to be working now anyway

1567178825
andrewrk
Snektron, @sizeOf(usize) will tell you the size of a pointer. if that's what you want, that's good. you also have full access to comptime constants about the target

1567178863
andrewrk
have a look at the stdout of `zig builtin`. that's an example of what you get with @import("builtin")

1567178939
andrewrk
I'm happy to report that after 1 fix the llvm9 branch has passed all tests, including optimized builds, with a debug build of llvm9 with all the asserts on

1567178986
samtebbs
andrewrk: Nice one, what big improvements do you predict us getting from llvm 9?

1567178997
samtebbs
That should actually mean that some of my llvm patches will be in Zig

1567179000
andrewrk
RISC-V support

1567179030
andrewrk
that's about it as far as I'm concerned. but it's important to stay up to date

1567179046
andrewrk
I also don't run the full test suite with llvm assertions on very often, so it's always a relief when it passes

1567179216
scientes
I like the version pinning better than other LLVM-language's staleness

1567179291
samtebbs
Nice, I want to see if I can generate any arm MVE code from zig too

1567179296
samtebbs
That may be in llvm 9

1567179812
andrewrk
thanks for the fix mikdusan

1567180293
shritesh
AVR support by default too I think

1567180362
scientes
well, llvm's AVR never worked as well as gcc's

1567180366
scientes
avr-8 that is

1567180413
shritesh
I think the Rust folks have put in a lot of effort to improve it recently

1567180422
andrewrk
yay, thanks rust

1567180493
scientes
shritesh, yes they have

1567180769
shritesh
I will be working on some simple hardware projects this weekend with Zig running on Arduino Uno, Teensy 4.0, Raspberry Pi 3B+ and a Sparkfun Edge to demo at my NashMicro talk on Tuesday.

1567180787
scientes
oh yeah, my LLVM talk was accepted

1567180794
andrewrk
the list of non-experimental targets for 9.0 is here:

1567180799
scientes
on "Using LLVM's portable SIMD with Zig"

1567180804
andrewrk
AVR is not one of them, but I enable it for ziglang.org/download builds

1567180825
andrewrk
scientes, for what convention?

1567180836
scientes
LLVM Dev Mtg October 22-23

1567180839
scientes
in San Jose

1567180873
andrewrk
oh wow neat! that should be enough time to make more progress on SIMD upstream and make your life easier

1567180877
samtebbs
Oh cool, it would be great to hear about it afterwards

1567181688
Snektron
Is there any particular reason why getdents64 takes a [*]u8 and not an os.dirent64?

1567181701
Snektron
and why are both getdents and getdents64 provided?

1567181804
Snektron
Doesn't getdents64 supersede that? it seems to make more sense to add a hasDecl on both getdents and dirent

1567181833
andrewrk
Snektron, the struct has a variable length last field, and it's easier to interface with as [*]u8

1567181845
andrewrk
as for that other thing... I'll have to read the code and refresh my memory

1567182111
andrewrk
hmm that's strange, musl only has getdents and aliases getdents64 to it

1567182150
andrewrk
aha: if getdents64 is provided then it undefs it and defines SYS_getdents to SYS_getdents64

1567182174
andrewrk
Snektron, I agree with you and think we should follow musl's lead

1567182232
Snektron
there are a few other such syscalls, and arm happens to be one of the platforms where those are implemented

1567182381
Snektron
i've just been putting @hasDecl on the affected ones, yet i wonder if thats the best method

1567182502
Snektron
also, i wonder whats the best way to deal with that annoying long long in 32 bit linux calling convention in Zig

1567182512
Snektron
musl defines a few macros to help out with that, but thats not possible here

1567182565
Snektron
btw, the zig source code contains undefined behaviour because it has a function called 'tokenize' ;)

1567182647
andrewrk
orly? I'm happy to change that. we probably should care about that because the main point of stage1 is bootstrapping. getting rid of technically undef behavior is in scope

1567182662
andrewrk
but, I would rather prioritize that after we have stage2 working

1567182740
andrewrk
Snektron, btw feel free to do smaller pull requests to improve arm32, that would be easier for me to code review, and prevent merge conflicts since master branch changes quickly

1567182771
andrewrk
there have been a few similar attempts in the past that were abandoned because the contributor tried to do a massive PR that did everything at once, and then couldn't keep up with the merge conflicts

1567182903
Snektron
theres actually not quite a lot of change, just some small changes and added definitions, but if you want to i can make a PR for what i have now.

1567182923
Snektron
The stuff about the syscalls is more general for 32-bit platforms i believe

1567182933
andrewrk
it's up to you. but I'm predicting that you're going to get minimal push-back and quick merges

1567182970
scientes
Snektron, did you get the C ABI working?

1567183000
scientes
actually, I don't think it is possible with current zig, because of "homogenous aggregates"

1567183007
Snektron
scientes: what do you mean exactly?

1567183020
andrewrk
that's one of the tests that gets run in ./zig build test-standalone

1567183021
scientes
the C ABI is the hardest problem of adding a new platform to zig

1567183038
Snektron
ah, well most of the platform support was already there

1567183046
scientes
except C ABI

1567183068
andrewrk
ah, the test is only enabled for x86_64 currently

1567183069
scientes
ninja build won't work without at least some of it, only ninja zig0

1567183096
Snektron
there was just some stuff for linux missing really

1567183124
andrewrk
Snektron, have a look at test/stage1/c_abi/cfuncs.c and test/stage1/c_abi/main.zig

1567183137
Snektron
that and a compile error due to a wrong cast of u64 to usize

1567183158
Snektron
andrewrk: it might be worth it to disallow implicit casts to usize

1567183161
andrewrk
this is what scientes  is talking about. and you can see the test is only enabled for x86_64 in test/standalone.zig

1567183172
Snektron
ill have a look in a moment

1567183196
scientes
I also asked the LLVM developers to move the C ABI from clang to LLVM, and they explained that that isn't really possible

1567183202
andrewrk
but yeah if you got that working that would be a huge contribution. it's not required to do other std lib improvements

1567183220
andrewrk
oh, why is that scientes?

1567183237
scientes
because it is heavily connected to codegen, like if you use sizeof() and offsetof()

1567183246
andrewrk
ah

1567183296
andrewrk
it would be nice if they did it for the C calling convention though.

1567183378
scientes
that said, the Power backend does implement the C ABI

1567183385
scientes
which was suprising

1567183393
scientes
there are even tests for it

1567184384
Snektron
andrewrk: is it possible to compile tests but not run them?

1567184429
Snektron
My poor old raspberry pi is certainly not powerfull enough to compile zig, and just compiling the tests for a different architecture is probably easier than setting up a cross compilation environment

1567184503
andrewrk
Snektron, have you tried passing -target?

1567184508
andrewrk
it works

1567184517
Snektron
that will just run them, no?

1567184586
andrewrk
$ zig test test.zig -target aarch64v8-linux

1567184590
andrewrk
Created /home/andy/tmp/zig-cache/o/64isfUkAB5uKWsB2cbzFTy9ijBJamsg0x23M8YjFTxnQ6zIoMKudhukTjWNNdUki/test but skipping execution because it is non-native.

1567184604
Snektron
aha, shame on me for not just trying it

1567184633
andrewrk
if you want a nicer output path you can pass --output-dir too

1567185801
Snektron
by default zig will use the included musl right?

1567185847
andrewrk
Snektron, zig will use the included musl if you use one of the targets listed under "available libcs" in the output of `zig targets`

1567185876
andrewrk
zig targets | grep musl

1567185877
Snektron
im really not thinking today, i literally just passed armv6-linux-musleabihf to it

1567185892
andrewrk
that should work :)

1567185939
Snektron
strange

1567185976
andrewrk
this works for me: zig build-exe --c-source hello.c -target armv6-linux-musleabihf --library c

1567185981
andrewrk
it takes a minute to build musl the first time

1567185991
Snektron
i've found an error in musl for starters

1567186339
Snektron
andrewrk: Where exactly does zig get the standard C headers from? lib/libc/musl/include or lib/include?

1567186363
andrewrk
Snektron, you can see with --verbose-cc

1567186416
andrewrk
from the install directory of zig, lib/zig/libc/include has libc headers; lib/zig/include has C language headers

1567187145
Snektron
So why isn't alltypes.h.in used for the selected architecture when building with musl?

1567187176
Snektron
musl defines architecture-specific type sizess in those, yet i can't see those being translated into a header anywhere

1567187228
Snektron
instead, the types are taken from generic-musl/bits/alltypes.h, which defines _Int64 to 'long'

1567187233
Snektron
A long is only 4 bytes on arm, so that yields a compile error on the test

1567187312
Snektron
arm-linux-musl/stdint.h only defines up until uint32_t

1567187708
andrewrk
Snektron, when I do this with musl v1.1.23: make DESTDIR=build-all/arm install-headers ARCH=arm

1567187718
andrewrk
this produces build-all/arm/usr/local/musl/include/bits/alltypes.h

1567187728
andrewrk
this file has #define _Int64 long

1567187866
andrewrk
this does seem weird though. I'm going to ask about this in #musl

1567188177
Snektron
andrewrk: am i missing something by simply compiling zig? shouldn't that also produce the right musl files?

1567188192
andrewrk
not sure what you're asking

1567188240
Snektron
The build command you sent is for musl itself right?

1567188262
andrewrk
yeah, it's from the "how to update the bundled musl" instructions:

1567188431
Snektron
Oh i see, but shouldn't the current libc files also work without updating them?

1567188589
andrewrk
to find out why alltypes.h was not what was expected, I was repeating the instructions for updating musl, to find out how alltypes.h got to be what it is. that's what led me to discover this surprising thing that is probably a bug in musl's build script

1567188611
Snektron
aha

1567188612
andrewrk
so, they fix that, we run the instructions for updating again, and then we have our fix

1567192510
andrewrk
Snektron,

1567192570
andrewrk
instructions are updated so next time it will be correct too

1567192907
Snektron
thank you

1567192931
andrewrk
thanks for discovering this, that was a rather nasty bug

1567193655
gunnara
hspak - hi! I looked into the

1567193670
gunnara
not understand what failed it

1567193787
andrewrk
gunnara, this was fixed in master by mikdusan's commit 966670645a

1567193863
gunnara
andrewrk - oh, so a rebuild would fix this?

1567193878
andrewrk
yes a rebuild against master

1567193887
gunnara
ok

1567193927
andrewrk
you can see the green checks here:

1567193983
Snektron
im surprised noone noticed it before

1567193996
Snektron
I think it should produce wrong results on every non-64 bit system

1567194016
andrewrk
yeah. I don't think we have many C programmers using zig to cross compile C yet

1567194032
andrewrk
I believe it will happen soon after the package manager is working smoothly

1567194046
andrewrk
because it will solve cross compilation for C programmers as well as zig programmers

1567194140
Snektron
guess im doing that now though

1567194202
Snektron
only have an old rpi lying around, it controls my drawing robot which i made last year

1567194214
Snektron
but i burned out on the project before i was able to program it

1567194215
andrewrk
neat!

1567194242
Snektron
that and there was some problem with powering the stepper motors, ill have to look at that after i get some i2c stuff working

1567194280
gunnara
How is a rebuild triggered?

1567194297
andrewrk
gunnara, is this for a pull request?

1567194402
gunnara
yea, I know its not my PR but I

1567194430
gunnara
am trying to understand the bug fixing process and tools :)

1567194557
andrewrk
if it was your pull request, you could rebase it against master and force push

1567194647
gunnara
ah ok thank you

1567200617
Snektron
andrewrk: what do you think about adding prototypes to syscall constants?

1567201284
Snektron
say for example defining SYS_write as Syscall(0, fn(u32, [*]u8, usize) usize);

1567201313
Snektron
where Syscall has a .call function

1567201991
andrewrk
Snektron, isn't that what std.os.linux.write is?

1567202036
Snektron
i suppose, but the main functionality im hinting at is the last. It's easy to overlook the 32-bit case

1567202058
Snektron
though there are only a few affected

1567202076
andrewrk
I think the appropriate abstraction layer is the one that is calling syscallN()

1567204454
shritesh
Are recursive functions still problematic? I'm getting broken LLVM module errors using recursive functions with error sets.

1567204514
andrewrk
there is some work I'm doing on recursion at the moment, but I wouldn't expect that to happen

1567204541
andrewrk
it's expected that you would get a compile error saying "unable to infer error set; function still being analyzed"

1567204559
andrewrk
and to work around it, give the function an explicit error set. you can start with an empty one and the compiler will tell you which items are missing

1567204662
shritesh
Hmm.

1567206696
marler8997
andrew made a comment about deprecating use/usingnamespace...is there an alternative that has been introduced or any info on how to write code without it?

1567206759
andrewrk
use is deprecated; usingnamespace is planned to stay

1567206771
andrewrk
zig fmt changes the former to the latter automatically

1567206789
andrewrk
it's just a keyword change

1567206826
marler8997
oh thanks for the clarification

1567208128
andrewrk
I've done it

1567208158
andrewrk
in a local branch, this code works:

1567208165
andrewrk
and it works if you flip suspending_implementation to false

1567208248
andrewrk
now all I have to do is make detected recursion automatically make all the functions in the call graph cycle async, and we have accomplished safe recursion

