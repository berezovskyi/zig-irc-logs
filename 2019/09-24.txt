1569283438
nrdmn
andrewrk: is there any way to declare an array of unknown length at the end of a struct?

1569283484
nrdmn
the struct has a length field for that array

1569283492
andrewrk
nrdmn, no.

1569283549
nrdmn
ah, okay. I'll write a function instead to access it that returns a slice.

1569283615
andrewrk
that's reasonable. a u8 pointer to the beginning of the struct + @sizeOf(StructWithoutThatField) will point to the right address, then you have to ptr cast it

1569283680
andrewrk
I think this could be done with a fairly reasonable API in userland

1569283721
andrewrk
fn resizableLastField(comptime Struct: type, comptime LastField: type, ptr: *Struct) [*]LastField

1569284253
fengb
I do a silly hack:

1569284254
fengb


1569284335
andrewrk
note that relies on packed struct

1569284504
nrdmn
ok, now I've got a struct with two such arrays.. the efi spec is full of that kind of structs

1569284581
nrdmn
I think I've seen one that contains a null-terminated array, an array of which the size is given inside the struct and a third array that fills out the rest of the struct. You get the total length of the struct when you request the struct from an efi function

1569284605
nrdmn
I can't find it now, but I remember it was file access related

1569284989
fengb
Oh a dumb edgecase: the compiler crashes if the struct is usize bytes

1569290706
andrewrk
I don't know how I thought I was going to type up release notes and fix multiple bugs per day

1569291449
nrdmn
you can install new fonts in uefi that are used for the config menus ðŸ¤”

1569292412
andrewrk
I always thought of std.heap.DirectAllocator as being pretty simple, but I'm realizing now there have been a lot of contributions to this code

1569295890
nrdmn
andrewrk:

1569295934
andrewrk
lol, is that comic sans?

1569295952
andrewrk
also congratulations, you are now the resident UEFI expert. sorry knebulae ;-)

1569296033
nrdmn
yep :)

1569296084
andrewrk
mind if I use your UEFI-paint screenshot in the 0.5.0 release notes?

1569296107
nrdmn
sure, go ahead :D

1569296160
andrewrk
cool. So far I've only made it to May 3rd

1569296185
knebulae
@andrewrk: :( It's cool.

1569296195
knebulae
I see how it is around here.

1569296219
andrewrk
knebulae, I'm kidding of course. I do wonder if you were to do some more UEFI work now, how you would think about nrdmn's contributions

1569296231
andrewrk
nrdmn's UEFI code looks really clean IMO

1569296251
knebulae
I haven't looked tbh. I will check it out.

1569296270
andrewrk
knebulae,

1569296281
nrdmn
there's still a lot to do. Some essential ueif protocols haven't been implemented yet and I'll probably move things around. The uefi spec assumes a flat namespace for structs and types and that makes it a bit difficult to put them in a meaningful hierarchy

1569296350
andrewrk
it's ok to mirror that flat namespace

1569296361
knebulae
@nrdmn: very cool!

1569296665
knebulae
My ultimate thought on UEFI was that you only need so much of it to get going; namely the memory map and the output ability.  The filesystem access helps too.  But at the end of the day, it is much, much, much easier to wrap the C libraries (either gnu-efi or TianoCore).  I mean the spec is around 3k pages.  It was a fool's errand-- at least for me.

1569296768
nrdmn
there's so much fun stuff in pre-OS land

1569296782
nrdmn
I've only ever used exitBootServices() once

1569296800
knebulae
@nrdmn: I spent 20 years there.  That time is over for me, lol.

1569299506
hspak
How is this example valid zig?

1569299672
andrewrk
hspak, array_init returns a "value" and so the result is copied directly to some_arr in main stack

1569299715
andrewrk
after

1569300187
hspak
andrewrk: cool, so as long as it's something stack allocated, I can safely return local vars from functions?

1569300427
andrewrk
you can always return a value from a function

1569300438
andrewrk
it's references you have to be careful of

1569334712
ceymard
andrewrk: how far do you think we're from seeing auto-complete in IDEs for zig ?

1569334732
andrewrk
a year

1569334733
ceymard
1 year ? more ?

1569334744
ceymard
so 2 years :)

1569334768
andrewrk
I think we'll start seeing progress (early prototypes) within 4 months

1569334776
ceymard
that early ?

1569334784
andrewrk
because the async/await rewrite is done, so progress can resume on self-hosted

1569334793
ceymard
oh, that's good news

1569334806
ceymard
so am I losing my time writing a temporary autocomplete shim in js ?

1569334818
andrewrk
depends on what your goal is :)

1569334826
ceymard
exploring zig code

1569334839
ceymard
having a list of suggestion popup whenever I enter '.'

1569334843
andrewrk
if that's your goal then you're probably not wasting your time

1569334852
ceymard
ok

1569334875
ceymard
my goal is to plug this into vs code

1569334882
ceymard
to have a nicer editing experience

1569334888
ceymard
I'm not very far along

1569334904
andrewrk
does it let you use wasm? you could use the parser from std if it does

1569334918
ceymard
I don't know

1569334946
andrewrk
it probably does

1569334963
gonz_
It doesn't really mandate anything; you can outsource to a binary if you want.

1569334974
ceymard
ok

1569334982
ceymard
hm

1569334986
ceymard
I'm a little sad now

1569334988
gonz_
NPM also has no restrictions on what you can deliver, so you can ship a prebuilt binary with an extension if you want.

1569334996
mq32
ceymard, would be cool if you expand the already existing zig support for VS Code

1569335004
ceymard
I had done this nice little forgiving parser in JS

1569335010
ceymard
I was almost there

1569335018
ceymard
:'(

1569335032
andrewrk
ceymard, if it's forgiving it sounds like it has a feature that std.zig.parser doesn't have

1569335035
andrewrk
(yet)

1569335057
ceymard
well you still need to have balanced parens and the like

1569335069
ceymard
but it doesn't care much about the rest, as long as it recognizes declarations

1569335081
ceymard
(it's not regexp based)

1569335092
ceymard
(in case your wondering, maybe in horror)

1569335107
ceymard
alright

1569335114
ceymard
I'm having fun, so I'll keep doing it for now

1569335212
ceymard
well anyway if I manage to get something funky going in a week or so it might still be worthwhile for the year to come

1569335449
FireFox317


1569335531
ceymard
firefox317: in part, but no autocomplete :(

1569348758
nrdmn
andrewrk: now on real hardware:

1569348845
andrewrk
nrdmn, seems like an improvement to me, ship it

1569349604
Tetralux_
How do you get to that UI?

1569349613
Tetralux_
Is that part of UEFI and you're just changing the font?

1569349793
nrdmn
Tetralux_: basically yes

1569349871
nrdmn
I'm reading the default font, redraw all characters with freetype and replace the default font with the one I just generated, then exit and return back to the menu

1569349947
andrewrk
hahahha that is so much better than what I thought you were doing before

1569349960
FireFox317
ðŸ¤® comic sans, great work tho nrdmn!

1569349992
nrdmn
actually it's comic neue

1569350029
FireFox317
Oh hahah, close. Never thought this would be possible tho

1569350046
nrdmn
neither did I

1569350114
nrdmn
there are functions to change various UI parts, see chapters 33, 34 and 35 of the spec (as of version 2.8). Or more specifically, I'm using the EFI_HII_DATABASE_PROTOCOL functions

1569350220
Tetralux_
nrdmn: Oh, so your program has side effects (changing the font) and then you return, which goes back to the menu?

1569350234
Tetralux_
Or do you have to issue a "return to menu" command, kinda-thing?

1569350234
nrdmn
yes

1569350247
Tetralux
Hmmm.

1569350250
Tetralux
Interesting.

1569350257
nrdmn
the default (on most firmwares) is to return back to the boot manager

1569350266
Tetralux
.. when you return from main?

1569350271
nrdmn
yes

1569350289
Tetralux
And you changed the font with a "syscall" essentially

1569350308
Tetralux
Or is it more a UEFI library that you just call into.

1569350348
andrewrk
nrdmn, ppl on twitter are requesting meme gifs in BIOS next

1569350403
nrdmn
It's kind of a syscall. UEFI provides a struct of function pointers to my main function. These function pointers are used to access UEFI services such as access to devices (including touch screens and network) and loading other operating systems and UEFI drivers.

1569350476
nrdmn
I wrote some wrapper structs in Zig so I can use Zig types instead of C's void pointers

1569350542
nrdmn
andrewrk: Chapter 33.3.10, "EFI_HII_ANIMATION_PACKAGE" ðŸ¤”

1569350703
nrdmn
Tetralux: an UEFI OS is supposed to 'exit boot services' when it is done initializing, i.e. tell the firmware it is done using UEFI facilities. The firmware then removes all UEFI drivers from memory and the UEFI app is completely on its own, has full control over the hardware, and can't return any more.

1569350734
nrdmn
So normally you can't use these features in an operating system, but technically you don't have to tell the firmware you're done

1569350944
Tetralux
So, if you're making your own OS, you just never return, but if your more of a UEFI app of some kind, you can return, and it'll just return to UEFI loader.

1569350980
knebulae
It's essentially what the BIOS utilities use to make their new & improved UEFI UIs.

1569350987
nrdmn
Tetralux: correct

1569350993
knebulae
s/utilities/companies

1569351024
Tetralux
Except that, even if you are an OS, you can choose to exitBootServices and cause the UEFI to leave you to it.

1569351030
Tetralux
Or not.

1569351032
Tetralux
In which case

1569351038
Tetralux
You retain access to all the UEFI stuff.

1569351093
knebulae
@Tetralux: you actually don't lose framebuffer access through the UEFI GOP.  And you are required to ExitBootServices to do anything serious.  There's a catch-22 that is escaping my mind at the moment.

1569351134
knebulae
@Tetralux: I should have clarified that on emulators and the limited hardware I've tested on.

1569351149
Tetralux
I see.

1569351201
Tetralux
So the expected pattern is: run main from UEFI, "initialize yourself", exitBootServices, actually finish loading your OS. (like firing off the login screen.)

1569351207
Tetralux
And then you're on your own

1569351214
nrdmn
knebulae: using multiple cores while in pre-os mode is undefined behaviour IIRC

1569351215
Tetralux
But still have access to the screen via UEFI

1569351228
nrdmn
yes

1569351266
knebulae
UEFI will exclude its code & data from the memory map

1569351278
knebulae
So if you follow it, you won't step on UEFI

1569351344
nrdmn
actually you can use a few UEFI services after exitBootServices, see chapter 8 (runtime services). For example, access to the clock, EFI variables (anything you can access through efi-readvar and efibootmgr), and rebooting the system

1569351615
knebulae
I was just reviewing some code to see where the catch-22 for calling ExitBootServices was, because I remember wanting to stay there forever.  I'm fairly certain that you need to ExitBootServices in order to enable paging, but there may be a way around that.

1569351771
nrdmn
paging is enabled and all memory is identity mapped

1569351795
Tetralux
Paging>

1569351796
Tetralux
?

1569351797
nrdmn
I can imagine UEFI doesn't like it when you remap the memory

1569351848
nrdmn
Tetralux: a mapping between 'virtual memory', i.e. the addresses that normal applications see, and the addresses where the bytes actually go

1569351873
nrdmn
this mapping supports setting permissions, e.g. some parts may be writable but not executable or vice-versa

1569351877
Tetralux
Okay - so basically just a synonym for 'virtual memory.'

1569351880
nrdmn
ye

1569351882
nrdmn
ss

1569351884
Tetralux
Gotcha.

1569351885
Tetralux
I wonder if it's possible to never exit boot services and then on demand, write some data to disk and then return to UEFI and have it immmediately fire up your program again.

1569351895
Tetralux
So that you could have a "rapid-reboot" option./

1569351898
Tetralux
(in your OS.)

1569351926
Tetralux
Which basically just returns to UEFI, asking it to immediately try to run your UEFI app agian.

1569352327
andrewrk
anyone want to help out with release notes in a specific way? come up with a nice code example to demo

1569352340
andrewrk
(1) else => |e|

1569352346
andrewrk
(2) error.A, error.B => |e|

1569352370
andrewrk
i'll move on to other stuff and come back to this tomorrow in case anyone takes me up on it

1569352406
knebulae
@nrdmn: I wanted to specify that by "enabling paging" I meant

1569353759
mikdusan
note to self: when upgrading system compiler, nuke all zig-cache directories from worktree (especially for tests)

1569353806
andrewrk
mikdusan, why's that? it shouldn't matter

1569353828
andrewrk
it makes sense to save space

1569353847
andrewrk
I mean, that's a good idea to save space, but have you discovered a cache issue?

1569353892
mikdusan
not hashing issue, sys_include_dir on macOS points to product of `cc -E -Wp,-v -xc /dev/null` which in turn is related to the current xcode installation path.

1569353912
mikdusan
upgrading xcode changes that path if you have multiple xcode's installed

1569353918
andrewrk
ah

1569353930
mikdusan
example: sys_include_dir=/Applications/Xcode_11.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include

1569353995
andrewrk
linux users are isolated from that issue since zig brings its own libc headers for glibc & musl

1569353997
mikdusan
so this can be spooky behavior because i ran tests. ALL passed. then I upgraded from Xcode_11.beta to Xcode_11.0 and

1569354045
mikdusan
in that case it gave me a nice "can't find assert.h" error. but the worst part? if i didn't delete the old install, then my zig-caches would still be using the beta's include tree

1569354046
andrewrk
I hope the license of apple's libc headers is MIT compatible

1569354120
andrewrk
that is a bit spooky. the root question is: when is it the correct time to re-detect the system libc include path?

1569354144
andrewrk
if we ship darwin libc headers this question goes away

1569354217
fengb
Most of it is Apple licensed

1569354237
mikdusan
apple headers like `assert.h` have 4-clause BSD. others like `sys/_endian.h` have some opensource apple license. i suspect there are more license clauses too

1569354275
andrewrk
that sounds compatible. I'm guessing it has to be since proprietary software is allowed to link against libc without the license infecting

1569354286
fengb
There was at least one that's "ALL RIGHTS RESERVED" and really dumb

1569354293
fengb
So it's not standardized at all

1569354308
andrewrk
it's probably a mistake

1569354331
fengb


1569354364
andrewrk
ugh. but that's simple enough to clean-room implement

1569354427
fengb
I think most of the ones I checked is APSL

1569354450
andrewrk
probably this would even work as a drop-in replacement:

1569354552
andrewrk
APSL looks compatible with MIT

1569354558
andrewrk
I mean I think we can ship APSL code

1569354731
fengb
Yeah looks like

1569354842
fengb
'Google claimed that the header files were clean of any copyright-able work, reducing them to non-copyrightable "facts", and thus not covered by the GPL. This interpretation was challenged by Raymond Nimmer, a law professor at the University of Houston Law Center.'

1569354861
fengb
Type definitions are facts right? We can win in court ðŸ™ƒ

1569355005
andrewrk
the real court is if debian accepts your package without patches

1569355024
andrewrk
that's who you gotta convince

1569355562
mikdusan
how about something like: `zig libc-rebind` which bumps a serialnum key in ~/Library/Application Support/zig; then zig-cache logic can punt and recalc libc associated settings if serial is diff

1569355632
mikdusan
meh. probably just easier to nuke zig-cache

1569355852
andrewrk
it's just zig-cache/native_libc.txt

1569356148
akhetopnu
hi, i've got a question about returning pointers to stack allocated structures. When I have a function like fn create() &Object { return &Object { .value = 5 }; } then zig doesn't complain and everything works fine, however if I try to do that in C i get a warning/error -Wreturn-local-addr. Is this a bad thing to do or is it just an arbitrary default limitation imposed by gcc/clang

1569356240
Tetralux
You should note return a ptr to a value on the stack.

1569356264
andrewrk
akhetopnu, that should be a compile error

1569356267
akhetopnu
so the fact that zig allows to do it should be treated as a compiler error?

1569356271
akhetopnu
i see

1569356273
Tetralux
should not*

1569356282
Tetralux
If you find yourself wanting to do that, either allocate it somewhere or return a value instead.

1569356293
andrewrk
it might be making a global const, in which case it's ok because it's a static reference, but then it should be a compile error because the pointer is mutable

1569356341
akhetopnu
i mean, if I return a pointer to a locally stack-allocated struct then after the function returns that value is no longer available, but for some reason i can log that out to console

1569356351
akhetopnu
i'm guessing it's some sort of inlining/optimization

1569356376
Tetralux
It's because the variable has not been overwritten yet.

1569356382
akhetopnu
i used that create() function inside main, so it shouldn't be global

1569356384
Tetralux
It will be when you call another function.

1569356409
akhetopnu
hm, you mean the same physical address on the stack was not overwritten yet?

1569356426
Tetralux
That's right.

1569356455
andrewrk
akhetopnu, what you're observing is a lack of runtime safety for this particular flavor of undefined behavior ("use-after-free")

1569356471
andrewrk
this is one of the things I plan to investigate adding safety for in the next release cycle

1569356500
akhetopnu
i see, good to know

1569358489
mikdusan
calling struct methods `foo.doit()` works when `doit` is a FnProto. but it doesn't work (not found) when `doit` is a VarDecl of type function

1569358561
andrewrk
mikdusan, I think I agree with you that should work

1569358586
andrewrk
can you do a proposal though? I want to run it by josh

1569358616
mikdusan
yup

1569358677
andrewrk
mikdusan, never mind - I have proof that it should work

1569358687
mikdusan
open issue?

1569358688
andrewrk
which is that

1569358731
andrewrk
it will necessarily get solved with the implementation of #1717. but feel free to file another issue (or PR) if you have interest in solving it in the meantime

1569358809
mikdusan
ah yes i remember that one now.

1569359379
mikdusan
oh. my. gawd. I can use this to split out the struct methods of a large struct into other files grouped by functionality or whatever. this is unexpectedly nice.

1569359459
andrewrk
ah yes

1569359471
fengb
I have a big refactor of my decode table waiting on this :)

1569359539
andrewrk
I think zig has comptime closures

1569359541
andrewrk
I've never tested it

1569359583
companion_cube
`const f = if (â€¦) fn(a:i32) â€¦ else fn(a: i64) â€¦` ðŸ¤”

1569359590
companion_cube
seems like a lot of cool possibilities

1569359592
mikdusan
this works with a comptime fn if that's what you're asking

1569359857
andrewrk
I had to hack around comptime fn call caching:

1569362853
rohlem
andrewrk, that last example code of "comptime closures" is not

1569362962
rohlem
Since, at runtime, it would be a case of accessing a freed stack variable. I would find it counter-intuitive to allow that during comptime but error for detected runtime uses.

1569362991
rohlem
Since, well, if a user does it during comptime and it works, they might use it in runtime, and if there's a yet-undetected usage pattern, that's undetected UB.

1569363103
Tetralux
andrewrk: Wait - that works?

1569363105
rohlem
(And if the code returned the entire struct, made `i` a member variable and gave `c.f`a `*@This` parameter, it would be "the (only) obvious way" that works at both runtime and comptime.

1569363234
rohlem
(note there would be no comptime-cache-spoofing required with a mutable pointer in the parameter list either... at least last time I tried it)

