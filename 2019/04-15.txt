1555290239
wilsonk
is there a way to override a "std" imported definition by a newer defiinition in a locally imported file?  ie. I have a definition that overrides the sleep funcition and just want my new definition to take precedence, but I keep getting an override error

1555290363
wilsonk
I know I could just rename my function but I actually have dozens of these errors and don't want to rename everything!

1555294502
Xe
how do I turn an int64 into a string kind of like the libc function itoa?

1555295009
shritesh
Xe: You can write to a buffer with fmt.bufPrint

1555295278
shritesh
...and for the other way around, it's fmt.parseInt

1555295330
Xe
shritesh: is a buffer some u8 slice?

1555295334
shritesh
Here's an example that might be useful for interfacing with strings and parsing ints across wasm boundary:

1555295407
shritesh
Xe: It's a u8 slice where it can write to.

1555295638
Xe
shritesh: +1 thanks

1555295820
shritesh
That's what the gist does too +1 ;)

1555296480
Xe
shritesh: how would I create a u8 slice of n bytes where n is some dynamically derived value?

1555296506
shritesh
That requires dynamic allocation.

1555296516
shritesh
do you know the upper bound?

1555296528
Xe
say 2048 bytes as the max

1555296615
shritesh
Create a max_len sized array and slice into it using array[0..n]

1555296678
Xe
like this? var arr: [2048]u8;

1555296719
shritesh
Yes. Prolly set it as undefined

1555296844
shritesh
Also, writing a WasmAllocator that uses `mem.grow` and `mem.size` wasm instructions is on my todo list.

1555297442
Xe
shritesh: how do I convert an i32 to a usize?

1555297535
Xe
ah, @intCast(usize, i32val)

1555297537
shritesh
Probably @intCast or @bitCast

1555298474
scientes
Xe, you may, or may now, want to do a @bitCast(u32) first

1555298489
scientes
*may not

1555298550
scientes
or @bitCast(usize depending

1555298580
Xe
scientes: here is the context:

1555298597
scientes
Xe, it is just about twos-complement

1555298608
scientes
what you want to happen with signed numbers

1555298632
Xe
a negative number should never be able to get there

1555298658
scientes
then use @intCast(usize

1555298666
Xe
:+1:

1555300900
wilsonk
scientes: you around?

1555300909
scientes
wilsonk, yeah, why?

1555300946
wilsonk
just wondering if there is a way to use a specific definition in an @imported file over another @imported file?

1555300955
scientes
yes!

1555300962
wilsonk
ie. it is defined twice so I keep getting an error

1555300979
scientes
just use two two @cImport()s

1555300999
scientes
to keep the conflicting headers separate

1555301016
wilsonk
so they will namespace uniquely?

1555301018
scientes
that's something c cant do

1555301026
scientes
see the const c

1555301029
scientes
c is just a variable

1555301043
scientes
but in zig variables are namespaces

1555301131
wilsonk
hmm, but then I would have to access via a unique namespace, yes?  so @import("std/os/time") as time and then time.sleep  and @import("./time") as mytime and then mytime.sleep?

1555301151
scientes
yep

1555301235
wilsonk
ok. I get that but the problem I am having is that I am @importing a file from someone else's library that confilicts with dozens of definitions in std.  So now I would have to go through dozens (maybe over a hundred) calls and namespace all of them? UGH

1555301249
scientes
nono

1555301261
scientes
you don't "import as"

1555301266
scientes
you import to a variable

1555301286
scientes
and they can be nested, like std.debug.assert()

1555301324
scientes
you only have to namespace the new conflicting library

1555301357
scientes
const comeguyslibrary = @cImport({@cInclude("awesomelib.h");})

1555301384
wilsonk
oh, I think I see what you are saying

1555301396
scientes
and that cImport exists seperate from any other, it starts with a clear environment (even absent of libc)

1555301416
wilsonk
right, ok. Let me try that way

1555301418
scientes
it will still have

1555301432
scientes
actually it probably doesn't

1555301646
scientes
home/shawn/git/zig/s.zig:7:23: error: container '.cimport:2:11' has no member called '__X86_64__'

1555301649
scientes
yeah that is probably a bug

1555301653
scientes
cause libraries depend on that

1555301686
scientes
oh i spelled it wrong

1555301693
wilsonk
heh

1555301842
scientes
yeah zig is just using clang now

1555308661
ManDeJan
Can I forward a pack of parameters to another function?

1555308687
ManDeJan
In C++ you have pack expansion, is there something similar in Zig?

1555309161
hryx
ManDeJan: I don't think there is

1555309202
ManDeJan
I think I could make a helper function that has a giant switch case for every length of argument pack

1555309217
ManDeJan
But that is not desirable :P

1555309227
hryx
ManDeJan: search found Josh talking about param expansion here:

1555309279
hryx
although I don't think it's quite what you were describing

1555309519
hryx
ManDeJan: I believe what you want will be solved by the anonymous container proposal:

1555309538
hryx
aka the not tuples proposal

1555310530
ManDeJan
Thanks!

1555310534
ManDeJan
Interesting discussions

1555336943
very-mediocre
this seems like a footgun:

1555336959
very-mediocre
and not in line with the no-shadowing principle of zig

1555338796
shritesh
That looks like expected behavior as structs are namespaces too. OTOH, I wonder if there is no way to access the outer function from the inner namespace.

1555339086
tgschultz
see ralted issue #1836

1555339619
very-mediocre
tgschultz: I think I disagree with the proposed remedy in #1836. shritesh is right that structs have like a namespace aspect

1555339638
very-mediocre
the real problem imho is calling such functions from within the struct using the unqualified name

1555339651
very-mediocre
even in high level languages you would write `this.func()`

1555339660
very-mediocre
rather than the ambiguous `func()`

1555340649
tgschultz
the issue is a bit different in #1836, in that both names are in the same namespace.

1555341047
very-mediocre
yeah you're right, my bad

1555341114
very-mediocre
confused it with something i read in #678 which seems to be the relevant place

1555344234
daurnimator
very-mediocre: similarly...

1555344293
very-mediocre
good catch

1555344480
tgschultz
isn't that the same as #705?

1555344545
daurnimator
very-mediocre: your earlier one seems a copy of

1555344588
daurnimator
tgschultz: yes. though the info in there seems incorrect now.

1555344796
tgschultz
andrewrk: I'm pretty sure this should error because we're evaluating compileError on the result of a runtime expression, but I think it could error with an error indicating that as the problem instead of erroring with the compileError statement... if that makes sense:

1555345486
TheLemonMan
any idea on how to have a function use the C ABI without being marked with `export`?

1555345542
TheLemonMan
and do you have any pointers about C-string <-> slice conversions?

1555345625
scientes
TheLemonMan, its just an array

1555345663
scientes
oh it isn't

1555345697
scientes
TheLemonMan, probably use mem.cpy()

1555346640
daurnimator
TheLemonMan: 'extern'?

1555346716
TheLemonMan
yeah, I mixed up `extern` and `export`... but I just wanted to affect the ABI and not the visibility

1555348325
wilsonk
TheLemonMan: can you just force that with the stdcallcc convention? Is that what you mean?   "stdcallcc fn myfunc() void {}"

1555349001
TheLemonMan
I guess so, the documentation is a bit hand-wavy about what it does

1555349267
daurnimator
oh we only support stdcallcc? what about all the other calling conventions out there?

1555349412
wilsonk
I am not sure if that is the only one supported, but it should be trivial to add the others (I think), as LLVM outputs the specified convention in bitcode.

1555349445
wilsonk
I haven't looked at how Zig is handling things though

1555349724
wilsonk
hmm...looks like there is some commented out code for 'coldcc' and 'nakedcc' conventions, so perhaps ask Andrew? Might be some pragmatic reason that was removed and other conventions aren't supported

1555349922
wilsonk


1555350988
very-mediocre
daurnimator: "your earlier one seems a copy of

1555352347
TheLemonMan
wilsonk, more or less, I guess @export() can be used to hide the function

1555362620
shritesh
andrewrk: I'm taking a stab at #2274. Is it acceptable to introduce a new field (lib_name or wasm_module_name) to ZigFn?

1555362652
andrewrk
yes it is, but don't we already have lib_name?

1555362667
andrewrk
hmm it's in the TldFn

1555362680
shritesh
Yeah, I don't think codegen has access to it

1555362682
andrewrk
that represents the "top level declaration"

1555362714
andrewrk
do what you need to do, and I'll help clean up the branch before we merge

1555362758
shritesh
Thanks. After this we will be in parity with (and IMO have a better semantics than) C and Rust for WASM

1555362838
andrewrk
great

1555365764
shritesh
andrewrk: PR is ready

1555365776
andrewrk
I see it

1555365808
andrewrk
shritesh, did you inspect the LLVM IR with --verbose-llvm-ir to make sure it looks good?

1555365884
shritesh
Yep. `attributes #1 = { nobuiltin nounwind "wasm-import-module"="wasm" }`

1555365909
andrewrk
rgeat

1555365949
andrewrk
looks good, merged!

1555365956
shritesh
Thanks!!!

1555366733
shritesh
Now all three of the WASI environments (wasmtimer, wasmer and lucent?) can run wasi binaries created by Zig out of the box.

1555366738
shritesh
wasmtime*

1555367400
hobomaic
cool!

1555368043
andrewrk
nice work shritesh

1555368197
shritesh
Thank you. Next comes the WasmAllocator

1555368516
andrewrk
I realized yesterday that zig can now be use to make node modules

1555368530
andrewrk
node supports wasm, zig supports wasm, just run your zig build before npm publish

1555368536
shritesh
Yes!!!

1555368753
hryx
dang

1555368778
andrewrk
it's going to be a low-volume week for me as far as commits to zig - I'm writing my talk for next tuesday at philly ETE conference - which will be recorded

1555368814
hryx
awesome!

1555368819
mikdusan
👍

1555368919
shritesh
nice

1555370889
shritesh
Should I not be able to do `const foo = extern fn bar(i32) i32;` at the top level and call `foo(0)` in some other function later?

1555370968
andrewrk
right now function declarations are not expressions, but you can do `extern fn bar(i32) i32; const foo = bar;`

1555371003
andrewrk
actually I think that  `extern fn bar(i32) i32` is an expression that evaluates to a `type` which is the function prototype

1555371012
shritesh
hmm

1555371026
andrewrk
I do think there may be some room for improvement here

1555371041
andrewrk
the meaning of `extern` is overloaded right now

1555371047
hryx
shritesh: here is an old and weird and long proposal I made about func decls as expressions

1555371050
hryx
in case you're curious

1555371064
shritesh
@"llvm.wasm.memory.size.i32"(0) is a gnarly looking function name :D

1555371071
andrewrk
this issue will help:

1555371142
shritesh
alright

1555371149
Xe
shritesh: thank you for making zig's webassembly support better, you are actively making it easier for me to do amazingly satanic things based on unix first principles

1555371199
shritesh
Xe: My goal is to never have to write JS or C ever again and I'm contributing my part

1555371221
Xe
it's appreciated

1555371225
andrewrk
shritesh, we're going to have to talk about that - we can leave that in for now but it's an accident than you can reference any LLVM builtin with @"" syntax

1555371236
andrewrk
there are ways that could be problematic

1555371285
shritesh
Definitely.

1555371305
shritesh
Xe: ^_^

1555371356
andrewrk
I won't pull the rug out from you though, if I change it I'll make sure your use case is still solved

1555371384
shritesh
we need to make sure nvptx (CUDA) works too.

1555371390
andrewrk
good point

1555371424
Xe
are the LLVM intrinsics absolutely needed to emit a `grow_memory` instruction?

1555371453
andrewrk
I believe so

1555371502
shritesh
Both clang and rustc have builtins to do that

1555371567
andrewrk
Xe, btw the crash you found, is because support for disabling error return traces in debug mode is not implemented, but it's required for wasm

1555371586
andrewrk
we just need to implement a couple of llvm ir things and then it will be fixed

1555371611
shritesh
Ah. So release mode should fix it

1555371627
andrewrk
yeah - though I would use the work "workaround" :)

1555371644
shritesh
Yes. I think I saw rust do something with backtraces. Lemme check

1555371807
andrewrk
shritesh, the problem is in get_safety_crash_err_fn, it assumest the first parameter is the error return trace. we simply have to check if that's disabled and omit that parameter

1555371833
andrewrk
let me see if I can just fix it real quick

1555371858
shritesh
Gotcha. I was looking at how or if rust does backtraces in wasm

1555372123
shritesh
So looks like there's some support it:

1555372141
shritesh
..and

1555372176
andrewrk
I don't think we pass that. the reason error return traces don't work is lack of the return address builtin

1555372203
andrewrk
that's also why the stack traces of GeneralPurposeDebugAllocator wouldn't work on WASI either

1555372215
shritesh
ah

1555372285
andrewrk
but yeah if rust gets stack traces working on web assembly targets, that would be a good clue to see if there could be a way

1555372648
shritesh
So much in the was{m,i} world is in flux and undocumented. I have way too much W3C CG meeting minutes, commit history and github discussion in the last few days lol

1555372657
shritesh
*read way

1555372736
Xe
it's really version 0

