1550720954
diltsman
How do I ignore the return value of memcpy (?[*]u8)

1550721149
daurnimator
diltsman: assign to _

1550723407
shachaf
Hmm, does Zig have some notion of stack frames in an arena, where you can free everything up to a point instead of the whole arena at once?

1550723431
daurnimator
shachaf: fixedbufferallocator ?

1550723609
shachaf
What's the difference between this and ArenaAllocator?

1550723616
shachaf
Neither of them seems to have this, anyway.

1550724435
diltsman
__aeabi_memcpy4 is going to be fun to implement...

1550724475
diltsman
Compiler-RT just has it call memcpy.  Zig optimizes my copy of memcpy (local function named my_memcpy) to a call to __aeabi_memcpy4.

1550725024
daurnimator
diltsman: huh..... I'm interested in hearing the solution :)

1550725122
diltsman
daurnimator: My current best idea is to write it in in-line assembly.  Not ideal, but the optimizer is going to cause me problems.  Anything that could generate decent code will be rewritten as a call to __eabi_memcpy4.

1550725159
daurnimator
diltsman: and what stops it from optimizing your inline assembly? :)

1550725189
diltsman
I don't believe that LLVM IR moves most assembly into regular IR...

1550725216
diltsman
SSE does have equivalents in the IR that it is lowered to, but not all in-line assembly does.

1550725257
daurnimator
counting on the optimizer not being good enough always seems like a risky move

1550725263
diltsman
I know, right?

1550725317
diltsman
I will work on doing in-line assembly.  If LLVM is like GCC, I believe there is a way to annotate an assembly block so that the optimizer will ignore it.

1550725365
daurnimator
diltsman: maybe

1550725386
daurnimator
diltsman: even if LLVM doesn't right now.... along comes a link-time-optimizer....

1550752850
andrewrk
shachaf, std.heap.ArenaAllocator

1550752906
andrewrk
oh, "everything up to a point" missed that

1550762040
andrewrk
diltsman, I think an assembly implementation is perfectly fine - what are the downsides?

1550782259
gamester
I don't understand why emekoi's code doesn't return the same result for each call.

1550782272
gamester
oh I just got it

1550782354
gamester
What is it that makes state a global variable?

1550782468
gamester
no it's a type, bar is the global

1550782488
gamester
idk

1550782518
andrewrk
that's right

1550782539
andrewrk
top level `var` or `const` inside a struct {} are global variables

1550782559
andrewrk
the struct {} just acts as a namespace

1550782651
gamester
okay

1550782717
dec05eba
are braces supposed to be required for if/else body?

1550782821
dec05eba
the error being expected symbol '}' on the line with 'else'

1550782908
dec05eba
i see in parser.cpp on line 1372: // Block <- LBRACE Statement* RBRACE

1550782909
dec05eba
so braces are supposed to be required, right?

1550782976
andrewrk
dec05eba, if expressions are supposed to let you have `if (c) a else b` where c, a, and b are all expressions

1550782984
andrewrk
but variable declaration is a statement not an expression

1550783089
andrewrk
dec05eba, I'm not sure right now what to do about it, let's make a github issue and then forget about it until the 1.0.0 milestone

1550783137
dec05eba
alright

1550783260
dec05eba
oh sorry, i see now that it has been asked before on github. I didn't find it before..

1550783261
dec05eba


1550783304
dec05eba
the search menu when creating a new issue is slightly better than the one when you are not creating a new issue :p

1550783338
andrewrk
ha, good point

1550785954
andrewrk
I'm live streaming creating a general purpose allocator in 8 minutes:

1550792956
gamester
I need to go to sleep, great stream!

1550793298
diltsman
andrewrk: The biggest downside of an assembly implementation is that it is opaque to the optimizer.  Given that it would be behind an ABI primitive, that shouldn't be too big an issue.

1550793359
diltsman
Also means that I have to look at the EABI specification to make sure that the __eabi_memcpy4 and __eabi_memcpy8 are correct, since they wouldn't be directly based on the compiler-RT implementation.

