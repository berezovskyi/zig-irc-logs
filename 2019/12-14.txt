1576300489
pixelherodev
Anyone currently on have a good knowledge of LLVM IR?

1576300530
pixelherodev
I'm also asking in #llvm on both freenode and the official OFTC server but from what I've seen those channels are both Very Quiet™ so I figured I'd ask here too in case anyone was familiar with it

1576306998
pixelherodev
Ah, the sweet smell of functioning optimizations at two in the morning :D

1576307000
pixelherodev
`Microoptimization zero is replacing load of %FirmwareCTX with an alias to %0`

1576308925
pixelherodev
Ah, using memberCount / memberName / field with an iterator from std.process.args to metaprogrammatically check runtime arguments...

1576310739
iocat
hey folks, is there any promise on backward compatibility, maybe on some part of the language today?

1576310761
iocat
(Very interested in learning this lang :)  )

1576311194
pixelherodev
Not

1576311214
pixelherodev
Right now, the language is being improved a lot - but improving the language means existing code needs to be updated

1576311236
pixelherodev
Most of the changes are very minor, but they do add up

1576311248
pixelherodev
There

1576311499
iocat
oh ok thanks for the answer. I felt the language design is very simple, and extensible. Hope it'll be always simple. Will keep looking forward for its development!

1576311724
pixelherodev
iocat, a lot of these changes are actually meant to make the language

1576311784
iocat
cool!

1576319124
pixelherodev
Just got the first working `Hello, world!` compiled using my LLVM backend :D

1576319209
pixelherodev


1576319432
pixelherodev
I mean, I cheated a

1576319435
pixelherodev
But still.

1576348912
pixelherodev
I'm starting to think my focus on this parser has gotten a bit... out of hand :P

1576348964
pixelherodev
This week alone, I plan on: implementing strings, implementing undefined values (though they already work for pointers), using a proper stream for output instead of stderr, removing the register allocator and allocating all variables to the stack and then accessing them from there (and then relying on optimizations to put them back into registers and increase performance), and beginning work on modularizing the parser so that it can actually be used as a

1576348969
pixelherodev
library and I can begin to add in an x86 backend

1576353990
andrewrk
pixelherodev, wow this is really cool!

1576353996
andrewrk
love seeing these screenshots

1576354136
pixelherodev
andrewrk, thanks!

1576354270
pixelherodev
`I actually cleaned it up so that the manual usage of the DragonFruit stack isn't necessary

1576354283
pixelherodev
A simple `a3x.Puts("str");` call works now :)

1576354288
pixelherodev
(a3x = the firmware)

1576354311
pixelherodev
The pointers and stuff are tracked by the a3x structure instead of being passed to main, making its usage a lot more convenient

1576359032
fengb
andrewrk: I started experimenting with generators again

1576359064
fengb
I know you don’t like abusing async like this but it really simplifies callbacks / iterators

1576359097
fengb
(I’m also probably putting this on hold since a real templating engine requires an AST and comptime allocators...)

1576359286
pixelherodev
You could write a comptime allocator.

1576359297
pixelherodev
fengb, just decide on its size at comptime

1576359300
pixelherodev
And make a comptime array

1576359350
fengb
There’s an outstanding issue:

1576359689
pixelherodev
Ah

1576359807
fengb
I guess I could slap together a node object pool for now. That wouldn’t be too bad

1576359813
pixelherodev
"One does not simply call a function pointer." ... Boromir, why?!

1576363162
Snektron
fengb, interestingly i also had a similar idea

1576363186
Snektron
I dont think you need either for comptime parser generator

1576363221
Snektron
My idea was to bind parsed structure to a struct somehow

1576363268
Snektron
For example struct { a: i32, b: i32 } could be parsed with "{a} {b}"

1576363285
Snektron
"10 -20" would be parsed by that

1576363352
Snektron
Was just an idea though, didnt work anything out

1576363375
fengb
I need arbitrary depth to handle for / if instructions

1576363405
Snektron
Yeah i was still thinking about how to handle nested structs

1576363421
Snektron
And arrays

1576363474
Snektron
You could also do a full on parser generator

1576363525
Snektron
You dont need recursion for those too i think

1576363536
Snektron
Though i forgot how LR(1) parsing worked, but thats probably what you'd want to implement

1576363605
fengb
I don’t see how it can be not recursive if I can have infinite embedded for loops

1576363714
Snektron
An LR(1) parser is just a kind statemachine i think

1576363734
Snektron
Maybe it needs a stack though

1576363770
Snektron
LR(1) parser generators are a lot of work though, i didnt even manage to complete my LR(0) one

1576363878
fengb
Oh the parser isn’t my concern. Running the formatter needs arbitrary nodes, which requires some form of allocation

1576363900
fengb
But I can possibly get by with a fixed object pool

1576363927
Snektron
Do you need allocation for formatting though?

1576363949
fengb
Nope, it’s generator based

1576364021
fengb
I think it’s a more scalable approach than the current formatter

1576364045
fengb
But andrewrk has mentioned he doesn’t like abusing async functions for generators

1576365399
bgiannan
is it possible to cast a []const u8 to a []u8 ?

1576365537
fengb
Something like `@intToPtr([*]u8, @ptrToInt(c.ptr))[0..c.len]`

1576367378
Snektron
Now thats what i call undefined behavior 2

1576367529
mq32
bgiannan: doing that sounds a lot like "bad design" and is probably undefined behaviour

1576367682
fengb
Yes but a lot of old C APIs are poorly typed

