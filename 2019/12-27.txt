1577410350
lupine
wow, those zig-cache directories are huge

1577412864
daurnimator
frmdstryr: you closed your PR?

1577412878
frmdstryr
Yeah it's messed up

1577412891
frmdstryr
it's consuming tokens that it's not supposed to

1577412904
frmdstryr
character's not tokens

1577412957
frmdstryr
And the octal format needs removed because thats actually 0-9

1577412968
frmdstryr
not sure who named it octal :)

1577413127
frmdstryr
oh I guess the octal part is fine, but i had it at the wrong spot

1577413165
daurnimator
frmdstryr: should leave a comment saying why :

1577413275
frmdstryr
Is the CTokStateOctal case correct in c_tokenizer?

1577413815
frmdstryr
It thinks a single '0' is an octal

1577413839
fengb
Well thatâ€™s not wrong :P

1577413878
frmdstryr
yeah, i guess it should only set it to the octal format if it's more than one digit

1577414111
frmdstryr
pub const LUA_GLOBALSINDEX = -10002; is converted to -2

1577416646
fengb
What happened to it?

1577417026
daurnimator
removed? I assume because its in

1577417156
fengb
Oh

1577417166
fengb
It'd be helpful if there was a handy link

1577417407
daurnimator
indeed

1577424893
hspak
ooo zig docs got a sidebar now, nice!

1577425538
pixelherodev
Can we have an open issue to list all needed migrations from the latest release?

1577425575
pixelherodev
Assuming I'm not blind, and that no such thing already exists

1577425586
daurnimator
pixelherodev: search by label "breaking"

1577425595
pixelherodev
Right, thanks :P

1577425599
pixelherodev
I simply don't have time to pay attention here that much for the next week or so...

1577427879
leeward
hmm, Helgrind is telling me I have data races, even though the lines in question are protected by std.Mutex.

1577427985
leeward
I guess it's time to make a minimal demonstrator and figure out whose fault it is.

1577435922
mq32


1577446767
jicksaw
anyone else feel that the allocation and initialization of TailQueue is a bit weird?

1577446833
jicksaw
for example, if you want to make a TailQueue on the heap, you cannot call its init() function, leaving its fields undefined

1577446968
jicksaw
to create nodes for it you call createNode with an allocator, so if you wanted to deallocate those later you would have to keep track which allocator you used

1577475637
pixelherodev
mq32, I've read that one, but isn't that really just saying we should use GPUs as CPUs?

1577475878
mq32
pixelherodev: no, it sais programming languages should respekt modern CPU archs

1577476039
kirke67
Hey guys, question -

1577476120
kirke67
Say I define a generic type, fn Vector( comptime T : type, comptime dimensions : usize ),

1577476204
kirke67
Is there a handy way to accept a Vector( T, dimensions ) type, but only this type as a method parameter?

1577476306
kirke67
Couple things I've tried - have the method as a member function, which takes a Self/@This() first parameter, that works but I don't necessarily want to enforce the method behavior within the struct.

1577476356
kirke67
Next, define the method as fn doSomething( comptime T : type, comptime dimensions : usize, vector : Vector( T, dimensions )  ) void {}

1577476457
kirke67
Another thought that I haven't tried, might work, but not sure exactly what to do is define the method as fn doSomething( vector : var ) void {} and then inside the method body do some comptime type inspection to ensure that it's a Vector( T, dimensions ) type

1577479557
kirke67
I think this is a bit tricky because technically Vector is just a fn, its return value is the type and that type is unique for each T, dimensions combination.  What I really want is a way to express "types that were returned by a particular function" as a parameter type.

1577480243
Aransentin
`fn doSomething( comptime T : type, vector : T  )` ?

1577480279
Aransentin
You're allowed to pass anything to it at first glance though, so not exactly beautiful

1577481453
pixelherodev
mq32, yes, but by "modern CPU archs" it explicitly states parallelism

1577481760
mq32
i think the point is more to use something like SSA instead of enforced "sequentialism"

1577490871
kirke67
pixelherodev - yes that does work, and that's the format that's used for the std methods - I suppose it's good enough for me :)  .. It would be super nice though to have built-in type safety for generic types and the easy syntax of fn doSomething( vector : Vector ) void {} and Vector would represent any Vector( T, dim ).

