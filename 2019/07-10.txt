1562716959
Tetralux
Oh - if you're returning ?[]u8, you can just do `else |err| return null;` for example.

1562716993
via
still, even if i make the return type !void, i get: error: expected optional type, found '@typeOf(std.fmt.bufPrint).ReturnType.ErrorSet![]u8'

1562716996
via
if (std.fmt.bufPrint(buf[0..], "rpm: {}\n", c_tfi.config.decoder.rpm)) |slice| {

1562717040
Tetralux
Yeah I get that too when I try to do it here... but the example I showed you from the stdlib works fine.

1562717050
Tetralux
Maybe I'm just blind, but I'm not seeing what's different there xD

1562717072
via
well, the else is handled in your example

1562717127
Tetralux
If that was the problem I'd expect it to say "error not handled" etc.

1562717178
Tetralux
That smells like a bug to me.

1562717191
via
if i add else |err} { return; } it works fine

1562717263
Tetralux
Hmmm.

1562717273
Tetralux
Maybe. I guess that's just a bad error message then.

1562717309
Tetralux
But yeah - if you don't wanna handle the error in the fn, normally you'd use `try std.fmt.bufPrint(...)` or catch unreachable.

1562717330
Tetralux
(.. though of course, that's asserting that it shouldn't ever fail.)

1562717351
Tetralux
(.. which if it's hacky code, or you're first pass at writing the code anyway..) :)

1562717407
Tetralux
Though you don't have to, but I'd suggest opening an issue about that error message.

1562717423
Tetralux
I know that'd trip me up.

1562717467
Tetralux
You can also do `else |_|` to mark that you don't care about the error, as well, by the way - rather than naming it anything.

1562717585
via
so i made the function return type !void and now have const slice = try std.fmt.bufPrint(buf[0..], "rpm: {}\n", c_tfi.config.decoder.rpm);

1562717608
via
but in my toplevel (c, returning c_int) function, try myfunc() catch return 0; errors

1562717637
Tetralux
'try' means "if this errors, return it from this fn"

1562717649
Tetralux
You don't use it as 'try ... catch ...'

1562717662
Tetralux
It'd just be myfunc() catch return 0.

1562717666
via
ah, so erroneous try. catch works fine

1562717670
via
okay, thank you, sorry for dumb questions

1562717675
Tetralux
All good ;p

1562717706
Tetralux
catch means "if this errors, do this instead; if not, just unwrap the success value"

1562717727
via
yep

1562717743
Tetralux
whereas try is "if this errors, return the error; if not unwrap the success value."

1562717773
Tetralux
i.e: try x() == x() catch |err| return err

1562717800
via
makes sense

1562717809
Tetralux
Marvellousness :)

1562718492
via
fmt combined with the slice/buffered streams in io is awesome -- compared to my c version which uses repeated sprintf's and hopeful/careful management of a pointer

1562720785
diltsman
On head, how do I get my build.zig to build release mode?

1562720933
diltsman
Huh...help seems to indicate --release-fast while -Drelease-fast appears to work.

1562720946
Tetralux
I believe that's right. -Drelease-fast etc.

1562720953
Tetralux
The help should be more clear if that's the case though.

1562721215
Tetralux
That does seem a little inconsistent.

1562721465
diltsman
I know that this isn't Zig, but any idea how to get rid of lld: error: no memory region specified for section '.ARM.exidx'?

1562721482
diltsman
I have this in my .ld file:     .ARM :

1562721483
diltsman
{

1562721483
diltsman
. = ALIGN(4);

1562721484
diltsman
*(.ARM.exidx);

1562721484
diltsman
}>flash0

1562721740
diltsman
If I do "zig.exe build", then it works.  "zig.exe build -Drelease-fast" fails.

1562721765
diltsman
Do I have to do anything in my build.zig to point release and debug builds to the same linker script?

1562725516
andrewrk
diltsman, do you have reason to believe they're getting different linker scripts?

1562725548
andrewrk
you can pass --verbose to `zig build` to see the args it's passing

1562725941
diltsman
PS Z:\Zig\SAM3X8E> Z:\Zig\zig-windows-x86_64-0.4.0+ae2345b7\zig.exe build --verbose

1562725941
diltsman
cp Z:\Zig\SAM3X8E\zig-cache\o\9juUm81eIZNrHpCKw0-BVTGGARYltPNJoHEQ3bHMZ6iiHoyJX7LS1Oj90vIgYlRl\SAM3X8E Z:\Zig\SAM3X8E\zig-cache\bin\SAM3X8E

1562725942
diltsman
PS Z:\Zig\SAM3X8E>

1562726044
diltsman
I deleted zig-cache first.

1562726203
diltsman
-Drelease-fast: Z:\Zig\zig-windows-x86_64-0.4.0+ae2345b7\zig.exe build-exe Z:\Zig\SAM3X8E\test.zig --release-fast --cache-dir Z:\Zig\SAM3X8E\zig-cache --name SAM3X8E -target armv7m-freestanding-eabi --linker-script Z:\Zig\SAM3X8E\build.ld --cache on

1562726245
andrewrk
yeah so that's getting the linker script

1562726270
diltsman
No flag: Z:\Zig\zig-windows-x86_64-0.4.0+ae2345b7\zig.exe build-exe Z:\Zig\SAM3X8E\test.zig --cache-dir Z:\Zig\SAM3X8E\zig-cache --name SAM3X8E -target armv7m-freestanding-eabi --linker-script Z:\Zig\SAM3X8E\build.ld --cache on

1562726299
diltsman
The only difference between the two is --release-fast

1562726315
andrewrk
that's expected

1562726325
andrewrk
so the differences you are observing must be due to optimizations

1562726342
diltsman
If I comment out the section where I place .ARM.exidx then the debug one fails with the same error.

1562726519
diltsman
Time to start looking at objdump and readelf.

1562726553
mikdusan
try `.ARM.exidx*`

1562726646
diltsman
That fixed it.  What is the reason?

1562726666
mikdusan
honestly gon't know. it was just some google-fu

1562726702
diltsman
Thanks.

1562726704
andrewrk
might be worth a bug report to LLD

1562726861
diltsman
I need to look into exactly what the .o files contain.  It is possible that they are doing something slightly different that lld then correctly pukes on.

1562727088
daurnimator
andrewrk: could you have a look into fixing #2850 ?

1562727749
andrewrk
daurnimator, yes

1562752646
DutchGhost
Is it bad to get a segfault trough a ptrcast at comptime?

1562753352
samtebbs
DutchGhost: Code example?

1562753510
DutchGhost


1562753753
DutchGhost
Aaaanddd I crashed llvm

1562753754
DutchGhost
lol

1562754447
samtebbs
lel

1562754449
samtebbs
issue time

1562754511
DutchGhost
yeah

1562763541
fubd
comptime question. how would I make a "registry" of types? i.e., I want to define a Foo struct, and call "registerType(Foo)" at compile time, and have at compile time an array of all the types

1562763643
fubd
this doesn't work:

1562763673
scientes
how do i cast bool to u8?

1562763678
scientes
do i have to use a comparison?

1562763688
scientes
for u8(bool)

1562763691
scientes
/home/shawn/git/zig-simd/build/y.zig:4:10: error: expected type 'u8', found 'bool'

1562763700
scientes
and with @bitCast return @bitCast(u8, ((v == x) == @Vector(4, bool)([4]bool{ false, false,  true, false})).all);

1562763705
scientes
error: destination type 'u8' has 8 bits but source type 'bool' has 1 bits

1562763719
scientes
so i have to use a comparison to cast from bool?

1562763740
scientes
that seems a bit verbose.....

1562763761
scientes
oh

1562763765
scientes
@bootToInt()

1562763768
scientes
*boolToInt

1562763935
mq32
has anyone started an imaging library for Zig already?

1562763945
mq32
so: loading, manipulating and saving image files?

1562764108
scientes
I think tgschultz has a libpng library

1562764130
scientes
mq32, you can always use C

1562764180
mq32
scientes, this question was more about: "is it worth to start writing a general purpose imaging library for zig?"

1562764190
mq32
i could use some comptime image loading stuff

1562764205
scientes
if it is fun for you, yes

1562764231
scientes
the language has stabilized a lot, but there still will probably be some changes you will have to adapt your work to

1562764252
mq32
yeah, i'm fully aware of that

1562764291
mq32
but i am kinda desperatly searching for a better way to build my embedded projects than having a cluster of small, very different programs that prepare resources for me

1562764304
scientes
well yeah comptime is great

1562764310
mq32
i have like, 10 precompilers for different resources that just prepare binaries

1562764323
mq32
and zig allows to do that

1562764327
mq32
even just

1562764328
scientes
and it works now

1562764332
mq32
const my_blob = @embedFile("is_wow");

1562764389
mq32
and if I do the image processing library right, i can do stuff like this:

1562764429
mq32
const background_texture = Image.load(@embedFile("my_source.png").palettize(16);

1562764443
mq32
which would create a comptime palettized image :)

1562765613
fubd
my second failed attempt at a comptime type regsitry:

1562765758
scientes
mq32, you mean a bitmap?

1562765768
scientes
palettized bitmap

1562765777
scientes
or in that case a 16-bit bitmap

1562765781
scientes
unpalettized

1562765814
scientes
cause if you are using a pallet you probably should have the ability to specify the pallet

1562765826
mq32
scientes, yeah, bitmap

1562765875
mq32
in my primary use case i don't have shared palettes, but this is a thing

1562765904
mq32
probably i would start coding a bit, then writing a specification of what i want on features and then start the library designâ€¦

1562765933
scientes
also huffman code stuff for JPEGs

1562765938
mq32
oh, yeah

1562765951
daurnimator
and deflate for PNG

1562765953
scientes
mozilla made a good library for that

1562765973
scientes
to losslessly optimize JPEG huffman codes

1562766610
scientes
how do i know if a type is const in the compiler?

1562766986
samtebbs
fubd: It's probably because your registery is `var`

1562767056
fubd
samtebbs: if it's const, I get an error because I'm trying to assign to it

1562768557
samtebbs
fubd: Have you tried using an ArrayList to store the types?

1562768622
mq32
samtebbs: wasn't there an issue about "making stuff comptime mutable, but runtime immutable"?

1562768784
samtebbs
mq32: Perhaps, I haven't seen it. That would be cool

1562768840
scientes
how do i know if the target of a pointer is comptime?

1562769110
DutchGhost
what do you think of a module-global allocator?

1562769508
fengb
Only if it's replaceable

1562769549
DutchGhost
`const s = @import("module.zig").init_module(&allocator.allocator);`

1562769552
mq32
what would "module-global allocator" mean in this context?

1562769582
desperek
hi, how can i link to a library on windows? all i get is "lld: error: undefined symbol: SDL_Init" so far :/

1562769595
DutchGhost
This is module.zig:

1562769626
DutchGhost
this is main.zig:

1562769649
DutchGhost
see how the `mod_alloc` is replacable, but yet global to the module

1562769668
fengb
Looks okay but thread problems >_>

1562769679
DutchGhost
why thread problems?

1562769695
fengb
Swapping out halfway through

1562769713
DutchGhost
Not if the collections take in the allocator

1562769719
fengb
Usually in cases like this, I'd prefer using a context struct

1562769765
fengb
Example: two thread try to use different arena allocators. This is global so one of them just swapped allocators underneath the entire program

1562769778
DutchGhost
if any struct that needs an allocator copies the module's global allocator (its just a ptr, so copy is cheap), then it doesnt matter if you change the allocator halfway trough

1562769799
DutchGhost
except top level the allocator must still be in mem ofc :3

1562769850
DutchGhost
which is why still every struct and function using allocation should have its own version of the global alloc ptr

1562769854
DutchGhost
it just copies when created

1562769876
DutchGhost
then you dont have this "ohh but someone swapped underneath me"

1562769926
fengb
Uhhh allocator pointers are the same reference. You currently can't copy allocators

1562769944
fengb
tgschultz has a branch that changes that

1562769968
DutchGhost
notice the mod_alloc is a `*std.mem.Allocator`

1562769989
fengb
Oh I see

1562770054
DutchGhost
I mean it kinda 'solves' the thing of passing allocators to everything, if you wrap it like this?

1562770084
fengb
Honestly, I don't think passing allocators should be solved

1562770111
scientes
ugggh, i really find it annoying that i have to wrap values into pointers to the stack in the compiler

1562770120
DutchGhost
no but it's annoying when you continuously have to pass in the same allocator to everything

1562770130
scientes
oh there are some helpers to that

1562770152
fengb
Either there's a top level entrypoint, in which case you can copy the allocator there. Or there's not an entrypoint, in which case it's better for consuming libraries to pass in allocators

1562770202
mq32
DutchGhost: Last week andrew showed us @import("root") which imports is a reference to your root level file. so you could potentially do `@import("root").allocator`

1562770238
fengb
Like in your code, I can't just put the vector in an arena easily.

1562770269
DutchGhost
but then a module has to assume the top-level attribute is called `allocator`, @mq

1562770288
mq32
yes, that's correct ;)

1562770310
DutchGhost
and so what if it thinks its called `alloc`?

1562770315
mq32
but as fengb said: if you write a library, don't make global stuff and if you write a program, it's a safe assumption

1562770319
DutchGhost
and another module assumes its called `allocator`?

1562770438
DutchGhost
you could @fengb, just set the mod's allocator to an arena allocator, and make a new Vec

1562770443
tgschultz
that's why we pass allocators. the alternative is a default global allocator that everything calls on and then you have all the same problems other languages have because of that

1562771396
desperek
"lld: error: could not open SDL2: is a directory" duh

1562771557
desperek


1562771597
desperek
how do i link it if it doesnt work that way?

1562771670
desperek
oh ok it works when i add .lib, nvm

1562771676
desperek
why does it work like that though?

1562771899
mq32
desperek, i assume because windows usually links with file name whereas unixoids link with "library name"

1562771915
desperek
oh well

1562771978
desperek
mq32, does it link statically with the linkSystemLibrary?

1562771978
mq32
i really have to do some more stuff with zig just for the sake of learning the language... :(

1562771999
mq32
dunno, i'm just into the language theory right now, haven't done much projects with zig yet

1562772058
desperek
i see

1562772059
desperek
thanks

1562772218
fengb
I remember loving everything I read about Rust... then I used it >_>

1562772233
bheads
I have been thinking lately that signed integer types should be prefixed with s and not i.

1562772259
DutchGhost
why?

1562772262
mq32
fengb, yeah, i made that mistake too ^^

1562772262
bheads
we have uXX for unsigned  so   sXX for signed makes more sense

1562772276
mq32
i noticed that my small single-file-services take up 600 MB of storage in the build cache

1562772279
mq32
O.o

1562772280
bheads
i32 is a C holder over

1562772292
fengb
It's also in LLVM and Rust

1562772307
very-mediocre
integers are expected to be able to be negative

1562772308
bheads
was teaching someone new to programing

1562772317
very-mediocre
unsigned integers are a specialized integer

1562772318
DutchGhost
whats wrong with Rust fengb?

1562772320
mq32
bheads, i think i32 is more clear as it is more widespread

1562772329
bheads
it just added an extra layer

1562772336
very-mediocre
i32 makes more sense, it's literally just an integer

1562772345
mikdusan
s32 looks like 4-byte utf

1562772349
fengb
DutchGhost: nothing

1562772370
bheads
it was just a though it terms of teaching

1562772376
DutchGhost
overhead? mmhh

1562772395
desperek
oh yeah i feel very similar i think fengb

1562772405
fengb
There's 3 different string types, macros for error handling, result types, borrow checker, etc.

1562772410
desperek
although i know a person who likes rust

1562772416
DutchGhost
macro's for error handling? whoa

1562772424
fengb
try is a macro

1562772427
mq32
there's a lot of macro stuff going on

1562772428
DutchGhost
we had `try!`

1562772431
DutchGhost
now its `?`

1562772462
mq32
the main thing Rust had for me was this (already) huge library

1562772468
fengb
I think Rust is great to replace C++. But I'm not a C++ guy for a reason :P

1562772468
desperek
i feel like i would have to read the whole rust book to get any grasp of it

1562772473
DutchGhost
there's multiple string types, altough you only use `String` and `&str` regularly

1562772480
fengb
Yeah it's just conceptually big

1562772499
bheads
D went crazy with the string types too

1562772508
bheads
string  wstring  dstring  char wchar dchar

1562772512
fengb
Again, I'm not saying Rust isn't good. I just couldn't get into it

1562772524
DutchGhost
and it makes sense, `String` == `Vec<u8>`, while `&str` == `&[u8]`. Its just not that hard when you see it like that

1562772536
DutchGhost
one is owned, the other is a view into an owned thing

1562772539
very-mediocre
imho the biggest annoyance of Rust is lifetime annotations

1562772548
mq32
yeah, but then you don't need two types, just use Vec<u8>

1562772560
DutchGhost
No. Passing a slice is cheaper

1562772600
mq32
DutchGhost, i meant "String" vs. "Vec<u8>"

1562772607
fengb
Anyway... I stuck with zig because I could basically dive right in while fixing a lot of my problems with C

1562772619
DutchGhost
`Vec<u8>` doesnt provide utf-8 safety

1562772642
mq32
yeah, but really? substring doesn't do, either ^^

1562772652
DutchGhost
substring?

1562772657
DutchGhost
whats substring?

1562772660
mq32
why have substring if you do it on code units (string slicing)

1562772680
DutchGhost
what do you mean by substring?

1562772686
DutchGhost
the `&str` thing?

1562772686
mq32
and if you accidentally index a half code point, everything explodes

1562772701
DutchGhost
You cant index half into a code point

1562772707
mq32
you can

1562772710
mq32
but it will panic

1562772724
andrewrk
the space for rust & zig to exist is pretty clear: zig gains simplicity in exchange for moving memory safety to be a runtime concern

1562772729
mq32
as String does code unit indexing, not code point indexing

1562772749
andrewrk
zig's release-safe build mode is slower than rust's release mode

1562772778
mq32
andrewrk, yeah, i think so too. Both languages have their purpose and their predecessors

1562772831
companion_cube
I'd love Zig to be standardized and become part of big compiler distributions when it reaches 1.0, too

1562772834
fengb
Just a random aside: what do game devs think of Zig or Rust?

1562772836
companion_cube
something rust will have more trouble doing

1562772836
andrewrk
zig also have finer grained safety; if you're writing a lot of unsafe code, or code that has a mix of safe and unsafe, I think zig is more safe than rust (in which you would have to use `unsafe` blocks)

1562772884
DutchGhost
And I think that having a dedicated String type is just easier to get stuff done when working with strings. When I use strings, I dont want to go into this 'but its a Vec of bytes' thing and like push raw bytes or whatever

1562772920
andrewrk
DutchGhost, what are you working on that needs a decoded string?

1562772921
very-mediocre
DutchGhost: you can always make one in userland

1562772933
mq32
andrewrk: I like that Zig doesn't use that much of abstractions but is pretty close to LLVM/Hardware without sacrificing this for security

1562772988
mq32
that's the reason i probably won't switch over to Rust in most of my projects because a lot of stuff is considered "unsafe"

1562773021
andrewrk
DutchGhost, if you decode strings unnecessarily, it's needlessly opening a can of bugs

1562773040
DutchGhost
atm nothing andrewrk. yes I know you could very-mediocre. But then you gotta first build it, but that costs time and energy, so then for a little use-case you're not going to

1562773066
andrewrk
I think it's actually an important design decision whether or not you will need to decode strings, that you should figure out somewhat early on

1562773069
mq32
got to go

1562773069
DutchGhost
because well, it just is easier for a little usecase to just go back to a vec of bytes

1562773082
andrewrk
that requires a heavy dependency to get right (the unicode data libraries)

1562773148
companion_cube
if you just need a codec you don't need heavy data, do you?

1562773163
companion_cube
utf8 is reasonably easy to decode

1562773172
companion_cube
it's for normalization/modifications/classifications that it becomes complicated

1562773242
andrewrk
right but why decode it if you don't need to understand the codepoints in any meaningful way? might as well have left it encoded

1562773315
andrewrk
if you're just re-encoding it in a different way, for example UTF-16LE to call windows APIs, you don't need a String type

1562773339
companion_cube
decode means you can validate it, at least

1562773354
companion_cube
that's what `str` means in rust: it's valid utf8, is all (and you can iterate on codepoints)

1562773361
andrewrk
yes - I would argue the best way to do that would be to call validate() on an encoded byte buffer though

1562773381
andrewrk
hm I see, so getting the type system to participate in whether it's valid. that has merit

1562773382
companion_cube
that'd be a `[]u8 -> str` function :)

1562773398
companion_cube
rust also has an unsafe version of that where you promise it's actually valid, without runtime check

1562773407
DutchGhost
Im not saying a `String` type should be part of the std. I am saying that I think it's easier to reason about a `String` then a `Vec of bytes`, and most people know what a `String` is, while they dont always know how its represented below, so know they see vectors of bytes all over the place and they dont know what is going on.

1562773411
fengb
I think this is another case where a distinct typealias would be handy

1562773418
companion_cube
but yeah, a `str` is valid utf8 and that's a good invariant to have

1562773430
ffddr
Hi! Is there any way to introduce a struct field based on some comptime condition?

1562773444
andrewrk
ffddr, short answer: no

1562773467
andrewrk
ffddr, if I'm guessing your use case correctly, there's another way to do it which should be OK

1562773501
andrewrk
here's an example:

1562773512
desperek
is there some tutorial about what's an allocator and all btw?

1562773520
andrewrk
the field  modification_count: debug_u32, // will be void sometimes or u32 other times

1562773534
andrewrk
void fields do not have any code generated for them

1562773568
andrewrk
desperek, did you see the Memory section of the language reference yet?

1562773748
dimenus
before I open an issue, I wanted to have a quick discussion about Windows. It seems that Zig generates def/lib files even when linking to libc

1562773750
ffddr
andrewrk I see, thank you! actually I did not have any particular use case yet, just validating my understending of comptime expressions in structs.

1562773760
dimenus
and this is causing issues with both the libc hello world example and the windows example

1562773767
desperek
yeah but i kinda still fail to see why would i use it but thats for another field i guess, andrewrk

1562773823
very-mediocre
desperek: it's for dynamic memory, think "new" in C++

1562773837
very-mediocre
in zig you bring your own "new"

1562773856
andrewrk
desperek, if you don't need heap memory, then don't use heap memory. you'll know when you discover you need it

1562773865
desperek
right. thanks.

1562773934
andrewrk
generally you will run into a problem that needs solving with heap memory when the amount of memory you need to use for something is only known at runtime

1562773951
andrewrk
you can't put that memory on the stack because, how would you know how big a stack you would need?

1562774231
companion_cube
andrewrk: about the `{x; y}` syntax for blocks returning expressions, wouldn't the current warnings on unused values be sufficient to make very clear the distinction between `{x; y;}` (void) and `{x; y}` (same value as y)?

1562774663
very-mediocre
I don't think this is the case, but would a compiler be smart enough to optimize an array of bools into an int?

1562774777
very-mediocre
...i guess i will just write this utility function

1562774805
samtebbs
very-mediocre: I know that GCC can do that under certain optimisatio  levels

1562774807
samtebbs
Not sure about LLVM

1562774851
very-mediocre
I see

1562774867
very-mediocre
I know very little about esoteric optimizations

1562774921
very-mediocre
oh, i see someone wrote a packed int array in stdlib

1562774934
very-mediocre
that'll work with some u1

1562775264
samtebbs
very-mediocre: Oh nice :)

1562775329
samtebbs
andrewrk: I've been building a z80 computer on and off for a while now, and would love to write some code for it in Zig. Do you know if having z80 as a target in Zig is realistic?

1562775376
samtebbs
There is a fork of llvm with a z80 backend

1562775480
andrewrk
samtebbs, I do want zig to be able to support a wide range of targets, even wider than what LLVM supports. that's a couple years out though. if you want to make progress on that now, what that looks like is maintaining a fork of zig that uses that fork of llvm with the extra backend

1562775513
andrewrk
I'm happy to help if you decide to do such a project

1562775523
andrewrk
help meaning answer questions if you run into trouble

1562776271
samtebbs
andrewrk: That does sound like the best option right now, at least until mainline llvm gets a z80 backend (if ever xD)

1562776274
samtebbs
Thanks

1562776301
samtebbs
I'll add that to the long list of things to investigate :)

1562776464
samtebbs
I think helping with arm and aarch64 support in Zig is my priority

1562776504
samtebbs
I'm going to see if work will allow me to use some of our native hardware to test things on, I can't guarantee it though

1562776522
andrewrk
great :)

1562777053
donpdonp
z80++ i was just watching Ben Eater's youtube vids of building an 8bit cpu from TTL chips

1562777301
Tetralux
(Reposting from last night) This isn't the correct error is it?

1562777476
dimenus
woo fix'd

1562780018
Tetralux
If it was because of not handling the error, surely it should say that.

1562780442
very-mediocre1
you have to use try

1562780469
very-mediocre1
without try, it returns SomeErrorset![]u8

1562780609
very-mediocre1
also you're using `if` in a way that tries to unwrap the expression in the parentheses (optional type -> unwraps to something if it isn't null)

1562780737
Tetralux
If works with errors, because it you use `else |err|` it works fine.

1562780746
very-mediocre1
- std.fmt.bufPrint has a return type of ![]u8 so you have to handle the error as you correctly identified, after doing so you're left with a []u8 instead of ![]u8

1562780746
very-mediocre1
- you can't do if([]u8)

1562780751
very-mediocre1
hm oh yeah

1562780778
very-mediocre1
ok i see your point

1562780794
mikdusan
Tetralux: yeah nice errors like "did you mean to do `else |err|` is probably stuff that will come in with stage2 compiler

1562780845
very-mediocre1
Tetralux:  i totally misunderstood your example, you're right

1562780872
very-mediocre1
indeed the docs say "// The else and |err| capture is strictly required."

1562781026
Tetralux
It should say "error not handled"

1562781035
Tetralux
There isn't an optional here...

1562781438
tankf33der
o/

1562781623
tankf33der
i want to read a two numbers from stdin and print to stdout every number increased by 1.

1562781683
tankf33der
can somebody write me this program on zig? i know, really strange request.

1562782387
Tetralux
tankf33der: See

1562782416
tankf33der
i see

1562782451
Tetralux
Once you do that, you can call .read on it.

1562782470
Tetralux
If you want to read binary data, you can call .inStream() which has things like .readIntLittle.

1562782636
Tetralux
If you want to read text, you can call .read or .inStream and .readFull etc, etc.

1562782933
Tetralux
Is anyone else not able to build release stage1 on Linux?

1562784144
FireFox317
You mean building zig with cmake -DCMAKE_BUILD_TYPE=Release?

1562784250
FireFox317
For me that works fine

1562784343
Tetralux
I'm on Manjaro Arch and there's

1562784354
Tetralux
Which seems... unhelpful xD

1562784534
FireFox317
I'm on 'raw' Arch and I can build it succesfull, however I do use local checkouts of LLVM and clang. Maybe this issue is helpfull: #2340

1562785282
very-mediocre
tankf33der:

1562785301
very-mediocre
took me way too long because of handling \r\n on windows, then realizing std.io has functions that handle it :)

1562785353
tankf33der
no chance. thanks a lot

1562785488
very-mediocre
updated slightly #ocd

1562786086
Tetralux
??? xD

1562787806
tankf33der
how correctly import std and math to use like:

1562787822
tankf33der
var a  = try Int.initSet(al, 123);

1562787823
tankf33der
?

1562787836
tankf33der
stuck with compilation, as usual.

1562787846
Tetralux
const std = @import("std");

1562787850
Tetralux
(.. Same for math.)

1562787853
mq32
you can just alias everything with const

1562787870
mq32
const Int = std.math.Int; // (if this exists)

1562787934
Tetralux
You can also `use @import("std")` if you'd prefer.

1562787938
Tetralux
Though that's not common.

1562787986
Tetralux
It's done this way so that where symbols come from is very obvious and you don't have to guess.

1562788100
tankf33der
i didnt use zig for years and stuck somewhere between 0.1 and 0.2

1562788109
tankf33der
versions.

1562788532
dimenus
think of const as let in other languages

1562788534
dimenus
it's just a name

1562788617
tankf33der


1562788622
tankf33der
no chance.

1562789091
dimenus
tankf33der: it's Int.initSet not big.initSet

1562789147
tankf33der
i see

1562789279
dimenus
most zig files have tests right in the file themselves. You can check there for usage.

1562789979
tankf33der
home/mpech/tankfeeder/bigtest/bigint.z:10:16: error: use of undeclared identifier 'Int'

1562789980
tankf33der
var a = try Int.initSet(al, 0x123);

1562789980
tankf33der
^

1562789987
tankf33der
dimenus: ^^^

1562790108
Tetralux
FireFox317: Ta btw :p

1562790146
Tetralux
Hoepfully I can fix it without building LLVM myself...

1562790149
Tetralux
I really don't wanna do that.

1562790193
dimenus
tankf33der, you can either 'use big' to import the fullnamespace or 'const Int = big.Int'

1562790289
dimenus
tankf33der, have you looked at any of the examples? eg:

1562790301
tankf33der
:)

1562797928
andrewrk
anyone want to do a fun zig API that the stage1 compiler can use?

1562797935
andrewrk
I'll type up an isseu

1562798230
Tetralux
Whatcha thnking?

1562798997
andrewrk


1562800107
Tetralux
How would this interact with other console output?

1562800112
Tetralux
Or is the idea to just not have any xD

1562800147
andrewrk
what other console output?

1562800404
Tetralux
This is a thing that's just in the compiler?

1562800408
dimenus
i understand that this may be a non-standard task, but is there a quick way to initialize a large struct to 0s?

1562800420
dimenus
memset?

1562800511
hryx
dimenus: you can also provide default values in struct definitions now

1562800557
dimenus
hryx: do you have a quick example? doesn't seem to be in the documentation

1562800577
andrewrk
dimenus,

1562800597
dimenus
apologies :(

1562800606
andrewrk
no worries

1562800637
dimenus
on the plus side, I used Zig at work and fixed linking with libc on Windows

1562800657
hryx
wow! zig comes to the workplace

1562800659
dimenus
idk how that test has been passing until now

1562800717
dimenus
not formally, I just actually have downtime at the moment. So I'm exploring the feasibility of using it for backend stuff

1562800830
fengb
andrewrk: could we infer struct field types via default values?

1562800867
andrewrk
hmm, that would make sense syntactically, wouldn't it? I think it's worth a proposal.

1562800890
Tetralux
That can be handy if it's not a outward-facing struct,  or if the answer is obvious - like a bool field for instance.

1562800906
fengb
I'll write one up

1562800913
hryx
nice idea fengb

1562801110
andrewrk
ok so I know I was supposed to be working on pull requests today

1562801123
dimenus


1562801142
andrewrk
but instead I have a branch with zig able to cross compile targeting windows, with a fully operational libc

1562801149
andrewrk
I just cross compiled SDL2 on linux for windows

1562801155
andrewrk
with out of the box zig

1562801177
dimenus
system libc?\

1562801182
dimenus
or zig's implementation?

1562801184
andrewrk
it's mingw-w64

1562801190
dimenus
ah

1562801212
dimenus
that's excellent though

1562801262
andrewrk
so this becomes the new libc-capable target list:

1562801294
andrewrk
technically the ABI would be gnu not msvc but they

1562801311
dimenus
wait, full blown cygwin or mingw64?

1562801331
andrewrk
anything that builds with mingw-w64 builds with this

1562801339
dimenus
nice

1562801348
andrewrk
it adds about 59 MiB in installation size to zig (7 MiB to the tarball size)

1562801376
dimenus
I think my next goal is going to be to clean up / finalize MSVC detection on windows

1562801382
dimenus
it's picking up 2017 instead of 2019 on my machine

1562801384
andrewrk
well here's the thing

1562801395
dimenus
2015 is not worth the effort

1562801398
andrewrk
maybe we can simply delete MSVC detection and stop caring about MSVC's existence

1562801416
dimenus
mingw's libc is hacky IIRC

1562801460
dimenus
we still need msvc detection for kernel32 et al

1562801466
dimenus
that doens't go away

1562801468
andrewrk
what we need is a really good counter example, of why we need msvc integration

1562801479
andrewrk
nope, zig provides kernel32 et all in this branch

1562801487
dimenus
not when you link a c library on windows

1562801492
dimenus
i ran into fat bugs when doing that

1562801496
dimenus
(which is what my PR is about)

1562801511
andrewrk
that's just a problem with polluting the current working directory

1562801513
dimenus
we generate def/libs for what is called in Zig, not what hte library calls

1562801519
andrewrk
and not specifying full paths to lib files

1562801532
dimenus
but we do still need the detection?

1562801535
andrewrk
this branch has full blown kernel32 & friends

1562801539
dimenus
that's how we get the full path to kernel32

1562801626
shachaf
Man, Windows sounds like a complicated platform to compile for.

1562801644
dimenus
you don't know the half of it :P

1562801677
shachaf
Why do you need kernel32 to compile?

1562801699
andrewrk
kernel32 is essentially the stable syscall API on Windows

1562801760
shachaf
Do you mean the .dll or the .lib?

1562801809
shachaf
I'm trying to figure out how things work. It looks like mingw can link directly to a .dll but I'm probably confused about things.

1562801866
dimenus
on windows, you don't directly link with a dll

1562801877
dimenus
you link with an import library

1562801883
dimenus
or a static library

1562801897
shachaf
"The cygwin/mingw ports of ld support the direct linking, including data symbols, to a dll without the usage of any import libraries."

1562801898
andrewrk
kernel32.lib is an "import library" which is just setting up to dynamically load kernel32.dll

1562801910
shachaf
Maybe this is just some random thing that doesn't actually work well, though.

1562801924
andrewrk
mingw is not to be confused with mingw-w64, which is a fork

1562801942
andrewrk
mingw-w64 supports i386, x86_64, 32-bit arm, and 64-bit arm

1562801949
andrewrk
I don't know why anyone uses mingw anymore

1562802089
shachaf
It sounds like mingw64 can do it too?

1562802419
FireFox317
Nice work andrewrk! I do want to note that there is a security vulnerability with ASLR or something, probably good to keep in mind or to write down for sure

1562802504
FireFox317


1562802524
emekankurumeh[m]
dimenus what kind of errors are you getting?

1562802595
emekankurumeh[m]
andrewrk: does zig compile without a dependency on libwinpthread?

1562802920
andrewrk
yeah I didn't do anything with libwinpthread

