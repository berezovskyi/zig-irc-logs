1570838406
Snektron
>it's also good that "use" is beeing removed as a keyword in 0.6

1570838423
Snektron
im not quite sure what to thing about usingnamespace though

1570838440
mq32
it's better to have some longer name than the generic "use"

1570838443
Snektron
The name feels kind of weird

1570838450
mq32
i can't name a function called "use" use without using @"use"

1570838460
mq32
now i have code that looks like this:

1570838463
mq32
program.useProgram();

1570838473
mq32
which is redundancy in perfection :D

1570838474
Snektron
but i suppose it helps to deter people from using it

1570838518
mq32
yeah

1570838526
Snektron
Shaders?

1570838528
mq32
yes

1570838533
mq32
i also thought about usingnamespace after tgschultz said he didn't like it

1570838564
mq32
i think something like "import symbol_a, symbol_b from package;" would be more explicit and clutter "global namespace" less

1570838567
Snektron
I always find it weird to write wrappers around opengl functions with members

1570838580
Snektron
like, glUseProgram isn't quite a member function

1570838584
mq32
why? OpenGL is a quite straightforward object oriented API :D

1570838595
mq32
even more if you use GL_ARB_DIRECT_STATE_ACCESS

1570838611
Snektron
it gets especially nasty with things like buffers, though it gets better with the recent versions

1570838618
Snektron
but you can't really use those if you want to release anything

1570838642
mq32
i have a generic unbind, which just does glBind*(0);

1570838680
Snektron
object oriented would imply that it uses inheritance for extension, which is not quite the case i'd say

1570838701
Snektron
What the point of having a generic unbind? That just adds overhead

1570838705
mq32
nah, object orientation does not imply "inheritance", that's just one form :D

1570838773
Snektron
but yeah vulkan is the complete opposite, where you have to make a lot of explicit calls

1570838810
Snektron
im hoping zig can help to deal with that a bit

1570838845
Snektron
I wrote a project using Vulkan-Hpp and that had a few annoying things

1570839001
andrewrk
mq32, oh, `use` is supposed to not be a keyword anymore. I haven't made that change yet since the 0.5.0 release

1570839028
mq32
andrewrk, yeah i know :)

1570839159
Snektron
You can always just rename it to something similar. I suppose .bind() would convey the purpose

1570839173
mq32
yeah, true

1570839182
mq32
but i'd like to stay as close as possible to the real naming

1570839201
Snektron
Or rename it use_()

1570839595
Foxfir3
sorry for noobsie question. just checked my arch install on the rpi4. 32 bit. auch. Found a zig version that runs, but I get errors. Its expecting 64 bit. now what?

1570839603
mq32
andrewrk, what is your opinion on a "usingnamespace" with explicitly imported members?

1570839646
mq32
is it worth writing a proposal? :D

1570839721
Foxfir3
hardware is 64 bit though. seems like the Zig armv7 are 64bit.

1570839737
mq32
Foxfir3, is your arch running in 64 bit mode?

1570839755
mq32
i don't have much expertise on that area, but i heard that you have to boot the linux kernel with aarch64 support

1570839765
Foxfir3
mq32: dang! I never even though of such a thing. how do I fix that?

1570839773
mq32
i don't know :/

1570839857
Foxfir3
mq32: okay. thanks for the tip :) I'll check with the Arch guys.

1570839962
fengb
Zig should work with 32bit though

1570840047
Foxfir3
fengb: went as far as 'zig version', and trying to build the hello world example. @compileerror("unsupported arch")

1570840092
mq32
oh

1570840093
Foxfir3
fengb: expecting 64u. and then I assumed the issue could be the os? no?

1570840114
mq32
so this is actually some error in the standard library

1570840121
mq32
i think there's an issue for that?

1570840128
fengb
A lot of userland may not be ready but the compiler should be

1570840166
Foxfir3
aha.. that explains

1570840210
Foxfir3
okay: container 'std.os.linux' has no memb

1570840211
Foxfir3
er called 'Stat'

1570840219
fengb
We haven’t had many arm 32 users so you might be a guinea pic :P

1570840232
Foxfir3
Im willing :D

1570840440
Foxfir3
fengb: wait.. why is It calling std.os.linux there?

1570840591
fengb
stdout is an OS abstraction

1570841170
Snektron
Foxfir3: what version of Zig are you on?

1570841206
Snektron
I added some stuff for arm32 in 0.5.0 and a basic "hello world" should be working

1570841231
Snektron
A lot of features are still missing support

1570841258
Snektron
I ended up writing the project i was doing in C since i turned it into a uni project

1570841298
mq32
:O

1570841310
mq32
you should spread the word of zig, not betray us!

1570841357
Snektron
Would if i could

1570841447
Snektron
I mean i could probably, but that would include spending much more time on it (and uni is already eating up most of my time) and convincing my mates of using a language of which the compiler crashes when you try to do something with it

1570841571
mq32
haha

1570841590
mq32
damn you and your arguments

1570841611
Snektron
I did convince one of them to watch one of andrews talks and he was interested

1570841647
Snektron
It surprised me, since hes usually not a fan of new languages

1570841792
mq32
imho zig has a special place between all the new languages

1570841879
Foxfir3
Snektron: 0.4.0 (community arch package)

1570842008
Foxfir3
Snektron: oh. Thanks. I'll get the 0.5.0 version from the site then. Could'nt compile the repo 0.5.0 version. Thanks :)

1570842031
Snektron
If youre building from the aur it installs all required dependencies

1570842079
Snektron
I found Zig quite easy to build, much better than the majority of projects i come across

1570842096
Snektron
I wonder why that stuff is always so hard

1570842099
Snektron
I blame cmake

1570842503
Foxfir3
Snektron: AUR can be entertaining at times. Might be 10 seconds. Might be half an hour :D

1570842527
mq32
Foxfir3, true dat. or sometimes, might be 10 hours

1570842557
mq32
like mingw-w64-gcc or similar :D

1570842646
Snektron
Avr-gcc was pretty quick to compile

1570842652
Snektron
Took only like a minute

1570842822
mq32
yeah, but that's afaik gcc 4

1570842825
mq32
so kinda "old"

1570843213
mq32
i should get some sleep, it's late already...

1570866998
daurnimator
Snektron: 0.5.0 is in community-staging pending llvm 9 rebuilds

1570869035
gustav_o
is there consensus on whether tests should be placed inside structs or not? If they are, they can use nested structs with less namespacing and they also get spatially closer to the implementation, but one needs to add a comptime reference to the structs for the tests to run..

1570871336
Foxfir3_
update on the rpi4. in theory the archarm zig package is corret, assuming the 64bit cpu, which is that. But since there is no no 64 bit binary blob from RPi foundation, the result is a 32 bit system on a 64 bit cpu. So that's that.

1570871394
gustav_o
is there consensus on whether tests should be placed inside structs or not? If they are, they can use nested structs with less namespacing and they also get spatially closer to the implementation, but one needs to add a comptime reference to the structs for the tests to run..

1570871406
gustav_o
wops, sorry ppl

1570871407
Foxfir3_
64 bit will arrive.. at some point. but as It stands, I see no reason why anyone should adapt to Broadcomm and RPi foundation.

1570871731
Foxfir3_
the bizare situation is that I might be able to compile a zig programme on the RPi3B+, but not the RPi4

1570871854
Foxfir3_
Ideally there should be a check, to prevent the package from installing. maybe lscpu or something like that

1570875864
Snektron
Wait so the rpi 4 cant run a 64 bit os?

1570875954
mq32
Snektron, afaik it can, but nobody has fixed their distros to actually support it

1570877000
kenaryn
Hello guys. Please what is the difference between a 'null' and an 'undefined' value? (except that the former can belong to a list of optional types).

1570877124
tdeo
> undefined means the value could be anything, even something that is nonsense according to the type. Translated into English, undefined means "Not a meaningful value. Using this value would be a bug. The value will be unused, or overwritten before being used."

1570877492
kenaryn
I am sorry, I did not remember it from the official documentation, thank you.

1570877544
kenaryn
Can you explain to me in a few words the difference between 'void' and 'null' please? I know 'void' is a value meaning "absence of value" but I can't distinguish it from 'null'.

1570877597
tdeo
void is a type that cannot hold any value, while null is a value indicating that there is no value

1570877636
kenaryn
Thanks, you are kind.

1570878503
Foxfir3
more RPi4 update for Zig. Raspian buster supports 64 bit. so Zig should be able to build on that distro. While ArchArm is in the wind. Don't knoiw about FedoraARM yet.

1570878553
tempnickdontmind
would there be any problems with linking the current std docs in the FAQ or is it too early for that?

1570878559
kenaryn
Nice to hear it buddy, Zig is conquering new targets.

1570878592
mq32
tempnickdontmind, i think it's still a bit too early for that as the docs aren't complete yet (e.g. missing windows documentation)

1570878620
kenaryn
It could be a first step in a continuous improvement methodology.

1570878652
kenaryn
And could decrease the work load once the documentation is complete.

1570888292
kenaryn
Please does |_| equals |err| ?

1570888428
mq32
you are not to ignore error codes

1570888604
kenaryn
In fact, what does |_| mean?

1570889142
kenaryn
I will reformulate: does |_| tell the compiler to not ignore error codes? or was it addressed to me as a person?

1570889356
FireFox317
|err| means that you can do something with the error in the next block, for example check which error occurred and |_| means that you won't get that information in the block, so you don't care what error was returned

1570889778
kenaryn
Thank you for instructing me. The official documentation is amazingly interesting and quite difficult.

1570895360
daurnimator
bgiannan: topical:

1570895474
marler8997_
looks like 4G of ram just doesn't cut it these days if you want to compile LLVM/CLANG

1570895488
marler8997_
I've had to restart my clang build 3 times because it keeps running out of memory

1570895501
daurnimator
marler8997_: indeed. also seemed to take a few hours :(

1570895635
Cadey
i got HTTP client requests working with olin+zig!

1570895722
daurnimator
oh woot; llvm9 made it into arch extra; and zig 0.5.0 has now hit community :D

1570895779
daurnimator
Cadey: o.o writing http headers like that isn't intentional

1570896033
bgiannan
daurnimator, 👍

1570896291
nrdmn
is there any way to use @memberType with a member's name instead of its index?

1570896361
daurnimator
nrdmn: have you looked in std.meta?

1570896590
nrdmn
daurnimator: thanks, std.meta.fieldInfo is what I was looking for

1570897873
nrdmn
Can I get the return type of a function from within that function?

1570897928
nrdmn
I have a function that returns an array. The length of the array depends on arguments passed to the function. Currently I do the calculation of the length twice, once in the return type declaration and once in the function body

1570897993
daurnimator
nrdmn: no I don't think so

1570898008
daurnimator
nrdmn: I've seen before making a helper function to figure that out; but it is ugly

1570898030
daurnimator
I see it as one of the motivating use cases for inferred return types

1570898045
daurnimator
you might want to post your example on the inferred return types issue

1570898078
nrdmn
that's another solution I thought of

1570898104
nrdmn
I referenced the issue in my post:

1570899593
Cadey
daurnimator: it works great though!

1570899936
daurnimator
Cadey: so you're meant to add method, authority and other http/2 pseduo headers as well

1570900072
Cadey
daurnimator: i'm explicitly trying to do HTTP/1.1 though

1570900083
daurnimator
Cadey: yes.

1570900089
daurnimator
Cadey: the rest of http isn't written yet

1570900095
Cadey
yeah

1570900097
Cadey
i realize

1570900098
daurnimator
it was pending the async work.... and now I just haven't had time

1570900116
Cadey
at the least it works :^)

1570900149
daurnimator
I don't think we have an async 'write' yet do we?

1570900167
daurnimator
Not that it matters. I might write the h1_connection layer right now :)

1570900225
Cadey
i need to figure out how to best implement olin support into the zig stdlib

1570900227
daurnimator
At least to stop you from using that hack ;)

1570900300
gruebite
what's the different between `!i32` and `anyerror!i32`?

1570900312
Cadey
gruebite: IRIC the former implies the latter

1570900316
Cadey
IIRC*

1570900324
daurnimator
gruebite: in a return type?

1570900343
daurnimator
gruebite: the former infers the possible errors in your function

1570900350
Cadey
daurnimator: what i'd really like is the ability to get the bytes of a HTTP request so i can write it to the olin HTTP resource

1570900381
daurnimator
Cadey: right, so you want to write what I've been calling an "io provider"

1570900396
Cadey
that sounds right :D

1570900409
daurnimator
at this point in time its all in my head I think :P

1570900548
Cadey
daurnimator: so the way i have HTTP requests/responses working with this thing is that i write the request bytes to a file descriptor, flush it once i'm done to have it perform the whole HTTP transaction and then read the response bytes back

1570900595
Cadey
the design was inspired by go's http.RoundTripper:

1570900648
daurnimator
Cadey: you should flush after each header block and each body chunk

1570900674
daurnimator
for a general http client, request bodies can be infinite in length

1570900684
Cadey
yes, i'm aware this isn't the most compliant

1570900729
daurnimator
Cadey: give me 30 mins.... I'll write something and send a PR

1570900731
Cadey
it's less a generc HTTP client and more of a "oh my god can i finally do this???" thing

1570900736
Cadey
:+1:

1570900741
Cadey
generic*

1570900755
daurnimator
Cadey: FWIW I'll be essentially porting

1570900787
Cadey
mmm

1570900790
Cadey
cool

1570904318
daurnimator
welp. my computer died compiling zig

1570904324
daurnimator
back again now and I think I've compiled it

1570904329
daurnimator
but that was an unproductive hour

1570907034
daurnimator
andrewrk: why is std.http.headers not in the generated docs?

1570907048
daurnimator
==> it has tests...

1570908193
daurnimator
Cadey: sigh; without the "io provider" piece done I'm a bit lost

1570908265
Cadey
daurnimator: does zig have functions as data?

1570908282
daurnimator
Cadey: yes...... but I recall there's something weird about async functions as data

1570908296
daurnimator
and this is a prime example of exactly where we want async functions

1570908381
Cadey
andrewrk: what is the zig equivalent of go's interfaces?

1570908492
Cadey
would it be like a vtable or something?

1570910372
Snektron
Can Zig's frames be used to implement closures?

1570913872
mq32
Cadey: interfaces can be done with @fieldParentPtr and embedding the interface in the "implementing class". See std.mem.Allocator / std.heap.FixedBufferAllocator for an example

1570913909
mq32
Snektron: i had an idea how to implement this by creating something out of a function pointer and a loop

1570913919
mq32
i'll try to hack a PoC together

1570913990
daurnimator
none of them quite do what I want.. and having trouble picking the right starting point

1570914756
mq32
huh

1570914782
mq32
can somebody explain why arguments in FnArg have "arg_type: ?type" as a field?

1570914803
mq32
is this for arguments that use comptime derived args?

1570915039
daurnimator
mq32: I guess for when is_generic is set?

1570915046
daurnimator
mq32: i.e. `var`?

1570915148
mq32
yeah, probably

1570916008
mq32
Snektron: okay, i've hit language restrictions :D

1570916921
emekankurumeh[m]
i don't if it's because i got a new computer or what, but the zig compiler has been feeling extremely fast lately

1570917272
daurnimator
emekankurumeh[m]: probably the new computer :P

1570917411
daurnimator
hmmmm. writevAsync doesn't exist

1570917609
daurnimator
sigh.... our write wrapper ignores short writes

1570918699
Snektron
i like the documentation

1570918720
Snektron
though field documentations feel like they take a bit too much space

1570918758
Snektron
and some funcitons are documented as taking or returning var while thats different in the code

1570918773
emekankurumeh[m]
i hate syntax highlighting so much

1570918800
Snektron
why

1570918801
nrdmn
syntax highlighting in general?

1570918892
emekankurumeh[m]
writing it

1570918975
mq32
hmm

1570918986
mq32
<Snektron> though field documentations feel like they take a bit too much space

1570918987
mq32
+1

1570919020
mq32
i have still some problems with understanding async functions

1570919037
mq32
i can't quite grasp where the function will return to when suspending

1570919060
Snektron
caller?

1570919093
nrdmn
what do you need for syntax highlighting, anyway? The standard library already has code for tokenization

1570919099
mq32
but which caller? :D

1570919112
mq32
because if i await something, this is also a suspension point

1570919141
mq32
so if i'm three calls deep in the stack, i will still suspend to an explicit async invocation

1570919144
Snektron
is there any functionality for generating sources in zig's build tool

1570919167
Snektron
i don't see any

1570919203
Snektron
except run steps, but that will just regenerate the source every time and that might be a bit annoying

1570920766
daurnimator
mq32: you return to the point that used `async` or `resume`

1570920783
mq32
hm, okay

1570920798
mq32
have to do some tests to understand how the codeflow will actually look like :D

1570920843
mq32
so "await" will just suspend once and will then assume that on the next return the awaited value is ready?

1570922111
marler8997_
so, zig supports rvalue references then?

1570922147
mq32
huh, do you have an example for that?

1570922166
marler8997_
I can do this someFunc(&anotherFunc())

1570922180
mq32
oh crazy :D

1570922187
mq32
but seems legit to support this

1570922193
mq32
makes a lot of stuff easier

1570922204
marler8997_
Yeah, wasn't expecting it to work, but it did

1570922430
mq32
hm

1570922436
mq32
i ran into an interesting case here

1570922444
mq32
error: function is not comptime-known; @asyncCall required

1570922472
mq32
so calling a (sync) function pointer in an async function does not seem to work directly

