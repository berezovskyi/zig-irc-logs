1570153850
stratact
andrewrk: can we set up a time and meeting on github to get my PR merged? :)

1570153908
stratact
I don't want it to bit rot ðŸ˜…

1570154846
andrewrk
keegans, see also

1570156158
scientes
How do i panic from a thread?

1570156235
scientes
nvm

1570175415
ceymard
andrewrk: are you talking about the dump analysis ?

1570175639
ceymard
andrewrk: for context, you were talking about things I'd be happy about in a change you just commited :)

1570175947
ceymard
is there some kind of documentation or explanation about the contents of the analysis.json file ?

1570175960
ceymard
I suppose I'll go read some cpp :)

1570175969
mq32
hey ceymard

1570176000
ceymard
hey

1570177236
mikdusan
ceymard: it might help to experiment with a minimal source file. here's one that produces small .json ->

1570177271
mikdusan
and remember zig is lazy. so you'll only see stuff that is needed. consider line 6. if it's not used, .json will not contain it.

1570178025
ceymard
I can see that

1570178090
ceymard
this is a nice step

1570178121
ceymard
I think that to provide something really helpful, we'd need to add symbol location in the output

1570178144
mikdusan
it is there

1570178160
ceymard
I mean line/col or offset in the file ?

1570178162
mikdusan
look for elephant and you'll see line/col

1570178163
ceymard
I can't see it

1570178248
ceymard
oh right

1570178286
ceymard
the only thing we need now is for zig to be forgiving :)

1570178302
ceymard
can't ask the symbols when I'm in the midst of typing a malformed expression

1570178335
ceymard
also, could it be possible to call the analysis without building anything ?

1570178340
ceymard
and have it output on stdout ?

1570178463
daurnimator
andrewrk: I don't think your json writer handles unicode correctly.... and I'm not even sure it can

1570178500
daurnimator
e.g. what if I have a symbol with a non-utf8-valid name?

1570178507
ceymard
well actually the real question I have is ; should I keep my own parser, or do I wait for zig to provide all the needed facilities ?

1570178518
ceymard
I'm making decent progress actually

1570178537
daurnimator
ceymard: my answer would be to contribute to the zig one to add what you're missing

1570178559
ceymard
daurnimator: that would mean editing both the stage1/2 compilers

1570178561
ceymard
right ?

1570178582
daurnimator
ceymard: no. just std.zig.parse I think

1570178595
mikdusan
stage2 has a good recursive-descent parser . what daurnimator just mentioned. it's used by `zig fmt` too.

1570178605
ceymard
daurnimator: the dump analysis one is done by cpp

1570178611
ceymard
for what I'm gathering

1570178613
ceymard
from*

1570178648
mikdusan
yes, but you could use the stage2 parser, and load .json

1570178671
daurnimator
mikdusan: I think the issue ceymard is talking about is that the cpp parser is non-resumable

1570178677
ceymard
so I should create an executable of my own in zig that uses the stage2 parser ?

1570178683
ceymard
and modify what I need in std ?

1570178693
daurnimator
ceymard: yeah that's what I was thinking

1570178715
ceymard
well right now my thinking was ; the parser does not seem to be priority number 1

1570178718
mikdusan
ceymard: i'm not sure you need to modify std. you can just use the parser as a library and add your own main code

1570178729
ceymard
distributing an executable along my vscode plugin seemed off / complicated

1570178736
mikdusan
oh i see.

1570178738
daurnimator
ceymard: its not andrew's priority; but it can be yours

1570178747
ceymard
mikdusan: I would need to modify it to not crash and burn on invalid input

1570178767
ceymard
I think the modifications are somewhat heavy

1570178778
daurnimator
ceymard: you have a few options; e.g. zig can compile to wasm.... then include that in your plugin?

1570178792
ceymard
oh this is actually a pretty good idea

1570178807
ceymard
the only thing for me is speed of implementation

1570178814
ceymard
I'm not very proficient at zig for now

1570178833
ceymard
the parser seems to be a huge chunk

1570178834
daurnimator
ceymard: you can iterate on that. but a parser in wasm should have a pretty high performance ceiling

1570178844
ceymard
that's true

1570178881
ceymard
there's an argument for making another parser like I'm doing though

1570178891
ceymard
my parser is not even trying to parse zig correctly

1570178893
daurnimator
ceymard: and maybe you can then add that to std too :)

1570178896
ceymard
it recognizes stuff

1570178906
ceymard
but it bails pretty fast

1570178918
ceymard
for instance, the grammar makes a distinction between if exprs and if statements

1570178922
ceymard
I don't, because I don't need to

1570178938
ceymard
my ast is minimal and really just needs to resolve types when asked

1570178944
ceymard
it bails if it doesn't make sens

1570178946
ceymard
e

1570178975
ceymard
as in, the parser to resolve declarations and their type is not as complicated as building a zig lib / executable

1570178997
daurnimator
ceymard: if we had a "lax" parser in std we could probably use it for e.g. generating better compiler errors/warnings too.

1570179001
ceymard
my goals are as follow : identify declarations, their type and their locations

1570179009
ceymard
daurnimator: clearly

1570179031
ceymard
now, the thing is that with my own parser, I'm free to pollute as I want and be dirty :)

1570179041
ceymard
if I'm to commit in std, the bar is higher

1570179056
daurnimator
ceymard: the bar for std isn't too high < 1.0.0

1570179062
ceymard
that said, I think there'd be a case for keeping my approach for now

1570179077
daurnimator
ceymard: sounds like you're convincing yourself to not write zig ;)

1570179086
ceymard
hm

1570179095
ceymard
it's possible

1570179099
ceymard
that this is a factor

1570179110
ceymard
the thing is I'm making good progress

1570179121
ceymard
let's call it a "prototyping phase"

1570179193
ceymard
so here is what I'm probably going to do ; to avoid frustration with dealing with a whole new language to me (well, less new since I'm spending time learning it), and maybe not get where I want as fast as I want, I'm going to keep doing what I'm doing for now until I have something somewhat usable

1570179200
mq32
ceymard, join me and code stuff in zig even if it's not our main language! :)

1570179202
ceymard
this will help me get experience on what I need / want

1570179209
ceymard


1570179217
ceymard
I will switch to zig

1570179227
ceymard
plus, I'll have completion to help me on that !

1570179231
mq32
oh btw

1570179240
mq32
do we already have some vector math library for games?

1570179246
mq32
with matrices and stuff?

1570179252
daurnimator
ceymard: dive in head first; you're shivering now as you're up to your knees :P

1570179268
ceymard
daurnimator: I'm honestly not that scared

1570179276
ceymard
I just want a working prototype, fast

1570179299
ceymard
I peeked at the parser code, it's several thousand lines long

1570179310
ceymard
code that I didn't write, and that I'd have to grok

1570179319
ceymard
the parser I'm writing is way more simple

1570179326
daurnimator
if its hard to grok then we've failed :(

1570179328
ceymard
because it has fewer requirements

1570179335
ceymard
no it's not :)

1570179348
ceymard
it's actually pretty readable

1570179460
ceymard
look, I promise I'll get to it in zig :)

1570179521
ceymard
you said I was scared, and it's true ; I'm scared that it will take me too long and too much effort to get to a basic point of starting completion

1570179530
ceymard
this will be frustrating

1570179564
ceymard
so I'd like to have something basic, not 100% accurate, but a little better than what I did already (because I have a first basic prototype that's funky and does stuff)

1570179569
ceymard
and see results

1570179591
ceymard
then, I'll feel confortable doing something really nice and productive

1570179647
ceymard
I just hope I won't get ostracized because of that :-| I kinda feel judged

1570179648
mq32
just use your completer already

1570179650
mq32
it's good enough!

1570179722
ceymard
mq32: it at least needs some tweaking then

1570179730
mq32
nah

1570179740
mq32
i'm actively using it and it's good enough to code zig with

1570179752
ceymard
I mean Struct{ .field } is not handled, @This() is not resolved

1570179769
ceymard
it should at least recognize @TypeInfo and stuff

1570179774
ceymard
to be really useful

1570179781
ceymard
also .union expressions

1570179794
ceymard
that's what I feel is really missing right now

1570179809
ceymard
I don't mind that it ignores pointers/optionals/arrays

1570179811
ceymard
oooh

1570179815
ceymard
and also, generics :-|

1570180625
ceymard
anyhoo, daurnimator, mq32, I

1570180633
ceymard
definitely

1570180681
mq32
:)

1570180707
ceymard
I pretty certain that what I'm doing right now is not a waste of time

1570180779
ceymard
besides, I think that for zig to be able to provide completion stuff and all, it should go towards implementing LSP directly

1570180798
mikdusan
cripes. the release rate of c/c++ compilers is really rapid these days. seems like every month now there's a new vstudio update or preview, and xcode is rapid-firing releases or betas almost weekly for last month

1570180819
ceymard
not some half assed "let's communicate by json" between zig and the ide

1570180841
ceymard
I mean json files

1570180845
ceymard
since LSP is json :)

1570180967
mq32
ceymard, yeah, but it's a good first step :)

1570181261
ceymard
:)

1570183153
mq32
how could i turn off zig fmt again?

1570183163
fgenesis
delete the exe

1570183186
mq32
then i don't have a compiler anymore .D

1570183203
mq32
nah, i meant for some specific lines to increase readability

1570183217
fgenesis
protip is not to use autoformatting then

1570183385
mq32
andrewrk, i've read some stuff about zig fmt control via comments

1570183388
mq32
is this already implemented?

1570183392
mq32
or is it discarded?

1570183659
dingenskirchen
try using //zig fmt: off and //zig fmt:on mq32:

1570183753
mq32
tried that already

1570183776
dingenskirchen
hm

1570183817
mq32
code looks like this:

1570183818
mq32


1570186717
ibutra
Hi, I am trying (again) to get zig to compile for a stm32 microcrontroller. For this I have an assembly file which does the necessary initializations and this is added in the build system just fine. But I can't reference zig functions from inside the assembly file. I declared them extern but I always get undefined symbol from the linker

1570187354
rifkik
Anyone up for a live coding stream of my SNESemulator?

1570187378
mq32
if you give me an hour, i'll be watching :)

1570187379
kllr_sbstn
sure

1570187507
rifkik


1570189744
ibutra
can somebody tell me where I find the code for the builtin module?

1570189856
ibutra
nvm

1570189864
ibutra
'zig builtin'

1570189867
mq32
sep

1570189868
mq32
*yep

1570190448
ibutra
If I compile a simple main.zig file for thumbv7em-freestanding-eabihf and look at the output with objdump I get an ampty .text section, which probable explains why the linker can't link my functions. But why would it be empty? Is there some kind of optimization going on that eliminates functions zig doesn't find a caller for?

1570190741
bgiannan
ibutra, zig doesn't compile branches that can't be reached

1570190779
ibutra
that is cool, how do i tell zig a function is called from a provided assembly file and not to eliminate it?

1570190847
mikdusan
stick `export` keyword in front of it "export fn foo() void {}"

1570190896
ibutra
did that already

1570192807
ibutra
If I just try to compile the main.zig by itself with the target thumbv7... the .text section is empty

1570192827
ibutra
If I compile it with zig build-exe without a target it gets compiled just fine

1570199161
fengb
ibutra: can you do `zig build --verbose`?

1570200518
tgschultz
Oh this is new. Zig 5.0 has a new dependency on Windows. How unfortunate.

1570200617
halosghost
lol

1570200628
fgenesis
like what

1570200645
fgenesis
finally a dependency on windows xp?

1570200659
tgschultz
ok, so it isn't exactly new, but it has a different vcruntime dependency than previous versions

1570200820
tgschultz
so really it's just annoying for me, not really a problem.

1570200849
fgenesis
it's always possible to link in the vcrt statically...?

1570201014
tgschultz
alright, I haven't actually written any Zig code in a while so maybe I missed something, but std.heap.DirectAllocator is private?

1570201157
tgschultz
Oh, I think I get it. Has to do with the change to purely stateless DirectAllocator. I have to reference the global instance.

1570201180
bgiannan
yeah std.heap.direct_allocator

1570201550
mq32
is it possible to fully debug-print some struct values with std.debug.warn()?

1570201646
tgschultz
what do you mean by "fully"?

1570201763
fgenesis
down to the very last bit

1570201897
mq32
ah, i just read std.fmt

1570201900
mq32
it will not print arrays

1570202150
tgschultz
it won't? I thought it only wouldn't print arrays of unknown length or pointers.

1570202381
mq32


1570202390
mq32
doesn't look like it

1570202470
mq32
who designed the format API? :D

1570202480
mq32
zigs comptime reflection and stuff is just great

1570202494
mq32
"hey, i want to format this struct... oh, it just needs to implement this function and it will work? nice!"

1570202514
tgschultz
It was a group effort, but actually I was responsible for that particular addition

1570202711
mq32
neat!

1570202712
mq32
thanks :)

1570202725
tgschultz
Huh. I would have sworn we print out arrays of known length. But maybe we decided that if those arrays were arrays of structs it might be too crazy messy? I don't think there's a technical limitation or danger there.

1570202849
mq32
well, probably most arrays were just

1570202863
mq32
but: time for a pull request to change that

1570202878
mq32
{c} vs {p} for arrays with content or pointer

1570202891
tgschultz
That kind of comptime reflection is also used in Serialize/Deserialize. It works well and is simple, but I worry about using it a lot because of collisions. That will be less of an issue once we can match on function signatures more accurately.

1570202924
tgschultz
Or get some kind of annotation feature.

1570202964
tgschultz
Though honestly I question the value of annotation, since it's just moves the problem to another namespace.

1570202977
mq32
i think i also found a bug in format float :D

1570202998
mq32
yeah, i know the annotation/attribute hell from the .NET XmlSerializer

1570203009
mq32
you can actually project

1570203033
tgschultz
aw, I've encountered a real problem in zig 0.5.0 now. "broken LLVM module found: Call parameter type does not match function signature!"

1570203287
tgschultz
I feel like this issue is probably already known, but LLVM errors are opaque to me so I don't know what the actual problem is.

1570203645
dingenskirchen
I got that error once when I was missing a try in front of a function call that could return errors

1570203649
dingenskirchen
maybe that helps?

1570203763
tgschultz
I'll check, but that'd be a regression in the compiler because it should check that right?

1570203833
mq32
comment of the day

1570203835
mq32
// 1.0 is 60Â° (assuming pi = 3)

1570203856
dingenskirchen
tgschultz, seems that way

1570203889
tgschultz
mq32 that sounds like the kind of thing I'd expect to see in some old dos game code.

1570203901
mq32
hehe

1570203920
mq32
but yeah, for graphics programming, it's a good measure to assume pi=3

1570203930
mq32
doesn't hurt in most of the ways and makes stuff pretty easy :D

1570203940
tgschultz
though it was more common to have 256 or 65536 'degrees' in a circle

1570203966
mq32
yeah

1570203971
mq32
i have made a demo for embedded hardware

1570203975
mq32
it's full of such hacks

1570204011
mq32
"why do you have angles from 0â€¦3? â€¦ IN INTEGERS?!"

1570204273
tgschultz
hmm... well, it does look like it could be the issue you're talking about but it's going to be a pain to find. This is code that was working as of sometime in 0.4.0.

1570204276
fengb
Avoid rounding errors?

1570204297
fengb
I suppose it'd make more sense to do degrees at that point

1570204302
fengb
Gotta save them bytes though

1570205986
mq32
my work of the day:

1570205986
mq32


1570206006
mq32
opening a window with sdl, render a rotating 3d triangle with OpenGL ES

1570206016
mq32
most stuff in zig, except for opengl loader and SDL

1570207277
tgschultz
I just can't figure out what LLVM is on about with this error, but it's completely broken my bmp library.

1570207313
tgschultz
which means it also broke my toy game engines

1570207331
tgschultz
not that that is a big deal, other than it being, from my perspective, a pretty damning bug

1570207425
andrewrk
tgschultz, I'd be happy to take a look

1570207498
tgschultz
Alright, I'm going to work through my other libs and see if anything else broke, then come back to it.

1570207531
tgschultz
Already looks like something with hashmaps or bufmaps might be broken too

1570208154
tgschultz
"can't store runtime value in type" thrown inside a completely comptime block...

1570208248
tgschultz
which is amazing since these supposedly runtime values are actually types

1570208341
andrewrk
sorry tgschultz, that result location branch was pretty brutal to the stability of the advanced comptime stuff. we have more test coverage than ever now, but also the compiler's job has become increasingly complicated

1570208386
tgschultz
that probably has something to do with the bmp lib breaking too then. There's some pretty advanced comptime stuff going on in there.

1570208462
andrewrk
one goal to aim for that is looming on the horizon now, after package manager (or maybe even before?), is some kind of meta-repository that has everybody's active projects listed in it, and has a way to run all the tests

1570208466
andrewrk
or at least build everything

1570208506
andrewrk
to catch regressions in master branch faster

1570208592
tgschultz
interestingly, PseudoStruct passes all tests.

1570208620
tgschultz
that's the one that uses recursively generated types

1570208624
tgschultz
I'm a little surprised

1570208775
tgschultz
well anyways, i'll go through and see if I can't find minimal examples of these issues. I thought someone already mentioned the hashmap one but apparently not.

1570210117
tgschultz
andrewrk, is the debug allocator you've been working on part of std?

1570210340
andrewrk
tgschultz, not yet but I'm planning to stabilize it during this release cycle and add it

1570210654
tgschultz
oh wow, this isn't a buffmap bug at all, it's a compiler bug.

1570210918
tgschultz
yep, tries to read a null pointer. I'll have to build a debug compiler to get more info

1570214359
tgschultz
problem appears to occur during analysis of a conditional break

1570214375
tgschultz
or codegen of a conditional break

1570214424
tgschultz
s/break/branch/ my brain is not firing on all cylidars, as usual

1570214936
tgschultz
ok, looks like it is a switch expression inside an inline while

1570215240
mq32
hm

1570215248
mq32
i wanted to implement a fully-conforming OBJ parser

1570215252
mq32
now i've taken a look at the spec

1570215258
mq32
i don't want to implement that anymore

1570215388
andrewrk
now that I've looked a bit more deeply into documentation generation, I think that a fully js/wasm implementation would be reasonable

1570215433
tgschultz
alright, bug report incoming. a switch on a range in an inline while loop causes null pointer deref

1570215435
andrewrk
e.g. there would only be 3 files: doc.html, doc.js/doc.wasm, and semantic-analysis-dump.json

1570215435
mq32
so zig playground online?

1570215450
mq32
or just doc display/live generation in zig? :D

1570215452
andrewrk
thanks tgschultz

1570215475
andrewrk
you already need something like this setup for searching to work well

1570215489
mq32
oh yeah, right

1570215510
andrewrk
and then with zig's tree structure (files are just structs) generating redundant .html for each file (or each struct?) is wasteful

1570215542
andrewrk
so my argument is then: (1) you already need js for searching. (2) embracing this will lead to highest compacting of bytes and most flexibility of display

1570215617
andrewrk
also there are people in rust community who believe that rust should go this direction

1570215617
andrewrk
with the documentation

1570215651
fengb
wasm based docgen?

1570215746
mq32
what is a good "generic purpose allocator" i could use right now?

1570215959
torque
counterpoint: javascript is evil

1570215977
mq32
torque, that's why andrewrk proposed using wasm and write most of the logic in zig :)

1570215987
tgschultz
on Windows, std.heap.HeapAllocator, on anything else you're out of luck unless you have a more specific usecase

1570216005
andrewrk
mq32, there's no good answer to that question yet. closest we have is these docs:

1570216023
mq32
as i'm linking libc, i could just use std.heap.c_allocator and be fine?

1570216025
torque
hmm, maybe I should have said "web browsers are evil", alas

1570216031
andrewrk
I'm hoping to stabilize this project during this release cycle though:

1570216055
andrewrk
mq32, yes that's a good idea when linking libc

1570216072
mq32
yeah i know the ZGPA :D

1570216083
mq32
but didn't know if it was in a usable state right now

1570216085
andrewrk
torque, what would be your preferred way to browse generated documentation?

1570216095
andrewrk
mq32, it's actually pretty close

1570216098
mq32
nice!

1570216103
andrewrk
you can see the rest of the todo items in the bottom of the readme

1570216168
fengb
wasm doesn't really interact with the DOM so you'll probably spend more time writing JS plumbing to ferry the logic around

1570216179
fengb
And... I don't imagine our docs will have really complicated logic either

1570216316
andrewrk
the logic is in rendering the docs themselves from the semantic analysis dump. it will either happen as a compilation step and generate a lot of html bytes, or happen on the fly with js/wasm

1570216357
fengb
Oh I see. That'd be pretty cool

1570216366
torque
unfortunately I don't think there's a realistic alternative to web-based documentation

1570216403
fengb
The web is the least bad globally available UI engine

1570216453
torque
this depends on how you classify "bad"

1570216468
andrewrk
does it? pick any category

1570216504
torque
engineered for and driven by advertising

1570216524
torque
user customisability and control

1570216549
torque
performance

1570216597
mq32
fengb, i think Qt is actually a pretty strong contestant to the web

1570216608
mq32
except for "its stupidly easy to write a web UI"

1570216640
fengb
It requires install. That makes it much harder to just use :P

1570216652
fengb
I'm curious if anyone will start exploiting canvas or webgl more

1570216688
fengb
Probably not worth it since it'll probably just make accessibility terrible without too much benefits

1570216705
mq32
what terms of "more" do you talk about? have you ever seen shadertoy.com?

1570216730
torque
the web is certainly the best^W easiest platform for developers, but I'd argue it's the worst or one of the worst for users (as it turns out, most users don't care, though)

1570216752
fengb
Using it for full UI building. Like Qt => wasm => canvas silliness

1570216823
fengb
Users don't like to installing everything. That makes the web relevant and "good"

1570216829
torque
anyway, from a design standpoint, generating docs on the fly from a unified dump sounds pretty cool to me

1570216835
mq32
fengb:

1570217233
mq32
hm, i got a problem with allocators

1570217243
mq32
you cannot use std.heap.c_allocator with ArrayList

1570217296
fengb
You can test out zee_alloc but performance is probably atrocious >_>

1570217364
mq32
oh wait

1570217368
mq32
i'm just stupid :D

1570217432
THFKA4
.md could be a good format to use as an intermediate step

1570217441
THFKA4
lots of tools generate html from .md

1570217443
fengb
I actually need to test out zee_alloc with real projects

1570217467
THFKA4
and there are desktop clients as well, if you're into that

1570217481
andrewrk
THFKA4, it could be interesting to have an alternative doc generation that did not rely on js/wasm. it wouldn't have search, but it would still serve a use

1570217493
andrewrk
that could be a nice community project, now that we already have -fdump-analysis

1570217535
fengb
lol... I just realized that FUNDUDE runs at 2.4x speed on 144hz monitors

1570217563
andrewrk
yeah and hryx, I know you're busy these days, but you were interested in the doc generation. you will be pleased to know we now have -fdump-analysis

1570217770
tgschultz
...did alignment rulse for structs change? Somehow I have a union with an alignment greater than both of its possible components.

1570217880
andrewrk
tgschultz, major bugs in alignment of structs were fixed

1570217886
companion_cube
torque: manpages are good for docs

1570217897
andrewrk
companion_cube, windows users

1570217908
andrewrk
also mobile users

1570217920
andrewrk
tgschultz,

1570217927
companion_cube
I mean, you can have both

1570217933
companion_cube
web hosted docs are a no brainer

1570217941
companion_cube
but having local manpages is also super nice

1570217946
tgschultz
major bugs were fixed, but how can I have a union with align(16), when neither component has align(16)?

1570217956
andrewrk
tgschultz, yeah that seems wrong

1570217970
tgschultz
it's an extern union if that makes any difference

1570218174
tgschultz
something is deeply wrong here. @compileLog confirms that alignment of the struct is 8 as expected, but if I try to ptrCast to it from something (also align(8)) it complains that *Node is actually align(16)!?

1570218352
tgschultz
And this is happening immediately after doing an alignCast to *Node

1570218362
tgschultz
alignOf(*Node) that is

1570218375
tgschultz
so it feels like alignCast is doing something wrong

1570218431
tgschultz
No, I have that backwards, ptrCast is misinterpreting the alignment somehow

1570218445
tgschultz
alignCast aligns the ptr correctly

1570218455
tgschultz
but prtCast thinks *Node is 16

1570218473
mq32
andrewrk, i'm trying to create a LoggingAllocator with this:

1570218474
mq32
var logger = std.heap.LoggingAllocator.init(std.heap.c_allocator, try std.debug.getStderrStream());

1570218485
mq32
getting an error: error: expected type '*std.io.OutStream(anyerror)', found '*std.io.OutStream(std.os.WriteError)'

1570218492
mq32
is this an expected error or a bug?

1570219084
n_1-c_k
I think I've succeeded in creating an array of strings, but I don't know how to read them -

1570219174
mq32
n_1-c_k, this code has some problems

1570219181
mq32
first: you don't know how long your strings are

1570219220
n_1-c_k
I do too! 5 and 6. So there.

1570219265
n_1-c_k
Do you mean I have to construct something that remembers each string's length?

1570219269
mq32


1570219270
mq32
yes

1570219276
mq32
use slices, not pointers of unknown length

1570219282
mq32
(you cannot find out the length later)

1570219292
mq32
also your slices have to be const as string literals are not mutable

1570219393
n_1-c_k
mq32, I can't read the paste without javascript.  But thx for the pointers, maybe I can figure it out from there.

1570219428
mq32
fn make_strings() [2][]const u8 { return [2][]const u8{ "first", "second" }; }

1570219431
mq32
this is the important part

1570219499
tgschultz
you can print c-strings IIRC, but I don't remember the fmt flag for it

1570219529
tgschultz
of couse in this case those strings are not c-strings, so that'd end badly

1570219583
n_1-c_k
mq32, tgschultz, thanks

1570219672
n_1-c_k
oh that worked! thanks mq32

1570219680
mq32
you're welcome!

1570219709
mq32
i'm writing a OBJ parser right now and i'm very pleased about the zig experience

1570219722
mq32
except for some stuff i didn't understand it all worked pretty well :)

1570219974
n_1-c_k
I'm trying to write fizzbuzz...

1570220006
mq32
good luck!

1570220015
mq32
zig is really a well done language :)

1570220025
mq32
i have a pleasant experience on more complex stuff

1570220721
traviss
m32: just a guess about your earlier // zig fmt: off and // zig fmt:on.  did you try removing the spaces? ie '//zig fmt: off' and '//zig fmt:on'

1570220731
mq32
yeah

1570220735
mq32
i tried a lot of permuatations :D

1570220776
traviss
is that feature not yet implemented?

1570220839
mq32
have to investigate that later

1570220846
andrewrk
traviss, it's implemented and tested:

1570220879
traviss
ok. thank you

1570220894
andrewrk
I think it only works between declarations; not inside a function for example

1570220940
mq32
andrewrk, that explains a lot

1570220953
mq32
i wanted to prevent zig fmt to change my matrices

1570220963
mq32
but i have to stop changing pretty much the hole test section

1570221905
jaredmm
Well, I was able to get libepoxy linking on Windows using the x86 library in a C program, but not the x64 lib. Visual Studio has a literal mess of settings, though, so I could've missed something. In short: I have not enjoyed my Windows time so I think I'll go back to doing Zig stuff on Linux.

1570221995
andrewrk
jaredmm, package manager will entirely solve this

1570222062
mq32
andrewrk, i'm so looking forward for finally making crossplatform games without having to think about "how to compile stuff for windows"

1570222078
jaredmm
Yeah, but it will still bother me not knowing the why. There's a non-zero number of projects using epoxy on Windows. I can't imagine they're all x86.

1570222379
tgschultz
this is crazy. `@compileLog(@alignOf(*Node)); const node = @ptrCast(*Node, aligned_ptr);` => 8| error: cast increases pointer alignment note: '*Node' has alignment 16. Literally the next line.

1570222398
tgschultz
And it doesn't appear in a more minimal use case

1570222408
tgschultz
*test case

1570222495
mq32
is there a best practice for putting stuff with allocations into an ArrayList?

1570222811
tgschultz
Oh, I may have stumbled onto something. This is an extern union, but in trying to build a test case I get an error about the wrong field being set. Extern unions shouldn't have a tag.

1570225338
mouseghost
how am i supposed to guess where do i look for a function that does a certain thing?

1570225477
mq32
just use grep on the lib/std library :D

1570225507
mikdusan
ask. right now searching lib/std/ for public decls like `pub fn` is the way to go. for now, avoid looking at `std.os` as that's a platform abstraction.

1570225518
mouseghost
mq32, but then i have to guess what should i tell grep to search for D:

1570225526
mq32
yeah, that's true

1570225532
mq32
i'm working with this scheme right now

1570225545
mq32
also using the great "autocompletion" by ceymard

1570225547
mq32
it helps a lot

1570225554
mouseghost
well so ive been wondering about file reads mikdusan

1570225562
mouseghost
theres std.os.read

1570225566
mouseghost
and also something in event

1570225585
mq32
i'm using std.fs.File right now

1570225588
mq32
and it works pretty well

1570225616
kahiru
hi, are there any exercises to get one to know the language? Something along the lines of clojure koans or rustlings for rust?

1570225628
mouseghost
oooo i second that^!!

1570225650
mikdusan
mouseghost: so std.fs for filesystem paths, std.fs.File for open/close, std.mem for byte array related helpers (like strings)

1570225703
mouseghost
is there perhaps a parser to maybe get functions in a file thne or something :/?

1570225718
mouseghost
ooh

1570225727
mouseghost
its like grep pub fn <func>?

1570225771
mq32
kahiru, mouseghost: do you have programming experience in other programming languages?

1570225781
mq32
i started learning zig by reading the manual and implementing a raycaster

1570225786
mq32
now my second project is a 3D game

1570225792
mouseghost
yep i do have some experience

1570225793
mq32
implemented a basic 3D math lib and an OBJ parser today

1570225796
mouseghost
not with raycasting though

1570225808
mq32
zig has a high "just works" experience factor

1570225858
kahiru
I do have some experience, but lack pet project ideas :)

1570225918
andrewrk
std lib doc gen proof of concept:

1570225982
mouseghost
nice

1570226013
mouseghost
mq32, that sounds like a raycaster is easy

1570226022
mouseghost
it doesnt seem to me at least tbh

1570226571
mq32
mouseghost, it actually is

1570226590
mq32
it's some basic math (not even "fancy" math) and some bitmap operations (also not that fancy)

1570226593
mouseghost
tbh i think ive might seen your post about it really

1570226639
mouseghost
mq32, how do you get the intersection?

1570226646
mouseghost
isnt that kinda advanced

1570226649
tgschultz
raycasters are pretty easy:

1570226656
kllr_sbstn
you could also port another project to zig, especially libraries

1570226668
tgschultz
the math is pretty basic trig

1570226692
mouseghost
tgschultz, is that a raycaster?

1570226738
tgschultz
yes...? Or are you thinking of a raytracer?

1570226775
mq32
raytracers aren't much harder actually :D

1570226784
mouseghost
uh i still have trouble understanding how does a rt work

1570226786
tgschultz
raytacing is a bit more complicated, but mostly it's just a much higher load

1570226798
mouseghost
oh

1570226805
mouseghost
i didnt notice this difference

1570226818
mq32
mouseghost, for basic raytracing, you need three "hard" functions:

1570226823
mq32
"intersect sphere with ray"

1570226826
mq32
"intersect sphere with plane"

1570226837
mouseghost
yeah i dont know about these :/

1570226841
mq32
*"intersect plane with ray"

1570226849
mq32
"create ray from screen space"

1570226849
tgschultz
raycasting is the technique used by wolfenstein 3d. For taht you need 'intersect ray with grid cell'

1570226866
mq32
the intersection functions are all pretty easy and can be found on scratchapixel or wikipedia

1570226902
mouseghost
hm

1570226928
mouseghost
i like exploring and understanding things myself though q-q

1570227013
mouseghost
oh yes i did raytracing then

1570227051
mouseghost
i didnt figure out 2 things: how do i manage with things before my camera and how do i work out with depth

1570227094
mouseghost
edit: it was perspective projection not rt

1570227127
mq32
ah

1570227131
mq32
so rasterizer

1570227180
mouseghost
well i just took R3 points and made them into R2

1570227186
mouseghost
with some rotations

1570227203
mq32
hehe

1570227212
mq32
then you divide xy by z and have projection!

1570227223
mq32
*perspective

1570227230
mouseghost
its late here

1570227236
mq32
here as well

1570227332
mouseghost
a new day just started so i might just as well head off now; have a good night mq32, thanks for all the info too

1570227382
mq32
are you in MESZ?

1570227410
mouseghost
mq32, MESZ=CEST?

1570227420
mq32
ah yeah :D

1570227423
mouseghost
then yes

1570227425
mq32
sorry, i think MESZ is german

1570227438
mouseghost
yeah it seemed to me that it was so

1570227494
mouseghost
mq32, here, i could call it, "ÅšECL" :E

1570227497
mouseghost
but thats my invention

1570227502
mouseghost
(i think)

1570227669
mouseghost
yeah well, goodnight!

1570227962
tgschultz
well, I've found bugs that might be the source of my woes for everything but the bmp library, where I barely have a clue. Seems to be something with codegen and packed structs with non-mod8 bit widths. I'm going to have to put in some kind of automated testing of this stuff in the future.

1570228673
mq32
tgschultz, what does your bmp library do?

1570228686
tgschultz
it loads bmp files

1570228725
mq32
oh

1570228728
mq32
my condolences

1570228732
mq32
bmp is a hell of a format

1570228739
mq32
even if people always say "it's easy"

1570228746
tgschultz
the complication is in how it allows you to load it to any pixel format you want from any supported format

1570228755
mq32
yep

1570228815
tgschultz
the bmp formats are mostly straight forward, the hard part was designing it for code reuse, not requiring an allocator, and implementing Huffman1D support.

1570229119
tgschultz
I had a png library too at one point, but I decided to rewrite it after 0.4.0 (so it didn't need an allocator, made it cleaner, etc), and I got busy with other things before doing that.

1570229247
mq32
okay how do you do a png library without allocator?

1570229680
mq32
okay

1570229683
mq32
my OBJ loader works:

1570229732
scientes
sweet

1570229737
tgschultz
the same way as a bmp lib without an allocator. You use a state machine that the caller can call repeatedly to fill buffers until the image data is completely read. Adam7 might complicate that, but I hadn't even gotten as far as rewriting the zlib decoder so I hadn't thought much about it.

1570229806
mq32
ah neat

1570229813
mq32
so you have a callback "setPixel" or simlar?

1570229828
mq32
scientes: the obj loader is actually only 220 lines of code

1570229867
scientes
mq32, if it doesn't have low resolution initial versions, its a totally linear decode

1570229896
scientes
so except for remembering the zlib dictionary (which is very small), you can forget everything you have written

1570229910
mq32
what do you mean by "low resolution versions"?

1570229920
scientes
png supports progressive

1570229928
mq32
ah, okay

1570229946
scientes
in that case you probably want to skip to the highest resolution version

1570229972
mq32
i though you were talking about the OBJ loader :D

1570230066
scientes


1570230087
tgschultz
IIRC the high res version is still based on data only available in the previous passes with Adam7. The zlib decoder will require a static 30k ring buffer, but it is ok because it is static.

1570230097
scientes
yeah interlacing is going to be complicated

1570230118
scientes
i think you will need a full buffer of the result image

1570230126
scientes
which is kinda obvious you will need anyways

1570230138
tgschultz
I'll probably just make the caller handle that if they care. If they don't there will be a "load" that takes an allocator and does it for them.

1570230185
tgschultz
almost certainly the caller will put the data into a full-image destination, but consider cases of just processing pixels to change colors or embed stegnographic data.

1570230219
tgschultz
also, it can work at comptime if it doesn't call an allocator.

1570230251
scientes
we need a comptime allocator...

1570230259
scientes
actually, it can't

1570230277
scientes
oh maybe

1570230283
scientes
comptime is limited in what you can take a pointer to

1570230291
scientes
this can be fixed

1570230306
tgschultz
andrewrk and I have an open issue about comptime allocator

1570230369
tgschultz
though my experimentation with loading a bmp at comptime proved ludicrously slow

1570230419
scientes
I believe it

1570230420
tgschultz
so in reality pre-processing in a build step is going to be much better anyway

1570230513
scientes
JIT comptime is a LONG ways out ;)

1570231084
mikdusan


