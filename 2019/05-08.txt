1557274168
daurnimator
uh that was meant to be @ TheLemonMan, but they left

1557275166
scientes
is there a way to query if run-time safety is on?

1557275236
scientes
I guess i just have to use "unreachable"

1557275239
scientes
that will do it

1557275917
daurnimator
scientes: (I assume) unreachable is also a hint to the optimizer... that doesn't sound like a good way to check...

1557275933
scientes
daurnimator, its actually how assert() is implemented

1557275945
scientes
daurnimator, in debug mode unreachable is reachable, and results in a panic

1557276035
daurnimator
scientes: yes. and in release mode; it assumes that the assert passes; and optimizes code based on that assumption..

1557276046
scientes
that is exactly what i want

1557276055
scientes
i'm just using it for a sanity check

1557276062
scientes
but i can't use assert because it is more complicated

1557276079
scientes
or rather don't want to

1557278177
scientes
why can't i use enum literals with @typeID()?

1557278186
scientes
/home/shawn/git/zig/std/math/average.zig:9:24: error: incompatible types: 'builtin.TypeId' and '(enum literal)'

1557280750
companion_cube
hmm so one can use anonymous structs (say, in unions) but it seems impossible to initialize them

1557280782
companion_cube
like `TheUnion {.Foo = <how to name the struct here?> }`

1557281123
hryx
companion_cube: const x = struct{a: u8}{.a = 24};

1557281149
companion_cube
so I'd have to repeat the type def? better name it

1557281506
daurnimator
companion_cube: or via a complex @typeInfo(TheUnion) expression....

1557281636
companion_cube
yeah, doesn't seem very convenient

1557281662
companion_cube
(ok, the stdlib could use some docs :D  I guess it's only 0.4 though)

1557281735
daurnimator
companion_cube: doc comments are welcome in PRs. actually generating docs for them is waiting for stage 2.

1557281751
companion_cube
I'm looking at the source

1557281753
daurnimator
andrewrk: I think #2400 should just be closed?

1557281757
companion_cube
can't really find how to write to a File :D

1557281786
companion_cube
(or rather, how to have a print function taking a std.io.OutStream and using it on stdout)

1557281862
daurnimator
companion_cube: you want to write the print function?

1557281873
daurnimator
or you want to call it?

1557282084
companion_cube
to write it, it just takes an outstream, right?

1557282092
companion_cube
not sure if I can be that generic though

1557282311
daurnimator
companion_cube: take a look at std.fmt for the signature of output functions....

1557282344
daurnimator
companion_cube: also note that if you give your struct a member 'format', then std.fmt will use it when it prints your object

1557282363
daurnimator
s/member/method/

1557282698
companion_cube
ah. interesting

1557282711
companion_cube
does it comptime-introspects the struct to find that?

1557282776
companion_cube
ok so the idea is that there's no generic way of printing to something, except by taking a full closure

1557282813
companion_cube
I find it a bit sad that the syntax uses `if (foo) bar` instead of `if foo { bar }` :/

1557282838
companion_cube
(the second is not longer and avoids the goto fail kind of error)

1557283010
hryx
companion_cube: true, but the goto fail thing won't happen as long as you zig fmt on save. which everyone should!

1557283028
hryx
and without that syntax you wouldn't be able to do some of the nice expression-based assignment zig allows

1557283050
companion_cube
what do you mean?

1557283055
hryx
const x = if (a) 1 else 2;

1557283066
companion_cube
if a { 1 } else { 2 }

1557283068
hryx
you could do it with curlies but you'd need a blk: in there

1557283082
companion_cube
yeah well that's really the decision that irks me, tbh

1557283416
hryx
Originally I thought the ability to assign from expressions with branches like that was just cosmetic, but I've recently learned that there is a remarkable side effect of that feature

1557283438
daurnimator
yes! I had several huge issues with it in a coffeescript codebase I once worked with

1557283464
hryx
it results in you being able to assign almost everything to `const`

1557283485
daurnimator
also it means things often escape scope

1557283516
daurnimator
also if you take it through to the conclusion: what do for loops return? the usual answer is a collection of all the last things in the block: tada: implicit allocations

1557283538
hryx
yeah but zig doesn't do that

1557283550
hryx
probably for that very reason

1557283562
daurnimator
yes I know. but I'm saying what would happen if you took companion_cube's proposal to the 'endgame'

1557283604
companion_cube
why would you implicitly allocate?

1557283623
daurnimator
oh wow look what I found.

1557283639
companion_cube
just make a for loop return ()

1557283647
companion_cube
I mean void

1557283675
daurnimator
oh, and check out his next comment in that issue

1557283682
daurnimator
has prime examples of the mess it causes

1557283699
daurnimator
andrewrk: fun that you had some of the same experiences as me back in that era :)

1557283782
companion_cube
implicit return is not a problem when you have types, in my experience

1557284038
companion_cube
but I've already epxressed my views on that here, anyway

1557287240
mikdusan
how do debug (lldb) a failed `zig build`. massive stack trace but the process exits to os before i can debug

1557287498
mikdusan
ah nm. got it.

1557290462
ky0ko
so, i'm trying to figure out how to properly import a c header file from within zig, that is within the same project

1557290473
ky0ko
basically, i have an existing project i'm trying to convert to use zig in part of it

1557290508
ky0ko
i have a zig file under a subdirectory inside src/ and a header file in another subdirectory, and i'm not sure how to import that correctly.

1557290534
ky0ko
i have a boiled-down example version of what i'm trying to do in a repository on github:

1557290534
ky0ko


1557293677
daurnimator
ky0ko: add: obj.addIncludeDir("./");

1557293689
daurnimator
(at line 6 of build.zig)

1557293736
daurnimator
ky0ko: ps, don't commit the zig-cache directory: add it to .gitignore

1557295749
ky0ko
yeah, that's in the .gitignore in the real project, this was just a quick example copied out from it

1557295756
ky0ko
that seems to have done the trick, thanks a bunch!

1557297861
hryx
Before I get to profiling, I want to get CI passing, but after a minor change to the parser error handling, I'm running up against a panic in the IR analyze phase

1557297874
hryx
can anyone tell what might be going on?

1557297919
hryx
the line that fails is ir.cpp:21097 - `assert(start_value->value.type->id == ZigTypeIdErrorSet);`

1557298275
hryx
Oh, I think I have a clue. It looks like it has to do with switching on an error type. I'll see if I can work around it then create a minimal case for an issue

1557298648
hryx
Augh! scientes: you already found it previously:

1557302939
IntoxicatedHippo
Is there a way to pass arguments to lld from build.zig?

1557318688
SamTebbs33
Thanks andrewrk, I'll take a look at it. I'm planning on porting my Zig kernel to aarch64 and arm sometime in the future so that should reveal some holes (it being freestanding may limit that though)

1557318735
SamTebbs33
TheLemonMan, do you have a link to that patchset handy?

1557328105
tgschultz
bug that took me a while to work out: Zig never passes a copy, so passing a struct that is actually a pointer through a type erased Fn to a function that expects a pointer actually gets a pointer to the pointer. That's what I get for trying to trick the type system I guess.

1557329453
SamTebbs33
Understanding that takes some mental gymnastics :D

1557329702
SamTebbs33
Is the general practice to assign an issue to the person who's going to tackle it? If not then I suggest that be the procedure as that means people don't have to duplicate work or ask "Is anyone working on this?"

1557331036
kristoff_it
hi all, one question: I'm trying to use a C variadic function from Zig. Compilation succeeds but I get a segfault at runtime. I tried to troubleshoot it a little but the code works except for the line where I call the variadic function. Is this something that is not fully supported yet?

1557331361
tgschultz
IIRC calling C w/ varargs works, but it has been a long time so I'm not actually sure. Are you sure the extern is declared with the correct calling convention?

1557331985
kristoff_it
the function type is produced by the automated header file translation and is as follows: extern fn(?*RedisModuleCtx, [*c]const u8, [*c]const u8, ...) ?*RedisModuleCallReply

1557332005
kristoff_it
all the the types mentioned are opaque

1557332161
kristoff_it
btw, to give more context: i'm writing a module for Redis, so I'm using the headerfile provided by Redis, compiling a shared object file, and loading it. it works, except when I call that function, which causes the server to segfault

1557332595
mikdusan
kristoff_it: zig can call c vararg functions. i've used printf with no trouble.

1557332736
kristoff_it
ok thanks, then I'll investigate more other possibilities

1557332750
mikdusan
are you sending any strings from zig to c ?

1557332809
mikdusan
make sure they're null terminated. zig literal strings currently are not nullz and use explicit syntax `c"hello world"` for that.

1557332862
tgschultz
that does sound more likely than my calling convention hypothesis

1557333063
mikdusan
kristoff_it: and i'm not sure if there is a better way but for runtime strings std.Buffer can be used as it maintains nullz for all its contents. Buffer.init(....); buf.toSliceConst();

1557333456
tgschultz
andrewrk: I think I might take antoher crack at #1848 (Interface Reform) with a new, slightly different, pattern that's closer to what Hejsil describes in #1829 and will hopefully also take care of the things I originally ran into on the first pass that made me uncomfortable.

1557333489
andrewrk
tgschultz, sounds good to me

1557334516
tgschultz
on another note, does anyone else wonder if separating the stdlib into 'stuff that only requires the language' and 'stuff that requires OS support' makes any sense?

1557334557
andrewrk
SamTebbs33, the only one here who has a reliable amount of hours per week to spend on zig is me, so using GitHub issue assignments is kind of broken. everything is fair game until it lands in master branch. and even then it's still fair game, and can be improved upon

1557334611
andrewrk
what I mean by that is that assigning an issue to a volunteer is not really how it works, people are donating their time as they see fit and make no promises. so yeah it's a bit messy and sometimes toes get stepped on

1557334670
andrewrk
overall I think it works fine. we can re-evaluate if the zig community becomes 10x bigger

1557334743
andrewrk
kristoff_it, one thing to check, are your strings properly null terminated?

1557334756
andrewrk
we don't have type system protection for detecting that problem yet

1557334842
kristoff_it
thanks all for your suggetions, as it always happens, guess what, it was my fault, something completely unrelated

1557334933
kristoff_it
andrewrk: there is though a real problem with the automated header file translation, some of it is probably about unsafe code in the original redismodule.h file, but Zig 0.4.0 introduced new problems. Is it ok if I open an issue about it?

1557334945
andrewrk
kristoff_it, yes please do

1557335364
Sahnvour
tgschultz, makes sense to me, do you see it as a stdlib implementation detail (ie. putting source files into 'freestanding' part and 'os-enabled' part) and/or as a user-facing dichotomy (via namespaces or whatever) ?

1557336180
tgschultz
both I guess? From an implementer standpoint it would be nice to know precisely which things I have to implement and from a user standpoint I want to know what isn't going to be available in freestanding.

1557336347
tgschultz
I think it could be accomplished by moving stome parts of standard under os. std.os.heap would have DirectAllocator, for instance, and std.heap's other allocators would move to std.mem, std.heap, or std.mem.heap or something.

1557336487
andrewrk
kristoff_it, I think there are just a couple small issues left, until @cImport is really streamlined

1557336530
andrewrk
tgschultz, I do like having the stuff that depends on an OS namespaced under std.os

1557336600
Sahnvour
I think that's a good idea, it would probably be clearer where to find things, and what to expect

1557338581
mikdusan
tgschultz: the more i think about it the more i like idea move os-adapters out of `std`; the posix abstraction falls into the category of os-adapter just a more abstract one than linux.

1557339147
andrewrk
I'd rather keep it to only 1 standard library

1557339193
andrewrk
but open to reevaluating that question during the std lib audit and once we have a package manager

1557341130
tgschultz
I think it could be accomplished by moving stome parts of standard under os. std.os.heap would have DirectAllocator, for instance, and std.heap's other allocators would move to std.mem, std.heap, or std.mem.heap or something.

1557341134
tgschultz
ignore that

1557341141
tgschultz
up + enter in wrong window

1557341183
tgschultz
why is that even a thing in an irc client?

1557341789
very-mediocre
tgschultz: still a huge fan of #1669

1557341857
very-mediocre
was reading it again and it's just awesome

1557342270
hryx
I really like #1669 too

1557342389
very-mediocre
a lot of languages shoehorn in a similar (but more limited) kind of functionality in the form of decorators, which i hate

1557342460
very-mediocre
1669 feels like the right way

1557342643
tgschultz
thanks. occassionally my crazy ideas happen to be good ideas. this is merely coincidence.

1557342688
very-mediocre
I remember the conversation when you came up with it, that was pretty productive

1557342902
hryx
tgschultz: up & enter in an IRC client is spooky dangerous :<

1557343048
tgschultz
I'm still trying to work out how to turn it off

1557343070
tgschultz
ah, there it is: max editbox history: 0.

1557343676
torque
any reasonable irc client constrains history on a per-channel basis so at worst you will be resending messages

1557343940
donpdonp
pub fn has(key: []u8) bool {}; has("key") => expected type '[]u8', found '[4]u8'

1557343952
donpdonp
whats the right way to pass the string?

1557344138
donpdonp
ah its has(key: []const u8)

1557346415
tgschultz
donpdonp yeah, arrays do not implicitly cast to slices, but they do implicitly cast to immutable slices

1557346457
tgschultz
if you needed it mutable:  has(&"key") or has("key"[0..]) should work

1557346482
tgschultz
though... actually because they're literals they wouldn't really be mutable

1557346810
donpdonp
nod. whats zig doing for string compare these days

1557346872
andrewrk
zig doesn't have strings

1557346910
donpdonp
i was waiting to hear that :). okay. is there a simple byte-wise compare for var str:[]u8 and "value"?

1557346925
andrewrk
you can compare bytes with std.mem.eql, and thanks to UTF-8 this will suffice for encoded strings

1557346930
donpdonp
ah.

1557346939
andrewrk
recommended parameter name for that is bytes: []u8

1557346965
donpdonp
nod. thx!

1557347013
donpdonp
im using pthreads and gtk+3 and its been great working with zig's c-interop.

1557347058
andrewrk
glad to hear it. I decided to do some more work on that today

1557347277
tgschultz
andrewrk: is it allowing comparison of [*c] and null? because that made me abandon plans to convert win32 bindings to use [*c].

1557347310
andrewrk
yeah I just pushed that

1557347314
tgschultz
sweet

1557347349
andrewrk
if you make bindings then you shouldn't need [*c]

1557347357
andrewrk
[*c] is exclusively for auto-generated bindings

1557347517
andrewrk
if you found a use case for [*c] that isn't auto-generated bindings, that's a design flaw in the language that needs to be fixed

1557347530
andrewrk
I'm considering making the syntax for [*c] worse so that people stop thinking they should use it

1557347552
andrewrk
maybe [*unsafecpointer]

1557347570
companion_cube
[<<*c ohnoes>>]

1557347752
cameris
Hi, could someone explain to me, why EBADF is always a race condition (

1557347757
tgschultz
the bindings were autogenerated, I was just going to update them so they were easier to work with. Casting to `*Type` to `?*Type` because a function takes `?*?*Type` is annoying.

1557347873
andrewrk
tgschultz, that makes sense. with null terminated pointers that would be `?*[*]null Type` and you wouldn't need the cast

1557348004
andrewrk
if it's really a `?*?*Type` it's still better to go through the type system. not doing that takes away zig's understanding of what's going on, and the compiler can do less things on your behalf, such as safety and optimizations

1557348107
andrewrk
cameris, did you see this discussion?

1557348153
andrewrk
EBADF is essentially use-after-free for file descriptors

1557348182
andrewrk
once a file descriptor is closed, the same number can get used again with open()

1557348508
scientes
double-free (double-close) is also a bug

1557348520
scientes
for the same reasons

1557348549
scientes
and re-use is also quite likely, because the lowest available fd is always used

1557348631
cameris
andrewrk, yes, have seen that. just thought race condition is/meant something different.

1557348828
cameris
something like described in fcntl(2) for FD_CLOEXEC.

1557348867
tgschultz
andrewrk: it's almost always just **Type, but because c all pointers are nulable. The annoying thing is that `&thing` where `@typeOf(thing) == *Type` is `**Type`, which will cast to `?**Type` but not `?*?*Type`.

1557348988
andrewrk
tgschultz, isn't the correct thing to do here to make var thing: ?Thing = null; foo(&thing);

1557349003
andrewrk
sorry, var thing: ?*Thing = null;

1557349047
andrewrk
otherwise, ?*?*Thing is incorrect and it should be ?**Thing

1557349094
tgschultz
...yeah, I suppose that's more succinct. I've gotten so used to inferring the type I sorta forgot I could just specify it.

1557349137
andrewrk
cameris, it's a race condition because the standard library - and by default convention all zig libraries - are meant to exist in a potentially multi threaded environment

1557349166
andrewrk
so if one thread gets EBADF, then that means based on another thread's actions, that EBADF could have actually been a "success" but did the wrong action

1557349550
cameris
ah, with this assumptions that makes sense. I was locked into somthing like

1557351919
Sahnvour
andrewrk, how's posix behaving DirectAllocator regarding thread safety ? My understanding is that there's currently no particular effort towards making it thread-safe.

1557351943
andrewrk
master branch DirectAllocator is in fact thread safe

1557351961
Sahnvour
how does it achieve this?

1557351989
andrewrk
on posix it doesn't have any state

1557352047
andrewrk
on windows it uses atomic operations to make the first allocation grab the heap handle

1557352084
Sahnvour
meaning we are relying on the eventual internal synchronisation from the posix API?

1557352119
andrewrk
I'm not sure what you're asking - DirectAllocator directly uses the mmap/munmap API, which is thread-safe

1557352165
andrewrk


1557352214
Sahnvour
that's my point; it may occur that DirectAllocatr makes several calls to mmap/munmap during the same realloc/shrink call; does this handle multi-thread correctly if for example several threads are allocating through it at the same time, interleaving m[un]map calls?

1557352295
Sahnvour
I'm asking because of the comment of emekoi on #2249, where I assumed there was nothing special already done about thread safety (given that DirectAllocator has no state in zig user side)

1557352366
andrewrk
it does handle multi-threading correctly - most calls map exactly to 1 mmap/munmap. the edge case is for a very large alignment, in which case it overallocates with mmap and then munmaps the extra stuff, which is thread safe

1557352609
Sahnvour
I see

1557352642
Sahnvour
I think the windows version I wrote might need a small lock then ... disappointing

1557352823
Sahnvour
but probably only in the case where we request an alignment greater than page_size

1557353193
andrewrk
Sahnvour, if it comes down to that, we can have 2 versions: ThreadSafeDirectAllocator and SingleThreadedDirectAllocator. on posix systems they'll be identical. on --single-threaded builds they'll be identical. on multi-threaded windows builds it would do something

1557353442
Sahnvour
that's an option, I'll think about it in the next days and try to find examples of what we want to do

1557353508
hryx
andrewrk: I watched your kcachegrind video, thanks for the tips. Didn't get to try it last night, but will tonight

1557353519
hryx
did get CI passing last night though for the parser branch :>

1557353562
andrewrk
ooohh party time

1557353567
andrewrk
that's such a great feeling

1557354187
hryx
sure is, especially on the 121st commit

1557354622
andrewrk
hryx, and now for another big test: does zig fmt work on the entire standard library?

1557354637
andrewrk
(careful, don't let a bug clobber your work!)

1557355840
andrewrk
hryx, that's a nice fat +2,888 −3,428. love that delta of negative 540 lines

1557355873
hryx
yeah! I'm happy about the size and indentation impact

1557355898
hryx
aww, zig fmt on stdlib was close. it tripped up on an async fn pointer struct member

1557355910
andrewrk
I can't blame you for that

1557355918
andrewrk
that's sort of in flux

1557356091
hryx
andrewrk: I has opened the gates

1557356103
hryx
(ready for review)

1557356564
mikdusan
doe anyone have handy an array permutation example written in zig?

1557356872
daurnimator
hryx: yeah 1669 is good IMO.

1557357404
andrewrk
it looks like this proposal is very popular within the zig community

1557357522
andrewrk
well this bug fix was long overdue:

1557357528
andrewrk
sorry bout that everybody

1557357731
hryx
🙇🏻‍♀️ woop! now I can stop hovering over ctrl+C when testing

1557357959
daurnimator
andrewrk: in particular, I like this variant:

1557358084
andrewrk
this proposal tackles generics - at the same time I want to consider the proposal, if any, which will tackle runtime interfaces / OOP / virtual dispatch

1557358098
andrewrk
it's likely they will be tightly coupled proposals

1557358135
andrewrk
oh daurnimator you were asking for ideas on contributing, and I think I may have something that would interest you

1557358146
daurnimator
andrewrk: still working on the generic allocator :P

1557358150
andrewrk
let me know if I have correctly understood what you are looking for :)

1557358160
andrewrk
oh yeah that's really good too. I'll still throw this out there for you though

1557358192
daurnimator
andrewrk: sure

1557358198
andrewrk
the idea is to make a proof of concept GUI application. in opengl or whatever, implement a bunch of widgets. buttons, scroll bars, dockable panes, menus, etc

1557358218
andrewrk
first do it with status quo zig. @fieldParentPtr or whatever else makes sense. if it's painful, good, then we found an important use case

1557358219
daurnimator
andrewrk: re: virtual dispatch. I'm still not sure about how methods and fields share a 'namespace':

1557358254
andrewrk
from there that proof-of-concept becomes a very useful test bed for any proposals about virtual dispatch

1557358316
daurnimator
andrewrk: a GUI application is pretty foreign for me.... and has dependencies on many other tasks I think.

1557358334
andrewrk
fair enough

1557359206
mikdusan
andrewrk: unfortunately 9c12237 doesn't fix #2447 -->

1557359277
andrewrk
mikdusan, I count 32 frames, that means it's working correctly. the other part to this is the issue Sahnvour linked

1557359294
andrewrk
1923

1557359303
mikdusan
andrewrk: ah ok!

