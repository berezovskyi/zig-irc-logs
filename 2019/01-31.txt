1548907763
diltsman
For the compiler_rt functions, are there any processor specific ones that have been done?

1548911058
emekankurumeh[m]
that last commit has got me excited

1548926430
schme245
I'm curious as to why there is no increment or decrement operators in Zig (++ and --)

1548926447
schme245
I'm sure this has been asked a million times but I couldn't find anything about it in the GitHub issues

1548926675
kristate
schme245: it's a flaw of C and is prone to undefined behavior

1548926943
schme245
flawed in what way? is it more prone to undefined behavior than `x += 1`?

1548927374
kristate


1548927387
kristate
"it is not clear in what sequence the subtraction and increment operations should be performed. Such expressions generally invoke undefined behavior, and should be avoided."

1548927711
schme245
hah, I'd never thought to write something like `x - ++x` :D

1548927724
schme245
that clears thing up, thanks!

1548928679
kristate
schme245: cool

1548928695
kristate
you are very welcome

1548947325
schme245
are there intrinsics for stuff like AES-NI instructions or is inline assembly the way to go?

1548947325
schme245


1548956111
donpdonp
scientes: the reasoning ive seen before against x++ is that its not a pure expression, it has a sideeffect

1548956308
halosghost
it's also, less general than += while saving exactly 1 character of typing (3 if you like spaces around +=, I suppose)

1548956332
halosghost
plus, not all languages (looking at you C) make it abundantly clear what the difference between pre and postfix is

1548956416
halosghost
so, that one (three) character(s) of savings hides a bunch of otherwise revealed intention, and offers no other features

1548956426
halosghost
I use ++ in C plenty, but I don't miss it in Zig

1548960883
donpdonp
back to webasm: what Allocator's are available with --target-arch wasm32

1548960937
donpdonp
DirectAllocator for example throws /opt/zig/2019-01-29/lib/zig/std/heap.zig:116:21: error: Unsupported OS

1548960943
andrewrk
donpdonp, I'm pretty sure we can make direct allocator work on webasm

1548960974
donpdonp
andrewrk: roger.

1548961006
donpdonp
right now im carving out static chunks of ram with var ram = []u8{0} ** 256;

1548961106
andrewrk
donpdonp, there must be some kind of function you can call in wasm  to allocate heap memory

1548961189
donpdonp
there is memory.grow which adds another 64k page to the heap.

1548961200
donpdonp
no idea how id call that from inside zig though

1548961206
andrewrk
memory.grow, what is that, an instruction?

1548961229
donpdonp
yes a wast instruction (compiles to wasm)

1548961251
andrewrk
ok great

1548961300
andrewrk
I think we should be able to call that with inline assembly

1548961399
andrewrk
unfortunately, unlike mmap, this is global, and so if any other allocator (such as libc) tries to "own" the memory block, it will conflicct

1548961739
andrewrk
hmm it's not so bad, because there is no shrink. so multiple allocators cannot clobber each other

1548961862
andrewrk
donpdonp, good news by the way: llvm 8 rc1 is out; final release planned for feb 27. that's when zig officially gets wasm support in master branch

1548961900
andrewrk
(and that's when I will personally take steps to make sure it's working well)

1548962025
donpdonp
orly. i thought llvm7 was the bar for wasm. what does llmv8 add?

1548962084
andrewrk
The WebAssembly target is "experimental" in llvm7 and thus not enabled by default. So it is missing from, e.g. the apt packages in Debian  & Ubuntu. LLVM 8 promotes the WebAssembly target to non-experimental status.

1548962097
donpdonp
also i think zig is a good match for wasm because its accustomed to be a low-level language, but i love it for its type/pointer handling.

1548962109
donpdonp
andrewrk: ah i see.

1548962124
donpdonp
im looking forward to webpages being able to use a variety of languages

1548962141
donpdonp
though my own project here is putting the 'wagon' go webasm interpreter into an irc bot :)

1548962687
andrewrk
based on reading the wasm specs, it seems that zig's handling of out of memory conventions will be quite harmonious with web assembly

1548964787
schme245
andrewrk: quick question: are you interested in having symmetric / asymmetric crypto in the standard lib?

1548965127
andrewrk
schme245, hmm I'm not sure I have a quick answer. It's definitely welcome at least before 1.0. When 1.0 nears, there is planned a standard library audit, and a lot of stuff will probably move to third party packages

1548965296
schme245
makes sense. I'm playing around with some stuff at the moment, if they turn out OK then maybe I'll shot a PR

1548965308
schme245
if they get scrapped in 1.0 that's fine by me :)

1548965320
schme245
(if they get in at all that is)

1548965764
andrewrk
sounds good

1548967245
porky11
is there already some kind of ECS written in zig?

1548967277
andrewrk
porky11, what does ECS stand for?

1548967360
porky11
andrewrk, Entity Component System

1548967411
andrewrk
oh, yeah quite possibly. I know unique_id and MajorLag, and possibly also dbandstra are all working on games

1548967560
andrewrk
it's also a use case that people are talking about with respect to

1548967627
porky11
andrewrk, I also found this issue before writing here, but only one person mentions ECS once there

1548967682
andrewrk
porky11, I don't think you are going to find a high quality, stable, ready-for-everybody-to-use ECS package at this time

1548969308
MajorLag
I've only seen some simple demos of how ECS could be handled in zig, never a serious attempt.

1548971899
andrewrk
I'm about to do a short status update screen cast:

1548975147
andrewrk
now to fix the macos ci failure

1548975203
schme245
is there something like @ptrCast that casts to a slice?

1548975215
emekankurumeh[m]
does the window's ci run with windows 10?

1548975248
emekankurumeh[m]
schme245: i think `@ptrCast` should work on slices as well

1548975299
schme245
error: expected Pointer type, found '[]const u5'

1548975299
schme245
const pp = @ptrCast([]const u5, &p);

1548975301
schme245
you sure? I get this ^

1548975420
andrewrk
schme245, use slice syntax: p[0..]

1548975430
andrewrk
err, you'll need an end index too

1548975457
andrewrk
emekankurumeh[m], yes I believe so

1548975479
emekankurumeh[m]
if `p` is an array `&p` should work as well on HEAD

1548975534
schme245
`p` is a [32]u6

1548975553
schme245
there is no good reason for me to do this, I just wanted to know if it can be done :D

1548975912
andrewrk
schme245, you can slice and then ptr cast: @ptrCast([]const u5, p[0..])

1548975941
andrewrk
this is problematic however; you're relying on zig representing u6 and u5 the same way in memory, which is not guaranteed

1548975961
andrewrk
if you need to be able to do that cast, then I recommend using u8 instead of u6

1548975969
andrewrk
(and then not casting)

1548976053
schme245
error: expected Pointer type, found '[]const u5'

1548976053
schme245
const asdf = @ptrCast([]const u5, p[0..]);

1548976055
schme245
hmm

1548976098
andrewrk
hmm I thought I made @ptrCast allow casting between slice types

1548976112
schme245
➜  des git:(master) ✗ zig version

1548976113
schme245
0.3.0+5bf9ffdc

1548976347
andrewrk
schme245, ok try this:  @bytesToSlice([]const u5, @sliceToBytes(&p))

1548976405
schme245
no dice

1548976407
andrewrk
&p should work in theory but if that's not implemented, p[0..]

1548976407
schme245
error: expected slice type, found '*const [32]u6'

1548976407
schme245
const asdf = @bytesToSlice([]const u5, @sliceToBytes(&p));

1548976422
andrewrk
I'll open an issue for that

1548976480
schme245
:+1:

1548976490
andrewrk


1548976508
andrewrk
did that work for you?

1548976669
schme245
sorry, did what work?

1548976730
schme245
the @sliceToBytes(p[0..]) version?

1548976732
andrewrk
yes

1548976761
schme245
got this:

1548976763
schme245
error: expected '[]const u5' type, found '[]align(1) const []const u5'

1548976764
schme245
^

1548976764
schme245
const asdf: []const u5 = @bytesToSlice([]const u5, @sliceToBytes(p[0..]));

1548976765
schme245
note: slice type child '[]const u5' cannot cast into slice type child 'u5'

1548976768
schme245
const asdf: []const u5 = @bytesToSlice([]const u5, @sliceToBytes(p[0..]));

1548976985
andrewrk
oh, I got the API wrong:

1548976994
andrewrk
@bytesToSlice takes element type, not slice type

1548977253
schme245
that does the trick!

1548977633
andrewrk
that is a well-defined conversion, as long as you can comptime assert @sizeOf(u5) == @sizeOf(u6). which I'm pretty sure is going to be guaranteed in the language specification.

1548977875
schme245
neat!

1548977966
schme245
Zig is the first time I'm programming in a low-level language, I feel like I'm going mad with power, casting pointers left and right just to see what'll happen

1548977998
andrewrk
exciting :)

1548978187
schme245
yeah, really enjoying it so far, keep up the great work!

1548979100
andrewrk
alright that should fix the CI build

1548979179
kristate
andrewrk: thanks

