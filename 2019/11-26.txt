1574726633
andrewrk
pixelherodev, do we have an issue open for this "bring your own OS layer" concept?

1574728063
marler8997
I'm not sure why I'm getting the "lld:error: unable to find -lC" in this example:

1574728233
marler8997
maybe it's just my environment?  does this work for anyone else?

1574728355
andrewrk
marler8997, -lc vs -lC

1574728394
marler8997
zig run --library c test.zig and zig run --library C test.zig give the same result

1574728538
marler8997
also, when I use --verbose-link, it shows a command with "lld" but it looks like it's actualy running "cc" (when I look at strace, since lld is not a program in my PATH)...is this an error?

1574728562
mikdusan
marler8997: old version of zig or master?

1574728565
marler8997
master

1574728575
marler8997
0.5.0+cb38bd0a1

1574728948
andrewrk
marler8997: zig doesn't shell out to anything, not cc, not lld

1574728965
andrewrk
It does run itself in a child process, however

1574728971
marler8997
ah I see

1574728991
marler8997
now makes sense why I can't find the exec call :)

1574729008
andrewrk
It's in link.cpp

1574729027
marler8997
any idea about the lld error about missing -lC?

1574729055
andrewrk
It's -lc not -lC

1574729066
marler8997
I'm not specifying -lC

1574729074
marler8997
I'm just running zig run --library z test.zig

1574729081
marler8997
--library c (not z)

1574729089
andrewrk
In your code you are

1574729092
mikdusan
yeah i have a partial dup of it. also seeing "-lC"

1574729098
andrewrk
extern "C"

1574729103
marler8997
ooooooo

1574729112
marler8997
thank u!

1574729116
andrewrk
Np

1574729144
marler8997
derp

1574729268
mikdusan
I blame seeing `extern "C"` for years in that

1574729294
marler8997
yes, I've been poisoned by the Dark side

1574729319
fengb
There’s always redemption

1574729339
mikdusan
the zig way to redemtpion is through PRs. many PRs.

1574730197
frmdstryr
Is there something like a "noasync" keyword?

1574732708
frmdstryr
Also it appears that reading using the inStream doesn't work with the evenloop?

1574732764
frmdstryr
It just immediately exits with in std.os.read with EBADF

1574733464
andrewrk
frmdstryr, EBADF means your file descriptor is invalid

1574733488
andrewrk
and yep zig has a noasync keyword. currently it works on function calls only. more support is planned:

1574733870
frmdstryr
Do you still have the chat code from your video a few weeks ago?

1574733910
frmdstryr
Replace the self.file.read(&buf) with a stream and it'll the give EBADF error

1574734002
frmdstryr


1574734007
frmdstryr
gives a more interesting error

1574734014
frmdstryr
which probably explains it better

1574734063
frmdstryr
Or that's more likely unrelated

1574734109
andrewrk
frmdstryr,

1574734117
andrewrk
I'll be back in a bit

1574735390
frmdstryr
If I use os.read in an @asyncCall it works but not using file.inStream().stream

1574735706
frmdstryr
Also works if using file.read in an @asyncCall

1574735876
frmdstryr
So the only thing I can see here is that the file handle copied file to the instream is wrong

1574736117
frmdstryr
readHandle: 2496776

1574737083
frmdstryr
Pretty sure this is due to #591

1574737304
frmdstryr
The handle and ptr from the inStream fn is "inStreamHandle: handle=15 at 140725463643632" but in the InStream.readFn it is "Instream readFn: handle=2496712 at 139681109254640"

1574737652
daurnimator
frmdstryr: you need to take the addresss on line 49

1574737905
mikdusan
also if you look at andy's gist ust use self.file.read directly

1574738150
daurnimator
and if we merge stream mixins you'll be able to work on the file directly as well

1574738371
frmdstryr
So it should be "var stream = &self.file.inStream().stream;" ?

1574738549
frmdstryr
I want to use the readUntilDelimiter fn's

1574738571
daurnimator
frmdstryr: yep. or `const`.

1574738739
frmdstryr
That worked... can you explain why?

1574739039
daurnimator
frmdstryr: by doing `var stream = ` you made a copy of the stream member: which means its no longer in its struct. and hence you hit

1574739143
frmdstryr
Ah, ok. Thank you!

1574739746
andrewrk
hmm, I think with a couple more copy elision bug fixes, the codebase will be at a point where we can add compile errors for moving immovable fields

1574741142
companion_cube
andrewrk: are you familiar with ruby/crystal's blocks? They serve the same purpose as (some) closures, but (at least in crystal) are always inlined and can embed control flow structures, so you can `foo.each { |x| break unless x>0 }` or stuff like that

1574741163
companion_cube
it's a nice middle ground between full closures, and no higher-order constructs at all

1574741912
andrewrk
companion_cube, yeah, I used ruby at a company I used to work for

1574742241
companion_cube
(check out crystal, it has typing and is fast)

1574742276
companion_cube


1574742873
[rg]
reading documentation, what is meant by using stderr over stdout in the hello world

1574742902
[rg]
also how exactly is this portable, unless most os support these streams

1574743041
mikdusan
it's showcasing how `warn()` does not require error handling with `try`. versus `try stdout.print()` (or even `try stderr.print()`)

1574743112
mikdusan
as for portability, I suppose if an OS does not support streams, you'll either get an error, or if using warn() you'll never get an error. dealer's choice

1574743312
[rg]
thanks mikdusan

1574743751
andrewrk
it's planned to rename std.debug.warn to std.log.warn

1574743765
andrewrk


1574743775
andrewrk
ooh nice all the prereqs are done for this issue

1574743845
andrewrk
this issue is now contributor friendly

1574744030
mikdusan
andrewrk: the last merge #3743 you did, it shows as "Merge branch ...." where as one I did shows as "Merge pull request #3776..." in commit logs,

1574744039
mikdusan
is this because you did a few edits?

1574744115
mikdusan
ie: local workstation, then push.. as opposed to github buttons

1574744436
andrewrk
mikdusan, yes in this case it was because I merged the branch locally and pushed

1574744461
andrewrk
I didn't make any edits in this case other than rebasing against master (so that there was only 1 merge commit into master, rather than an additional merge master into the branch)

1574744480
andrewrk
but the reason I had it checked out locally was just to run the tests on windows

1574744511
mikdusan
thanks. I'm just trying to understand the logs WRT merges of multiple commits, their timestamps, etc.

1574744816
[rg]
is the documentation under the respective version all their is?

1574745120
mikdusan
[rg]: there is

1574745187
[rg]
thanks again mikdusan !

1574746742
lukeholder
ziggy the ziguana:

1574746778
daurnimator
andrewrk: 3155 though not everything I wanted was still mergable I think

1574746814
daurnimator
mmmm, maybe not because of the > TODO: check for un-encodable utf-8 first

1574750917
andrewrk
lukeholder, it's so good

1574750932
andrewrk
I definitely think he looks more like a ziggy than the other one

1574750940
andrewrk
the other one needs a different name

1574753665
daurnimator
andrewrk: feedback on 3715 addressed.

1574779011
dom96
if anyone here is interested in talking about Zig at FOSDEM, today is the last day you can submit your talk to the Minimalistic, Experimental and Emerging Languages devroom. (

1574781601
fengb


1574782033
mq32
fengb: YAPL? :D

1574782392
fengb
I kinda like to learn about these other low level languages

1574782548
fengb
Oof, the C interopt syntax is pretty bad

1574782555
fengb
`fgets(s pointer #As("char *"), size int, stream pointer #As("FILE *")) pointer #Foreign("fgets")`

1574782593
mq32
oof

1574782639
fengb
I spy hidden allocations >_>

1574782677
mq32
it's weird how much syntax of a language changes the feeling of language

1574782707
mq32
being a bit more verbose than muon doesn't hurt, it's really hard to navigate without syntax highlighting

1574782757
nairou
Does zig's std lib have any string-to-number conversions yet? Like atoi() in C. I see std.fmt to do number-to-string, but I'm not seeing the opposite.

1574782760
fengb
Zig's old sigil based syntax scared me away. I don't think I'd enjoy it half as much

1574782808
mq32
fengb, yeah, old zig code also looks weird

1574782817
mq32
Nairou: std.fmt.parseInt would be a candidate

1574782832
fengb
There's also std.mem.readInt*

1574782844
nairou
Oh nice, thanks

1574782930
mq32
what i really dislike about some programming language projects is the focus. i see a lot of "i wanna do a programming language, so let me create syntax and a language server first"

1574782952
mq32
i think focus should be on creating a good, well thought programming language and not on a toy with perfect tooling

1574783106
fengb
On HN, they're complaining that new languages don't have perfect tooling lol

1574783130
fengb
I'm happy on how Zig is developing. There's a lot of churn but for good reasons

1574784483
companion_cube
tbh LSP should make it a lot easier to have decent tooling

1574784603
mq32
yeah, true

1574784620
mq32
but i'm still on the side "first: have a good language, then: have good tooling"

1574784637
companion_cube
I think the second can sometimes inform the first

1574784647
companion_cube
e.g. have easy, non ambiguous syntax, cause that helps making tooling

1574784653
companion_cube
(heyooo C++)

1574784664
mq32
heh, but simple grammar is also part of a good language

1574784703
mq32
the ability to tokenize zig by-line is a great example for good syntax

1574784874
companion_cube
I'd say it's nice to be able to tokenize context free, but well :)

1574784884
companion_cube
I like languages that are whitespace insensitive

1574784892
mq32
yeah true

1574784905
mq32
that's a point about zig i don't like, but i can live with that, as zig fmt fixes it

1574784911
companion_cube
has

1574784992
mq32
git: WE OVERDID IT

1574784993
mq32
lul

1574785011
companion_cube
I mean, it's people who think C is too bi̵g… :D

1574785109
fengb
I'm really starting to hate the word "simple". It basically means whatever you want at this point

1574785142
fengb
Simple software in practice: Unicode

1574785143
fengb
o_O

1574785169
mq32
fengb: unicode is imho a hard requirement for most software today

1574785182
mq32
and utf-8 isn't the most simple encoding sadly

1574785190
mq32
but it's the most practical

1574785256
companion_cube
it's pretty simple still

1574785267
mq32
yeah, true

1574785270
companion_cube
you can do a lot of things as if it were ascii

1574785273
companion_cube
and still have it work

1574785286
fengb
Unless you deal with counting characters

1574785288
mq32
and you don't have to think about UTF-8 unless you do substrings and output

1574785288
companion_cube
(lots of things = tokenizing, line splitting on the wire, etc.)

1574785296
companion_cube
or capitalization

1574785309
companion_cube
if you have to

1574785311
fengb
Runes? Codepoints? I always forget the right terminology

1574785322
companion_cube
codepoints, then grapheme clusters I think

1574785333
companion_cube
if you really want to think about how stuff is displayed

1574785360
fengb
I love that I can delete a family emoji one person at a time

1574785376
nairou
o_O

1574785411
fengb
Anyway, my point is that C is simple for a compiler writer but really complicated for actual use due to all the footguns

1574785439
fengb
So calling it "simple" is technically true... but also not necessarily too helpful

1574785462
companion_cube
is it really that simple for a compiler writer, though? :D

1574785468
fengb
And everyone's pet tool is "simple", and all other competitors are too complex for "bad reasons"

1574785478
nairou
And C left way too much undefined, implementation specific

1574785478
companion_cube
you could have something even simpler that has a reasonable grammar :p

1574785504
fengb
Yeah, the spec was super vague becasue it was helpful for random compileers to match spec

1574785528
fengb
ANSI was at least. Not sure if newer specs have more stringent reqs

1574786668
mq32
fengb: runes are this: ᚠᚢᚦᚩ

1574786720
mq32
C isn't simple for a compiler writer

1574786733
mq32
it is a type 1 language (whereas C++ is actually type 0)

1574786743
mq32
you cannot decide context free what "a * b;" means

1574786754
nairou
C++ is type WTF

1574786798
mq32
you can write C++ code where the semantics of the program is defined by the result of a turing machine

1574786814
mq32
so: evaluating C++ code to determine its semantics is actually the halting problem

1574786923
mq32
but even parsing C code isn't that trivial

1574786939
mq32
you need to know what symbols are valid to determine if something is a declaration or an expression

1574786962
companion_cube
I wouldn't mind a C-like lang with sum types and basic generics, like Myrddin

1574786966
mq32
"a * b;" can be the declaration of a pointer variable "b" that is a "pointer to a" or if it's a multiplication of "a" and "b"

1574786968
companion_cube
sadly it's hard to get traction

1574787037
Pistahh
in C it is also "funny" when someone accidentally writes 'char* a,b' :)

1574787047
companion_cube
-_-

1574787123
mq32
Pistahh: oh yeah :D

1574787487
mq32
on C and weird syntax:

1574787501
mq32
the whole thread is worth a read, but this one is kinda great :D

1574789031
Snektron
test

1574789073
Snektron
ah, matrix was acting up again

1574798936
jonathon
I'm confused with what I'm doing wrong with iterating over an array of structs:

1574799076
jonathon
Accessing an element of the array directly does what I'd expect it to. Accessing as part of a for loop seems to do something odd with pointers?

1574799157
andrewrk
jonathon, godbolt's a.out output does not agree with your comment

1574799203
andrewrk


1574799221
andrewrk
the code looks fine

1574799234
jonathon
whuuuu

1574799247
jonathon
OK :explode:

1574799359
jonathon
I have no idea what my local copy is doing wrong, but at least I know it

1574799406
andrewrk
it works for me locally too

1574799418
andrewrk
however valgrind does complain

1574799455
andrewrk
jonathon, oh, your payload1 variable is stack-allocated

1574799478
andrewrk
you could fix this by making it `const` and running the new function at comptime

1574799505
andrewrk
jonathon, you should practice running this with valgrind right now though, it would have helped a lot

1574799516
andrewrk
because you would see that it's also problematic on line 23 as well

1574799635
andrewrk
the problem is that payload1 is runtime-known. and so [_]TopicPayload{payload1} is also runtime known, which makes it stack allocated. i'm actually right in the middle of making this a compile error

1574799687
andrewrk
the question to ask yourself is, "where in memory is the []const TopicPayload pointing to?"

1574799794
mikdusan
just going to point out: [_] is an array (inferred-size but still an array). and the fn returns a

1574799835
andrewrk
related:

1574799888
jonathon
Hmm... the snippet was supposed to be a minimally-working example of the error but that example does "work" locally, so somewhere in the rest of my code it's doing something else.

1574799955
mikdusan
sometimes undefined behavior "works"

1574800094
jonathon
Thanks both, I'll get my head round this type of programming at some point...

1574800283
andrewrk
jonathon, what OS are you on?

1574800364
jonathon
Linux

1574800375
andrewrk
do yourself a favor and run your code in valgrind

1574800384
andrewrk
valgrind ./test

1574800410
andrewrk
you'll gain 1 system programming level-up just by running this command once and looking at the output

1574800417
jonathon
Yeah, I have been doing, but the full code is where the issue in the comments happens, even within Valgrind

1574800471
andrewrk
hm. well let me see if I can finish up this branch, it might help you debug, since it will give you f resh compile errors for all your arrays that get coerced to references :)

1574800523
jonathon
Awesome :D

1574803481
emekankurumeh[m]
since we have anon structs perhaps we could use them for closures?

1574803917
jonathon
Oh, I missed that there is std.Arraylist... >.< That should do the job.

1574804541
andrewrk
jonathon, just keep in mind that any references you have to elements become invalid when you change the size of an array list

1574804979
mq32
andrewrk, you wrote that

1574804986
mq32
i'm throwing in the parallax propeller architecture :D

1574805034
andrewrk
good

1574805051
mq32
i recommend you taking a look at it, as the official assembler syntax is quite special

1574805058
jonathon
Will do. I think I should be fine for this instance, I'm passing a pointer to an ArrayList(struct) to a function, appending some items to the target ArrayList, then iterating through the ArrayList.toSliceConst()... Valgrind doesn't complain at least... :D

1574805072
mq32
it has a configurable instruction set which means you have some kind of "particle bits" you can add to every function

1574805081
mq32
stuff like "execution", "write result", ...

1574805154
mq32
so you have something like "sub a, b" which can be used as a compare instruction by discarding the result with the "nowrite" particle and "w_z" particle for "write-zero-flag"

1574807912
frmdstryr
Taking len on an empty buffer makes an integer overflow error

1574807914
frmdstryr


1574807980
mq32
frmdstryr, read the documentation on initNull

1574807989
mq32
i stepped into the same API trap

1574808001
mq32
you have to call resize first

1574808398
frmdstryr
Hmm... thanks

1574808449
mq32
yeah, it's a kind of footgun, but i can understand why that is needed

1574809066
frmdstryr
Can I add a timeout on an async call? Or somehow cancel at a later time?

1574809102
frmdstryr
It looks like the event loop uses infinite timeouts... so there's no way to prevent a DOS

1574809978
andrewrk
pixelherodev,

