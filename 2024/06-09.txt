1717895628
andrewrk!~andrewrk@mail.ziglang.org
rockorager: this is the first I've heard of it

1717924152
txdv!~txdv@78.56.38.107
Hi, did anyone try to use the new externref feature in wasm? basically you can now reference external types without knowing what they are?

1717928512
leiu!~leiu@user/leiu
Hello, have a question regarding the alignment of addresses. The line const gio_port_b: *GioPort = @ptrFromInt( 0xFFF7BC54 ); results in an error -> "pointer type requires aligned address". The target is armeb-freestanding -mcpu=cortex_r4f which has definitely 4 byte alignment, so 0xFFF7BC54 should be fine, right? Or am I wrong here? 0xFFF7BC50 or 0xFFF7BC58 work but would be the wrong addresses.

1717928724
ifreund!2940d10f8b@user/ifreund
leiu: Zig could very well be wrong about what that hardware requires... you can manually specify the alignment with `*align(4) GioPort`

1717928733
ifreund!2940d10f8b@user/ifreund
what is the GioPort type?

1717929640
leiu!~leiu@user/leiu
ifreund: Thank you very much for the align hint! The GioPort type is a packed struct with 8 u32 members.

1717929706
ifreund!2940d10f8b@user/ifreund
leiu: if you don't need bit-aligned fields, I'd recommend using an extern struct instead for that use-case

1717929728
ifreund!2940d10f8b@user/ifreund
which should have a natural alignment of 4

1717929777
ifreund!2940d10f8b@user/ifreund
the packed struct of 8 u32s will be implemented as a single u256 integer which zig seems to think requires alignment of 8

1717930008
leiu!~leiu@user/leiu
ifreund: Ah OK, I see. This makes total sense now. You're absolutely right, with that insight it's totally OK to use an extern struct for this usecase here.

1717930023
leiu!~leiu@user/leiu
ifreund: Again, thank you very much.

1717930028
ifreund!2940d10f8b@user/ifreund
no problem!

1717948489
txdv!~txdv@78.56.38.107
Sorry if someone answered it already, but my disk went into read only mode and I can't look into the logs. Is there a way to access externref from the wasm proposal in zig?

1717965027
j`ey!~joey@user/jey/x-2681904
what was that env var to print out the clang invocation?

1717965176
j`ey!~joey@user/jey/x-2681904
ZIG_VERBOSE_CC=1

1717965862
andrewrk!~andrewrk@mail.ziglang.org
j`ey: `zig env` to see the environment variables that affect zig

1717965927
j`ey!~joey@user/jey/x-2681904
nice, that's an interesting command idea!

1717969202
Earnestly!~earnest@user/earnestly
Hmm ZIG_GLOBAL_CACHE_DIR=$'\xf0\x28\x8c\xbc' zig env

1717969294
Earnestly!~earnest@user/earnestly
(valid directory name/environment value becomes array of numbers)

1717969829
andrewrk!~andrewrk@mail.ziglang.org
no unrealistic bug reports until 1.0

1717969841
andrewrk!~andrewrk@mail.ziglang.org
until then bug reports shoud be motivated by real actual use cases

1717969883
andrewrk!~andrewrk@mail.ziglang.org
e.g. there's no point in fuzz testing the parser when you're still going to change the syntax

1717969925
Earnestly!~earnest@user/earnestly
This is just a consequence of json, a lot of tooling has this problem and it'll be interesting to see if tools adapt or if people just de facto mandate valid utf-8 filenames everywhere

1717969953
Earnestly!~earnest@user/earnestly
A bit like "just don't include spaces" but for utf-8 instead

