1729296034
grayhatter!~grayhatte@user/grayhatter
which is more expensive, the left side of the | or the right? there's a bug, which function is it in? where, or SomeSQLA or in the int type? or in Other?

1729296291
grayhatter!~grayhatte@user/grayhatter
everything can be abused, right... I'm abusing *plenty* of zig code myself lol. But the first example of when it's useful, is just math for arbitrary precision ints. IMO, if you're doing complex math where you need that, it's a better policy/principle to use a library, or write dedicated, use specific code. And I don't agree the language should try to solve single purpose code like that. 

1729296330
grayhatter!~grayhatte@user/grayhatter
it's annoying that Zig forces me to use const, when I'd rather write var... but it's objectively better, even if I'd rather just be lazy

1729296648
companion_cube!~simon@user/meow/companion-cube:68572
The library will be made better by having overloading, that's the point

1729296669
companion_cube!~simon@user/meow/companion-cube:68572
As opposed to making it built-in or nothing 

1729296723
grayhatter!~grayhatte@user/grayhatter
by better, do you just mean more ergonomic? or is there another improvement you're thinking about?

1729296839
companion_cube!~simon@user/meow/companion-cube:68572
Yes, more ergonomic, more readable, closer to whatever mathematic formula you're implementing 

1729296866
grayhatter!~grayhatte@user/grayhatter
you and I disagree about the definiton for readable, I find it less readable

1729296918
grayhatter!~grayhatte@user/grayhatter
I use readable as a synonym for understandable. e.g. if I read it, but don't know what it does, I don't considerthat readable

1729297129
companion_cube!~simon@user/meow/companion-cube:68572
If you know the types it's just as readable imho, you know what + will do, but you'll also see that it corresponds to the formula better

1729297132
grayhatter!~grayhatte@user/grayhatter
"closer to the mathematica formula" is an interesting view though... I've only ever read code as a way to express instructions that the machine will follow. If I had to choose if my language should fit or map closer to an abstract math concept, or if it should fit or map closer to the how the machine will behave. I'm pretty sure I'll always say the language should map to what the machine will do... I

1729297134
grayhatter!~grayhatte@user/grayhatter
don't think I've ever considered the alternitive, it's a very interesting idea

1729297150
companion_cube!~simon@user/meow/companion-cube:68572
Or else why wouldn't we just be writing s-expressions? 

1729304315
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
ifreund: but that just tells if the actual values are equal, doesn’t it? I’m trying to see specifically if the active tags are equal. It might just be easier for me to make a struct with a regular enum as a tag field and then a regular union if the @tagName this is really bad lol 

1729304583
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The_Buhs: what about std.meta.activeTag(a) == std.meta.activeTag(b)?

1729304594
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Looking at the tests for that, it *might* work

1729304861
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yep, it works: https://zigbin.io/a06698

1729304889
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Ah yeah, looks like that’s exactly what I want! Thanks

1729305551
torque!~tachyon@user/torque
no, ifreund's suggestion coerces the union to its tag type

1729305558
torque!~tachyon@user/torque
so it will compare the tag only

1729305568
torque!~tachyon@user/torque
you don't need std.meta for this

1729305596
torque!~tachyon@user/torque
it's slightly more complicated if you are using a tagged union with an anonymous tag type, however

1729305715
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ah, yeah that's pretty much exactly what activeTag is doing under the hood

1729306051
torque!~tachyon@user/torque
https://zig.godbolt.org/z/fxWofq9jx

1729306169
torque!~tachyon@user/torque
note that you could use `std.meta.Tag(Anon)` in the above case to get the tag type as well, which would be more flexible

1729306184
torque!~tachyon@user/torque
the point was more to demonstrate that std.meta isn't really magical, though

1729306373
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Oh I see, thank you torque :)

1729354904
cancername!~cancernam@user/cancername
When I try to run a test referencing C-exported functions (say, in src/foo.zig) that weren't linked in with "-fno-emit-bin", like so: "zig test -I src src/wtf.zig -lc -fno-emit-bin", when "-fno-emit-bin" is removed, the test fails as expected. How can that be? 

1729354939
cancername!~cancernam@user/cancername
as in, the test inexplicably succeeds if "-fno-emit-bin" is passed

1729355753
grayhatter!~grayhatte@user/grayhatter
cancername: does no-emit-bin prevent the test binary from existing, and thus the test has no failure to report?

1729355765
grayhatter!~grayhatte@user/grayhatter
default pass when test_count = 0

1729355787
cancername!~cancernam@user/cancername
grayhatter: possible! but why does zig build seemingly default to that?

1729355814
grayhatter!~grayhatte@user/grayhatter
well, you didn't run `zig build test`, I assume, you said `zig test`

1729355879
grayhatter!~grayhatte@user/grayhatter
zig build test --no-emit-bin makes no sense to me... the tests are binaries, why would you want to prevent the binaries from being created if you're planning to test them?

1729355961
cancername!~cancernam@user/cancername
grayhatter: I adapted that from "zig build test", I likely have some kind of bug in my build.zig

1729356399
cancername!~cancernam@user/cancername
yep, "zig build test" does add "-fno-emit-bin", here: https://pastebin.com/XQJ977qA . from build.zig: https://zigbin.io/41e04e

1729357054
cancername!~cancernam@user/cancername
yep, missing addRunArtifact. smh.

1729360734
d76d5!~d76d5@user/d76d5
Hey all, I have a zig question: what's the purpose of linkSystemLibrary when linkSystemLibrary2 exists? Why do they both exist?

1729360878
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
probably compatibility reasons

1729360933
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
especially appending "2" to a std name doesn't sound too stable/final

1729364004
d76d5!~d76d5@user/d76d5
How would one pass a "null" to a C function from Zig? I can't just pass "null" since it's a vararg (cannot pass '@TypeOf(null)' to variadic function). What's the best way to do this?

1729364106
d76d5!~d76d5@user/d76d5
will I need to use something like "const cNullPtr: ?*anyopaque = null;" or is there a better way

1729366357
torque!~tachyon@user/torque
you can coerce null in place

1729366368
torque!~tachyon@user/torque
@as(?*anyopaque, null)

1729366416
torque!~tachyon@user/torque
you could use a more concrete optional pointer type if there's a more appropriate one for that specific call

1729372785
d76d5!~d76d5@user/d76d5
coercing in place works, but I have a lot of nulls I need to pass, so it doesn't look as nice

1729372798
d76d5!~d76d5@user/d76d5
is that idiomatic zig? or does it not matter that I use a const for it

1729376203
jshzglr!~jshzglr@user/jshzglr
is this channel active?

1729377348
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
jshzglr: yes

1729377363
jshzglr!~jshzglr@user/jshzglr
thanks

1729379639
torque!~tachyon@user/torque
<d76d5> coercing in place works, but I have a lot of nulls I need to pass, so it doesn't look as nice

1729379653
torque!~tachyon@user/torque
the better option would be not to use varaidic functions but I assume you don't control that

1729379689
torque!~tachyon@user/torque
defining your own constant for many invocations is fine

1729379707
torque!~tachyon@user/torque
I would agree that it would tend to read better

1729379712
torque!~tachyon@user/torque
s/invocations/uses/

1729379790
torque!~tachyon@user/torque
Either solution is fine, imo it's more about how readable the code is

