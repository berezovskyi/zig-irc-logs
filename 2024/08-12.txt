1723426763
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
interesting to hear

1723426769
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
it's certainly not what I would have guessed

1723459103
cryptocode!~zy@user/zy
Getting crypto right in general can be pretty hard, and you definitely don't wanna roll your own. As for "easy to use", I've encountered a number of bugs due to how people use ed25519 for instance, because it's actually a very quirky signature scheme. You gotta know about *not* using the typically-default deterministic version (to prevent timing attacks; and Zig used to have a bug here), torsion components in distributed systems (Tor got that wrong), and malleability 

1723459449
cryptocode!~zy@user/zy
Another bug I've seen is people thinking all-zero pubkeys cannot possibly have signatures, then elliptic curves throws a curve ball, and system goes boom.

1723462329
cryptocode!~zy@user/zy
Feels good to chat in #zig from an IRC client written in Zig from inside a terminal emulator written in Zig

1723465044
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
hmm interesting

1723465834
cryptocode!~zy@user/zy
aidenfoxivey: yeah, the APIs often give no clues about these footguns, so you just have to know about them. btw, you mentioned code correctness. You might also run into "provably secure" signature schemes having bugs in their proofs. MuSig v1 is one example. Using battle-tested algos and libs is key in this space :)

1723473836
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
cryptocode: there’s an irc client written in zig?

1723473848
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
i’m assuming you’re chatting in Ghostty 

1723474962
ifreund!2940d10f8b@user/ifreund
aidenfoxivey: this one perhaps: https://git.sr.ht/~rockorager/comlink

1723475090
cryptocode!~zy@user/zy
that's the one

1723477064
grayhatter!~grayhatte@user/grayhatter
cryptocode: getting code right in general can be hard, crypto is no different

1723477514
cryptocode!~zy@user/zy
the consequences of getting crypto wrong is frequently more severe

1723477590
cryptocode!~zy@user/zy
but mainly I was just pointing out that there's more to consuming a crypto library than meets the eye via it's api. Depending on what you're doing, a lot more.

1723478152
cryptocode!~zy@user/zy
Very happy Frank is on board with Zig's std.crypto, making sure stuff like batch verification is done correctly (libs widely in use still do it in a way that yields inconsistent results)

1723481193
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
okay so looking at the zig standard

1723481199
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
u0 seems to be a valid type

1723481206
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
and u0 can take on the value of 0

1723481221
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
i1 is also a valid type of values -1 or 0

1723482322
cryptocode!~zy@user/zy
ifreund: 

1723482331
cryptocode!~zy@user/zy
i use river on freebsd, but am stuck of a bit of an old version

1723482353
cryptocode!~zy@user/zy
when compiling with zig13 locally it's not finding wlroots18 despite that being installed. Any tips?

1723482377
cryptocode!~zy@user/zy
stuck on*

1723482405
ifreund!2940d10f8b@user/ifreund
cryptocode: wlroots 0.18 changed the pkg-config name from wlroots to wlroots-0.18 which is what river now looks for

1723482422
ifreund!2940d10f8b@user/ifreund
perhaps freebsd patches their wlroots18 package in a way that breaks that?

1723482434
cryptocode!~zy@user/zy
lemme check

1723482486
ifreund!2940d10f8b@user/ifreund
if pkg-config --libs wlroots-0.18 fails then that's probably the issue

1723484135
cryptocode!~zy@user/zy
that succeeds because wlroots-devel is on 0.18, however wlroots is 0.17.4 (which was installed with river earlier and there's no new version yet according to pkg search) - and zig build finds 0.17.4. I'll see if I can upgrade wlr manually.

1723485176
cryptocode!~zy@user/zy
alright, reinstalling all things wlroots got it closer to building, but it's looking for a linux include. I'll take it to #river though.

1723495493
senoraraton!~senorarat@199-188-195-103.PUBLIC.monkeybrains.net
All of the examples I see of @ptrCast use two arguments, has this changed in .13?  I'm getting errors when I try and align my ptr: const userData: *UserData = @ptrCast(pUserDataPtr, @alignCast(@alignOf(UserData)));

1723495520
senoraraton!~senorarat@199-188-195-103.PUBLIC.monkeybrains.net
The docs say one argument -> @ptrCast(value: anytype) anytype

1723495637
senoraraton!~senorarat@199-188-195-103.PUBLIC.monkeybrains.net
This seems to compile at least, not sure if it is correct: const userData: *UserData = @alignCast(@ptrCast(pUserDataPtr)); 

1723496151
sp2!uid197664@user/meow/sp2
All cast functions use the “inferred type” as the cast target now, yeah

1723497810
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
cryptocode: trying comlink now, it's awesome!

1723498081
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
aidenfoxivey: join us in #comlink!

1723505079
Palanix!~palanix@dynamic-077-012-051-106.77.12.pool.telefonica.de
I recently had a problem with zig's cImport when using this library (https://codeberg.org/sewn/drwl). The problem is that in the function drwl_rect it calls pixman_image_fill_rectangles. This function takes an argument 'rects' which is both in the pixman header file and the zig cimport extern function declaration to be of type _const_ ...rectangle. The problem is now that in the generated cImport code, there is a ptr cast whi

1723505079
Palanix!~palanix@dynamic-077-012-051-106.77.12.pool.telefonica.de
ch fails, because for some reason the explicit cast using @as casts to a non const version

1723505219
Palanix!~palanix@dynamic-077-012-051-106.77.12.pool.telefonica.de
It is trivial to fix by just manually editing the file in the zig cache. Is this problem known or should I make an issue for it?

