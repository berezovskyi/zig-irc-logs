1709338101
waleee!~waleee@h-176-10-144-38.NA.cust.bahnhof.se
was the fundraiser goal reached?

1709343021
andrewrk!~andrewrk@mail.ziglang.org
waleee, more or less. we have enough to fund jacobly0 part time now

1709343342
waleee!~waleee@h-176-10-144-38.NA.cust.bahnhof.se
good to hear

1709350164
grayhatter!~grayhatte@user/grayhatter
is there a way to embed a file that's a child of build.zig but not within src/

1709350459
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
you can use the file as the root of a module and embed with the import name of that module

1709351408
remiliascarlet!~remiliasc@user/remiliascarlet
Anyone know what's wrong here? https://paste.opensuse.org/pastes/3b767665c9dc

1709351434
remiliascarlet!~remiliasc@user/remiliascarlet
Zig version is 0.12.0-dev.3124+9e402704e.

1709351440
remiliascarlet!~remiliasc@user/remiliascarlet
And on Linux this time.

1709351716
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
`testing.expectApproxEqRel`

1709351831
remiliascarlet!~remiliasc@user/remiliascarlet
jacobly0: Thanks, that one worked.

1709352570
grayhatter!~grayhatte@user/grayhatter
jacobly0: that didn't work

1709352581
grayhatter!~grayhatte@user/grayhatter
it still complains about not being able to find the file

1709352597
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
what did you do

1709352679
grayhatter!~grayhatte@user/grayhatter
for (files) |file| { build.addModule(file, .{ root_source_file = .{ .path = file } }) };

1709352737
grayhatter!~grayhatte@user/grayhatter
https://gist.github.com/GrayHatter/0a60e5512080cec9cc7faa234adbe881

1709352796
grayhatter!~grayhatte@user/grayhatter
added the error as a comment

1709352824
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
`b.addModule` exports a module from a package, `cs.root_module.addImport` lets you import or embed a module in another module

1709352848
grayhatter!~grayhatte@user/grayhatter
jacobly0: thank you :)

1709352891
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
you can use `addAnonymousImport` if you don't need to do anything else with the modules

1709353286
grayhatter!~grayhatte@user/grayhatter
is the mmap api correct?

1709353519
grayhatter!~grayhatte@user/grayhatter
andrewrk: can you double check this api change is correct? 

1709353634
grayhatter!~grayhatte@user/grayhatter
oh, it's a packed struct now... interesting it looks correct :/ apologies 

1709379838
Batzy!~quassel@user/batzy
anyone doing anything fun in zig

1709379949
ifreund!2940d10f8b@user/ifreund
right now I'm working on drawing tablet support for my wayland compositor written in Zig

1709380338
Batzy!~quassel@user/batzy
what's a usize?

1709380391
Batzy!~quassel@user/batzy
"pointer sized integer" i dont really get it

1709380434
ifreund!2940d10f8b@user/ifreund
if pointers have a size of 64 bits, usize is a 64 bit integer

1709380472
ifreund!2940d10f8b@user/ifreund
pointer size depends on the target CPU architecture

1709380485
Batzy!~quassel@user/batzy
oh i see, i thought you could use it for arbitrarily large int

1709380607
ifreund!2940d10f8b@user/ifreund
well, it's large enough to index the entire memory space of the target computer so depending on the context it is exactly that

1709380739
Batzy!~quassel@user/batzy
ooo very cool

1709380749
Batzy!~quassel@user/batzy
ifreund: how would you make a 256 bit integer for example?

1709380754
ifreund!2940d10f8b@user/ifreund
u256

1709380766
Batzy!~quassel@user/batzy
huh

1709380773
Batzy!~quassel@user/batzy
i didnt see that as a type

1709380792
ifreund!2940d10f8b@user/ifreund
zig has arbitrary bit-width integers

1709380823
Batzy!~quassel@user/batzy
that's amazing?

1709380837
Batzy!~quassel@user/batzy
like i get it's not a big deal but wow

1709380841
Batzy!~quassel@user/batzy
just didnt expect it

1709381325
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Batzy: a TUI irc client https://asciinema.org/a/1XH0jO3idShIXbNsApGnLqDXN

1709381481
ifreund!2940d10f8b@user/ifreund
rockorager: neat! are you going to support chathistory?

1709381491
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
ifreund: absolutely!

1709381578
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Has bouncer-networks support for soju right now, but I haven't added in chat history until I pull in displaying of actual messages haha

1709381609
ifreund!2940d10f8b@user/ifreund
hah, got a repo up already?

1709381659
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
https://git.sr.ht/~rockorager/zirconium

1709381669
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Hard coded config location still

1709381749
ifreund!2940d10f8b@user/ifreund
cool

1709382099
Batzy!~quassel@user/batzy
rockorager: how are the graphics done?

1709382113
Batzy!~quassel@user/batzy
meaning the interface

1709382252
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
https://github.com/rockorager/libvaxis

1709382281
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
the irc client is a guinea pig to play around with the API for that more than anything

1709382383
Batzy!~quassel@user/batzy
i see

1709389881
jnorinder!~jnorinder@h-155-4-201-95.A317.priv.bahnhof.se
Hi, does anyone know any vs code trick to ease up the linting of enums. My vs code doesn't let me have the enums one different rows. As soon as I save it puts all enum values on one line. Pretty annoying! :-)

1709389924
jnorinder!~jnorinder@h-155-4-201-95.A317.priv.bahnhof.se
one different rows ==> on different rows

1709390110
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
jnorinder: trailing comma on the last entry?

1709390246
jnorinder!~jnorinder@h-155-4-201-95.A317.priv.bahnhof.se
Nice!! I was going crazy here! :D Thanks!

1709390854
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
that will work for all sorts of formatting: args, switch cases, etc

1709391095
jnorinder!~jnorinder@h-155-4-201-95.A317.priv.bahnhof.se
ah... that's nice! 

1709396923
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
Is it possible to make this work without using anytype?

1709396923
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
const std = @import("std");

1709396924
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
const io = std.io;

1709396924
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
const testing = std.testing;

1709396925
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
fn foo(writer: io.AnyWriter) !void {

1709396925
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
    writer.write("foo");

1709396926
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
}

1709396926
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
test "foo" {

1709396927
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
    const allocator = testing.allocator;

1709396927
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
    var buf = std.ArrayList(u8).init(allocator);

1709396928
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
    defer buf.deinit();

1709396928
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
    const w = buf.writer();

1709396929
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
    foo(w);

1709396929
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
    try testing.expectEqualStrings("foo", buf.items);

1709396930
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
}

1709396930
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
currently this fails to compile with the following error:

1709396931
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
zig test src/foo.zig

1709396931
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
src/foo.zig:14:9: error: expected type 'io.Writer', found 'io.GenericWriter(*array_list.ArrayListAligned(u8,null),error{OutOfMemory},(function 'appendWrite'))'

1709397606
quentink!~quentink@2601:300:487f:fea0:f848:b8c8:38e3:48f7
I figured it out, I just call w.any()

1709400789
belst!~belst@user/belst
hi, I am currently trying to interop with a C library, when I include the lib, all the pointers are nullable (which is correct in some cases) but is there a way for me to specify globally that some pointers are always non null?

1709400806
cancername!~cancernam@user/cancername
belst: What do you mean by "globally"?

1709400818
cancername!~cancernam@user/cancername
and "some pointers"? like, pointers to a specific type?

1709400823
belst!~belst@user/belst
basically in the struct definition

1709400829
belst!~belst@user/belst
yes, mostly function pointers

1709400848
cancername!~cancernam@user/cancername
I don't think so, but you can use the .? operator to assert that a pointer is non-null

1709401090
belst!~belst@user/belst
ok lets say I export a function load(api: ?*c.APIStruct) callconv(.C) void { api.?.Log.?(c.ELogLeve_INFO, "Loaded"); }

1709401097
belst!~belst@user/belst
I know, that api is never null

1709401137
belst!~belst@user/belst
but I guess I can't specify that

1709401199
cancername!~cancernam@user/cancername
you can use `*c.APIStruct`

1709401224
belst!~belst@user/belst
that fails to compile

1709401246
cancername!~cancernam@user/cancername
It shouldn't. What's the error?

1709401271
belst!~belst@user/belst
*const fn ([*c]cimport.struct_APIStruct) callconv(.C) void', found '*const fn (*cimport.struct_APIStruct) callconv(.C) void

1709401284
cancername!~cancernam@user/cancername
oh, right.

1709401309
cancername!~cancernam@user/cancername
I'm actually unsure whether it's legal to `@ptrCast' this.

1709401985
ifreund!2940d10f8b@user/ifreund
belst: you can define your own manual bindings for the C APIs where you want more specific pointer types. See for example zig-wlroots 

1709402031
ifreund!2940d10f8b@user/ifreund
this also lets you do other things like use namespaces

1709402471
belst!~belst@user/belst
yeah, I'm just trying stuff out atm

1709402540
belst!~belst@user/belst
another thing, I have a `typedef void (*FOO) ();` as a function pointer to a function with 0 arguments, when I cInclude it, zig says it's a variadic function

1709402559
belst!~belst@user/belst
error: expected type '*const fn (...) callconv(.C) void', found '*const fn () callconv(.C) void'

1709402584
cancername!~cancernam@user/cancername
that's... unusual.

1709403377
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
in C `void f();` is a variadic function, `void f(void);` is a function taking 0 arguments

1709403587
ifreund!2940d10f8b@user/ifreund
gotta love C :)

1709403681
grayhatter!~grayhatte@user/grayhatter
void f() being varadic is defined I assume? or is that just a matter of the semantics of the C abi?

1709406981
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
jacobly0, is that standardized or some awkward implementation detail?

1709407126
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
from the standard, for legacy reasons

1709407152
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
In C++, `void f()` and `void f(void)` are both functions taking zero arguments

1709407471
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
never let a comitee get control over your language..

1709409494
grayhatter!~grayhatte@user/grayhatter
I mean, technically gcc and clang have more control over the language than the comittee does... and look what they've done with it

1709409532
grayhatter!~grayhatte@user/grayhatter
I'm personally convinced UB wasn't 'defined' the way is was so compilers could abuse the users to get sick perf gains

1709409910
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
Well, by disliking the comitee I didn't necessarily say that I'd prefer to hand over power to the compiler folks ^^'

1709409925
grayhatter!~grayhatte@user/grayhatter
lol, fair point :D

1709409951
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
That's a bit like firing the fox and instead putting the lion in charge of the hen house

1709409994
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
The interesting thing is that it somehow got in charge. Ritchie and Kernighan never seemed to execute any power beyond their book being an unofficial standard

1709410034
grayhatter!~grayhatte@user/grayhatter
like anything, they believed they could, and everyone else just followed

1709410072
grayhatter!~grayhatte@user/grayhatter
has anyone written a syntax highlighter in zig?

1709410084
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
There's one for neovim

1709410092
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
ah, *in* Zig

1709410095
jemius!~imperator@2001:9e8:32f6:e400:1dbb:b22b:33e6:355c
my bad

