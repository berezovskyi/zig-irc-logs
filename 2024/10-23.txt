1729681995
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
rockorager: I've been wondering, is there a simple way to detect if the vaxis textinput widget has changed since last draw? zf has its own text input widget written with a dirty: bool field set to true when text changes, but it lacks unicode support

1729682056
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
tranzystorekk: not currently. I actually added this functionality to my own input widget based on the in-tree one

1729682108
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
ah, thank you for the info

1729690703
nitrogenez!~nitrogene@178.176.230.19
hi, i'm having some technical difficulties with matrix, so writing here. in 0.9.1 there was a possibility to supply the stack for the function with @call, but now in zig 0.13.0 i don't see that thing present anymore. is there any way to do that now?

1729723876
aet!~debian@user/aet
Hello. I'm new to the language and struggling a bit wrapping my head around comptime. I am trying to write a simple function that can print the name of each field in an arbitrary struct. Here the the working code: https://0x0.st/XUKW.zig. The problem (as outlined in the comment) is that it doesn't compile without the inline

1729723885
aet!~debian@user/aet
but I'm not sure why the inline is necessary

1729724467
d76d5!~d76d5@user/d76d5
inline p much means "run this loop at compile time"

1729725191
andrewrk!~andrewrk@mail.ziglang.org
you can't iterate over types at runtime because there is no runtime type information

1729727462
aet!~debian@user/aet
my expectation is that the for loop should be executed at compile time because it operates on a compile time object (type info)

1729727472
aet!~debian@user/aet
is this not correct?

1729727500
aet!~debian@user/aet
why is the inline keyword needed in this case, but not in other cases where it seems to implicitly be understood that the value will be evaluated at compile time

1729727529
aet!~debian@user/aet
e.g const foo = (comptime_val * comptime_val) is evaluated at compile time (if my understanding is correct) without explicitly ahving to do anything to foo

1729727576
aet!~debian@user/aet
forgive me if these are naive questions, I have not done much metaprogramming

