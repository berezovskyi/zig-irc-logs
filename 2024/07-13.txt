1720874462
hadronized!~phaazon@2001:41d0:a:fe76::1
I’m trying to do the ziglings, but when doing zig build, I get this:

1720874466
hadronized!~phaazon@2001:41d0:a:fe76::1
/home/phaazon/src/ziglings.org/test/tests.zig:53:44: error: expected type 'Build.LazyPath', found '[]const u8'

1720874470
hadronized!~phaazon@2001:41d0:a:fe76::1
I’m not sure that’s expected

1720874512
Gliptic!~glip@irc.glip.cc
sounds like an outdated example

1720874567
ashie!~ashie@user/ashie
it is not a proper zig release unless you have to adjust your build.zig afterwards :P

1720874626
hadronized!~phaazon@2001:41d0:a:fe76::1
I’m not sure to follow; the readme just states to zig build and follow the insturctions

1720874634
hadronized!~phaazon@2001:41d0:a:fe76::1
should I assume I need to fix that path thing?

1720874636
hadronized!~phaazon@2001:41d0:a:fe76::1
it’s super unclear

1720874658
hadronized!~phaazon@2001:41d0:a:fe76::1
ashie | it is not a proper zig release

1720874660
hadronized!~phaazon@2001:41d0:a:fe76::1
what do you mean?

1720874681
hadronized!~phaazon@2001:41d0:a:fe76::1
 zig version

1720874686
hadronized!~phaazon@2001:41d0:a:fe76::1
0.14.0-dev.286+d8c1c9ea6

1720874759
hadronized!~phaazon@2001:41d0:a:fe76::1
I’ll try with a 0.13 compiler

1720874767
Gliptic!~glip@irc.glip.cc
why is ziglings using unreleased versions..

1720874783
hadronized!~phaazon@2001:41d0:a:fe76::1
https://codeberg.org/ziglings/exercises#getting-started

1720874791
hadronized!~phaazon@2001:41d0:a:fe76::1
they mention 0.14.0

1720874798
ashie!~ashie@user/ashie
I was just making a joke cause zig breaks stuff very often

1720874819
rockorager!2bbd732aa1@irc.pico.sh
hadronized: https://codeberg.org/ziglings/exercises/src/tag/v0.13.0

1720874819
Gliptic!~glip@irc.glip.cc
they probably haven't fixed it for .286+d8c1c9ea6 yet

1720874831
rockorager!2bbd732aa1@irc.pico.sh
I'd use the 0.13.0 tag

1720874839
ifreund!2940d10f8b@user/ifreund
yeah, and ziglings using 0.14.0 pre-releases is going to cause stuff to break when ziglings updates lag behind breaking changes in zig's master branch

1720874840
hadronized!~phaazon@2001:41d0:a:fe76::1
okay, I will, thanks

1720874847
Gliptic!~glip@irc.glip.cc
rockorager: it says it won't work with that though

1720874861
Gliptic!~glip@irc.glip.cc
0.14.0-dev.42 is the latest version they adjusted for

1720874902
rockorager!2bbd732aa1@irc.pico.sh
Gliptic: This is the ziglings 0.13.0 tag, i would hope it works with zig 0.13.0

1720874916
Gliptic!~glip@irc.glip.cc
ah, sorry, misread

1720874927
ashie!~ashie@user/ashie
I wanted to look at that build.zig and potentially help but holyyy, over 1k line build.zig :/

1720874984
rockorager!2bbd732aa1@irc.pico.sh
In general I think projects that are following master will stay as up to date as they are able, but also provide tags to the specific zig versions

1720875061
hadronized!~phaazon@2001:41d0:a:fe76::1
okay, it’s working on 0.13 :)

1720875410
ashie!~ashie@user/ashie
I am messing around with wasm, and wasi defines apis which use sizes smaller than i32 (the smallest possible type according to wasm 1.0 spec), does anyone know how these are represented?

1720875527
Gliptic!~glip@irc.glip.cc
i32 is the smallest for variables in wasm, but there's no problem reading/writing i8, i16 etc. from/to memory

1720881264
gcoakes!~Thunderbi@2603:8082:2000:72:47c:6461:9b0e:c9e9
I have a build script which sets a custom linker script for some code. That linker script provides some symbols (bootstrap_start, bootstrap_end) which I use as `extern const boostrap_start: anyopaque;` within my code. I want to also run unit tests defined within this same code. The linker for the that unit test executable is now complaining about missing symbols. I don't use those symbols in my unit tests. Is there some way to resolve 

1720881304
gcoakes!~Thunderbi@2603:8082:2000:72:47c:6461:9b0e:c9e9
I would prefer not to separate the unit testable code, if possible.

1720882045
gcoakes!~Thunderbi@2603:8082:2000:72:47c:6461:9b0e:c9e9
Nevermind, I realized right after pressing send on that last message that I could just do  `const external_symbols = if (builtin.is_test) struct`. For some reason when I first hit this issue, I thought that wouldn't work because `extern` felt global in some way.

1720895815
Krajina!~Krajina@user/Krajina
How do you guys do UI stuff?  Like for example if I do Conway's Game of Life, I want a window to display the little dots, and maybe have a couple of buttons to start and stop the simulation.  ChatGPT is telling me to SDL2, but is that really the play??

1720895908
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
personally I dislike coding GUIs, prefer TUIs

1720896082
Krajina!~Krajina@user/Krajina
do you mean something like Dwarf Fortess, high energy animated terminal with ascii flying around?  Is that doable, with something less crazy than calling cls() every frame (or whatever the Zig equivalent is)

1720896113
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
with ncurses you can get quite far

1720896145
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
or at least I think it's the sanest option in current zig ecosystem

1720896291
Nightwulf!~totto@p200300db0f40a7002ef05dfffea2cb51.dip0.t-ipconnect.de
I'm using SDL2 for a rogue like....depends on what the goal is....game of life can be coded in pure ASCII, so ncurses is a good start

1720896567
Krajina!~Krajina@user/Krajina
My ultimate goal is to do some physics simulation (particles under gravity etc) but in spherical geometry instead of euclidean, but I am trying to work my way up in steps, since I'm absolutely brand new to Zig

1720897124
Krajina!~Krajina@user/Krajina
I abandoned Python for this because it involves a lot of numerical integration and it was just slow, so I took the hint that it was an opportunity to learn something new

1720897272
Nightwulf!~totto@p200300db0f40a7002ef05dfffea2cb51.dip0.t-ipconnect.de
good idea...my step to Zig was identical...used Go before but you're quite lost if you need a bunch of C libraries then

1720900575
rockorager!2bbd732aa1@irc.pico.sh
shameless self promotion for a my zig tui library: https://github.com/rockorager/libvaxis

1720900665
ToxicFrog!~ToxicFrog@172-97-218-179.cpe.distributel.net
Oooo, that looks interesting

1720900780
ToxicFrog!~ToxicFrog@172-97-218-179.cpe.distributel.net
Although I could see it falling over on some terminals that support features but do not properly support querying for those features -- hopefully rare?

1720900809
ToxicFrog!~ToxicFrog@172-97-218-179.cpe.distributel.net
This prompts a question: given a zig library, is it possible to build it in a way that makes it callable from C (or languages that have a C FFI)?

1720900841
rockorager!2bbd732aa1@irc.pico.sh
If something isn’t supported it either is ignored by the terminal or the library won’t let you use it (eg images)

1720900865
rockorager!2bbd732aa1@irc.pico.sh
Yeah, you can export a c library with zig code 

1720900953
ToxicFrog!~ToxicFrog@172-97-218-179.cpe.distributel.net
(I ask this because this looks like a library I'd like to be able to use from Factor and Lua, and both of those have C FFI libraries)

1720901053
rockorager!2bbd732aa1@irc.pico.sh
ToxicFrog: someone is working on a lua project with vaxis and has basically exported the whole thing directly to lua

1720901063
ToxicFrog!~ToxicFrog@172-97-218-179.cpe.distributel.net
Sick

1720901084
rockorager!2bbd732aa1@irc.pico.sh
https://github.com/ryleelyman/seamstress

1720901097
rockorager!2bbd732aa1@irc.pico.sh
The seamstress-2 branch

1720901145
rockorager!2bbd732aa1@irc.pico.sh
That said I haven’t exported a c library because you may as well use notcurses

1720901216
ToxicFrog!~ToxicFrog@172-97-218-179.cpe.distributel.net
I think the key difference there is that notcurses relies on terminfo, and vaxis does not

1720908141
Shorden!~user@user/Shorden
:q

1720908228
hadronized!~phaazon@2001:41d0:a:fe76::1
woah, Zig coercions are crazy good and simple to learn

1720908842
ifreund!2940d10f8b@user/ifreund
:)

1720908860
hadronized!~phaazon@2001:41d0:a:fe76::1
I really dislike the .* operator though:D

1720908871
hadronized!~phaazon@2001:41d0:a:fe76::1
accessing and unwrapping an optional via it looks really bad :D

1720908878
hadronized!~phaazon@2001:41d0:a:fe76::1
foo.*.?.doSomething()

1720908898
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
these are just cosmetics in the end, though

1720908915
hadronized!~phaazon@2001:41d0:a:fe76::1
yeah, but why not follow what C and others do? *foo

1720908925
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
or at least that's what the pragmatist inside me says

1720908937
hadronized!~phaazon@2001:41d0:a:fe76::1
yeah, well, it impacts code readability a bit though

1720908965
Gliptic!~glip@irc.glip.cc
(?*foo).doSomething() ?

1720908966
hadronized!~phaazon@2001:41d0:a:fe76::1
I probably need to make my syntax highlighting consider the two operators with different colors

1720908969
ifreund!2940d10f8b@user/ifreund
I very rarely write .* in real code

1720909002
Gliptic!~glip@irc.glip.cc
this is probably a matter of familiarity

1720909006
hadronized!~phaazon@2001:41d0:a:fe76::1
probably

1720909014
ifreund!2940d10f8b@user/ifreund
as for why not (*foo), it's cause we don't want cdecl to be made for zig

1720909015
ifreund!2940d10f8b@user/ifreund
https://cdecl.org/

1720909035
Gliptic!~glip@irc.glip.cc
*foo also already means something else

1720909125
hadronized!~phaazon@2001:41d0:a:fe76::1
ifreund: first time I see that link haha

1720909196
ifreund!2940d10f8b@user/ifreund
I quite like this one: int (*(*foo)(const void *))[3]

1720909211
hadronized!~phaazon@2001:41d0:a:fe76::1
yeah, C function pointers are really bad

1720909216
Gliptic!~glip@irc.glip.cc
C++ spices this up even further

1720909219
hadronized!~phaazon@2001:41d0:a:fe76::1
I never understood the syntax, it makes no sense

1720909249
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
I personally think foo.* makes more sense since you are applying an operation (dereference) to the value foo. It's consistent with calling a function with foo as the "self" argument. Also, doesn't *foo make the parser significantly more complex? I thought I read something about Zig's syntax being somewhat designed around simplifying the parser.

1720909341
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
parsers themselves are more or less a solved problem, it probably wouldn't be a determining factor on its own

1720909364
DFP!~DFP@109.72.102.214
`int (*(*foo)(const void *))[3]` array of pointers to pointers to functions, that take a pointer to const void and return integers?

1720909394
DFP!~DFP@109.72.102.214
Ah, no. :D

1720909532
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
[3]**const fn(*anyopaque) c_int, right?

1720909578
Gliptic!~glip@irc.glip.cc
no, the function returns an [3]c_int

1720909595
DFP!~DFP@109.72.102.214
Apparently it returns a pointer to an array of 3 int.

1720909618
DFP!~DFP@109.72.102.214
I think returning arrays is explicitly forbidden in C.

1720909647
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
the answer is zsh: segmentation fault

1720909661
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
Then, I'm still confused by that one even with the plain language explanation.

1720909712
Gliptic!~glip@irc.glip.cc
it's read from the inside out

1720909823
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
Which is why Zig's syntax for types is easier for me to understand. I can build up the conceptual understanding of a type without backtracking within the text.

1720909836
DFP!~DFP@109.72.102.214
You can think of it as how you would unwrap it. First you take foo, dereference it to get the function. Call it with an argument to get the return value, dereference it, get index, and the final type is int.

1720909915
DFP!~DFP@109.72.102.214
I am actually not sure if you can dereference a function pointer in C... You might be able to. There were some caveats about it in the standard.

1720909991
Gliptic!~glip@irc.glip.cc
I seem to recall older compilers not liking it at least

1720910042
DFP!~DFP@109.72.102.214
Yup, seems to work fine. Seems you can dereference a function pointer as many times as you want.

1720910144
DFP!~DFP@109.72.102.214
If `a` is just a function returning void, you can totally do this: `(*************a)();`

1720910151
DFP!~DFP@109.72.102.214
Don't even need a pointer.

1720911228
DFP!~DFP@109.72.102.214
In Zig, apparently, you can only dereference a function reference once. But you can still call a function reference as a function, without dereferencing.

