1730165634
tsmanner!~tsmanner@165.204.11.250
Does anyone here have a favorite reference for x86/x86_64 instruction encoding rules?

1730167034
Affliction!affliction@idlerpg/player/affliction
The only rule for x86's instruction encoding is that there are no rules :)

1730167140
Affliction!affliction@idlerpg/player/affliction
Otherwise, I just stick with the intel manuals. Not the best reference, but, it'll tell you how to encode a given instruction. For decoding, there's opcode maps around for the basic instructions. For AVX stuff, that gets more complex.

1730167182
tsmanner!~tsmanner@165.204.11.250
lol yeah it certainly seems that way.  I found a nice flow chart in the AMD64 Architecture Programmer's Manual Volume 3.  Calling it complicated is an understatement haha

1730167196
daurnimator!~daurnimat@vultr.daurnimator.com
tsmanner: IIRC the trick is to look at it in 6 bit pieces or something?

1730167202
tsmanner!~tsmanner@165.204.11.250
I haven't dug in to AVX at all yet, but i've heard the stories lol

1730167366
tsmanner!~tsmanner@165.204.11.250
Oh interesting, I'll have to take that lense to a couple instructions and see what shakes out.  Unfortunately, I am trying to identify instructions from a stream of itext bytes and hoping there's some light-ish weight way just to figure out what instruction it is, or even just where the instruction boundaries are.

1730167437
daurnimator!~daurnimat@vultr.daurnimator.com
I'm not sure if it was 6... but there was some number of bits that you should look at for it to make more sense

1730167456
Affliction!affliction@idlerpg/player/affliction
Yeah, you'd need the bulk of a disassembler to even do that, I think. I'd probably just pull in capstone or some other disassembler library

1730167497
Affliction!affliction@idlerpg/player/affliction
daurnimator: Yeah, mod-r/m, and SIB all involve 3 bit fields

1730167509
Affliction!affliction@idlerpg/player/affliction
primary opcode kinda-sorta-not-really does too

1730167578
Affliction!affliction@idlerpg/player/affliction
naturally when the register file extended, well, now you have the extra bit in the REX, VEX, and EVEX prefixes too. Good fun.

1730167617
Affliction!affliction@idlerpg/player/affliction
tsmanner: the folks in ##asm might have advice too, though it's a pretty low traffic channel so you might have to wait

1730167736
tsmanner!~tsmanner@165.204.11.250
Affliction: good point!  And thanks for the leads, I'm sure I can learn some stuff from capstone etc as well, regardless of whether I end up using it.

1730231012
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Is it possible to test if a container / file contains a test with a given name?

1730231088
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
For example, I want to test in CI that every file within a subdirectory contains a doctest

1730231556
andrewrk!~andrewrk@mail.ziglang.org
not currently possible

1730231647
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
andrewrk: thanks

1730231695
andrewrk!~andrewrk@mail.ziglang.org
it's the kind of thing that would be fairly straightforward to do using std.zig.Ast if you really wanted it - especially if I added some more type safety to that API

1730231917
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
andrewrk: That's the path i'm already headed down :)

1730235650
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://zigbin.io/3310e9

1730235656
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Works great

