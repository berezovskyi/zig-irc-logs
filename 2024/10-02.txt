1727827776
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
I *think* this is just me being stupid, but sometimes I've got issues like this and I'm not sure where to see what line I'm actually having an issue with: https://zigbin.io/0ad477 

1727827803
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
I guess maybe zigbin wasn't the best for that since it's actually just the output of zig build, not source code, but it should be understandable, I think.

1727827874
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
(this is specifically just from ziglings, but I've had the issue in my own projects too)

1727828505
torque!~tachyon@user/torque
yes, the compile errors for fmt related errors in 0.13 are remarkably unhelpful

1727828512
torque!~tachyon@user/torque
hopefully this is fixed for 0.14

1727831058
andrewrk!~andrewrk@mail.ziglang.org
have you tried -freference-trace ?

1727831083
andrewrk!~andrewrk@mail.ziglang.org
ah I see the snippet now

1727831105
andrewrk!~andrewrk@mail.ziglang.org
umm why would it suggest -freference-trace if you did pass it?

1727831469
torque!~tachyon@user/torque
that does seem suspect

1727831475
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
I promise I did pass it lol

1727831480
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
but I was thinking about that

1727831507
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Could it be something with ziglings's build.zig?

1727831519
torque!~tachyon@user/torque
idk if the ziglings build system is doing something odd, but I can say that 0.13.0 does not produce correct trace for errors like this. it does appear to be fixed in master though

1727831547
torque!~tachyon@user/torque
see https://github.com/ziglang/zig/issues/21283

1727831639
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Thanks!

1727849085
moksh!~moksh@user/moksh
so is this irc channel bridged with discord?

1727851140
torque!~tachyon@user/torque
no

1727851166
torque!~tachyon@user/torque
(thankfully)

1727851204
moksh!~moksh@user/moksh
ohh cool

1727861738
Amun-Ra!~amun-ra@retro.rocks
how can I pass as an argument to function something that's returned via return {} like bufferedWriter's writer?

1727864502
cancername!~cancernam@user/cancername
Amun-Ra: you can use parameter names in the return type: fn (comptime Foo: type) Foo

1727864503
cancername!~cancernam@user/cancername
             {...}

1727864676
Amun-Ra!~amun-ra@retro.rocks
hmm, I'd like to pass said write to a function, I'll test that, thanks

