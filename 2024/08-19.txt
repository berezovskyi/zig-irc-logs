1724045063
Ayo!~Ayo@45.142.232.203
Heh, the discussion about altering the language to make other people's code cleaner reminds me of the least readable piece of garbage code I have ever written. That was in Elm, a language designed by its author to be as simple as possible in an attempt to force people to write clean code.

1724045160
Ayo!~Ayo@45.142.232.203
I don't have a point with that other than as a silly anecdote; I am capable of writing vomit in every language. :) I personally won't be missing usingnamespace, anyway

1724054745
ifreund!2940d10f8b@user/ifreund
yeah, won't miss usingnamespace at all here either

1724054810
ifreund!2940d10f8b@user/ifreund
I hate trying to find where things are defined in large C++ codebase because of how #include works and usingnamespace is no different

1724059835
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
I do like how rust does it.. every directory or file is a namespace , whereas in c++ you have namespaces & include & classes/nested classes 

1724059871
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
In c++ namespaces feel extraneous because of classes & includes but neither does exactly the same job

1724059936
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
But the rust module system did take time to get used to.. originally I was expecting something like the way python worked

1724060096
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
except in rust you can also do inline mods

1724060134
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
Yeah they have their uses too

1724060175
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
apart from compartmentalizing tests, I don't see anything commonly used

1724060238
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
Its somethign that gives me an irrational level of joy .. because in Rust any symbol in any file is automatically unambiguous, you can just use obvious short names.. and then keep part of the path in use

1724060282
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
Wheras in c one has to figure out just the right level of explicitness and abbreviation, and in c++ one has too many options (namespace, classes/nested classes), or just revert to c-like..)

1724060328
ifreund!2940d10f8b@user/ifreund
I'd argue that zig does even better than rust here due to enforcing lack of potentially ambiguous shadowing

1724060361
ifreund!2940d10f8b@user/ifreund
also, rust has different namespaces for macros and whatnot, which is jank

1724060617
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
its jank but also nice that you can use enum variants as constructor functions

1724060766
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
(Yeah the whole enum/match with expression syntax is one of rusts highlights)

1724060831
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
I did miss constructor functions being the typename but understood how rust was motivated to reduce ambiguity 

1724060890
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
Saying strict Vec3{},  then having to either do "Vec3::new(x,y,z)" or "vec3(x,y,z) /* a function name not the typee*/ did feel weird. And there was a temptation to do "fn Vec3(..)->Vec3{}" which looks the same but isn't

1724061081
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
Does zig end up doing the same name mangling as c++ or not

1724061113
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
One can't quite map rust symbols to a c++ namespace or class because the trait names appear in there

1724062177
ifreund!2940d10f8b@user/ifreund
davros1: no, zig does not do C++ style name mangling

1724077934
Olvilock!~Olvilock@user/Olvilock
Hi! Just hopped in to ask a quick question. Why does Ziglang allow a continue keyword in loops if one can instead break out of loop expression? Like in this issue: https://github.com/ziglang/zig/issues/10889

1724078045
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Olvilock: just my opinion: breaking the while block is confusing compared to the meaning of "continue"

1724078076
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
continue literally means keep going. breaking the while block means...break this scope (...and implicitly continue the loop)

1724078319
Ayo!~Ayo@45.142.232.203
Also just my opinion: Nothing wrong with having multiple ways to do the same thing

1724078356
Olvilock!~Olvilock@user/Olvilock
Still though, if I, for example, switch from using iterators and while (iter.next() |smth| :(expr()) {...} to just iterating over an array, I would be forced to refactor that snippet to for (array) |smth| { iter: {...} expr(); }

1724078579
Olvilock!~Olvilock@user/Olvilock
To refactor the continue expression I would need to break out of the scope :iter

1724078663
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
Does zig have 'for {...break..} else {..stuff to do if you didn't break}' by any chance

1724078698
davros1!~davros2@host86-184-190-18.range86-184.btcentralplus.com
Weird construct that can save having a 'did you find something in the loop' flag

1724078753
Gliptic!~glip@2a01:4f8:c012:91f3::1
it does

1724078791
Gliptic!~glip@2a01:4f8:c012:91f3::1
so does for

1724078797
Gliptic!~glip@2a01:4f8:c012:91f3::1
eh, I mean while

1724079148
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
<Ayo> Also just my opinion: Nothing wrong with having multiple ways to do the same thing

1724079148
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
part of the zig zen is literally "Only one obvious way to do things" though

1724079156
Olvilock!~Olvilock@user/Olvilock
rockorager The point is, for loop does not have continue expression, and if I need one all the continues become break :iter. If I don't refactor continue into break :iter in some place, it's a bug!

1724079452
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Olvilock: for does have continue

1724079500
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Oh I see

1724079513
Olvilock!~Olvilock@user/Olvilock
One example of such refactor: in non-recursive DFS for cycle search, I might decide to clean the stack variable instead of reallocating it on every iteration

1724079545
grayhatter!~grayhatte@user/grayhatter
I might have to refactor, isn't a convining argument against something

1724079558
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yeah I don't see why this is such an issue?

1724079593
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
if you want a continue statement in a for loop you can start it off with `defer {}`

1724079685
Olvilock!~Olvilock@user/Olvilock
Nah, that will be added to the error handling paths on allocations, bye bye instruction cache

1724079686
grayhatter!~grayhatte@user/grayhatter
there are a few cases where breaking/continuing a named block is much easier, but named block shouldn't be used unless they're solving that exact problem.

1724079828
grayhatter!~grayhatte@user/grayhatter
Olvilock: do you have a slightly longer or complex example? `while(iter.next() |smth| :(expr()) {}` seems like bad code in general

1724079846
Olvilock!~Olvilock@user/Olvilock
Yeah, just a sec

1724081818
Olvilock!~Olvilock@user/Olvilock
grayhatter The following example I used to solve https://open.kattis.com/problems/1dfroggerhard

1724081835
Olvilock!~Olvilock@user/Olvilock
const std = @import("std");

1724081835
Olvilock!~Olvilock@user/Olvilock
const Node = struct {

1724081836
Olvilock!~Olvilock@user/Olvilock
    next: ?usize,

1724081836
Olvilock!~Olvilock@user/Olvilock
    status: enum { fresh, pending, cycle, visited } = .fresh,

1724081837
Olvilock!~Olvilock@user/Olvilock
};

1724081837
Olvilock!~Olvilock@user/Olvilock
fn dfs_cycles(alloc: std.mem.Allocator, nodes: []Node) !void {

1724081838
Olvilock!~Olvilock@user/Olvilock
    var path: std.ArrayListUnmanaged(*Node) = .{};

1724081838
Olvilock!~Olvilock@user/Olvilock
    defer path.deinit(alloc);

1724081839
Olvilock!~Olvilock@user/Olvilock
    loop: for (nodes) |*start_node| {

1724081839
Olvilock!~Olvilock@user/Olvilock
        dfs: {

1724081840
Olvilock!~Olvilock@user/Olvilock
            var node = start_node;

1724081840
Olvilock!~Olvilock@user/Olvilock
            while (node.status == .fresh) {

1724081841
Olvilock!~Olvilock@user/Olvilock
                node.status = .pending;

1724081841
Olvilock!~Olvilock@user/Olvilock
                try path.append(alloc, node);

1724081842
Olvilock!~Olvilock@user/Olvilock
                node = &nodes[node.next orelse break :dfs];

1724081842
Olvilock!~Olvilock@user/Olvilock
            }

1724081843
Olvilock!~Olvilock@user/Olvilock
            switch (node.status) {

1724081843
Olvilock!~Olvilock@user/Olvilock
                .fresh => unreachable,

1724081855
Olvilock!~Olvilock@user/Olvilock
    const alloc = gpa.allocator();

1724081855
Olvilock!~Olvilock@user/Olvilock
    try dfs_cycles(alloc, nodes[0..]);

1724081856
Olvilock!~Olvilock@user/Olvilock
    const stdout = std.io.getStdOut().writer();

1724081856
Olvilock!~Olvilock@user/Olvilock
    for (nodes, 0..) |node, id| {

1724081857
Olvilock!~Olvilock@user/Olvilock
        try stdout.print("{}: {}\n", .{ id, node.status });

1724081857
Olvilock!~Olvilock@user/Olvilock
    }

1724081858
Olvilock!~Olvilock@user/Olvilock
}

1724081876
grayhatter!~grayhatte@user/grayhatter
Olvilock: generally, you want to avoid sending many lines, and instead use a link to a paste of somekind, lick gist.github.com

1724081888
Olvilock!~Olvilock@user/Olvilock
Ok thanks

1724082000
grayhatter!~grayhatte@user/grayhatter
many lines you tried to send didn't get sent

1724082030
grayhatter!~grayhatte@user/grayhatter
one of the many reasons a paste is better instead of many lines

1724082043
Olvilock!~Olvilock@user/Olvilock
Here it is https://gist.github.com/Olvilock/e840d1a23d92ed57350e33b7dd89fd08

1724082498
grayhatter!~grayhatte@user/grayhatter
Olvilock: you don't need labels here

1724082601
Olvilock!~Olvilock@user/Olvilock
At least in line 17, I do

1724082628
grayhatter!~grayhatte@user/grayhatter
if you remove the dfs: label, you can use break/continue and don't need to worry about complex flow control

1724082652
grayhatter!~grayhatte@user/grayhatter
Olvilock: you don't why do you insist line 17 requires the dfs: block?

1724082679
Olvilock!~Olvilock@user/Olvilock
I need to annotate the path as visited

1724082746
grayhatter!~grayhatte@user/grayhatter
if (node.next == null) { while (path.popOrNull()) |n| n.status = .visited; continue; } 

1724082759
grayhatter!~grayhatte@user/grayhatter
or 

1724082855
Olvilock!~Olvilock@user/Olvilock
We could duplicate all continue expressions on every continue the same way

1724082893
grayhatter!~grayhatte@user/grayhatter
Olvilock: I don't know what you mean by all duplicate all continue expressions 

1724082961
Olvilock!~Olvilock@user/Olvilock
grayhatter you just copied line 31 to the 'null' path on line 17, I'd like to not do that

1724083002
grayhatter!~grayhatte@user/grayhatter
Olvilock: you could also use a defer instead

1724083028
Olvilock!~Olvilock@user/Olvilock
But I also allocate on line 16, that could fail

1724083029
grayhatter!~grayhatte@user/grayhatter
but you're adding a lot of error prone complexity instead of duplicating a single line?

1724083082
grayhatter!~grayhatte@user/grayhatter
if that alloc fails, your program will crash either way... so why does that matter?

1724083126
Olvilock!~Olvilock@user/Olvilock
I may try to handle that

1724083168
grayhatter!~grayhatte@user/grayhatter
can you describe an example where that alloc would fail, but your program could continue?

1724083289
grayhatter!~grayhatte@user/grayhatter
dfs_cycles as written is very heap dependent, if you wanted to rewrite it to be tolerant to memory allocation failuers, you'd likely have to rewrite the whole function, so at that point how can you be sure that any of the other logic or flow control would survive?  

1724083298
Olvilock!~Olvilock@user/Olvilock
It's one of the main points of the Zig Zen: "memory is a resource"

1724083412
Olvilock!~Olvilock@user/Olvilock
grayhatter dfs_cycles is heap-dependent, there is no way to evade recursion otherwise

1724083435
Olvilock!~Olvilock@user/Olvilock
The calling code might try using a different allocator

1724083436
grayhatter!~grayhatte@user/grayhatter
that's just an observation, it's not an argument or explanation... 

1724083479
grayhatter!~grayhatte@user/grayhatter
but so is avoid local maximums, so in this case, you shouldn't hyperfocus on memory allocation or avoiding duplicating a single line of code

1724083509
Olvilock!~Olvilock@user/Olvilock
What is the local maximum here?

1724083573
grayhatter!~grayhatte@user/grayhatter
Olvilock: the local maximum is trying to avoid duplicating a single line of code to drastically simplfy the rest of the logic and flow. The local maximum is 1 line of code, the goal is, better readable, understandable code

1724083614
grayhatter!~grayhatte@user/grayhatter
also

1724083718
grayhatter!~grayhatte@user/grayhatter
IIRC free isn't allowed to raise. so popOrNull() would be safe in all cases within that defer, and if you accept an unknown allocator, you can't handle that allocator error within your function, so you'd *need* to return the error to the caller. Where your state would be undefined. So emptying the partially completed path, would be a fine outcome.

1724084024
Olvilock!~Olvilock@user/Olvilock
I added the relevant errdefer, now the state is well-defined even after failure, that is, caller can continue with different allocator

1724084269
grayhatter!~grayhatte@user/grayhatter
this won't compile, .free doesn't exist in the enum. But you didn't handle that case either, so the behavior is currently invalid, and adding .free to the enum will still result in "undefined behavior", not "well-defined"

1724084347
Olvilock!~Olvilock@user/Olvilock
That should have been fresh

1724084508
Olvilock!~Olvilock@user/Olvilock
It unwinds to the last successful iteration. On the next call, the processed nodes will be skipped

1724084580
grayhatter!~grayhatte@user/grayhatter
but, to bring it back to your original question, why does zig allow break/continue in nested loops? because it's a programming language where you need to be able to control the flow of the program. More specific to your example, why does Zig allow for nested labels? Because often it allows for more explicit and clear control of the program. The problem you're having isn't the same one in the issue you

1724084582
grayhatter!~grayhatte@user/grayhatter
linked. The problem with the example code is that you're expressing the logic and flow control in a convoluted way. You should prefer simplicity here where you don't need the extra named block. Yes, you CAN write it that way, but when you write it that way, you have the problems with flow control that you're asking about.

1724084772
grayhatter!~grayhatte@user/grayhatter
I'd suggest you try to rewrite this code without using any labels. It can easily be done, and I think you'll find the code to be much simpler and easier to work with

1724084915
Olvilock!~Olvilock@user/Olvilock
Ok, I get it. Still, I don't believe that continue expression is never desirable in for loops, I just aimed to provide an example

1724085761
Olvilock!~Olvilock@user/Olvilock
grayhatter thanks for a discussion though. I guess it's just me who finds not allowing continue simpler 🤷‍♂️

1724086617
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Olvilock: you sufficiently nerdsniped me

1724086739
torque!~tachyon@user/torque
late on the scene: continue and break perform semantically different tasks and even though you can get the same behavior of `continue` with `break` it does not communicate intent as clearly

1724086752
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://zigbin.io/9b801e

1724086766
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
no continues, no allocations

1724086880
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
could also remove the pending status

1724087009
Olvilock!~Olvilock@user/Olvilock
rockorager The code doesn't work if the first node is in a cycle

1724087018
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The first node _is_ in a cycle

1724087048
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
0->1->3->1->3->1

1724087049
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
etc

1724087094
Olvilock!~Olvilock@user/Olvilock
The cycle is (1, 3), 0 is not in it

1724087120
ifreund!2940d10f8b@user/ifreund
yeah, torque is exactly right

1724087136
ifreund!2940d10f8b@user/ifreund
if you go down the path of removing all features that duplicate functionality you get brainfuck

1724087225
Olvilock!~Olvilock@user/Olvilock
rockorager Also, your solution is O(n^2)

1724087291
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ah, I misunderstood what was meant by .cycle then

1724087358
Olvilock!~Olvilock@user/Olvilock
rockorager Your code will mark 0 as visited, even if it is in a cycle

1724087495
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yes it would. I was hoping to provide an example of how you might refactor your code to avoid the error handling and "continue" concerns you had

1724096913
StopNGo!~StopNGo@p200300dbdf375d007143ca22251ea5e0.dip0.t-ipconnect.de
I'm, unfortunately, not following Zig closely these days, having to be occupied with other stuff, but THIS, _this_ (in conjunction with performance) is the exact mindset that makes me believe in Zig as the only language I could readily use whenever I get to hobbyist coding again. (Due to my own mental limits.)

1724096996
StopNGo!~StopNGo@p200300dbdf375d007143ca22251ea5e0.dip0.t-ipconnect.de
<andrewrk> I may have a lot of experience but I am not good at holding a lot of complexity in my head at once | I don't like having to remember many things at the same time  || Which doesn't mean I'll agree with every language change made for "simplicity"'s sake. I really don't like Python, for instance.

