1706410734
mips64el!~mips64el@193.138.218.219
hi

1706411638
bubuche87!~bubuche87@37.170.89.29
(I am still poking around about bison/yacc etc for zig). I tried to use the "translate-c" option of zig on the ".c" generated by bison, but it fails to export (at least) yyparse. It turns out this function contains gotos ...

1706411712
bubuche87!~bubuche87@37.170.89.29
The .zig file contains a comment with a warning: "warning: TODO implement translation of stmt class GotoStmtClass"

1706411804
bubuche87!~bubuche87@37.170.89.29
(and it's not specific to bison: I think I saw that in Lemon too (another parser generator))

1706411958
bubuche87!~bubuche87@37.170.89.29
(at the same time I am trying to write my own LALR(1) parser generator to have some control on the generated code, but it's not that trivial)

1706412533
bubuche87!~bubuche87@37.170.89.29
(I read that zig used to have goto but it seems they removed it...)

1706412643
bubuche87!~bubuche87@37.170.89.29
Hmm it's 04:29 am here. I'll go to sleep. Gn all.

1706415966
remiliascarlet!~remiliasc@user/remiliascarlet
andrewrk: The one problem with that is that libc versions tend to differ between Linux distro's and systemd distro's. It's sad, but if that's the limitation of Linux, so be it then.

1706416020
remiliascarlet!~remiliasc@user/remiliascarlet
And then there's distro's that use musl instead of libc. I guess I'll need to compile the same binary on a billion different distro's then...

1706417170
somercet!~somercet@c-73-144-84-45.hsd1.mi.comcast.net
remiliascarlet, How much difference between distros between just glibc Linux and systemd Linux?

1706417431
remiliascarlet!~remiliasc@user/remiliascarlet
I used "Linux vs SystemD" more satiracle here. But the difference in versions typically cause problems. I remember how a decade ago I would compile a GTK+ program on Arch, and it would run fine on Arch, but not on Ubuntu, then you compile on Ubuntu, and it won't work on Fedora. And it was GTK+ 2.6.whatever, identical versions across them all, because GTK 3 was the more recent version at the time.

1706417465
remiliascarlet!~remiliasc@user/remiliascarlet
So that's what made me dispise dynamic linking.

1706417628
remiliascarlet!~remiliasc@user/remiliascarlet
And whenever I compile a Go binary or a Zig library (given no C API's were used), I can run the same binary perfectly fine regardless of distro.

1706418268
somercet!~somercet@c-73-144-84-45.hsd1.mi.comcast.net
ah

1706445397
bubuche87!~bubuche87@37.166.198.173
Hi

1706446876
daurnimator!~daurnimat@vultr.daurnimator.com
remiliascarlet: glibc is forwards compatible. i.e. you need to compile against the oldest glibc you want to allow end users to have. zig supports this as a target: `-target x86_64-linux-glibc2.25` IIRC

1706446976
daurnimator!~daurnimat@vultr.daurnimator.com
such a glibc target version would work on glibc 2.25 and up; i.e. such a binary would work fine a system running glibc 2.32

1706447114
bubuche87!~bubuche87@37.166.198.173
(I tried to transpile the code generated by bison (which is in C) to zig, using the translate-c option, but it fails because the generated C contains gotos. I am trying to find a solution online)

1706447205
bubuche87!~bubuche87@37.166.198.173
(I didn't find an option for bison to have it generate code that wouldn't use gotos. So now I try to find a way to have zig accepting gotos)

1706448259
remiliascarlet!~remiliasc@user/remiliascarlet
daurnimator: Alright, good to know.

1706448425
remiliascarlet!~remiliasc@user/remiliascarlet
Time to dig up my Debian installation floppies from 1993.

1706449480
daurnimator!~daurnimat@vultr.daurnimator.com
remiliascarlet: huh?

1706449495
daurnimator!~daurnimat@vultr.daurnimator.com
remiliascarlet: every zig installation includes every version of glibc

1706449503
daurnimator!~daurnimat@vultr.daurnimator.com
so you don't need to go find an old distro

1706450631
remiliascarlet!~remiliasc@user/remiliascarlet
I was just joking.

1706467083
bubuche87!~bubuche87@37.166.198.173
(that was a productive session üòÅ)

1706467249
bubuche87!~bubuche87@37.166.198.173
I can output what should be a parser. And even if there are still some parts I am unsure about, it should be fixable if there is a mistake there. I output C code, but I already injected some kind of allocator logic in there. And it translates to zig without error.

1706467483
bubuche87!~bubuche87@37.166.198.173
I would like to have the parser definition (the tables etc) separated from the parser code (the algorithm that used those tables). I also would like the actions (the semantic) to be pluggable. The parser should take 1) the tables, 2) a struct containing pointers to functions (the semantic), 3) the input. About 3), I will try to have a push parser.

1706467639
bubuche87!~bubuche87@37.166.198.173
If I manage to do all of that the result should be pretty neat, especially with the zig idea of user-decided allocator.

1706479563
andrewrk!~andrewrk@mail.ziglang.org
remiliascarlet, you might enjoy this talk I gave a while back about trying to make a binary that works on any linux distro: https://www.youtube.com/watch?v=pq1XqP4-qOo

1706480340
bubuche87!~bubuche87@2001:861:3890:5a60:f027:2528:efa0:da76
(about the parser generator: I think I'll have a problem with my "table separated from the compiler"-approach, because it means that based on data I'll have to call functions with a varying number of parameters with varying types. Not trivial)

1706480765
bubuche87!~bubuche87@2001:861:3890:5a60:95f8:2654:c989:6390
(sorry, had to reboot android)

1706480992
bubuche87!~bubuche87@2001:861:3890:5a60:95f8:2654:c989:6390
What I meant was : if the parser takes "the LALR tables"¬† + "the semantic actions" + "the input" it means that, based on the content of the tables it will have to call the correct function from "the semantic actions". Which means "call functions based on data (the tables)". I have some ideas but they aren't very pretty.

1706483237
remiliascarlet!~remiliasc@user/remiliascarlet
andrewrk: Quite a while back it seems, I'll take a look at it. Also, good morning.

1706486282
remiliascarlet!~remiliasc@user/remiliascarlet
andrewrk: One issue that came up in that video is that you're calling for distro maintainers to support statically linked OpenGL and Vulkan drivers. The problem is that most distro maintainers tend to be anti-static linking for some reason.

1706486340
andrewrk!~andrewrk@mail.ziglang.org
well, yes. that policy is directly harming this use case

1706486391
andrewrk!~andrewrk@mail.ziglang.org
I'm not suggesting full static linking necessarily but to provide a standardized way for a statically linked linux executable to dynamically load drivers

