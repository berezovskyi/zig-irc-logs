1730506061
grayhatter!~grayhatte@user/grayhatter
andrewrk: I updated my comment with what I understood your request to be. But now having extended it, I'm less confident I understood what you were asking/looking for?

1730506140
andrewrk!~andrewrk@mail.ziglang.org
a function with a parameter that is a struct. the same example from the intro paragraph of the proposal

1730506765
grayhatter!~grayhatte@user/grayhatter
andrewrk: so... I think I understood this time

1730507051
grayhatter!~grayhatte@user/grayhatter
> Edited 6 times

1730507082
grayhatter!~grayhatte@user/grayhatter
that awkard feeling when... you feel the need to squash your comments in addition to all your commits :D

1730507556
grayhatter!~grayhatte@user/grayhatter
replied to myself. The more I think about it, the more I feel like this is a good proposal, and deserves a place alongside comptime.

1730507660
grayhatter!~grayhatte@user/grayhatter
does SMTP belong in stdlib?

1730507683
andrewrk!~andrewrk@mail.ziglang.org
no

1730507690
grayhatter!~grayhatte@user/grayhatter
http does?

1730507711
andrewrk!~andrewrk@mail.ziglang.org
the build system does not depend on SMTP

1730507829
grayhatter!~grayhatte@user/grayhatter
side thought, I'm torn on if http belongs in stdlib. I'd **love** for zig to have a cannon "extended" lib. That has very simple, very unopinionated, feature incomplete options. Something that isn't intended or expected to replace well cared for libaries, but just a way to get a simple POC working just for playing around.

1730507862
grayhatter!~grayhatte@user/grayhatter
I'm no longer torn, because of the point andrewrk just made. But I still think a "contrib" library would be a nice thing to have

1730507879
hadronized!~hadronize@2001:41d0:a:fe76::1
is there a way to configure zls to, for instance, change the number of space indentation should be using?

1730507908
grayhatter!~grayhatte@user/grayhatter
hadronized: that's also enforced by the compiler, so I don't think there is, no

1730507937
grayhatter!~grayhatte@user/grayhatter
if you want to change indentation, you editor should have a way to show whatever indentation levels you want, while still obeying what the compiler requires 

1730507959
hadronized!~hadronize@2001:41d0:a:fe76::1
what? :D

1730507968
hadronized!~hadronize@2001:41d0:a:fe76::1
if it’s 4 spaces it’s 4 spaces, no?

1730508112
grayhatter!~grayhatte@user/grayhatter
hadronized: no? It's quite possible I'm wrong, but I think in vim you can set indentation width (the amount of space seen/showen by the UI, to something like 2. Then if you use tabs for indentation, (which should be 8 spaces) it would show only 2 spaces instead of 8. And then you tell it to use 4 spaces for indentation, It'll still see, 1 level of indentation = 4 spaces, and only show you 2

1730508149
grayhatter!~grayhatte@user/grayhatter
I know I mistakenly configured sublime text this way, and it was putting in 8 spaces, but showing me only 2 for HTML... I about lost my mind trying to figure that one out lol

1730508172
hadronized!~hadronize@2001:41d0:a:fe76::1
oh really?

1730508182
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m not using vim (Kakoune), but I’ll check whether I have something like that

1730508259
grayhatter!~grayhatte@user/grayhatter
hadronized: I think zig tolerates tabs for indentation now two, so that might be an option. But, IMO, unless you have a hard need like for accessablitily, it's better to get used to the "normal" or common dailect, or accent that most/all zig users write with.

1730508289
grayhatter!~grayhatte@user/grayhatter
>  The editor is heavily inspired by the classic vi by Bill Joy, as well as its successor Vim by Bram Moolenaar.

1730508305
hadronized!~hadronize@2001:41d0:a:fe76::1
RIP :(

1730508308
grayhatter!~grayhatte@user/grayhatter
probably possible, the keywords you might want to look for are tabwidth, and tab expantion

1730508376
grayhatter!~grayhatte@user/grayhatter
lol, I remember where I heard about this editor before, my friends and I were trolling about it, because it includes clippy

1730508387
grayhatter!~grayhatte@user/grayhatter
hadronized: how are you enjoying it?

1730508399
hadronized!~hadronize@2001:41d0:a:fe76::1
tons; it’s my favorite editor by far

1730508408
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m ping-ponging with Helix, but I prefer Kakoune in the end

1730508412
grayhatter!~grayhatte@user/grayhatter
any reason?

1730508415
hadronized!~hadronize@2001:41d0:a:fe76::1
(I’m maintaining kak-tree-sitter)

1730508439
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, many! it’s summed up here: https://strongly-typed-thoughts.net/blog/kakoune-philosophy

1730508447
hadronized!~hadronize@2001:41d0:a:fe76::1
to sum it up, the design of the editor is fantastic

1730508461
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
grayhatter: I don't think zig allows tabs anywhere actually

1730508475
hadronized!~hadronize@2001:41d0:a:fe76::1
the multiselection-centric approach, the UNIX philosophy (there’s menu / UI, but nothing to back them up natively, so you have to use other tools for that)

1730508490
hadronized!~hadronize@2001:41d0:a:fe76::1
the orthogonality approach of the editor is really, really powerful

1730508499
hadronized!~hadronize@2001:41d0:a:fe76::1
integrating a new idea is often times a oneliner

1730508513
hadronized!~hadronize@2001:41d0:a:fe76::1
(well, tree-sitter took me a lot of time to do correctly, and clearly not a oneliner, but well :) )

1730508543
hadronized!~hadronize@2001:41d0:a:fe76::1
it comes with some “tools” (basically just integration of systems tools) that I absolutely adore

1730508577
hadronized!~hadronize@2001:41d0:a:fe76::1
for instance, git.kak understands some basic git commands, like git diff, and turn them into a buffer that you can press <return> on lines to jump to the line under the cursor, etc. etc.

1730508585
hadronized!~hadronize@2001:41d0:a:fe76::1
and all of that is just basically just integrating the output of git diff

1730508611
hadronized!~hadronize@2001:41d0:a:fe76::1
I have notes.kak, that is basically a small subset of org-mode but for kakoune, using fd and rg

1730508633
hadronized!~hadronize@2001:41d0:a:fe76::1
back to zls, I agree I should get used to the default thing, but I don’t like 4 space indent :D

1730508636
hadronized!~hadronize@2001:41d0:a:fe76::1
I think it looks bad :P

1730508715
grayhatter!~grayhatte@user/grayhatter
hadronized: I used to ***hate*** the double |bar| in something like `for (list) |each| {}` but you get used to it. 

1730508737
grayhatter!~grayhatte@user/grayhatter
now I don't really care anymore, I have more important things to spend my time on

1730508770
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: what language did you come from?

1730508781
hadronized!~hadronize@2001:41d0:a:fe76::1
it feels almost natural to me coming from Rust

1730508789
hadronized!~hadronize@2001:41d0:a:fe76::1
foo.map(|each| {}) // :P

1730508807
grayhatter!~grayhatte@user/grayhatter
as for large amounts of time spent I went C -> Python -> Zig

1730508835
hadronized!~hadronize@2001:41d0:a:fe76::1
(I do agree though that I think the best syntax for lambda-like constructs is Java; a -> …)

1730508850
hadronized!~hadronize@2001:41d0:a:fe76::1
(Haskell’s \a -> is almost good but the backslack for λ is super weird with hindsight)

1730508862
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: interesting, I would never put C and Python in the same bucket

1730508869
hadronized!~hadronize@2001:41d0:a:fe76::1
I would have more expected to see Python along with Go or Java

1730508970
hadronized!~hadronize@2001:41d0:a:fe76::1
also, talking about syntax and Zig, I like the fact that removing the last trailing comma lays things inline, and adding it lays them in a block

1730508974
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s a subtle thing, but I like it

1730564536
netvor!~netvor@185.5.68.52
this keeps bugging me: when I have eg. `var foo = std.heap.FixedBufferAllocator.init(...);,  var bar = foo.allocator();`  which one of those is "the allocator"?  or more generally, why there have to be 2 objects, not one (ie. why can't i just use foo.alloc(..))?

1730564931
netvor!~netvor@185.5.68.52
i usually end up passing the result of .allocator() as `allocator: std.mem.Allocator` (and that's what i tend to see in std) but then again, it seems that there are two kinds of things but just one term

1730564963
Gliptic!~glip@2a01:4f8:c012:91f3::1
netvor: `bar` is the allocator, which is the common interface and can be cheaply passed around. It contains a pointer to `foo` which can be different types. Allocator exists to dynamically reference all kinds of allocators

1730565028
Gliptic!~glip@2a01:4f8:c012:91f3::1
so, I mean, they're both allocators, Allocator is just the "type erased" interface to them

1730565064
Gliptic!~glip@2a01:4f8:c012:91f3::1
just like AnyWriter is an interface to any kind of writer

1730565182
netvor!~netvor@185.5.68.52
i feel there has to be another name for the parent object (if only just for me :D)

1730565234
Gliptic!~glip@2a01:4f8:c012:91f3::1
think of the parent object as holding the allocator state, or something..

1730565534
netvor!~netvor@185.5.68.52
am i right, then: in terms of custom allocators, interfaces of FixedBufferAllocator and ArenaAllocator don't matter (after all they only seem to share .allocator() and .init()).   all that matters is that i somehow end up with `var something: std.mem.Allocator` and then pass that around

1730565646
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, FixedBufferAllocator etc. don't bother to have any public .alloc methods because they're always used via std.mem.Allocator

1730565932
netvor!~netvor@185.5.68.52
i see, i guess in practice i will need a "memory chunk state" object like that on some high level, like main(), just so that i have the .init()/.deinit() pair (it's what i always end up doing now, when i'm playing with servers where the arena approach makes so much sense)

1730565953
netvor!~netvor@185.5.68.52
but that is not a standardized interface, right?

1730565992
netvor!~netvor@185.5.68.52
(the only part that is standardized is std.mem.Allocator with its low-level things like .create/.destroy, .alloc, etc.)

1730566054
Gliptic!~glip@2a01:4f8:c012:91f3::1
what do you mean isn't standardized?

1730566088
Gliptic!~glip@2a01:4f8:c012:91f3::1
I mean, what more do you need

1730566127
netvor!~netvor@185.5.68.52
don't get me wrong, i don't need anything, i'm just trying to wrap my head around it :)

1730566143
Gliptic!~glip@2a01:4f8:c012:91f3::1
ah

1730566226
netvor!~netvor@185.5.68.52
by "isn't standardized" is that there's no guarrantee of an interface, ie. it can't be made generic an passed around lie std.mem.Allocator / std.io.AnyWriter does 

1730566253
netvor!~netvor@185.5.68.52
but i do realize that i don't really need it normally

1730566275
Gliptic!~glip@2a01:4f8:c012:91f3::1
you wouldn't pass around the allocator state itself, it would have to be a pointer to it in that case

1730566281
Gliptic!~glip@2a01:4f8:c012:91f3::1
and that's what std.mem.Allocator is..

1730566553
netvor!~netvor@185.5.68.52
thanks, i'll keep this in mind and go read some more std

1730570379
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
shoutout arena allocator because I can be a little dumb and not worry about de-allocating 

1730570405
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
I lowkey forgot I was using an arena allocator and was kind of confused on how some of my stuff wasn't a memory leak (according to valgrind) until just now 

1730570529
netvor!~netvor@185.5.68.52
arena allocator is awesome, but what I tend to do nowadays (i'm working on some codecrafters examples, ie. servers) is to get a fixed buff on each new thread and then wrap a FixedBufferAllocator with ArenaAllocator

