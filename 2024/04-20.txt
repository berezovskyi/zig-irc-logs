1713582362
andrewrk!~andrewrk@mail.ziglang.org
congrats to all who contributed

1713582381
andrewrk!~andrewrk@mail.ziglang.org
and thanks to those who donate

1713608121
andrewrk!~andrewrk@mail.ziglang.org
release notes are up: https://ziglang.org/download/0.12.0/release-notes.html

1713608140
andrewrk!~andrewrk@mail.ziglang.org
edits and additions are welcome, the source file is here: https://github.com/ziglang/www.ziglang.org/blob/master/src/download/0.12.0/release-notes.html

1713609039
ifreund!2940d10f8b@user/ifreund
Very nice summary :)

1713609095
ifreund!2940d10f8b@user/ifreund
the release notes may no longer be extremely long, but they are definitely still long :P

1713609931
ifreund!2940d10f8b@user/ifreund
just tried to build river using the self-hosted x86 backend for the first time...

1713609950
ifreund!2940d10f8b@user/ifreund
and it just worked

1713610105
Earnestly!~earnest@user/earnestly
Can the keybinds in the docs also be accessed via links? 'u' is "undo" in my browser and I've had to otherwise enter a caret mode to access browser based keybinds

1713610233
lordmzte!~LordMZTE@user/lordmzte
I wonder how much of the Zig ecosystem will stay on 0.12 now rather than following master. I'm still unsure If I want to keep my stuff following master, or also stick to 0.12 now.

1713610418
ifreund!2940d10f8b@user/ifreund
I'd strongly suggest sticking to 0.12 unless your development is somehow blocked by some bug that's only fixed on master

1713610443
ifreund!2940d10f8b@user/ifreund
river has stuck to stable releases since like 0.8.0 or so

1713610478
lordmzte!~LordMZTE@user/lordmzte
I usually stick to stable releases for a week or so and then some cool feature drops on master and i'll use that instead

1713610502
lordmzte!~LordMZTE@user/lordmzte
This is probably what'll happen once async is out for example (that was planned for 0.13, right?)

1713610529
ifreund!2940d10f8b@user/ifreund
I strongly doubt that async will land in the 0.13 release cycle

1713610541
ifreund!2940d10f8b@user/ifreund
it's not the priority at the moment (read the release notes)

1713610546
lordmzte!~LordMZTE@user/lordmzte
will do

1713610936
ifreund!2940d10f8b@user/ifreund
interesting, the self hosted x86 backend generates much larger unstripped binaries than LLVM debug and passing the strip flag to zig doesn't seem to affect it as much

1713610993
ifreund!2940d10f8b@user/ifreund
however using the strip(1) command line tool in combination with the -Dstrip flag passed to zig build sees it get much closer to LLVM and even beat it for one of river's binaries

1713610996
ifreund!2940d10f8b@user/ifreund
https://paste.sr.ht/~ifreund/2f2e6511fb2c51e0e03d03072ecdc3b91b87b918

1713611012
ifreund!2940d10f8b@user/ifreund
jacobly: might be interesting to you ^

1713611016
ifreund!2940d10f8b@user/ifreund
and very nice work :)

1713611062
jacobly!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
yes, that's just how the self-hosted incremental linker works, it's not meant to produce release binaries

1713611088
ifreund!2940d10f8b@user/ifreund
I don't notice any runtime perf difference but river isn't CPU bound so I wouldn't really expect to feel one

1713611095
ifreund!2940d10f8b@user/ifreund
ah, yeah makes sense

1713611131
ifreund!2940d10f8b@user/ifreund
does make me wonder why the llvm riverctl binary is so large though :D

1713611215
jacobly!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
the strip command will delete all the unused space and emit a file with just the allocated parts

1713635694
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
I encountered a problem yesterday, that from my google results many people already came across....that is creating of struct instances in a function and then returning it and that choosing var/const has a massive influence here. Coming from Go that is something I easily forget about. Is there anything planned to let the compiler check for such a thing?

1713636671
Gliptic!~glip@irc.glip.cc
can you show an example of what you mean?

1713636717
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
sure...give me a sec please

1713637113
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Gliptic: of course it is an artificial example but this is, what I mean https://zigbin.io/1dc662

1713637181
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
What I learned is, that if I create a struct instance with "var" inside of a function and return it, it's unsafe because it might be altready overwritten because it is created on the stack with limited lifetime?

1713637217
Gliptic!~glip@irc.glip.cc
no, that makes no sense

1713637241
Gliptic!~glip@irc.glip.cc
it doesn't matter whether the struct you return was var or const

1713637250
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
wait...I think I read such a thing in the documentation too

1713637306
Gliptic!~glip@irc.glip.cc
why would it matter

1713637308
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Here:

1713637310
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
var declarations inside functions are stored in the function's stack frame. Once a function returns, any Pointers to variables in the function's stack frame become invalid references, and dereferencing them becomes unchecked Undefined Behavior. 

1713637323
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
that's from the memory section in the official documentation

1713637324
Gliptic!~glip@irc.glip.cc
yes, pointers to, that applies to const as well

1713637340
Gliptic!~glip@irc.glip.cc
there are no pointers to the variables returned in your example

1713637349
Gliptic!~glip@irc.glip.cc
but it has nothing to do with var vs const anyway

1713637374
Gliptic!~glip@irc.glip.cc
you can't return *const to a const variable either

1713637436
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
hmm...in my projects code it's the same but the returned values in the struct instance change after a few lines of code in the calling code which doesn't change any value...I have no Idea what could cause that then

1713637456
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
wait, I'll copy the correspondent parts together in one pastebin

1713637684
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
https://zigbin.io/7cc6fe

1713637725
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
You'll see two debug prints in the upper, calling function....in the first, the values are correct but in the second, parts of base_attributes are changed

1713637771
Gliptic!~glip@irc.glip.cc
you mean character.base_attributes is different from the base_attributes printed first?

1713637789
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
yes

1713637801
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
now it comes and I was blind ;-)

1713637916
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
and it every time are only valued from base attributes, not the other values

1713637922
Gliptic!~glip@irc.glip.cc
well, no, I can't see anything wrong in this snippet anyway :P

1713637956
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
good...that makes me happy and sad at the same time ;-)

1713637973
Gliptic!~glip@irc.glip.cc
but weird stuff can happen if there's undefined behaviour

1713638011
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
The other function, creating the negative attributes causes no problem afterwards....

1713638027
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
but which undefined behaviour have I triggered...I don't get it

1713638125
Gliptic!~glip@irc.glip.cc
in these cases what I do is reduction, try to see how much and what you can remove until you can't reproduce it any more

1713638167
Gliptic!~glip@irc.glip.cc
but the parts that were changed in base_attributes, were they changed to nonsense values?

1713638285
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
this is an example output from a run https://zigbin.io/669811

1713638317
Gliptic!~glip@irc.glip.cc
I'm not seeing the "Base attributes before setting"

1713638398
Gliptic!~glip@irc.glip.cc
"Character:" is printed somewhere else than the code you posted

1713638416
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
sorry...this should be complete: https://zigbin.io/f92de0

1713638601
Gliptic!~glip@irc.glip.cc
beats me ¯\_(ツ)_/¯

1713638694
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
ok, then I'll change the base_attribute creation to a version just creating the struct, without prioritizing the values...thank you for having a look!

1713639156
lordmzte!~LordMZTE@user/lordmzte
What's the recommended way to work with a `sigset_t` in Zig? It appears to be defined as `[1024 / 32]u32` on linux and without any sort of API. It's also different on other systems.

1713639246
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Gliptic: interisting....after changing the creation function, the problems stays the same but I added a print for the returned base_attributes and they are correct....could it be a problem in std.debug.print, that with "any" doesn't print the valued incorrect?

1713639287
Gliptic!~glip@irc.glip.cc
Nightwulf: what if you print only a specific field of character.base_attributes?

1713639349
Gliptic!~glip@irc.glip.cc
it smells a bit like undefined memory, but I'm not seeing what

1713639370
Gliptic!~glip@irc.glip.cc
original base_attributes seems to be defined

1713639487
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
I just did exactly that -> number is wrong...then I set a breakpoint and in the debugger it looks correct

1713639506
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
I just did exactly that -> number is wrong...then I set a breakpoint and in the debugger it looks incorrect too

1713639515
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
typo \o/

1713639557
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
and yes, undefined memory was my first idea too which was why I came up with that var/const thing in the first place

1713640242
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Gliptic: found the line where things go wrong...it's the setting of the birthdate. If I change that to a const value it works flawlessly. If I use the function which creates the birthdate randomly, it scrambles the values of base_attributes o.O

1713640262
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
https://zigbin.io/df44f3

1713640283
Gliptic!~glip@irc.glip.cc
rollW20 etc.?

1713640360
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
one liners: https://zigbin.io/a91f85

1713640436
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
I don't see anything out of the ordinary \o/

1713640456
Gliptic!~glip@irc.glip.cc
what about the instance of std.Random, where is that stored?

1713640515
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
In a struct which is created in main.zig and then passed to the character creation 

1713640536
Gliptic!~glip@irc.glip.cc
passed?

1713640557
Gliptic!~glip@irc.glip.cc
I mean, when are you called .random() on it then?

1713640578
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
https://zigbin.io/01b3f5

1713640581
Gliptic!~glip@irc.glip.cc
because passing the instance invalidates any opaque std.Random references

1713640600
Gliptic!~glip@irc.glip.cc
ok, that is a problem

1713640614
Gliptic!~glip@irc.glip.cc
you can't return a pointer to rand_impl

1713640626
Gliptic!~glip@irc.glip.cc
so the problem is what you thought from the start, just somewhere else :)

1713640654
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
hmm....I don't get why yet...but anyway, that doesn't deal with memory allocation so how can it cause that problem o.O

1713640672
Gliptic!~glip@irc.glip.cc
you have a reference to a dead variable

1713640683
Gliptic!~glip@irc.glip.cc
.random() returns a struct with a pointer to rand_impl

1713640687
Gliptic!~glip@irc.glip.cc
which is a local variable

1713640710
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Ahh...I see...so I have to do a .random() any time I use it?

1713640711
Gliptic!~glip@irc.glip.cc
that will be invalid after you return from the function

1713640717
Gliptic!~glip@irc.glip.cc
well, that's one way

1713640726
Gliptic!~glip@irc.glip.cc
probably the simplest

1713640759
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
what would be the other solution?

1713640822
Gliptic!~glip@irc.glip.cc
don't have globals :)

1713640868
Gliptic!~glip@irc.glip.cc
but I guess you want to avoid passing references to things around just to use the prng

1713641020
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
problem is, that it needs to be initialized and that's not a one liner and if you seed randomness for every call, you won't get good random numbers

1713641645
Gliptic!~glip@irc.glip.cc
Nightwulf: you have to keep the prng in the Globals to keep this structure

1713641848
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Yes, I just changed the type of the attribute in globals to be the implementation Xoshiro256 and call .random() before every usage but I have to pass the whole globals stuff then because I else pass const pointer to the implementation which is not expected

1713641952
Gliptic!~glip@irc.glip.cc
ah, globals is not actually a global

1713642007
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
not in the coding way of understanding it...it is a global object in the game but is not globally declared

1713642012
Gliptic!~glip@irc.glip.cc
you can just modify this a bit to create the PRNG in main

1713642022
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Just see above in the pastes

1713642022
Gliptic!~glip@irc.glip.cc
keep the std.Random in globals

1713642058
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
But that was what I did first 

1713642060
Gliptic!~glip@irc.glip.cc
you just need the PRNG to live for the whole duration of the game

1713642062
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
pub const Globals = struct {

1713642064
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
    rng: std.rand.Random,

1713642065
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
};

1713642071
Gliptic!~glip@irc.glip.cc
no, you're not creating the PRNG in main

1713642083
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
I do

1713642107
Gliptic!~glip@irc.glip.cc
no, you create it in init(), which returns

1713642277
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
hmm....standing on the hose there

1713643037
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Gliptic: I think I understood the problem now...because I create it in a function, the pointer to the PRNG is created in the functions stack frame and becomes invalid when I return from the function. It's that what you mean?

1713643046
Gliptic!~glip@irc.glip.cc
exactly

1713643060
Gliptic!~glip@irc.glip.cc
and calling the PRNG overwrites random variables on the stack

1713643262
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
I guess I've been using languages like Java or Go for too long. Have been aware of such things back in the day when using C/C++ \o/

1713643525
Nightwulf!~totto@p200300db0f1f89002ef05dfffea2cb51.dip0.t-ipconnect.de
Gliptic: thank you so much for your help. It works now!

1713643535
Gliptic!~glip@irc.glip.cc
np

