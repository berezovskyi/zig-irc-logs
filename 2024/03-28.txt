1711584028
ifreund!2940d10f8b@user/ifreund
nice!

1711584077
Earnestly!~earnest@user/earnestly
It appears to support sasl too

1711584100
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
SASL only...patches welcome

1711584107
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
It's TSL only as well

1711584134
ifreund!2940d10f8b@user/ifreund
rip oftc

1711584141
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Seriously limited, I'm open to more stuff but limiting to soju compatibly to get off the ground

1711584165
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
ifreund: if you connect over soju you'll get to oftc just fine ;)

1711584171
ifreund!2940d10f8b@user/ifreund
true :D

1711584202
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Seriously though, only try this out if you are willing to experiment. It's similar in nature to senpai

1711584224
ifreund!2940d10f8b@user/ifreund
senpai is what I use currently though it has some rough edges that annoy me

1711584255
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
But senpai is the most forward thinking IRCv3 client out there, It's great and I love it. zircon is a tribute to it

1711584315
ifreund!2940d10f8b@user/ifreund
nick completion isn't sorted by most recent message, it doesn't stop you from pasting 100s of newlines into a chat, it doesn't stop you from sending messages that exceed the size limit

1711584345
ifreund!2940d10f8b@user/ifreund
but yeah, in general it works quite well and i was happy to stop dealing with weechat configuration

1711584370
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Zircon does none of these either ðŸ˜‚ and arguably is worse at most right now!

1711584441
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
But if you are more willing to patch zig software, this is a good choice. It's *close* to senpai functionality

1711584484
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Either way, a fun project to test out my api for libvaxis, feed myself some dogfood, and learn zig networking + threading

1711584746
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
I suppose top priorities are nick completion, paste protection, and message limit detection :)

1711584945
ifreund!2940d10f8b@user/ifreund
hah, you may convert me with those features :D

1711584972
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
If that's what it takes ;)

1711585063
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Or maybe zircon takes 7.3 mb vs senpai's 28mb of ram ;)

1711585104
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
That's solely a zig vs go thing though, I have done no optimization on that front

1711585335
ifreund!2940d10f8b@user/ifreund
long term I'll use whichever annoys me the least as I tend to do with all software :)

1711585423
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Well if you try it out, let me know what annoys you so i can make it better :)

1711585676
ifreund!2940d10f8b@user/ifreund
for sure :)

1711585685
ifreund!2940d10f8b@user/ifreund
off to bed now though o7

1711587273
daurnimator!~daurnimat@vultr.daurnimator.com
leopoldek: IIRC lto was disabled because it made the build non reproducible? I'd have to have a look again

1711587748
leopoldek!~leopoldek@user/leopoldek
daurnimator: Enabled or disabled? Because it was enabled by default in the new update and I had to disable it.

1711587789
daurnimator!~daurnimat@vultr.daurnimator.com
oh okay. I can't remember. Will be looking closely once 0.12.0 is released

1711589446
mortmann!~mortmann@p57b2958a.dip0.t-ipconnect.de
there once was an irc client zircon. was it intentional to take over its name? lovely retro screenshot of it: http://catless.ncl.ac.uk/Programs/Zircon/zirc.gif 

1711590697
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
mortmann: no...that's unfortunate actually

1711590845
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Amazing screenshot

1711590980
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
Man, I don't even support Wallops

1711636905
motiejus!~motiejus@88.223.107.21
for those who haven't read yet, https://danluu.com/slow-device/ briefly mentions Zig documentation (with a positive sentiment) when discussing web performance. the full post is worth a read.

1711640634
tricon!~user@fsf/member/tricon
motiejus: I enjoyed that read. Thanks for sharing.

1711649895
sia!~sia@2.176.197.47
How do you see zig compared to Rust?

1711650913
ThinkT510!~auronanda@sortix/contributor/ThinkT510
I've seen a lot of people use the analogy that zig is to C what Rust is to C++

1711650933
ThinkT510!~auronanda@sortix/contributor/ThinkT510
not sure how accurate it is though

1711653821
andrewrk!~andrewrk@mail.ziglang.org
ThinkT510: it's an overly simplistic analysis that in my opinion is worthless

1711653827
tricon!~user@fsf/member/tricon
I find Zig more appealing, but it's hard to deny the ubiquity that Rust seems to be achieving.

1711653844
tricon!~user@fsf/member/tricon
andrewrk: I would agree with that as well, IMHO.

1711653916
ThinkT510!~auronanda@sortix/contributor/ThinkT510
I like the idea of no hidden control flow that zig offers

1711653925
tricon!~user@fsf/member/tricon
ThinkT510: 100%. Yes.

1711654185
ThinkT510!~auronanda@sortix/contributor/ThinkT510
the last question here gives an interesting perspective regarding rust and zig: https://github.com/roc-lang/roc/blob/main/www/content/faq.md

1711657060
sia!~sia@2.176.197.47
Didn't get this Since the standard library has to interact with raw generated machine code (or LLVM bitcode), the Rust code unavoidably needed unsafe annotations all over the place. This made one of Rust's biggest selling points inapplicable in this particular use case.

1711657782
sia!~sia@2.176.197.47
And btw what is this roc?

1711657867
ThinkT510!~auronanda@sortix/contributor/ThinkT510
It is a programming language implemented in Rust and Zig.

1711657920
ThinkT510!~auronanda@sortix/contributor/ThinkT510
They are effectively saying Zig is easier to do unsafe things in since you don't have to wrap everything in unsafe

1711658048
sia!~sia@2.176.197.47
I like to know the exact nature of their problem. Says standard lib has to interact with raw generated machine code. I don't get why.

1711658117
ThinkT510!~auronanda@sortix/contributor/ThinkT510
could be a design decision for performance reasons. just my guess

1711658119
sia!~sia@2.176.197.47
Well I have a problem with unsafe code in Rust anyways. (in other langauges too)

1711658184
sia!~sia@2.176.197.47
It is like saying we knew it was needed for you to do these dirty works but we couldn't make it safe for you. So you may have it just mark it nasty.

1711658291
ThinkT510!~auronanda@sortix/contributor/ThinkT510
unsafe doesn't always mean bad. it can simply mean that the compiler is unable to check the safety so it is your responsibility to manage the invariants.

1711658407
sia!~sia@2.176.197.47
That's what I said.

1711659732
Gliptic!~glip@irc.glip.cc
what else is it going to do in a systems language short of forcing you to prove to the compiler that everything is safe somehow? there are languages like ATS but they aren't popular by any stretch

