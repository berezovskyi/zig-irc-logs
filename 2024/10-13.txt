1728786039
andrewrk!~andrewrk@mail.ziglang.org
Synon: https://ziglang.org/documentation/0.13.0/std/#std.mem.writeInt

1728818589
Synon!~mkejji@user/Synon
andrewrk: it's a 404 on my end but I'll look for writeInt in the std library, thanks!

1728818638
Synon!~mkejji@user/Synon
oh the whole /documentation seems to be dowm at the moment

1728818669
Gliptic!~glip@2a01:4f8:c012:91f3::1
https://ziglang.org/ also looks a bit wonky

1728818713
Gliptic!~glip@2a01:4f8:c012:91f3::1
404 https://ziglang.org/css/navigation.css

1728819104
phaleth!~phaleth@user/phaleth
try `zig std` for offline docs

1728819277
Synon!~mkejji@user/Synon
phaleth: thanks! I forgot about that one

1728831823
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Is there any preference for when to just do .{<fields>} versus <TypeName>{<fields>}? For example, I (think) I saw both being used for returns in the std lib. 

1728832288
ifreund!2940d10f8b@user/ifreund
The_Buhs: there's no official recommendation but most core contributors prefer .{} rather than Foo{} where possible

1728832603
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
ifreund: thanks. So would it generally be preferred to do `const foo: Foo = .{}` instead of `const foo = Foo{}`, too? 

1728832623
ifreund!2940d10f8b@user/ifreund
yep

1728832640
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Cool, thanks

1728842418
reykjalin!7e28cf3a41@user/reykjalin
Are the Zig STL docs down for anyone else or is it just me? https://ziglang.org/documentation/master/std/

1728842426
reykjalin!7e28cf3a41@user/reykjalin
The 0.13.0 are also giving me a 404

1728842457
Gliptic!~glip@2a01:4f8:c012:91f3::1
lots of 404 on the site right now

1728842462
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
yeah

1728842488
Gliptic!~glip@2a01:4f8:c012:91f3::1
use `zig std`

1728842500
reykjalin!7e28cf3a41@user/reykjalin
oh, hadn't thought of that, thanks Gliptic <3

1728843049
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
reykjalin: o/

1728843068
reykjalin!7e28cf3a41@user/reykjalin
Oh hi rockorager! o/

1728843080
reykjalin!7e28cf3a41@user/reykjalin
You keep popping up in the communities I'm exploring now huh :)

1728843080
Synon!~mkejji@user/Synon
From this page: https://ziglang.org/learn/build-system/#conditional-compilation I tried the same thing but I get "error: no module named 'config'" when I try @import("config")

1728843107
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
reykjalin: or is it the other way around haha

1728843118
Synon!~mkejji@user/Synon
I thought it would be exposed simply by adding the exe.root_module.addOptions("config", options) but seems like I'm missing something

1728843126
reykjalin!7e28cf3a41@user/reykjalin
rockorager: o.O spooky

1728843609
reykjalin!7e28cf3a41@user/reykjalin
Synon: I have absolutely no idea what I'm talking about, but based on the documentation I think the "config" module has comptime known data? I don't think it's something inherent to Zig like the standard library.

1728843624
reykjalin!7e28cf3a41@user/reykjalin
Synon: You can see the sentence about this in the bottom of that section, below the code samples

1728843661
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
afaiu that example is made up, there's no builtin std config module

1728843665
reykjalin!7e28cf3a41@user/reykjalin
Synon: so you probably have to make your own config module with the options defined there

1728843697
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
and specifically getting the version from the build.zig.zon programatically isn't a thing yet

1728846623
Synon!~mkejji@user/Synon
reykjalin: I got it to work. Actually it's just a matter of having build-time options be accessible from the program. It just doesn't work for libs, just for exe apparently

1728846666
andrewrk!~andrewrk@mail.ziglang.org
oops: https://github.com/ziglang/www.ziglang.org/commit/faab7e1bc77665cdbdfa83805315eced7aa750c3

1728846705
ekaitz!~Ekaitz@94.73.34.227
andrewrk: hehe

1728846718
Synon!~mkejji@user/Synon
andrewrk: ahahah dangerous!

1728846765
Synon!~mkejji@user/Synon
that's what deleted the documentation?

1728846775
andrewrk!~andrewrk@mail.ziglang.org
yes

1728846780
andrewrk!~andrewrk@mail.ziglang.org
I'm about to restore from a backup

1728846781
ekaitz!~Ekaitz@94.73.34.227
lol

1728847878
captn3m0!~Thunderbi@49.207.205.37
I seem to be getting a 403 "Forbidden Error" while trying to access any of the docs. https://ziglang.org/documentation/0.13.0/ for eg. ASN AS24309

1728847900
grayhatter!~grayhatte@user/grayhatter
captn3m0: it's a known issue, restoring from backup is underway

1728847911
Gliptic!~glip@2a01:4f8:c012:91f3::1
hm, it was 404 before, progress :P

1728849062
GreaseMonkey!greaser@user/greasemonkey
i tend to use Tcl for the more nontrivial scripts but in this case i probably still would have considered using bash

1728849070
GreaseMonkey!greaser@user/greasemonkey
and even more nontrivial i tend to use Python

1728849155
reykjalin!7e28cf3a41@user/reykjalin
I choose to look on the bright side. If the docs hadn’t gone offline I wouldn’t have learned about `zig std`!

1728849187
reykjalin!7e28cf3a41@user/reykjalin
Synon: oh cool! Glad you got it to work :)

1728849265
GreaseMonkey!greaser@user/greasemonkey
yeah i ended up using locally-hosted docs even prior to zig std being a thing you had to run to get to the std module reference

1728849357
GreaseMonkey!greaser@user/greasemonkey
it's really nice to, y'know, not have to wait for a lot of round trips to a server, or rely on an internet connection, or rely on the server being up... which is why my old laptop had a local copy of the ALSA doxygen docs on it, and i know one work machine i had resulted in me getting a local copy of the Python docs

1728849849
reykjalin!7e28cf3a41@user/reykjalin
Yeah I think I’ll be using zig std exclusively from now on

1728852386
grayhatter!~grayhatte@user/grayhatter
why is http status phrase() non-exaustive? https://ziglang.org/documentation/master/std/#std.http.Status.phrase

1728852922
andrewrk!~andrewrk@mail.ziglang.org
because the spec allows any phrase

1728852995
grayhatter!~grayhatte@user/grayhatter
but the code can't generate any phrase

1728853065
grayhatter!~grayhatte@user/grayhatter
hmmm, that's an interesting idea if the code should reflect the spec as written over required correctness

1728853225
andrewrk!~andrewrk@mail.ziglang.org
is the API failing to model an actual problem? or are you theorizing about an imaginary problem?

1728853514
gog!~ada@user/meow/gog
heh teapot is implemented

1728853516
gog!~ada@user/meow/gog
nice

1728853542
grayhatter!~grayhatte@user/grayhatter
I'm writing an http header implementation, and just noticed that phrase() exists. I didn't want to to handeld the phrase = null case because my code can't ever encounter that case. But if I ever did encounter that case, I'd have to implement my own phrase() function for that response code that's not supported by std.http anyways. So I don't think the complexity added by it being non-exaustive is worth

1728853544
grayhatter!~grayhatte@user/grayhatter
it

1728853597
grayhatter!~grayhatte@user/grayhatter
so, I guess that's more of a theroretical problem usecase I didn't expect, so wanted more context so I could understand the part I was missing

1728853671
grayhatter!~grayhatte@user/grayhatter
I'd probably have to describe it as my surprise that the API is attempting to model a usecase I don't think "should" exist

1728855964
andrewrk!~andrewrk@mail.ziglang.org
I see

1728855995
andrewrk!~andrewrk@mail.ziglang.org
well, it must be nonexhaustive in order to handle the case when the server responds with an arbitrary number

1728856389
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
ifreund: are enums the same way, in that people tend to prefer const foo: Foo = .bar instead of either const foo: Foo = Foo.bar or const foo = Foo.bar?

1728857050
torque!~tachyon@user/torque
yes

1728857126
torque!~tachyon@user/torque
note that semantically `Foo.bar` may be either an enum member or a constant defined in that enum namespace (which may be of an arbitary type), so the first two phrasings are the most specific from a type perspective

1728857146
torque!~tachyon@user/torque
the middle phrasing is just kind of redundant

1728857233
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
that makes sense

1728857662
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Side benefit of that type of assignment is that it mirrors how you would assign integers of a given size, eg const foo: u8 = 0

