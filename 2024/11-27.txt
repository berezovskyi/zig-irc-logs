1732673066
lf94!~lf94@user/lf94
Yo. So I'm a little confused as to what changes I need to make to my build.zig every major release. What should I do or read?

1732673591
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
lf94: the release notes are very detailed with examples of how to change from one version to the next

1732673643
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://ziglang.org/download/0.13.0/release-notes.html#Build-System for example

1732674065
lf94!~lf94@user/lf94
Perfect, thank you! Sorry I didn't look harder, most of the time the build system is ok, but some releases it breaks and I just end up creating a new project with a new build.zig

1732674080
lf94!~lf94@user/lf94
Is there a way to upgrade zig but not the build system?

1732674306
lf94!~lf94@user/lf94
Ah ha, found it. It's from 0.12 the breaking change

1732674398
lf94!~lf94@user/lf94
Source transforms would be really, really nice until 1.0

1732674431
lf94!~lf94@user/lf94
If I was a paid for student I'd be doing that as a GSoC project

1732674674
lf94!~lf94@user/lf94
Ok the notes don't mention where StreamServer went

1732675116
andrewrk!~andrewrk@mail.ziglang.org
palanix: good idea

1732675200
lf94!~lf94@user/lf94
https://ziglang.org/documentation/0.13.0/ is hanging apparently?

1732675241
lf94!~lf94@user/lf94
https://www.isitdownrightnow.com/ziglang.org.html

1732675281
lf94!~lf94@user/lf94
My luck of course, the first time I go to upgrade my zig project in like 8 months and the site is down haha

1732675928
andrewrk!~andrewrk@mail.ziglang.org
it's not down?

1732675985
lf94!~lf94@user/lf94
It's back now :)

1732675998
lf94!~lf94@user/lf94
It was not just me; two of those "is it down right now" services reported it down as well.

1732676033
andrewrk!~andrewrk@mail.ziglang.org
gotcha

1732676147
lf94!~lf94@user/lf94
Oh is std.net.StreamServer now std.net.Server?

1732676516
lf94!~lf94@user/lf94
Ok the API for this really has been changed a lot haha

1732676697
lf94!~lf94@user/lf94
Oh wow, I think the higher level std.net functions are better now

1732676768
lf94!~lf94@user/lf94
Easier to connect to a UNIX socket now! :D

1732676910
lf94!~lf94@user/lf94
Holy shit guys. Amazing job on the documentation browser improvements

1732676922
lf94!~lf94@user/lf94
It's fricking excellent I can see functions when I click them now!

1732676950
lf94!~lf94@user/lf94
-> errdefer <- cool that's a new one I havent seen!

1732676981
lf94!~lf94@user/lf94
That's actually dope as hell

1732676987
andrewrk!~andrewrk@mail.ziglang.org
glad to see you're enjoying the incremental improvements :)

1732676988
andrewrk!~andrewrk@mail.ziglang.org
more to come

1732677073
lf94!~lf94@user/lf94
FWIW I'm upgrading a personal little 3D system from Zig 0.11 to 0.13 - this is probably the worst part 

1732677353
lf94!~lf94@user/lf94
socklen_t where'd you goooo

1732677386
lf94!~lf94@user/lf94
Ah std.os -> std.posix

1732677570
lf94!~lf94@user/lf94
Just curious why add std.mem.copyForwards and copyBackwards? Why not introduce one new argument enum

1732677610
andrewrk!~andrewrk@mail.ziglang.org
I think that it is an anti-pattern to pass the desired API as an enum value. LinearFifo currently makes that mistake IMO

1732677634
andrewrk!~andrewrk@mail.ziglang.org
those are fundamentally different operations

1732677688
lf94!~lf94@user/lf94
Aren't all computations fundamentally different?

1732677694
lf94!~lf94@user/lf94
Or is that the argument being made here

1732677710
lf94!~lf94@user/lf94
(I think it's right)

1732677753
lf94!~lf94@user/lf94
I would argue though that the computation is _similar_ in that you are monotonously copying bytes, with the only difference being direction

1732677820
lf94!~lf94@user/lf94
Too easy to bike shed on this one for sure

1732678186
andrewrk!~andrewrk@mail.ziglang.org
"aren't all computations fundamentally different?" -> let's say your computation is a + b, I think that choosing a different value for b is not a fundamentally different computation. but as you can see we don't have a function called "math(.add, a, b)` instead there is different syntax

1732678231
andrewrk!~andrewrk@mail.ziglang.org
another way to make my argument is to ask the question, "when would you ever make that enum value (forwards/backwards) runtime-known?"

1732678422
lf94!~lf94@user/lf94
First off, addition may not be the greatest example because there are mathematical laws defined around addition. Secondly, addition is defined differently for different objects.

1732678444
lf94!~lf94@user/lf94
I think it really really depends who you ask this question to

1732678453
lf94!~lf94@user/lf94
I like your second phrasing / reasoning

1732678471
lf94!~lf94@user/lf94
"when you would ever make that enum value runtime-known"

1732678533
lf94!~lf94@user/lf94
To me this is much more /useful/ to ask. To that I have no clue. Maybe there is a scenario in the future though that comes up and justifies it. Which then the function can easily change right? ;P

1732678567
lf94!~lf94@user/lf94
It could even be beneficial to leave LinearFifo haha

1732678575
lf94!~lf94@user/lf94
Like an A/B testing lol.

1732679066
lf94!~lf94@user/lf94
mfw im blanking on how to return an error if it comes up

1732679076
lf94!~lf94@user/lf94
I thought it was ! or catch something

1732679149
lf94!~lf94@user/lf94
I want to see why my Server connection is failing

1732679226
lf94!~lf94@user/lf94
Ah ha! try

1732679237
lf94!~lf94@user/lf94
I always forget just how good Zig documentation can be

1732679345
lf94!~lf94@user/lf94
Ok this is new. The old initUnix used to create the socket file on my behalf. Now the new function doesnt

1732680595
lf94!~lf94@user/lf94
:/ Guess I'll try again tomorrow. Now it's saying connection refused.

1732680833
lf94!~lf94@user/lf94
maybe std.fs.File.default_mode is wrong to pass when I create the socket file

1732680877
lf94!~lf94@user/lf94
(I've tried both not creating the file and creating the file, in case the OS or somewhere else is trying to create the file)

1732683879
grayhatter!~grayhatte@user/grayhatter
fs doesn't have open or create, the docs say consider createFile, but the options (which require click through) have truncate which defaults to true. I've lost data 3 times tonight alone. Would you accept a pull changing the default of truncate from true to false, or no default?

1732689371
daurnimator!~daurnimat@vultr.daurnimator.com
grayhatter: createFile is to create a blank file. Try openFile.

1732689449
daurnimator!~daurnimat@vultr.daurnimator.com
or you're saying you want to create it if it doesn't exist?

1732693978
grayhatter!~grayhatte@user/grayhatter
open existing or create blank file

1732707634
Earnestly!~earnest@user/earnestly
Doesn't openFile have the equivalent of o_creat?

1732707684
ifreund!2940d10f8b@user/ifreund
yes it does

1732707737
Earnestly!~earnest@user/earnestly
Hm, I was trying to find it, and I wondered if it was going to appear as openFileCreate or some variation (like openFileAbsolute)

1732707895
ifreund!2940d10f8b@user/ifreund
oh I think I lied, std.fs seems to expose this functionality as createFile() with truncate set to false

1732707897
Earnestly!~earnest@user/earnestly
ifreund: It has openflags but that doesn't seem to include the o_ family, openFile suggests using createFile

1732707907
Earnestly!~earnest@user/earnestly
Ah

1732707928
ifreund!2940d10f8b@user/ifreund
I don't usually use stdfs as I don't really care about windows support for the things I tend to work on

1732707977
Earnestly!~earnest@user/earnestly
But createFile with truncate = false won't give you a file handle?

1732707982
Earnestly!~earnest@user/earnestly
As openFile would

1732707994
Earnestly!~earnest@user/earnestly
(Isn't open(... O_CREAT) atomic?)

1732708016
ifreund!2940d10f8b@user/ifreund
afaik yeah

1732708017
Earnestly!~earnest@user/earnestly
I've forgotten so much

1732708029
ifreund!2940d10f8b@user/ifreund
maybe the std.fs API is just bad...

1732708046
ifreund!2940d10f8b@user/ifreund
Earnestly: createFile() does give you a file handle

1732708059
ifreund!2940d10f8b@user/ifreund
everything seems fine to me

1732708092
Earnestly!~earnest@user/earnestly
Oh so it does

1732708105
Earnestly!~earnest@user/earnestly
Sorry, github is being very slow for me

1732708112
ifreund!2940d10f8b@user/ifreund
no worries

1732727668
grayhatter!~grayhatte@user/grayhatter
IMO stdlib should be a lot less eager to help users (especially me) destroy data (I, clearly, don't need any additional help... I'm very good at it)

1732734462
andrewrk!~andrewrk@mail.ziglang.org
I don't think there is anything wrong with the std.fs APIs for creating and opening files

1732735280
ifreund!2940d10f8b@user/ifreund
yeah

1732735994
grayhatter!~grayhatte@user/grayhatter
andrewrk, ifreund: imagine yourself as a new programmer, you want to open a file, because you expect it'll exist. You try openFile which fails, because this is the first time you're testing/running the code. You quickly skim the docs^1, and they suggest using createFile() instead, you make a feeble attempt to test it, but again, because you're new, and the nuances to file IO are still novel concepts

1732735996
grayhatter!~grayhatte@user/grayhatter
to you you miss the bug. Later, you write important data to that file, or you then switch from your test file, to your important file... suddenly, your data is gone

1732736142
grayhatter!~grayhatte@user/grayhatter
I could iterate over the conflicts between this behavior and "only one (1) obvious way to do things"... but instead, I'll agree there's nothing *wrong* with this API, but it's easier for someone who's new, or someone like me, (who should know better, but is an idiot) to destroy data

1732736411
andrewrk!~andrewrk@mail.ziglang.org
I think it's a good lesson for beginners. This problem could have easily been avoided by reading the docs, or testing the code

1732736425
ifreund!2940d10f8b@user/ifreund
grayhatter: what are you proposing as an alternative? Defaulting the truncate flag to false? Adding an openOrCreate() function?

1732736427
Earnestly!~earnest@user/earnestly
There is a degree to which making mistakes as a novice is fine and tailoring documention to suit this level might hurt everyone else

1732736466
Earnestly!~earnest@user/earnestly
ifreund: > Would you accept a pull changing the default of truncate from true to false, or no default?

1732736469
grayhatter!~grayhatte@user/grayhatter
honestly, my suggestion would be to delete the default for the truncate flag

1732736493
ifreund!2940d10f8b@user/ifreund
In the end, systems progamming is full of sharp edges and the best lesson a beginner can learn is to read and fully understand man pages and similar docs

1732736503
grayhatter!~grayhatte@user/grayhatter
stdlib shouldn't assume the user wants to delete data, that's without a doubt something that should be an explicity decision

1732736545
Earnestly!~earnest@user/earnestly
It can go both ways though, it seems just as reasonable for someone to want a blank slate when opening a (potentially new) file

1732736558
grayhatter!~grayhatte@user/grayhatter
big, lpottering, and "it was hard for me, it should be hard for you" energy going on in chat today 

1732736560
Earnestly!~earnest@user/earnestly
Or in this case /creating/ a file

1732736563
andrewrk!~andrewrk@mail.ziglang.org
note that "create" is a bit of a standard by this point (have a look at `man 2 open` on linux)

1732736592
Earnestly!~earnest@user/earnestly
grayhatter: It's not that, it's just that you cannot cater for people with almost no experience while still being concise and useful as a reference

1732736604
ifreund!2940d10f8b@user/ifreund
I personally could get behind forcing the user to always explicitly specify whether to truncate or not

1732736623
Earnestly!~earnest@user/earnestly
(If you have to punctuate everything with a tutorial on fundamentals the documentation will become tedious)

1732736636
andrewrk!~andrewrk@mail.ziglang.org
I'm almost willing to say that I could get behind that. but 99% of the time you want truncate=true

1732736640
ifreund!2940d10f8b@user/ifreund
I dont think this is the worst sharp edge you'll find with systems level filesystem apis

1732736645
grayhatter!~grayhatte@user/grayhatter
for context, my day job used to be teaching children, so I probably understand how easy it is to miss something like, "truncate" because 1), I missed it myself, being distracted and 2) I see people miss details like that all the time

1732736716
grayhatter!~grayhatte@user/grayhatter
have y'all never accdentally deleted data that you cared a lot about?

1732736728
grayhatter!~grayhatte@user/grayhatter
is that really a rare thing?

1732736739
vimproved!~vimproved@user/vimproved
i did it once and then started making backups

1732736767
andrewrk!~andrewrk@mail.ziglang.org
I think we have more to lose from making the API unfamiliar than to gain from catering to absolute beginners who don't read the docs and also don't test the code

1732736769
Earnestly!~earnest@user/earnestly
yes, but I never blamed the tool

1732736824
andrewrk!~andrewrk@mail.ziglang.org
you put important data, without a backup, into a file that you edited with W.I.P. code?

1732736837
grayhatter!~grayhatte@user/grayhatter
Earnestly: I'm not blaming the tool either... I know I was the one that fucked up... but also, now I try to make it harder for other people to have to learn the same lesson as me

1732736881
Earnestly!~earnest@user/earnestly
grayhatter: How are you going to create an API that is going to prevent people who are novices and /distracted/?

1732736887
Earnestly!~earnest@user/earnestly
from making mistakes

1732736910
grayhatter!~grayhatte@user/grayhatter
andrewrk: no, last night it wasn't important data. as I said, I've learned that lesson already. But I have careless destroyed data before, and I was suprised createFile() defaults truncate = true

1732736923
andrewrk!~andrewrk@mail.ziglang.org
so this is purely a hypothetical

1732736929
andrewrk!~andrewrk@mail.ziglang.org
tbh I find it uncompelling

1732736931
grayhatter!~grayhatte@user/grayhatter
Earnestly: by deleting the default for truncate

1732736947
grayhatter!~grayhatte@user/grayhatter
I know

1732736955
Earnestly!~earnest@user/earnestly
grayhatter: But truncation is what people expect and usually desired

1732736977
Earnestly!~earnest@user/earnestly
When /creating/ a file

1732736995
Earnestly!~earnest@user/earnestly
It's not behaviour you'd expect when opening a file though

1732737069
Earnestly!~earnest@user/earnestly
Either way that's a bit beside the point; I don't think it's possible to make a useful tool while still helping people who are distracted. There was a talk in web design about treating your users as though they were "drunk" and possibly stupid, this is where the big blue buttons came from and dark patterns. I'm not a fan

1732737119
grayhatter!~grayhatte@user/grayhatter
For some reason, I have in it my head there has been plenty of other examples of Zig not optimizing for the common path, instead opting to demanad explicitness over making the common use eaiser

1732737143
grayhatter!~grayhatte@user/grayhatter
nah, that's not where dark patterns come from

1732737158
Earnestly!~earnest@user/earnestly
Yeah that's fair, plenty of 'common paths' are emergent and could be addressed. However better the devil you know, as Holtzmann would say

1732737177
grayhatter!~grayhatte@user/grayhatter
I'm not that invested

1732737192
Earnestly!~earnest@user/earnestly
grayhatter: The dark pattern as part of the big blue button was the shading of options the web developer didn't want you to take. "No thanks prime"

1732737194
grayhatter!~grayhatte@user/grayhatter
now that I've stepped on this land mine, I can remember it

1732737225
andrewrk!~andrewrk@mail.ziglang.org
it's always a balance, and when it gets down to small details, it comes down to a matter of taste. and taste over small details varies significantly because in reality, neither disagreeing party is wrong

1732737239
grayhatter!~grayhatte@user/grayhatter
I thought making it harder to step on this a land mine, would be worth the expense for everyone else, but I'm not convinced I'm right, which is why I'm asking about it :)

1732737278
Earnestly!~earnest@user/earnestly
Also not against better documentation, and honestly the 'manpage' format is possibly the best I've come across. I've tried so many but nothing comes close to being as concise

1732737309
Earnestly!~earnest@user/earnestly
Largely due to emphasis on using lists to arrange information and keeping introductions to a minimum

1732737442
Earnestly!~earnest@user/earnestly
(And excellent use of whitespace to make the "shape" of the information stand out making it easier to visually break up the text)

1732737595
Earnestly!~earnest@user/earnestly
And last on this point, I tend to agree with Kerrisk that documentation should not be generated so that the documentation itself becomes a specification. Desynchronisation with the text can then be used as a bug check

1732737691
andrewrk!~andrewrk@mail.ziglang.org
I disagree with that last point. This is just anti DRY - it's the same as having to update all your code 2x if you have unit tests assuming a certain API. sure, it's worth it if the tests are handy but otherwise it just makes the code less malleable

1732737695
grayhatter!~grayhatte@user/grayhatter
on a completely unrelated note: what's the correct zig way to write() the tag of a tagged union?

1732737748
grayhatter!~grayhatte@user/grayhatter
I'm using writeInt(u16, ...); beacuse my 'tag' is enum(u16), but I assume theres' gotta be some better synatx I'm missing?

1732737932
ifreund!2940d10f8b@user/ifreund
writeInt() is what I would use if I wanted to write the numeric value of a tagged union tag

1732737980
ifreund!2940d10f8b@user/ifreund
perhaps there's some context missing from your question that explains why you think writeInt() is ugly/unsuitable?

1732738056
grayhatter!~grayhatte@user/grayhatter
writeInt(TagType, @intFromEnum(union.value), endian) throws an error "can't access Int while Enum is active"

1732738085
ifreund!2940d10f8b@user/ifreund
writeInt expects an integer type, not a enum type...

1732738097
grayhatter!~grayhatte@user/grayhatter
I could use @typeInfo() but that's ugly

1732738161
ifreund!2940d10f8b@user/ifreund
unless I was writing overly generic code, I would explicitly do writeInt(u16, @intFromEnum(foo))

1732738247
ifreund!2940d10f8b@user/ifreund
I think you might actually be asking how to access the tag value given a tagged union value though

1732738248
grayhatter!~grayhatte@user/grayhatter
(typeInfo and grab the backing tag_type)

1732738300
ifreund!2940d10f8b@user/ifreund
the answer is that a tagged union type coerces to its tag type, so @as(TagType, tagged_union_value) works

1732738468
grayhatter!~grayhatte@user/grayhatter
ifreund: ideally, I'd just be able to drop a enum into write int with `try anywriter.writeInt(TagType, @intFromEnum, endian)` and the compiler could figure out that I'm trying to write an Int, and enum's are wrapped ints. With a backup case of having a writeEnum() to match readEnum(). The issue I'm trying to avoid is if I decide to change the size of this union from u16 to anything else, I have to

1732738470
grayhatter!~grayhatte@user/grayhatter
remember I'm writing it out here.

1732738571
grayhatter!~grayhatte@user/grayhatter
> I think you might actually be asking how to access the tag value given a tagged union value though 

1732738587
grayhatter!~grayhatte@user/grayhatter
no, I'm asking about https://srctree.gr.ht/repo/srctree/blob/src/types/message.zig#L132 and https://srctree.gr.ht/repo/srctree/blob/src/types/message.zig#L86

1732738626
grayhatter!~grayhatte@user/grayhatter
this is the code I have, I'm wondering if there's a more cannon way to prevent this u16 from conflicting with https://srctree.gr.ht/repo/srctree/blob/src/types/message.zig#L31

1732739097
grayhatter!~grayhatte@user/grayhatter
also; if anyone has some time they want to waste. I'm finally happy with the templating engine, and would apprecate any opinions or feedback on how the typing works for you. you can ` git clone https://srctree.gr.ht/repo/srctree ` try `zig build`, edit one of html files, changing any html tag starting with an uppercase A-Z, e.g. add `<SomeNewTag />` and try `zig build` which it should then fail to

1732739099
grayhatter!~grayhatte@user/grayhatter
compile

1732739628
ifreund!2940d10f8b@user/ifreund
grayhatter: this sounds like a std feature request

1732739654
ifreund!2940d10f8b@user/ifreund
as for how to avoid your code getting out of sync, add a comptime assertion in the place you think you might forget to update

1732739695
ifreund!2940d10f8b@user/ifreund
Since we have a readEnum() function apparently, a corresponding writeEnum() would probably be appropriate

1732739764
grayhatter!~grayhatte@user/grayhatter
yeah, I have other tests just like that, it just felt like there should be some @intTypeFromEnum() pattern that I was missing, so wanted to ask when I didn't see anything like it in the docs :)

1732739818
ifreund!2940d10f8b@user/ifreund
I mean, @typeInfo(foo).Enum.tag_type is literally that, which you said yourself

1732739886
ifreund!2940d10f8b@user/ifreund
which is also how readEnum() is implemented, naturally

