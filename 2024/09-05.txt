1725516285
azval!~azval@user/azval
I tried to make a basic bencode parser/encoder, I dont know if it looks alright, I guess its not very memory efficient: https://zigbin.io/10abf2

1725516304
azval!~azval@user/azval
is it alright to ask for a basic review ? way to learn how I can improve the code

1725516496
azval!~azval@user/azval
s|https://zigbin.io/10abf2|https://zigbin.io/1d8cb5|

1725542637
bw!sid2730@user/betawaffle
is it not currently possible to use @Type to create a container with decls?

1725543317
ifreund!2940d10f8b@user/ifreund
bw: nope, and that's not a feature that's planned to be supported

1725543330
bw!sid2730@user/betawaffle
ok, makes sense

1725555387
Treesonous!~Treesonou@user/Treesonous
...

1725555441
Treesonous!~Treesonou@user/Treesonous
Ok, good, this actually works now. The error that comes up if you're not registered is not helpful at all.

1725555613
Treesonous!~Treesonou@user/Treesonous
I just thought I'd give a bit of feedback on the target tier criteria, as someone who's thinking of working on Zig for Plan 9.

1725555757
Treesonous!~Treesonou@user/Treesonous
They're kind of hard to understand, as below Tier 1 the criteria tend to focus on what a tier does not guarantee, rather than what is sufficient for a target to be in that tier.

1725555806
Treesonous!~Treesonou@user/Treesonous
It's backwards from the natural flow up the tiers as you work on a port.

1725556043
Treesonous!~Treesonou@user/Treesonous
Consider https://doc.rust-lang.org/nightly/rustc/target-tier-policy.html

1725556256
Treesonous!~Treesonou@user/Treesonous
Rust's tier policy starts from Tier 3 and goes up, with the natural flow of a port.

1725556256
Treesonous!~Treesonou@user/Treesonous
The natural flow for tier support in release notes is in the opposite direction: Tier 1 targets are the core functionality, so it makes sense to put them first.

1725556363
andrewrk!~andrewrk@mail.ziglang.org
seems reasonable

1725556400
ekaitz!~Ekaitz@94.73.34.227
andrewrk: you encouraged me too hard to write some bootstrapping path for zig, btw

1725556434
ekaitz!~Ekaitz@94.73.34.227
i will try (and fail due to lack of time, but thank you)

1725556469
andrewrk!~andrewrk@mail.ziglang.org
ah hello ekaitz, how's it going?

1725556486
ekaitz!~Ekaitz@94.73.34.227
all good

1725556494
Treesonous!~Treesonou@user/Treesonous
Regarding flow: I think it's also a wise idea to take after Rust and put the target policy on a separate page. It can be in a more sensible order, and you can be as detailed as you like without cluttering the release notes.

1725556523
ekaitz!~Ekaitz@94.73.34.227
just wanted to thank you for joining the conversation the other day and for being aware of the bootstrapping problem we currently have in guix

1725556548
ekaitz!~Ekaitz@94.73.34.227
I'm actually one of the guys bootstrapping GCC and some other things from source

1725556559
ekaitz!~Ekaitz@94.73.34.227
the whole distro, better said

1725556565
andrewrk!~andrewrk@mail.ziglang.org
no problem. when I did the wasm bootstrapping thing I was aware that it made things harder for that use case, and I decided to proceed regardless, but yeah I did put some thought into how it could be solved moving forward

1725556603
andrewrk!~andrewrk@mail.ziglang.org
I think you should be able to interpret the AST directly if you assume -target wasm32-wasi

1725556621
andrewrk!~andrewrk@mail.ziglang.org
and you can get an auto-generated AST parser from the spec repo (there is a correct grammar definition)

1725556633
ekaitz!~Ekaitz@94.73.34.227
hm!

1725556639
ekaitz!~Ekaitz@94.73.34.227
that guile should have the batteries to do

1725556749
ekaitz!~Ekaitz@94.73.34.227
very nice

1725556760
ekaitz!~Ekaitz@94.73.34.227
now I have another project to abandone :)

1725556778
ekaitz!~Ekaitz@94.73.34.227
any plans on async btw?

1725556795
andrewrk!~andrewrk@mail.ziglang.org
async comes after incremental compilation, which is the main focus of this release cycle

1725556837
ekaitz!~Ekaitz@94.73.34.227
good thanks! 

1725557201
Treesonous!~Treesonou@user/Treesonous
Speaking of cool things on the horizon, I'm excited for issue #16270.

1725557488
ekaitz!~Ekaitz@94.73.34.227
Treesonous: indeed!

1725557506
Treesonous!~Treesonou@user/Treesonous
It'll be nice to have a fully-featured Zig on Plan 9, even if it doesn't use LLVM's deep magic. It'd probably be the only language that actually works on 9front aside from Plan 9 C...

1725557643
Treesonous!~Treesonou@user/Treesonous
Biggest hurdle is probably going to be the fact that Plan 9 still uses a.out, and not just as a naming convention.

1725557792
Treesonous!~Treesonou@user/Treesonous
Either Zig learns a.out (in some capacity), 9front learns ELF, or Zig users are going to have to use the C backend and some preprocessor hacks.

1725558253
andrewrk!~andrewrk@mail.ziglang.org
pretty sure it already works

1725569658
andrewrk!~andrewrk@mail.ziglang.org
does anyone know of an https static file server that is easy to deploy on linux and automatically handles SSL certificates?

1725569692
andrewrk!~andrewrk@mail.ziglang.org
I don't want there to be a million devops tasks to set it up

1725569857
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
andrewrk: https://git.sr.ht/~emersion/tlstunnel for the tls and https://git.sr.ht/~emersion/kimchi for the static file server

1725569860
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
that or caddy

1725569925
andrewrk!~andrewrk@mail.ziglang.org
thanks, I'll check these out

1725569934
Earnestly!~earnest@user/earnestly
caddy is probably about as automagic as it gets

1725569954
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah on second thought I'd go with caddy unless you have a reason you don't want to use it

1725573940
ToxicFrog!~ToxicFrog@66-49-221-211.cpe.distributel.net
I use nginx for the static file serving and acme for the certs, but I gather that caddy is kind of in the same niche

1725575814
torque!~tachyon@user/torque
caddy has built in acme support and it Just Worksâ„¢ in my experience. it has a DSL thing for its config files that I like a little bit better than nginx

1725575846
torque!~tachyon@user/torque
it also works well as a reverse proxy/https termination layer. basically: I think caddy is a good suggestion

1725575850
ToxicFrog!~ToxicFrog@66-49-221-211.cpe.distributel.net
Aah, neat

1725575858
ToxicFrog!~ToxicFrog@66-49-221-211.cpe.distributel.net
I did not know about the builtin acme support

1725575869
ToxicFrog!~ToxicFrog@66-49-221-211.cpe.distributel.net
(I use nixos, so it's been like 8 years since I've written an nginx config by hand)

1725580029
companion_cube!~simon@user/meow/companion-cube:68572
Caddy's config is also super simple 

