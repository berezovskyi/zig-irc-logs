1723004656
daurnimator!~daurnimat@vultr.daurnimator.com
Where should I go to learn about build.zig these days? I just spent 10 mins trying to I think find addAnonymousImport. But I don't find that naming intuitive or at all discoverable

1723004676
daurnimator!~daurnimat@vultr.daurnimator.com
(and e.g. how/why is it anonymous? the first argument is the name to give it.....)

1723005298
torque!~tachyon@user/torque
I believe it's anonymous in the sense that it does not exist as a defined (reusable) module. Not sure when exactly you would want to use that, though

1723005342
torque!~tachyon@user/torque
https://ziglang.org/learn/build-system/ is the main existing document afaik, but I've mostly figured stuff out by looking at other projects' build.zig files

1723005365
daurnimator!~daurnimat@vultr.daurnimator.com
torque: how does one make a defined/usable module?

1723005526
torque!~tachyon@user/torque
std.Build.addModule

1723005562
torque!~tachyon@user/torque
I guess you would use addAnonymousModule primarily when you don't want it to be visible to downstream packages

1723005570
torque!~tachyon@user/torque
er, addAnonymousImport

1723005625
torque!~tachyon@user/torque
although there's also createModule which makes a private module, so idk.

1723005648
torque!~tachyon@user/torque
I guess they're at different layers of abstraction

1723020651
Earnestly!~earnest@user/earnestly
anonymous means 'module local to project'?

1723021065
Earnestly!~earnest@user/earnestly
torque: Seems to mean that it creates a new module before addImport'ing it rather than using an existing module

1723054780
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
was reading https://github.com/ziglang/zig/issues/12484

1723054791
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
is jdzglobalallocator faster than GPA?

1723054801
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
what I'm reading seems to claim that

1723055667
squeek502!~squeek502@user/squeek502
aidenfoxivey, yes, much faster, current GPA is very slow

1723056111
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I've been trying to beat /bin/cat on my macbook as a baby project in zig

1723056120
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
so maybe I'll swap out GPA with jdzglobalallocator

1723056131
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
and learn about how build.zig works in the process

1723065225
Palanix!~palanix@dynamic-077-179-046-123.77.179.pool.telefonica.de
aidenfoxivey: For a cat alternative a different allocator might be much faster

1723065287
Palanix!~palanix@dynamic-077-179-046-123.77.179.pool.telefonica.de
I'd take a look at the talk fengb made about allocators ( https://youtu.be/vHWiDx_l4V0?si=vH1h7SuOD2jEq2bv )

1723065305
andrewrk!~andrewrk@mail.ziglang.org
I don't think you need any allocator to implement cat

1723065404
Palanix!~palanix@dynamic-077-179-046-123.77.179.pool.telefonica.de
maybe not but it's clear that aiden's main goal is to learn zig

1723065424
Palanix!~palanix@dynamic-077-179-046-123.77.179.pool.telefonica.de
I think it's still useful as a way to learn zig and the way it handles memory

1723065996
andrewrk!~andrewrk@mail.ziglang.org
well part of learning zig is to use the right API for the job. if you want to learn about allocation it would be better to pick a different project than cat

1723066311
DFP!~DFP@109.72.102.214
Yeah, do tac.

1723067545
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
zig really encourages you to play allocation golf

1723069833
grayhatter!~grayhatte@user/grayhatter
how so

1723069943
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
you cant just allocate somewhere without tracking it since there is no global allocatir

1723069949
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
allocator*

1723070132
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I don’t maybe it’s more the community than the language hava

1723070136
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
haha*

1723070525
grayhatter!~grayhatte@user/grayhatter
that's more zig users/libs being a good citizen, if you wanted to alloc carelessly there's c_allocator if you want to be like c, or page_allocator if you wanted to be slightly better

1723070575
grayhatter!~grayhatte@user/grayhatter
but there's plenty of examples and opinions from people smarter than me about how doing that is kind of a dick move

1723070608
grayhatter!~grayhatte@user/grayhatter
having to thread the allocator to where it belongs is mildly annoying, but IMO, it's worth it for the flexability and control it gives you

