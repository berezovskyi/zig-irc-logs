1711674477
grayhatter!~grayhatte@user/grayhatter
andrewrk: overly simplistic is the only good response to a general high level question like that. Yeah, a detailed analysis would be obviously better, but there is so much nuance to the differences between two languages, that a more useful response would appear to be flooding. unless you have a terse comparison you find useful handy?

1711674984
andrewrk!~andrewrk@mail.ziglang.org
Zig is a general-purpose programming language and toolchain for maintaining robust, optimal and reusable software. Rust is not

1711675118
DilithiumNO3!~Dilithium@78-11-237-224.static.ip.netia.com.pl
yeah, that's pretty accurate, though i'd give rust a 3.5/5 rather than just an "is not" there personally

1711675186
DilithiumNO3!~Dilithium@78-11-237-224.static.ip.netia.com.pl
especially since rust is robust in the sense of safety guarantees, but also makes some funny choices like panic on allocation failure

1711678317
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
Is there any difference between returning anyerror!void and !void

1711678378
grayhatter!~grayhatte@user/grayhatter
IIRC anyerror is for every single error that exists in your project, where as !void allows the zig compiler to determine which errors are possible when compiling

1711678531
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
Ah, thanks

1711678995
companion_cube!~simon@user/companion-cube
DilithiumNO3: that's rust's stdlib choice, not the language itself though. Optional. 

1711694944
voldial!~voldial@user/voldial
with `zig build-exe` I can specify "-O Debug", how do I achieve the same result with `zig build`? `--release=Debug` returns a error telling me I must specify one of "[off|any|fast|safe|small]". I see "const optimize = b.standardOptimizeOption(.{});" in build.zig, and I read https://zig.guide/build-system/build-modes/ but I dont see how to tell `zig build` to use Debug more

1711694967
voldial!~voldial@user/voldial
more/mode

1711695516
andrewrk!~andrewrk@mail.ziglang.org
voldial: build scripts have the ability to expose arbitrary options

1711695534
andrewrk!~andrewrk@mail.ziglang.org
voldial: https://ziglang.org/learn/build-system/#standard-configuration-options

1711695721
voldial!~voldial@user/voldial
andrewrk: aah. Thanks. I knew I was missing it:) `zig build -Doptimize=Debug`

1711697340
andrewrk!~andrewrk@mail.ziglang.org
voldial: please also be aware of --help or -h

1711697356
andrewrk!~andrewrk@mail.ziglang.org
the help menu reveals the project-specific options that are exposed

1711697817
voldial!~voldial@user/voldial
aaah. Yea, it's right there, with a list of valid args too. "-Doptimize=[enum]"

1711748743
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
theres some weird thing I see, if I declared tagget enum and initialized one of its values, but trying to print value which is not active/initialized, the print statement will not print, however; the other std.debug.print statements above will also not print (the ones which print completely different variables)

1711748895
torque!~tachyon@user/torque
do your print statements end in newlines?

1711748905
torque!~tachyon@user/torque
could be a weird line buffering situation

1711748992
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
they do end with \n yes

1711749288
andrewrk!~andrewrk@mail.ziglang.org
std.debug.print is ubuffered

1711749293
andrewrk!~andrewrk@mail.ziglang.org
*unbuffered

1711749925
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
in here: https://pastecode.io/s/oc7ojf76

1711749941
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
if i comment-out lines 9:18, then bottom print statements on lines 41:43 DO print

1711749962
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
if i do NOT comment-out lines 9:18, then bottom statements 41:43 do NOT print when I do `zig build test`

1711750053
torque!~tachyon@user/torque
it's not buffered in zig but it could still be buffered by the os, I assume. probably not the issue here

1711750060
torque!~tachyon@user/torque
what version of zig are you using?

1711750086
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
0.12

1711750097
torque!~tachyon@user/torque
in 0.11 trying to print to stdout in tests run from a build script will cause the tests to hang. dunno if this has been fixed or not in 0.12

1711750111
torque!~tachyon@user/torque
or the tests may not hang but the build runner does

1711750119
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
im not printint to stdout in test

1711750170
torque!~tachyon@user/torque
how are you running this file?

1711750213
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
`zig build test`

1711750257
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
im just using original stuff generated by zig --init, and then changed it as you see above (not touching other files) 

1711750311
torque!~tachyon@user/torque
what's the git hash of the zig compiler you're using?

1711750323
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
how would i look it up?

1711750331
torque!~tachyon@user/torque
how did you install it?

1711750347
torque!~tachyon@user/torque
anyway `zig version` should print it

1711750373
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
i installed it with snap

1711750393
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
(for some reason had issues building it in Debian, but did build without issue on MacOS)

1711750414
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
0.12.0-dev.3493+3661133f9

1711750711
torque!~tachyon@user/torque
hm, your file works for me as written with the same zig version on my computer

1711750767
torque!~tachyon@user/torque
I believe this is due to caching. if you run `zig build test --summary all` you will see the result is cached so it doesn't rerun

1711750910
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
hm yes it says cached

1711750917
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
so how do i 'clear' it?

1711751198
torque!~tachyon@user/torque
if you modify the file it will invalidate the cache and rerun it. However I don't know if there is a more proper way to do this. In my own projects I install the test executable so that I can easily rerun it if I need to without going through the build system or digging it up in the cache

1711751224
torque!~tachyon@user/torque
*if you modify your source file

1711751277
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
ah

1711751328
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
nvm, got it

1711751330
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
thanks 

1711753636
hardliner66!~hardliner@2a02:8388:280:4800:e134:6559:9398:590d
hi. I'm currently trying to add a different zig file depending on the os in the latest version. Can someone give me a hint? :)

1711754161
hardliner66!~hardliner@2a02:8388:280:4800:e134:6559:9398:590d
oh, nvm, I found it. you can just create a private module with different paths according to the target os in the build.zig and add that to the root_module

1711754359
andrewrk!~andrewrk@mail.ziglang.org
hardliner66: generally it makes more sense to have the same file and then use if or switch expressions based on the OS where needed

1711754383
andrewrk!~andrewrk@mail.ziglang.org
different file per OS is a coping mechanism for C's limitations

1711754443
hardliner66!~hardliner@2a02:8388:280:4800:e134:6559:9398:590d
So, I want to work with C apis who are different for windows and linux. Your solution would be to put everything in a file and just do comptime switches?

1711754628
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
so if i have something like this:         for ([_]i32{ 1, 22, 3, 4, 5 }) |i| { .. }

1711754645
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
i wonder why wouldnt it allow me to have |val, i| to capture value of array too, not just index

1711754658
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
if i try it gives error like `extra capture etc`

1711754795
hardliner66!~hardliner@2a02:8388:280:4800:e134:6559:9398:590d
IIRC you have to give it a range for the counter as well. Something likeÂ  for ([_]i32{ 1, 22, 3, 4, 5 }, 0..) |item, i| { .. }

1711755640
andrewrk!~andrewrk@mail.ziglang.org
hardliner66: presumably you are abstracting over those differences, right?

1711755734
hardliner66!~hardliner@2a02:8388:280:4800:e134:6559:9398:590d
yeah. I want to set thread affinities on both systems

1711755784
andrewrk!~andrewrk@mail.ziglang.org
there are many examples of this pattern in the standard library

1711755827
andrewrk!~andrewrk@mail.ziglang.org
file system, networking, threads, etc

1711755836
andrewrk!~andrewrk@mail.ziglang.org
although I'm not a huge fan of this "impl" pattern that kprotty does

1711756133
hardliner66!~hardliner@2a02:8388:280:4800:e134:6559:9398:590d
hmm... I'm currently still in the prototyping phase anyway, so whatever works is fine for me now. I also kinda like the module solution as it clearly separates it from the main project, but I have no hard stance on it either way. I'm also quite new to zig, so I'm still learning all the best practices ^^

1711756698
hardliner66!~hardliner@2a02:8388:280:4800:e134:6559:9398:590d
okay, now I'm even more confused. I found a method to set scheduler affinity in the standard lib, but while compiling I get the following error: root struct of file 'os' has no member named 'errno'

