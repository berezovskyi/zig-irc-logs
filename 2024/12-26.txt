1735171547
hadronized!~hadronize@2001:41d0:a:fe76::1
has anyone ever compiled to a SPIR-V target?

1735185268
clevor!sid649024@id-649024.hampstead.irccloud.com
hadronized: https://x.com/FlohOfWoe/status/1856631476290543778

1735205808
barusu!~barusu@104.46.44.175
I am using the json stdlib. I have a doubt. When we use `json.parseFromSlice()`, I do the `parsed.deinit()` after that.

1735205820
barusu!~barusu@104.46.44.175
But how is `parsed.value` still in memory?

1735205825
barusu!~barusu@104.46.44.175
Is it on the stack?

1735206415
barusu!~barusu@104.46.44.175
Do we have something similar to r#" string "# from rust? I am working with a string with a lot of escaped characters

1735206705
DFP!~DFP@109.72.102.214
This is unrelated, but I am just curious. Is your nickname related to Re: Zero in any way? :D

1735207281
barusu!~barusu@104.46.44.175
DFP: yes

1735217000
hadronized!~hadronize@2001:41d0:a:fe76::1
clevor: ah, I’ll have a look

1735217038
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, zig doesn’t have attributes, so it’s hard to do something like what Rust does with rust-gpu

1735217054
hadronized!~hadronize@2001:41d0:a:fe76::1
i.e. fn foo(#[spirv(position)] pos: glam::Vec3)

1735217081
hadronized!~hadronize@2001:41d0:a:fe76::1
also, there’s something that is not completely clear to me, but I’ll hang around on that discord

1735217103
hadronized!~hadronize@2001:41d0:a:fe76::1
I tried compiling with target .spirv32 (and .spirv64, but not entirely sure), and with OS = vulkan, but it doesn’t compile

1735217113
hadronized!~hadronize@2001:41d0:a:fe76::1
(there’s an issue on GitHub with the exact error, so I reproduce)

1735217202
hadronized!~hadronize@2001:41d0:a:fe76::1
clevor: that Discord doesn’t seem to exist anymore?

1735217209
hadronized!~hadronize@2001:41d0:a:fe76::1
(I tried opening the link from the X thread)

1735222408
barusu!~barusu@104.46.44.175
Can we have escaped multiline strings?

1735222608
barusu!~barusu@104.46.44.175
    const data = "Content-Length: 2\r\nContent-Type: application/vscode-jsonrpc; charset=utf-8\r\n\r\n12";

1735222619
barusu!~barusu@104.46.44.175
I want to simplify this across multiple lines

1735222867
barusu!~barusu@104.46.44.175
Also, how do I switch on a string?

1735223252
ekaitz!~Ekaitz@94.73.36.227
barusu: you can multiline strings using ++

1735223275
ekaitz!~Ekaitz@94.73.36.227
or use multiline string literals

1735223292
ekaitz!~Ekaitz@94.73.36.227
https://ziglang.org/documentation/master/#Multiline-String-Literals

1735223394
barusu!~barusu@104.46.44.175
ekaitz: Awesome. thanks! I ended up using ++ because \\ doesn't allow escaping

1735223510
barusu!~barusu@104.46.44.175
Do we have struct embedding in zig? Or do I have to copy the fields manually for each type?

1735223572
ekaitz!~Ekaitz@94.73.36.227
barusu: you can loop over the fields of an struct

1735223596
barusu!~barusu@104.46.44.175
I basically want to implement this: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#requestMessage

1735223613
ekaitz!~Ekaitz@94.73.36.227
and use @field 

1735223670
barusu!~barusu@104.46.44.175
I want to mimic inheritance for RequestMessage

1735223688
ekaitz!~Ekaitz@94.73.36.227
you can iterate over the fields at comptime

1735223698
ekaitz!~Ekaitz@94.73.36.227
and create other struct on top

1735223698
barusu!~barusu@104.46.44.175
Oh, awesome!

1735223709
barusu!~barusu@104.46.44.175
Thanks again1

1735223831
ekaitz!~Ekaitz@94.73.36.227
no probs

1735224413
barusu!~barusu@104.46.44.175
ekaitz: is there an example somewhere for the inheritance?

1735224715
ekaitz!~Ekaitz@94.73.36.227
barusu: i don't know about that, but i've played with the @field in the past

1735224735
ekaitz!~Ekaitz@94.73.36.227
it's not public though

1735224948
ekaitz!~Ekaitz@94.73.36.227
barusu: take a look to this link https://mht.wtf/post/comptime-struct/

1735224951
ekaitz!~Ekaitz@94.73.36.227
ACTION is afk

1735224954
ekaitz!~Ekaitz@94.73.36.227
good luck

1735224995
aquamo4k!~mross@162.222.54.134
ifreund: re:freebsd, can confirm same issue linking with libc symbols during stage3 phase. freebsd current is now using llvm19.1.5 in /usr/{bin,lib} , I tried using that and 19.1.6 from pkg and both result in same link issue at the moment

1735225002
aquamo4k!~mross@162.222.54.134
not a priority for me but just fyi

1735225719
aquamo4k!~mross@162.222.54.134
oh, I see a core file from zig2 - here's the backtrace in case it's useful : https://tpaste.us/bQ1B

1735225977
barusu!~barusu@104.46.44.175
ekaitz: thanks

1735226017
barusu!~barusu@104.46.44.175
One of my struct fields needs to be named "error" which is a zig keyword. How do I make the struct

1735226032
barusu!~barusu@104.46.44.175
I cannot change the name because the json has that field

1735226034
torque!~tachyon@user/torque
@"error": Type

1735226051
barusu!~barusu@104.46.44.175
Awesome!

1735226061
torque!~tachyon@user/torque
you can use @"name" to make identifiers that match language keywords

1735226088
Amun-Ra!~amun-ra@retro.rocks
it's call "stropping"

1735226093
Amun-Ra!~amun-ra@retro.rocks
called*

1735226753
Amun-Ra!~amun-ra@retro.rocks
https://en.wikipedia.org/wiki/Stropping_(syntax)

1735228047
barusu!~barusu@104.46.44.175
Thanks

1735228477
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Can’t you use @“name” to have spaces and other stuff in the identifiers too (if you need for whatever reason)

1735231963
torque!~tachyon@user/torque
yes

1735245324
aquamo4k!~mross@162.222.54.134
w00t!  ghostty is now released / public: https://github.com/ghostty-org/ghostty

1735245388
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Anyone needing support for it, either discord or over in #ghostty here on libera

1735245709
clevor!sid649024@id-649024.hampstead.irccloud.com
Nice

1735246943
hadronized!~hadronize@2001:41d0:a:fe76::1
is ghostty made in zig?

1735247197
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
hadronized: yes

1735247459
hadronized!~hadronize@2001:41d0:a:fe76::1
cool

1735247491
hadronized!~hadronize@2001:41d0:a:fe76::1
I need to have a look at how to compile a SPIR-V + Vulkan app in Zig

1735247499
hadronized!~hadronize@2001:41d0:a:fe76::1
so far I haven’t been successful

1735247889
Amun-Ra!~amun-ra@retro.rocks
hmm, ghostty segfaulted on my debian (Segmentation fault at address 0x8, ???:?:?: 0x7f90c2b075fc in ??? (libcairo.so.2))

1735248056
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Amun-Ra: happy to help you over in #ghostty

1735248070
Amun-Ra!~amun-ra@retro.rocks
I'm building debug version

1735249445
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I think this is dumb... what's the difference between "type: type" and std.builtin.Type?

1735249449
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
src/beanparse.zig:26:23: error: expected type 'type', found 'builtin.Type'

1735249490
hadronized!~hadronize@2001:41d0:a:fe76::1
type is a type and std.builtin.Type is the reflected type at comptime IIRC

1735249743
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Ah, thanks

1735249776
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I was using the builtin.Type.Struct.fields when I could just iterate over the tuple itself I think

1735249936
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Is there a difference between @field(cli_arg, "name") and cli_arg.name

1735249968
hadronized!~hadronize@2001:41d0:a:fe76::1
bwbuhse: well for this specific example, no

1735249986
hadronized!~hadronize@2001:41d0:a:fe76::1
but if name is in a variable, then definitely :)

1735250033
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Ahhh, I see (I think) thanks

1735250077
hadronized!~hadronize@2001:41d0:a:fe76::1
I use it in a couple place to get access to stuff in a modules / structs that I don’t know right away

1735250094
hadronized!~hadronize@2001:41d0:a:fe76::1
so I build the name at comptime and then use @field to get it

1735250372
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
*That* makes sense

1735250385
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I think I don’t need @field then but I do need @hasField

1735250458
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah usually, @hasField and @typeInfo are enouh

1735250460
hadronized!~hadronize@2001:41d0:a:fe76::1
enough

1735251832
ifreund!2940d10f8b@user/ifreund
bwbuhse: if you're looking for inspiration, my minimal arg parsing library is here https://codeberg.org/river/river/src/branch/master/common/flags.zig

1735251854
ifreund!2940d10f8b@user/ifreund
usage here: https://codeberg.org/river/river/src/commit/e575485f0daa9f0f5b58ad1477ed806c3c42444d/river/main.zig#L48

1735251901
ifreund!2940d10f8b@user/ifreund
I feel like everyone wants different features from this kind of thing

1735251961
hadronized!~hadronize@2001:41d0:a:fe76::1
ifreund: any idea how to get SPIR-V target to compile?

1735251990
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Yeah, that was why I decided to try making my own lol. I'm using clap right now and I've tried cova but neither are quite what I want. I'll look at yours and see if it gives me some ideas, thanks :)

1735252127
ifreund!2940d10f8b@user/ifreund
hadronized: no idea, I doubt the LLVM SPIR-V backend is practically useful

1735252144
hadronized!~hadronize@2001:41d0:a:fe76::1
why so?

1735252163
ifreund!2940d10f8b@user/ifreund
because I don't think anyone uses it

1735252202
ifreund!2940d10f8b@user/ifreund
there's a WIP non-llvm SPIR-V backend, but I don't think it's near feature complete

1735252237
ifreund!2940d10f8b@user/ifreund
Snektron would be the person who knows the most about Zig to SPIR-V compilation

1735252253
ifreund!2940d10f8b@user/ifreund
(author of vulkan-zig)

1735252263
hadronized!~hadronize@2001:41d0:a:fe76::1
where can I find them?

1735252270
hadronized!~hadronize@2001:41d0:a:fe76::1
Discord?

1735252281
ifreund!2940d10f8b@user/ifreund
discord and probably the zsf zulip as well

