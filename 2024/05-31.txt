1717131928
daurnimator!~daurnimat@vultr.daurnimator.com
Overkill, bblack: I've always wanted to try out integer types in zig to have an explicit min/max in zig, and for e.g. the + operator to add the mins and maxes to get a new type for the result

1717131994
daurnimator!~daurnimat@vultr.daurnimator.com
so e.g. type-wise, `Int(0,255) + Int(5,10) = Int(0, 265)`

1717132097
daurnimator!~daurnimat@vultr.daurnimator.com
uh, I mean `Int(0,255) + Int(5,10) = Int(5, 265)`

1717132145
daurnimator!~daurnimat@vultr.daurnimator.com
related: https://github.com/ziglang/zig/issues/3806

1717132246
daurnimator!~daurnimat@vultr.daurnimator.com
other misc things that fall out: 1. a comptime int of `5` just becomes `@Int(5,5)`. 2. Optionals can be packed into low/high values, so e.g. `?Int(1,255)` only needs to take up a u8.

1717164240
Helmholtz!~Helmholtz@user/helmholtz
Does anyone know what editor/os does Andrew Kelly use? Googled but didn't find anything

1717164251
companion_cube!~simon@user/meow/companion-cube:68572
nixos I think

1717164253
companion_cube!~simon@user/meow/companion-cube:68572
and‚Ä¶ vim?

1717164278
Helmholtz!~Helmholtz@user/helmholtz
vim with LSPs? 

1717164311
companion_cube!~simon@user/meow/companion-cube:68572
idk if he uses zls yet, but probably? wait until he's here

1717164335
companion_cube!~simon@user/meow/companion-cube:68572
(neovim has great LSP support btw)

1717164390
Helmholtz!~Helmholtz@user/helmholtz
What about Jakub Konka (or other contributors)? 

1717164417
companion_cube!~simon@user/meow/companion-cube:68572
ü§∑ idk, it's personal choice

1717164472
Helmholtz!~Helmholtz@user/helmholtz
Yeah but it's good to know the choices of productive people

1717164547
companion_cube!~simon@user/meow/companion-cube:68572
productive people use anything from vscode to nano, including vim, emacs, etc., on macOS, windows, linux, freeBSD, you name it

1717164966
Earnestly!~earnest@user/earnestly
(They are productive despite the tools)

1717166206
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
daurnimator: Ah, that's a neat idea! I guess Ada has a pretty similar system for explicitly-ranged integer types with their `range start .. end` types. never written the language myself though.

1717166213
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Ascribing a type to an integer literal seems neat, but how would a @Int(5, 5) be represented at runtime? (I guess they'd be 0-sized?)

1717166329
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
But TBH, I kinda like that int literals are "unsized" compile-time expressions until you explicitly narrow them? So they can contain arbitrary arithmetic and only get narrowed when resolved to a destination type.

1717166699
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Also that thing about optionals. If I recall a `?u32` is 8 bytes... does Zig do any bit-packing right now if you put an optional in a packed struct, or have a `?u31` type or something that uses the upper bit? These also seem like things that could be useful for more compact data representation.

1717169375
andrewrk!~andrewrk@mail.ziglang.org
Helmholtz: I use vim with fuzzy finder (no zls)

1717172308
motiejus!~motiejus@88.223.107.21
andrewrk: where is your build.zig to cpython? this got me intrigued, I want to see maybe what zig supports for MacOS may be enough: https://lwn.net/SubscriberLink/975445/8b57bc41d1ae840e/

1717172418
motiejus!~motiejus@88.223.107.21
tldr: fedora steering council made an exception to bundle mac-compiled cpython and libffi for asahi installer, ecause "you can't reasonably compile to macos on linux"

1717172503
andrewrk!~andrewrk@mail.ziglang.org
motiejus: https://github.com/allyourcodebase/cpython

1717172518
andrewrk!~andrewrk@mail.ziglang.org
I haven't tried targeting macos yet

1717172819
motiejus!~motiejus@88.223.107.21
thanks! I will try as soon as I have a reasonable chance to have an uninterrupted hour :)

1717173337
andrewrk!~andrewrk@mail.ziglang.org
my use case is running ytdlp with it, so I stopped short of anything more than achieving that goal

1717173347
andrewrk!~andrewrk@mail.ziglang.org
there are plenty of missing modules for example

1717173402
andrewrk!~andrewrk@mail.ziglang.org
I'll add that to the readme

1717174216
Helmholtz!~Helmholtz@user/helmholtz
andrewrk: thanks ‚ù§Ô∏è

1717178816
andrewrk!~andrewrk@mail.ziglang.org
done

1717180697
evocatus!~evocatus@2a02:a210:20c6:1f00:fbf8:e2cb:fb9e:2511
Hi!

1717180779
evocatus!~evocatus@2a02:a210:20c6:1f00:fbf8:e2cb:fb9e:2511
Is this the only way to divide u64 by u64? https://bpa.st/UIFQ

1717181652
rockorager!2bbd732aa1@irc.pico.sh
evocatus: also see @divTrunc, @divFloor, and @divExact

1717188428
motiejus!~motiejus@88.223.107.21
Status update on OSX/cpython: I have up, mostly because I got tired of trying to guess valid values for `config.h` without a MacOS device where I can mess with the compilation steps myself. I will now think about my friends if I can nerd-snipe someone.

1717196942
brettgilio!a35ba67324@2a03:6000:1812:100::260
I'm curious, is Zig planning on staying with LLVM for the long-term?

1717197162
rockorager!2bbd732aa1@irc.pico.sh
brettgilio: I don't think so: https://github.com/ziglang/zig/issues/16270

