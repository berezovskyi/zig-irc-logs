1719447467
torque!~tachyon@user/torque
generally, I would probably avoid using anytype if there is a concrete type that can be used

1719447506
torque!~tachyon@user/torque
for setsockopt specifically, I would say a swanky version could use a tagged union, where the filed name is the sock option, and the corresponding value is the type associated with that sock option value

1719447518
torque!~tachyon@user/torque
s/filed/field/

1719447658
torque!~tachyon@user/torque
I think there isn't really a hard and fast rule for writing idiomatic bindings for functions taking a void ptr + a len, because it really depends on what the span of the inputs is and how the function interprets that type-erased input

1719449953
gcarlos8!~gcarlos@37.218.246.133
torque: I agree with you that using an union would be better for the function I used as example. It would even make error messages more clear

1719450128
gcarlos8!~gcarlos@37.218.246.133
torque: do you think a PR implementing it on setsockopt (and possibly others related) would worth the effort? It doesn't look to complex and I think I could try

1719450653
torque!~tachyon@user/torque
not sure. I think the std.posix stuff is pretty low-level wrappers. Implementing a more pleasant API as an alternative, rather than a replacement, might be accepted. worst case scenario, you spend some time on it and it gets rejected

1719452983
gcarlos8!~gcarlos@37.218.246.133
ok, it makes sense

1719454211
rockorager!2bbd732aa1@irc.pico.sh
I‚Äôd look at the std.posix.termios for some type safety on misc posix data. that one was refactored for 0.12.0

1719455137
halosghost!~halosghos@user/halosghost
is there an official way of getting the smallest integer type that would fit a given value, or, alternatively, a way to get the unsigned version of a given signed integer type?

1719455332
halosghost!~halosghos@user/halosghost
or, for that matter, a way to get the ilog() of a known-positive signed integer

1719455334
halosghost!~halosghos@user/halosghost
‚ò∫

1719455524
halosghost!~halosghos@user/halosghost
I'm attempting to round an integer up to the next power-of-two

1719455737
rockorager!2bbd732aa1@irc.pico.sh
halosghost: std.math.IntFittingRange

1719455758
halosghost!~halosghos@user/halosghost
rockorager: ‚ù§

1719458413
halosghost!~halosghos@user/halosghost
that's exactly what I needed; this thing still takes a bajillion years to run, but at least it's not slow because my random-sampling is in a range much smaller than the containing type üòõ

1719458424
halosghost!~halosghos@user/halosghost
rockorager: much appreciated again; o/

1719475960
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
Hello. I was ready was Rust is a shitty programming language nad at the same time I learned about the null terminated. A nice blog from a dev I found during my research, so my question  Are Z strings  null terminated ?

1719475981
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
ready was /reading why

1719476016
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
Z / Zig

1719476388
Pistahh!~Pistahh@user/pistahh
yann-kaelig: https://ziglang.org/documentation/master/#String-Literals-and-Unicode-Code-Point-Literals

1719484088
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
I don't understand why there is a need to represent the absence of information and then in way process the absence of informatio. it's like serving a dish at a dinner  with someone who is not there. Some guests will probably wonder about your mental health. :)

1719484117
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
serving a dish / serving a dish and talking aith

1719484119
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
with

1719484423
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
What is the point of debating in the kitchen the question whether or not where should serve the absent person at dinner? We serve the people present.

1719484437
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
where /we

1719484672
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
If I have to learn C / C++ or any other 70s/80s programming language because I can understand the new one, it's a fail in mu opioin and all of the design is bad

1719484692
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
because/before

1719484799
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
if your new language as some reference on older languages just because it will help to understand it, it' a fail

1719484918
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
if your new language is not "standalone" by designed  and can not be understood by a beginner just by reading the documentation and example, it's a fail

1719485176
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
If zig is a language for retirees from C or C++, then indeed it is good Sunday programming language while the grandmother is kniting

1719485189
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
^^

1719485698
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
Well, anyway. a lot of water will have flowed under the bridge before C and C++ will be replaced. I have a preference for C++ and Qt which goes with it.

1719485701
yann-kaelig!~yann-kael@83.27.196.146.ipv4.supernova.orange.pl
Havea nice day

1719522580
torque!~tachyon@user/torque
thank you for your valuable insight. i often program while the grandmother is kniting. on sunday

1719522706
i_am_wololo!~i_am_wolo@user/i-am-wololo:24161
hello guys

1719522725
i_am_wololo!~i_am_wolo@user/i-am-wololo:24161
started looking into zig today

1719522738
i_am_wololo!~i_am_wolo@user/i-am-wololo:24161
so far im enjoying it, neat language

1719525547
gcarlos8!~gcarlos@37.218.246.133
i_am_wololo: good to know, I've started a month ago and now it is my favorite language

