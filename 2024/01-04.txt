1704341545
not_reserved!~not_reser@185.153.177.188
hello. if i write essentially what i would write in c and build in fast release mode, what's a reasonable guess for the performance impact factor due to e.g. gcc optimizations?

1704341603
not_reserved!~not_reser@185.153.177.188
i apologize if this is the sort of question that gets asked thousands of times

1704341637
ifreund!2940d10f8b@user/ifreund
not_reserved: are you asking how fast zig is compared to c? I don't quite follow

1704341650
not_reserved!~not_reser@185.153.177.188
yes

1704341668
ifreund!2940d10f8b@user/ifreund
as fast or faster by default

1704341681
not_reserved!~not_reser@185.153.177.188
why faster? how can this be

1704341693
ifreund!2940d10f8b@user/ifreund
there are some better defaults around e.g. integer overflow

1704341731
ifreund!2940d10f8b@user/ifreund
really though, it's pointless to compare them in this way

1704341744
ifreund!2940d10f8b@user/ifreund
it's much more relevant how the software in question is designed

1704341778
not_reserved!~not_reser@185.153.177.188
well, that is mostly what i am trying to account for by "if i write essentially what i would write in c"

1704341817
not_reserved!~not_reser@185.153.177.188
i've been looking for a better c for quite a long time, which is the reason for my comparison

1704341902
not_reserved!~not_reser@185.153.177.188
it's amazing if that is true, i really do not know how, but i don't know very much in general

1704341971
ifreund!2940d10f8b@user/ifreund
all compiled languages with manual memory management and minimal runtime have essentially the same performance ceiling

1704342435
companion_cube!~simon@user/companion-cube
I wonder what people here think of Odin

1704342529
ifreund!2940d10f8b@user/ifreund
companion_cube: if you're looking for my opinion, I wasn't a fan of the "every thing is zero by default, make 0 meaningful or else" philosophy

1704342655
ifreund!2940d10f8b@user/ifreund
the bulitin string type also made me a bit skeptical iirc

1704342708
TheBlueWizard!~TheBlueWi@pool-173-66-223-114.washdc.fios.verizon.net
so you would like to have vars left "undefined" by default, and the responsibility of the use of those vars left up to the coders like C, or trapped out like in Pascal?

1704342781
ifreund!2940d10f8b@user/ifreund
TheBlueWizard: a mix of meaningful default values and undefined

1704342799
ifreund!2940d10f8b@user/ifreund
with saftey check and debugging tools for undefined values

1704343135
ifreund!2940d10f8b@user/ifreund
iirc odin doesn't really have an equivalent to Zig's non-nullable pointer types due to the 0 init thing

1704343163
ifreund!2940d10f8b@user/ifreund
which is enough reason for me personally to not use the langauge

1704343255
ifreund!2940d10f8b@user/ifreund
clearly delineating which pointers might be null or not in the type system is a really big productivity/robustness boost in my experience

1704343498
TheBlueWizard!~TheBlueWi@pool-173-66-223-114.washdc.fios.verizon.net
ACTION notes that the null pointer is often 'abused' to convey various semantic meanings, like "It is not valid", "it is omitted" (as versus empty string like this ""), etc.

1704343588
TheBlueWizard!~TheBlueWi@pool-173-66-223-114.washdc.fios.verizon.net
I would like to see some reduction in such abuse of null pointers...sometimes that means the C's way of doing things would have to be changed

1704384198
jdanek!~jdanek@dnk.mamutnet.net
Hi, I have a checkout of zig and I added a test case to zig/test/link/elf.zig. How do I run it?

1704384205
jdanek!~jdanek@dnk.mamutnet.net
for example, this does not do what I want % stage4/bin/zig test ../test/tests.zig --test-filter  testMapFlag

1704384217
jdanek!~jdanek@dnk.mamutnet.net
All 0 tests passed.

1704384217
jdanek!~jdanek@dnk.mamutnet.net
stage4/bin/zig test ../test/tests.zig --test-filter testMapFlag  4.76s user 1.58s system 100% cpu 6.333 total

1704389937
jdanek!~jdanek@dnk.mamutnet.net
I've repeated my question on my PR, https://github.com/ziglang/zig/pull/18358, in case somebody will be able to reply there

1704394783
andrewrk!~andrewrk@mail.ziglang.org
jdanek, zig build test-link

1704395053
jdanek!~jdanek@dnk.mamutnet.net
i guess I need to do rebuild with ninja first, because I recently rebased my checkout... I'm now getting this from your command

1704395057
jdanek!~jdanek@dnk.mamutnet.net
 /home/jdanek/repos/github/ziglang/zig/build.zig:42:17: error: expected type 'zig.CrossTarget', found 'zig.system.NativeTargetInfo'

1704395418
andrewrk!~andrewrk@mail.ziglang.org
jdanek, I recommend to read this section: https://github.com/ziglang/zig/wiki/Contributing#editing-source-code

1704395667
jdanek!~jdanek@dnk.mamutnet.net
I take that as a confirmation, I recalled ninja when figuring out that "Pulling upstream changes and rebuilding." from that doc probably applies to me

1704395778
jdanek!~jdanek@dnk.mamutnet.net
andrewrk, anyways, thanks for prompt feedback on my issue, though it's not exactly what I hoped to hear

1704395787
andrewrk!~andrewrk@mail.ziglang.org
yeah, sorry I know

1704395837
andrewrk!~andrewrk@mail.ziglang.org
to put it in a more optimistic light, what we are interested in doing is coming up with novel debugging and diagnostic techniques but we need to harmonize those features with our incremental linker design

