1730419204
grayhatter!~grayhatte@user/grayhatter
The_Buhs: you wouldn't

1730419244
grayhatter!~grayhatte@user/grayhatter
but, if you needed to, bar is the only sane way

1730420360
torque!~tachyon@user/torque
you could label the blocks on the individual prongs as well

1730420497
torque!~tachyon@user/torque
https://zig.godbolt.org/z/sGbcMesb3 it looks a bit goofy and zig fmt probably does weird things to it but it does work

1730422696
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Thanks yâ€™all

1730461511
src!~src@user/src
is document generation currently not working?

1730461584
src!~src@user/src
when I do `$zig test -femit-docs myprogram.zig` on https://dpaste.com/AD2TAGX8F and try to load the generated docs/index.html in a browser it's just stuck on `Loading...` for me (tried w/ a virginal chromium to make sure it's none of my settings, blocking etc)

1730461953
src!~src@user/src
tested on 0.12.0 and 0.14.0-dev.1991+33d07f4b6 I'm probably doing something wrong?

1730462617
src!~src@user/src
putting the file in a separate dir or building the program w/ the documentation via `$ zig14 build-exe -femit-docs myprogram.zig` doesn't help either

1730471972
src!~src@user/src
another question: https://ziglang.org/documentation/master/#Zig-Test is there a way to get this test terminal output?

1730472004
src!~src@user/src
for me it just says "All 2 tests passed." is the output under the link legacy? can I pass a flag to test maybe to get a per-test output?

1730472104
dmoerner!~dmoerner@fedora/dmoerner
src: i'm also curious about this, i asked about it a week ago but didn't get a response. i'm sure someone knows though, thanks for asking again

1730472191
dmoerner!~dmoerner@fedora/dmoerner
i see the same on both 0.13.0 and 0.14.0 dev

1730472414
src!~src@user/src
you mean the test output I assume?

1730472418
dmoerner!~dmoerner@fedora/dmoerner
yes

1730472533
src!~src@user/src
I just tried 0.9.1 which apparently didn't yet take identifiers, so had to change the test name to "addOne", same output though "All 2 tests passed."

1730472550
src!~src@user/src
0.7.0 gives me a bunch of other errors I'm not willing to debug

1730472554
src!~src@user/src
welp, maybe someone will answer

1730473955
bblack!~bblack@wikimedia/bblack-WMF
yeah I don't know of a way to get it to be a verbose list of passing tests at the end, unless there's some hidden option.

1730474012
bblack!~bblack@wikimedia/bblack-WMF
note on failure you do get the name of the failing test, even if you're not trying to use --verbose or --summary all or whatever

1730474018
bblack!~bblack@wikimedia/bblack-WMF
e.g. if I mess up one of my tests on purpose:

1730474020
bblack!~bblack@wikimedia/bblack-WMF
test run test 4/5 passed, 1 failed

1730474022
bblack!~bblack@wikimedia/bblack-WMF
error: 'tofurkey.test.timecalc math checks' failed: expected 170901096, found 170901095

1730474035
bblack!~bblack@wikimedia/bblack-WMF
[followed by some trace info]

1730498672
src!~src@user/src
anyone ever done some valgrind cachegrind analysis on zig executables?

1730498738
src!~src@user/src
I compiled w/ and w/out -fvalgrind, and also w/ and w/out `pub const valgrind_support = true;` it doesn't seem to make a difference in that regard, I'm not sure how trustworthy my results are? I suppose regarding L1 and LL misses cachegrind should work on the executables?!

1730499224
torque!~tachyon@user/torque
<src> for me it just says "All 2 tests passed." is the output under the link legacy? can I pass a flag to test maybe to get a per-test output?

1730499233
torque!~tachyon@user/torque
zig test xxx 2>&1 | less

1730499248
torque!~tachyon@user/torque
if it's writing to a tty it will clear the output when it writes the final summary

1730499266
torque!~tachyon@user/torque
I don't know if there's a way to disable this

1730499314
src!~src@user/src
dmoerner: bblack: ^ (here's the solution)

1730499338
src!~src@user/src
torque: thanks, guess it changed at one point or another for whatever reason

1730499381
dmoerner!~dmoerner@fedora/dmoerner
thank you

1730499407
src!~src@user/src
it might not even be intended behavior... seems weird that it writes the lines but clears them

1730499474
torque!~tachyon@user/torque
the documentation has all of the lines since the output is written to a file when it's run

1730499528
torque!~tachyon@user/torque
or possibly a child process pipe, I don't know the exact implementation

1730499568
src!~src@user/src
torque: admitting shameful ignorance with this... how do I pipe this to a file and not use less?

1730499581
src!~src@user/src
ah got it

1730499598
src!~src@user/src
`$ zig test file.zig 2>file.testoutput.txt`

1730499608
src!~src@user/src
duh

1730500361
andrewrk!~andrewrk@mail.ziglang.org
language proposal: destructuring via new `useall` keyword: https://github.com/ziglang/zig/issues/21879

1730500626
grayhatter!~grayhatte@user/grayhatter
useall shouldn't be an inline command

1730500642
grayhatter!~grayhatte@user/grayhatter
it should be an attribute on the function/struct

1730500678
andrewrk!~andrewrk@mail.ziglang.org
no that's definitely not the case

1730500771
grayhatter!~grayhatte@user/grayhatter
then I'm definitely not a fan... any chance you have some "userland" code where you think this belongs?

1730500790
grayhatter!~grayhatte@user/grayhatter
I suspect my problem is lack of imagination and understanding

1730501177
grayhatter!~grayhatte@user/grayhatter
ahh, that example is much better; I now no longer have strong opinions.

1730501244
andrewrk!~andrewrk@mail.ziglang.org
have you ever used destructuring in another language?

1730501248
grayhatter!~grayhatte@user/grayhatter
I do suspect there's a better version of this proposal though. I'm looking forward to the discussion, and evolution here

1730501256
andrewrk!~andrewrk@mail.ziglang.org
it's the same concept, same value proposition

1730501265
grayhatter!~grayhatte@user/grayhatter
andrewrk: it's the one thing that I miss from python

1730501293
grayhatter!~grayhatte@user/grayhatter
It kills me that `a, b = struct{ .a, .b };` doesn't compile is zig

1730501728
torque!~tachyon@user/torque
but tuple destructuring does work and it's not that much more verbose

1730501743
torque!~tachyon@user/torque
`const a, const b = .{ my.a, my.b };`

1730501762
torque!~tachyon@user/torque
I mean, I usually use structs because I don't want a bunch of free variables all over the place

1730501804
andrewrk!~andrewrk@mail.ziglang.org
but (1) you won't find out when a new field is added, (2) many chances to typo the names, (3) structs can have many fields

1730501844
grayhatter!~grayhatte@user/grayhatter
torque: that's what I've landed on as well. It's not much harder to make input.field_xyz nearly as ergonomic

1730501885
torque!~tachyon@user/torque
regarding the proposal, I would make it a block designator or something. Having it be an inline statement that must be followed by N subsequent assignments feels very weird

1730501944
grayhatter!~grayhatte@user/grayhatter
^ I agree, very much with this

1730501945
torque!~tachyon@user/torque
like, the syntactic coupling there is very loose and while you get a compile error if you do it wrong I guess, it has unique and potentially nonobvious semantics

1730502008
torque!~tachyon@user/torque
either way it doesn't seem like a feature I would get much use out of

1730502012
grayhatter!~grayhatte@user/grayhatter
andrewrk: given how easy it is to typo a name, I *strongly* doubt the compiler making it slightly harder for this one case willhave a net positive effect on "number of developer introduced typos" 

1730502029
grayhatter!~grayhatte@user/grayhatter
I'd actually bet it would increase the number, as people learn to assume the language will do that for them

1730502047
torque!~tachyon@user/torque
seatbelts cause more accidents lol

1730502090
grayhatter!~grayhatte@user/grayhatter
1; they do induce more... and 2, that's not a good comparison 

1730502161
torque!~tachyon@user/torque
why is that not a good metaphor for the point you were making

1730502183
torque!~tachyon@user/torque
I was not disagreeing with you, fwiw

1730502346
grayhatter!~grayhatte@user/grayhatter
to stick with the car theme, because this propasal isn't a safety feature, like seatbelts are. That would be something like compiler generated bounds checking on arrays. It's a restriction on the way you're able to drive. This is more like, you're unable to start the car if your seatbelt is unfashioned

1730502379
torque!~tachyon@user/torque
that sounds like a safety feature

1730502414
grayhatter!~grayhatte@user/grayhatter
sounds like it, until it annoys someone enough to try to get around it, so they cut the seatbelt instead

1730502477
torque!~tachyon@user/torque
I'm sorry I don't understand why you think the metaphor missed the mark

1730502484
grayhatter!~grayhatte@user/grayhatter
the thing I like about zig, is that it's not painful to use. It doesn't inflict it's will upon you. (most of the time) It'll let you do crazy stuff if you really want

1730502539
torque!~tachyon@user/torque
a lot of people would disagree with you regarding that. the indentation and unused variable issues have been quite contentious for a lot of people

1730502550
grayhatter!~grayhatte@user/grayhatter
this doesn't make the code more correct, it make it harder to make a specific flavor of typo. Which while it does prevent some bugs. I'm not convinced that there will be a net positive.

1730502552
torque!~tachyon@user/torque
we're still here because they don't bother us much or we agree with them

1730502591
torque!~tachyon@user/torque
catching typos was not the point of the proposal

1730502621
grayhatter!~grayhatte@user/grayhatter
torque: I'm one of them, they're both bad decisions IMO. But _ = usused; is easy enough, and a trade off I'm very willing to make to avoid thoes bugs. 

1730502624
torque!~tachyon@user/torque
the point was to enforce accessing every field of a struct so that you would get a compile error if someone changed the struct definition to add a field

1730502660
grayhatter!~grayhatte@user/grayhatter
I don't care about indentation rules because I was always gonna use `zig fmt`. after that, I refuse to argue about literal whitespace for anymore of my life

1730502751
grayhatter!~grayhatte@user/grayhatter
all that said

1730502758
grayhatter!~grayhatte@user/grayhatter
I'd rather have it be an inline notation

1730502776
grayhatter!~grayhatte@user/grayhatter
const foo_ = useall foo();

1730502787
grayhatter!~grayhatte@user/grayhatter
const foo_a = foo_.a; [...]

1730502802
grayhatter!~grayhatte@user/grayhatter
error: foo_.b is unsued

1730502899
grayhatter!~grayhatte@user/grayhatter
or maybe it should be it's own const/variable type?

1730502919
grayhatter!~grayhatte@user/grayhatter
`useall f = foo();` instead of `const f`

1730504107
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: can you update your snippet to include an example of how to use all the fields of a parameter?

1730505054
grayhatter!~grayhatte@user/grayhatter
andrewrk: sure, 

