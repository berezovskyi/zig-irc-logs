1732654207
interpunct!cc60843162@user/interpunct
is there a way for you to declare a custom step and let a project depending on you to use it?

1732654431
interpunct!cc60843162@user/interpunct
ie you have a library with a build.zig that declares a step that does something to a compile object that would depend on it.

1732654485
interpunct!cc60843162@user/interpunct
preferably the library would expose like a custom step type or something like that and the user would do like CustomStep.create(some_exe) or similar

1732654532
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
interpunct: I have this (https://github.com/rockorager/zzdoc) which exposes a custom build step

1732655190
interpunct!cc60843162@user/interpunct
rockorager: ty i'll look at that !

1732657124
andrewrk!~andrewrk@mail.ziglang.org
recommend to avoid custom build steps in favor of Run steps

1732657483
interpunct!cc60843162@user/interpunct
andrewrk: what does this mean?

1732657820
interpunct!cc60843162@user/interpunct
my specific use case here is i am writing a library to help with development of CLAP audio plugins and want to expose a build step that would package a dynamic library in the format that is expected on the target platform

1732657919
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
andrewrk: Run as in, compile a binary then run it?

1732658112
ifreund!2940d10f8b@user/ifreund
thats what I do for zig wayland

1732658192
ifreund!2940d10f8b@user/ifreund
This use case sounds like it might not even need to be a "step" though, could it just be a function?

1732658239
andrewrk!~andrewrk@mail.ziglang.org
rockorager: https://ziglang.org/documentation/0.13.0/std/#std.Build.Step.Run

1732658240
interpunct!cc60843162@user/interpunct
i am basically trying to export the createPackageStep from this (https://paste.sr.ht/~interpunct/ae9963817c05dbca7a6570cd4de6b724fd389e9d)

1732658469
andrewrk!~andrewrk@mail.ziglang.org
rockorager: sorry, yes, exactly what you said

1732658597
interpunct!cc60843162@user/interpunct
would what i want to do be a use case for a named WriteFiles?

1732658608
ifreund!2940d10f8b@user/ifreund
interpunct: it looks like you could just make that function public in your build.zig and let consumers of your library @import() it no?

1732658652
ifreund!2940d10f8b@user/ifreund
this isnt technically a "custom step" though

1732658759
interpunct!cc60843162@user/interpunct
ifreund: okay i think i see what you're saying. for consumer's of my library, do they do like const l = @import("lib") and it would just be able to be called l.createPackageStep

1732658786
interpunct!cc60843162@user/interpunct
or is it something i should have in like the lib's root file

1732658872
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
andrewrk: ack. I’ll change zzdoc over to a Run step someday(tm)

1732658910
ifreund!2940d10f8b@user/ifreund
interpunct: if you do `@import("foo")` in your build.zig it will import the build.zig file from the package named "foo"

1732658916
ifreund!2940d10f8b@user/ifreund
does that make things clear?

1732658949
interpunct!cc60843162@user/interpunct
ifreund: omg yes that is basically exactly the answer i was looking for

1732658968
interpunct!cc60843162@user/interpunct
i was looking for documentation and i couldn't find an answer to that

1732658970
interpunct!cc60843162@user/interpunct
thank u

1732658994
ifreund!2940d10f8b@user/ifreund
no problem, ideally you should have been able to find this in the documentation...

1732659178
ifreund!2940d10f8b@user/ifreund
I wonder if this is actually documented anywhere...

1732659206
grayhatter!~grayhatte@user/grayhatter
ifreund: I'm pretty sure it's not

1732659211
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I haven’t seen it, I only heard about it from loris

1732659220
grayhatter!~grayhatte@user/grayhatter
[source: I just had to do this for srctree/verse]

1732659363
ifreund!2940d10f8b@user/ifreund
I guess there aren't really many docs on the package manager in general yet

1732659418
grayhatter!~grayhatte@user/grayhatter
I usually just point people at player.git (groovebasin) it does one of everything

1732659708
palanix!~palanix@2a02:3100:5890:5800:59a0:6e3e:417d:f304
grayhatter: the old one or the new one on codeberg

1732660028
grayhatter!~grayhatte@user/grayhatter
the new one I assume

1732660143
palanix!~palanix@2a02:3100:5890:5800:59a0:6e3e:417d:f304
Is there any reason andrewrk doesn't link to his codeberg on either his website or his github?

