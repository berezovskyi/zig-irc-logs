1731155935
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I just saw dude_the_builder is looking for a new maintainer of zg, if anyone here is particularly interested: https://codeberg.org/dude_the_builder/zg/commit/5f8722235b389fa6f11a9c1415922e54970f5d9a

1731155975
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Looks like most/all of their libs, actually

1731178150
grayhatter!~grayhatte@user/grayhatter
error: comptime dereference requires '?bool' to have a well-defined layout

1731178170
grayhatter!~grayhatte@user/grayhatter
is this a compiler bug, or a user bug?

1731178393
grayhatter!~grayhatte@user/grayhatter
it was in fact, a user bug

1731179538
d76d5!~d76d5@user/d76d5
how would I pass a string to a function started by a thread? zig complains that the string is const but the input of the function is just a slice. a const removal worked, but that seems pretty ugly imo

1731179553
d76d5!~d76d5@user/d76d5
when the string can be passed as normal without a thread

1731179972
grayhatter!~grayhatte@user/grayhatter
d76d5: the question is ambigious, do you have sample code?

1731180234
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
grayhatter: im curious about the bug

1731180721
grayhatter!~grayhatte@user/grayhatter
I had written `@as(*const bool, @ptrCast(default.?));` when I needed to write `@as(*const ?bool, @ptrCast(default.?));`

1731180794
d76d5!~d76d5@user/d76d5
ie I have a zig function like so: fn myfn(in: []u8) !void {

1731180794
d76d5!~d76d5@user/d76d5
 // do something with string

1731180794
d76d5!~d76d5@user/d76d5
 }

1731180794
d76d5!~d76d5@user/d76d5
...

1731180794
d76d5!~d76d5@user/d76d5
std.Thread.spawn(.{}, myfn, .{"some string"});

1731180839
grayhatter!~grayhatte@user/grayhatter
"some string" is `[]const u8` that function only accepts `[]u8`

1731180872
d76d5!~d76d5@user/d76d5
I thought all function inputs were const?

1731180903
Gliptic!~glip@2a01:4f8:c012:91f3::1
the parameter is const

1731180904
grayhatter!~grayhatte@user/grayhatter
no, all function variable names are const

1731180906
Gliptic!~glip@2a01:4f8:c012:91f3::1
the slice is not const

1731180935
d76d5!~d76d5@user/d76d5
got it. thanks

1731180948
Gliptic!~glip@2a01:4f8:c012:91f3::1
i.e. you cannot assign a different slice to `in`, but you can modify the contents that `in` points to

1731180967
grayhatter!~grayhatte@user/grayhatter
for your example `in: []u8` is a Slice which is `struct{ ptr: *address, len: usize}`

1731181032
grayhatter!~grayhatte@user/grayhatter
you can't change the pointer address, or the length, but, you can change the bytes at the address, `[]const u8` would mean you also can't change the bytes 

1731181109
grayhatter!~grayhatte@user/grayhatter
slices are a bit more complicated then the minimal syntax would imply, it's helpful to think of Slices to be part struct, part pointer

1731196566
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
If I want to write something akin to a Java Interface, should I look at how Writers are implemented?

1731196651
Gliptic!~glip@2a01:4f8:c012:91f3::1
AnyWriter

1731196684
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Ok ty

