1734309878
mountaingoat!~mountaing@user/mountaingoat
is there a more appropriate std lib data structure for a map storing a key with multiple values than std.AutoHashMap(K, std.ArrayList(V)) ?

1734309991
grayhatter!~grayhatte@user/grayhatter
mountaingoat: only for very specific cases, that's likely the best default

1734310020
mountaingoat!~mountaing@user/mountaingoat
aight, thanks grayhatter

1734310179
grayhatter!~grayhatte@user/grayhatter
mountaingoat: I'm assuming you're aware that the value could be any type, i.e. a linked list, which isn't as obvious as ArrayList

1734310187
grayhatter!~grayhatte@user/grayhatter
(the obvious choice should be prefered, usually)

1734310272
mountaingoat!~mountaing@user/mountaingoat
yeah, V is going to be a POD in my case, and that array list will typically be small (usually length 1). i just need a one-to-many mapping

1734310282
mountaingoat!~mountaing@user/mountaingoat
for some cases

1734310318
grayhatter!~grayhatte@user/grayhatter
there, I'd used union { one: V, many: ArrayList(V) }

1734310398
grayhatter!~grayhatte@user/grayhatter
depending on V I mean, I'm assuming V doesn't always need to be heap allocated

1734310407
mountaingoat!~mountaing@user/mountaingoat
then i'd have to switch downstream in the two cases, instead of just looping consistently

1734310495
grayhatter!~grayhatte@user/grayhatter
very minimal (or suspect) increase in value, to be sure

1734310522
mountaingoat!~mountaing@user/mountaingoat
i think i can do something similar to that that'll make sense

1734310717
mountaingoat!~mountaing@user/mountaingoat
btw, for something like std.AutoHashMap(K, std.ArrayList(V)), is there a cleaner / more idiomatic way to deinitting a map with an array list type than: var values_it = map.valueIterator(); for (values_it.next()) |values| values.deinit(); map.deinit() ?

1734315550
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
BratishkaErik now I have a different error https://paste.gentoo.zip/7uPYFpkR

1734358938
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
https://github.com/ziglang/zig/wiki/Community IRC logs look like they're 404ing

1734359037
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
https://github.com/marler8997/zig-irc-logs oh they haven't been updated in forever 😆 any way to get logs? My NAS that runs my bouncer crashed last night :c

1734361315
ezzieyguywuf!~Unknown@user/ezzieyguywuf
bwbuhse: any logs you were looking for in particular? I think I have logs back to dec 08 or so, they're not too big I can upload them somewhere if you'd like

1734361363
ezzieyguywuf!~Unknown@user/ezzieyguywuf
bwbuhse: fwiw between your messag on dec 15 >> .:21:19:10:. < bwbuhse> BratishkaErik now I have a different error https://paste.gentoo.zip/7uPYFpkR << and your first message today, I don't see any other messages

1734361390
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
ezzieyguywuf cool, that's specifically what I was wondering about lol thanks

1734361398
ezzieyguywuf!~Unknown@user/ezzieyguywuf
👍

1734369040
hadronized!~hadronize@2001:41d0:a:fe76::1
anyone knows a way to flatten a struct into its parent?

1734369060
hadronized!~hadronize@2001:41d0:a:fe76::1
for instance, I would like to be able to do a @cImport inside a file so that all of its symbols are accessible directly 

1734369078
hadronized!~hadronize@2001:41d0:a:fe76::1
i.e. basically I want to group all my C imports in a file so that I can access them from other files

1734369086
hadronized!~hadronize@2001:41d0:a:fe76::1
current I have to do something like, in my c.zig

1734369091
hadronized!~hadronize@2001:41d0:a:fe76::1
pub const c = @cImport(...);

1734369093
hadronized!~hadronize@2001:41d0:a:fe76::1
and then 

1734369099
hadronized!~hadronize@2001:41d0:a:fe76::1
@import("c.zig").c;

1734369107
hadronized!~hadronize@2001:41d0:a:fe76::1
which works but is not very elegant IMHO

1734369370
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
hadronized: rip usingnamespace

1734369383
hadronized!~hadronize@2001:41d0:a:fe76::1
ah!

1734369394
hadronized!~hadronize@2001:41d0:a:fe76::1
ah wait, that’s being removed?

1734369396
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
usingnamespace did that exact thing, but is now gone

1734369397
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
yes

1734369423
hadronized!~hadronize@2001:41d0:a:fe76::1
I also tried to do something like just putting the cImport() as a single standing statement in the file

1734369427
hadronized!~hadronize@2001:41d0:a:fe76::1
I don’t think it works :D

1734369445
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I think your usecase above was the most compelling use case for it, but cImport is also going away

1734369461
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
You'll do the c stuff in build.zig instead of directly importing, I believe

1734369463
hadronized!~hadronize@2001:41d0:a:fe76::1
what is it replaced by?

1734369473
hadronized!~hadronize@2001:41d0:a:fe76::1
what does it mean?

1734369479
hadronized!~hadronize@2001:41d0:a:fe76::1
what would I do in build.zig?

1734369489
hadronized!~hadronize@2001:41d0:a:fe76::1
@cImport is probably one of the best FFI feature of Zig

1734369495
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
That part I'm not sure about, I haevn't used the new way

1734369503
hadronized!~hadronize@2001:41d0:a:fe76::1
(for instance, in Rust, it’s a bit of work to get a compatible interface; having to use cbindgen and shit)

1734369507
hadronized!~hadronize@2001:41d0:a:fe76::1
hm, okay

1734369515
hadronized!~hadronize@2001:41d0:a:fe76::1
I’ll keep lurking around that concept

1734369560
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I don't know, maybe I'm wrong...@cImport is still in the docs for `master`

1734369787
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: do you know a way to convert from a C-enum to a Zig error?

1734369847
hadronized!~hadronize@2001:41d0:a:fe76::1
I guess @errorFromInt?

1734369859
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yeah I think errorFromInt

1734369873
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Haven't done much c interop, so I'm not positive the best pattern

1734369875
hadronized!~hadronize@2001:41d0:a:fe76::1
but I have to declare all the possible error types, right?

1734369881
hadronized!~hadronize@2001:41d0:a:fe76::1
https://registry.khronos.org/vulkan/specs/latest/man/html/VkResult.html

1734369883
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yeah

1734369899
hadronized!~hadronize@2001:41d0:a:fe76::1
I guess a comptime function that turn that into an error set would be nice

1734369905
hadronized!~hadronize@2001:41d0:a:fe76::1
if it doesn’t already exist, I guess I’ll write it

1734369922
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
There's gotta be a vulkan wrapper/

1734369926
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
maybe in mach?

1734369932
hadronized!~hadronize@2001:41d0:a:fe76::1
probably but I want to write it myself

1734369938
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
ah

1734369948
hadronized!~hadronize@2001:41d0:a:fe76::1
I find that binding to C libraries directly is much easier in Zig than in Rust

1734369965
hadronized!~hadronize@2001:41d0:a:fe76::1
in Rust I’d use something like ash, which is a thin wrapper, but adds many higher-level concepts

1734369987
hadronized!~hadronize@2001:41d0:a:fe76::1
I like the fact that I can just slap a @cImport + @cInclude and immediately start using C functions and types, and even have ZLS tell me about all of those

1734369990
hadronized!~hadronize@2001:41d0:a:fe76::1
pretty seamless

1734370158
hadronized!~hadronize@2001:41d0:a:fe76::1
ah nevermind, @cImport doesn’t convert to an enum, but to a c_int

1734370160
hadronized!~hadronize@2001:41d0:a:fe76::1
hm

1734378016
BratishkaErik!fd46852e72@user/BratishkaErik
bwbuhse: sorry for late reply, problem here is in addCustomProtocol function from zig-wayland dependency,

1734378054
BratishkaErik!fd46852e72@user/BratishkaErik
you can use patch from `gui-wm/river-0.3.6` https://github.com/gentoo/guru/commit/8c7d3519b3bccba1693afe1deef351aca885d9ad

1734378083
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Ah, thanks! I was trying to look at the river ebuild you made but didn't even look at the patch 🤦

1734378094
BratishkaErik!fd46852e72@user/BratishkaErik
I have already submitted proper fix upstream https://codeberg.org/ifreund/zig-wayland/pulls/63 , example for downstream https://codeberg.org/river/river/pulls/1169

1734378148
BratishkaErik!fd46852e72@user/BratishkaErik
you're welcome

1734378196
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Ah cool, yeah I guess I need to fix it in my project then too :P 

1734378303
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
zig-ebuilder worked great as far as I can tell, though 😄

1734382503
hadronized!~hadronize@2001:41d0:a:fe76::1
is there a way to iterate on a (known) error set’s variant at comptime?

1734382839
hadronized!~hadronize@2001:41d0:a:fe76::1
I guess on ErrorSet.?, nvm

1734388667
hadronized!~hadronize@2001:41d0:a:fe76::1
failed: expected error.VK_THREAD_DONE_KHR, found error.VK_THREAD_DONE_KHR

1734388669
hadronized!~hadronize@2001:41d0:a:fe76::1
hmmmmmm

1734388801
hadronized!~hadronize@2001:41d0:a:fe76::1
ah, yes

1734388815
hadronized!~hadronize@2001:41d0:a:fe76::1
the compiler error message is wrong here

1734388825
hadronized!~hadronize@2001:41d0:a:fe76::1
it should state that it expected or found an optional

1734389620
clevor!sid649024@id-649024.hampstead.irccloud.com
hadronized: That reminds me of an error someone encountered on a Discord channel. https://usercontent.irccloud-cdn.com/file/pVeae6Go/image-3.png

1734389875
clevor!sid649024@id-649024.hampstead.irccloud.com
Source: https://discord.com/channels/1133342557494067232/1133342829448536096/1302409848478236725 on Vimjoyer's server https://discord.gg/vimjoyer-s-server-1133342557494067232

