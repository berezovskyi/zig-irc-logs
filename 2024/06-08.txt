1717806045
smlavine!~smlavine@sourcehut/user/smlavine
Hello -- if I have a `pub fn foo(self: @This())`, even though I don't declare as a pointer, will the object still be passed by reference instead of on the stack of the compiler thinks the struct is "too big"?

1717806831
torque!~tachyon@user/torque
the compiler may pass it by reference, but the semantics of how it chooses are not currently guaranteed afaik. You can do `pub fn foo(self: *const @This())` to guarantee it gets passed by reference

1717807846
smlavine!~smlavine@sourcehut/user/smlavine
I see -- I end up having to do *@This() anyhow in order to mutate. Which makes sense lol

1717808434
rockorager!2bbd732aa1@irc.pico.sh
smlavine: I am *think* (or maybe this is my opinion coming through) that the "idiomatic" way to do this is to define `const Self = @This();` somewhere up top so you cnan do `pub fn (self: *Self)`, etc

1717808468
rockorager!2bbd732aa1@irc.pico.sh
I am not sure the community standards, but at least in my opinion this is preferred

1717808530
rockorager!2bbd732aa1@irc.pico.sh
Most of std follows this convention so I suspect that's the "preferred" way

1717808785
smlavine!~smlavine@sourcehut/user/smlavine
rockorager: Considered doing that but I figure that if the language wants me to type out `@This()` then that's what I'll do :)

1717808798
smlavine!~smlavine@sourcehut/user/smlavine
`@This` without the parens would be nicer I suppose

1717808956
rockorager!2bbd732aa1@irc.pico.sh
FWIW, the convention I've taken is that for large types I make a separate file and the topmost line of MyType.zig is `const MyType = @This();` with some top-level doc comments before that to describe the type

1717808986
rockorager!2bbd732aa1@irc.pico.sh
https://ziglang.org/documentation/0.13.0/#Top-Level-Doc-Comments

1717809802
rockorager!2bbd732aa1@irc.pico.sh
ACTION is writing this from an irc client written in zig within an embedded terminal written in zig within a tui library written in zig within a terminal written in zig

1717809821
rockorager!2bbd732aa1@irc.pico.sh
I don't use river so can't go further up the stack :/

1717809911
smlavine!~smlavine@sourcehut/user/smlavine
:)

1717809933
smlavine!~smlavine@sourcehut/user/smlavine
Have you started rewriting aerc in Zig yet?

1717809962
smlavine!~smlavine@sourcehut/user/smlavine
Write now I'm also writing in a class-like Type.zig file so maybe I can go like that too

1717810103
rockorager!2bbd732aa1@irc.pico.sh
smlavine: ha, the pieces are coming together

1717810263
rockorager!2bbd732aa1@irc.pico.sh
Lord help me if I write an imap client in zig...

1717810381
rockorager!2bbd732aa1@irc.pico.sh
I started a jmap client and that is easier in zig than go, so I'll almost certainly build that out at some point

1717812473
smlavine!~smlavine@sourcehut/user/smlavine
Neat

1717825407
andrewrk!~andrewrk@mail.ziglang.org
alright, 0.12.1 and 0.13.0 are both out

1717836556
ifreund!2940d10f8b@user/ifreund
rockorager: I dont consider "self" to be a good or idiomatic name. IMO a descriptive name for the type should always be preferred

1717836656
ifreund!2940d10f8b@user/ifreund
the self hosted compiler started moving away from self: Self a while back, the usage in the std is mostly either old, unidiomatic code or generic types where it is a bit more defeasible

1717837931
txdv!~txdv@78.56.38.107
ifreund: what would you use instead of self?

1717838007
ifreund!2940d10f8b@user/ifreund
the name of the type

1717838035
ifreund!2940d10f8b@user/ifreund
e.g. const Window = @This();

1717838126
ifreund!2940d10f8b@user/ifreund
it also has the advantage of making it much easier to move code around between structs as the naming convention is no longer dependent on which struct the code happens to be inside

1717871216
andrewrk!~andrewrk@mail.ziglang.org
rockorager: let me know if you do... I'm half tempted to write my own email software 

1717883317
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
When building a static library from C sources using `build.zig`, do I need to manually apply the relevant `-Og` or `-O3` flags? I would have assumed not, but I just got a segfault in some C code that wasn't able to give me a backtrace. 

1717884447
companion_cube!~simon@user/meow/companion-cube:68572
andrewrk: and call it "fastermail"? 

1717885690
andrewrk!~andrewrk@mail.ziglang.org
I just want an efficient UI and non-machine-learning solution to spam

1717888648
rockorager!2bbd732aa1@irc.pico.sh
andrewrk: have you tried clawsmail?

