1734060245
ezzieyguywuf!~Unknown@user/ezzieyguywuf
grayhatter: thanks for your comments and opinions on the testing 'bug' I mentioned. I think I'm too used to e.g. `go test`, `cargo test` etc. by now (`bazel test` even) that I've gotten out of the habit of interacting directly with the test binary itself. I used to be quite fond of gdb back in the day but I've moved significantly away from it I guess b/c it's not rly easy to use at work lol. I'll 

1734060251
ezzieyguywuf!~Unknown@user/ezzieyguywuf
definitely keep your and torque's comments in mind as I continue developing a dev cycle in zig

1734064711
grayhatter!~grayhatte@user/grayhatter
I wonder if there's a way to get the failed tests within the build.zig file

1734064742
grayhatter!~grayhatte@user/grayhatter
I'd love to be able to write something to have `zig build test gdb` start the first failed test binary in gdb

1734079512
ifreund!2940d10f8b@user/ifreund
that would be cool

1734102875
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Confused about one thing. I have obtained a seekable stream from a file using https://ziglang.org/documentation/master/std/#std.fs.File.seekableStream

1734102891
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Now I want to create this iterator using it: https://ziglang.org/documentation/master/std/#std.zip.Iterator

1734102898
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
But I am not sure of the syntax.

1734102974
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
I tried `std.zip.Iterator(std.io.SeekableStream).init(file_seekable_stream)` but that does not work.

1734103041
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Ok hold not that is a type function and not a type. But I am not sure what is supposed to go in its place.

1734103300
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
I used @TypeOf(file_seekable_stream) and it worked. :)

1734104280
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Nevermind it stopped working as I wrote more code.

1734104326
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
I am sorry it still works. I made another mistake. Please disregard my last message.

1734130785
hadronized!~hadronize@2001:41d0:a:fe76::1
is it possible to generate identifiers based off strings?

1734130806
hadronized!~hadronize@2001:41d0:a:fe76::1
like, have a comptime foo: []const u8, and turn that magically into an identifier?

1734130826
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s something I’m used to do in other languages, but not sure how to do that in Zig

1734131199
Gliptic!~glip@2a01:4f8:c012:91f3::1
an identifier to be used how?

1734131304
Gliptic!~glip@2a01:4f8:c012:91f3::1
I mean, you can use @Type to make a type that contains fields with field names from []const u8, for example

1734131483
hadronized!~hadronize@2001:41d0:a:fe76::1
for instance, to generate an ident that is used to reference a constant value in a C header for instance

1734131496
hadronized!~hadronize@2001:41d0:a:fe76::1
I guess I could hack around that by putting the values in a struct, and use @field() on that

1734131560
Gliptic!~glip@2a01:4f8:c012:91f3::1
as they are fields of structs, I don't see any other way to do that, so not really a hack

1734131626
hadronized!~hadronize@2001:41d0:a:fe76::1
without using a struct, it’s not possible?

1734131636
hadronized!~hadronize@2001:41d0:a:fe76::1
I guess it should still work on a module, right?

1734131641
hadronized!~hadronize@2001:41d0:a:fe76::1
since a module is basically a struct

1734131927
Gliptic!~glip@2a01:4f8:c012:91f3::1
a module is not just basically a struct, it is a struct

