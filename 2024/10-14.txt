1728870599
reykjalin!7e28cf3a41@user/reykjalin
Can I not `switch` on a value that's potentially null? I'm trying to `switch (arraylist.getOrNull())` but zig is giving me an error saying `error: switch on type '?main.Layout'` without any further explanation.

1728870629
reykjalin!7e28cf3a41@user/reykjalin
sorry, I'm trying to `switch (arraylist.getLastOrNull())`. Forgot the `Last` part :)

1728870676
reykjalin!7e28cf3a41@user/reykjalin
main.Layout here is an enum literal

1728870774
reykjalin!7e28cf3a41@user/reykjalin
or a standard `const Layout = enum { ... }` I guess. Misread the docs on what these are called.

1728870848
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
reykjalin: youâ€™ll have to unwrap the optional first

1728870877
reykjalin!7e28cf3a41@user/reykjalin
rockorager: ah all right, thanks!

1728870899
reykjalin!7e28cf3a41@user/reykjalin
I was fully expecting to be able to just handle `null` as one of the cases in the switch branches.

1728906705
vpol!~vpol@host86-129-25-187.range86-129.btcentralplus.com
brew install zig --HEAD

1728906712
vpol!~vpol@host86-129-25-187.range86-129.btcentralplus.com
Error: No head is defined for zig

1728906715
vpol!~vpol@host86-129-25-187.range86-129.btcentralplus.com
is it intentional?

1728909297
ashie!~ashie@user/ashie
I saw some projects use files which have files which are structs, for example file called MyStruct would have fields directly declared instead of containing `pub const MyStruct = ...`

1728909322
ashie!~ashie@user/ashie
is it possible to make such a struct `packed`? I assume not but asking regardless

1728909784
ifreund!2940d10f8b@user/ifreund
ashie: nope

1728928978
probie!cc0b34050a@user/probie
If I want to represent bit-boards that fit inside a single machine word, should I do something like `@Vector(61, bool)` (for a "board" with 61 "squares"), or is that going to make the compiler produce "bad" code (i.e using the CPUs SIMD instructions when just the regular instructions will do)

1728929339
andrewrk!~andrewrk@mail.ziglang.org
probie: I suggest to use a packed struct to prepare your inputs, then assign to a volatile pointer

1728929351
andrewrk!~andrewrk@mail.ziglang.org
you could use a @Vector to prepare your inputs if you want to do vector math but I'm guessing you don't

1728929563
probie!cc0b34050a@user/probie
Why a volatile pointer? When I say bit-board, I mean in the "game" sense (e.g. for chess you might represent the board as 12 ({black,white} {king,queens,bishops,knights,rooks,pawns}) 64-bit"masks"

1728929594
andrewrk!~andrewrk@mail.ziglang.org
oh, I thought you were talking about the display of an embedded device, sorry

1728929707
andrewrk!~andrewrk@mail.ziglang.org
what makes you reach for @Vector rather than more simply a struct with a single u61 field?

1728929907
probie!cc0b34050a@user/probie
To have indexing for the operations where shifting/and-ing/or-ing aren't convenient

1728929983
andrewrk!~andrewrk@mail.ziglang.org
if you use methods you can create a convenient API for manipulating the data in a type-safe manner

1728930341
probie!cc0b34050a@user/probie
I'll give it a go with a u61, and wait until I hit actual pain points instead of just guessing at what they're going to be

1728946784
coleman!~coleman@static.87.86.161.5.clients.your-server.de
torque: updated to a commit from libsodium stable https://github.com/allyourcodebase/nats.c/pull/1

