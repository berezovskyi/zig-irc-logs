1732838431
hadronized!~hadronize@2001:41d0:a:fe76::1
that depends on how you see things I guess, but if you look at something and think “that can’t work the way I want to work”, people will have to convince me otherwise

1732838444
torque!~tachyon@user/torque
it's not that it can't, it's that it doesn't

1732838460
hadronized!~hadronize@2001:41d0:a:fe76::1
I think I have spent enough time around programming languages to know exactly what traits to look for, so yeah, I’m looking for arguments to change my mind, basically

1732838466
torque!~tachyon@user/torque
so you either change your philosophy to be ok with the fact that it is different than you want it to be, or you reject it

1732838468
hadronized!~hadronize@2001:41d0:a:fe76::1
that’s what I meant with “prove me wrong”

1732838488
hadronized!~hadronize@2001:41d0:a:fe76::1
I mean, yeah, Go is different and I do think its design is absolute garbage

1732838499
hadronized!~hadronize@2001:41d0:a:fe76::1
I do accept it though, but I also have my opinion on it

1732838509
torque!~tachyon@user/torque
nobody is going to convince you, you have to convince yourself

1732838538
hadronized!~hadronize@2001:41d0:a:fe76::1
okay, but then I lack the incentive to

1732838604
hadronized!~hadronize@2001:41d0:a:fe76::1
from what I read from Zig people, and from my experiments, I’m convinced about a couple things regarding the language, so why would I try to convince me otherwise? that’s why I said engaging with people now is just a way to try to see if I can be proven wrong about what I think about the language

1732838631
torque!~tachyon@user/torque
design and engineering are all about tradeoffs. I personally prefer the philosophy of keeping the language features small, and I'm ok with it not having all the features I wish it did as a result.

1732838667
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah I mean that’s fair

1732838681
hadronized!~hadronize@2001:41d0:a:fe76::1
having a small language has good aspects

1732838688
torque!~tachyon@user/torque
I have just said, nobody is going to prove you wrong. there's nothing to argue about here. it's farcical to try to do so if you have convinced yourself of certain things

1732838695
hadronized!~hadronize@2001:41d0:a:fe76::1
the issue to me is that, regarding Zig for instance, I don’t see any resolution regarding a couple of topics that I cherish a lot

1732838710
torque!~tachyon@user/torque
this is why these discussions have been so tiresome

1732838712
hadronized!~hadronize@2001:41d0:a:fe76::1
like memory ownership, preventing UAFs, etc.

1732838782
hadronized!~hadronize@2001:41d0:a:fe76::1
no, I mean, whenever I bring up something that I think is flawed in Zig (for instance, it doesn’t have an ownership model), I don’t really get any feedback from the community that seems to actually try to solve that problem (and it’s very likely being worked on, but finding that kind of information is hard)

1732838785
companion_cube!~simon@user/meow/companion-cube:68572
There's probably no way to solve these while preserving the flexibility of allocators and the overall simplicity

1732838792
hadronized!~hadronize@2001:41d0:a:fe76::1
if at some point I realize that most of my concerns are just “nothing to argue about”

1732838794
hadronized!~hadronize@2001:41d0:a:fe76::1
then yeah

1732838802
hadronized!~hadronize@2001:41d0:a:fe76::1
I can just move on with my life and forget about Zig

1732838806
torque!~tachyon@user/torque
the point is that you think they are problems, other people do not

1732838809
companion_cube!~simon@user/meow/companion-cube:68572
Rust is more or less as simple as it can be given what it tries to do

1732838811
hadronized!~hadronize@2001:41d0:a:fe76::1
but it would be unfair to the work of individuals working on it

1732838824
hadronized!~hadronize@2001:41d0:a:fe76::1
hence why I’m trying hard to get into the language, still while not being convinced by it 

1732838829
torque!~tachyon@user/torque
the situation devolves into people talking past each other

1732838841
hadronized!~hadronize@2001:41d0:a:fe76::1
torque: how can memory safety not be a problem?

1732838860
torque!~tachyon@user/torque
I can write programs that do what I want and need them to do in zig

1732838870
hadronized!~hadronize@2001:41d0:a:fe76::1
companion_cube: for your second statement; I completely agree and it’s something that is very often ignored when talking about it

1732838881
companion_cube!~simon@user/meow/companion-cube:68572
I mean I think it's your answer

1732838895
companion_cube!~simon@user/meow/companion-cube:68572
We don't know how to make a safe zig, or a simpler rust

1732838899
hadronized!~hadronize@2001:41d0:a:fe76::1
companion_cube: yet I feel frustrated

1732838906
companion_cube!~simon@user/meow/companion-cube:68572
So you have to pick one

1732838932
hadronized!~hadronize@2001:41d0:a:fe76::1
companion_cube: I think ATS has nice ideas

1732838938
hadronized!~hadronize@2001:41d0:a:fe76::1
(and ATS doesn’t have lifetimes)

1732838939
torque!~tachyon@user/torque
you're not going to convince the core team at this point that they should have developed rust 2.0

1732838951
hadronized!~hadronize@2001:41d0:a:fe76::1
that’s not what I’m saying

1732838962
grayhatter!~grayhatte@user/grayhatter
hadronized: substitute the word "memory safety" with "bug"

1732838969
hadronized!~hadronize@2001:41d0:a:fe76::1
I was wondering about the solutions Zig would have regarding problems solved by Rust, whatever their answer is

1732838979
hadronized!~hadronize@2001:41d0:a:fe76::1
and the answer can be “it’s not a problem for us” as you stated

1732838988
hadronized!~hadronize@2001:41d0:a:fe76::1
and then that confirms what I think about Zig, and then I can just ignore it

1732838995
torque!~tachyon@user/torque
ok, sounds good to me

1732839005
grayhatter!~grayhatte@user/grayhatter
memory safety bugs are no different from other bugs... that's a very common misconception in rust circles which IMO is actively harmful

1732839005
companion_cube!~simon@user/meow/companion-cube:68572
ATS is, afaik, basically unusable in practice

1732839014
companion_cube!~simon@user/meow/companion-cube:68572
Extremely hard to use

1732839017
hadronized!~hadronize@2001:41d0:a:fe76::1
companion_cube: it’s super hard, yes; I think a subset of it would be really nice

1732839035
hadronized!~hadronize@2001:41d0:a:fe76::1
their demonstration of how to make alloc and free safe is really impressive though and clearly the direction I would love a systems programming langage to go to

1732839060
companion_cube!~simon@user/meow/companion-cube:68572
torque: I don't think there's any clear idea of what rust 2 would be like

1732839066
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: but the same could be stated for Zig

1732839079
hadronized!~hadronize@2001:41d0:a:fe76::1
allocators are advertised as a nice feature because they can catch leaks, for instance

1732839087
hadronized!~hadronize@2001:41d0:a:fe76::1
but as you stated, it’s not only about memory safety

1732839091
grayhatter!~grayhatte@user/grayhatter
hadronized: what misconcetption?

1732839095
hadronized!~hadronize@2001:41d0:a:fe76::1
there’s nothing in Zig to detect file leaks

1732839096
companion_cube!~simon@user/meow/companion-cube:68572
As in, nobody knows how old could make rust better

1732839104
hadronized!~hadronize@2001:41d0:a:fe76::1
(I meant, file descriptor leaks)

1732839105
companion_cube!~simon@user/meow/companion-cube:68572
How one could*

1732839167
hadronized!~hadronize@2001:41d0:a:fe76::1
companion_cube: Rust is another topic; I do think that most people that think “Rust is too hard” are either people who haven’t spent enough times working with it, or are just really dishonest (they are hard things with Rust; and it’s usually not what is talked about)

1732839175
dutchie!~dutchie@user/dutchie
Austral looked interesting

1732839177
hadronized!~hadronize@2001:41d0:a:fe76::1
time*

1732839189
hadronized!~hadronize@2001:41d0:a:fe76::1
there*

1732839208
hadronized!~hadronize@2001:41d0:a:fe76::1
dutchie: that rings a bell

1732839212
hadronized!~hadronize@2001:41d0:a:fe76::1
I think I’ve seen it already somewhere

1732839223
dutchie!~dutchie@user/dutchie
https://austral-lang.org/

1732839224
companion_cube!~simon@user/meow/companion-cube:68572
It's rust without the borrow checker iirc 

1732839238
grayhatter!~grayhatte@user/grayhatter
hadronized: there's nothing in Zig to detect memory leaks either, unless you mean the stdlib, in which case, why not write your own fd allocator?

1732839239
dutchie!~dutchie@user/dutchie
it's linear types rather than Rust's affine

1732839242
dutchie!~dutchie@user/dutchie
so you have to explicitly drop

1732839251
dutchie!~dutchie@user/dutchie
more OCaml-y too

1732839283
hadronized!~hadronize@2001:41d0:a:fe76::1
dutchie: that’s pretty interesting and something I wanted to propose to Zig a while ago

1732839288
hadronized!~hadronize@2001:41d0:a:fe76::1
I’ll have a look, thank you!

1732839303
hadronized!~hadronize@2001:41d0:a:fe76::1
2021 — 2023 argh?

1732839319
companion_cube!~simon@user/meow/companion-cube:68572
There's no traction really 

1732839324
companion_cube!~simon@user/meow/companion-cube:68572
No real demand for this

1732839336
dutchie!~dutchie@user/dutchie
last commit 5 months ago it looks. but yeah, small hobbyist language, didn't pick up the mindshare Rust did

1732839367
dutchie!~dutchie@user/dutchie
hard to break into the systems programming language space

1732839387
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, this is why I think a C-based approach is good

1732839392
torque!~tachyon@user/torque
what's wrong with something being from 2023??? C99 is still the king of all languages anyway

1732839401
torque!~tachyon@user/torque
age has no bearing on uality

1732839411
hadronized!~hadronize@2001:41d0:a:fe76::1
for a “new language”, it does

1732839417
hadronized!~hadronize@2001:41d0:a:fe76::1
especially if there’s no traction 

1732839429
dutchie!~dutchie@user/dutchie
C not having changed in 25 years is very different to an unfinished language not having changed in 6 months

1732839432
hadronized!~hadronize@2001:41d0:a:fe76::1
C99 is used in the whole world in all domains, I don’t think the comparison is close to fair

1732839439
hadronized!~hadronize@2001:41d0:a:fe76::1
dutchie: exactly

1732839443
companion_cube!~simon@user/meow/companion-cube:68572
C keeps evolving, just very slowly 

1732839449
torque!~tachyon@user/torque
for the worse

1732839455
hadronized!~hadronize@2001:41d0:a:fe76::1
they have #embed now

1732839465
companion_cube!~simon@user/meow/companion-cube:68572
And checked arithmetic 

1732839489
companion_cube!~simon@user/meow/companion-cube:68572
Give it 20 years more and they might have defer and/or slices 

1732839619
dutchie!~dutchie@user/dutchie
don't modern compilers have __attribute__(cleanup) or some other non-standard thing that does defer now

1732839628
dutchie!~dutchie@user/dutchie
but we're quite off-topic so i'll shut up now

1732839631
hadronized!~hadronize@2001:41d0:a:fe76::1
in C? yeah

1732839721
companion_cube!~simon@user/meow/companion-cube:68572
It's non standard like you say

1732839738
companion_cube!~simon@user/meow/companion-cube:68572
Lots of GNU code relies on it though, I think

1732846666
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
18:16 <hadronized> yeah, this is why I think a C-based approach is good — I work on an IDS/IPS engine code base written in C that started in ~2001 (when I was 2 :p ) and that’s why some of my coworkers have been interested in zig but Rust (at least for this codebase) never took off at my company 

1732856861
dnkl!86c6ab4b71@user/dnkl
grayhatter: (re fork-safe gpa) yeah, I suppose my use case is unusual, and not enough reason to change the GPA. Fwiw, there's an exec after the fork, it's just that there are some allocations before that, that I can't get rid of

1732856925
dnkl!86c6ab4b71@user/dnkl
but, I think I can do something with multiple gpa instances

1732873355
NiceNickName!~NiceNickN@user/NiceNickName
what ? means in `?[]const u8`?

1732873498
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/documentation/0.13.0/#Optionals

1732881737
boredcoder411!~boredcode@user/boredcoder411
wsg

1732884087
meator!~meator@user/meator
Hey. I've heard that zig has an advanced builtin system for handling cross compilation. I am not an expert in this topic. From what I've read, I have thought that I don't need to have a sysroot of the target system to be able to cross compile to that system, because Zig has a collection of header files built in. Is that correct? Does that require some special flags/setup?

1732884166
meator!~meator@user/meator
(I'm using Zig to compile C++.)

1732885989
goodvibrations32!~user@user/goodvibrations32
meator: Depends on the host/target relationship... LLVM does the job on zig afaik

1732885998
meator!~meator@user/meator
The target I am interested in, x86_64-openbsd, is in Tier 2 support. Does that mean that `zig c++` isn't supported without a sysroot?

1732886048
ifreund!2940d10f8b@user/ifreund
meator: I don't think zig provides either libc or libc++ headers for openbsd yet

1732886094
ifreund!2940d10f8b@user/ifreund
so yes, you would need a sysroot to cross-compile to openbsd currently

1732886106
ifreund!2940d10f8b@user/ifreund
(if linking libc/libc++)

1732886133
meator!~meator@user/meator
I have tried to compile my program for FreeBSD too and the same error about missing header file has occurred. Does Zig currently lack "first class" support for BSDs?

1732886468
ifreund!2940d10f8b@user/ifreund
nobody has done the work to add any BSD libc header files to the set of header files zig ships yet afaik

1732886497
meator!~meator@user/meator
Ok, thanks!

1732886510
meator!~meator@user/meator
But it would work for a Tier 1 target, correct?

1732886517
ifreund!2940d10f8b@user/ifreund
see the lib/libc directory in the zig source tree for the existing sets of header files

1732886541
ifreund!2940d10f8b@user/ifreund
I believe having libc/libc++ header files is a requirement for tier 1 support

1732886620
goodvibrations32!~user@user/goodvibrations32
also there is this section in every release notes https://ziglang.org/download/0.13.0/release-notes.html#Tier-System

1732900644
hadronized!~hadronize@2001:41d0:a:fe76::1
is there a way for a comptime function to inject calls into the calling functions with inlining or something similar?

1732902452
ifreund!2940d10f8b@user/ifreund
nope

1732908622
boredcoder411!~boredcode@user/boredcoder411
yess it works (my bad for using the irc channel, won't disturb again I promise)

1732908825
grayhatter!~grayhatte@user/grayhatter
is it possible to provide details to a the build.zig of a dependency?

1732908991
jemius!~imperator@200116b82d864a00eb8764342f29701f.dip.versatel-1u1.de
There won't be any Zig stuff at Fosdem, will there?

1732909273
ifreund!2940d10f8b@user/ifreund
just the hallway track afaik

1732909287
jemius!~imperator@200116b82d864a00eb8764342f29701f.dip.versatel-1u1.de
hallway track?

1732909297
ifreund!2940d10f8b@user/ifreund
(I plan to be there and will gladly talk to anyone about zig in the hallway)

1732917467
hadronized!~hadronize@2001:41d0:a:fe76::1
does Zig have channels? if not, I guess it’s left as a fun exercise

1732917494
hadronized!~hadronize@2001:41d0:a:fe76::1
i.e. channels as in, a queue, basically, with many sending ends and a single receiving one

1732917506
hadronized!~hadronize@2001:41d0:a:fe76::1
(I guess I could also go the « many receiving ones » to make a broker)

1732917588
hadronized!~hadronize@2001:41d0:a:fe76::1
also, what is std.gpu :D

1732920400
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
hadronized: not one in the stdlib

1732920451
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
feel free to copy this https://github.com/rockorager/libvaxis/blob/main/src/queue.zig

1732920911
grayhatter!~grayhatte@user/grayhatter
is there a known PR window for v0.14? now that I've split my code out into a program and a libraray... I might need to fix the TLS implementation in stdlib

1732920969
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: I’m interested to implement it on my own to strenghten my Zig knowledge

1732920977
hadronized!~hadronize@2001:41d0:a:fe76::1
I’ll use your implementation as a reference if I get stuck :)

1732920980
hadronized!~hadronize@2001:41d0:a:fe76::1
thanks for sharing!

