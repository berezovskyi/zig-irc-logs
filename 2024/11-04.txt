1730715408
hadronized!~hadronize@2001:41d0:a:fe76::1
hey, question about UTF-8 encoding; why is a codepoint encoded on u21 (3 bytes basically), while UTF-8 is 4-bytes?

1730715510
ifreund!2940d10f8b@user/ifreund
hadronized: UTF-8 is a variable length encoding, a codepoint may be encoded as 1, 2, 3, or 4 bytes

1730715549
ifreund!2940d10f8b@user/ifreund
it should be pretty easy to find details on this by searching the internet

1730715572
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah but if it’s 4 bytes, then we need 32 bits, no?

1730715582
hadronized!~hadronize@2001:41d0:a:fe76::1
or is it because of the fixed bits in each representation?

1730715608
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah I guess that’s why

1730715610
dutchie!~dutchie@user/dutchie
code points go from U+0000–U+10FFFF

1730715635
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah I saw https://en.wikipedia.org/wiki/UTF-8#Description

1730715659
dutchie!~dutchie@user/dutchie
the u21 represents the code point as an integer, not utf-8 encoded bytes

1730715667
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah I didn’t expect that

1730715669
hadronized!~hadronize@2001:41d0:a:fe76::1
interesting

1730715680
ifreund!2940d10f8b@user/ifreund
(just like UTF-32)

1730715693
ifreund!2940d10f8b@user/ifreund
but UTF-32 doesn't actually need all 32 bits, only 21 are necessary

1730716155
hadronized!~hadronize@2001:41d0:a:fe76::1
also, completely off-topic question; is there a model of ownership planned for Zig?

1730716177
hadronized!~hadronize@2001:41d0:a:fe76::1
a function returning *const u8 doesn’t really tell whether that should be deallocated

1730718532
probie!cc0b34050a@user/probie
hadronized: If you had to pass an allocator to the function, that's a strong indicator that you're probably in charge of deallocating the result

1730720402
hadronized!~hadronize@2001:41d0:a:fe76::1
probie: okay, but there’s nothing at the type level telling you that besides just relying on the fact an allocator was passed in?

1730720736
daurnimator!~daurnimat@vultr.daurnimator.com
hadronized: correct. it's a check-the-docs moment.

1730720784
daurnimator!~daurnimat@vultr.daurnimator.com
but you *should* be pretty confident that if you *didn't* pass in an allocator, then you own it, or an object you passed in a handle to does

1730721595
hadronized!~hadronize@2001:41d0:a:fe76::1
I see

1730724467
hadronized!~hadronize@2001:41d0:a:fe76::1
is the function to look for the index of an elem in a slice std.mem.indexOf with a singleton slice?

1730724997
ifreund!2940d10f8b@user/ifreund
hadronized: I don't know what you mean by "singleton" but it does sound like indexOf is what you want

1730727207
hadronized!~hadronize@2001:41d0:a:fe76::1
ifreund: &.{ 12 } instead of just &12

1730727241
ifreund!2940d10f8b@user/ifreund
hadronized: ah, you might want indexOfScalar()

1730727335
hadronized!~hadronize@2001:41d0:a:fe76::1
ah!

1730727338
hadronized!~hadronize@2001:41d0:a:fe76::1
interesting, thanks

1730727352
hadronized!~hadronize@2001:41d0:a:fe76::1
does it work with any T?

1730727358
hadronized!~hadronize@2001:41d0:a:fe76::1
like not only numbers

1730727366
hadronized!~hadronize@2001:41d0:a:fe76::1
if I’m looking for a string for example

1730727382
hadronized!~hadronize@2001:41d0:a:fe76::1
a []const u8 in a haystack of [][]const u8

1730727393
hadronized!~hadronize@2001:41d0:a:fe76::1
probably not, since I would like eql(u8, …) on that

1730730549
ifreund!2940d10f8b@user/ifreund
hadronized: it only works if == can be used on T

1730730557
ifreund!2940d10f8b@user/ifreund
otherwise you'll get a compile error

1730731246
hadronized!~hadronize@2001:41d0:a:fe76::1
that makes sense

1730731248
hadronized!~hadronize@2001:41d0:a:fe76::1
thanks!

1730743116
hadronized!~hadronize@2001:41d0:a:fe76::1
does Zig has termios similar tools in std?

1730743128
grayhatter!~grayhatte@user/grayhatter
hadronized: yes, some of them

1730743165
hadronized!~hadronize@2001:41d0:a:fe76::1
I want to use raw mode / alternate mode

1730743170
hadronized!~hadronize@2001:41d0:a:fe76::1
I wonder whether I should link against libc

1730743396
hadronized!~hadronize@2001:41d0:a:fe76::1
ah yeah I saw in std.c; nice

1730743779
grayhatter!~grayhatte@user/grayhatter
hadronized: you don't need to link libc

1730743795
grayhatter!~grayhatte@user/grayhatter
https://srctree.gr.ht/repo/hsh/blob/src/tty.zig

1730743908
grayhatter!~grayhatte@user/grayhatter
I'm tempted to ban the lounge IRC client for lying about it's UA

1730744400
hadronized!~hadronize@2001:41d0:a:fe76::1
ah nice, thanks!ç

1730744414
hadronized!~hadronize@2001:41d0:a:fe76::1
also, question about a pattern I see in my current code setting raw mode; if (stuff) |_| { return; }

1730744419
hadronized!~hadronize@2001:41d0:a:fe76::1
is there an idiom for that?

1730746041
grayhatter!~grayhatte@user/grayhatter
if (stuff != null) return;

1730746100
grayhatter!~grayhatte@user/grayhatter
I only use |_| when I know I'm going to use that capture eventually (or I use it nearby, and want the code to look similar)

1730746798
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
grayhatter what is ua

1730747000
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: ah yeah makes sense

1730747003
hadronized!~hadronize@2001:41d0:a:fe76::1
thanks

1730747183
grayhatter!~grayhatte@user/grayhatter
The_Buhs: user agent, it's claming it's both the facebook bot, and the twitter bot

1730747304
grayhatter!~grayhatte@user/grayhatter
hadronized: no problem mate :)

1730749440
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
ahh gotcha

1730751252
grayhatter!~grayhatte@user/grayhatter
how useful is a zero alloc API? I've just written some half finished code because I can't decide how much effort I want to exert attempting to make all the git internals zero alloc; Looking for opinions, and 'zig zen' if anyone has any :)

1730751315
ifreund!2940d10f8b@user/ifreund
grayhatter: a function that can't fail is always simpler to use for the caller than a function that can fail

1730751848
hadronized!~hadronize@2001:41d0:a:fe76::1
lately I’ve been wondering whether Rust’s complexity is incidental or accidental

1730751855
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s pretty hard to answer question

1730751896
ifreund!2940d10f8b@user/ifreund
hadronized: its a mix of both in my experience

1730751920
hadronized!~hadronize@2001:41d0:a:fe76::1
I have been very active in the Rust community, even wrote (implemented now) RFCs

1730751939
hadronized!~hadronize@2001:41d0:a:fe76::1
I do think that it solves very hard problems that no other languages solve, and thus it’s hard to say “it’s accidentally complex”

1730751947
ifreund!2940d10f8b@user/ifreund
rust macros are a good example of accidental complexity IMO

1730751952
hadronized!~hadronize@2001:41d0:a:fe76::1
for instance, the move semantics / borrowing is incredibly useful

1730751965
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, I agree for macro_rules and procedural macros

1730751968
hadronized!~hadronize@2001:41d0:a:fe76::1
comptime is far better

1730751974
hadronized!~hadronize@2001:41d0:a:fe76::1
I have no problem admitting that :)

1730751988
hadronized!~hadronize@2001:41d0:a:fe76::1
sometimes I feel like Zig + ownership semantics would be truly amazing

1730752002
hadronized!~hadronize@2001:41d0:a:fe76::1
like a way to annotate a type with a “it’s owned” vs. “it’s borrowed”

1730752018
grayhatter!~grayhatte@user/grayhatter
hadronized: one of the zen of rust is don't trust the developer, that means it's intentional... the complexity is trying to enable everything, including the kitchen sink, but with safety not just added, but mandatory. 

1730752039
ifreund!2940d10f8b@user/ifreund
I wish thephd's work towards comptimey stuff for rust didn't get ignored/blocked

1730752049
hadronized!~hadronize@2001:41d0:a:fe76::1
blocked?

1730752054
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: I’m not sure to follow you there

1730752063
grayhatter!~grayhatte@user/grayhatter
the complexity comes from the requirement added of "you need to do this, because this is provably safe"

1730752080
ifreund!2940d10f8b@user/ifreund
iirc something about him getting effectively deinvited from a conference or some such drama

1730752102
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: yeah but that makes sense

1730752111
ifreund!2940d10f8b@user/ifreund
not something I know much about though

1730752130
hadronized!~hadronize@2001:41d0:a:fe76::1
you can say it’s annoying in some cases, but there are many valid use cases for that mandatory safety

1730752141
hadronized!~hadronize@2001:41d0:a:fe76::1
ifreund: oooh I remember that yeah

1730752170
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: honestly, I’m starting to learn Zig (not completely sold on moving on from Rust) because I have some issues with the direction Rust is taking

1730752190
hadronized!~hadronize@2001:41d0:a:fe76::1
and some datatypes are insanely hard to implement correctly in Rust without sacrificing on performance

1730752200
hadronized!~hadronize@2001:41d0:a:fe76::1
for instance, mutually-referenced data is a pain in the bread

1730752221
hadronized!~hadronize@2001:41d0:a:fe76::1
I think Zig with UAF detection + ownership model -> I could move completely

1730752250
ifreund!2940d10f8b@user/ifreund
In my experience rust encourages much higher levels of abstraction than languages like Zig or Lua, and layers on layets of abstraction are a common source of accidental complexity

1730752264
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, it’s true too

1730752278
hadronized!~hadronize@2001:41d0:a:fe76::1
something that scares a bit too is the “RiiR” thing

1730752288
hadronized!~hadronize@2001:41d0:a:fe76::1
instead of embracing the “systems environment”

1730752302
hadronized!~hadronize@2001:41d0:a:fe76::1
Rust can compile with libc etc. but then you can’t really ship a Rust library

1730752305
grayhatter!~grayhatte@user/grayhatter
ifreund: IMO thephd is a **titan** on par with many admirable bdfls. It's frustrating to see him disrespected. But one of the best memes I've seen came out of it. Someone called him a 'diversity hire'. Which is one of the funniest "you're telling on yourself" moments I've even seen! That'd be like calling Ken Thompson, Raymon Chen, Larry Wall, a "diversity hire" LMAO

1730752309
hadronized!~hadronize@2001:41d0:a:fe76::1
it doesn’t have a stable ABI, etc. etc.

1730752323
hadronized!~hadronize@2001:41d0:a:fe76::1
(unless you accept to just export ABI C extern functions, which is not what we usually do in Rust)

1730752351
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: I don’t even get the meme

1730752378
companion_cube!~simon@user/meow/companion-cube:68572
grayhatter: ngl, "diversity hire" is racist BS

1730752426
companion_cube!~simon@user/meow/companion-cube:68572
and yeah thephd is a giant of patience and perseverance, at least

1730752433
grayhatter!~grayhatte@user/grayhatter
you can google for "telling on yourself", for more context, but it's when you say something that tells more about you, than it does about the topic you're trying to talk about.

1730752501
grayhatter!~grayhatte@user/grayhatter
companion_cube: it absoultely is; but thephd is one of the best and smartest we have in this industry. I've yet to meet anyone that would saying anything negative about him other than racists. 

1730752607
companion_cube!~simon@user/meow/companion-cube:68572
dtolnay 😬

1730752616
companion_cube!~simon@user/meow/companion-cube:68572
apparently…

1730752745
grayhatter!~grayhatte@user/grayhatter
hadronized: I have to defer a bunch of my thoughts about rust, and it's goals, because of the strict moratorium on negative comments about non-zig langs, (which is one thing that makes this channel enjoyable)  But, the reason rust makes me mad, and which zig has rekindled my love of just writing code again is the theme between the two. Rust reason to exists, is it wants to make it impossible to write

1730752747
grayhatter!~grayhatte@user/grayhatter
safety bugs. Where zig want's to make it easier to write good code. 

1730752810
hadronized!~hadronize@2001:41d0:a:fe76::1
I like that one of thinking

1730752812
grayhatter!~grayhatte@user/grayhatter
I like that the "annoying parts" of zig, are things that just make my code better.

1730752814
hadronized!~hadronize@2001:41d0:a:fe76::1
way*

1730752869
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, the only issue I see with that is that working in a company where the code maintainability / quality is not really the most important thing (i.e. bringing value™), “good code” is a concept that quickly crumbles

1730752873
grayhatter!~grayhatte@user/grayhatter
rust is perfectly respectable language, if you ignore everything else about rust that's not *the language*

1730752878
hadronized!~hadronize@2001:41d0:a:fe76::1
and leads to people slowing burning out

1730752906
hadronized!~hadronize@2001:41d0:a:fe76::1
Rust is also going into a direction that makes me a bit mad

1730752909
hadronized!~hadronize@2001:41d0:a:fe76::1
it started with async/await

1730752919
hadronized!~hadronize@2001:41d0:a:fe76::1
now they are adding this use<> horror (get stabilized lately)

1730752931
grayhatter!~grayhatte@user/grayhatter
hadronized: I 100% agree with that... but IMO, that's a cultural issue, not a technical one. And it's almost always a mistake to solve a cultural problem with a technical solution

1730752965
companion_cube!~simon@user/meow/companion-cube:68572
the async part is justified by the desire to use rust for networking services afaict

1730752966
hadronized!~hadronize@2001:41d0:a:fe76::1
I think it’s trying to force things bottom up, yes

1730752967
grayhatter!~grayhatte@user/grayhatter
I'm actually curious to see what happens with async/await in Zig

1730752975
hadronized!~hadronize@2001:41d0:a:fe76::1
you want top down, and I’m interested to see how that would happen

1730752982
grayhatter!~grayhatte@user/grayhatter
I'm hopeful, it gets deleted, but I totally understand if it never does

1730752983
companion_cube!~simon@user/meow/companion-cube:68572
it's just unfortunate that that's a really hard problem

1730752989
hadronized!~hadronize@2001:41d0:a:fe76::1
companion_cube: I maintain kak-tree-sitter and started with tokio

1730753001
hadronized!~hadronize@2001:41d0:a:fe76::1
I eventually ditched it and switched to mio, which I guess, would be very similar in Zig with hindsight

1730753011
hadronized!~hadronize@2001:41d0:a:fe76::1
(I just maintain maps of tokens and poll-like functions)

1730753017
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Don't hide the event loop

1730753033
companion_cube!~simon@user/meow/companion-cube:68572
I think that's a lost cause

1730753037
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Also...threads are fast

1730753041
hadronized!~hadronize@2001:41d0:a:fe76::1
tokio is incredibly good at what it does, but Rust and the pinned futures thing is pretty bad to think about

1730753041
companion_cube!~simon@user/meow/companion-cube:68572
people want direct style

1730753052
hadronized!~hadronize@2001:41d0:a:fe76::1
direct style?

1730753072
grayhatter!~grayhatte@user/grayhatter
hadronized: if you worked on rust RFCs, and are more interested in zig, and might want to contribute... I'd be stoked if you spent some time looking into pool and iovec in the stdlib

1730753082
companion_cube!~simon@user/meow/companion-cube:68572
writing loops etc instead of callbacks in the event loop

1730753109
grayhatter!~grayhatte@user/grayhatter
it's very rough around the edges, and while I haven't looked into it myself. I strongly suspect it could benifit deeply from someone taking an interest in both, or either

1730753117
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: maybe

1730753130
hadronized!~hadronize@2001:41d0:a:fe76::1
last time I wanted to do something for Zig was to introduce linear types

1730753134
grayhatter!~grayhatte@user/grayhatter
s/pool/poll

1730753145
hadronized!~hadronize@2001:41d0:a:fe76::1
but I think it’s unlikely to happen

1730753147
Earnestly!~earnest@user/earnestly
(Ada)

1730753156
hadronized!~hadronize@2001:41d0:a:fe76::1
Earnestly: same idea, yes, but more like ATS

1730753181
hadronized!~hadronize@2001:41d0:a:fe76::1
(without all the praxi things and stuff, of course, just linear types)

1730753196
hadronized!~hadronize@2001:41d0:a:fe76::1
it would be immensely useful to solve the ownership problem, for instance, and also, it’s not only about allocations

1730753213
hadronized!~hadronize@2001:41d0:a:fe76::1
a database connection is a linear value, an opened file is a linear value, etc.

1730753233
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: that makes me think, is there something akind to condvar in Zig?

1730753237
hadronized!~hadronize@2001:41d0:a:fe76::1
(and if so… queues? :))

1730753243
companion_cube!~simon@user/meow/companion-cube:68572
just make your own language :p

1730753259
hadronized!~hadronize@2001:41d0:a:fe76::1
companion_cube: I actually thought about it and even started! I have the lexer and part of the parser already!

1730753262
companion_cube!~simon@user/meow/companion-cube:68572
if you want sophisticated types it's probably the best way

1730753275
companion_cube!~simon@user/meow/companion-cube:68572
do like carp, with sexprs

1730753276
hadronized!~hadronize@2001:41d0:a:fe76::1
but then I realized it would take me forever while I actually want to work on my other projects more :P

1730753284
companion_cube!~simon@user/meow/companion-cube:68572
heh fair enough

1730753293
hadronized!~hadronize@2001:41d0:a:fe76::1
ah it’s Thread.Condition, nice

1730753339
Earnestly!~earnest@user/earnestly
But it's not really linear though, even if you make it look like it in your languge's abstraction. It's this reason proven systems still have major bugs, like assuming network packets are always complete. Your language has to be loose enough to deal with these issues, even if it amounts to the equivalent of a bodge wire

1730753386
hadronized!~hadronize@2001:41d0:a:fe76::1
then don’t call it linear types

1730753396
hadronized!~hadronize@2001:41d0:a:fe76::1
but something like Rust’s type system is “affine”

1730753397
Earnestly!~earnest@user/earnestly
And zig is quite nice, if all it does is take C, turbo-charge the "x-macro" (i.e. comptime) and remove null pointers

1730753410
hadronized!~hadronize@2001:41d0:a:fe76::1
you could have Zig type system allows for some form of “linearity”

1730753422
companion_cube!~simon@user/meow/companion-cube:68572
anyone here ever discusses Odin? 🙃

1730753428
Earnestly!~earnest@user/earnestly
Yeah but it would be implementation details that just improve it

1730753435
hadronized!~hadronize@2001:41d0:a:fe76::1
where a type annotated with, I don’t know, @ in front of it, would require a function with the same annotation to deal with it

1730753436
Earnestly!~earnest@user/earnestly
transparently*

1730753460
Earnestly!~earnest@user/earnestly
This is why Ada's SPARK is so nice, you have "gradual" proof by slowly constraining the definition of your state

1730753464
hadronized!~hadronize@2001:41d0:a:fe76::1
Earnestly: I agree, but why stop here where more could be solved without adding too much complexity?

1730753474
Earnestly!~earnest@user/earnestly
if

1730753514
Earnestly!~earnest@user/earnestly
The successful parts of NASA/JPL had Holztmann, still using C, because "better the devil you know"

1730753538
Earnestly!~earnest@user/earnestly
(Iow, the language doesn't really matter, that much)

1730753573
Earnestly!~earnest@user/earnestly
Curiosity was mostly handcoded in python which then generated C, with some bits in a heavily limited C++

1730753606
grayhatter!~grayhatte@user/grayhatter
zig question: I have a function look up method (URI routing/router), and would like to pass/return a curried function. Is there a Zig way to go about this, other than passing a generic anyopaque, and typecasting within the function itself?

1730753672
hadronized!~hadronize@2001:41d0:a:fe76::1
Zig doesn’t have closures, does it?

1730753721
grayhatter!~grayhatte@user/grayhatter
hadronized: it does not, but that's the way I was thinking. returning a partial, that could then be "completed" and called

1730753815
grayhatter!~grayhatte@user/grayhatter
I think the "correct" way would be to return a struct, and let the type system build it for me at comptime, but I'm trying very hard to reduce the boilerplate for the library

1730754305
coleman!~coleman@static.87.86.161.5.clients.your-server.de
What do you want the currying to look like from the caller's perspective? It's hard to picture in Zig

1730754341
coleman!~coleman@static.87.86.161.5.clients.your-server.de
like chained methods? do(1).do(2).do(3)

1730754925
andrewrk!~andrewrk@mail.ziglang.org
generally doesn't work because you need to handle errors

