1718933086
noam!81879d1ffa@2a03:6000:1812:100::dfc
zig stage1 has been compiling for over an hour for me >_<

1718935068
andrewrk!~andrewrk@mail.ziglang.org
what are you running it on, paper & pencil?

1718935121
tdback!~tdback@user/tdback
braewoods: thanks for the input! someone else mentioned that i should try using an arena allocator to free it all once the request is done

1718935835
noam!81879d1ffa@2a03:6000:1812:100::dfc
andrewrk: Plan 9 on the MNT Reform :P

1718935924
noam!81879d1ffa@2a03:6000:1812:100::dfc
iMX8 board, soooo 4 Cortex A-53s :P

1718935940
noam!81879d1ffa@2a03:6000:1812:100::dfc
I'm mostly just curious if it will even work at this point lmao

1718935953
noam!81879d1ffa@2a03:6000:1812:100::dfc
It's been almost two hours and I still just have an empty stdout lol

1718936270
noam!81879d1ffa@2a03:6000:1812:100::dfc
I'm going to leave it overnight and, if it's still going, hack into the process and grab stack traces lmao

1718936780
noam!81879d1ffa@2a03:6000:1812:100::dfc
:O

1718936787
noam!81879d1ffa@2a03:6000:1812:100::dfc
Memory usage is going up for the first time in ninety minutes!! :D

1718936809
noam!81879d1ffa@2a03:6000:1812:100::dfc
If I don't get oomkilled, this might actually finish by midnight lmao

1718938479
noam!81879d1ffa@2a03:6000:1812:100::dfc
oomkilled

1718938790
noam!81879d1ffa@2a03:6000:1812:100::dfc
after 8480s, or... 2.5 hours?

1718938793
noam!81879d1ffa@2a03:6000:1812:100::dfc
fuuuuuuudge

1718945036
torque!~tachyon@user/torque
big airhorn noises and other comedy sounds blaring as I holler sounds like you need to... download more ram

1718950423
noam!81879d1ffa@2a03:6000:1812:100::dfc
torque: congrats on being the second person to make that joke :P

1718993304
freshcoffee!~fresh@user/freshcoffee
you sonofa! `const sigabrtmask: linux.sigset_t = [_]u32{0} ** 31 ++ [_]u32{1 << (SIG.ABRT - 1)};`

1718993368
freshcoffee!~fresh@user/freshcoffee
my replacement: `sigabrtmask.set(.ABRT)`

1718993381
freshcoffee!~fresh@user/freshcoffee
my _wanted_ replacement

1719003096
alguien!~alguien@user/alguien
heya. What's the point of the continue expression? Can't you just put that expression in the body of the loop, on the bottom?

1719003146
ifreund!2940d10f8b@user/ifreund
alguien: its run after any continue statement in the loop body

1719003236
alguien!~alguien@user/alguien
Ah, so like a defer for iterations. I avoid using continue statements, that's probably the reason why that hasn't occurred to me.

1719003261
alguien!~alguien@user/alguien
What's wrong with a for loop though?

1719003296
alguien!~alguien@user/alguien
eg. for (; condition; continue expression)

1719003317
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
The for loop in zig iterates over the members of arrays,.. in zig

1719003414
alguien!~alguien@user/alguien
in other words it's really a for-each

1719003436
alguien!~alguien@user/alguien
ok thanks. If I have any other questions, can I post them here? :)

1719003438
tranzystorekk!tranzystor@2607:5300:60:8796::108
we don't say that term here xp

1719003794
alguien!~alguien@user/alguien
tranzystorekk, oh? Why is that?

1719003824
tranzystorekk!tranzystor@2607:5300:60:8796::108
haha no im just kidding

1719003835
tranzystorekk!tranzystor@2607:5300:60:8796::108
but it brings flashbacks from java/c++

1719003851
andrewrk!~andrewrk@mail.ziglang.org
alguien: welcome to IRC! anything related to zig or even systems programming and computer science is on topic. typically on IRC you do not need to ask to ask. just ask

1719003937
alguien!~alguien@user/alguien
thanks. I'm not new to IRC, I was really just agreeability-signaling XD

1719004689
andrewrk!~andrewrk@mail.ziglang.org
yep that's a common sentiment

1719004729
alguien!~alguien@user/alguien
What is the reason for tuple inDexing being Done with @"i" insteaD of [i]?

1719004772
andrewrk!~andrewrk@mail.ziglang.org
it is done with [i] however tuples are also structs for the purposes of reflection

1719004989
alguien!~alguien@user/alguien
andrewrk, I reckon .1 would be invalid syntax. Is @"1" some sort of compile-time macro? If so, which is more performant, it or [1]?

1719005105
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/documentation/0.13.0/#Identifiers

1719005591
alguien!~alguien@user/alguien
So it's built-in syntax. Are they equally performant?

1719005729
sm2n!ae95cb1267@user/sm2n
they should be since they are both statically known field offsets

1719006121
alguien!~alguien@user/alguien
Ooh inline for. Although.. a C compiler would itself unroll loops as an optimization, wouldn't it? So does that mean zig's compiler wouldn't?

1719006468
tranzystorekk!tranzystor@2607:5300:60:8796::108
it's not about optimization but about compile time

1719006476
noam!81879d1ffa@2a03:6000:1812:100::dfc
alguien: it's about saying what you intend

1719006506
noam!81879d1ffa@2a03:6000:1812:100::dfc
The Zig compiler _may_ unroll loops explicitly. It _must_ unroll an `inline` loop

1719006512
alguien!~alguien@user/alguien
noam, ok

1719006519
noam!81879d1ffa@2a03:6000:1812:100::dfc
that also has Implications!

1719006528
noam!81879d1ffa@2a03:6000:1812:100::dfc
For instance, since the loop _must_ be unrolled, it cannot loop forever!

1719006601
noam!81879d1ffa@2a03:6000:1812:100::dfc
also: https://ziglang.org/documentation/master/#inline-for :)

1719006603
alguien!~alguien@user/alguien
Interesting

1719006605
alguien!~alguien@user/alguien
Interesting language. I don't like that the memory is managed manually though.

1719006608
noam!81879d1ffa@2a03:6000:1812:100::dfc
> This causes the loop to be unrolled, which allows the code to do some things which only work at compile time, such as use types as first class values.

1719006655
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
alguien: manual memory management is one of the major upsides of this languages and what allows it to be this performant

1719006665
alguien!~alguien@user/alguien
Oh so reflection is comptime only. So basically generics?

1719006704
alguien!~alguien@user/alguien
Palanix, Doesn't have to be an either-or. Also, doesn't have to have GC if you ask me, but at least do ARC

1719006736
tranzystorekk!tranzystor@2607:5300:60:8796::108
considering zig is dubbed "the modern c" manual memory is a given :)

1719006743
alguien!~alguien@user/alguien
And from the extremely limited stuff I've seen, people tend to defer-free right after allocation

1719006775
alguien!~alguien@user/alguien
tranzystorekk, ARC is a good middle-ground, but again, you can theoretically have your cake and eat it too

1719006781
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
Zig has some synsugar to make memory management easier (like defer) but it wouldn't do any gc

1719006914
sm2n!ae95cb1267@user/sm2n
zig has a gc, just only at compile time

1719006954
noam!81879d1ffa@2a03:6000:1812:100::dfc
nothing prevents implementation of a GC

1719006958
alguien!~alguien@user/alguien
Palanix, here's a motivating paragraph for ya if you will: https://docs.elementscompiler.com/Concepts/ARCvsGC/#automatic-reference-counting

1719007026
alguien!~alguien@user/alguien
Basically, ARC would add frees for you, where they need to go

1719007034
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
zig is very explicit and aims to have no hidden control flow

1719007035
noam!81879d1ffa@2a03:6000:1812:100::dfc
In fact, passing an allocator around makes it pretty easy to implement one, in principle! 

1719007058
noam!81879d1ffa@2a03:6000:1812:100::dfc
A GCAllocator would not be terribly challenging, at least not for a proof-of-concept; working out all the edge cases could be tricky

1719007064
alguien!~alguien@user/alguien
noam, over my head probably

1719007078
noam!81879d1ffa@2a03:6000:1812:100::dfc
You might be surprised ;)

1719007081
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
"freeing" stuff in zig doesn't even make any sense, because the compiler would have to know from _which_ allocator you have to free

1719007091
alguien!~alguien@user/alguien
And I really don't need GC. I understand the pitfalls

1719007103
noam!81879d1ffa@2a03:6000:1812:100::dfc
I thought that for a long time, but was able to hack together a GC for C in a matter of hours :P

1719007104
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
arc just doesn't even work conceptually because zig doesn't have a single allocator

1719007115
noam!81879d1ffa@2a03:6000:1812:100::dfc
Basic mark-and-sweep GC is shockingly simple

1719007129
alguien!~alguien@user/alguien
Palanix, I mean as long as you can free, so can a machine, right?

1719007138
noam!81879d1ffa@2a03:6000:1812:100::dfc
alguien: not necessarily

1719007144
noam!81879d1ffa@2a03:6000:1812:100::dfc
What function would you call to free?

1719007149
noam!81879d1ffa@2a03:6000:1812:100::dfc
For malloc(), the answer is free()

1719007158
alguien!~alguien@user/alguien
Yeah?

1719007159
noam!81879d1ffa@2a03:6000:1812:100::dfc
For [f]open(), the answer is [f]close()

1719007165
noam!81879d1ffa@2a03:6000:1812:100::dfc
for mmap, the answer is munmap

1719007173
noam!81879d1ffa@2a03:6000:1812:100::dfc
Knowing that memory is not referenced does not tell you where it came from

1719007191
noam!81879d1ffa@2a03:6000:1812:100::dfc
and in principle, it's possible to kill the allocator!

1719007214
noam!81879d1ffa@2a03:6000:1812:100::dfc
var foo = makeSomeAllocator(); var bar = foo.alloc(...); // drop the reference to foo

1719007228
noam!81879d1ffa@2a03:6000:1812:100::dfc
Though, in that case, the programmer can't free either, not just the machine can't :P

1719007267
alguien!~alguien@user/alguien
noam, if you manually allocate, you would manually free

1719007287
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
from what allocator?

1719007303
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
What if you have a nested allocator inside another? What would you do then?

1719007328
noam!81879d1ffa@2a03:6000:1812:100::dfc
alguien: I think what you're missing is that memory in Zig doesn't come from one bucket

1719007337
noam!81879d1ffa@2a03:6000:1812:100::dfc
it's not like, say, C, where you generally have the heap and the stack

1719007346
noam!81879d1ffa@2a03:6000:1812:100::dfc
you can have _multiple heaps_ in zig

1719007352
noam!81879d1ffa@2a03:6000:1812:100::dfc
and each one has its own free() function

1719007363
noam!81879d1ffa@2a03:6000:1812:100::dfc
which means that you need to know which heap it belongs to!

1719007378
noam!81879d1ffa@2a03:6000:1812:100::dfc
or, let's say I have a disk-backed allocator!

1719007399
noam!81879d1ffa@2a03:6000:1812:100::dfc
Freeing that memory doesn't just mean returning it to the OS, it can mean writing to the file on disk as well!

1719007415
noam!81879d1ffa@2a03:6000:1812:100::dfc
you can't just call free() on it, you need to know that it's from the disk-backed allocator so _it_ can be told to clean up

1719007424
noam!81879d1ffa@2a03:6000:1812:100::dfc
In principle, though, that's possible?

1719007433
noam!81879d1ffa@2a03:6000:1812:100::dfc
> the compiler would have to know from _which_ allocator you have to free

1719007438
alguien!~alguien@user/alguien
I feel like you're arguing against the concept of ARC, when it is proven in Objective-C and Swift. For the supposed differences between the latter and Zig, add some more record keeping

1719007442
noam!81879d1ffa@2a03:6000:1812:100::dfc
Palanix: I think that's totally possible, in principle!

1719007470
noam!81879d1ffa@2a03:6000:1812:100::dfc
alguien: nah, I'm more saying that "for zig, ARC is more complicated", not "for Zig, ARC is impossible" :)

1719007477
alguien!~alguien@user/alguien
But as I said, you can still keep some things manual

1719007483
alguien!~alguien@user/alguien
Just make the general case automatic

1719007500
alguien!~alguien@user/alguien
All those defer-frees that follow allocs, for example.

1719007509
noam!81879d1ffa@2a03:6000:1812:100::dfc
In principle, there could even just be a std.heap.ARCAllocator

1719007520
noam!81879d1ffa@2a03:6000:1812:100::dfc
and the compiler would only concern itself with what gets allocated from that

1719007535
alguien!~alguien@user/alguien
Sure

1719007638
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
That wouldn't be possible because arc requires code outside of the functions of such an ARCallocator

1719007658
alguien!~alguien@user/alguien
Palanix, it would require language-level support, yes

1719007664
noam!81879d1ffa@2a03:6000:1812:100::dfc
Palanix: How so? compiler can detect when an object hits zero references and explicitly invoke the static instance of that allocator, no?

1719007676
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
the compiler can, but not the stdlib

1719007685
noam!81879d1ffa@2a03:6000:1812:100::dfc
Ah, okay, sorry if I was unclear

1719007692
noam!81879d1ffa@2a03:6000:1812:100::dfc
I was saying that such an allocator could exist with compiler assistance

1719007702
Palanix!~palanix@2a02:3100:5e48:ad00:8a61:44e8:38dc:bfa9
it would be hidden control flow which the language aims to avoid

1719007704
noam!81879d1ffa@2a03:6000:1812:100::dfc
Heck, actually, you could generalize that

1719007705
alguien!~alguien@user/alguien
👍

1719007707
noam!81879d1ffa@2a03:6000:1812:100::dfc
Palanix: Oh, I agree :)

1719007727
alguien!~alguien@user/alguien
Glad we're all agreed. Can't wait for the next version of Zig with ARC ;)

1719007729
noam!81879d1ffa@2a03:6000:1812:100::dfc
On the philosophy side - and in terms of how complex the language already is - I don't think ARC is a conceptually good fit for Zig

1719007743
alguien!~alguien@user/alguien
noam, pls

1719007744
noam!81879d1ffa@2a03:6000:1812:100::dfc
I'm more saying that it's technically _possible_ :P

1719007785
noam!81879d1ffa@2a03:6000:1812:100::dfc
You could have a builtin which basically says "This allocator is safe to use with ARC. Track references to objects allocated using it, and invoke this allocator's free method when that object goes out of scope"

1719007801
noam!81879d1ffa@2a03:6000:1812:100::dfc
You'd even then be able to just apply this to the existing allocator

1719007839
alguien!~alguien@user/alguien
existing allocator?

1719007841
noam!81879d1ffa@2a03:6000:1812:100::dfc
Something like @ARC(allocator), which yields a new allocator, which applies ARC to allocations made using the underlying allocator, invoking the underlying allocator to free memory when needed, and passing through explicit free()s as wqell

1719007848
noam!81879d1ffa@2a03:6000:1812:100::dfc
alguien: the heap allocator

1719007997
noam!81879d1ffa@2a03:6000:1812:100::dfc
std.heap.GeneralPurposeAllocator

1719008003
noam!81879d1ffa@2a03:6000:1812:100::dfc
or you could apply it to malloc/free!

1719008007
noam!81879d1ffa@2a03:6000:1812:100::dfc
(when linking libc)

1719008035
noam!81879d1ffa@2a03:6000:1812:100::dfc
hell, you could apply it to files if the compiler builtin was designed correctly

1719008167
alguien!~alguien@user/alguien
"or you could apply it to malloc/free!" - whoa, whoa, now I feel like I should take the role of the skeptic

1719008199
alguien!~alguien@user/alguien
But idk anything, so I can't

1719008207
alguien!~alguien@user/alguien
*about Zig's allocators

1719008215
noam!81879d1ffa@2a03:6000:1812:100::dfc
https://ziglang.org/documentation/master/std/#std.heap.c_allocator

1719008233
noam!81879d1ffa@2a03:6000:1812:100::dfc
Given a builtin which applies ARC to an allocator, it'd just be const ARCedMalloc = @ARC(std.heap.c_allocator);

1719008236
noam!81879d1ffa@2a03:6000:1812:100::dfc
and then link with libc

1719008407
noam!81879d1ffa@2a03:6000:1812:100::dfc
If you don't care about performance, you could probably even implement this _mostly_ in userspace, and then lightly patch the compiler to invoke some comptime functions, I think...

1719008522
noam!81879d1ffa@2a03:6000:1812:100::dfc
You basically just need to yield an allocator whose alloc function maps each returned object to a reference count and then returns it, which is best done by just allocating an extra u64 next to each object and using that. Then, have the compiler invoke @ARC(foo).ref(object) when a new reference is created and @ARC(foo).deref(object) when it goes out of scope, and the implementation of those is dead-sim

1719008525
noam!81879d1ffa@2a03:6000:1812:100::dfc
ple*

1719008545
noam!81879d1ffa@2a03:6000:1812:100::dfc
the deref would just invoke .free() on the underlying object when the refcount hits zero of course

1719008554
noam!81879d1ffa@2a03:6000:1812:100::dfc
and actually the performance would probably be fine

1719012194
torque!~tachyon@user/torque
in practice, the arena allocator is extremely useful and makes doing memory management very straightforward in most cases

1719012256
torque!~tachyon@user/torque
reference counting is not trivial because you have to avoid cycles, which means you have to introduce the concept of strong/weak references which adds cognitive overhead to a variety of things

1719013737
noam!81879d1ffa@2a03:6000:1812:100::dfc
Totally unrelated but oh my gosh the reference to zig in this is fantastic https://youtu.be/ieqsL5NkS6I

