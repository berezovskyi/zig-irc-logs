1735098527
ih8u!~Thunderbi@194.114.136.62
hello all

1735098540
ih8u!~Thunderbi@194.114.136.62
merry christmas

1735098676
ih8u!~Thunderbi@194.114.136.62
if anyone is around, i have some questions about slipping zig code into a build chain

1735106209
grayhatter!~grayhatte@user/grayhatter
ih8u: I assume no one is gonna voulenteer to help answer questions before they know what the questions are... you should just ask the questions you wanna ask

1735106240
grayhatter!~grayhatte@user/grayhatter
and then I assume you also gotta do a lot of extra hoping because that's a really rough name to have when you're asking others for help

1735107287
ih8u!~Thunderbi@194.114.136.62
grayhatter: doesn't seem to bother most people, but it seems you've already decided you don't like me

1735107306
ih8u!~Thunderbi@194.114.136.62
but you're right, i should just ask instead of asking to ask

1735107321
ih8u!~Thunderbi@194.114.136.62
just thought it worth being a bit extra polite since it's christmas and all

1735107381
ih8u!~Thunderbi@194.114.136.62
anyway, i'd like to see what it takes to use zig with kallistios, which is a dreamcast sdk with its own build chain

1735107406
ih8u!~Thunderbi@194.114.136.62
based on gcc

1735107538
grayhatter!~grayhatte@user/grayhatter
lol I haven't decided anything, just pointing out you've chosen a username that starts as hostile... which is generally considered bad form. Which I mention because of the dichotomy with your merry christmas

1735107607
grayhatter!~grayhatte@user/grayhatter
you'd need a zig compiler to output object code your existing toolchain could use. that's something the zig compiler, can do, but I have no idea how hard it would be to intergrate that into an existing toolchain

1735107682
grayhatter!~grayhatte@user/grayhatter
depending on how estoteric the kallistios flavor of gcc is, another option might be to switch the build system over to a build.zig, and have zig compile everything? I'm assuming it's normal enough c, or cxx code

1735107762
ih8u!~Thunderbi@194.114.136.62
feel free to swap is for "pussySl4y3r420" or whatever is acceptable

1735107779
ih8u!~Thunderbi@194.114.136.62
it's actually aimed at the registration system, not you

1735107868
ih8u!~Thunderbi@194.114.136.62
i guess if i have the object files, i can slot them into the makefile

1735107883
ih8u!~Thunderbi@194.114.136.62
i know very, very little about build systems &c

1735107954
ih8u!~Thunderbi@194.114.136.62
you should treat me as you would a child when explaining what would be required

1735108045
grayhatter!~grayhatte@user/grayhatter
if it's just using the standard makefile, you can have it call zig to compile the object code, and then you'd just have to provide the headers for C to compile, and then the linker should be able to do the rest

1735108118
ih8u!~Thunderbi@194.114.136.62
are object files not dependent on target platform?

1735108166
grayhatter!~grayhatte@user/grayhatter
they are, but zig can target most arch's, you'd just have to include that in the make file (it already has to for gcc)

1735108195
ih8u!~Thunderbi@194.114.136.62
this is a little more esoteric than usual, hence the custom build chain

1735108441
ih8u!~Thunderbi@194.114.136.62
thank you for your time, by the way

1735108865
grayhatter!~grayhatte@user/grayhatter
so, I can't tell what the dreamcast uses, a few sources say 32bit RISC, but it seems like the makefile for the repo uses arm7de, which yeah, arm is a reduced instruction set, but I don't normally see them used interchangably like this

1735108911
grayhatter!~grayhatte@user/grayhatter
this would be a good question for #dreamcastdev if that channel still exists

1735109109
ih8u!~Thunderbi@194.114.136.62
the arm is for the sound chip

1735109194
ih8u!~Thunderbi@194.114.136.62
sh4 is the cpu

1735109197
grayhatter!~grayhatte@user/grayhatter
yeah, I just found that

1735109244
grayhatter!~grayhatte@user/grayhatter
I doubt zig can compile to that arch natively, but it might be possible to rig something up

1735109263
grayhatter!~grayhatte@user/grayhatter
if gcc can compile it, likely llvm can, and if llvm can, zig can (I think)

1735109322
ih8u!~Thunderbi@194.114.136.62
well when you build the build chain, it creates its own gcc executable

1735109372
ih8u!~Thunderbi@194.114.136.62
i've already got the build chain and everything set up, i can compile and run all the example programs (c)

1735109391
ih8u!~Thunderbi@194.114.136.62
but i'm not especially fond of c, so i'm exploring other options

1735109424
ih8u!~Thunderbi@194.114.136.62
i thought zig might be somewhat painless to use, but i don't understand what's going on well enough to get it working myself

1735109587
grayhatter!~grayhatte@user/grayhatter
depending on how hard it was to get gcc to compile for the SH4, it might be easy enough to get the zig compiler to emit object code that the gcc can just link to

1735109649
ih8u!~Thunderbi@194.114.136.62
it was easy enough for me, since i just ran a build script

1735109653
ih8u!~Thunderbi@194.114.136.62
lol

1735109673
ih8u!~Thunderbi@194.114.136.62
but i guess i'd have to get down in the weeds to see what exactly they're doing

1735109681
grayhatter!~grayhatte@user/grayhatter
if you don't know what kinda threads to start pulling on, I'd probably find, and ask someone who understands what it took to get the gcc to compile, that'd tell you enough that someone who knows the zig compiler could tell you what to look at

1735109705
ih8u!~Thunderbi@194.114.136.62
i was sort of hoping it would be a little simpler that, but it makes sense

1735109735
ih8u!~Thunderbi@194.114.136.62
they're very helpful people, so i'll resume bugging them once the holidays are finished

1735109745
ih8u!~Thunderbi@194.114.136.62
in the meantime, i'll just suck it up and write c

1735109747
ih8u!~Thunderbi@194.114.136.62
ugh

1735109753
grayhatter!~grayhatte@user/grayhatter
for many thing, you can get lucky 

1735109755
ih8u!~Thunderbi@194.114.136.62
thank you for your time

1735109775
grayhatter!~grayhatte@user/grayhatter
game consoles do love their custom arch that most people can't otherwise get their hands on

1735109792
grayhatter!~grayhatte@user/grayhatter
often makes the fancy thing much harder

1735109834
ih8u!~Thunderbi@194.114.136.62
yeah, i was hoping the "seamless c interop" creed of zig would do all the heavy lifting in this case

1735109839
grayhatter!~grayhatte@user/grayhatter
C isn't that bad... could be worse, could be cxx, or it's derivatives :D

1735109843
ih8u!~Thunderbi@194.114.136.62
couldn't figure out how to get d working, either

1735109876
ih8u!~Thunderbi@194.114.136.62
basically i just want to avoid c, cpp, or rust

1735109889
ih8u!~Thunderbi@194.114.136.62
i did get mruby working, which is really cool

1735109969
lolok!~lolok@user/lolok
i thought superh was open now and therefore well supported but thats just hearsay and i missed the start of this chat

1735110583
ih8u!~Thunderbi@194.114.136.62
just trying to figure out how to use zig for dreamcast dev via kallistios

1735111022
torque!~tachyon@user/torque
I don't think llvm can target the sh4 architecture, so you're probably going to have a hard time

1735111063
ih8u!~Thunderbi@194.114.136.62
oh, i didn't think of that

1735111077
ih8u!~Thunderbi@194.114.136.62
zig is llvm-only, right?

1735111156
torque!~tachyon@user/torque
technically no; there are also native machine code backends for the compiler but none of them are mature enough yet for general use

1735111162
torque!~tachyon@user/torque
practically, yes

1735111220
torque!~tachyon@user/torque
but also the native backends that are currently being worked on are for popular architectures, like x86_64

1735111304
torque!~tachyon@user/torque
you can, generally, compile zig to c code though

1735111332
torque!~tachyon@user/torque
so you could write zig, have it emit C and then have your dreamcast sdk compile that resulting C code

1735111642
torque!~tachyon@user/torque
for example `zig build-obj -ofmt=c file.zig` will produce `file.c`, which can then be compiled by a c compiler

1735111646
grayhatter!~grayhatte@user/grayhatter
zig can emit llvm IR right?

1735111659
grayhatter!~grayhatte@user/grayhatter
can gcc not compile that? that sounds like something gcc *could* do

1735111687
grayhatter!~grayhatte@user/grayhatter
zig can emit c code?? TIL

1735111739
torque!~tachyon@user/torque
I would not expect gcc to work with llvm ir, but I do not actually know

1735111749
torque!~tachyon@user/torque
yes, this is how the compiler is bootstrapped

1735111792
ih8u!~Thunderbi@194.114.136.62
ooh, that sound promising

1735111797
ih8u!~Thunderbi@194.114.136.62
i'm gonna give it a try

1735112202
ih8u!~Thunderbi@194.114.136.62
uhh, i can't import stdio.h

1735112205
ih8u!~Thunderbi@194.114.136.62
lol

1735112278
ih8u!~Thunderbi@194.114.136.62
i don't understand how that's possibleâ€¦

1735112431
ih8u!~Thunderbi@194.114.136.62
`test.zig:1:11: note: libc headers not available; compilation does not link against libc`

1735112438
ih8u!~Thunderbi@194.114.136.62
what am i supposed to do with this?

1735112686
torque!~tachyon@user/torque
link libc?

1735112699
torque!~tachyon@user/torque
no clue what you're doing, so I can't help

1735112927
ih8u!~Thunderbi@194.114.136.62
man, it's been a long time since i looked at zig

1735112938
ih8u!~Thunderbi@194.114.136.62
.{}

1735112956
ih8u!~Thunderbi@194.114.136.62
i love totally unsearchable syntax

1735112962
ih8u!~Thunderbi@194.114.136.62
i can't remember what purpose that serves

1735113051
ih8u!~Thunderbi@194.114.136.62
this language is a lot weirder than i remember

1735113602
ih8u!~Thunderbi@194.114.136.62
well, if i link libc with -lc, now no other cimports work

1735113666
ih8u!~Thunderbi@194.114.136.62
and then it fails anyway because it can't find zig.h

1735113670
ih8u!~Thunderbi@194.114.136.62
and i give up

1735113672
ih8u!~Thunderbi@194.114.136.62
this is not easier

1735113702
ih8u!~Thunderbi@194.114.136.62
ugh, c will never go away

1735113708
ih8u!~Thunderbi@194.114.136.62
why does everyone write everything in c?

1735114986
lolok!~lolok@user/lolok
its inertia from fortran compilers being too expensive in the 1970s

1735124747
ih8u!~Thunderbi@194.114.136.62
expected â€˜struct Cube *â€™ but argument is of type â€˜struct Cube *â€™

1735124753
ih8u!~Thunderbi@194.114.136.62
wtf kind of error message is that?

1735124758
ih8u!~Thunderbi@194.114.136.62
god i hate c

1735129263
barusu!~barusu@104.46.44.175
I am planning to build a language server in Zig. I will need to run some python module calls since the framework only exposes that

1735129284
barusu!~barusu@104.46.44.175
Do we have something in Zig for doing this? Something like PyO3 from Rust

1735150926
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Comptime is confusing

1735151896
grayhatter!~grayhatte@user/grayhatter
bwbuhse: only when you try to reason about it like runtime code; it's not the same at all

1735151970
grayhatter!~grayhatte@user/grayhatter
comptime having the same syntax of zig is misleading if you think of it like zig code; IMO it's better to think of it as an expression of how you want the compiler to generate the asm, and not of how you want the code to behave

1735152059
grayhatter!~grayhatte@user/grayhatter
when you're in comptime, you're not writing code for your app's runtime control flow, everything you write is just generating "extra code" and that extra code is what controls program flow

1735152082
grayhatter!~grayhatte@user/grayhatter
tl:dr think of comptime as an extra (thick) layer of abstraction from your real code

1735152100
grayhatter!~grayhatte@user/grayhatter
bwbuhse: did you have a more specific question?

1735152444
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
grayhatter: thanks, that honestly does help a bit! Not really, at least right now. Iâ€™m trying to write a simple-ish CLI arg parsing lib since I donâ€™t love any of the existing ones and I think Iâ€™m going to need to use comptime to handle setting what the args can be.

1735152478
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
but now Iâ€™m off to do Christmas stuff so ðŸŽ„ðŸŽ… Iâ€™m sure Iâ€™ll have specific questions if I keep up with this project though

