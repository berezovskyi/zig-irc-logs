1717073409
tranzystorekk!tranzystor@2607:5300:60:8796::108
i like the progress bar demo, but is there a way for zig to print a more straightforward list of actions it did, and i a more "raw log" fassion, like e.g. cargo does?

1717080987
companion_cube!~simon@user/meow/companion-cube:68572
https://zig.news/trashbin007/developing-skills-for-leadership-roles-in-the-oil-and-gas-industry-264a what in the flying spam is that

1717081075
gpanders!5ac6a0797e@user/gpanders
fitting username

1717081130
tranzystorekk!tranzystor@2607:5300:60:8796::108
lmao

1717081445
fuel!~fuel@pcbox/developer/fuel
just reported it for spam

1717088280
andrewrk!~andrewrk@mail.ziglang.org
tranzystorekk: perhaps  --summary all 

1717100410
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Hmm, is there some way Zig (or is there a competent linter out there) that could enable an error for every potentially-overflowing arithmetic op?

1717100413
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
I basically ALWAYS want well-defined modular/saturating arithmetic, or I otherwise want to have checked arithmetic with error-handling. I never want to have a potential runtime panic for overflows, or "undefined behaviour" as a result of an arithmetic operation being assumed no-overflow.

1717101342
andrewrk!~andrewrk@mail.ziglang.org
Overkill: I'm not aware of one, but since zig does not have operator overloading, you can implement this at the tokenizer level with very few lines of code (and using std.zig.Tokenizer)

1717102125
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Ahh true. I guess this doesn't need any semantic info, it would just need to forbid the raw `+`, `-`, `*`, `<<` operators

1717102413
andrewrk!~andrewrk@mail.ziglang.org
don't forget += and friends too

1717102434
andrewrk!~andrewrk@mail.ziglang.org
division can also overflow

1717106409
frmdstryr!~jrm@172.56.28.45
Why is there not a "try (x()) |capture| {} catch |err| {}" syntax? I searched a little but could not find any discussion on it

1717106644
sp2!uid197664@user/meow/sp2
`if` does that, if I understand correctly

1717106671
frmdstryr!~jrm@172.56.28.45
Yeah that only works for optionals though

1717106683
sp2!uid197664@user/meow/sp2
if there's a `fn x() -> E!T`, you can use `if (x()) |value| {} else |err| {}`

1717107591
andrewrk!~andrewrk@mail.ziglang.org
replace "try" with "if" and "catch" with "else" and your syntax works 

1717107773
frmdstryr!~jrm@172.56.28.45
Ah, ok it does work like that

1717112283
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
andrewrk: success https://gist.github.com/Bananattack/087e747a5395eac47237a3fc9be535cb -- probably missed something but tried to cover ops that panic about overflow/truncated bits, not caring about other runtime panics remainder divide-by-zero.

1717112439
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
still not sure how I'd tie this in as a pre-build hook yet, or if I will actually use heh. But a neat exercise nonetheless.

1717112792
bblack!~bblack@wikimedia/bblack-WMF
it might be interesting to have a strict linter available as a 3rd party thing, with this being one of the (probably eventually many) options for enforcing some policy that's stricter than what the language generally allows.

