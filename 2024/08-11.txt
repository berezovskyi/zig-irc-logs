1723334416
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
Good idea

1723334421
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I'll open a PR

1723334431
grayhatter!~grayhatte@user/grayhatter
even it if doesn't get merged, people who are actually interested will see the up to date PR, and up to date repo, and they'll switch, and they'll star your repo

1723334456
grayhatter!~grayhatte@user/grayhatter
after a few months, everyone will have switched to yours and it'll be much easier to get it on other package servers

1723334552
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
oh that's an awesome idea

1723334556
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
grayhatter: thank you so much

1723334573
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
that does sound pretty reasonable

1723334639
andrewrk!~andrewrk@mail.ziglang.org
aidenfoxivey, to be blunt: you are new, so nobody knows how much to trust the quality of your work. after you have been around for a while and established yourself, you will find these gears more greased. grayhatter's suggestions are on point

1723334721
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
andrewrk, is there a good way for me to ask for criticism on my changes from someone more experienced?

1723334728
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
totally reasonable that I'm untrusted

1723334752
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
but I also want to try to have people use things / criticize my work so that I can improve

1723334786
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
my best guess right now is just wait for issues to be filed on my repo

1723334967
grayhatter!~grayhatte@user/grayhatter
aidenfoxivey: does it work? does it work correctly? does it crash?

1723335025
grayhatter!~grayhatte@user/grayhatter
those are all things that you can do completely by yourself, and if you can do them consistently will put you above 80% of all developers 

1723335040
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
grayhatter: hasn't crashed for me, but I'm going through the issues on the unmaintained repo to see if I can find anything

1723335064
grayhatter!~grayhatte@user/grayhatter
after you can do that, people you want to get advice from will start taking intrest and contributing 

1723335071
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
ah okay

1723335093
grayhatter!~grayhatte@user/grayhatter
best advice I can give, is write code that YOU want, and no one else

1723335111
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
actually I was kind of going through that today

1723335130
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
the old repo has support for textMate and sublime text 2 I think

1723335155
grayhatter!~grayhatte@user/grayhatter
in line with the, if you build it, they will come. The whole point is making something cool that YOU want. If you don't care no one else will. It never works the other way

1723335158
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
but I don't use either of those and, from what I can tell, they are superseded by sublime text 3 + 4's .sublime-syntax

1723335184
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
grayhatter: my worry is that removing things that I view as kind of separate from my goal would upset people

1723335197
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
like I don't really want to maintain text mate stuff because I don't run an old version

1723335206
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
but I also don't want to make my stuff unpalatable

1723335216
grayhatter!~grayhatte@user/grayhatter
if they're in your way, remove them, if they're not in your way, it costs you nothing to ignore them

1723335227
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
hmm, fair point actually

1723335250
grayhatter!~grayhatte@user/grayhatter
if someone else later finds them useful, then you have a user that can start giving you feedback

1723340047
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
my main issue with them is that, because they are different in syntax but need identical settings, they can easily get out of sync

1723340101
grayhatter!~grayhatte@user/grayhatter
let them get out of sync... someone will open an issue asking to fix it, or a PR fixing it themselves

1723346105
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
Could someone help me understand why I still have aarch64 tests running when I'm using `-Dskip-non-native`?

1723385573
Ayo!~Ayo@45.142.232.203
Say, is the .eh_frame section ever used for anything in a static build with some C-only libraries and ReleaseFast mode?

1723385611
Ayo!~Ayo@45.142.232.203
Neither Zig nor C does stack unwinding at any point, right?

1723404423
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
Just added support for /// and //! in sublime zig

1723404445
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
it's weirdly hard to figure out how to get it to accept keybindings to generate and remove them though

1723404452
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
but they're different scopes now

1723404465
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
so someone could style doc, top-level doc, and regular comments differently

1723405155
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
ooh, have a fn macro too

1723407256
grayhatter!~grayhatte@user/grayhatter
does the stdlib make any guarantees about invalid input?

1723407328
torque!~tachyon@user/torque
that doesn't quite sound like a well-formed question

1723407341
torque!~tachyon@user/torque
invalid input to what

1723407500
grayhatter!~grayhatte@user/grayhatter
I'm looking at TLS, and std.crypto.Certificate, and I remember seeing a few attacks against asn.1 and I'm wondering if I need to attempt to validate the cert myself, or if it's safe to use raw user input

1723407795
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
grayhatter: I'd guess the easiest way is to just look at the source for std.crypto.Certificate

1723408772
grayhatter!~grayhatte@user/grayhatter
right, I can audit crypto.Certificate, but I'm asking more generally about the objectives for stdlib as a whole

1723408816
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
ohh I see what you mean

1723408831
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I was thinking this was at the level of "in this specific scenario, does it check for this"

1723408835
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
not like general goals

1723408872
grayhatter!~grayhatte@user/grayhatter
does it make no promises at all, a best effort in most cases, some effort in some cases but not all, no effort, in fact it's exclusively up to the user to ensure that it's never passed any invalid data?

1723408954
grayhatter!~grayhatte@user/grayhatter
to torque's point, the better phrasing to my question might have been something like, does stdlib take a stance on invalid input, raw user input, or attempted exploit code?

1723409061
torque!~tachyon@user/torque
I would assume that the general stance is that the stdlib should be written so that invalid input is detected and produces well-formed errors

1723409075
torque!~tachyon@user/torque
but that may not actually be the current state of things

1723409096
torque!~tachyon@user/torque
I think the fuzz testing Andrew has been working on will probably help with improving coverage

1723409247
torque!~tachyon@user/torque
since std hasn't really been audited at all and has been produced by many people over time, if you have something actually security-critical, you should probably do your own validation (or, better, audit the part of std you're interested in and upstream any changes needed)

1723409496
andrewrk!~andrewrk@mail.ziglang.org
I wrote std.crypto.tls. it likely has bugs because it's not well tested yet, but it's written correctly. it's not going to assert on bad user input by design for example

1723409951
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
andrewrk: do you have background in cryptography?

1723409973
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
*a background

1723410115
andrewrk!~andrewrk@mail.ziglang.org
I mean I have a CS degree but I haven't done much specifically with cryptography

1723410135
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
oh neat

1723410145
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I'm taking a cryptography course next term

1723410159
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
maybe it'll help with reading std.crypto

1723410163
andrewrk!~andrewrk@mail.ziglang.org
to be honest, cryptography isn't that complicated from a usage perspective, there are only a few concepts you have to understand in order to write correct software

1723410216
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
like in the sense that the specifications are already pretty clear on definition?

1723410491
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I often hear that legacy crypto libraries written in C have a bunch of issues

1723412029
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
how do I have `zig test` actually list the tests it's doing?

1723412044
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
it just outputs `All x tests passed`

1723412177
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
fengshuan: `zig test` and not `zig build test`?

1723412204
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
zig build test doesn't output anything

1723412232
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
try `zig build test --summary all`

1723412234
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
does that help?

1723412255
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
"3/3 steps succeeded"

1723412287
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
maybe it's not doing any tests

1723412291
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
that's running the test step in build.zig

1723412317
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
it is, I can fail the tests

1723412324
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
oh that's weird

1723412329
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
now it says 0/3 steps succeeded, 1 failed

1723412335
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
but it doesn't say which one

1723412347
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
"Build Summary: 5/5 steps succeeded; 1/1 tests passed"

1723412357
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
this is for zig 0.13.0

1723412366
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
yea, but I want to see a list of the tests that it's running

1723412376
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
e.g. "testing '1+1=2'"

1723412379
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
something like that

1723412392
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
just so I can run tests and see where I was in implementing stuff

1723412397
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
or what's missing

1723412419
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
I guess I could write the skeletons that fail

1723412430
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
does yours tell you the tests that pass?

1723412437
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
like 1/1 tests passed

1723412443
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
(not the specific names)

1723412462
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
yup

1723412486
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
but it doesn't say `├─ run test 1 passed 684ms MaxRSS:1M │  └─ zig test ReleaseSmall native success 940ms MaxRSS:141M` after?

1723412523
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
:O no

1723412527
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
wait, yes

1723412531
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
it says `test cached`

1723412532
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
wut

1723412553
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
Build Summary: 3/3 steps succeeded

1723412553
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
test cached

1723412553
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
└─ run test cached

1723412553
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
   └─ zig test Debug native cached 3ms MaxRSS:36M

1723412583
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
I'm on 0.14.0-dev.367+a57479afc

1723412587
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
if anything has changed since

1723412692
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
now it says "run test 3 passed", but no names :(

1723412703
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
I see why it said cached

1723412764
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
hmm, good point I actually cannot find it naming them

1723414572
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
I guess it's not really important, a grep -RE '^test' would do the job, but it would be nice-ish

1723418304
grayhatter!~grayhatte@user/grayhatter
> I often hear that legacy crypto libraries written in C have a bunch of issues

1723418405
grayhatter!~grayhatte@user/grayhatter
nah, that's just a comfortable lie people like to tell themselves to justify bugs... I'd read some of the opinions, or watch some of the videos, for Linus Torvalds take on "security issues", his is the most sane take without any of the FUD

1723418540
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
should clarify

1723418545
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I don't mean because they're written in C

1723418560
grayhatter!~grayhatte@user/grayhatter
security issues are just a subset of code correctness

1723418613
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
that sounds like a trueism based on my understanding of code correctness

1723418774
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
like if you have a side channel timing attack for example, doesn't that mean you are computing the correct result (and thus have correct code) 

1723418786
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
but don't have "secure" code per s

1723418788
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
*per se

1723418827
grayhatter!~grayhatte@user/grayhatter
I (more or less) knew what you meant, but the description you used for legacy crypto libs is misleading. If you wanted to be exactl you'd say, some libraries have bugs... which doesn't include the FUD you get from saying old crypto lib written in [language] has issues

1723418956
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
would it be correct to say that "there exists an old crypto library written in C that has issues"

1723418970
grayhatter!~grayhatte@user/grayhatter
it depends on how you describe how the code should behave. Correctness, is just a definition. There's a lot of "correct" code where the compiler has deleted sections because it detected undefined behavior, and thus did something the programmer didn't intend. That's still correct, just in the other direction. 

1723418972
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
but C not necessarily being the cause of those issues

1723418984
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
grayhatter: yeah correctness seems kind of vague

1723419023
grayhatter!~grayhatte@user/grayhatter
here, a good example is std.mem.eql vs std.crypto.timing_safe.compare, both do the same thing, one is fast, the other doesn't leak data 

1723419093
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
oh yes exactly

1723419106
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I actually love having something implementation defined for timing

1723419119
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I don't think C has that by default IIRC

1723419125
grayhatter!~grayhatte@user/grayhatter
for timing_safe.compare, the definition of correct includes, compares two slices without disclosing information about the position of inequality 

1723419207
grayhatter!~grayhatte@user/grayhatter
mem.eql correctness includes doing it efficently, without performing needless operations 

1723419229
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
I see your point

1723419232
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
makes sense

1723419458
grayhatter!~grayhatte@user/grayhatter
to andrewrk's point, crypto is actually really easy to understand and write. You could write perfectly secure and correct crypto without knowing the concept of the cost of performing needless operations. But you would need to understand the concepts of managing secrets, and trusted vs untrusted, et al

