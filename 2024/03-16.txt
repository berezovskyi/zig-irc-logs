1710551797
toasterking!a5f2e7be36@2a03:6000:1812:100::149
andrewrk: Can I get your quick opinion on this? https://github.com/ziglang/zig/pull/19271#discussion_r1526509009

1710552933
andrewrk!~andrewrk@mail.ziglang.org
toasterking, sure thing, I added a reply

1710552975
andrewrk!~andrewrk@mail.ziglang.org
by the way, somebody told me the other day that ws2_32.dll drags in a dependency on msvcrt.dll

1710553001
andrewrk!~andrewrk@mail.ziglang.org
I wonder if we need to try to avoid that DLL too

1710553972
andrewrk!~andrewrk@mail.ziglang.org
ifreund, re: "realloc lock" - another case handled by this is shrinking the list, invalidating pointers to the end of the list

1710553978
andrewrk!~andrewrk@mail.ziglang.org
technically that's not a realloc 

1710554000
andrewrk!~andrewrk@mail.ziglang.org
perhaps "uaf_lock" or "pointer_stability_lock" ?

1710554051
andrewrk!~andrewrk@mail.ziglang.org
or "pointer_lock"

1710554827
toasterking!a5f2e7be36@2a03:6000:1812:100::149
andrewrk: AFAIK going under the covers of NT sockets leads to the highly cursed and under-documented AFD subsystem. There's even a way to have a nice socket polling interface by opening a file under \Device\Afd\: https://notgull.net/device-afd/

1710554888
andrewrk!~andrewrk@mail.ziglang.org
interesting

1710554898
andrewrk!~andrewrk@mail.ziglang.org
in terms of cursed-ness though, I don't know how you could beat msvcrt.dll

1710556140
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
How do I write a method that can modify the struct?

1710556187
andrewrk!~andrewrk@mail.ziglang.org
The_Buhs, have a look at the standard library documentation: https://ziglang.org/documentation/master/std/

1710556206
andrewrk!~andrewrk@mail.ziglang.org
find an interesting type, click on a method that definitely needs to modify the struct

1710556233
andrewrk!~andrewrk@mail.ziglang.org
then you can see the source code at the bottom of the page

1710556553
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
I was actually looking at https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addOne before I asked but it wasn't working -- I'll try looking again in the morning, thanks!

1710556727
andrewrk!~andrewrk@mail.ziglang.org
The_Buhs, "wasn't working"?

1710556830
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
as in whatever I had was giving me a compile error. At first it was about the member I was trying to change being const then  I saw that self should be a pointer so I changed to that but was still getting an issue about something being const

1710556880
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
but I already put my laptop up for the night so I'm too lazy to go check the exact message right now haha, I definitely just have something wrong that I'll probably figure out if I look through the stdlib docs a bit more

1710557709
andrewrk!~andrewrk@mail.ziglang.org
The_Buhs, ok, have a good night. hopefully if you read the compile error message carefully, it will clue you in to how to change the code 

1710559696
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
It was bothering me so I actually opened it up and realized what it was and I'm dumb lok

1710559697
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
lol*

1710559712
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
had const my_struct then tried to have my_struct.method modify it *facepalm* 

1710560650
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
I think last question for tonight though, is it possible to make the test binary and look at that in gdb? 

1710563526
sm2n!ae95cb1267@user/sm2n
The_Buhs: you can do something like `zig test --test-cmd gdb --test-cmd-bin`

1710563564
The_Buhs!~the_buhs@user/The-Buhs/x-5080862
Awesome, thanks

1710577338
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
can anyone shed any light on why kate can't load zls?

1710577377
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i followed the instructions at https://github.com/zigtools/zls/wiki/Installation

1710577431
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but kate starts up and says `Failed to find server binary: /home/user/Library/Zig/zls"

1710577437
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but it's definitely there

1710577500
phaleth!~phaleth@user/phaleth
chmod +x /home/user/Library/Zig/zls

1710577504
phaleth!~phaleth@user/phaleth
I guess

1710577591
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
oh

1710577594
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
fucking gnome

1710577596
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
lol

1710577598
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
thank you

1710577607
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
that keeps getting me

1710577612
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
man i really hate gnome

1710577657
phaleth!~phaleth@user/phaleth
yw

1710577682
phaleth!~phaleth@user/phaleth
it's not a gnome issue, but you might still wanna ditch gone anyway

1710577694
phaleth!~phaleth@user/phaleth
gnome*

1710578175
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
when i was on plasma, it never removed the x bit from downloaded binaries of its own volittion

1710578194
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
gnome always removes the x bit from downloaded binaries

1710578200
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
it's annoying

1710578208
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
gnome is annoying

1710578992
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
given struct Bar, what is the functional difference between `pub fn a(self: Bar) void {}`, `pub fn b(this: *Bar, other: u8) void {}`, and `pub fn c(bar: *const Bar) void {}`

1710579109
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
specifically, the difference between the different ways of refering itself

1710579133
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
examples taken from ziglings 046

1710579213
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
like, what would be the point of defining the methods with these different signatures?

1710582805
ifreund!2940d10f8b@user/ifreund
ih8u: the first is a constant value, the second is a mutable pointer, and the last is a constant pointer

1710582845
ifreund!2940d10f8b@user/ifreund
If you want to mutate Bar, *Bar is your only option

1710582871
ifreund!2940d10f8b@user/ifreund
otherwise it depends on whether you need bar passed by pointer or not

1710583429
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so what would the use case of `self: *const Bar`?

1710583491
ifreund!2940d10f8b@user/ifreund
ih8u: if you need to store a `*const Bar` that outlives the function scope (e.g. to implement an iterator or something)

1710583518
ifreund!2940d10f8b@user/ifreund
or if you need to do a pointer comparison

1710583534
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
can the method mutate the struct then?

1710583547
ifreund!2940d10f8b@user/ifreund
or if you want to guarantee that a large struct is not copied

1710583552
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but the pointer can't be reassigned?

1710583580
ifreund!2940d10f8b@user/ifreund
ih8u: no, the fields of Bar can't be mutated through a *const Bar pointer

1710583603
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so Bar could copy the struct?

1710583609
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
would*

1710583642
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
and *const Bar would point at the same memory address of the original struct, but not be able to mutate it?

1710583642
ifreund!2940d10f8b@user/ifreund
fn foo(bar: Bar) void {} is supposed to semantically be a copy yes

1710583677
ifreund!2940d10f8b@user/ifreund
the compiler may decide to pass by reference as an optimization though

1710583716
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but in all other ways they are identical?

1710583739
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
as in, neither can use the method to mutate themselves?

1710583805
ifreund!2940d10f8b@user/ifreund
yes, this is trivial to verify by trying it yourself

1710583818
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
lol

1710583820
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
fair enough

1710583854
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
sometimes i'm wrong, though, and it helps hearing people who actually know what they're talking about explain it

1710583873
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
especially since manual memory management is a new concept for me

1710583952
ifreund!2940d10f8b@user/ifreund
ah, yeah I remember being very confused at first when pointers were a new concept to me

1710583953
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
thank you for your patience

1710584076
ifreund!2940d10f8b@user/ifreund
one can think of a pointer as an integer holding the memory address of the value being pointed to

1710584114
ifreund!2940d10f8b@user/ifreund
so `foo(bar: *const Bar)` passes the memory address value to the function, which may read the memory at that adress but not modify it

1710584228
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i think i understand

1710584270
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
why can i create instances of const structs?

1710584279
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
is there a use case for var structs?

1710584325
ifreund!2940d10f8b@user/ifreund
are you referring to the `const Bar = struct { ... };` syntax?

1710584332
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
yes

1710584368
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
can be instantiated as `const bar = Bar { … }`

1710584389
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
now i know that bar can't be mutated

1710584406
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so why can i create it in the first place of Bar is const?

1710584440
ifreund!2940d10f8b@user/ifreund
This syntax assigns the anon struct type defined by `struct { ... }` to Bar, @TypeOf(Bar) is `type`

1710584442
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
is there such a thing as `var Bar = struct { … }`?

1710584472
ifreund!2940d10f8b@user/ifreund
`var bar = Bar { ... }` is a compile error outside of comptime scopes

1710584501
ifreund!2940d10f8b@user/ifreund
since variables of type `type` must be either const or comptime-only

1710584545
ifreund!2940d10f8b@user/ifreund
you can create either const or mutable values of type Bar, e.g. `var bar: Bar = .{}`

1710584620
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
or `var bar: Bar = Bar{}`, right?

1710584652
ifreund!2940d10f8b@user/ifreund
yes

1710584666
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but is there such a thing as `var Bar = struct { … }`?

1710584692
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i mean, i guess there would have to be?

1710584702
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
for a one-off mutable struct?

1710584735
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i think i might be confusing myself as to what a struct is exactly, coming from an oop background

1710584841
ifreund!2940d10f8b@user/ifreund
`var Bar = struct { ... }` can only exist in compile time scopes. It may be useful in metaprogramming but I don't think I've ever used something like that in practice

1710584844
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so the *concept* of a method makes perfect sense to me, but the concept of a struct is more or less foreign to me

1710584865
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i'm used to thinking is classes

1710584867
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
inheritance

1710584875
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
and especially polymorphism

1710584887
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
now i've heard that zig is anti-oo or something?

1710584890
ifreund!2940d10f8b@user/ifreund
types are first class values, so if you had `var Bar = struct { x: u32 }` in a comptime scope then you could assign a different type to Bar, e.g. `Bar = u32`

1710584893
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so i was surprised to see methods

1710584924
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
are there analogs to inheritance and polymorphosm as well?

1710584924
ifreund!2940d10f8b@user/ifreund
ih8u: they aren't any different than other functions, just a bit of syntax sugar

1710584937
ifreund!2940d10f8b@user/ifreund
foo.bar(baz) is the same as bar(foo, baz)

1710584956
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
methods (conceptually) re just functions ptrs with some syntax magic in my head :)

1710584957
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
ufcs, right?

1710585024
ifreund!2940d10f8b@user/ifreund
there isn't any language level inheritance or runtime polymorphism, you can implement those kinds of things manually with vtables and the like just as one can do in C

1710585083
ifreund!2940d10f8b@user/ifreund
ih8u: I don't think it's strictly ufcs, the foo.bar() syntax only works if bar() is declared in the namespace of Foo

1710585101
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
oh

1710585102
ifreund!2940d10f8b@user/ifreund
i.e. foo has type Foo and bar is Foo.bar

1710585131
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so why is it necessary to pass a reference to itself at all?

1710585165
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i don't know

1710585178
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
maybe i'm just too stupid for this language

1710585241
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
oo makes perfect sense to me. i immediately "got it"

1710585314
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
the reason behind it, the way it works, how to put it to use, everything clicked in my brain from the very first moment i saw it

1710585352
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
in a broad sense, i can grok zig, but i don't "get it"

1710585368
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
are there people for whom the opposite is true?

1710585577
ifreund!2940d10f8b@user/ifreund
ih8u: I definitely find C and Zig easier to understand than C++ or java or whatever personally

1710585614
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
there aren't any interfaces in zig either, right?

1710585623
ifreund!2940d10f8b@user/ifreund
not at the language level

1710585635
ifreund!2940d10f8b@user/ifreund
see std.mem.Allocator for an example interface though

1710585641
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
ih8u: do you know what function ptrs are?

1710585656
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so how do you model the concept of, say, the relationship between a cat, a dog, and an animal in general?

1710585675
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
raster: vaguely

1710585689
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
that may be the issue :)

1710585702
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
the issue regarding what, specifically?

1710585709
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
in my experience... understanding indirection is one of the key "gotcha" moments

1710585734
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
the first time a programmer encounters this is generally a pointer 

1710585742
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
(to some data in memory)

1710585755
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
this often trips up the vast majority of people

1710585769
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
some just "get it" either right away or after a bit of a brain shift.

1710585778
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
function ptrs are kind of a more advanced step...

1710585805
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
code just lives in memory like data. a func ptr just is "run the code sitting over here in this place in memory" ...

1710585853
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
you can store func ptrs in data ... thus a piece of data can say what to run on it and this can either be constant (read only) or modifiable - at runtime even change what that function is to something else

1710585879
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
function pointers become the bread and butter of most event systems ... as you at runtime say "when event X happens then call func Y"

1710585885
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
and you can make func Y anything.

1710585897
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
methods then are just function pointers "conceptually"

1710585953
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i'm following you so far

1710585955
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
obj->run(); reall it just "func the slot for "run" in the data for "obj" and then cal whatever that is in memory and for convenience implicitly pass in obj as sel/this anyway"

1710585964
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
err self/this

1710586000
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
so soemoen has tight you tyher end of the pipeline of this - the OO higher level end, but not the bits that get you there on a machine/compiler level i think

1710586029
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
if you get your head around this .. functions are just data... and it's just how you address/access/decided that function :)

1710586044
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
well, i taught myself, many moons ago

1710586058
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
(i come from a c background and am poking at zig atm - but my C is very oo-ish and is basically callback/function pointer "hell")

1710586081
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
once you make very complex things you 3end up getting very friendly with func ptrs...

1710586110
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i think java is a beautiful and elegant language, so if that makes my opinion in anyone here's eyes not count, then whatever

1710586127
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
personally from what i see of zig it gives me all i had in c with slightly nicer tooling and some syntax sugar - like the above foo.bar(); == bar(foo);

1710586127
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
ruby speaks to me on an almost spiritual level

1710586154
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
now i'm interested in getting down in the weeds

1710586166
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
that's a worthy thing

1710586178
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so i'm sort of doing a grand tour of low-level languages

1710586181
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
even if in future you stay high level like java./ruby and let the tooling do the footwork

1710586189
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
first stop was c++, and i just find it gross

1710586190
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
its good to know the principles of how it all works

1710586195
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
hmm

1710586200
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
i'd do C first not c++

1710586205
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
c++ is a MASSIVE beast

1710586213
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
yeah i'm vaguely familiar with c

1710586220
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i can grok it

1710586232
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
learning C with its constraints (its 99% a subset of C++) will help you

1710586251
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i can make changes to it to get it to do what i want most of the time if i download a random thing

1710586255
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
same with c++

1710586265
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but i don't find either language particularly elegant

1710586266
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
to me zig is a more advanced, cleaner C without all the warts and a few helpers to save you doing too much foot-shooting.

1710586280
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
tho i've gotten much better at avoiding foot-guns in c over the decades...

1710586297
ifreund!2940d10f8b@user/ifreund
understanding C will translate very directly to understanding Zig in my experience

1710586317
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
in fact, i find c++ quite inelegant, though not necessarily in a way that i can articulate

1710586321
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
d was cool, and i thought i had something there for a while

1710586322
ifreund!2940d10f8b@user/ifreund
they work at a similar level of abstaction

1710586338
ifreund!2940d10f8b@user/ifreund
I share a strong dislike for C++

1710586354
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but it's rough around the edges, has basically no tooling, and depends on a runtime for its oo

1710586412
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
at a low level, d depends on an intricate knowledge of c, and is basically just "c with templates"

1710586420
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
too bad for me

1710586432
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
rust offends basically every sensibility i have

1710586498
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
object pascal and ada are interesting, though i'm not deep enough in them to decide whether i actuallty like them or not

1710586516
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
one reason people gravitate to c and well are now looking at zig is simply the sheer complexity of things like c++ and rust. they add so so so so much that understanding the language is quite hard. also they provide lots of "invisible" magic that isnt obvious.

1710586541
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
thus learning a simpler lang is good - there is less to learn and more scope for YOU to decide how something is done - you implement it yourself

1710586587
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
you can implement oo in c (or it seems in zig)

1710586602
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
you dont need it as a first class language featrue

1710586606
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i like the core idea of a simple language

1710586608
gastus!~gastus@5.83.191.36
But that also can take time - eg implement a PDF library. Rust? 7 lines pdf to text done. BTW: Ocaml has a cool feature to pick arguments from context automatically. Eg when passing allocators or such might be fun to have similar.

1710586632
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
but .. my suggestion is - get to grips with function ptrs

1710586648
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
once you get this... you;'d be amazed at how things open up.

1710586660
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
but i also like oo, like that's just how my brain works by default, way before i ever started programming

1710586678
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
(i had the advantage of after basic my next lang was assembly... so i learned very very early on what it all looked like under the covers)

1710586684
gastus!~gastus@5.83.191.36
raster: Talking about using structs to create closures ? :-) https://ziggit.dev/t/how-does-zig-implement-closures-to-capture-environment-variables/3562/5 Or is there a better way ?

1710586685
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
and i keep coming back to poke around in zig, even though i know it's not oo

1710586727
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
so perhaps you can help me understand a few things

1710586733
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
gastus: ask me not about zig... me be n00b.

1710586759
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
i have done c/asm for over 3 decades though... 

1710586789
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
(and by done - i've written 100,000's of lines of it)

1710586808
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
in oo, the way to model the relationship between a cat and a dog is very straightforward

1710586826
gastus!~gastus@5.83.191.36
My background is Delphi (object pascal). And they have huge OO trees. but once you want to mix (that time no traits).. you ended up copy pasting code. What I love about TS is you can just build up let me have some config, some methods, let's move that all in closures to build more apis -> done. No typing nothing cause TS does it all for you. That's why I feel that having suggar for closures in zig would be 

1710586832
gastus!~gastus@5.83.191.36
fun to have.

1710586834
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
how am i meant to model this relationship without inheritance or polymorphism?

1710586898
ifreund!2940d10f8b@user/ifreund
const Cat = struct { animal: Animal, foo: Foo }; const Dog = struct { animal: Animal, bar: Bar };

1710586967
ifreund!2940d10f8b@user/ifreund
here's a nice blog post if that's your thing: https://www.nmichaels.org/zig/interfaces.html

1710586970
gastus!~gastus@5.83.191.36
There is a term called composotion over inheritance. 

1710586980
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
gastus: closures are even further down the road after you grock func ptrs :) (at leas for me closures are the one thing i've never really implemented in c beyond passing in a void *data context param to func ptrs and manually managing that)

1710587003
ifreund!2940d10f8b@user/ifreund
or just have a look at `std.mem.Allocator` and how that interface is implemented

1710587039
ifreund!2940d10f8b@user/ifreund
yeah, I don't think "closures" are a good abstraction for zig

1710587045
gastus!~gastus@5.83.191.36
raster: So what's a function ptr? A ptr to some code you can call?

1710587056
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
yeah

1710587059
gastus!~gastus@5.83.191.36
what's a closure? a configured function you can call with some data you put in previously ?

1710587069
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
callbacks, methods ... all they are is just fn ptrs

1710587069
ifreund!2940d10f8b@user/ifreund
a type-safe variant of C-style void * data pointers is the way to go for me at least

1710587070
gastus!~gastus@5.83.191.36
So how does a func ptr replace a closure ?

1710587092
gastus!~gastus@5.83.191.36
A closure is more like simple object allowing even an async initalization ..

1710587103
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
a closure is context held from where the func ptr is set up in that call stack kept alive and made accessible to the function that the fn ptr points to when called

1710587127
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
or wel the closure is the whole thing

1710587138
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
where a lambda == the fn ptr really

1710587144
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
in the end... all fn ptrs :)

1710587263
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
yeah, i'm too stupid for this language

1710587278
gastus!~gastus@5.83.191.36
https://dpaste.com/9U2JBRLTN  That's how I use closures eg in JS. And this happens to be quite fun cause you can just keep combining some apis and build some new methods .. and be done. Without getting lost in writing typing information.

1710587337
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
there is nothing intuitive about what i'm seeing on that page

1710587354
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
ifreund: that is one of c's big problems. void * is like the end-all solution for many things. but it throws out any type safety at all. doing it vaguely typesafe becomes a contortion exercise if you try and you end up casting eventually to avoid some of that contortion... so you're back to about as safe as void * :)

1710587560
ifreund!2940d10f8b@user/ifreund
raster: indeed, and the solution is the answer in Zig (comptime) also happens to solve more of C's big problems: generics and macros :)

1710587591
ifreund!2940d10f8b@user/ifreund
that was a poorly formed sentence

1710587619
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
`Animal { pub fn speak() { print("default"); }`, `Cat: Animal { pub fn speak() { print("meow"); }`, `Dog: Animal { pub fn speak() { print("woof"); }`, `animals = Animal[]{Dog, Cat}; for animal in animals { animal.speak(); }`

1710587632
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
pseudocode, but not far from the real thing

1710587650
ih8u!~Thunderbi@global133-89-149.aitai.ne.jp
i don't see how what in that blog post accomplishes the above

1710587997
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
ifreund: comptime is one of the things that really gets my attention in zig. :)

1710588013
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
ifreund: for now i haven't figured out how it might generate code at comptime tho...

1710588034
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
but that i mean literally spew out new code "strings" for the compiler to digest "in line"

1710588043
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
which tbh would be nice.

1710588053
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
tho it also is pretty evil...

1710588057
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
but i like evil :)

1710588074
ifreund!2940d10f8b@user/ifreund
that's not going to happen, code generation as a build step is the way to do things like that

1710588208
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
yeah - thats what i've seen

1710588219
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
ie comptime can write .zig files

1710588227
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
but its a bit ... brute-forcey

1710588248
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
(i've been doing this for years in c - build builds codegen tool that takes IDL files to gen more c to then build it...)

1710588308
ifreund!2940d10f8b@user/ifreund
huh? comptime cant make syscalls, how can it write .zig files?

1710588342
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
i could have sworn i saw something like this in the zig std lib or something?

1710588352
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
something was generating zig files...

1710588444
ifreund!2940d10f8b@user/ifreund
this is done as part of std.Build to implement build options

1710588463
ifreund!2940d10f8b@user/ifreund
but they aren't generated at comptime

1710588561
ifreund!2940d10f8b@user/ifreund
the build.zig file is compiled and run, at runtime it writes some .zig files and when it invokes the zig compiler to build the artifact that has build options it includes those generated zig files

1710588594
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
oh i was trying to find the code for it

1710588620
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
so it does the same old same old - build tool to run to gen code

1710588728
ifreund!2940d10f8b@user/ifreund
yep, it just so happens that the build tool is implemented and configured using zig

1710588890
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
still.. i'td be nice to essentially have an eval(some comptime stuff to spew out strings that also has access to the current scope)

1710588894
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
evil ... but nice :)(

1710589257
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
ok

1710589260
raster!~raster@brnt-01-b2-v4wan-167949-cust1535.vm7.cable.virginm.net
real life calls!

1710620396
torque!~tachyon@user/torque
ih8u, I'm curious what is your programming background (i.e. what languages do you like/are you familiar with)?

1710620457
torque!~tachyon@user/torque
as has been mentioned, you can certainly imitate that type of OOP polymorphism in zig manually, but often there are otherwise to express data relationships. I've found that composition works well for complex object hierarchies

1710620466
torque!~tachyon@user/torque
s/otherwise/other ways/

1710620523
torque!~tachyon@user/torque
at the end of the day, I think everyone has a slightly different line in the sand for what magic they want the compiler to do vs what they want to write out explicitly in the code

1710620646
torque!~tachyon@user/torque
one of the downsides of your Animal example is that you cannot tell, from the callsite, what function will actually be called. Adding abstraction layers can make code harder to read and reason about, although abstraction is a very useful and powerful tool

1710627326
[0x1eef_]!~mrleef@al-quran.reflectslight.io
You need WebAssembly to view the stdlib docs ?

1710627357
[0x1eef_]!~mrleef@al-quran.reflectslight.io
Is there a plain HTML version anywhere

1710628032
torque!~tachyon@user/torque
the low-tech version is `grep`

1710628068
torque!~tachyon@user/torque
webassembly is used because it's compiled directly from pieces of the zig compiler

1710628110
andrewrk!~andrewrk@mail.ziglang.org
it's not your typical web app, I encourage you to give it a shot even if you are like me not happy with the state of the modern web

1710628822
[0x1eef_]!~mrleef@al-quran.reflectslight.io
Chromium on OpenBSD disables it by default. But no worries, I can use firefox.

1710629113
torque!~tachyon@user/torque
seems like an odd thing to disable if they aren't disabling JS entirely by default. Do you know what the rationale is?

1710629132
grayhatter!~grayhatte@user/grayhatter
torque: I assume the rational is "it's new" 

1710629533
[0x1eef_]!~mrleef@al-quran.reflectslight.io
Sorry I don't. I'd guess they're just being cautious. 

