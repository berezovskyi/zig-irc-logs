1724889962
freshcoffee!~fresh@user/freshcoffee
and would save 2 chars :)

1724890739
grayhatter!~grayhatte@user/grayhatter
I disagree

1724890818
grayhatter!~grayhatte@user/grayhatter
ArrayList is the 2nd most useful stdlib patten a noob should learn to become comfortable using and developing Zig

1724890886
grayhatter!~grayhatte@user/grayhatter
the cost on newbies making the easy to use not the "default" isn't a good trade to make the default the one the experts would use

1724891099
grayhatter!~grayhatte@user/grayhatter
that came out a lot more awkard then I meant it, let me know if I should rewrite that last line

1724892447
retrodev!~retrodev@user/retrodev
I would say that ease-of-use is a feature that I would love to have in any language, and I do love that zig offers ease-of-use syntax, language, and std. As for whether or not ArrayListUnmanaged should be default, I don't really care - both are equally exposed. A shorter name for ArrayListUnmanaged would be preferred, but I don't know what name it would have otherwise. I'll just say I'm going to be very excited for when the "Great STD Audit" begins :)

1724892860
retrodev!~retrodev@user/retrodev
Here's a good reason why ArrayList is the default - if you ever take one as an argument (for functions which append/alter it), the user may want to have a different allocator manage that ArrayList versus whatever allocator they pass to the function alongside it (assuming it needs an allocator). If you were to make ArrayListUnmanaged the default, then it would be harder to work with these functions.

1724948396
cowboy8625!~user@216.147.180.125
o/

1724955788
gluon!~gluon@2a01:4f8:c0c:e2da::1
hello! how can i find the hash of a zon package? setting it to a bogus value and running zig build doesn't generate one

1724956229
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
leave it empty, it should give you an expected one

1724956347
gluon!~gluon@2a01:4f8:c0c:e2da::1
error: wrong hash size. expected: 68, found: 0

1724956361
gluon!~gluon@2a01:4f8:c0c:e2da::1
doesn't show the expected one

1724956461
gluon!~gluon@2a01:4f8:c0c:e2da::1
removing the field altogether fixed it

1724956463
gluon!~gluon@2a01:4f8:c0c:e2da::1
thanks!

1724956595
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ah yes, that's what I meant by leave it empty...I see now that wasn't the best wording :)

1724957192
gluon!~gluon@2a01:4f8:c0c:e2da::1
:)

1724958389
cowboy8625!~user@216.147.180.125
zig fetch --save url, will also just update the hash

1724959196
gluon!~gluon@2a01:4f8:c0c:e2da::1
nice

1724959255
gluon!~gluon@2a01:4f8:c0c:e2da::1
i was now trying to expose the module in build.zig so that i could @import it with: exe.createModule("datetime", datetime.module("datetime"));

1724959271
gluon!~gluon@2a01:4f8:c0c:e2da::1
but it looks like createModule doesn't exist anymore? using nightly zig

1724961340
cowboy8625!~user@216.147.180.125
 datetime.root_module.module("datetime"));

1724961372
cowboy8625!~user@216.147.180.125
datetime.root_module.addImport("datetime"))

1724961383
cowboy8625!~user@216.147.180.125
second one not first one.

1724967028
cowboy8625!~user@216.147.180.125
I need to fugure out polling in zig to make a non-blocking tcp server.

1724967226
gluon!~gluon@2a01:4f8:c0c:e2da::1
cowboy8625: thank you

1724967294
cowboy8625!~user@216.147.180.125
anytime buddy!

1724967827
gluon!~gluon@2a01:4f8:c0c:e2da::1
coming from rust, which i love to write, but find hard to read/refactor, zig's syntax delivers the promise of allowing one to focus on the actual problem domain

1724968055
cowboy8625!~user@216.147.180.125
nice! Zig is a nice language. Ive quit enjoyed watching it grow into what it is today!

1724968095
cowboy8625!~user@216.147.180.125
I enjoy both languages quit a bit.

1724968672
gluon!~gluon@2a01:4f8:c0c:e2da::1
yeah, me too. finally taking the time to learn zig properly

1724968832
gluon!~gluon@2a01:4f8:c0c:e2da::1
payload capturing is quite a nice feature in zig

1724968896
gluon!~gluon@2a01:4f8:c0c:e2da::1
it really clicked for me

