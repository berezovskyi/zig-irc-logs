1722858857
Synon!~Synon@user/Synon
Hey there

1722858886
Synon!~Synon@user/Synon
I have a little question, maybe it's not really a zig-specific question but I'm trying to implement this in zig:

1722858964
Synon!~Synon@user/Synon
I want to create a Stack structure that will store u64 items with a max capacity of say 512. I'm thinking since in my program I'll only ever have one of these, maybe it's better to do it without allocating

1722859000
Synon!~Synon@user/Synon
but at the same time, '0' is a legal value and I want to differenciate between having a '0' at a specific index in the stack VS having no value

1722859018
Synon!~Synon@user/Synon
should I make it store optional u64 instead and just fill it with 'null'? Or is there a better way?

1722859199
Ayo!~Ayo@45.142.232.203
Uh, a stack has an array with a given capacity and a length indicating how many slots are filled. The length should be enough to tell you which slots are in use and which aren't, right?

1722859235
Ayo!~Ayo@45.142.232.203
Unless you're expecting the stack to have gaps in it, that is

1722859524
Ayo!~Ayo@45.142.232.203
You can also use std.BoundedArray as a simple non-allocating stack, it's got append() and pop() methods

1722862126
Synon!~Synon@user/Synon
Ayo: You're right, I'll just assume that any element at an index > length is empty

1722862255
Synon!~Synon@user/Synon
I like std.BoundedArray but I need to implement extra methods, yesterday I learnt about usingnamespace, could that be used to tell my struct "take everything about BoundedArray" then add my own functions?

1722862328
Ayo!~Ayo@45.142.232.203
No, better just wrap BoundedArray

1722862383
Ayo!~Ayo@45.142.232.203
usingnamespace might not be in the language for very long: https://github.com/ziglang/zig/issues/20663

1722862468
Synon!~Synon@user/Synon
thanks Ayo!

1722862515
Synon!~Synon@user/Synon
sorry, how would that look to "wrap" BoundedArray, do you mean my struct would have a BoundedArray member and functions that call functions on that BoundedArray?

1722862644
Ayo!~Ayo@45.142.232.203
Yes, exactly that

1722862699
Ayo!~Ayo@45.142.232.203
Or have users of your struct operate on the BoundedArray member directly, if that doesn't invalidate any custom constraints

1722862796
Synon!~Synon@user/Synon
Sounds reasonable

1722862800
Synon!~Synon@user/Synon
thanks a lot

1722878100
andrewrk!~andrewrk@mail.ziglang.org
today is zig's 9th birthday

1722878190
companion_cube!~simon@user/meow/companion-cube:68572
What a big (z)iguana now! 

1722878798
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
andrewrk: thank you for coming up with such a cool language 

1722878819
aidenfoxivey!08de0355d2@2a03:6000:1812:100::e41
happy birthday zig 

1722878871
bblack!~bblack@wikimedia/bblack-WMF
happy birthday zig!

1722879820
Ayo!~Ayo@45.142.232.203
9 already? time sure flies

1722885607
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
ðŸ¥³ðŸ¥³ðŸ¥³

1722891118
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
other than reading the src, is there a way to figure out how std.http.{Server,Client} flow?

1722891144
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
previous implementation had `test`s that I read, this one seems to be lacking

1722891696
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
the src goes down a rabbit hole to socket_t

1722891703
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
for std.http.Server

1722891821
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
std.http.Server.Connection.stream

1722892519
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
I guess the question is how would I even init a std.http.Server?

1722901162
andrewrk!~andrewrk@mail.ziglang.org
there are some examples you can look at if you grep for them

