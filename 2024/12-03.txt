1733184188
m257!~maaz@bras-base-hspron0502w-grc-17-174-91-157-49.dsl.bell.ca
my solution for aoc today was really inefficient but at least I learned some things.

1733184202
hadronized!~hadronize@2001:41d0:a:fe76::1
m257: inefficient in what way?

1733184218
hadronized!~hadronize@2001:41d0:a:fe76::1
https://git.sr.ht/~hadronized/advent-of-code-2024/tree/master/item/src/day02.zig if you want to companion_cube m257 

1733186030
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
i guess you did like me in part 2 and tried removing each element of the list

1733186547
hadronized!~hadronize@2001:41d0:a:fe76::1
I removed only 2 to 3 elements

1733189190
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
hadronized: link 404s, is your repo private?

1733189355
hadronized!~hadronize@2001:41d0:a:fe76::1
ah nah sorry I moved everything because I rewrite in Rust

1733189364
hadronized!~hadronize@2001:41d0:a:fe76::1
https://git.sr.ht/~hadronized/advent-of-code-2024/tree/master/item/zig/src

1733189506
clevor!sid649024@id-649024.hampstead.irccloud.com
lol

1733189518
clevor!sid649024@id-649024.hampstead.irccloud.com
RIIR is real

1733207834
Amun-Ra!~amun-ra@retro.rocks
unless you plan to use dlopen then you might be out of luck

1733207839
Amun-Ra!~amun-ra@retro.rocks
argh, sorry

1733207896
Amun-Ra!~amun-ra@retro.rocks
(I was restoring tmux session and pressed cursor up one time too many)

1733222465
hadronized!~hadronize@2001:41d0:a:fe76::1
clevor: it’s a way to compare

1733222472
hadronized!~hadronize@2001:41d0:a:fe76::1
if you look at the Zig solution, I really dislike the ducktyping part

1733222488
hadronized!~hadronize@2001:41d0:a:fe76::1
my parse(), solve1() and solve2() methods are related, and there’s no code that binds them

1733222490
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s all magic

1733222519
hadronized!~hadronize@2001:41d0:a:fe76::1
I rewrote day1 in Rust and can you see what ties parse(), solve1() and solve2(); it’s a simple and easy to think about trait

1733222549
hadronized!~hadronize@2001:41d0:a:fe76::1
I really think that Zig being a simpler language is not a good bet as it increases (drastically) the cognitive complexity and risks of misusing / not understanding APIs

1733222582
hadronized!~hadronize@2001:41d0:a:fe76::1
also, I really hate integers casts in Zig, the combination of @as and @intCast feels so weird and unnecessary

1733222620
hadronized!~hadronize@2001:41d0:a:fe76::1
pretty much all of Zig’s comptime functions take a comptime type (which is really annoying coming from languages with type inference), but then @intCast doesn’t while it would actually make sense? :D

1733222676
ifreund!2940d10f8b@user/ifreund
It used to, but it was changed

1733222734
ifreund!2940d10f8b@user/ifreund
https://github.com/ziglang/zig/issues/5909

1733222882
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, the motivational example is also something I don’t understand

1733222892
hadronized!~hadronize@2001:41d0:a:fe76::1
x += y; // x: u16, y: u8

1733222904
hadronized!~hadronize@2001:41d0:a:fe76::1
even though in terms of bits the operation is safe, it’s still two different types

1733222910
hadronized!~hadronize@2001:41d0:a:fe76::1
(that kind of stuff in Rust wouldn’t compile)

1733222929
hadronized!~hadronize@2001:41d0:a:fe76::1
if you force types to be the same, then that inference issue with @intCast would make the compiler nope out

1733222943
hadronized!~hadronize@2001:41d0:a:fe76::1
I don’t know, the solution with @as seems like patching the language at the wrong place to me

1733236576
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Is there a standard library function that can help me clone a []const u8?

1733236789
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
ksynwa: using an allocator: const cloned_value = try allocator.dupe(u8, <value>);

1733236803
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Thanks a lot rockorager 

1733236814
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
np

1733239389
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
I have a `struct CoolStruct { name: []const u8 }` and an ArrayList containing many CoolStructs. Will doing array_list.deinit() also free all the memory taken by the `name` fields of the contained CoolStructs? Or does that have to be done manually?

1733239433
torque!~tachyon@user/torque
manually. however, if you use an ArenaAllocator to allocate your names, you can use it to free them all at once

1733239476
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Thanks

1733240499
hadronized!~hadronize@2001:41d0:a:fe76::1
in theory, it should be possible to do it in deinit(), right?

1733240524
hadronized!~hadronize@2001:41d0:a:fe76::1
just slap a if (@hasField(T, "deinit")) and call it? :D

1733241060
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
hadronized: you mean in the array list?

1733242000
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: in ArrayList(T).deinit(), yeah

1733242007
hadronized!~hadronize@2001:41d0:a:fe76::1
I can see why you wouldn’t want to do that

1733242013
hadronized!~hadronize@2001:41d0:a:fe76::1
(in the end, it’s a convention flying around in the air)

1733242019
hadronized!~hadronize@2001:41d0:a:fe76::1
but well, I think it’s the way to do things in Zig, right? :)

1733242060
hadronized!~hadronize@2001:41d0:a:fe76::1
anytype basically doesn’t enforce anything, so putting in the doc of ArrayList(T).deinit() that “if T.deinit() exits, it’s called on all the elements before deallocating” is not completely absurd to me

1733242102
hadronized!~hadronize@2001:41d0:a:fe76::1
s/exits/exists

1733242191
ifreund!2940d10f8b@user/ifreund
I think it's a bit different, violating the implicit type constraints of an anytype parameter is a compile error not a potential double free at runtime

1733242262
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, wrong example, I should have probably taken the example of fs.Dir.Entry.next() which invalidates memory when called

1733242455
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yeah I wouldn’t like an implicit deinit 

1733242473
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
it would mean I need a managed object, or the array list would need to use the same allocator

1733242579
hadronized!~hadronize@2001:41d0:a:fe76::1
I mean, it’s probably something I will come as abstraction on my own, I think it makes some sense

1733242591
hadronized!~hadronize@2001:41d0:a:fe76::1
since Zig doesn’t have destructors, at least it helps limitting issues

1733242610
hadronized!~hadronize@2001:41d0:a:fe76::1
(especially for stuff like files, join handles, etc.)

1733243263
Earnestly!~earnest@user/earnestly
arena allocators have been used in industry for ages (Ada more or less uses them as standard)

1733243277
Earnestly!~earnest@user/earnestly
Where you basically have a rule to just never free memory

1733243657
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
How do I take a u64 and get a slice of u8s from it? I need to pass this integer to a hasher function.

1733243708
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Is there a way to convert the pointer from @intToPtr to a slice since the length is known?

1733243718
dutchie!~dutchie@user/dutchie
std.mem.asBytes

1733243749
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Thanks a lot

1733243777
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
I actually looked for something like this but missed it because I chose the wrong keywords to search for

1733251186
grayhatter!~grayhatte@user/grayhatter
> I really think that Zig being a simpler language is not a good bet as it increases (drastically) the cognitive complexity and risks of misusing / not understanding APIs

1733251239
grayhatter!~grayhatte@user/grayhatter
hadronized: what you're experencing isn't it becoming harder, you're just *now* aware of it. Rust has the **exact** same implications, you still have to understand all if it, if you want to be sure your code is correct.

1733251296
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m not sure to follow

1733251381
grayhatter!~grayhatte@user/grayhatter
also, I'd suggest a drinking game, everyone takes a drink everytime hadronized says "rust", and finishs it when he says "rust is better", but it's bad form to suggest games that are nearly guarenteed to result in fatal alcohol poisoning

1733251830
grayhatter!~grayhatte@user/grayhatter
hadronized: you still have to understand the API you're using or calling. Your claim is that Zig being simple is bad, because you *must* understand more to use it correctly. But that's true in all languages! Zig makes it easier to see the complexities of an API, where Rust tries to abstract them away. And, the problem is, it only tries to abstract them away, it doesn't always do that. A compentent

1733251832
grayhatter!~grayhatte@user/grayhatter
engineer will still need to understand the same complexities of the APIs they're using. Rust tries to hide these complexities because rust enjoys the meme "it's impossible for people to write good/correct/whatever code", so to most people it feels like it's easier, but that's only because you don't see how the gears are working. Where as Zig doesn't try to hide anything, it, as a counter point enjoys

1733251834
grayhatter!~grayhatte@user/grayhatter
the meme "edge cases matter" or "a language for maintaining robust, optimal software" If you're trying to write/fix/maintain some code, you have to understand how it works. 

1733251904
hadronized!~hadronize@2001:41d0:a:fe76::1
> Zig makes it easier to see the complexities of an API

1733251923
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m sorry but between an interface and anytype, I think you’re highly mistaken

1733251944
hadronized!~hadronize@2001:41d0:a:fe76::1
Rust doesn’t try to hide anything, that’s the opposite

1733251957
hadronized!~hadronize@2001:41d0:a:fe76::1
a Zig function signature actually hides the contract made with the caller

1733251964
hadronized!~hadronize@2001:41d0:a:fe76::1
Rust doesn’t and put it into the type system

1733251977
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
zig does that *if you use anytype*

1733251985
hadronized!~hadronize@2001:41d0:a:fe76::1
I don’t think you’re looking at this with the right approach

1733252008
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: so far, I haven’t seen an alternative solution

1733252032
hadronized!~hadronize@2001:41d0:a:fe76::1
for instance, having a function that takes some type provided by the user and does some things internally

1733252032
grayhatter!~grayhatte@user/grayhatter
hadronized: I **know** you're not looking at this with the right approach. You keep saying Zig is wrong because it's not like rust. That's similar to saying "this cat is broken because I can't ride it like my horse"

1733252033
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
io.AnyWriter or io.AnyReader with opaque pointers

1733252049
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: there’s a cost to those, though

1733252050
grayhatter!~grayhatte@user/grayhatter
well... duh

1733252089
hadronized!~hadronize@2001:41d0:a:fe76::1
also, it requires opaque pointers

1733252107
hadronized!~hadronize@2001:41d0:a:fe76::1
for something as simple as primitive types, it doesn’t work

1733252111
grayhatter!~grayhatte@user/grayhatter
hadronized: there's nothing wrong with using opaque pointers

1733252120
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
How doesn't it work?

1733252125
grayhatter!~grayhatte@user/grayhatter
if you disagree, you don't really understand how memory works in x86

1733252163
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Re: cost...I assume rust would act similar to using anytype and have different functions for each type?

1733252175
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I don't actually know how that works in rust with "zero cost abstraction"

1733252189
hadronized!~hadronize@2001:41d0:a:fe76::1
it would provide a specialized versions for each type after monomorphization, yes

1733252194
hadronized!~hadronize@2001:41d0:a:fe76::1
which is similar to Zig’s anytype

1733252212
hadronized!~hadronize@2001:41d0:a:fe76::1
but Zig’s anytype doesn’t have any way to convey the contract of how you’re going to use the data

1733252244
hadronized!~hadronize@2001:41d0:a:fe76::1
anytype / anyopaque, same boat

1733252262
hadronized!~hadronize@2001:41d0:a:fe76::1
(anyopaque is probably a different beast even)

1733252297
grayhatter!~grayhatte@user/grayhatter
hadronized: what if your assumption that a contract is the correct way was a flawed assumption?

1733252315
hadronized!~hadronize@2001:41d0:a:fe76::1
tell me how it’s flawed?

1733252331
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I think in std.net there is an example where they document the API with a "prototypical" type

1733252334
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
For a Stream

1733252345
hadronized!~hadronize@2001:41d0:a:fe76::1
I don’t think I’m too wrong to state that a compiler-encoded contract between a function and its user is a good way to build robust and industrial systems

1733252354
grayhatter!~grayhatte@user/grayhatter
hadronized: depends on what problem you're trying to solve

1733252370
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I do think it would be nice to convey up front which methods are called on an anytype, though

1733252381
grayhatter!~grayhatte@user/grayhatter
is zig trying to build robust industrial systems?

1733252397
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
But, it will fail to compile since you wouldn't have the method

1733252445
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
You can also manually add in all the if (@hasDecl...) { @compileError...

1733252466
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: in terms of generic code, Zig doesn’t provide any improvement over C++, which is something that bothers me a bit (reflection is good, but reflection is not exactly the same thing; different problem)

1733252476
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: that requires to look at the code

1733252506
hadronized!~hadronize@2001:41d0:a:fe76::1
if I give you fn foo(x: anytype), you have no idea what foo is doing with x

1733252547
hadronized!~hadronize@2001:41d0:a:fe76::1
after all, it might be an expectation bias from me

1733252554
hadronized!~hadronize@2001:41d0:a:fe76::1
I know Zig wants to enhance over C

1733252558
grayhatter!~grayhatte@user/grayhatter
follow up question, the default way to allocate memory is with Box<>, right? And depending on how you use it, it might be a stack, or a heap allocation, right? Is it save to naively switch between the two? is it safe to naively switch between the two for life critical systems?

1733252568
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: not really, no

1733252572
grayhatter!~grayhatte@user/grayhatter
right

1733252599
grayhatter!~grayhatte@user/grayhatter
so, rust isn't good for life critical systems, unless you know the complexities of how the API, and code generation works

1733252620
grayhatter!~grayhatte@user/grayhatter
Zig **demands** you understand it in all cases, rust tries to make it so you don't have to think about it.

1733252628
grayhatter!~grayhatte@user/grayhatter
they're trying to solve different problems

1733252635
hadronized!~hadronize@2001:41d0:a:fe76::1
you’re taking shortcuts I really can’t follow

1733252636
grayhatter!~grayhatte@user/grayhatter
that's the point you refuse to consider

1733252652
grayhatter!~grayhatte@user/grayhatter
no, I'm not taking shortcuts, you're not trying to understand what I'm trying to explain

1733252653
hadronized!~hadronize@2001:41d0:a:fe76::1
how you can talk about life critical systems by introducing Box<> as an issue in Rust

1733252682
hadronized!~hadronize@2001:41d0:a:fe76::1
if you want to allocate memory in Rust, you use fonctions and types that allocate memory

1733252688
hadronized!~hadronize@2001:41d0:a:fe76::1
just like you’d do in Zig

1733252707
hadronized!~hadronize@2001:41d0:a:fe76::1
the difference is that Rust will take care of many pitfalls for you, by yelling at you when you write wrong code

1733252710
grayhatter!~grayhatte@user/grayhatter
does rust say that the programmer needs to understand where the memory lives?

1733252716
hadronized!~hadronize@2001:41d0:a:fe76::1
while Zig will happily compile it and will panic at runtime

1733252725
hadronized!~hadronize@2001:41d0:a:fe76::1
of course it does

1733252735
grayhatter!~grayhatte@user/grayhatter
or does rust say that the compilers type system will handle memory management for you?

1733252751
hadronized!~hadronize@2001:41d0:a:fe76::1
Rust doesn’t handle memory management for you.

1733252758
hadronized!~hadronize@2001:41d0:a:fe76::1
Rust help you manage memory more safely

1733252760
hadronized!~hadronize@2001:41d0:a:fe76::1
helps*

1733252761
grayhatter!~grayhatte@user/grayhatter
hadronized: cite your source, I've never seen anything from rust make the claim the programmer needs to know where memory lives

1733252880
grayhatter!~grayhatte@user/grayhatter
hadronized: I hope you don't mind me being blunt, because I'd want someone to tell me roles reversed... but you're incredibly painful to have a conversation with... it might just be about how often you like to bring up zig is trash, rust is perfect meme, but it's endlessly annoying

1733252900
hadronized!~hadronize@2001:41d0:a:fe76::1
you’re the one saying it’s trash, I never said that

1733252904
hadronized!~hadronize@2001:41d0:a:fe76::1
Zig is flawed, yeah.

1733252910
hadronized!~hadronize@2001:41d0:a:fe76::1
its design is flawed, yeah, I do believe it

1733252914
hadronized!~hadronize@2001:41d0:a:fe76::1
I would never say it’s trash

1733252940
hadronized!~hadronize@2001:41d0:a:fe76::1
you were the one using the word “meme”

1733252963
hadronized!~hadronize@2001:41d0:a:fe76::1
there are real-world problems out there that I think can be fixed differently from what Rust does

1733252972
hadronized!~hadronize@2001:41d0:a:fe76::1
so I look into every languages, seeing what they provide

1733253019
hadronized!~hadronize@2001:41d0:a:fe76::1
I do believe, too, that Rust is very complex

1733253034
hadronized!~hadronize@2001:41d0:a:fe76::1
however, it’s not complicated, and I think given the problem it tries to solve, the complexity is probably justified

1733253098
hadronized!~hadronize@2001:41d0:a:fe76::1
I do try to convey myself that I can stop thinking in terms of correctness and static guarantees, but everytime I mention that, you (and a couple others) seem to be highly bothered by the idea

1733253139
hadronized!~hadronize@2001:41d0:a:fe76::1
you can care about all of the low-level technical details and still want a programm statically correct

1733253204
hadronized!~hadronize@2001:41d0:a:fe76::1
sometimes I wonder “what would be the Linux kernel if Linus announced Zig instead of Rust” (assuming Zig is in 1.0…)

1733253240
hadronized!~hadronize@2001:41d0:a:fe76::1
and I start asking myself what Zig provides more than C, besides the obvious and well appreciated tagged enums, error handling, comptime and some alignment features

1733253319
hadronized!~hadronize@2001:41d0:a:fe76::1
I think we the discussion is hard to have because you think I’m aggressive towards Zig (transitively: Zig users), and I do think you keep looking at problems via a very narrow angle and limited scoped

1733253361
hadronized!~hadronize@2001:41d0:a:fe76::1
and that’s probably not a good mix, so I’ll move my questions about how good software could be made in Zig to another channel; I don’t want to derail the room nor bother people (anymore than I already have)

1733253371
grayhatter!~grayhatte@user/grayhatter
The replies I want to make would be dangerously close to breaking the channel rules on language wars, and ranting/roasting other lanugages or communities... so instead I'm just gonna  *sigh* frustratingly, and go back to writing code 

1733253380
grayhatter!~grayhatte@user/grayhatter
ACTION &

1733253384
hadronized!~hadronize@2001:41d0:a:fe76::1
there is no language wars

1733253408
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m talking Rust because it’s the language I’m mostly fluent in today, with Haskell and actually C, but we could pick other ones

1733254991
andrewrk!~andrewrk@mail.ziglang.org
the topic is ok as long as nobody is trashing any project or group of people, and pause the discussion for more on topic questions such as "how do I do xyz in zig?"

1733255052
andrewrk!~andrewrk@mail.ziglang.org
that said I don't think this is the best place to have a "zig vs rust" debate, it's obviously biased and people here don't really care they just want to work on their zig stuff

1733255141
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, agreed, I won’t mention that up anymore

1733262529
reykjalin!7e28cf3a41@user/reykjalin
hmm can std.posix.chdir not change the directory of the shell running the program?

1733262570
reykjalin!7e28cf3a41@user/reykjalin
I wanted to create a little project picker for fun so I could pick a directory from a list and jump there immediately but it looks like chdir isn't changing the shell's CWD once the process exits

1733262571
grayhatter!~grayhatte@user/grayhatter
reykjalin: that's a very complicated question for the amount of detail you've provided

1733262584
reykjalin!7e28cf3a41@user/reykjalin
I was in the process of giving more details

1733262617
reykjalin!7e28cf3a41@user/reykjalin
Think of it as using fzf to jump to a directory

1733262664
grayhatter!~grayhatte@user/grayhatter
reykjalin: that's the expected behavior, the CWD is process based, so when you change CWD, you change it for the new process created by the shell. the way fzf works, is it's a shell script that returns a directory to the shell script, and that shell script changes the directory for the shell

1733262686
reykjalin!7e28cf3a41@user/reykjalin
yeah I figured it'd be something like that

1733262687
reykjalin!7e28cf3a41@user/reykjalin
ACTION sighs

1733262720
grayhatter!~grayhatte@user/grayhatter
I wish I'd phrased the 2nd half differently, so let me try again, you can do what you want, you just have to intergrate it into your shell, have your program return the ending directory

1733262768
reykjalin!7e28cf3a41@user/reykjalin
yeah that's exactly what I was going to try next :) . Pipe the output to cd or something

1733262772
grayhatter!~grayhatte@user/grayhatter
or, you could change the working directory, and spawn a new shell... depending on what you want the UX to be, that might be easy or hard

1733262808
reykjalin!7e28cf3a41@user/reykjalin
hmmm, that's not the worst workaround I suppose, but feels a little off. I think I'll go with piping it to cd or something for now :)

1733262868
grayhatter!~grayhatte@user/grayhatter
I don't think you can pipe to cd? but you could try something like alias program_name='cd $(your program name)'

1733262891
reykjalin!7e28cf3a41@user/reykjalin
yeah I suppose I phrased that badly; sorry. That's along the things of what I was going to try

1733262904
reykjalin!7e28cf3a41@user/reykjalin
or just phrased it wrong I suppose :P

1733263007
grayhatter!~grayhatte@user/grayhatter
piping a directory into cd isn't the worst use/expectation I've heard... I might have to add it to my shell

1733263118
reykjalin!7e28cf3a41@user/reykjalin
Yeah I'm getting a little tired of jumping between several directories with `z` because a lot of the work projects I work on have similar names

1733263129
reykjalin!7e28cf3a41@user/reykjalin
figured I'd make something a little more precise with libvaxis

1733263292
grayhatter!~grayhatte@user/grayhatter
interesting, what do you mean more precise?

1733263404
hadronized!~hadronize@2001:41d0:a:fe76::1
reykjalin: I made a tool a couple days ago to solve that problem, by opening a small file browser that can be used on the CLI

1733263419
hadronized!~hadronize@2001:41d0:a:fe76::1
https://git.sr.ht/~hadronized/flirt

1733263429
reykjalin!7e28cf3a41@user/reykjalin
grayhatter: As a (probably bad) example: 1 of the projects I work on is called "abc" and another is called "abcde". If I `z ab` or `z abc` it's going to jump to a directory based on whatever I've used most often recently

1733263457
reykjalin!7e28cf3a41@user/reykjalin
multiply that by 5 different folder locations all with similar names and repeated invocations of `z ab` get really tiring :)

1733263519
grayhatter!~grayhatte@user/grayhatter
that's what I assumed first, but wanted to make sure before I suggested hsh, which is the shell I wrote that uses fuzzy auto tab complete, so you could start typing something in the middle of the target... I suggest that as more of a troll answer than anything else, because you'd have to hate yourself with how rough/buggy it actually is currently lol

1733263540
reykjalin!7e28cf3a41@user/reykjalin
hadronized: nice! I'm thinking something similar, except I have a finite list of projects on my computer I work on so traversing the file tree isn't super useful for me

1733263562
grayhatter!~grayhatte@user/grayhatter
as for a real suggestion, you can replace tab complete with your own implementation, I know people have used fzf for that

1733263565
reykjalin!7e28cf3a41@user/reykjalin
grayhatter: haha I like making my own tools like this :P

1733263568
hadronized!~hadronize@2001:41d0:a:fe76::1
ah yeah, for that I have something based off skim

1733263586
reykjalin!7e28cf3a41@user/reykjalin
Yeah fzf is an option, but I don't need to jump around the whole computer, just like 10-20 different directories. A finite list like that feels cleaner to look at

1733263592
hadronized!~hadronize@2001:41d0:a:fe76::1
https://git.sr.ht/~hadronized/config/tree/master/item/bin/pick-session

1733263596
reykjalin!7e28cf3a41@user/reykjalin
And using zig to build a tool like that is a fun exercise too :)

1733263597
hadronized!~hadronize@2001:41d0:a:fe76::1
I do it for tmux session

1733263602
grayhatter!~grayhatte@user/grayhatter
reykjalin: honestly, for what you're describing, making something compeletely custom to do your tab complete is what I'd suggest

1733263636
reykjalin!7e28cf3a41@user/reykjalin
It's also a fun way to play around with implementing my own fuzzy matching algorithms when I start feeling adventurous

1733263649
grayhatter!~grayhatte@user/grayhatter
as you said, it's a perfect toy project that would just be fun

1733263658
reykjalin!7e28cf3a41@user/reykjalin
exactly

1733265056
grayhatter!~grayhatte@user/grayhatter
andrewrk: will the zig fuzzer ever attempt to "inject into" undefined variables? e.g. `value:usize = undefined; if (value == 3) crash();` 

1733265072
grayhatter!~grayhatte@user/grayhatter
which I ask because I just saw someone write `return undefined;`

1733267055
grayhatter!~grayhatte@user/grayhatter
is there a way to mark a Muild.Module as weak?

