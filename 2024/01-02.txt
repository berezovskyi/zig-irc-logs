1704169002
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Hmm, I'm trying to get a sense of the code generated for certain language constructs. If you use anytype in Zig, will that result in a function being instantiate for each unique value passed, or would it instantiate a new function per type signature, and then pass arguments? (The latter effectively making it the same as if you had a implicit hidden type argument, and then another argument that 

1704169002
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
used it). I just want to know the impact on code size/compile times if I for example use anytype functions to do stuff like walk values recursively by branching on their compile-time type info.

1704170567
ifreund!2940d10f8b@user/ifreund
Overkill: the latter

1704170675
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
The function will be instantiated once per non-comptime-only type, and once per value of comptime-only type

1704170756
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Oh nice, this is good to know. Thank you!

1704183870
fsx!~FSX@durian.61924.nl
andrewrk: Trying to build nng with zig. Mostly to learn zig build system.

1704220874
plujon!~user@c-24-17-185-74.hsd1.wa.comcast.net
Greetings; I've never used Zig before, and I'm trying to build libsodium with it on linux.  I have zig 0.12.0-dev, and when I try to build the project, I get:

1704220890
plujon!~user@c-24-17-185-74.hsd1.wa.comcast.net
build.zig:15:31: error: root struct of file 'fs.Dir' has no member named 'openIterableDir'

1704220986
plujon!~user@c-24-17-185-74.hsd1.wa.comcast.net
Was fs.Dir.openIterableDir removed from Zig?

1704221085
plujon!~user@c-24-17-185-74.hsd1.wa.comcast.net
Or, might this be because I'm using /sna/zig/... ?

1704221089
plujon!~user@c-24-17-185-74.hsd1.wa.comcast.net
Or, might this be because I'm using /snap/zig/... ?

1704222519
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
Yes, it used to exist and no longer does on master.

1704222757
plujon!~user@c-24-17-185-74.hsd1.wa.comcast.net
Ah, thanks.  I'll see if I can install zig-stable, or update the build.zig file.

1704227225
dy!sid3438@user/dy
Is there something I can import from the standard library if I'd like to parse a C file and visit the contents of its AST?

1704227303
dy!sid3438@user/dy
I only actually care about structs, unions and typedefs and the file need not actually be complete. I mostly just want to parse the aforementioned in isolation.

1704235224
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Hmmm, if I want to have a nested optional type, like a `??u32` or something, how do I accomplish the equivalent of a `Some(None)` in the language? A bare value can be a top-level null, or the innermost value, but I want a null at an inner level. Do I need to provide an @as(T, ...) cast to disambiguate this?

1704235285
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
(Err I suppose `@as` it isn't a "cast", more like "type ascription", but anyway.)

1704236214
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Ah, no. Seems like var opt : ??u32 = @as(?u32, null); will also create a top-level null optional, I guess due to type coercion? Either way, trying to unwrap this with `if (opt) |inner_opt| { ... }` results in the branch not being taken, since the null is shifted to the outermost optional level.

1704236301
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
I guess I'll rewrite this as a tri-state tagged union instead.

