1711467499
Earnestly!~earnest@user/earnestly
(Hopefully this never happens to zig: https://isocpp.org/files/papers/P2809R3.html )

1711471508
mortmann!~mortmann@p5dcb2815.dip0.t-ipconnect.de
zig is still based on llvm, is it not?

1711472200
mortmann!~mortmann@p5dcb2815.dip0.t-ipconnect.de
Earnestly: https://github.com/ziglang/zig/issues/1658

1711472352
Earnestly!~earnest@user/earnestly
mortmann: By never I mean in the future when it's not tied to llvm, that these sorts of situations will never happen whereby some chain of logic leads zig to this state

1711472390
Earnestly!~earnest@user/earnestly
(This and OpenBSDs efforts to stop gcc removing null checks are making me distrust gcc/clang developers rather than blaming the languages and UB)

1711472428
vimproved!~vimproved@user/vimproved
"the gcc/clang developers" are not a monolith in any way

1711472464
vimproved!~vimproved@user/vimproved
it's a bunch of different people with conflicting use cases, imo distrust gets you nowhere

1711472465
Earnestly!~earnest@user/earnestly
Yes very true but ultimately those designs were accepted and not regarded as bugs

1711472665
Earnestly!~earnest@user/earnestly
And it's that which I hope zig avoids. I think new languages in general are made with a greater dislike of UB (or unspecified behaviour) so that even if there will be some in practice there isn't going to be a strong motivation to exploit it.

1711480424
andrewrk!~andrewrk@mail.ziglang.org
mortmann, what do you mean by "based on"? it's an optional dependency

1711480490
andrewrk!~andrewrk@mail.ziglang.org
the zig language specification will never have a dependency on LLVM

1711481416
Earnestly!~earnest@user/earnestly
llvm is a detail that might cause problems (such as how rust had to workaround it) but it's not inherent to zig and how it intends to work

1711481440
Earnestly!~earnest@user/earnestly
(I wouldn't blame zig for llvm's issues)

1711481972
Earnestly!~earnest@user/earnestly
vimproved: Fwiw, I'm only aware of this effort within gcc: https://gcc.gnu.org/wiki/boringcc

1711484018
jemius!~imperator@2001:9e8:32c0:c500:4567:dc16:4894:e9b0
(that's a confusing username. I now thought there might be a gcc effect related to vim ^^)

1711484716
mortmann!~mortmann@p5dcb2815.dip0.t-ipconnect.de
andrewrk: i mean the reference implementation

1711485371
mortmann!~mortmann@p5dcb2815.dip0.t-ipconnect.de
if i naively download zig toolchain, use it to create a hello world executable for x86_64 in most simple way, i end up with code generated with the help of llvm, do i not?

1711485707
mortmann!~mortmann@p5dcb2815.dip0.t-ipconnect.de
if i add "-fno-llvm" zig throws an "error: invalid token in LD script" at me

1711485717
Earnestly!~earnest@user/earnestly
mortmann: I'm not sure what point you're trying to make, zig uses llvm by default today

1711485792
Earnestly!~earnest@user/earnestly
But it can be used without llvm with the roadmap including its eventual removal. See https://github.com/ziglang/zig/issues/16270

1711493988
andrewrk!~andrewrk@mail.ziglang.org
mortmann, I think you want -fno-lld as well

1711494031
andrewrk!~andrewrk@mail.ziglang.org
I expect the use case you are describing to not touch LLVM in a matter of months (i.e. the default debug x86_64 backend will switch away from LLVM)

1711497268
mortmann!~mortmann@p5dcb2815.dip0.t-ipconnect.de
now with no-llvm and no-lld switches working side effect is that -femit-asm is ignored, silently doest output anymore, so im looking forward to the new stuff to settle :)

