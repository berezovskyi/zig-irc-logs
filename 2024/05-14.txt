1715659904
txdv!~txdv@78.56.38.107
I am getting errors like ld.lld: undefined symbol: llvm::sys::getDefaultTargetTriple, also various missing c++ symbols, I am building with this: zig build --search-prefix /opt/bentkus/clang/current -Denable-llvm=true -Dstatic-llvm=false --release=fast

1715661853
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
man... this custom integer length for Zig is a pure gold for me lol

1715661885
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
like u7 u36 etc... especially if I code software which interfaces with some HDL simulators with various signal length

1715661910
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
(oh man... i just hope at this point that Zig will drop async/await and become easier and better be finished :P )

1715670955
torque!~tachyon@user/torque
I'm not sure what the current status of async/await really has to do with that

1715671062
torque!~tachyon@user/torque
personally, I think it would be nice if zig retained async/await and innovated in that space. It was one of the primary features to catch my attention. Having worked heavily with asynchronous code in python, coroutines are much easier to understand and reason about at a high level than callbacks are

1715687714
drakonis!drakonis@user/meow/drakonis
https://github.com/ziglang/zig/issues/17584 so, if i understood this correctly, the compiler would stop halting in the presence of unused variables, right?

1715687732
drakonis!drakonis@user/meow/drakonis
if one of those paths are taken, anyways.

1715701370
txdv!~txdv@78.56.38.107
Does zig support linking c++ lib statically? like linkLibCpp but like linkStaticLibCpp?

1715701423
txdv!~txdv@78.56.38.107
I'd need to compile some stdcpp lib statically and just link it, right?

1715717379
freshcoffee!~fresh@user/freshcoffee
txdv: are you using the zig build system? or `zig build-exe` or `zig c++` ?

1715717797
freshcoffee!~fresh@user/freshcoffee
ah reading your first comment -- the build system. So go ahead and try linkLibCpp(), pretty sure you'll end up with static libc++.a

