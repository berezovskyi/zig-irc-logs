1716626395
Earnestly!~earnest@user/earnestly
A pretty animation to show that something is happening, not very useful in terms of information content but it looks nice

1716626493
Earnestly!~earnest@user/earnestly
(Similar to ninja by default, useful to see what's taking awhile, but usually for logging builds the full, linear output is retained)

1716633066
src!~src@user/src
I don't want to start anything nor get mixed up in internet feuds...

1716633090
src!~src@user/src
but I do have to admit, I felt tempted for a second there to correct the score https://www.slant.co/versus/22814/35558/~nim_vs_zig

1716633255
src!~src@user/src
there are cool things about Nim but -) relies more on a few core volunteer members -) has less solid financials -) seems to have too many broad ideas (compiling to everything, optional GC, etc) -) is convoluted and confusing (supports any programming paradigm under the sun) -) suffers from subtle compiler bugs -) has a split community (a fork currently called nimskull is on its way) ... etc pp

1716633263
src!~src@user/src
now that this is off my chest back to being productive :)

1716637100
sentry!~snetry@87.122.104.239
hey, quick question

1716637111
sentry!~snetry@87.122.104.239
whats the functional difference between `-Doptimize=ReleaseSafe` and `--release=safe`

1716637295
tranzystorekk!tranzystor@2607:5300:60:8796::108
functional probably none, but --release is built into zig build, while -Doptimize is provided if you use b.standardOptimizeOption() in build.zig

1716639724
ifreund!2940d10f8b@user/ifreund
sentry: https://github.com/ziglang/zig/issues/19732

1716639767
ifreund!2940d10f8b@user/ifreund
tldr; --release=safe gets overridden by an explicit preference in build.zig

1716643138
src!~src@user/src
I tried finding the .alloc() method of a general purpose allocator in the zig source, so the `allocator.alloc()` call from here https://dpaste.com/BSXTY8DYF but I'm having trouble finding it;

1716643170
src!~src@user/src
found std/hheap/general_purpose_allocator.zig, there's a alloc() funtion in there but its function signature doesn't seem to match

1716643218
src!~src@user/src
in `compiler_rt/emutls.zig` seems to be an alloc() method for the simple allocator interface not matching as well, the allocSlice() method seems to meatch though, bit confused, can someone point me in the right direction

1716643383
src!~src@user/src
damn I'm an idiot... my lsp lookup didn't work properly, now it shows me std/mem/Allocator.zig as the source

1716643386
src!~src@user/src
sorry

1716649872
gcarlos8!~gcarlos@37.218.246.133
how do I verify the signature of a downloaded release? I have just downloaded the signature file into a <relase-name>.minisig file and ran `minisig -Vm <release-name> -P RWSGOq2NVecA2UPNdBUZykf1CCb147pkmdtYxgb3Ti+JO/wCYvhbAb/U` but it failed

1716651315
BratishkaErik!fd46852e72@user/BratishkaErik
gcarlos8: minisign -V -P "RWSGOq2NVecA2UPNdBUZykf1CCb147pkmdtYxgb3Ti+JO/wCYvhbAb/U" -x zig-linux-x86_64-0.12.0.tar.xz.minisig -m zig-linux-x86_64-0.12.0.tar.xz

1716662541
sentry!~snetry@87.122.104.239
is there any expectation on what @src is suppose to return?

1716662584
sentry!~snetry@87.122.104.239
I've seen some projects that make the assumption it always contains an absolute path, however I've ran into some cases where it was a relative path instead and completely broke the build

1716663408
grayhatter!~grayhatte@user/grayhatter
sentry: the comments for it make me think it's undefined https://github.com/ziglang/zig/blob/master/lib/std/builtin.zig#L243-L250

1716663454
sentry!~snetry@87.122.104.239
dang

1716663535
grayhatter!~grayhatte@user/grayhatter
having it as an absolute value leaks information about the build system which is undesirable in some contexts, so I'd assert that even if it's not a mistake to expect an absolute value today, it will be a mistake soon enough

1716663578
grayhatter!~grayhatte@user/grayhatter
completely broke the build is an interesting problem though, how'd it do that?

1716663596
grayhatter!~grayhatte@user/grayhatter
or did you just mean it couldn't compile that file?

1716664770
sentry!~snetry@87.122.104.239
grayhatter: it made use of @src().file with openAbsoluteDir

1716664799
sentry!~snetry@87.122.104.239
here is an example https://github.com/mitchellh/libxev/blob/a284cf851fe2f88f8947c01160c39ff216dacea1/build.zig#L208

1716671411
paperManu!~paperManu@107.159.166.232
hello there! I'm new to zig, so obviously I stumble upon common beginner issues. I'm trying to make the zig build for ggml work again: https://github.com/ggerganov/ggml

1716671513
paperManu!~paperManu@107.159.166.232
I've made (I think) good progress, but now it seems that a lot of C includes in src/ggml.c are simply not done correctly (lacking a better word for that). Things as obvious as clock_gettime are seen as not declared, even though time.h is included

1716671540
paperManu!~paperManu@107.159.166.232
which path/tool could I use to get an idea of what is happening there?

1716671725
torque!~tachyon@user/torque
it's harder to help without specific error messages, your build script and your build command line

1716671783
paperManu!~paperManu@107.159.166.232
indeed, I should push all that

1716671844
paperManu!~paperManu@107.159.166.232
in the meantime, I decided to start a mere git bisect, as this build seemed to work in the past, albeit with zig 0.11 instead of 0.13

1716671859
paperManu!~paperManu@107.159.166.232
so I guess I'll dive into the commits and come back with more questions later on ;)

