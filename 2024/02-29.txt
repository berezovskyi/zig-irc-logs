1709167439
daurnimator!~daurnimat@vultr.daurnimator.com
arya_elfren: in many such circumstances you usually just incorporate a pointer rather than an embedded struct itself

1709167454
daurnimator!~daurnimat@vultr.daurnimator.com
otherwise you're tying *your* defined representation to that of your dependencies/standard library

1709168776
andrewrk!~andrewrk@mail.ziglang.org
arya_elfren, generally: don't impose well-defined memory requirements on your structs unless you need it; then you can embed stuff like atomic ints or even bit-stuff them (not atomics specifically but other kinds of state can be bit-stuffed) then you can have methods to convert to the canonical non well defined memory types, perform the operation, then store the result in the well-defined memory

1709168798
andrewrk!~andrewrk@mail.ziglang.org
that's why the canonical form for things is non well defined memory layout

1709198822
ak-1!~ak-1@ip-037-201-198-027.um10.pools.vodafone-ip.de
hey, just stared to play with zig. i wanted to try out the textured cube on machengine.org but then stumbled upon this hash mismatch issue

1709198916
ak-1!~ak-1@ip-037-201-198-027.um10.pools.vodafone-ip.de
i tried to update the hashes manually in build.zig.zon but it still complains about hash mismatch

1709199017
ak-1!~ak-1@ip-037-201-198-027.um10.pools.vodafone-ip.de
i also could not find an option for zig to automatically update the hashes

1709199331
ak-1!~ak-1@ip-037-201-198-027.um10.pools.vodafone-ip.de
okay it looks like it expects me to also update the hashes recursively within the .cache directory...

1709201496
ak-1!~ak-1@ip-037-201-198-027.um10.pools.vodafone-ip.de
just found the bit about nominated zig versions. now it builds

1709207339
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
\o/

1709218160
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
I forgot who pasted that threadsafe queue, but I found some bugs in it and would like to put a fixed version up somewhere. Is whoever it was still here?

1709218210
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
Ahah, I have history! It was rockorager.

1709218778
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
leeward: please share!

1709218793
rockorager!d72cfa7d05@2a03:6000:1812:100::3ff
what were the bugs?

1709218956
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
Still working on proving out the last one, but one is this: Try to push to a full queue, and it will block waiting for a futex. The futex can be signalled spuriously (or maybe 2 threads are both trying to push to a full queue) and the result is that the write code executes when the queue's full. Change the `if` to a `while` on the `self.isFull()` test to fix.

1709218975
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
The other one I don't remember exactly, but it broke when I wrote a multithreaded test.

1709219041
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
https://zigbin.io/5db9ec <- the last test is incorrect, because it still doesn't fail the assertion on line 36 but I have to go to an appointment.

