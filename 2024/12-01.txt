1733053716
hadronized!~hadronize@2001:41d0:a:fe76::1
what is the convention for enum‚Äôs variants case?

1733053726
hadronized!~hadronize@2001:41d0:a:fe76::1
lower_case or PascalCase? I have found inconsistent styles

1733053798
ifreund!2940d10f8b@user/ifreund
snake_case

1733053806
hadronized!~hadronize@2001:41d0:a:fe76::1
same for errors?

1733053813
ifreund!2940d10f8b@user/ifreund
errors are PascalCAse

1733053814
hadronized!~hadronize@2001:41d0:a:fe76::1
like, am I correct doing something like

1733053820
hadronized!~hadronize@2001:41d0:a:fe76::1
args.next() orelse return error.missing_path;

1733053833
ifreund!2940d10f8b@user/ifreund
the language reference has a style guide, it's up to date afaik

1733053863
hadronized!~hadronize@2001:41d0:a:fe76::1
ah, I‚Äôll have a look at it then, I probably just missed it

1733063601
Earnestly!~earnest@user/earnestly
Seems to be TitleCase

1733063659
Earnestly!~earnest@user/earnestly
E.g. MissingPath as it's a type

1733078216
hadronized!~hadronize@2001:41d0:a:fe76::1
wait, so {} has the void type? it‚Äôs weird to pass it to function as arguments

1733078223
hadronized!~hadronize@2001:41d0:a:fe76::1
https://git.sr.ht/~hadronized/advent-of-code-2024/tree/master/item/src/main.zig

1733078232
hadronized!~hadronize@2001:41d0:a:fe76::1
(the std.mem.sort function)

1733078423
torque!~tachyon@user/torque
you can also use void{}, which I prefer but there was some discussion of removing that syntax (it is a bit odd)

1733078472
hadronized!~hadronize@2001:41d0:a:fe76::1
I don‚Äôt understand why it‚Äôs doing this vs. just using .{}

1733078475
hadronized!~hadronize@2001:41d0:a:fe76::1
(empty struct)

1733078499
hadronized!~hadronize@2001:41d0:a:fe76::1
also, I don‚Äôt think that context thing is used that much? (I get it‚Äôs for some sort implementations that would require to allocate or do external side effects / whatever)

1733078511
hadronized!~hadronize@2001:41d0:a:fe76::1
then sortContext would be more suited and have sort does the {} automatically, no?

1733078538
torque!~tachyon@user/torque
empty struct is a distinct type from void

1733078574
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah but its size is 0, right? so why was std.mem.sort made with void instead of empty struct?

1733078617
torque!~tachyon@user/torque
you could call it with an empty struct, but your context would have to accept that struct type

1733079109
grayhatter!~grayhatte@user/grayhatter
an empty struct can exist in memory a void can not

1733079147
hadronized!~hadronize@2001:41d0:a:fe76::1
is there any other example of using void like that in the standard library?

1733079170
grayhatter!~grayhatte@user/grayhatter
...actually, I don't know if the 2nd part is true for Zig, that's an assumption I've never needed to prove

1733079264
grayhatter!~grayhatte@user/grayhatter
hadronized: https://ziglang.org/documentation/0.13.0/std/#std.buf_set.BufSet.BufSetHashMap

1733079283
hadronized!~hadronize@2001:41d0:a:fe76::1
oh, interesting, thank you

1733079291
hadronized!~hadronize@2001:41d0:a:fe76::1
I guess I¬†can map it in my mind now

1733079297
hadronized!~hadronize@2001:41d0:a:fe76::1
it looks pretty similar to what a never type would be

1733079330
grayhatter!~grayhatte@user/grayhatter
yeah

1733079338
grayhatter!~grayhatte@user/grayhatter
void is just NULL as applied to types

1733079360
hadronized!~hadronize@2001:41d0:a:fe76::1
it‚Äôs the inhabited type, yeah

1733079366
hadronized!~hadronize@2001:41d0:a:fe76::1
uninhabited*

1733079369
hadronized!~hadronize@2001:41d0:a:fe76::1
wait, not sure

1733079369
grayhatter!~grayhatte@user/grayhatter
struct{} != void the same as NULL != 0

1733079371
hadronized!~hadronize@2001:41d0:a:fe76::1
(sorry, French :D)

1733079382
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, Rust has a funny difference here

1733079388
hadronized!~hadronize@2001:41d0:a:fe76::1
struct{} != enum{}

1733079389
hadronized!~hadronize@2001:41d0:a:fe76::1
:D

1733079397
hadronized!~hadronize@2001:41d0:a:fe76::1
i.e. struct{} has a size (0)

1733079402
hadronized!~hadronize@2001:41d0:a:fe76::1
enum{} has no size

1733079434
Gliptic!~glip@2a01:4f8:c012:91f3::1
sum vs product type

1733079475
hadronized!~hadronize@2001:41d0:a:fe76::1
funnily enough, size_of::<enum{}>() is still 0

1733079485
hadronized!~hadronize@2001:41d0:a:fe76::1
but yeah, there is no way to create an empty enum

1733079492
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not so much that the size is 0, it's that there are zero values of it

1733079493
hadronized!~hadronize@2001:41d0:a:fe76::1
so I guess that‚Äôs what ‚Äúvoid‚Äù is in Zig

1733079503
hadronized!~hadronize@2001:41d0:a:fe76::1
Gliptic: yeah yeah

1733079516
hadronized!~hadronize@2001:41d0:a:fe76::1
I wonder how related are enum{} and !

1733079530
hadronized!~hadronize@2001:41d0:a:fe76::1
oh, also, something I think is a bit annoying in Zig (I guess I‚Äôll get used to it‚Ä¶) is try

1733079549
hadronized!~hadronize@2001:41d0:a:fe76::1
there is .? for unwrapping options (postfix), but no .! for trying error sets

1733079624
Gliptic!~glip@2a01:4f8:c012:91f3::1
I think there was a justification for that syntax so that trys shouldn't be chained, but I don't totally buy it

1733079650
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
catch unreachable

1733079653
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah but‚Ä¶ I¬†would like to chain :D

1733079664
hadronized!~hadronize@2001:41d0:a:fe76::1
I could understand ‚Äúdo not chain!‚Äù if Zig allowed shadowing

1733079668
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
(fallible() catch unreachable).next()

1733079669
hadronized!~hadronize@2001:41d0:a:fe76::1
but without chaining and shadowing‚Ä¶

1733079690
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
It's ugly, and for good reason IMO

1733079710
hadronized!~hadronize@2001:41d0:a:fe76::1
shadowing is ugly?

1733079723
hadronized!~hadronize@2001:41d0:a:fe76::1
https://git.sr.ht/~hadronized/advent-of-code-2024/tree/master/item/src/main.zig#L49

1733079728
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
No - the chainable way I just sent is ugly

1733079734
hadronized!~hadronize@2001:41d0:a:fe76::1
like, all these lined, spaced

1733079741
hadronized!~hadronize@2001:41d0:a:fe76::1
I would just have wanted to call them all input :P

1733079767
hadronized!~hadronize@2001:41d0:a:fe76::1
rockorager: yeah I mean, it‚Äôs nice with .?

1733079772
hadronized!~hadronize@2001:41d0:a:fe76::1
but if we had .!

1733079781
hadronized!~hadronize@2001:41d0:a:fe76::1
fallible().!.next()

1733079782
hadronized!~hadronize@2001:41d0:a:fe76::1
no?

1733079872
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Not a fan, but I also like go's error handling

1733080011
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
what would you have called input?

1733080043
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Usually if I end up wanting to shadow I wrap it in a block, eg {...}

1733080054
hadronized!~hadronize@2001:41d0:a:fe76::1
the link I¬†pasted above

1733080061
hadronized!~hadronize@2001:41d0:a:fe76::1
the output of splitScalar, and tokenizeScalar

1733080068
hadronized!~hadronize@2001:41d0:a:fe76::1
they are basically just subpart of the input

1733080090
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ah I see

1733080134
hadronized!~hadronize@2001:41d0:a:fe76::1
there‚Äôs no way wrap stuff in a block here, since I‚Äôm nested

1733080147
hadronized!~hadronize@2001:41d0:a:fe76::1
also, we have to label blocks to be able to use them as expressions, right?

1733080175
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
As expressions, yes

1733080187
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah that‚Äôs uglier than shadowing to me

1733080198
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
And yeah, you couldn't do it with blocks since input is an argument

1733080211
hadronized!~hadronize@2001:41d0:a:fe76::1
:(

1733080260
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I do a lot of blocks in tests

1733080369
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/rockorager/zeit/blob/4bf983f28b89974bddcbde4ab87eaeffac8c625b/src/zeit.zig#L634-L718

1733080566
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Either way though, I find code with shadowing harder to read

1733081028
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Oh and for your variables, the pattern I've used the most would be to have your arg be input as you have it. Then var line_iter = std.mem.splitScalar. Then you can do while(line_iter.next()) |line| {...}

1733081727
m257!~maaz@174.92.92.195
if there is a carriage return at the end of a string and I am parsing it out as a number with std.fmt.parseInt(), is there anyway I can get it to ignore the \r and not give an invalid character error?

1733081758
andrewrk!~andrewrk@mail.ziglang.org
m257: pass it through std.mem.trimRight first

1733081777
andrewrk!~andrewrk@mail.ziglang.org
are you doing advent of code?

1733081785
m257!~maaz@174.92.92.195
yep

1733081794
hadronized!~hadronize@2001:41d0:a:fe76::1
m257: how did you split the newlines?

1733081801
andrewrk!~andrewrk@mail.ziglang.org
if you didn't see this already, here are some good tips: https://kristoff.it/blog/advent-of-code-zig/

1733081802
m257!~maaz@174.92.92.195
I use std.mem.split

1733081807
m257!~maaz@174.92.92.195
for spaces

1733081827
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, I used splitScalar for the lines, and tokenizeScalar for the spaces

1733081852
m257!~maaz@174.92.92.195
I am getting each line individually right now

1733081863
andrewrk!~andrewrk@mail.ziglang.org
if you use splitSequence you can make it strip the \r also

1733081864
m257!~maaz@174.92.92.195
with readUntilDelimeterOrEofAlloc

1733081872
m257!~maaz@174.92.92.195
I will try that thanks

1733081889
andrewrk!~andrewrk@mail.ziglang.org
also you can do it however you want but it's really not necessary to stream the input

1733081923
andrewrk!~andrewrk@mail.ziglang.org
that's an additional challenge that maybe is interesting to solve but completely out of scope of AoC

1733081929
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, I just store the whole file in memory in a giant []const u8 :P

1733081958
m257!~maaz@174.92.92.195
thats probably smarter yeah

1733082094
m257!~maaz@174.92.92.195
@embed is so cool lol

1733082107
m257!~maaz@174.92.92.195
s/@embed/@embedFile

1733082555
m257!~maaz@174.92.92.195
where does the relative path for embed file start in?

1733082570
hadronized!~hadronize@2001:41d0:a:fe76::1
the current file I think

1733082575
hadronized!~hadronize@2001:41d0:a:fe76::1
I removed that limitation with a symlink lol

1733082603
hadronized!~hadronize@2001:41d0:a:fe76::1
also, if you plan on using git to version your aoc, remember to put some lines in your .gitignore to ensure you do not include any examples or inputs

1733082610
hadronized!~hadronize@2001:41d0:a:fe76::1
there was a thread on reddit some years ago about that

1733082625
hadronized!~hadronize@2001:41d0:a:fe76::1
the author of AoC doesn‚Äôt want people to reverse-engineer its puzzles

1733082627
hadronized!~hadronize@2001:41d0:a:fe76::1
something like that

1733082666
m257!~maaz@174.92.92.195
honestly I still get FileNotFound after just doing @embedFile("input")

1733082675
m257!~maaz@174.92.92.195
input is in the project directory

1733082747
m257!~maaz@174.92.92.195
oh wait it works if I put it in src

1733082764
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
yeah it's relative to current file

1733082961
hadronized!~hadronize@2001:41d0:a:fe76::1
I used to do it with @embedFile but I eventually switched to just opening a file and use args after a discussion with grayhatter 

1733082970
hadronized!~hadronize@2001:41d0:a:fe76::1
(the main reason was to try how to read a path from the args :D)

1733082991
Gliptic!~glip@2a01:4f8:c012:91f3::1
have build.zig download your data from AoC directly

1733083008
m257!~maaz@174.92.92.195
9ok it worked now

1733083161
m257!~maaz@174.92.92.195
hmm part2 needs binary search I think

1733083165
m257!~maaz@174.92.92.195
I assume std.sort has that

1733083344
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
m257: yeah. you can use `zig std` to open local docs and search

1733083380
Gliptic!~glip@2a01:4f8:c012:91f3::1
no aoc spoilers plz

1733083412
hadronized!~hadronize@2001:41d0:a:fe76::1
wait

1733083414
hadronized!~hadronize@2001:41d0:a:fe76::1
binary search?

1733083440
hadronized!~hadronize@2001:41d0:a:fe76::1
for this year?

1733083711
m257!~maaz@174.92.92.195
Gliptic: sorry

1733083852
m257!~maaz@174.92.92.195
hadronized: unless there is an easier to do it

1733083930
hadronized!~hadronize@2001:41d0:a:fe76::1
well, I won‚Äôt spoil but I¬†did just a very naive approach that runs way too fast for the time command to even pick it up

1733083936
hadronized!~hadronize@2001:41d0:a:fe76::1
(I need to find a way to benchmark)

1733097463
Earnestly!~earnest@user/earnestly
hadronized: hyperfine / poop

1733097506
hadronized!~hadronize@2001:41d0:a:fe76::1
Earnestly: I‚Äôll have a look at that, thanks!

1733097520
hadronized!~hadronize@2001:41d0:a:fe76::1
I‚Äôm currently trying to find a way to do some @import based on a comptime usize

1733097523
hadronized!~hadronize@2001:41d0:a:fe76::1
which I think is not possible?

