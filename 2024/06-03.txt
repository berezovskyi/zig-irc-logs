1717421073
szstr!~szstr@user/szstr
we need a language with no unicode > \127 or text:   it would be written in cursiigh like signatures

1717421580
szstr!~szstr@user/szstr
jobascrit grants too many abilities through the browser: ad money through a websit, mideo games, unicod art, irc client, sharing directories, music listening, too much art as logic aesthetics

1717421680
szstr!~szstr@user/szstr
i would do zig 1 hour ayt granted $20

1717422084
szstr!~szstr@user/szstr
Where can I learn ways to getting things done through selgh-learning grants?

1717422344
szstr!~szstr@user/szstr
"how much do you want?" -> 3000, "it costs 3000 to be here today, und you now got 0,,, good buy/by/bye/biological-agreement/sine/sign/signature/cursiii/cursiii-si-entrobed"

1717422502
szstr!~szstr@user/szstr
"how much do you want?" -> 6000, "it costs 6000 to be here the next 2 days, und now you got 3000,,, buy:" -> water skrinkler, room heater, com3ass, instant sweet latte mikz,,,, "done und done, now 0, bubye,"

1717423076
szstr!~szstr@user/szstr
"how much do you want?" -> 9000, "it costs 3000 to look at your ghone,,, buy:" -> youtube,,,, "youtube costs a ''''ortune/too-much" -> chrome browser, ,,, "chrome costs 3000, you now got 3000 rest" -> chrome browser, camera, utload/share ,,, "costs 2000 + 3000, 1000 remaining:" -> chrome browser, musik, camera,utload/share, turn-on;;;;; "dun n'

1717423077
szstr!~szstr@user/szstr
dun"

1717423280
szstr!~szstr@user/szstr
"how much do you want?" -> 900,000, "it costs 2 to be here,,, buy:" -> this channel und all a' its moderatorz, ,,, "wondering,,,,,,,,"

1717435627
txdv!~txdv@78.56.38.107
How do you guys test methods with writer?

1717439657
k_hachig!~k_hachig@207.253.217.242
Hello everyone! Been learning zig for a few weeks and enjoying it a lot. I have a question about memory management strategy.

1717439670
k_hachig!~k_hachig@207.253.217.242
I like the convention of functions taking allocators as parameters to indicate that they allocate memory etc.

1717439688
k_hachig!~k_hachig@207.253.217.242
One thing I haven't fully wrapped my head around yet is how to indicate whether the memory is fully handled by the callee or whether it should be caller freed etc.

1717439705
k_hachig!~k_hachig@207.253.217.242
Should that be mostly done through docs? Multiple layers of allocators (i.e. an inner module has its own allocator that some outer module doesn't know/care about)? Something else?

1717439961
andrewrk!~andrewrk@mail.ziglang.org
k_hachig: docs. typically the function names and parameter names are enough to communicate resource ownership

1717439989
andrewrk!~andrewrk@mail.ziglang.org
for example, a "create" function typically will allocate a resource that needs to be deallocated with a corresponding "destroy" function

1717440040
andrewrk!~andrewrk@mail.ziglang.org
if the function takes an "arena: Allocator" parameter, that communicates that memory may or may not be allocated into this arena, and the function is relying on the arena deallocation for memory management

1717440237
k_hachig!~k_hachig@207.253.217.242
ah makes sense. my instinct was to make any function that takes an allocator be fully allocator agnostic, which I suppose could work in some contexts but I oculd also hint at allocation strategy and use etc. with parameter names like "arena"

1717440253
k_hachig!~k_hachig@207.253.217.242
s/oculd/could

1717440529
andrewrk!~andrewrk@mail.ziglang.org
often the arena stuff is useful for internal implementation details, and the public API is more reusable with a general purpose allocator

1717440541
andrewrk!~andrewrk@mail.ziglang.org
but sometimes arena-based public API can be handy too

1717440582
andrewrk!~andrewrk@mail.ziglang.org
for example... you could have a json parsing implementation that takes a general purpose allocator, and requires you to call destroy() on the returned object, but internally, the object allocates strings into an arena and frees them all at once with the destroy implementation

1717440901
k_hachig!~k_hachig@207.253.217.242
this is very helpful, thanks! I wonder why similar conventions aren't more widely adopted in other languages, say c, where there's nothing really preventing you from doing it and as far as I can see provides a lot more flexibility as well

1717440994
k_hachig!~k_hachig@207.253.217.242
another side benefit for me is that working for a couple of weeks with zig I learned 100x more about memory allocation than using malloc for years

1717441133
fabled!~fabled@user/fabled
Does std.ArrayList allocate more memory than it needs for it's elements? I know how many elements my list will have and I'm using a FixedBufferAllocator with exactly enough memory reserved, but using my list causes at out of memory panic. I assumed that it was attempting a resize at an inconveient size, so I'm trying to resize() to exactly the expected number of elements, but that doesn't fix the panic.

1717442525
Palanix!~palanix@dynamic-078-051-183-134.78.51.pool.telefonica.de
fabled: arraylists allocate more memory than needed to ensure that adding elements doesn't take too long

1717442775
rockorager!2bbd732aa1@irc.pico.sh
fabled: are you using ArrayListUnmanaged? Those have no access to an allocator

1717442815
rockorager!2bbd732aa1@irc.pico.sh
oh nevermind

1717442975
Palanix!~palanix@dynamic-078-051-183-134.78.51.pool.telefonica.de
fabled: the function you might be looking for is std.Arraylist.ensureTotalCapacityPrecise

1717443226
rockorager!2bbd732aa1@irc.pico.sh
It’s because the FixedBufferAllocator doesn’t increase in size once it’s out of space

1717443232
fabled!~fabled@user/fabled
Palanix: I'll take a look at that. I just got it working with ArrayListUnmanaged.initCapacity(), not sure the pros / cons either way here.

1717443329
Palanix!~palanix@dynamic-078-051-183-134.78.51.pool.telefonica.de
fabled: if you have a fixed size array why are you using an arraylist?

1717443355
fabled!~fabled@user/fabled
Yeah, totally. I'm using FixedBufferAllocator because I'm trying to do 0 runtime mem allocs as a learning exercise. It's probably not the most practical decision, but it's been a good trial by fire that's forcing me to learn.

1717443430
fabled!~fabled@user/fabled
Palanix: ArrayList.pop(). I'm doing a learning project with a deck of cards. I could bundle a fixed array and a size into a struct, but honestly I couldn't figure out how to put a fixed size array into a struct so I started looking at a fixed-size ArrayList.

1717443468
fabled!~fabled@user/fabled
Sorry to clutter up your support channel with newbie questions, maybe this is a better topic for a different venue.

1717444124
ifreund!2940d10f8b@user/ifreund
fabled: std.BoundedArray might be a better fit for your use-case

1717444418
fabled!~fabled@user/fabled
ifreund: Oh, that looks nearly exactly like what I tried to roll myself. Thank you.

1717445218
ifreund!2940d10f8b@user/ifreund
no problem :)

