1704824249
not_reserved!~not_reser@185.153.177.191
i had asked this question in here earlier and i apologize if it was answered, i didn't see it

1704824284
not_reserved!~not_reser@185.153.177.191
is there any documentation to learn all the places where PRO and RLS can happen?

1704824406
ifreund!2940d10f8b@user/ifreund
not_reserved: they can happen effectively everywhere, there's no proper documentation I know of

1704824417
ifreund!2940d10f8b@user/ifreund
I can highly recommend this talk though: https://www.youtube.com/watch?v=dEIsJPpCZYg

1704824450
not_reserved!~not_reser@185.153.177.191
ah yes, i had watched this when you sent it, that is how i found out about this

1704824499
not_reserved!~not_reser@185.153.177.191
this is only my third day or so looking at this language

1704824525
ifreund!2940d10f8b@user/ifreund
in practice PRO/RLS will only happen when passing/returning aggregate types by value

1704824706
not_reserved!~not_reser@185.153.177.191
i guess i will have to look into the internals at some point to get a complete picture

1704824842
not_reserved!~not_reser@185.153.177.191
at first i was convinced by the talk (coming from c), but after thinking about it, i really don't see what is so broken

1704824983
not_reserved!~not_reser@185.153.177.191
it seems to just amount to assuming that both the arguments and the variable to which the return value gets assigned are passed to the function by reference

1704825027
ifreund!2940d10f8b@user/ifreund
which is a lot of implicit assumptions you need to keep in your head all the time when reading code

1704825037
ifreund!2940d10f8b@user/ifreund
and is definitely not obvious to new zig users

1704825067
ifreund!2940d10f8b@user/ifreund
it's not a terrible situation if one knows of the existence of the features, but it's not good enough for Zig IMO

1704825132
ifreund!2940d10f8b@user/ifreund
a major benefit of Zig over other languages is reducing the cognitive load of reading code and these features currently work against that

1704825149
not_reserved!~not_reser@185.153.177.191
that was my first reaction: hidden control flow, no guarantees, etc

1704825177
not_reserved!~not_reser@185.153.177.191
but now it just seems like a different (and possibly better) paradigm

1704825231
not_reserved!~not_reser@185.153.177.191
which, imo, seems to better reflect what is going on under the hood: where "values" do not exist unless instantiated in memory

1704826642
not_reserved!~not_reser@185.153.177.191
i guess i am coming from a place where, when i write c, almost all of my functions are void and almost all of their arguments are pointers

1704826685
not_reserved!~not_reser@185.153.177.191
(and if this is not literally true, it is so close that it might as well be)

1704826728
not_reserved!~not_reser@185.153.177.191
so it seems like very little difference and a lot of benefit by way of cleaning up the syntax

1704826753
ifreund!2940d10f8b@user/ifreund
yeah, I can see where you're coming from

1704826800
ifreund!2940d10f8b@user/ifreund
C++ for example tends to look quite different

1704830499
Earnestly!~earnest@user/earnestly
That talk is brutal

1704830534
Earnestly!~earnest@user/earnestly
Almost makes me think zig should just remove these kinds of optimisations entirely and let the programmer do it as they please (i.e. the de-sugard variants)

1704830824
ifreund!2940d10f8b@user/ifreund
I for one would not be sorry to see PRO removed outright

1704830859
ifreund!2940d10f8b@user/ifreund
RLS has more redeeming qualities, especially if the language get pinned struct types

1704830864
ifreund!2940d10f8b@user/ifreund
(which I really hope it does)

1704831065
Earnestly!~earnest@user/earnestly
Ada uses out parameters quite often, as a possible design, for proceedures (functions were supposed to be pure, but Ada2012 threw that away too) and I don't quite see why zig needs to implement this as a compiler feature/optimisation

1704831222
Earnestly!~earnest@user/earnestly
(Specifically Ada can prefix parameters with 'in', 'out' or 'in out' which basically tells the compiler where the input and output is coming from.)

1704831242
Earnestly!~earnest@user/earnestly
Small example: https://0x0.st/HIaK.txt

1704831305
Earnestly!~earnest@user/earnestly
Note also the q'old (an aspect)

1704831338
not_reserved!~not_reser@185.153.177.191
i won't lie, i would be disappointed if these things were removed

1704831358
not_reserved!~not_reser@185.153.177.191
as opposed to just embrace the idea of everything passed to and from a function being a reference

1704831374
not_reserved!~not_reser@185.153.177.191
the latter makes so much sense to me, copying by hand

1704831414
not_reserved!~not_reser@185.153.177.191
along with some sort of gating assignment operator that says "do not pass the variable on the left by reference"

1704831434
Earnestly!~earnest@user/earnestly
I think the point is picking one way or another, allowing the language to decide which it prefers without really any way to know is the trouble

1704831435
not_reserved!~not_reser@185.153.177.191
(so, the opt-out version as opposed to martin's opt-in. because, as he admits -- you would want to use the opt-in thing everywhere in the code)

1704831452
Earnestly!~earnest@user/earnestly
Spooky action

1704831479
not_reserved!~not_reser@185.153.177.191
Earnestly: but if the rule for the programmer was to assume that it's always by reference -- which is basically the way that constant function arguments enforce now -- what is the problem?

1704831517
Earnestly!~earnest@user/earnestly
not_reserved: I suggested that'd be fine because it's known, it's when the compiler can choose either or it becomes the problem

1704831556
not_reserved!~not_reser@185.153.177.191
i don't think it becomes a problem if the compiler chooses to make a copy, because all function arguments are constant anyway

1704831558
Earnestly!~earnest@user/earnestly
That way the programmer and the language can agree

1704831601
not_reserved!~not_reser@185.153.177.191
so my way of thinking is like: assume it's always by reference, and if the compiler makes a copy because it's smaller than a pointer, then there's no harm done

1704831651
not_reserved!~not_reser@185.153.177.191
changes nothing. right? since you cannot end up accidentally modifying the copy, as the copy is constant

1704831703
Earnestly!~earnest@user/earnestly
(Oh and with Ada it does have an 'aliased' type specifier.)

1704831720
not_reserved!~not_reser@185.153.177.191
i was very distrubed by the talk initially but then spent a fair amount of time thinking about it

1704831741
not_reserved!~not_reser@185.153.177.191
and now would feel like it was a missed opportunity if these things got removed

1704832016
Earnestly!~earnest@user/earnestly
We'll see (unless you can fix it yourself)

1704832055
not_reserved!~not_reser@185.153.177.191
well, that is where i am somewhat radical, i suppose, in that i don't think it is broken

1704832093
not_reserved!~not_reser@185.153.177.191
i thought at first that it was broken when i watched the talk

1704832143
not_reserved!~not_reser@185.153.177.191
but that's because i was reading the code as if it was c

1704832747
not_reserved!~not_reser@185.153.177.191
that is really my point: if the rule for the programmer is to assume that no copies are ever made (= arguments are passed by reference, variable to which return value is assigned also passed by reference and "return" directly writes to it), then none of the examples in the talk are behaving in an unexpected way

1704832776
not_reserved!~not_reser@185.153.177.191
then, the way to fix v = rotate(v) is just to add the gating operator, e.g. v := rotate(v), that explicitly makes a copy

1704832855
not_reserved!~not_reser@185.153.177.191
(or, presumably, that copy would be explicitly made inside the implementation of the rotate function)

1704832948
not_reserved!~not_reser@185.153.177.191
it really would be surprising to me if there is some satisfactory middle ground between this vs the complete opposite, i.e. fully removing it and just doing what c does

1704833024
not_reserved!~not_reser@185.153.177.191
but what c does is very ugly

1704833073
Earnestly!~earnest@user/earnestly
Some prior art on C and "noalias" from dmr, thankfully saved: https://www.yodaiken.com/2021/03/19/dennis-ritchie-on-alias-analysis-in-the-c-programming-language-1988/

