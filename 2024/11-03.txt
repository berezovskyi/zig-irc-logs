1730648489
jnorinder!~jnorinder@h-158-174-106-119.A317.priv.bahnhof.se
In Windows it's possible to use run-time debgugging using the DebugView tool. In C# this is easy. Just add a Debug.WriteLine(...) to your code. Is there anything similar in Zig on Linux in the std-lib?

1730655760
hadronized!~hadronize@2001:41d0:a:fe76::1
there’s one thing I’m not entirely sure about (design question); I see in the std that sometimes, modules are used as a source of encapsulation instead of structs

1730655767
hadronized!~hadronize@2001:41d0:a:fe76::1
why is that? what is the guideline there?

1730655796
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
example?

1730655799
hadronized!~hadronize@2001:41d0:a:fe76::1
are the aligments / size rules the same?

1730655814
hadronized!~hadronize@2001:41d0:a:fe76::1
tranzystorekk: std.fs.Dir

1730655819
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s actually std.fs.Dir.zig

1730655829
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s not defined as a struct

1730655837
hadronized!~hadronize@2001:41d0:a:fe76::1
but it has a fd: posix.fd_t, at the top

1730655842
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m a bit confused by that

1730655874
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
let me find the excerpt from the reference

1730655912
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
hadronized: files are structs. generally capitalized files are intended to be a struct definition 

1730656007
hadronized!~hadronize@2001:41d0:a:fe76::1
so struct rules apply to them then

1730656030
hadronized!~hadronize@2001:41d0:a:fe76::1
that’s interesting

1730656035
hadronized!~hadronize@2001:41d0:a:fe76::1
so if I have a module foo.bar

1730656056
hadronized!~hadronize@2001:41d0:a:fe76::1
if I want foo.bar.Quux, I can create a file Quux.zig in foo/bar, or a struct Quux in foo/bar.zig, right?

1730656062
hadronized!~hadronize@2001:41d0:a:fe76::1
which one is the preferred?

1730656130
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
there's no hard rule, but Struct.zig has some limitations, e.g. fields are always public iirc

1730656223
hadronized!~hadronize@2001:41d0:a:fe76::1
ah I was about to ask

1730656231
hadronized!~hadronize@2001:41d0:a:fe76::1
okay, fair enough, thank you :)

1730656277
hadronized!~hadronize@2001:41d0:a:fe76::1
wait, in a regular struct, fields are also public, no?

1730656316
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
i think they are only "friended" in the encompassing module

1730656329
hadronized!~hadronize@2001:41d0:a:fe76::1
I need to read a bit more the reference about that topic

1730656434
ifreund!2940d10f8b@user/ifreund
there is no difference between struct {} syntax and the implict struct that every zig file is

1730656444
hadronized!~hadronize@2001:41d0:a:fe76::1
cool, interesting!

1730656449
hadronized!~hadronize@2001:41d0:a:fe76::1
but that doesn’t work for error sets, right?

1730656456
ifreund!2940d10f8b@user/ifreund
what doesnt works?

1730656457
hadronized!~hadronize@2001:41d0:a:fe76::1
I can’t have something like MyError.zig and have that an error{} declaration

1730656474
ifreund!2940d10f8b@user/ifreund
no, files are structs, not anything else

1730656506
hadronized!~hadronize@2001:41d0:a:fe76::1
cool, thank you! <3

1730667570
hadronized!~hadronize@2001:41d0:a:fe76::1
the doc around buffered writers is a bit weird…

1730667592
hadronized!~hadronize@2001:41d0:a:fe76::1
am I supposed to create a BufferedWriter by hand? use the bufferedWriter() function (which sets the actual buffer size at compile time), etc.?

1730667619
hadronized!~hadronize@2001:41d0:a:fe76::1
(I’m trying to get to buffer stdout)

1730668149
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
hadronized: use bufferedWriter if you are ok with the default buffer size, otherwise build your own

1730668467
hadronized!~hadronize@2001:41d0:a:fe76::1
okay

