1723537182
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
is there a way to accept a slice of fixed size in a function argument?  I'm currently relying on assert() to validate the length of what's passed in

1723537243
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
I have a runtime-known length slice and want to pass in a compile-time-known-length portion of it

1723537247
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
to a function

1723537524
Ayo!~Ayo@45.142.232.203
Take a pointer to array, *[n]T

1723537571
Ayo!~Ayo@45.142.232.203
A slice can be cast to such a pointer with comptime-known slicing: slice[0..8]

1723574526
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
Thanks!

1723574538
fengshaun!~fengshaun@d198-166-106-219.abhsia.telus.net
Ayo, Thanks!

1723586547
ashie!~ashie@user/ashie
if I want to return some kind of context on what failed from a function which can return error what would be a good approach? Do I just return a tagged union that contains struct with either the result or error and its context?

1723587471
DFP!~DFP@109.72.102.214
ashie. You could use a regular struct and pack both the result and the error context into it. You could have an error struct and supply a pointer to it to the function.

1723587727
DFP!~DFP@109.72.102.214
So the function would override the struct by pointer if an error occurred.

1723587750
DFP!~DFP@109.72.102.214
That way you could keep one error on the stack, and just pass a pointer to it.

1723587909
DFP!~DFP@109.72.102.214
Depends on what you want. For some things it might be convenient to have the function return a truth value, and have it accept a pointer to the result, which it would modify.

1723588649
torque!~tachyon@user/torque
andrewrk, if you didn't see, I rebased https://github.com/ziglang/zig/pull/19503 (I assume you have 1 billion github notifications and small things get lost in the noise)

