1730767059
torque!~tachyon@user/torque
I mean, you could return a struct that has a method that the user just needs to supply their user data to

1730767090
torque!~tachyon@user/torque
with the little information you provided it's difficult to provide good suggestions, since it's very unclear what the API looks like or why you want a "partial" function

1730805971
Earnestly!~earnest@user/earnestly
torque: That is more or less what this chap did: https://zig.news/houghtonap/closure-pattern-in-zig-19i3

1730821722
grayhatter!~grayhatte@user/grayhatter
I'm not sure that counts as a closure when it requires comptime semantics (or did I drastically misunderstand)

1730840216
ekaitz!~Ekaitz@94.73.33.227
andrewrk: after rewriting (ugh!) guile's PEG library, now I can start with the zig interpreter for the bootstrapping. Do you have any suggestion that might make me save time?

1730842276
andrewrk!~andrewrk@mail.ziglang.org
ekaitz: sure I have some tips. by the way did you see this thread? https://ziggit.dev/t/building-self-hosted-from-the-original-c-implementation/6607

1730842294
andrewrk!~andrewrk@mail.ziglang.org
I left a comment there with some tips

1730842320
ekaitz!~Ekaitz@94.73.33.227
i didn't see the thread, let me read

1730842357
andrewrk!~andrewrk@mail.ziglang.org
specifically, assume `-target wasm32-wasi` and use `pub const dev = .bootstrap;` in the config options, producing zig2.c

1730842399
andrewrk!~andrewrk@mail.ziglang.org
another tip is to remember that it's a bespoke interpreter which means if any particular piece of code is tricky, you can just pattern match on the function name and put a hack in the interpreter to do what the code is supposed to do without actually interpreting it

1730842429
ekaitz!~Ekaitz@94.73.33.227
i was more worried about types and stuff like that

1730842459
ekaitz!~Ekaitz@94.73.33.227
but that's a really good suggestion

1730842533
ekaitz!~Ekaitz@94.73.33.227
I also thought on compiling it to guile code and running it

1730842546
ekaitz!~Ekaitz@94.73.33.227
but in the end interpreting the thing is not very different from that

1730842558
andrewrk!~andrewrk@mail.ziglang.org
I think the simplest easiest thing is to interpret assuming wasm32-wasi

1730842582
andrewrk!~andrewrk@mail.ziglang.org
specifically because the zig compiler codebase itself, has logic in there that simplifies everything under that condition (dev == .bootstrap)

1730842673
andrewrk!~andrewrk@mail.ziglang.org
and then once you produce that zig2.c you're done, mission complete

1730842706
ekaitz!~Ekaitz@94.73.33.227
still i think this is going to take long time to do

1730842708
ekaitz!~Ekaitz@94.73.33.227
hehe

1730849009
hadronized!~hadronize@2001:41d0:a:fe76::1
how do you discover software made in Zig?

1730849013
hadronized!~hadronize@2001:41d0:a:fe76::1
like, cool libraries, etc.?

1730849610
reykjalin!7e28cf3a41@user/reykjalin
hadronized: there's a list of projects on the ziglang GitHub wiki: https://github.com/ziglang/zig/wiki/Community-Projects

1730849623
reykjalin!7e28cf3a41@user/reykjalin
you can also look up projects written in Zig on GitHub

1730850226
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
hadronized: I check ziglist.org every once in awhile

1730850239
hadronized!~hadronize@2001:41d0:a:fe76::1
how do projects end up there?

1730850305
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
"ziglist indexes github for zig-related repositories"

1730850638
hadronized!~hadronize@2001:41d0:a:fe76::1
interesting

1730850648
hadronized!~hadronize@2001:41d0:a:fe76::1
so my projects on sourcehut won’t end up there 

1730850697
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
there are some srht and codeberg links on the zig wiki list and the awesome-zig list

1730850865
d76d5!~d76d5@user/d76d5
https://sr.ht/projects?search=%23zig

1730851000
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah I mean, I was wondering about how people discover things and how inertia gets created

1730851007
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m too used to crates.io for Rust for instance

1730851011
hadronized!~hadronize@2001:41d0:a:fe76::1
or Hackage for Haskell, etc.

1730851085
reykjalin!7e28cf3a41@user/reykjalin
I don't think there's anything equivalent to that for Zig. I think people just use a search engine, or browse the links shared here already

1730851198
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, I’ve been thinking about that extensively lately

