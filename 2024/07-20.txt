1721482686
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
I found this wiki page on bare metal Zig: https://wiki.osdev.org/Zig_Bare_Bones. They use @call(.{.stack = ...}, kmain, .{}), but that doesn't seem to be valid with current Zig. Is there some way to switch stacks when calling a function with master?

1721492907
Krajina!~Krajina@user/Krajina
when i run "zig build test" if all the tests pass there is no output to the console (whereas if one fails I get all the deets) - is this expected?  can it be changed?  I recall my time unit testing async functions in C#, where if you write it incorrectly it falsely passes; I got so paranoid I started asserting 1 == 2 just to see it fail and make sure it wasn't broken :)

1721493155
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
My biggest complaint as well. I think the generally recommended way is to use `zig build test --summary all`

1721493247
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
And, yes, false positive tests are the worst. We had that happen for a subset of our validation suite at my last company, and it became a huge fiasco for a bit. Always make a test fail before you make it pass.

1721493323
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
As far as I can tell, there is no way to make it spit out which tests are run except by providing a different test runner.

1721496766
Krajina!~Krajina@user/Krajina
--summary all will work fine for me, thanks for this gcoakes 

1721503894
torque!~tachyon@user/torque
I usually have my `zig build test` target also install the compiled test executable so I can run it manually if I want to

1721504084
torque!~tachyon@user/torque
(you can dig it up in the cache if you really want to but it's harder to do)

1721505131
aquamo4k!~mross@162.222.54.134
if I use this fmt pattern, why do I get a +9 instead of <space 9> in my format output?  {d: >2}

1721507411
torque!~tachyon@user/torque
I believe signed integers will always print the sign if the width is specified

1721507513
torque!~tachyon@user/torque
https://github.com/ziglang/zig/blob/master/lib/std/fmt.zig#L1219-L1230

1721517071
aquamo4k!~mross@162.222.54.134
torque: thank you!

1721517914
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
So, I'm having an issue that I'm pretty sure is a Zig compiler issue, but I'm having a hard time minimizing the repro for it. I have a fallible function that does several checks and returns various errors if those checks fail. When the project is compiled as ReleaseSmall, the function will return the last declared error instead of the actual return value. If I comment out that error check, then it goes back to the next last declared er

1721517940
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
Does this ring any bells for anyone who knows more about how errors are returned from function calls under ReleaseSmall?

1721517999
torque!~tachyon@user/torque
no clue but it might help if you also list your zig version

1721518008
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
0.14.0-dev.2+0884a4341

1721518076
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
I'm not so much asking for someone to divine the answer out of the ether based upon that little bit of information. I was more hoping that would ring a bell for some existing issue that has the same failure mode of erroneously returning the last declared error from that function.

1721518144
gcoakes!~Thunderbi@syn-150-220-104-157.res.spectrum.com
The only alternative I have right now is to submit my whole repo as the repro in a ticket which I'm pretty sure would get rejected.

