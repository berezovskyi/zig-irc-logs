1721263942
ih8u!~Thunderbi@194.114.136.14
can anyone help walk me through creating a static library from a c project?

1721263958
ih8u!~Thunderbi@194.114.136.14
https://github.com/taku910/mecab

1721263967
ih8u!~Thunderbi@194.114.136.14
well, i guess it's c++

1721263969
ih8u!~Thunderbi@194.114.136.14
but still

1721264021
ih8u!~Thunderbi@194.114.136.14
i want to use this as a static library, but the ancient arcane arts of c tooling is keeping me from making any progress

1721270451
andrewrk!~andrewrk@mail.ziglang.org
ih8u: https://github.com/allyourcodebase/zlib

1721327433
Krajina!~Krajina@user/Krajina
Do you guys debug your zig?  Like stepping through line by line?  It has only just occurred to me, though I can do it with Python.  Chat GPT tells me to use LLDB, but what about compile time stuff?  Is @compileLog() enough for you guys?

1721327513
andrewrk!~andrewrk@mail.ziglang.org
Krajina: feel free to ask questions here instead of Chat GPT. you will get better answers

1721327530
andrewrk!~andrewrk@mail.ziglang.org
Zig integrates with native debug tooling, so all the information about how to debug C/C++ also applies to Zig

1721327557
andrewrk!~andrewrk@mail.ziglang.org
your preferred debugger will depend on which OS you are using, and your own preferences

1721327583
andrewrk!~andrewrk@mail.ziglang.org
for compile time, @compileLog is all there is for now

1721328087
Ayo!~Ayo@45.142.232.203
Are debugging functions expected to be included in a ReleaseFast build? Was running bloaty out of curiousity and seeing various debugging-related symbols like dwarf.DwarfInfo.unwindFrame and debug.readElfDebugInfo

1721328350
Ayo!~Ayo@45.142.232.203
I'm expecting weird behavior or crashes in ReleaseFast, not friendly stack traces :)

1721329002
leiu!~leiu@user/leiu
Howdy. Didn't find it so far, is there a possibility to add a source directory which lies outside of the directory where the root_source_file of an executable/test is stored? E.g.: I have test/tests.zig as entry point and src/a.zig src/b.zig src/c.zig. Instead of creating all the modules, can I advice build.zig somehow to additionally look into src/ ?

1721329295
devjev!~halloy502@4e25-730e-4fb3-08ae-4180-81c6-07d0-2001.dyn.estpak.ee
Hi everyone! I am learning Zig and trying to understand something about its memory allocation approach. The rule is "no hidden memory allocation". Does that mean that I can't just plop a GeneralPurposeAllocator inside a function, do some work with it and deinit? Or in other words, does this mean that main() is the only place where I can define an allocator? Or am I reading this wrong?

1721329413
Ayo!~Ayo@45.142.232.203
devjev: Zig does not *prevent* you from doing hidden memory allocation, but it's idiomatic (and quite easy) to pass an Allocator to functions that need allocation

1721329472
devjev!~halloy502@4e25-730e-4fb3-08ae-4180-81c6-07d0-2001.dyn.estpak.ee
Ayo: Ok, thank you! This helps. :) 

1721329824
Ayo!~Ayo@45.142.232.203
And to answer my own question: looks like the debugging functions are pulled in by the default panic handler. Setting a custom root.panic function reduces binary size by ~150k

1721330397
andrewrk!~andrewrk@mail.ziglang.org
Ayo: yes, ReleaseFast has debug symbols enabled by default, however you can omit these with -fstrip (or the equivalent build.zig flag)

1721330871
Ayo!~Ayo@45.142.232.203
andrewrk: Aye, I see the std.debug implementation also checks for builtin.strip_debug_info and doesn't emit the whole debug info parsing code when that's set. Makes sense.

1721330921
andrewrk!~andrewrk@mail.ziglang.org
yeah that's the motivation for it being a compilation flag instead of only a linking flag

1721330937
Ayo!~Ayo@45.142.232.203
Which also means I ought to be compiling binaries with -fstrip instead of running 'strip' afterwards, heh

