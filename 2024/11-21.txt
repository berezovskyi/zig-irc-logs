1732149069
hadronized!~hadronize@2001:41d0:a:fe76::1
is there a way to put test {} block in inline for?

1732149449
grayhatter!~grayhatte@user/grayhatter
is there a way to put a test block into an `inline for`? 

1732149465
grayhatter!~grayhatte@user/grayhatter
no, because there's likely a better way to do what you're trying to do

1732149468
grayhatter!~grayhatte@user/grayhatter
what are you trying to do?

1732149524
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m rewriting old AoC Rust -> Zig, and I’m trying to play around comptime to automate solution generation

1732149556
hadronized!~hadronize@2001:41d0:a:fe76::1
the idea is just pass the day, the expected output for the examples for both question, two functions generating the answers, and take care of the input loading, testing, etc.

1732149568
hadronized!~hadronize@2001:41d0:a:fe76::1
I have the input loading done with @embedFile and some nice comptimePrint stuff

1732149575
hadronized!~hadronize@2001:41d0:a:fe76::1
now I need to come up with a better testing situation

1732149583
hadronized!~hadronize@2001:41d0:a:fe76::1
I currently just have a test { … } with the loops inside

1732149587
hadronized!~hadronize@2001:41d0:a:fe76::1
but I can’t really name the tests then

1732149607
grayhatter!~grayhatte@user/grayhatter
got sample code?

1732149673
grayhatter!~grayhatte@user/grayhatter
I don't understand why you can't use a single test and use `inline for()` within that test? or generate functions?

1732149707
hadronized!~hadronize@2001:41d0:a:fe76::1
I’ll push the whole thing when I’m done :)

1732149717
hadronized!~hadronize@2001:41d0:a:fe76::1
I never really know when I need inline for vs. just for

1732149722
hadronized!~hadronize@2001:41d0:a:fe76::1
(most of the time, I just need for?)

1732149771
grayhatter!~grayhatte@user/grayhatter
inline for is useful when you need something that you're only allowed to access at comptime... e.g. a type

1732149805
grayhatter!~grayhatte@user/grayhatter
or if you need the captured result to exist at comptime, because you're calling another comptime function 

1732149841
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah I’m calling my embedInput() which has a comptime variable, so I guess I need it?

1732150000
grayhatter!~grayhatte@user/grayhatter
you shouldn't be using embedInput for AoC

1732150045
grayhatter!~grayhatte@user/grayhatter
I'm assuming you mean @embedFile?

1732150074
hadronized!~hadronize@2001:41d0:a:fe76::1
embedInput in something I wrote with comptimePrint and @embedFile, yeah

1732150086
hadronized!~hadronize@2001:41d0:a:fe76::1
is*

1732150097
hadronized!~hadronize@2001:41d0:a:fe76::1
is there something called embedInput in the std?

1732150120
grayhatter!~grayhatte@user/grayhatter
`std.fs.Dir.readFileAlloc()`?

1732150331
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah nah, no need for that

1732150348
hadronized!~hadronize@2001:41d0:a:fe76::1
I like @embedFile for that kind of thing :)

1732150381
grayhatter!~grayhatte@user/grayhatter
or, you know... if you don't wanna recompile to help someone else test their AoC input

1732150388
grayhatter!~grayhatte@user/grayhatter
or, if you wanna share your binary with them

1732150563
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, that’s never happened to me since I’ve been doing AoC :P

1732150728
grayhatter!~grayhatte@user/grayhatter
it'd assume it'd also be faster, speed isn't comptime execution' strong suit, but to each their own... I'm generating html templates at comptime so I'm not one to talk

1732150900
torque!~tachyon@user/torque
<The_Buhs> Is there a possibility that zig could ever have 'catch' after a block?

1732150911
torque!~tachyon@user/torque
while this sounds convenient, it ends up being some kind of hidden flow control

1732150921
torque!~tachyon@user/torque
i.e. how do you know which statements in the block might exit early?

1732150956
torque!~tachyon@user/torque
while putting try in front of many lines can feel a bit repetitive, from a readability perspective it's unbeatable because you know every place where control flow may be interrupted on trivial inspection

1732151156
grayhatter!~grayhatte@user/grayhatter
I was assuming he meant unnamed_block: { try first(); try second(); } catch |err| switch (err) {...};

1732151587
hadronized!~hadronize@2001:41d0:a:fe76::1
grayhatter: https://git.sr.ht/~hadronized/advent-of-code-2023/tree/master/item/zig/src/main.zig

1732151593
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah it’s pretty fun to write honestly

1732151597
hadronized!~hadronize@2001:41d0:a:fe76::1
comptime is crazy powerful

1732151621
torque!~tachyon@user/torque
that would overload the meaning of try, which is also Not Good for local reasoning

1732151974
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
Yeah I meant like grayhatter said but that justification for not including it is fair enough

1732155001
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
> that would overload the meaning of try

1732155001
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
for this, I think I just wish you could return from a block in general :P but I think that's just a wishful thinking on my end kind of thing lol 

1732158279
ezzieyguywuf!~Unknown@user/ezzieyguywuf
generally is learnxinyminutes.com/docs/zig an ok resource to get started with zig? I started with zig.guide which is a great resource but a bit too slow-paced for my tastes

1732160153
torque!~tachyon@user/torque
I mean, you can "return" from a block with `break :blk value`. And you can catch the block result if you break a value that is an error union. what you actually want is a conditional break, like trybreak or something

1732160273
torque!~tachyon@user/torque
ezzieyguywuf, I have seen a lot of people talk about https://codeberg.org/ziglings/exercises/

1732160298
torque!~tachyon@user/torque
for my money, I mostly learned just by reading the langref and stdlib code

1732168174
grayhatter!~grayhatte@user/grayhatter
I learned by doing hobby projects

1732178541
hadronized!~hadronize@2001:41d0:a:fe76::1
is there any plain for lambda syntax?

1732178638
dutchie!~dutchie@user/dutchie
there's https://github.com/ziglang/zig/issues/1717 which is perhaps what you want

1732178650
dutchie!~dutchie@user/dutchie
(one of Zig's biggest "celebrity issues")

1732178820
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah probably that, thanks

1732188746
Earnestly!~earnest@user/earnestly
I appreciate the utterly sensible realisation that "unnamed functions" are not actually unnamed

1732189128
ifreund!2940d10f8b@user/ifreund
you mean foo.zig:1234_anon_func isn't a name???

1732190377
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I've seen ziglings mentioned too, I'll give it a look. I also started reading the languag documentation this seems like a very approachable learning tool as well

1732191140
ifreund!2940d10f8b@user/ifreund
if you have experience with C and manual memory management all you need is the langref IMO

1732200130
hadronized!~hadronize@2001:41d0:a:fe76::1
ezzieyguywuf: what I’ve done is rewriting some non-neglible tool I made in Rust, but in Zig

1732200139
hadronized!~hadronize@2001:41d0:a:fe76::1
also, AoC for more high-level usage

1732200157
hadronized!~hadronize@2001:41d0:a:fe76::1
I’d expect Zig to be miserable at those, but it’s actually not that bad, and it’s pretty interesting to see the patterns emerging out of nowhere

1732200188
hadronized!~hadronize@2001:41d0:a:fe76::1
like I have a day in Rust where I just iterate on some lines and allocate some data, and in Zig I just created a small 128-byte array and reused it all the place over

1732200201
hadronized!~hadronize@2001:41d0:a:fe76::1
pretty interesting to see how you can quickly adapt and adopt new way of thinking

1732200224
hadronized!~hadronize@2001:41d0:a:fe76::1
also, I would like to understand why S{} allows swapping fields, but not .{}

1732200229
hadronized!~hadronize@2001:41d0:a:fe76::1
(it’s a super weird bug)

1732200328
hadronized!~hadronize@2001:41d0:a:fe76::1
also, I wonder whether Zig expects to be an industry success

1732200338
hadronized!~hadronize@2001:41d0:a:fe76::1
with the current state of things, I fear it won’t (lack of memory safety)

1732200698
ezzieyguywuf!~Unknown@user/ezzieyguywuf
hadronized: I'm planning to do AoC this year in zig, just trying to get a headstart on the language

1732200703
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ahhh you mentioned AoC too!

1732201979
torque!~tachyon@user/torque
<hadronized> also, I would like to understand why S{} allows swapping fields, but not .{}

1732201985
torque!~tachyon@user/torque
do you have an example of what you mean?

1732202014
torque!~tachyon@user/torque
<hadronized> also, I wonder whether Zig expects to be an industry success

1732202032
torque!~tachyon@user/torque
i hope zig never makes design decisions based on trying to win a popularity contest

1732203298
torque!~tachyon@user/torque
obviously, success has many benefits, and I've enjoyed writing zig and it would be nice to be easy to get jobs writing zig etc, but imo using that target as a guiding light for how to design the language compromises its technical integrity significantly

1732204179
hadronized!~hadronize@2001:41d0:a:fe76::1
ezzieyguywuf: for whatever it’s worth: https://git.sr.ht/~hadronized/advent-of-code-2023/tree/master/item/zig/src

1732204206
hadronized!~hadronize@2001:41d0:a:fe76::1
I tried to make a small lib to do some stuff in advance, like you know, infrastructure regarding inputs, examples testing, some very rough parsing (lined input, etc.)

1732204208
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s just fun

1732204223
hadronized!~hadronize@2001:41d0:a:fe76::1
torque: yeah I do!

1732204247
hadronized!~hadronize@2001:41d0:a:fe76::1
torque: https://github.com/ziglang/zig/issues/12064#issuecomment-2488471844

1732204584
ifreund!2940d10f8b@user/ifreund
hadronized: the last comment on that issue answers your question

1732204884
hadronized!~hadronize@2001:41d0:a:fe76::1
I understand for .{}, but why would it be different for S{}?

1732205911
ifreund!2940d10f8b@user/ifreund
hadronized: it's just how the langauge (currently) works. It's documented in the table explaining result locations in the langref

1732205963
ifreund!2940d10f8b@user/ifreund
S{} has an explict type, .{} doesn't

1732210300
grayhatter!~grayhatte@user/grayhatter
src/draw/layout.zig:83:43: error: value with comptime-only type 'comptime_int' depends on runtime control flow

1732210314
grayhatter!~grayhatte@user/grayhatter
runtime_value + if (true) 1 else 0; 

1732210321
grayhatter!~grayhatte@user/grayhatter
this will never not be triggering

1732210358
grayhatter!~grayhatte@user/grayhatter
yeah... comptime ints are cool and all, but have you ever tried just using 0 and 1 as numbers?

1732224794
ifreund!2940d10f8b@user/ifreund
grayhatter: use @boolToInt() for that

1732224825
ifreund!2940d10f8b@user/ifreund
in general though, yes it can be annoying in edge cases

1732224845
Gliptic!~glip@2a01:4f8:c012:91f3::1
you mean @intFromBool

1732224897
ifreund!2940d10f8b@user/ifreund
right, that changed like 2 years ago and I still have the old ones come to mind first

1732226101
grayhatter!~grayhatte@user/grayhatter
ifreund: unfortuntaly I also have places where if (false) 1 else 0

1732226202
grayhatter!~grayhatte@user/grayhatter
part of the problem is how jarring it is to not be able to add two numbers together

1732226350
ifreund!2940d10f8b@user/ifreund
grayhatter: @intFromBool(!foo) perhaps?

1732226380
grayhatter!~grayhatte@user/grayhatter
oooh, lol, duh! that's a great idea <3 thanks ifreund 

1732226385
ifreund!2940d10f8b@user/ifreund
adding an @as() works too of course

1732226426
grayhatter!~grayhatte@user/grayhatter
@as(usize, true) works? or wrapping the if in an @as() (which is what I do currently

