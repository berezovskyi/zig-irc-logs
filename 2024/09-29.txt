1727595844
kkHAIKE!~kkHAIKE@222.191.254.54
1x3x192x288

1727595852
kkHAIKE!~kkHAIKE@222.191.254.54
sorry typo

1727638423
bigs!~bigs@user/bigs
Got my little side project IRC bot (or at least irc bot framework :P) over the line. Have thoroughly enjoyed working in zig. I've been looking to do some refactoring on the IO and concurrency side of things. I used the built in pthreads primitives first go around and experimented with lockless and blocking versions. I was wondering if there is the beginning of some consensus or critical mass around

1727638425
bigs!~bigs@user/bigs
some of the event loop/coroutine libraries out there? I'm looking most closely at zig-aio, zigcoro, and using libxev directly.

1727638455
bigs!~bigs@user/bigs
I looked at spice, which is pretty rad, but it seems (at least in its current state) pretty geared for parallel computation rather than IO driven concurrent programs.

1727641243
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
bigs: libxev doesn’t play well with tls right now, and zigcoro uses libxev for IO async. I haven’t looked at aio’s tls support yet. that said I’d say either libxev or using std io_uring primitives are where most async is headed right now

1727641448
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Nearly all async work I’ve done is also in some way talking with /dev/tty which doesn’t work well with async on Darwin/BSD/Windows. so if one of my IO streams is a terminal or TLS, I just accept threads

1727641658
bigs!~bigs@user/bigs
Word rockorager appreciate that breakdown

1727641768
bigs!~bigs@user/bigs
Sounds like io_uring bits from the stdlib are the best bet right now :) I don't mind rolling stuff myself. With the language moving at its current velocity, I'm sure coroutines/event loops will be a bit thrashy anyway.

1727644178
bigs!~bigs@user/bigs
Ah a little more digging reveals zig-aio has a io_uring backend using the stdlib, rockorager. I'll let you know if it's happy with TLS!

1727644211
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
bigs: please do! 

