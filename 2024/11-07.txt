1730937766
Krajina!~Krajina@user/Krajina
wait can't you use underscore for that?

1730937874
hadronized!~hadronize@2001:41d0:a:fe76::1
?

1730937907
grayhatter!~grayhatte@user/grayhatter
hadronized use more blocks

1730937973
grayhatter!~grayhatte@user/grayhatter
if you need to "export" results; there's also `const thing: type = brk: { [do a bunch of code]; break :brk answer; };

1730938020
grayhatter!~grayhatte@user/grayhatter
I use `var thing: type = undefined;` because I think it looks better, but the more I write the more I apprecate nested blocks

1730938496
torque!~tachyon@user/torque
if you keep coming up with the same name in deeper and deeper nested scopes, it might be a sign you should rethink your logic

1730940015
andrewrk!~andrewrk@mail.ziglang.org
you can also get 2 or more things out of a block via destructuring

1730940028
andrewrk!~andrewrk@mail.ziglang.org
const x, const y = block: { ...; break :block .{x, y} };

1730941062
d76d5!~d76d5@user/d76d5
I'm trying to add a token to zig's parser that just acts like a function declaration (for now)

1730941116
d76d5!~d76d5@user/d76d5
but when I build zig (via zig build) it doesn't seem to function unless if I start from scratch and bootstrap every time

1730941121
d76d5!~d76d5@user/d76d5
any ideas?

1730941137
d76d5!~d76d5@user/d76d5
https://matrix.ersei.net/_heisenbridge/media/ersei.net/uLjXvWuYgOqMXawRQvghbqnR/0LQYi3xtqnQ/fn.diff

1730941142
d76d5!~d76d5@user/d76d5
the culprit in question

1730945648
squeek502!~squeek502@user/squeek502
d76d5, you likely have a copy of the `lib` files in your build directory and the built-from-source zig is using that instead of your modified copy

1730945720
squeek502!~squeek502@user/squeek502
see https://github.com/ziglang/zig/wiki/Contributing#editing-source-code for some recommendations when editing the zig source code

1730948707
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I'm reading documentation about std.posix.open, and as someone who understands documentation much better with an example usage I wonder if there is place for such things in the zig documentation :)

1730950167
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Speaking of examples, are there some examples of How i would allocate a memory buffer for calls like std.fs.File.readAll? (It expects a []u8, and the size i should already know by std.fs.file.getEndPos)

1730951027
daurnimator!~daurnimat@vultr.daurnimator.com
nephele: take a guess and try to read. if it returns your buffer size, read the rest in another call?

1730951045
daurnimator!~daurnimat@vultr.daurnimator.com
nephele: but perhaps you're looking for readToEndAlloc

1730951064
daurnimator!~daurnimat@vultr.daurnimator.com
or readAllArrayList

1730951147
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I'm trying to figure out how to create the "buffer" object I'd need to pass to readAll :)

1730951173
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
that is, how I can use the allocator class to create this object with a specific size

1730951177
daurnimator!~daurnimat@vultr.daurnimator.com
nephele: you'd generally use it for the cases where you have a buffer and you want to fill it

1730951233
daurnimator!~daurnimat@vultr.daurnimator.com
nephele: if you don't already have a buffer, then use e.g. `readAllArrayList` or `readAllAlloc` to get it all as one fresh allocation. but also: what are you going to do with it *after* you read it?

1730951252
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Try to parse it

1730951272
daurnimator!~daurnimat@vultr.daurnimator.com
Why read the whole file before parsing it? just parse directly off the reader stream if you can

1730951274
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I'm trying to extract data from saints row 1 game files that are packed and later write them back to disk in a more usefull format

1730951316
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Do you have examples for that alternate aproach?

1730951361
daurnimator!~daurnimat@vultr.daurnimator.com
it's a question of what your parsing function takes

1730951381
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Well, my rationale was that the Disk should not need to constantly seek. But upon reflection I guess the file cache of the OS should make sure of that anyway

1730951409
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
For now any will do, I'm still learning zig. :)

1730951413
daurnimator!~daurnimat@vultr.daurnimator.com
If lots of read() calls are a concern you can put a buffered reader in between later; but for now that's likely a premature optimisation

1730951468
daurnimator!~daurnimat@vultr.daurnimator.com
Assuming your parse function doesn't exist (i.e. you need to write it), the question then becomes what does the file format look like? e.g. does it use any standard format? is it compressed in some way? what framing does it use if any?

1730951615
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
nephele: you can get a buffer from Allocator.alloc(u8, <size>) for heap allocated, or a static buffer like “var buffer: [512]u8 = undefined” the second you’d have to coerce to a slice by doing &buffer

1730951648
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I'm not entirely sure yet, documentation is sparse. As I understand it sections in the file *can* be compressed, and this is indicated. but they do not have to be

1730951716
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
seems to mostly be stuff like SOME_HEADER (bytes) and then the content, but it depends. There is a c# implementation for atleast a newer format than this (for saints row 2)

1730951825
daurnimator!~daurnimat@vultr.daurnimator.com
nephele: then you probably want to read that header directly off the file (is the header fixed size? or e.g. newline delimited); followed by a second read call to get the content

1730951949
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
This is the c# version for sr2: https://github.com/rodrigonh/ThomasJepp.SaintsRow/tree/master/SaintsRow/Packfiles/Version04

1730951962
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
(where this one should be similar, mostly..)

1730952009
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Yeah, first Read the magic of the file start and check the file format version anyhow. And then call a parser for that version. Reading the headers directly makes sense

1730952024
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
It looks to be terminated in some cases with a 0x00

1730952045
d76d5!~d76d5@user/d76d5
squeek502 thanks!

1730956382
daurnimator!~daurnimat@vultr.daurnimator.com
nephele: sounds like you want `readUntilDelimiterArrayList` or similar then

1730956498
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I've got the Header parsing now, a bit. Now trying to figure out how to read argv to pass in a file to parse in the executable path to test this code (So far this is giving me grief. I expect this to be just const []u8, but it isn't. And I don't yet understand the type system well enough to understand...)

1730956525
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
readUntilDelimiterArrayList sais it is deprecated, suggesting streamUntilDelimiter instead

1730956727
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
for (std.os.argv) |arg| { const file = std.fs.openFileAbsolute(arg, std.fs.File.OpenMode.read_only); } Gives: error: expected type '[]u8', found '[*:0]u8'

1730956744
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
maybe there is some primer documentation on how I can interpret this?

1730959127
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Is it possible to download https://ziglang.org/documentation/0.13.0/ for offline reading? Maybe as a PDF or something?

1730959154
ksynwa!~kartik@2405:201:600a:f9b8:3e58:c2ff:fe28:23ff
Oh wait nevermind it is talked about in the first section. Sorry.

1730959186
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
> thread 807820 panic: reached unreachable code

1730959186
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Not so bad for my first project, i guess D:

1730959310
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Ah, this is not *actually* unreacable code. It's just there to trigger an assertion failure, wierd way to go about it

1730961533
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I'm now having a pattern of declaring a var, and then assigning *once* in an if branch to it. I would rather sue const, but if i use const inside the if now the object is local to that condtional

1730961726
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
And If i declare it as const before the if i can't assign to it in the if condition, and i can't let it be undeclared either. Am I missing something here?

1730961908
squeek502!~squeek502@user/squeek502
nephele, you can use a labeled block where it's only var in the block: https://zigbin.io/347f87

1730961932
squeek502!~squeek502@user/squeek502
that will give you a cannot assign to constant error for the `foo = 234;` line

1730962050
squeek502!~squeek502@user/squeek502
(i think the padding shown around the labels is a bug in zigbin.io's css)

1730962088
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Thanks, that works. Seems to be quite a roundabout way to get this thouhg :)

1730962112
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
But ideally I *do* want the compiler to hit me when I try to assign this again

1730963824
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
readInt with endianess just works. Neat. This far learning about zig has been quite joyfull :)

1731002335
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Hey, I'm not using readInt severall times for my parser (Severall fields right next to each other), I've tried putting those in a try { } block, as the failure condition should always be the same -> erorr out (I can't do much if the read call fails here) And adding a catch to each line feels really repetitive. But even in this try block the compiler complains that I am ignoring error unions, or for assignments that my type is expected

1731002335
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
 to be u32 but instead is the fsErrrors!u32

1731002387
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
So something like try { std.fs.File.seekTo(file, someNumber); var myThing = file.reader().readInt(u32, fileInfo.endianess); } catch { return false; }

1731002407
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
(Which I would assume works but does not)

1731003032
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's not how try works

1731003350
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's no try/catch construct like in exception handling, try and catch are two separate things

1731003417
Gliptic!~glip@2a01:4f8:c012:91f3::1
i.e. there's no "try { } block", only "try <single expression>"

1731003580
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Ah, I understood now. Thanks

1731004019
olle-lukowski!~olle-luko@user/olle-lukowski
So, I saw Andrew mentioned `std.testing.refAllDecls` is bad, and `refAllDeclsRecursive` breaks for me in a lot of cases. what is the "preferred" approach to do reference tests from the root file?

1731004638
Gliptic!~glip@2a01:4f8:c012:91f3::1
seems to me most just `test { _ = @import("./submodule.zig"); ... }` each submodule

1731004670
Gliptic!~glip@2a01:4f8:c012:91f3::1
seems error prone to me though

1731005079
olle-lukowski!~olle-luko@user/olle-lukowski
Gliptic: yeah that is what I was thinking too, but I was like there must be a better way?

1731006336
olle-lukowski!~olle-luko@user/olle-lukowski
well, I guess I will just manually reference everything for now. If anyone has a better way, let me know!

1731007201
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I have a struct with all values = undefined That I am filling over time. Is there a way to add an assertion that at some time I expect all values to be filled? That the compiler can validate that all code paths lead to them beeing filled?

1731007239
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
or maybe a different idomatic way that better suits this?

1731007296
olle-lukowski!~olle-luko@user/olle-lukowski
not sure about that tbh, undefined is just that: undefined... you cant really check if a field is currently set to undefined because of that

1731007324
olle-lukowski!~olle-luko@user/olle-lukowski
what are you trying to do? maybe I can help you think of a solution

1731007550
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I'm parsing a file and extracting info from it. I started out with local variables for each thing I wanted, but that became hard to read at some point. So I figured I would use something like a struct or namespace which I could declare above the function to note down all the things I want to extract

1731007581
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
currently have like 7 readInt calls which read a u32 each and pack that into variables (that are currently members of this struct)

1731007615
olle-lukowski!~olle-luko@user/olle-lukowski
I assume just using an optional type for each field isnt what you want?

1731007666
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I want to ensure that all fields are parsed and set

1731007682
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
in essence that the compiler tells me if i made a branch that would not set one variable for example :)

1731007702
olle-lukowski!~olle-luko@user/olle-lukowski
In that case I think just doing `my_field: ?u32 = null,` is your best option

1731007734
olle-lukowski!~olle-luko@user/olle-lukowski
and then you can later on just check if its null

1731007740
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
This is what I have now, anyhow: http://0x0.st/XDjn.zig

1731007752
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
hmm, okay.

1731007814
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
let me read up about that (Optionals, i think)

1731007856
olle-lukowski!~olle-luko@user/olle-lukowski
yeah, they are great. they essentially just make the type a bit larger in memory so you can have a special value that marks it as not present

1731008064
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Hmm, that changes semantics a bit. expected type 'builtin.Endian', found '?builtin.Endian' 

1731008065
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
for var endianBuffer = try file.reader().readInt(u32, fileInfo.endianess);

1731008146
olle-lukowski!~olle-luko@user/olle-lukowski
oh, you have to unwrap the optional to get its value out

1731008157
olle-lukowski!~olle-luko@user/olle-lukowski
basically you can do two things in this case

1731008201
olle-lukowski!~olle-luko@user/olle-lukowski
1: `readInt(u32, fileInfo.endianess.?);` only works if endianess != null, otherwise you will get a panic

1731008295
olle-lukowski!~olle-luko@user/olle-lukowski
2: `readInt(u32, fileInfo.endianess orelse <some-default-value>);` will work in all cases, it grabs the fileinfo if it is set, otherwise a default value

1731008401
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Okay, So adding a     std.debug.assert(fileInfo.endianess != null); before that (after getting the endianess) and using .? should work

1731008432
olle-lukowski!~olle-luko@user/olle-lukowski
yes, but, looking at the code you sent, your fileInfo.endianess really doesnt need to be a optional, as I don't see any control flow paths where it isnt set

1731008458
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I know there are none. But I want the compiler to make sure there can't be :)

1731008481
olle-lukowski!~olle-luko@user/olle-lukowski
ah yeah then just use the assertion and .?

1731008533
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
Mostly trying to get to know the language and learn how to get the compiler to tell me early when something is wrong, e.g a branch is added and some value is undefined

1731008550
nephele!~quassel@2001:9e8:6cee:d600:f6b5:20ff:fe2b:d0e5
I suppose for the endianess here, since i won't touch it anymore. I could leave it as is

