1711294110
phaleth!~phaleth@user/phaleth
any way to tell zig cc to use different clang located in somewhere else on the OS?

1711300941
Amun-Ra!~amun-ra@retro.rocks
zig dlopens libclang-cpp.so, LD_PRELOAD?

1711302142
grayhatter!~grayhatte@user/grayhatter
can I make a request... next time some allowed syntax becomes an error, include a zig script to correct existing code... trying to port another zig project to 0.12 and I've used var throughout many files :(

1711302844
ifreund!2940d10f8b@user/ifreund
grayhatter: the point of this kind of change is to prevent bugs, manually reviewing the errors is the only way for that to be effective

1711302860
ifreund!2940d10f8b@user/ifreund
several bugs in the standard library were caught while updating for example

1711302905
ifreund!2940d10f8b@user/ifreund
whenever a syntax change can be fixed automatically zig fmt does do the upgrade for you

1711302980
grayhatter!~grayhatte@user/grayhatter
ifreund: git diff --cached exists at least 60% was me being lazy when writing tests 

1711303007
grayhatter!~grayhatte@user/grayhatter
I can't think of a bug in this specific context, do you have an example of such a bug in stdlib?

1711303017
grayhatter!~grayhatte@user/grayhatter
eg. a commit or something I could search for?

1711303402
ifreund!2940d10f8b@user/ifreund
grayhatter: search for the PR made the change

1711303735
grayhatter!~grayhatte@user/grayhatter
yeah... the reason I asked if it was findable was I was afraid of having to read through 632 files trying to find a subtle bug

1711304623
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
why when i do M-x lisp- it does not show me option for "lisp-packages" ?

1711304626
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
ups

1711304629
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
wrong chat

1711304654
R2COM!~r2com@ip98-177-189-79.ph.ph.cox.net
(trying to get editor for Zig.. lol)

1711306203
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
I'm trying to create an array of two ints and initialize it at the same time, is this really the most compact way? const actions = [_][2]u32{ [2]u32{ 0, 0 }, [2]u32{ 1, 0 }, [2]u32{ 2, 1 } };

1711306275
torque!~tachyon@user/torque
const actions = [_][2]u32{ .{0, 0}, .{1, 0}, .{2, 1}}; should work

1711306324
grayhatter!~grayhatte@user/grayhatter
what torque said, just tested it to make sure I wasn't about to lie :)

1711306340
torque!~tachyon@user/torque
I'm playing fast and loose here

1711306408
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
torque: nice, then I can make it a struct with two members instead.

1711306497
torque!~tachyon@user/torque
if you're referring to that initialization syntax, technically .{0, 0} is a tuple of two comptime ints, which successfully coerces into [2]u32

1711306533
torque!~tachyon@user/torque
if you just want to change your data structure, sure

1711306629
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
torque: I mean I don't have to do `Action{ .kind = 0, .index = 0 }`, I can do `.{ 0, 0 }`.

1711306640
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
Like in C.

1711306649
torque!~tachyon@user/torque
you would need to do .{.kind = 0, .index = 0}

1711306659
torque!~tachyon@user/torque
for non-tuple structs, field initialization has to be by-name

1711306840
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
OK. So I can't do it like in C then.

1711308226
ariane!~ariane@user/ariane
ListNetworks

1711311932
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
I have question regarding struct assigments: https://dpaste.org/w6YRi

1711312010
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
`node.data = data` <- is that going to do a memcpy or is it going to be smart and do `node.data.value = 1`?

1711312079
Gliptic!~glip@irc.glip.cc
there's no difference?

1711312105
Gliptic!~glip@irc.glip.cc
(unless you mean whether it would call some memcpy function, then no)

1711312214
Gliptic!~glip@irc.glip.cc
these optimizations are mostly up to LLVM as far as I know

1711312239
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
Gliptic: in this case TestData contains only one value, but in the real case it could contain anything, like a bunch of bytes.

1711312453
felipec!~felipec@2806:2f0:4000:f9f3:4ae7:daff:fe31:3285
Either way even if I assign the value myself the test never finishes, so the performance is too bad.

