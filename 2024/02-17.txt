1708135127
BellaDoll!~MagicAppl@45.155.42.152
zag

1708167045
johnjaye!~pi@035-146-235-134.res.spectrum.com
take off all zig

1708167050
johnjaye!~pi@035-146-235-134.res.spectrum.com
you know what you doing

1708174272
remiliascarlet!~remiliasc@user/remiliascarlet
`zig cc -c -o viewer.o -Wall -Wextra -Wshadow -Wformat=2 -pedantic -std=c99 -O2 -g -lglfw3 -target x86_64-linux-musl viewer.c` gives me `'GL/glu.h' file not found\n27 | #include <GL/glu.h>`. But `ls /usr/include/GL/glu.h` confirms this file exists. Changing the include to `#include </usr/include/GL/glu.h>` works, but now it's complaining about not being able to find `<GL/gl.h>`. Does Zig's C compiler

1708174274
remiliascarlet!~remiliasc@user/remiliascarlet
set the includes folder to a different path by any chance?

1708178013
ii8!~ii8@45.63.97.131
Is there a way to round a float to the nearest integer?

1708178103
ii8!~ii8@45.63.97.131
Or do I need an if expression?

1708178230
ifreund!2940d10f8b@user/ifreund
ii8: @round()

1708178486
ii8!~ii8@45.63.97.131
In the docs it says that one always rounds up

1708178518
ii8!~ii8@45.63.97.131
Away from zero actually. But I want whichever is closest.

1708179625
Earnestly!~earnest@user/earnestly
ii8: @floor()?

1708179675
Earnestly!~earnest@user/earnestly
Hm, I suppose not

1708180339
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
`@round` is nearest integer, ties away from zero

1708180496
LarstiQ!~larstiq@user/larstiq
no builtin banker's rounding?

1708182225
Earnestly!~earnest@user/earnestly
jacobly0: ii8 wants that but rounding towards zero

1708182337
jacobly0!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
according to what?

1708182415
LarstiQ!~larstiq@user/larstiq
https://ziglang.org/documentation/master/#round says "Rounds the given floating point number to an integer, away from zero. Uses a dedicated hardware instruction when available." which is missing "closest integer, ties away from zero"

1708182428
LarstiQ!~larstiq@user/larstiq
so on a strict reading it's not actually rounding

1708182443
Earnestly!~earnest@user/earnestly
There are many forms of rounding, all valid

1708182470
LarstiQ!~larstiq@user/larstiq
so does it round 2.1 to 3?

1708182482
ifreund!2940d10f8b@user/ifreund
@round(2.1) is 2

1708182488
ifreund!2940d10f8b@user/ifreund
@round(2.5) is 3

1708182506
LarstiQ!~larstiq@user/larstiq
then I'd make that clearer in the docs, is my guess for what ii8 was asking about

1708182514
Earnestly!~earnest@user/earnestly
LarstiQ: If it rounded toward zero then 2.1 is 2. If it was 2.5 it'd be 2

1708182538
LarstiQ!~larstiq@user/larstiq
" But I want whichever is closest."

1708182596
Earnestly!~earnest@user/earnestly
Yeah, needs to clarify. There's rounding towards negative infinity or infinity, banker as you mentioned, toward or away from zero, etc. metc.

1708182635
ifreund!2940d10f8b@user/ifreund
LarstiQ: feel free to PR that fix to the docs :)

1708185051
ii8!~ii8@45.63.97.131
LarstiQ: ah, yes the strict reading is what i was doing. Thanks.

1708193782
lordmzte!~LordMZTE@62.91.117.24
Any clue why I'm getting InvalidObject and BadZlibHeader errors trying to fetch some known-good git dependencies from my zon file? I'm on the latest master binary download, fc7dd3e

1708193828
lordmzte!~LordMZTE@62.91.117.24
I had no issues on another machine I don't have access to right now running on a slightly older master zig version, updated yesterday.

1708194786
ifreund!2940d10f8b@user/ifreund
lordmzte: perhaps https://github.com/ziglang/zig/issues/18966

1708194795
ifreund!2940d10f8b@user/ifreund
(there's already a fix waiting to be merged)

1708194908
lordmzte!~LordMZTE@62.91.117.24
Seems like that might be it!

1708201722
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
is there any way to parallelize the build process with -j4 or something similar?

1708201769
grayhatter!~grayhatte@user/grayhatter
johnjaye: I'm pretty sure zig defaults to building with jobs equaly to the number of cores in the system

1708201785
lordmzte!~LordMZTE@62.91.117.24
Zig build will already do multiple tasks in parallel when possible, but single executables can't currently be run in parallel because it's one object, different from C.

1708201789
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
then htop is fibbing to me since that was not the case

1708201809
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
when i say build i mean the bootstrap of building zig from source

1708201811
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
to clarify

1708201811
grayhatter!~grayhatte@user/grayhatter
there are a few steps that can't be parallized 

1708201835
grayhatter!~grayhatte@user/grayhatter
yeah... the answer was no the last I asked, there's a number of steps that can't be done in paralle :/

1708201851
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
ah ok. i thought the build script was just singling me out for its displeasure

1708201852
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
ok then

1708201975
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i guess that it's like a stage thing where you build zig from c++ sources

1708201986
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
then you use that to build the zig compiler written in zig itself

1708202695
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
ah ok so zig was built

1708202948
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
so how do i use it. do i just add stage3/bin to my path?

1708203335
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
or wait i can just copy zig to my path right

1708203408
grayhatter!~grayhatte@user/grayhatter
johnjaye: I usually add the build dir to $PATH, that way I still have *a* working version, but you could likely copy it to your default bin directory

1708203530
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
it makes a lot of build dirs. i had to guess which one was the right one

1708203584
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
like build-llvm-host, build-zig-host, build-llvm-native-native, and a few more

1708203593
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i guessed build-zig-host in this case

1708203624
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
ah host/ and zig-native-native/ also have zig

1708203680
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
when i try to compile from github directly it says my llvm is not sufficient since it is merely 14

1708203795
motiejus!~motiejus@88.223.107.21
you need the right version of llvm for a given zig (current master is 17). zig-bootstrap conveniently bundles it.

1708203826
motiejus!~motiejus@88.223.107.21
and if you compile it from zig-bootstrap, the final zig is in https://github.com/ziglang/zig-bootstrap/blob/4c78aa1bba84dbd324e178932cd52221417f63da/build#L194

1708203828
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
so did i accidentally do the right thing by building zig bootstrap?

1708203863
motiejus!~motiejus@88.223.107.21
I've normally used zig-bootstrap only when packaging my fork, which has been.. quite rare

1708203879
motiejus!~motiejus@88.223.107.21
depends on what you want to do :)

1708203930
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i want to rn zig

1708203937
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
er run zig. that's pretty much it

1708203950
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
but i'm just a man with a pc

1708203970
motiejus!~motiejus@88.223.107.21
if you want a ready to use compiler, get it from the download page (usually a better idea) or your distribution (quality and availability varies across distros)

1708204014
lordmzte!~LordMZTE@62.91.117.24
....or use a version manager :P I conveniently wrote one.

1708204138
motiejus!~motiejus@88.223.107.21
and once you start hacking, you will need to decide whether you want to run a dev version (soon to be 0.12) or the latest release, which is now 0.11. there have been quite a few fixes and improvements since 0.11, so unless you have downstream constraints, I would go with the dev version.

1708204163
lordmzte!~LordMZTE@62.91.117.24
I can also recommend the dev version.

1708204407
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
right. but git cloning i can't compile the dev version

1708204412
motiejus!~motiejus@88.223.107.21
for folks around: the version in the downloads page is bit-by-bit identical to the one compiled by zig-bootstrap, given the same source archive and the necessary args. is this statement strictly true?

1708204419
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
which means the boostrap is my only option for that?

1708204455
motiejus!~motiejus@88.223.107.21
johnjaye: you will need to get your deps sorted out. we may help, but you'll need to tell more (logs etc)

1708204521
motiejus!~motiejus@88.223.107.21
johnjaye: you will need to either get your deps sorted out or use zig-bootstrap (slower, since it compiles llvm twice)

1708204546
motiejus!~motiejus@88.223.107.21
if you want *self-compiled* zig, that is.

1708204549
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
by deps you mean get llvm 17?

1708204561
motiejus!~motiejus@88.223.107.21
johnjaye: yes. and zlib and zstd iirc.

1708204587
lordmzte!~LordMZTE@62.91.117.24
motiejus: Not entirely. Debugging symbols may contain absolute paths to local source files, for example. If the args specify dynamic linking, that'll also depend on the machine you're building on. Considering that Zig always needs to link at least libc (citation needed), that will depend on the ABI of the local machine as well as the libc version. If you build Zig on arch, it'll probably not run on

1708204589
lordmzte!~LordMZTE@62.91.117.24
debian because of this, for example.

1708204612
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i think i can get llvm17 when i have time. but so if i understand right i can just download a pre-built binary. i can do the bootstrap which just uses gcc. or i can compile with llvm 17 from git clone. are those the options?

1708204625
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i'm on mint by the way.

1708204630
motiejus!~motiejus@88.223.107.21
lordmzte: that's why I mentioned zig-bootstrap — that's statically linked and stripped

1708204646
lordmzte!~LordMZTE@62.91.117.24
Yea I haven't looked into zig-bootstrap at all.

1708204662
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
is that why when i did ldd on zig it just showed links to the libc and libm basically?

1708204667
motiejus!~motiejus@88.223.107.21
johnjaye: i've been using https://apt.llvm.org/ for debian-based distros

1708204702
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
motiejus: ah, interesting!

1708204721
motiejus!~motiejus@88.223.107.21
johnjaye: I presume that's the distribution build. the upstream one does static linking

1708204752
motiejus!~motiejus@88.223.107.21
(which makes it for fun live demos on, say, non-rooted Android phone)

1708204820
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i just typed what the readme told me to. in this case ./build native native

1708204833
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
so i'm not sure i see what you meant by upstream build

1708204841
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
or pre-build maybe that is

1708204858
motiejus!~motiejus@88.223.107.21
note that "./llvm.sh 17 all" is not actually all — it will skip lld and something more that zig needs. but cmake will tell you when you start compiling zig

1708204880
motiejus!~motiejus@88.223.107.21
upstream = whatever is published on ziglang.org

1708204885
motiejus!~motiejus@88.223.107.21
(binaries)

1708204911
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
oh that makes sense. if it had dynamics links to random folders then it wouldn't work as you say

1708204977
motiejus!~motiejus@88.223.107.21
lordmzte: zig-bootstrap is worth a look. :) that's the easiest way to build your own statically linked zig

1708205024
lordmzte!~LordMZTE@62.91.117.24
yea i just had a quick look, that wasn't around last time i built zig :P

1708205041
lordmzte!~LordMZTE@62.91.117.24
(i think)

1708205055
motiejus!~motiejus@88.223.107.21
interesting. that should have been quite long ago :)

1708205134
motiejus!~motiejus@88.223.107.21
not saying I am an old timer here, but I do recall building pre-0.9 with it

1708205292
txdv!~bentkus@78-56-38-107.static.zebra.lt
There is an apt registry with the newest llvm officially maintained by the org itself? :>

1708205381
motiejus!~motiejus@88.223.107.21
txdv: yep

1708205400
motiejus!~motiejus@88.223.107.21
and nightlies

1708205440
txdv!~bentkus@78-56-38-107.static.zebra.lt
I was always compiling llvm so smuggly with my multi core CPU, how will I justify a beefy cpu in the future?

1708205785
motiejus!~motiejus@88.223.107.21
this new cpus will be even harder to justify after #16270 :)

1708206017
txdv!~bentkus@78-56-38-107.static.zebra.lt
C/Zig will be fast, C++ will depend on clang anyway, just as an outside module

1708206055
txdv!~bentkus@78-56-38-107.static.zebra.lt
* compiling assembly files - it will even be an assembler?

1708206078
txdv!~bentkus@78-56-38-107.static.zebra.lt
Is zig going to be like bun, an all in one development solution?

1708206102
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i don't understand bug 16270

1708206116
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
so zig is not fully its own thing, it depends on llvm to do things?

1708206283
txdv!~bentkus@78-56-38-107.static.zebra.lt
zig cc/c++ uses llvm to compile c and c++, as well for spitting out optimized binary code

1708206324
txdv!~bentkus@78-56-38-107.static.zebra.lt
Its an industry practice to use llvm to base your compiler on, to inherit all the optimizations that have been done in that project

1708206337
txdv!~bentkus@78-56-38-107.static.zebra.lt
only downside is that you can't go faster than anyone else because everyone else is using the same backend

1708206364
txdv!~bentkus@78-56-38-107.static.zebra.lt
So zig is going roll out its own backend code generators for x86/arm/wasm 

1708206391
txdv!~bentkus@78-56-38-107.static.zebra.lt
I guess for other targets like risc its still going to be dependent on llvm

1708206412
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
if zig is fully self-hosting would that imply llvm was not part of it?

1708206420
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
or it would be but just in in a limited, frontend way?

1708206432
Earnestly!~earnest@user/earnestly
johnjaye: No it would imply no llvm

1708206458
txdv!~bentkus@78-56-38-107.static.zebra.lt
llvm will be like a module, but separate

1708206488
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
ah ok. i want to learn more about compilers but it is still very mysterious

1708206500
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
esp when you're sort of building one based on another one but then removing it. :/

1708206590
txdv!~bentkus@78-56-38-107.static.zebra.lt
the domain of compilers is very different compared to what you get to do in your day to day IT job, unless you work as a compiler designer for google or apple, which I wouldn't call a day to day job

1708206612
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i see

1708206626
txdv!~bentkus@78-56-38-107.static.zebra.lt
also very very tedious with a lot of corner cases 

1708206640
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
i have the dragon book but afraid to open it

1708206648
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
afraid it's outdated

1708206664
txdv!~bentkus@78-56-38-107.static.zebra.lt
throw it away, read something like https://craftinginterpreters.com/

1708206694
txdv!~bentkus@78-56-38-107.static.zebra.lt
once you you understand the basics you can read that book, but it won't give you much additional information

1708206759
txdv!~bentkus@78-56-38-107.static.zebra.lt
IMO the way the dragon book explains things is so academic, dry and tasteless that you gonna fall asleep after every 20 pages. But that is my personal opinion, not a fan of that kind of writing

1708206868
txdv!~bentkus@78-56-38-107.static.zebra.lt
also it focuses too much on parsing, parsing is not the hard part anymore

1708206912
lordmzte!~LordMZTE@62.91.117.24
I've not read it, but you mentioning that makes me want to. Parsing is something that I've always had a hard time with.

1708206934
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
what do you mean by it not being the hard part

1708206951
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
is the hard part this basing-off-one-compiler-then-transitioning-to-self-hosting process?

1708207053
txdv!~bentkus@78-56-38-107.static.zebra.lt
spitting out binary on the other side, making it efficient, linking is tedious 

1708207119
johnjaye!~pi@2603-8080-ebf0-8630-0000-0000-0000-1e6b.res6.spectrum.com
oh so like having fast optimized machine code

1708211438
freshcoffee!~fresh@user/freshcoffee
andrewrk: the ci scripts --maxrss, intended to be 21G ?

1708211500
freshcoffee!~fresh@user/freshcoffee
like just checking if it's a decimal typo

1708211621
freshcoffee!~fresh@user/freshcoffee
ah never mind, found explanation in 2d41dac57d3afdd5fe3d03be08ff0a24833f61dd . 

