1726004194
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
This might be dumb but... should I send the output of --help to stderr or stdout?

1726005977
bblack!~bblack@wikimedia/bblack-WMF
The_Buhs: GNU tools and other general Linux CLI stuff tend to send it to stdout in my experience, but personally I think it belongs in stderr.  Either way, if you assume --help just emits help and doesn't do anything else to produce other output for, it's kinda bikesheddy.

1726006021
The_Buhs!~The_Buhs@user/The-Buhs/x-5080862
bblack: makes sense, thanks :)

1726006033
bblack!~bblack@wikimedia/bblack-WMF
I think the reason I've preferred stderr is that I usually have a class of CLI usage errors, e.g. "You cannot specify -i and -o at the same time!", which I would also tend to send to stderr, and then they're generally followed by the --help text even though it wasn't asked-for.

1726007623
andrewrk!~andrewrk@mail.ziglang.org
The_Buhs: if the user explicitly asks for --help, then stdout, if you're offering it as a "hint" because the user misused the CLI, stderr

1726007647
andrewrk!~andrewrk@mail.ziglang.org
it's a fairly standard use case to pipe --help to another process 

1726007986
olabaz!~olabaz@user/olabaz
Hi, I wrote a function that returns a type of the form: pub fn Engine(config: EngineConfig) type { ....  return struct {....}}. I now want to refer to this type in another function so I can pass the struct as an argument. Is there a way to get the type returned?

1726008483
andrewrk!~andrewrk@mail.ziglang.org
olabaz: https://ziglang.org/documentation/0.13.0/#This

1726008626
olabaz!~olabaz@user/olabaz
Will this work for a function that isn't defined within the struct?

1726008817
Gliptic!~glip@2a01:4f8:c012:91f3::1
olabaz, if you're outside the struct you don't need to do anything special, just call Engine(...) to get the struct

1726008932
olabaz!~olabaz@user/olabaz
so something like: pub fn myfunc(e: Engine(.{}))

1726009070
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, if .{} is the config you want, if myfunc needs to be generic over all kinds of Engine, you need anytype

