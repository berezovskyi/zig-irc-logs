1510025951
dimenus
andrewrk: are you planning on merging the recent commits of master into llvm6?

1510025990
andrewrk
dimenus, if you want to, go for it

1510026006
dimenus
i was just curious how you usually do it, as I'm still new to git

1510026009
andrewrk
ah

1510026036
dimenus
git fetch & manually resolve?>

1510026088
andrewrk
here's how I would do it:

1510026091
andrewrk
1. make sure `git status` is clean

1510026097
andrewrk
2. git checkout llvm6

1510026120
andrewrk
3. git fetch --all --prune --tags

1510026128
andrewrk
4. git merge origin/llvm6

1510026135
andrewrk
5. git merge origin/master

1510026159
andrewrk
6. git push origin llvm6

1510026191
andrewrk
I can push this right now if you want

1510026200
dimenus
thanks for the tip, sure up to you

1510026218
dimenus
i was just curious. going to work on mingw support in llvm6

1510026220
andrewrk
pushed

1510026227
andrewrk
cool

1510062683
dimenus
andrewrk: did you write any of the code for the embedded_* projects or is that pulled from the llvm tree?

1510063671
andrewrk
dimenus, softfloat is not related to llvm; it's used without any patches

1510063680
andrewrk
embedded_lld is lld 5.0.0, plus some patches

1510063695
andrewrk
you can see the patches like this:  git log -p -- deps/lld

1510063720
andrewrk
I've gotten most of them accepted upstream, so for llvm 6 we could go back to using actual LLD

1510063724
andrewrk
except for one

1510063745
andrewrk
which is zig commit 1a1414fc42c7beb25b6de4134d99884ea6544b57

1510063768
andrewrk
because it's a workaround of an LLD bug that it still not fixed, it does not solve the root cause

1510063785
dimenus
ah ok, yeah the llvm6 branch of zig no longer builds against llvm6 master

1510063786
andrewrk
if we were able to figure out the root cause in LLD and get the fix merged upstream, we could delete embedded_lld

1510063825
andrewrk
dimenus, oh, in the llvm6 branch, I was using -DZIG_FORCE_EXTERNAL_LLD=on

1510063841
dimenus
ah ok

1510063844
dimenus
duly noted

1510063853
andrewrk
and then I applied 1a1414fc42c7beb25b6de4134d99884ea6544b57 to the LLD I built against

1510063912
andrewrk
it's kind  of a unresolved problem. I'm hoping to get it ifxed in actual LLD before 6 is released

1510066175
dimenus
according to the mailing list, the MachO lld is not really actively developed

1510066429
ltr_
it seems that the lld code was made by completelly different people of the rest of the linkers

1510066493
dimenus
the mac lld code you mean?

1510066525
ltr_
yes

1510069690
andrewrk
yes, unless the LLVM project suddenly starts caring about LLD for Mach-O, it will fall on zig project to maintain and improve the Mach-O linker

1510069742
andrewrk
and I'm thinking, if we go that route, I'll work on self hosting the compiler so we can write it in userland. No reason to have to stick with c++ if we're the ones maintaining it

1510070198
dimenus
i have no familiarity with mach-o, hopefully we'll get someone who uses it on a daily basis

1510070473
andrewrk
that would be great

1510070629
GitHub185
[zig] jfo closed pull request #595: Removes whitespace (master...master)

1510071277
ltr_
eventually zig should have their own linkers

1510071310
andrewrk
ltr_, why's that?

1510071311
ltr_
i know the internals of mach-o, but i do not own a mac now :D

1510071393
ltr_
that why i understood about self hosted compiler + linker, a'la go

1510071406
ltr_
that's what*

1510071476
dimenus
does anyone know how to make cmake look in a different spot for llvm/clang?

1510071518
andrewrk
dimenus, cmake/Findllvm.cmake and cmake/Findclang.cmake

1510071525
andrewrk
you can add a hardcoded search path

1510072528
andrewrk
dimenus, another thing that is useful is the CMAKE_PREFIX_PATH

1510072554
andrewrk
that changes the root directory that cmake looks for libraries. that's what I usually do when messing around with different llvm builds

1510072571
dimenus
yeah i defined cmake_path_prefix but it still found system llvm

1510072605
dimenus
oops, prefix  path I meant

1510072643
andrewrk
you  have to do it from an empty dir, you can't change it once you do it once, because cmake doesn't work perfectly

1510075858
ltr_
andrewrk: everything that can be computed at compile time, is going be resolved at compile time? or one have to explicity state that you want a chunk of code to be comptime

1510081136
andrewrk
ltr_, have you seen this section?

1510082258
ltr_
yes, im just figuring out how to do a thing

1510082379
ltr_
generate a type at comp time: ej.   requestHandler("/something/something/{int}/{string}")    -----> fn handler(pathVar_1: u32, pathVar_2) : response

1510082407
ltr_
im lacking of imagination this days.

1510082533
ltr_
fn handler(pathVar_1: u32, pathVar_2: []u8) : response

1510082790
andrewrk
ltr_, I think you can accomplish this

1510082806
andrewrk
you might have to write some functions that return types, to call in the function prototype

1510082867
ltr_
first im going to try to do it in someway then ill try to do it elegantly

1510083013
andrewrk
don't forget to still validate the input parameters

1510083136
ltr_
i guess im going to do it in the parser at compile time, i mean im going to generate an specific parser at compile time just for that string, so if it fails its going to try another pattern in the chain

1510083207
dimenus
andrewrk: what do you use to debug c/c++ on linux?

1510083216
dimenus
or do you just use raw gdb :)

1510083234
ltr_
have you seen the herb sutter presentation that he gave at cppcon2017?

1510083268
dimenus
i have not, no

1510083528
andrewrk
dimenus, gdb

1510083545
andrewrk
I've been meaning to try this:

1510083547
andrewrk
haven't yet though

1510083556
andrewrk
I just know a couple gdb commands and it's enough for me

1510083678
ltr_
lldb behaves weird on linux

1510083756
dimenus
looks neat

1510083759
dimenus
also :(

1510083764
dimenus
'effin windows

1510084244
andrewrk
dimenus, on windows I've been using msvc

1510084246
ltr_
herb sutter gives interesting ideas on how metaprograming should be in the future for c++, really good ideas imo

1510084250
andrewrk
and on macos I've been using lldb

1510084278
dimenus
for as much crap as msvc gets, it's still the best on windows

1510084283
dimenus
but for debugging mingw, i need something else

1510084439
ltr_
maybe clion could help you, comercial tho

1510084455
andrewrk
dimenus, gdb works for debugging mingw

1510084485
dimenus
you can't get tui / more formatted gdb window from mingw

1510084511
andrewrk
oh, I don't use that

1510086005
ltr_
what's the replacement for stdout.printf ?

1510086012
ltr_
just updated zig from master

1510086038
andrewrk
ltr_, are you really tring to write to stdout? or are you printing debug statements?

1510086055
ltr_
not really but there are a lot of those

1510086067
ltr_
testing features

1510086080
andrewrk
most of the time what you want is: const warn = @import("std").debug.warn;

1510086094
ltr_
ok

1510086098
andrewrk
this API should be easier to use than %%io.stderr.printf

1510086123
ltr_
that prints to stderr?

1510086126
andrewrk
yes

1510086139
andrewrk


1510086168
ltr_
if i want to print to stdout ill need to write to FD = 0?

1510086314
ltr_
pub fn getStdOut() -> %File

1510086317
ltr_
just saw that

1510086410
ltr_
oh now i get the new api

1510086414
ltr_
thanks

1510086419
andrewrk
yes and then you can use file.write. Or you can create a FileOutStream and use the OutStream API (which has nice things like formatted print). And if you want to take it a step further you can put that out_stream in a BufferedOutStream and use the same API but now it's buffered

1510086478
ltr_
thats a lot of changes in the documentation

1510086482
ltr_
jeje

1510086485
ltr_
hehe*

1510086828
andrewrk
ltr_, yeah, I'm working on that now - making the documentation be tested

1510086837
andrewrk
so we can't accidentally break it with compiler changes

1510089153
andrewrk
this is fascinating:

1510089177
andrewrk
one day I will rewrite libsoundio in zig without depending on alsa-lib

