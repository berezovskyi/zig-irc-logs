1509326268
ltr_
hello

1509352425
pupp
ltr_, hello

1509358944
J
Hello

1509361666
tankfeeder
hi all

1509384146
dimenus
andrewrk: ran into a few snags, not sure how I had this working properly the other day but it doesn't work now.

1509384163
dimenus
I can compile a program linking to the CRT just fine, but it doesn't find symbols as I would expect

1509399080
GitHub80
[zig] Dimenus opened pull request #570: WIN32: Linking with the CRT (master...master)

1509399812
andrewrk
dimenus, I'm looking at your pull request now

1509399844
dimenus
I think it closes a couple other issues as well

1509399847
dimenus
but i haven't hunted around yet

1509399875
dimenus
i figured out the printf issue by the way, silly Microsoft

1509400018
andrewrk
printf issue, sounds like text/binary mode

1509400138
dimenus
i was getting undefined reference to printf and it was driving me nuts

1509400158
dimenus
created a hello world C app and removed the '%AdditioanlDependencies' included by default in Visual Studio

1509400161
dimenus
and that too failed the same way

1509400176
dimenus
so I found out that they ported the implementation of non-inline stdio to another lib

1509400196
dimenus
so really we're linking 4 (5 if you include the kernel32 that zig builds) libs in order to support the CRT

1509400208
andrewrk
ah, good to know.

1509400354
andrewrk
dimenus, I think that means once we solve

1509400568
dimenus
correct

1509403205
PV_
andrewrk: I have a question about comptime string paramater, like fn(comptime par : []const u8). Is such parameter always string sitting in readonly section of executable?

1509403254
PV_
Or is there chance that compiler will put it somehow on stack? What I ask is whether it is safe to take address of such string parameter and use it outside the function.

1509403310
andrewrk
PV_, yes if it is comptime it is guaranteed to be in static readonly memory

1509403344
andrewrk
it seems like a smell to do that though, maybe you can show some code and I can have a look at what you're trying to do

1509403405
PV_
OK. What I intend to do is logger which takes a string and instead of copying it it stores only the address. I wasn't sure whether it is safe enough.

1509404047
andrewrk
PV_, and then what? what does it do with the address?

1509404215
PV_
My aim is to implement white box testing support. Functions log various things, the test then checks whether what was expected to happen did really happen. The logs are stored as pointers (where applicable) to save space.

1509404366
andrewrk
interesting

1509404664
PV_
I got this idea from Agaram Kertik (

1509404740
andrewrk
that's a neat idea

1509405035
PV_
I'd implemented it in C and it is performant enough. In a test I first express interest in certain logs (in certain string prefixes), the code then records these logs (and not the others) and then I check if the expected logs are in and undesirable logs are not present.  These limitations keep the overhead down.

1509405119
PV_
The essay I linked describes more powerful system (everything is logged, one can browse the logs to get idea what is going on).  K. Agaram later wrote me that he switched to restricted system, like I have.

1509405247
PV_
The technique is non-intrusive, no need to modify anything, only the logs need to be added.  It is prone to typos, however. I have some hope for metaprogramming in Zig to be able to check the strings and spot obvious mistakes.

1509406255
andrewrk
PV_, you should be able to do it with 0 runtime cost, you can check for builtin.is_test

1509406261
andrewrk
or make your own comptime known bool

1509407063
PV_
andrewrk: my logs are generated only inside tests, and also only if the were requested (their string prefix was requested).  I played with idea to place assembler "nop" instructions instead all logs and then re-insert the original log calls according to the need, but gave up.

