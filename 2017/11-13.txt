1510534951
ltr_
i keep getting that error

1510534954
ltr_
damn i dont know

1510535524
ltr_
LLVM_ABI_BREAKING_CHECKS=FORCE_OFF now im compiling llvm with that option

1510538331
PV_
I have question about structs - whether they can be used as "poor man's objects".

1510538346
PV_
1. With all access to struct internals is only through struct methods.

1510538357
PV_
2. All members are hidden, invisible, inaccessible, seen only as byte array.

1510538367
PV_
3. struct can be instantiated as value (on stack, in other struct), w/o need to @import anything related to members.

1510538496
PV_
In C one could import header with struct description, but this brings in all internal details. Or one can hide the struct behind pointer to the struct, but this has performance implications and requires lifetime management. I am asking if there's third way, ability to hide internals but w/o need to use pointers.

1510542349
andrewrk
ltr_, that's really strange, I don't get that error when I build from source. Did you use the configuration parameters from

1510581368
sparris
I tried to print floats and noticed that there where no formatting options for floats that I could find. It would be nice to use the zig standard library for formatted float printing (not libc), would adding somthing like Go's formatting (

1510581409
sparris
(I meant the above as a question: ... be interesting?)

1510581743
hasen_judy
I see there are now functions to get struct members :)

1510581747
hasen_judy
this is awesome

1510581963
jfo
I wonder if it would be useful to anyone else to have a dedicated test command that simply runs the last test present in the file. I'm using `zig test` as a little runner and I'm falling into some TDD patterns and I don't need to run all the tests every try. right now I'm doing it this way

1510581997
jfo
`zig test --last-only` or something.

1510583242
ltr_
jfo: i think you can filter the test, or modify the build.zig file to run test acording a custom criteria

1510583382
andrewrk
sparris: agreed. That's planned.  what's needed to do that is 1. Some more userland code in std/fmt.zig and then 2. Documentation

1510583436
andrewrk
jfo: have you tried --test-filter combined with giving your test unique names?

1510583689
jfo
yes, that's what I'm doing now

1510583774
jfo
it's working fine for me but I wonder if a dedicated "run only the final test" command would help with iteration. This is a "hey this would help me in my personal workflow but maybe not everyone else would get benefit" musing

1510583992
jfo
ltr_: I need to learn the build system but the docs are TODO-y rn :)

1510584010
ltr_
the build.zig that comes with the source code could help you

1510584719
dimenus
andrewrk, i found the bug in #603 and others

1510584739
dimenus
the hash table for typedefs (and possibly others) isn't returning items that should exist in the table

1510584782
dimenus
so zig generates another pub const item again and again every time it sees the typedef

1510584797
dimenus
didn't you introduce hash tables somewhat recently on decls?

1510585155
sparris
andrewrk: Nice, maybe I will playaround with adding some formatting options in fmt.zig for learning myself.

1510585938
andrewrk
sparris, that would be most welcome

1510586019
andrewrk
dimenus, you are referring to this commit: c1642355f0b05f182c0b6d81d294d12be79ad0a8

1510586025
andrewrk
I suspect that the bug is independent of that commit

1510586036
andrewrk
nice find btw

1510586127
dimenus
andrewrk, yep commit does not look related

1510586140
dimenus
i just vaguely remembered you implementing hash tables recently-ish :)

1510589175
dimenus
andrewrk, i actually think we're just misundestanding ASTUnit::visitLocalTopLevelDecls

1510589184
dimenus
it gets called once for all typedefs, not per typedef

1510589218
dimenus
sorry, it calls our function once for all typedefs in a module

1510589222
dimenus
not for each one

1510593004
ltr_
andrewrk: i was able to compile llvm with debug symbols, 5 hours and 400Gb of trying, zig compiles w/o those errors i mentioned, i just had to define LLVM_ABI_BREAKING_CHECKS=FORCE_OFF, i dont know why

1510593201
andrewrk
ltr_, very strangeu

1510593236
andrewrk
dimenus, sounds like we can put the pointer address in a hash table to uniqueify them?

1510593242
andrewrk
I think we do that for some other top level decls

1510593274
dimenus
my first guess was wrong, it might not be the hash function

1510593294
dimenus
if i create a dummy header file with multiple typedefs in it, that function only gets called once

1510593311
dimenus
so my thought is that the clang function is meant to resolve ALL typedefs in a module not one typedef

1510594723
ltr_
andrewrk: what can i use to display messages in the compiler's code? emit_warning?

1510594777
ltr_
i cant debug certain lines of parsec, the debuger just exit the function without passing for any return

1510595051
ltr_
the default flags for debug are -O0?

1510595447
ltr_
no, hehe without optimizations it debugs correctly

1510595937
dimenus
are you working on the typedef/struct issue with cImports ltr_?

1510596835
ltr_
yes

1510596850
ltr_
trying to

1510597436
andrewrk
ltr_, fprintf(stderr, "blah\n");

1510597472
andrewrk
emit_warning is for --verbose, to explain why we couldn't translate a given C definition to zig

1510598758
dimenus
andrewrk, i have a question when you havea  minute

1510599015
andrewrk
dimenus, go for it

1510599044
dimenus
so i sort of figured out what's going on here with the issue I mentioned earlier

1510599082
dimenus
the TypedefnameDecl points have different values each time they're passed into the function

1510599095
dimenus
so we can't store those directly, but we can store the names of the typedefs

1510599106
dimenus
that worked for my simple example, but fails with glfw3.h for instance or windows.h

1510599117
dimenus
still outputting a lot of the same typedefs over and over

1510599156
dimenus
so I'm trying to find where we  print out all of the values in the c->decl_table table

1510599162
andrewrk
maybe we need to call some function such as GetCanonicalDeclaration

1510599165
andrewrk
to get a unique pointer

1510599239
andrewrk
I think decl_table is just for de-duping. The part where we actually add a zig declaration is add_top_level_decl

1510599842
dimenus
andrewrk, nice that did indeed give us a unique ptr for typedefs

1510599859
dimenus
now its on to enums, which already call getCanonicalDecl() but are still being duplicated

1510603618
andrewrk
dimenus, hmm that is curious

1510608935
ltr_
i cant debug parsec.cpp file, i can see what dimenus is saying about the table, but i cant debug that part from line 2610 to 2611 it just exit the function, im using a -O0 build

1510608949
dimenus
i've got most of it working already

1510608957
dimenus
compiler still doesn't like typedef interface

1510608959
dimenus
but that's about it

1510608972
dimenus
trying to get a glfw app running on windows now

1510608973
ltr_
no problem , im just curious why the debuger does not continue to the next line

1510608993
ltr_
when it should do the put in the table

1510609071
dimenus
o

1510609076
dimenus
*i'm not sure what you mean

1510609084
dimenus
i'm also using msvc though, not gnu tools

1510609094
andrewrk
I believe ltr_ is using gdb on linux and dimenus is using msvc debugger on windows

1510609100
andrewrk
they likely have different behavior in this situation

1510609101
ltr_
yes

1510609152
ltr_
i have a BP in the line 2611, the first time it stops for the first declaration i cant go to the next line with continue, it just exit the function

1510609163
ltr_
from 2610 -> 2611

1510609181
andrewrk
ltr_, what distro are you using?

1510609189
ltr_
ubuntu 17.10

1510609200
ltr_
zig is compiled with debug and -O0

1510609211
ltr_
llvm5 compiled with debug symbols too

1510609281
ltr_
the second time, i cant continue normally

1510609292
ltr_
sorry i CAN continue

1510609407
ltr_
lol:

1510609809
dimenus
2610 on my version of zig is a return statement

1510609933
ltr_
(gdb) print trans_qual_type(c, child_qt, typedef_decl->getLocation())

1510609933
ltr_
/build/gdb-sBS5Fz/gdb-7.12.50.20170314/gdb/infcall.c:836: internal-error: value* call_function_by_hand_dummy(value*, int, value**, void (*)(void*, int), void*): Assertion `sp >= lastval_addr' failed.

1510609933
ltr_
A problem internal to GDB has been detected,

1510609934
ltr_
further debugging may prove unreliable.

1510610008
dimenus
andrewrk, does zig have block comments yet?

1510610033
dimenus
7.12 is a little old for gdb, ltr_

1510610080
ltr_
upgrading...

1510610123
ltr_
2610 parsec? let me check, im sure im with the last commit of master

1510610421
dimenus
andrewrk, was print deprecated in stdout?

1510610532
ltr_
zig std?, yes, i think andrewrk just went offline

1510610571
ltr_
oh no, he is here i have the part quit messages filtered out

1510610749
andrewrk
dimenus, are you talking about io.stdout.print?

1510610760
andrewrk
I changed all the io API

1510610761
dimenus
yep

1510610770
andrewrk
usually you want std.debug.warn

1510610786
andrewrk
if you want to print to stdout, use io.getStdOut(), which gives you a io.File

1510610804
dimenus
i want to print fmt though

1510610820
andrewrk
then you can use file.write, or make a io.FileOutStream so you can use the io.OutStream API (which has formatted print)

1510610850
andrewrk
or you can even go crazy, and wrap that in a io.BufferedOutStream, which has the same io.OutStream API but is buffered

1510610878
andrewrk
this commit has some examples in the tests: 4543413491078c53d24115c5229989cda05cb1a5

1510610886
andrewrk
oh and in the commit message

1510610902
andrewrk
dimenus, oh, and std.debug.warn supports formatted printing

1510610988
dimenus
i have most of the cimports workign btw

1510610994
dimenus
i can actually call glfw functions on windows and they work

1510611002
andrewrk
cool

1510611006
dimenus
can't include windows.h because zig chokes on typedef interface though

1510611026
andrewrk
do the existing parseh tests pass?

1510611047
andrewrk
zig build --build-file path-to-zig-src/build.zig test-parsec

1510611061
andrewrk
we have some typedef tests in there

1510611165
andrewrk
dimenus, do you have a reduced test case that shows the typedef problem?

1510611183
dimenus
hmmm, debug.warn worked but FileOutStream print crashed

1510611197
dimenus
andrewrk, i'll build one this evening most likely

1510611210
andrewrk
thejoshwolfe and I are going to do some pair programming tonight over the phone, working on adding more automatic c-to-zig translation

1510611249
dimenus
nice

1510612076
dimenus
andrewrk, parsec tests all pass

1510612137
andrewrk
good

1510612783
GitHub21
[zig] dimenus opened pull request #610: Fixed duplicate decl detection for typedefs/enums (master...parsec)

1510612831
andrewrk
dimenus, nice, I'll have a look in a couple hours

1510612847
dimenus
andrewrk, is it possible to do pointer math with c pointers?

1510612859
dimenus
scenario is that in glfw, monitors are returned as GLFWMonitors**

1510612902
andrewrk
have a look at std/cstr.zig

1510612923
andrewrk
in short: use foo[index]

1510612984
dimenus
yeah i was using that, i think zig might have the type confused here though

1510612996
dimenus
'?&?&struct_GLFWmonitor'

1510613034
andrewrk
it's because each thing can be null

1510613058
andrewrk
so you'll have to null unwrap the double pointer, then for each iteration null unwrap the inner pointer

1510613145
andrewrk
dimenus,

1510613179
andrewrk
(I'm assuming that the monitors array is terminated by null)

1510613336
dimenus
it's not, i have a count in this case

1510613390
andrewrk
in this case you want to slice the result

1510613459
andrewrk
const monitors = @ptrCast(&&GlfwMonitor, glfwGetMonitors())[0..monitor_count];

1510613460
dimenus
your example got me where I needed to be though

1510613461
dimenus
thanks

1510613462
andrewrk
I think that cast should work

1510613472
dimenus
interesting

1510613526
andrewrk
it's a little dangerous. you could be more safe by not casting, and doing this:

1510613556
andrewrk
const monitors = (??glfwGetMonitors())[0..monitor_count] // and then `??` before accessing monitors[index]

1510613642
dimenus
is the type namespaced?

1510613881
andrewrk
which type?

1510614273
dimenus
&&struct_GLFWmonitor

1510614377
andrewrk
it's in the @cImport namespace

1510614387
dimenus
yep

1510614404
andrewrk
so if you did `const c = @cImport(...);` then it's `c.struct_GLFWmonitor`

1510614713
dimenus
i was confusing myself, so i did a parsec

1510614716
dimenus
this is very close:  var monitors = @ptrCast(&&glfw.GLFWmonitor, glfw.glfwGetMonitors(&monitor_count))[0..monitor_count];

1510614726
dimenus
need to just convert the c_int to usize somehow

1510614821
andrewrk
usize(value)

1510614834
dimenus
i didn't realize conventional casting was a thing in zig

1510614837
dimenus
sorry about that lol

1510614837
andrewrk
this asserts that the value is positive

1510614840
andrewrk
lol no worries

1510614854
andrewrk
e.g. your program will crash if you do usize(c_int(-1))

1510614865
andrewrk
(in the above trivial case the compiler will catch it, but you get the idea)

1510614886
dimenus
here i am trying to find a compile time function to do it

1510614892
dimenus
when its just straight forward

1510614903
dimenus
that's cool that it asserts

1510614933
dimenus
i should really implement some of glfw in zig

1510614939
dimenus
so we don't need to do fancy pointer handling

1510614944
dimenus
we can just return array of known length

1510614948
andrewrk
that would be neat

1510614956
andrewrk
I was planning on doing that at some point

1510614963
andrewrk
we could even have the library expose a C interface

1510614972
andrewrk
so you can use it with either zig or C, and it can compete directly with GLFW

1510615014
dimenus
do you have thoughts on a 'using' so you can ignore namespacing temporarily

1510615018
dimenus
like over a block scope for instance

1510615052
andrewrk
we have that

1510615058
andrewrk
`use foo;`

1510615071
andrewrk
`use @import("foo.zig");`

1510615080
andrewrk
oh, over a block scope

1510615090
andrewrk
that might be interesting

1510615131
dimenus
like it shows intent rather than a global use

1510615139
dimenus
and you're less likely to have ambiguous names

1510615142
andrewrk
yeah

1510615173
jfo
how often do you use `use`?

1510615181
dimenus
not often yet

1510615184
dimenus
lol

1510615197
dimenus
but prefixing everythign with 'glfw' is high friction

1510615217
andrewrk
jfo, it's recommended generally to avoid `use`.

1510615220
jfo
sorry I meant more generally in earnest

1510615236
andrewrk
it's useful when trying to make public something you're importing, e.g. `pub use foo;`

1510615282
andrewrk
`use` slows down the compiler

1510615371
dimenus
ok, avoid it I will

1510615413
dimenus
with intellisense i guess that friction goes away anyway

1510615433
jfo
block scope use reminds me of php closures

