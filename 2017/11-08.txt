1510158315
dimenus
hmm, trying to get cmake to grab my non-system clang build

1510158320
dimenus
works when there's no other clang installed

1510158328
dimenus
does not work when there's a /mingw64/bin/clang

1510160729
ltr_
there are some hard coded paths in zig/cmake/Findclang.cmake and Findllvm.cmake

1510161250
andrewrk
dimenus, the trick is -DCMAKE_PREFIX_PATH

1510161262
andrewrk
it should prefer that

1510161300
dimenus
on windows that works well, fails on mingw

1510161303
dimenus
i've come up with a solution though

1510161331
dimenus
if you call find_library() it overrides any path you've set

1510161353
dimenus
but you can specify NO_DEFAULT_PATH and include a zig specific value like ZIG_LLVM_ROOT

1510162330
dimenus
or to not make it platform specific, ZIG_NO_SYSTEM_LLVM=on and then use CMAKE_PREFIX_PATH

1510162951
Maxxii
so just to confirm: the unicode way of handling string work is with library calls?

1510165346
GitHub100
[zig] dimenus opened pull request #599: Added the ability use a non-system llvm build on *nix platforms (llvm6...llvm6)

1510167383
andrewrk
dimenus, let me help you come up with a simpler way to get working what you're trying to get working

1510167405
dimenus
i can just use CMAKE_PATH_PREFIX to do what we need I think

1510167418
dimenus
i just hope it matches to that path first before the rest

1510167451
andrewrk
I believe it does

1510167796
dimenus
ok this just became a very simple fix then

1510167805
dimenus
we just need to translate CMAKE_PATH_PREFIX into an absolute path

1510167806
dimenus
that's it

1510167833
andrewrk
can you supply an absolute path on the cmake line?

1510167838
andrewrk
then we need no changes at all

1510167859
andrewrk
Maxxii, zig language has only the concept of bytes. unicode is a set of standards for encoding bytes. depending on what kind of operation you need to perform, you may be able to process encoded bytes, or you may need to decode bytes into unicode points, and perform operations on those

1510167874
andrewrk
if you explain what you're trying to do, I can give you more clear direction

1510168495
dimenus
andrewrk: yes, that works. apologies

1510168523
dimenus
it also does search CMAKE_PATH_PREFIX first

1510168524
Maxxii
I was just trying to understand what the ideal most convenient way to work with unicode will be in zig. In an issue you said that it will never be built into the language, so I guess if there is a json library then it has to internally make sure to use some kind of special extra unicode library

1510168535
dimenus
**PREFIX_PATH

1510168952
andrewrk
dimenus, no worries. I'm  just relieved we can keep the build system simpler

1510168998
andrewrk
Maxxii, what do you mean about json? there will be standard library functions to encode and decode bytes to/from different encodings, such as UTF-8, and they'll work at compile-time.

1510169193
andrewrk
for json, what you would probably want to do, is parse the json, decode the strings, and re-encode them as utf-8, and provide utf-8 format in the json library API

1510172608
dimenus
andrewrk: hmmm, for mingw we can't just use ZigLLVM_COFF to determine what compiler driver to call

1510172681
dimenus
have to expand ZigLDDLink to take a combination of the os/env

1510172703
andrewrk
dimenus, does mingw use COFF or ELF?

1510172719
andrewrk
also, lld master branch added a mingw driver API

1510172737
dimenus
hmm, i'm using master but it's a couple days old

1510172743
dimenus
there's just ldd::mingw::link

1510172748
andrewrk
yeah that's the one

1510172750
dimenus
coff for mingw, elf for cygwin

1510172755
andrewrk
interesting

1510172756
dimenus
iirc

1510172764
andrewrk
so mingw and cygwin are different

1510172778
dimenus
yeah let me see what the triple is in cywin

1510172781
dimenus
*cygwin

1510172785
andrewrk
I think if it's --target-os windows --target-environ gnu, then we know to use mingw

1510172804
andrewrk
the environ is cygnus for cygwin

1510172910
dimenus
not elf

1510173032
dimenus
i swear there was utility to print the target triple....

1510173080
andrewrk
zig targets

1510173090
dimenus
no i mean of the native cygwin env

1510173179
dimenus
spose I could just make a simple llvm using app

1510174142
dimenus
maybe we shouldn't worry about cygwin too much

1510174151
dimenus
WSL is already a better idea for native linux tools

1510174159
dimenus
and mingw for windows tools

1510174172
dimenus
llvm is version 3.8 in msys2/cygwin

1510174820
andrewrk
I consider cygwin a pretty low priority

1510174852
andrewrk
are you looking for something to do?

1510174870
andrewrk
if you're looking for something to do windows-related, we have the `os-windows` label on github

1510174903
dimenus
i was going to hopefully get the compiler using the mingw driver on llvm6

1510175005
andrewrk
ah, nice

1510176702
dimenus
is there a cmake command to refresh dependencies?

1510176724
dimenus
scenario is that i updated to your latest commit on master, but the std lib in my build dir is still old

1510176744
dimenus
so tests are looking for structs in io.zig that don't exist in the std lib (well they do but not in the build dir)

1510176802
andrewrk
dimenus, make install

1510176823
dimenus
nah msvc

1510176833
dimenus
i'll just clean it out :)

1510176834
andrewrk
make -p:Configuration=Release INSTALL.vcxproj

1510176842
andrewrk
or if this is a debug build

1510176848
andrewrk
sorry msbuild not make

1510176863
dimenus
that pulls old files from the build dir though

1510176869
dimenus
rather than the fresh ones from root of the zig tree

1510176877
dimenus
meh, i'll just delete the build dir

1510176878
andrewrk
no, it copies the fresh ones to the install dir

1510176879
dimenus
was just curious

1510176902
andrewrk
I'm 100% sure that it copies fresh std/ files into the install dir

1510180478
l1x
hi guys, does zig use glibc?

1510180504
andrewrk
hi l1x. are you talking about the zig compiler itself, or programs written in zig?

1510180592
l1x
if i write a zig application will it be linked against glibc?

1510180627
andrewrk
only if you use --library c

1510180638
andrewrk
and even then you can choose which libc to link against

1510180669
l1x
nice!

1510180693
l1x
i guess i could use something like musl (

1510180697
andrewrk
yes

1510180701
l1x
amazing

1510180703
l1x
thank you

1510180728
andrewrk
you're welcome. I haven't tried linking against musl yet. Please be patient if something goes wrong when you try it, file a githtub issue, and we'll get it working.

1510180893
l1x
no worries, i was just looking for something totally irrelevant (NES + GO) and i have noticed zig. i will look into it and submit github issues if i find anything. thank you Andrew

1510180919
l1x
s/irrelevant/unrelated/

1510181016
andrewrk
neat! I guess that side-bar I put on my site worked :)

1510181229
andrewrk
l1x, one more thing - if the zig standard library is good enough for your application, you can use that instead of libc

1510181236
andrewrk
and then you will create a static binary that does not depend on libc at all

1510181260
l1x
yeah that works too

