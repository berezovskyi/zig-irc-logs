1511050476
andrewrk
PV_, have a look through the standard library. search for ": var"

1511050520
PV_
OK, thanks.

1511060740
andrewrk
I'm going to live stream a talk called "Software Should Be Perfect" in 25 minutes

1511062048
andrewrk
starting now;

1511108719
jfo
hi can anyone tell me how to output llvm ir? I am trying `zig build-exe --emit llvm-ir fn.zig` but getting an error:

1511108739
jfo
Undefined symbol: C entry: _main

1511108741
jfo
symbol(s) not found

1511108743
jfo
warning: -sdk_version is required when emitting min version load command.  Setting sdk version to match provided min version

1511112352
andrewrk
jfo, can I see your fn.zig file

1511114486
redj
hey andrewrk, I'm curious, where can I see that "Software Should Be Perfect" talk?

1511114545
andrewrk
redj, I messed up trying to record it, and twitch didn't save the vod. so I'll have to re-record it

1511114565
redj
oh no :(

1511117134
jfo
andrewrk: pub fn main() -> %void { }

1511117186
andrewrk
hm it works for me

1511117211
jfo
you get llvmir out of it?

1511117325
andrewrk
yes

1511117328
andrewrk
it makes fn.ll

1511118879
jfo
andrewrk: well idk then

1511118882
jfo
hmm

1511118905
andrewrk
jfo, if you don't do the --emit argument, what happens?

1511119283
jfo
andrewrk: produces an executable as normal

1511119302
andrewrk
I'll try it on macos

1511119546
jfo
cool lmk what it does!

1511119678
andrewrk
you can also use --verbose-llvm-ir

1511119713
andrewrk
I get the same thing on my macos

1511119717
andrewrk
same thing as you

1511119736
andrewrk
--verbose-llvm-ir works though

1511120136
sparris
I miss tuples (or similar features like pairs/triples) in zig but I got excited when I saw test/cases/misc.zig : "// TODO arg tuple". Does this mean that support for tuples are planned?

1511120185
andrewrk
sparris, that's just talking about @typeId(@typeOf(args))   for something like   fn(args: ...)

1511120219
andrewrk
tuples aren't ruled out. we might allow multi-assignment and multi-return from blocks

1511120453
sparris
I understand that tuples might complicate the language, there seem to be some discussion about it in swift (by Slava Pestov for example). Is there another "recommended" way for this? I am thinking of introducing a struct for each type combination that I need to return.

1511120597
jfo
oh interesting let me try

1511120656
andrewrk
sparris, yes that is the recommended way, using a struct

1511120683
andrewrk
if the use case becomes awkward, and you file an issue showing some awkward code, that would be good justification for zig to add tuples

1511120700
jfo
andrewrk: I get

1511120707
sparris
Got it, thanks.

1511120738
andrewrk
jfo, yep

1511120764
andrewrk
jfo, if you want simpler IR I suggest using --release-fast

1511120789
andrewrk
and then look at the ; ModuleID = 'hello' one post-optimization

