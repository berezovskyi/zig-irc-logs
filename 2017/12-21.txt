1513828883
GitHub137
[zig] andrewrk pushed 1 new commit to master:

1513828883
GitHub137
zig/master 8bc5232 Andrew Kelley: add labeled loops, labeled break, labeled continue. remove goto...

1513866396
skyfex_
What's the easiest way to loop a fixed number of times in Zig? Something like for (0..4). Would it be possible to do something like "5.times {"  in ruby? "loop(5) { .. }" maybe

1513868119
skyfex_
And can a function take a slice as an argument?

1513868204
skyfex_
Ah, a figured out that last question. I don't feel the documentation makes it clear/visible enough what the type specification for slice is

1513877667
andrewrk
skyfex, I agree with you about the docs

1513877719
andrewrk
for counting, use a while loop. var i: usize = 0; while (i < 10) : (i += 1) {}

1513877786
skyfex
Yeah, i know that way. I want the easier way ;P

1513878322
andrewrk
zig's stance on that is that One Way To Do Things is important enough to omit a shortcut to loop N times

1513878462
skyfex
I suppose the natural solution would be to make ranges a type (to make the a..b syntax more general and usable for more purposes), and to introduce some kind of enumerable interface, have for (..) work on any enumerable, and have ranges implement enumerable. But I don't know if zig aims for that kind of genericness

1513878565
skyfex
The other way would be to make the "foobar(..) |...| { ...}" syntax be usable for any function. Then lazy people like me could have a utility library that implements "loop" or any other kind of looping construct

1513878731
skyfex
It's tricky to make a dead simple language these days. It's harder to cut things out than getting ideas for things to put in

1513878784
skyfex
But I think if it's possible to implement some construct in a generic way without complicating the compiler too much, it might be worth doing

1513878880
skyfex
Any plans for lambdas or anything like it btw?

1513879623
andrewrk
skyfex, I do plan to allow you to create a function definition inside a compile-time function

1513879635
andrewrk
e.g. return a function from a function

1513879644
andrewrk
but I don't have a way to do closures yet. it's pretty tricky

1513879685
andrewrk
introducing a type for a range is not a bad idea

1513879712
andrewrk
then it would make sense to have for work with a range

1513880885
skyfex
It could be an interesting exercise to imagine what a "Zig++" could look like. If there was a design document for it, you could just point to it whenever someone says "why doesn't Zig have X"

1513881209
skyfex
I would perhaps put full closures in the "Zig++" category. Would make more sense if "Zig++" had some built-in support for garbage collection. But some limited anonymous function support could make sense in Zig

1513881241
skyfex
For something like foobar.map |x| { x*2 } you don't need to capture anything from the environment

1513881510
skyfex
If the only thing you can do with a closure, is to call it immediately in the function that takes it as an argument, that would also make it quite simple, while still being very useful

1513881524
skyfex
Then you wouldn't have to worry about things you refer to going out of scope I think

1513885813
andrewrk
what would be the goal of zig++?

1513887561
skyfex
well, that's up to anyone to imagine

1513887576
skyfex
but I think it speaks to C's strength that languages have been built on top of it

1513887580
skyfex
Objective-C and C++

1513887673
skyfex
My thought with the idea of "zig++" is just to mentally sort features that doesn't belong in zig, but could be added on if someone builds on the language

1513887761
skyfex
For me, I think Nim is close to what I'd imagine "Zig++" to be though

1513887807
skyfex
Most features I think of proposing, are just things I miss from Nim

1513887933
skyfex
Some people would probably want to add C++/Java/C# object-orientation, but I think that path is a mistake

1513887977
skyfex
I see someone on reddit suggested Zig should add a borrow checker, like from Rust

1513888055
skyfex
But I would say that goes in "zig++" category. It would be great if it was relatively easy to write a compiler for Zig, so if it becomes popular, you get different compilers with different strengths

1513888081
skyfex
I've understood borrow checking to be quite hard to implement

1513891061
andrewrk
skyfex, borrow checking is also hard for programmers to use

