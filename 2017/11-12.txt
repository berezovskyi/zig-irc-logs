1510500285
ltr_
so it happens that llvm compilation on debug mode does uses more than 16Gb of ram, and i have less than 2Gb of swap , that didnt happened on my old mac with 8gb ram

1510500324
dimenus
ld is a memory hog

1510500424
dimenus
ltr_, are you building master or release_50?

1510500430
ltr_
master

1510500442
ltr_
llvm? or zig?

1510500446
dimenus
llvm

1510500460
dimenus
you may have better luck if you build & enable ldd

1510500462
ltr_
5

1510500464
dimenus
*lld

1510500470
dimenus
wait

1510500473
dimenus
master is llvm6

1510500475
dimenus
not 5

1510500484
ltr_
llvm5

1510500493
ltr_
that is what i built

1510500507
dimenus
you may have better luck building & enabling lld

1510500525
ltr_
external lld

1510500528
ltr_
?

1510500539
dimenus
no, for the llvm tree I mean

1510500551
dimenus
this has nothing to do with the zig projects

1510500589
ltr_
oh yeah, i was using gnu ld thats what is different from my mac, sometimes i forgot that llvm is not the default on linux

1510500605
ltr_
damn llvm.org down

1510500628
dimenus
there's a cmake variable that I can't see w/ llvm down

1510500632
dimenus
but i think it's LLVM_ENABLE_LLD

1510500640
dimenus
that build LLD first and then uses it to link the rest of the suite

1510500699
ltr_
oh nice

1510500701
ltr_
ill try that

1510500715
ltr_
i was able to compile llvm on debug , but with make -j2

1510500726
ltr_
i was using make -j8 that was the killer

1510500742
dimenus
heh

1510500755
ltr_
ill be right back, lunch

1510500756
dimenus
i was using ninja and it made my pc basically useless

1510500763
ltr_
jajaj

1510500774
ltr_
i mean hahah

1510500775
ltr_
sorry

1510500781
dimenus
no worries, :)

1510500797
dimenus
i played on the south american league server awhile ago

1510500802
dimenus
i'm used to jajajaj

1510500804
ltr_
ok lunch time ill brb

1510500814
ltr_
hahah nice

1510500822
ltr_
i play dota with friends time to time

1510500834
ltr_
that game takes out the worst of people

1510510220
jfo
andrewrk:      printf("%02x", '\v');

1510510258
jfo
can I format like that in `warn("{x}", '\v')`?

1510510318
jfo
`\v` is arbitrary disregard that

1510514160
ltr_
2/back

1510518433
ltr_
LLVM_ENABLE_LLD:BOOL

1510518466
ltr_
lets see if it freeze now

1510522672
ltr_
im getting this error building zig with custom llvm5 debug build

1510522674
ltr_
llvm::EnableABIBreakingChecks

1510522684
ltr_
libembedded_lld_elf.a(Driver.cpp.o):(.data+0x0): undefined reference to `llvm::EnableABIBreakingChecks'

1510527984
andrewrk
jfo, yes

1510528002
andrewrk
it's not documented yet but the code is here

1510528010
andrewrk
{x90} where "90" is the width

1510528171
andrewrk
ltr_, you have to build against LLVM/clang 5.0.0 exactly

1510528186
andrewrk
I suspect that release_50 has 5.0.1  in it

1510528200
andrewrk
when 5.0.1 is released I'll update embedded_lld to 5.0.1

1510528237
andrewrk
we almost can get rid of our LLD fork

1510528247
andrewrk
but there's 1 commit that I haven't gotten them to accept upstream

1510528259
andrewrk
because we need to solve the root problem rather than add a workaround

1510528270
ltr_
mach-o related?

1510528319
ltr_
/home/pvd/Devel/llvm5/lib/libclangBasic.a(Targets.cpp.o):(.data+0x0): undefined reference to `llvm::EnableABIBreakingChecks'

1510528324
ltr_
that also fail

1510528337
ltr_
ok ill use the tarballs from the page to test again

1510528352
andrewrk
ltr_, yes mach-o related

1510528371
ltr_
i have installed clang 5.0.1 and llvm 5.0.1 without debug information

1510528377
ltr_
and zig compiles against them

1510528388
ltr_
but when i build them from source it fails with that error

1510528544
andrewrk


1510529106
andrewrk
if we could fix this better we could get rid of our LLD fork

1510529334
jfo
andrewrk \o/

1510529461
andrewrk
ltr_, I'm not sure why you're getting that undefined symbol error

1510529569
ltr_
now im compiling llvm fron the tarballs of the llvm.org page

1510529571
ltr_
from*

