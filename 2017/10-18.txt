1508286083
pupp
hm, I'm getting "403 access denied" to default.css on ziglang.org

1508286097
pupp
so it's not supposed to be this white

1508286157
pupp


1508286228
andrewrk
pupp, I moved the docs

1508286234
andrewrk
ziglang.org/documentation/master

1508286246
andrewrk
or ziglang.org/documentation/0.1.1 if you're using the release

1508286256
andrewrk
sorry for not doing it right the first time

1508286275
andrewrk
oh

1508286278
andrewrk
I see what's going on

1508286440
andrewrk
pupp, fixed. thanks for the report

1508286505
pupp
so what was it?

1508286519
andrewrk
forgot to also move the css/js when I moved the HTML docs

1508287507
pupp
tried this today

1508287512
pupp
repl gets blocked when I start message loop

1508287517
pupp


1508307869
Elronnd
I'm trying to compile on freebsd, and llvm/clang stuff isn't autodetected?

1508307911
Elronnd
what do I set CLANG_LIBRARIES and LLVM_LIBRARIES to?  I tried /usr/local/llvm50/lib but I got complaints that I can't link to directories

1508307935
tiehuis
do you have llvm-config-5.0 available?

1508307991
Elronnd
no, but I have llvm-config50

1508308017
tiehuis
try adding llvm-config50 to the `NAMES` section in cmake/Findllvm.cmake

1508308223
Elronnd
now it's bitching about CLANG_LIBRARIES

1508308257
tiehuis
okay, clang doesn't have a config thing but just looks up where llvm is located

1508308275
tiehuis
is llvm located at '/usr/lib/llvm/5/'? or '/usr/lib/llvm-5.0/'?

1508308282
tiehuis
else you may need to add an extra path

1508308287
Elronnd
wait nvm I got it

1508308297
Elronnd
had to edit Findclang.cmake too but cmake isn't complaining anymore

1508308332
tiehuis
what were the edits you had to make, could add these to the actual script

1508308423
Elronnd
sure, one sec

1508308532
Elronnd


1508308573
tiehuis
are those clang path additions standard on freebsd?

1508308587
Elronnd
yes

1508308598
Elronnd
I just did pkg install llvm50, with no other modifications

1508308614
tiehuis
okay, i'll make a pull request with those, unless you want to?

1508308635
Elronnd
go ahead

1508308743
Elronnd
dafuq?

1508308746
Elronnd
"/usr/bin/ld: cannot find -lLLVMLTO"

1508308821
Elronnd
but there is a /usr/local/llvm50/lib/libLLVMLTO.a

1508308844
tiehuis
i don't know why it needs to pass '-lLLVMLTO' if you are static linking

1508308934
Elronnd
hmmm

1508308947
Elronnd
if I grep for LLVMLTO it's only present in a couple build cmake cache files

1508309143
Elronnd
yay, I hacked it up to build!

1508309155
tiehuis
awesome, what was the trick?

1508309204
Elronnd
just manually edited the linker script to add -L/usr/local/llvm50/lib

1508309275
tiehuis
that seems a bit of a hack, let me see what what my linker arguments are for a build

1508309289
Elronnd
oh, I also had to edit a couple of other things in the linker script.  Apparently it thinks -l/usr/lib/libexecinfo.so is valid (it isn't).  So I had to change that to -lexecinfo

1508309361
Elronnd
uh, what?

1508309362
Elronnd
TODO c type size in bits for this target

1508309362
Elronnd
zsh: abort (core dumped)  ./zig build-exe test.zig

1508309372
Elronnd
promising...

1508309443
tiehuis
yeah, i don't think anyone actually has been building this on freebsd so there may be a few things that come up

1508309451
tiehuis
that particular change seems pretty straight-forward though

1508309471
tiehuis
i presume the sizes of the types are similar to linux so you could move one case label up to probably get around that

1508309476
tiehuis
in 'src/target.cpp'

1508309523
Elronnd
well it shouldn't be dependent on the os, but rather the comipler

1508309530
Elronnd
which would be clang or gcc in both cases

1508309557
Elronnd
which case label?

1508309567
tiehuis
i presume this is for cross-compiling partly as well, not 100%

1508309572
tiehuis
line 500-ish

1508309581
Elronnd
oic

1508309583
tiehuis
in the function `target_c_type_size_in_bits`.

1508309598
Elronnd
ye I'll just say freebsd is linux

1508309697
Elronnd
yeI did that and now I get a bunch of errors about unsupported os

1508309712
Elronnd
(from stdlib, so compiler is actually compiling)

1508309737
tiehuis
you should be able to compile simple things however even without the stdlib though?

1508309813
Elronnd
even for libc hello world, I get a bunch of errors

1508309825
tiehuis
mind posting what they are somewhere?

1508309880
Elronnd


1508310242
tiehuis
whats the test program you are running?

1508310275
Elronnd


1508310282
Elronnd
and I'm running it with ./zig build-exe test.zig

1508310457
tiehuis
you probably want to use `--library c` as an argument by the way

1508310477
tiehuis
also, not sure if this will work, but here is a simpler example that may give you something different:

1508310585
Elronnd
no dice

1508310624
tiehuis
think i'll spend some time this weekend seeing if i can get these initial hurdles solved a bit better

1508310649
tiehuis
since freebsd isn't too uncommon anyway and it should be quite similar to linux in a lot of cases

1508310671
Elronnd
ok

1508310672
Elronnd
gl!

1508310690
tiehuis
hopefully i can report back to you with some better news!

1508310792
Elronnd
(default clang installed is a really old version so you'll have to isntall a new one from package (or ports))

1508310807
tiehuis
okay, thanks will keep in mind.

1508311722
winsoff
What's the big deal with zig

1508311735
Elronnd
it's like c but it sucks less

1508311754
Elronnd
it's the only lang (that I know of) that tries to be an alternative to c rather than an alternative to c++

1508311764
winsoff
Ah, that's kind of nifty.

1508311771
winsoff
So it's not high level?

1508311815
Elronnd
I wouldn't say that

1508311836
Elronnd
(bear in mind, I don't really know zig yet)

1508311877
tiehuis
its not specifically low-level, but it does target a lot of the use-case a low-level language needs to consider (like alignment, packed structures) etc

1508311928
tiehuis
although it provides higher-level features than c, such as adts, nullable, iterators and error types

1508311945
Elronnd
I don't think that's necessarily relevant.  C++ provides those things, as do most "c++ alternatives"

1508312022
tiehuis
sure, and they are still suitably low-level for many tasks vs. a language like Java

1508312106
Elronnd
my point is, that I don't think that presence of "low-level" features in a language is necessarily relevant to general useage of it

1508312128
Elronnd
c#, for instance, afaik supports low-level memory features, but I wouldn't want to write a kernel in it

1508312131
Elronnd
same for c++

1508312304
winsoff
So what's wrong with Rust?

1508312364
Elronnd
it competes with c++ not c

1508312371
Elronnd
(also, nothing

1508312386
tiehuis
nothing really, i think it has a different niche personally

1508319979
hasen_judy
Congratulations on the first beta release

1508325786
pupp
Wish somebody could write prettyprinter for gdb. For Buf type.

1508325790
pupp
it's definition is in src/buffer.hpp, and ZigList is in src/list.hpp

1508325792
pupp


1508325826
pupp
struct Buf { ZigList<char> list; }

1508326049
pupp
*its

1508338904
andrewrk
pupp, it would be great if we could put something in the debug symbols to get that automatically

1508338982
andrewrk
Elronnd, I read the logs. Did you ever try this command? ./zig build-exe test.zig --library C

1508339012
andrewrk
sorry, lowercase c

1508339147
Elronnd
andrewrk: yes, I added --library c

1508339163
andrewrk
and the errors were the same as

1508339180
Elronnd
I never ran it without --library c

1508339213
Elronnd
ye same errors with and without

1508339213
andrewrk
there's code in the compiler that explicitly checks for `main` and doesn't add that bootstrap.zig file. so I'm confused how that got into the build

1508339227
andrewrk
your source code is exactly

1508339240
andrewrk
with `export` in front of fn?

1508339329
Elronnd
no, it's

1508339526
andrewrk
Elronnd, aha so here's the deal, `pub` is making a zig function available outside the current file

1508339536
andrewrk
`export` is making a function available with the C ABI in the current object

1508339549
andrewrk
if you're integrating with libc, you need to make the object export `main`

1508339780
Elronnd
do I say -> %int, or -> int?

1508339862
andrewrk
look at example/hello_world/hello_libc.zig

1508339870
andrewrk


1508339888
Elronnd
there are fewer errors now but they're the same type

1508339888
andrewrk
we don't have a way to use the error type in the C ABI

1508339902
andrewrk
can I see?

1508339903
Elronnd


1508339917
Elronnd
(code

1508339949
andrewrk
hmm I think I know what's happening

1508339961
andrewrk
ok I'll give you the work around and then I'll fix it in master branch

1508339979
andrewrk
workaround is add this to your code:

1508340041
Elronnd
...?

1508340044
andrewrk
pub fn panic(msg: []const u8) -> noreturn { @import("std").c.abort(); }

1508340077
andrewrk
the default panic implementation was doing OS-dependent stuff, but I'll update it to call libc functions if you are linking libc

1508340093
Elronnd
what's the difference between -> noreturn and -> %void?

1508340110
andrewrk
noreturn tells the compiler that control flow does not make it back to the caller

1508340118
andrewrk
%void says that you'll either return an error, or nothing

1508340131
Elronnd
almost!

1508340134
Elronnd
it compiles and links fine

1508340139
Elronnd
but when I run, I get ELF interpreter /lib64/ld-linux-x86-64.so.2 not found, error 2

1508340152
andrewrk
ahh I know what's going on

1508340179
andrewrk
do me a favor, create a normal hello world C file, and run ldd on it. it should tell us the appropriate path for the dynamic linker

1508340221
Elronnd
nope

1508340230
Elronnd
just prints out "libc.so.7 => /lib/libc.so.7 (0x800821000)"

1508340246
Elronnd
but whenI vim the file, I see "/libexec/ld-elf.so.1" near the top

1508340262
andrewrk
that must be it

1508340271
andrewrk
the logic to fix is here:

1508340376
andrewrk
I think we can just check if we are targeting FreeBSD and hard code that value

1508340490
Elronnd
it works!

1508340514
andrewrk
Elronnd, great. you did all the work to get zig working (with libc) on freebsd

1508340540
Elronnd
now that it works, can all the 'os not supported' get removed from stdlib?

1508340580
andrewrk
those were not actually incorrect. whenever those compile errors were happening, we were trying to do something without libc that we would need to add freebsd syscalls for

1508340597
andrewrk
for example the panic implementation was trying to use linux syscalls to read the program exe and get a stack trace

1508340600
Elronnd
ah

1508340627
Elronnd
idea: can an alternate version of stdlib exist that depends on libc, for compatability purposes?

1508340648
andrewrk
I think we have that, and it is @import("std").c

1508340659
Elronnd
ah

1508340667
andrewrk
(some functions missing, but you can look at that file and see how to add more)

1508340718
andrewrk
or you can just import libc with .h files, and everything works except for really fancy #define macros

1508340798
Elronnd
ok

1508340831
andrewrk
Elronnd, for the panic implementation, however, I will add a check to see if you are linking libc, and on the OSes where you would get that error, we can call c.abort()

1508340858
Elronnd
ok

1508340874
Elronnd
how can the linker script be autofixed?

1508340891
andrewrk
oh yeah what was the deal with that?

1508340901
Elronnd
couple of things

1508340929
Elronnd
I had to add -L/path/to/llvm/libraries to it

1508340952
Elronnd
and there was a line, -l/usr/lib/libexecinfo.so.1, which I had to change to -lexecinfo

1508341120
andrewrk
for the first one, try adding to CMakeLists.txt link_directories(${LLVM_LIBDIRS})

1508341121
andrewrk
just after the include_directories(${LLVM_INCLUDE_DIRS})

1508341155
Elronnd
(should it also be for CLANG_LIBDIRS?

1508341155
andrewrk
second one sounds harder to fix. I'll be back later

1508341176
andrewrk
I don't think we have CLANG_LIBDIRS

1508341415
Elronnd
ok

1508341566
Elronnd
how do I run the unittests?  'make test' doesn't do anything

1508341598
Elronnd


1508341738
andrewrk
Elronnd: the readme has testing instructions

1508341783
andrewrk
They're going to fail for you since we don't have freebsd support in the standard library

1508341816
andrewrk
If you're interested in contributing, this would be a big way to do that. You could follow the pattern set by linux

1508341838
Elronnd
ok

1508342120
Elronnd
yeah it's not working

1508342233
Elronnd
const is_posix = builtin.os != builtin.Os.windows; since this is here, why am I getting errors where it checks if this is posix or windows and errors else?

1508342562
Elronnd
hmmm.  openSelfExe would require sysctl on freebsd.  Is sysctl available in zig's stdlib?

1508350915
andrewrk
Elronnd, sysctl is probably a freebsd syscall. it would behoove us to look at an open source freebsd libc implementation of sysctl and see what they do

1508350947
andrewrk
have a look at std/os/linux.zig

1508350954
andrewrk
we will likely have something similar for freebsd

1508354381
Elronnd
andrewrk:

1508354384
Elronnd
how about

1508354417
andrewrk
Elronnd, my mistake :)

1508354515
Elronnd
(I mean, I think there are other libcs that support fbsd, but easiest is probably the official one since it just has top support fbsd instead of having workarounds for different OSes)

1508354592
Elronnd
anyway, I searched for 'freebsd syscall table' and found

1508354627
andrewrk
yeah. the freebsd libc will know how to make syscalls

1508354642
andrewrk
I imagine it is quite similar to linux, but with different numbers

1508361789
Elronnd
ye probably

1508363597
drakonis
hello dev man andrewrk, what's zig's inspirations besides C?

1508363736
andrewrk
zig's goal is to help programmers create robust, optimal, maintainable  software together

1508363746
Elronnd
drakonis: there is some from go and rust

1508363755
drakonis
hmm, i see.

1508363789
Elronnd
I mean, every language is influenced by everything that came before it

1508363794
drakonis
yes

1508363799
Elronnd
so probably ever language that andrewrk has ever used has influenced zig in some way

1508363805
drakonis
so its like this complex web of languages :v

1508363806
andrewrk
yes

1508363817
drakonis
its probably a long list of inspirations

1508364151
Elronnd
andrewrk: now I'm curious, what languages did you learn/know before you made zig?

1508364166
drakonis
same

1508364647
drakonis
i'm interested in writing some zig code because it is compatible with C

1508364651
drakonis
probably never C++ yeah?

1508364668
drakonis
though not C++ because its a horrible monster?

1508364773
Elronnd
official (and only) zig implementation is in c++...

1508364780
Elronnd
(but yes I agree c++ is a horrible monster)

1508365079
drakonis
i mean

1508365089
drakonis
no C++ compatibility because it is too complex?

1508365133
Elronnd
oh

1508365139
Elronnd
it can't be

1508365142
Elronnd
D has it

1508365154
Elronnd
(of course, zig maybe can't use c++ libraries because they have classes and namespaces)

1508365205
drakonis
D also has adoption in the gaming industry to a certain degree

1508365211
drakonis
naughty dog used it

1508365248
Elronnd
kinda

1508365256
Elronnd
but people mostly use pure-d libraries  or c libraries

1508365329
drakonis
a pure d library

1508365337
drakonis
yes

1508365464
andrewrk
Elronnd, vb6, perl, javascript, action-script, C, C++, java, python, ruby, vb.net, c#, scheme, ti-basic, lua, bash, go, rust

1508365516
drakonis
now that's a lot of languages!

1508365521
Elronnd
wow

1508366183
drakonis
that's more than me i guess

