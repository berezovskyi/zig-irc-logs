1513913200
Tobba
skyfex: I feel like One Way might not

1513913271
Tobba
of course that requires a pretty high caliber of CTFE shenanigans, but zig's comptime is really leaning in the right direction

1513913312
Tobba
and well; move semantics

1513914031
Tobba
by the way; andrewrk: is there any "official" stance w.r.t move/copy semantics, destructors and linear types?

1513914123
andrewrk
Tobba, destructors - yes, the official plan is to not have them

1513914249
andrewrk
the other stuff, no official stance yet as I flesh out the other language decisions

1513914345
Tobba
andrewrk: figured; I guess compiler-inserted function calls would be somewhat antithetical to zig

1513914487
andrewrk
Tobba, yeah. so far we have No Hidden Control Flow

1513914513
Tobba
I found an alternative way of doing it in the current iteration of my toy language, but it even that would be somewhat magical flow control

1513914524
andrewrk
what's your toy language?L

1513914636
Tobba
a half-finished mess; but the rules wrt destructors is that every use of a variable becomes a normal reference, except the last one, which becomes a movable reference

1513914647
Tobba
and every variable must be used at least once

1513914670
andrewrk
interesting

1513914685
Tobba
you get destructors out of that by defining a cast from a moving reference to a normal one that destroys the value afterwards (this is also a bit funky though)

1513914689
andrewrk
what about multiple references?

1513914742
Tobba
at the moment it's just based on lexical order

1513914775
Tobba
I'm still trying to work out the memory management semantics of it all though

1513914873
Tobba
I mean, it's still basically magic flow control, it's just not done directly by the compiler

1513915418
Tobba
oh; after a moving reference is passed as an argument, accessing an existing reference is UB (not entirely ideal)

1513916621
Tobba
andrewrk: something that might actually be interesting for zig: to partially avoid the "only certain types may be passed by value" quirk, accessing a variable actually calls the reference operator; built-in references/integers simply return the same value

1513916669
Tobba
I mean that's ostensibly compiler-inserted flow control, but at it's at least consistent about it

1513916735
andrewrk
> accessing a variable actually calls the reference operator

1513916738
andrewrk
this is already true behind the scenes

1513916769
andrewrk
kind of

1513916776
Tobba
neat

1513916779
andrewrk
how does that avoid the quirk though?

1513916852
andrewrk
what we actually need is a way to say: i want to take a parameter, which is either a reference or a copy, and if it's a reference then the underlying value will not change at least until I return

1513916868
andrewrk
then zig can pass the value however it sees fit

1513917134
Tobba
andrewrk: oh, right; important detail is that function arguments are taken to have the type of a moving reference inside the function

1513917193
Tobba
which I realize now doesn't transfer too well, but it means T becomes T&& while T& stays T& since it would return itself

1513921947
GitHub107
[zig] andrewrk pushed 1 new commit to master:

1513921947
GitHub107
zig/master d917815 Andrew Kelley: explicitly return from blocks...

1513928259
GitHub168
[zig] andrewrk pushed 1 new commit to master:

1513928259
GitHub168
zig/master ea805c5 Andrew Kelley: fix darwin and windows from previous commit

1513937534
GitHub85
[zig] thejoshwolfe pushed 1 new commit to master:

1513937534
GitHub85
zig/master 0e7fb69 Josh Wolfe: bufPrint returns an error

1513966506
GitHub130
[zig] andrewrk pushed 1 new commit to master:

1513966506
GitHub130
zig/master e44a113 Andrew Kelley: std.math: remove unnecessary inline calls and...

1513985288
GitHub134
[zig] andrewrk pushed 1 new commit to master:

1513985288
GitHub134
zig/master 760b307 Andrew Kelley: fix endianness of sub-byte integer fields in packed structs...

