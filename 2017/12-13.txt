1513132016
GitHub145
[zig] thejoshwolfe pushed 1 new commit to master:

1513132017
GitHub145
zig/master 0003cc8 Josh Wolfe: self-hosted: implement addr of align parsing

1513133468
GitHub144
[zig] thejoshwolfe pushed 1 new commit to master:

1513133468
GitHub144
zig/master d295279 Josh Wolfe: self-hosted: implement var decl align

1513172705
GitHub41
[zig] andrewrk pushed 1 new commit to master:

1513172705
GitHub41
zig/master 84619ab Andrew Kelley: add test for allowing slice[slice.len..slice.len]

1513173679
skyfex
andrewrk: I found some time to test cInclude again. It just works now :)

1513175058
andrewrk
skyfex, great. now to solve your other issues

1513176687
skyfex
We have hello world!

1513176689
skyfex


1513176725
andrewrk
cool!

1513176876
skyfex
There's something very weird going on though. I tried to define a const string, but then the linker complained that memcpy was missing. I was going to write my own memcpy, so I defined the function but didn't fill it out. I tried to compile just to check that it would link, and suddenly it just worked. No idea what's really going on

1513177596
andrewrk
zig creates memcpy (and other primitives) for you when you do build-exe or build-lib

1513177600
andrewrk
in builtin.o

1513177628
andrewrk
but if you do build-obj then it's assumed you're going to link against libc or similar

1513177648
andrewrk
what build command are you using?

1513178099
skyfex
build-obj

1513178171
skyfex
Do you know why this code generates code to memcpy btw? Doesn't seem necessary to me:

1513178176
skyfex
const string = "Hello World from Zig!\n";         for (string) |ch| { ... }

1513178251
andrewrk
it probably doesn't once the optimizer runs, but the naive code generated might copy, for example, the ptr and the len from the constant data into a stack variable

1513178294
andrewrk
this is an LLVM thing - it can generate calls to memcpy and some others, so we have to make them available

1513178300
andrewrk
is there any way you could use build-exe instead of build-obj ?

1513178351
andrewrk
the linker is failing right? but then you could try the way you're linking, but with all the args given with --verbose-link

1513178355
andrewrk
which will include builtin.o

1513178847
skyfex
I tried a few things. I tried "build-exe .." and "build-obj lib/std/special/builtin.zig" .. the issue then is the built-ins related to float.

1513178858
skyfex
ld.lld: error: undefined symbol: __aeabi_dcmpeq >>> referenced by floor.zig:59 (C:\SW\zig\lib\zig\std\math\floor.zig:59) >>>               .\zig-cache\builtin.o:(floor.0.2)

1513178866
skyfex
(dozens of those)

1513178881
andrewrk
ohhh ok

1513178883
skyfex
But if I copien builtin.zig, and deleted all the functions related to floating point, then it works

1513178890
andrewrk
so we just need to port more of compiler-rt

1513178907
andrewrk
can you open an issue with all those missing float built-ins?

1513178948
andrewrk
actually, post them here:

1513179104
skyfex
done

1513179155
andrewrk
thanks! I should be able to get these implemented soon. it's just porting code from LLVM's compiler-rt project

1513179157
skyfex
I have to leave now. Will experiment more tomorrow maybe

1513179180
andrewrk
take care

