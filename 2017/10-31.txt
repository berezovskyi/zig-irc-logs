1509433465
pupp
What arguments does lld accept? Don't see much here:

1509433601
pupp
in case I disconnect, I'm reading logs, I'll see a reply

1509434887
pupp
There is some info in deps/lld/COFF/Options.td

1509434900
pupp
-dynamicbase:no worked

1509434953
pupp
is there really no info on how to actually use it?

1509435711
tiehuis
it says it accepts the same arguments as gnu ld so try

1509435780
pupp
It sure didn't accept "--image-base"

1509435803
pupp
they also should start from / or -

1509435806
pupp
and not from --

1509435808
tiehuis
here is the options my lld allows

1509435839
pupp
maybe they allow --, don't know

1509435874
tiehuis
seems as if all arguments are '--'

1509437105
pupp
Nope, '--dynamicbase:no' doesn't work. I guess it's to be more compatible with windows tools.

1509437147
pupp
is that a new version, or os difference

1509437157
pupp
whatever, it works

1509437225
tiehuis
LLD 5.0.0 (compatible with GNU linkers) on linux

1509438066
pupp
how to disable debug info generation for .zig programs?

1509438090
tiehuis
zig '--strip'

1509438097
pupp
thanks!

1509438124
tiehuis
although there is an issue active saying it doesn't work

1509438144
tiehuis
so you may want to double check that, and if you have the strip command available use that after if possible

1509438229
tiehuis
just tried and doesn't work for me (segfault), here is the relevant issue for reference:

1509438410
pupp
I expected --release-fast to imply --strip

1509438426
pupp
Maybe there should be --add-debug-info instead

1509438446
pupp
Just so people could see what they are doing

1509438482
pupp
People sometimes release with debug info by accident

1509438558
pupp
Just deleting .pdb isn't enough, there is still a section in .exe left

1509441980
puppp
What the LLVMCreateTargetDataLayout does?

1509442001
puppp
src/codegen.cpp/init

1509442098
tiehuis
seems it just specifies some platform data sizes and the like to llvm

1509442122
puppp
I need to rearrange sections a bit, maybe that's it

1509442142
tiehuis
can't access the actuall llvm docs right now but here are some elements it may contain:

1509442183
tiehuis
i don't know if this will help for rearranging sections

1509442199
tiehuis
but i'm not an llvm expert not really too sure

1509450971
pupppp


1509451007
pupppp
Doesn't look like it's the best way to show patches.

1509451105
pupppp
Trying to figure out how to print something from inside lld. There is message(const Twine &Msg) in deps/lld/COFF/error.cpp, but not sure what Twine is.

1509451129
pupppp
something multithreading related.

1509451225
pupppp
I have a guess on how to rearrange sections, just need to rearrange OutputSections inside deps/lld/COFF/MapFile.cpp

1509451255
pupppp
i meant, inside deps/lld/COFF/Writer.cpp

1509451311
pupppp
std::iter_swap(OutputSections[0], CodeSection) didn't work it seems. It needs iterators, I passed just values themselves.

1509451474
ltr_
strip is giving me a segfault

1509451477
ltr_
on ubuntu

1509451480
ltr_
llvm 5.0.1

1509451492
pupppp
--strip or strip?

1509451552
pupppp
--strip gives segfaults for now, haven't tried strip.

1509451827
ltr_
--strip

1509451880
pupppp


1509451891
pupppp
was in the chat logs today

1509451910
ltr_
is not just macos

1509454373
hasen_judy
Is it possible to embed extra information in the error value?

1509454386
hasen_judy
Say I'm parsing something and I want to report the point at which the parser failed

1509459677
hasen_judy
I guess for such use case I should just create my own enum instead of returning errors

1509459693
hasen_judy
e.g. enum ParseResult { ... }

1509460593
ltr_
you could return the error, and then the user of the function/method could take the info of the error elsewere

1509460611
ltr_
oh he left

1509462003
andrewrk
pupppp, to rearange sections, use a linker script

1509462055
andrewrk
I think you can set the base address with a linker script too

1509463272
pupppp
andrewrk, linker script?

1509463381
andrewrk
pupppp, here is an example:

1509463401
andrewrk
in this example the author sets the base address, then specifies the order and alignment of sections

1509463460
andrewrk
pupppp, by the way we should  be able to get you to not have to patch zig, give me a couple days to make some changes

1509463578
pupppp
ok. I have too much time anyway, might as well poke around randomly.

1509464117
pupppp
any plans for exceptions btw?

1509464213
andrewrk
pupppp, yes, the plan is to not have exceptions

1509464275
pupppp
so panic will be one way only, without recovery

1509464473
andrewrk
correct

1509464789
pupppp
is it possible to have multiple return variables in llvm?

1509464846
andrewrk
no. you would use a struct and the sret attribute

1509464878
andrewrk
llvm.org/docs/LangRef.html

1509467722
ltr_
so errors are kind of a tagged union

1509467724
ltr_
?

1509467728
ltr_
hello andrewrk , how are you?

1509470287
andrewrk
hello ltr_

1509470318
andrewrk


1509471212
dimenus
andrewrk: looking for a little clarity on your feedback, are you against global/static data in general?

1509471216
dimenus
or just static initializers?

1509471435
andrewrk
just code that runs before main()

1509471447
andrewrk
e.g. heap allocations

1509471469
andrewrk
so for example you could lazily initialize the data, or explicitly initialize it with a call in main()

1509471487
andrewrk
but I think the state belongs in the CodeGen struct, not in os.cpp

1509471509
andrewrk
you did most of the work already though, and this is just kind of my preference, so I'd be happy to take it from here if you want

1509471513
dimenus
ok, I'll just store it as two bufs on CodeGen though

1509471519
dimenus
**then

1509471524
andrewrk
works for me

1509471542
andrewrk
and you would pass them into the os function

1509471551
andrewrk
because os.hpp shouldn't know about CodeGen

1509471554
dimenus
my intuition was to hide it since I'm saving the lib / include paths which are what the rest of the code is interested in

1509471556
dimenus
so I tried to hide it

1509471563
dimenus
but I understand the concern about static initializers

1509471587
andrewrk
yeah it makes sense what you did. I think we want to "refresh" the information between compilation invocations though

1509471624
andrewrk
e.g. if you created a CodeGen and did a compilation, then sleep(999) while you install/uninstall MSVC, then create another CodeGen and do another compilation

1509471627
andrewrk
zig should do the right thing

1509471636
dimenus
wait, you don't want os.hpp to konw about codegen?

1509471643
dimenus
how would that work then

1509471652
andrewrk
you would pass the state into the functions that need it

1509471709
dimenus
hmm, so then the codegen itself should absolutely have a reference to the sdk path

1509471716
andrewrk
yes

1509471731
andrewrk
I think it makes sense to expose the part where you explicitly want to check for an SDK. you might want to do it more than once in the process's lifetime

1509471744
dimenus
i'm just making sure I understand this right, the os functions would need access to CodeGen

1509471754
dimenus
which would mean os.hpp now needs all_types.hpp

1509471774
dimenus
i thought I read above that you wanted to avoid that

1509471778
dimenus
but maybe I'm mistaken

1509471783
andrewrk
let me make a quick little paste

1509471788
dimenus
kk

1509472054
andrewrk
dimenus,

1509472056
andrewrk
does this make sense?

1509472240
dimenus
yep, will mark that up later today then.

1509472247
dimenus
thanks

1509472410
andrewrk
awesome. this is a huge contribution to zig

1509472463
andrewrk
dimenus, and congratulations on your first pull request

1509475437
dimenus
thanks!

1509475467
dimenus
It looks like your code for linking with the mingw CRT is commented out, I might tackle that one as well

1509475570
andrewrk
dimenus, that would be neat. I was waiting until llvm 6 comes out, since they added a mingw driver to LLD

1509475585
andrewrk
it might work even before that though? I'm not sure

1509475623
andrewrk
btw, LLD 6 also makes debugging zig programs work in MSVC

1509475670
dimenus
maybe i should be using that backend then

1509475676
dimenus
:D

1509475734
dimenus
which branch are you cloning, stable?

1509475875
andrewrk
master branch is the main, supported branch

1509475887
andrewrk
everything else is work-in-progress

1509475910
andrewrk
I'll keep the llvm6 branch up to date with LLVM master branch until 6 is released, then I'll merge it into master

1509475953
andrewrk
but there's still an assert triggering in the llvm6 branch, which I'll look into fixing today

1509477721
dimenus
i'm triggering out what's causing the hang in mingw

1509477736
dimenus
it's something in codegen_link

1509477746
dimenus
**triggering = trying

1509478722
andrewrk
dimenus, is the hang on exit?

1509478731
andrewrk
I think pupppp's workaround is reasonable; there's no reason to call destructors in DLLs anyway

1509478804
dimenus
msvc doesn't hang though

1509478821
dimenus
andrewrk: yes, it is. Also, you changed your mind on the feedback?

1509478827
dimenus
Just using strings on the CodeGen struct now

1509478881
andrewrk
I didn't change my mind, I think I'm just not communicating well

1509478906
andrewrk
I don't care if they are strings or a struct, but the state needs to be in CodeGen, and the same state used for the same CodeGen unit

1509478978
dimenus
ok, so find_windows_sdk should really return early if its already populated

1509478981
dimenus
to ensure consistency

1509479075
andrewrk
find_windows_sdk should always do work, no caching. in the logic outside of os.cpp, the code should use CodeGen to cache the value and not call find_windows_sdk if it is already populated

1509479091
dimenus
thumbsup.png

1509479107
pupppp
my workaround is terrible, I should recompile dll and make it close properly. Doubt I'll understand anything there though. Also it's not quite mine.

1509479131
dimenus
can you send me the link to the workaround pupppp

1509479136
dimenus
*?

1509479163
pupppp


1509479182
pupppp
TerminateProcess

1509479225
andrewrk
dimenus, move main to main2, have main call main2, and call os.exit(return_code), implement os_exit as _exit(code) for POSIX and TerminateProcess(GetCurrentProcess(), code) for windows

1509479237
andrewrk
e.g. don't let main return to libc

1509479268
andrewrk
sorry, os_exit (defined in os.hpp/os.cpp) not os.exit

1509479292
pupppp
it's honestly utterly terrible. It's hiding a problem instead of solving it.

1509479297
andrewrk
is it though?

1509479304
andrewrk
what can possibly happen in a DLL that we want to happen on exit?

1509479316
pupppp
all other dll work properly without it. Need to fix dll.

1509479338
andrewrk
maybe put fflush(stderr); fflush(stdout); after calling main2

1509479360
pupppp
need to read system internals to find out

1509479379
andrewrk
I'll tell you the answer: it's nothing. any code that is in a DLL destructor is a bug

1509479419
andrewrk
if that DLL depends on the destructor being run, then it will behave incorrectly if the system loses power or is abruptly killed by task manager

1509479452
andrewrk
the OS does the important stuff automatically: cleaning up memory, closing file descriptors, ending network connections

1509479536
pupppp
fixing llvm.dll have extra benefits like, making distribution smaller? It probably generates code for 15 different processors, you rarely need it all.

1509479557
pupppp
probably unrealistic.

1509479562
dimenus
linking on mingw takes so long

1509479564
dimenus
sooooo long

1509479584
pupppp
dimenus, fixed that in the same issue

1509479614
pupppp
not really fixed, just compiled lld separately, as dll

1509479641
andrewrk
pupppp, it's important to zig to have cross compilation work out of the box. the cost is not high. windows zig distribution is 19 MB, no big deal

1509479800
pupppp
i like tiny c compiler so much. A working c compiler in 400 lines of code.

1509479810
pupppp
code is low quality, but it works

1509479852
dimenus
andrewrk: hopefully that wraps up the last of the issues

1509479877
pupppp
it eventually crumbled under it's weight though

1509479925
ltr_
does go depends on lld?, it seems to me that they implemented their own linkers for every os

1509479941
andrewrk
ltr_, yes they implemented their own linkers

1509479971
andrewrk
we might have to do the same for MACH-O since LLD has poor support for that

1509479991
ltr_
when i was researching for the patch for mach-o, i saw that their linker for osx is really simplier than lld, and it just work

1509479998
andrewrk
dimenus, looks good, I think the only problem left is the build failure on POSIX

1509480039
andrewrk
dimenus,

1509480048
andrewrk
looks like some missing #ifdefs

1509480070
andrewrk
I can fix that up for you if you want since I'm on linux

1509480095
dimenus
ah I'm stupid

1509480109
andrewrk
I don't think you need to beat yourself up

1509480119
andrewrk
this is a really great PR

1509480119
dimenus
idk why I thought the implementation wouldn't get added on POSIX since it isn't called in analyze.cpp

1509480132
dimenus
brain fart moment

1509480133
andrewrk
dimenus, maybe because that's how it works in Zig :)

1509480167
dimenus
should I ifdef the whole function then? I don't want it called on non-windows

1509480363
andrewrk
that's fine

1509483192
andrewrk
dimenus, we have buf_len and buf_resize to use instead of accessing `list`

1509483196
andrewrk
I'm fixing it

1509483214
dimenus
for ensure capacity?

1509483241
dimenus
i just want a buffer of a certain size and buf_alloc_fixed() doesn't seem to to do what I waant

1509483247
dimenus
though I guess if I resized after it that would be fine too

1509483269
dimenus
buf_alloc_fixed sets the length property to the passed parameter rather than 0

1509483302
andrewrk
buf_alloc() if you want 0

1509483313
andrewrk
buf_resize() to grow or shrink

1509483318
andrewrk
buf_len() to get length

1509483401
dimenus
buf_alloc_fixed() followed by buf_resize() would have worked then

1509483498
andrewrk
buf_alloc_fixed just calls buf_resize with the parameter

1509483549
dimenus
yeah that's where all of my confusion came from a few days ago

1509483559
dimenus
I was just getting familiar with the codebase though

1509483564
andrewrk
yeah, no worries

1509483630
andrewrk
I'm gonna merge this, just give me a few hours

1509483630
dimenus
Is this meant to convey Cygwin? ZigLLVM_Cygnus

1509483634
andrewrk
yes

1509483641
dimenus
What about mingw?

1509483657
andrewrk
that's added in llvm 6

1509483695
andrewrk
I think a mingw target looks like:  os=windows arch=i386/x86_64 environ/gnu

