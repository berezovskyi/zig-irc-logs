1509674265
andrewrk
dimenus, assertion fixed and pushed. llvm6 branch passes all tests with llvm built in debug mode

1509674317
GitHub71
[zig] andrewrk pushed 1 new commit to master:

1509674317
GitHub71
zig/master dc8b011 Andrew Kelley: fix incorrect debug info for empty structs...

1509675016
dimenus
very nice

1509676006
dimenus
does the IR looks similar now?

1509679146
dimenus
building libpng on windows =|

1509679155
dimenus
even with their janky CRT, I prefer mingw

1509679721
andrewrk
dimenus, yes it does

1509679760
andrewrk
I think depending on libpng in the tetris game was a bad decision. too hard on windows

1509679775
andrewrk
I'd like to get a pure zig png library going

1509679975
andrewrk
anyone who is working on a project using zig: if you leave me a note here it would be helpful:

1509681712
GitHub62
[zig] andrewrk pushed 1 new commit to master:

1509681712
GitHub62
zig/master a31b23c Andrew Kelley: more compile-time type reflection...

1509693244
GitHub146
[zig] tiehuis opened pull request #580: Add emit command-line option (master...emit-addition)

1509714587
GitHub194
[zig] andrewrk closed pull request #580: Add emit command-line option (master...emit-addition)

1509714588
GitHub110
[zig] andrewrk pushed 1 new commit to master:

1509714588
GitHub110
zig/master 795703a Marc Tiehuis: Add emit command-line option (#580)...

1509720458
ltr_
zig working in llvm6 means not working in llvm5?

1509720547
ltr_
with*

1509720944
andrewrk
ltr_, it's a branch

1509720967
andrewrk
master branch works with llvm5,  llvm6 branch works with llvm master

1509721270
ltr_
i mean if zig would work with llvm 5.0 and llvm 6.0 eventually

1509721290
andrewrk
ltr_, no, we're always going to track the latest release of LLVM. if you want an older LLVM, use an older zig

1509721305
andrewrk
that's the idea

1509721320
ltr_
cool

1509739521
dimenus
andrewrk: figured out that GLFW parsing issue @haferburg is having

1509739528
dimenus
line endings....

1509739550
dimenus
i was going nuts because i couldn't replicate it at first, but I have unix line endings setup in sublime text on .h/.c files

1509739559
dimenus
but i cracked open a hex editor and found it

1509739626
andrewrk
oh wow

1509739647
andrewrk
dimenus, good find

1509739657
andrewrk


1509739676
andrewrk
the c tokenizer should support \r\n

1509739799
dimenus
does anything else generate a carriage return?

1509739812
dimenus
is it safe to consider '\r' the end of a macro as well?

1509739824
andrewrk
I believe so. I'm trying to find the C specification

1509739903
andrewrk
found it. it just says "the new-line character"

1509740242
andrewrk
dimenus, I just read the spec, apparently it's implementation defined what a "newline" is in C

1509740249
andrewrk
this is so silly

1509740270
andrewrk
we'll just accept \r\n as well as \n

1509740291
dimenus
c_import is always going to be text

1509740299
dimenus
so it's not like w're ignoring a rogue 0xD

1509740367
andrewrk
yeah

1509740720
andrewrk
anyway, great find dimenus. are you working on a fix?

1509740792
dimenus
will be in a bit

1509744557
PV_
I have question about Zig equivalent of conditional compilation in C:

1509744570
PV_
struct xyz {  int x;

1509744578
PV_
#ifdef FOO

1509744582
PV_
int y;

1509744587
PV_
#endid

1509744589
PV_
} ;

1509744590
PV_
...

1509744596
PV_
#ifdef FOO

1509744606
PV_
val.y = 1;

1509744610
PV_
#endif

1509744622
PV_
I tried this in Zig:

1509744654
PV_
const FOO : bool = true;

1509744670
PV_
const xyz = struct {   x : i32,

1509744690
PV_
if (FOO) y : i32;

1509744702
PV_
}

1509744722
PV_
but then the compiler complains about the "if".

1509744732
GitHub22
[zig] Dimenus opened pull request #581: Add support for windows line endings with c macros (master...line_endings)

1509744780
tiehuis
i'd try this strategy:

1509744813
tiehuis
Don't believe you can use if statements in that way since they act as an expression, but you don't want an expression there but a declaration of y

1509744841
tiehuis
giving a void type should be compiled out and have no overhead

1509745350
PV_
@tiehus: this compiles, but it feels cumbersome. Imagine structure with dozen of conditionally compiled members (say collected runtime statistics for an allocator).

1509745469
PV_
Using comptime if was something I expected to work.

1509745839
GitHub189
[zig] haferburg opened pull request #582: Allow Windows line endings (master...line-endings2)

1509746124
GitHub10
[zig] Dimenus opened pull request #583: Win32 libc runtime fixes. (master...libc_runtime)

1509746167
tiehuis
you can do all that inline with a struct for multiple members if you want to have more brevity

1509746593
PV_
I tried the suggested struct, it works, but still. Was the "conditional compilation by comptime if" considered and rejected?

1509746730
tiehuis
i can't recall on the top of my head

1509746774
tiehuis
in some ways it does make sense there, considering it is allowed at the top-level, but I suppose it would need to be considered against the existing way

1509748337
GitHub179
[zig] andrewrk closed pull request #583: Win32 libc runtime fixes. (master...libc_runtime)

1509748338
GitHub135
[zig] andrewrk pushed 2 new commits to master:

1509748338
GitHub135
zig/master d4c1ed9 Andrew Kelley: Merge pull request #583 from Dimenus/libc_runtime...

1509748338
GitHub135
zig/master 1890760 dimenus: Windows libc & static libc are located in the same dir which is already covered by msvc_lib_dir

1509748852
GitHub101
[zig] andrewrk closed pull request #581: Add support for windows line endings with c macros within a c_import. (master...line_endings)

1509748853
GitHub66
[zig] andrewrk pushed 2 new commits to master:

1509748853
GitHub66
zig/master 75afe73 Andrew Kelley: Merge pull request #581 from Dimenus/line_endings...

1509748853
GitHub66
zig/master 1ef6cb1 dimenus: Add support for windows line endings with c macros

1509752807
GitHub46
[zig] andrewrk closed pull request #582: Allow Windows line endings (master...line-endings2)

1509752853
andrewrk
hi tiehuis

1509753016
tiehuis
hi

1509753083
andrewrk
hmm I'm still getting "no compilers found" in your compiler-explorer fork

1509753108
tiehuis
running `make LANG=zig` and adjusted the path in etc/config?

1509753123
andrewrk
ah, I needed the LANG=zig

1509753144
tiehuis
yeah, it took me a while to figure out how to set the compiler I wanted

1509753151
tiehuis
by default it uses the C++ system compiler

1509753171
tiehuis
although the paths are probably configured specifically for linux so may now have picked anything up

1509753190
andrewrk
hmm it says compilation failed with no other output

1509753201
tiehuis
click the bottom warning symbol of sorts

1509753204
andrewrk
oh I need to set options

1509753213
andrewrk
ahh there's the stderr!

1509753239
tiehuis
you'll also want to use the binary output `11010` option

1509753248
andrewrk
ahh

1509753257
tiehuis
since I haven't yet added the assembly emitting and need to adjust its output filename properly

1509753290
tiehuis
the main stub I added isn't working completely so you will need to add your own

1509753327
andrewrk
I'll work on

1509753366
tiehuis
awesome, it'd be cool if we could easily differentiate our symbols vs the stdlib/compiler ones

1509753371
andrewrk
oh, or we could just compile with optimizations

1509753387
tiehuis
I added some filtering of them but it doesn't hide all of them

1509753421
tiehuis
that would help, the generated asm with --release-fast is pretty lean and usually not too bad

1509753447
andrewrk


1509753470
tiehuis
oh nice, that looks better than mine

1509753483
andrewrk
hmm I didn't have to implement the panic function either

1509753495
tiehuis
yeah, just exporting seems to generate good stuff

