1510620144
jfo
andrewrk: want to help me with a function signature?

1510620153
jfo
(or anybody :) )

1510620185
jfo
basically:

1510620185
jfo
var out: [5][5]u8 = undefined;

1510620185
jfo
var blocks = [5][5]u8{ "11111", "22222", "33333", "44444", "55555" };

1510620186
jfo
cp.transpose_blocks(out, blocks, 5);

1510620219
jfo
what would the signature of `transpose_blocks` be?

1510621379
andrewrk
jfo, yeah, give me an hour to travel home

1510621475
jfo
no worries, I'll be in bed by then but I'll email you !

1510624478
dimenus
andrewrk, i may need your assistance figuring out what a valid test would be in this case

1510624485
dimenus
not sure I have a handle on the test system yet

1510624563
andrewrk
ok

1510625494
andrewrk
dimenus, does the pattern in test/parsec.zig make sense?

1510625514
andrewrk
the input is c code, and the other args are strings expected to be found in the output

1510625550
dimenus
so they utilize the cinput you're saying?

1510625583
dimenus
some look like an equivalency test

1510625587
dimenus
or something of that osrt

1510625615
dimenus
eg, cases.add("noreturn attribute"

1510627203
GitHub128
[zig] thejoshwolfe pushed 1 new commit to master:

1510627203
GitHub128
zig/master 1f28fcd Josh Wolfe: parsec supports C NULL to pointer implicit cast

1510628388
GitHub150
[zig] thejoshwolfe pushed 1 new commit to master:

1510628389
GitHub150
zig/master 57cd074 Josh Wolfe: parsec supports C comma operator

1510628976
dimenus
zig is so much caster in release mode

1510628977
dimenus
holy moley

1510628983
dimenus
*caster = faster

1510629015
dimenus
should have done a release build awhile ago

1510629046
andrewrk
dimenus, ha, how much?

1510629067
andrewrk
oh, that's mostly from llvm

1510629102
dimenus
no objective measurements at this point

1510629103
dimenus
but it's a bit

1510629131
dimenus
i spose i should consider that I'm at home now on much faster pc

1510629144
dimenus
back to the test, sorry I'm still slightly confused

1510629276
dimenus
andrewrk, if you and josh are on skype/discord/etc could i just join you for a second?>

1510629279
dimenus
that would probably be faster

1510630523
GitHub183
[zig] andrewrk closed pull request #610: Fixed duplicate decl detection for typedefs/enums (master...parsec)

1510630526
GitHub81
[zig] andrewrk pushed 4 new commits to master:

1510630526
GitHub81
zig/master 98e3c79 dimenus: Fixed duplicate decl detection for typedefs/enums

1510630526
GitHub81
zig/master df07361 Andrew Kelley: Merge branch 'parsec' of

1510630526
GitHub81
zig/master 0373286 Andrew Kelley: add test case for previous commit

1510634278
GitHub75
[zig] thejoshwolfe pushed 1 new commit to master:

1510634278
GitHub75
zig/master 4c2cdf6 Josh Wolfe: parsec supports more compound assign operators

1510636808
GitHub188
[zig] thejoshwolfe pushed 1 new commit to master:

1510636808
GitHub188
zig/master 012ce14 Josh Wolfe: parsec supports post increment/decrement with used result

1510669013
dimenus
i really like how in zig i can take a c pointer that I know the length of and just make a real array out of it

1510669223
ltr_
dimenus: still getting the errors of duplicate declarations

1510669230
ltr_
im going to post a comment in the issue

1510669400
dimenus
what header are you parsing?

1510669468
ltr_
uv.h

1510669478
ltr_
from libuv

1510669484
ltr_
im at work right now

1510669680
dimenus
ok

1510671754
dimenus
i can't replicate this on llvm6, going to test with 5 now

1510672319
ltr_
may be is a bug on clang, dont know

1510673199
andrewrk
ltr_, I think this is fixed, it works for me after dimenus's fix

1510673242
dimenus
yeah i can't replicate this at all

1510673249
dimenus
either windows or gnu

1510673256
dimenus
**msvc or gnu

1510673262
ltr_
uh

1510673286
dimenus
did you do a rebase pull or are you working off your own changes?

1510673301
ltr_
yes

1510673304
ltr_
i have no changes

1510673306
ltr_
let me recheck

1510673335
andrewrk
ltr_, I think we might have to implement unions for it to work

1510673375
dimenus
i'm still not getting duplicates in the output

1510673386
andrewrk
yeah I think the duplicates is fixed

1510673396
ltr_
0.1.1.5029322a

1510673399
ltr_
thats the last version right?

1510673409
andrewrk
yes

1510673417
ltr_
can you compile github.com/aindigo/ziguv ?

1510673536
andrewrk
yes, except there is a bug in the code, that makes it segfault, and to fix the bug, we need union support

1510673556
dimenus
ah that's the bug

1510673556
ltr_
with the master version?

1510673560
dimenus
those are typedef interfaces

1510673568
dimenus
which i don't have working yet

1510673569
andrewrk
oh

1510673595
andrewrk
do you have a small test case that shows the problem for typedef interfaces?

1510673623
dimenus
yes i can build one

1510673656
ltr_
andrewrk: are you compiling with master? i cant get that proyect compiled

1510673696
andrewrk
ltr_, yes

1510673768
ltr_
weird im still getting duplicate definition, and i have the last version of master

1510673801
andrewrk
I'm trying to think of why that could be but I can't think of anything

1510673824
ltr_
wich version of libuv do you have?

1510673898
andrewrk
1.15.0

1510674122
dimenus
andrewrk, you're building on linux while ltr_ is building on mingw

1510674127
dimenus
so all of those types are windows com interfaces

1510674131
dimenus
which don't exist on linux

1510674146
ltr_
no

1510674148
ltr_
im building on linux

1510674157
dimenus
hmmm

1510674174
dimenus
i may need to fire up a linux vm then

1510674419
ltr_
this damn ubuntu , im installing libuv from apt-get, the version i have is really old

1510674572
dimenus
use arch/antegros

1510674577
dimenus
or i think andrewrk uses nix

1510674705
ltr_
its the libuv version

1510674722
ltr_
now i have 1.10

1510674757
ltr_
1.15*

1510674863
andrewrk
by the way, josh and I last night have the deflate function from zlib translating into zig

1510674868
andrewrk
it looks horrendous

1510674885
ltr_
lol why

1510674929
andrewrk


1510674967
andrewrk
there are a bunch of automatic cleanups we can add

1510674978
ltr_
that was by hand?

1510674982
andrewrk
but, here's a start, if you're trying to port zlib, zig can get you partway there

1510674996
andrewrk
this is `zig parsec deflate.c`

1510675013
ltr_
andrewrk: quick question , how can i add a path in build.zig so zig can find libs?

1510675032
ltr_
to add a path to the linker to find libs

1510675087
andrewrk
ltr_, I believe we have builder.addLibPath(path: []const u8)

1510675107
andrewrk
but I think we should add that function to each build artifact, instead of globally

1510675108
ltr_
can you pass --library-path when doing zig build?

1510675112
andrewrk
no

1510675126
andrewrk
but you can make that an option using the build API

1510675135
ltr_
ok

1510675146
ltr_
another question who can i see where zig is looking for libs?

1510675149
ltr_
for the linker?

1510675157
andrewrk
--verbose-link

1510675159
ltr_
it is not finding anything in /usr/local/lib

1510675172
andrewrk
we don't look in /usr/local/lib by default I think

1510675185
ltr_
nor usr/lib

1510675198
ltr_
lld: error: unable to find library -luv

1510675286
andrewrk
ltr_, are you using zig build or calling zig directly? if the former, use --verbose

1510675301
ltr_
both

1510675304
ltr_
ill use verbose

1510675320
andrewrk
that tells you the zig command it's running. then you might find it easier to modify that command line and try different things

1510675428
ltr_
ok now i was able to compile ziguv

1510675436
andrewrk
ltr_, what did you have to change?

1510675439
ltr_
zig+libuv, but yeah core dump

1510675446
andrewrk
I left you a github comment

1510675446
ltr_
--library-path /usr/lib

1510675462
ltr_
i dont know where is looking for libs

1510675475
ltr_
verbose just tellme the command line it uses to invoke lld

1510675544
andrewrk
I need to revisit the build system. right now it's a proof of concept but as you can see all the use cases aren't handled well

1510675555
andrewrk
but it's important to the zig project, we want to improve it

1510675634
ltr_
yes but its really flexible as it is, you can add more use cases as diferent build.zig templates

1510675638
ltr_
imo

1510675664
andrewrk
yes I think the potential is good

1510675832
ltr_
you want to remove the & and then add it on the next line

1510675847
ltr_
that comment you leave in my code

1510675890
ltr_
you mean not to define loop as a pointer and add & to the uses?

1510676199
andrewrk
you're using the uv API wrong

1510676221
andrewrk
giving them an undefined pointer, but you want to give a valid pointer to (probably stack) memory

1510676234
andrewrk
but you can't since zig translates uv_loop_t as an opaque type

1510676301
ltr_
i get it

1510676318
ltr_
i cant alloc a uv_loop_t with zig

1510676322
andrewrk
right

1510676330
andrewrk
that's a problem with our parse-c code

1510676343
andrewrk
which I think is due to not having unions

1510676378
ltr_
what if i use jemalloc, should i be able to use it?

1510676453
ltr_
i thought that uv_loop_init was going to do the allocation, but right the user is responsable to clean their pointers

1510676469
andrewrk
the problem is not where the memory is, the problem is that zig was unable to translate uv_loop_t type

1510678406
dimenus
what part of the type is zig unable to translate?

1510678502
andrewrk
you can see warnings with `zig parsec --verbose-cimport foo.h`

1510678510
andrewrk
the warnings tell you what C code we couldn't translate

1510678532
andrewrk
unions would be the next biggest win

1510678918
dimenus
you've got that on your list right?

1510679116
andrewrk
yes

1510679140
andrewrk
we already have all the logic done, because enums contain a union in the implementation

1510679149
andrewrk
just need to do the work

1510680916
andrewrk
dimenus, what was the other thing besides unions that I could look at to unblock you?

1510681315
dimenus
andrewrk, #462

1510681338
andrewrk
ah right. OK yeah that's a high prio issue too

1510681637
dimenus
the dll works internally without ever calling LLVMSetDLLStorageClass

1510681648
dimenus
but on truely 'exported' functions, we need to call that to make it visible in windows

1510681696
dimenus
there needs to be a way to differntiate between just an externally linked function and an exported function

1510681703
andrewrk
ah right

1510681729
dimenus
on linux i don't think that distinction matters

1510681734
dimenus
a symbol is a symbol

1510682607
dimenus
andrewrk, so this is interesting

1510682621
dimenus
i have a sample build.zig file that if i run zig build on cmd it just crashes

1510682626
dimenus
but if i run it in powershell within vs code

1510682629
dimenus
it gives me a proper error message

1510683180
andrewrk
hmm

1510683197
andrewrk
what kind of crash?

1510684348
dimenus
its the build system crashing

1510684356
dimenus
or doing something windows doesn't like at least

1510687805
dimenus
andrewrk, trying to use 'addIncludePath()' within build.zig but it doesn't look like the list gets relayed to the compiler

1510687826
andrewrk
dimenus, probably a bug in std/build.zig

1510687835
dimenus
yeah i'm looking through it

1510687837
dimenus
but it's dense

1510687837
dimenus
lol

1510687895
andrewrk
LibExeObjStep represents a zig build target - an object, a library, or an executable. it has a reference to the builder struct

1510687914
andrewrk
TestStep represents running `zig test`. it has a reference to the Builder struct also

1510687920
dimenus
yep, the dir is populated on the LibExeObjStep

1510687931
dimenus
but not in makeZig

1510687939
dimenus
list is empty there so it gets dropped somewhere along the way

1510688004
andrewrk
we should add include_paths local to LibExeObjStep

1510688042
andrewrk
maybe you want 2 different objects to have 2 different include paths

1510688087
andrewrk
gdb lets you set a memory watch point. if you think the include_paths list is changing, you can but a memory watchpoint on e.g. the length field, then run the code, then the debugger will break when that memory address is changed

1510688104
andrewrk
I don't know if msvc supports this

1510688207
dimenus
all build.zig files end up calling build_runner.zig correct?

1510688229
andrewrk
it's the other way around - zig build compiles build_runner, which imports the user's build.zig

1510688252
dimenus
ah

1510688261
andrewrk
line 1 of std/special/build_runner.zig

1510688406
dimenus
so we codegen build_runner every time the compiler is called?

1510688612
andrewrk
every time you do `zig build`

1510688618
andrewrk
that's why it's slow

1510688627
andrewrk
but we can speed it up a lot

1510688639
andrewrk


1510688672
andrewrk
we also codegen builtin.o and compiler-rt.o every time we make a library or executable (including a build.zig executable)

1510688681
andrewrk
those can be cached, and almost never change

1510688710
andrewrk
and then also if you don't modify build.zig, the build executable can be cached

1510688752
andrewrk
and then I also want to do other speed improvements to the compiler

1510688794
dimenus
do we store type information in exes at all?

1510688856
andrewrk
only debug info

1510688874
andrewrk
in general, types are a compile-time concept only

1510697039
dimenus
andrewrk, i found the issue in build.zig

1510697073
dimenus
line 1209 in std/build.zig

1510697081
dimenus
loops over the builder rather than the step

1510697093
dimenus
is that intended? some of the loops are of the builder some are of the step

1510697235
andrewrk
dimenus, I think our line numbers aren't synced up

1510697245
andrewrk
I'm looking at 5029322aa127cd20a08740

1510697248
dimenus
ah, yeah i didn delete something else

1510697268
dimenus
for (builder.include_dirs.toSliceConst()) |include_path| {

1510697279
andrewrk
some stuff is global, for example looking at environment variables for C include paths, that makes sense

1510697285
andrewrk
yeah that's for global env vars

1510697293
andrewrk
but we should also add step-local include_paths

1510697299
dimenus
but, addIncludePath is defined on the LIbExeObjStep

1510697300
dimenus
not the builder

1510697307
andrewrk
oh

1510697358
andrewrk
dimenus, we add those to the line in self.appendCompileFlags

1510697391
andrewrk
oh it's only called from makeC

1510697395
andrewrk
yeah you found the problem

1510697415
andrewrk
nice

1510697676
dimenus
w/ clang you would pass -I building individual objects no?

1510697685
dimenus
so to me that would mean it would be most common to use it on LibExeObjStep

1510699345
andrewrk
I agree

1510699357
andrewrk
that should be the normal way to use the API

1510699537
jfo
base64.decode ignores newlines, is that correct?

1510699823
jfo
oooooh and

1510699829
jfo
I keep wanting to do something like

1510699831
jfo
const s:usize = %%file.getEndPos();

1510699833
jfo
var buf:[s]u8 = undefined;

1510699853
jfo
and I get `error: unable to evaluate constant expression`

1510700134
jfo
which I am not sure I fully understand

1510700366
GitHub59
[zig] andrewrk pushed 1 new commit to master:

1510700366
GitHub59
zig/master 7a74dba Andrew Kelley: add docs for std.base64

1510700369
andrewrk
jfo, ^ I added docs to answer your question

1510700398
andrewrk
for the second thing:     var buf:[s]u8 = undefined;    riddle me this: where is the memory of buf stored?

1510700544
jfo
is this a comptime thing?

1510700591
jfo
also does that mean I need to sanitize my base64 input by stripping out invalid characters?

1510700797
andrewrk
did you figure out where the memory is stored?

1510700912
jfo
no

1510700914
jfo
:\

1510700956
dimenus
Microsoft has always considered VLAs in C to be a hack :P

1510700967
dimenus
although they should know a thing or two about hacks.....

1510701087
andrewrk
jfo, if you put something at global scope, it's in global static memory - allocated at *compile-time*. your .exe on disk has space for the memory

1510701098
andrewrk
if you put something in a function, it's on the stack

1510701130
andrewrk
if you call a function such as allocate() then it's on the heap, at least conceptually

1510701176
jfo
I was going to say stack but I thought that was too simple! bah

1510701182
andrewrk
stack frame sizes for each function are computed at compile-time. it would be a security vulnerability to increase the stack pointer by a runtime-known quantity

1510701190
andrewrk
so, knowing all this

1510701200
jfo
and file size is a runtime quantity

1510701213
andrewrk
how many bytes can zig use for the stack frame of your function, which has var buf: [s]u8 in it?

1510701246
jfo
limited only by the filesize which would be limited by the os if at all

1510701287
jfo
... is a `test` block global scope?

1510701298
jfo
(mem wise, I know functionally it is not)

1510701345
andrewrk
test block is function scope

1510701350
andrewrk
each test is a function

1510701364
jfo
that is what I thought

1510701388
andrewrk
I don't know what you're talking about re: limits

1510701397
andrewrk
but zig can't compute a stack frame if the array length isn't known at compile time

1510701420
jfo
I just mean that if `s` is the filesize, then `s` could be as big as a file could be

1510701449
andrewrk
typically the entire stack is ~10MB

1510701454
dimenus
stack size on most platforms isn't very large, so you wouldn't say want to open a 10MB file on the stack

1510701469
dimenus
stack is for smaller buffers

1510701477
jfo
well, that's not what I'm trying to do, I just didn't understand the error message

1510701486
andrewrk
yes, and more importantly, it's for buffers for which the size is known to be bounded

1510701487
jfo
and now I do! ty

1510701508
jfo
also re: base64 fwiw zig's decoding implementation differs from the spec, such as it is:

1510701516
jfo
"Implementations MUST reject the encoded data if it contains

1510701518
jfo
characters outside the base alphabet when interpreting base-encoded

1510701520
jfo
data, unless the specification referring to this document explicitly

1510701522
jfo
states otherwise.  Such specifications may instead state, as MIME

1510701524
jfo
does, that characters outside the base encoding alphabet should

1510701526
jfo
simply be ignored when interpreting data ("be liberal in what you

1510701528
jfo
accept").  Note that this means that any adjacent carriage return/

1510701530
jfo
line feed (CRLF) characters constitute "non-alphabet characters" and

1510701532
jfo
are ignored.

1510701534
jfo
:

1510701536
jfo
"

1510701630
andrewrk
that can be a separate function, to validate the data

1510701635
dimenus
jumping the stack guard page was a problem on linux recently

1510701657
andrewrk
dimenus, related:

1510701817
jfo
andrewrk: want an issue on base64?

1510701927
andrewrk
sure

1510701985
jfo
ok will do. I think it's worth deciding whether you want to validate and reject or accept liberally and ignore

1510702159
dimenus
hah, goodbye alloca

1510702163
dimenus
#225

1510702184
dimenus
Microsoft just uses a heap allocator behind the scenes if the alloca size is too high

1510702191
dimenus
which introduces its own problems........

1510702271
andrewrk
yeah that's not a perfect solution

1510702570
dimenus
i like that you gave most of the std library the ability to accept another allocator behind the scenes

1510702572
dimenus
that's pretty cool

1510702614
dimenus
i did get my build.zig working btw, it's definitely slower than just invoking the compiler directly

1510702641
andrewrk
yeah, there's a lot of room for improvement

1510702660
andrewrk
we just need to do the work

1510702675
andrewrk
I want to be very careful about the caching and not have any false positives

