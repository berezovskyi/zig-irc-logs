1511834236
GitHub94
[zig] MasonRemaley opened pull request #628: Implements translation for the prefix not operator (master...translate-c-prefix-not)

1511856052
GitHub163
[zig] andrewrk pushed 5 new commits to master:

1511856052
GitHub163
zig/master 04472f5 dimenus: Added support for exporting of C field expressions

1511856052
GitHub163
zig/master 57049b9 Ryan Saunderson: Resolving merge w/ upstream master

1511856052
GitHub163
zig/master f537c51 Andrew Kelley: Merge branch 'c-field-expr' of

1511856054
GitHub48
[zig] andrewrk closed pull request #627: Added support for exporting of C field expressions (master...c-field-expr)

1511880240
dimenus
andrewrk, thanks for knocking that out last night. I can call GL macros as expected now

1511883441
andrewrk
dimenus, great!

1511886923
dimenus
how how do you initialize an array of unknown size?

1511887327
andrewrk
an array has a compile-time known size, if the size is only known at runtime, then you want a slice

1511887381
andrewrk
can you give me more context?

1511887990
dimenus
i was having a dunce moment, just alloc the array

1511888017
dimenus
i'm creating a ring buffer for an input queue and i have a second array to keep track of what slots are being used

1511888055
dimenus
and i was trying to figure out how to initialize the array to false, but it looks like the allocator does that for you.

1511888204
andrewrk
dimenus, the bytes are undefined

1511888210
andrewrk
if you want to initialize them, use mem.set

1511888267
andrewrk
hm I didn't document this, I'll do it

1511888292
dimenus
here's the scenario:

1511888300
dimenus
i want to initialize items to a specific value

1511888427
andrewrk
dimenus,

1511888445
dimenus
ah duh

1511888447
dimenus
lol

1511894708
andrewrk
we're going to add labeled blocks, labeled loops, labeled break, labeled continue, labeled return (from a block), and remove goto

1511898943
jjido
Hello

1511899039
andrewrk
hi jjido

1511899081
jjido
What are the capabilities of zig's goto? Is it limited to 256 local labels like gcc?

1511899317
andrewrk
the only limitation is that you cannot jump over variable declarations or defer statements

1511899340
andrewrk
however there is an accepted proposal to do the following:

1511899348
andrewrk
add labeled blocks, labeled loops, labeled break, labeled continue, labeled return (from a block), and remove goto

1511899357
andrewrk
anything you can do with goto, you can do with the above features

1511899372
andrewrk
if you have a counter example, that would be most welcome

1511899391
jjido
Well I can still use older version of zig if that happens

1511899418
jjido
Don't know if it is a good counter example

1511899427
andrewrk
jjido, you are of course welcome to do that, however if you do it implies that you view the older version as better somehow, and I would find it valuable to understand why

1511899449
jjido
I am looking for a target to compile to

1511899465
andrewrk
I see

1511899472
andrewrk
so you want something like a basic b lock

1511899489
jjido
And assembly looks like a too high hurdle for me

1511899511
jjido
Llvm has no usable goto as well

1511899535
jjido
My language is continuation based

1511899589
andrewrk
have you looked at LLVM's coroutine support?

1511899611
andrewrk


1511899629
jjido
I did briefly. Not exactly what I am after

1511899732
andrewrk
I think you can elegantly represent continuations with labeled return

1511899749
andrewrk


1511899975
jjido
Yes labeled block looks perfect

1511899989
andrewrk
ok good

1511899997
andrewrk
but status quo is we have labels and goto

1511900276
andrewrk
jjido, I always welcome another zig user, but in the interest of actually helping you solve your problem, if you're writing a language you probably want to target LLVM and not zig

1511900353
jjido
I will do it the way I like. The goto probably makes zig a better target

1511900437
jjido
With llvm I need to use trampolining which I consider a big waste

1511900469
andrewrk
did you see this?

1511900550
jjido
It uses a switch underneath

1511900570
andrewrk
can you elaborate?

1511900587
jjido
With limitations on the number of labels

1511900622
andrewrk
it sounds like you're talking about `switch`, not `br`

1511900637
jjido
Switch (label) case a: x; break ; case b

1511900658
andrewrk
are you talking about LLVM or your language?

1511900667
jjido
Yes I am saying llvm br is implemented in terms of switch

1511900682
andrewrk
I don't know where you're getting this idea from

1511900694
andrewrk
but zig's goto is just using llvm's `br`

1511901032
jjido
OK it changed in llvm 2.7

1511901034
jjido


1511901105
jjido
I should have looked earlier

1511901126
jjido
7 years ago... ah.

1511901252
andrewrk
goodness

1511901291
andrewrk
there have, uh, been quite a few improvements since then

1511901511
andrewrk
72235 files changed, 11879380 insertions(+), 1140561 deletions(-)

1511901545
dtzWill
haha

1511902316
dimenus
andrewrk, found a bug that triggers an llvm assert

1511902321
dimenus
#631

1511902390
andrewrk
dimenus, good find

1511902401
andrewrk
I think this should be a reasonably straightforward fix

1511902422
dimenus
it works fine on the stack

1511902430
dimenus
and with a native type

1511902439
dimenus
i should have tried it with a struct

1511903355
dimenus
@sizeOf on []u8 always returns 16 rather than the actual size

1511903366
dimenus
if it's [4]u8 it returns the correct size

1511903509
andrewrk
that behavior is intended

1511903521
andrewrk
@sizeOf is how many bytes it takes to store a value

1511903536
andrewrk
you're looking for the `len`  property

1511903541
andrewrk
some_slice.len

1511903784
dimenus
triggered the same assert with this: debug.warn("size: {}\n", usize(@sizeOf(@typeOf(enum_array[0]))));

1511904027
dimenus
yeah that only fails when the memory is on the heap

