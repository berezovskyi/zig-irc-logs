1510877085
GitHub165
[zig] dimenus opened pull request #617: Added DLL loading capability in windows to the std lib. (master...dll-load)

1510877428
andrewrk
dimenus,  can you read the other comments I posted on the previous pull request?

1510877482
dimenus
just need to tag 534 i think

1510877493
dimenus
the return was modified and i didn't include the checking we mentioned earlier

1510879333
dimenus
GOD DAMN TABS

1510879403
dimenus
sorry, tests failed due to tabs :(

1510881063
andrewrk
you can use -Dtest-filter=foo   to target some tests only

1510883808
andrewrk
dimenus, oh, sorry I guess my other comment didn't get added

1510883810
andrewrk
adding now

1510884651
dimenus
i think VR is one of the few things keeping me on windows

1510884666
dimenus
pacman is so superior to anything windows has

1510886947
dimenus
andrewrk, sorry i don't understand the full command syntax to execute specific tests

1510886995
andrewrk
bin\zig.exe build --build-file ..\build.zig --help

1510887053
andrewrk
example:

1510887096
dimenus
that's neat

1510887100
andrewrk
bin\zig.exe build --build-file ..\build.zig  "-Dtest-filter=DLL error" test-std

1510888523
GitHub59
[zig] andrewrk pushed 2 new commits to master:

1510888523
GitHub59
zig/master 1473eb9 Andrew Kelley: add documentation placeholders for unions

1510888523
GitHub59
zig/master d108689 Andrew Kelley: Merge branch 'unions'...

1510889302
dimenus
nice

1510889316
dimenus
also, interesting bug : F:\code\tools\zig\std\index.zig:61:38: error: expected type '&Allocator', found '&Allocator'

1510889324
dimenus
lol

1510889347
andrewrk
oops

1510889356
andrewrk
why is it saying that?

1510889421
dimenus
in a test i created in std/index.zig

1510889430
dimenus
test "InvalidDll" {

1510889431
dimenus
const std = @import("std");

1510889431
dimenus
const DllName = "asdf.dll";

1510889431
dimenus
const allocator = std.debug.global_allocator;

1510889431
dimenus
const assert = @import("std").debug.assert;

1510889431
dimenus
const handle = os.windowsLoadDll(allocator, DllName) %%  |err| {

1510889433
dimenus
assert(err == error.DllNotFound);

1510889435
dimenus
};

1510889437
dimenus
}

1510889482
dimenus
oops double std import

1510889505
andrewrk
it's no big deal, results in the same imporrt

1510889518
andrewrk
hm that's strange

1510889520
andrewrk
I'll have a look

1510889545
andrewrk
oh

1510889549
andrewrk
I think I might know

1510889558
andrewrk
does it add "note: Allocator defined here" for each one?

1510889575
andrewrk
I bet one is in std/mem.zig and one is in build/lib/std/mem.zig

1510889592
dimenus
no, but i got rid of it by fixing the imports

1510889599
dimenus
i used debug defined higher up

1510889693
dimenus
hmmm, the test system doesn't link kernel32 though

1510889716
andrewrk
it should

1510889719
andrewrk
it uses std.debug.warn

1510889734
dimenus
oh, it's passing -lkernel32

1510889738
dimenus
i thought i fixed that o.0

1510890230
dimenus
test runs fine from os/windows/util.zig

1510890234
dimenus
so i moved it there

1510890240
dimenus
that way it doesn't try to fire on other systems either

1510890252
andrewrk
cool

1510890255
dimenus
btw, that test-filter seems to only work if you put the test in the index.zig of the top of a module

1510890279
andrewrk
you can also do e.g. if (builtin.os == builtin.Os.windows) { ... }

1510890304
andrewrk
maybe you're running into lazy analysis issues

1510890319
andrewrk
if you put the test in a file that doesn't get imported, it won't find the test

1510890337
dimenus
it finds the test, just not if i put in that filter

1510890346
dimenus
if i put it in std and use the filter that fires

1510890359
dimenus
but if i put it in std\os\windows\ it doesn't fire with the filter

1510890385
andrewrk
oh, hm. I think this is a little disorganized

1510890395
andrewrk
so if you look at std/index.zig

1510890407
andrewrk
those imports at the bottom are to load files for the purpose of testing

1510890430
andrewrk
and they're not getting loaded because your filter didn't match "std"

1510890449
andrewrk
kinda silly, sorry about that

1510890487
dimenus
no worries, test works fine from the location i put it in

1510890496
dimenus
so i'll probably update the PR soon

1510894500
GitHub120
[zig] andrewrk pushed 1 new commit to master:

1510894500
GitHub120
zig/master b50c676 Andrew Kelley: add parse-c support for unions

1510932287
GitHub94
[zig] andrewrk closed pull request #617: Added DLL loading capability in windows to the std lib. (master...dll-load)

1510932289
GitHub177
[zig] andrewrk pushed 2 new commits to master:

1510932290
GitHub177
zig/master a7d07d4 dimenus: Added DLL loading capability in windows to the std lib.

1510932290
GitHub177
zig/master 3e83597 Andrew Kelley: Merge pull request #617 from dimenus/dll-load...

1510933760
dimenus
thanks andrewrk

1510933797
dimenus
also i found a case your union code doesn't quite support yet :)

1510933918
dimenus
nvm, i haven't built latest zig.....

1510934982
andrewrk
dimenus, I think our macro parser doesn't understand field access

1510935004
andrewrk
but we can add that

1510935023
dimenus
yeah the unions look properly formatted now in the output

1510935024
dimenus
which is good

1510935031
dimenus
(using latest zig)

1510935184
andrewrk
dimenus, I think it's just a matter of adding a '.' token to c_tokenizer.cpp and then updating parse_ctok in parsec.cpp to look for field access, and create a zig FieldAccess AstNode

1510935241
dimenus
cool

1510935252
dimenus
i could probably work on that later today

1510938700
GitHub182
[zig] andrewrk pushed 1 new commit to master:

1510938700
GitHub182
zig/master 339d48a Andrew Kelley: parse-c: support address of operator

1510939482
dimenus
andrewrk: c-tokenizer is hardcoded to see that a '.' in a macro indicates we're parsing a float :)

1510939655
andrewrk
oops :)

1510949029
dimenus
andrewrk, in this macro '#define glClearUnion glProcs.Clear' what AST node should be returned to result_node?

1510949044
dimenus
glProcs or Clear?

1510950032
andrewrk
dimenus, NodeTypeFieldAccessExpr

1510950041
dimenus
yeah i just figured it out

1510950043
dimenus
looks like it works

1510950068
andrewrk
nice!

1510950100
andrewrk
now that we have unions I'm motivated to try to get even more c-to-zig translation working

1510950230
dimenus
yeah now you should be able to use macros that target struct or union fields

1510950271
dimenus
i don't know how common this type thing is, but i've seen it a lot in OpenGL

1510950282
dimenus
I was thinking yesterday about making a function loader in zig, but idk if that's even worth it

1510950291
dimenus
at this point i'd rather build something around Vulkan

1510950840
andrewrk
I haven't tried vulkan yet but I'm excited to

1510950875
andrewrk
if we had a high quality cross platform library that competed with GLFW and gave you a vulkan context, and then exposed a C interface

1510950880
andrewrk
I think that would draw many people to zig

1510954989
jfo
andrewrk can I ask you abt returning a dangle?

1510955299
andrewrk
jfo, yes, we do not have advanced value tracking yet

1510955313
jfo
yat \o/

1510955313
andrewrk
there is a whole class of compile errors that can be enabled when we have it

1510955329
jfo
awesome

1510955392
andrewrk
and faster debug code that omits safety checks when it knows they're unnecessary

1510955768
dimenus
andrewrk, just hit 'unable to evaluate constant expression' @ ir.cpp:6631

1510955782
dimenus
only triggers on my macro'ified union situation

1510955838
dimenus
getting two errors per one function call (same message)

1510956061
andrewrk
can I see the zig code that has the error?

1510956487
dimenus
yes

1510956488
dimenus
'?extern fn(c_uint)

1510956492
dimenus
how do you unwarp that?

1510956507
dimenus
i want to use that function

1510956712
andrewrk
do you want to assert that it is nonnull? or check if it is null before calling it? it works like every other nullable type

1510956737
andrewrk
oh god the docs are wrong

1510956776
andrewrk
#465 can't come quickly enough

1510956827
andrewrk
(??fn_name)(x)

1510956836
andrewrk
this asserts that it is non-null

1510956853
dimenus
probably not good to stick in a loop though

1510956870
dimenus
getting you an example btw

1510956891
andrewrk
it's fine to put in a loop, here's why

1510956929
andrewrk
* if it's in a performance bottleneck, you'll use @setDebugSafety(this, false) to disable all the debug safety checks for that block of code, making it perfectly free, just like ReleaseFast mode

1510956956
andrewrk
* if it's not in a performance bottleneck, you won't notice it being slow

1510957020
dimenus
andrewrk:

1510957048
dimenus
that union is really 657 items long, i just chopped it out

1510957050
dimenus
:)

1510957127
dimenus
oops, forgot the function pointers

1510957128
dimenus


1510957196
andrewrk
I think there are 2 things going on here

1510957320
andrewrk
1. the code in process_symbol_macros in parse.cpp is fooled by field access, so it doesn't do the thing where it makes an inline function alias that ignores the possibility of null

1510957326
andrewrk
if you added that I think it would make this work

1510957344
andrewrk
2. maybe we have a compiler crash if you try to execute a nullable function pointer right now, I'll have to check. we definitely want to fix that

1510957417
dimenus
i also ran into another crash working on this, i don't think it's related though

1510957436
andrewrk
here's the test case for (1)

1510957456
dimenus
~6302:ir.cpp

1510957472
dimenus
return buf_sprintf("(anonymous %s at %s:%" ZIG_PRI_usize ":%" ZIG_PRI_usize ")", kind_name,

1510957472
dimenus
(source_node->owner->path == NULL) ? "NULL" : buf_ptr(source_node->owner->path), source_node->line + 1, source_node->column + 1);

1510957487
dimenus
the null check wasn't there before and path was null

1510957495
andrewrk
oh, I ran into this earlier today but I didn't fix it yet

1510957513
dimenus
i realize what i did was a hack, just trying to debug other stuff

1510957546
andrewrk
this problem is because we assume AstNodes have info about what zig import file they came from, but if they come from C that value is null

1510957911
dimenus
ah, it gets put in the c->macro_table instead of the c->macro_symbol table

1510959851
dimenus
I think MacroSymbols should store a handle to their AST nodes so that in process_symbol_macros we can verify that we're at the top of the chain before checking if we're in the global table

1510959989
andrewrk
that sounds reasonable

1510960038
dimenus
what's happening now is that even if i put field expressions in the macro symbol table instead of the regular macro table

1510960049
dimenus
they still won't get an inline function because they're not in the globals table (top level anyway)_

