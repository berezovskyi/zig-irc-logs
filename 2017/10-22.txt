1508630541
mjacob
andrewrk: ok, about the stack size thing:

1508630627
mjacob
you probably already know that determining an exact upper bound for the stack size is impossible in the general case

1508630680
mjacob
one possiblity is to restrict the set of analysable programs

1508630728
mjacob
the other is to (possibly) overapproximate the stack size

1508630753
mjacob
my first question would be which of these two you want to implement

1508630868
mjacob
can the user expect that the calculated stack size will be a tight upper bound?

1508631097
mjacob
(although it is unclear what a

1508631911
mjacob
this is a good paper about the topic:

1508632033
mjacob
given that one of the authors of the paper is also an active llvm developer, he can probably say a thing or two about your plans

1508632465
mjacob
one thing for which i didn't find any research so far is how to tell the analysis that its assumed worst case can't actually happen

1508632736
mjacob
it would be interesting to combine static stack size analysis with a type system that can encode the resource usage of a function

1508634250
mjacob
i'll answer the llvm-specific part on the mailing list

1508635588
mjacob
... which contains more useful information than my random brain dump in this channel :)

1508660134
pupp
programs that consist from only one function are the best kind of programs, don't need to worry about stack size

1508660170
pupp
a bunch of inline functions and not using recursion will work too

1508660271
pupp
can disable stack frame as well, always wanted to do that

1508661454
Elronnd
what about TCO?

1508662501
pupp
Total Cost of Ownership?

1508663008
pupp
Elronnd

1508671544
pupp
Hm, it looks like either my diff tool or my patch tool is broken.

1508671566
pupp
--- a/src/main.cpp

1508671585
pupp
Can't find this file, have to manually retype "src/main.cpp" for some reason

1508671638
pupp
Everything is falling apart, as usual

1508671708
pupp
I guess the problem is in the "/" character, because file on top level gets patched without problems.

1508671957
ofelas
are you using patch? patch -i some.patch --dry-run -p1, -pN or --strip=N to strip N leading slashes from filenames

1508672383
pupp
"patch -i my.patch -p1

1508672383
pupp
" worked

1508672463
pupp
hmm, I'm creating a patch using "git diff > my.patch", it needs to patch files CMakeLists.txt and src/main.cpp

1508672552
pupp
I don't quite understand what "strip slashes" means

1508672671
ofelas
yes, that is typically a case for -p1, details are in "man patch", i guess pathname components may be a better term

1508673059
pupp
"patch -i my.patch -p1" worked for both files, thanks

1508673064
pupp
so it wasn't a bug

1508673199
ofelas
nope, there is also "git apply" and "git am", more details here,

1508690487
andrewrk
mjacob, I think there is value in obtaining an upper bound which is very close to exactly correct

1508690518
andrewrk
one reason that go can get away with a large number of goroutines is that it uses a segmented stack and so stack sizes are smaller

1508692599
Elronnd
pupp: Tail Call Optimization.  Basically if the last call of a function is to recurse, then the compiler can optimize it down to a goto and not waste a stack frame

1508693646
pupp
ah, it's that lisp trick. Always thought that just using "for" is simplier.

1508694862
Elronnd
?

1508694867
Elronnd
for is completely different

1508694889
Elronnd
and it's not just a lisp trick.  Plenty of lisp implementations don't have TCO (and plenty of implementations for other languages do)

1508694895
Elronnd
pretty sure gcc and clang have TCO for c

1508695080
pupp
I first heard about Tail Call Optimization from a lisp book.

1508695134
pupp
I'm currently using recursion in one place, it iterates parsed http. Not really sure how to do it without recursion.

1508695183
pupp
Need to allocate memory on the side manually, indeed recursion is simplier here.

1508695448
pupp
By the way, how to do a function pointer in zig?

1508708320
Mikayil
Hello World !

1508708355
ryan_
hello

1508712255
dimenus
andrewrk, does the stock 'build-exe' support @cImport/cInclude?

1508712274
dimenus
having issues with a basic hello world example on both current head and 0.1.1 release

