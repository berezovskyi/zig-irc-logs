1510791284
andrewrk
dimenus, you mean like this?

1510791342
dimenus
i hate to keep referencing jblow, but he has this concept where he can just run arbitrary functions in the compiler

1510791349
dimenus
and that basically becomes his build system

1510791359
andrewrk
we have compile time function execution

1510791362
dimenus
you have a similar concept going on with zig but it's not quite arbitrary

1510791382
andrewrk
yeah. you can't do things with side effects

1510791399
andrewrk
that opens a whole can of worms

1510791401
dimenus
and i'm imagining a scenario where i want to exactly that

1510791414
andrewrk
such as: running code that corrupts the compiler's RAM

1510791423
dimenus
like stick a precomputed datastructure that was compiled and run into my program when its compiling the rest of the program

1510791425
andrewrk
can you explain your use case?

1510791439
andrewrk
you can do that with the existing infrastructure

1510791445
andrewrk
precomputing data structures

1510791445
dimenus
you could bake a hash table into your program itself

1510791451
dimenus
hmm interesting

1510791692
dimenus
do you have an example of that in the docs?

1510791710
dimenus
i like the case for comptime, a much better printf is a great example

1510791761
dimenus
i'm envisioning the systme where the compiler is basically just pasrsing files its passed in looking for a directive run which might start the build system to pull in the rest of the program

1510791773
dimenus
you're kind of doing that with build_runner and the hardcoded @build

1510791804
andrewrk
it might be different when we self host

1510791810
andrewrk
if the compiler is part of the standard library

1510791813
andrewrk
or maybe we'll keep it like this

1510791836
dimenus
it would also be nice to just be able to invoke the parsing functionality like a library

1510791841
dimenus
and get back a datastructure you understand

1510791851
dimenus
which makes more sense if we're self-hosted

1510791874
andrewrk
actually I don't think we can do that if we self host, because we'll still have C++ code for interfacing with LLVM

1510791967
dimenus
LLVM has a C interface i guess

1510792016
dimenus
so if it's robust enough, you should be able to call llvm from zig then?

1510792028
andrewrk
we'll already be doing that in the compiler

1510792040
andrewrk
but we don't want to have to link the build executable against libc

1510792096
andrewrk
unless we want to expose the compiler as a .DLL

1510792147
andrewrk
but at that point, might as well keep it as a child process like we're already doing

1510792225
andrewrk
what does interpreting the build script (jai) accomplish vs compiling it (zig)

1510792227
andrewrk
?

1510792435
dimenus
i don't remember his exact reasons for doing it this way, it's been awhile but i should probably listen to this video again:

1510792467
dimenus
he also in some video I can't remember talked about how his idea of generics is not duck typing

1510792471
dimenus
but i don't remember why

1510792473
dimenus
or in what video

1510792476
dimenus
=|

1510792499
andrewrk
oh yeah this was a really impressive demo

1510792520
andrewrk
I have plans to support all of these use cases

1510792523
dimenus
it's a very different approach though, like at this point I think there's at least 3 backends

1510792536
dimenus
bytecode / straight x64 output / llvm

1510792543
andrewrk
yeah he got compilation speed very fast

1510792572
dimenus
it's similar to a unity build, you dump everything into one big .o file instead of having separate compilation units

1510792581
dimenus
since serializing out to disk and loading is sometimes the slowest part of a build

1510792582
andrewrk
we do the same thing

1510792598
dimenus
well not serializing, but you konw what i mean

1510792618
andrewrk
but I have plans to automatically break compilation up into multiple cacheable  .o files to speed up subsequent builds

1510792630
andrewrk
(in debug builds)

1510792657
dimenus
i know i shouldn't care, but one of my big turn offs from rust was iteration speed

1510792669
andrewrk
why shouldn't you care? it's important

1510792674
dimenus
even with a simple progrma, the compiler took sometimes mujltiple seconds to build a program

1510792700
andrewrk
yeah that's one of my high prio issues for 0.2.0 is proof of concept fast builds

1510792717
dimenus
calling the compiler directly doesn't feel slow

1510792723
dimenus
building from build.zig does i think

1510792736
andrewrk
building from build.zig is slow but we can speed it way up

1510792745
andrewrk
it's slow for very solvable reasons

1510792805
andrewrk
for example, we build builtin.o and compiler-rt.o

1510792827
andrewrk
when we could be building these .o files 0 times, if you've ever compiled anything on the computer before

1510792960
dimenus
in a release do you plan on distributing the code of the std lib or compiling it?

1510792975
andrewrk
distributing the code

1510792989
andrewrk
and the compiler automatically creates a cache

1510793005
andrewrk
so the first time you build anything for a given target, you have to build these 2 .o files

1510793041
andrewrk
I'm also going to follow jblow's lead of making the compiler multithreaded in the self hosted rewrite

1510793059
dimenus
he has a job system but doesn't go into too much detail on it

1510793073
dimenus
i think i've listened to the entire series at least once maybe twice

1510793080
andrewrk
it's a classic pipelining problem

1510793086
andrewrk
it models well to a job system

1510793227
andrewrk
dimenus, what would you work on if zig was more mature?

1510793236
andrewrk
you said a game right?

1510793239
dimenus
i honestly don't know

1510793242
dimenus
i'm not a very good idea man

1510793254
dimenus
i'm much better at coming up with solutions to problems

1510793265
andrewrk
it can be fun to choose a project to work towards

1510793295
andrewrk
and then think of it as a way to discover ways that zig doesn't handle the use case very well, and use that to drive what to work on to improve

1510793370
dimenus
i've written a basic asteroids clone but it was terrible

1510793385
dimenus
i tried to replicate the unity 3d asteroids example without using the engine at all

1510793400
dimenus
so it was pure c & opengl

1510793417
dimenus
i'd eventually like to write a networked game written in vulkan

1510793421
dimenus
even if it's just basic p2p

1510793427
dimenus
just a card game

1510793428
andrewrk
that sounds really fun

1510793547
dimenus
you?

1510793903
andrewrk


1510793918
andrewrk
I also want to make an arcade game that runs on the raspberry pi 3

1510793926
andrewrk
directly on the hardware, no OS

1510793935
andrewrk
I started that here:

1510793971
jfo
++ sound synthesis

1510794027
dimenus
are you planning on changing the syntax for asm volatile?

1510794027
jfo
andrewrk I was wondering about comptime functions being able to return functions. that's not a thing yet is it

1510794030
dimenus
:D

1510794075
dimenus
i want a libcurl like thing i can call instead of using libcurl

1510794083
dimenus
which i can use to download stuff

1510794089
dimenus
hmmm

1510794148
dimenus
or i could just write zig bindings for libcurl

1510794152
andrewrk
dimenus, yes:

1510794203
andrewrk
jfo, my coworker showed me a use case for that which convinced me to implement it

1510794206
andrewrk
haven't done it yet

1510794238
jfo
oooooh what was the use case

1510794253
andrewrk
type-safe abstractions over epoll

1510794269
jfo
I love the idea of gaining higher order abstractions at comptime

1510794289
andrewrk
epoll takes a u64 userdata, and then when you get an event from epoll you're given the u64 userdata

1510794295
jfo
I mean, I know you do too :)

1510794325
andrewrk
and we want the API to be more like fn registerEvent(context: var, callback: fn(@typeOf(context)))

1510794342
andrewrk
and with a fn returning a fn, there's a way to achieve this

1510794476
jfo
I think I was reading an issue about this but I definitely like the idea of making it possible to return fns in the same way structs can be returned anonymously.

1510794496
jfo
also I'm almost done with set 1 of cryptopals.

1510794497
andrewrk
yeah. for the first iteration of the feature, it will only support capturing compile-time known values

1510794510
andrewrk
that's cool, did you get past the base64 one?

1510794525
jfo
yeah that was only a component of a larger one

1510794537
jfo
the 6th challenge is extremely error prone and fiddly by design

1510794557
jfo
plus I'm learning the cryptography in conjunction with zig

1510794595
jfo
I've got all the pieces working but the gears aren't lined up yet. won't be long

1510794613
jfo
I'll have a write up for you at some point in addition to my half baked emails

1510794685
jfo
will the `fn -> fn` thing involve addressing closures?

1510794703
dimenus
i started cryptopals awhile ago

1510794706
dimenus
i should do that again

1510794716
dimenus
honestly if i want time for all these projects i should just not be married

1510794719
andrewrk
jfo, I don't understand your question

1510794740
andrewrk
did you see this comment?  for the first iteration of the feature, it will only support capturing compile-time known values

1510794773
jfo
yes I meant in the future

1510794789
andrewrk
there's an issue with that discussion

1510794799
jfo
I'll go back and read it again

1510794808
andrewrk


1510794851
jfo
:+1:

1510794858
jfo
alright ttyl it's hellah late here

1510794862
andrewrk
ttyl jfo

1510844550
GitHub54
[zig] dimenus opened pull request #616: Added DLL loading capability in windows to the std lib. Ensure that tâ€¦ (master...master)

1510851980
dimenus
andrewrk: re: your feedback on the PR

1510851984
dimenus
loadlibrary isn't needed at all

1510852024
andrewrk
have you tried it with a .dll that isn't already loaded by zig.exe?

1510852070
dimenus
hmm, yeah that's a good point. but should the stl really be referencing dlls that are not guaranteed to exist?

1510852082
dimenus
kernel32 and user32 will always be part of your process

1510852089
dimenus
when building the compiler, no?

1510852120
dimenus
whether you build in mingw or msvc, kernel32 will always be part of the parent process

1510852132
andrewrk
the DLLs that the compiler depends on are independent from the DLLs you are trying to compile zig code against

1510852137
dimenus
unless.....you're building a cross compiler on linux for windows

1510852244
dimenus
i guess we could if !GetModuleHandle then LoadLibrary

1510852253
andrewrk
that's still not sound

1510852281
dimenus
It's not best practice to try and load system dlls in to your process though

1510852282
andrewrk
the versions of DLLs that zig.exe uses might be different from the versions of DLLs you're trying to compile against

1510852305
dimenus
windows has no strong versioning scheme for dlls though

1510852340
andrewrk
we're going to do the tests in a child process, which at least will have to link against kernel32

1510852354
andrewrk
we can have an exception for kernel32, and use loadlibrary for everything else in that child process

1510852401
dimenus
although, we have the windows sdk path

1510852450
andrewrk
yes, and we want to use the DLLs from that SDK path, not from whatever zig.exe is linked against

1510852451
dimenus
hmmm, this is a hard problem

1510852462
dimenus
the sdk does not distribute system dlls

1510852465
dimenus
only link libraries for those dlls

1510852478
andrewrk
the goal is to find out if a symbol exists, right?

1510852495
andrewrk
sounds like the link libraries can tell us if a symbol exists

1510852523
dimenus
but we're building our own with zig

1510852531
dimenus
rather than relying on the one distributed by the sdk

1510852577
dimenus
maybe building our own kernel32 isn't the right way to go

1510852582
dimenus
nothing in kernel32 depends on libc

1510852595
andrewrk
we're not building our own kernel32

1510852602
dimenus
we are building our own link lib

1510852608
dimenus
that's what the def file is for

1510852611
andrewrk
yeah, but that just says what functions we're trying to call

1510852617
dimenus
that's what an import library is

1510852625
andrewrk
when you cross compile, you don't have any SDK or DLLs

1510852628
dimenus
it creates an import lib that is unverified

1510852631
andrewrk
yes

1510852646
andrewrk
so what we want is optional verification of DLL function calls

1510852712
andrewrk
if zig is (1) building natively and (2) knows the full path of a compatible DLL that we are going to call, then we can enable the verification

1510852714
dimenus
ok, well if you don't have an sdk than you can't cross compile a program that links libc

1510852751
andrewrk
that is currently true, but if we do

1510852802
dimenus
ok, so in os.cpp we check if we're compiling natively and if so we use the import lib in the sdk path

1510852806
dimenus
rather than the one provided by zig

1510852838
andrewrk
we also support compiling natively on windows with no sdk installed

1510852896
dimenus
.. as long as you don't link libc

1510852900
andrewrk
correct

1510852924
dimenus
got it, I can make those changes

1510852939
andrewrk
exciting

1510852943
andrewrk
I agree with you, this is a hard problem

1510852956
andrewrk
and it is important to get the details correct on this one

1510852979
dimenus
i initially thought the optional verification felt like a hack

1510852983
dimenus
but since our goal is to get off libc completely

1510852987
dimenus
it isn't really

1510852990
andrewrk
yes exactly

1510853005
andrewrk
I do think it should be DLL based instead of .lib/SDK based

1510853011
andrewrk
maybe we make exceptions for kernel32/user32/system libs

1510853024
andrewrk
but it should also work for e.g. GLFW.dll

1510853176
dimenus
where as here we're defining what the exports are

1510853176
dimenus
but if you're using glfw.dll then the exports are defined by glfw or whoever built glfw

1510853176
dimenus
sorry externs

1510853176
andrewrk
this is why .h files are usually shipped with .dlls

1510853176
andrewrk
yes, this is the fundamental problem that .h files solve

1510853184
andrewrk
and when we declare externs without using an .h file, we are relying on ABI stability

1510853197
dimenus
yeah i think loading extra dlls in the compiler to preverfiy that all the functions exist is overkill

1510853447
andrewrk
dimenus, here's another brainstorming idea: in debug mode, we could add code before main() that does GetModuleHandle and looks for all the functions that are used with GetProcAddress, and panics with a nice error message if not found

1510853458
andrewrk
instead of segfault

1510853523
andrewrk
I think this is a good idea

1510853534
andrewrk
obviously in ReleaseFast mode this safety check is omitted

1510853673
dimenus
getProcAddress isn't a problem in the user's code, it's functions that should be resolved at link-time

1510853718
dimenus
i may be able to screw around with dumpbin to figure out more info

1510853833
dimenus
do you want to just close/delete that PR now and I'll think a bit harder on this?

1510853845
dimenus
I can submit a separate one for the stl additions / fixed test

1510854066
GitHub93
[zig] dimenus closed pull request #616: Added DLL loading capability in windows to the std lib. Ensure that tâ€¦ (master...master)

1510854663
dimenus
andrewrk, as for the video I posted yesterday, he's using the interpreted build file to process messages pumped back from the compiler which can then be used to inject code into the AST

1510854675
dimenus
he used it to demo basically adding a code profiler without having to decorate your original source code at all

1510859863
andrewrk
dimenus, I consider that to be an anti-feature

1510859886
andrewrk
zig has no hidden control flow, and injecting into the AST adds a lot of magic hidden control flow

1510860037
andrewrk
here's the deal: when you link against a DLL, that is run-time linking

1510860054
andrewrk
you could replace the DLL with a different DLL that has different symbols

1510860087
andrewrk
the safety feature of checking all the functions that we want to call with GetProcAddress will make sure that the DLL that ends up being available, at runtime, at least has the symbols we are looking for

1510860381
dimenus
so, MS considers 'linking with a dll' to be load time linking

1510860393
dimenus
runtime linking is calling LoadLibrary / GetProcAddress

1510860427
dimenus
i'm still surprised that windows didn't catch the fact that there was no valid symbol in kernel32.dll for our fake proc

1510860466
dimenus
it treats whatever is created in the import lib as the gold standard

1510860514
dimenus
wait, maybe we should just include checking the STL in tests somehow

1510860536
dimenus
because if it's not in the STL, it's not our responsibility to check someone else's dll

1510860665
dimenus
andrewrk, I get your point about being an anti-pattern and it would be hypocritical to do that while simultaneously ranting about templates / dsetructors etc

1510860695
dimenus
but if your compiler knows enough about the code its inserting, perhaps the debugger could still simulate those AST inserts

1510860728
dimenus
it knows the file/line number of every proc, which is why he can click in his profiler and it jumps to the particular spot in emacs

1510860759
dimenus
so by extension it should be possible to have a debugger that can patch the extra procs into the debug symbols

1510860777
andrewrk
on linux we already have such a thing, it's perf

1510860792
andrewrk
it works for any executable, you don't need special compiler abilities

1510861009
dimenus
btw, i'm not advocating that we emulate jai as he's focusing on a specific problem domain

1510861017
dimenus
just discussing ideas

1510861054
andrewrk
that makes sense

1510861425
dimenus
there's also a lot of hidden parameter passing (context, temporary storage etc)

1510861432
dimenus
which hurts understandability

1510861450
dimenus
where as in zig self is explicit and to my knowledge there is no hidden data being passed

1510861524
andrewrk
that is correct

1510861541
andrewrk
the only hidden control flow or data is debug safety, which is removed in ReleaseFast mode

