1643029209
pkap!~pkap@185.213.155.252
Can I declare a variable to be not compile time known for testing purposes?

1643029232
nektro!~meg@75-164-170-164.ptld.qwest.net
yep, by using var

1643029352
pkap!~pkap@185.213.155.252
:D  Thanks!

1643029764
pkap!~pkap@185.213.155.252
So `var` is never comptime even with something like `var x = 1;`? Why is possible to to declare a var in a comptime block?

1643029847
nektro!~meg@75-164-170-164.ptld.qwest.net
correct, its always runtime unless explicitly called/used in a comptime context

1643029968
pkap!~pkap@185.213.155.252
Ok, thank you!

1643030127
pkap!~pkap@185.213.155.252
If I use `@compileError` somewhere in a function, does this mean that the whole function is run at comptime?

1643030141
ikskuh!~xq@2a0d:5940:6:163::ad7e
pkap: no

1643030195
ikskuh!~xq@2a0d:5940:6:163::ad7e
but compileError will always trigger when it is analyzed

1643030218
ikskuh!~xq@2a0d:5940:6:163::ad7e
so if it is in a scope that is analyzed, you'll get a compileError

1643030960
pkap!~pkap@185.213.155.252
I see. I am playing around with this and it seems that the `else` branch of an if-else-construct does not have its own scope?

1643030975
nektro!~meg@75-164-170-164.ptld.qwest.net
it does yes

1643031025
nektro!~meg@75-164-170-164.ptld.qwest.net
but if the @compileError is in the else branch then the if condition has to be comptime known to be ignored

1643031231
pkap!~pkap@185.213.155.252
Ok, everything makes sense now :)

1643034469
qbit!~qbit@ns2.suah.dev
hio

1643034973
ifreund!2940d10f8b@user/ifreund
o7

1643035033
nektro!~meg@75-164-170-164.ptld.qwest.net
o/

1643035068
qbit!~qbit@ns2.suah.dev
\o

1643059273
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk do you think you'd have time to review this benchmark in the next couple days (https://github.com/ziglang/gotta-go-fast/pull/21)? want to know if I should keep this issue in my head or if I should move on to other things for now

1643059317
andrewrk!~andrewrk@mail.ziglang.org
hi marler8997!

1643059334
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
hi to you too lol!

1643059344
andrewrk!~andrewrk@mail.ziglang.org
yes I'll prioritize this week - I need to do some other maintenance on ggf regardless

1643059385
andrewrk!~andrewrk@mail.ziglang.org
always appreciate benchmarks submitted to this repo - it's a great way to ensure that your use cases for zig remain fast and get faster

1643059418
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
very cool, you might find the issue interesting, I'm very surprised how much comptime performance can affect build times. This one function made my build go from 12 seconds to 6 minutes!

1643059658
ifreund!2940d10f8b@user/ifreund
You're essentially benchmarking stage1's comptime evaluation here, which is known to be quite slow and use excessive memory

1643059699
ifreund!2940d10f8b@user/ifreund
I suspect that stage2 will cut those build times significantly, but I'd still expect your simpler implementation to be faster

1643059785
ifreund!2940d10f8b@user/ifreund
it's just less work for the compiler to evaluate every guid.parse() call that way

1643060569
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
good point, I can test stage2 as well if I knew how to call stage 2

1643062376
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I'm kinda weirded out.  To think if I hadn't implemented my own GUID parser, zigwin32 would have taken 6 minutes to build all this time and I would've had no idea why.

1643063147
andrewrk!~andrewrk@mail.ziglang.org
stage2 comptime is way faster than stage1 but it's still 20x slower than I would like it to be

1643063164
andrewrk!~andrewrk@mail.ziglang.org
gonna save that enhancement until we're actually shipping it tho

1643063320
Franciman!~Franciman@mx1.fracta.dev
andrewrk: will you add a JIT?

1643063327
Franciman!~Franciman@mx1.fracta.dev
*evil-face*

1643063335
andrewrk!~andrewrk@mail.ziglang.org
no

1643063910
ifreund!2940d10f8b@user/ifreund
marler8997: perhaps we'll need some kind of build time profiling for comptime code long term to address this kind of thing

1643063946
ifreund!2940d10f8b@user/ifreund
I feel like it wouldn't be terribly complex to implement

1643063995
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah I had similar thoughts about a comptime profiler being useful

1643064042
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
you can't really use normal profilers because the comptime interpreter is calling all the same functions for analyzing different source code functions

1643064275
andrewrk!~andrewrk@mail.ziglang.org
hmm yeah maybe even the same mechanism we use to count cycles for branch quotas, we could collect into some kind of report

1643064317
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ah true, we're already tracking 1 metric

1643065391
kiedtl!~kiedtl@kisslinux/kiedtl
Does zig have something like C++'s string stream object, where I can continuously append formatted strings to a central buffer?

1643065432
kiedtl!~kiedtl@kisslinux/kiedtl
I could use ArrayList + appendSlice, but then I'd have to do the formatting myself

1643065659
kiedtl!~kiedtl@kisslinux/kiedtl
Oh, looks like I can use the std.io.Writer interface, nevermind

1643067032
andrewrk!~andrewrk@mail.ziglang.org
kiedtl, check out std.io.bufferedWriter

1643067055
andrewrk!~andrewrk@mail.ziglang.org
oh nvm it sounds like ArrayList.writer() is exactly what you want

1643067088
kiedtl!~kiedtl@kisslinux/kiedtl
Yeah, I have no idea what's the size beforehand

1643067640
nektro!~meg@75-164-170-164.ptld.qwest.net
kiedtl: std.ArrayList(u8) has a .writer() method that become available specifically when T == u8

1643067651
nektro!~meg@75-164-170-164.ptld.qwest.net
then you can use .writeAll and .print like normal

1643067672
kiedtl!~kiedtl@kisslinux/kiedtl
Yes, just what I mentioned. Thanks anyway :p

1643067702
nektro!~meg@75-164-170-164.ptld.qwest.net
ah sorry just missed it, np

