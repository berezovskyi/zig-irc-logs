1644853620
plumeus!~plumeus@user/plumeus
https://github.com/ziglang/zig/issues/10892

1644853630
plumeus!~plumeus@user/plumeus
I have no idea what is going on

1644854637
plumeus!~plumeus@user/plumeus
Some random bug I came across while compiling a big C++ program, where the issue only occurred in release builds and not debug ones. Took over a month to figure out how to minimally reproduce, lol

1644857641
ikskuh!~xq@v43666.php-friends.de
works with 0.10.0-dev.675+beb275b37 on void linux(glibc)

1644857740
plumeus!~plumeus@user/plumeus
Weird, I tried with other versions of Zig, ranging to 0.9.0 too, I think

1644857754
ikskuh!~xq@v43666.php-friends.de
also works with 0.10.0-dev.717+90f2a8d9c bug free in Debug mode

1644857758
plumeus!~plumeus@user/plumeus
By "works", you mean you don't get an error, right?

1644857768
plumeus!~plumeus@user/plumeus
Yeah, it's bug free on debug mode.

1644857829
ikskuh!~xq@v43666.php-friends.de
ah!

1644857981
ikskuh!~xq@v43666.php-friends.de
yes indeed. very weird

1644858062
plumeus!~plumeus@user/plumeus
Pretty sure I could reproduce it with Zig 0.8.0, but I forget.

1644858282
plumeus!~plumeus@user/plumeus
Considering I can't reproduce it on Clang, I would think it's caused by some libc++ headers provided by Zig. I have no idea though, as I know close to nothing about C++...

1644860398
plumeus!~plumeus@user/plumeus
https://github.com/ziglang/zig/wiki/FAQ#how-to-tie-a-zig-build-run-sub-command-to-custom--d-style-options

1644860427
plumeus!~plumeus@user/plumeus
welp, I think this portion of the wiki is outdated. No such function (there are similarly named ones though)

1644860452
plumeus!~plumeus@user/plumeus
`addBuildOption`, that is.

1644861577
koakuma!~koakuma@user/koakuma
Hello, may I ask something about the recent f80 changes?

1644861577
koakuma!~koakuma@user/koakuma
This line in compiler-rt selects between f16 and u16 depending on the platform (https://github.com/ziglang/zig/blob/master/lib/std/special/compiler_rt/extend_f80.zig#L8)

1644861577
koakuma!~koakuma@user/koakuma
But from what I see, the argument to `__extendhfxf2` is always passed as f16 regardless of the platform, so it causes LLVM mismatch errors when building stage1 (at least on SPARCv9 - it might also be problematic on other non-x86, non-Arm platforms, but I have no means to test it)

1644861577
koakuma!~koakuma@user/koakuma
So, would it be okay if I remove the if and always use f16 as F16T?

1644862347
ifreund!2940d10f8b@user/ifreund
koakuma: I don't know, but a PR fixing it for SPARCv9 would certainly be appreciated and may also draw the attention of someone who knows better if we could drop the if entirely

1644862628
ifreund!2940d10f8b@user/ifreund
https://github.com/ziglang/zig/commit/d03e9d0b8347a74d674bdafadb71e7ddd8fdfad1

1644862670
ifreund!2940d10f8b@user/ifreund
Figuring out exactly what LLVM 13 changed might clear up whether the if can be dropped entirely or not

1644862699
ifreund!2940d10f8b@user/ifreund
maybe they changed from u16 to f16 for all targets but this only caused a problem on aarch64

1644862929
ifreund!2940d10f8b@user/ifreund
https://github.com/llvm/llvm-project/commit/c288715e952fe0e179d645a76b0f518e2403a42b

1644863031
ifreund!2940d10f8b@user/ifreund
koakuma: so no, you can't get rid of the if as LLVM use u16 for targets without a native f16 type

1644863066
ifreund!2940d10f8b@user/ifreund
Instead I'd suggest replacing the if with a switch on the target

1644867165
jamii!b58b912050@2604:bf00:561:2000::3c3
andrewrk: Thanks for the example. I didn't realize llvm would do global analysis to reason about aliasing. Is it roughly accurate for now to treat zigs model of pointer provenance as 'whatever llvm does'?

1644867202
jamii!b58b912050@2604:bf00:561:2000::3c3
(That probably didn't go through the first time because i wasn't signed in)

1644867972
andrewrk!~andrewrk@mail.ziglang.org
jamii, yes

1644868007
andrewrk!~andrewrk@mail.ziglang.org
and note that status quo is no Type-Based Alias Analysis

1644868386
jamii!b58b912050@2604:bf00:561:2000::3c3
andrewrk: Thanks, that's suoer helpful :)

1644880569
koakuma!~koakuma@user/koakuma
ifreund: It's only for __extendhfxf2/__truncxfhf2, all the other extend/trunc functions work normally

1644880569
koakuma!~koakuma@user/koakuma
Might be because Zig uses a custom lowering for it?

1644880569
koakuma!~koakuma@user/koakuma
https://github.com/ziglang/zig/blob/master/src/stage1/codegen.cpp#L1608

1644880569
koakuma!~koakuma@user/koakuma
But yeah, in any case I'll try making a PR, thanks

