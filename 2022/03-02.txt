1646184969
Hoolean!~Hoolean@176.56.237.138
hallo, I'm wrapping a C library, and am trying to get rid of nasty C pointers

1646184987
Hoolean!~Hoolean@176.56.237.138
in particular, i'm looking for the most idiomatic way to go from a C pointer to a valid pointer or custom error

1646184996
Hoolean!~Hoolean@176.56.237.138
* valid Zig pointer

1646185082
Hoolean!~Hoolean@176.56.237.138
is there a one-liner for this? i was sort of hoping something like pointer.? catch error.MyError would work, but perhaps that's naive

1646185104
Hoolean!~Hoolean@176.56.237.138
rather, pointer.? catch return error.MyError

1646185438
Hoolean!~Hoolean@176.56.237.138
perhaps the savvy way is to be wrapping the entire C function, to provide a better-typed alternative before it is used elsewhere?

1646185444
Hoolean!~Hoolean@176.56.237.138
seems like there might be an approach with less boilerplate tho

1646186666
andrewrk!~andrewrk@mail.ziglang.org
Hoolean, you can treat C pointers like optionals

1646192025
Hoolean!~Hoolean@176.56.237.138
andrewrk: does this mean I can whack a .? on the end of them, or do I need to do a lil casting first

1646192053
Hoolean!~Hoolean@176.56.237.138
I'm hitting an error with the former, and am trying to work out if I'm being dumb as rocks or if it's expected behaviour

1646192156
Hoolean!~Hoolean@176.56.237.138
ack, i should've looked at it with fresh eyes before i sent that; the errors message was complaining that i was feeding the result of the .? into catch, not that i was doing the .? itself

1646192197
Hoolean!~Hoolean@176.56.237.138
i was likening catch to much to my java mother tongue; i've replaced the bogus ".? catch" with an "orelse", and it makes sense now

1646203257
andrewrk!~andrewrk@mail.ziglang.org
glad you got it sorted 👍

1646206324
andrewrk!~andrewrk@mail.ziglang.org
self-hosted compiler progress update: the llvm backend is now passing 78% of the behavior tests

1646206534
todo75!~todo75@user/todo75
andrewrk: crazy amount of progress for such a recent developmeent. keep it up!

1646207086
andrewrk!~andrewrk@mail.ziglang.org
we are starting to get close to stage2 being able to build itself :)

1646207103
plumeus!~plumeus@user/plumeus
Yay

1646207150
plumeus!~plumeus@user/plumeus
Now I just need good auto-generated docs and a package manager.

1646207193
andrewrk!~andrewrk@mail.ziglang.org
Loris has been working on auto-generated docs

1646207201
andrewrk!~andrewrk@mail.ziglang.org
it's looking pretty good

1646207231
andrewrk!~andrewrk@mail.ziglang.org
package manager is the very next thing on my list after we start shipping the self-hosted compiler

1646207255
plumeus!~plumeus@user/plumeus
Great. Honestly, there were so many times when I wished I just knew the name of the source file so I could look into it swiftly.

1646207265
plumeus!~plumeus@user/plumeus
Just ended up using ZLS or cloning the Zig repo, which works.

1646207312
andrewrk!~andrewrk@mail.ziglang.org
nice thing about self-hosted is that it greatly raises the limit of how big your project can be before it starts taking noticeably long to build

1646207323
andrewrk!~andrewrk@mail.ziglang.org
which, you know, is a prerequisite for depending on packages

1646207363
plumeus!~plumeus@user/plumeus
I know it's supposed to speed up debug builds considerably. Is it also true for release builds?

1646207419
andrewrk!~andrewrk@mail.ziglang.org
yes but not nearly as much. in stage1, llvm takes up something like 80% of the time spent compiling. in stage2 it's closer to 95%

1646207471
andrewrk!~andrewrk@mail.ziglang.org
I can take one measurement... let me see

1646208525
andrewrk!~andrewrk@mail.ziglang.org
plumeus, here is 1 measurement on my laptop for building this tetris project: https://github.com/andrewrk/tetris

1646208581
andrewrk!~andrewrk@mail.ziglang.org
stage1: 4.45 seconds wall time, peak RSS: 340 MiB

1646208605
andrewrk!~andrewrk@mail.ziglang.org
stage2: 1.49 seconds wall time, peak RSS: 156 MiB

1646208610
plumeus!~plumeus@user/plumeus
wow, stb_image.h is huge

1646208616
andrewrk!~andrewrk@mail.ziglang.org
both using llvm, both -OReleaseFast

1646208644
plumeus!~plumeus@user/plumeus
Wow. Finally, people can build Zig on 32-bit systems, I guess.

1646208701
andrewrk!~andrewrk@mail.ziglang.org
I can't take a measurement with the x86_64 backend yet because it's not passing enough behavior tests to build this project

1646208723
andrewrk!~andrewrk@mail.ziglang.org
but also a different project that didn't have any c code would be a better benchmark 

1646208822
andrewrk!~andrewrk@mail.ziglang.org
I think part of what explains the difference is that stage2 doesn't do llvm debug info yet which I remember taking a decent portion of the llvm pie

1646214623
motiejus!~motiejus@2001:470:69fc:105::38fb
folks, I am casting `[][*:0]const u8` to `[*c][*c]u8` to make a C function satisfied. I saw being mentioned in this channel that `[*c]` should never be used in non-generated code. What can I cast it to instead? I tried many things, but nothing satisfied the compiler.

1646214686
motiejus!~motiejus@2001:470:69fc:105::38fb
here is the code: https://git.sr.ht/~motiejus/turbonss/tree/4fc54e5b6589804dcc4db52420502a24dca0e2b2/item/src/cmph.zig#L14

1646216208
Earnestly!~earnest@user/earnestly
andrewrk: (With all these behaviour tests it might be worth keeping in mind efforts like Ada's compiler conformance test suite, something that all these behaviour tests can be repurposed as long down the road)

1646216255
Earnestly!~earnest@user/earnestly
iow, the standard comes with a measuring stick

1646216280
Earnestly!~earnest@user/earnestly
> http://www.ada-auth.org/acats.html

1646217840
ifreund!2940d10f8b@user/ifreund
motiejus: that's not your fault but rather the compiler's: https://github.com/ziglang/zig/issues/8337

1646218110
motiejus!~motiejus@2001:470:69fc:105::38fb
gotcha. @ptrCast is fine; I am not asking to coerce it; it would just be better to cast it to a "better" data type

1646218138
motiejus!~motiejus@2001:470:69fc:105::38fb
`*[*c]` seems to work, which eliminates a `c`; can better be done?

1646219040
ifreund!2940d10f8b@user/ifreund
motiejus: you could write manual bindings for the function that takes [*c][*c] using proper zig types

1646219054
ifreund!2940d10f8b@user/ifreund
otherwise there's no way to avoid the [*c] pointers currently afaik

1646219177
motiejus!~motiejus@2001:470:69fc:105::38fb
Ack. I have a binding which accepts `[][*:0]const u8` and casts it, but this is the question about the binding. :) If there is no way to avoid [*c], gotcha, then nothing more to do. Thanks

1646219194
novakane!ca74a093b3@user/novakane
what is the difference between mem.split() and mem.tokenize()?

1646219228
ifreund!2940d10f8b@user/ifreund
novakane: check the test cases in std/mem.zig, I think it's easiest to see with the examples

1646219335
ifreund!2940d10f8b@user/ifreund
motiejus: something like `extern fn cmph_io_vector_adapter(ptr: [*][*:0]const u8, len: c_uint) RETURN_TYPE;` would work

1646219350
ifreund!2940d10f8b@user/ifreund
(not sure what the return type should be from that link)

1646219445
ifreund!2940d10f8b@user/ifreund
by binding I meant writing the extern declaration manually instead of letting zig translate-c generate it

1646219497
ifreund!2940d10f8b@user/ifreund
zig translate-c will produce an extern function taking `[*c][*c]const u8` as the first argument here as it can't know how the pointers will be used

1646219571
novakane!ca74a093b3@user/novakane
ah yeah I get it, that subtle to get at first

1646220325
motiejus!~motiejus@2001:470:69fc:105::38fb
Ah, you mean not include the header at all, and write my own declaration?

1646220327
motiejus!~motiejus@2001:470:69fc:105::38fb
Sounds like a great idea

1646220778
ifreund!2940d10f8b@user/ifreund
motiejus: you don't have to do it for the whole header if you don't want, just that one function with the annoying [*c][*c]

1646220808
ifreund!2940d10f8b@user/ifreund
that said, manual bindings can be a lot nicer. Putting the work into zig-wlroots was definitely worth it

1646236553
braewoods!~braewoods@user/braewoods
I have a few questions about Zig's current status. Has Zig achieved enough stability for production use? How well does Zig work on non-x86 architectures such as ARM?

1646236595
novakane!ca74a093b3@user/novakane
is there some difference between this 2 way of doing it? https://zigbin.io/938703

1646236637
plumeus!~plumeus@user/plumeus
braewoods, Zig isn't considered "ready for production", but there are some projects already being used as such

1646236638
plumeus!~plumeus@user/plumeus
https://www.tigerbeetle.com/ comes to mind

1646236693
plumeus!~plumeus@user/plumeus
As for the ISA support, you should read https://ziglang.org/download/0.9.0/release-notes.html#Support-Table

1646236696
braewoods!~braewoods@user/braewoods
novakane: the first may be faster, depends how Zig implements it. i know formatted printing has a noticeable performance impact in C but maybe Zig does not?

1646236763
sskras!uid542048@id-542048.tinside.irccloud.com
braewoods: parsing strings IMO is always slower (no investigation though)

1646236823
novakane!ca74a093b3@user/novakane
that would be a good reason to use the first one then, if someone confirm it

1646236823
plumeus!~plumeus@user/plumeus
Also relevant to production: https://www.youtube.com/watch?v=124wdTckHNY

1646236876
braewoods!~braewoods@user/braewoods
novakane: in general my experience is for simple string or binary concatenation, it's usually faster to just use the regular method. formatted alternatives are usually slower.

1646236901
braewoods!~braewoods@user/braewoods
formatted mainly makes sense when type conversions are needed or so.

1646236947
plumeus!~plumeus@user/plumeus
Wait, is this just essentially a `std.mem.copy`?

1646237016
braewoods!~braewoods@user/braewoods
plumeus: shame, will it be "production" at a known point such as a version number like 1.0?

1646237039
plumeus!~plumeus@user/plumeus
I figure that's what 1.0 is for.

1646237076
plumeus!~plumeus@user/plumeus
The language will be stable, and the tooling/stdlib might improve but stage2 and the package manager should be done by then

1646237109
braewoods!~braewoods@user/braewoods
ok, fair enough. i only recently found out about Zig. it's rare to find a language with a design philosophy that tries to avoid hidden or implicit behavior

1646237136
plumeus!~plumeus@user/plumeus
There is implicit behavior, no? I do agree about the hidden part.

1646237170
braewoods!~braewoods@user/braewoods
ok, i guess i mean implicit behavior that varies heavily. C++ has a lot of that stuff and main reason I hate the language.

1646237174
plumeus!~plumeus@user/plumeus
I feel it strikes a great balance between being implicit and unambiguous.

1646237201
plumeus!~plumeus@user/plumeus
I want `comptime_int` in all my languages now.

1646237210
braewoods!~braewoods@user/braewoods
you can't rely on your intuition to get you through the implicit behavior in C++ because of the language features that allow it to be redefined on a whim

1646237278
braewoods!~braewoods@user/braewoods
i always thought it was a mistake to have so many ways you could get bitten by your own ignorance of what C++ did without being asked

1646237301
braewoods!~braewoods@user/braewoods
i ended up prefering C more

1646237337
braewoods!~braewoods@user/braewoods
the lack of higher level features made it a lot easier to understand what was going on

1646237414
plumeus!~plumeus@user/plumeus
Anyhow, I think Zig seems to be usable in production in the sense that it already does a decent job being a sane and usable language compared to existing solutions.

1646237434
plumeus!~plumeus@user/plumeus
But it's not usable in the sense that breaking changes will happen and you will have to rewrite all your code.

1646237463
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
Not all of the code

1646237491
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
not much at all if you keep up with versions between releases

1646237529
plumeus!~plumeus@user/plumeus
Still waiting for 1717 to break all my functions, please.

1646237554
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
The most painful one so far was the unused variables change as I discovered how many I had forgotten about

1646237570
novakane!ca74a093b3@user/novakane
yeah I'm always using stable release and I never struggle too much to update my code

1646237576
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
"painful" is maybe not the right word

1646237581
braewoods!~braewoods@user/braewoods
i've been looking for a successor to using C for everything and most languages disappointed me. this might be what i've been looking for.

1646237586
plumeus!~plumeus@user/plumeus
Stable is worse for upgrading, imo

1646237594
braewoods!~braewoods@user/braewoods
even if it's not totally finished yet for stability

1646237598
plumeus!~plumeus@user/plumeus
Master changes feel incremental and nice

1646237598
ikskuh!~xq@v43666.php-friends.de
braewoods: welcome to an actually good replacement for C

1646237624
braewoods!~braewoods@user/braewoods
i won't stop using C but it might be good for other projects

1646237633
plumeus!~plumeus@user/plumeus
Zig also doesn't have too many regressions, so that's nice.

1646237676
plumeus!~plumeus@user/plumeus
Oh, `build.zig` is apparently considered production ready

1646237691
plumeus!~plumeus@user/plumeus
Even though I think it has problems as-is.

1646237710
ikskuh!~xq@v43666.php-friends.de
plumeus: it's definitly production *ready*, but also *not* stable

1646237722
ikskuh!~xq@v43666.php-friends.de
the biggest problem right now is that we can't process file inputs

1646237731
ikskuh!~xq@v43666.php-friends.de
all steps are always made

1646237737
braewoods!~braewoods@user/braewoods
so what does Zig use for code gen?

1646237742
braewoods!~braewoods@user/braewoods
LLVM? its own thing?

1646237748
ikskuh!~xq@v43666.php-friends.de
yes to both

1646237766
ikskuh!~xq@v43666.php-friends.de
the plan is to have custom backends for a standalone version and super-duper fast debug builds

1646237771
plumeus!~plumeus@user/plumeus
For C and C++, LLVM/Clang. For stage2, LLVM for release builds (soon)?

1646237772
ikskuh!~xq@v43666.php-friends.de
and LLVM for highly optimized release builds

1646237788
plumeus!~plumeus@user/plumeus
Arocc for C when?

1646237809
ikskuh!~xq@v43666.php-friends.de
"now"

1646237821
braewoods!~braewoods@user/braewoods
i assume Zig will somehow support inline ASM too in some capacity? for the rare times that's useful.

1646237823
ikskuh!~xq@v43666.php-friends.de
afaik Vexu/andrew started integrating arocc already

1646237831
ikskuh!~xq@v43666.php-friends.de
braewoods: *grin*

1646237840
ikskuh!~xq@v43666.php-friends.de
there's no way to interact with the OS otherwise

1646237853
ikskuh!~xq@v43666.php-friends.de
zig stdlib builds its own OS abstraction layer

1646237865
Earnestly!~earnest@user/earnestly
I've rarely found examples of languages which have both pre and post conditions, mostly just have 'assert' at the start but I've never seen assert at the end.  E.g. https://0x0.st/zXYw.txt

1646237865
braewoods!~braewoods@user/braewoods
right.. i just know sometimes you need ASM to get access to special instructions.

1646237892
ikskuh!~xq@v43666.php-friends.de
braewoods: inline assembly is a first class use case in zig :)

1646237903
companion_cube!~simon@user/companion-cube
Earnestly: there's only Ada and D I think — maybe Eiffel too?

1646237904
Earnestly!~earnest@user/earnestly
(The interesting thing here is that the post conditions have access to original values via the 'old aspect)

1646237916
plumeus!~plumeus@user/plumeus
ikskuh, I don't even think `build.zig` is "ready", tbh. I've had problems with libc++, it refuses to print C/C++ warnings unless a compile error happens, and a few other issues. Works on 95%+ of the projects, probably. The other few percent will still bite you.

1646237940
braewoods!~braewoods@user/braewoods
assuming you can make sense of C++ compiler errors :P

1646237941
ikskuh!~xq@v43666.php-friends.de
it actually prints warnings

1646237955
ikskuh!~xq@v43666.php-friends.de
at least that's what i've seen the last three days regularly

1646237958
Earnestly!~earnest@user/earnestly
companion_cube: Yeah, eiffel has 'ensure' blocks

1646237965
ikskuh!~xq@v43666.php-friends.de
it will just not RE-print them every build

1646237966
plumeus!~plumeus@user/plumeus
Did you have a compile error?

1646237968
companion_cube!~simon@user/companion-cube
a bit sad contracts are so niche

1646237978
plumeus!~plumeus@user/plumeus
That's for `zig cc`

1646237987
ikskuh!~xq@v43666.php-friends.de
i don't use "zig cc"

1646237994
Earnestly!~earnest@user/earnestly
They also have ways to express loop invarients, e.g. https://0x0.st/z0Pi.txt

1646238009
plumeus!~plumeus@user/plumeus
`zig cc` prints warnings once. `zig build` doesn't print it even when I clear `zig-cache` and `.cache/zig/`, iirc

1646238019
plumeus!~plumeus@user/plumeus
Unless they changed behavior very recently.

1646238028
companion_cube!~simon@user/companion-cube
Earnestly: that's necessary for formal proofs

1646238031
Earnestly!~earnest@user/earnestly
Hm

1646238033
companion_cube!~simon@user/companion-cube
is that spark code?

1646238037
plumeus!~plumeus@user/plumeus
Either way, the warnings should be printed multiple times

1646238053
Earnestly!~earnest@user/earnestly
That doesn't show loop invariant, hm

1646238056
ikskuh!~xq@v43666.php-friends.de
plumeus: also that's not a part of the build system at all ;)

1646238076
ikskuh!~xq@v43666.php-friends.de
<plumeus> Either way, the warnings should be printed multiple times

1646238078
companion_cube!~simon@user/companion-cube
no it's just array pre/post conditions it seems

1646238082
ikskuh!~xq@v43666.php-friends.de
this would require *rebuilding* every time you build

1646238091
ikskuh!~xq@v43666.php-friends.de
so caching is of no use and chromium would always take days to build

1646238092
plumeus!~plumeus@user/plumeus
You can cache warnings

1646238097
Earnestly!~earnest@user/earnestly
Here is example of loop invariants https://0x0.st/z0P-.txt

1646238107
ikskuh!~xq@v43666.php-friends.de
plumeus: only when you have a cache

1646238107
plumeus!~plumeus@user/plumeus
Ccache will print warnings every time

1646238117
Earnestly!~earnest@user/earnestly
companion_cube: (That's just ada2012)

1646238127
ikskuh!~xq@v43666.php-friends.de
the default build mode (build-exe or cc) don't have a project cache

1646238133
companion_cube!~simon@user/companion-cube
are the invariants checked at runtime then??

1646238137
plumeus!~plumeus@user/plumeus
although they might be wrong about the directory where the warnings occurred, etc

1646238138
companion_cube!~simon@user/companion-cube
I thought it was only used for proofs

1646238148
Earnestly!~earnest@user/earnestly
spark does use them for that

1646238148
ikskuh!~xq@v43666.php-friends.de
and still: printing warnings is not at all related to "zig build"

1646238192
Earnestly!~earnest@user/earnestly
But these are part of base language, https://gcc.gnu.org/onlinedocs/gcc-11.1.0/gnat_rm/Pragma-Loop_005fInvariant.html#Pragma-Loop_005fInvariant

1646238209
companion_cube!~simon@user/companion-cube
ah, sure.

1646238219
plumeus!~plumeus@user/plumeus
Why isn't it? There's no way to easily build C code using `build.zig` without using the `addCSourceFile` stuff, which calls `zig build-exe` under the hood.

1646238220
Earnestly!~earnest@user/earnestly
(also loop_variant)

1646238254
plumeus!~plumeus@user/plumeus
And idk why `zig build-exe` should hide the warnings either.

1646238275
Earnestly!~earnest@user/earnestly
companion_cube: I mean, this should be possible to express with asserts alone.  There might need to be some need to store temporary values for original inputs but not too unreasonable

1646238275
ikskuh!~xq@v43666.php-friends.de
plumeus: "zig build" is just a very fancy way to invoke command line tools

1646238289
Earnestly!~earnest@user/earnestly
I just never see it

1646238290
plumeus!~plumeus@user/plumeus
Well yes.

1646238291
ikskuh!~xq@v43666.php-friends.de
so it has nothing to do with the implementation of "zig build-exe" and others

1646238350
Earnestly!~earnest@user/earnestly
companion_cube: (Yes, at runtime.  Ada doesn't have a way to do this at compile time, if it were possible)

1646238372
ikskuh!~xq@v43666.php-friends.de
plumeus: the workaround is also fairly easy: "-Werror" and done.

1646238388
plumeus!~plumeus@user/plumeus
I agree on the `-Werror` part.

1646238397
ikskuh!~xq@v43666.php-friends.de
i think in the way of zig, we should just make that an error 

1646238404
ikskuh!~xq@v43666.php-friends.de
*make warnings an error by default

1646238429
plumeus!~plumeus@user/plumeus
But it's not enabled by default and it's invisible to the users.

1646238440
plumeus!~plumeus@user/plumeus
Also, I wonder if `arocc` will support all the warnings.

1646238468
plumeus!~plumeus@user/plumeus
I personally take the approach of `-Werror` and use `-Wno` for stuff I explicitly don't care for. Yes.

1646238502
ikskuh!~xq@v43666.php-friends.de
arocc is C18 compliant afaik

1646238580
plumeus!~plumeus@user/plumeus
Are the warnings part of the spec? I also thought some warnings aren't used strictly to enforce the spec.

1646238620
ikskuh!~xq@v43666.php-friends.de
i think some are

1646238642
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
plumeus there's some discussion of the messaging behavior of zig compiles here https://github.com/ziglang/zig/issues/5469 The consensus there seems to be that a successful compile should produce no output, which implies that C/C++ compile warnings would be silenced

1646238687
companion_cube!~simon@user/companion-cube
Earnestly: sure. but then it's less readable if you only have assert

1646238693
plumeus!~plumeus@user/plumeus
Well, by that philosophy, `-Werror` should be enabled by default.

1646238702
companion_cube!~simon@user/companion-cube
note that D has that stuff also at comptime, to enforce generic type invariants

1646238711
plumeus!~plumeus@user/plumeus
Suppressing seems to be the wrong way to have an empty output.

1646238725
ikskuh!~xq@v43666.php-friends.de
plumeus: i think that should be made a proposal

1646238820
plumeus!~plumeus@user/plumeus
To quote Andrew on Feb 12th:

1646238830
plumeus!~plumeus@user/plumeus
"we can't turn on -Werror for default for C code"

1646238833
plumeus!~plumeus@user/plumeus
"ok I said that but now I'm reconsidering"

1646238857
companion_cube!~simon@user/companion-cube
-Werror is the best way to have a noncompliant compiler

1646238863
companion_cube!~simon@user/companion-cube
since it rejects valid code

1646238873
braewoods!~braewoods@user/braewoods
there's no reason they can't, the real question is whether you should. there's a lot of stuff that triggers warnings.

1646238946
Earnestly!~earnest@user/earnestly
companion_cube: Yeah the D stuff looks tidy, I don't know it much.  I looked in but saw it closed source, then phobos/tango, left

1646238983
companion_cube!~simon@user/companion-cube
it's not closed source anymore, btw. it's in gcc

1646239000
companion_cube!~simon@user/companion-cube
(the stdlib split is also over I think?)

1646239002
braewoods!~braewoods@user/braewoods
there's 3 compilers for D now, they share some code.

1646239022
plumeus!~plumeus@user/plumeus
More compilers, the merrier

1646239027
braewoods!~braewoods@user/braewoods
getting a new language into GCC is a pretty big feat even

1646239034
companion_cube!~simon@user/companion-cube
D is probably one of the languages Zig is the closest to, in some ways.

1646239040
companion_cube!~simon@user/companion-cube
wrt the whole comptime stuff.

1646239127
plumeus!~plumeus@user/plumeus
Maybe I should learn D. How does it compare to Zig? In terms of scope or unique/cool features, I guess.

1646239146
plumeus!~plumeus@user/plumeus
Oh, it's meant to be similar to C++.

1646239201
companion_cube!~simon@user/companion-cube
it's a lot larger

1646239211
companion_cube!~simon@user/companion-cube
but the comptime stuff looks quite cool

1646239239
plumeus!~plumeus@user/plumeus
Huh, it has GC and support for functional-style code? Sounds cool, but also complex.

1646239267
companion_cube!~simon@user/companion-cube
there's a flag called "-betterC" which removes the GC and most of the runtime I think

1646239273
companion_cube!~simon@user/companion-cube
that's the fragment that might be quite close to Zig

1646239406
tdmm!1c9b9145fc@2604:bf00:561:2000::1c8
is it possible to query the frame of an async function to determine if it's finished or not?

1646239457
tdmm!1c9b9145fc@2604:bf00:561:2000::1c8
I tried achieving this with a hacky solution with multiple awaits and dropping intermediary frames but apparently you can't await a single function multiple times

1646239898
Earnestly!~earnest@user/earnestly
companion_cube: Yeah I saw that D fixed that problem, but it was long ago

1646243477
Hoolean!~Hoolean@176.56.237.138
is there a reason why, if i use "if" and "else" to evaluate to an enum literal, everything works fine, but if i add on an "else if", it complains about being comptime known?

1646243491
Hoolean!~Hoolean@176.56.237.138
feel like i might be bumping into an edgecase

1646243517
Hoolean!~Hoolean@176.56.237.138
okay:    if (...) .One else .Two

1646243536
Hoolean!~Hoolean@176.56.237.138
not okay:    if (...) .One else if (...) .Three else .Two

1646243571
Hoolean!~Hoolean@176.56.237.138
i've tried rotating the literals around to make sure there's not just one missing; it really seems to be caused by the "else if" in particular

1646244175
Hoolean!~Hoolean@176.56.237.138
secondary question: if i have a `const MyStruct = struct { field: enum { A, B, C } }`, how do i instantiate an enum of the field type?

1646244186
Hoolean!~Hoolean@176.56.237.138
i thought something like MyStruct.field.A might work, but no dice

1646244501
plumeus!~plumeus@user/plumeus
can you not do `MyStruct.field = .A`?

1646244543
plumeus!~plumeus@user/plumeus
If you want it to be an enum you can use in other areas, it should be `struct { const field = enum { A, B, C }; };`, right?

1646244554
plumeus!~plumeus@user/plumeus
At which point you can do `struct.field.A`, I think

1646244653
plumeus!~plumeus@user/plumeus
I meant, `MyStruct{ .field = .A };` for the first portion.

1646244687
Hoolean!~Hoolean@176.56.237.138
plumeus: so the issue i'm having is that the value of .field is determined at runtime

1646244697
Hoolean!~Hoolean@176.56.237.138
in particular, using if/elses to work out which one it is

1646244718
Hoolean!~Hoolean@176.56.237.138
sadly, it looks like there is a known bug with coercing enum literals in this case: https://github.com/ziglang/zig/issues/4629#issuecomment-741189782

1646244732
Hoolean!~Hoolean@176.56.237.138
so i'm left with the option of referring to the enum type explicitly

1646244756
Hoolean!~Hoolean@176.56.237.138
i've not had luck with MyStruct.field.A for that, seems like it's not meant to be accessed that way

1646245008
Hoolean!~Hoolean@176.56.237.138
plumeus: "If you want it to be an enum you can use in other areas, it should be ..." this did it for me, thank you

1646245020
Hoolean!~Hoolean@176.56.237.138
nice and explicit, i like that as a workaround

1646245026
plumeus!~plumeus@user/plumeus
oh, wow

1646245063
Hoolean!~Hoolean@176.56.237.138
seems nicer than having to get rid of any of my "const"s

1646245072
Hoolean!~Hoolean@176.56.237.138
and i don't mind sharing the enum a bit more

1646245083
Hoolean!~Hoolean@176.56.237.138
can wait for the bug to be fixed to go back to literals : )

1646245114
Hoolean!~Hoolean@176.56.237.138
i'd have a shot at patching it myself, but from what i gather it might be blocked on some self-hosting compiler stuff

1646245151
Hoolean!~Hoolean@176.56.237.138
final code:    if (...) .One else if (...) .Three else MyStruct.number.Two

1646245167
Hoolean!~Hoolean@176.56.237.138
where .number is the public const field

1646245205
Hoolean!~Hoolean@176.56.237.138
plumeus: ta for the pointers : )

