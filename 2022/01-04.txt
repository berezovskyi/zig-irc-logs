1641322923
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
I noticed some std code that is camelCasing values rather than snake_casing them.  Is there an ongoing effort matching this stuff up that I could contribute to, or should I just open a PR with the names updated?

1641323003
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
In particular, in the std.json library a lot of switch(@typeInfo(T)) blocks look like .Pointer => 

1641323010
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
|ptrInfo| ...

1641328808
luuk!~luuk@user/luuk
andrewrk: I could really use your opinion on this: Right now, I'm trying to implement a way to get all exported symbol names from stage1 into stage2. This is because I'd like to make them available to the linker frontend, so we can automagically append `--export=<symbol_name>` for all export symbols. This is what we used to do when the linker was implemented in stage1. Currently, I did this by

1641328810
luuk!~luuk@user/luuk
implementing a function in stage1 that exports those names, which I call from stage2. It all feels a little 'hacky', as we only need it for when the target is wasm. Do you have any preferences to this?

1641328955
andrewrk!~andrewrk@mail.ziglang.org
luuk, that sounds fine. the other option you have is to export a function from stage2 and call it from stage1. you can see a bunch of examples of this in stage1.zig

1641328981
andrewrk!~andrewrk@mail.ziglang.org
such as stage2_fetch_file

1641329150
luuk!~luuk@user/luuk
Gotcha, thanks! One issue I'm running into is during the file stage: 'Linking CXX executable zig' I get a linking error: 'undefined reference to `zig_stage1_export_symbols' I do however provide the symbol in stage1.h and an implementation in stage1.cpp. Not sure if I'm missing anything, it's been ages since I did any c++ and I'm a bit confused about how zig0, zig1, etc work :)

1641329162
luuk!~luuk@user/luuk
s/file stage/linking stage

1641330620
andrewrk!~andrewrk@mail.ziglang.org
luuk, did you forget to prefix with ZIG_EXTERN_C ?

1641330645
andrewrk!~andrewrk@mail.ziglang.org
otherwise c++ will mangle the symbol 

1641330679
Franciman!~Franciman@mx1.fracta.dev
andrewrk: I wanted to ask you about what you think about sentinels of union types

1641330684
Franciman!~Franciman@mx1.fracta.dev
in sentinel terminated arrays

1641330730
Franciman!~Franciman@mx1.fracta.dev
is a sentinel terminated array able to be of any type?

1641330734
Franciman!~Franciman@mx1.fracta.dev
or just struct and builtins?

1641330753
luuk!~luuk@user/luuk
andrewrk: I did prefix with ZIG_EXTERN_C

1641330991
andrewrk!~andrewrk@mail.ziglang.org
luuk, hmm I'm not sure why that would happen

1641331079
luuk!~luuk@user/luuk
Alright, no worries. I'll also give the opposite direction a try.

1641331839
luuk!~luuk@user/luuk
Great, in the other direction it all builds successfully. I think I can manage from here :) Time to make some users happy

1641332371
andrewrk!~andrewrk@mail.ziglang.org
ðŸ¥°

