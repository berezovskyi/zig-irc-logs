1645933526
haze!~haze@user/haze
amine have you tried zig-network? i think it has udp

1645937350
andrewrk!~andrewrk@mail.ziglang.org
self-hosted compiler status update: the LLVM backend is passing 75% of the behavior test suite

1645937374
haze!~haze@user/haze
so we just bunnyhopped 69?

1645937378
haze!~haze@user/haze
D:

1645937406
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
woohoo!

1645952904
motiejus!~motiejus@2001:470:69fc:105::38fb
marler8997_: what are the benefits against musl, I guess it will be smaller? I am using http://cmph.sourceforge.net/, which is using not more than fopen/fclose, malloc/free/memove, and thus needs full libc linking. Perhaps your musl libc can be a good candidate for me instead of musl? Tell us more. :)

1645956889
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
motiejus, that's a good question. it should be able to replace musl yes.  In fact, the goal is to be able to replace everything in the "libc" directory with a set of universal libc headers, and a common libc implementation for al platforms

1645957034
ikskuh!~xq@v43666.php-friends.de
marler8997_: i think that won't work as we still require the libc headers to cross-compile glibc or musl abi libs

1645957037
ikskuh!~xq@v43666.php-friends.de
or tools

1645957046
ikskuh!~xq@v43666.php-friends.de
otherwise, "drop in C compiler" isn't right anymore

1645957054
ikskuh!~xq@v43666.php-friends.de
but having a "freestanding" libc would be sweet

1645957167
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ikskuh, the goal is to be able to emulate all those headers as well

1645957222
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
well, the glibc headers anyway

1645957252
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
with ziglibc I don't think we'll need musl anymore

1645957358
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
our glibc situation was improved with the glibc-abi-tool, but we still use the latest glibc headers which don't always work with older versions.  This is one of the problems I aim to solve with ziglibc

1645957412
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
goal is to keep a declarative database of all libc versions and what part of the API they support, and then generate the headers from that database

1645957450
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
not sure if it will be 1 set of headers with a bunch of ifdefs, or multiple sets of headers, we'll see as we go

1645957592
ikskuh!~xq@v43666.php-friends.de
ah

1645957596
ikskuh!~xq@v43666.php-friends.de
that sounds smart

1645957624
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
good, high praise coming from you :)

1645957630
ikskuh!~xq@v43666.php-friends.de
haha

1645957636
ikskuh!~xq@v43666.php-friends.de
oh no

1645960009
motiejus!~motiejus@2001:470:69fc:105::38fb
Ah, so it will be for dynamically linking with glibc, but with smarter headers?

1645960092
motiejus!~motiejus@2001:470:69fc:105::38fb
The mismatched headers is the only remaining "known" issue still remaining in bazel-zig-cc when linking with an older glibc: https://sr.ht/~motiejus/bazel-zig-cc/#using-glibc-227-or-older ; I am very curious about this work! :)

1645960149
motiejus!~motiejus@2001:470:69fc:105::38fb
Also https://github.com/ziglang/zig/issues/10713 of course (with a glibc downstream, but not upstream patch). Am I reading this right?

1645966506
motiejus!~motiejus@2001:470:69fc:105::38fb
ah,I re-read the above again. Looks like both are in scope.

1645984389
haze!~haze@user/haze
are there any examples of using the standard library event loop?

1645985869
luuk!~luuk@user/luuk
haze: Komari has an example usage here: https://github.com/Hejsil/lemonbar-maker

1645989285
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
motiejus yes, smarter headers for glibc along with a universal libc implementation

