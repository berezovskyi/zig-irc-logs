1648546652
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
are there some benchmarks for zig?

1648546695
plumeus!~plumeus@user/plumeus
Pretty vague question

1648546730
plumeus!~plumeus@user/plumeus
probably not what you're asking for, but https://ziglang.org/perf/

1648546858
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
 This is some good data pertaining to my questoin I just don't know how to read it

1648546921
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
What I should ask is: does it look like zig will catch up to rust in speed?

1648546955
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
afaik the use of a borrow checker should allow for this

1648546979
plumeus!~plumeus@user/plumeus
That's begging the question that Zig is slower than Rust, which I don't think it is? Not that I've benchmarked.

1648547019
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
I am just factoring in the idea that the rust compiler has more developers working on it so it may have more optimizations

1648547069
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
just as an outside of rust I am wondering if it is promising that rust will at minimum match rust if not surprass

1648547092
plumeus!~plumeus@user/plumeus
I presume you meant "Zig will at minimum"

1648547103
luuk!~luuk@user/luuk
You're going to have to be more specific in what you're asking. Is Zig faster in what? Compilation speed, runtime speed?

1648547117
plumeus!~plumeus@user/plumeus
Rust compile speeds, lol

1648547118
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
runtime speed for common benchmarks

1648547125
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
lets say sorting is a common benchmark

1648547134
plumeus!~plumeus@user/plumeus
Zig's goal should allow it to be faster than Rust.

1648547142
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
this is good news

1648547145
Earnestly!~earnest@user/earnestly
https://github.com/nordlow/compiler-benchmark

1648547149
Earnestly!~earnest@user/earnestly
Includes zig

1648547155
luuk!~luuk@user/luuk
I don't think there's any catching up to do.

1648547173
Earnestly!~earnest@user/earnestly
(Bear in mind that the README is probably out of date, and may not account for stage2)

1648547193
luuk!~luuk@user/luuk
It doesn't account for stage2. It's also a silly benchmark

1648547215
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
is zig suitable for microcontrollers and RTOS?

1648547219
Earnestly!~earnest@user/earnestly
Aren't they all

1648547234
luuk!~luuk@user/luuk
Earnestly: Haha yeah you're right

1648547235
Earnestly!~earnest@user/earnestly
lisbeths: In theory yes

1648547241
plumeus!~plumeus@user/plumeus
Zig optimizes for UB and such whilst obviously having more advantages than Rust at allocator freedom and such. I believe Andrew talked a bit on this in a podcast.

1648547247
Earnestly!~earnest@user/earnestly
lisbeths: It started as 'C without the bad bits'

1648547260
ikskuh!~xq@2a0d:5940:6:163::ad7e
lisbeths: yes, very much so!

1648547269
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
I think of it as rust without object oriented

1648547285
Earnestly!~earnest@user/earnestly
SO it occupies the "low level programming language" niche.  Rust initially wasn't going to be a systems language, but a high level GC'd one

1648547293
Earnestly!~earnest@user/earnestly
rust isn't OO

1648547317
Earnestly!~earnest@user/earnestly
(To the degree 'OO' can even be defined)

1648547322
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
when I explored rust I got the feeling there were alot of parts to it and it felt like a bloated language with too many features

1648547325
plumeus!~plumeus@user/plumeus
lisbeths, the consensus in the Zig community seems to be that "Zig aims for better C, Rust aims for better C++".

1648547364
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
rust and zig are also the fastest language that are memory safe

1648547374
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
thats what sells it to industralists

1648547376
plumeus!~plumeus@user/plumeus
I think Zig is supposed to have simple cases when it can optimize for more performance than Rust and C.

1648547379
plumeus!~plumeus@user/plumeus
Zig isn't memory safe

1648547397
Earnestly!~earnest@user/earnestly
Rust's standard library unfortunately went the way of boost, mostly because those working on it came from C++

1648547403
plumeus!~plumeus@user/plumeus
Zig provides a lot of runtime safety measures in order to reduce footguns, but it's not provably safe.

1648547407
Earnestly!~earnest@user/earnestly
By boost, I mean in design

1648547437
Earnestly!~earnest@user/earnestly
(iow, lots of methods instead of freestanding functions that explicitly take structures as argument)

1648547439
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
is zig as memory safe as java is?

1648547447
plumeus!~plumeus@user/plumeus
So, tl;dr, Zig is supposed to technically be able to surpass Rust/C perf, I think.

1648547454
Earnestly!~earnest@user/earnestly
lisbeths: There's been no proof done on that

1648547458
Earnestly!~earnest@user/earnestly
So probably not

1648547471
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
isn't rust memory safe?

1648547471
Earnestly!~earnest@user/earnestly
(And it has escape hatches)

1648547478
plumeus!~plumeus@user/plumeus
In practice, the difference should be negligible and I doubt it loses much to Rust as-is.

1648547484
plumeus!~plumeus@user/plumeus
Rust is memory safe.

1648547497
plumeus!~plumeus@user/plumeus
Zig isn't anywhere as near as Java, which has a GC.

1648547513
Earnestly!~earnest@user/earnestly
lisbeths: There's been no proof done yet for zig, whereas rust has had such work done

1648547538
plumeus!~plumeus@user/plumeus
Memory safety isn't one of Zig's primary goals.

1648547564
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
well then speed and resource usage should be your only primary goals

1648547605
plumeus!~plumeus@user/plumeus
And the ergonomics of writing, ease of maintenance, cross-compilation, and quite a bit more

1648547626
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
llvm kinda solves cross compilation

1648547650
plumeus!~plumeus@user/plumeus
LLVM isn't some magic cure

1648547681
plumeus!~plumeus@user/plumeus
good luck trying to port Rust to some target that LLVM supports, but Rust currently doesn't. And try doing it for multiple libcs. I would presume it's hellish

1648547723
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
how complex is the zig compiler compared to gcc?

1648547755
ikskuh!~xq@2a0d:5940:6:163::ad7e
this is a good question...

1648547774
plumeus!~plumeus@user/plumeus
Worth reading regarding Zig's safety: https://github.com/ziglang/zig/projects/3

1648547784
ikskuh!~xq@2a0d:5940:6:163::ad7e
Stage 2 currently has 185_283 lines of zig

1648547792
plumeus!~plumeus@user/plumeus
Note, that link isn't limited to info on memory safety

1648547794
ikskuh!~xq@2a0d:5940:6:163::ad7e
and 80kLOC C++

1648547835
plumeus!~plumeus@user/plumeus
I personally don't know anything about GCC's complexity, and I've not tried writing my own C compiler for example but

1648547881
plumeus!~plumeus@user/plumeus
I guess stuff worth looking into would be Vexu's Arocc (C compiler in Zig) and https://mitchellh.com/zig, which explains how the self-hosted Zig compiler works.

1648547969
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
is zig able to be just-in time compiled and run as a shell one line at a time?

1648547973
plumeus!~plumeus@user/plumeus
ikskuh, a tough call on whether writing/reading/maintaining 2x more Zig code is easier than C

1648547995
plumeus!~plumeus@user/plumeus
I think stage2 has some interpreter mode

1648547998
ikskuh!~xq@2a0d:5940:6:163::ad7e
plumeus: wdym?

1648548024
plumeus!~plumeus@user/plumeus
oh, nvm, misread

1648548037
ikskuh!~xq@2a0d:5940:6:163::ad7e
lisbeths: no JIT really, similar to C/C++

1648548043
plumeus!~plumeus@user/plumeus
I thought it said 80kLOC of C for GCC... idk what I was thinking

1648548046
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can probably JIT subsets of the language, but not all of it

1648548109
plumeus!~plumeus@user/plumeus
https://github.com/ziglang/zig/issues/596

1648548124
plumeus!~plumeus@user/plumeus
Never used it so I'm not aware how complete this feature is

1648548146
ikskuh!~xq@2a0d:5940:6:163::ad7e
afaik it's not implemented yet

1648548160
luuk!~luuk@user/luuk
--watch is implemented, but it's pretty minimal atm

1648548172
plumeus!~plumeus@user/plumeus
"The other thing I want to point out is that we could have a zig repl that behaves like everything is in a giant `comptime` block. So certain things wouldn't be allowed, like syscalls, external function calls, and pointer reinterpreting."

1648548228
luuk!~luuk@user/luuk
The compiler is fast enough to not require that :) It's currently implemented by using incremental compilation. So only the changes you apply (just like a repl really) are being compiled.

1648548261
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, good point. we can just recompile everything :D

1648548265
plumeus!~plumeus@user/plumeus
Who needs JIT when stage2 can compile trivial programs faster than Python can interpret files? /s

1648548293
plumeus!~plumeus@user/plumeus
And this is without factoring for incremental compilation

1648548312
plumeus!~plumeus@user/plumeus
https://nitter.net/andy_kelley/status/1483677253682675713#m

1648548314
plumeus!~plumeus@user/plumeus
oh, CPython

1648548472
lisbeths!~user@c-73-83-140-133.hsd1.wa.comcast.net
thanks

1648553405
hugbubby!~hugbubby@49.207.215.73
hi; how do you allocate memory for a c pointer in zig? I'm interoperating with a C crypto library and need to pass private keys as c pointers.

1648553435
hugbubby!~hugbubby@49.207.215.73
Trying to create bindings and would prefer to be able to use regular zig []u8 arrays everywhere else and only deal with the c pointer stuff internally

1648554083
ikskuh!~xq@2a0d:5940:6:163::ad7e
hugbubby: zig pointers and c pointers are equivalent

1648554101
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig pointers just have some stricter operations defined

1648554136
ikskuh!~xq@2a0d:5940:6:163::ad7e
a key is probably either "[*]u8" for a dynamically sized key

1648554148
ikskuh!~xq@2a0d:5940:6:163::ad7e
or "*[128]u8" for statically sized keys

1648554159
ikskuh!~xq@2a0d:5940:6:163::ad7e
obviously add a const in there if the keys are const :)

1648554211
hugbubby!~hugbubby@49.207.215.73
ok, but how do I pass those to a C library that expects [*c]u8 pointers and return them as *[32]u8 pointers?

1648554219
hugbubby!~hugbubby@49.207.215.73
I'm just trying to write a function that generates keys for now

1648554234
hugbubby!~hugbubby@49.207.215.73
Do I use @ptrCast?

1648554237
ikskuh!~xq@2a0d:5940:6:163::ad7e
[*c]u8 can accept any mutable zig pointer (not slices)

1648554250
ikskuh!~xq@2a0d:5940:6:163::ad7e
so you can just pass an array pointer for example:

1648554259
ikskuh!~xq@2a0d:5940:6:163::ad7e
var key: [32]u8 = …; foo(&key);

1648554277
ikskuh!~xq@2a0d:5940:6:163::ad7e
important thing is that if the library takes ownership and wants to free the memory itself, you have to allocate the memory with std.c.malloc()

1648554342
ikskuh!~xq@2a0d:5940:6:163::ad7e
for the return type:

1648554362
ikskuh!~xq@2a0d:5940:6:163::ad7e
slice the C pointer:

1648554372
ikskuh!~xq@2a0d:5940:6:163::ad7e
var retval: [*c]u8 = ...;

1648554378
ikskuh!~xq@2a0d:5940:6:163::ad7e
var slice = retval[0..32];

1648554404
hugbubby!~hugbubby@49.207.215.73
Ok. Thanks for the tip about mutability. Now I understand what to do.

1648554423
ikskuh!~xq@2a0d:5940:6:163::ad7e
wonderful! \o/

1648554631
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
luuk: it would still be nice to have a comptime-only repl to drop into to explore the current state of compilation when writing comptime code

1648554759
hugbubby!~hugbubby@49.207.215.73
This is probably a quesiton answered in the docs somewhere, but how do you dereference and assign a global pointer? LIke if I have var i: ?*int = null somewhere, and I'm allocating memory for it, how do I then *i = 5?

1648554771
hugbubby!~hugbubby@49.207.215.73
ah wait found it

1648554772
hugbubby!~hugbubby@49.207.215.73
srry

1648555393
hugbubby!~hugbubby@49.207.215.73
How do you allocate memory for C structs? I'm trying to use create and the compiler is returning an error that says it can't do it.

1648555461
ifreund!2940d10f8b@user/ifreund
showing us the error might help us help you

1648555541
hugbubby!~hugbubby@49.207.215.73
https://pastebin.com/TRqV64ui

1648556057
ifreund!2940d10f8b@user/ifreund
hugbubby: from a quick glance at the header here https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h secp256k1_context seems to be an opaque type

1648556075
ifreund!2940d10f8b@user/ifreund
it seems that you're supposed to create it using the secp256k1_context_create() function

1648556140
ifreund!2940d10f8b@user/ifreund
the size of the struct isn't exposed in the C header, so code outside that library can't allocate it as it would have no idea how much memory to allocate

1648556259
ifreund!2940d10f8b@user/ifreund
andrewrk: sent a zig-bootstrap PR with a realtively important zlib bugfix update

1648556345
ifreund!2940d10f8b@user/ifreund
the bug fix seems to have been in zlib master branch for years already but no release was tagged until someone rediscovered the bug in the wild a few days ago only to find that it had already been fixed but nearly everyone was still using the latest zlib release that didn't include the fix :/

1648558835
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
in short zlib is nearly unmaintained?

1648559411
leah2!~leah@vuxu.org
there's a new release less than a day old

1648566353
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
nearly

1648567128
ifreund!2940d10f8b@user/ifreund
one could also say that the code needs nearly no maintenance

1648567521
bgiannan!4529@2a01:4f8:141:1272::2
do we have some kind of badge for zig to put in READMEs ?

1648577117
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
<ifreund> "one could also say that the code..." <- in that case after you fix some bug you would just do a release right? Since you expect these to be infrequent

1648577835
haze!~haze@user/haze
bgiannan did you ever get an answer?

1648583524
zy!~cc@user/zy
build/zig build test-std -Dskip-release -Dskip-non-native 

1648583547
zy!~cc@user/zy
^ Running that on linux is usually without libc. Can I force libc use (wanna test pthreads)

1648583563
zy!~cc@user/zy
I though I'd used -lc in the past, but that doesn't seem to work here

1648586884
vicfred!~vicfred@user/vicfred
Hi, how do I read 4 integers separated by spaces and ended with \n? I did this but it's ugly https://github.com/Vicfred/kyopro/commit/651735c5a0dee57b5996aa47e77389275a45c06b

1648587711
novakane!ca74a093b3@user/novakane
vicfred: i use something like that https://git.sr.ht/~novakane/zelbar/tree/main/item/src/main.zig#L158-171

1648592601
energizer!~energizer@user/energizer
why is i32 not capitalized?

1648592787
Earnestly!~earnest@user/earnestly
I32?

1648592808
energizer!~energizer@user/energizer
yes

1648592944
Earnestly!~earnest@user/earnestly
Perhaps if zig came from Ada it might be I32, but it came from C, where such things were lowercase (e.g. Linux's u64 or int32_t from stdint)

1648592976
energizer!~energizer@user/energizer
> If x is a type then x should be TitleCase, unless it is a struct with 0 fields and is never meant to be instantiated, in which case it is considered to be a "namespace" and uses snake_case.

1648592994
energizer!~energizer@user/energizer
is i32 never meant to be instantiated? does it have 0 fields?

1648593059
energizer!~energizer@user/energizer
Question 2. How does optional work: is it a `union` or a `enum` or something else?

1648593068
Earnestly!~earnest@user/earnestly
I wonder if the integer/float type notation existed before that convention was even decided on

1648593096
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
the same applies to all builtin types afaik

1648593197
Earnestly!~earnest@user/earnestly
energizer: optional in the sense of ?i32 notation?

1648593210
energizer!~energizer@user/energizer
yes

1648593276
Earnestly!~earnest@user/earnestly
I recall andrewrk mentioning the implementation being something quite simple, hm

1648593433
Earnestly!~earnest@user/earnestly
energizer: struct { bool, T }

1648593536
energizer!~energizer@user/energizer
ok

1648594079
Earnestly!~earnest@user/earnestly
energizer: (This does have consequence for alignment if you're using them in arrays, as you might expect)

1648594188
energizer!~energizer@user/energizer
i suppose that could be SoA

1648594303
energizer!~energizer@user/energizer
or an array of indexes and an array of T

1648594351
Earnestly!~earnest@user/earnestly
I.e an array of u64 will be half the size of the same as ?u64

1648595319
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
Earnestly: https://github.com/ziglang/zig/issues/104

1648596469
thush!~thush@host-89-242-174-238.as13285.net
Hey all!  Hope everyone's well.  I'm just taking a look through Zig's documentation and was wondering if anyone could point me to something which explains two things I'm not understanding. One is arrays and what [_] or [*] means, and the other is to do with this syntax:  `foo.* = ...` -- what does "foo,*" mean here?  I couldn't quite fathom it from the docs I were reading.  Any help appreciated!

1648597468
jcmoyer!~jcmoyer@user/jcmoyer
thush: [_]  is for inferring an array's size e.g. [_]u8{5,6,7} infers a length of 3. You could also write [3]u8{5,6,7}, but then you repeat yourself. [*] is a pointer to an array with an unknown number of elements. You typically use it when working with C APIs. `foo.*` dereferences the pointer `foo`; that expression is equivalent to `*foo = ...` in C.

1648597694
thush!~thush@host-89-242-174-238.as13285.net
jcmoyer, Ah ha!  Suddenly the penny drops regarding arrays, thank you!  As for `foo.*` meaning `*foo = ...` -- I presume foo.* is idiomatic to Zig, and that should be used?  Or are there any instances where *foo = ..., can only be used?

1648597832
jcmoyer!~jcmoyer@user/jcmoyer
thush: `*foo = ...` is not valid zig so you don't have a choice :)

1648598068
thush!~thush@host-89-242-174-238.as13285.net
Understood.  Thank you, jcmoyer 

