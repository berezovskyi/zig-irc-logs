1645332391
plumeus!~plumeus@user/plumeus
https://ziglang.org/documentation/master/std/#std;os.argv

1645332411
plumeus!~plumeus@user/plumeus
I just realized the documentation was updated to explain why it doesn't work for WASI and Windows.

1645332420
plumeus!~plumeus@user/plumeus
I never understood why, so that's nice.

1645342407
motiejus!~motiejus@2001:470:69fc:105::38fb
would zig accept patches that replace inferred error sets with explicit error sets in stdlib? I'd like to take a function pointer to, say, ArrayList.appendSlice, but it returns an inferred error (`!void`). From a quick observation it can only return `Allocator.Error`, so that "should be an easy fix"

1645342438
andrewrk!~andrewrk@mail.ziglang.org
generally, yes

1645342772
motiejus!~motiejus@2001:470:69fc:105::38fb
thanks, will do for ArrayList.

1645342875
motiejus!~motiejus@2001:470:69fc:105::38fb
also, is there a nicer way to write https://paste.sr.ht/~motiejus/b6cd48c0470283037888f590425c19fe67f316b0? E.g. without the "if" or the "case"?

1645342959
plumeus!~plumeus@user/plumeus
wait, is there only one possible error type? If so, why do you need a switch?

1645342994
plumeus!~plumeus@user/plumeus
`return std.math.cast(T, n) catch error.InvalidRecord;`?

1645343109
plumeus!~plumeus@user/plumeus
if not, `return std.math.cast(T, n) catch switch (err) {<logic>};` should probably work

1645343159
plumeus!~plumeus@user/plumeus
uh, did the catch slightly wrong on the 2nd line

1645343179
motiejus!~motiejus@2001:470:69fc:105::38fb
I only want to match on `error.Overflow`, because the contract of `math.cast` may change

1645343208
plumeus!~plumeus@user/plumeus
then you probably need `_ => unreachable` or something

1645343224
plumeus!~plumeus@user/plumeus
actually, nvm, it'll give a compile error when code updates?

1645343367
motiejus!~motiejus@2001:470:69fc:105::38fb
will try your second suggestion

1645343415
plumeus!~plumeus@user/plumeus
make sure to do `<whatever> catch |err| switch (err) {<whatever>}`

1645343464
motiejus!~motiejus@2001:470:69fc:105::38fb
yep, works, thanks!

1645343522
plumeus!~plumeus@user/plumeus
And obviously, `zig fmt` supports newlines between `catch |err|` and `switch`, or something like that. Could be nice depending on how you want to format your code.

1645344365
motiejus!~motiejus@2001:470:69fc:105::38fb
zig fmt formats it perfectly :)

1645344659
motiejus!~motiejus@2001:470:69fc:105::38fb
I added the fallible error to ArrayList, but can't get the function pointer; still too much meta for me: https://paste.sr.ht/~motiejus/009dde3482aaf418a25e4e36d68d145943a53dad ; I understand it is complaining that the function prototype does not expect to be "bounded", but a similar concept (pointer to a struct's function that accepts `*Self` as first argument) works on a "simpler" struct.

1645344677
motiejus!~motiejus@2001:470:69fc:105::38fb
a pointer would be appreciated.

1645352049
motiejus!~motiejus@2001:470:69fc:105::38fb
moving this to github: https://github.com/ziglang/zig/pull/10940

1645352164
plumeus!~plumeus@user/plumeus
I think there was an open issue on something regarding function pointers, but forgot what it was

1645352208
plumeus!~plumeus@user/plumeus
Still waiting on https://github.com/ziglang/zig/issues/1717 or similar

1645352259
plumeus!~plumeus@user/plumeus
Oh, that came out to be confusing. Meant to say "I'm still waiting for 1717".

1645353783
motiejus!~motiejus@2001:470:69fc:105::38fb
Thanks for the link. It makes it a bit clearer on how it will look like once done, but I want to know how to make a function pointer to a bound instance *now* :)

1645353944
plumeus!~plumeus@user/plumeus
Maybe I was thinking of https://github.com/ziglang/zig/pull/10656 ... idk

1645354052
plumeus!~plumeus@user/plumeus
"stage1 is *wrong*. It is not yet updated to support the new function type semantics."

1645354053
plumeus!~plumeus@user/plumeus
huh

1645355341
motiejus!~motiejus@2001:470:69fc:105::38fb
Ok, this is still a very much moving target. Will wait for someone to comment in the PR

1645355349
motiejus!~motiejus@2001:470:69fc:105::38fb
Good pointers

1645376063
ifreund!2940d10f8b@user/ifreund
TIL, uint64_t has alignment 4 on i386

1645376179
plumeus!~plumeus@user/plumeus
huh

1645376190
plumeus!~plumeus@user/plumeus
https://michas.eu/blog/c_ints.php?lang=en Does that mean this is wrong?

1645376331
ifreund!2940d10f8b@user/ifreund
plumeus: that seems to be listing size not alignment?

1645376422
plumeus!~plumeus@user/plumeus
Wait, isn't the size relevant for alignment? Or is the `uint64_t` treated like two `uint32_t` under the hood?

1645376470
ifreund!2940d10f8b@user/ifreund
plumeus: indeed, I believe that's what happens since i386 is a 32 bit target

1645376488
ifreund!2940d10f8b@user/ifreund
https://uclibc.org/docs/psABI-i386.pdf

1645376492
plumeus!~plumeus@user/plumeus
Ah, okay

1645376496
ifreund!2940d10f8b@user/ifreund
Table 2.1

1645376531
Franciman!~Franciman@mx1.fracta.dev
yes

1645376755
ifreund!2940d10f8b@user/ifreund
andrewrk: I believe Type.abiAlignment() makes the same false assumption I did that u64/c_ulonglong is align 8 on 32 bit targets

1645377157
ifreund!2940d10f8b@user/ifreund
this will matter in practice for matching struct layout of other compilers targeting the system C ABI at the very least

1645377252
ifreund!2940d10f8b@user/ifreund
I can fix the abiAlignment function, but I wouldn't be surprised if we make this false assumption elsewhere as well

1645384593
ikskuh!~xq@v43666.php-friends.de
huh

1645384604
ikskuh!~xq@v43666.php-friends.de
what's the correct way to check for a ChildProcess liveness?

1645384637
andrewrk!~andrewrk@mail.ziglang.org
ifreund, I noticed that recently too. we should make a full audit, cross referencing our data with llvm's

1645384692
andrewrk!~andrewrk@mail.ziglang.org
ifreund, two more facts that I learned recently that surprised me:

1645384731
andrewrk!~andrewrk@mail.ziglang.org
the ABI alignment of u64 for i386-windows is align 8, while on i386-linux it is align 4

1645384746
andrewrk!~andrewrk@mail.ziglang.org
the ABI alignment of u64 on arm is align 8

1645385556
ifreund!2940d10f8b@user/ifreund
andrewrk: of course it's worse than I realized, what should I have expected? :P

1645385586
ifreund!2940d10f8b@user/ifreund
I'll try and figure out where clang/llvm keeps its secrets

1645385642
andrewrk!~andrewrk@mail.ziglang.org
if the canonical source is not easy to find we can always just call LLVMABIAlignmentOfType to find out

1645386424
ifreund!2940d10f8b@user/ifreund
looks like much of it's in clang/lib/Basic/Targets/Foo.h

1645386435
ifreund!2940d10f8b@user/ifreund
there's a lot of stuff to wade through there though

1645386475
ifreund!2940d10f8b@user/ifreund
it's got fun comments like "Mingw64 rounds long double size and alignment up to 16 bytes, but sticks with x86 FP ops. Weird."

1645386554
ifreund!2940d10f8b@user/ifreund
and it's implemented as a C++ object heirarchy of course

1645387291
ikskuh!~xq@v43666.php-friends.de
andrewrk, ifreund: why is waitpid having ECHILD => unreachable ?

1645387364
ikskuh!~xq@v43666.php-friends.de
it doesn't feel right to spawn a thread that calls "wait" on a ChildProcess 

1645387569
ikskuh!~xq@v43666.php-friends.de
oh wait, i think i got it, sorr

1645388486
plumeus!~plumeus@user/plumeus
I'm going to sleep so I figured I can ask one question before

1645388496
plumeus!~plumeus@user/plumeus
https://github.com/ziglang/zig/issues/10892

1645388559
plumeus!~plumeus@user/plumeus
Where can I read about the libc++ stuff in Zig? I really don't get why the error doesn't happen for debug.

1645388639
plumeus!~plumeus@user/plumeus
Oh, `zig/lib/libcxx`

