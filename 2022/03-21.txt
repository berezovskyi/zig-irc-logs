1647822217
vms14!~vms14@29.red-79-153-202.dynamicip.rima-tde.net
midi[m]: :D

1647897762
jemius!~imperator@200116b82dddca009c1d9480121cbb49.dip.versatel-1u1.de
Does Zig have a recipe against division by zero errors?

1647897844
andrewrk!~andrewrk@mail.ziglang.org
integer division by zero is illegal behavior. safe builds panic, unsafe builds cause undefined behavior

1647897884
braewoods!~braewoods@user/braewoods
wouldn't division by zero normally cause your program to crash anyway?

1647897920
jemius!~imperator@200116b82dddca009c1d9480121cbb49.dip.versatel-1u1.de
braewoods, depends on the CPU. Afair some CPUs just ignore it. x86 fires an exception

1647897924
jemius!~imperator@200116b82dddca009c1d9480121cbb49.dip.versatel-1u1.de
*interrupt

1647897966
braewoods!~braewoods@user/braewoods
I see. I'm used to that causing the kernel to send a signal to your program which usually crashes it.

1647898210
jemius!~imperator@200116b82dddca009c1d9480121cbb49.dip.versatel-1u1.de
braewoods, as far as my understanding goes, that's the kernel's interrupt handler. It checks which application has been running before the interrupt, and then it will deliver said signal to it

1647898867
Earnestly!~earnest@user/earnestly
integer division by zero should equal zero

1647898915
Earnestly!~earnest@user/earnestly
(As Coq, Isabella, HOL, etc. all do)

1647899247
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
What exactly is "stage1" and "stage2" in the compiler.

1647899317
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
I'm having a compiler bug (specifically a not-implemented bug) and would like to do something about it, but it seems to be happening in "stage1". Why is there a "stage1" needed?

1647899342
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
My understanding was that the entire compiler was implemented in Zig.

1647899404
cot!~kiedtl@kisslinux/kiedtl
How does one prevent std.fmt from putting a + before a positive signed integer when formatting it?

1647899517
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
Actually I think my question is better asked in a fourm where long-winded answers are possible.

1647899521
andrewrk!~andrewrk@mail.ziglang.org
noodlez, stage1 is the zig compiler everyone is using right now: https://github.com/ziglang/zig/tree/master/src/stage1

1647899538
andrewrk!~andrewrk@mail.ziglang.org
here's a forum: https://forum.ziggit.dev/ I'd be happy to answer your question there too

1647899552
cot!~kiedtl@kisslinux/kiedtl
r/zig too

1647899552
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
Yeah I'll post it there, because I have a few questions about it as well

1647899986
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
It has been posted

1647900094
cot!~kiedtl@kisslinux/kiedtl
Okay, why does std.log.info("{s}", .{ if (my_bool) @as([]const u8, "true") else "false" }) always print "true", regardless of my_bool's value?

1647900127
cot!~kiedtl@kisslinux/kiedtl
Pretty sure this is a bug? Unless zig is somehow trying to calculate at comptime my_bool's value?

1647900176
cot!~kiedtl@kisslinux/kiedtl
http://ttm.sh/iaS.zig

1647900376
ifreund!2940d10f8b@user/ifreund
cot: yep, stage1 compiler bug

1647900378
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
Huh. I have no clue why that is.

1647900388
cot!~kiedtl@kisslinux/kiedtl
ifreund: ah, any workaround?

1647900397
ifreund!2940d10f8b@user/ifreund
avoid branches in the .{} argument to std.fmt functions

1647900407
ifreund!2940d10f8b@user/ifreund
i.e. do the if statement outside the .{}

1647900414
cot!~kiedtl@kisslinux/kiedtl
Ah, I see, working now +1

1647900431
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
Is this a well known bug?

1647900806
andrewrk!~andrewrk@mail.ziglang.org
I replied on the forum thread

1647901356
demize!kyrias@archlinux/developer/demize
It comes up semi-frequently.  https://github.com/ziglang/zig/issues/5230

