1647533595
Matthias1!~Matthias1@8.6.144.119
Is there a way to get the current hour (or date or minute or etc) in Zig? Or is that something that's missing from the standard library?

1647534617
ikskuh!~xq@v43666.php-friends.de
std.time.timestamp() + std.time.epoch.EpochSeconds + follow up

1647534836
Matthias1!~Matthias1@8.6.144.119
That's 

1647534878
Matthias1!~Matthias1@8.6.144.119
*That's just the seconds since epoch

1647534922
Matthias1!~Matthias1@8.6.144.119
I want time.h's localtime() which returns a struct with current date/minute/hour/second broken out

1647535451
ikskuh!~xq@v43666.php-friends.de
please check out the linked stuff ;)

1647535462
ikskuh!~xq@v43666.php-friends.de
it implements the features to decode it into a gregorian date

1647535558
braewoods!~braewoods@user/braewoods
but does it factor in timezone?

1647535664
ikskuh!~xq@v43666.php-friends.de
nope, no time processing further than that in the stdlib

1647536481
Matthias1!~Matthias1@8.6.144.119
Okay, I did manage to get a 16 out of that. Still not very helpful without the local timezone support

1647536572
braewoods!~braewoods@user/braewoods
i assume you could still fallback to libc.

1647536783
Matthias1!~Matthias1@8.6.144.119
Yeah that's what I'll have to do

1647540140
cot!~kiedtl@kisslinux/kiedtl
So, usingnamespace can no longer be used to import all constants/types from a file? Is there any other option, other than manually writing out `const foo = module.foo` for a hundred types?

1647540176
cot!~kiedtl@kisslinux/kiedtl
I mean, I like all the newer Zig stuff... but this one hurts.

1647541445
andrewrk!~andrewrk@mail.ziglang.org
if it makes you feel any better, it's one of a few key language design points that allows the new compiler to be real fast

1647541536
bfredl!~bfredl@2001:470:69fc:105::183
I'd use `const m = module` in a situation like this

1647541721
cot!~kiedtl@kisslinux/kiedtl
Now I need to figure out what's more annoying, add ~35 lines of `const FooType = @import("types.zig").FooType` to 30 files, or modifying 15k lines to say `t.FooType` instead of `FooType`

1647541730
cot!~kiedtl@kisslinux/kiedtl
andrewrk: I want my 0.7.1 back >:(

1647541744
andrewrk!~andrewrk@mail.ziglang.org
well you have it. 0.7.1 isn't going anywhere

1647541792
cot!~kiedtl@kisslinux/kiedtl
Let me rephrase that. "I want my 0.7.1-style usingnamespace back. >:("

1647541795
andrewrk!~andrewrk@mail.ziglang.org
if you break your functions and types into proper namespaces, it tends to work great without usingnamespace

1647541814
cot!~kiedtl@kisslinux/kiedtl
Can you elaborate? I'm not sure I understand

1647541826
andrewrk!~andrewrk@mail.ziglang.org
e.g. if you have a bunch of functions prefixed with "foo" then make "foo" an actual namespace instead then you can just import foo

1647541840
cot!~kiedtl@kisslinux/kiedtl
Ah true

1647541866
cot!~kiedtl@kisslinux/kiedtl
but in my case it's mostly types I'm importing, the functions are already neatly tucked away into their respective types (or namespaces)

1647542452
andrewrk!~andrewrk@mail.ziglang.org
I'm happy to make suggestions if you show me the problematic file

1647543798
cot!~kiedtl@kisslinux/kiedtl
andrewrk: ty, http://ttm.sh/iN6.zig (mapgen.zig)

1647543813
cot!~kiedtl@kisslinux/kiedtl
The types.zig it's importing from is here: http://ttm.sh/iNV.zig

1647543946
andrewrk!~andrewrk@mail.ziglang.org
cot, tbh this looks like a typical top of a big file in the zig code I write too: https://github.com/ziglang/zig/blob/master/src/Compilation.zig#L1-L37

1647543961
andrewrk!~andrewrk@mail.ziglang.org
I don't find the header to be any kind of maintenance burden

1647543997
cot!~kiedtl@kisslinux/kiedtl
Fair enough

1647544005
andrewrk!~andrewrk@mail.ziglang.org
I get that it's annoying to have to change your code all at once

1647544022
cot!~kiedtl@kisslinux/kiedtl
Guess I'm just feeling salty because I suddenly have to do this, yeah :V

1647544046
cot!~kiedtl@kisslinux/kiedtl
ACTION will shaddup now and get back to work

1647544802
andrewrk!~andrewrk@mail.ziglang.org
that is a reasonable way to feel

1647544816
andrewrk!~andrewrk@mail.ziglang.org
thanks for suffering through the development process

1647545051
cot!~kiedtl@kisslinux/kiedtl
You're welcome :P

1647545054
ifreund!2940d10f8b@user/ifreund
cot: what kinda roguelike are you working on? Is it open source?

1647545078
cot!~kiedtl@kisslinux/kiedtl
ifreund: yup, https://github.com/kiedtl/roguelike

1647545100
cot!~kiedtl@kisslinux/kiedtl
Though it's not in a compilable state, even with 0.7.1 (it needs some backported stuff from 0.8.0's stdlib which I never added to git)

1647545121
cot!~kiedtl@kisslinux/kiedtl
Well that's a lighter note, I can finally delete that backported std.enums file! yay!

1647545165
cot!~kiedtl@kisslinux/kiedtl
ifreund: https://tilde.team/~kiedtl/blog/roguelike/ if you want a screenshot or two

1647545178
ifreund!2940d10f8b@user/ifreund
fun :)

1647545399
cot!~kiedtl@kisslinux/kiedtl
lots :)

1647545610
Earnest!~earnest@user/earnestly
cot: (Look into JFS++ (Jump Point Search) one day, as an alternative to A*)

1647545636
Earnest!~earnest@user/earnestly
JPS* sorry

1647545703
cot!~kiedtl@kisslinux/kiedtl
I think that's the one that requires the map to be static?

1647545836
cot!~kiedtl@kisslinux/kiedtl
Ah, it requires a uniform cost for each node

1647545865
cot!~kiedtl@kisslinux/kiedtl
Won't work in my case unfortunately, each tile can have differing costs (based on lighting, dangerous terrain, etc)

1647546403
Earnest!~earnest@user/earnestly
cot: It's precomputed jump points which would need to be recomputed if the map changed, so there's a cost/benefit tradeoff based on how static or dynamic a map is (most are static, so it ends up being quite effective)

1647546408
ifreund!2940d10f8b@user/ifreund
neat visualization of JPS and others: https://qiao.github.io/PathFinding.js/visual/

1647546513
cot!~kiedtl@kisslinux/kiedtl
I'll have to take a closer look, though I doubt it'll work as my maps are pretty dynamic (doors, terrain that might be passable one moment and impassable otherwise, or might be passable for some mobs but not others)

1647546584
ifreund!2940d10f8b@user/ifreund
You're right that JPS won't work for you if I'm not terribly mistaken

1647546776
Earnest!~earnest@user/earnestly
The jump points don't change based on doors or lighting if it's simple on or off, open or closed.  But they would if the door location changes or the light moves, iirc

1647546831
Earnest!~earnest@user/earnestly
If a door is closed then the path simply uses another jump point, by dynamic maps from the gdc talk, it was more about walls that can be destroyed and such

1647547247
ifreund!2940d10f8b@user/ifreund
Earnest: that's not what we're talking about, we're saying that it doesn't work if you have some "mud" tiles that cost 1.2 units of movement, some water that costs 2.3, etc

1647547285
Earnest!~earnest@user/earnestly
I don't see why not

1647547348
ifreund!2940d10f8b@user/ifreund
Maybe I'm missing something, but the first line of the wikipedia page is "jump point search (JPS) is an optimization to the A* search algorithm for uniform-cost grids"

1647547349
Earnest!~earnest@user/earnestly
(I don't really see how that is related to any path finding algo, more about updating state as it travels about speed and such)

1647547383
ifreund!2940d10f8b@user/ifreund
path finding is about finding the cheapest path in terms of cost from point a to point b

1647547384
Earnest!~earnest@user/earnestly
I don't know of any path finding system which pre-calculates movement penalities if it might go through a 'zone', hmm

1647547394
ifreund!2940d10f8b@user/ifreund
every other algoritm does this

1647547401
ifreund!2940d10f8b@user/ifreund
a star, djirksta's, etc

1647547407
Earnest!~earnest@user/earnestly
Only that 'if standing on mud, set speed 0.8' style callbacks

1647547470
Earnest!~earnest@user/earnestly
ifreund: The GDC talk on it is very nice, when you have time for it

1647547509
ifreund!2940d10f8b@user/ifreund
I'm pretty sure I watched that a few years ago :D

1647547527
Earnest!~earnest@user/earnestly
Some real gems there, the palette swapping stuff is just beautiful

1647547551
ifreund!2940d10f8b@user/ifreund
again, "uniform cost" is in the video description :P

1647547579
ifreund!2940d10f8b@user/ifreund
The whole idea behind it is that you can "jump" over empty space since all the nodes in the graph are uniform cost

1647547590
ifreund!2940d10f8b@user/ifreund
as soon as that stops being true, you're back to A*

1647547619
Earnest!~earnest@user/earnestly
I see what you mean

1647547632
Earnest!~earnest@user/earnestly
ifreund: Seems many people combine the two

1647547673
ifreund!2940d10f8b@user/ifreund
ah, yeah now that seems like a smart thing to do if one has like 90% uniform cost stuff :D

1647547711
Earnest!~earnest@user/earnestly
A very data oriented approach, you might say ;o

1647547712
ifreund!2940d10f8b@user/ifreund
that sounds like fairly tricky code to write though

1647547882
Earnest!~earnest@user/earnestly
ifreund: Others seem to incorporate the non-uniformity as tweaks on jps so that it considers those nodes especially

1647547940
Earnest!~earnest@user/earnestly
E.g. uniform terrain but perhaps a 'road' element has less cost, so values for the road are precomputed

1647548092
Earnest!~earnest@user/earnestly
Seems like there is new research on this problem too, hmm.  I'll have to learn more

1647548427
frmdstryr!~jrm@172.58.206.180
Anyone know why this is throwing an error https://zig.godbolt.org/z/99sv7hqrM

1647548520
frmdstryr!~jrm@172.58.206.180
Ah, seems I have to use @as for each switch branch

1647548767
ifreund!2940d10f8b@user/ifreund
frmdstryr: to be clear, that's a bug/limitation of the stage1 compiler, you shouldn't need any @as() there long term :/

1647550102
haze!~haze@user/haze
how are you doing today ifreund 

1647550119
ifreund!2940d10f8b@user/ifreund
pretty good, pretty busy :)

1647552828
cot!~kiedtl@kisslinux/kiedtl
Hm, so const global structs (dunno about others) can't reference themselves (via a pointer)? Why is this?

1647552873
cot!~kiedtl@kisslinux/kiedtl
(i.e., 'pub const foo = Foo{ ... .bar = &foo }`

1647552918
cot!~kiedtl@kisslinux/kiedtl
I guess it's because codegen won't know where the &foo reference is until after the whole struct is processed?

1647553002
ifreund!2940d10f8b@user/ifreund
cot: it's a current limitation of the compiler, issue #131

1647553013
cot!~kiedtl@kisslinux/kiedtl
I see

1647553028
cot!~kiedtl@kisslinux/kiedtl
Well, I can work around it fairly easily, not a big deal

1647554451
cot!~kiedtl@kisslinux/kiedtl
Welp, just spent 30 min debugging something only to realize I was still running the binary from zig-cache/bin/

1647559470
haze!~haze@user/haze
lol

1647559581
novakane!ca74a093b3@user/novakane
I did the other way yesterday , change a lot of things, everything was working till I saw I was not running the bin in zig-cache lol

