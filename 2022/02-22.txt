1645528099
McKael!~mikael@82-64-95-224.subs.proxad.net
Hm, I'm trying to print a padded i64 timestamp and I get a weird formatting.

1645528100
McKael!~mikael@82-64-95-224.subs.proxad.net
std.debug.print("padded: {d:0>12}\n", .{std.time.timestamp()});

1645528102
McKael!~mikael@82-64-95-224.subs.proxad.net
padded: 0+1645526106

1645528120
McKael!~mikael@82-64-95-224.subs.proxad.net
It's even weirder when it's negative:

1645528125
McKael!~mikael@82-64-95-224.subs.proxad.net
std.debug.print("padded: {d:0>12}\n", .{0- std.time.timestamp()});

1645528128
McKael!~mikael@82-64-95-224.subs.proxad.net
padded: 0-1645526158

1645528156
plumeus!~plumeus@user/plumeus
you'd expect `+0<val>`?

1645528182
McKael!~mikael@82-64-95-224.subs.proxad.net
At least for the negative number

1645528195
McKael!~mikael@82-64-95-224.subs.proxad.net
but actually I'd like not to have the sign.

1645528243
McKael!~mikael@82-64-95-224.subs.proxad.net
(when it's positive, which should be the usual case here...)

1645528355
McKael!~mikael@82-64-95-224.subs.proxad.net
I need a 12-digit padded timestamp for a legacy app; I guess I could cast the timestamp to u64, but I was trying to find out if I could get rid of the plus sign with the standard print format...

1645528633
ifreund!2940d10f8b@user/ifreund
The idea is to ensure that the width is as consistent as possible between positive and negative signed integers

1645528657
ifreund!2940d10f8b@user/ifreund
casting to an unsigned type is the only way to get rid of the sign when using a fixed width afaik

1645528725
ifreund!2940d10f8b@user/ifreund
the interaction between printing the sign and padding doesn't seem terribly well thought out though

1645528751
ifreund!2940d10f8b@user/ifreund
pretty sure std.fmt is slated for a major rewrite before 1.0 anyways

1645528816
plumeus!~plumeus@user/plumeus
I do prefer the + at the beginning

1645528852
plumeus!~plumeus@user/plumeus
idk about the 0s

1645530821
McKael!~mikael@82-64-95-224.subs.proxad.net
ifreund: Yes; the positive sign is omitted when there's no width is specified though, so that doesn't seem very consistent

1645573150
andrewrk!~andrewrk@mail.ziglang.org
live coding stream in about 10 min, working on the self-hosted compiler: https://www.twitch.tv/andrewrok/

