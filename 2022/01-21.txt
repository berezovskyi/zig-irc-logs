1642733077
winter!~quassel@user/winter
hey all -- i'm trying to build Zig 0.9.0 on aarch64-darwin and am getting this error while linking zig0: https://paste.debian.net/hidden/f50fa695/

1642733116
winter!~quassel@user/winter
is this perhaps due to my lld version?

1642733156
winter!~quassel@user/winter
(just spitballing based on those symbol names)

1642733180
winter!~quassel@user/winter
> LLVM, Clang, LLD development libraries == 13.x, compiled with the same gcc or clang version above

1642733185
winter!~quassel@user/winter
ah,  that'll do it!

1642733204
winter!~quassel@user/winter
oh,  no,  i'm using 13

1642734009
winter!~quassel@user/winter
> LLVM, Clang, and Zig must all be compiled with the same C++ compiler.

1642734009
winter!~quassel@user/winter
this is true,  so i'm really not sure what the issue could be :/

1642734477
andrewrk!~andrewrk@mail.ziglang.org
winter, where did you get your llvm build from?

1642734503
winter!~quassel@user/winter
andrewrk: it's the one in Nixpkgs

1642734527
andrewrk!~andrewrk@mail.ziglang.org
I'm pretty sure they build with gcc 

1642734549
winter!~quassel@user/winter
not on darwin

1642734564
winter!~quassel@user/winter
on every other platform,  yes

1642734574
winter!~quassel@user/winter
but darwin's stdenv uses clang

1642734647
andrewrk!~andrewrk@mail.ziglang.org
nixpkgs has zig in it 

1642734654
andrewrk!~andrewrk@mail.ziglang.org
so I know it works

1642734668
andrewrk!~andrewrk@mail.ziglang.org
if you can't get that working then I suggest to build llvm,lld,clang from source

1642734674
andrewrk!~andrewrk@mail.ziglang.org
or just use the builds from ziglang.org/download

1642734695
winter!~quassel@user/winter
not on Darwin since we use an older SDK version on x86 -- I'm trying to get the package to have aarch64 support at least

1642734702
andrewrk!~andrewrk@mail.ziglang.org
ah I see

1642734723
winter!~quassel@user/winter
on aarch64 we use a new enough sdk version that the issue blocking x86 doesn't apply

1642734745
andrewrk!~andrewrk@mail.ziglang.org
ah so you're trying to do the official aarch64 darwin support in nixpkgs

1642734754
winter!~quassel@user/winter
correct yeah

1642734765
winter!~quassel@user/winter
zigstage1 links completely fine,  so i have no clue why 0 wouldn't be

1642734774
winter!~quassel@user/winter
with undefined c++ operator stuff at that

1642734777
winter!~quassel@user/winter
just seems weird

1642734835
andrewrk!~andrewrk@mail.ziglang.org
hmmm seems like those symbols should be provided by libc++

1642734856
andrewrk!~andrewrk@mail.ziglang.org
perhaps try to get a dump of the linker line?

1642734871
winter!~quassel@user/winter
yeah i'm trying to do that now

1642734879
winter!~quassel@user/winter
not really sure how to get cmake to do that

1642734890
winter!~quassel@user/winter
or if i'd need to pass it to the make invocation or what

1642734944
winter!~quassel@user/winter
ah that would be CMAKE_C_FLAGS and CMAKE_CXX_FLAGS

1642734984
winter!~quassel@user/winter
yeah there we go

1642734987
winter!~quassel@user/winter
let's see

1642735005
winter!~quassel@user/winter
oh,  guess not

1642735006
winter!~quassel@user/winter
huh

1642735123
winter!~quassel@user/winter
CMAKE_C{,XX}_FLAGS=--verbose seems to just make it print version info lol

1642735126
winter!~quassel@user/winter
hm

1642735205
andrewrk!~andrewrk@mail.ziglang.org
btw building zig from source on aarch64-macos works fine outside of nixos

1642735214
andrewrk!~andrewrk@mail.ziglang.org
the standard cmake invocation

1642735227
andrewrk!~andrewrk@mail.ziglang.org
I'll be back in a couple hours

1642735234
winter!~quassel@user/winter
o/

1642735246
winter!~quassel@user/winter
i wonder if sandbox is a contributing factor (i hope it isn't)

1642735260
andrewrk!~andrewrk@mail.ziglang.org
it's probably some dumb c++ thing

1642735297
winter!~quassel@user/winter
probably

1642736034
winter!~quassel@user/winter
andrewrk: https://paste.debian.net/hidden/94132669/

1642736034
winter!~quassel@user/winter
`-lc++` is right there :/

1642736041
winter!~quassel@user/winter
so...  no clue

1642741148
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Is there a builtin or nifty way to print a []u8 as hex? (ala `xxd` or similar)

1642741211
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
I don't need like, fancy decoding or annotation, just a bunch of hex so that it stops messing up my terminal

1642742993
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
da_lorax looks like std.fmt.fmtSliceHex("foo") inside the .{...} will do it

1642743000
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
example here in the unit tests: https://github.com/ziglang/zig/blob/master/lib/std/fmt.zig#L2409

1642743557
andrewrk!~andrewrk@mail.ziglang.org
winter, maybe check if some of the libs are static libs and some are dynamic. that's also known to mess things up

1642743611
andrewrk!~andrewrk@mail.ziglang.org
better to go all static. all dynamic is OK but not ideal because it slows down startup time

1642743677
andrewrk!~andrewrk@mail.ziglang.org
this linker line looks like static clang + static lld + dynamic LLVM

1642746075
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
what does `error: expected type '[]const u8', found '*[]u8'` mean? The line it doesn't like is: `var data_buf = try self.allocator.alloc(u8, data_len);`

1642746110
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
I have AFAICT the same thing in another file with less context, but it doesn't seem to happen there

1642746639
andrewrk!~andrewrk@mail.ziglang.org
da_lorax, you can make `data_buf` const unless you need to reassign the pointer later. are you sure that's the line? I don't see how that line could produce that error

1642746682
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
`*[]8` is a single-item pointer to a mutable slice of u8.  `[]const u8` is a slice of const u8.  There's no type annotation on `data_buf` so I'm not sure how a type mismatch could occur there

1642746685
andrewrk!~andrewrk@mail.ziglang.org
regardless, it looks like you're passing a double pointer where only 1 pointer was wanted

1642746750
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
yeah that's definitely the line, I'm gonna try to make it shorter so I can post the whole code

1642748119
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
da_lorax you're trying to format `data_buf` at some point, right?  `alloc` is returning a `[]T`, in your case `[]u8`.  When formatting arrays of u8, like `var ary = [_]u8{1, 2, 3}`, you would pass `.{&ary}` to `fmt`.  `&ary` is making a single-item pointer to an array with a comptime-known length, which can be coerced into a slice of const T.  `alloc` returned a slice already, so `&data_buf` is taking the address of 

1642748119
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
the slice, getting a pointer to a pointer, rather than coercing the child type of the slice from `u8` to `const u8`.

1642749910
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Ok I found the error, looks like the compiler is reporting the wrong line

1642750380
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
https://pastebin.com/CFW8VNS6 << Here's a repro, It's my bedtime, if y'all would like I can file a proper bug tomorrow, let me know.

1642750455
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
(this is on the current master downloaded from ziglang.org, on WSL ubuntu if it matters)

1642752229
andrewrk!~andrewrk@mail.ziglang.org
da_lorax, thanks for the reduction- if it's not already reported this would be a useful bug report

1642758073
beta22!~beta22@2409:8a5c:4c12:55d0:9036:3bcb:f8cb:6ce2
Hi, I read in this issue that zig can generate import library directly, which means the user don't need to provide the .lib files. It's a great feature, why it's removed now?

1642758075
beta22!~beta22@2409:8a5c:4c12:55d0:9036:3bcb:f8cb:6ce2
https://github.com/ziglang/zig/issues/2073

1642758123
beta22!~beta22@2409:8a5c:4c12:55d0:9036:3bcb:f8cb:6ce2
Does it because it only works on Windows?

1642789527
andrewrk!~andrewrk@mail.ziglang.org
beta22, it only worked for x86_64. It's not really been removed, it's replaced by a better mechanism. zig still automatically provides .lib files for all windows DLLs

1642795944
gawenr!~textual@2a01:e0a:21c:99a0:75b2:e834:b654:c89
Hello! is here a good place to ask newbie questions? Here's my current one: I @cImport some C definitions in a file foo.zig and would like to export them publicly to access the C definitions directly via @import("foo.zig"). Like merging the struct returned by @cImport with the one defined by foo.zig. Does that make sense, and is it possible?

1642796259
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can do "pub usingnamespace c; const c = @cImport(...);"

1642796267
ikskuh!~xq@2a0d:5940:6:163::ad7e
this will re-export everything from c

1642797076
gawenr!~textual@2a01:e0a:21c:99a0:75b2:e834:b654:c89
ikskuh thank you!

1642797446
nektro!~meg@75-164-170-164.ptld.qwest.net
pub usingnamespace @cImport... is also valid, just btw

1642798682
gawenr!~textual@2a01:e0a:21c:99a0:75b2:e834:b654:c89
Is it possible to iterate over exports of a @import()? I tried with std.meta.fields() expecting the module being a struct, but the compiler returns `std/meta.zig:446:13: error: Expected struct, union, error set or enum type, found 'type'`

1642798703
nektro!~meg@75-164-170-164.ptld.qwest.net
std.meta.declarations()

1642798795
nektro!~meg@75-164-170-164.ptld.qwest.net
also it seems you're passing it to the function wrong

1642799118
gawenr!~textual@2a01:e0a:21c:99a0:75b2:e834:b654:c89
nektro indeed, thanks. I finally did `inline for (std.meta.declarations(c)) |decl| { _ = decl; }` and stumbled upon a panic: `TODO: float_init_bigfloat c_longdoublethread` (src/stage1/ir.cpp, 0.9.0). I will be patient ðŸ˜‡

1642799165
gawenr!~textual@2a01:e0a:21c:99a0:75b2:e834:b654:c89
`c` being a `@cImport({ @cInclude("lua.h"); })`, if that's of any interest

1642799197
nektro!~meg@75-164-170-164.ptld.qwest.net
yes because many of the decls in the cImport output are going to be xx = @compileError

1642799214
nektro!~meg@75-164-170-164.ptld.qwest.net
macros can do a lot more than zig is able to represent

1642799235
nektro!~meg@75-164-170-164.ptld.qwest.net
referencing every decl from a cImport is a really bad idea

1642799289
nektro!~meg@75-164-170-164.ptld.qwest.net
only reference what you need

1642799309
gawenr!~textual@2a01:e0a:21c:99a0:75b2:e834:b654:c89
alright will do

1642799389
nektro!~meg@75-164-170-164.ptld.qwest.net
aside from that, std.testing.refAllDecls can do what your snippet did

1642799765
gawenr!~textual@2a01:e0a:21c:99a0:75b2:e834:b654:c89
oh neat

1642801469
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi, I have a question about structs.

1642801650
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Imagine I want to create a struct datastructure where the presence of some fields is dependent on something like the system architecture. So, for example. If WORDSIZE = 64, foo: u64 else foo: u32. I think this is possible, can I do this without defining the entire struct in an if-else?

1642801778
Arnavion!arnavion@user/arnavion
Call std.meta.Int() to create the type

1642801849
Arnavion!arnavion@user/arnavion
Or if it's just u64 vs u32, you don't even need that, just an if

1642802029
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
ItÂ´s more complex than that. Real example (a bit of text so I avoided this for now): https://man7.org/linux/man-pages/man5/utmp.5.html 

1642802035
Arnavion!arnavion@user/arnavion
https://zig.godbolt.org/z/j3h1ETbov

1642802065
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Some of the fields are conditional on the word size, I want to include the fields that actually exist

1642802075
Arnavion!arnavion@user/arnavion
Doesn't change what I said

1642802098
Arnavion!arnavion@user/arnavion
It's the same as what I wrote in the godbolt link, except you have two fields and thus two Foo's

1642802184
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Ah, I see. What if, for some reason there would be different fields depending on the architecture. LetÂ´s say, either one u32 or two bools?

1642802666
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
In this case a big if-else is possible where the two different structs are defined separately is possible, but this is both code duplication and wouldnÂ´t work in more complicated scenarios

1642803072
nektro!~meg@75-164-170-164.ptld.qwest.net
const Foo = switch (builtin.cpu.arch) struct {} else struct {}

1642803231
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Yes, this was the first solution that came to mind. However, if there are 10 fields, and the second struct had one field extra it would mean some code duplication. I was wondering if there is some inline option for those fields. A bit macro code-paste like but structured

1642805190
Franciman!~Franciman@mx1.fracta.dev
i really like zig tokenizer design

1642805192
Franciman!~Franciman@mx1.fracta.dev
nice

1642805419
Arnavion!arnavion@user/arnavion
<Daimanta> Ah, I see. What if, for some reason there would be different fields depending on the architecture. LetÂ´s say, either one u32 or two bools?   < You can build the struct with fields piece-by-piece using std.meta and std.builtin.TypeInfo

1642805455
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Sounds interesting, are there some examples?

1642805516
Arnavion!arnavion@user/arnavion
No idea. You can read meta.zig and builtin.zig. They're very straightforward; it's just an AST with type information

1642805589
Arnavion!arnavion@user/arnavion
Only other building block you'll need is @TypeInfo() to go from `type` to `TypeInfo` and @Type() to go back

1642806267
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Thanks, I think I understand things a bit better. Coreutils is coming along nicely :)

1642807748
andrewrk!~andrewrk@mail.ziglang.org
hot code swapping (part 2) live coding stream in about 30 min: https://twitch.tv/andrewrok/

1642807909
nektro!~meg@75-164-170-164.ptld.qwest.net
Arnavion: that works if they're just making a record but not if they want the struct to have methods

1642807946
nektro!~meg@75-164-170-164.ptld.qwest.net
@Type doesn't support creating a container type with declarations (which functions/methods are)

1642808087
Arnavion!arnavion@user/arnavion
I don't see where Daimanta said that they needed that

1642808213
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
What I want to do is the following: On compile time, I want to decide which members I add to a struct. I want to see how far Zig can go and which approaches I can take.

