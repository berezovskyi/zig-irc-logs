1645151412
daved!~daved@162.67.197.35.bc.googleusercontent.com
andrewrk: Thanks!

1645163777
motiejus!~motiejus@2001:470:69fc:105::38fb
noob question: is there a way to attach context to an error (e.g. "error message")?

1645163812
plumeus!~plumeus@user/plumeus
Should probably be done by documenting the error?

1645163830
plumeus!~plumeus@user/plumeus
Or you could do `return error.@"Some arbitrary text";`

1645163846
plumeus!~plumeus@user/plumeus
I think there was an open issue/proposal on this

1645163909
motiejus!~motiejus@2001:470:69fc:105::38fb
"Some arbitrary text" won't really work, as I want the callers to catch them. The guts of the library would return `error.InvalidVersion`, and then whoever uses the library could catch it and display a friendly message to the user ("supported versions: X, got: Y").

1645163959
plumeus!~plumeus@user/plumeus
Can't that be achieved with error handling?

1645164029
motiejus!~motiejus@2001:470:69fc:105::38fb
well, the only thing the caller knows is `error.InvalidVersion` (e.g. read an incompatible file), but there is no way to attach more information where the error was thrown

1645164065
meekaale!~meekaale@node.town
I believe this is the relevant issue: https://github.com/ziglang/zig/issues/2647

1645164085
plumeus!~plumeus@user/plumeus
ah yes, the one I was looking for

1645164088
motiejus!~motiejus@2001:470:69fc:105::38fb
thanks, exactly. Will keep an eye on it

1645164095
andrewrk!~andrewrk@mail.ziglang.org
it's unlikely to be accepted fwiw

1645164134
motiejus!~motiejus@2001:470:69fc:105::38fb
we want to hear more :)

1645164199
motiejus!~motiejus@2001:470:69fc:105::38fb
you may hear crowd gathering :P

1645164456
andrewrk!~andrewrk@mail.ziglang.org
never mind what I said just now; I took a deeper look at CurtisFenner's last iteration on the proposal and I think it's worth considering

1645164719
meekaale!~meekaale@node.town
right now there seem to be two main patterns: (1) writing the context into a pointer given by the caller, as in "fn foo(..., errorContext: *C) E!X"; or (2) using your own result type instead of Zig errors, as in "fn foo(...) C(X)"

1645164857
plumeus!~plumeus@user/plumeus
I love it when old proposals get the spotlight again

1645164973
meekaale!~meekaale@node.town
[hi btw, I haven't been on IRC since like 2006, just got into Zig recently and I'm so delighted with it]

1645165041
ifreund!2940d10f8b@user/ifreund
welcome back to IRC!

1645165076
plumeus!~plumeus@user/plumeus
Zig is the only IRC channel I've joined

1645165099
meekaale!~meekaale@node.town
I'm working on a little Lisp implementation in Zig with the intention of running in WebAssembly.  I wrote a first prototype in C because I'm more familiar with that, but now the Zig port is almost equivalent and Zig features are making the code nicer all over the place!

1645165180
meekaale!~meekaale@node.town
especially nice is using compile-time type introspection to register builtin Zig functions as Lisp functions, which I was doing with obscure macros in C

1645165233
meekaale!~meekaale@node.town
the test blocks encouraged me to use test-driven development for the whole thing so now I have a test suite almost by accident

1645165520
meekaale!~meekaale@node.town
one thing I've been wondering is if it's possible to reference test blocks as functions, like say I want to have a button in my program that runs the program's own tests

1645165574
meekaale!~meekaale@node.town
or just write my own test runner in some way, e.g. I want to run tests in the browser environment

1645165744
plumeus!~plumeus@user/plumeus
Make sure to spam `std.debug.assert` too.

1645165748
andrewrk!~andrewrk@mail.ziglang.org
welcome meekaale :)

1645165834
andrewrk!~andrewrk@mail.ziglang.org
here's the issue for a custom test runner: https://github.com/ziglang/zig/issues/6621

1645165837
andrewrk!~andrewrk@mail.ziglang.org
it'll happen eventually

1645178327
meekaale!~meekaale@node.town
oh... I'm realizing I probably ought to change my Lisp interpreter to store its values in a "data-oriented design" way... I've been using a traditional kind of garbage collected heap full of structs and pointers, but I think a data-oriented style could be really good

1645213740
andrewrk!~andrewrk@mail.ziglang.org
ifreund, if you have spare time would you mind reviewing the io_uring PRs we have open? I see a couple of them

