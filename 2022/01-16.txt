1642299222
drewr!~drew@user/drewr
does std.mem.split require only string literals, or can I coerce a [*:0]u8 to a []const u8?

1642299251
drewr!~drew@user/drewr
I want to split a string from a command line arg

1642299307
drewr!~drew@user/drewr
to be more accurate, I'm splitting a path returned from libcurl

1642300487
dbe!~dbe@c188-149-52-217.bredband.tele2.se
I was experimenting with epoll in zig, and I noticed a few things; 1. std.os.linux.epoll_create1 has a return type of usize, which is wrong, and makes "if (-1 == ret)" blocks be optimized away by the compiler. 2. There is another one at sys.os.epoll_create1 (even though it's linux specific) with a better return value, but e.g. the constants/flags like EPOLL_CLOEXEC are not re-exported by os.zig

1642300488
dbe!~dbe@c188-149-52-217.bredband.tele2.se
(missing a "pub const EPOLL = system.EPOLL;"). What is the guidelines here? What am I supposed to use?

1642300690
shachaf!~shachaf@user/shachaf
dbe: Looking at the second epoll_create1, it seems like you're supposed to getErrno to get an error code from a usize return value.

1642300695
shachaf!~shachaf@user/shachaf
to use getErrno

1642300876
nektro!~nektro@75-164-170-164.ptld.qwest.net
drewr: std.mem.span can perform the coercion

1642302502
drewr!~drew@user/drewr
nektro: thanks, I got it to work... @as([]const u8, std.mem.span(path))

1642302673
daurn!~daurnimat@vultr.daurnimator.com
drewr: you shouldn't need the `@as`

1642302685
nektro!~nektro@75-164-170-164.ptld.qwest.net
nice :)  the `@as` there shouldnt be necessary afaik

1642302702
daurn!~daurnimat@vultr.daurnimator.com
drewr: I mean I guess if you really do want a `[]const u8` you do; but in general just let that happen automatically as you pass it elsewhere

1642303264
drewr!~drew@user/drewr
but span(path) just returns the same type right?

1642303390
nektro!~nektro@75-164-170-164.ptld.qwest.net
no it take `[*:0]const u8` and returns []const u8

1642303520
drewr!~drew@user/drewr
ah, ok, it does work, I thought I had tried it already

1642303525
drewr!~drew@user/drewr
thank you

1642303618
drewr!~drew@user/drewr
I misread the tests under Span

1642307704
nektro!~nektro@75-164-170-164.ptld.qwest.net
shell.nix is a really cool concept

1642307722
nektro!~nektro@75-164-170-164.ptld.qwest.net
wrong channel oops

1642309696
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
nektro +1 the only two channels I auto join are zig and nixos

1642332205
Franciman!~Franciman@mx1.fracta.dev
hi everyone

1642332214
Franciman!~Franciman@mx1.fracta.dev
is there any library for writing a terminal UI in zig?

1642332219
Franciman!~Franciman@mx1.fracta.dev
that is interesting

1642334834
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
Quick question, what is the stance of not using standardTargetOptions and standardReleaseOptions within a build.zig

1642334897
ifreund!2940d10f8b@user/ifreund
Snetry: perhaps if you are working on some werid embedded project where they dont make sens

1642334915
ifreund!2940d10f8b@user/ifreund
99% of projects should use those though

1642334937
Franciman!~Franciman@mx1.fracta.dev
it's to give you the extra power you may need

1642334945
Franciman!~Franciman@mx1.fracta.dev
extra flexibility

1642334955
Franciman!~Franciman@mx1.fracta.dev
when you write your window manager for your washing machine

1642334973
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
ifreund: sure, but in genral its not something thats enforced so a project may very well choose to implement its own logic for that

1642334975
Franciman!~Franciman@mx1.fracta.dev
WM on WM is a good name, yes

1642334992
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
so is that something that can truly be relied on, like the advanced options

1642335099
ifreund!2940d10f8b@user/ifreund
If you're talking about this from the prespective of e.g. packaging zig software for distribution, yes I think any sofware that is intended to be package needs to provide -Dtarget whatnot

1642335129
ifreund!2940d10f8b@user/ifreund
failing to do so would be a bug with the project in question IMO

1642335363
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
I disagree

1642335396
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
I consider them as optional as they are not enforced by the build system

1642336113
Earnestly!~earnest@user/earnestly
They are not optional if packaging requires it, such as changing prefixes and other paths.  Whether to use system libs or not, etc.

1642336127
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
thats not part of it

1642336146
Earnestly!~earnest@user/earnestly
Especially if they have policies on which build flags to use

1642336150
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
all the --prefix* options are part of the General Options

1642336164
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
these are provided by build system in general

1642336170
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
you cannot remove them without editing the standard library

1642336186
Earnestly!~earnest@user/earnestly
They don't provide all of the gnu standard directories, that might change though

1642336219
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
again, all the prefix stuff is included by default and an external project cannot change those

1642336237
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
what i am talking about are the -Dtarget, -Dcpu and all the -Drelease-* options, which are project specific

1642336265
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
and provided by std.build.Builder.standardTargetOptions and std.build.Builder.standardReleaseOptions

1642342021
bw!sid2730@user/betawaffle
does anyone have an up to date (for 0.9.0) example x86 os in zig? i see there are a bunch of old ones. i'm looking for the right way to setup build.zig

1642342145
motiejus!~motiejus@2001:470:69fc:105::38fb
I recall reading somewhere that perfect hash is somewhere in zig stdlib; is that true? I can't find it through grepping. If not, it's OK, just want to make sure before I go and (re-)implement it

1642342371
ifreund!2940d10f8b@user/ifreund
motiejus: don't think so currently

1642342424
ifreund!2940d10f8b@user/ifreund
motiejus: you're probably thinking of https://andrewkelley.me/post/string-matching-comptime-perfect-hashing-zig.html

1642344105
motiejus!~motiejus@2001:470:69fc:105::38fb
Yes, I recall that, and something about stdlib'ing afterwards. Perhaps I misremembered it

1642344107
motiejus!~motiejus@2001:470:69fc:105::38fb
Thanks

1642357286
andrewrk!~andrewrk@mail.ziglang.org
motiejus, std.ComptimeStringMap

1642359495
ifreund!2940d10f8b@user/ifreund
it doesn't do perfect hashing though, at least not how I understand perfect hashing

1642359523
motiejus!~motiejus@2001:470:69fc:105::38fb
yeah. I found it while searching

1642359535
motiejus!~motiejus@2001:470:69fc:105::38fb
I saw it (by comptime params), but it didn't seem to do perfect hashing

1642360334
andrewrk!~andrewrk@mail.ziglang.org
the API is solid, we use it in stage2. probably the implementation can be improved with the more robust comptime implementation

1642361085
motiejus!~motiejus@2001:470:69fc:105::38fb
context: inspired by your glibc_tool, I am trying to compress our user database. It needs to look up by username. I want to store the user structs in an array. Minimal perfect hashing of the username could provide me an index to the lookup array, saving space and time.

1642361128
motiejus!~motiejus@2001:470:69fc:105::38fb
but seems like there's quite a bit to learn in the perfect hashing space

1642361289
andrewrk!~andrewrk@mail.ziglang.org
ah neat

1642361305
andrewrk!~andrewrk@mail.ziglang.org
compression is such a fascinating topic

1642361340
andrewrk!~andrewrk@mail.ziglang.org
I remember trying to write a compressor when I was a young programmer and utterly failing

1642361413
motiejus!~motiejus@2001:470:69fc:105::38fb
yeah it is. Your talk in homemede seattle triggered me to look beyond xz and zstd

1642361423
motiejus!~motiejus@2001:470:69fc:105::38fb
There are some ready-to-use libraries available for perfect hashing; each key costs some bits. And now I need to estimate how much storage a trie would cost instead :)

1642372801
drewr!~drew@user/drewr
still struggling a bit with translating libcurl types, anyone know how to specify one to pass to this function? https://github.com/drewr/zigutils/blob/ca9ca880fe6f03da0957cc91fef90e3b01dfab74/src/main.zig#L33

1642372836
kotto!~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566
Hello, I'm trying to use a 'packed struct' in a function that requires '[]const u8'. what is the best way to do that? Here is the code https://godbolt.org/z/5szcP4eGn

1642373155
nektro!~nektro@75-164-170-164.ptld.qwest.net
drewr use print instead of write, write can only accept bytes

1642373165
nektro!~nektro@75-164-170-164.ptld.qwest.net
when printing the header

1642373180
nektro!~nektro@75-164-170-164.ptld.qwest.net
sorry that was for kotto

1642373233
nektro!~nektro@75-164-170-164.ptld.qwest.net
drewr its telling you to make `h` optional

1642373358
drewr!~drew@user/drewr
I had tried that but got ./src/main.zig:34:39: error: type '.cimport:3:14.struct_Curl_URL' cannot be optional, however that was before I made it a pointer; I'm guessing only pointers can be optional

1642373370
drewr!~drew@user/drewr
thanks nektro, that worked

1642373531
kotto!~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566
nektro: by print you mean std.fmt.bufPrint?

1642373554
nektro!~nektro@75-164-170-164.ptld.qwest.net
sock.writer().print

1642374086
nektro!~nektro@75-164-170-164.ptld.qwest.net
also you're not setting `.magic`

1642374100
nektro!~nektro@75-164-170-164.ptld.qwest.net
oh you have a default

1642375740
kotto!~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566
I tryed using 'sock.witer().print', but it didnt' work. I saw that it uses std.fmt.format, so I tried to print to stdout and it prints 'I3IpcHeader{ .magic = [6]u8@2040a2, .len = 11, .type = 0 }' 

1642375915
kotto!~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566
Am I missing something? I tested doing '…print("{s}", .{"i3-ipc" ++ [_]u8{ 11, 0, 0, 0 } ++ [_]u8{ 0, 0, 0, 0 } ++ msg});' to make sure I read the docs corrects and it works

