1647921836
motiejus!~motiejus@2001:470:69fc:105::38fb
looks like LGPL can be released as GPL, but not the other way around. I'd like to use  ifreund 's https://github.com/riverwm/river/blob/master/common/flags.zig on an LGPLd program; any alternatives for flag parsing? (or perhaps if Isaac sees this, relicense the file? :) )

1647922375
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
motiejus That's for CLI flags, right?  I know of clap: https://github.com/Hejsil/zig-clap but haven't used it before

1647922465
motiejus!~motiejus@2001:470:69fc:105::38fb
correct. The 100 line file does what I need, zig-clap is higher level, and makes it less obvious how to implement, say, subcommands (which I am doing now)

1647923626
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Gotcha, yeah I definitely see the appeal of the 90 LoC library

1647936260
ifreund!2940d10f8b@user/ifreund
motiejus: I can BSD0 that file in a minute :)

1647936279
ifreund!2940d10f8b@user/ifreund
I'll just stick it in a gist

1647936366
motiejus!~motiejus@2001:470:69fc:105::38fb
Thanks, great! Will embed.

1647936431
motiejus!~motiejus@2001:470:69fc:105::38fb
Once I realized that it does what I need, tried to reimplement it "without looking", and it turned to be almost exactly the same.. So thanks for relicensing. :)

1647941970
ifreund!2940d10f8b@user/ifreund
motiejus: https://gist.github.com/ifreund/41e91a3e4aeb0a3da57258c14e2a8cea

1647942254
ifreund!2940d10f8b@user/ifreund
and no problem!

1647946680
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
Is there any way to build an unsafe version of a program? No possible panics except explicitly added ones?

1647946856
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
For example the program `fn main() void { var num: i32 = 6; num = num * num }` will generate debugging and panic paths for an integer overflow.

1647946961
Earnestly!~earnest@user/earnestly
See release modes, although it may not cover everything you're asking

1647947100
ifreund!2940d10f8b@user/ifreund
noodlez: yeah, it sounds like you're looking for the release fast and release small bulid modes

1647947128
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
Yeah so I tried release-fast and release-small and both emitted panic artifacts. I'll show you the generated assembly in a bit gimme a moment

1647947219
noodlez!nathaniel@2600:3c01::f03c:92ff:fe58:e8ae
Oh it isn't. Never mind. My first tests it was, but it might've been some old object files laying around that I was using. My bad never mind.

1647947236
ifreund!2940d10f8b@user/ifreund
all good :)

1647947352
novakane!ca74a093b3@user/novakane
ifreund: ah nice, the flags file like this, since I use it in all my program :D

1647955811
bgiannan!~bgiannan@2a01:4f8:141:1272::2
is there some trick i'm missing to format zig file on save in VSCode, everything seems ok (zls working, Format on save ticked) but nothing's  happening

1647955909
bgiannan!~bgiannan@2a01:4f8:141:1272::2
nevermind it's working

1647956045
bgiannan!~bgiannan@2a01:4f8:141:1272::2
actually it seems it's not working on large files

1647958163
pkap!~pkap@193.32.127.225
Is there something like strtol?

1647958462
dutchie!~dutchie@user/dutchie
std.fmt.parseInt

1647958517
pkap!~pkap@193.32.127.225
thanks

1647973935
companion_cube!~simon@user/companion-cube
well shit, after a system upgrade, I'm now using ncdu 2.x, which is in zig :D

1647974018
ifreund!2940d10f8b@user/ifreund
what distro?

1647974073
ifreund!2940d10f8b@user/ifreund
repology says probably arch or gentoo

1647974123
companion_cube!~simon@user/companion-cube
arch

1647974187
ifreund!2940d10f8b@user/ifreund
nice, the PKGBUILD isn't broken :)

1647974217
Earnestly!~earnest@user/earnestly
They do have to patch it to include exe.pie = true; which is a little eeh.

1647974219
companion_cube!~simon@user/companion-cube
it's actually packaged in the community repo

1647974222
companion_cube!~simon@user/companion-cube
didn't have to compile it!

1647974230
ifreund!2940d10f8b@user/ifreund
looks like it was broken though https://github.com/archlinux/svntogit-community/commit/0f8656b104e99c764cd48add8f5909a1830cbc97

1647974257
ifreund!2940d10f8b@user/ifreund
I should really write that "packaging zig software for distro maintainers" guide

1647974262
Earnestly!~earnest@user/earnestly
What do you mean by 'broken'?

1647974283
ifreund!2940d10f8b@user/ifreund
Earnestly: built for the native CPU arch of the build machine I'm pretty sure

1647974322
Earnestly!~earnest@user/earnestly
Ah that's what you mean, the addition of -Dcpu=baseline I assume addresses that.  Arch would normally target march=x86_64 via CFLAGS

1647974328
ifreund!2940d10f8b@user/ifreund
yeah

1647974386
Earnestly!~earnest@user/earnestly
Does zig have an answer for `make install'?

1647974439
ifreund!2940d10f8b@user/ifreund
setting DESTDIR and using --prefix /usr is the intended way to do this

1647974452
ifreund!2940d10f8b@user/ifreund
zig doesn't support splitting build and install into separate steps though

1647974475
ifreund!2940d10f8b@user/ifreund
it only has a single build-and-install step

1647974505
ifreund!2940d10f8b@user/ifreund
the idea being to reduce bugs caused by testing software in a different configuration than it would have when installed

1647974510
Earnestly!~earnest@user/earnestly
At least it has staged installation with DESTDIR.  I always felt the gnu install dirs were generally quite nice

1647974564
Earnestly!~earnest@user/earnestly
It doesn't really matter from a packaging pov if the build and install are separate per-se as the result in the staged location can be fiddled with if that's necessary

1647974594
Earnestly!~earnest@user/earnestly
Although many packaging systems do sort of expect each step to be discrete

1647974620
Earnestly!~earnest@user/earnestly
(Typically because the installation is done via fakeroot)

1647974641
ifreund!2940d10f8b@user/ifreund
the common mistake I see is people running `zig build` in the build() step and `zig build install` in the install() step. `zig build` is the same as `zig build install` as install is the default step

1647974663
ifreund!2940d10f8b@user/ifreund
even worse is when they don't pass the same arguments in the install() step

1647974708
Earnestly!~earnest@user/earnestly
I must admit I don't like this, policy over mechanism, but if this forced (e.g. python setup.py has/had --no-build) then I suppose it'll have to be documented

1647974757
ifreund!2940d10f8b@user/ifreund
I'm definitely aware that most packaging systems expect the steps to be discrete, but I don't really see any technical reason for them to be separate aside from legacy

1647974769
Earnestly!~earnest@user/earnestly
I listed one, fakeroot

1647974788
ifreund!2940d10f8b@user/ifreund
ah, yep I can definitely read

1647974805
Earnestly!~earnest@user/earnestly
That's really why package() exists at all

1647974839
ifreund!2940d10f8b@user/ifreund
even in that case though I feel like a single cp command is simple enough

1647974856
Earnestly!~earnest@user/earnestly
A single cp is simple, it's not so simple when the build is many files

1647974861
ifreund!2940d10f8b@user/ifreund
this is what I did for void by the way: https://github.com/void-linux/void-packages/blob/master/common/build-style/zig-build.sh

1647974875
Earnestly!~earnest@user/earnestly
Hmm

1647974893
Earnestly!~earnest@user/earnestly
This assumes GNU cp?

1647974910
Earnestly!~earnest@user/earnestly
In which case, could use -a

1647974927
Earnestly!~earnest@user/earnestly
(Unless masks aren't wanted I suppose)

1647974934
ifreund!2940d10f8b@user/ifreund
I'm not a cp expert, but void does use gnu coreutils

1647974974
Earnestly!~earnest@user/earnestly
posix cp has -R, and before posix 2017, you had to use -L or -H with it to use -R (which FreeBSD still needs because it's on POSIX 2004)...

1647975021
Earnestly!~earnest@user/earnestly
It's surprisingly convoluted compared to the rest of the utils

1647975059
Earnestly!~earnest@user/earnestly
ifreund: So if you want, you could just use -R (it means the same thing as -r with gnu)

1647975085
ifreund!2940d10f8b@user/ifreund
I'm not really inclined to change it unless there's a bug with what's currently there

1647975192
Earnestly!~earnest@user/earnestly
Not that I can see, apart from what I assume is intentional wordsplitting of configure_args.  The /* (*) is not really necessary as cp -r already works this way and might invoke ARG_MAX if there's enough files

1647975256
Earnestly!~earnest@user/earnestly
ifreund: I.e. cp -R zig-out/. "$DESTDIR"

1647975306
Earnestly!~earnest@user/earnestly
But these are small nits

1647975381
ifreund!2940d10f8b@user/ifreund
yeah configure_args is meant to be split

1647975446
ifreund!2940d10f8b@user/ifreund
I assume the only difference between -R and -r is that -R is posix?

1647975466
Earnestly!~earnest@user/earnestly
Yeah

1647975581
Earnestly!~earnest@user/earnestly
ifreund: Slightly sneaky use of path_resolution(7): https://0x0.st/oNxU.txt with /. instead of just /

1647975663
Earnestly!~earnest@user/earnestly
ACTION wishes pax(1) was more available because it makes tree replication trivial

1647975756
ifreund!2940d10f8b@user/ifreund
Earnestly: that's pretty funky, thanks

1647984592
noonien!~noonien@user/noonien
hello folks!

1647985918
noonien!~noonien@user/noonien
i'm trying to use `zig cc` to link a .so generated with rust, and i'm getting the following errors: http://ix.io/3TcR

1647985939
noonien!~noonien@user/noonien
my zig version is 0.10.0-dev.1462+b48d8cce5

1647986653
demize!kyrias@archlinux/developer/demize
Seems zig requires the linker option arguments to be separated from the option, which ld doesn't.

