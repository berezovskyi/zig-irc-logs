1641775241
pkap!~pkap@193.32.127.225
Can I somehow compare structs with the testing module? Or do I need to compare every field by itself? And same for arrays?

1641775326
pkap!~pkap@193.32.127.225
Currently I std.debug.print structs and compare manually...

1641775471
pkap!~pkap@193.32.127.225
But then with std.debug.print for larger stuff, some things are hidden in {..} and I cannot check the results.

1641775595
ifreund!2940d10f8b@user/ifreund
pkap: you might be interested in std.meta.eql()

1641775611
ifreund!2940d10f8b@user/ifreund
for arrays, std.testing.expectEqualSlices() is nice

1641775644
pkap!~pkap@193.32.127.225
Ah nice. Thanks ifreund!

1641775651
ifreund!2940d10f8b@user/ifreund
pkap: std.testing.expectEqual() should recurse down to struct fields just like std.meta.eql() does too

1641777078
pkap!~pkap@193.32.127.225
Can I force std.debug.print() to print out everything and hide stuff with {...}. Unfortunately I have a case where these functions cannot work because some values are undefined.

1641777116
pkap!~pkap@193.32.127.225
s/hide stuff/not hide stuff/

1641783415
squeek502!~squeek502@user/squeek502
pkap, it's planned to make max print depth configurable: https://github.com/ziglang/zig/issues/2370

1641783602
pkap!~pkap@193.32.127.225
Ah nice

1641847031
Seng!~nick@hurtig.ninja
are fields of a struct constants if accessed through Self on a struct function, if the Self argument is not a pointer to Self?

1641847063
Franciman!~Franciman@mx1.fracta.dev
yep

1641847152
Seng!~nick@hurtig.ninja
Cool. Just making sure I understand what's happening :) Changing `self: Self` to `self: *Self` definitely made the compiler happy. Just wanted to ensure I also understood it correctly

1641847991
Arnavion!arnavion@user/arnavion
That isn't unique to `self` to be clear. It applies to struct parameters in general, eg   const S = struct { foo: i32 }; fn foo(s: S) void { s.foo = 5; }   will also not compile

1641848546
Seng!~nick@hurtig.ninja
yeah, as far as I have understood the self thing is just syntactic sugar for calling that function with the instance of the struct as the first parameter. So equal behviour is expected :)

1641850578
Seng!~nick@hurtig.ninja
What's the philosophy on what's to put in the stdlib and what should come from packages?

1641850605
ifreund!2940d10f8b@user/ifreund
Seng: it's not been full decided, the std is not a priority yet.

1641850618
ifreund!2940d10f8b@user/ifreund
not until the self hosted compiler and language have stablized

1641850775
Seng!~nick@hurtig.ninja
Is this simply a matter of priorities or because it, for example, takes too much effort rewriting a larger stdlib?

1641850828
ifreund!2940d10f8b@user/ifreund
just a matter of priorites

1641852194
Seng!~nick@hurtig.ninja
Can I declare a slice and not an array directly to a variable?

1641852373
Seng!~nick@hurtig.ninja
The most clean I can find is to declare a variable with a dereferenced string, but I'd still have to slice it when passing it to a function taking a []u8 parameter

1641852864
Franciman!~Franciman@mx1.fracta.dev
Seng: https://godbolt.org/z/va5rGb9WG

1641852868
Franciman!~Franciman@mx1.fracta.dev
basically

1641852881
Franciman!~Franciman@mx1.fracta.dev
const x: []const u8 = &[_]u8 { 1 , 2, 3 }

1641852924
Seng!~nick@hurtig.ninja
can I get rid of the const? :)

1641852930
Franciman!~Franciman@mx1.fracta.dev
 this i don't knowT!

1641852942
Franciman!~Franciman@mx1.fracta.dev
i think not for a simple reason

1641852948
Franciman!~Franciman@mx1.fracta.dev
[_]u8 {1, 2, 3}

1641852957
Franciman!~Franciman@mx1.fracta.dev
is a literal, and is the array to which you refer

1641852958
Franciman!~Franciman@mx1.fracta.dev
ok?

1641852965
Franciman!~Franciman@mx1.fracta.dev
so it basically is like a string literal

1641852981
Franciman!~Franciman@mx1.fracta.dev
you can't modify it, because of its particular status. I think it gets saved in the .data fragment of the program

1641852988
Franciman!~Franciman@mx1.fracta.dev
if you do

1641852996
Franciman!~Franciman@mx1.fracta.dev
var arr = [_] u8 {1 , 2 , 3 }

1641853000
Franciman!~Franciman@mx1.fracta.dev
it gets saved on the stack, instead

1641853014
Franciman!~Franciman@mx1.fracta.dev
i mean, the litearl is always in the data fragment of the program

1641853018
Franciman!~Franciman@mx1.fracta.dev
but then you copy it on the stack

1641853021
Franciman!~Franciman@mx1.fracta.dev
and thus you can update it

1641853030
Franciman!~Franciman@mx1.fracta.dev
but please, really. Let us wait for the knowledgeables

1641853042
Seng!~nick@hurtig.ninja
So it's const/var that determines whether it goes to stack or .data?

1641853052
Franciman!~Franciman@mx1.fracta.dev
no, 

1641853058
Franciman!~Franciman@mx1.fracta.dev
literals are in the .data

1641853060
Franciman!~Franciman@mx1.fracta.dev
ok?

1641853062
Franciman!~Franciman@mx1.fracta.dev
if you do

1641853068
Franciman!~Franciman@mx1.fracta.dev
const x = [_]u8 {1, 2, 3}

1641853079
Franciman!~Franciman@mx1.fracta.dev
you copy it on the stack (potentially, up to zig optimisations)

1641853082
Franciman!~Franciman@mx1.fracta.dev
the problem is that

1641853085
Franciman!~Franciman@mx1.fracta.dev
you are doing:

1641853106
Franciman!~Franciman@mx1.fracta.dev
const: []const u8 = & <PLEASE SEE THIS &> [_]u8 {1, 2, 3 }

1641853109
Franciman!~Franciman@mx1.fracta.dev
what it is doing is:

1641853118
Franciman!~Franciman@mx1.fracta.dev
take the slice of the literal

1641853123
Franciman!~Franciman@mx1.fracta.dev
and put it into arr

1641853138
Franciman!~Franciman@mx1.fracta.dev
ops, it's: const arr: []const u8 = ....

1641853157
Franciman!~Franciman@mx1.fracta.dev
so you take a pointer to a literal

1641853162
Franciman!~Franciman@mx1.fracta.dev
and put it in the variable

1641853166
Franciman!~Franciman@mx1.fracta.dev
the pointer is saved on the stack

1641853168
Franciman!~Franciman@mx1.fracta.dev
you can also do

1641853194
Franciman!~Franciman@mx1.fracta.dev
https://godbolt.org/z/PbWGo13oj

1641853198
Franciman!~Franciman@mx1.fracta.dev
^- note i used var

1641853201
Franciman!~Franciman@mx1.fracta.dev
it doesn't change

1641853211
Franciman!~Franciman@mx1.fracta.dev
you can't get rid of the []const u8

1641853225
Franciman!~Franciman@mx1.fracta.dev
it's because you are taking the address of a literal, which is a constant

1641853227
Franciman!~Franciman@mx1.fracta.dev
value

1641853246
Franciman!~Franciman@mx1.fracta.dev
it's the literal that is always saved in the .data

1641853413
freshcoffee!~fresh@user/freshcoffee
Seng: which "const" do you want to get rid of? there's two of 'em :)

1641853504
Franciman!~Franciman@mx1.fracta.dev
the one you cna't get rid :D

1641853532
Seng!~nick@hurtig.ninja
I want this behavior; https://godbolt.org/z/h8Garb56r

1641853545
Seng!~nick@hurtig.ninja
just with line 5 and 6 being a single line.

1641853554
Seng!~nick@hurtig.ninja
That's all :) 

1641853561
Seng!~nick@hurtig.ninja
I'm lazy <3

1641853609
ifreund!2940d10f8b@user/ifreund
just use an array and pass &foo instead of foo when you are wanting to have a slice instead

1641853671
ifreund!2940d10f8b@user/ifreund
temporaries such as the array in `const x: []const u8 = &[3]u8{1, 2, 3};` are always const

1641853698
Franciman!~Franciman@mx1.fracta.dev
ifreund: are they saved in the .data segment?

1641853767
freshcoffee!~fresh@user/freshcoffee
I mean if all you want to do is simplify that example, then `var slice: []const u8 = "123";`

1641853784
ifreund!2940d10f8b@user/ifreund
that's an implementation detail of the compiler, not part of the language spec

1641853787
Franciman!~Franciman@mx1.fracta.dev
freshcoffee: iiuc they want to modify the string

1641853787
ifreund!2940d10f8b@user/ifreund
but yeah probably

1641853795
Franciman!~Franciman@mx1.fracta.dev
wait wwwwait is there a spec?

1641853819
freshcoffee!~fresh@user/freshcoffee
oh sorry I missed line 7. yeah you want to modify.

1641853983
Seng!~nick@hurtig.ninja
freshcoffee, he got awfully quiet when you asked to the spec :)

1641854012
Seng!~nick@hurtig.ninja
freshcoffee, yeah, the modify part is what's my goal. 

1641854059
Seng!~nick@hurtig.ninja
Actually I would just like to run my tests with the test input, being []u8, inlined in the call to the function not having to do acrobatics before passing it in.

1641854075
Franciman!~Franciman@mx1.fracta.dev
i have been thinking about having another implementation of zig

1641854076
Franciman!~Franciman@mx1.fracta.dev
for fun

1641854089
Franciman!~Franciman@mx1.fracta.dev
a spec would be nice

1641854095
freshcoffee!~fresh@user/freshcoffee
i think a while ago there was some discussion about one-liner to mean "copy" and "slice" for mutability of the data and I can't remember how it got resolved but I'm guessing that it hides too much of what is being done

1641854164
ifreund!2940d10f8b@user/ifreund
Seng: "awfully quiet" == not replying for 3 whole minutes? I don't spend *every* second of my time in my IRC client...

1641854176
freshcoffee!~fresh@user/freshcoffee
what! why not!

1641854185
Seng!~nick@hurtig.ninja
I do nothing but stare at my chat window ._.

1641854199
Franciman!~Franciman@mx1.fracta.dev
ifreund: very bad ahahahaha xd

1641854207
ifreund!2940d10f8b@user/ifreund
Franciman: there is no complete spec yet, there will be one well before the 1.0 release

1641854209
Franciman!~Franciman@mx1.fracta.dev
or very good tbf

1641854220
Franciman!~Franciman@mx1.fracta.dev
nice

1641854262
ifreund!2940d10f8b@user/ifreund
until there is a fairly stable language spec, I'd recommend contributing to the stage2 zig compiler rather than starting an alternative implementaiton

1641854283
ifreund!2940d10f8b@user/ifreund
even if you intend to start your own later, you'll learn a lot that will help you achieve that goal

1641854291
Seng!~nick@hurtig.ninja
ifreund, just to be clear, I was joking about being "awfully quiet". I have no expectation to anyone being there for me "right now" (or ever for that matter).

1641854296
Franciman!~Franciman@mx1.fracta.dev
oh ofc, it was just an idea for the future, not for now :D

1641854302
Franciman!~Franciman@mx1.fracta.dev
now it's a bit ludicrous

1641854302
ifreund!2940d10f8b@user/ifreund
Seng: no worries :P

1641854316
Franciman!~Franciman@mx1.fracta.dev
i'd love to help

1641854318
Franciman!~Franciman@mx1.fracta.dev
really a lot

1641854330
Franciman!~Franciman@mx1.fracta.dev
i don't think i'm competent enough, though

1641854337
Seng!~nick@hurtig.ninja
^ +1

1641854345
freshcoffee!~fresh@user/freshcoffee
andrewrk: Scaleway and M1 for CI. ooh nice. Let me know if you have < 5 mins to chat about it. I'm on discord if privat is better there

1641854529
Franciman!~Franciman@mx1.fracta.dev
let's see what i can help with for stage2

1641854544
Franciman!~Franciman@mx1.fracta.dev
ifreund: sorry to bother again, is there a roadmap somewhere? Or open isseus are the chief way to know?

1641854591
ifreund!2940d10f8b@user/ifreund
Franciman: https://github.com/ziglang/zig/issues?q=is%3Aopen+is%3Aissue+label%3A%22contributor+friendly%22+label%3Astage2

1641854602
ifreund!2940d10f8b@user/ifreund
^ contributor friendly issues about stage2

1641854645
Franciman!~Franciman@mx1.fracta.dev
thanks

1641857705
Seng!~nick@hurtig.ninja
I made a thing! https://github.com/bdoner/zig-permutate

1641857737
Seng!~nick@hurtig.ninja
It's five past midnight, and I gotta work tomorrow.. So I better sign off for today! later :)

