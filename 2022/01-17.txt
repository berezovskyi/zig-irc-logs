1642377973
ifreund!2940d10f8b@user/ifreund
kotto: so this is how you would write that if packed struct weren't buggy in the stage1 zig compiler: https://godbolt.org/z/K3ceKaqGs

1642378043
ifreund!2940d10f8b@user/ifreund
until stage2 is self hosts and packed structs are fixed, I recommend just writing the 3 parts of the header individually

1642378617
kotto!~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566
Oh, ok. I tried using asBytes at some point but I thought I was doing something wrong. Thanks for the info.

1642378747
ifreund!2940d10f8b@user/ifreund
note that I also fixed the defintion of the packed struct

1642378769
ifreund!2940d10f8b@user/ifreund
before it would have written a memory address to the socket instead of the magic string you wanted

1642379093
kotto!~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566
Oh, yeah. I had no idea why I couldn't just use `magic: [6]u8 = "i3-ipc"`. 

1642379674
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Is there an idiomatic way to have a function behave differently if it's argument is comptime-known?  I'm trying to write something that uses @embedFile if the filename is comptime-known, otherwise open and read it at runtime.

1642379741
nektro!~nektro@75-164-170-164.ptld.qwest.net
not sure if there's a way right now, parts of the stdlib that do that will define two separate functions

1642379901
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Gotcha, I don't really Need it, but playing with @embedFile got me thinking

1642382844
op_4!~op_4@user/op-4/x-9116473
is my memory correct, does andrewrk use alpine?

1642382866
andrewrk!~andrewrk@mail.ziglang.org
op_4, I use nixos for my daily driver

1642382907
op_4!~op_4@user/op-4/x-9116473
andrewrk thanks, hmm, i wonder why i thought that. Maybe somewhere i formed the impression you use musl --> alpine

1642405017
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Is there like, a cheat sheet or a mechanism or something to figure out if something should end with semicolon, comma, or nothing? Every time I feel like I have it figured out I realize I don't

1642405058
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
I just found `impl: Impl = .{},` on top of std/Thread/Mutex.zig, ... what is that and why is it comma?

1642405102
quickquestiononz!~quickques@49.36.113.253
Hi

1642405220
quickquestiononz!~quickques@49.36.113.253
How can i include generate "zigwin32" library to default zig library so that i can use the import with win32 just like importing std, am i doing something wrong?

1642405710
quickquestiononz!~quickques@49.36.113.253
anyone here can help in adding additional library to default library of zig? i need zingwin32 library to be included to default one manually? any help?

1642409596
quickquestiononz!~quickques@49.36.113.253
anyone here can help in adding additional library to default library of zig? i need zingwin32 library to be included to default one manually? any help?

1642409677
nektro!~nektro@75-164-170-164.ptld.qwest.net
you can clone/submodule the library and add it in build.zig with `exe.addPackagePath` or it also supports zigmod

1642409770
quickquestiononz!~quickques@49.36.113.253
@nektro

1642409828
quickquestiononz!~quickques@49.36.113.253
thank you :), i guess i was just trying things with .zig file without initiating.. will have to dig deeper..

1642417850
ifreund!2940d10f8b@user/ifreund
da_lorax: that is a struct field, files are structs in zig

1642417883
ifreund!2940d10f8b@user/ifreund
imagine a `struct { .... }` wrapping the source of the file if you like, it is this struct type that gets returned from @import()

1642417921
ifreund!2940d10f8b@user/ifreund
as for a "cheat sheet," the only complete reference is the formal grammar: https://github.com/ziglang/zig-spec/blob/master/grammar/grammar.y

1642417969
ifreund!2940d10f8b@user/ifreund
I think it will become intuitive fairly quickly from just using and reading zig though

1642445689
drewr!~drew@user/drewr
hi all, struggling to debug an OOM with ChildProcess.exec running `git clone`. I can repro with a FBA, arena, and GPA, but I'm not really sure where to go next

1642445721
drewr!~drew@user/drewr
just running a trivial command like an ls(1) or even `git status` work fine

1642445816
semarie!~semarie@user/semarie
drewr: do you reproduce it with `git clone -q` ?

1642445828
semarie!~semarie@user/semarie
(-q mean no progress)

1642445839
semarie!~semarie@user/semarie
(-q mean no progress output on stderr)

1642445894
drewr!~drew@user/drewr
oh, right, it does print a bunch of progress meters, lemme try

1642445919
drewr!~drew@user/drewr
no, that didn't help

1642445945
ifreund!2940d10f8b@user/ifreund
drewr: are you sure it's an OOM? Zig's error trace printing is a bit wonky as errors that are "handled" often show up in the trace anyways

1642445964
ifreund!2940d10f8b@user/ifreund
check if there isn't some other error in the trace that is the root issue

1642446060
drewr!~drew@user/drewr
here's the output https://gist.github.com/drewr/96bb6668d5fea8db4681bd6eeb494660

1642446090
drewr!~drew@user/drewr
and the code https://github.com/drewr/zigutils/blob/main/src/main.zig

1642446672
ifreund!2940d10f8b@user/ifreund
drewr: does /usr/bin/git instead of just git work?

1642446795
ifreund!2940d10f8b@user/ifreund
you could alternatively set expand_arg0 to .expand

1642447323
andrewrk!~andrewrk@mail.ziglang.org
damn, I can't repro the drone CI failure on any machine

1642448400
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
Is there currently a way of setting the rpath when invoking the build system??

1642448542
drewr!~drew@user/drewr
ifreund: no, same result

1642448700
andrewrk!~andrewrk@mail.ziglang.org
Snetry, `foo.addRPath`

1642448732
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
I'm aware of that, but is there any way of setting that when invoking `zig build`

1642448795
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
For example, I've just compiled river and it now has an RPATH of "/lib64:/usr/lib64", which seems kinda redundant but also creates an error with rpm tests

1642448804
andrewrk!~andrewrk@mail.ziglang.org
yes, use the options mechanism to add custom options to your build script, then you can do any logic you want based on those options

1642448958
andrewrk!~andrewrk@mail.ziglang.org
if you look at zig's build.zig you can find examples of using options

1642448987
ifreund!2940d10f8b@user/ifreund
Snetry: it won't if you set a target and put the compiler in cross compilation mode

1642448997
ifreund!2940d10f8b@user/ifreund
(which is what I recommend for packaging)

1642449019
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
ah

1642449021
ifreund!2940d10f8b@user/ifreund
but that doesn't work since 0.9.0 currently as something with include paths has changed

1642449028
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
aw

1642449043
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
well

1642449045
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
I'll hack around it

1642449075
ifreund!2940d10f8b@user/ifreund
the best I can offer you right now is patching in .addIncludePath("/usr/include"); and using -Dtarget and -Dcpu

1642449081
andrewrk!~andrewrk@mail.ziglang.org
ah I wasn't aware we had a regression with rpaths

1642449098
ifreund!2940d10f8b@user/ifreund
I'll try to get this fixed in a satisfying way before 0.9.1

1642449119
ifreund!2940d10f8b@user/ifreund
andrewrk: the rpath thing isn't really related, that's just zig's default when compiling for the "native" os

1642449135
ifreund!2940d10f8b@user/ifreund
and is undesireable for distro packaging as it's totally redundant

1642449143
andrewrk!~andrewrk@mail.ziglang.org
ah

1642449169
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
and a distro like Fedora has scripts that run after building to check for things like rpath values

1642449176
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
and errors when its something redundant 

1642449225
ifreund!2940d10f8b@user/ifreund
using -Dtarget and -Dcpu is required when packaging zig as far as I'm concerned, I think the change that broken this was kubkon stopping zig from automatically including the native search paths for libraries and includes when cross compiling

1642449232
ifreund!2940d10f8b@user/ifreund
which was a bug fix to be clear

1642449252
andrewrk!~andrewrk@mail.ziglang.org
got it

1642449252
ifreund!2940d10f8b@user/ifreund
but we don't have a way to set those through the build system yet, basically we need some more general options

1642449272
andrewrk!~andrewrk@mail.ziglang.org
I agree, when building a package, the package maintainer should specify the desired target and cpu 

1642449278
ifreund!2940d10f8b@user/ifreund
I think there was also some --sysroot related regression but he already fixed that

1642449340
andrewrk!~andrewrk@mail.ziglang.org
it would be nice to have a meeting with a debian developer and collaborate on what we can do to meet their needs

1642449356
andrewrk!~andrewrk@mail.ziglang.org
at some point I'll join #debian-devel and try to set that up

1642449438
andrewrk!~andrewrk@mail.ziglang.org
one question we'll want to ask ourselves about scope: do we want zig build to (eventually) also be a driver for other toolchains, such as gcc? in other words, do we want to go full on competition with cmake/make/ninja?

1642449447
andrewrk!~andrewrk@mail.ziglang.org
I suspect the answer is "yes"

1642449530
andrewrk!~andrewrk@mail.ziglang.org
this would be required for a given project to migrate from e.g. cmake, and for distro maintainers to be happy. but it would introduce complexity because now you have 2 different ways of building the same project, and probably only 1 of them is getting tested regularly

1642449540
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
hmm

1642449560
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
question ifreund

1642449580
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
if I put the compiler into cross compile mode by setting a target, could I then use --search-prefix to add all system paths to the search list ?

1642449773
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
actually, nevermind. Thats causing other errors for e

1642452258
ifreund!2940d10f8b@user/ifreund
andrewrk: someone started the work of packaging river for debian recently and ran into this same rpath issue fwiw

1642452298
ifreund!2940d10f8b@user/ifreund
I think the easier path forward is to just be responsive when distro maintainers/people wanting to package zig software come to us and work with them on solutions

1642452409
ifreund!2940d10f8b@user/ifreund
I should probably write some good docs on how to package/distribute zig software eventually instead of just telling people to look at what I did for void linux

1642452827
ifreund!2940d10f8b@user/ifreund
Snetry: things actually work fine for me with zig 0.9.0 when using -Dtarget, -Dcpu, --sysroot, and --libc

1642452864
ifreund!2940d10f8b@user/ifreund
I think there may actually not be any issue here

1642452897
ifreund!2940d10f8b@user/ifreund
I forgot about --libc earlier, which it seems is now the only thing responsible for adding the lib/include paths when cross compiling

1642452946
ifreund!2940d10f8b@user/ifreund
Snetry: here's the void tooling for example: https://github.com/void-linux/void-packages/blob/0428b79d89ceb6501b44180d4a03accb762d070c/common/build-style/zig-build.sh

1642453287
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
ifreund: yeah okay, that seems to work

1642453393
ifreund!2940d10f8b@user/ifreund
:)

1642453465
ifreund!2940d10f8b@user/ifreund
sorry for the lack of documentation, it's not our main priority yet

1642453493
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
no worries, this entire ordeal has mainly stared because people started wanting to package Zig stuf for Fedora

1642453496
ifreund!2940d10f8b@user/ifreund
unfortunately for you, somebody (me) decided to write some software (river) that other people want to package

1642453501
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
so I needed to change the way things are structured a bit

1642453563
ifreund!2940d10f8b@user/ifreund
I could have waited for zig to get more polished before writing serious software in it, but where would be the fun in that? xD

1642453568
luuk!~luuk@user/luuk
ifreund: How dare you write software people want?

1642454421
andrewrk!~andrewrk@mail.ziglang.org
I just hope that people keep reporting issues and expecting them to be fixed rather than making workarounds that we (upstream zig project) are unaware of

1642454555
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
I can say from the Fedora side of things that we try to upstream any fixes or changes we make

1642454674
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
and if I weren't split between 3 other things I would contribute more things

1642454864
andrewrk!~andrewrk@mail.ziglang.org
Snetry, feel free to drop a link to the Fedora package here when you get it working and point out the places you would like to see it improved, and I'll see what we can do on our end of things

1642455167
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
Here is the fedora repo for the package files https://src.fedoraproject.org/rpms/zig/

1642455191
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
I can't really say what I would like to see improved at the moment, but if I have anything I'll open an issue or a PR like I have in the past

1642455260
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
Here is the unofficial repo which I used to create builds before I upstreamed it to Fedora https://pagure.io/zig-spec

1642455296
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
package files exist up to release 0.5.0. Things have changed a lot since then

1642455806
andrewrk!~andrewrk@mail.ziglang.org
thanks!

1642456740
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
I just came across some deprecations in the standard library with a comment about adding an @deprecated builtin so that tests can go back to using `refAllDecls(@This())`.  What about doing this? `pub const Foo = if (@import("builtin").is_test) struct {} else @compileError("deprecated: blah blah");`

1642456807
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
(specifically looking at std.build.Version and std.build.Target)

1642457029
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
apologies ifreund for coming to ask again

1642457073
Snetry!~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de
but what do you think about using `zig libc` to generate the libc file and then using it with `zig build` ? It shouldn't set an rpath but end up compiling like its a native build

1642458375
ifreund!2940d10f8b@user/ifreund
Snetry: I think you should just hardcode the lib.txt file to what your distro uses, it will be more reliable than `zig libc`

1642459150
andrewrk!~andrewrk@mail.ziglang.org
agreed

1642463583
daurn!~daurnimat@vultr.daurnimator.com
andrewrk: FYI I have a few open issues that we need for packaing zig applications on arch

1642463655
daurn!~daurnimat@vultr.daurnimator.com
I proposed https://github.com/ziglang/zig/issues/7201 as a way to make them available

1642463709
daurn!~daurnimat@vultr.daurnimator.com
for many distros you'll now need --build-id support. https://github.com/ziglang/zig/issues/3047

1642463802
daurn!~daurnimat@vultr.daurnimator.com
depending on what happens with https://github.com/ziglang/zig/issues/3382 will change the path somewhat

1642463854
daurn!~daurnimat@vultr.daurnimator.com
https://github.com/ziglang/zig/issues/6977 will be a requirement

