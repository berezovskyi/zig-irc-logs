1645716983
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I want to learn more about the new direction for packed structs.  I see features going away but am unsure of what their replacement is.  Sounds like most of the use cases I thought packed structs were for will now be handled by extern structs?

1645717040
ikskuh!~xq@v43666.php-friends.de
what was your thought use case of packed structs?

1645717079
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
any time you needed full control over the memory layout of your struct, which now appears to be wrong, so I'm not sure what the purpose of them is

1645717105
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
here's an example where I would have used a packed struct: https://github.com/marler8997/maros/blob/master/kernel/bootheader.zig

1645717201
ikskuh!~xq@v43666.php-friends.de
yeah that's something i'd definitly use a extern struct for

1645717210
motiejus!~motiejus@2001:470:69fc:105::38fb
likewise interested. I am also using packed structs for storing/reading their contents into files (relatedly, created an issue and a PR recently: https://github.com/ziglang/zig/pull/10941

1645717225
ikskuh!~xq@v43666.php-friends.de
the problem is that it's very hard to define the semantics of packed structs

1645717251
ikskuh!~xq@v43666.php-friends.de
it's "trivial" for byte-aligned stuff, but this could be covered with align(1) fields already

1645717259
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I'm also not sure why array support is being removed for structs

1645717268
ikskuh!~xq@v43666.php-friends.de
huh?

1645717271
ikskuh!~xq@v43666.php-friends.de
wdym?

1645717286
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
you can't have arrays as fields in packed structs anymore

1645717304
ikskuh!~xq@v43666.php-friends.de
source on this? *thinking*

1645717313
motiejus!~motiejus@2001:470:69fc:105::38fb
huh? this seems to work: https://git.sr.ht/~motiejus/turbonss/tree/main/item/src/header.zig#L20

1645717332
ikskuh!~xq@v43666.php-friends.de
marler8997_: i don't know of any such intentions

1645717337
motiejus!~motiejus@2001:470:69fc:105::38fb
(at least it worked yesterday until I broke all of the code this morning)

1645717376
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
https://github.com/ziglang/zig/commit/6249a24e81b9b3df3d5ca99b57f22470b9ac486c

1645717387
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
...removes the

1645717387
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ability to put pointers and arrays inside packed structs.

1645717432
ikskuh!~xq@v43666.php-friends.de
not sure if that's a permanent change

1645717446
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I think it is

1645717452
plumeus!~plumeus@user/plumeus
I guess it's because stuff like `[8]u1` has a size of 8 and not 1 with the status quo.

1645717473
plumeus!~plumeus@user/plumeus
But having 8 fields of `u1` in a packaged struct should be a size of 1, granted proper alignment.

1645717517
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
here are the 3 statements andrew said were important to understand the new direction of packed structs:

1645717523
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
1. every packed struct has 1 host integer

1645717527
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
2. only types will be integers, floats, bools, other packed structs

1645717530
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
3. can't change alignment per field

1645717592
plumeus!~plumeus@user/plumeus
huh, no enums?

1645717616
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
to me it sounds like the only use case for packed structs now is creating small types that encode a few different fields in them, so it's a convenient way to reduce memory size

1645717637
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
maybe enums as well, this is what he said on stream and could have easily forgot a few items

1645717683
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
Along with arrays, I'm also unsure why pointers are being removed

1645717685
ifreund!2940d10f8b@user/ifreund
enums are allowed if they have an explict tag type iirc

1645717699
plumeus!~plumeus@user/plumeus
I wonder how much of my code will break with stage2. It's going to be fun.

1645717742
ifreund!2940d10f8b@user/ifreund
marler8997_: I think you should see this new packed struct direction as a massive simplification that can be built on as practical use-cases are examined

1645717791
ifreund!2940d10f8b@user/ifreund
right now extern structs solve byte-aligned use cases and packed structs solve bit aligned use cases from my view

1645717808
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oh that's a good distinction

1645717825
ifreund!2940d10f8b@user/ifreund
and together they solve every concrete use-case I currently have 

1645717851
plumeus!~plumeus@user/plumeus
I was under the impression that `extern struct` is currently discouraged for use-cases outside of interfacing with C code?

1645717866
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
that brings up a question, I thought "extern structs" were supposed to match the C ABI, which can change per platform

1645717914
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I saw "packed" as "extern" for with more guarantees like field order is always the same on every platform and all sizes are the same on every platform

1645717917
plumeus!~plumeus@user/plumeus
"This kind of struct should only be used for compatibility with the C ABI. Every other use case should be solved with packed struct or normal struct."

1645717925
bgiannan!giann@2a01:4f8:141:1272::2
https://pithlessly.github.io/allocgate.html does that mean the days of @fieldParentPtr are counted ?

1645717925
plumeus!~plumeus@user/plumeus
Quote from https://ziglang.org/documentation/master/#extern-struct

1645717940
plumeus!~plumeus@user/plumeus
So, I guess they'll change the use-cases for packed and extern?

1645717959
ifreund!2940d10f8b@user/ifreund
bgiannan: no, it's very useful for other things beyond that pattern

1645717992
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, thank god, i'm not about to change that part of my projects

1645718021
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
So is Zig going to change the definition of "extern" to not mean "match what C does"?

1645718055
plumeus!~plumeus@user/plumeus
I have a code right now where I have a packed struct made mostly of array of bytes, where I do a `@bitCast` to convert it back and forth, welp

1645718090
ifreund!2940d10f8b@user/ifreund
marler8997_: "match what C does" is actually a bit of a misnomer, extern matches the ABI defined by the target operating system

1645718119
ifreund!2940d10f8b@user/ifreund
which in most current cases is defined using C types because all? major operating systems that currently exist are written in C

1645718157
ikskuh!~xq@v43666.php-friends.de
marler8997_: "match what C does" is already wrong, as zig allows to under-align fields while C does not

1645718165
ikskuh!~xq@v43666.php-friends.de
you cannot have a align(1) u32 in C, but zig can do that

1645718180
ikskuh!~xq@v43666.php-friends.de
imho the distinction bit vs. byte aligned is very good, ifreund!

1645718191
ikskuh!~xq@v43666.php-friends.de
but i think we can allow arrays in packed structs

1645718194
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
https://ziglang.org/documentation/master/#extern-struct

1645718201
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
"An extern struct has in-memory layout guaranteed to match the C ABI for the target."

1645718206
ikskuh!~xq@v43666.php-friends.de
which have to be packed/unpacked on conversion though

1645718257
ikskuh!~xq@v43666.php-friends.de
packed struct { a: [3]u1, b: u5 } should be equivalent to packed struct { a0: u1, a1: u1, a2: u1, b: u5 }

1645718272
ifreund!2940d10f8b@user/ifreund
ikskuh: Technically we can allow arrays yes, but I'm not sold on their use-cases tbh

1645718293
ikskuh!~xq@v43666.php-friends.de
ifreund: a lot of mmio registers contain bit arrays

1645718296
plumeus!~plumeus@user/plumeus
marler8997_, you made me question if the Matrix <-> IRC bridge was working because you repeated the quote and link I sent minutes ago, lol

1645718298
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
marler8997_ beat me to it!  ifreund do you have an example of any ABI other than the C-ABI?  O dpm

1645718299
ifreund!2940d10f8b@user/ifreund
anyhow like I said view the current stage2 implementation as an actually simple but very useful starting point for further iteration

1645718301
ikskuh!~xq@v43666.php-friends.de
which are typically accessed via dynamic shifting

1645718326
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
s/O dpm// (off by one on my keyboard)

1645718328
ifreund!2940d10f8b@user/ifreund
tsmanner, marler8997_: I'm saying that this "C ABI" you speak of is not defined by C but rather by the operating systems

1645718335
ifreund!2940d10f8b@user/ifreund
e.g. System V ABI

1645718367
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
The C ABI is a combination of C, OS, and platform architecture, and is a C specific concept

1645718385
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ifruend fair enough that is a good distinction

1645718430
ifreund!2940d10f8b@user/ifreund
even in a world without C would would still have ABIs

1645718450
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
sure, but I think you're missing the point of my question here

1645718474
ikskuh!~xq@v43666.php-friends.de
ifreund: use case for packed struct + array:

1645718476
ikskuh!~xq@v43666.php-friends.de
https://www.pololu.com/file/0J431/user.manual.lpc17xx.pdf 

1645718481
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
There are other ABIs, but the keyword 'extern' in zig, according to all the current zig docs, exists to match the C-ABI (which happens to be OS and platform dependent)

1645718486
ikskuh!~xq@v43666.php-friends.de
check out chapter 8.5.1, pdf page 108

1645718494
ifreund!2940d10f8b@user/ifreund
I think extern is/will be defined in terms of target operating system ABIs

1645718509
ikskuh!~xq@v43666.php-friends.de
PINSEL = packed struct { gpio: [16]u2 };

1645718517
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
The point is that extern is not defined by Zig, it's defined by the target OS/platforms and Zig matches whatever they do.

1645718532
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
So there's no guarantee of field order, field alignment/size

1645718550
ifreund!2940d10f8b@user/ifreund
extern struct and unions also happen to use the same rules pretty much everywhere

1645718561
ifreund!2940d10f8b@user/ifreund
where you will see more variation in the ABI is with calling conventions

1645718608
ifreund!2940d10f8b@user/ifreund
Note that we have both C and SysV there already 

1645718695
ifreund!2940d10f8b@user/ifreund
Discussion: https://github.com/ziglang/zig/issues/6700

1645718809
ifreund!2940d10f8b@user/ifreund
ikskuh: that looks like it should be a bunch of different enum (u2) {}s

1645718841
ifreund!2940d10f8b@user/ifreund
e.g. enum (u2) { gpio0, rd1, txd3, sda1 }

1645718848
ifreund!2940d10f8b@user/ifreund
maybe I'm reading it wrong though

1645718865
ikskuh!~xq@v43666.php-friends.de
there are a lot of those registers with the same design

1645718884
ikskuh!~xq@v43666.php-friends.de
but yeah, that depends on the philosophy

1645718937
ikskuh!~xq@v43666.php-friends.de
this was just the first mmio register that came into my mind that had a packed-array like structure

1645718944
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
ifreund On struct/union layout variation: That's true by convention, but not by rule.  Extern, right now, is not defined in terms of OS, it's defined in every use in the zig docs to be C ABI.  Same goes for export.  Redefining it is a fine thing to do, but it makes the meaning of extern context-sensitive.

1645718986
ikskuh!~xq@v43666.php-friends.de
PINMODE0 to PINMODE4 are probably a better example (8.5.9, page 112)

1645718987
ifreund!2940d10f8b@user/ifreund
tsmanner: you're right, I'm not really talking about what the current docs say but rather what I think the spec should be

1645719021
ifreund!2940d10f8b@user/ifreund
we used to only have the C callconv but SysV was later added because there was a use case for using it on an operating system where the default C calling convention is something different

1645719028
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ifruend but C compilers do things differently

1645719051
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
ifreund I'm curious, because I interop with C a lot and sometimes on esoteric system, I'm wondering how to guarantee that an actually-defined-in-C extern struct would be reliably handled?

1645719078
ifreund!2940d10f8b@user/ifreund
I expect that a similar approach will be taken for extern struct eventually as well, allowing to target either "whatever C does for the target" or "this specific OS ABI" as one chooses

1645719125
ifreund!2940d10f8b@user/ifreund
And maybe "whatever C does for the target" would be better defined as "the target's native ABI"

1645719155
ifreund!2940d10f8b@user/ifreund
if I write an OS in zig, I might come up with my own ABI not tied to C's legacy

1645719155
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
OK, similar to how callconv(.C) can be used instead of export

1645719173
ifreund!2940d10f8b@user/ifreund
uh, those are two distinct things

1645719186
ifreund!2940d10f8b@user/ifreund
callconv(.C) does not imply that a function will be exported

1645719202
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ifruend write your own ABI not tied to C's legacy?  C doesn't define an ABI

1645719206
ifreund!2940d10f8b@user/ifreund
export currently implies callconv(.C) but that can be overridden

1645719216
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
Fair, I mean in terms of the layout, the callconv(.C) makes it C-ABI compatible, export does that AND exports the symbol

1645719231
ifreund!2940d10f8b@user/ifreund
marler8997_: no, but operating systems define their ABI in terms of C types

1645719233
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
it's the compilers/platforms/architectures that define the ABI for C, not the other way around

1645719257
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
not really

1645719262
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
C defined a couple of things about the ABI, like that char is 1 byte, but 1 byte is defined by the OS+platform.  A zig-implemented OS would still be a suitable target for C code, and thus would have a C-ABI that would have to conform to the parts of the ABI that C actually does define

1645719331
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
the ABI is defined by how the toolchain interprets C, not the C code itself

1645719440
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
if you write an OS, you have to define your own ABI, C doesn't impose one on you so I don't know what "tie" you might be severing

1645719702
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
The only "rules" I can remember are that that C compiler must define char to be 1 byte, and to allow the char* type to point to anything.  Everything else is up to the OS and architecture.  Am I missing something marler8997_?

1645719721
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
by removing these packed features, it sounds to me like Zig is saying there's no real use cases for having full control of in-memory representation (field order/size/padding) other than to match extern ABI's or bit packing

1645719774
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
tsmanner, point is that C does not define the ABI, the implementation does

1645719893
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
fair

1645719933
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
so if I needed to make a struct, where field "x" is at offset 100 from the start of the struct, my only choice is to use "packed", but now packed as a bunch of restrictions

1645719953
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
like this linux bootheader example: https://github.com/marler8997/maros/blob/master/kernel/bootheader.zig

1645719974
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
linux defines parameters in terms of fixed offsets (see the comptime assert blocks)

1645720025
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
so to be semantically correct on all platforms, I need to use packed, which means I'll no longer be able to use arrays

1645720093
ikskuh!~xq@v43666.php-friends.de
marler8997_: we had a similar discussion in the stage2-meetup channel earlier

1645720111
ikskuh!~xq@v43666.php-friends.de
i think the idea of having both a byte- and bit-controllable environment is enough for the language itself

1645720125
ikskuh!~xq@v43666.php-friends.de
we can implement all other layouting techniques on top of that with comptime features

1645720142
ikskuh!~xq@v43666.php-friends.de
ExternStruct("a: u24, b: i8");

1645720147
ikskuh!~xq@v43666.php-friends.de
or whatever

1645720179
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I'm still confused though

1645720192
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
it's simple, extern is to match extern ABIS, packed is for full memory control

1645720203
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
that's what it is today, what's the new direction?

1645720208
ikskuh!~xq@v43666.php-friends.de
it's not

1645720216
ikskuh!~xq@v43666.php-friends.de
it's just another take on memory control

1645720227
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
extern is not memory control though, only packed is

1645720228
ikskuh!~xq@v43666.php-friends.de
packed is a lot, but it's definitly not trivial 

1645720249
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
extern can order fields in any order, size them with any size and add any arbitrary padding

1645720250
ikskuh!~xq@v43666.php-friends.de
and my definition concept is pretty sweet as it actually gives you perfect memory control

1645720254
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
you're giving control to something else

1645720281
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
Seems like the word extern is a misnomer there.  Could packed have an increment size or something?  e.g. packed(.Bit) struct ... and packed(.Byte) struct ...

1645720304
ikskuh!~xq@v43666.php-friends.de
tsmanner: the problem is that "bit packed" isn't actually a good or helpful definition

1645720340
ikskuh!~xq@v43666.php-friends.de
and it wasn't defined at all previously how packed actually worked

1645720345
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
ikskuh why's that?  It seems pretty useful to me for creating lenses to reinterpret ints into sets of fields

1645720354
ikskuh!~xq@v43666.php-friends.de
packed struct { a: u4, b: u4 }

1645720357
ikskuh!~xq@v43666.php-friends.de
what's the layout of that?

1645720442
ikskuh!~xq@v43666.php-friends.de
the stage1 implementation was basically undefined

1645720459
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
According to the docs that would be an 8-bit struct which had that single byte of data that could be safely @bitCast to a u8, where a was the high-order nibble and b was the low-order nibble.

1645720505
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
The example here appears to me to define it pretty strongly, based only on the endianness of the system. https://ziglang.org/documentation/0.9.1/#packed-struct

1645720535
ikskuh!~xq@v43666.php-friends.de
why is a the high-oprder nibble?

1645720543
ikskuh!~xq@v43666.php-friends.de
because it's not on little endian, and it's on big endian ^^

1645720557
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
because it came first, and "Fields remain in the order declared."

1645720563
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
big endian only concerns bytes, not bits

1645720566
ikskuh!~xq@v43666.php-friends.de
so 0x01 will either be { a=1,b=0 } or {a=0,b=1}

1645720568
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
within that byte, it is well defined

1645720584
ikskuh!~xq@v43666.php-friends.de
no, it will swap positions depending on endian

1645720588
ikskuh!~xq@v43666.php-friends.de
at least thats what the implementation did

1645720606
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
For bit endian it will pack the fields in reverse, regardless of their alignment?

1645720629
ikskuh!~xq@v43666.php-friends.de
https://godbolt.org/z/GnW73hj9x

1645720640
ikskuh!~xq@v43666.php-friends.de
it will do weird shit

1645720674
ikskuh!~xq@v43666.php-friends.de
the new definition is: fields are always ordered LSB to MSB in an integer with @bitSizeOf(@This()) bits

1645720836
ikskuh!~xq@v43666.php-friends.de
the removal of arrays is weird, and i would like to have them in again

1645721079
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
Ah ok I misread in the example the quarter3/quarter4 and missed that it swapped the 1 and 2.  ikskuh I still don't understand why bit-packed is not good or helpful though

1645721136
ikskuh!~xq@v43666.php-friends.de
it's super helpful

1645721145
ikskuh!~xq@v43666.php-friends.de
it's just not trivial to find a reasonable definition of it

1645721169
ikskuh!~xq@v43666.php-friends.de
(disclaimer: the new integer backed definition is based on work from SpexGuy and me)

1645721198
ikskuh!~xq@v43666.php-friends.de
and i think it's the only definition where i can say: i can understand how the final data looks like when i read the code

1645721217
ikskuh!~xq@v43666.php-friends.de
i thought about a lot of definitions, but none were truly simple to understand

1645721225
ikskuh!~xq@v43666.php-friends.de
because endianess made things weird as heck

1645721252
ikskuh!~xq@v43666.php-friends.de
if everything would be little endian, it would be much easier, but the world isn't that easy sadly

1645721313
ikskuh!~xq@v43666.php-friends.de
as you can see, the thing that isn't well defined in Zig yet is the ABI compatible struct vs. byte aligned structs

1645721403
ikskuh!~xq@v43666.php-friends.de
if i remember correct, the C abi requires at least orderning of the fields from "low" to "high" addresses

1645721443
ikskuh!~xq@v43666.php-friends.de
if not stated explicitly, then definitly by the requirement that struct pointers can be cast to compatible struct pointers (structs which share the same prefix)

1645721637
ikskuh!~xq@v43666.php-friends.de
marler8997_: https://mq32.de/public/7830b5bb8cc490fe2cbcd2e21e5b5d4394091356.png

1645721650
ikskuh!~xq@v43666.php-friends.de
C layout structs are not allowed to reorder fields

1645722159
tsmanner!~tsmanner@ool-182d23f9.dyn.optonline.net
ikskuh completely agree on endianness making things weird, I happen to work on a big endian processor project, and it gets wild sometimes trying to wrap my brain around what's going on in there lol

1645735655
frmdstryr!~jrm@172.58.203.101
Is there an equivalent for @field but with decls? Eg @decl(FooStruct, "a")

1645735983
frmdstryr!~jrm@172.58.203.101
Nevermind, @field seems to work for both

