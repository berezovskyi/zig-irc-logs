1643168034
andrewrk!~andrewrk@mail.ziglang.org
did you know this whole time, LLD had a strip flag that we could have been passing?

1643168049
andrewrk!~andrewrk@mail.ziglang.org
anyway fixed in 366c76

1643170123
motiejus!~motiejus@2001:470:69fc:105::38fb
I knew. :) thanks for 50905d88518f92a9b8e492daf8dbb6d38b7c61bf andrewrk  ; it will be my reference point on how easy it is to add passthrough lld args

1643170376
andrewrk!~andrewrk@mail.ziglang.org
that one happened to be easy because we already had the "must_link" functionality from supporting -Wl,-force_load=foo.a  (Jakub added that in  #10584)

1643170398
andrewrk!~andrewrk@mail.ziglang.org
and then for strip we already had the concept of strip

1643170430
andrewrk!~andrewrk@mail.ziglang.org
was planning on doing the --hash-style enhancement next though which would be a pretty decent example

1643170471
motiejus!~motiejus@2001:470:69fc:105::38fb
not sure I am following what's --hash-style

1643171023
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/envoyproxy/envoy/issues/19535#issuecomment-1021449965

1643171053
motiejus!~motiejus@2001:470:69fc:105::38fb
ah, this one. It's literal

1643171142
motiejus!~motiejus@2001:470:69fc:105::38fb
we also hit internally `--output-def`, but found an easy-enough workaround

1643171149
motiejus!~motiejus@2001:470:69fc:105::38fb
I guess I should just file a task before applying the workaround

1643171344
andrewrk!~andrewrk@mail.ziglang.org
hmm I don't see --output-def in `ld --help`

1643171369
motiejus!~motiejus@2001:470:69fc:105::38fb
I see it in the man page of gnu ld

1643171389
motiejus!~motiejus@2001:470:69fc:105::38fb
  --output-def <file>                Generate a .DEF file for the built DLL

1643171390
motiejus!~motiejus@2001:470:69fc:105::38fb
maybe gnu ld specific

1643171412
andrewrk!~andrewrk@mail.ziglang.org
this looks like it's for windows

1643171444
andrewrk!~andrewrk@mail.ziglang.org
if you're targeting linux I'm not sure why the build script would request --output-def

1643171456
motiejus!~motiejus@2001:470:69fc:105::38fb
short story: libsodium's autoconf was probing for it, `zig cc` emitted a warning with a zero exit code, and libsodium was trying to build that file in the build process

1643171474
motiejus!~motiejus@2001:470:69fc:105::38fb
it was on x86_64 linux

1643171514
andrewrk!~andrewrk@mail.ziglang.org
oh that's interesting. so another improvement would to be exit failure when being probed for features

1643171551
andrewrk!~andrewrk@mail.ziglang.org
I suppose we could have unrecognized linker args be fatal, with an env var to override them into warnings

1643171593
motiejus!~motiejus@2001:470:69fc:105::38fb
yep. Though not sure how to detect when it's probing features. It's still complaining each linking time about things we care less about

1643171603
andrewrk!~andrewrk@mail.ziglang.org
error: unrecognized linker argument: --output-def. set ZIG_UNKNOWN_LINKER_ARGS_WARN=1 to turn this error into a warning

1643171623
motiejus!~motiejus@2001:470:69fc:105::38fb
e.g. gzipped headers or such

1643171634
motiejus!~motiejus@2001:470:69fc:105::38fb
sounds like a good one.

1643173310
motiejus!~motiejus@2001:470:69fc:105::38fb
from https://github.com/ziglang/zig/wiki/Updating-libc: > Obtain the latest master branch Linux code.

1643173350
motiejus!~motiejus@2001:470:69fc:105::38fb
checking out `master` and doing anything with it makes me a bit wary; should we at least checkout the latest stable patch release?

1643173364
motiejus!~motiejus@2001:470:69fc:105::38fb
in this case, 5.16.2 or so

1643173994
andrewrk!~andrewrk@mail.ziglang.org
mmm perhaps. I was under the impression that they didn't really do release branches. let me double check

1643174129
andrewrk!~andrewrk@mail.ziglang.org
yeah I don't see any branches in this repo. it looks like everything just happens on master

1643174136
andrewrk!~andrewrk@mail.ziglang.org
maybe I'm missing something

1643174173
andrewrk!~andrewrk@mail.ziglang.org
maybe master branch itself goes through periods of stability/instability?

1643174201
andrewrk!~andrewrk@mail.ziglang.org
anyway I support your proposal to change it to checking out the latest stable patch release

1643174828
motiejus!~motiejus@2001:470:69fc:105::38fb
the stable branches are in https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

1643174847
motiejus!~motiejus@2001:470:69fc:105::38fb
e.g.   remotes/stable/linux-5.16.y         5fd3e07fd10e Linux 5.16.2

1643174862
motiejus!~motiejus@2001:470:69fc:105::38fb
I usually have two remotes:  one for torvalds (https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git) and one stable

1643174922
motiejus!~motiejus@2001:470:69fc:105::38fb
I will update the wiki once I run this process. Now trying to see where the renaming will fit in update-linux-headers.zig

1643178863
motiejus!~motiejus@2001:470:69fc:105::38fb
turns out quite a simple change: https://github.com/ziglang/zig/pull/10699

1643178983
andrewrk!~andrewrk@mail.ziglang.org
hmm I wonder why we have that multiarch union anyway

1643179021
andrewrk!~andrewrk@mail.ziglang.org
ah looks like it was ported from process headers for musl

1643179527
motiejus!~motiejus@2001:470:69fc:105::38fb
ah, glibc includes arm64/, so I'd need to mess those headers too

1643179530
motiejus!~motiejus@2001:470:69fc:105::38fb
https://ci.ziglang.org/ziglang/zig/1713/1/4

1643180133
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
did we just get a zip extractor in std?

1643183458
squeek502!~squeek502@user/squeek502
marler8997, more a deflate compressor + a faster deflate decompressor

1643183495
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
hmmm, I'm trying to figure out if I could use this project to extract zip files: https://github.com/hdorio/hwzip.zig

1643184663
squeek502!~squeek502@user/squeek502
not sure how thats related to std

1643185855
andrewrk!~andrewrk@mail.ziglang.org
self-hosted compiler progress report: LLVM backend is 645/1067 (60%) passing the behavior tests

1643188603
ifreund!2940d10f8b@user/ifreund
\o/

1643189680
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Is there a way to do something like @intToEnum that returns an error or something rather than is undefined behavior if the int isn't an enum value?

1643189748
luuk!~luuk@user/luuk
da_lorax: std.meta.intToEnum(EnumType, value)

1643189976
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
thanks :)

1643190314
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Can I cast a `[]const u8` into a struct I know the layout of?

1643190361
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
I'm trying to read a buffer of pixels off a network socket and it'd be cool to be able to address their R,G,B components

1643190435
ikskuh!~xq@2a0d:5940:6:163::ad7e
da_lorax: i recommend you using reader.readInt... to deserialize data and not do struct casting

1643190501
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
can that be done without copying?

1643190556
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
I'd prefer not to copy, raspi zeros don't have a ton of memory bandwidth

1643190601
ikskuh!~xq@2a0d:5940:6:163::ad7e
how are the pixels encoded?

1643190644
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
RGBRGBRGB..., one u8 per color

1643190649
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
openpixelcontrol.com

1643190656
ifreund!2940d10f8b@user/ifreund
what about endianness?

1643190665
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
of a u8?

1643190711
ifreund!2940d10f8b@user/ifreund
ah, "one u8 per color"

1643190732
ikskuh!~xq@2a0d:5940:6:163::ad7e
da_lorax: i'd just use indices then

1643190747
ikskuh!~xq@2a0d:5940:6:163::ad7e
because the data is not aligned to a power of two

1643190805
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
It's equivalent to a `[] const Struct {R: u8, G: U8, B: u8}`, is there no way I can interpret it as such?

1643190817
ifreund!2940d10f8b@user/ifreund
da_lorax: to answer your question, std.mem.bytesAsValue()

1643190833
dutchie!~dutchie@user/dutchie
or possibly bytesAsSlice if you have a bunch of them

1643190842
ifreund!2940d10f8b@user/ifreund
which is just @ptrCast() internally

1643190850
ikskuh!~xq@2a0d:5940:6:163::ad7e
da_lorax: note that you have to use extern struct

1643190890
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
does that make it to the C ABI?

1643190901
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
cause I know the noraml struct doesn't have guarantees about layout

1643190911
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1643190923
dutchie!~dutchie@user/dutchie
extern pretty much exactly means "this struct has C ABI" aiui

1643190936
dutchie!~dutchie@user/dutchie
(or fn or enum or whatever i guess)

1643190959
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
perfect, that should work, thanks

1643194876
smeding_!~roysmedin@167.71.77.228
hmm, is anyone actively working on zig for AVR? i ordered some attiny806 to futz around with and i think i'm gonna try and get zig working on there

1643195216
ikskuh!~xq@2a0d:5940:6:163::ad7e
smeding: avr isn't fun yet

1643195231
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig can only generate object files that access RAM

1643195236
ikskuh!~xq@2a0d:5940:6:163::ad7e
so you need avr-ld

1643195582
smeding!~roysmedin@167.71.77.228
hmm, what do you mean by "object files that access RAM"? does it not just generate object files with the usual text/rodata/data/bss sections? i found this old code that just seems to have a basic linker script like i'd expect https://github.com/FireFox317/avr-arduino-zig

1643195822
ikskuh!~xq@2a0d:5940:6:163::ad7e
AVR has three memory spaces: flash, ram, io

1643195845
ikskuh!~xq@2a0d:5940:6:163::ad7e
io is mapped/visible in ram, but has certain instructions that make stuff go faster

1643195860
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can put consts in either flash or ram

1643195867
ikskuh!~xq@2a0d:5940:6:163::ad7e
depending on what you want to do

1643195903
smeding!~roysmedin@167.71.77.228
ah, so it can't handle the different address spaces? i was wondering how it dealt with that but it's hard to find much information about how that even works in e.g. GCC

1643195932
smeding!~roysmedin@167.71.77.228
from what i could find i got the impression that the way they handled it was that they have a fake 24 bit address space where RAM is mapped to start at 0x800000

1643195958
smeding!~roysmedin@167.71.77.228
and i think various other things at say 0x810000

1643195997
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, the whole GCC toolchain is a horrible hack

1643196233
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig will get a proper address space support in stage2

1643196244
ikskuh!~xq@2a0d:5940:6:163::ad7e
where we can finally put and access variables in flash

1643196271
smeding!~roysmedin@167.71.77.228
oh, interesting

1643197510
smeding!~roysmedin@167.71.77.228
that said, from what i understand that's still months away — and judging from that avr-arduino-zig repo, the horrible hack does apparently at least work for zig too? would there be any problem with just writing code like that until something better becomes available?

1643197540
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can try that

1643197560
smeding!~roysmedin@167.71.77.228
with the caveat that i can't put constants in progmem etc.

1643197585
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1643197667
smeding!~roysmedin@167.71.77.228
i think i just have to put some blink code etc. together and look over the actual generated binary...

1643197672
ikskuh!~xq@2a0d:5940:6:163::ad7e
:)

1643197808
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1643197810
smeding!~roysmedin@167.71.77.228
does anyone have any recommendations for setting up interrupt vectors and register definitions and such? i'm pretty new to zig; no idea if there's already idiomatic ways of doing such things

1643197818
ikskuh!~xq@2a0d:5940:6:163::ad7e
how do i add constants to std.c? TCSA is missing

1643197832
ikskuh!~xq@2a0d:5940:6:163::ad7e
smeding: for AVR: use inline assembler or a separate assembly file

1643197840
ikskuh!~xq@2a0d:5940:6:163::ad7e
and a linker script that puts that assembly at the start of flash

1643197873
smeding!~roysmedin@167.71.77.228
yeah that's basically what i was thinking

1643197928
smeding!~roysmedin@167.71.77.228
vector table as assembly, export a default handler for them as a weak symbol somewhere, and let people register ISRs by doing their own export that overrides it

1643198030
freshcoffee!~fresh@user/freshcoffee
ikskuh: hmmm c/darwin and c/openbsd have it. I think that gets usingnamespace'd into c .. but c/linux doesn't have it, it seems to be in os/linux.zig which I don't think is usingnamespace'd to c

1643198041
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah yeah

1643198043
ikskuh!~xq@2a0d:5940:6:163::ad7e
just seen it as well

1643198050
ikskuh!~xq@2a0d:5940:6:163::ad7e
going to do the first PR of the year *grin*

1643198486
smeding!~roysmedin@167.71.77.228
ah, apparently there's jetbrains support for zig as well, must have missed that when i looked before. neat

1643203429
tsujp!~tsujp@sourcehut/user/tsujp
I have a question, "bindings" to RayLib from Zig would still use Raylib which is in C right? That removes the memory safety etc that Zig provides right?

1643203440
tsujp!~tsujp@sourcehut/user/tsujp
Here's a repo I found: https://github.com/Not-Nik/raylib-zig

1643204343
ifreund!2940d10f8b@user/ifreund
s/memory safety/type safety/

1643205065
tsujp!~tsujp@sourcehut/user/tsujp
Right but I don't understand how it's using Raylib if it's not got `cImport` anywhere and then whether or not it's _safe_ to use Raylib via Zig if Raylib is in C

1643205223
ifreund!2940d10f8b@user/ifreund
tsujp: all @cImport() does is translate C headers into zig code definig `extern` functions and types used on the ABI boundry

1643205252
ifreund!2940d10f8b@user/ifreund
river doesn't @cImport() for most of its c library usage either

1643205411
ifreund!2940d10f8b@user/ifreund
in fact, manually defining the extern functions/types can be safer as you can be more precise with the types 

1643205424
ifreund!2940d10f8b@user/ifreund
e.g. there's no need to use [*c] pointers

1643205477
ifreund!2940d10f8b@user/ifreund
what exactly are you worried about with regards to safety when using raylib? safety isn't binary and is made of up many different but related things

1643206102
tsujp!~tsujp@sourcehut/user/tsujp
Okay so manually defining the functions/types with extern and then using a builder Zig can understand that an attempt to call a function or use a type like that is an attempt to use one via the C ABI and thus it uses (in this case) Raylib? That completes the binding?

1643206125
tsujp!~tsujp@sourcehut/user/tsujp
Well, what is malloc in Raylib fails when used via Zig? Can I just `try` the same as I would normal Zig code?

1643206255
ifreund!2940d10f8b@user/ifreund
tsujp: an extern function definition tells the zig compiler that that symbol will be resolved at link time. So as long as you link raylib then it will compile fine

1643206286
ifreund!2940d10f8b@user/ifreund
as for memory allocation in raylib, that depends on whether raylib handles allocation failure or not. Some c libraries do, some don't

1643206301
ifreund!2940d10f8b@user/ifreund
regardless, you'd need a wrapper on the zig side to be able to use `try`

1643206331
tsujp!~tsujp@sourcehut/user/tsujp
So really the answer is no it's no safe? Just doing `extern` does not make using a C library or codebase safe in Zig

1643206337
tsujp!~tsujp@sourcehut/user/tsujp
no it's not safe*

1643206411
ifreund!2940d10f8b@user/ifreund
safe isn't binary, what do you mean by safe here?

1643206424
tsujp!~tsujp@sourcehut/user/tsujp
Exactly what I said

1643206443
ifreund!2940d10f8b@user/ifreund
linking C code to zig code in no way changes what the C code does

1643206454
ifreund!2940d10f8b@user/ifreund
how would it?

1643206488
tsujp!~tsujp@sourcehut/user/tsujp
I've rewatched the Localhost Zig talk and the example given was memory allocation, having to check for NULL return from malloc in C for example. So, given Raylib is in C and it uses memory it's going to be malloc'ing and free'ing things. If I use Raylib via Zig, why would I do that if it's not safe to do so? What advantage does that give? How

1643206488
tsujp!~tsujp@sourcehut/user/tsujp
complex would the wrapper have to be?

1643206531
tsujp!~tsujp@sourcehut/user/tsujp
Why not just use FFI if the inclusion of C into Zig is like that? I don't get it (yet)

1643206569
ifreund!2940d10f8b@user/ifreund
using FFI doesn't "make ralib safe" either

1643206583
tsujp!~tsujp@sourcehut/user/tsujp
I didn't say it does...

1643206596
ifreund!2940d10f8b@user/ifreund
what do you mean by "why not just use FFI then?

1643206604
tsujp!~tsujp@sourcehut/user/tsujp
I said why use cImport if you can use FFI instead where FFI will give you as safe a result as cImport or manually using extern

1643206624
ifreund!2940d10f8b@user/ifreund
what do you mean by FFI here?

1643206631
tsujp!~tsujp@sourcehut/user/tsujp
foreign function interface

1643206637
tsujp!~tsujp@sourcehut/user/tsujp
I can use C from Ruby, or Python etc

1643206655
ifreund!2940d10f8b@user/ifreund
so you're asking why use raylib from zig instead of some other language?

1643206708
ifreund!2940d10f8b@user/ifreund
Probably because you like the tradeoffs zig makes between performance, safety, and complexity

1643206781
tsujp!~tsujp@sourcehut/user/tsujp
No im asking how safe is using Raylib from Zig

1643206823
ifreund!2940d10f8b@user/ifreund
if there's a bug in raylib or if raylib doesn't handle allocation failure, using it from zig or any other language cannot prevent that. 

1643206826
tsujp!~tsujp@sourcehut/user/tsujp
I'm new, I don't understand what is very probably the huge mountain of idiosyncrasies here because you keep asking me "what do you mean by safe" but I'm not an expert, I cannot reply to that, I don't know. How safe is it. that's what I am asking.

1643206839
tsujp!~tsujp@sourcehut/user/tsujp
Right so `try` on an extern fucntion _won't_ work?

1643206842
ifreund!2940d10f8b@user/ifreund
no matter whether you use @cImport(), FFI, extern definitions or whatever

1643206861
koollman!~samson_t@user/koollman
tsujp: it's not more or less safe than using raylib from another language

1643206874
koollman!~samson_t@user/koollman
(in general)

1643206919
ifreund!2940d10f8b@user/ifreund
tsujp: If raylib for example returns NULL from some function on allocation failure, you can add a wrapper around that function in zig to return an error.OutOfMemory in zig in that case

1643206945
ifreund!2940d10f8b@user/ifreund
if raylib doesn't expose this information somehow in it's API there's nothing zig or any other language (including C) can do to change that

1643206959
koollman!~samson_t@user/koollman
the main point of calling a C lib from zig is to avoid writing more C. the 'unsafe/dangerous' part doesn't grow as much

1643207009
ifreund!2940d10f8b@user/ifreund
and to avoid rewriting useful code written in C

1643207045
ifreund!2940d10f8b@user/ifreund
For example, I'm not about to rewrite wlroots in zig, instead I contribute to wlroots upstream and use zig for my code

1643207375
tsujp!~tsujp@sourcehut/user/tsujp
Gotcha

1643207389
tsujp!~tsujp@sourcehut/user/tsujp
Yeah so I suppose I was confused on the scope of the problem that C interop was aiming to address

1643207399
tsujp!~tsujp@sourcehut/user/tsujp
Makes a lot of sense now that you've both explained and given an example

1643207401
tsujp!~tsujp@sourcehut/user/tsujp
Thank you :)

1643207466
ifreund!2940d10f8b@user/ifreund
no problem!

1643207536
Franciman!~Franciman@mx1.fracta.dev
i am thinking about writing a flex clone in zig

1643207547
tsujp!~tsujp@sourcehut/user/tsujp
What is flex?

1643207577
ikskuh!~xq@2a0d:5940:6:163::ad7e
flex is a parser generator

1643207579
Franciman!~Franciman@mx1.fracta.dev
an automatic lexer generator

1643207597
tsujp!~tsujp@sourcehut/user/tsujp
I see

1643207635
Franciman!~Franciman@mx1.fracta.dev
i don't know if i want to, though :D

1643207661
tsujp!~tsujp@sourcehut/user/tsujp
Perusing some random things from videos and what not the casing of function calls in zig seems inconsistent? `error.OutOfMemory` but `std.debug.assert` and not say `std.debug.Assert` or `std.Debug.Assert`. Stuff like `cImport` etc. Why not `error.out_of_memory` or some form of consistency there? Maybe it is consistent but coming into it now it

1643207661
tsujp!~tsujp@sourcehut/user/tsujp
doesnt appear that way yet

1643207686
ifreund!2940d10f8b@user/ifreund
OutOfMemory isn't a function call, it's an error name :P

1643207711
ifreund!2940d10f8b@user/ifreund
Style Guide: https://ziglang.org/documentation/master/#Names

1643207713
tsujp!~tsujp@sourcehut/user/tsujp
`@compileError`

1643207754
tsujp!~tsujp@sourcehut/user/tsujp
I see, thanks!

1643207759
tsujp!~tsujp@sourcehut/user/tsujp
Doe zigfmt enforce that yet?

1643207803
tsujp!~tsujp@sourcehut/user/tsujp
One of the things I'm liking is that there is a single, unconfigurable format for the source so we don't end up with 5 trillion different styles ala JS or C etc

1643207830
ifreund!2940d10f8b@user/ifreund
no, zig fmt doesn't enforce naming conventions as there are good reasons to break them on occasion

1643207849
ifreund!2940d10f8b@user/ifreund
e.g. when interfacing with established OS APIs that follow a different convention

1643207886
tsujp!~tsujp@sourcehut/user/tsujp
Would it not make sense to have a decorated statement there so that the enforced name scheme is ignored instead of never enforcing it to begin with?

1643207899
tsujp!~tsujp@sourcehut/user/tsujp
It'd also make it clearer without any other context why it's named as such

1643207916
ifreund!2940d10f8b@user/ifreund
I don't think that would be worth the complexity and verbosity

1643208516
jemius!~jemius@2a01:4f8:c0c:8564::1
Are tha parts of the zig stdlib dealing with strings and files stable? In the sense of being usable without much trouble

1643229827
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
 Does zig make any guarantees about struct layouts when two structs are defined identically?  e.g. if `struct { x: i32, y: u8 };` appears in two places with different names (or anonymously), is it safe to @bitCast between the two?

1643229905
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Within one build of course, external libraries etc that are being linked against I imagine would have to use packed or extern to make any layout guarantees.

1643229966
luuk!~luuk@user/luuk
No, the structs would have to be packed/extern.

1643230289
ikskuh!~xq@2a0d:5940:6:163::ad7e
tsmanner: you don't even have the guarantee in the same build

1643231065
andrewrk!~andrewrk@mail.ziglang.org
marler8997, your new benchmark is up on ziglang.org/perf with some backfilled data

1643231083
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
ikskuh That's what I assumed from luuk's answer, without using packed/extern, zig is perfectly happy rearranging things however is convenient in the current context.  Just curious, I've been working with a lot of Functional types recently (Dhall mostly) and they do consider identical type declarations to be the same

1643233900
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk nice!

