1643766971
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
dang just saw this article: https://thehackernews.com/2022/01/german-court-rules-websites-embedding.html

1643767020
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
a website I was recently working on uses google fonts, they would be violating this as well!  So I guess if you're website is used in the EU, you can't redirect clients to other servers?

1643767028
freshcoffee!~fresh@user/freshcoffee
so basically anything you link to. Some css stuff too?

1643767093
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah anything, if it makes the client send a packet to another server than that's a violation apparently

1643767126
koollman!~samson_t@user/koollman
marler8997_: so far germany and austria decided to be very strict about it. But, the general idea is that you shouldn't help non-gdpr compliant entities to gather data about eu citizens

1643767206
koollman!~samson_t@user/koollman
(it's not so much about redirecting to another server, than that other server belonging to a large data collector, really)

1643767208
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
lol, looks like the EU's own website violates GDPR by loading things from AWS/Freecaster

1643767222
andrewrk!~andrewrk@mail.ziglang.org
that rule sounds kind of excellent tbh

1643767271
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I can see the concern, but this is the first I've heard of it and it's already in affect?  There should be a long time period for everyone to switch to new mechanisms, this breaks sites ability to cached shared resources

1643767273
koollman!~samson_t@user/koollman
(austria's example: https://noyb.eu/en/austrian-dsb-eu-us-data-transfers-google-analytics-illegal ... as you can imagine, many websites are concerned)

1643767292
andrewrk!~andrewrk@mail.ziglang.org
shared resources can't be cached anyway because it opens users up to cache timing attacks 

1643767345
andrewrk!~andrewrk@mail.ziglang.org
https://blog.wesleyac.com/posts/why-not-javascript-cdn

1643767370
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oh

1643767494
koollman!~samson_t@user/koollman
marler8997_: why would it break anything ? Also you could host them on a cdn complying with european regulations about personal data. And the gdpr laws are from 2016, applicable in the EU since 2018, but the specific local adaptations/regulations are still being ironed out, I would say

1643767586
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
koollman I didn't realize it was just certain CDN's, so moving to compliant ones would be fine

1643767609
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
but I guess using CDN's in general is bad because of these cache timing attacks

1643767736
koollman!~samson_t@user/koollman
I wonder if this would be finally a reasonable application for ipfs usage, or something based on it, but a bit faster :)

1643767982
waleee!~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4
awwm the 32nd day of January disappeared (in the financial update-update)

1643768014
waleee!~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4
s/m//1

1643768197
andrewrk!~andrewrk@mail.ziglang.org
waleee, are you referring to https://ziglang.org/news/financials-update/ ?

1643768250
waleee!~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4
yes, it had 2022-01-32 as the date inside the article (I pinged loris about it)

1643768259
freshcoffee!~fresh@user/freshcoffee
is there any thread (public) that I can read about (uber & zig) ?

1643768269
andrewrk!~andrewrk@mail.ziglang.org
ah thanks for noticing the problem

1643768312
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, there is not

1643768323
waleee!~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4
uber & zig? Are they dipping their toes in un-go-ne waters?

1643768416
freshcoffee!~fresh@user/freshcoffee
i know at least one thing about uber -- they like tiny tiny binaries. They had some problems with going to swift on ios and the bloat it caused their app.

1643768540
andrewrk!~andrewrk@mail.ziglang.org
it's a support contract, means that ZSF agrees to tackle bugs having to do with `zig cc` in a timely fashion

1643768550
freshcoffee!~fresh@user/freshcoffee
that's awesome btw

1643768586
andrewrk!~andrewrk@mail.ziglang.org
:)

1643812551
koakuma!~koakuma@user/koakuma
Hi, I made a PR but it seems that the CI test failed because of a timeout. What should I do?

1643812552
koakuma!~koakuma@user/koakuma
https://github.com/ziglang/zig/pull/10757

1643818520
motiejus!~motiejus@2001:470:69fc:105::38fb
marler8997_: where are you based? Probably OT for this channel though

1643818732
Franciman!~Franciman@mx1.fracta.dev
i want to live in LeipZig

1643818736
ikskuh!~xq@v43666.php-friends.de
lol

1643818739
ikskuh!~xq@v43666.php-friends.de
not sure tho 

1643818779
Franciman!~Franciman@mx1.fracta.dev
why ikskuh 

1643818801
ikskuh!~xq@v43666.php-friends.de
it's Leipzig :D

1643818813
Franciman!~Franciman@mx1.fracta.dev
leipZig

1643818814
ikskuh!~xq@v43666.php-friends.de
it's a nice city, but very rightwing and conservative

1643818823
Franciman!~Franciman@mx1.fracta.dev
ah i see

1643818830
Franciman!~Franciman@mx1.fracta.dev
well tbf i wouldn't live in germany at all :P

1643818841
Franciman!~Franciman@mx1.fracta.dev
i wanted to just laugh at LeipZig

1643818846
Franciman!~Franciman@mx1.fracta.dev
but thanks for the info, i didn't know

1643819066
ifreund!2940d10f8b@user/ifreund
I don't think the whole city is, at least everyone I've met from leipzig has been the opposite of conservative 

1643819132
Franciman!~Franciman@mx1.fracta.dev
leipzig is the city of bach, right?

1643819162
Franciman!~Franciman@mx1.fracta.dev
nope

1643819166
ifreund!2940d10f8b@user/ifreund
ikskuh: uh https://0x0.st/oHE-.png

1643819191
Franciman!~Franciman@mx1.fracta.dev
grune

1643819193
Franciman!~Franciman@mx1.fracta.dev
:D

1643819201
ifreund!2940d10f8b@user/ifreund
more relavantly Die Linke

1643819213
Franciman!~Franciman@mx1.fracta.dev
what's that?

1643819215
ikskuh!~xq@v43666.php-friends.de
ifreund: that doesn't really mean much tho

1643819217
Franciman!~Franciman@mx1.fracta.dev
far right movements?

1643819224
ifreund!2940d10f8b@user/ifreund
no, the opposite

1643819227
ikskuh!~xq@v43666.php-friends.de
"Die Linke" is literally "The Left Wing Party"

1643819230
Franciman!~Franciman@mx1.fracta.dev
far left ?

1643819246
ikskuh!~xq@v43666.php-friends.de
depends on your definition of "far"

1643819251
ikskuh!~xq@v43666.php-friends.de
it's the workers party

1643819254
Franciman!~Franciman@mx1.fracta.dev
so we can agree that leipzig is a city of extremists :D?

1643819262
Franciman!~Franciman@mx1.fracta.dev
ah ok, that doesn't seem far

1643819275
ifreund!2940d10f8b@user/ifreund
I think this is pretty offtopic for #zig though

1643819300
Franciman!~Franciman@mx1.fracta.dev
we have #zig-offtopic , ifreund what about advising it?

1643819308
Franciman!~Franciman@mx1.fracta.dev
in the topic, i mean

1643819353
ifreund!2940d10f8b@user/ifreund
it's not official, #zig is

1643819406
Franciman!~Franciman@mx1.fracta.dev
oh, i thought zig didn't have a notion of official

1643819409
Franciman!~Franciman@mx1.fracta.dev
okok

1643819411
Franciman!~Franciman@mx1.fracta.dev
sorry

1643819468
ifreund!2940d10f8b@user/ifreund
this channel is one of the very few official things that exist

1643819482
ifreund!2940d10f8b@user/ifreund
alongside the website, github repo and mailing list

1643820068
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
motiejus, US, Idaho, why do you ask?

1643830929
andrewrk!~andrewrk@mail.ziglang.org
llvm made the release/14.x branch today

1643831467
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
Does this mean zig will do a new release soon?

1643831634
andrewrk!~andrewrk@mail.ziglang.org
0.9.1 soon

1643831648
andrewrk!~andrewrk@mail.ziglang.org
it may very well be months before llvm tags 14.0.0

1643832274
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ah I see

1643832275
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
cool

1643839653
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
curious, if you could have chosen any build system for LLVM (instead of CMAKE), which one would you have chosen?

1643839701
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I myself can't really think of any better options

1643839751
Earnestly!~earnest@user/earnestly
(make, with serious effort, see linux)

1643839813
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
Earnestly would you suggest windows users use the GNU version of make then?

1643839940
Earnestly!~earnest@user/earnestly
Since it's historical question; I would not care about Windows users.  They would have to find a way with cygwin/msys, don't really care

1643839984
Earnestly!~earnest@user/earnestly
But there probably isn't much better than cmake when windows needs to be included, I agree

1643840002
Earnestly!~earnest@user/earnestly
marler8997_: redo probably, hah

1643840013
andrewrk!~andrewrk@mail.ziglang.org
marler8997_, I'd remove python as a build dependency for starters

1643840035
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I remember redo, not sure why it didn't take off

1643840057
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk what would you replace the python depdendency with?

1643840066
andrewrk!~andrewrk@mail.ziglang.org
I think zig-without-llvm should have its own bootstrapping process, which will not involve cmake

1643840072
Earnestly!~earnest@user/earnestly
marler8997_: In many ways, ninja is essentially redo, but with single file and less flexibility

1643840083
Earnestly!~earnest@user/earnestly
But the core ideas of redo were adopted by them

1643840098
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ah I didn't realize that, very cool

1643840112
andrewrk!~andrewrk@mail.ziglang.org
marler8997_, I don't know what it's used for, but surely it can be replaced with a combination of posix shell, and build-time .c code that is compiled and executed as part of the build process

1643840144
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk sounds like a very "ziggy" solution :)

1643840156
Earnestly!~earnest@user/earnestly
If use of posix sh, redo can work with that

1643840163
Earnestly!~earnest@user/earnestly
As redo can be implemented in 'few' lines of it

1643840200
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I think "good solutions" have become synonymous with "ziggy solutions" for me at this point :)

1643840217
Earnestly!~earnest@user/earnestly
I believe apenwar's redo does this, to bootstrap itself: https://github.com/apenwarr/redo/tree/main/minimal

1643840227
Earnestly!~earnest@user/earnestly
Yes, is sh

1643840269
Earnestly!~earnest@user/earnestly
There is a thesis paper somewhere where they implemented redo in '50 lines of sh'

1643840286
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I recall that the way redo leveraged the shell was genius, only problem I had with it was it wouldn't work on Windows

1643840292
Earnestly!~earnest@user/earnestly
http://grosskurth.ca/papers/mmath-thesis.pdf

1643840315
Earnestly!~earnest@user/earnestly
Well, djb's probably was C.  The design is quite easy to accomodate in any language

1643840322
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I think I read that like 5 years ago

1643840467
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
LLVM's python dependency may not be so bad if we could implement a simple one in a small amount of code, wonder how big that would be?

1643840477
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
a simpler pythone interpreter that is

1643840496
Earnestly!~earnest@user/earnestly
marler8997_: I appreciate most that the design is essentially language agnostic, the commands are given arguments and expected to execute other commands but besides that nothing else is expected

1643840508
jemius!~imperator@200116b82d887f008c938151f21a6cb5.dip.versatel-1u1.de
Good luck. You have the issue of the C API binding many applications to CPython

1643840525
Earnestly!~earnest@user/earnestly
marler8997_: micropython?

1643840569
andrewrk!~andrewrk@mail.ziglang.org
marler8997_, the point is that you already depend on posix shell and a c compiler to build your compiler, so they're not *additional* dependencies that are needed only by the build system

1643840587
Earnestly!~earnest@user/earnestly
(This is why I like redo too)

1643840610
andrewrk!~andrewrk@mail.ziglang.org
would be neat to get rid of the posix shell dependency too as long as the instructions for the human to follow can be simple enough

1643840613
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk yeah that's a big win in my book, doesn't seem to bother other people though

1643840633
Earnestly!~earnest@user/earnestly
They don't bootstrap

1643840700
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
they could remove the dependency on python by including micropython in their source :)

1643840732
Earnestly!~earnest@user/earnestly
You should see if that even works, as jemius notes, cpython api

1643840734
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
Actually one technique that may work well is to implement a very simple shell in C and include the source for it in the repo

1643840751
Earnestly!~earnest@user/earnestly
marler8997_: Such an attempt: https://github.com/emersion/mrsh

1643840769
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
too big

1643840775
Earnestly!~earnest@user/earnestly
This /just/ posix sh

1643840782
Earnestly!~earnest@user/earnestly
And it's too big?  Indeed so

1643840797
Earnestly!~earnest@user/earnestly
marler8997_: Fwiw, samurai exists as C replacement for ninja, which is nice for bootstrapping

1643840818
Earnestly!~earnest@user/earnestly
marler8997_: And https://sr.ht/~lattis/muon/ for meson

1643840830
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I used this technique to write simple scripts in a project a while back, here's the shell source (it's in Dlang): https://github.com/symmetryinvestments/clrbridge/blob/master/minish.d

1643840879
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
someone implemented meson in C?

1643840880
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
wtf

1643840900
jemius!~imperator@200116b82d887f008c938151f21a6cb5.dip.versatel-1u1.de
wohoo. Meson on my PDP11 *_*

1643840902
Earnestly!~earnest@user/earnestly
marler8997_: That won't be posix sh naturally, but if you're thinking of making small dsls, the answer is probably lisp (janet maybe idk)

1643840928
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oh lisp, could you implement that in a couple hundred lines in Zig?

1643840930
Earnestly!~earnest@user/earnestly
marler8997_: There are two efforts: https://sr.ht/~bl4ckb0ne/boson/

1643840962
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oooo: https://github.com/matp/tiny-lisp/blob/master/tiny-lisp.c

1643840987
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
there you go, replace all python in LLVM with lisp and include this C file, done

1643841017
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I'll send them a patch

1643841022
andrewrk!~andrewrk@mail.ziglang.org
the problem is you still need to put instructions for executing and running the .c code

1643841060
Earnestly!~earnest@user/earnestly
It would only be something one does once

1643841060
andrewrk!~andrewrk@mail.ziglang.org
e.g. what make solves

1643841061
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
well I'm assuming this is all invoked internally, not called directly by user

1643841092
Earnestly!~earnest@user/earnestly
I don't want to give too many bad ideas, not sure what the goal precisely is

1643841125
andrewrk!~andrewrk@mail.ziglang.org
goal is to make it as simple and portable as possible to bootstrap zig

1643841145
andrewrk!~andrewrk@mail.ziglang.org
you should be able to bootstrap zig on a hobby OS

1643841266
ravella!~ravella@user/ryanavella
I'm cool with make, but I'll feel icky if I have to type `gmake` ;)

1643841294
Earnestly!~earnest@user/earnestly
I assume bootstrap will assume assembler already exists, at least

1643841349
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I know, let's write a python to brainfuck interpreter, then in zig-bootstrap we'll just convert all the python in LLVM to brainfuck

1643841387
Earnestly!~earnest@user/earnestly
marler8997_: it was seriously considered for using bf as cpu instruction set

1643841407
Earnestly!~earnest@user/earnestly
(To the degree that can be serious)

1643841443
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
you mean like an LLVM backend?

1643841527
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/shinh/elvm

1643841573
Earnestly!~earnest@user/earnestly
marler8997_: Do you know about gcc's hex0 hex1 hex2, etc?  https://bootstrappable.org/

1643841591
andrewrk!~andrewrk@mail.ziglang.org
here's a C compiler in brainfuck: http://shinh.skr.jp/elvm/8cc.c.eir.bf

1643841627
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
whoa

1643841641
Earnestly!~earnest@user/earnestly
marler8997_: https://git.savannah.nongnu.org/cgit/stage0.git/tree/ starts here

1643841666
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
Earnestly that page you sent me says binaries aren't auditable, but that's what I've been doing the last couple weeks with Windows binaries and the go runtime assembly!

1643841853
Earnestly!~earnest@user/earnestly
It might be reasonable to assume C (89/99) is available

1643841896
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
elvm needs to add a zig frontend

1643841939
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
so, we could compile the zig compiler to C, Use elvm to compile it to Brainfuck, then you can bootstrap zig with a branfuck interpreter

1643841956
Earnestly!~earnest@user/earnestly
marler8997_: E.g. if you assume C, then you have https://www.gnu.org/software/mes/

1643841976
Earnestly!~earnest@user/earnestly
Or https://github.com/oriansj/m2-planet apparently

1643842014
Arnavion!arnavion@user/arnavion
andrewrk: Ping again for reviewing   https://github.com/ziglang/zig/pull/10395

1643842077
andrewrk!~andrewrk@mail.ziglang.org
Arnavion, tab opened. thanks

1643842135
Arnavion!arnavion@user/arnavion
Thanks

1643842281
andrewrk!~andrewrk@mail.ziglang.org
looks fine to me, will merge if tests pass

1643842318
Arnavion!arnavion@user/arnavion
Any way to avoid the two hacks I made comments for?

1643842347
andrewrk!~andrewrk@mail.ziglang.org
um the hacks were basically avoiding integer underflow right? or were they avoiding compiler bugs

1643842494
andrewrk!~andrewrk@mail.ziglang.org
idk I don't really understand your explanation of the hacks tbh but they look benign

1643842630
andrewrk!~andrewrk@mail.ziglang.org
you know about @intCast right?

1643842753
Arnavion!arnavion@user/arnavion
Let me check the errors without the hacks. It's been a while, and I need to rebase (locally) onto 0.9 because 0.10-dev is broken for some unrelated reason

1643843128
Arnavion!arnavion@user/arnavion
Okay, so let's say the each mask is a u64. So MaskInt is u64, mask_len is 64, ShiftInt is u6. end_bit is also a u6. For the first one, `mask_len - end_bit` needs to fit in a ShiftInt, and the compiler complains that it won't, because mask_len itself won't fit in a ShiftInt. But based on the code flow, end_bit will be >= 1 at that point, so the result will fit

1643843180
Arnavion!arnavion@user/arnavion
mask_len itself can't be @intCast(ShiftInt)'d, because that legitimately won't fit. And the whole subtraction can't be @intCast'd either, because the compiler still complains about mask_len itself being too big

1643843217
Arnavion!arnavion@user/arnavion
So the `(mask_len - 1) - (end_bit - 1)` thing is hack for that

1643843283
Earnestly!~earnest@user/earnestly
marler8997_: https://github.com/leahneukirchen/redo-c

1643843317
Arnavion!arnavion@user/arnavion
The second one has the same problem, except this time even (the equivalent of) `mask_len - 1` doesn't compile, because the compiler things MaskInt can be a u0, even though based on the code flow that line will never get executed if MaskInt is a u0

1643843353
andrewrk!~andrewrk@mail.ziglang.org
I don't know what you mean by "it thinks MaskInt can be a u0"

1643843368
andrewrk!~andrewrk@mail.ziglang.org
MaskInt will be a specific type that is not u0

1643843389
Arnavion!arnavion@user/arnavion
No, it's allowed to be a u0. There are even tests for it

1643843407
Arnavion!arnavion@user/arnavion
It would be a pointless set, but it's allowed to be constructed

1643843409
andrewrk!~andrewrk@mail.ziglang.org
it will not be u0 on that line because you have an early return for u0 above

1643843419
Arnavion!arnavion@user/arnavion
Yes, that's my point. The compiler isn't realizing that

1643843429
andrewrk!~andrewrk@mail.ziglang.org
I don't know why you say this

1643843440
andrewrk!~andrewrk@mail.ziglang.org
try @compileLog(MaskInt) and see what it says

1643843482
Arnavion!arnavion@user/arnavion
./lib/std/bit_set.zig:127:100: error: integer value 1 cannot be coerced to type 'u0' / mask &= std.math.boolMask(MaskInt, true) >> (@bitSizeOf(MaskInt) - 1) - (end_bit - 1);

1643843482
andrewrk!~andrewrk@mail.ziglang.org
the compiler always knows what the type of something is. there is never a "might be this type or another type" situation

1643843724
andrewrk!~andrewrk@mail.ziglang.org
what is MaskInt in this case?

1643843916
Arnavion!arnavion@user/arnavion
Ah, the error span is on the 1 of the `end_bit - 1`, not of `@bitSizeOf(MaskInt) - 1`. It's the case where ShiftInt is a u0, and MaskInt is a u1

1643844072
Arnavion!arnavion@user/arnavion
So in this case, bit_length will be 1, range.end will have already been asserted to be <= 1 so it's either 0 or 1. If it's 0 then the early return of range.start == range.end would've caught it. If it's 1 then it won't enter this `if` at all

1643844094
andrewrk!~andrewrk@mail.ziglang.org
sounds like you could improve the code with @intCast and a comment

1643844118
Arnavion!arnavion@user/arnavion
I explained the problem with @intCast above

1643844297
andrewrk!~andrewrk@mail.ziglang.org
the explanation didn't make sense to me

1643844380
Arnavion!arnavion@user/arnavion
Then please suggest how you'd like me to use @intCast in either of the two cases

1643844430
andrewrk!~andrewrk@mail.ziglang.org
I don't really understand your explanation of the hacks but they look benign. I don't have any requests from you; I approved the PR

1643844455
andrewrk!~andrewrk@mail.ziglang.org
just trying to answer your question, "Any way to avoid the two hacks I made comments for?"

1643844489
andrewrk!~andrewrk@mail.ziglang.org
do you feel the code is correct?

1643844622
Arnavion!arnavion@user/arnavion
Yes, the code is functionally correct, for all the sizes of masks and shifts and whatnot

1643844650
Arnavion!arnavion@user/arnavion
I made sure of that, the existing tests already cover all the sizes that could have had problems

1643844658
andrewrk!~andrewrk@mail.ziglang.org
then there's no problem. the optimizer can probably figure out the math, and it's got test coverage. a human can maybe someday improve the "cleanliness" of the logic, or not, it doesn't really matter

1643844699
Arnavion!arnavion@user/arnavion
Okay. I'll keep trying on my end to see as well if there's any cleaner ways to do it

