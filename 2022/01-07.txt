1641514895
kragacles!~kragacles@rebonack.apastron.co
Got it running by swapping the CURL enums with the numeric int values, but would love to learn more, tkx for any info.

1641524649
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
kragacles: translate-c translates enums into c_ints, so use cURL.CURLE_OK I think

1641526348
kragacles!~kragacles@rebonack.apastron.co
ahh, many thanks!

1641531489
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
& and | are bitwise and and or, right?

1641531535
Arnavion!arnavion@user/arnavion
https://ziglang.org/documentation/master/#Table-of-Operators

1641584951
Seng!~nick@hurtig.ninja
Can I do something like `" " ** 8` to get a string 8 spaces wide?

1641584973
ikskuh!~xq@v43666.php-friends.de
" ".* ** 8

1641585063
Seng!~nick@hurtig.ninja
<3

1641585074
Seng!~nick@hurtig.ninja
And with 8 being a variable?

1641585253
ifreund!2940d10f8b@user/ifreund
sure, as long as it's comptime known

1641585374
Seng!~nick@hurtig.ninja
It is unfortunately not possible :)

1641585400
Arnavion!arnavion@user/arnavion
It has to be a string of a single char for that to work, so might as well write   ' ' ** 8

1641585437
ikskuh!~xq@v43666.php-friends.de
Seng: do you know the upper bound?

1641585451
ikskuh!~xq@v43666.php-friends.de
Arnavion: you can use "rofl".* ** 10

1641585520
Seng!~nick@hurtig.ninja
ikskuh, I could calculate it on beforehand, but I'm lazy an spoiled from higher-level languages :P

1641585538
ifreund!2940d10f8b@user/ifreund
Arnavion: that won't give you want you want, ' ' is a comptime_int

1641585551
Arnavion!arnavion@user/arnavion
Huh, so you can. How does that even work

1641585562
ikskuh!~xq@v43666.php-friends.de
Arnavion: it's comptime repetition

1641585577
ikskuh!~xq@v43666.php-friends.de
there is no runtime computation involved, so it basically works like any scripting language

1641585582
Arnavion!arnavion@user/arnavion
I know what the ** 10 is

1641585602
ikskuh!~xq@v43666.php-friends.de
i was more focues on the "comptime"

1641585602
Arnavion!arnavion@user/arnavion
I'm talking about the fact that it's flattening the "rofl".* when repeating it

1641585615
ikskuh!~xq@v43666.php-friends.de
what do you mean by flattening?

1641585620
ikskuh!~xq@v43666.php-friends.de
the output is "roflroflroflroflâ€¦"

1641585774
Arnavion!arnavion@user/arnavion
Oh right, I forgot **'s LHS is an array, not the array element

1641585795
Arnavion!arnavion@user/arnavion
And for that reason   "rofl" ** 10   also works, which makes sense

1641585804
Seng!~nick@hurtig.ninja
ikskuh, The upper bound is 60

1641585876
ikskuh!~xq@v43666.php-friends.de
Seng: this is easy then :)

1641585888
ikskuh!~xq@v43666.php-friends.de
(" ".* ** 60)[0..runtime_len]

1641585909
Seng!~nick@hurtig.ninja
ohh, nice trick!

1641585924
Arnavion!arnavion@user/arnavion
Don't need the .*

1641585982
ikskuh!~xq@v43666.php-friends.de
oh. that didn't work for some time ^^

1641585988
ikskuh!~xq@v43666.php-friends.de
ACTION is oldschool

1641586005
Arnavion!arnavion@user/arnavion
Yeah, I guess it's coercing automatically now

1641586034
C2H5OH!~ijurado@131.red-88-1-66.dynamicip.rima-tde.net
I have recently read this: https://kristoff.it/blog/maintain-it-with-zig/ and I'm interested on using Zig's C compiler capabilities for easy cross compilation.  However, I was wondering what will happen to the C/C++ compatibility in the new self-hosted compiler.  Will Zig still be able to build C code from the self-hosted compiler?  Also, by not relying on LLVM, isn't Zig losing some ASM optimization

1641586036
C2H5OH!~ijurado@131.red-88-1-66.dynamicip.rima-tde.net
opportunities?

1641586109
ikskuh!~xq@v43666.php-friends.de
the idea is to keep LLVM as the "optimizer backend"

1641586126
ikskuh!~xq@v43666.php-friends.de
so both C/C++ compilation and the well optimized optimizer will stay 

1641586174
C2H5OH!~ijurado@131.red-88-1-66.dynamicip.rima-tde.net
I see.  Perhaps I should search again, but I remember reading somthing about directly doing code generation from the Zig toolchain, bypassing LLVM.

1641586276
ikskuh!~xq@v43666.php-friends.de
yes, this is implemented right now in the self-hosted compiler

1641586290
ikskuh!~xq@v43666.php-friends.de
you will get a "blazing fast builds" or "blazing fast executables" mode

1641586310
luuk!~luuk@user/luuk
C2H50H: Zig will have different backends, LLVM being one of them. That means you can compile to x86_64 directly using the selfhosted backend, but you can also opt-in to use LLVM instead. (Where LLVM is the default for release modes)

1641586349
C2H5OH!~ijurado@131.red-88-1-66.dynamicip.rima-tde.net
riiiiight, I think that's wat got me confused

1641586363
C2H5OH!~ijurado@131.red-88-1-66.dynamicip.rima-tde.net
that LLVM would become an *optional* component

1641586767
C2H5OH!~ijurado@131.red-88-1-66.dynamicip.rima-tde.net
thanks :-)

1641590408
Seng!~nick@hurtig.ninja
I've spent two evenings trying to solve a puzzle in AoC, just to finde it was a copy-paste error. My solution was actually correct.

