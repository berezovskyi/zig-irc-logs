1644969689
andrewrk!~andrewrk@mail.ziglang.org
can you confirm the environment variable made it to the zig process?

1644969710
andrewrk!~andrewrk@mail.ziglang.org
I just double checked the code paths and it's not possible to get that message if ZIG_LIBC env var is provided

1644969736
cCCCCcccccCCc!~b@user/ccccccccccccc
The build tool that calls zig exports it and if something tries to call 'cc' directly, it's a shell wrapper that exports ZIG_LIBC and then calls 'zig cc'. 

1644969749
cCCCCcccccCCc!~b@user/ccccccccccccc
So I'm fairly positive it's covered. 

1644969757
cCCCCcccccCCc!~b@user/ccccccccccccc
But yes, I guess I can dig deeper into that.

1644969778
andrewrk!~andrewrk@mail.ziglang.org
alright so both of us have eyeballed the code and don't see how this is happening. so the next step would be to dive deeper and debug where the unexpected thing is happening

1644969793
cCCCCcccccCCc!~b@user/ccccccccccccc
Yeah, I'll do that, I believe you. 

1644969816
andrewrk!~andrewrk@mail.ziglang.org
but yeah supplying ZIG_LIBC is the intended solution to this problem

1644969869
cCCCCcccccCCc!~b@user/ccccccccccccc
Thanks!

1644969971
andrewrk!~andrewrk@mail.ziglang.org
if you happen to have a debug build of the compiler I could tell you a line to put a breakpoint on, which if hit, the stacktrace would reveal the bug

1644970682
cCCCCcccccCCc!~b@user/ccccccccccccc
andrewrk: Simply having confirmation that ZIG_LIBC is the intended solution is enough for me right now, otherwise I'd have to build a debug build and such yeah. Thanks, tho!

1644972368
cCCCCcccccCCc!~b@user/ccccccccccccc
andrewrk: I was able to fix it on my end, thanks again! :D

1644972392
andrewrk!~andrewrk@mail.ziglang.org
you're welcome. if you don't mind me asking, what was the issue? maybe I can help someone else if they hit the same problem

1644974321
cCCCCcccccCCc!~b@user/ccccccccccccc
andrewrk: Strictly my own issue, ZIG_LIBC wasn't getting exported in one specific spot. 

1644974366
cCCCCcccccCCc!~b@user/ccccccccccccc
btw, thank you very much for how nice zig-bootstrap is. Was easy to slice it up into something to build a chroot with busybox, musl and make. 

1644974454
cCCCCcccccCCc!~b@user/ccccccccccccc
andrewrk: Strictly my own issue, ZIG_LIBC wasn't getting exported in one specific spot.

1644974457
andrewrk!~andrewrk@mail.ziglang.org
glad it was useful

1644974465
cCCCCcccccCCc!~b@user/ccccccccccccc
oops, bouncer issue. 

1644981072
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, where are the docs for the ci system again? I forgot

1644981081
andrewrk!~andrewrk@mail.ziglang.org
I'm trying to update the CI tarballs 

1644981098
andrewrk!~andrewrk@mail.ziglang.org
ah, found the zig-ci repo

1644981284
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, how do we update CI tarballs on ci.ziglang.org?

1644981419
freshcoffee!~fresh@user/freshcoffee
the zig+llvm, qemu and wasmtime stuff?

1644981439
freshcoffee!~fresh@user/freshcoffee
it goes right into docker image: https://github.com/ziglang/zig-ci/blob/main/docker/debian-amd64-11.1.md

1644981492
andrewrk!~andrewrk@mail.ziglang.org
is there a way to set it up so that I don't have to touch docker in order to update the CI tarballs?

1644981504
andrewrk!~andrewrk@mail.ziglang.org
this is way less convenient than bumping 0.9.0 to 0.9.1 in a script

1644981615
freshcoffee!~fresh@user/freshcoffee
whatever your preference is, I can help work towards that. Currently it bundles things to avoid fetch via curl and extract for each ci-run. I think it should be straight forward to place the deps on local host and grab them via scp (or curl but we'd need to start http server for that)

1644981666
andrewrk!~andrewrk@mail.ziglang.org
I'm looking at these directions but I don't know what to do

1644981744
andrewrk!~andrewrk@mail.ziglang.org
I'm just trying to do the equivalent of this for the linux ci: https://github.com/ziglang/zig/commit/65cb8a03ee616a952fa18f682b46612ba859a792

1644981829
freshcoffee!~fresh@user/freshcoffee
hmm ok you can flip the switch in the linux ci script to do all that. The curent debian docker image will then simply not use image-embedded (extracted) tarballs

1644981916
freshcoffee!~fresh@user/freshcoffee
sorry for splitting the ci/zinc/linux*.sh files up. I think it would be better to have 1 script, and use a switch statement. but never got around to consolodating it yet.

1644981940
andrewrk!~andrewrk@mail.ziglang.org
what switch to flip are you talking about?

1644982019
freshcoffee!~fresh@user/freshcoffee
my misleading words sorry, meant conceptually. anyhow, ci/zinc/linux_build.sh would have to put back the `wget` and `tar xf` stuff that was removed.

1644982033
andrewrk!~andrewrk@mail.ziglang.org
wait these instructions are to create a docker image? why doesn't it use a docker file?

1644982063
andrewrk!~andrewrk@mail.ziglang.org
am I supposed to do SETUP and then ZIG-BOOTSTRAP? or are those two competing things?

1644982175
Rokkuman!~mega4453@201.248.193.65
andrewrk: So hey! I have a question for you. So in this stream of yours (https://www.youtube.com/watch?v=pq1XqP4-qOo) you were showcasing Zig for the purposes of a portable binary that'd run across many Linux distros. I was wondering what colorscheme were you using on that vim setup of yours? (Seems like Ayu Dark?)

1644982191
freshcoffee!~fresh@user/freshcoffee
because dockerfile doesn't let you do a local mount, from which to download, and extract the tarballs. but this is moot if not needed anymore, and I think dockerfile could then be used again.

1644982320
freshcoffee!~fresh@user/freshcoffee
the SETUP is to create a single-purpose docker image to do a ci-run . But generically, I could be used as a basis to build ZIG-BOOTSTRAP.  I hope I understand your question properly.

1644982337
freshcoffee!~fresh@user/freshcoffee
s/I/it could be used/

1644982460
andrewrk!~andrewrk@mail.ziglang.org
ok I think I understand, let me try following these directions

1644982482
andrewrk!~andrewrk@mail.ziglang.org
Rokkuman, it's https://github.com/haze/sitruuna.vim

1644982572
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, why does the image need i386 stuff?

1644982590
freshcoffee!~fresh@user/freshcoffee
i386 is run during zig test suite natively

1644982600
Rokkuman!~mega4453@201.248.193.65
andrewrk: Thanks! Additionally, any fonts you might recommend for programming in Zig? (or in general)

1644982603
andrewrk!~andrewrk@mail.ziglang.org
I see thanks

1644982648
freshcoffee!~fresh@user/freshcoffee
the massively useless error we'd get is.. "FileNotFound" because the i386 dynamic linker is not installed

1644982676
freshcoffee!~fresh@user/freshcoffee
s/linker/loader/

1644982813
andrewrk!~andrewrk@mail.ziglang.org
should I bump debian-amd64:11.1-0  to debian-amd64:11.1-1?

1644982847
freshcoffee!~fresh@user/freshcoffee
(was just typing that).. use tag 11.1-3 (current one ala `docker image list` shows as 11.1-2 . you'll need to bump the yaml accordingly.

1644982852
andrewrk!~andrewrk@mail.ziglang.org
Rokkuman, nope, I don't really have any font preferences. I don't mess with my set up very often, you'd get better answers from asking probably anyone else from the entire internet than me

1644982890
andrewrk!~andrewrk@mail.ziglang.org
what yaml?

1644982892
freshcoffee!~fresh@user/freshcoffee
drone.yml has 4 image references. should all be identical.

1644982896
andrewrk!~andrewrk@mail.ziglang.org
ok yeah

1644982898
andrewrk!~andrewrk@mail.ziglang.org
thanks

1644982934
andrewrk!~andrewrk@mail.ziglang.org
I didn't know you could export a one-off docker container. that's pretty nifty

1644982942
Rokkuman!~mega4453@201.248.193.65
andrewrk, Oh! Ok then, still, thanks once again for answering my questions 

1644982949
andrewrk!~andrewrk@mail.ziglang.org
happy hacking

1644982956
freshcoffee!~fresh@user/freshcoffee
docker is crazy flexible. but Dockerfile should be shot. :)

1644983032
freshcoffee!~fresh@user/freshcoffee
another approach in future could be... bring up container based on debian image. manage /deps/local to your satisfaction. exit and export again.

1644983093
andrewrk!~andrewrk@mail.ziglang.org
that experience of updating was OK. I might take the liberty to add some more explanation to the docs for stuff that I was confused about at first

1644983117
freshcoffee!~fresh@user/freshcoffee
liberty away!

1644983256
freshcoffee!~fresh@user/freshcoffee
re: ZIG-BOOTSTRAP. I see what you were asking now. That's orthogonal to building the ci-run image. I just recording the steps I took to use our image to build zig-bootstrap. Definately needs some explanation there.

1644983382
freshcoffee!~fresh@user/freshcoffee
afk 10 mins

1644987444
andrewrk!~andrewrk@mail.ziglang.org
I think zig's stage1 bootstrapping strategy end game should be that there is no cmake and no make. 

1644987466
andrewrk!~andrewrk@mail.ziglang.org
instead you are instructed to do: `cc -o zig1 zig1.c` and then `zig1 build`

1644987550
andrewrk!~andrewrk@mail.ziglang.org
this would be much easier on windows

1644988255
freshcoffee!~fresh@user/freshcoffee
what does zig1 do? does it launch sub cc processes to build the rest of .c and .cpp and link?

1644988755
andrewrk!~andrewrk@mail.ziglang.org
zig1 is zig stage1

1644988789
andrewrk!~andrewrk@mail.ziglang.org
it doesn't do anything special, it's just zig

1644990885
cCCCCcccccCCc!~b@user/ccccccccccccc
Rokkuman: https://www.programmingfonts.org/ <-- Useful site 

1644991247
Rokkuman!~mega4453@201.248.193.65
Thanks! I'll keep it bookmarked 

1644991341
Rokkuman!~mega4453@201.248.193.65
For now I've settled with using Iosevka (SS07) if anyone's curious, currently loving it! 

1644991631
freshcoffee!~fresh@user/freshcoffee
ah narrow font. Almost like `pr#80` mode on Apple ][+ :)

1644991869
Rokkuman!~mega4453@201.248.193.65
freshcoffee: Personally liking how readable and fancy it is (Iosevka SS07 I mean). You also like narrow fonts? 

1644991910
freshcoffee!~fresh@user/freshcoffee
I haven't tried programming with narrow in a very long time, but may try again soon.

1644992068
Rokkuman!~mega4453@201.248.193.65
Good luck! For narrow fonts, I recommend, well, Iosevka once more and the Sudo font, the latter being a bit of an underrated one 

1644998168
daurn!~daurnimat@vultr.daurnimator.com
andrewrk: did you look at my failed build log from yesterday at all?

1644998289
andrewrk!~andrewrk@mail.ziglang.org
no, I'm not sure what you're referencing

1644998336
daurn!~daurnimat@vultr.daurnimator.com
http://sprunge.us/2yuzFv 

1644998379
daurn!~daurnimat@vultr.daurnimator.com
That's trying to run `./zig build test` in a clean chroot (packaging new 0.9.1 release for archlinux)

1644998440
freshcoffee!~fresh@user/freshcoffee
fyi I got the same fail. It's during test-stage2 in the 1/66 part where some N/800 or so sub tests are run.

1644998448
daurn!~daurnimat@vultr.daurnimator.com
yep

1644998449
freshcoffee!~fresh@user/freshcoffee
(on archlinux). haven't tried on macos.

1644998514
freshcoffee!~fresh@user/freshcoffee
also odd, my experience was if you run in interactive terminal, there's some extra detail emitted, but I couldn't really tell if it was related to the actual FAIL. running in batch (capturing to log file) didn't show the same output.

1645000860
andrewrk!~andrewrk@mail.ziglang.org
stage2 isn't really shipped yet, so it's safe to ignore that failure

1645000897
andrewrk!~andrewrk@mail.ziglang.org
pretty sure I cherry picked a linker fix that included a test case that required other changes that didn't make the 0.9.x branch 

1645001042
andrewrk!~andrewrk@mail.ziglang.org
unrelated: I have a change to the CI for windows that removes the dependency on MSVC, and does not add a dependency on msys2, instead relying on zig 0.9.1 zip file that has llvm libs in it

1645001071
andrewrk!~andrewrk@mail.ziglang.org
and it's resilient to breaking zig changes

1645011577
daurn!~daurnimat@vultr.daurnimator.com
"ignore that failure" => how? there is no e.g. `./zig build test -Dtest-filter`, so I have no way to disable a specific test

1645011594
daurn!~daurnimat@vultr.daurnimator.com
someone mentioned elsewhere that https://github.com/ziglang/zig/issues/10765 might be the fix: should I cherry pick that? 

1645011635
daurn!~daurnimat@vultr.daurnimator.com
uh 10769 is the fix for 10765; which may be the same issue I reported. I haven't looked closely enough yet

1645017816
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
I experience awkward behavior with the neovim-Plugin. When I add 0x to the color-code in line 34, then press ESC and then :w, the entire enum from lines 31 to 35 gets formatted into a one-liner.

1645017817
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
https://pastebin.com/LtSsnSA5

1645017883
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
Does Zig enforce a certain way of formatting?

1645017899
plumeus!~plumeus@user/plumeus
`zig fmt`?

1645017949
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
plumeus, I don't call zig fmt. Andrew's plugin does that automatically when saving. https://github.com/ziglang/zig.vim

1645017981
plumeus!~plumeus@user/plumeus
Doesn't that use `zig fmt`?

1645018010
plumeus!~plumeus@user/plumeus
>This plugin enables automatic code formatting on save by default using zig fmt.

1645018023
luuk!~luuk@user/luuk
When you add a trailer comma, 'zig fmt' will not format it to a one-liner.

1645018049
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
luuk, that's what I am surprised about. Because it never formatted anything previously

1645018144
luuk!~luuk@user/luuk
I have no experience with NeoVim, but the zig fmt behavior hasn't changed with that regard

1645018147
plumeus!~plumeus@user/plumeus
https://github.com/ziglang/zig/wiki/FAQ#how-do-i-make-zig-fmt-skip-a-range-of-source-lines if you want to explicitly turn off bits.

1645018157
plumeus!~plumeus@user/plumeus
also, `0000ff` isn't a valid number, right?

1645018178
plumeus!~plumeus@user/plumeus
I don't think `zig fmt` works if there's some syntax errors.

1645018219
plumeus!~plumeus@user/plumeus
everyone becomes one line for me if it's changed to `0x0000ff`.

1645018248
luuk!~luuk@user/luuk
Correct, it essentially parses the source code into an AST, and then formats it into the conanical form based on that. So if any errors were found during parsing, it will emit those, rather than format the source.

1645018410
plumeus!~plumeus@user/plumeus
oh wait, I totally misunderstood what was being said, my bad.

1645018425
plumeus!~plumeus@user/plumeus
I use Neovim too, and I can confirm that behavior hasn't changed.

1645018447
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
It seems to me zig fmt doesn't break a very long enum into lines if it does not end with ','

1645018461
plumeus!~plumeus@user/plumeus
That's intentional

1645018462
luuk!~luuk@user/luuk
Correct

1645018473
luuk!~luuk@user/luuk
zig fmt has no opinions about line length

1645018495
plumeus!~plumeus@user/plumeus
If you have a trailing comma, it breaks the list by the smallest number of individual arguments

1645018512
plumeus!~plumeus@user/plumeus
so, if you have a trailing comma and each line has two items, it'll make a nice row of 2 items

1645018555
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
So there is some sort of formatting standard built into the language itself, but not as strict as in Go, right? Is there a list of things what `fmt` does?

1645018584
plumeus!~plumeus@user/plumeus
It's as strict as Go.

1645018610
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
cool

1645018632
plumeus!~plumeus@user/plumeus
There are no formatting options, and the only control you really have over it is that you can turn it off explicitly

1645018716
plumeus!~plumeus@user/plumeus
Not aware of any place that has all the formatting behavior listed.

1645018763
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
So it seems it doesn't even allow me to have 2 empty lines between functions

1645018769
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
no me gusta

1645018804
jemius!~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de
But I can have lines which are 400 chars wide

1645018855
plumeus!~plumeus@user/plumeus
Enforcing line width would probably not be the easiest task.

1645020852
ifreund!2940d10f8b@user/ifreund
Hmm, how do I use a Vector(8, u32) as the rhs of a <<?

1645020871
ifreund!2940d10f8b@user/ifreund
I can't bitcast it to a Vector(8, u5) as that has a different size

1645020906
ifreund!2940d10f8b@user/ifreund
but I know for a fact that the u32s I want to shift by are in the range 0 to 2^5 - 1

1645020914
ifreund!2940d10f8b@user/ifreund
Am I missing something or is this a design flaw

1645021134
plumeus!~plumeus@user/plumeus
If you know they are within u5, can you not just make them as a Vector(8, u5) in the first place? Or iterate over the vector?

1645021269
ifreund!2940d10f8b@user/ifreund
no, because the Vector(8, u32) is the result of a previous >> operation

1645021338
ifreund!2940d10f8b@user/ifreund
iterating over the vector would kinda kill the poind of using SIMD in the first place

1645021440
plumeus!~plumeus@user/plumeus
hmm, so maybe there should be some operator that functions as a bitshift left, but doesn't have type checking?

1645021602
ifreund!2940d10f8b@user/ifreund
I don't know what the right fix is here. Another possibility would be to add the ability to have padding between the lanes in vector types

1645021657
ifreund!2940d10f8b@user/ifreund
which could then allow casting between Vector(8, u32) and a hypothetical Vector(8, u5) with 32 bit lanes

1645021687
ifreund!2940d10f8b@user/ifreund
s/padding between the lanes/explicit lane width/

1645022285
ifreund!2940d10f8b@user/ifreund
@intCast(meta.Vector(8, u5), my_vec_of_8_u32s)) seems to work

1645022296
ifreund!2940d10f8b@user/ifreund
haven't actually tested the code yet though

1645022362
plumeus!~plumeus@user/plumeus
huh, @intCast is more competent than I thought.

1645026797
ifreund!2940d10f8b@user/ifreund
what I was working on if anyone's curious: https://godbolt.org/z/7czPvhden

1645026820
ifreund!2940d10f8b@user/ifreund
the C code is the sample code from this paper: https://arxiv.org/pdf/2101.01719.pdf

1645026842
Franciman!~Franciman@mx1.fracta.dev
what i sit?

1645026844
Franciman!~Franciman@mx1.fracta.dev
is it

1645026857
Franciman!~Franciman@mx1.fracta.dev
oh bloom filter variant

1645026874
Franciman!~Franciman@mx1.fracta.dev
cool

1645027702
motiejus!~motiejus@2001:470:69fc:105::38fb
Related: if anyone writes a perfect hash function in zig, hit me up :) now I am using bdz from cmph, and that's the only thing I am using that requires C bindings

1645027718
motiejus!~motiejus@2001:470:69fc:105::38fb
Bloom filter is *quite close*

1645043870
andrewrk!~andrewrk@mail.ziglang.org
jemius, the only thing I did in that vim plugin was the original syntax file, which isn't even used anymore. I'm barely even a maintainer of that repo

1645043882
andrewrk!~andrewrk@mail.ziglang.org
I'm definitely a user though

1645044884
andrewrk!~andrewrk@mail.ziglang.org
ifreund, how's the generated code for the intcast u5 on the vector?

1645044903
andrewrk!~andrewrk@mail.ziglang.org
motiejus, I'll remember that :) I imagine I will do it someday

1645044951
andrewrk!~andrewrk@mail.ziglang.org
a comptime perfect hashing API could be quite sophisticated

1645044972
andrewrk!~andrewrk@mail.ziglang.org
it could be target aware, favoring instructions it knows are available and cheap for a given target

1645045072
andrewrk!~andrewrk@mail.ziglang.org
it would be cheeky and fun to try using a genetic algorithm to figure out the set of instructions to produce the hash

1645045134
andrewrk!~andrewrk@mail.ziglang.org
you could also set up a test harness that ran the results across a variety of hash functions on real hardware to try to verify or produce the target-aware cost weights

1645045145
andrewrk!~andrewrk@mail.ziglang.org
it's such a nerd snipe :)

1645051604
andrewrk!~andrewrk@mail.ziglang.org
ifreund, related to your question about shifting with vectors: I would be interested to hear your opinion on this proposal: https://github.com/ziglang/zig/issues/7605

1645051762
andrewrk!~andrewrk@mail.ziglang.org
LemonBoy's comment is interesting, because although my proposal is entirely safe, and in fact makes it impossible to invoke UB by doing shifting, which is not true in status quo, he points out that the existence of possible UB actually catches bugs, and is therefore more safe

