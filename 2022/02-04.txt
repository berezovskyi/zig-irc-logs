1643938549
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Is there a Zig library that gives support for doing union/intersection on intervals (tuple of two ints) and arrays of intervals (arrays of tuple of two ints)?

1643939160
andrewrk!~andrewrk@mail.ziglang.org
marler8997_, maintaining compiler-rt is a different process, unrelated to upgrading to a newer LLVM version

1643939223
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oh, I would have figured you'd update them both together but I suppose you wouldn't have to

1643941551
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
cr1901 Not sure, but you might have some luck finding one here: https://aquila.red/

1643941841
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Maybe I'll write my own just for this app. Tho I'm not feeling up for it tonight lol- just querying

1643942934
andrewrk!~andrewrk@mail.ziglang.org
cr1901, sounds similar to what the zig compiler does for semantic analysis of switches

1643943111
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
andrewrk: Can you elaborate?

1643943137
andrewrk!~andrewrk@mail.ziglang.org
cr1901, https://github.com/ziglang/zig/blob/master/src/RangeSet.zig

1643943297
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Yes, RangeSet is similar to what I want.

1643943361
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Basically I want... var full_range = Range { .. }; bad_range = RangeSet.init(..); good_range = RangeSet.init(..);

1643943372
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
and after I'm done calculating both range sets...

1643943411
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
assert(bad_range.intersect(good_range) == null) and assert(good_range.union(bad_range) == full_range)

1643943467
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Oh and I'd want the bad/good_ranges sorted/each range non-overlapping

1643943477
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
andrewrk: would those be good additions to RangeSet stdlib?

1643943501
andrewrk!~andrewrk@mail.ziglang.org
tbh I don't really see a home for this in the std lib

1643943512
andrewrk!~andrewrk@mail.ziglang.org
I linked to the internal source of the zig compiler

1643943513
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
ACTION nods

1643943535
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
ahhh, well I'll look to that for inspiration then

1643943557
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Since my Zig code... needs improvement still

1643943580
andrewrk!~andrewrk@mail.ziglang.org
you can probably simplify it since this impl needs to support the compiler's interval Value type rather than simply integers

1643943583
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
https://github.com/ziglang/zig/blob/master/src/RangeSet.zig#L13 right, I don't need this :P

1643943608
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
I do not need semantic info to sort integers lol. I can worry about making it generic later

1643945326
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
andrewrk: Btw, related to my cross-compiling woes... do you know any docs for cross-compiling LLVM (I want to create a windows/gnu Zig I can locally use on my Windows laptop). I know the bootstrap-zig script exists, but >>

1643945349
andrewrk!~andrewrk@mail.ziglang.org
why not download the one already made from ziglang.org/download?

1643945354
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
I have a setup (tm) and want exactly _one_ copy of LLVM source- the git repo I swap between branches- on my system

1643945394
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Oh, I guess it doesn't matter if the Windows zig is GNU ABI or not

1643945412
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
I can "cross-compile" to it

1643945500
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
andrewrk: No good reason not to use the Windows one, other than "I still want to know how to cross compile my own LLVM for Zig/Rust and friends" :P

1643945688
andrewrk!~andrewrk@mail.ziglang.org
sounds like zig-bootstrap solves that problem for you?

1643945725
andrewrk!~andrewrk@mail.ziglang.org
the build script is just a handful of lines: https://github.com/ziglang/zig-bootstrap/blob/master/build

1643945778
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
https://github.com/ziglang/zig-bootstrap/blob/master/build#L27 <-- I don't think I noticed this. Maybe I can symlink to my existing llvm directory.

1643945884
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
I saw "CC=zig cc" a few days ago, and thought "using zig as the C compiler is bypassing problems I have cross compiling with mingw-gcc". Well, I'm not stuck anymore for now at least :D

1643946944
andrewrk!~andrewrk@mail.ziglang.org
cr1901, what project are you working on?

1643947070
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
andrewrk: I have a set of scripts for compiling LLVM toolchains based on switching a few variables (LLVM_BRANCH, LLVM_COMMIT, etc). Zig and Rust are supported. But only native compile on Linux.

1643947097
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Think "zig-bootstrap but optimized for any language build using LLVM"

1643947142
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
B/c I do do rustc dev and I hope at some point I do zig compiler dev as well

1643947217
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
For the zig build to build LLVM, I do something that generally looks like this: https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#posix

1643947245
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
But the build-llvm script is optimized so that "I have a single build-llvm script, not build-llvm-rust, build-llvm-zig, etc."

1643947250
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Easier for me that way :P

1643947278
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Well, I can't seem to convince LLVM to build a working cross-compiler using a single LLVM build script, so I'm kinda stuck lmao

1643947292
nektro!~meg@71-34-87-156.ptld.qwest.net
the zig-bootstrap build script should generally work for rust too

1643947415
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Hmmm okay that's fair. Would you be upset if my next response is "I want to understand what I'm doing wrong in my current setup just for the sake of knowing? :P"

1643947459
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
I'm not particularly attached to _my_ way of doing things, I just want to understand what I'm doing wrong before I swap it out w/ something better (such as zig-bootstrap/build as a general script)

1643947566
nektro!~meg@71-34-87-156.ptld.qwest.net
no that's fair

1643947622
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
My build-llvm-toolchain script is a Justfile. It's not that complex, but I'm still trying to extract the relevant part into its own script

1643947647
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
since just has at least two types of vars (env and Justfile-internal) and I use both

1643947932
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
http://gopher.wdj-consulting.com:70/paste/build-llvm.sh This is the morally equivalent shell script I use for building LLVM, prepared for Zig

1643948175
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
hold on one second, managed to screw up my build dir

1643948389
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
This'll related back to zig-bootstrap in a second. So my first attempt to cross-compile LLVM for zig was a command-line that looks like this (could be insufficient for other reasons): http://gopher.wdj-consulting.com:70/paste/2e4278b1-909e-470a-b3cb-f91f0aae8631.txt

1643948412
andrewrk!~andrewrk@mail.ziglang.org
not really sure what the purpose of all this is. there's a documented process to build llvm on the zig wiki if you need it, otherwise there's zig-bootstrap, and there are downloads of zig on the website

1643948546
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Purpose is: I want to understand "why does zig-bootstrap work while my script doesn't?" before I swap out my homegrown "build LLVM toolchain for any compiler using LLVM mess" with a slightly modified "zig bootstrap"

1643948608
andrewrk!~andrewrk@mail.ziglang.org
you don't need a homegrown toolchain. just follow the wiki instructions and that build of llvm will work fine as the dependency for any project, including zig and rust

1643948630
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#posix You mean this page, correct?

1643948646
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
(for wiki instructions)

1643948647
andrewrk!~andrewrk@mail.ziglang.org
correct

1643948686
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Are there any insns for a cross-compile build?

1643948694
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
on the Wiki*

1643948739
nektro!~meg@71-34-87-156.ptld.qwest.net
https://github.com/ziglang/zig-bootstrap/blob/master/build#L61-L117

1643948790
andrewrk!~andrewrk@mail.ziglang.org
you're trying to cross compile rust from source? that's not really on topic here unless you're using zig to do it

1643948830
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
No I'm trying to cross-compile zig from source as my first example of cross-compiling an LLVM toolchain

1643948903
andrewrk!~andrewrk@mail.ziglang.org
that's just zig-bootstrap

1643948960
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Sure, but I don't understand why it works or how you found the correct cmake variables to set and if/why passing "CC=zig cc"/"CXX=zig cxx" to CMake is required

1643948967
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
And I want to :D

1643949055
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
All the CMake invocations I've tried so far have failed, you figured it out, but I don't understand how you figured out the correct invocation (and/or if you're hacking around deficiencies around CMake by setting e.g. CMAKE_CROSSCOMPILING=True when AIUI CMake is supposed to do that for you)

1643949106
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Anyways, I'll play around w/ zig-bootstrap and see if I can answer these questions myself

1643949114
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
well, some of them

1643949523
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
Btw, if I figure out how zig-bootstrap works, I'm happy to provide some documentation, maybe to the Wiki or somewhere, explaining each option

1643949625
andrewrk!~andrewrk@mail.ziglang.org
that's already done in the Build Instructions section. there are only 3 options

1643949655
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
I meant explaining what each CMake option to LLVM does for ppl like me who are poking around

1643949662
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
and are curious how it works

1643949697
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
(yes, three options is good :)...)

1643949712
andrewrk!~andrewrk@mail.ziglang.org
sounds like something that belongs in the llvm docs not zig

1643949734
andrewrk!~andrewrk@mail.ziglang.org
I don't really think zig-bootstrap needs any improvements. it's done

1643949846
cr1901!~cr1901@2601:8d:8600:911:bd4e:8264:4908:c86
ACTION nods

1643961749
andrewrk!~andrewrk@mail.ziglang.org
self-hosted compiler progress report: LLVM backend: 668/1062 (63%) behavior tests passing

1643971984
Piraty!~irc@user/piraty
yay

1644010975
rom1504!rom1504@rom1504.fr
what are the next big steps regarding the self hosted compiler ? (to make these tests pass)

1644011561
ifreund!2940d10f8b@user/ifreund
rom1504: it's a pretty wide mix of things really, you can see a rough overview of the tests that aren't passing yet here: https://github.com/ziglang/zig/blob/master/test/behavior.zig

1644014665
andrewrk!~andrewrk@mail.ziglang.org
Live streaming in 15 min, experimenting with upstreaming arocc as a non-LLVM C compiler frontend. https://www.twitch.tv/andrewrok/

1644014719
ifreund!2940d10f8b@user/ifreund
two streams in two days \o/

1644014723
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
\o/

1644014735
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
this should be very interesting

1644014743
ifreund!2940d10f8b@user/ifreund
I'm fixing river bugs right now but will put you on in the background :D

1644018890
demize!kyrias@archlinux/developer/demize
Hey, I'm pretty new to Zig and I'm currently playing around with trying to use it for an STM32 project.  It works fine in debug mode, but in release mode it's optimizing out some volatile stores.  Dumping the IR with --verbose-llvm-ir I see that the volatile stores have been turned into volatile @llvm.memcpy's, and there seems to be no significant difference between the modes, so might be an LLVM bug?

1644018906
demize!kyrias@archlinux/developer/demize
Not quite sure how to debug this further however.

