1644025452
jaredmm!~jaredmm@user/jaredmm
Is it expected that `#define S 0xFFFFFFFFFFFFFFFE` would translate-c into a c_int instead of a larger datatype? 

1644025824
ifreund!2940d10f8b@user/ifreund
I think it should probably use comptime_int there tbh

1644025842
ifreund!2940d10f8b@user/ifreund
but there's probably some reason I'm not aware of that it doesn't 

1644026044
ifreund!2940d10f8b@user/ifreund
jaredmm: if you want to open an issue, c_int is definitely wrong if the value doesn't fit in an int

1644026046
ifreund!2940d10f8b@user/ifreund
https://en.cppreference.com/w/c/language/integer_constant

1644026062
ifreund!2940d10f8b@user/ifreund
see the "The type of the integer constant" section

1644026228
jaredmm!~jaredmm@user/jaredmm
I'll create an issue for it.

1644026311
jaredmm!~jaredmm@user/jaredmm
I don't believe that will solve the case I was looking at when I noticed it, but having it be more correct might help someone else.

1644026570
jaredmm!~jaredmm@user/jaredmm
I'm attempting to determine how translate-c should handle `#define S UINT64_C(0x01)` (or any of the variants). It seems like translate-c.zig:transMacroDefine would need to add pattern matching like transMacroFnDefine does, since there's no way to infer size from the value.

1644036602
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
marler8997_: Have you ever seen  %ERRORLEVEL% -1073741795 for zigup?

1644036652
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
not that I can recall, how did you get that?

1644036689
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Happy to open a bug report if necessary, but I don't have any output (and prob the wrong MSVC installed)

1644036721
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
http://gopher.wdj-consulting.com:70/paste/d5e43a01-88fe-4d09-ad33-e0709cc53bfd.tx

1644036723
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
http://gopher.wdj-consulting.com:70/paste/d5e43a01-88fe-4d09-ad33-e0709cc53bfd.txt

1644036744
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
marler8997_: All I had to do :D

1644036759
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
is zigup downloaded from the releases?

1644036792
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Yes

1644036809
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I'll see if I can reproduce real quick

1644036821
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Tangent, is it possible to debug MSVC executables from a command prompt?

1644036842
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I _have_ Visual Studio installed, but would rather not open it b/c it's awful :P

1644036868
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
lol

1644036893
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
that's one thing I really like about Zig, let's you compile Zig and C programs without having to install msvc

1644036949
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
shoot not reproducing on my machine, what version of Windows you on?

1644036964
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Microsoft Windows [Version 10.0.19044.1466]

1644037043
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
darn, sounds like it's time to break out VS and debug it

1644037218
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I'm always up for helping to debug over a call on discord if you're into that sort of thing

1644037274
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Discord isn't my thing. I was thinking of getting rid of MSVC, and replace it w/ the command line tools. But I can't find a debugger. Opening VS now

1644037318
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
windbg has alot of features but it's a bit cryptic.  VS is annoying but it's also super easy to use, tradeoffs

1644037332
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
are there other cmd-line debuggers in windows?

1644037441
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
gdb, but doesn't support pdb files. Is it possible for you to compile a gnu abi zigup (this will not affect me debugging using VS)?

1644037497
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
let me see

1644037528
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
"Your evaluation period has ended. Please sign in to unlock the product."

1644037529
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Oh...

1644037535
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
That's not good...

1644037618
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I think that one should already be using gnu, but I'll try to build another locally with x86_64-windows-gnu

1644037675
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Oh, I think I might've been confused by the .pdb file that came w/ the binary

1644037708
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
No debugging symbols found in zigup.exe according to gdb... okay fine. I'll also compile locally

1644037801
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
here's what I just built if you wanna try: http://marler.info/zigup.exe and http://marler.info/zigup.pdb

1644037853
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ooo I just thought of something.  The CI is building zig natively, rather than for generic x86_64

1644037879
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
the one I gave you is built generic so if that works that could be the issue

1644037909
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Windows defender really didn't like that zigup download lmao

1644037921
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Can't win

1644037929
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
lol yeah, unsigned executable

1644038002
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
marler8997_: Says your zigup contains a sabsik!ml trojan

1644038014
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
lol!

1644038023
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I've duplicated this behavior, so it's your zigup.exe

1644038050
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
and I've also tried compiling on my Linux box- but of course since my zig compiler is slightly off one of the deps won't compi;e

1644038066
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
 error: container 'std.compress.deflate' has no member called 'inflateStream'

1644038067
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
you've duplicated? sorry what do you mean exactly?

1644038095
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Ahh sorry, I mean I'm like 99% confident it's the zigup.exe and I'm not just saying that out of frustration :P

1644038110
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
it's your zigup.exe that has the trojan

1644038219
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
easiest thing might be to build it yourself on your windows machine I think.  Easy, just download the zig zip file, extract it, and run "zig build -Dfetch" in the zigup repo

1644038239
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Which exact zig version are you using?

1644038247
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
zig 0.9?

1644038253
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
or some master version?

1644038260
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
just built it with 0.10.0-dev.283+ba0f72363

1644038289
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
0.10.0-dev.7888... hmmm... a bit few more commits

1644038314
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Assumming "7888" means "commits since last release"

1644038340
nektro!~meg@71-34-87-156.ptld.qwest.net
cr1901: you can add exceptions in defender

1644038342
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oh shoot it doesn't build on master, I just tried, let me push a  fix

1644038346
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I got the inflateStream error

1644038367
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oh zarc is no longer building, might take a few minutes

1644038374
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
awesome, thanks

1644038416
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I do really like the idea of zigup... reminds me of _another_ tool that ends in "up" :P

1644038481
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Btw, I'm guessing "7888" is wrong and what actually happened is that whatever generated the version stream doesn't have all the tags)

1644038503
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
version string*

1644038504
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah 7888 not right, should be at 555

1644038570
nektro!~meg@71-34-87-156.ptld.qwest.net
7888 also doesnt make sense because exit codes are usually truncated to u8

1644038667
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I hadn't fetch tags since 0.6.0 apparently

1644038670
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
whoops

1644038695
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
That's how those version strings usually work- they look for your most recent tag in your local copy

1644038723
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
broke by this: https://github.com/ziglang/zig/pull/10552/files#diff-956c13c03748c835d402dccee4b5b0ddb201cf801254dd7142f3a1ed1a3ce403L142

1644038736
nektro!~meg@71-34-87-156.ptld.qwest.net
ah that'll do it haha

1644038762
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Yes, 16375 commits vs 8732 commits

1644038777
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
That's where "7888" commits came from in my zig version... my fault

1644038904
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Yup, deflate.InflateStream doesn't exist anymore :D

1644038920
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
My zig was last compiled 8 days ago

1644038924
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
that'll do it

1644039162
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
might have a fix, maybe 10 minutes to test in CI and integrate

1644039207
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Cool, I can pull anyway in the meantime

1644039447
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
kinda lame, the old api was removed so this is a breaking change, everyone will need to update zig

1644039479
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Make a branch for the sake of allowing me to compile :P?

1644039488
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
so I can see if I can dup the problem?

1644039500
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
dup the original issue*

1644039523
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Or better: send me a patch

1644039550
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Oh wait... this is a problem in one of the deps

1644039554
motiejus!~motiejus@2001:470:69fc:105::38fb
I am ready to start testing 0.9.x (w.r.t. bazel-zig-cc) ; andrewrk can you confirm there are no short-term plans to recover building of artifacts from the release branches? Before I go build my own.

1644039611
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
cr1901, ok I pushed a branch named "forcr1901" :)

1644039661
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ok fix pushed to zigup, should be buildable on zig master now

1644039839
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
marler8997_: Ahhh thanks, you didn't have to do that :D. I misunderstood anyway. I have a zig that's close enough to master; your changes worked fine.

1644039863
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
it was faster to run git push than to clarify :)

1644039867
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
haha

1644039928
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Yea, the zigup I just compiled works. Must be a 32-bit vs 64-bit thing?

1644039986
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I think it's a natively compiled vs cross compiled thing

1644040005
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
by default zig compiles everything native with full optimizations turned on and taking advantage of your cpu info

1644040027
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
by setting target to x86_64-windows it would be generic and should work on any 64-bit cpu

1644040033
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
that's my guess as to what's going on anyway

1644040057
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Is it possible to have a layout similar to .cargo/bin? 1/2

1644040094
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I.e. zigup and the zig exe in one directory, and the zig exe defers to "where zigup keeps all the compiler data (under e.g. .rustup)"?

1644040202
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
there is a --install-dir command-line option (mostly used for testing)

1644040219
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I was thinking of making that a build option for zigup

1644040220
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
http://gopher.wdj-consulting.com:70/paste/f57697cc-a2ec-43d5-b63e-3b480cdd9e40.txt I swear I'm not making your life hard on purpose :P

1644040292
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
0xC0000056

1644040292
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
STATUS_DELETE_PENDING

1644040336
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Also a probably related error: AccessDenied

1644040379
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
damn windows

1644040403
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Okay will it succeed on the subsequent zigup master

1644040412
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah I expected that

1644040420
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
but very lame it fails the first time

1644040439
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Is that expected behavior, a bug, worth opening an issue, etc?

1644040453
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
and there is another error in Zig's error handler preventing us from seeing the stacktrace (the subsequent FileNotFound error)

1644040460
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah definitely

1644040502
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
With that being all said, I now have a working zig and zigup :). Hopefully the CI artifacts work at some point (will test newer ones), but this is okay for now

1644040537
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah I think I just need to add -Dtarget=x86_64-windows for the windows build

1644040928
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
https://github.com/marler8997/zigup/issues/49

1644040948
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
>extracted archive in 162.98 s

1644040950
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
LOVE defender

1644041005
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Oh right, this is also a debug build

1644041014
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
windows is trying really hard to find something in there :)

1644041225
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
extracted archive in 112.72 s for 0.9.0 with a release-fast zigup

1644041247
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
So yea. Defender + 10 year old Sandy Bridge laptop == showing age

1644041305
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Anyways, tyvm for the help, I'm satisfied :)

1644042268
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
marler8997_: FWIW, the install-dir option may be useful than more as a test option; MSYS2/bash can't tell the difference between the zig/ and zig binary. I have to use zig.exe

1644042293
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Works fine in command-prompt

1644042315
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
(i.e. I type "zig" and command prompt doesn't trip up on zig/ vs zig.exe)

1644042509
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
jesus msys2/bash is weird

1644042534
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
paths hard

1644042548
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
on linux it goes to ~/zig by default

1644042603
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
definitely willing to make it a build option, adding a config file I'm not sure yet

1644042663
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Bootstrapping zigup by downloading a zig compiler, and then compiling zigup source w/ the build option to change the install location seems reasonable for now

1644042692
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
it's what I do :)

1644042870
nektro!~meg@71-34-87-156.ptld.qwest.net
on linux exes dont have the extension and you're not allowed to conflict names

1644042978
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I think it's a conflict b/c "zigup" works just fine w/o the extension

1644043034
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
on windows it tries adding all the entries in PATHEXT to the program you're calling, not sure what msys2 does though

1644043101
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I'm not sure I've ever run into this issue in practice where "binary and dir have same name"

1644043107
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
in the same dir*

1644043132
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah maybe there is a better option for default install dir on windows

1644043147
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
I plan to rename the directory to zig-compilers

1644043641
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Btw, the build script for zigup hangs from a command prompt or bash prompt with my freshly compiled zigup from Linux :P

1644043866
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Happens when calling the zig binary directly as well, not just the exelink that's installed next to zigup

1644043907
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Is it possible to compile the build.exe in debug mode?

1644044076
andrewrk!~andrewrk@mail.ziglang.org
motiejus, confirmed, no short term plan to publish build artifacts for release branches

1644044444
motiejus!~motiejus@2001:470:69fc:105::38fb
Noted, thanks

1644047467
plumeus!~plumeus@user/plumeus
Hello, I wanted to ask if there's a way to make `build.zig` or `zig build-exe` output C compile warnings.

1644047485
plumeus!~plumeus@user/plumeus
From what I could tell, the only way is to pass `-Werror`?

1644047764
plumeus!~plumeus@user/plumeus
Another thing I was wondering is whether it's intentional that `zig cc` only prints compile warnings the first time around, and is silent the 2nd time (presumably because the compilation is cached).

1644047810
motiejus!~motiejus@2001:470:69fc:105::38fb
Regular cflags are supported, so start with just `-W`? And you are right about caching

1644047873
plumeus!~plumeus@user/plumeus
I tried using `ccache` and (assuming I'm using it correctly) it seems to output warnings every time. Any reason why `zig cc` can't do the same?

1644047877
motiejus!~motiejus@2001:470:69fc:105::38fb
You may want to fail compilation with `-Werror`, so you won't get the cache behaviour

1644047901
motiejus!~motiejus@2001:470:69fc:105::38fb
Because zig is smarter :)

1644047926
plumeus!~plumeus@user/plumeus
I tried passing `-W` flags in a sample `build.zig` file to build a C project. They all seem to do nothing without `-Werror`.

1644047968
motiejus!~motiejus@2001:470:69fc:105::38fb
Ah, so you won't see warnings at all unless you pass -Werror?

1644047968
plumeus!~plumeus@user/plumeus
So I'm thinking that it would make sense if `-Werror` was passed by default, or if some option was added to make the warnings visible (assuming I'm not blind and didn't overlook anything obvious)

1644048001
plumeus!~plumeus@user/plumeus
`zig cc` works the first time around. `zig build-exe` and `build.zig` refuses to show warnings whatsoever, even when I delete the cache.

1644048026
plumeus!~plumeus@user/plumeus
So yeah, `-W` flags seem useless without `-Werror`.

1644048042
motiejus!~motiejus@2001:470:69fc:105::38fb
Ack. I never used build-exe seriously, only zig cc, so can't comment on that

1644048105
plumeus!~plumeus@user/plumeus
I figured I would try writing a proposal to enable `-Werror` by default on `build.zig`, but I thought I should ask here first.

1644048111
plumeus!~plumeus@user/plumeus
(My first day on IRC, lol)

1644048255
motiejus!~motiejus@2001:470:69fc:105::38fb
You may want to file a task (or wait for a second opinion) w.r.t. build-exe, zig cc seems to be doing the right thing

1644048284
motiejus!~motiejus@2001:470:69fc:105::38fb
I.e. file a task about not showing the warnings.

1644048340
plumeus!~plumeus@user/plumeus
btw, why can't (or why shouldn't) `zig cc` just cache the outputs of the warnings and display it every time? I presume that's what `ccache` is doing.

1644048357
plumeus!~plumeus@user/plumeus
Although it could be that I'm using `ccache` wrong, it's my first time trying it.

1644048473
nektro!~meg@71-34-87-156.ptld.qwest.net
zig enables some perf and safety flags by default but it leaves the warnings to clangs defaults so that it can be used as a stand in replacement

1644048609
plumeus!~plumeus@user/plumeus
I say it fails to replicate Clang's default behavior if it doesn't ever print the warnings. But I do see how a compile error is more intrusive than a runtime error (like UBSAN for debug/safe)

1644048678
daurn!~daurnimat@vultr.daurnimator.com
plumeus: zig build-exe doesn't have any warnings on purpose

1644048693
daurn!~daurnimat@vultr.daurnimator.com
`zig cc` follows the traditional C compiler CLI if that's what you want

1644048736
plumeus!~plumeus@user/plumeus
I'm actually talking about `build.zig`'s behavior, but `build.zig` seems to call `zig build-exe`?

1644048783
daurn!~daurnimat@vultr.daurnimator.com
depends on your build.zig :P

1644048820
plumeus!~plumeus@user/plumeus
Fair

1644048882
plumeus!~plumeus@user/plumeus
I meant the standard one created with `zig init-exe`, using `exe.addExecutable` and `exe.install`.

1644048921
plumeus!~plumeus@user/plumeus
But I'm not aware on any option provided by `std.build.Builder` to make it easier to call `zig cc`

1644049162
plumeus!~plumeus@user/plumeus
I know `zig cc` is a drop-in replacement. But is `zig build-exe` also intended to be one? (I mean, I guess it's fair to assume it is unless stated otherwise, but eh)

1644049234
ikskuh!~xq@v43666.php-friends.de
plumeus: "zig build-exe" is the zig style frontend to the compiler

1644049248
ikskuh!~xq@v43666.php-friends.de
it doesn't have all "zig cc" options, but uses the zig style ones

1644049261
ikskuh!~xq@v43666.php-friends.de
it's not a drop-in c compiler, but just a c compiler

1644049316
ikskuh!~xq@v43666.php-friends.de
also, you can enable warnings as well when using build.zig

1644049329
ikskuh!~xq@v43666.php-friends.de
you just only get them once (when the C file is actually compiled)

1644049341
ikskuh!~xq@v43666.php-friends.de
after that, the file content is cached and you won't get any warnings anymore

1644049343
plumeus!~plumeus@user/plumeus
I don't think I even get them once.

1644049350
plumeus!~plumeus@user/plumeus
lemme triple check

1644049564
plumeus!~plumeus@user/plumeus
I did `rm -r zig-cache ~/.cache/zig` and then tried running the relevant `zig build-exe` command, no warning.

1644049597
ikskuh!~xq@v43666.php-friends.de
hm

1644049604
ikskuh!~xq@v43666.php-friends.de
i remember getting warnings at a point

1644049606
plumeus!~plumeus@user/plumeus
`zig cc` gives the warning once, and obviously gets cached so it no longer gives an error

1644049610
ikskuh!~xq@v43666.php-friends.de
i think this is definitly a bug

1644049640
plumeus!~plumeus@user/plumeus
On version `0.10.0-dev.536+557a09752`

1644049664
plumeus!~plumeus@user/plumeus
I feel like I've gotten warnings when there was some unrelated compile errors? Might be recalling incorrectly.

1644049705
plumeus!~plumeus@user/plumeus
nope, doesn't seem to be the case

1644049728
plumeus!~plumeus@user/plumeus
so adding `-W` flags for `build.zig` seems completely useless without `-Werror` from what I can tell.

1644049803
plumeus!~plumeus@user/plumeus
idk, I could try with Zig 0.8.1 to see if it's a regression

1644050158
ikskuh!~xq@v43666.php-friends.de
you're hexandwhy on discord?

1644050749
plumeus!~plumeus@user/plumeus
Yes, I am

1644050806
plumeus!~plumeus@user/plumeus
Also, checked with 0.8.1, no warning as expected.

1644051490
plumeus!~plumeus@user/plumeus
Huh, Zig isn't accepting any proposals right now. Welp. I don't think this qualifies as a bug.

1644051527
plumeus!~plumeus@user/plumeus
referring to https://github.com/ziglang/zig/blob/master/.github/ISSUE_TEMPLATE/proposal.yml

1644063293
plumeus!~plumeus@user/plumeus
test

1644063552
ikskuh!~xq@v43666.php-friends.de
akc

1644063555
ikskuh!~xq@v43666.php-friends.de
*ACK

1644063724
plumeus!~plumeus@user/plumeus
Anyhow, I just realized that the proposals not being accepted is limited to the language

1644064368
ikskuh!~xq@v43666.php-friends.de
plumeus: not showing warnings is definitly a bug

1644064414
plumeus!~plumeus@user/plumeus
https://github.com/ziglang/zig/issues/10800 for `zig cc`

1644064437
ikskuh!~xq@v43666.php-friends.de
also it's not a *language* proposal but a huge improvement for the toolchain

1644064463
plumeus!~plumeus@user/plumeus
I guess I should open a separate bug for `zig build-exe`?

1644064540
ikskuh!~xq@v43666.php-friends.de
i think you can combine these

1644064626
plumeus!~plumeus@user/plumeus
Okay, I guess I'll add it as a comment

1644076793
motiejus!~motiejus@2001:470:69fc:105::38fb
I've tested the latest commit in in 0.9.x branch (0.9.0-78-ga418c5954), it passes all tests of bazel-zig-cc

1644076806
motiejus!~motiejus@2001:470:69fc:105::38fb
cc andrewrk ^^

1644080956
demize!kyrias@archlinux/developer/demize
D'oh, just realized that the problem I had is that those registers only allow word-sized stores.  Is there any way to force the compiler to do a volatile whole-word store rather than compiling to an llvm.memcpy that fiddles with the bytes directly, or do I have to use inline assembly to ensure it?

1644083924
demize!kyrias@archlinux/developer/demize
Just found an open proposal for supporting exactly that, so inline asm it is.  :)

1644084093
ifreund!2940d10f8b@user/ifreund
demize: are you doing the stores through a word sized pointer already? If not you could try that to avoid inline asm

1644084127
ifreund!2940d10f8b@user/ifreund
um, I mean a pointer to a word sized int, *usize

1644084248
ifreund!2940d10f8b@user/ifreund
mircozig has an abstraction for MMIO you might be interested in: https://github.com/ZigEmbeddedGroup/microzig/blob/master/src/core/mmio.zig

1644084264
ifreund!2940d10f8b@user/ifreund
not really sure if the complexity's worth it though

1644084283
dmh!~dmh@pclmulqdq.dev
howdy yall, im stumbling a bit coming back after few years, im trying to make a program written in c (yet to be ported), then run it on my zig build output. ive about got it with add system command, but wondering how to do it with the exe directly since getOutputPath was removed

1644084295
dmh!~dmh@pclmulqdq.dev
can see here https://github.com/DexterHaslem/am335x-os/blob/master/zig/build.zig#L41

1644084346
demize!kyrias@archlinux/developer/demize
I'm using svd4zig, and it uses `*volatile u32`, usize doesn't make a difference alas.

1644084366
demize!kyrias@archlinux/developer/demize
It generates code that does pretty much the same as that abstraction.

1644084394
ifreund!2940d10f8b@user/ifreund
:/

1644084398
demize!kyrias@archlinux/developer/demize
In debug mode it ends up doing proper stores, but in release mode LLVM takes more liberties and does multiple read and stores.

1644084433
demize!kyrias@archlinux/developer/demize
And like, the inline assembly is a single instruction so it's not a problem, but I'd prefer it if I could just tell zig what access patterns are okay.

1644084444
demize!kyrias@archlinux/developer/demize
(<https://github.com/ziglang/zig/issues/5591> is the proposal that I mentioned btw.)

1644084463
ifreund!2940d10f8b@user/ifreund
dmh: you can use LibExeObjStep.run() which will return a std.build.RunStep

1644084514
dmh!~dmh@pclmulqdq.dev
hrmph, ok. i was looking at the run change from https://github.com/ziglang/zig/pull/2038 but didnt quite understand how to use run

1644084565
dmh!~dmh@pclmulqdq.dev
i think i will port that helper first then try to pass the args to a proper run

1644084578
ifreund!2940d10f8b@user/ifreund
dmh: `zig init-exe` will create an example build.zig with a run step

1644084602
ifreund!2940d10f8b@user/ifreund
https://github.com/ziglang/zig/blob/master/lib/std/special/init-exe/build.zig

1644084616
dmh!~dmh@pclmulqdq.dev
ah yea i see

1644084631
dmh!~dmh@pclmulqdq.dev
sweet

1644084794
ifreund!2940d10f8b@user/ifreund
> IR-level volatile loads and stores cannot safely be optimized into llvm.memcpy or llvm.memmove intrinsics even when those intrinsics are flagged volatile.

1644084810
ifreund!2940d10f8b@user/ifreund
demize: I think it's an llvm bug, that's from the llvm language reference

1644084820
ifreund!2940d10f8b@user/ifreund
https://llvm.org/docs/LangRef.html#volatile-memory-accesses

1644085511
demize!kyrias@archlinux/developer/demize
Yeah, I saw that, but I wasn't sure whether it was Zig or LLVM that turned it into a llvm.memcpy.

1644085545
ifreund!2940d10f8b@user/ifreund
definitely LLVM

1644085672
demize!kyrias@archlinux/developer/demize
I also found an old llvm-dev thread about volatile pointers saying that the semantics over the actual access patterns are essentially unspecified and target-specific, and that the only thing you can rely on is the order and that they will happen.

1644085788
demize!kyrias@archlinux/developer/demize
(<https://groups.google.com/g/llvm-dev/c/n-yw-w-PwEA/m/pWe7VAO0BQAJ>)

1644091770
motiejus!~motiejus@2001:470:69fc:105::38fb
is there a recommended big-endian architecture that's supported by both zig and qemu? I would like to test some C and zig code on big-endian to make sure it doesn't slip little-endian assumptions anywhere

1644091829
ifreund!2940d10f8b@user/ifreund
hmm, powerpc64 might be your best bet

1644091855
ifreund!2940d10f8b@user/ifreund
I wouldn't be surprised if you run into some std issues or something though

1644091868
andrewrk!~andrewrk@mail.ziglang.org
motiejus, thanks for testing! the plan is just 3 more regressions to fix (the issues in the 0.9.1 milestone) and then the tag

1644091909
andrewrk!~andrewrk@mail.ziglang.org
we have mips-linux-musl in the test matrix. that's 32 bit big endian

1644096768
demize!kyrias@archlinux/developer/demize
ifreund: Annoyingly my minimized example doesn't actually use llvm.memcpy in the LLVM IR output, but it does still end up doing one halfword and two byte-sized stores in the resulting assembly: https://zig.godbolt.org/z/qWzE7c4db

1644096845
demize!kyrias@archlinux/developer/demize
Oh, there's already a related issue about this: https://github.com/ziglang/zig/issues/5340  hmm

1644097160
demize!kyrias@archlinux/developer/demize
Ah, it does use a llvm.memcpy if you don't do -ORelease*.

1644104005
demize!kyrias@archlinux/developer/demize
https://github.com/ziglang/zig/issues/8981#issuecomment-854911077  that does indeed work when also declaring old_value with align(4).

1644104128
ifreund!2940d10f8b@user/ifreund
LemonBoy to the rescue again

1644104586
demize!kyrias@archlinux/developer/demize
Annoyingly it means that with the svd4zig API I need to make a 'copy' of the data in the write function, but since it's word-sized it just ends up getting stored from a register.

1644104599
demize!kyrias@archlinux/developer/demize
It feels silly to have to do it though, hm.

1644105395
demize!kyrias@archlinux/developer/demize
Seems I don't even need to do the @ptrCast at that point.  With `const aligned: Write align(4) = value;`, which I need even with the @ptrCast, the @bitCast works as well.

1644105461
demize!kyrias@archlinux/developer/demize
So then the question is, is the @ptrCast version that he recommends a more robust alternative for the reasons he stated.

