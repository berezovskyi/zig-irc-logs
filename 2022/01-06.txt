1641459058
_Vi!~vi0oss@2a0d:7c40:3000:1326::3
Should Zig host and target platform support tiers be tracked separately (like Rust does)? Linux x86_64 and wasm32-WASI are both have the same green checkmark, yet I doubt WASI version of Zig compiler gets built and tested.

1641459940
freshcoffee!~fresh@user/freshcoffee
_Vi: zig CI tests against various non-native targets with qemu and also tests with wasmtime

1641459977
_Vi!~vi0oss@2a0d:7c40:3000:1326::3
freshcoffee, The question is about hosts (where Zig compiler or `zig cc` itself running).

1641460014
_Vi!~vi0oss@2a0d:7c40:3000:1326::3
Or can one `wasmtime zig.wasm build`?

1641469928
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
Hi, am I seeing this right that there is no config system for zig?

1641470155
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
I mean like autotools or cmake to detect optional features of libs.

1641470176
dutchie!~dutchie@user/dutchie
you just write normal zig code in build.zig to do stuff like that

1641470182
Franciman!~Franciman@mx1.fracta.dev
yep

1641470204
dutchie!~dutchie@user/dutchie
see e.g. https://github.com/riverwm/river/blob/master/build.zig for an example

1641470283
dutchie!~dutchie@user/dutchie
note std.Builder.option usage

1641470363
dutchie!~dutchie@user/dutchie
std.build.Builder.option*

1641470386
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
Just wanted to understand the motivation behind this issue: https://github.com/pupnp/pupnp/issues/329

1641470421
earnest!~earnest@user/earnestly
dutchie: How would one control where, for example, bash completions end up?  Some use /etc, some use /usr/share, and so on

1641470440
daurn!~daurnimat@vultr.daurnimator.com
earnest: by passing it into zig build...

1641470446
earnest!~earnest@user/earnestly
dutchie: Or what about man pages which can exist under /man

1641470449
earnest!~earnest@user/earnestly
daurn: How?

1641470476
earnest!~earnest@user/earnestly
> No manual entry for zig

1641470494
daurn!~daurnimat@vultr.daurnimator.com
earnest: the build.zig file has to make it configurable

1641470498
daurn!~daurnimat@vultr.daurnimator.com
earnest: zig build --help

1641470503
dutchie!~dutchie@user/dutchie
there's already some prefix handling stuff in build

1641470512
earnest!~earnest@user/earnestly
> info: Initialize a 'build.zig' template file with `zig init-lib` or `zig init-exe`

1641470546
earnest!~earnest@user/earnestly
Hm, can't use zig build --help without a build.zig or such

1641470578
daurn!~daurnimat@vultr.daurnimator.com
huh. sort of makes sense. but the --help options change based on the build.zig

1641470597
earnest!~earnest@user/earnestly
dutchie: prefix is fine, but some have different paths regardless of prefix.  Particularly the difference /usr and /etc.  I see that you hardcode /share/man, so it would be up to the build.zig to expose this as configurable

1641470599
daurn!~daurnimat@vultr.daurnimator.com
e.g. run `zig build --help` while in the directory of zig itself

1641470646
daurn!~daurnimat@vultr.daurnimator.com
earnest: indeed. I think we'd accept zig build api improvements for additional "standard" directories. I think at the moment you only get prefix and DESTDIR by default

1641470647
earnest!~earnest@user/earnestly
daurn: Ah, so it's possible to expose custom macro-like flags to build?

1641470651
daurn!~daurnimat@vultr.daurnimator.com
earnest: yes

1641470658
daurn!~daurnimat@vultr.daurnimator.com
earnest: that's what `b.option()` does

1641470667
earnest!~earnest@user/earnestly
That's nice, fair enough

1641470700
earnest!~earnest@user/earnestly
daurn: As for standard directories, I think that's the one thing GNU got right, is their standard install dirs

1641470714
earnest!~earnest@user/earnestly
You've already got their prefix and DESTDIR, might as well add the rest

1641470724
daurn!~daurnimat@vultr.daurnimator.com
I agree; though most people haven't heard of most of them

1641470731
daurn!~daurnimat@vultr.daurnimator.com
also /et

1641470731
earnest!~earnest@user/earnestly
https://www.gnu.org/prep/standards/html_node/Directory-Variables.html

1641470738
daurn!~daurnimat@vultr.daurnimator.com
also /etc really confuses people

1641470757
daurn!~daurnimat@vultr.daurnimator.com
cause gnu assumes that things in /usr have their config in /usr/etc

1641470772
daurn!~daurnimat@vultr.daurnimator.com
that's probably the one major mistake/incorrectness they have

1641470801
earnest!~earnest@user/earnestly
It amuses me that this article makes sure to remind people that they should write info pages instead of man pages prior to introducing the relevant man variables

1641470846
dutchie!~dutchie@user/dutchie
don't forgot also that std.build (and the rest of the standard library) are still kind of beta-ish

1641470850
earnest!~earnest@user/earnestly
daurn: exec_prefix vs. prefix

1641470896
earnest!~earnest@user/earnestly
dutchie: If it exposes options like this and allows you to expose prefixes, this to make makes it fine.  I wouldn't want to make it too particular

1641470911
earnest!~earnest@user/earnestly
Eugh, sentence terrible

1641470937
earnest!~earnest@user/earnestly
dutchie: Essentially I like makefiles, they give you a lot of freedom to do things badly, or nicely.  zig build seems like a good middle ground

1641470946
daurn!~daurnimat@vultr.daurnimator.com
earnest: sysconfdir defaults to `$(prefix)/etc` where distros usually set prefix to /usr

1641470968
earnest!~earnest@user/earnestly
daurn: True, yes this is sometimes a problem

1641471315
earnest!~earnest@user/earnestly
dutchie: (I.e. I'm quite happy for people to implement these prefixes everytime for each build.zig, no major need to provide them as standard necessarily)

1641471913
ifreund!2940d10f8b@user/ifreund
Vollstrecker: the correct way to do that would be to `@cImport()` the header containing the UPNP_ENABLE_OPEN_SSL define and branch on that value at comptime

1641471922
ifreund!2940d10f8b@user/ifreund
zig supports that use-case the same way C does

1641471955
ifreund!2940d10f8b@user/ifreund
what that approach of a #define in a header doesn't allow is checking the version while using the library through dlopen() at runtime

1641471993
daurn!~daurnimat@vultr.daurnimator.com
ifreund: Vollstrecker: that's only if you actually need compat with things writing out C headers. the native zig way is to use build_options

1641472015
ifreund!2940d10f8b@user/ifreund
daurn: I'm referring to the original issue, which is about compat with a C library

1641472596
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
We provide pkg-config and cmake.config files which contain all needed informations. This should be enough imho.

1641472897
earnest!~earnest@user/earnestly
Vollstrecker: It is perfectly reasonable to have build.zig read variables from .pc files, either by calling pkg-config itself or via libpkgconf.  There is no need for this to be "built in", just as it isn't built into makefiles

1641472945
earnest!~earnest@user/earnestly
The same could be done by generating .pc files as well.  cmake files are no good because they're not agnostic; although pc files are heavily C-biased

1641473000
earnest!~earnest@user/earnestly
I'm sure zig will create yet-another-language-package-manager with its own particular metadata formats and databases and such.  It seems unavoidable these days

1641473043
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
k, so I think I can close the issue, as it's more a feature request for which I don't see any benefit.

1641473124
earnest!~earnest@user/earnestly
Vollstrecker: Which issue?

1641473209
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
https://github.com/pupnp/pupnp/issues/329

1641473272
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
Someone aksed us to implement a function that he can query at runtime if libupnp was compiled with support for openssl.

1641473351
Vollstrecker!~werner@p200300d92f1239002e4d54fffe5896ba.dip0.t-ipconnect.de
Admitted, my conclusion in the closing message was wrong.

1641486123
lightspot21!~lightspot@2a02:214c:8708:b000::1ddf
from where would one start to add a new cross target to zig? I've read the wiki page, but I don't quite get if these steps are applicable for running zig on the target itself or for merely cross targets

1641491541
CommunistWolf!~bland@user/communistwolf
yay

1641500069
andrewrk!~andrewrk@mail.ziglang.org
luuk, I made that review and then it occurred to me, maybe export_symbol_names is not actually needed to go into the cache hash, because we already have the source files in the cache hash, and the export_symbol_names is directly dependent on the source code, and not overridden with CLI args. right?

1641500112
luuk!~luuk@user/luuk
andrewrk: That's correct

1641500140
andrewrk!~andrewrk@mail.ziglang.org
ah never mind, this PR is good to merge then :)

1641500168
luuk!~luuk@user/luuk
Awesome :)

1641500194
luuk!~luuk@user/luuk
Oh btw, I did make the change already (regarding the cache)

1641500198
luuk!~luuk@user/luuk
Want me to revert that?

1641500207
andrewrk!~andrewrk@mail.ziglang.org
yes please

1641500210
luuk!~luuk@user/luuk
On it

1641500274
luuk!~luuk@user/luuk
Alright, done. Removed it from the cache. Now crossing fingers CI is all green once again :)

1641500288
andrewrk!~andrewrk@mail.ziglang.org
ðŸ¤ž

1641500299
andrewrk!~andrewrk@mail.ziglang.org
I think we'll have a nice bump in progress bar percents after this is merged :)

1641500336
luuk!~luuk@user/luuk
Towards 0.9.1, you mean?

1641500609
andrewrk!~andrewrk@mail.ziglang.org
in the number of behavior tests passing in stage2 

1641500625
andrewrk!~andrewrk@mail.ziglang.org
ah, that's not the focus of this PR, never mind

1641500640
andrewrk!~andrewrk@mail.ziglang.org
I was going to wait to make an update but now I see I don't need to

1641500652
andrewrk!~andrewrk@mail.ziglang.org
but yes I think this can go into 0.9.1

1641500713
luuk!~luuk@user/luuk
Aaah I see what you mean.

1641500777
luuk!~luuk@user/luuk
(Should still be a nice bump since last update tho, with the PR I made earlier this week) 

1641500818
andrewrk!~andrewrk@mail.ziglang.org
yeah!

1641500826
luuk!~luuk@user/luuk
Tho, I did read in one of your commits there was a small regression in the wasm backend. I haven't looked at which test it was yet, but I'm sure I'll get to it soon!

1641500947
andrewrk!~andrewrk@mail.ziglang.org
it was a regression of a test case but it was just hitting a TODO in lowering a const value

1641501009
luuk!~luuk@user/luuk
Gotcha, in that case it will definitely be picked up within the next progression PR's :)

1641509201
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee1, looks like Scaleway is going to give us an M1 for CI

1641513049
kragacles!~kragacles@rebonack.apastron.co
Ok, awfully new to zig. Trying the 'Using cURL from Zig' example from ziglang.org/learn/samples, and I stuck trying to compare a  'c_uint and a '@Type(.EnumLiteral)'

1641513119
kragacles!~kragacles@rebonack.apastron.co
At first I thought @enumToInt was the key, but apparently that is not right for this EnumLiteral Type?

1641513310
kragacles!~kragacles@rebonack.apastron.co
Simple paste of the error I am seeing: http://ix.io/3LiP

1641513501
kragacles!~kragacles@rebonack.apastron.co
This is on zig 0.9.0, guessing the sample is for a different version

