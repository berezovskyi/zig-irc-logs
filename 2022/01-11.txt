1641899743
pkap!~pkap@185.209.196.174
The docs mentions anonymous structs as tuples. Can I have a tuple as a return value somehow? I mean like tuple unpacking in Python.

1641900449
squeek502!~squeek502@user/squeek502
pkap, it's an accepted proposal: https://github.com/ziglang/zig/issues/498#issuecomment-440521357

1641900527
squeek502!~squeek502@user/squeek502
sorry, *was* accepted, not sure of the status now

1641900580
pkap!~pkap@185.209.196.174
Thanks, I read through it.

1641901017
ifreund!2940d10f8b@user/ifreund
pkap, squeek502: Allowing tuple types to be defined is accepted: https://github.com/ziglang/zig/issues/4335

1641901048
ifreund!2940d10f8b@user/ifreund
It's not entirely clear if we will have destructuring or not yet though

1641901839
pkap!~pkap@185.209.196.174
Ah nice. In the meantime, I guess it's best to make a custom struct as return type for every function I want to return to values of?

1641901900
pkap!~pkap@185.209.196.174
Or maybe somehow with a generic e.g. `Pair(type1, type2)`?

1641903399
ifreund!2940d10f8b@user/ifreund
pkap: I'd just use a separate struct type for functions you wish to return multiple values from

1641903414
ifreund!2940d10f8b@user/ifreund
I think a generic is overengineering here

1641903488
Franciman!~Franciman@mx1.fracta.dev
is there any intent in having concepts

1641903490
Franciman!~Franciman@mx1.fracta.dev
for genercs?

1641903492
Franciman!~Franciman@mx1.fracta.dev
generics*

1641903555
Franciman!~Franciman@mx1.fracta.dev
dumb example: fn find(comptime A: type, comptime It: InputIteratorType(A), begin: It, end: It, value: A) bool

1641903603
ifreund!2940d10f8b@user/ifreund
Franciman: there have been various proposals if you search through the issue tracker, none seem likely to get accepted thus far though 

1641903643
Franciman!~Franciman@mx1.fracta.dev
ah yes, I mean is there any... how to say, philosophical reason to avoid them

1641903652
Franciman!~Franciman@mx1.fracta.dev
or is it just a matter of having the right proposal?

1641903695
ifreund!2940d10f8b@user/ifreund
they would have to provide significant value to the language without introducing complexity

1641903748
ifreund!2940d10f8b@user/ifreund
zig highly values simplicity, so there's a high bar for new language features to pass

1641903821
Franciman!~Franciman@mx1.fracta.dev
very well

1641904153
pkap!~pkap@185.209.196.174
ifreund: Ok, thanks!

1641912561
Seng!~nick@hurtig.ninja
how do I get the max size of a integer type?

1641912584
Franciman!~Franciman@mx1.fracta.dev
std.math.maxInt(yourType)

1641912599
Franciman!~Franciman@mx1.fracta.dev
https://ziglang.org/documentation/0.6.0/std/#std;math.maxInt

1641912714
Seng!~nick@hurtig.ninja
ah, math. thanks

