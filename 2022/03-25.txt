1648174186
andrewrk!~andrewrk@mail.ziglang.org
jemius: https://gist.github.com/andrewrk/73742bf4b8ed795c85ce

1648179546
plumeus!~plumeus@user/plumeus
that's amazing

1648196645
cnx!c364d5be87@2604:bf00:561:2000::3f
andrewrk, shouldn't that produce 4 characters?

1648205141
motiejus!~motiejus@2001:470:69fc:105::38fb
hopefully a quick one: assume `var x = allocator.alloc(T, 1); then use y = &x[0]` and use it; now I want to free it. How can I convert `y` back to `x`, so I can pass it to `allocator.free()`?

1648205194
motiejus!~motiejus@2001:470:69fc:105::38fb
i.e. I am allocating one element-slice and using it, and storing the pointer of that single element. What is the correct way to get back the `[]T`, to pass it back to the allocator?

1648206320
dutchie!~dutchie@user/dutchie
if you really just want one you should use `allocator.create(T)` and `allocator.destroy` instead. otherwise i guess you'd have to use @ptrCast, not sure though

1648207682
motiejus!~motiejus@2001:470:69fc:105::38fb
I didn't find `create` when I looked, thanks!

1648215908
motiejus!~motiejus@2001:470:69fc:105::38fb
I am getting a segfault when I pack/unpack a struct to bytes and then put it to an anonymous tuple of anonymous tuples: https://paste.sr.ht/~motiejus/2830736e796801517c1fa8639be6615cd56ada27

1648216286
motiejus!~motiejus@2001:470:69fc:105::38fb
found a bunch equivalent reports on github :)

1648221152
Graham31415!~Graham@user/Graham31415
What is the prupose of the block in a suspend block? Is it just to get hold of a @frame?

1648221297
Graham31415!~Graham@user/Graham31415
What can one do with code inside the suspend block that can't be done outside that block? I.e, why would I ever want a non-empty block?

1648221421
Graham31415!~Graham@user/Graham31415
PS, I never used async/await in any language, and just wondered about the suspend block because its purpose wasn't obvious to me from reading the docs.

1648221937
jleahy!~jleahy@212.118.224.200
one example would be deallocating the frame

1648221950
jleahy!~jleahy@212.118.224.200
during the suspend block the function has already been suspended, so it's safe to do things like that

1648222225
Graham31415!~Graham@user/Graham31415
wouldn't that just crash when resumed?

1648222380
jleahy!~jleahy@212.118.224.200
this is if you know it is never going to be resumed again

1648222390
jleahy!~jleahy@212.118.224.200
you'll see this happen in the zig event loop in std

1648222412
jleahy!~jleahy@212.118.224.200
it allocates a frame on the heap, does the async call into it, then eventually it will get deallocated inside a suspend block

1648222423
jleahy!~jleahy@212.118.224.200
it's not clear where else you could deallocate it tbh

1648223577
Graham31415!~Graham@user/Graham31415
So there's a big bundle of runtime that isn't mentioned in the main ziglang.org docs about the language? And this needs to be understood to write code for async/await/suspend/etc?

1648223629
Graham31415!~Graham@user/Graham31415
its hard to see how this fits together from the lib/std/event/*.zig files

1648224749
jleahy!~jleahy@212.118.224.200
yeah there's a whole standard library with no documentation yet

1648224762
jleahy!~jleahy@212.118.224.200
but you don't have to use it, you can use async/await/suspend/resume your own way

1648225066
Graham31415!~Graham@user/Graham31415
but i cant, because i don't know how the parts fit together. E.g. a suspend block.

1648225117
Graham31415!~Graham@user/Graham31415
i'll just ignore async util there's some docs

1648225163
jleahy!~jleahy@212.118.224.200
the docs are fully sufficient for async

1648225171
jleahy!~jleahy@212.118.224.200
i figured out how it worked just from them myself

1648225198
jleahy!~jleahy@212.118.224.200
but if you are unwilling to read the code for std you will have to write your own executor

1648225254
Graham31415!~Graham@user/Graham31415
its not that I'm unwilling to read the stdlib code, its more a matter of not know the entry points and thus not knowing what to look at

1648225326
jleahy!~jleahy@212.118.224.200
there are more people on discord, if you ask in zig-help i bet someone could point you at some example code for async

1648225329
jleahy!~jleahy@212.118.224.200
if you explain what you want to do

1648226259
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
Graham31415: You register the frame by attaching it to a queue/other structure as done here https://gist.github.com/MasterQ32/ff534f912c5faedbbb57974317e79778#file-async_await-zig-L29

1648226328
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
I do the same for delays, registering one-shot handlers for requests that expect a response some time in the future, etc

1648226430
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
have a look at https://github.com/ziglang/zig/blob/master/lib/std/event/loop.zig#L845 for an example within std

1648226557
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
also https://github.com/ziglang/zig/blob/master/lib/std/event/loop.zig#L827 which uses it

1648227626
jleahy!~jleahy@212.118.224.200
while we're talking about coroutines - originally there was code that implemented them via function splitting, then it was changed by to the 'giant switch' approach (which seems much less efficient) - does anybody know why that happened? it might be one of these things that only andrew knows

1648229414
Graham31415!~Graham@user/Graham31415
Levy[m]: thanks, that's a nice simple example. But why must the code be inside the suspend block, instead of just being immediately before the suspend call?

1648229532
Graham31415!~Graham@user/Graham31415
what property of "inside the suspend block" is important here?

1648229551
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
can you catch the frame of a function that's currently running?

1648229573
Graham31415!~Graham@user/Graham31415
So, @frame() doesn't work ouside a suspend block?

1648229668
jleahy!~jleahy@212.118.224.200
 linuxWaitFd in loop.zig uses @frame() outside of suspend, so apparently it's not that simple

1648230055
Graham31415!~Graham@user/Graham31415
Does the frame get modified by a "suspend" keyword? Or is a frame effectively const throughout the life of a function's execution (regardless of suspend, etc)?

1648230080
Graham31415!~Graham@user/Graham31415
I mean, does the frame get modified during execution when "suspend" is triggered.

1648230341
Graham31415!~Graham@user/Graham31415
I guess things like `defer` must modify the frame.

1648231033
dknite!~dknite@2405:201:800b:481f:e27b:9687:63b0:8322
Hi! In the source for HashMapUnmanaged, there is a line `@alignCast(@alignOf(Header), self.metadata.?)`. What does `self.metadata.?` mean? 

1648231315
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
jleahy: `@frame()` is a pointer to the current frame https://ziglang.org/documentation/master/#frame

1648231336
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
so ignore my statement about modification

1648232166
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
wtf is drew really banned in the zig-community? ^^ I just saw that on hackernews

1648232454
cnx!c364d5be87@2604:bf00:561:2000::3f
lol which drew

1648232497
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
cnx, https://drewdevault.com/ he's apparently writing some sort of Zig-Clone

1648232514
companion_cube!~simon@user/companion-cube
where did you see that?

1648232528
cnx!c364d5be87@2604:bf00:561:2000::3f
ah lol that language is not a zig clone, it doesn't even have meteprogramming

1648232537
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
companion_cube, https://news.ycombinator.com/item?id=15494222

1648232558
companion_cube!~simon@user/companion-cube
oh :D

1648232593
cnx!c364d5be87@2604:bf00:561:2000::3f
drew devault used to aggressively shit on zig's early design

1648232602
cnx!c364d5be87@2604:bf00:561:2000::3f
yea that one

1648232606
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
People should really not be emotional about their languages. Yet there they are, calling themselves Gophers and Rusteceans

1648232629
cnx!c364d5be87@2604:bf00:561:2000::3f
his tempered has drastically improved in the last 12 months or so

1648232733
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
I just don't get why one starts his own language over minor disagreements

1648232746
cnx!c364d5be87@2604:bf00:561:2000::3f
i don't think that was the reason

1648232776
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
the fundamental concepts are the same: memory-cleanup with some sort of of defer, error handling with some sort of magic enums (Rust, Zig, arguably Go)

1648232790
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
It seems all the possible mechanisms are known by now

1648232848
companion_cube!~simon@user/companion-cube
he decided that generics are bad™

1648233167
cnx!c364d5be87@2604:bf00:561:2000::3f
jemius i don't think defer is unique to memory clean up or go/zig, RAII and python context manager are wildly similar

1648233188
cnx!c364d5be87@2604:bf00:561:2000::3f
(and error union is the only sane way imho)

1648233234
cnx!c364d5be87@2604:bf00:561:2000::3f
i think what makes zig stands out is comptime, for rust it's ownership (also at compile time), goroutines for go

1648233316
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
cnx, for me it is that it's the only possible C-Replacement. What are you going to use on bare metall, Go?

1648233339
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
On this question however, ultimately the stability of the toolchain will decide (...Rust...)

1648233340
cnx!c364d5be87@2604:bf00:561:2000::3f
i honestly don't even know what's the point of drew devault's new lang, if it's less footgunnny than c, good for him and his team, but i find no reason to use it

1648233348
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
*simplicity

1648233379
cnx!c364d5be87@2604:bf00:561:2000::3f
yea cargo cult is unsufferable, esp on lower end devices

1648233414
cnx!c364d5be87@2604:bf00:561:2000::3f
i seriously wish zig wil have a python-like local package management

1648233417
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
cnx, I suspect it has been started to be the one who finally replaces Dennis Ritchie's work

1648233445
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
I hope that package manegement will not be part of the language. Those are separate issues

1648233450
cnx!c364d5be87@2604:bf00:561:2000::3f
i.e. packages can be found the samd way std is

1648233469
cnx!c364d5be87@2604:bf00:561:2000::3f
it should be as @import is a builtin

1648233518
cnx!c364d5be87@2604:bf00:561:2000::3f
if @import("std") is built into zig build-* then @import("foo") should also not require build.zig to do special magic

1648234207
jemius!~jemius@p200300d96705d8006a9edd9011896825.dip0.t-ipconnect.de
https://github.com/ziglang/zig/issues/234 that was an interesting discussion, though

1648234540
luuk!~luuk@user/luuk
cnx: build.zig is just a frontend to Zig's CLI. i.e. currently using build.zig's `addPackage` will just emit `--pkg begin [name] [path] --pkg end` to the CLI

1648241210
TheLemonMan!~TheLemonM@irssi/staff/TheLemonMan
yo

1648241404
andrewrk!~andrewrk@mail.ziglang.org
TheLemonMan, yoooo what's up my friend?

1648241523
andrewrk!~andrewrk@mail.ziglang.org
are you going to come to the meetup in Milan?

1648241559
andrewrk!~andrewrk@mail.ziglang.org
https://zig.news/kristoff/zig-milan-party-2022-final-info-schedule-1jc1

