1646050504
Gunthor!~Gunthor@2a02:908:1866:ffa0::bb33
Hi! I have a quick question, maybe someone can help me with this. From what I understand (and have seen so far), zig will usually only really compile functions that are referenced by "live" code, So, functions that are not referenced will not be compiled. However, I seem to remember having read that there is a way to tell the compiler to treat all functions in a file as referenced. However, I can't find that any more... does anyone know how o do 

1646050504
Gunthor!~Gunthor@2a02:908:1866:ffa0::bb33
that?

1646050646
ifreund!2940d10f8b@user/ifreund
Gunthor: you can always do _ = foo; in a to "reference" a delclaration be it function or otherwise

1646050665
ifreund!2940d10f8b@user/ifreund
there is a std.testing.refAllDecls() that does this for all declarations in a file

1646050709
ifreund!2940d10f8b@user/ifreund
s/file/container type/

1646050718
Gunthor!~Gunthor@2a02:908:1866:ffa0::bb33
yes, that was it. Excellent, thanks!

1646050720
ifreund!2940d10f8b@user/ifreund
files are structs, you can get the struct type with `@This()`

1646054778
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
test

1646060403
cCCCCcccccCCc!~b@user/ccccccccccccc
andrewrk: As an update on my "can't build musl with zig cc" issue -- https://github.com/zigchroot/zig-chroot/issues/1#issuecomment-1054312813

1646060474
Earnestly!~earnest@user/earnestly
I don't feel like brain, if anyone feels like it, try translate this to zig: https://0x0.st/oKh6.c

1646066270
ifreund!2940d10f8b@user/ifreund
Earnestly: untested, but https://zigbin.io/9345a6

1646066294
Earnestly!~earnest@user/earnestly
Hrm, zigbin needs javascript to display text

1646066310
ifreund!2940d10f8b@user/ifreund
that's stupid

1646066328
ifreund!2940d10f8b@user/ifreund
https://0x0.st/oKFm.c

1646066338
ifreund!2940d10f8b@user/ifreund
heh, 0x0.st things zig is C

1646066358
Earnestly!~earnest@user/earnestly
I think it uses file(1) which determines C files if it contains 'main('

1646066373
ifreund!2940d10f8b@user/ifreund
that's also stupid :D

1646066375
Earnestly!~earnest@user/earnestly
ifreund: Is it zig convention to have main as first function?

1646066385
Earnestly!~earnest@user/earnestly
Yeah fff is quite dumb when it comes to text files

1646066422
ifreund!2940d10f8b@user/ifreund
Earnestly: It's a little to early to say it's a hard convention, that's what I personally prefer though

1646066431
ifreund!2940d10f8b@user/ifreund
unlike C, order of declarations doesn't matter

1646066439
Earnestly!~earnest@user/earnestly
Hm, this is interesting though, thanks for taking the time to indulge me.  There's some things I wasn't expecting, like use of mem.span

1646066444
ifreund!2940d10f8b@user/ifreund
I always found readding from bottom to top annoying

1646066453
luuk!~luuk@user/luuk
I've seen people do both first and last. Personally I tend to make it the first function within the file.

1646066455
Earnestly!~earnest@user/earnestly
Yeah it's a fair position

1646066465
ifreund!2940d10f8b@user/ifreund
mem.span iterates the 0 terminated pointer to get you a slice

1646066473
ifreund!2940d10f8b@user/ifreund
(if that wasn't already clear)

1646066494
Earnestly!~earnest@user/earnestly
Yes, I suppose because zig doesn't do nul terminated strings

1646066503
Earnestly!~earnest@user/earnestly
This is much nicer

1646066504
ifreund!2940d10f8b@user/ifreund
it does if you want to

1646066523
ifreund!2940d10f8b@user/ifreund
and does them way better than C because the the 0 termination is part of the type system

1646066555
ifreund!2940d10f8b@user/ifreund
for example, the type of std.os.argv is `[][*:0]u8`

1646066564
ifreund!2940d10f8b@user/ifreund
or a slice of 0 terminated pointers to u8

1646066574
Earnestly!~earnest@user/earnestly
Yes, but it's not like *p = &buf[2]; buf[5] = 0; printf("%s\n", p); is it?

1646066635
ifreund!2940d10f8b@user/ifreund
well, that code will work just fine in zig

1646066640
ifreund!2940d10f8b@user/ifreund
it's just not very idiomatic

1646066650
Earnestly!~earnest@user/earnestly
Also the {0} bit is interesting difference

1646066657
ifreund!2940d10f8b@user/ifreund
and stricter type safety will make it a bit more verbose

1646066666
ifreund!2940d10f8b@user/ifreund
Earnestly: yeah, the {0} isn't actually necessary here

1646066674
ifreund!2940d10f8b@user/ifreund
more idiomatic zig would be to just use `undefined`

1646066689
Earnestly!~earnest@user/earnestly
Yes, that's only ever done as defensive measure

1646066720
Earnestly!~earnest@user/earnestly
ifreund: Is Z suffix on function name indicating experimental?

1646066752
Earnestly!~earnest@user/earnestly
Also note that a read is done before the loop

1646066770
ifreund!2940d10f8b@user/ifreund
Earnestly: no, it's the current convention for OS functions that take a 0 terminated string instead of a normal slice

1646066777
Earnestly!~earnest@user/earnestly
Ah

1646066796
Earnestly!~earnest@user/earnestly
I assume the initial read is due to zig not having a do{}while?

1646066831
ifreund!2940d10f8b@user/ifreund
yeah, I wasn't terribly happy with the loop condition, but decided I like it marginally better than a while (true) with a break

1646066855
ifreund!2940d10f8b@user/ifreund
and yep, a do while would clean that up a bit

1646066909
Earnestly!~earnest@user/earnestly
A typical test for this is ./xor key xor.zig | ./xor key | md5sum - xor.zig

1646066994
Earnestly!~earnest@user/earnestly
But thank you, I'll have a look over it and see what's going on

1646067036
ifreund!2940d10f8b@user/ifreund
no problem! I know how much a simple side-by-side idiomatic comparison can help when starting out with a new language

1646067116
Earnestly!~earnest@user/earnestly
I appreciate the slices, both Go and Ada have these, and it's seems like such an obviously nice thing.  Much of C has survived the test of time, but so have a few others

1646067131
ifreund!2940d10f8b@user/ifreund
Earnestly: it passes that simple test for me with a file over 8196 bytes fwiw

1646067181
Earnestly!~earnest@user/earnestly
I'd hope it would work for a file larger than that, since it's just a buffer.  The constant was stolen from plan9's cat.c

1646067274
Earnestly!~earnest@user/earnestly
ifreund: Curious that it needs the cwd to open files

1646067356
ifreund!2940d10f8b@user/ifreund
Earnestly: if a path is relative, zig doesn't blindly assume that you mean for it to be relative to the cwd, instead you have to explictly put that cwd() call in the code

1646067392
Earnestly!~earnest@user/earnestly
Hmm

1646067396
ifreund!2940d10f8b@user/ifreund
the function is essentially free though on unixy systems, just returns AT_FDCWD

1646067458
Earnestly!~earnest@user/earnestly
plan9 does have the fd2path idea, which is essentially predicated on the idea that all file objects must have known absolute paths.  This is mostly so it can solve a lot of the .. problems with bind mounts (ala symlinks) creating cyclic filesystems

1646067488
Earnestly!~earnest@user/earnestly
So it's not such a bad idea to force this, and if relative is to have special meaning, the code can deal with it before opening it

1646067792
Earnestly!~earnest@user/earnestly
But yes, thank you

1646074688
cCCCCcccccCCc!~b@user/ccccccccccccc
andrewrk: Got it traced down to https://github.com/zigchroot/zig-chroot/issues/1#issuecomment-1054529290 now, it looks like zig's linker doesn't like it when the output is /dev/null as best I can tell.

1646076460
andrewrk!~andrewrk@mail.ziglang.org
cCCCCcccccCCc, nice sleuthing - thanks for the extra info

1646077327
andrewrk!~andrewrk@mail.ziglang.org
cCCCCcccccCCc, could I give you a patch to try?

1646077335
cCCCCcccccCCc!~b@user/ccccccccccccc
Sure!

1646077628
andrewrk!~andrewrk@mail.ziglang.org
cCCCCcccccCCc, https://clbin.com/gtXo1

1646077763
cCCCCcccccCCc!~b@user/ccccccccccccc
Alright, building now.

1646078380
andrewrk!~andrewrk@mail.ziglang.org
cCCCCcccccCCc, I can at least update master branch of zig-bootstrap for you right now if that would help 

1646078411
cCCCCcccccCCc!~b@user/ccccccccccccc
Oh, it's no worries, you answered the big question for me: I can just replace the zig directory. 

1646078441
andrewrk!~andrewrk@mail.ziglang.org
yeah there are no patches in that directory

1646078465
andrewrk!~andrewrk@mail.ziglang.org
I'm still going to update it though so that master branch will at least have llvm 13.0.1

1646078581
cCCCCcccccCCc!~b@user/ccccccccccccc
Alright, great, I'll rebase on that, verify if it solves the issue and then see if I can finish getting the chroot to reproduce itself from the inside. It basically can. 

1646078787
ifreund!2940d10f8b@user/ifreund
Earnestly: I realized there's a more idiomatic and probably equally optimal way to write the loop: https://0x0.st/oKCI.c

1646078792
andrewrk!~andrewrk@mail.ziglang.org
pushed

1646078852
ifreund!2940d10f8b@user/ifreund
it's a slight change of behavior from the C version with regards to how i is produced, but I think it's acceptable

1646078893
Earnestly!~earnest@user/earnestly
ifreund: Oh yes, zig's while loop as an else statement

1646078917
Earnestly!~earnest@user/earnestly
It's weird how natural that sort of thing comes but rarely found anywhere

1646078969
ifreund!2940d10f8b@user/ifreund
also replaced the manual buffered reading with something from the std

1646079002
andrewrk!~andrewrk@mail.ziglang.org
this example is just begging for some SIMD

1646079044
ifreund!2940d10f8b@user/ifreund
oh yeah

1646079050
ifreund!2940d10f8b@user/ifreund
this will be fun

1646079167
ifreund!2940d10f8b@user/ifreund
andrewrk: hmm, can you have both an else for the error and an else for no break on a while loop?

1646079176
ifreund!2940d10f8b@user/ifreund
this feels kinda weird

1646079193
andrewrk!~andrewrk@mail.ziglang.org
those two things are the same

1646079252
ifreund!2940d10f8b@user/ifreund
while (fooMayReturnError()) |foo_result| {... } else |err| { ... } works

1646079275
ifreund!2940d10f8b@user/ifreund
oh I see

1646079281
andrewrk!~andrewrk@mail.ziglang.org
:D

1646079301
ifreund!2940d10f8b@user/ifreund
that's kinda beautiful actually 

1646079302
andrewrk!~andrewrk@mail.ziglang.org
one of the cleaner corners of zig

1646079355
sh4_!~sh4@user/sh4
that looks like ruby :o

1646079491
andrewrk!~andrewrk@mail.ziglang.org
yeah ruby uses that |foo| {...} syntax for lambdas but in zig it's just an expression with an extra value in scope

1646079642
luuk!~luuk@user/luuk
Yeah

1646079647
luuk!~luuk@user/luuk
Sorry, wrong chat

1646079719
motiejus!~motiejus@2001:470:69fc:105::38fb
noob question: I want to store a mutable ArrayList in a hashmap; should it be `StringHashMap(*ArrayList(*const Foo))` or `StringHashMap(ArrayList(*const Foo))`? I not sure whether it's safe ("will do what I want") with all operations, e.g. ones that return a `Value` instead of `*Value`.

1646079751
motiejus!~motiejus@2001:470:69fc:105::38fb
I can store "just a pointer" and be safe, but I'd rather understand it first

1646079781
ikskuh!~xq@v43666.php-friends.de
motiejus: it's safe to do ArrayList(*const Foo)

1646079791
ikskuh!~xq@v43666.php-friends.de
but: you have to use the **Ptr() functions 

1646079798
ikskuh!~xq@v43666.php-friends.de
like getPtr(key) instead of get(key)

1646079810
ikskuh!~xq@v43666.php-friends.de
otherwise you'll receive a copy of the ArrayList

1646079831
ikskuh!~xq@v43666.php-friends.de
that's why most APIs now return Entry as (key_ptr, value_ptr)

1646079831
motiejus!~motiejus@2001:470:69fc:105::38fb
yeah, I was cautious of that exactly. Ptr functions make sense, thanks!

1646079848
ikskuh!~xq@v43666.php-friends.de
two notes: making it pointer will make memory management A LOT harder

1646079874
ikskuh!~xq@v43666.php-friends.de
second note: Using ArrayListUnmanaged is probably better here

1646079880
ikskuh!~xq@v43666.php-friends.de
as it will reduce the size of your map data by 2

1646079950
andrewrk!~andrewrk@mail.ziglang.org
I would say that, coming from C++, one advantage zig std lib data structures bring to the table is the ability to use non-pointers in this exact scenario

1646079960
andrewrk!~andrewrk@mail.ziglang.org
I remember trying to do this in c++ on many occasions and always shooting myself in the foot

1646080036
motiejus!~motiejus@2001:470:69fc:105::38fb
but one has to be very careful then with non-pointers; it's too easy to get it copied (my today's experience)

1646080043
motiejus!~motiejus@2001:470:69fc:105::38fb
also, the Ptr API doesn't have, say, `getOrPutPtr`

1646080127
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
`getOrPut` returns an `Entry` which has both `value_ptr` and `key_ptr`

1646080196
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
well, `GetOrPutResult` with the additional `found_existing` field

1646080456
motiejus!~motiejus@2001:470:69fc:105::38fb
thanks  all :)

1646085131
cCCCCcccccCCc!~b@user/ccccccccccccc
andrewrk: I'll try to have more info later, but I gotta step away for a bit. In the meantime: https://github.com/zigchroot/zig-chroot/issues/1#issuecomment-1054673280

1646085151
cCCCCcccccCCc!~b@user/ccccccccccccc
It now builds differently and looks to be an improvement but the end result still segfaults. I'll look more into it later.

1646085258
andrewrk!~andrewrk@mail.ziglang.org
cCCCCcccccCCc, the unsupported linker args probably need to be implemented on zig's end

1646085289
andrewrk!~andrewrk@mail.ziglang.org
I can look into that

