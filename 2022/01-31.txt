1643654809
McKael!~mikael@82-64-95-224.subs.proxad.net
I'd like to know if there's a "nice" way of sorting a StringHashMap (or a struct) using the values (or a custom field).  I've been able to do it using a temporary list, but I'm wondering if I'm missing something.

1643654854
McKael!~mikael@82-64-95-224.subs.proxad.net
It seems I cannot access the outer HashMap from the struct I implement the helper comparison function in,

1643654885
McKael!~mikael@82-64-95-224.subs.proxad.net
and there's a search "context" field which I don't really understand.

1643655002
McKael!~mikael@82-64-95-224.subs.proxad.net
(I haven't seen this context used in the std lib (except for a "workaround for stage1 compiler bug" in multi_array_list.zig)

1643655237
andrewrk!~andrewrk@mail.ziglang.org
McKael, that should be possible with ArrayHashMap since the order is preserved

1643655253
andrewrk!~andrewrk@mail.ziglang.org
I'm not sure how well supported by the API it is, but I think it should be supported

1643658494
jemius!~imperator@200116b82dbc5700b5580833a8548279.dip.versatel-1u1.de
fn printPowersOfTwo(numbers: [4]u16)   <-- is such a code guaranteed to always pass 'numbers' on the Stack?

1643658512
Franciman!~Franciman@mx1.fracta.dev
no

1643658518
Franciman!~Franciman@mx1.fracta.dev
it chooses whatever is the most efficient

1643658532
jemius!~imperator@200116b82dbc5700b5580833a8548279.dip.versatel-1u1.de
Franciman, so either registers or stack

1643658537
jemius!~imperator@200116b82dbc5700b5580833a8548279.dip.versatel-1u1.de
like C

1643658543
Franciman!~Franciman@mx1.fracta.dev
or pointer to

1643658564
Franciman!~Franciman@mx1.fracta.dev
because numbers is immutable inside the function, so there is no difference

1643658586
Franciman!~Franciman@mx1.fracta.dev
(observe that you can still modify the contents of the array anyways)

1643659167
jemius!~imperator@200116b82dbc5700b5580833a8548279.dip.versatel-1u1.de
Franciman, what is then the point about being able to pass stuff via pointer, when the compiler chooses the best way automatically, anyways?

1643659190
Franciman!~Franciman@mx1.fracta.dev
the point is that parameters are immutable

1643659192
Franciman!~Franciman@mx1.fracta.dev
so if you have

1643659197
Franciman!~Franciman@mx1.fracta.dev
fn f(n: i32)

1643659201
Franciman!~Franciman@mx1.fracta.dev
and you want to modify n inside f

1643659205
Franciman!~Franciman@mx1.fracta.dev
you need to pass a pointer to it

1643659241
Franciman!~Franciman@mx1.fracta.dev
s 

1643659293
Franciman!~Franciman@mx1.fracta.dev
being the arguments immutable, the compiler can decide what type of parameter passing is better

1643659317
Franciman!~Franciman@mx1.fracta.dev
but if you need to modify an argument, you pass a pointer

1643659336
Franciman!~Franciman@mx1.fracta.dev
so the address of the pointer can't be changed, because it is immutable, but the value pointed to by the pointer can be modified

1643659369
jemius!~imperator@200116b82dbc5700b5580833a8548279.dip.versatel-1u1.de
ack, so basically as in C

1643659383
Franciman!~Franciman@mx1.fracta.dev
actually i don't know what happens with arrays

1643659397
Franciman!~Franciman@mx1.fracta.dev
but i think it is similar to slices

1643659423
Franciman!~Franciman@mx1.fracta.dev
jemius: can you modify the numbers array inside the function?

1643659464
ravella!~ravella@user/ryanavella
seems relevant: https://github.com/ziglang/zig/issues/5973

1643659516
ifreund!2940d10f8b@user/ifreund
Franciman: no, parameters are constant

1643659564
Franciman!~Franciman@mx1.fracta.dev
ifreund: but i can modify a slice's contents

1643659570
Franciman!~Franciman@mx1.fracta.dev
i thought the same about arrays

1643659573
Franciman!~Franciman@mx1.fracta.dev
but it makes sense!

1643659591
ifreund!2940d10f8b@user/ifreund
Franciman: you cant modify the .len or .ptr of the slice

1643659604
ifreund!2940d10f8b@user/ifreund
arrays are semantically values in zig

1643659611
Franciman!~Franciman@mx1.fracta.dev
awesome

1643659613
Franciman!~Franciman@mx1.fracta.dev
i like this coherence

1643659616
Franciman!~Franciman@mx1.fracta.dev
yes i reckoned it

1643659617
ifreund!2940d10f8b@user/ifreund
slices are "fat" pointers

1643660574
McKael!~mikael@82-64-95-224.subs.proxad.net
andrewrk: thanks, I'm still not sure how I could sort an ArrayHashMap, but I'll have a deeper look

1643660836
Franciman!~Franciman@mx1.fracta.dev
McKael: can you also explain what is the problem that you are trying to solve by sorting an arrayhashmap?

1643660948
jemius!~imperator@200116b82dbc5700b5580833a8548279.dip.versatel-1u1.de
ifreund, sooooo it is never actually necessary to pass an array via pointer to a function?

1643661022
ifreund!2940d10f8b@user/ifreund
jemius: if you want to modify the array, it is absolute necessary to pass by pointer

1643661022
Franciman!~Franciman@mx1.fracta.dev
jemius: only if you want to modify its contents

1643661058
ifreund!2940d10f8b@user/ifreund
even if you don't want to modify it you need to pass by *const pointer if you want to keep the refernce around beyond the function's scope and avoid the copy

1643661942
McKael!~mikael@82-64-95-224.subs.proxad.net
Franciman: basically I have a hashmap (label string -> rating) and I want the list of labels ordered by their ratings.

1643662188
McKael!~mikael@82-64-95-224.subs.proxad.net
So I made a list with the values, sorted that list and then created a new list of labels.  But I thought that there probably was a nicer way.

1643662331
McKael!~mikael@82-64-95-224.subs.proxad.net
I was wondering (that was yesterday) if the context field in std.sort.sort() was intended to be use in a case like this.

1643663524
andrewrk!~andrewrk@mail.ziglang.org
McKael, not sure if it exists yet but we could add a method to ArrayHashMap called "recomputeIndexes" or something like that. Basically it would let you reach into the array, sort the keys/values, and then call recomputeIndexes

1643667779
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
thinking about a change in career, working at HP is becoming alot less fun with how slow it is to build/work on our new firmware.  Thinking of giving Google a try, anyone have experience with working with them?

1643668522
McKael!~mikael@82-64-95-224.subs.proxad.net
andrewrk: There seems to be a reIndex() method, but I can't find out how to reach into the underlying array to sort it.

1643668886
ifreund!2940d10f8b@user/ifreund
McKael: There are actual two parallel arrays which can be accessed with keys() and values()

1643668904
ifreund!2940d10f8b@user/ifreund
s/actual/actually/

1643668986
McKael!~mikael@82-64-95-224.subs.proxad.net
ifreund: oh, so I guess I can't use the std lib sort.sort method?

1643669043
ifreund!2940d10f8b@user/ifreund
hmm, yeah I guess not

1643669057
McKael!~mikael@82-64-95-224.subs.proxad.net
Ok, thanks

1643669092
ifreund!2940d10f8b@user/ifreund
Probably we need an optional, more powerful API in std.sort to support this kind of thing

1643673470
andrewrk!~andrewrk@mail.ziglang.org
yeah it would operate based on indexes and so you could sort N parallel arrays with it

1643673588
andrewrk!~andrewrk@mail.ziglang.org
similar to hash map context objects, fancysort() would take a context struct as anytype so you could put any state in it, and then also provide swap() and lessThan()

