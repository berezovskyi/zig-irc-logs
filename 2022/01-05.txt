1641348914
constxd!~brad@142.134.38.68
hey kings

1641348989
constxd!~brad@142.134.38.68
taking a look at zig for the first time and i am a bit confused about all this allocator stuff

1641349109
constxd!~brad@142.134.38.68
what is the rationale behind requiring explicit references to allocators all over the place

1641349143
constxd!~brad@142.134.38.68
it's not very often i want to use something other than malloc()

1641349176
constxd!~brad@142.134.38.68
now every arraylist has to store an extra pointer in it?

1641349320
freshcoffee!~fresh@user/freshcoffee
there is ArrayListUnmanaged with the tradeoff to note store allocator in a list instance, but you do need to supply allocator during method calls

1641349336
freshcoffee!~fresh@user/freshcoffee
s/note/not/

1641349586
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
constxd, Because a lot of the time you do :)

1641349655
constxd!~brad@142.134.38.68
why?

1641349682
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
So you could do what C does, where if you want to, say, use a fixed buffer for this because you know the maximum size of the input you're the one in charge of maintaining all the memory.

1641349697
constxd!~brad@142.134.38.68
c++ seems to be pretty providing opt-in custom allocators without making you specify them all over the place

1641349705
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
Vs having an "allocator" interface you just pass around.

1641349707
constxd!~brad@142.134.38.68
pretty good at*

1641349751
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
Can't say I'm an expert in that. How do I make "new" use my custom arena-based allocator for all objects?

1641349798
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
(or the STL at large)

1641349879
constxd!~brad@142.134.38.68
well for the STL, the classes take allocator as an optional template parameter

1641349888
constxd!~brad@142.134.38.68
std::vector<int, my_allocator> v;

1641349938
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
That's fair enough.

1641350025
constxd!~brad@142.134.38.68
i feel like in most applications, you tend to create a lot of objects and most of the time you either don't know precisely how much memory they'll need or don't care enough to calculate it because the performance benefit of using a custom fixed buffer allocator for it is inconsequential

1641350073
constxd!~brad@142.134.38.68
maybe you benchmark your program and it turns out this one part of it is doing a ton of allocation and it's a bottleneck

1641350093
constxd!~brad@142.134.38.68
then you maybe want a custom allocator there but everywhere else you don't care

1641350153
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
A custom fixed buffer allocator for it might be inconsequential (unless you wanna intentionally limit how much memory it can use for example,) but it might make sense to use an arena allocator if you have a really cyclic usage pattern or something.

1641350181
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
Or just at the top of your program do var alloc = std.mem.GeneralPurposeAllocator and suddenly get valgrind on your app for free.

1641350188
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
For the price of some performance

1641350243
constxd!~brad@142.134.38.68
this website im reading says you can use std.heap.c_allocator for performance

1641350248
constxd!~brad@142.134.38.68
but then you depend on libc

1641350254
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
That'd be equivalent to malloc basically, yeah.

1641350263
constxd!~brad@142.134.38.68
why isn't there just a zig implementation of malloc() in the std lib

1641350272
constxd!~brad@142.134.38.68
i feel like that's what you'd want in release builds

1641350278
constxd!~brad@142.134.38.68
and then the generalpurpose one in debug

1641350288
constxd!~brad@142.134.38.68
like what do most people default to

1641350329
Tekk!~tekk@static-198-54-133-121.cust.tzulo.com
Honestly the overhead of GPA isn't bad. A lot of people just use that as far as I know.

1641350368
constxd!~brad@142.134.38.68
hmm ok

1641350373
constxd!~brad@142.134.38.68
thank you

1641350644
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
constxd: I'm coming from a lot of C++ programming, one side-effect of zig allocators has been that I've been a lot more considerate of my heap usage to begin with.  I'm using GPA mostly, though nothing I'm doing is performance sensitive, and then paying more attention to how I move data around so that I need allocators in fewer places in my programs.

1641350703
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
That's not related to the rationale behind it, just a little self-reflection

1641350918
squeek502!~squeek502@user/squeek502
constxd, "why isn't there just a zig implementation of malloc() in the std lib": because it hasn't been written yet, see https://github.com/ziglang/zig/blob/master/lib/std/heap/general_purpose_allocator.zig#L36-L42

1641363587
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
I'm pretty confused as to the semantics of ArrayList.replaceRange

1641363631
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
it seems like there's a bug in that it panics if I try to replace a range that goes off the end of the list rather than extending (which the doc comment seems to say it should)

1641363673
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
but also it takes a len argument that determines behavior, which seems weird given that the new_range also includes its own len

1641363887
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
so I thought I'd try to fix it, and I'm finding I'm not actually sure what the intent of this API is in the first place

1641364453
Arnavion!arnavion@user/arnavion
`start` and `len` together define what part of itself is replaced. `len` doesn't have to be equal to `new_range.len`

1641364537
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
yeah, that makes sense (sort of), the comment also says 'Grows list if len < new_items.len' which doesn't look like what it actually does, and why switch behavior based on if you're using the whole range or not?

1641364548
Arnavion!arnavion@user/arnavion
It seems to be doing that to me

1641364559
Arnavion!arnavion@user/arnavion
That's the self.insertSlice call

1641364570
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Also when would the len parameter be preferable to making a subslice of new_items?

1641364591
Arnavion!arnavion@user/arnavion
Say you're replacing five elements with seven elements. The first five will directly overwrite the existing five. The remaining two will be given to insertSlice

1641364632
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Well, if you have safety off. If you don't, creating the range on the first line of the function panics cause after_range is outside items

1641364641
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
at least that's what's happening to me

1641364653
Arnavion!arnavion@user/arnavion
Only if you give it an incorrect `len`

1641364662
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
also, the insetSlice key is based on range.len, not 'len' the parameter

1641364669
Arnavion!arnavion@user/arnavion
Both start and after_range will be in bounds

1641364698
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
uhhhh... that's not what's happening? What pastebin do we use here?

1641364728
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
granted I started writing this language like 5 days ago so I'm probably confused, but this ... definitely isn't doing what I'd expect

1641364757
Arnavion!arnavion@user/arnavion
<da_lorax> also, the insetSlice key is based on range.len, not 'len' the parameter   < It's using the correct parameters.

1641364783
Arnavion!arnavion@user/arnavion
As I said, if you replace five elements with seven elements, the first five of those seven directly overwrite the existing five elements. The remaining two are given to insertSlice

1641364786
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Where should I paste the test case that I am confused by?

1641364795
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
yes, that's what I expected, but that's not what I'm seeing

1641364828
Arnavion!arnavion@user/arnavion
Nobody cares what website you use to paste things

1641364855
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
sweet. Some channels do. Sec

1641364947
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
https://pastebin.com/42deHrth << This panics

1641364967
Arnavion!arnavion@user/arnavion
Yes, because you told it to replace 0..2 in an empty list

1641364980
Arnavion!arnavion@user/arnavion
`0, 0, &...` is what you want

1641365005
Arnavion!arnavion@user/arnavion
"Start at element zero, and replace the next zero elements with the slice I gave"

1641365055
Arnavion!arnavion@user/arnavion
What you have is "Start at element zero, and replace the next two elements with the slice I gave", but since your list doesn't have "the next two elements" of course it's going to be out-of-bounds

1641365110
Arnavion!arnavion@user/arnavion
The existing tests already test this btw

1641365142
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
oh, that's... not the function I need

1641365160
Arnavion!arnavion@user/arnavion
(And for reference, this function is often called "splice" in other languages, and works exactly the same way"

1641365438
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Javascript Array.splice() will extend off the end if you ask it to, I don't know of any other languages with this construct

1641365490
Arnavion!arnavion@user/arnavion
JS, Rust, and Zig of course

1641365498
Arnavion!arnavion@user/arnavion
are the ones I can immediately think of

1641365509
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
JS doesn't do this, A.splice(0, 2, 1, 2) turns A into [1,2]

1641365533
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
(A was [] initially)

1641365581
Arnavion!arnavion@user/arnavion
Presumably it's "helpfully" clamping the second parameter for you

1641365590
Arnavion!arnavion@user/arnavion
0, 0, 1, 2 will give you [1, 2] as well, which is how it's supposed to work

1641365598
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
'rust splice' on google is returning a struct, I don't see a function with that name and I'm not aware of one with that semantics but I can never find anything in rustdoc

1641365614
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
"supposed to work" is ... subjective

1641365616
Arnavion!arnavion@user/arnavion
It returns a struct that's an iterator of the elements you replaced

1641365634
Arnavion!arnavion@user/arnavion
It doesn't affect the operation itself, for which the parameters are essentially the same

1641365664
Arnavion!arnavion@user/arnavion
The part to be replaced is specified as a single range type instead of two integers, and the new elements are specified as an iterator instead of a slice. The point is the same

1641365731
Arnavion!arnavion@user/arnavion
<da_lorax> "supposed to work" is ... subjective   < https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice   It's called "deleteCount" which is exactly how zig treats it. The only difference is that it clamps, as I said

1641365799
Arnavion!arnavion@user/arnavion
(It clamps negative values to zero too. Presumably you're not hoping zig should copy that behavior too.)

1641365849
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
yeah, I need the clamping version, I've through of JS splice as "Mogrify the array such that start..len is the remaining args list"

1641365873
Arnavion!arnavion@user/arnavion
Well, now you know that's not how the JS version works either

1641365880
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
It is though

1641365894
Arnavion!arnavion@user/arnavion
For one, your interpretation doesn't work for any start > 0

1641365895
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
but it's... not important, I'll just write the one I want

1641365906
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
*start+len

1641365938
Arnavion!arnavion@user/arnavion
And for another, your interpretation doesn't work for deleteCount != N (the N of itemN)

1641366073
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
true

1641366153
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Apparently I've never used it that way lol

1641366237
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
I do kinda think the clamping version is helpful, but thinking of it as "number of items to remove and replace with new_range" makes it make a lot more sense

1641366287
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
and I didn't make the connection between replaceRange and splice

1641366826
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
There's not a function to do that, is there? I want to stick a range into a list starting at some offset, clobbering existing values, and possibly extending

1641367704
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Is there supposed to be more info after "memory address ... leaked:" when using testing.allocator? There's a colon and two blank lines in the output, I feel like it's trying to tell me something

1641367779
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
but alas, I cannot hear

1641371567
Arnavion!arnavion@user/arnavion
On the lines after that i'll print a stack trace in the same way that it does for panics in safe mode

1641371570
Arnavion!arnavion@user/arnavion
it'll*

1641371610
Arnavion!arnavion@user/arnavion
eg   https://paste.rs/Zom

1641373147
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Do I have to do something to make that happen beyond `zig build test`?

1641373356
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
cause mine is not doing that, there's just 2 blank lines instead of the stack

1641373393
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
(I'm on windows if that matters)

1641373461
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Is there an idiomatic way to initialize an array on the stack without listing every member?

1641373473
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
i.e. https://paste.rs/nY7

1641373499
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
ideally I'd like them all to start out zeroed and then I can just set the relevant ones in the loop

1641373542
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
but I'm not sure how to do it without explicitly writing .{.red=0, .green=0, .blue=0} 8 times

1641374822
jcmoyer!~jcmoyer@user/jcmoyer
da_lorax: you can use the ** operator, e.g. var pixels = [_]Color{.{.red = 0, .green = 0, .blue = 0}} ** 8;

1641375288
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
much nicer, thanks

1641375425
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
ok one more noob question before bed, where does std.log.info() output go in tests? Can I make it show up on stdout?

1641376109
luuk!~luuk@user/luuk
da_lorax: test output is being overwritten by the test runner, so if you want to see some output you'll have to prepend a linebreak in your log message.

1641376491
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
doesn't seem to work... Could this be related to why I'm not seeing stack traces for memory leaks?

1641376551
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
    I made a test that's just std.log.info("\n\n\nTEST\n\n\n", .{});

1641376636
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
and got nothing

1641376705
luuk!~luuk@user/luuk
What build mode are you using?

1641376988
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
`zig build test`

1641377091
ikskuh!~xq@v43666.php-friends.de
da_lorax: what's the mode that is passed to the build step in your build.zig?

1641377151
luuk!~luuk@user/luuk
Also, are you sure the test in question is being ran at all? Zig is lazy, so only tests in files that are referenced will be ran. Meaning that if the test is in another file, and that file is not referenced, the test will not be ran.

1641377193
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
this is in a folder I just ran `zig init-exe` in, it has one file and one test and a main that says the usual line and no other changes

1641377323
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
It's not getting overwritten by a \r cause I can `2> file; xxd file` and there's nothing other than what I see

1641377324
luuk!~luuk@user/luuk
da_lorax: Can you try a higher log-level, such as using std.log.err?

1641377359
luuk!~luuk@user/luuk
The log levels were recently changed, so maybe that means `info` isn't high enough to output during tests.

1641377363
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Oh hey, there it is

1641377378
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
that seems to be the case... how do i change the level? I'd like to see info()s from things being called in tests

1641377391
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
without having to change all the infos in my program to err

1641377541
ikskuh!~xq@v43666.php-friends.de
in tests, you can only use .err

1641377557
ikskuh!~xq@v43666.php-friends.de
if you want to have some debug printing (for printf debugging), use std.debug.print()

1641377570
ikskuh!~xq@v43666.php-friends.de
logs are semantically different and if a test logs an error, that is considered an error afaik

1641377614
luuk!~luuk@user/luuk
Actually, you can overwrite `std.testing.log_level = .debug` and it will work.

1641377621
luuk!~luuk@user/luuk
Within your test case that is

1641377627
ikskuh!~xq@v43666.php-friends.de
oh! nice

1641377636
ikskuh!~xq@v43666.php-friends.de
can we also expect logs? :thinking: 

1641377798
luuk!~luuk@user/luuk
ikskuh: Don't think you can. Looking at the test runner in stdlib it will count the test as failed when you use log.err(), and will simply call out to debug.print for lower levels.

1641377819
ikskuh!~xq@v43666.php-friends.de
hmm

1641377846
ikskuh!~xq@v43666.php-friends.de
i think i'll PR that. std.testing.expectedLogs(5, .info);

1641378118
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
oh std.debug.print sounds like what I actually want. Still need to wrap them in \n for it to show up right though

1641378126
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
which makes non-test output long

1641378427
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Whelp, I now have a program that runs, prints output, and is totally wrong. Progress!

1641378440
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
Thanks for the help, it's bedtime on the west coast :)

1641378499
comrad!~quassel@holarse/comrad
i thought the west coast never sleeps!!

1641379006
hiljusti!~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b
we take shifts on the west coast

1641379190
Franciman!~Franciman@mx1.fracta.dev
24/7

1641379207
Franciman!~Franciman@mx1.fracta.dev
the mediterrean hitting back

1641414823
Seng!~nick@hurtig.ninja
like with `try func()` is there a pretty way to unwrap an optional?

1641414856
ifreund!2940d10f8b@user/ifreund
Seng: func() orelse return null; would be the direct equivalent of try 

1641414861
Seng!~nick@hurtig.ninja
I have a case where I know the optional indeed has a value, and I think `myOpt orelse @panic("omg");` is too verbose.

1641414877
ifreund!2940d10f8b@user/ifreund
oh, you're looking for foo.?;

1641414892
ifreund!2940d10f8b@user/ifreund
which is sugar for `foo orelse unreachable`

1641414913
Seng!~nick@hurtig.ninja
you magnificent human being, ifreund !

1641414934
ifreund!2940d10f8b@user/ifreund
who told you I was a human :P

1641414981
Seng!~nick@hurtig.ninja
~wHaT iS 8 + 5?~

1641422758
Seng!~nick@hurtig.ninja
how do I at runtime shift a u16 N bits right?

1641422779
novakane!ca74a093b3@user/novakane
 /quit

1641422781
Seng!~nick@hurtig.ninja
bits should fall off

1641423020
ofelas!~ofelas@ti0071a400-7012.bb.online.no
x >>= 2

1641423106
ofelas!~ofelas@ti0071a400-7012.bb.online.no
x >>= @truncate(u4, N)

1641423328
waleee!~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4
thought I was in #haskell for a split second there

1641423360
Seng!~nick@hurtig.ninja
what's the difference between `a >> b` and `a >>= b`? Will >>= store the result in a?

1641423392
ofelas!~ofelas@ti0071a400-7012.bb.online.no
aye

1641423504
ofelas!~ofelas@ti0071a400-7012.bb.online.no
x = x >> N, see also @shrExact

