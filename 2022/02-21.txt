1645415112
Techcable!~Techcable@168.235.93.147
Hi. I'm considering moving from semi-generated C to hand-written Zig

1645415154
Techcable!~Techcable@168.235.93.147
I'm wondering how easy it would be for a (hand-written) JIT compiler to produce structures compatible with Zig `extern struct`?

1645415197
Techcable!~Techcable@168.235.93.147
This ABI compatibility/complexity is the main reason I cannot use Rust or C++ for this :(

1645415526
Techcable!~Techcable@168.235.93.147
I mean I guess I could just try it

1645415616
Techcable!~Techcable@168.235.93.147
The primary JIT compiler is written in Rust. It's large and the prototype works fairly well. The issue I've been stuck on is writing the VM

1645415682
Techcable!~Techcable@168.235.93.147
I'm working on JIT compiler for CPython, and the CPython runtime is extremely slow (due to design issues)

1645415703
Techcable!~Techcable@168.235.93.147
So I'm working on what is essentially a rewrite, with a compatibility layer

1645415836
Techcable!~Techcable@168.235.93.147
Right now the rewrite is in C, but I'm thinking about maybe switching to Zig for parts of it (like class implementations)

1645415858
Techcable!~Techcable@168.235.93.147
I guess I'm wondering how good the C interop really is.

1645415885
Techcable!~Techcable@168.235.93.147
Is it like Rust 

1645415893
Techcable!~Techcable@168.235.93.147
"oh yeah we got compatibility and bindgen"

1645415911
Techcable!~Techcable@168.235.93.147
I've played with the header file parsing and handling of inline functions. It looks really great

1645415926
Techcable!~Techcable@168.235.93.147
I'm just kind of afraid to bet my whole project on it

1645415984
Techcable!~Techcable@168.235.93.147
I'm not afraid of Zig's alpha/beta quality, but I am afraid if the C interop is anything short of flawless

1645416066
Techcable!~Techcable@168.235.93.147
Kind of a hard problem. I've written like 5 prototypes so far (most of them broken)

1645416096
Techcable!~Techcable@168.235.93.147
I kind of just wanna hear good things about C interoperability before I commit to anything :laugh:

1645416971
plumeus!~plumeus@user/plumeus
The only issue I had with Zig's C interop is when I tried to write a sample GTK4 hello world in Zig.

1645417004
Techcable!~Techcable@168.235.93.147
plumeus: What specifically was your problem?

1645417007
Techcable!~Techcable@168.235.93.147
I'm interested

1645417061
plumeus!~plumeus@user/plumeus
https://github.com/Sobeston/gtk4-zig-example/blob/master/main.zig

1645417117
plumeus!~plumeus@user/plumeus
So, this is roughly what it takes to implement the hello world

1645417158
Techcable!~Techcable@168.235.93.147
plumeus: It's much nicer than the Rust equivalent........

1645417164
Techcable!~Techcable@168.235.93.147
ACTION shudders

1645417228
plumeus!~plumeus@user/plumeus
https://developer-old.gnome.org/gtk4/stable/gtk-getting-started.html#id-1.2.3.5

1645417238
plumeus!~plumeus@user/plumeus
This is the C program

1645417296
plumeus!~plumeus@user/plumeus
I couldn't figure out how to get Zig to work with calling `g_signal_connect`, and I had to call `g_signal_connect_data`.

1645417311
plumeus!~plumeus@user/plumeus
Never really figured out the reason

1645417390
plumeus!~plumeus@user/plumeus
I think `zig translate-c` didn't translate certain functions properly... I should check what's going on.

1645418656
Techcable!~Techcable@168.235.93.147
plumeus, https://i.imgur.com/ayN4nA4.png

1645418673
Techcable!~Techcable@168.235.93.147
From here: Worked first try :)

1645418680
Techcable!~Techcable@168.235.93.147
https://developer-old.gnome.org/gtk4/stable/ch01s02.html#gtk-getting-started-hello-world

1645418693
Techcable!~Techcable@168.235.93.147
Didn't get signal/callback working

1645421002
plumeus!~plumeus@user/plumeus
Yeah, I needed to do `_data`

1645421032
plumeus!~plumeus@user/plumeus
There's also obviously https://github.com/ziglang/zig/issues/1481

1645421206
plumeus!~plumeus@user/plumeus
And anecdotally, there was a point in time when I tried `raylib` and the default color wouldn't be the same color as the C example, iirc. Got fixed though.

1645421240
plumeus!~plumeus@user/plumeus
All in all, it's great. I don't even know C and I can interop perfectly fine.

1645421385
plumeus!~plumeus@user/plumeus
I tried SDL and Raylib, and I kept finding myself writing minimal wrappers to convert `null` or `bool` to error unions, however. But that was still great because it was a positive for ergonomic code.

1645440563
demize!kyrias@archlinux/developer/demize
plumeus: Which Zig version did you try with?  While not all function-like macros can be translated, that one should be translatable.

1645440623
plumeus!~plumeus@user/plumeus
It was prior to the Zig 0.9.1 release, but 0.9.0 was out by then, iirc. (I use Master, the version releases are just an indicator of time)

1645440634
plumeus!~plumeus@user/plumeus
I could try again

1645440697
demize!kyrias@archlinux/developer/demize
Works with 0.9.0 for me, hmm.

1645440746
plumeus!~plumeus@user/plumeus
hmm... idk, lemme triple check. Will leave an update then

1645440815
plumeus!~plumeus@user/plumeus
My last attempt was 2022-01-21, but maybe I just did it horribly wrong

1645447556
ikskuh!~xq@v43666.php-friends.de
heya o/

1645447572
ikskuh!~xq@v43666.php-friends.de
is there a way to distinct enum{a,b,c} from enum(u8){a,b,c} via @typeInfo ?

1645447689
ifreund!2940d10f8b@user/ifreund
ikskuh: Enum.tag_type?

1645447720
ifreund!2940d10f8b@user/ifreund
there's no `explicit_tag` field though currently

1645447742
ikskuh!~xq@v43666.php-friends.de
tag_type is also populated when no tag is given

1645447743
ifreund!2940d10f8b@user/ifreund
so there's no way to distinguish enum(u1) {a, b} from enum {a, b}

1645447750
ikskuh!~xq@v43666.php-friends.de
so enum(u2){a,b,c} and enum{a,b,c} is the same

1645447781
ifreund!2940d10f8b@user/ifreund
what's your use-case?

1645447860
ikskuh!~xq@v43666.php-friends.de
I wanna serialize enums in a portable manner

1645447890
ikskuh!~xq@v43666.php-friends.de
and my idea was to serialize explicitly tagged enums as their value (as just drop the tag as an integer into the stream)

1645447903
ikskuh!~xq@v43666.php-friends.de
but serialize untagged enums as "index into names"

1645447904
ikskuh!~xq@v43666.php-friends.de
so

1645447912
ikskuh!~xq@v43666.php-friends.de
enum{a,b,c} and enum{c,b,c} can be serialized as the same type

1645447923
ikskuh!~xq@v43666.php-friends.de
while enum(u8){a,b,c} has explicit numbers assigned

1645447944
ifreund!2940d10f8b@user/ifreund
did you mean enum{c,b,a}?

1645447951
ikskuh!~xq@v43666.php-friends.de
yeah, right. sorry

1645447978
ifreund!2940d10f8b@user/ifreund
what's the advantage to having a,b,c and c,b,a be serialized the same way?

1645447995
ikskuh!~xq@v43666.php-friends.de
well. i'll just go for "serialize tag type" then

1645448026
ikskuh!~xq@v43666.php-friends.de
ifreund: i remember some error related to enumToInt where i cannot get the int value of not explicitly specified

1645448053
ifreund!2940d10f8b@user/ifreund
I don't know of any such limitation

1645448077
ikskuh!~xq@v43666.php-friends.de
yeah, it looks like i remember wrong :D

1645448142
ifreund!2940d10f8b@user/ifreund
it's well defined that the enum values start at 0 and count up in the order the fields appear

1645465860
phaleth!~user@user/phaleth
I think the same thing as shown here https://github.com/ziglang/zig/issues/5854#issuecomment-736195541 happened to 0.9.1

1645466547
phaleth!~user@user/phaleth
0.10.0-dev is affected as well

1645467303
ifreund!2940d10f8b@user/ifreund
phaleth: I see wasm-freestanding-musl on  0.9 and master

1645467480
phaleth!~user@user/phaleth
ifreund: yeah, I just found out that contents on the wasm-freestanding-musl dir are the same on 0.9.0

1645467558
phaleth!~user@user/phaleth
the problem is that using `-target wasm32-freestanding` works with 0.9.0 but does not with 0.9.1 and 0.10.0-dev

1645472824
cCCCCcccccCCc!~b@user/ccccccccccccc
So I put together https://github.com/zigchroot/zig-chroot in order to share an issue I'm having. Specifically, I can't seem to build a functioning musl with Zig. Regardless of building musl externally of the chroot or from within, the musl Zig builds segfaults when you execute /lib/libc.so. If you use HOSTCC and cross-compile with the LLVM-built ar, the musl it builds will function properly and you can continue to build things from within the chroot 

1645472825
cCCCCcccccCCc!~b@user/ccccccccccccc
just fine.

1645472851
cCCCCcccccCCc!~b@user/ccccccccccccc
https://github.com/zigchroot/zig-chroot/issues/1 is the issue on it with what I could find via GDB.

1645473284
andrewrk!~andrewrk@mail.ziglang.org
thanks for putting this together cCCCCcccccCCc 

1645473775
cCCCCcccccCCc!~b@user/ccccccccccccc
Of course. I figured if the issue got resolved, it might be useful to someone. Technically if you slapped a kernel in there, it'd boot with what it currently builds. 

1645480029
cCCCCcccccCCc!~b@user/ccccccccccccc
Just as an aside: I quickly slipped in a doc update, set a proper password on root and correctly placed `config.sub` into GNU make's directory. These updates wouldn't invalidate any running build job, but without the GNU Make fix, it will have a host dependency on texinfo.

1645480035
cCCCCcccccCCc!~b@user/ccccccccccccc
Otherwise I am done touching it. 

1645480543
andrewrk!~andrewrk@mail.ziglang.org
noted

