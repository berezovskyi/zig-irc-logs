1643091754
shankar!~shankar@user/shankar
 /win show 1

1643103246
jemius!~jemius@2a01:4f8:c0c:8564::1
sooooo. If I get the Zig philosophy right, such things won't happen, right?

1643103246
jemius!~jemius@2a01:4f8:c0c:8564::1
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/yang

1643103376
ikskuh!~xq@2a0d:5940:6:163::ad7e
jemius: if you don't want dead store elimination, you have to explicitly request that

1643103386
ikskuh!~xq@2a0d:5940:6:163::ad7e
we have a secureZero function for that

1643103429
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig has no guarantees that writes actually ever happen

1643103432
ikskuh!~xq@2a0d:5940:6:163::ad7e
except for volatile memory

1643103444
ikskuh!~xq@2a0d:5940:6:163::ad7e
(or atomic)

1643103775
jemius!~jemius@2a01:4f8:c0c:8564::1
But will it ever happen that Zig removes a function caller because performance-compiler-people whant to do performance-compiler-people-ish things?

1643103780
jemius!~jemius@2a01:4f8:c0c:8564::1
*function call

1643103788
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes+

1643103794
ikskuh!~xq@2a0d:5940:6:163::ad7e
that's called inlining

1643103817
jemius!~jemius@2a01:4f8:c0c:8564::1
But the functionality will not disappear, as it does in gcc's memset() ?

1643103827
ikskuh!~xq@2a0d:5940:6:163::ad7e
it might

1643103832
jemius!~jemius@2a01:4f8:c0c:8564::1
That's uncool

1643103835
ikskuh!~xq@2a0d:5940:6:163::ad7e
why?

1643103844
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig is defined as a SSA style language

1643103847
jemius!~jemius@2a01:4f8:c0c:8564::1
I already have C for such behavior

1643103855
ikskuh!~xq@2a0d:5940:6:163::ad7e
which has clear rules about side effects

1643103863
ikskuh!~xq@2a0d:5940:6:163::ad7e
and if a effect is not visible, it can be removed

1643103879
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you want to have a defined effect, use the right tools for it

1643103886
ikskuh!~xq@2a0d:5940:6:163::ad7e
which, in this case, would be volatile

1643103902
jemius!~jemius@2a01:4f8:c0c:8564::1
If a programmer explicitely commands a piece of memory being set to 0, this command should be followed. At least this is my philosophy

1643103908
ikskuh!~xq@2a0d:5940:6:163::ad7e
so to have the guarantee that a buffer is cleared to zero, you have to write to it as volatile memory

1643103925
ikskuh!~xq@2a0d:5940:6:163::ad7e
jemius: then you have a mental memory model that is distinct from the zig one

1643103935
ikskuh!~xq@2a0d:5940:6:163::ad7e
because in that model, every memory write has side effects

1643103993
ikskuh!~xq@2a0d:5940:6:163::ad7e
fn foo() void { var x: [4]u8 = ...; }

1643104002
ikskuh!~xq@2a0d:5940:6:163::ad7e
where is `x` stored? you can't answer this question

1643104023
ikskuh!~xq@2a0d:5940:6:163::ad7e
as `x` might never in RAM at any time

1643104058
ikskuh!~xq@2a0d:5940:6:163::ad7e
so writing 4 zeroes to it can mean that you write 4 registers or 4*u8 or 1*u32

1643104130
ikskuh!~xq@2a0d:5940:6:163::ad7e
on certain architectures, you can even pass this to another function as register windows instead of memory

1643104399
freshcoffee!~fresh@user/freshcoffee
til about memset_s

1643104457
riv!river@tilde.team/user/river
memset but in a sarcastic tone

1643104527
jemius!~jemius@2a01:4f8:c0c:8564::1
ikskuh, so, for noobs: is zig's memory model identical to C's?

1643104547
ikskuh!~xq@2a0d:5940:6:163::ad7e
no, we don't have it fully defined yet

1643104589
ikskuh!~xq@2a0d:5940:6:163::ad7e
especially as we have comptime memory which is special

1643104618
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i don't think it's a good idea to make it very much different to the C one

1643104651
ikskuh!~xq@2a0d:5940:6:163::ad7e
dead write elimination is a huge performance boost in general

1643104682
ikskuh!~xq@2a0d:5940:6:163::ad7e
and only bad in a field where people must be experts in both programming and cryptography, so i don't see a huge hazard here

1643104804
nektro!~meg@75-164-170-164.ptld.qwest.net
given that the talk is from 2017, i wonder if llvm implements the compiler pass check

1643104834
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/ziglang/zig/blob/master/lib/std/crypto/utils.zig#L127-L135

1643104850
ikskuh!~xq@2a0d:5940:6:163::ad7e
this is what we have for safely zeroing a memory block

1643104858
ikskuh!~xq@2a0d:5940:6:163::ad7e
which is (imho) the correct way of doing it

1643104934
nektro!~meg@75-164-170-164.ptld.qwest.net
most of std.crypto was contributed by the author of libsodium

1643105478
jemius!~jemius@2a01:4f8:c0c:8564::1
Is there a workaround in C around that problem besides memset_s?

1643105575
freshcoffee!~fresh@user/freshcoffee
manual loop with pointer to volatile?

1643106384
ikskuh!~xq@2a0d:5940:6:163::ad7e
â†‘

1643106428
freshcoffee!~fresh@user/freshcoffee
oh neat. llvm has `!nontemporal` hint for stores

1643107027
jemius!~jemius@2a01:4f8:c0c:8564::1
At last fosdem the speaker said Zig is great because of "reduced mental load". 

1643107194
devast8a!~devast8a@2001:470:69fc:105::3f46
Arguably this choice of semantics does decrease mental load. If instead every memory access was always a memory access then you would be forced to consider the performance cost of every memory access.

1643107359
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep

1643107376
ikskuh!~xq@2a0d:5940:6:163::ad7e
i mean, C had the keyword register for that 

1643107392
ikskuh!~xq@2a0d:5940:6:163::ad7e
until we introduced optimizations like store elimination

1643107416
jemius!~jemius@2a01:4f8:c0c:8564::1
Do you folks believe that performance would be such a huge issue if compilers did not do that? (honest question)

1643107444
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes

1643107455
ikskuh!~xq@2a0d:5940:6:163::ad7e
var a = 10; a = 20;

1643107460
ikskuh!~xq@2a0d:5940:6:163::ad7e
will suddenly have two memory writes instead of on

1643107462
ikskuh!~xq@2a0d:5940:6:163::ad7e
*one

1643107475
ikskuh!~xq@2a0d:5940:6:163::ad7e
a *= 2; // one read, one write

1643107479
ikskuh!~xq@2a0d:5940:6:163::ad7e
instead of a register access

1643107487
ikskuh!~xq@2a0d:5940:6:163::ad7e
as `a` is variable in memory

1643107508
ikskuh!~xq@2a0d:5940:6:163::ad7e
most expressions will suddenly have double the instruction count

1643107513
devast8a!~devast8a@2001:470:69fc:105::3f46
Loads of optimizations become invalid under the semantics that every write is a write.

1643107619
devast8a!~devast8a@2001:470:69fc:105::3f46
It also implies, though to be fair isn't required, that there is a specified ordering to memory writes. Eg. `a = 10; b = 20` always happens the write to `a` happens then the write to `b` happens.

1643107693
ikskuh!~xq@2a0d:5940:6:163::ad7e
whereas without defined write order, you might be able to fuse those two writes into one

1643107697
ikskuh!~xq@2a0d:5940:6:163::ad7e
if a and b are adjacent

1643107722
devast8a!~devast8a@2001:470:69fc:105::3f46
Or it could be that performing b first, in a larger program, is much faster.

1643107794
devast8a!~devast8a@2001:470:69fc:105::3f46
You could define the semantics such that this only happens for pointers, and then the overheads will be much lower, but for some of the stuff that I've worked on these optimizations are responsible for performance doubling.

1643107874
Earnestly!~earnest@user/earnestly
jemius: https://www.ralfj.de/blog/2021/11/24/ub-necessary.html - does say there should be experiments on performance cost because they don't really know

1643107967
Earnestly!~earnest@user/earnestly
(Or maybe in linked article.  Somewhere anyway)

1643107977
jemius!~jemius@2a01:4f8:c0c:8564::1
I don't know how easy I make my life by thinking so, but I tend to believe that people overshoot sometimes a bit with their optimizations, not looking at other valuable things. When I program a digital signal processor, yeah, performance! But some user space program taking one second longer to start up..?

1643108036
Earnestly!~earnest@user/earnestly
openbsd and perhaps others do at least remove null check elimination

1643108082
Earnestly!~earnest@user/earnestly
Even if you assert null, non-locality means it removes the check because you use value in call to strcmp, concluding argument can never be null

1643108124
Earnestly!~earnest@user/earnestly
(it being gcc 11)

1643108131
ifreund!2940d10f8b@user/ifreund
If all my programs took a whole second longer to start I would be mad

1643108137
ifreund!2940d10f8b@user/ifreund
low latency makes me happy

1643108140
ikskuh!~xq@2a0d:5940:6:163::ad7e
what ifreund says

1643108151
ikskuh!~xq@2a0d:5940:6:163::ad7e
in the end, end users matter

1643108157
ikskuh!~xq@2a0d:5940:6:163::ad7e
and dev ux is less important than end user ux

1643108172
ikskuh!~xq@2a0d:5940:6:163::ad7e
if we can make programs faster, even on a low-percentile scale

1643108178
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can gain huge things

1643108183
devast8a!~devast8a@2001:470:69fc:105::3f46
I just don't see the benefit in defining the semantics in this way. The few people who rely on these semantics are already in a world where very small and subtle things matter and really already ought to know that the compiler can make these changes.

1643108187
ikskuh!~xq@2a0d:5940:6:163::ad7e
void linux boots brilliantly fast compared to arch

1643108195
ikskuh!~xq@2a0d:5940:6:163::ad7e
and it makes me happy to not require suspend anymore

1643108308
devast8a!~devast8a@2001:470:69fc:105::3f46
Do we change other semantics of languages for increased security? Do we define that all comparisons are constant time for example?

1643108314
Earnestly!~earnest@user/earnestly
ikskuh: Do you use scripts to restore previous working state?

1643108321
ikskuh!~xq@2a0d:5940:6:163::ad7e
nope

1643108323
ikskuh!~xq@2a0d:5940:6:163::ad7e
not worth 

1643108353
ikskuh!~xq@2a0d:5940:6:163::ad7e
i love having a clean state after booting

1643108357
riv!river@tilde.team/user/river
I kind of feel like constant time stuff should just be coded in assembly

1643108361
Earnestly!~earnest@user/earnestly
Hm, that's the reason I use suspend, even with fast boot, need to get everything up and running again

1643108396
ikskuh!~xq@2a0d:5940:6:163::ad7e
riv: we have constant time stuff in std.crypto.utils

1643108410
ikskuh!~xq@2a0d:5940:6:163::ad7e
Earnestly: the slowest tool to start is Thunderbird

1643108416
ikskuh!~xq@2a0d:5940:6:163::ad7e
and Discord

1643108422
ikskuh!~xq@2a0d:5940:6:163::ad7e
everthing else is already quite fast

1643108435
devast8a!~devast8a@2001:470:69fc:105::3f46
riv: The way things are going is to write secure code in theorem provers Coq, Agda, etc. and then extract C or Assembly programs from them.

1643108439
Earnestly!~earnest@user/earnestly
devast8a: Curiously that sort of thing can be mechanical transformed from normal code, at least there is some effort to do that for Ada

1643108473
riv!river@tilde.team/user/river
that sounds great - would definitely go for asm rather than c so the compiler doesn't mess up all your work

1643108473
devast8a!~devast8a@2001:470:69fc:105::3f46
As in to transform normal code into constant time code?

1643108487
freshcoffee!~fresh@user/freshcoffee
re: Discord, somehow they must get money per second for twirling their logo/mascot at launch /s

1643108494
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1643108543
Earnestly!~earnest@user/earnestly
devast8a: Yes, I think paper is "progress sensitive security for spark"

1643108676
devast8a!~devast8a@2001:470:69fc:105::3f46
Ah cool. Yeah this sort of stuff is used quite a bit in security type systems.

1643108819
Earnestly!~earnest@user/earnestly
ikskuh: It's not so much time to start various things but that they return to prior state, carry on where left off

1643108847
Earnestly!~earnest@user/earnestly
But can appreciate fresh start approach too

1643108872
ikskuh!~xq@2a0d:5940:6:163::ad7e
chrome restores all tabs/sessions, vscode last project, and all other tools i use are stateless (chat, music)

1643109103
Earnestly!~earnest@user/earnestly
That works too

1643110257
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
Is it possible to declare a C function in a Zig file without `@cImport`?

1643110355
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
I guess no due to https://github.com/ziglang/zig/issues/1717

1643110376
freshcoffee!~fresh@user/freshcoffee
here's one from lib/std/c.zig -> `pub extern "c" fn exit(code: c_int) noreturn;`

1643110426
freshcoffee!~fresh@user/freshcoffee
or `pub extern "c" fn gethostname(name: [*]u8, len: usize) c_int;`

1643110495
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
Ah awesome! Thank

1643110814
jemius!~jemius@2a01:4f8:c0c:8564::1
btw how are things progressing with Zig, generally speaking?

1643110823
ikskuh!~xq@2a0d:5940:6:163::ad7e
very well

1643110828
ikskuh!~xq@2a0d:5940:6:163::ad7e
stage2 makes huge progress

1643114808
motiejus!~motiejus@2001:470:69fc:105::38fb
should `lib/libc/include/arm-linux-any` be included for arm64? similarly, `arm-linux-any`?

1643114815
motiejus!~motiejus@2001:470:69fc:105::38fb
i.e. `arm-linux-musl`

1643114864
motiejus!~motiejus@2001:470:69fc:105::38fb
also, do `armeb-linux-gnueabi`, `armeb-linux-gnueabihf`, `arm-linux-gnueabi` and `arm-linux-gnueabihf` have to do anything with arm64?

1643114939
motiejus!~motiejus@2001:470:69fc:105::38fb
also, the `lib/libc/include` directory has both "arm64" and "aarch64", which are, to my understanding, two different conventions for the same CPU architecture

1643120985
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
Is it possible to set `build-exe` output path? :)

1643121168
ifreund!2940d10f8b@user/ifreund
vladfaust: -femit-bin=foo

1643127705
kiedtl!~kiedtl@kisslinux/kiedtl
Doe zig's std have a mktemp function?

1643127707
kiedtl!~kiedtl@kisslinux/kiedtl
*Does

1643133800
andrewrk!~andrewrk@mail.ziglang.org
motiejus, no - arm and aarch64 are different, incompatible ISAs

1643133846
andrewrk!~andrewrk@mail.ziglang.org
kiedtl, no, mostly because of inability to make it into a cross platform abstraction

1643133882
andrewrk!~andrewrk@mail.ziglang.org
but have a look at std.fs.Dir.atomicFile

1643133891
kiedtl!~kiedtl@kisslinux/kiedtl
Ah, I guess because there's no standard "temp" directory for windows?

1643133915
andrewrk!~andrewrk@mail.ziglang.org
mm that's not exactly it. what is your use case? I can probably help guide you to the best set of API calls to accomplish your goal

1643133960
kiedtl!~kiedtl@kisslinux/kiedtl
Hm, Windows *does* have GetTempPath & friends

1643134000
kiedtl!~kiedtl@kisslinux/kiedtl
andrewrk: I just need to dump some debug-ish output to a file. Normally it'd be in ~/.cache, but I wanted to put it in /tmp/ for now

1643134016
kiedtl!~kiedtl@kisslinux/kiedtl
But for now I just put it in ./<random>.txt. Not a big deal really.

1643134157
motiejus!~motiejus@2001:470:69fc:105::38fb
andrewrk: how about arm64?

1643134164
motiejus!~motiejus@2001:470:69fc:105::38fb
I.e. arm64 vs aarch64?

1643134166
andrewrk!~andrewrk@mail.ziglang.org
arm64 and aarch64 are the same thing

1643134262
andrewrk!~andrewrk@mail.ziglang.org
kiedtl, so the main thing you want is a directory that is conventionally used for temp files, and perhaps cleaned at some later, unspecified time, so that the user has a chance to inspect the file first?

1643134283
motiejus!~motiejus@2001:470:69fc:105::38fb
andrewrk: should then lib/libc/include/arm64-linux-any/* be moved to lib/libc/include/aarch64-linux-any/ ?

1643134325
andrewrk!~andrewrk@mail.ziglang.org
motiejus, yes I think that would improve consistency. I'm guessing that linux, the upstream source for those files, uses the "arm64" convention

1643134337
kiedtl!~kiedtl@kisslinux/kiedtl
Not really -- the user could clean it but there's no expectation of them doing so. the /tmp/ thing was just a placeholder until I figured out where that directory should be, how I should determine its path, etc

1643134381
andrewrk!~andrewrk@mail.ziglang.org
motiejus, yeah I just confirmed - as an example, musl uses "aarch64" convention but linux uses "arm64" convention

1643134395
andrewrk!~andrewrk@mail.ziglang.org
for zig's purposes we should probably pick a side and then stick with it

1643134406
andrewrk!~andrewrk@mail.ziglang.org
related: https://github.com/ziglang/zig/issues/4663

1643134788
motiejus!~motiejus@2001:470:69fc:105::38fb
andrewrk: is there a tool that creates these, or is `mv` good enough? Happy to invest some time instead of adding a workaround to the toolchain

1643134808
motiejus!~motiejus@2001:470:69fc:105::38fb
(I may also file a task for it, but, if relatively simple, can do a PR)

1643134812
andrewrk!~andrewrk@mail.ziglang.org
let me find my notes

1643134824
andrewrk!~andrewrk@mail.ziglang.org
a lot of the process is here: https://github.com/ziglang/zig/wiki/Updating-libc

1643134841
andrewrk!~andrewrk@mail.ziglang.org
ah yes I added a section for Linux recently 

1643134884
andrewrk!~andrewrk@mail.ziglang.org
did you run into an issue caused by the aarch64 vs arm64 thing?

1643135041
motiejus!~motiejus@2001:470:69fc:105::38fb
I was looking why my aarch64 builds were failing and noticed I may be missing some include directories (I need to tell bazel about these). Though adding the dirs didn't fix it

1643135084
andrewrk!~andrewrk@mail.ziglang.org
hmmmm

1643135101
andrewrk!~andrewrk@mail.ziglang.org
aarch64-linux?

1643135119
motiejus!~motiejus@2001:470:69fc:105::38fb
Yes

1643135172
motiejus!~motiejus@2001:470:69fc:105::38fb
I can paste the error if curious, but didn't isolate it (yet)

