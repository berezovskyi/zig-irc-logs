1643448730
koakuma!~koakuma@user/koakuma
andrewrk: Okay, it seems to work now, thanks!

1643485055
andrewrk!~andrewrk@mail.ziglang.org
koakuma, happy hacking

1643485094
andrewrk!~andrewrk@mail.ziglang.org
marler8997, that commit is just "moved std/ to lib/std/"

1643485118
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk gotcha, well I figured out what was going on

1643485119
andrewrk!~andrewrk@mail.ziglang.org
ifreund, did you mention you used some CLI tool for a handy git blame interface?

1643485129
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
BUFFER_OVERFLOW is expected

1643485130
andrewrk!~andrewrk@mail.ziglang.org
it does take a while to explore backwards via CLI

1643485139
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
it's a really weird function

1643485139
ifreund!2940d10f8b@user/ifreund
andrewrk: indeed, tig blame -MC is killer

1643485154
ifreund!2940d10f8b@user/ifreund
(-MC are normal very useful git blame options)

1643485169
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
right now I'm debugging why __muloti4 is causing a segfault in Zig's fromSysTime :(

1643485212
andrewrk!~andrewrk@mail.ziglang.org
ifreund, pretty nice - is there a keyboard shortcut to go 1 past the commit from the line you're currently on?

1643485227
andrewrk!~andrewrk@mail.ziglang.org
ah, found the help menu

1643485234
ifreund!2940d10f8b@user/ifreund
,

1643485247
andrewrk!~andrewrk@mail.ziglang.org
"Going back is not supported by the help view" rip

1643485266
ifreund!2940d10f8b@user/ifreund
close the help menu first

1643485289
andrewrk!~andrewrk@mail.ziglang.org
oh yeah this is a game changer

1643485292
andrewrk!~andrewrk@mail.ziglang.org
nice, thanks for the tip!

1643485292
ifreund!2940d10f8b@user/ifreund
the interface is a little bit clunky, but it still beats using the CLI for this specific task I find

1643485297
ifreund!2940d10f8b@user/ifreund
no problem!

1643485318
ifreund!2940d10f8b@user/ifreund
, is pretty much the only keybinding I know xD

1643485328
andrewrk!~andrewrk@mail.ziglang.org
hahaha

1643485343
andrewrk!~andrewrk@mail.ziglang.org
yeah I was doing it manually with like `git blame <paste>^ -- [file]`

1643485399
ifreund!2940d10f8b@user/ifreund
yeah same

1643485521
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
any idea why building a small test app would call .weak.__muloti4.default._alloca but when building the zig executable it calls __muloti4?

1643485605
andrewrk!~andrewrk@mail.ziglang.org
what's "weak" "default" and "alloca" ? 

1643485615
andrewrk!~andrewrk@mail.ziglang.org
what target is this?

1643485621
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
windows x86_64

1643485642
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
that's what the debugger is showing, but when I'm debugging the zig exe it just says: __muloti4:

1643485651
andrewrk!~andrewrk@mail.ziglang.org
__muloti4 is the expected symbol name

1643485656
andrewrk!~andrewrk@mail.ziglang.org
not sure what's going on with that other one

1643485687
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
when zig exe calls __muloti4 it crashes, when my small test app calls .weak.__muloti4.default._alloca it works

1643485696
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
and I can see that they are different functions, their assembly is different

1643485714
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I can't even declare extern __muloti4 in my test app and call it, it still calls the weird one

1643485718
andrewrk!~andrewrk@mail.ziglang.org
did you notice that compiler-rt selects a different linkage for symbols if you're using `zig test` on compiler_rt directly?

1643485724
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yes

1643485762
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
does zig compiler compiler_rt as a static library and link it to all exes?

1643486184
andrewrk!~andrewrk@mail.ziglang.org
correct

1643486208
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
tried this but now linker is saying __muloti4 is a duplicate symbol??!?

1643486209
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
https://gist.github.com/marler8997/9f2b453764fa6121b45bc8ad14dc3926

1643486261
andrewrk!~andrewrk@mail.ziglang.org
weak linkage makes it so that the linker is allowed to replace the definition with a same-named symbol from any other compilation unit

1643486274
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
right

1643486278
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
so this makes no sense

1643486291
andrewrk!~andrewrk@mail.ziglang.org
oh an an export I mean. on `extern` it means that it will be null at runtime if it didn't get linked in

1643486320
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
so how is creating an @extern creating a "duplicate symbol"?

1643486380
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I don't know why but I can't figure out how to call the actual "__muloti4".  It seems LLVM replaces it with the other one and I'm not sure what the magic trickery is to prevent that

1643486406
andrewrk!~andrewrk@mail.ziglang.org
I can repro the issue. It seems like a bug. I don't expect to get a duplicate linker symbol for this code

1643486470
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
lol, I tried adding library_name "compiler_rt" and it says "DLL import librayr for -lcompiler_rt not found"

1643486484
andrewrk!~andrewrk@mail.ziglang.org
yeah I don't think library name is what you want here

1643486556
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
The Zig exe calls the real one, it must be using some LLVM option that changes which one it calls or something

1643487754
andrewrk!~andrewrk@mail.ziglang.org
I wonder what non-working-on-zig activity I should do on this fine saturday. perhaps give River a spin? play some oxygen not included? both??

1643487938
Franciman!~Franciman@mx1.fracta.dev
andrewrk: what about going for a walk?

1643487961
andrewrk!~andrewrk@mail.ziglang.org
ehh today is gym day, that'll be enough exercise

1643487968
Franciman!~Franciman@mx1.fracta.dev
ohh then alright!

1643487971
Franciman!~Franciman@mx1.fracta.dev
makes sense :)

1643487990
Franciman!~Franciman@mx1.fracta.dev
watching a movie?

1643488005
Franciman!~Franciman@mx1.fracta.dev
while giving river a spin and playing some oxygen not included (which i don't know what is)

1643488129
andrewrk!~andrewrk@mail.ziglang.org
it's quite fun: https://www.klei.com/games/oxygen-not-included

1643488863
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
Is it possible to "unwrap" an enum invariant, passing it to a function that takes anytype, without switch()'ing it?

1643488885
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
e.g., something like this: @truncate(u8, unwrap(foo))

1643488896
ifreund!2940d10f8b@user/ifreund
kiedtl|web: you mean @enumToInt()?

1643488915
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
Hm no, the enum's value being a number was just an example

1643488978
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
So, in that example I want to avoid doing "switch (foo) { .Variant => |_| @truncate(u8, foo.Variant), .Variant2 => |_| @truncate(u8, foo.Variant2), ...}" for all variants

1643488990
andrewrk!~andrewrk@mail.ziglang.org
you can just do `foo.Variant`

1643489015
andrewrk!~andrewrk@mail.ziglang.org
this has a runtime safety check to make sure Variant is the active tag

1643489017
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
But, I don't know what variant it is beforehand. (the function can take any variant though)

1643489028
andrewrk!~andrewrk@mail.ziglang.org
ah I understand the question now

1643489038
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
I'm terrible at explaining :|

1643489045
andrewrk!~andrewrk@mail.ziglang.org
I think this issue solves your problem: https://github.com/ziglang/zig/issues/7224

1643489055
andrewrk!~andrewrk@mail.ziglang.org
accepted but not implemented yet

1643489085
andrewrk!~andrewrk@mail.ziglang.org
basically you would do `switch (foo) { inline else => |payload| { ... } }`

1643489102
andrewrk!~andrewrk@mail.ziglang.org
and then payload would be the unwrapped variant

1643489118
andrewrk!~andrewrk@mail.ziglang.org
at runtime it would be generated as a bunch of switch cases

1643489133
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
Hm, yes, it appears that's what I'm looking for

1643489142
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
Guess I'm waiting for 0.10.0 then :)

1643489147
ugla!~ugla@2001:470:69fc:105::2b5
could you do it currently with `inline for` over the possible variants?

1643489159
andrewrk!~andrewrk@mail.ziglang.org
yes I believe so

1643489165
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
hm, possibly

1643489176
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
Verbose but better than doing each variant

1643489181
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
Thanks y'all :^)

1643489183
ugla!~ugla@2001:470:69fc:105::2b5
yeah

1643489423
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
you could just bitcast it if they all have the same representation

1643489439
squeek502!~squeek502@user/squeek502
if the payloads are the same type, i believe you can group them in a switch case: switch (foo) { .Variant, .Variant2 => |x| @truncate(u8, x) }

1643489446
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
also ^

1643490531
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
Would it not be a good thing to have general data types like int and unsigned instead of the strictly sized ones? In past years I thought that this is a disadvantage of C, but having them would in theory enable you to port even to systems which are not byte-based like the PDP11

1643490547
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
and Golang seems to agree, they also have int

1643490559
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
usize and isize come to mind

1643490590
kiedtl|web!~kiedtl|we@kisslinux/kiedtl
I think they're pretty much equivalent to int in Go iirc

1643490875
andrewrk!~andrewrk@mail.ziglang.org
jemius, what's the issue when targeting PDP11 with zig today?

1643490963
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
andrewrk, its words are 18 bits wide. Hence, you can not use u8, float32 etc

1643490988
andrewrk!~andrewrk@mail.ziglang.org
you can use u8 and f32.

1643491003
andrewrk!~andrewrk@mail.ziglang.org
a u8 fits inside a u18, so they work flawlessly

1643491016
andrewrk!~andrewrk@mail.ziglang.org
f32 will be emulated by compiler-rt

1643491016
ikskuh!~xq@2a0d:5940:6:163::ad7e
also pointer size = 16, word size = 18

1643491019
ifreund!2940d10f8b@user/ifreund
you can also use u18s

1643491047
ifreund!2940d10f8b@user/ifreund
the pointer size != word size is more of an issue, that's why we need usize and upointer or whatever

1643491097
ikskuh!~xq@2a0d:5940:6:163::ad7e
arguments(#5185) += 1

1643491117
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
If they can be of variable size anyways and 8 bits are not enforced, why call them that way in the first place? C has short, int, long.. (seriously asking. Not that I like the old way. I just wonder about the enforcing)

1643491150
ifreund!2940d10f8b@user/ifreund
what do you mean by enforcing?

1643491164
andrewrk!~andrewrk@mail.ziglang.org
in zig integers should be chosen based on their mathematical range of values; the smallest one that fits your smallest and largest values should be chosen

1643491166
ikskuh!~xq@2a0d:5940:6:163::ad7e
jemius: you can store an u8 in any type uN with N >= 8

1643491190
andrewrk!~andrewrk@mail.ziglang.org
related: https://github.com/ziglang/zig/issues/3806

1643491195
andrewrk!~andrewrk@mail.ziglang.org
I really would like to try to make this work for zig

1643491197
ikskuh!~xq@2a0d:5940:6:163::ad7e
u8 means it has a guaranteed value range from 0 ... 255

1643491208
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
hm

1643491209
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: yeah that would be rad

1643491227
ikskuh!~xq@2a0d:5940:6:163::ad7e
then you can also use mincal native types (-39999 to +39999)

1643491255
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
is the convention for strings on the pdp11 to be []u18?

1643491261
ikskuh!~xq@2a0d:5940:6:163::ad7e
jemius: an u8 would be stored as a 12 bit value on a machine that can only address 12 bit values

1643491281
ikskuh!~xq@2a0d:5940:6:163::ad7e
gw1: i think it's more like []u6

1643491308
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
hmm

1643491312
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i would have guessed u7

1643491322
ikskuh!~xq@2a0d:5940:6:163::ad7e
ascii came after ^^

1643491323
andrewrk!~andrewrk@mail.ziglang.org
anyway there is certainly some language work to be done to better support e.g. PDP-11, but introducing "int" is not it

1643491372
andrewrk!~andrewrk@mail.ziglang.org
would be nice to have an experimental PDP-11 backend before tagging 1.0 just to make sure we didn't miss something in the lang spec

1643491385
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
https://github.com/ziglang/zig/issues/3806 would be really nice with saturating arith also

1643491393
gw1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
then you could bound things at max and min values

1643491466
andrewrk!~andrewrk@mail.ziglang.org
jemius, the thing that trips a lot of people up is that in C and other languages, integer arithmetic is defined to wraparound on overflow. this actually prevents the compiler from using larger integer types in machine code than were used in source code, counter-intuitively making it faster to use larger integer types sometimes

1643491484
andrewrk!~andrewrk@mail.ziglang.org
this is not the case in zig since integer arithmetic overflow is undefined behavior in zig, for both signed and unsigned 

1643491497
andrewrk!~andrewrk@mail.ziglang.org
so it's always better to use the smallest integer type that fits your data

1643491529
andrewrk!~andrewrk@mail.ziglang.org
and this is the way to write correct software too. wtf is an "int"? you need guarantees on the range of values it stores, or your software might not work. if you know the range, then you could just specify the correct int type

1643491529
ifreund!2940d10f8b@user/ifreund
(you can still get wrapping overflow with special operators if you want it)

1643491544
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
How is zig supposed to detect an overflow during execution. Is there a runtime?

1643491565
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
I could see myself firing u64 at everything just to be sure :)

1643491571
ifreund!2940d10f8b@user/ifreund
there are runtime safety checks in safe build modes

1643491595
andrewrk!~andrewrk@mail.ziglang.org
portability is no excuse for not knowing the upper bound of your data ranges

1643491630
andrewrk!~andrewrk@mail.ziglang.org
if you're ok with only 18 bits in your integers, then you should be using u18 everywhere. if you feel you need u64, then you should use u64 and for PDP-11 to execute your code correctly, it will need to use compiler-rt routines to do 64 bit arithmetic

1643491673
andrewrk!~andrewrk@mail.ziglang.org
in the zig compiler we limit source files to maxInt(u32) bytes

1643491681
andrewrk!~andrewrk@mail.ziglang.org
this allows us to use u32 for most integers

1643491704
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
using 8 bytes instead of 4 does not cost you anything, does it? (not that this is my mindset, but the thought is tempting)

1643491716
ikskuh!~xq@2a0d:5940:6:163::ad7e
it does cost a lot

1643491728
ikskuh!~xq@2a0d:5940:6:163::ad7e
on an 8 bit architecture, it costs twice the time, twice the memory

1643491732
andrewrk!~andrewrk@mail.ziglang.org
it potentially costs 2x the amount of CPU cache 

1643491733
ikskuh!~xq@2a0d:5940:6:163::ad7e
on x86_64, it costs twice the memory

1643491741
ikskuh!~xq@2a0d:5940:6:163::ad7e
also as andrew says: it costs cpu cache

1643491792
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk I just recently finished RDR2, incredible game

1643491805
jemius!~imperator@200116b82dd6d3006b16e0730e179c3b.dip.versatel-1u1.de
Cache, aye. Memory on x86_64 is no issue. On microcontrollers, sure, got ya

1643491828
andrewrk!~andrewrk@mail.ziglang.org
marler8997, that's cool. I don't have a PS or xbox to play the first one on

1643491857
ikskuh!~xq@2a0d:5940:6:163::ad7e
jemius: memory is also on x86_64 an issue. do not assume infinite memory, you might get a machine running with 32 megs of RAM

1643491859
andrewrk!~andrewrk@mail.ziglang.org
memory on x86_64 is still an issue :) https://github.com/ziglang/zig/issues/6485

1643491909
andrewrk!~andrewrk@mail.ziglang.org
memory can be traded for safety, faster algorithms, and simpler algorithms

1643491921
andrewrk!~andrewrk@mail.ziglang.org
s/algorithms/logic/

1643492000
andrewrk!~andrewrk@mail.ziglang.org
it's also potentially a bottleneck in parallelism; if you are running many instances of a server, how much memory the server takes up limits how many instances you can run on a given machine

1643492025
andrewrk!~andrewrk@mail.ziglang.org
suffice to say, it's not free

1643492062
ifreund!2940d10f8b@user/ifreund
every resource is finite

1643492923
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
interesting, the version of __muloti4 that zig is calling does not come from compiler_rt.lib, it's coming from somewhere else!

1643493423
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
aha got it!

1643493439
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
the c++ library also has a version of __muloti4, and that's the one that's bugged!

1643493651
andrewrk!~andrewrk@mail.ziglang.org
ok, one, that's weird. we should definitely patch that out of zig's libcxx

1643493663
andrewrk!~andrewrk@mail.ziglang.org
two, why would libcxx be involved for building pure zig code for windows?

1643493723
andrewrk!~andrewrk@mail.ziglang.org
this is the relevant linker line: lld-link -ERRORLIMIT:0 -NOLOGO -DEBUG -STACK:16777216 -MACHINE:X64 -OUT:test.exe -IMPLIB:test.lib zig-cache/o/e5da5d4ded6411cf0351637b1ac06ef0/test.obj -SUBSYSTEM:console -NODEFAULTLIB -ENTRY:wWinMainCRTStartup /home/andy/.cache/zig/o/348b7771f3b807b524e833dc3af26397/c.lib /home/andy/.cache/zig/o/b1cff403275cc39d7c9c9d5628122c84/ssp.lib /home/andy/.cache/zig/o/bcd13da7a8637fac6d4e7e6b2952f975/compiler_rt.lib 

1643493723
andrewrk!~andrewrk@mail.ziglang.org
/home/andy/.cache/zig/o/015fe4b3dbd5477a5fde8dcb406b0f2b/kernel32.lib /home/andy/.cache/zig/o/4659d4098cd22f17d426c2c4b950af03/ntdll.lib

1643493746
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
this is building zig itself on windows

1643493772
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
link command is this: https://gist.github.com/marler8997/41fecce2ac50aa9e67c744d4d60c03f8

1643493799
andrewrk!~andrewrk@mail.ziglang.org
update libcxx.zig to pass -D_LIBCPP_HAS_NO_INT128

1643493803
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
one solution could be to move c++.lib after compiler_rt.lib

1643493825
andrewrk!~andrewrk@mail.ziglang.org
it doesn't explain "lld-link: error: duplicate symbol: __muloti4" for your simple example earlier

1643493835
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah that's completely different issue I think

1643493891
andrewrk!~andrewrk@mail.ziglang.org
mm never mind, don't pass that. we need to just not include that source file, instead relying on compiler-rt

1643493931
andrewrk!~andrewrk@mail.ziglang.org
kinda seems like the libc++ people don't know what they're doing...

1643493971
andrewrk!~andrewrk@mail.ziglang.org
just delete line 46 from libcxx.zig

1643494095
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
created a minimal program to reproduce: https://github.com/ziglang/zig/issues/10719#issuecomment-1024990891

1643494170
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
most programmers don't know what they're doing, including me half the time :)

1643494357
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk any idea what could have changed recently to cause this?

1643494395
andrewrk!~andrewrk@mail.ziglang.org
oh this is a recent regression?

1643494412
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah probably in the last couple weeks

1643494464
andrewrk!~andrewrk@mail.ziglang.org
did you try my suggested libcxx.zig patch to not include int128_bultins.cpp?

1643494468
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
trying now

1643494525
andrewrk!~andrewrk@mail.ziglang.org
you'll need to clear the global zig cache after rebuilding the compiler otherwise it will reuse libc++.lib

1643494528
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
uh with that change now I get 2 segfaults somehow, breaking out the debugger again

1643494534
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah I cleared out the global cache as well

1643494607
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
hmm actually it's the same segfault, investigating

1643494794
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
hmmm, still using same file from cache again, I'll try cleaning and rebuilding again

1643494832
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
actually I may have started the build and then cleaned that cache while it was building...

1643495105
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
still happening, might be something to do with how I'm building zig, using the windows devkit

1643495343
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I'm using this build command: zig build -Dstage1 --search-prefix d:\tools\zig+llvm+lld+clang-x86_64-windows-gnu-0.9.0-dev.1249+210ef5af8 --zig-lib-dir d:\git\zig\lib

1643495383
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I get the same c++.lib every time even after changing libcxx.zig and cleaning global/local cache

1643495396
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
so I'm guessing it's getting c++.lib from somewhere other than libcxx.zig with this type of build?

1643495419
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
also added some logs statements to libcxx.zig that I'm not seeing

1643496130
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
lol yup, I put "if (true) return error.Here;" at the top of buildLibCXX and my build still finishes, maybe it's using libcxx.zig from the devkit?

1643496335
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
where are the c++.lib come from?

1643497095
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
oh it's coming from the compiler I'm using the compile zig

1643497260
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ok this is a problem

1643497325
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I need a version of zig that doesn't include int128_builtins.cpp to compile anything that uses c++.lib, but zig uses c++.lib so I can't build zig itself...I may have to build this using the old MSVC method...bleh

1643497417
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
or...I'll push the fix and have the CI build it and wait for that ? :)

1643497433
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
might take less time than trying to build with MSVC

