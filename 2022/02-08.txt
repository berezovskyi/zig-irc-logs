1644279459
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
yeah cr1901 was the one who discovered the issue and after some printf debugging over IRC we were able to track it down to collectOutputWindows :)

1644279587
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
async is not fun on Windows- ty for your effort

1644280194
andrewrk!~andrewrk@mail.ziglang.org
nice cr1901 thank you for helping track this down

1644280332
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
Ty. I very much love the idea behind zigup and am happy to test drive it on Windows (even if I still want to bootstrap a Windows Zig from Linux "for the learning experience")

1644280354
cr1901!~cr1901@2601:8d:8600:911:e511:c952:5c4c:5e01
marler8997_: Your final changes work fine on my end as well

1644287982
mikezackles!~mikezackl@gateway/tor-sasl/mikezackles
Hi! I'm brand new to zig coming from c++-land. I'm just getting started, but so far this language looks awesome! Looking forward to learning more.

1644288017
mikezackles!~mikezackl@gateway/tor-sasl/mikezackles
Just thought I'd say hello. Carry on :)

1644320667
motiejus!~motiejus@2001:470:69fc:105::38fb
can folks recommend me a good zig codebase that deals with C APIs (small or moderately sized)? I am starting to integrate a C library to a zig program, and have all sorts of simple questions, which may be answered by looking at some examples.

1644320765
motiejus!~motiejus@2001:470:69fc:105::38fb
at this moment: would like to see examples of converting `[*c]` to something reasonable, converting `**char` to something zig understands (don't yet even know what that will be), and similar.

1644321867
luuk!~luuk@user/luuk
I'd suggest looking into River, and its dependencies (zig-wlroots and zig-wayland). Afaic, the entire bindings were written by hand, rather than using translate-c, which results in a very clean and readable implementation that looks much more like Zig, and less like C-translated Zig.

1644321873
luuk!~luuk@user/luuk
The main repo can be found at: https://github.com/riverwm/river

1644321910
motiejus!~motiejus@2001:470:69fc:105::38fb
thanks! Looking. :)

1644322125
motiejus!~motiejus@2001:470:69fc:105::38fb
looks like no double pointers though (grepped `**`) in river nor its deps though. But this looks like a pretty good start for build.zig

1644323671
novakane!ca74a093b3@user/novakane
motiejus: here some bindings for fcft that uses double pointers https://sr.ht/~novakane/zig-fcft/

1644323679
novakane!ca74a093b3@user/novakane
https://codeberg.org/dnkl/fcft/src/branch/master/fcft/fcft.h

1644324146
novakane!ca74a093b3@user/novakane
you can see here for wlroots too https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/include/wlr/types/wlr_seat.h#L684 https://github.com/swaywm/zig-wlroots/blob/master/src/types/seat.zig#L461

1644324274
motiejus!~motiejus@2001:470:69fc:105::38fb
ah that's why I didn't find it, as I was expecting `**` somewhere. Thanks.

1644324328
ifreund!2940d10f8b@user/ifreund
it really depends on context what zig pointer type c pointers should be translated to, which is why translat-c just spits out [*c]

1644324389
ifreund!2940d10f8b@user/ifreund
[*c] is never necessary in manually translated code though, which results in much more ergonomic bindings

1644324864
motiejus!~motiejus@2001:470:69fc:105::38fb
I have been trying to figure out how to build a `**char` in zig

1644324892
motiejus!~motiejus@2001:470:69fc:105::38fb
I started with zig translate-c, but realize I should have looked deeper into docs, as translate-c was not helpful in this case

1644324909
motiejus!~motiejus@2001:470:69fc:105::38fb
(I need to pass a list of strings to a C function from zig)

1644324965
motiejus!~motiejus@2001:470:69fc:105::38fb
sentinel-terminated slices sound like what I need, so I am now working to get the right syntax

1644325236
novakane!ca74a093b3@user/novakane
probably something like `[*][*:0]const u8` if that an array of strings

1644325540
motiejus!~motiejus@2001:470:69fc:105::38fb
yep, sounds like it :) thanks novakane !

1644335619
oats!~thomas@user/oats
mikezackles, howdy! nice to have you aboard, hope you enjoy your stay

1644338703
mikezackles!~mikezackl@gateway/tor-sasl/mikezackles
thanks, oats :)

1644339335
Piraty!~irc@user/piraty
hi. i need to start a small project soon to scratch someone else's RL itch and i'm keen on using it as an excuse to dive into zig again. are there libs (or even stdlib?) yet for doing hypertext requests and parsing json?

1644339703
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Piraty there is `std.json` already, I'm not sure about hypertext requests. https://github.com/ziglang/zig/blob/0.9.0/lib/std/json.zig

1644339775
Piraty!~irc@user/piraty
thanks! 

1644339831
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Piraty this might also be helpful on the hypertext side https://aquila.red/1/truemedian/zfetch though I don't have any experience with it

1644339860
Piraty!~irc@user/piraty
will look into it, thanks a bunch!

1644339885
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Cheers!

1644341343
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
Here's a medium-interesting paper about the dead-store removal by C-compilers we talked about a week ago

1644341345
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-yang.pdf

1644341405
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
tl;dr: There is no solution guaranteed 100% to work everywhere, as you'd want it with portable C

1644346898
ikskuh!~xq@v43666.php-friends.de
jemius: luckily, zig is not C ;)

1644346929
ikskuh!~xq@v43666.php-friends.de
and 100% secure memory scrubbing cannot be done in userspace

1644346930
ikskuh!~xq@v43666.php-friends.de
anyways

1644346957
ikskuh!~xq@v43666.php-friends.de
but you have to use both volatile and atomics/barriers to get a truly correct implementation

1644346983
ikskuh!~xq@v43666.php-friends.de
volatile stores alone might not work on MIPS for example

1644346995
ikskuh!~xq@v43666.php-friends.de
which requires explicit memory barriers

1644347198
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
computers are just terrible

1644347207
ikskuh!~xq@v43666.php-friends.de
no, they are not designed for security *shrugs*

1644347251
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
The last days I annoy everyone who does not run away fast enough with Andrew's quote from that talk. "Ask an engineer if entering a plane is safe [...] ask a programmer if voting machines are a good idea"

1644347342
ikskuh!~xq@v43666.php-friends.de
^^

1644347373
ikskuh!~xq@v43666.php-friends.de
i still think dead store elimination is a good thing

1644347514
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
dunno man. What do I have a low level language for, if not to know what is going to happen? I placed memset() there for a reason, Mr Compiler. If I wanted someone to take care of everything stupid, I'd program Python

1644347573
ikskuh!~xq@v43666.php-friends.de
what about that case:

1644347575
ikskuh!~xq@v43666.php-friends.de
a = 2;

1644347577
ikskuh!~xq@v43666.php-friends.de
a = 3;

1644347581
ikskuh!~xq@v43666.php-friends.de
what should the compiler emit?

1644347586
ikskuh!~xq@v43666.php-friends.de
two or one instruction?

1644347599
ikskuh!~xq@v43666.php-friends.de
i see enough code in the wild that is basically

1644347609
ikskuh!~xq@v43666.php-friends.de
Struct foo = { 0 }; memset(&foo, 0, sizeof(Struct));

1644347615
wavemode!~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2
back when the term "high level language" was coined, it referred to C and similar languages. true "low level" was asm

1644347643
ikskuh!~xq@v43666.php-friends.de
jemius: especiall as using memset() to zero memory is definitly wrong

1644347649
ikskuh!~xq@v43666.php-friends.de
even if the compiler would emit the call

1644347668
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
ikskuh, [obvious queston here]

1644347698
ikskuh!~xq@v43666.php-friends.de
caches

1644347718
ikskuh!~xq@v43666.php-friends.de
in a multicore environment, your memset wouldn't be necessarily visible on other cores

1644347727
ikskuh!~xq@v43666.php-friends.de
if you don't explicitly flush the caches 

1644347753
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
The cache line will get flushed sooner or later. Or is your argument that the memory cells below might surivive zeroing in any case?

1644347755
ikskuh!~xq@v43666.php-friends.de
which is totally ignored in that paper, because they probably only tested on x86_64, which has this effect implicitly

1644347768
Franciman!~Franciman@mx1.fracta.dev
ikskuh: is this a well known problem or only a "problem" of the zig model?

1644347790
ikskuh!~xq@v43666.php-friends.de
it's a problem with any program

1644347801
ikskuh!~xq@v43666.php-friends.de
it's not about flushing, but refetching the same cache line

1644347861
ikskuh!~xq@v43666.php-friends.de
the problem is that another core might read your secure key while your core can already see that its cleared to zero

1644347869
ikskuh!~xq@v43666.php-friends.de
as writes are not necessarily directly visible

1644347893
ikskuh!~xq@v43666.php-friends.de
i made a nice demo program for andrew one day where the effects of all atomic semantics where clearly visible due to different instructions being emitted

1644347900
ikskuh!~xq@v43666.php-friends.de
give me a minute, i'll reconstruct

1644348438
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
ikskuh jemius I can say pretty confidently that there are CPUs out that there will happily gather multiple stores to one cache line into a single cache operation.  The System Z mainframe processor, for example, will gather stores to L1 if the instructions are close enough together in the issue pipelines.  It will only write to L2 if the line is evicted from L1 or a software command to flush it is executed.  The same is

1644348438
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
 true from L2->L3 and L3->L4 on those systems.  It's called Total Store Ordering (TSO), there's a good primer of it here https://www.cs.utexas.edu/~bornholt/post/memory-models.html

1644348491
ikskuh!~xq@v43666.php-friends.de
ep

1644348492
ikskuh!~xq@v43666.php-friends.de
*ep

1644348493
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
TSO systems also typically don't require a store anywhere in the system to invalidate all read-only copies of a cache line elsewhere

1644348495
ikskuh!~xq@v43666.php-friends.de
*yep

1644348510
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
*when a store occurs somewhere else

1644348568
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
tsmanner, https://31.media.tumblr.com/df971a0c77fc08721827e9b277f521bd/tumblr_inline_n4e4w0wHur1rvlcgk.gif

1644348574
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
ok, well, I guess that's a point

1644348586
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
"TSO systems also typically don't require a store anywhere in the system to invalidate all read-only copies of a cache line when a store occurs somewhere else"?

1644348629
ikskuh!~xq@v43666.php-friends.de
jemius: https://zig.godbolt.org/z/coq8Mq5oM

1644348683
ikskuh!~xq@v43666.php-friends.de
write effects on mips are only really visible when you call sync after the store

1644348697
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
I think I'm confused because the first part of that sentence says "typically don't require a store anywhere"...

1644348715
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
but the last part of the sentence says "when a store occurs somewhere else". Which is it :P?

1644348802
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
cr1901 In a multi-CPU environment, especially in the presence of out-of-order execution, it's not possible to prove that the other core didn't observe the value pre-store.  The synchronization point for MP coherence in the system is that loads of line X occurring after a store to line X in the same CPU must observe the older store.

1644348837
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
yeah, i realized after I added that that I had already said it... "TSO systems also typically don't require a store anywhere in the system to invalidate all read-only copies of a cache line elsewhere" was what I meant

1644349016
Piraty!~irc@user/piraty
jemius: which talk is that you refer to?

1644349086
andrewrk!~andrewrk@mail.ziglang.org
motiejus, for argv this is the zig type: [*:null]const ?[*:0]const u8

1644349108
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
tsmanner: Sorry I still don't follow. "loads of line X occurring after a store to line X in the same CPU must observe the older store." >>

1644349116
andrewrk!~andrewrk@mail.ziglang.org
if it seems confusing, read it from right to left

1644349122
jemius!~imperator@2001:16b8:2d8f:ba00:24ec:341e:2900:8aa0
Piraty, "The Road to Zig 1.0" IIRC

1644349135
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
If this is concerning the POV of a single core, then I would hope that the value you wrote would be the value read

1644349177
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
A CPU that wrote one thing but then read another (without the interference of a different core) sounds... not ideal :P

1644349263
ikskuh!~xq@v43666.php-friends.de
cr1901: now let's talk about branch delay slots 

1644349308
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
Okay, what about delay slots?

1644349320
ikskuh!~xq@v43666.php-friends.de
execute code after jumps

1644349364
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
cr1901 Yeah, basically as long as you own an exclusive (writeable) copy of a line in a core, the store ordering is good.  If you have a read-only copy, your core may be notified of an exclusive fetch somewhere else, but isn't obligated to stop using the line, meaning that stores from that other core may or may not be observed here.

1644349397
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
If I store 0x00 to mem 0x00000001 in the delay slot, I would be concerned if a load from 0x00000001 after the delay slot didn't read 0x00

1644349434
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
hmmm, maybe... :o

1644349468
Piraty!~irc@user/piraty
using a google online spreadsheet for transparency isn't really ideal nor very accesible

1644349475
ikskuh!~xq@v43666.php-friends.de
no, delay slots are about execution oder

1644349477
ikskuh!~xq@v43666.php-friends.de
*order

1644349572
wavemode!~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2
Piraty what problems are you having with it?

1644349897
andrewrk!~andrewrk@mail.ziglang.org
is this about the ZSF financials? I just checked, and it is very straightforward to use private browsing mode to download the spreadsheet as an excel file which is convertable to any format with libreoffice

1644350438
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
tsmanner: I'm in over my head, but when you say "invalidate all read-only copies", that means "if the cores w/ read-only copies try to read from said cache line, they must wait until the CPU w/ read-write access to the line has written to it", correct?

1644350569
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
I don't think I grok how "your core may be notified of an exclusive fetch somewhere else, but isn't obligated to stop using the line" and "read-only copies are invalidated" are both simultaneously possible :P

1644350877
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
cr1901 sorry, I work in cache design so I tend to fall into jargon quickly.  I mean that the core with the read-write copy doesn't prevent other cores from continuing to read the cache line.  There's a mechanism for notifying those cores that someone did get read-write access, but no notification when a write actually occurs.  That means that the system does not guarantee that readers see writes right now, only that 

1644350877
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
they will eventually see the writes.

1644350996
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
tsmanner: Thanks, and it's not your fault. CPUs got really damn difficult once distributed systems reared their ugly head. I find it very mentally taxing, so I have trouble keeping up :P

1644351432
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
cr1901 reminds me of the quote "There are only two hard things in Computer Science: cache invalidation and naming things."  Honestly, I don't understand it all either haha

1644351462
cr1901!~cr1901@2601:8d:8600:911:8192:df18:486a:6454
and off-by-one errors

1644351464
wavemode!~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2
the two hard things are cache invalidation, naming things, and off-by-one errors

1644351749
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
I think the original quote was by Phil Karlton, the off-by-one thing was added later and it turned into the (great) meme

1644351777
mikezackles!~mikezackl@gateway/tor-sasl/mikezackles
hmm, pretty sure it's just one hard thing: cache invalidation and naming things

1644352434
andrewrk!~andrewrk@mail.ziglang.org
good one, mikezackles 

1644352940
mikezackles!~mikezackl@gateway/tor-sasl/mikezackles
:)

1644361384
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
training on leetcode for interviews, this one took me an hour! https://leetcode.com/problems/median-of-two-sorted-arrays/

1644361405
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
let me know how long it takes you if you wanna try

