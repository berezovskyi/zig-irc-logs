1648276653
motiejus!~motiejus@2001:470:69fc:105::38fb
will start positive today: I came to zig because of `zig cc`, and (after a few kLOC of zig) am staying because of the language.

1648276663
motiejus!~motiejus@2001:470:69fc:105::38fb
 My boss supports a trip to Milan, but skipping this time for kids/family. Hopefully the next one will be easier to arrange. :) Have a good time there, folks.

1648276932
andrewrk!~andrewrk@mail.ziglang.org
ah would have been fun to meet you in person

1648276938
andrewrk!~andrewrk@mail.ziglang.org
I do think there will be a next time :)

1648280512
cnx!c364d5be87@2604:bf00:561:2000::3f
luuk, I'm well aware of that, however std look up logic is hardcoded and i see very little reason for it not to be used for others

1648304085
Graham31415!~Graham@user/Graham31415
The std lib docs seem to miss a lot of functions. I know there's a big warning at the top of the docs page that says the docs are experimental, but this seems like something that ought to be a simple fix (but maybe I'm wrong).

1648304210
Graham31415!~Graham@user/Graham31415
E.g https://ziglang.org/documentation/master/std/#std;ArrayList shows init() but not deinit().

1648304566
daurn!~daurnimat@vultr.daurnimator.com
Graham31415: it's known. as it says they're experimental. Right now they only appear for things that have test coverage.

1648304727
Graham31415!~Graham@user/Graham31415
Ah, thanks. Is there anything I can read to find out about docs generation?

1648305232
Graham31415!~Graham@user/Graham31415
i guess its somewhere in the `ci` folder of the docs. I'll keep digging for a bit...

1648305249
Graham31415!~Graham@user/Graham31415
s/the docs/the sources/

1648305626
Levy[m]!~tauoverpi@2001:470:69fc:105::1:71a5
note that docgen is being rewritten to fix the above issues iirc

1648306696
motiejus!~motiejus@2001:470:69fc:105::38fb
Loris Cro: is frequently streaming how he is implementing the autodocs generation, you may join and chime in: https://www.twitch.tv/kristoff_it

1648306774
Graham31415!~Graham@user/Graham31415
cool, thanks. Is that for the langref, or the stdlib docs, or both?

1648306788
motiejus!~motiejus@2001:470:69fc:105::38fb
I don't know :O

1648306859
Graham31415!~Graham@user/Graham31415
I see these are separate things. At least, doc/docgen.zig is only for the langref. And the stdlib docs are built from ci/zinc/linux_test.sh using `zig test ... -femit-docs...`

1648306928
Graham31415!~Graham@user/Graham31415
honestly, live streams aren't something i have the motivation to watch/join

1648307115
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
if I want to use some c lib with zig, I would probably want to translate it and wrap everything up into proper zig types right?

1648307174
motiejus!~motiejus@2001:470:69fc:105::38fb
you can just include the headers and use the functions when getting started, but turns out that declaring the extern functions is quite ergonomic (also advice I have received in this room)

1648307227
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
so I just declare functions I use and let the linker figure it out?

1648307256
motiejus!~motiejus@2001:470:69fc:105::38fb
yes

1648307276
motiejus!~motiejus@2001:470:69fc:105::38fb
conveniently, you can restrict the external functions' API, e.g., that it does not accept null pointers

1648307325
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
interesting

1648307356
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
I just need to keep the name the same ig

1648307413
motiejus!~motiejus@2001:470:69fc:105::38fb
here is my change going from an included file to an `extern fn`: https://git.sr.ht/~motiejus/turbonss/commit/e1bdb6c5296ae3517ba9f31adce1effbd3f8bcd0

1648307419
motiejus!~motiejus@2001:470:69fc:105::38fb
(it does a bit more in the same commit, apologies for that)

1648307431
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
thhx

1648307447
motiejus!~motiejus@2001:470:69fc:105::38fb
here more functions moved the same way: https://git.sr.ht/~motiejus/turbonss/commit/787fbcf375233b740812bf1ff374566d62653555

1648307489
motiejus!~motiejus@2001:470:69fc:105::38fb
the test at the end may be of interest: I am copying the enum definition, but also testing that it's the same in C

1648307587
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
ah, rn I'm just assigning them to the value I got from import

1648307624
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
like FOO = c.FOO, for all the enums

1648307724
motiejus!~motiejus@2001:470:69fc:105::38fb
that's fine. But I wanted to avoid including C in non-tests

1648307746
motiejus!~motiejus@2001:470:69fc:105::38fb
enums don't have such advantage to "not import" from C, but function definitions do

1648307782
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
ic, for me if it's a deps them it wouldn't be so bad to import their headers

1648319899
tleydxdy[m]!~tleydxdy@2001:470:69fc:105::16a3
https://ziglang.org/documentation/master/#toc-Non-exhaustive-enum

1648330759
jemius!~jemius@p200300d9672a87009ed024fb792de990.dip0.t-ipconnect.de
Is it possible to roughly estimate how effortful it is to write a Zig-Compiler (compared to a C-Compiler)?

