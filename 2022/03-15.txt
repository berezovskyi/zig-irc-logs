1647373954
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Can someone remind me how to select a different libc++ version?  Something about the deque implementation shipped with zig-linux-x86_64-0.9.1 makes `struct Foo { std::deque<Foo> foos; };` fail to compile with an incomplete type error.  Changing deque to list or vector works fine with zig, and compiling deque with clang++ 11 and g++ 8.4 also work.

1647379491
andrewrk!~andrewrk@mail.ziglang.org
tsmanner, ability to select different libc++ versions is not something zig offers; our goal is to always ship an up-to-date libc++ that "just works" with everything

1647379504
andrewrk!~andrewrk@mail.ziglang.org
(clearly the goal is not being accomplished in this example for you)

1647380071
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Gotcha, I must be thinking of linking against some precompiled system libc versions or something.  Would an issue be appropriate then for the deque example then?

1647380216
andrewrk!~andrewrk@mail.ziglang.org
yes

1647380278
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Just kidding, looking through the source, this define does it `_LIBCPP_ABI_INCOMPLETE_TYPES_IN_DEQUE`

1647380428
andrewrk!~andrewrk@mail.ziglang.org
is that something we should enable in src/libcxx.zig or src/libcxxabi.zig?

1647380589
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
It's not clear to me yet how it's used.  Looks like it is related to how the deque does memory allocation, that define sets it to 0 rather than making it a function of the size of the contained type.

1647380697
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
My intuition is that setting it globally is disabling some memory optimizations that are probably good for normal use, it's just this recursive case that needs to punt, so it's probably better to put the `#define` in the source file that needs a deque of Self

1647381556
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Yup, the alloc/dealloc calls are passing __block_size around, and copy/move operations are a function of __block_size.  0 (what the define sets it to) nullifies the block size terms so all that stuff operates on sizeof(_ValueType).

1647385349
haze!~haze@user/haze
good afternoon ifreund how are we doing this fine evening

