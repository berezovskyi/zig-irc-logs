1642568291
postmodern!~postmoder@user/postmodern
hello, i was wondering whether zig supports, or will support, compiling down to C? I saw this issue and some discussion about this feature, but can't find anything else? https://github.com/ziglang/zig/issues/3772

1642568992
andrewrk!~andrewrk@mail.ziglang.org
postmodern, yes, you can try it today with the `-ofmt=c` flag. however, be warned that this backend is failing a majority of behavior tests at the moment, so only very trivial programs will work

1642569142
postmodern!~postmoder@user/postmodern
andrewrk, is that a `zig build` or `zig build-lib` option?

1642569175
postmodern!~postmoder@user/postmodern
andrewrk, or do i have to install zig from git in order to get that feature?

1642569444
nektro!~meg@75-164-170-164.ptld.qwest.net
its a zig-exe/lib/obj feature, but as he mentioned it won't work for most cases as its part of the self hosted compiler which is still being worked on

1642569501
andrewrk!~andrewrk@mail.ziglang.org
postmodern, `zig build-lib`. looks like there is not yet a `zig build` API to enable it but that's just an oversight. I'll add it now

1642569659
postmodern!~postmoder@user/postmodern
hmm yeah, `zig build-lib -ofmt=c src/main.zig` segfaulted 

1642569703
andrewrk!~andrewrk@mail.ziglang.org
postmodern, to answer your other question, in zig 0.9.0 it was even less further along. if you want to experiment with it, certainly you will want a master build. you can find up-to-date master builds on ziglang.org/download

1642569748
andrewrk!~andrewrk@mail.ziglang.org
I suggest to start with `export fn empty() void {}` and slowly add things. you will quickly run into the boundaries of what is working.

1642569883
andrewrk!~andrewrk@mail.ziglang.org
310/1078 (29%) of the behavior tests are passing today. this number is going up pretty quickly with each passing week however

1642569957
postmodern!~postmoder@user/postmodern
cool will keep an eye on this. compiling down to C would allow pure-C projects to transition to Zig in a piece-meal fashion, while still releasing pure-C source tarballs that wouldn't require end-users install the zig compiler.

1642570113
andrewrk!~andrewrk@mail.ziglang.org
it could possibly help with that use case, however, note that the C code that Zig lowers to is target-dependent

1642570137
andrewrk!~andrewrk@mail.ziglang.org
for example if you do something like this in zig: `if (@sizeOf(usize) == 4) foo() else bar();`

1642570151
andrewrk!~andrewrk@mail.ziglang.org
then your C code will contain simply a call to `foo()` or `bar()` and the conditional compilation logic will be gone

1642570189
andrewrk!~andrewrk@mail.ziglang.org
so your generated .c code would have similar downsides as compiling to machine code directly

1642584250
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
How do I cast a buffer slice to an integer with a potentially non-native endianness? I'm tryna speak a protocol that's receiving a 4 byte header and need to get the second 2 bytes interpreted as a big-endian u16

1642584530
ikskuh!~xq@v43666.php-friends.de
std.mem.{read,write}IntLittle

1642584532
ikskuh!~xq@v43666.php-friends.de
std.mem.{read,write}IntBig

1642584556
ikskuh!~xq@v43666.php-friends.de
same if you have a reader, you can use readIntLittle(u16) to get a 16 bit unsigned integer, little endian byte order

1642584579
Arnavion!arnavion@user/arnavion
or   @as(u16, buf[2]) << 8 | @as(u16, buf[3])

1642584602
ikskuh!~xq@v43666.php-friends.de
Arnavion: please use the readIntLittle functions for this, they convey intent :)

1642584662
Arnavion!arnavion@user/arnavion
If you have a Reader, yes

1642584681
ikskuh!~xq@v43666.php-friends.de
you can just use the functions from std.mem, those take arrays

1642584718
ikskuh!~xq@v43666.php-friends.de
(brb)

1642584813
Arnavion!arnavion@user/arnavion
Yes, though you'll need to construct a new [_]u8{ buf[2], buf[3] } first

1642584854
Arnavion!arnavion@user/arnavion
Ah, readIntSlice removes the need for that

1642585030
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
sweet thanks :)

1642585063
luuk!~luuk@user/luuk
Arnavion, you can just do buf[2..4]. When the length is comptime known it creates a pointer to an array. 

1642585141
luuk!~luuk@user/luuk
So if you dereference that, you'll get exactly what you need: [2]u8

1642585207
Arnavion!arnavion@user/arnavion
Indeed, TIL

1642603504
ntgg!~ntgg@pool-108-52-163-71.phlapa.fios.verizon.net
why can't I iterate over an array field of a packed struct?

1642603589
ntgg!~ntgg@pool-108-52-163-71.phlapa.fios.verizon.net
it works fine if the struct isn't packed

1642603628
ntgg!~ntgg@pool-108-52-163-71.phlapa.fios.verizon.net
for (self.array_field) |element| {...} has an unable to eval constant expr compile error if it is packed

1642604073
dutchie!~dutchie@user/dutchie
looks like https://github.com/ziglang/zig/issues/10185. packed structs are a known area that stage1 has a lot of deficiencies in

1642604198
ntgg!~ntgg@pool-108-52-163-71.phlapa.fios.verizon.net
cool ty, I tried looking but for some reason i didn't find that one

1642630708
Franciman!~Franciman@mx1.fracta.dev
is there any scheme implementation in zig?

1642630754
Franciman!~Franciman@mx1.fracta.dev
i wanted to try and implement r7rs comforming implementation in zig

1642633151
ifreund!2940d10f8b@user/ifreund
nope, don't think so

1642633169
ifreund!2940d10f8b@user/ifreund
there are a few lisps though, e.g https://github.com/cryptocode/bio

1642635167
Franciman!~Franciman@mx1.fracta.dev
awesome, ifreund how do you find them? lol

1642635172
Franciman!~Franciman@mx1.fracta.dev
and thanks

1642636786
ifreund!2940d10f8b@user/ifreund
Franciman: no problem! I like to think I know all interesting zig projects but I'm probably wrong

1642636799
ifreund!2940d10f8b@user/ifreund
and I certainly will be wrong as zig keeps growing

