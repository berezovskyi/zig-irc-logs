1643328423
ifreund!2940d10f8b@user/ifreund
what does that do?

1643328471
ifreund!2940d10f8b@user/ifreund
hmm, seems mingw specific?

1643328555
ifreund!2940d10f8b@user/ifreund
heh, github's giving me a 500 currently

1643328974
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
I don't have to install LLVM to e.g. $HOME/.local (or somewhere on my path) for Zig to find LLVM during cmake config, correct?

1643333162
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
ifruend it converts ".def" file to ".lib" files, not specific to mingw but specific to Windows yes

1643333426
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
on windows if you want the loader to automatically load dll dependencies, you link your binary to a ".lib" file, which is the binary form of a ".def" file

1643333553
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
I feel I should also mention that .lib files can also contain code that is statically linked, they're more than just a binary form of .def files

1643335639
freshcoffee!~fresh@user/freshcoffee
github wtf

1643336723
Evo2!~hastings@aj144082.dynamic.ppp.asahi-net.or.jp
Hi all. I'm working on a zig package for Debian. I've got it building nicely but I have a legal issue.

1643336763
Evo2!~hastings@aj144082.dynamic.ppp.asahi-net.or.jp
The zig source code seems to include a windows binary src/link/msdos-stub.bin

1643336897
andrewrk!~andrewrk@mail.ziglang.org
marler8997, I believe zig exposes this functionality somehow already, let me see...

1643336919
andrewrk!~andrewrk@mail.ziglang.org
`zig dlltool`

1643346522
marler8997!~marler899@96-19-96-19-162-162.cpe.sparklight.net
andrewrk ooo very nice

1643347479
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
marler8997: Are you still around?

1643347535
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
I'm trying to update your windows-imager program to compile on zig from master; most errors are unused function arguments, but apparently "extern enum" for MEDIA_TYPE isn't legal anymore

1643347587
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
Do C++ enums in the Windows API have a consistent size between 32 and 64-bit, or will I somehow have to conditionally size the enum based on 32/64-bit target?

1643349530
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
error: dependency on dynamic library 'kernel32' requires enabling Position Independent Code. Fixed by `-lkernel32` or `-fPIC`.

1643349537
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
Where do I pass "-fPIC"?

1643349546
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
zig build -fPIC errors out

1643349711
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
And if I do exe.linkSystemLibrary("kernel32"), I get "unable to find library -lkernel32" from lld (fair enough)

1643349720
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
This definitely worked 6 months ago

1643349852
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
exe.force_pic = true; also returns "unable to find library -lkernel32"...

1643349877
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
oh wait... I forgot to specify the target

1643349964
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
There we go

1643350024
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
If you cross-compile on Linux, expect "zig build" without "-Dtarget=x86_64-windows-gnu" to fail :)

1643350068
freshcoffee1!~fresh@user/freshcoffee
you can set the target in build.zig

1643350123
cr1901!~cr1901@2601:8d:8600:911:6d9c:a44f:9ccf:eacc
Maybe marler8997 wants the program to eventually be a generic *nix and Windows disk imager

