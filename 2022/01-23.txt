1642919231
da_lorax!~daloraxye@2001:470:69fc:105::1:5e15
if I `_ = async whatever()` and the scope ends, does this cause problems for the async function's context ?

1642938464
Franciman!~Franciman@mx1.fracta.dev
is there a way to have inline functions in zig?

1642938542
Franciman!~Franciman@mx1.fracta.dev
ah callconv

1642938545
Franciman!~Franciman@mx1.fracta.dev
nice

1642938628
nektro!~meg@75-164-170-164.ptld.qwest.net
inline fn foo() void {}

1642938673
Franciman!~Franciman@mx1.fracta.dev
uhm the docs say:

1642938678
Franciman!~Franciman@mx1.fracta.dev
fn foo() callconv(.Inline) void {}

1642938684
nektro!~meg@75-164-170-164.ptld.qwest.net
both work

1642938689
Franciman!~Franciman@mx1.fracta.dev
:O

1642938692
Franciman!~Franciman@mx1.fracta.dev
aweszome

1642938695
Franciman!~Franciman@mx1.fracta.dev
thanks

1642938710
nektro!~meg@75-164-170-164.ptld.qwest.net
👍

1642942973
Franciman!~Franciman@mx1.fracta.dev
is there a way to define a shortcut for switch branch conditions?

1642942986
nektro!~meg@75-164-170-164.ptld.qwest.net
can you elaborate

1642942988
Franciman!~Franciman@mx1.fracta.dev
i find myself switching often on '0','3','5','7'

1642942997
Franciman!~Franciman@mx1.fracta.dev
ehm sorry

1642943013
Franciman!~Franciman@mx1.fracta.dev
I mean, switch(x) { '0','3','5','7' => {...}, }

1642943025
nektro!~meg@75-164-170-164.ptld.qwest.net
ah, not at the moment i think

1642943030
Franciman!~Franciman@mx1.fracta.dev
is there a way to write something like, const switch_conditions = '0','3','5','7'

1642943032
Franciman!~Franciman@mx1.fracta.dev
and do

1642943034
nektro!~meg@75-164-170-164.ptld.qwest.net
afaik you have to write it out

1642943039
Franciman!~Franciman@mx1.fracta.dev
ok

1642943074
dutchie!~dutchie@user/dutchie
see `zig zen`:  "* Favor reading code over writing code." and "* Reduce the amount one must remember."

1642943108
Franciman!~Franciman@mx1.fracta.dev
in my case this would make the code clearer ^^'

1642943114
Franciman!~Franciman@mx1.fracta.dev
because it would convey the meaning

1642943123
Franciman!~Franciman@mx1.fracta.dev
of why this thing is repeated so many times

1642943127
Franciman!~Franciman@mx1.fracta.dev
but sure, i agree

1642943197
dutchie!~dutchie@user/dutchie
you could always refactor to `if (oddDigit(x)) {...}`

1642943209
dutchie!~dutchie@user/dutchie
depending on what else is in your switch

1642943257
Franciman!~Franciman@mx1.fracta.dev
i can sure try and see if it's efficient

1642943258
Franciman!~Franciman@mx1.fracta.dev
thanks!

1642946421
johnLate!~johnlate@lexington.scnr.net
If I want to call a c function "void foo(char *buf, size_t count);", is "c.foo(&buf[0], buf.len);" the correct way to call it from zig, assuming buf is a []u8?

1642946639
ifreund!2940d10f8b@user/ifreund
johnLate: buf.ptr is better, and actually has a different type from &buf[0] although the address is the same

1642946689
ifreund!2940d10f8b@user/ifreund
buf.ptr is [*]u8 (pointer to an unknown number of u8s) while &buf[0] is *u8 (pointer to a single u8)

1642946713
ifreund!2940d10f8b@user/ifreund
since you're likely coercing to a [*c]u8 pointer in this case though both work

1642946764
johnLate!~johnlate@lexington.scnr.net
ifreund: thanks, didn't know about .ptr

1642946779
ifreund!2940d10f8b@user/ifreund
no problem!

1642946873
Franciman!~Franciman@mx1.fracta.dev
if you would say what's the rationale behind types for zig

1642946882
Franciman!~Franciman@mx1.fracta.dev
would it be for allowing more efficient computations?

1642946895
Franciman!~Franciman@mx1.fracta.dev
i mean why isn't zig untyped?

1642947061
ifreund!2940d10f8b@user/ifreund
Franciman: because strict types help prevent bugs

1642947071
nektro!~meg@75-164-170-164.ptld.qwest.net
robustness and maintainability

1642947076
ifreund!2940d10f8b@user/ifreund
and make software easier to maintain

1642947140
Franciman!~Franciman@mx1.fracta.dev
yes

1642947144
Franciman!~Franciman@mx1.fracta.dev
but then why not dependent types :D

1642947165
nektro!~meg@75-164-170-164.ptld.qwest.net
what are "dependent types"

1642947181
Franciman!~Franciman@mx1.fracta.dev
nektro: it's a type system that is strong enough to allow you to prove things about your program

1642947199
Franciman!~Franciman@mx1.fracta.dev
you can use them (even if it can be very tedious) to write correct-by-construction programs

1642947211
johnLate!~johnlate@lexington.scnr.net
also... I guess, calling c code or other libraries and talking to hardware will be somewhat funny without types

1642947220
nektro!~meg@75-164-170-164.ptld.qwest.net
because there's a lot of valid and fast things that aren't "provable" in a formal sense

1642947228
Franciman!~Franciman@mx1.fracta.dev
sure but you can amend those cases

1642947244
nektro!~meg@75-164-170-164.ptld.qwest.net
if that's what you want, that's what rust does

1642947250
Franciman!~Franciman@mx1.fracta.dev
no i don't

1642947254
Franciman!~Franciman@mx1.fracta.dev
i like zig

1642947262
Franciman!~Franciman@mx1.fracta.dev
i was asking what is your opinion

1642947279
nektro!~meg@75-164-170-164.ptld.qwest.net
i also like zig

1642947611
ifreund!2940d10f8b@user/ifreund
Franciman: dependant types are super complex

1642947637
ifreund!2940d10f8b@user/ifreund
simplicity is another factor that helps prevent bugs and make software easier to maintain

1642947643
ifreund!2940d10f8b@user/ifreund
it's all tradeoffs

1642951185
johnLate!~johnlate@lexington.scnr.net
Why is libpthread required when linking libc and using -fsingle-threaded? zig build-exe src/main.zig -lc -fsingle-threaded && objdump -p main | grep NEEDED  -> libpthread.so.0

1642951270
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
Hello there. For quite some time I'm working on a custom language compiler; the plan was to use C++ and CMake, with LLVM lowering. Long story short, I'm dead tired by the cross-platform state of this stack. From everything I've analyzed, Zig looks like the best choice to write a compiler which would be easily built and cross-platform. I'm also

1642951270
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
thinking of translating higher-level code to Zig instead of LLIR; this, however, a thing I'm concerned about. From what I've seen, it wouldn't be possible to statically link zig with my compiler into a single binary. Am I right?

1642951314
nektro!~meg@75-164-170-164.ptld.qwest.net
johnLate: libpthread is included in libc

1642951347
nektro!~meg@75-164-170-164.ptld.qwest.net
the .so file exists on systems for legacy compat

1642951421
nektro!~meg@75-164-170-164.ptld.qwest.net
vladfaust: it might be possible in the future, but correct using the zig compiler as a library is not possible right now

1642951495
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
nektro: I guess it would be theoretically possible after stage2 is complete?

1642951499
johnLate!~johnlate@lexington.scnr.net
nektro: I can compile a c program with clang that does not have libpthread.so.0 listed in objdump, I wonder why the zig program has it...

1642951918
ifreund!2940d10f8b@user/ifreund
johnLate: note that with both recent enough glibc any any musl version libpthread.so is empty and all the symbols are in libc.so

1642952000
ifreund!2940d10f8b@user/ifreund
It would certainly be possible to make zig understand linking libc in a non all or nothing way, but it's not clear that that complexity would bring any tangible benefits

1642952073
daurn!~daurnimat@vultr.daurnimator.com
johnLate: note that even in single threaded you might still call e.g. `pthread_self`

1642952147
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
A newbie question. How do you folk search packages? Can't find search option in Zigmod (cc nektro ?); awesome zig is smol...

1642952245
daurn!~daurnimat@vultr.daurnimator.com
packages for what? the way I find them in *any* language is duckduckgo/google

1642952354
nektro!~meg@75-164-170-164.ptld.qwest.net
https://github.com/topics/zig-package

1642952378
nektro!~meg@75-164-170-164.ptld.qwest.net
i'll be adding a glossary/search function to aquila very soon

1642952517
nektro!~meg@75-164-170-164.ptld.qwest.net
vladfaust: yeah that would be the first blocker. once its ready i'll be looking into it since its a feature i'm interested in as well

1642952534
vladfaust!~vladfaust@93-80-188-4.broadband.corbina.ru
Thanks for the topics tip! Looking forward for the search option in aquila :)

1642952772
nektro!~meg@75-164-170-164.ptld.qwest.net
its been on my todo list for a while and i just finished the zig port of the app from go so i'll finally be able to start ticking off items :)

1642975601
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
I keep bumping into zig all over: just had a `pip install` failure for something that uses the rust interop PyO3 maturin packaging tool.  Apparently they just merged an experimental branch that replaces `cc` with `zig cc` so they can compile with multiple glibc versions (for manylinux support) without needing docker containers.

1642976352
torque!~tachyon@user/torque
the python packaging ecosystem has really gotten kind of messy with native extensions having really exotic toolchains that the developers don't care about because they assume their prebuilt binaries will work for everyone

1642976662
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Yeah, even just C extensions have been really brittle in my experience, because you have to go get the C compiler and libc that c-python was compiled with

1642978259
andrewrk!~andrewrk@mail.ziglang.org
tsmanner, the problem was caused by `zig cc`? 

1642978986
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
andrewrk nope, my particular problem was that I was trying to compile the Rust PyO3 module for Dhall 0.1.8, which I know works on Python 3.8, but I have Python 3.10 in my nix-env, and it has a glibc that's too new for the manylinux compat that Dhall describes.  A search about PyO3 manylibs glibc fails included the their Gitter logs where a package maintainer was able to solve that problem by using the experimental 

1642978986
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
`--zig` flag that replaces the system cc with zig cc

1642979039
andrewrk!~andrewrk@mail.ziglang.org
ah neat, I was worried for a sec that zig cc made things worse

1642979043
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
The easiest way to solve my problem was just to get a newer dhall package for python.  I just wasn't expecting to see `zig` show up in here anywhere!

1642979089
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Ah, nope, one of the maturin maintainers ended the conversation with "zig cc has been such a pleasure to work with"

1642979260
andrewrk!~andrewrk@mail.ziglang.org
happy to hear it

