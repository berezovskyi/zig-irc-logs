1698832728
julia!~quassel@user/julia
maybe this is documented somewhere but I can't find it. I have an existing C project for an embedded system. Currently it's several cmake projects that pull in various libraries and such. As far as I can tell, if I want to use Zig I appear to have to rewrite all of the CMake code as build.zig? That feels relatively annoying. What I'd like to do is progressively use Zig on one of the subprojects. I'd be happy to replace it's CMake with build.zig, but I wouldn't 

1698832728
julia!~quassel@user/julia
want to rewrite everything in depends on. Is this possible in any way?

1698833150
ifreund!2940d10f8b@user/ifreund
julia: I suppose you can either run zig build from cmake or run cmake from build.zig with addSystemCommand() or similar

1698833192
ifreund!2940d10f8b@user/ifreund
it'll be a bit hacked together I suppose but I wouldn't expect much more from mixing build systems

1698833203
julia!~quassel@user/julia
yeah, but I'm sort of more wondering how you get either cmake or zig to autodetect the library includes et al

1698833241
julia!~quassel@user/julia
(I mean if you can use *just* cmake with Zig that'd be great, I'd love to be able to just specify a zig file and a language in cmake like you can for C/CPP/objc/swift etc)

1698833382
julia!~quassel@user/julia
(or even not autodetect, but how you get that to work, especially with custom linkers and that)

1698833892
julia!~quassel@user/julia
most languages I can find instructions on how to use with CMake by searching "lang + cmake" but for zig all I get is information about "zig cc", and whilst that's useful it doesn't quite explain how to also use that to compile zig code?

1698834456
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
hey, is there any way to get the name of an identifier?

1698834471
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
like #id?

1698834482
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
or stringify!() in rust?

1698835748
ifreund!2940d10f8b@user/ifreund
julia: I don't think any fancy cmake integration for zig exists

1698835757
ifreund!2940d10f8b@user/ifreund
here is what zig itself does for the bootstrap: https://github.com/ziglang/zig/blob/725f765c376dda291d3d5afe5446221a97c189f7/CMakeLists.txt#L928-L933

1698835926
julia!~quassel@user/julia
alrighty then thankyou 

1698836992
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
say if you have like a bunch of tests that need you to link libc, include a bunch of headers, etc, is there an easy way to run just one of them without passing a mammoth command line?

1698840822
ifreund!2940d10f8b@user/ifreund
soupladler: You can set a --test-filter through the std.Build API

1698840866
ifreund!2940d10f8b@user/ifreund
the `filter` field of the Options struct passed to std.Build.Step.Compile.create()

1698840913
ifreund!2940d10f8b@user/ifreund
er, the std.Build.addTest() is probably what you use, same `filter` field though

1698841280
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
then you get the argument through b.args?

1698844635
ifreund!2940d10f8b@user/ifreund
soupladler: std.Build.option() I believe, but you've probably figured it out by now :) 

