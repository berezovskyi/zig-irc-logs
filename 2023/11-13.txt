1699835520
toasterking!a5f2e7be36@2604:bf00:561:2000::149
https://github.com/ziglang/zig/pull/17954 I've tried nothing and I'm all out of ideas. Looks like CI is running under ext2/3 on kernel 5.15.

1699835587
toasterking!a5f2e7be36@2604:bf00:561:2000::149
*5.10

1699835600
toasterking!a5f2e7be36@2604:bf00:561:2000::149
I can't repro the failures on Linux 6.6 + ext2. Maybe its the kernel, maybe its glibc.

1699860340
freshcoffee1!~fresh@user/freshcoffee
toasterking: your comment says "not chmod'ing a regular file" but... it is a regular file according to the nam and test code?

1699861268
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Hi, I'm trying to create a doubly linked list but for some reason during the user of an iterator the pointers keep changing.

1699861270
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
I'm not sure why

1699861293
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
https://pastebin.com/KX4Ntkja

1699861298
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
That is the code

1699862622
torque!~tachyon@user/torque
there are a variety of suspect things going on in there. why does your iterator store elements into the list put in, mutating it? L 30 and L 31 are storing references to a stack variable which may go out of scope when `init` returns and become junk pointers

1699862697
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
torque: I didn't think about that.

1699862710
torque!~tachyon@user/torque
there is an implementation of a doubly linked list in the standard library that you may want to check out

1699862743
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
The iterator does not want to place an expectation of the start and end of the list so we add a cursor node and an end node.

1699862767
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
So we things don't crash and burn if two or more elements are removed between iterations.

1699862858
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
I'm new to zig so I'm unsure exactly of how the memory works.

1699862928
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Can I just assume that unless an allocator is involved, the memory is stack based?

1699862933
torque!~tachyon@user/torque
yes

1699862936
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Cool

1699862938
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Thank you.

1699863018
torque!~tachyon@user/torque
zig can sometimes skip a copy when returning a direct value from a function by storing it directly in the stack memory allocated by the caller, but in my experience this isn't consistent and it's usually better to assume that returning something directly from a function will not have the copy elided

1699863059
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Huh

1699863273
torque!~tachyon@user/torque
I believe the language makes some guarantees around this (called result location semantics) but it's not particularly well documented at the moment and I don't know precisely what they are

1699863289
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Ok

1699880777
sudw1n!~pratik@user/sudw1n
how do I check the endianness of the machine my code is being compiled on? I know one hacky way, something like: https://zig.godbolt.org/z/9YaMMePTG. But I am sure there are better ways to do this, perhaps something that Zig provides.

1699882757
ifreund!2940d10f8b@user/ifreund
sudw1n: @import("builtin").cpu.arch.endian()

1699882782
ifreund!2940d10f8b@user/ifreund
note that this tells you the endianness of the target platform, not the host

1699882874
ifreund!2940d10f8b@user/ifreund
(as does your godbolt snippet, host endianess is intententionally not exposed)

1699897406
drakonis!drakonis@user/drakonis
https://re.factorcode.org/2023/11/factor-is-faster-than-zig.html

1699902189
freshcoffee!~fresh@user/freshcoffee
drakonis: nice!

