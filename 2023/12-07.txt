1701909213
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, which way do you want your DLLs to be named?

1701924960
torque!~tachyon@user/torque
has there been any discussion of a `usingfields` keyword to complement the `usingnamespace` keyword? I think it would be really useful to be able to graft fields onto structs/unions the way that `usingnamespace` lets you graft methods

1701925072
torque!~tachyon@user/torque
my current use case is I have a bunch of "task" object that have 3 or 4 common fields and having them individually defined on all of the objects really reduces the maintainability of the code. there are a variety of reasons why I don't think they belong on their own structure

1701925131
torque!~tachyon@user/torque
it also generally feels to me like it would play very well with zig's comptime duck typing style

1701927677
nektro!~nektro@71-34-68-44.ptld.qwest.net
for that i personally copy/paste them between each struct that needs them and use the type safety to make sure i dont forget

1701927767
nektro!~nektro@71-34-68-44.ptld.qwest.net
or more directly u can add a comptime loop that asserts the field exists for each 'child' type

1701927850
torque!~tachyon@user/torque
the problem is if I want to add additional common fields in the future or need to change the type or something, if I miss one it's a compile error, which is annoying. digging through 4k lines of source code kind of sucks

1701927869
torque!~tachyon@user/torque
certainly better to be a compile error than a runtime error but from a maintenance perspective it's a big downside

1701927893
torque!~tachyon@user/torque
also `usingfields` would imo completely solve the issue that you can't define methods on generated structs

1701927928
nektro!~nektro@71-34-68-44.ptld.qwest.net
there wouldn't be any digging, the compile error would point you right to the failing case

1701927950
torque!~tachyon@user/torque
perhaps others don't think that's an issue, but the method syntax is very nice syntactic sugar and it's unfortunate that generated types can't benefit from it

1701928029
torque!~tachyon@user/torque
any navigation whatsoever in a file that size, including jumping to a line, is "digging"

1701928165
torque!~tachyon@user/torque
imo C does this "better" than zig, since you could just define a macro with the common fields in C

1701939970
ekaitz!~Ekaitz@94.73.32.196
andrewrk: sorry, europe timezone... I want them to be found by the windows system they are in, i don't actually care about the name

1701940204
ifreund!2940d10f8b@user/ifreund
torque: I don't get how this situation does not call for putting those common fields in a "child" struct and making that child a field of each larger struct

1701976696
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, I think the windows standard of doing that is with no "lib" prefix

1701976705
andrewrk!~andrewrk@mail.ziglang.org
correct me if I'm wrong

1701980764
ekaitz!~Ekaitz@94.73.32.196
andrewrk: idk, wine searches with lib... but also other libs are found correctly without the lib prefix so I don't know what to think.

1701980854
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, hmmm. would you mind filing an issue for this? sounds like some investigation is warranted

1701981037
ekaitz!~Ekaitz@94.73.32.196
maybe it's the library itself doing some weird stuff behind my back?

