1699750092
grayhatter!~grayhatte@user/grayhatter
andrewrk: yeah, I was just reading that today, I was about to throw a lot of shade on them for not implementing full bmp support... but then I started reading the bmp spec, and I want nothing to do with it anymore, and fully support that decision :D

1699782449
sudw1n!~pratik@user/sudw1n
jcmoyer: I don't understand how I can use `@fieldParentPtr` to do this. Could you please elaborate?

1699783288
jcmoyer!~jcmoyer@user/jcmoyer
sudw1n: https://zig.godbolt.org/z/zEd4b4Poz something like this, the gist of it is that @fieldParentPtr lets you access an enclosing struct given a pointer to one of its fields

1699783321
jcmoyer!~jcmoyer@user/jcmoyer
so you embed the Step into your type and store whatever other state you need there as well

1699786377
RoadrunnerWMC!~Roadrunne@46.101.129.38
By default (?), every @import'ed zig file is a struct. Is it possible to make a file that represents a union or enum instead?

1699794569
ifreund!2940d10f8b@user/ifreund
RoadrunnerWMC: nope

1699795990
ovf!sid19068@id-19068.hampstead.irccloud.com
i've written my first zig function, which is an interval list index (it converts the list of intervals to a flat array at compile time). it seems to work, however i can't seem to figure out comptime scoping. ideally i'd like my array (and n, the count) to be global so that several functions can access those, but comptime{} seems to introduce its own scope, and i can't declare an array without knowing its size: http://0x0.st/Hv-I.zig

1699796038
ovf!sid19068@id-19068.hampstead.irccloud.com
(so in short, i'd like to just move out all 'comptime' into the global scope, but can't figure out how)

1699797773
Pistahh!~Pistahh@user/pistahh
ovf: something along the lines of https://zig.godbolt.org/z/s7Kz5aY8c

1699798052
sudw1n!~pratik@user/sudw1n
jcmoyer: that's an interesting approach. however, it isn't working on my machine. It's supposed to generate a `zig-out/docs` directory if I do `zig build docs` but it seems to do nothing.

1699798095
sudw1n!~pratik@user/sudw1n
I looked around the zig source code and found something similar to what I was looking for in `build.zig`.

1699798108
sudw1n!~pratik@user/sudw1n
Here's the stripped down version: https://zig.godbolt.org/z/46zabWMq3.

1699798153
sudw1n!~pratik@user/sudw1n
it's not quite what I wanted but it's simpler.

1699799537
ovf!sid19068@id-19068.hampstead.irccloud.com
Pistahh: thanks! the syntax for rvalued comptime blocks is not exactly intuitive

1699800710
ovf!sid19068@id-19068.hampstead.irccloud.com
next step would be to do a compile-time decision tree instead of the dense array, but i'm not sure zig's comptime can do this

1699803826
ekaitz!~Ekaitz@94.73.32.196
hi where can I see a list of features i can use for -Dcpu flag?

1699806156
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, `zig targets`

1699806189
ekaitz!~Ekaitz@94.73.32.196
andrewrk: (y)

1699806195
andrewrk!~andrewrk@mail.ziglang.org
or perhaps you prefer to browse lib/target/$arch.zig

1699806298
ekaitz!~Ekaitz@94.73.32.196
andrewrk: do they use the same syntax that gcc uses? looks similar

1699806327
andrewrk!~andrewrk@mail.ziglang.org
the data comes from LLVM, plus some patching on our end

1699806361
ekaitz!~Ekaitz@94.73.32.196
andrewrk: alright thanks!

1699806958
ekaitz!~Ekaitz@94.73.32.196
andrewrk: https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#x86-Options similar to -march...

1699806966
ekaitz!~Ekaitz@94.73.32.196
i wonder if I can rely on that directly

1699807080
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, there is close to a 1-1 correspondence. zig uses underscores instead of dashes for naming these

1699807096
andrewrk!~andrewrk@mail.ziglang.org
also if zig is missing one, it can be added

1699807106
ekaitz!~Ekaitz@94.73.32.196
hmmm

1699807200
ekaitz!~Ekaitz@94.73.32.196
ok so i'll try to rely on the work we already have and translate to zig's style

1699807206
ekaitz!~Ekaitz@94.73.32.196
thanks for the help

1699807485
ekaitz!~Ekaitz@94.73.32.196
also andrewrk someone added llvm 16 and 17 to guix 

1699807490
ekaitz!~Ekaitz@94.73.32.196
they landed yesterday

1699807495
ekaitz!~Ekaitz@94.73.32.196
(it wasn't me)

1699808898
andrewrk!~andrewrk@mail.ziglang.org
nice

1699808948
APic!apic@apic.name
Indeed.

1699813270
freshcoffee1!~fresh@user/freshcoffee
aaah I just clicked something and "issue has been unpinned" .

1699813319
freshcoffee1!~fresh@user/freshcoffee
ah fixed it

1699813357
freshcoffee1!~fresh@user/freshcoffee
I blame github poor UI choices.

1699829991
RoadrunnerWMC!~Roadrunne@46.101.129.38
hm I'm not sure what the right way to combine generics and runtime polymorphism is

1699830022
RoadrunnerWMC!~Roadrunne@46.101.129.38
I got something to compile, but it ends up calling the wrong vtable functions at runtime, so I think there's a dangling-pointers problem somewhere

1699830055
RoadrunnerWMC!~Roadrunne@46.101.129.38
The assembly is hard to follow, but I think it's trying to memcpy vtables around? which is definitely not what I want

1699833513
RoadrunnerWMC!~Roadrunne@46.101.129.38
never mind, somehow I forgot to make my vtable pointers actually be... pointers

