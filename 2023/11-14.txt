1699989010
copygirl!~koppeh@copy.mcft.net
I'm a bit lost once again when it comes to the built-in package management.

1699989034
copygirl!~koppeh@copy.mcft.net
I have built a library, which itself wraps around a C library: https://git.mcft.net/copygirl/flecs-zig-ble

1699989082
copygirl!~koppeh@copy.mcft.net
I depend on that library, calling `anonymousDependency`, `addModule` and `linkLibrary`.

1699989096
copygirl!~koppeh@copy.mcft.net
And I get: error: 'flecs.h' file not found

1699989151
copygirl!~koppeh@copy.mcft.net
How would I go about including the files in my Zig library so that my project depending on it works?

1699989951
copygirl!~koppeh@copy.mcft.net
Ah looks like what I was missing was an `installHeader` call.

1699990342
shankar!~shankar@user/shankar
I am unable to understand the difference between comptime and const . can someone help me please ?

1699990544
copygirl!~koppeh@copy.mcft.net
shankar: const is just a value that can not be re-assigned, but can be calculated at runtime.

1699990567
copygirl!~koppeh@copy.mcft.net
comptime is for things that are computed at compile time.

1699990593
copygirl!~koppeh@copy.mcft.net
Is the confusion coming from things at the file scope being implicitly comptime?

1699990702
shankar!~shankar@user/shankar
copygirl thank you. Yes I am unable to understand where to use the comptime keyword and const keyword.

1699990775
copygirl!~koppeh@copy.mcft.net
You use either const or var to define your variables. Which one you choose controls whether you can change them after the initial assignment.

1699990801
copygirl!~koppeh@copy.mcft.net
So if you do `var foo = 0;` you can later set `foo += 1`.

1699990822
copygirl!~koppeh@copy.mcft.net
If you do `const foo = 0;` instead, doing `foo += 1` would be an error.

1699990907
copygirl!~koppeh@copy.mcft.net
`comptime` is used to make an expression run when you compile the program, rather than when it's running.

1699990966
shankar!~shankar@user/shankar
I think now I can somewhat understand it . thank u copygirl

1699990967
copygirl!~koppeh@copy.mcft.net
Welcome back.

1699990978
shankar!~shankar@user/shankar
thank you so much for the help

1699991019
copygirl!~koppeh@copy.mcft.net
Usually you don't have to worry about `comptime`. You'd use it when you have something you want to calculate beforehand, or if you want to include the contents of a file that you have, but users of the program wouldn't.

1699991027
copygirl!~koppeh@copy.mcft.net
It's also used in some meta-programming aspects.

1699991075
copygirl!~koppeh@copy.mcft.net
When dealing with types for example. Those only exist at comptime as far as I know.

1699991133
shankar!~shankar@user/shankar
Got it . At least I think I do . Thank you

1699991182
copygirl!~koppeh@copy.mcft.net
You can check the docs for some more explanation and examples: https://ziglang.org/documentation/master/#comptime

1699991288
shankar!~shankar@user/shankar
Actually I tried reading the docs before asking for you help since I couldn't grasp the concept there.¬†:P

1699991442
copygirl!~koppeh@copy.mcft.net
Fair.

1699991997
shankar!~shankar@user/shankar
copygirl comptime is used to run a function or a block of computation at compile time so we use comptime keyword for a variable so that we can run the function on that value during compilation ( such as validation ). Am I right ?

1699992018
shankar!~shankar@user/shankar
const can be derived from a var but comptime can't be .

1699992028
shankar!~shankar@user/shankar
did I get it right ?

1699992041
copygirl!~koppeh@copy.mcft.net
Unsure what you mean by derived but otherwise I think you got it.

1699992051
copygirl!~koppeh@copy.mcft.net
var and const are the same kind of keyword.

1699992060
copygirl!~koppeh@copy.mcft.net
They're for declaring variables.

1699992095
copygirl!~koppeh@copy.mcft.net
const is something you use to mark an expression as being evaluated at comptime.

1699992128
copygirl!~koppeh@copy.mcft.net
Or, in the case of parameters, requires the value passed in to be known at compile time (and thus calculated then, too, if it's more than just a simple value).

1699992140
shankar!~shankar@user/shankar
I am sorry my English is bad. It is not my first language

1699992155
copygirl!~koppeh@copy.mcft.net
Ah sorry I mistyped.

1699992169
copygirl!~koppeh@copy.mcft.net
comptime* is something to mark an expression as being evaluated at compile time

1699992211
copygirl!~koppeh@copy.mcft.net
The compiler is good enough to figure out that `5 + 9` is `14` at compile time but you can call functions such as getting the current time, too.

1699992239
copygirl!~koppeh@copy.mcft.net
Which, when you do it at compile time, means it will have the time when you compiled the program, rather than when you ran it.

1699992342
copygirl!~koppeh@copy.mcft.net
So for example `const time = comptime std.time.timestamp();`

1699992396
shankar!~shankar@user/shankar
I mean to say `var i: u8 = 10` and ¬†`i += 1` `const j: u8 = i` so here the evaluation of j is done at runtime

1699992423
copygirl!~koppeh@copy.mcft.net
Yes.

1699992491
shankar!~shankar@user/shankar
whereas `fn something_eql(comptime uppr: []const u8, str: []const u8)` here the value is required to be known at compilation stage itself.

1699992506
shankar!~shankar@user/shankar
Did I get it ?

1699992516
copygirl!~koppeh@copy.mcft.net
`uppr` is, yes.

1699992556
shankar!~shankar@user/shankar
Thanks a bunch now I understood the concept . u are wonderful copygirl

1699992569
copygirl!~koppeh@copy.mcft.net
And I think as you already understood, this can be used to inspect the value of `uppr` at compile time, and either do some setup steps for performance, or check the validity of the value, and give you an error at compile time.

1699992582
copygirl!~koppeh@copy.mcft.net
That's my line! You are wonderful!

1699992651
shankar!~shankar@user/shankar
yes yes I understood that üëç

