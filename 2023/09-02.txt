1693615355
freshcoffee!~fresh@user/freshcoffee
this is the way

1693629784
mountaingoat!~mountaing@user/mountaingoat
is this supposed to fail for 0.11.0? try std.testing.expectEqual(std.meta.Tuple(&[1]type{u32}), struct { u32 });

1693630602
torque!~tachyon@user/torque
you're probably running into the first incompatibility listed here: https://ziglang.org/download/0.11.0/release-notes.html#Generic-Function-Calls

1693630607
torque!~tachyon@user/torque
though it could be something else

1693630657
torque!~tachyon@user/torque
(specifically "type declarations are evaluated for every generic function call")

1693631013
mountaingoat!~mountaing@user/mountaingoat
hmm

1693691181
copygirl!~koppeh@copy.mcft.net
So about std.testing.expectActual.

1693691240
copygirl!~koppeh@copy.mcft.net
If I do `expectActual(3, slice.len)` I get a compile time error, because the inferred type is going to be a compile time integer, and it expects slice.len to also be compile time.

1693691274
copygirl!~koppeh@copy.mcft.net
The workaround(?) seems to be to swap the two arguments, but that doesn't seem like what I'm expected to do with this function, or is it?

1693691290
copygirl!~koppeh@copy.mcft.net
"expected" is what I expect the "actual" value to be, no?

1693691541
torque!~tachyon@user/torque
you mean `expectEqual`? the naming is somewhat confusing but I believe "expected" is the value you are placing the expectation on, and "actual" is the actual value you want it to be

1693691561
copygirl!~koppeh@copy.mcft.net
This is soooooo confusing.

1693691651
torque!~tachyon@user/torque
actually I think I have it backwards and the intended usage is for you to cast comptime ints to a specific type with @as

1693691652
copygirl!~koppeh@copy.mcft.net
Yeah I wrote it wrong twice, too.

1693691663
torque!~tachyon@user/torque
https://github.com/ziglang/zig/issues/4437 this is probably an interesting issue to look at

1693691780
torque!~tachyon@user/torque
(see also: this comment: https://github.com/ziglang/zig/issues/4437#issuecomment-1067142376)

1693692138
copygirl!~koppeh@copy.mcft.net
Thank you. Yeah the issue for me isn't the order, but that a compile time "expected" value doesn't work with a non-comptime actual value out of the box.

