1689731867
andrewrk!~andrewrk@mail.ziglang.org
it's going well. I will be making a ziglang.org/news/ post soon about the 0.11.0 release date

1689738283
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/news/0.11.0-postponed-again/

1689738804
torque!~tachyon@user/torque
since 0.11.1 is intended to be a bugfix release, I assume async et al are currently planned to target 0.12?

1689738847
andrewrk!~andrewrk@mail.ziglang.org
correct

1689738963
torque!~tachyon@user/torque
out of curiosity, do you think the reimplementation of async in stage 2 is likely to drive additional changes to e.g. the stdlib event loop apis and other async-related code?

1689739022
andrewrk!~andrewrk@mail.ziglang.org
that stuff has been begging for a rewrite

1689739029
andrewrk!~andrewrk@mail.ziglang.org
I could make a much better event loop now

1689739222
torque!~tachyon@user/torque
makes sense to me, fingers crossed for some cool stuff happening in 0.12. Having written a lot of async code in python, I have been interested in trying it out in a lower-level language for a while

1689741092
andrewrk!~andrewrk@mail.ziglang.org
0.11 brings a lot of good stuff, including many language changes such as multi-object for loops, inferred casting destination type, and a bunch more- I'll type up in the release notes

1689741135
andrewrk!~andrewrk@mail.ziglang.org
for 0.12 I think it is a realistic expectation that we will have incremental compilation & linking done by then as well as a non-llvm x86 backend, which means much, much faster compilation times

1689741179
plumeus!~plumeus@user/plumeus
0.12 sounds awesome

1689741258
andrewrk!~andrewrk@mail.ziglang.org
yeah Jakub almost has the ELF linker done

1689741266
andrewrk!~andrewrk@mail.ziglang.org
and Jacob almost has the x86 backend done :D

1689741330
plumeus!~plumeus@user/plumeus
Will 0.12 allow for bootstrapping with C and skipping a binary blob?

1689741341
plumeus!~plumeus@user/plumeus
Or is that a lot later?

1689741564
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/issues/16270 would allow for building from source with only a system C compiler, however it would still involve our zig1.wasm blob

1689741607
andrewrk!~andrewrk@mail.ziglang.org
the current plan for skipping a binary blob is to 1. write a spec, and 2. get popular enough that a third party makes an third party implementation of the language

1689744541
torque!~tachyon@user/torque
I've already migrated my small amount of code to 0.11 and was able to remove a nice number of workarounds I needed for 0.10/stage 1

1689744559
torque!~tachyon@user/torque
basically I've already spoiled myself on all the nice things from 0.11 :P

1689747060
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
Is this expected to cause a compile error complaining about unused arguments? I would have expected this to work: `std.debug.print("{0s}, {s}!", .{ "Hello", "world" })`

1689747226
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
I know it's odd to want to mix explicit and implicit arguments. I need to use an explicit argument to variably pad some text, and I need to use implicit arguments because I'm concatenating the arguments (i.e.: `std.debug.print("{s: >[0]} {s}", .{"^"} ++ args)`).

1689747991
torque!~tachyon@user/torque
since the implicit args start from 0, you're never using "world" in that print statement

1689748054
torque!~tachyon@user/torque
is there any reason you can't do `std.debug.print("{1s: >[0]} {2s}", .{"^"} ++ args)`

1689748088
torque!~tachyon@user/torque
or flip around your concatenation order and do `std.debug.print("{s: >[2]} {s}", args ++ .{"^"})`

1689749150
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
The issue is I wanted pass an arbitrary format specifier and args to this function. If I explicitly name `{2s}`, then the implementation detail of this function is exposed. I thought I tried the flipped order one already. Maybe I got that one wrong somehow.

1689749430
torque!~tachyon@user/torque
I'm a little confused. using "{} {}" is identical to using "{0} {1}" functionally. either way, the format will only accept two arguments and it will put the first one before the second one

1689749459
torque!~tachyon@user/torque
unless I've misunderstood something about how the formatting works

1689749710
torque!~tachyon@user/torque
so I'd claim that if the latter is leaking implementation details, so is the former, just less explicitly. but it's also highly likely I am misunderstanding something about your use case

1689750969
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
I think you're right about the former leaking... I don't think there's an elegant way to do this with a runtime known format width. I got something working with comptimePrint, doubly escaped format string, and `args.len + 1, args.len + 2`. I ended up scrapping the whole thing and only taking a single string as input to the function.

1689753424
dutchie!~dutchie@user/dutchie
ACTION waves at Levy[m]

