1691280004
andrewrk!~andrewrk@mail.ziglang.org
also you have a PR to the new builder code ðŸ‘€

1691280063
andrewrk!~andrewrk@mail.ziglang.org
I don't really understand why it needs to add *more* API surface using zig_llvm.cpp/zig_llvm.h tho

1691280135
hryx!~hryx@157-131-207-236.fiber.dynamic.sonic.net
Oh jacobly0, are you working on LLVM bitcode? I have a neglected project where I made some progress on that, in case you get any help/information out of it

1691280199
hryx!~hryx@157-131-207-236.fiber.dynamic.sonic.net
it may not be of much use because it was focused on parsing instead of outputting, but I did learn a lot about the extremely weird encoding

1691280276
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
yeah, that was not my builtin plan at all...

1691280331
andrewrk!~andrewrk@mail.ziglang.org
in that case I suggest to gently but firmly close the PR and explain to the extent that you can your plan forward. that contributor does decent work

1691280383
andrewrk!~andrewrk@mail.ziglang.org
look at this nasty issue that would be completely avoided by not linking llvm libraries: https://github.com/chimera-linux/cports/pull/263#issuecomment-1666601422

1691280478
hryx!~hryx@157-131-207-236.fiber.dynamic.sonic.net
very narsty

1691281017
hryx!~hryx@157-131-207-236.fiber.dynamic.sonic.net
jacobly0, not that you need it, but if you are working on LLVM bitcode please feel free to look through my old work on it. It's a strange format and the official spec has some holes/ambiguities. https://github.com/hryx/llvm-bitcode/tree/writer

1691281189
andrewrk!~andrewrk@mail.ziglang.org
oh nice, I don't think I looked at this yet

1691281218
andrewrk!~andrewrk@mail.ziglang.org
"It puts the license on its skin" xD

1691281333
hryx!~hryx@157-131-207-236.fiber.dynamic.sonic.net
it's hard not to be impulsive with commit messages sometimes :D

1691281575
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
the main issue is that I can't tell whether it's easier to implement builtins before or after this PR, it's certainly o faithfil extension of the current code

1691281588
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
*a faithful

1691284979
andrewrk!~andrewrk@mail.ziglang.org
jacobly0, ah. well it's up to you, but what I have done in situations like these is to merge the PR and then later revert it if I decide to go a different direction with it. but if you can invest the time in communicating your vision to antlilja then you might get some nice assistance on the project

1691285070
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
unfortunately, this is a "I won't know what it should be until I implement it" situation

1691285088
andrewrk!~andrewrk@mail.ziglang.org
understood

1691286609
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
I've decided that the temp api baggage is worth not having to deal with the old llvm backend logic

1691286666
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
and there's a decent chance I can come close to matching this temporary api

1691287061
andrewrk!~andrewrk@mail.ziglang.org
nice

1691295257
jeang3nie!~jeang3nie@cpe-65-185-175-181.neo.res.rr.com
I see that 11.0 is out. Is there going to be a FreeBSD binary? Or should I ping the port maintainer..

1691295489
nektro!~nektro@75-164-175-226.ptld.qwest.net
unlikely since it seems old releases dont have freebsd tarballs either than zig doesnt yet support cross compilation to freebsd

1691295537
nektro!~nektro@75-164-175-226.ptld.qwest.net
the latter might change soon-ish so keep your eye on #16590 for that

1691295656
jeang3nie!~jeang3nie@cpe-65-185-175-181.neo.res.rr.com
10.0 and earlier did have a FreeBSD binary.

1691295724
jeang3nie!~jeang3nie@cpe-65-185-175-181.neo.res.rr.com
I'll submit a patch on the ports tree in a few days if the maintainer doesn't get to it.

1691295728
nektro!~nektro@75-164-175-226.ptld.qwest.net
oh it just seems 0.10.1 missed it too

1691295760
nektro!~nektro@75-164-175-226.ptld.qwest.net
andrew does the tarballs so id wait for his response

1691295768
jeang3nie!~jeang3nie@cpe-65-185-175-181.neo.res.rr.com
Sure.

1691300018
andrewrk!~andrewrk@mail.ziglang.org
jeang3nie, apologies for the delay of the FreeBSD binary. I'll need to do that one manually by renting a VPS. please give me a few days to get around to it

1691300260
braewoods!~braewoods@user/braewoods
andrewrk, a local VM isn

1691300264
braewoods!~braewoods@user/braewoods
isn't an option?

1691300275
andrewrk!~andrewrk@mail.ziglang.org
sure, or that

1691300786
shamelessshill!~shamlesss@user/shamelessshill
Howdy folks. I was just checking the master documentation (revisiting zig after some time), and I found that the async section has been removed (for now?). What's with that?

1691301134
torque!~tachyon@user/torque
more work is necessary to support async in the self-hosted compiler

1691301141
torque!~tachyon@user/torque
it's currently slated for 0.12

1691301188
shamelessshill!~shamlesss@user/shamelessshill
Ah, I see, torque. Thanks.

1691301231
shamelessshill!~shamlesss@user/shamelessshill
I see that the documentation mentions that we can use a flag for now - but the examples have been unfortunately removed for now, So I presume that I can still use the old documentation (with the flag turned on) to play around with async?

1691301903
nektro!~nektro@75-164-175-226.ptld.qwest.net
not sure which docs you're viewing, but async isnt not in the current compiler so using it requires using 0.10.1 or waiting for it to land back in master

1691302796
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Repeating a question from earlier: How would one add a `format` function to an opaque type? That is, `*const MyType`. They didn't seem to be picked up.

1691304040
jcmoyer!~jcmoyer@user/jcmoyer
copygirl: a custom format function is picked up only if it's a member of the type being formatted, but you can't add members to a pointer type. In this case you need a wrapper type to provide the member function. std.fmt.Formatter can do this for you, example: https://github.com/ziglang/zig/blob/master/lib/std/fmt.zig#L1483-L1546

1691304266
copygirl!~koppeh@2001:41d0:701:1100::4fb1
So a struct that has a pointer as its member?

1691304311
jcmoyer!~jcmoyer@user/jcmoyer
Yes

1691304493
copygirl!~koppeh@2001:41d0:701:1100::4fb1
This is something that could be done though, right?

1691304521
copygirl!~koppeh@2001:41d0:701:1100::4fb1
If format receives a pointer type it could check the base type for the function that accepts the pointer type and use it, in theory?

1691304698
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Also I just thought of something dirty. If I just have the pointer as a field of that struct (may need to mark it extern), I could have it be returned by the extern functions directly. They return pointers but it'd match bitwise with the struct-containing-pointer .. right?

1691304713
copygirl!~koppeh@2001:41d0:701:1100::4fb1
struct containing the pointer*

1691304951
jcmoyer!~jcmoyer@user/jcmoyer
hmm, it looks like fmt already does look at the pointer's base type for a format function

1691304971
jcmoyer!~jcmoyer@user/jcmoyer
do you have an example of some code that didn't work?

1691305546
copygirl!~koppeh@2001:41d0:701:1100::4fb1
https://gist.github.com/copygirl/e29c38ae51494a03ff2af69e7d24354c

1691305715
jcmoyer!~jcmoyer@user/jcmoyer
ah ok so the problem here is `opaque{...}`, std.fmt.format will only look at methods on enums/unions/structs, maybe this is something that could be added

1691305729
jcmoyer!~jcmoyer@user/jcmoyer
in your case you'll still need the wrapper type

1691305733
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
C abi does not allow structs containing a single field and a value of that type to be interchanged

1691306640
copygirl!~koppeh@2001:41d0:701:1100::4fb1
What does "does not allow" mean, here?

1691306666
copygirl!~koppeh@2001:41d0:701:1100::4fb1
I can have extern functions that have mismatching types just fine.+

1691306726
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Would an extern struct with single pointer field be a different layout from a pointer?

1691309142
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
meaning it is not guaranteed to work everywhere

1691309373
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Yeah I'll just have a nested Ptr type that's opaque. This isn't public facing anyway.

1691309496
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
skimming through I found 6 or so targets where that's not valid

1691309523
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
they have the same layout, but different abi

