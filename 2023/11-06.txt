1699277000
lf94!~lf94@user/lf94
Question: is there a subset of Zig that could enable memory safety?

1699277033
lf94!~lf94@user/lf94
sorry: I mean completely memory safety like rust

1699277069
lf94!~lf94@user/lf94
Maybe a flag that could be added saying "pass by value only, no free'ing" etc

1699277076
lf94!~lf94@user/lf94
or something like that anyway

1699277957
ifreund!2940d10f8b@user/ifreund
lf94: it would be more useful to have a formally verified subset of zig

1699277973
lf94!~lf94@user/lf94
how come?

1699278004
ifreund!2940d10f8b@user/ifreund
and probably more feasible as well, a "memory safe" subset would have to effectively forbid pointers

1699278033
lf94!~lf94@user/lf94
right

1699278040
lf94!~lf94@user/lf94
but why couldnt that just be a compiler flag

1699278044
ifreund!2940d10f8b@user/ifreund
formal verification can give much stronger gaurantees than "memory safety"

1699278055
ifreund!2940d10f8b@user/ifreund
that's a very large "just"

1699278059
lf94!~lf94@user/lf94
gotchya

1699278070
lf94!~lf94@user/lf94
maybe you mean something else than what im understanding

1699278074
ifreund!2940d10f8b@user/ifreund
and it would have to be demonstrably useful to maintain, which I doubt

1699278079
lf94!~lf94@user/lf94
you mean a zig which allows for formally verifiable programs?

1699278096
ifreund!2940d10f8b@user/ifreund
I mean something akin to ada's spark

1699278100
lf94!~lf94@user/lf94
right right

1699278109
ifreund!2940d10f8b@user/ifreund
a subset that integrates well with formal verification tooling

1699278150
lf94!~lf94@user/lf94
surely there's a subset of practices people can at least refer to, to get close to memory safety?

1699278182
ifreund!2940d10f8b@user/ifreund
https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code

1699278185
ifreund!2940d10f8b@user/ifreund
this is a good start

1699278212
ifreund!2940d10f8b@user/ifreund
"memory safety" is just one way software can be broken, don't place focus on it at the expense of everything else

1699278243
lf94!~lf94@user/lf94
right right, this I understand

1699278249
lf94!~lf94@user/lf94
nice rules

1699278271
lf94!~lf94@user/lf94
I think avoiding allocation, pointers/refs, and using asserts would be "good enough"

1699278298
lf94!~lf94@user/lf94
surely this could be written as an external zig source code checker

1699278323
lf94!~lf94@user/lf94
./zig-safety-check ...

1699278324
ifreund!2940d10f8b@user/ifreund
lf94: a totally vaild approach used by some embedded software is to just never free memory

1699278337
ifreund!2940d10f8b@user/ifreund
you can't have a use-after-free if nothing gets free'd

1699278341
lf94!~lf94@user/lf94
right

1699278354
lf94!~lf94@user/lf94
maybe this is an excuse for me to try out zig's ast parsing code

1699278761
lf94!~lf94@user/lf94
man, feels like zig already follows a lot of this by default

1699278767
lf94!~lf94@user/lf94
https://web.archive.org/web/20111015064908/http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf

1699279281
lf94!~lf94@user/lf94
we are one static analyzer away from being able to flaunt zig is as safe as rust

1699280195
companion_cube!~simon@user/companion-cube
such a static analyzer cannot be as safe as rust, unless you give as much information as you give rust

1699280297
lf94!~lf94@user/lf94
if you disallow things like heap allocation or free i think you can

1699280309
lf94!~lf94@user/lf94
basically like we've been talking: a subset of zig

1699280394
companion_cube!~simon@user/companion-cube
you also need to be careful with pointers to stack

1699280434
companion_cube!~simon@user/companion-cube
something like SPARK could probably be done, but it's not just a button press like rustc

1699280450
companion_cube!~simon@user/companion-cube
(otoh you can get as far into proving as you want, up to full formal proofs)

1699280551
Earnestly!~earnest@user/earnestly
lf94: The approach spark takes here is to translate your source code into why3 and then use that format for whatever prover supports it

1699280574
Earnestly!~earnest@user/earnestly
lf94: https://why3.lri.fr/#provers

1699280579
lf94!~lf94@user/lf94
nice

1699280582
lf94!~lf94@user/lf94
someone get on it B)))

1699280617
Earnestly!~earnest@user/earnestly
zig doesn't have aspects so what usually ends up happening is dumping a bunch of stuff into comments

1699280669
Earnestly!~earnest@user/earnestly
(aspects here being used to express pre and post conditions along with possible invariants in the function signature itself)

1699280705
Earnestly!~earnest@user/earnestly
lf94: I.e. https://0x0.st/Ht2L.txt

1699280747
Earnestly!~earnest@user/earnestly
lf94: Or https://0x0.st/z0P-.txt

1699280772
lf94!~lf94@user/lf94
gotchya

1699280792
Earnestly!~earnest@user/earnestly
Afaik rust doesn't have this either, not that it matters all that much

1699280821
Earnestly!~earnest@user/earnestly
nasa still uses C (generated mostly from python), seems to be more successfull than esa

1699281271
companion_cube!~simon@user/companion-cube
there's stuff like https://github.com/xldenis/creusot for rust. But mostly, yeah, you write logic properties for Why3 to prove

1699281276
companion_cube!~simon@user/companion-cube
it's a ton of work though

1699281351
lf94!~lf94@user/lf94
I think I'd be happy with just a tool that checks for "memory unsafe operations"

1699282759
Earnestly!~earnest@user/earnestly
"just" doing quite a lot of work there

1699283445
lf94!~lf94@user/lf94
I'm using as shortform for "a smaller scope than the alternative"

