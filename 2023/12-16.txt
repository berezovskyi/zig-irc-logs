1702718837
tsujp!d2a86a1667@sourcehut/user/tsujp
hmm I cannot figure this out (yet?).. how can I have a comptime array where I fill it with data at given indices and all other indices are zeroed

1702724406
dutchie!~dutchie@user/dutchie
tsujp: easiest is probably to initialise it in a comptime block. https://gist.github.com/jshholland/0f938767d425f2623254d7bf53de2a29

1702731759
tsujp!d2a86a1667@sourcehut/user/tsujp
dutchie: ohh ok you dont need the comptime keyword on the block anymore(?)

1702733872
tsujp!d2a86a1667@sourcehut/user/tsujp
Is there a nice way to do partial application of function arguments?

1702760215
LACampbell!~lewis@granite-phrase.bnr.la
https://bpa.st/KJNA if I keep 'n' as a var, I get "local variable never mutated". If I make it a const, I get "cannot assign to constant".

1702761181
torque!~tachyon@user/torque
hmm, it doesn't compile as pasted in 0.11 either, with the error "error: cannot assign to constant". I think maybe the result of a cast cannot be on the lhs of an assignment

1702761215
torque!~tachyon@user/torque
could just be an oversight in the compiler, though, I'm not familiar with the details of the casting semantics in this situation

1702761315
torque!~tachyon@user/torque
`@as(*[16]u8, @ptrCast(&n))[0] = 127;` works in 0.11 

1702761392
torque!~tachyon@user/torque
I'd guess that the "local variable never mutated" is just erroring before the "cannot assign to const" so you just don't see that error when `n` is a var

1702761451
torque!~tachyon@user/torque
my guess is the issue is that the @bitcast creates a temporoary which is implicitly const so you can't assign to it and this is working as intended

1702766364
ifreund!2940d10f8b@user/ifreund
Thats correct afaik

