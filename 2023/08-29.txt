1693289065
mountaingoat!~mountaing@user/mountaingoat
voroskoi: thanks for the link. i'm not sure if it matches exactly what i'm doing, but more 0.11.0 build.zig examples help nonetheless

1693290127
mountaingoat!~mountaing@user/mountaingoat
is there a way to output successful tests (from build.zig `addTest`)? i don't trust that it's picking up all the nested tests using std.testing.refAllDecls(@This()) just yet

1693290362
torque!~tachyon@user/torque
if you run the compiled test executable directly, the output is better than when it gets run from `zig build`

1693290406
torque!~tachyon@user/torque
(also has the advantage that doesn't stop running once the latest version has been cached the way it does when run from `zig build`)

1693290652
mountaingoat!~mountaing@user/mountaingoat
torque: where is it located? i don't see one in zig-out and not sure about the contents of zig-cache

1693290715
torque!~tachyon@user/torque
by default it's an executable in zig-cache named 'test' but you can add it as an install artifact just like a normal executable and it will get put in zig-out

1693290739
torque!~tachyon@user/torque
normally there are several copies in the cache so it's slightly annoying to find the most recent one

1693290838
mountaingoat!~mountaing@user/mountaingoat
ah ok

1693290853
mountaingoat!~mountaing@user/mountaingoat
fortunately i think i just got things working

1693290893
mountaingoat!~mountaing@user/mountaingoat
but yeah, i see the All <N> tests passed. output from that executable in zig-cache torque 

1693303440
daurnimator!~daurnimat@vultr.daurnimator.com
zig really has been busy the last few months

1693303459
daurnimator!~daurnimat@vultr.daurnimator.com
I'm trying to catch up.... getting through a thousand or so emails a day.... 25000 to go :/

1693303895
ifreund!2940d10f8b@user/ifreund
daurnimator: yeah, things seem to have been slowly accelerating for a while. Unfortunately there's also a slight increase in noise that comes along with it but I don't think that can be avoided

1693303919
ifreund!2940d10f8b@user/ifreund
you might have input on this issue in particular: https://github.com/ziglang/zig/issues/16270

1693303926
ifreund!2940d10f8b@user/ifreund
fuck wrong link

1693303961
ifreund!2940d10f8b@user/ifreund
this is the one I meant: https://github.com/ziglang/zig/issues/14281

1693303998
daurnimator!~daurnimat@vultr.daurnimator.com
I already commented apparently :P

1693304041
daurnimator!~daurnimat@vultr.daurnimator.com
I haven't played with the new packaging system at all yet

1693304054
daurnimator!~daurnimat@vultr.daurnimator.com
So I need to get my hands dirty to really form an opinion

1693304096
daurnimator!~daurnimat@vultr.daurnimator.com
But the important thing is that I should be able to separate the fetching step from the building step from the testing step from the install step.

1693304150
daurnimator!~daurnimat@vultr.daurnimator.com
Going one further: there should be a "standard" system-wide (or at least zig executable relative) location to put dependencies. It could be content-addressable.

1693316116
daurnimator!~daurnimat@vultr.daurnimator.com
ifreund: I just had my first attempt at using the packaging system.... https://gitlab.archlinux.org/archlinux/packaging/packages/zls/-/merge_requests/1

1693316139
daurnimator!~daurnimat@vultr.daurnimator.com
It's not great; but it's not the worst.... need to figure out some nicer patterns

1693316239
daurnimator!~daurnimat@vultr.daurnimator.com
oh that link isn't public :/ try https://gitlab.archlinux.org/archlinux/packaging/packages/zls/-/commit/af062bdf3a681f87150f34757345547e2cb75660

1693319700
ifreund!2940d10f8b@user/ifreund
daurnimator: yeah, thats really not good, I wont be using the zig package manager in any of my projects until #14281 lands

1693319835
ifreund!2940d10f8b@user/ifreund
it is pretty cool that it works though

1693346034
andrewrk!~andrewrk@mail.ziglang.org
compiler perf roadmap: https://github.com/ziglang/zig/projects/6

1693348684
tree3!~tree3@202.7.239.8
Greetings. I had a thought just now: DWARF nominally allows unwinding the stack of programs with arbitrary control flow, but still expects a single Canonical Frame Address for each call frame. How does that jibe with Zig's coroutines, which have multiple frame addresses (and for that matter, multiple "previous" frames)? Do we have a solution? If

1693348685
tree3!~tree3@202.7.239.8
so, what? And is it with us or with the elusive v6? If not, is something planned?

