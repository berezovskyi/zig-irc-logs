1690158911
venomega!~root@srv16385-206152.vps.etecsa.cu
error compiling luajit https://termbin.com/175of

1690159086
andrewrk!~andrewrk@mail.ziglang.org
venomega, looks like missing -lunwind

1690159176
venomega!~root@srv16385-206152.vps.etecsa.cu
i just followed this steps https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html

1690159534
venomega!~root@srv16385-206152.vps.etecsa.cu
now it compiled

1690159563
venomega!~root@srv16385-206152.vps.etecsa.cu
thanks

1690159718
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
What's the difference between `std.RingBuffer` and `std.fifo.LinearFifo`?

1690160193
venomega!~root@srv16385-206152.vps.etecsa.cu
what is pthread? 

1690160255
venomega!~root@srv16385-206152.vps.etecsa.cu
zig building natively in x86_64-linux supports it, runing with -target x86_64-windows-gnu not

1690160309
andrewrk!~andrewrk@mail.ziglang.org
venomega, "posix threads". windows does not support posix

1690160315
jackdk!sid373013@cssa/jackdk
I put that question to a search engine, and it turned up several promising leads, including a wikipedia page and a linux manpages mirror

1690160394
venomega!~root@srv16385-206152.vps.etecsa.cu
then how, lets say raylib, could compile something for windows using cmake?

1690160448
venomega!~root@srv16385-206152.vps.etecsa.cu
if raylib has as dependencies pthead, or it check for ptheads only because it detects the host as unix?

1690160588
andrewrk!~andrewrk@mail.ziglang.org
it probably does conditional compilation and has different code for windows

1690160770
fengshaun!~fengshaun@71-17-154-190.regn.hsdb.sasknet.sk.ca
gcoakes, source is your best friend. It seems like RingBuffer is a buffer (container for bytes) with two heads - reader and writer. LinearFifo is generic over T type.

1690160868
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
I was more asking what's the difference in purpose, I guess. I understand Fifo is generic over the T. They both support reader behavior which implies they both are intended for use as a byte ring buffer.

1690160911
venomega!~root@srv16385-206152.vps.etecsa.cu
adriweb: was right,  -DCMAKE_SYSTEM_NAME=Windows do the magic with CC="zig cc -target x86_64-windows-gnu"

1690160919
venomega!~root@srv16385-206152.vps.etecsa.cu
andrewrk: 

1690160950
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
`std.RingBuffer` seems awkward to use. Was it's API designed around compatibility with some other implementation?

1690161100
andrewrk!~andrewrk@mail.ziglang.org
TIL about std.RingBuffer

1690161117
fengshaun!~fengshaun@71-17-154-190.regn.hsdb.sasknet.sk.ca
gcoakes, that's a good question, my understanding is that fifo is not expected to overwrite if it's full, but if you write past capacity in a ring buffer, it starts overwriting what you were going to read. RingBuffer uses FIFO as its 'logic'

1690161150
andrewrk!~andrewrk@mail.ziglang.org
looks like it was added as part of https://github.com/ziglang/zig/pull/14394

1690161157
fengshaun!~fengshaun@71-17-154-190.regn.hsdb.sasknet.sk.ca
I guess both have the same operational logic behind them with different expectations, performance, and uses.

1690161905
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
fengshaun, `LinearFifo` supports overwrite behavior with `writeAssumeCapacity`. The existence of both of them muddies the waters a bit when looking for the correct tool to use here. I'm going to go forward with `LinearFifo` since I have used it before and seems to have a more fleshed out API. I'm still not entirely certain what tradeoffs are being made.

1690187209
ifreund!2940d10f8b@user/ifreund
andrewrk: very nice, the new README looks great!

1690187283
ifreund!2940d10f8b@user/ifreund
yeah, we have too many different ring buffer implemetation in the standard library: https://github.com/ziglang/zig/pull/14394#discussion_r1112935891

1690187323
ifreund!2940d10f8b@user/ifreund
I perhaps std.RingBuffer should become private to the zstd implementation like the lzma ring buffer is 

1690218727
aquamo4k!~danny@209.181.253.66
what does &thing.* mean if thing is a struct?  searching for *. in docs and not finding it yet

1690218793
aquamo4k!~danny@209.181.253.66
is it globbing all members of struct and also dereferencing them?

1690219024
aquamo4k!~danny@209.181.253.66
well, thing is an instance of a thing struct I should say

1690219398
ifreund!2940d10f8b@user/ifreund
aquamo4k: .* is a pointer dereference

1690219418
ifreund!2940d10f8b@user/ifreund
&thing.* is redundant nonsense

1690219459
aquamo4k!~danny@209.181.253.66
k, cool.   I was doing ziglings - ex. 47 and on line 91 it was used by someone and I was like what is that?

1690219461
aquamo4k!~danny@209.181.253.66
thanks

