1695781279
res0nan_ce!~altanbaga@202.21.122.166
hi ::)

1695781281
res0nan_ce!~altanbaga@202.21.122.166
:0

1695781799
torque!~tachyon@user/torque
<andrewrk> I will say though, what I really want is a solution that stores all the issues metadata in the version control repository and allows contributors to edit that information locally and push along with commits

1695781801
torque!~tachyon@user/torque
https://github.com/MichaelMure/git-bug

1695782101
torque!~tachyon@user/torque
this has stuck in my head for a long time as something cool but I have never seriously used it.

1695782144
torque!~tachyon@user/torque
fossil unfortunately has a design of completely immutable history, which is a no-go for me because I love to rewrite history constantly

1695782349
torque!~tachyon@user/torque
in my opinion, monorepos are primarily for organizations who can't or won't bother to make stable APIs. if your interfaces are constantly breaking all of the time, updating and testing multiple external repositories potentially becomes signficant overhead

1695782405
torque!~tachyon@user/torque
does github actions let you run your downstream CI when an upstream change occurs? If there's no easy way to do that, then that could also be a factor

1695782446
torque!~tachyon@user/torque
I'm no fan of monorepos, but I think when you have a massive amount of code churn, distributed repositories are more difficult to manage

1695782586
torque!~tachyon@user/torque
<Earnestly> tagging is the only solution, all metadata/controlled language systems eventually realise this

1695782606
torque!~tachyon@user/torque
from a UI perspective it's better to have certain pieces of metadata that actually have concrete meanings

1695782624
torque!~tachyon@user/torque
even github issues have (multiple) open/closed states that are not expressed as tags

1695782707
torque!~tachyon@user/torque
oh I see git-bug was also linked earlier. this is what I get for reading the scrollback haphazardly

1695788191
Hammdist!~Hammdist@154.57.2.254
I am rather new to zig. I try to understand how this gic controller works: https://github.com/luickk/zig-gicv2/blob/b31f8d1b9fa36da92b84c2be40d9ddb2a0774381/gicv2.zig#L174 can someone explain this line to me? it's supposed to calculate the number of IRQs ... but I don't see how the number of IRQs can be determined from the intPerReg value alone ...

1695788192
Hammdist!~Hammdist@154.57.2.254
maybe there's some Zig-specific thing I'm missing

1695788363
freshcoffee!~fresh@user/freshcoffee
(64+32)/32

1695788419
freshcoffee!~fresh@user/freshcoffee
i'm assuming usize is 64-bit

1695788650
torque!~tachyon@user/torque
this looks like a hardware-specific calculation to me

1695788692
Hammdist!~Hammdist@154.57.2.254
hm, ok. it's probably wrong then. it shouldn't be dividing by intPerReg anyhow. I'll try to find other sources of information on gicv2

1695788899
torque!~tachyon@user/torque
yeah it looks like this would always compute to 3 on aarch64

1695788929
torque!~tachyon@user/torque
no clue how it was derived, but I'd say there's nothing zig-specific there

