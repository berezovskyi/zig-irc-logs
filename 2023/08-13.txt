1691886456
GreaseMonkey!greaser@user/greasemonkey
how good is the C backend? it turns out that you can at least make a hello world w/ djgpp and run it in DOS

1691886559
andrewrk!~andrewrk@mail.ziglang.org
GreaseMonkey, https://ziglang.org/download/0.11.0/release-notes.html#C-Backend

1691886767
GreaseMonkey!greaser@user/greasemonkey
"no longer considered experimental"? nice

1691942147
copygirl!~koppeh@2001:41d0:701:1100::4fb1
How does allocation work at runtime?

1691942153
copygirl!~koppeh@2001:41d0:701:1100::4fb1
eh, compile time*

1691942195
copygirl!~koppeh@2001:41d0:701:1100::4fb1
So like, I want to create a type at compile time, based on a slice of types.

1691942223
copygirl!~koppeh@2001:41d0:701:1100::4fb1
But I want to make sure the types passed in are unique and sorted.

1691942343
copygirl!~koppeh@2001:41d0:701:1100::4fb1
So I have a function called Union() that's supposed to deduplicate and sort the passed-in types, and then calls UnionImpl() which actually creates my custom union type.

1691942419
copygirl!~koppeh@2001:41d0:701:1100::4fb1
If I'm lucky, the slice I pass to that latter function doesn't have to live beyond the function call itself, right? The values will be "baked into" the type it creates.

1691942438
copygirl!~koppeh@2001:41d0:701:1100::4fb1
But I'm not sure about the specifics.

1691943392
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
Hey, how would I go about gracefully cancelling a `std.net.StreamServer.accept()` function call from a signal handler? As I understand it, `EINTR` needs to be handled from the return of the OS's accept call, but it doesn't seem to be handled by the wrapper function. The HTTP server tests which I'm looking at seem to only handle a single request

1691943392
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
then cleanup.

1691949502
copygirl!~koppeh@2001:41d0:701:1100::4fb1
https://gist.github.com/copygirl/6b55c6372fedf7478257994af6ea27d6

1691949577
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Is there any way to shorten the .from() calls without writing down the entire type? I know I can make a type alias but is there anything else?

1691949732
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Zig already has some features where it infers the type. It'd be neat if I could just do `.from()` since it should know the return value, so that could call a function on the inferred type?

1691949835
copygirl!~koppeh@2001:41d0:701:1100::4fb1
And I'm guessing type coercion is only for some built-in types.

1691952790
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Ah heck. @bitCast doesn't work on the types I want it to.

1691953496
copygirl!~koppeh@2001:41d0:701:1100::4fb1
https://gist.github.com/copygirl/47e1416480d2ac28707ffc9e5c675ea1

1691953508
copygirl!~koppeh@2001:41d0:701:1100::4fb1
Not sure if my ad-hoc union type would be possible like this.

1691958441
torque!~tachyon@user/torque
afaik the way to do this is to store type erased pointers to objects at runtime and then ptrcast them back, but since you're operating on pointers there are lifetime issues there

1691958510
torque!~tachyon@user/torque
though I would also argue that things are often better with less metaprogramming rather than more

1691958534
torque!~tachyon@user/torque
zig's error messages with highly parameterized types are currently not great

