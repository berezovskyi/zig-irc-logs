1699598594
grayhatter!~grayhatte@user/grayhatter
is there no abs in v0.11?

1699598684
torque!~tachyon@user/torque
there's @fabs

1699598700
torque!~tachyon@user/torque
and std.math.absInt

1699598703
grayhatter!~grayhatte@user/grayhatter
does it work on an int? (docs don't list int, but master docs do)

1699598723
grayhatter!~grayhatte@user/grayhatter
torque:that's what I was looking for... removed in master for @abs right?

1699598731
torque!~tachyon@user/torque
I think so, yeah

1699598739
grayhatter!~grayhatte@user/grayhatter
<3 thanks torque 

1699621234
ekaitz!~Ekaitz@94.73.32.196
hi people i have a problem with zig linker

1699621249
ekaitz!~Ekaitz@94.73.32.196
i have andrewrk 's sdl sample project

1699621267
ekaitz!~Ekaitz@94.73.32.196
and it builds great in Guix using a guix shell (nix-shell equivalent)

1699621289
ekaitz!~Ekaitz@94.73.32.196
but when building it with the guix build system i developed myself (it just runs zig build) it doesn't work

1699621302
ekaitz!~Ekaitz@94.73.32.196
it says it doesn't find some symbols

1699621319
ekaitz!~Ekaitz@94.73.32.196
that happens because it's trying link sdl statically

1699621348
ekaitz!~Ekaitz@94.73.32.196
what is the difference between one case and the other? why doesn't it just do the same thing?

1699621371
ekaitz!~Ekaitz@94.73.32.196
is it because of this? https://github.com/ziglang/zig/issues/14111

1699621607
ekaitz!~Ekaitz@94.73.32.196
so the question is, why is it linking statically in one case and dynamically in the other and how can I select that behavior

1699623217
ekaitz!~Ekaitz@94.73.32.196
i managed to trick the linker to find the .so file doing a very dirty hack (moving the .so to a directory where it's alone and pointing there with the search paths...) and it worked

1699623244
ekaitz!~Ekaitz@94.73.32.196
so... why is it prefering the .a in one case and the .so in the other?

1699624003
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
How would I create a const array or like slice of a tuple of two strings.

1699624008
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
That is a global I guess

1699624025
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
I apologize if I'm using the wrong terms I'm still trying to figure this out.

1699624332
ifreund!2940d10f8b@user/ifreund
_DOOM_: I'm really not sure what you want, could you be a bit more clear?

1699624341
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Sorry.

1699624358
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Let me think about this.

1699624394
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
I have an array of tuples of which contains two strings, string 1 maps to string 2.

1699624414
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
I want to be able to iterate over this array.

1699624451
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
So I was just doing something like const arr = .{ .{"str1", str2"}, .{"str1", "str2"},};

1699624479
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Actually one moment

1699624528
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Does the zig website have a web runtime thing like rust?

1699624588
ifreund!2940d10f8b@user/ifreund
you can use https://zig.godbolt.org/

1699624677
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Thank you

1699624768
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
https://zig.godbolt.org/z/PbYnxqr9a

1699624785
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
I'm not quite sure what I'm doing wrong with this.

1699624795
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
But I hope it's clear what I'm trying to accomplish

1699624942
sudw1n_!~pratik@user/sudw1n
hmm... comptime values are non-indexable, it says

1699625006
ifreund!2940d10f8b@user/ifreund
_DOOM_: https://zig.godbolt.org/z/Tz6WeKhsb

1699625051
ifreund!2940d10f8b@user/ifreund
without explicit type annotations the tuples will be comptime-only types

1699625062
sudw1n_!~pratik@user/sudw1n
so what, you have to manually specify the type?

1699625093
ifreund!2940d10f8b@user/ifreund
alternatively, iterate with an inline for loop

1699625134
ifreund!2940d10f8b@user/ifreund
sudw1n_: you need to manually specify enough type information that zig will infer the rest in the way you want I guess

1699625188
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
So what is the solution here?

1699625251
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
Cause everytime I try and specify the types as like []const u8 or *const []u8 it just gets angrier at me cause I'm not specific enough about the length and stuff of each string.

1699625270
ifreund!2940d10f8b@user/ifreund
_DOOM_: did you see the godbolt link I sent?

1699625299
ifreund!2940d10f8b@user/ifreund
it uses `struct { []const u8, []const u8 }` as the array element type

1699625303
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
oh

1699625310
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
I didn't let me check

1699625455
sudw1n_!~pratik@user/sudw1n
how do I make a package that I can do `@import("mypackage")`? I can't find anything about it in the documentation. Can someone point me out?

1699625509
sudw1n_!~pratik@user/sudw1n
I mean I know I can do `@import("mypackage.zig")` or something but I reckon packages are different than just files? am i misunderstood?

1699625576
_DOOM_!~DOOM@gateway/tor-sasl/doom/x-08543878
ifreund: Oh I believe that worked thank you!

1699626553
ifreund!2940d10f8b@user/ifreund
sudw1n_: you can manually pass --mod and --deps flags to `zig build-exe` or you can use the std.Build API in your build.zig to do it for you

1699626615
ifreund!2940d10f8b@user/ifreund
see e.g. std.Build.createModule() and std.Build.Step.Compile.addModule()

