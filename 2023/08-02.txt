1690934452
grayhatter!~grayhatte@user/grayhatter
before I create a file name strings.zig is there a cannon zig-way to do translations?

1690961162
ifreund!2940d10f8b@user/ifreund
andrewrk: I'm busy till this evening but I can test out #16058 (the -l fix PR) around 19:00 or 20:00 CET, thanks for working on it!

1690980683
bud!~bud@user/bud
hello zig people!

1690980751
bud!~bud@user/bud
I wanted to try using zig for building, i have experimented with i3wm, and got it working, but i have One question.

1690980814
bud!~bud@user/bud
i3 has a custom "config" parser thing built in perl. It parses a custom template language and outputs header files.

1690980914
bud!~bud@user/bud
and using addSystemCommand, works. but i was wondering if it is possible to add "sources" to this systemCommand, so it is ony executed if the source file has been changed.

1690980979
bud!~bud@user/bud
https://0x0.st/H2vj.txt <- this is what i got

1690981036
bud!~bud@user/bud
https://0x0.st/H2ve.txt <- equivalent from the original meson.build

1690981150
bud!~bud@user/bud
i am using zig 0.10.1

1690982851
bud!~bud@user/bud
also, the files that are generated by the perl script, is placed in the same directory as the perlscript (project root), and there are no option for "output". it would be nice if it was possible to set the "working directory" of the systemcommand.

1690985453
ifreund!2940d10f8b@user/ifreund
bud: this is not possible on 0.10.1 really but the soon to be  released 0.11.0 supports cache handling for Run steps well

1690985524
bud!~bud@user/bud
ifreund: ok, thanks. 

1690993338
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
hey folks :) I'm looking for a little clarification on packed vs extern structs. I was under the impression that extern structs were to be avoided if possible, but my desired behavior isn't present in packed -- actually, packed doesn't behave how I would expect it to at all.

1690993787
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
in particular, multiple fields of type f32 in a packed struct produce a struct with alignment 8, which leads to padding generated by the compiler for an odd number of floats. this can only be resolved by using extern.

1690994295
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
extern struct is exactly what you want

1690994364
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
A packed struct is an integer of a given size that follows that integer's abi

1690994401
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
so, few, if any, use cases for a float in a packed struct

1690994585
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
ah thank you. this seems a little unclear from the docs. I am essentially looking for a struct type with guaranteed field order and no padding

1690994603
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
you can guarantee no padding by making every field `align(1)`

1690994739
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
(contd) but the docs explicitly specify that extern 'should' only be used for C abi compat and struct/packed struct should cover every other use case

1690994780
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
it seems like there ought to be a way to define this kind of thing separately from the C association, or maybe it just needs to be clarified a little in the documentation

1690994809
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
jacobly: thank you -- that confirms what I saw in my testing but I wasn't sure if that behavior was reproducible generally

1690994816
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
these docs have not been rewritten since packed structs were changed, unfortunately

1690994840
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
ah gotcha

1690994955
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
everything the documentation says about packed structs, now applies only to extern structs with align(1) on every field

1690994991
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
oh sorry, I guess just the first few

1690995017
jacobly0!~jacob@2600:1f18:1fb:6300:1d52:d474:9e12:db33
but yeah, that's currently the expected way to byte align all fields

1690995089
acgaudette!~acgaudett@2603-7080-ce3e-5cbe-fa34-41ff-fe6a-62a1.res6.spectrum.com
whoa, alright. thanks, that's super helpful!

