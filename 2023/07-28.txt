1690512862
torque!~tachyon@user/torque
simply output less assembly

1690515319
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
How does the idea of a builtin testing RNG sound? Nothing terribly complex like AFL's genetic algorithm or anything. I'm just talking a special kind of test declaration which is run for N cycles and is given a per cycle seed/prng. N would be configurable in the test declaration. Known failing seeds are printed and hard coded into the test declaration.

1690515408
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
I'm already doing this in "userspace" right now except it is some boilerplate.

1690518505
torque!~tachyon@user/torque
I don't know that having a different test type would really help that much, since you'd still have to adapt the rng output to whatever you're trying to fuzz so I don't think you could eliminate most of the boilerplate anyway

1690518738
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
I have this right now: https://paste.sr.ht/~gcoakes/fa6dfad61585be03b8d506e341b2034bba67aff2 That's all from userspace.

1690518854
gcoakes!~gcoakes@r74-192-31-108.bcstcmta01.clsttx.tl.dh.suddenlink.net
I think raising it into the compiler would allow the build runner to give feedback of fuzzing progress, but I'm realizing now that it has the tradeoff that you can't retain resources across cycles. I just wrote a test which writes to an ArrayList and just clears the array while retaining the capacity.

1690519148
torque!~tachyon@user/torque
a more general solution would probably be something like parameterizable tests, which I think would be pretty interesting but the main thing you get there is just better integration with the test runner

1690528003
braewoods!~braewoods@user/braewoods
gcoakes, at first i thought you were suggesting RNG audio samples, and i was like, why? we can already do that with /dev/urandom. lol

