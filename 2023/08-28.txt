1693213907
piyush!~piyush@2401:4900:1c43:bbf0:d563:a647:1b7e:4838
Hello everyone~

1693228889
Franciman!~Franciman@mx1.fracta.dev
hello ziglers

1693228904
Franciman!~Franciman@mx1.fracta.dev
is there any plan to package a deb for having zig in debian?

1693229868
ifreund!2940d10f8b@user/ifreund
Franciman: that's up to the debian maintainers to decide, not the zig project

1693229901
Franciman!~Franciman@mx1.fracta.dev
oh so we already have a .deb?

1693229985
ifreund!2940d10f8b@user/ifreund
Franciman: the only one I know of is the unoffical build here: https://www.ne.jp/asahi/nickh/debian/

1693229992
Franciman!~Franciman@mx1.fracta.dev
thanks

1693229996
ifreund!2940d10f8b@user/ifreund
It's 0.10 though, not 0.11

1693230158
Franciman!~Franciman@mx1.fracta.dev
nice, i was kinda proficient in zig back in the 0.9 days

1693230163
Franciman!~Franciman@mx1.fracta.dev
i'm eager to test the news

1693230231
Franciman!~Franciman@mx1.fracta.dev
i was reading there is plans to ditch llvm

1693237334
ifreund!2940d10f8b@user/ifreund
Franciman: see https://github.com/ziglang/zig/issues/16270 for details

1693237348
Franciman!~Franciman@mx1.fracta.dev
ty

1693237388
ifreund!2940d10f8b@user/ifreund
Zig will still be able to output llvm bitcode in the long term, and llvm will still be required for optimized builds for a long time

1693237439
Franciman!~Franciman@mx1.fracta.dev
can i use it now without llvm?

1693237765
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: you can use the C backend today

1693243675
gpanders!be60a9b05a@user/gpanders
is there a way to test a failed allocator.resize, aside from creating a custom/specialized test allocator? FailingAllocator looks close to what I want but afaict it doesn't have a way to only fail on resize

1693250196
andrewrk!~andrewrk@mail.ziglang.org
gpanders, if you wanted to add functionality to FailingAllocator to make it support that use case, I would support that

1693250394
gpanders!be60a9b05a@user/gpanders
andrewrk: thanks, I'll look into it and send a PR

1693257376
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Hmm, there's a std.sort.binarySearch, any chance Zig would ever decide to add related upperBound + lowerBound functions as well? I found having an upper bound function useful for faster insertion into sorted lists. I wrote my own for now, adapted from binarySearch, but wasn't sure if this would be more broadly useful (C++ has std::upper_bound/lower_bound in <algorithm> FWIW). Is the usual process 

1693257376
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
for library requests to make a GH issue or PR, or are there more informal wishlists or stuff too?

1693257614
motiejus!~motiejus@88.223.107.21
Overkill: if you have code you are happy with (and it's of high-enough quality for stdlib), open a PR. Useful (this to me sounds useful, though I am not the one deciding) and high-quality contributions tend to get merged more often than not.

1693258381
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
Hmm okay, I'll keep this in mind! I'm still relatively new to Zig, but I think once I feel a bit more confident in the language, I could try to write tests and a PR then

1693258396
Overkill!~overkill9@24-212-253-115.cable.teksavvy.com
It's pretty much the same signature as binarySearch almost, except instead of returning a ?usize for the index of the value found, it returns a non-optional usize for the index of the upper/lower bound.

1693260456
grayhatter!~grayhatte@user/grayhatter
does `zig build lib-files-only` not work on master if the installed version is older? or is the `error: no field or member function named 'addDirectoryArg' in 'Build.Step.Run'` unrelated? (I'm trying to create and submit a commit for stdlib and would rather not build stages 1-3

1693261042
andrewrk!~andrewrk@mail.ziglang.org
grayhatter, you can download a binary from ziglang.org/download and edit the std lib to test it

1693261074
andrewrk!~andrewrk@mail.ziglang.org
mmm we don't ship all the tests though since some of them have large fixtures

1693261094
grayhatter!~grayhatte@user/grayhatter
Yeah, I've already just copied the lib dir directly into /usr

1693263459
NickH!~NickH@2405:6581:d4e0:1600:2b46:79a:7e70:a4bc
Franciman and ifreund Debian Maintainers genearlly don't have upload permissions Debian Developers do. Regarding Zig in Debian: I have made a package but it needs to be sponsored by a Debian Developer to actually get it into Debian.

1693263804
NickH!~NickH@2405:6581:d4e0:1600:2b46:79a:7e70:a4bc
See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1012286

1693263887
NickH!~NickH@2405:6581:d4e0:1600:2b46:79a:7e70:a4bc
The use of the WebAssembly binary in Zig 0.11.0 will make it even harder to get Zig into Debian.

1693264829
andrewrk!~andrewrk@mail.ziglang.org
that is an unfortunate but well-understood tradeoff 

1693264853
andrewrk!~andrewrk@mail.ziglang.org
what are the options to getting zig into debian, given the webassembly binary?

1693265132
andrewrk!~andrewrk@mail.ziglang.org
I see exactly 25 hops for the strategy of rebuilding with every zig1.wasm update

1693265395
andrewrk!~andrewrk@mail.ziglang.org
another strategy I can think of would be forking zig 0.10.1 to make it build with 0.9.1; forking 0.11.x to make it build with 0.10.x, etc.

1693265412
andrewrk!~andrewrk@mail.ziglang.org
mind you, I'm not volunteering to do any of this work

1693265568
andrewrk!~andrewrk@mail.ziglang.org
another strategy that ifreund mentioned would be creating simple zig interpreter in lua (or another scripting language that has a simple C implementation), which only capable of interpreting the zig compiler, and cheeses it where necessary, for example in the OS syscalls and maybe some complex functions

1693265644
andrewrk!~andrewrk@mail.ziglang.org
another strategy, arguably the simplest, would be just auditing the wasm binary and deciding that it can be trusted

1693266216
NickH!~NickH@2405:6581:d4e0:1600:2b46:79a:7e70:a4bc
The version without the WebAssembly binary has been looking for a sponsor for well over a year. I don't have currently have the time or energy to even consider what it would take to get Zig 0.11 packaged in a way that a DD would think complies with the DFSG.

1693266369
NickH!~NickH@2405:6581:d4e0:1600:2b46:79a:7e70:a4bc
Realisitcally, I think there needs to be an experienced DD with a strong interest in Zig and significant spare time if Zig is to make it into Debian.

1693266929
andrewrk!~andrewrk@mail.ziglang.org
I agree, and I think that will happen naturally as more useful user-facing applications are created using zig

1693267011
andrewrk!~andrewrk@mail.ziglang.org
given that debian had well over a year to package a dfsg-friendly source repository, and it didn't happen, you can understand why upstream has prioritized upstream development velocity over debian-packaging-friendliness

1693267043
andrewrk!~andrewrk@mail.ziglang.org
all things in due time

