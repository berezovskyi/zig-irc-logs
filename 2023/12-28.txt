1703722339
holst!~holst@holst.farscape.se
https://gist.github.com/hholst80/29a05647670d2d2ae38b4dd2a349ed48

1703722367
holst!~holst@holst.farscape.se
I could not find anything on http.protocol and ChatGPT is more creative than precise on the details

1703722495
andrewrk!~andrewrk@mail.ziglang.org
well you can look at src/main.zig where it creates an http client and then eventually uses it in a different file, although the logic is strewn about the place

1703722569
holst!~holst@holst.farscape.se
Well, that is the twist here. I am not trying to use a HTTP client. I am writing an HTTP server :)

1703722583
holst!~holst@holst.farscape.se
but I want to leverage on existing HTTP parsing in the std lib

1703722596
holst!~holst@holst.farscape.se
I saw that this was possible in V lang and I really liked it

1703722664
holst!~holst@holst.farscape.se
Now I am using this super small micro service as a test program to evaluate my approval rate for the "new" languages that might be suitable for backend development

1703722881
freshcoffee!~fresh@user/freshcoffee
perhaps std.http protocol is meant to work with std.http Server and Client connections, which btw have `fill` functions

1703723031
holst!~holst@holst.farscape.se
ok, so the "raw" TCP connection is not a suitable Connection? I thought the typing would suggest that rather than a trait missmatch

1703723561
andrewrk!~andrewrk@mail.ziglang.org
holst, oh, I'm still working on some of the package management stuff but here's an example of http client and server: https://github.com/andrewrk/StaticHttpFileServer/blob/main/test.zig

1703723619
andrewrk!~andrewrk@mail.ziglang.org
this is a pretty small repo if you want to poke around

1703727901
holst!~holst@holst.farscape.se
thanks I'll have a look tomorrow! :)

1703778784
twopoint718!sid19913@id-19913.tinside.irccloud.com
Are there any libraries for parsing? I'm looking at creating a gherkin parser https://cucumber.io/docs/gherkin/reference/ for testing.

1703789089
dy!sid3438@user/dy
Hello, what's the recommended path to using a newer-than-current-stable ZLS with the VSCode plugin?

1703789120
dy!sid3438@user/dy
(e.g. for a current development build)

1703789150
dy!sid3438@user/dy
(I'm okay with some breakage, just want to avoid any _major_ breakages that completely tank ZLS.)

1703789161
dy!sid3438@user/dy
(e.g. due to syntactic changes it can't handle)

1703795529
andrewrk!~andrewrk@mail.ziglang.org
hi dy - ZLS is a third party project and none of the devs hang out here. you might have better luck on the discord server where zls devs hang out

1703795540
andrewrk!~andrewrk@mail.ziglang.org
(you are of course welcome here but just probably won't get much help with zls specifically)

1703795621
dy!sid3438@user/dy
Noted! Was more asking here as I suspected it's a common enough task for many tinkering with the language. It doesn't seem to have been an issue yet so, maybe I just won't have to worry about it :).

1703796712
andrewrk!~andrewrk@mail.ziglang.org
personally I use vim for now

1703796736
andrewrk!~andrewrk@mail.ziglang.org
I will probably switch to an IDE once I personally start working on a compiler server integrated into the compiler

1703797187
dy!sid3438@user/dy
I tend to use some mix of <JetBrains IDE> + VSCode + (minimal config) nvim. One day I'll get comfortable enough in vim to use it more effectively... but I don't really have much motivation to trick it out, as I rely on stock vim being a predictable $EDITOR on remote systems for admin tasks.

1703797213
dy!sid3438@user/dy
As long as I have some form of "jump to definition" I'm mostly happy :). 

1703797244
dy!sid3438@user/dy
(But I do get a lot of mileage out of fancier IDE tooling on larger projects.)

1703797497
andrewrk!~andrewrk@mail.ziglang.org
I have some vague ideas for some advanced refactoring tools that rely on semantic analysis information

1703798053
ekaitz!~Ekaitz@94.73.32.196
andrewrk: you probably know this but you can still use the language server from vim

1703798057
ekaitz!~Ekaitz@94.73.32.196
from neovim at least

1703798083
andrewrk!~andrewrk@mail.ziglang.org
idk. I tried it once and found it to be less effective than token-based completion

1703798153
andrewrk!~andrewrk@mail.ziglang.org
ultimately a third party language server implementation will never be as good as something that I design and build directly into the compiler

1703798188
ekaitz!~Ekaitz@94.73.32.196
sure

1703798198
ekaitz!~Ekaitz@94.73.32.196
zig --launch-server

1703798200
ekaitz!~Ekaitz@94.73.32.196
:)

1703798229
ekaitz!~Ekaitz@94.73.32.196
i am a vim user also and I don't use language servers or anything like that, it's good as it is

1703799159
squeaktoy!~weechat@user/latex
anyone know what the following error means?

1703799161
squeaktoy!~weechat@user/latex
ld.lld: /lib/libdl.so is incompatible with elf64-x86-64

1703804111
dy!sid3438@user/dy
andrewrk: it's interesting to conceive of refactorings that are unique to a language which has comptime. 

1703804239
dy!sid3438@user/dy
At least in general, I find that the most useful refactorings in a given language are the ones that represent primitive operations over baked-in concepts (e.g. {Extract,Move}{Method,Class} in OO languages)

1703804335
dy!sid3438@user/dy
(oh, and can't forget Interface, aka Type!)

