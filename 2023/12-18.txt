1702906406
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
Hey folks, I just had a compiler build failure because I didn't have libzstd-dev installed, and wanted to make sure someone responsible updated the wiki and README where they list dependencies. Or maybe I did something wrong and shouldn't have needed to install libzstd-dev?

1702908485
leeward!~sask@cust-95-128-93-211.breedbanddelft.nl
And that's what happens when you give the compiler more RAM than your machine has. Sorry, if anyone replied to what I said I missed it.

1702923232
martin20`!~user@2601:406:4000:181b:c725:f1:d4d:3548
Hi, I believe the documentation is incorrect for @round: https://ziglang.org/documentation/master/#round

1702923261
martin20`!~user@2601:406:4000:181b:c725:f1:d4d:3548
It instead describes the behavior of @ceil, I think

1702923693
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
`@ceil` is not a rounding operation and is towards positive infinity, not away from zero.  The only issue I see is that `@trunc` is described as a rounding operation when it is not.

1702923794
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
Alternatively, the word "ties" could be added to disambiguate.

1702923834
martin20`!~user@2601:406:4000:181b:c725:f1:d4d:3548
jacobly, when I call @round(0.3), I get 0.0, but when I call @round(0.7), I get 1.0. If @round rounds "away from zero", shouldn't the result for both be 1.0?

1702923970
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
Specifically, it rounds ties away from zero.  You could describe `@round` as either a rounding operation (nearest integer) away from zero (ties behavior), or more specifically, "nearest integer ties away from zero".

1702924076
martin20`!~user@2601:406:4000:181b:c725:f1:d4d:3548
Okay, I guess I just misunderstood. Fwiw, the way that is currently worded is not clear to me.

1702924725
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
Actually, that's not even the rounding behavior anyway.

1702924745
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
Err, no I mistyped.

1702926295
Exa!exa@irc.moe
daurnimator: no, not dlsym, with linkSystemLibrary

1702926615
Exa!exa@irc.moe
since I asked 24 hours ago, I'll ask it again, I was looking for a way to have some code that can target multiple versions of a dynamically linked system library, meaning that the build system or some compile-time check could be used to use a different API.  it's no longer important but I'm still interested in knowing.  in C you would use the preprocessor to compare a version number if the library supports it

1702926884
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
The Zig build system has `addOptions` for generating a Zig module with comptime build options, which allows you to determine the version at build time and pass it to the program you are compiling.

1702928229
Exa!exa@irc.moe
jacobly: I'm reading the examples with options from https://ziglang.org/learn/build-system/  I'm not sure if:  1) I can get the version number of a library - running pkg-config in build.zig would make it less portable and  2) if I can compile code that conditonally check some options, I wonder if `addAnonymousModule` seems to help with this but I'm not finding where it is documented.

1702928404
jacobly!~jacob@ec2-3-210-217-213.compute-1.amazonaws.com
You use `b.addOptions` to create the step and then `exe.addOptions` to provide the compiled program with a module it can `@import` and conditionally check at comptime

