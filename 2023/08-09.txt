1691591990
ngrilly!~ngrilly@147.161.151.111
In container declarations, for example structs, why are fields terminated by commas (,) instead of semicolons (;)? The current syntax is a bit unusual, with fields terminated by commas, while constant and variable declarations are terminated by semicolons.

1691605186
nektro!~nektro@71-34-89-76.ptld.qwest.net
semicolons mean the end of a statement

1691605192
nektro!~nektro@71-34-89-76.ptld.qwest.net
commas delimit a list

1691611659
ifreund!2940d10f8b@user/ifreund
semicolons are also used to end some declarations

1691611670
ifreund!2940d10f8b@user/ifreund
and aren't used for all statements

1691619806
GreaseMonkey!greaser@user/greasemonkey
had a thought last night as i was supposed to be going to bed: y'know how there's Reader and Writer for []u8? there should be similar mechanisms for sending datagrams

1691619933
GreaseMonkey!greaser@user/greasemonkey
and maybe even parsing their bodies and stuff, but yeah, having a way to process whole messages would be very useful, not entirely sure how it would work though so i'll be scratching my head for a while on that one

1691621056
GreaseMonkey!greaser@user/greasemonkey
...limiting it to "datagrams with arbitrary contents" (that is, an iterator of `[]u8`s) would help keep the problem space manageable

1691622096
GreaseMonkey!greaser@user/greasemonkey
...on second thoughts, allowing one to specify the message type would make it more generally applicable to things

1691622131
GreaseMonkey!greaser@user/greasemonkey
(that is, the Zig type for each message to be presented at the interface)

1691623217
GreaseMonkey!greaser@user/greasemonkey
i do have a question for this: would it be better to use something like the Reader/Writer interface where you have a bunch of generic type arguments at the cost of having to typically pass them as `anytype`, or should it be more like the Allocator interface where you have an `*anyopaque` context and a vtable? i'm leaning in favour of the latter mostly, but the type used for a message would have to be part of the generic type signature

1691623228
GreaseMonkey!greaser@user/greasemonkey
in terms of names i'm thinking Sender/Receiver

