1702006823
torque!~tachyon@user/torque
ifreund, one of the main reasons is that these are deserialized from a (hand-written) file and adding additional levels of object nesting impacts the ergonomics rather negatively

1702006895
torque!~tachyon@user/torque
it's true that the deserialization layer could become responsible for this but then it's a weird special case that has to be handled separately

1702007146
torque!~tachyon@user/torque
however, I think such functionality would generally be useful. zig's compile time duck typing style largely replaces the need for a formal protocol/interface language feature, but while this can be applied to functions, it seems not having the same level of functionality for fields restricts a variety of opportunities to create more reusable code

1702030441
ifreund!2940d10f8b@user/ifreund
torque: pretty sure that this feature has been proposed and rejected in a few variants already

1702030463
ifreund!2940d10f8b@user/ifreund
I wouldn't estimated its chances of making it into the language very highly

1702063935
andrewrk!~andrewrk@mail.ziglang.org
I feel that it is the kind of thing that can save time short term but you pay a debt of complexity cost long term

1702063956
andrewrk!~andrewrk@mail.ziglang.org
in my opinion it is strictly better to have different types for different sets of fields

1702063997
andrewrk!~andrewrk@mail.ziglang.org
I was just struggling with this this week where it would have been tempting to dump the fields and methods of one type into another. but ultimately the solution was careful naming of things, and overall system complexity is reduced

