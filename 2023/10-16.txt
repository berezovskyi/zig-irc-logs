1697414442
LACampbell!~lewis@granite-phrase.bnr.la
I wasn't, but that did work at least. oh well let's code in vim for a bit

1697415282
torque!~tachyon@user/torque
most editors have a line wrapping key binding

1697415342
LACampbell!~lewis@granite-phrase.bnr.la
I tried on my usual, it would wrap lines but it wouldn't know to comment the new line

1697445153
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
hey does zig have something similar to rust's u32::wrapping_add_signed ?

1697445295
dutchie!~dutchie@user/dutchie
the +% operator does wrapping 2's complement addition

1697445454
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
yes but you can't add signed to unsigned, right?

1697445712
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
or at least, if you do, it casts the result to an unsigned type?

1697445718
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
*signed sorry

1697445759
dutchie!~dutchie@user/dutchie
I guess you'd have to cast things to and from i32

1697445778
dutchie!~dutchie@user/dutchie
the values will work out the same if you do the calculation either way

1697445815
dutchie!~dutchie@user/dutchie
with @bitCast

1697445869
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
mmm, is casting i32_min to u32 kosher

1697445870
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
?

1697446077
dutchie!~dutchie@user/dutchie
yeah it'll just be a single 1 bit followed by 31 zeros

1697446195
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
mmm 0u8 %- 1 == 0xff, iu8 - 1 == 0x80 

1697446209
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
right?

1697446243
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
i8 sorry

1697446385
dutchie!~dutchie@user/dutchie
what's iu8, is that supposed to be 0u8? bit representation of -1 is all ones anyway

1697446415
dutchie!~dutchie@user/dutchie
0i8 even. but still

1697446472
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
oh really? Ok, I thought it just set the sign bit then counted up like normal

1697446484
soupladler!~soupladle@ip2504fbe1.dynamic.kabel-deutschland.de
that actually makes way more sense

1697466562
lf94!~lf94@user/lf94
daily zig appreciation: zig is awesome

1697470281
motiejus!~motiejus@88.223.107.21
zig people too

1697470306
motiejus!~motiejus@88.223.107.21
this whole channel :)

1697470344
ifreund!2940d10f8b@user/ifreund
:)

1697472726
matthew-levan!~matthew@ip-50-5-118-215.dynamic.fuse.net
andrewrk: ty for the nasm tip.

1697475472
nektro!~nektro@71-34-68-44.ptld.qwest.net
soupladler, https://github.com/nektro/zig-extras/blob/master/src/lib.zig#L449

1697495234
GreaseMonkey!greaser@user/greasemonkey
adding to the Zig appreciation, kinda... currently having a go at porting Doom to Zig, one of the best things i managed to do was to merge all 6 column renderer functions (including the 2 that weren't written) into a single function

1697495262
GreaseMonkey!greaser@user/greasemonkey
i just eliminated the visplane limit a few mins ago

1697495407
GreaseMonkey!greaser@user/greasemonkey
but yeah, you have 3 main variants (normal, fuzz, and "translated" meaning going through an extra colour map for certain sprites) and then you have high-detail and low-detail, the latter was broken in the original source code release but i managed to make it work (columns needed to treat the globals as immutable and work on a copy, while spans needed to have their count computed *before* doubling the X offsets)

1697495432
GreaseMonkey!greaser@user/greasemonkey
and the 2 that weren't written were the low-detail ones that weren't of the "normal" type

