1700611338
ekaitz!~Ekaitz@94.73.32.196
andrewrk: issue posted, i'm always really bad reporting them so feel free to ask me anything you need in there

1700611399
ekaitz!~Ekaitz@94.73.32.196
andrewrk: also feel free to ping me here or anywhere else

1700611413
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, is there anything besides the build summary? it looks like there are a lot of missing lines from that output

1700611434
ekaitz!~Ekaitz@94.73.32.196
andrewrk: i added the ERROR.drv.gz file that contains all the output

1700611441
andrewrk!~andrewrk@mail.ziglang.org
I see, thank you

1700611455
ekaitz!~Ekaitz@94.73.32.196
nah, thank you :)

1700611526
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, gzip: stdin: unexpected end of file

1700611534
andrewrk!~andrewrk@mail.ziglang.org
tar: This does not look like a tar archive

1700611545
andrewrk!~andrewrk@mail.ziglang.org
can you just put the error text in the issue report?

1700611552
ekaitz!~Ekaitz@94.73.32.196
it's not a tar file

1700611553
ekaitz!~Ekaitz@94.73.32.196
just a gz

1700611562
ekaitz!~Ekaitz@94.73.32.196
but... i just opened it

1700611571
ekaitz!~Ekaitz@94.73.32.196
the error output is huge

1700611585
ekaitz!~Ekaitz@94.73.32.196
let me add it

1700611613
andrewrk!~andrewrk@mail.ziglang.org
I don't need to see any errors from guix, only from zig

1700611706
ekaitz!~Ekaitz@94.73.32.196
added those

1700611748
andrewrk!~andrewrk@mail.ziglang.org
that's good, thank you

1700611773
andrewrk!~andrewrk@mail.ziglang.org
this may actually be an upstream issue with llvm's libc++ on guix on macos

1700611794
ekaitz!~Ekaitz@94.73.32.196
yeah, it smelled like that

1700611824
andrewrk!~andrewrk@mail.ziglang.org
which makes it my problem rather than kubkon's :)

1700611850
ekaitz!~Ekaitz@94.73.32.196
i can try involve some guix maintainers too

1700611886
ekaitz!~Ekaitz@94.73.32.196
but i'm mostly the only person working on zig for guix

1700611898
andrewrk!~andrewrk@mail.ziglang.org
it might be contributor friendly. have a look at lib/libcxx/* and src/libcxx.zig

1700611972
ekaitz!~Ekaitz@94.73.32.196
okay, i will

1700612006
ekaitz!~Ekaitz@94.73.32.196
now I time to sleep, Europe timezones...

1700612017
ekaitz!~Ekaitz@94.73.32.196
thanks for the help

1700612025
andrewrk!~andrewrk@mail.ziglang.org
good night

1700612123
ekaitz!~Ekaitz@94.73.32.196
oh before I go, libcxx is part of llvm

1700612132
ekaitz!~Ekaitz@94.73.32.196
this is a patched version of upstream one?

1700612294
ekaitz!~Ekaitz@94.73.32.196
libcxx is already packaged in guix and we do some magic to avoid collisions

1700612339
andrewrk!~andrewrk@mail.ziglang.org
I added a comment just now. the next step is to figure out why that glibc directory is getting picked up as an include path

1700612406
ekaitz!~Ekaitz@94.73.32.196
yeah, it makes perfect sense

1700612417
ekaitz!~Ekaitz@94.73.32.196
i'll try to take a look tomorrow

1700663348
BratishkaErik!fd46852e72@user/BratishkaErik
hello, is it normal that building on different users but with same options re-does compilation and reuses global cache only, but not local cache?

1700663512
BratishkaErik!fd46852e72@user/BratishkaErik
ah sorry I got it

1700664001
BratishkaErik!fd46852e72@user/BratishkaErik
no, I'm not getting it, why does ZBS uses different catalogues for different users? All parameters are same...

1700664071
BratishkaErik!fd46852e72@user/BratishkaErik
ZIG_LOCAL_CACHE_DIR=/home/bratishkaerik/github.com/zig/zig-local-cache ZIG_GLOBAL_CACHE_DIR=/home/bratishkaerik/github.com/zig/zig-global-cache zig build -Dno-lib -Denable-llvm=false -Doptimize=Debug -Dno-langref -Dno-autodocs -Dforce-link-libc --prefix done_by_root --verbose --seed 1

1700664111
BratishkaErik!fd46852e72@user/BratishkaErik
same for user except prefix is done_by_user, but even when you omit in in both commands one of them still creates different folders for users insize zig-local-cache.

1700664423
BratishkaErik!fd46852e72@user/BratishkaErik
didn't found what could have mark user login or home or similar in hash.add* calls, can it be permissions problem? But root is runned after user, it definitely has all permissions to at least read cache from same dir.

1700667269
BratishkaErik!fd46852e72@user/BratishkaErik
stupid me, how did I forgot about this: it's zig default version detection from git. New git `safe.directory` policy disallows any user to access git information in not their repositories, so same build command from root did not succeed in extracting latest commit and formulating version while user-owner did.

1700667306
BratishkaErik!fd46852e72@user/BratishkaErik
then no wonders why it worked fine on my home PC but not notebook, I disabled this policy on PC system-wide when it was added.

1700667348
lf94!~lf94@user/lf94
andrewrk: RE: that post about references: how come zig doesn't just emit a warning for these cases?

1700667387
lf94!~lf94@user/lf94
I dunno what to call it, symmetric assignment? an assignment where the same variable is on both sides, for example, could fire the warning

1700667408
lf94!~lf94@user/lf94
"same variable access-assignment detected"

1700667463
lf94!~lf94@user/lf94
or hell maybe we can agree that should just simply never be possible

1700667483
lf94!~lf94@user/lf94
I dont know enough about those particular cases to be more strict about my thoughts / suggestions around it

1700668899
BratishkaErik!fd46852e72@user/BratishkaErik
andrewrk: I have some questions regarding this: 1) should https://github.com/ziglang/zig/blob/994e191643f60fa2c6d6e79377340f8fad1d711b/build.zig#L267-L269 contain std.debug.print statement with message smth like "Running `git describe` failed, fallbacking to predefined Zig version." instead of silently doing so as it does ATM?

1700669169
BratishkaErik!fd46852e72@user/BratishkaErik
2) I think it's nice usecase for possible `zig build --cache-flag` command that I wrote about in Discord, if user who runs other steps (f.i. `build test`) can't access information that was available to the first user during first step (f.i. `build install`). In this case root could have just run this command and get configured Zig version without needing to workaround safe.directory policy

1700676054
andrewrk!~andrewrk@mail.ziglang.org
BratishkaErik, I think that the build should fail if the git command fails (and the ZIG_VERSION option being explicitly provided means it won't even try to run git)

1700676083
andrewrk!~andrewrk@mail.ziglang.org
hmm there is one missing piece here however which is that tarballs (outside git) are supposed to work too

1700676140
BratishkaErik!fd46852e72@user/BratishkaErik
do you mean nightly source tarballs?

1700676156
andrewrk!~andrewrk@mail.ziglang.org
no, I mean for example https://ziglang.org/download/0.11.0/zig-0.11.0.tar.xz

1700676180
BratishkaErik!fd46852e72@user/BratishkaErik
but they already have hardcoded version don't they

1700676188
BratishkaErik!fd46852e72@user/BratishkaErik
in both cmakelists and build.zig

1700676235
andrewrk!~andrewrk@mail.ziglang.org
well, it still tries to execute git if you build from that tarball

1700676252
BratishkaErik!fd46852e72@user/BratishkaErik
ah got it

1700676256
andrewrk!~andrewrk@mail.ziglang.org
and it relies on the failure silently falling back to the hardcoded version

1700676283
BratishkaErik!fd46852e72@user/BratishkaErik
in PR i just verbosely output failure and continue

1700676289
BratishkaErik!fd46852e72@user/BratishkaErik
https://github.com/ziglang/zig/pull/18072

1700676323
BratishkaErik!fd46852e72@user/BratishkaErik
so it would print neccessary information and still continue to build fine

1700676461
andrewrk!~andrewrk@mail.ziglang.org
I don't think it should print a warning when you build from a source tarball

1700676476
andrewrk!~andrewrk@mail.ziglang.org
that's just offloading the problem to the user

1700676598
BratishkaErik!fd46852e72@user/BratishkaErik
why not? git describe when count is "else" does same thing below

1700676634
BratishkaErik!fd46852e72@user/BratishkaErik
https://github.com/ziglang/zig/blob/994e191643f60fa2c6d6e79377340f8fad1d711b/build.zig#L303-L306

1700677097
ekaitz!~Ekaitz@94.73.32.196
andrewrk: i made some research in our guix thingie and have some insights in the issue I opened yesterday

1700677110
ekaitz!~Ekaitz@94.73.32.196
andrewrk: but I have also a hanging test i'll report later

1700677152
ekaitz!~Ekaitz@94.73.32.196
oh one of the hanging tests finished after 2 hours

1700677188
andrewrk!~andrewrk@mail.ziglang.org
BratishkaErik, a warning indicates that an unusual situation has occurred, and requires the user's attention. building from the official source tarball is not an unusual situation. false positives cause users to ignore warnings in general.

1700677298
BratishkaErik!fd46852e72@user/BratishkaErik
IMHO it's not false positive, I don't think a lot of people want to see 0.12.0 in their build instead of real "0.12.0-dev.2+second_commit_ever_in_branch"

1700677372
BratishkaErik!fd46852e72@user/BratishkaErik
IDK if you think this is neccessary you can close the PR, my error was already solved in another way (not related to zig).

1700677439
BratishkaErik!fd46852e72@user/BratishkaErik
in this case I guess best place for this would be somewhere in github wiki? at the very least link to git documentation on this

1700677488
BratishkaErik!fd46852e72@user/BratishkaErik
Like #Troubleshooting_build_issues/Incorrect_version_configured and /Partially_recompiles_when_different_user

1700678182
andrewrk!~andrewrk@mail.ziglang.org
ekaitz, thanks, I'll take a look

1700678208
andrewrk!~andrewrk@mail.ziglang.org
BratishkaErik, only the 0.12.0 tag should have the 0.12.0 version

1700678242
andrewrk!~andrewrk@mail.ziglang.org
also note that 0.12.0 is not released yet

1700678507
ekaitz!~Ekaitz@94.73.32.196
andrewrk: it's basically that guix sets C_INCLUDE_PATH so it collides, but removing some parts of it make it work

1700678517
lf94!~lf94@user/lf94
andrewrk: can I just get a "no, bad idea" or "could be done"? :p

1700678523
ekaitz!~Ekaitz@94.73.32.196
i'm not sure if it's ok for zig to read that env variable also in the cross-case

1700678529
lf94!~lf94@user/lf94
Could be a nice little PR for someone. For me. :o

1700678560
andrewrk!~andrewrk@mail.ziglang.org
lf94, sorry, it was such a bad idea that I didn't even want to dignify it with a response

1700678568
lf94!~lf94@user/lf94
B)

1700678599
lf94!~lf94@user/lf94
Is there something I can read that explain why it's easy to reason about?

1700678664
andrewrk!~andrewrk@mail.ziglang.org
warnings don't solve anything. it's just the Cover-Your-Ass of programming

1700678681
andrewrk!~andrewrk@mail.ziglang.org
well, it can't be helped, we emitted a warning! the user should have known better!

1700678682
lf94!~lf94@user/lf94
Agreed. So why shouldnt it be an error?

1700678709
lf94!~lf94@user/lf94
(I dont want to eat your time: simply "it's complicated" is enough)

1700678735
lf94!~lf94@user/lf94
I trust your judgment on if it should even be an error

1700678747
andrewrk!~andrewrk@mail.ziglang.org
what exactly are you proposing to become an error or a warning?

1700678758
lf94!~lf94@user/lf94
When the same variable is used on both sides of an assignment

1700678801
lf94!~lf94@user/lf94
I guess that doesn't make sense in cases of +=, -=, etc

1700678804
lf94!~lf94@user/lf94
I'm thinking about with structures

1700678809
lf94!~lf94@user/lf94
er, references I guess

1700678811
andrewrk!~andrewrk@mail.ziglang.org
that is a form of alias detection that is both incomplete (does not catch all aliasing), and inaccurate (aliasing is OK sometimes)

1700678839
andrewrk!~andrewrk@mail.ziglang.org
you're not going to solve this problem with "why don't we just .....?" if it were that easy, it would have been done already

1700678846
lf94!~lf94@user/lf94
yea no, I understand that

1700678853
lf94!~lf94@user/lf94
I want to understand why it shouldnt be an error though

1700678873
lf94!~lf94@user/lf94
Surely this has been talked about out the ass

1700678912
andrewrk!~andrewrk@mail.ziglang.org
this proposal from 2018 suggests something like that: https://github.com/ziglang/zig/issues/1108

1700678922
lf94!~lf94@user/lf94
x = .{ .a = x.b, .b = x.a };

1700678939
lf94!~lf94@user/lf94
that's the particular case brought up in https://www.1a-insec.net/blog/25-zig-reference-semantics/ that I thought could be detected

1700678954
lf94!~lf94@user/lf94
ACTION reads 1108

1700678961
BratishkaErik!fd46852e72@user/BratishkaErik
>  only the 0.12.0 tag should have the 0.12.0 version | agree, but currently when building from nighly source tarballs it will be 0.12.0 without dev etc. suffix, while it's not even released yet. But my PR does not change this + closed it already.

1700679018
BratishkaErik!fd46852e72@user/BratishkaErik
oh btw do you plan to remove even more things from std :) is it that part of plan after package manager introduction?

1700679028
andrewrk!~andrewrk@mail.ziglang.org
hmm that's a good point, I think that's kind of a problem actually

1700679106
andrewrk!~andrewrk@mail.ziglang.org
maybe dev source tarballs should harcode the build revision metadata too

1700679125
lf94!~lf94@user/lf94
what does C do regarding this issue

1700679204
andrewrk!~andrewrk@mail.ziglang.org
arrays decay into footguns, everything else is copied

1700679229
andrewrk!~andrewrk@mail.ziglang.org
C does not support generics, however, so it does not have the problem to solve that zig has

1700679310
lf94!~lf94@user/lf94
Hm, looking at the first example from that site, the behavior honestly looks reasonable

1700679317
lf94!~lf94@user/lf94
It only looks unreasonable if you're coming from C semantics

1700679339
lf94!~lf94@user/lf94
It's really only the 2nd example that gets me (the swapping x.a and x.b)

1700679481
lf94!~lf94@user/lf94
Honestly it should be a bug if it doesn't first access those two values and assign them, and then assign x

1700679512
lf94!~lf94@user/lf94
tmp stack allocation for the struct, assignments, and then assign to x

1700679519
lf94!~lf94@user/lf94
pop stack

1700680080
lf94!~lf94@user/lf94
Watching the recommended video now

1700680089
lf94!~lf94@user/lf94
> removing temporary values

1700680097
lf94!~lf94@user/lf94
aye, that's the core issue then here lol.

1700680126
lf94!~lf94@user/lf94
there's gotta be some sort of detection for the swapping example. gotta be. 

1700680411
lf94!~lf94@user/lf94
damn. damn damn damn. what a problem.

1700680432
lf94!~lf94@user/lf94
I would say remove parameter reference opt by default. Make it opt-in

1700680463
lf94!~lf94@user/lf94
obviously Im not saying anything new, just giving my ephemeral vote

1700681027
gog!~ada@user/gog
are octal literals always 0o? 

1700681044
lf94!~lf94@user/lf94
result location semantics dont seem too bad

1700681052
lf94!~lf94@user/lf94
but the PRO seems bad

1700681246
BratishkaErik!fd46852e72@user/BratishkaErik
gog: yes. in decimal format leading zeroes are disallowed so no confusion here (before it simply ignored them, unlike other languages where it marks octal format).

1700681269
BratishkaErik!fd46852e72@user/BratishkaErik
https://github.com/ziglang/zig/pull/12443

1700681271
gog!~ada@user/gog
cool, cool. explicit is always better

1700681350
BratishkaErik!fd46852e72@user/BratishkaErik
totally agree

1700681403
BratishkaErik!fd46852e72@user/BratishkaErik
also that base prefix must be lowercase, helps when font (or your vision or air etc.) don't clearly distinguish big letter O and number 0 for example

1700681477
gog!~ada@user/gog
i use a sensible font for coding where O and 0 are very obviously different :)

1700681682
lf94!~lf94@user/lf94
Ah, even Spex says opt-in

1700681709
lf94!~lf94@user/lf94
Just make it opt-in for Release-Fast or something

1700687178
ekaitz!~Ekaitz@94.73.32.196
the riscv64 tests take for ever also for you or is it just me?

1700687192
ekaitz!~Ekaitz@94.73.32.196
more than 2 and a half hours with one CPU working

1700687389
andrewrk!~andrewrk@mail.ziglang.org
compiling them or running them? which optimization mode?

1700687483
andrewrk!~andrewrk@mail.ziglang.org
also which set of tests? std lib?

1700687502
andrewrk!~andrewrk@mail.ziglang.org
it does seem like llvm has some super linear big O happening for riscv64

1700688099
ekaitz!~Ekaitz@94.73.32.196
andrewrk: just zig build test

1700688104
ekaitz!~Ekaitz@94.73.32.196
in the zig codebase

1700688155
andrewrk!~andrewrk@mail.ziglang.org
2 hours is expected. it tests many target combinations

1700688171
andrewrk!~andrewrk@mail.ziglang.org
you can pass various flags to skip subsets of tests

1700688293
ekaitz!~Ekaitz@94.73.32.196
2 hours in that specific command i mean

1700688308
ekaitz!~Ekaitz@94.73.32.196
if that's ok good

1700688399
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
I am trying to follow this article https://andrewkelley.me/post/zig-stack-traces-kernel-panic-bare-bones-os.html for v0.11.0 and noticed that the interface for DWARF functions have changed, I am trying to convert a u8 to []u8, is there a way to do this? I am kind of new to the language, sorry if this is a stupid question

1700688551
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
Here is what I have tried so far:

1700688553
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
fn dwarfSectionFromSymbol(start: u8, end: u8) dwarf.DwarfInfo.Section {

1700688554
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
    const end_ptr: *u8 = @ptrFromInt(end);

1700688554
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
    const start_ptr: *u8 = @ptrFromInt(start);

1700688555
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
    const size: usize = end_ptr - start_ptr;

1700688555
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
    return dwarf.DwarfInfo.Section{

1700688556
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
        .data = @as([*]u8, start)[0..size],

1700688556
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
    };

1700688557
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
}

1700689558
torque!~tachyon@user/torque
is that code giving you an error when you try to compile it or otherwise not working?

1700690857
andrewrk!~andrewrk@mail.ziglang.org
aayushsharma889, I was just looking into this recently. give me some time and I should be able to link you to an issue to follow

1700691946
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
ok i went far enough and made it compile, i am now getting a runtime panic: `!!!!Panic!!!!!!: attempt to unwrap error: EndOfStream`

1700691946
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
this is the code that compiles: https://paste.ofcode.org/f8vYakr6jDBeNgPGvgxfQG

1700691947
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
let me know if this is not a right way to paste longer code snippets

1700691985
aayushsharma889!~aayushsha@p200300cfe745fd65f08fac767c5b5d05.dip0.t-ipconnect.de
I know the panic happens on ` try dwarf.openDwarfDebugInfo(&di, kernel_panic_allocator);`

