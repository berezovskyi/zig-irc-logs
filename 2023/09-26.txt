1695686734
braewoods__!~braewoods@user/braewoods
fengshaun, ok. most people just want output thouugh.

1695689003
torque!~tachyon@user/torque
I believe mach also has an audio output library now but I couldn't tell you how functional it is

1695689065
torque!~tachyon@user/torque
https://github.com/hexops/mach-sysaudio

1695689116
torque!~tachyon@user/torque
^ fengshaun

1695689123
torque!~tachyon@user/torque
claims to be input and output

1695695460
fengshaun!~fengshaun@71-17-154-190.regn.hsdb.sasknet.sk.ca
torque, nice, thanks! it does do recording as well!

1695695474
fengshaun!~fengshaun@71-17-154-190.regn.hsdb.sasknet.sk.ca
this would be good too see how it uses WASAPI on windows

1695695496
fengshaun!~fengshaun@71-17-154-190.regn.hsdb.sasknet.sk.ca
although mach.sysaudio itself is what I was looking for

1695695498
fengshaun!~fengshaun@71-17-154-190.regn.hsdb.sasknet.sk.ca
thanks! ^_^

1695701903
daurnimator!~daurnimat@vultr.daurnimator.com
GreaseMonkey: win32 the bad bits are all graphical

1695732884
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
is multiple capture with "if" statements possible? For example, `if(var_1, var_2) |valid_var_1, valid_var_2| { _ = valid_var_1; _ = valid_var_2; }`

1695732965
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
I tried it, and it didn't work, but I figured maybe I have the syntax slightly wrong or something.

1695737333
lux0r!~lux0r@65.56.68.34.bc.googleusercontent.com
wouldn't that break the semantics of all 'if's being expressions not statements

1695739274
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
lux0r, I don't see how. That syntax would be related to the condition and the capture portions of "if", but the expression portion would be unaffected, right?  

1695739309
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
Perhaps the blk: { break :blk <value>; } could be used

1695739375
lux0r!~lux0r@65.56.68.34.bc.googleusercontent.com
martin2020: yes that's a fair point.

1695739387
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
Or, ignoring captures: var one_added = if(nullable_1, nullable_2) |valid_1, _| valid_1 + 1;

1695740269
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
If my github account wasn't randomly blocking me again, I would make a proposal \o/

1695740353
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
Is there any word about Zig moving to sourcehut? That platform seems a lot better. andrewrk is even quoted on their homepage, so I guess some Zig stuff is done there?

1695740970
freshcoffee!~fresh@user/freshcoffee
martin2020: here's a couple of patterns for multi-optionals

1695740972
freshcoffee!~fresh@user/freshcoffee
https://gist.github.com/mikdusan/b61cab3a4e851be3260ec5bed2b8d822

1695741004
torque!~tachyon@user/torque
I think sourcehut hosts zig mailing lists and at one point some BSD CI runners. iirc the CI jobs ended up taking too many resources and were shut down

1695741072
torque!~tachyon@user/torque
sourcehut is not a terribly mature platform and lacks tools for managing an organization in particular, so I think it's unlikely that a large project like zig would move there

1695741117
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
freshcoffee, thanks!

1695741583
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
torque, yes, when compared with github, sourcehut has had far less development time put into it, so in that sense, sourcehut is less mature. However, github has been constantly broken the past several times I have tried to use it, so there's that.

1695741667
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
I am curious what sourcehut does for organizational management, like you are referring to. Sourcehut seems comparably complex to Zig organizationally, and sourcehut uses sourcehut for its own development

1695741756
dutchie!~dutchie@user/dutchie
from what I know organisations are planned to have a ^foo prefix rather than ~user, not sure what else has been spec'ed out other than that

1695742068
torque!~tachyon@user/torque
all of the sourcehut projects are under drew devault's account

1695742139
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
Oh, I see. Repositories owned by organizations. That makes sense. I know that Forgejo/Codeberg supports that. Cool that sourcehut has it planned. Anyway, I hope Zig can make some kind of switch eventually. GitHub seems to be getting worse and worse in terms of anti-features.

1695742214
torque!~tachyon@user/torque
while I agree about github (recently set up my own gitea instance), there are a lot of platform lockin factors that make it hard/unappealing to migrate

1695742419
freshcoffee!~fresh@user/freshcoffee
patches over email. no thanks

1695742702
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
freshcoffee: Haha, yes, I could see that being a pain. I have done very little development that way, but unless I am mistaken, Linux does it, so I guess it is possible for complex projects.

1695742755
martin2020!~martin@2603:3015:9ea:8100:4e49:c73c:d4a2:9e29
I'll come back with a better opinion after I have more experience with it :)

1695753716
andrewrk!~andrewrk@mail.ziglang.org
I tried sourcehut a fair amount, found it to be unsatisfactory

1695753751
andrewrk!~andrewrk@mail.ziglang.org
github is giving us a lot right now, including an easy way for people and organizations to donate money, and self-hosted CI runners

1695753787
andrewrk!~andrewrk@mail.ziglang.org
I have no doubt that one day zig will need to migrate away as microsoft tries to squeeze too much value out of github, however, it would be foolish to migrate away right now

1695754009
blueagain!~blueagain@user/blueagain
andrewrk: if you had to migrate now, what would be your best alternative to GH? self-hosting? any recommendation?

1695754048
andrewrk!~andrewrk@mail.ziglang.org
wrong person to ask. I've been happily using github for over a decade

1695754056
blueagain!~blueagain@user/blueagain
ah... makes sense

1695754097
andrewrk!~andrewrk@mail.ziglang.org
I will say though, what I really want is a solution that stores all the issues metadata in the version control repository and allows contributors to edit that information locally and push along with commits

1695754110
blueagain!~blueagain@user/blueagain
one pain point I have with GH, I don't think that's relevant for zig at least now, is its abysmal handling of monorepos (or lack thereof)

1695754116
andrewrk!~andrewrk@mail.ziglang.org
someone pointed me towards the fossil project which does something like this, but IMO it looks kinda bad

1695754143
blueagain!~blueagain@user/blueagain
it would be nice to have issues per package, release per package... unfortunately no support for that.

1695754165
rockorager!d72cfa7d05@2604:bf00:561:2000::3ff
andrewrk: 'notmuch' has a really cool solution but requires email for issue reporting

1695754172
andrewrk!~andrewrk@mail.ziglang.org
personally I think git monorepos are worse than using one repo per project

1695754177
rockorager!d72cfa7d05@2604:bf00:561:2000::3ff
https://notmuchmail.org/nmbug/

1695754205
andrewrk!~andrewrk@mail.ziglang.org
make up your mind, you know? is it one project, or multiple projects?

1695754241
blueagain!~blueagain@user/blueagain
andrewrk: ya... they're very common in JS-space. most of the bigger projects are monorepo. tools like npm/yarn/pnpm also support that, managing inner dependencies rather easily

1695754262
blueagain!~blueagain@user/blueagain
not saying it's relevant to zig, but it's somewhat of a standard by now in JS

1695754263
rockorager!d72cfa7d05@2604:bf00:561:2000::3ff
it's a dump of notmuch tags applied to emails, and since everyone has the same emails from the mailing list you can apply them to your local mailstore....I think it's awesome but obviously requires very specific tooling, offline email, etc.

1695754263
lux0r!~lux0r@65.56.68.34.bc.googleusercontent.com
depends on if you see a repo as representating a project or project component, it's often the latter I would say

1695754277
andrewrk!~andrewrk@mail.ziglang.org
monorepos are a standard in js? no, it's completely the opposite

1695754289
andrewrk!~andrewrk@mail.ziglang.org
js package managers make it easy to have one repo per project

1695754303
blueagain!~blueagain@user/blueagain
svelte, react... just to name a few.

1695754314
andrewrk!~andrewrk@mail.ziglang.org
lemme see this

1695754337
nektro!~nektro@75-164-190-81.ptld.qwest.net
https://github.com/facebook/react/tree/main/packages

1695754356
nektro!~nektro@75-164-190-81.ptld.qwest.net
https://github.com/babel/babel/tree/main/packages

1695754357
andrewrk!~andrewrk@mail.ziglang.org
and then they also have a package.json? wtf

1695754382
nektro!~nektro@75-164-190-81.ptld.qwest.net
https://github.com/eslint/eslint/tree/main/packages

1695754385
blueagain!~blueagain@user/blueagain
https://github.com/sveltejs/kit/tree/master/packages

1695754418
nektro!~nektro@75-164-190-81.ptld.qwest.net
its not standard per-se but the big name projects definitely use monorepo tooling

1695754428
blueagain!~blueagain@user/blueagain
ya

1695754447
andrewrk!~andrewrk@mail.ziglang.org
why do they do that? they already are using a package manager for some dependencies

1695754463
blueagain!~blueagain@user/blueagain
https://github.com/vuejs/vue/tree/main/packages

1695754493
andrewrk!~andrewrk@mail.ziglang.org
s/some/most/

1695754496
blueagain!~blueagain@user/blueagain
andrewrk: well, to manage inner dependencies mostly, and also other perks like having one eslint config at the monorepo root, so enforcing consistent styling, etc.

1695754536
andrewrk!~andrewrk@mail.ziglang.org
well. that's not how I would do it

1695754616
blueagain!~blueagain@user/blueagain
the consensus right now seems to be yarn/pnpm to manage workspaces, so monorepos

1695754629
blueagain!~blueagain@user/blueagain
I think pnpm is gaining ground...

1695754696
nektro!~nektro@75-164-190-81.ptld.qwest.net
even big rust projects do it with cargo, although its a little less obvious to pick up on

1695754710
blueagain!~blueagain@user/blueagain
so my pain point with that, as concerns GH, is that those bigger repos end up with thousands of issues. I think it would help the overview if the issues were at least assigned to one (or more, if relevant) packages

1695754715
lux0r!~lux0r@65.56.68.34.bc.googleusercontent.com
I did a contract at a large fintech that had a Go monorepo containing over 700 microservices; at that scale monorepo is really the only options, meant I could checkout one repo and test and deploy multiple services together

1695754726
nektro!~nektro@75-164-190-81.ptld.qwest.net
go's architecture makes it so that nearly every folder in a repo is a module that can be independently depended on

1695754731
lux0r!~lux0r@65.56.68.34.bc.googleusercontent.com
the only downside is gopls had a memory leak and the 1.5 million lines of code kept crashing it

1695754774
andrewrk!~andrewrk@mail.ziglang.org
testing and deploying multiple services together defeats the point of having separate services, the point is that they are not dependent on each other in exactly that manner

1695754800
nektro!~nektro@75-164-190-81.ptld.qwest.net
yeah the value of a single checkout and being able to make cross-tree changes frictionlessly is unbeatable

1695754881
blueagain!~blueagain@user/blueagain
andrewrk: so to give an example, svelte has those adapters that help you deploy to different systems (vercel, netlify, etc.). On the one hand, it makes sense to have those adapters as separate packages, but on the other hand, it makes sense to manage them together with core, so that you update everything together when a new core release comes out that possibly breaks API.

1695754901
andrewrk!~andrewrk@mail.ziglang.org
why does it make sense to have them as separate packages?

1695754917
andrewrk!~andrewrk@mail.ziglang.org
because the users of the packages may only depend on a subset of them?

1695754922
blueagain!~blueagain@user/blueagain
because they are optional, you usually take svelte core + only one adapter

1695754924
blueagain!~blueagain@user/blueagain
yes

1695754934
andrewrk!~andrewrk@mail.ziglang.org
I see

1695754967
andrewrk!~andrewrk@mail.ziglang.org
ok so that seems fine to me, but why would this even be considered a "monorepo"? it seems like having github issues apply to all the plugins is exactly what you want

1695755027
blueagain!~blueagain@user/blueagain
you might just have a bug in one adapter, and you'd need to have some way to filter by that. say if you have one person who's working on that

1695755052
blueagain!~blueagain@user/blueagain
currently you'd do it with labels probably, but I think that obscures labels by having "real" and "package" labels

1695755055
nektro!~nektro@75-164-190-81.ptld.qwest.net
and labels and assigning do that great

1695755055
blueagain!~blueagain@user/blueagain
it feels hacky to me.

1695755104
blueagain!~blueagain@user/blueagain
well, not saying my pain points are universal, nektro :)

1695755379
nektro!~nektro@75-164-190-81.ptld.qwest.net
older systems like bugzilla allow you to define custom fields and a popular one was component, which i think would match exactly to what you're describing

1695755396
blueagain!~blueagain@user/blueagain
yeah.. that's be nice.

1695755403
blueagain!~blueagain@user/blueagain
that'd*

1695755421
nektro!~nektro@75-164-190-81.ptld.qwest.net
ive gone back and forth on the idea and i see why github went with labels only because on the backend its the exact same mechanism

1695755449
nektro!~nektro@75-164-190-81.ptld.qwest.net
gitlab has a nice enhancement on it called 'scoped labels' that i plan on eventually implementing in my git server

1695755452
Earnestly!~earnest@user/earnestly
tagging is the only solution, all metadata/controlled language systems eventually realise this

1695755557
blueagain!~blueagain@user/blueagain
Earnestly: I would argue that "bug" or "wontfix" are something else than "core" or "plugin-1"... but I also get your point. Which is also GH's point.

1695755621
nektro!~nektro@75-164-190-81.ptld.qwest.net
organizing them by color is popular route

1695755650
nektro!~nektro@75-164-190-81.ptld.qwest.net
my git server does have a separate status column which has been nice

1695755652
Earnestly!~earnest@user/earnestly
They can be all the same and there can be heirarchies within tag sets, but in the end it's the only thing that really works (for extremely narrow collections of data things like iptc/prism/dc can work)

1695755700
Earnestly!~earnest@user/earnestly
The only thing I would add myself is a reason field for why the tag was added, that is usually hidden, but can be queried at some later date

1695755811
nektro!~nektro@75-164-190-81.ptld.qwest.net
whats a situation where it's non-obvious?

1695755917
blueagain!~blueagain@user/blueagain
I also don't know if it's possible together on GH, but it could be interesting to limit push/merge access to some packages...

1695755924
blueagain!~blueagain@user/blueagain
s/together/today/

1695755934
Earnestly!~earnest@user/earnestly
In cases where tags are controlled vocab and a tag doesn't quite seem to match any of the object's attributes, it can sometimes be useful to remember why it was added

1695755962
Earnestly!~earnest@user/earnestly
But that's usually in ridiculously large data collections with hundreds of user-defined tags per object

1695755968
blueagain!~blueagain@user/blueagain
especially if you have teams working on some packages. some of those monorepos get quite big

1695756030
nektro!~nektro@75-164-190-81.ptld.qwest.net
blueagain, what do u have in mind beyond a human denying a PR if its in a relevant folder (CODEOWNERS can help with this)

1695756066
blueagain!~blueagain@user/blueagain
nektro: I guess just the ability to see what PRs are relevant to "your" package

1695756084
nektro!~nektro@75-164-190-81.ptld.qwest.net
gotcha

1695756145
nektro!~nektro@75-164-190-81.ptld.qwest.net
i could see the search hooking into CODEOWNERS and having a owner:me mechanism being useful

1695756162
Earnestly!~earnest@user/earnestly
andrewrk: Oh, reading what you did write, that is pretty much what fossil does (storing bug reports in the project). There's also https://github.com/MichaelMure/git-bug and https://github.com/dspinellis/git-issue and probably more like it

1695756198
Earnestly!~earnest@user/earnestly
It does seem odd that github wouldn't repurpose git mechanisms for this purpose, same for the wiki pages (which is also what fossil does)

1695756223
nektro!~nektro@75-164-190-81.ptld.qwest.net
github wikis are git repos

1695756225
andrewrk!~andrewrk@mail.ziglang.org
it's not odd, it's an intentional business strategy called "vendor lock-in"

1695756246
Earnestly!~earnest@user/earnestly
lol, fair enough

1695756258
blueagain!~blueagain@user/blueagain
nektro: yeah, that would indeed be nice

1695756261
Earnestly!~earnest@user/earnestly
I don't doubt it

1695756274
nektro!~nektro@75-164-190-81.ptld.qwest.net
you can turn off issues and have an issues/ folder checked in and disable CI checks on the folder

1695756318
nektro!~nektro@75-164-190-81.ptld.qwest.net
there's a lot of value in having issues outside but controllable by the code (eg Closes references)

1695756354
Earnestly!~earnest@user/earnestly
Seems like I've been using git a little like fossil, using --bare mirrors and then cloning from the local mirror to a worktree

1695757777
jemius!~imperator@2001:9e8:32c3:2700:76cd:baa7:5f68:a228
    for (string) |character| {  <- so, just out of curiousity: do the pipes | actually have any semantic purpose or is that just Zig's style? One would think you could write a compiler that just interpretes everything between ) and { as loop cursor / index

1695757867
nektro!~nektro@75-164-190-81.ptld.qwest.net
just style for the capture, its unique because its also used in while loops, if, and switch

1695758003
nektro!~nektro@75-164-190-81.ptld.qwest.net
and so the consistency makes it clear whats happening regardless of which condition mechanism u see it used with

1695758792
jemius!~imperator@2001:9e8:32c3:2700:76cd:baa7:5f68:a228
sounds sound

