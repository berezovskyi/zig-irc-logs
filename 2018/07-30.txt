1532951519
MajorLag1
andrewrk, in 1291 you mention global comptime-persistent state. I think that would be generally useful for comptime, for instance being able to keep a registry command implementations for a built-in console, or building a union type of all registered entities.

1532953259
companion_cube
weird, zig seems to be mostly expression-based, but not totally (in particular the use of `break` for returning values from blocksâ€¦)

1532958102
bodie__
reminds me of Leiningen somehow :D

1532958280
andrewrk
MajorLag1, I think we should make note of all these use cases, and have an answer for what's the best way to implement it in zig

1532958295
andrewrk
maybe that's with the aforementioned feature, maybe not, but we should address these use cases

1532958377
MajorLag1
yeah, I'm not saying it's the best way to do it, it was just a thought.

1532969349
andrewrk
whew... this test passes now:

1532969353
andrewrk
that was really difficult

1532970129
GitHub145
[zig] andrewrk opened pull request #1307: improved coroutine cancel semantics (master...cancel-semantics)

1532972564
GitHub73
[zig] andrewrk closed pull request #1307: improved coroutine cancel semantics (master...cancel-semantics)

1532972564
GitHub61
[zig] andrewrk pushed 1 new commit to master:

1532972564
GitHub61
zig/master 5d4a02c Andrew Kelley: Merge pull request #1307 from ziglang/cancel-semantics...

1532980496
varion
there's no HTTP request library or anything for zig yet, right?

1532980511
andrewrk
varion, correct

1532980532
varion
cool, thanks. it looks like all the http stuff is planned, though

1532980534
andrewrk
however, event-based I/O progress has been chugging along recently

1532980537
andrewrk
correct

1532980565
varion
i'm following zig closely. it's pretty much exactly what i wanted out of d's "better c", but.. you know... good?

1532980588
andrewrk
lol, thanks for the compliment. let's be friendly to our D friends though :)

1532980605
varion
i think d is great! i just can't use it for my exact purposes

1532980623
varion
and d leaves ios/android on the floor, which is too bad

1532980636
andrewrk
at some point here the zig package manager is going to drive the http request library

1532980646
andrewrk
and naturally, to test the http request library, we'll want an http server library

1532980661
varion
right, go-style minimal implementation?

1532980688
andrewrk
certainly minimal. I'm not sure what all go-style implies

1532980705
varion
i just meant that it comes in the std, but it's as absolutely minimal as they thought plausible

1532980715
andrewrk
ah

1532980736
bheads
dont forget HTTPS

1532980738
andrewrk
yes one of the goals for the standard library is that the scope is limited enough so that the std lib can get to a point where it is "done"

1532980760
varion
that's one of the parts i'm excited about

1532980807
varion
i love nim, for example, but it's been chasing 1.0 for years because the std is still ill-defined. it's an amazing language, but zig is significantly smaller on purpose

1532980849
varion
"small on purpose" is about the best thing i could say for a language, haha

1532980883
MajorLag1
I'd generally agree with that.

1532980901
bheads
Also I was messing with HTTP in zig this weekend and ran into issues with the current read function, it fails when sockets return EAGAIN so I have to roll my own...

1532981066
andrewrk
bheads, now that I have a better handle on coroutines I can make the api much better

1532981088
andrewrk
wait that sounds like a bug, not an API problem

1532981090
bheads
It was more of a problem with async IO

1532981116
bheads
its a nonblocking socket that wanted to wait

1532981130
andrewrk
that's supposed to work perfectly with async I/O

1532981149
andrewrk
when you get EAGAIN you put the socket fd in the epoll set and suspend,

1532981154
andrewrk
then get resumed when the socket has data

1532981172
bheads
correct

1532981182
bheads
all that is missing in the std lib right now

1532981195
andrewrk
oh yeah I remember I skipped a bunch of things

1532981216
andrewrk
anyway, instead of giving an async function handler to tcp server, tcp server will create a channel of requests, that you can get() from

1532981223
bheads
I know you were working on an async io lib so I figured you would come back to that

1532981237
andrewrk
I think that solves the catch unreachable

1532981255
bheads
the other read function should be fixed still

1532981260
andrewrk
agreed

1532981278
bheads
bot sure what the best way to fix it was though

1532981298
andrewrk
apologies for the broken implementation. that part of the std lib is very much under construction-

1532981299
bheads
you want it to return the bytes read and the EAGAIN error

1532981303
bheads
no worries

1532981321
bheads
I was just using it to learn a bit about the coro stuff you have been crancking out

1532981373
bheads
it always tricky to design api's like this

1532981384
bheads
multiple returns seem like an easy solution

1532981400
bheads
but this is an odd case

1532981472
andrewrk
I think it should return the bytes read if it has any, and only returning 0 means EOF

1532981491
bheads
right but should the read function do that waiting?

1532981595
bheads
in my little test I had read return the length on EAGAIN, but the read got stuck in a loop when I was testing with wget, but worked correctly with curl...  not sure what I was missing

1532981746
bheads
but not a big issue, I was just messing around while watching TV

1532981980
andrewrk
bheads, no, the read function should never wait - but if you open the socket with non-blocking it won't block

1532984102
meowray
Will llvm

1532984149
andrewrk
what does NFC stand for?

1532984181
meowray
I know I might have done something bad and someone was dissatisfied with it.

1532984187
meowray
No Functional Change

1532984204
andrewrk
ah! nope, this commit has no meaningful impact on zig

1532984236
andrewrk
zig has 1 outstanding patch against LLD, and we only update the fork when LLVM has a release

1532984265
meowray
I know your COFF local patch, anything else?

1532984282
meowray
(I worry that my commits might be reverted

1532984450
andrewrk
meowray, I wasn't counting the COFF patch because it was merged upstream. I'm referring to this:

1532984457
andrewrk
this is the only outstanding patch against any llvm/clang/lld dependencies

1532984478
andrewrk
there's a real fix and a test case on the mailing list for it right now

1532993142
ofelas
6

1532993158
ofelas
oh, crap

1532993173
andrewrk
now I know your password

1532993176
andrewrk
6

1532993199
ofelas
yes, you wouldn't have guessed that

