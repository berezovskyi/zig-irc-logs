1530160248
dbandstra
andrewrk, do you know any reason why this might not work?

1530160277
dbandstra
it's an init function returning struct-in-struct-in-struct, methods in the innermost one (two layers of fieldParentPtr)

1530160354
dbandstra
just off hand. i'm getting a crash but it seems to depend on random other parts of the program so i still haven't been able to isolate it

1530160404
dbandstra
(like if i instantiate one of these "Outer" objects as a global, and use it in a test, it crashes. but if i instantiate it within the test, it works. if i copy the whole thing to a new empty project, it works even as a global...)

1530160442
dbandstra
possibly some kind of struct-returning-memcpy-related thing?

1530166357
andrewrk
dbandstra, this should be straightforward to test with a debugger

1530166364
andrewrk
printing the memory addresses of the things

1530173616
GitHub134
[zig] tiehuis pushed 1 new commit to master:

1530173616
GitHub134
zig/master 4a35d7e Marc Tiehuis: Correct hex-float parsing...

1530174569
GitHub9
[zig] tiehuis opened pull request #1166: compiler_rt f128 support additions (master...issue-495)

1530174974
GitHub143
[zig] Hejsil opened pull request #1167: Implement const_values_equal for arrays (master...comptime-array-by-value)

1530188674
GitHub199
[zig] isaachier opened pull request #1168: Clarify reason implicit cast does not work for large RHS (master...shift-amt-error-improvement)

1530222337
v1bri
are there any docs on the motivation to avoid a borrow checker in zig?

1530222660
v1bri
i found this reddit thread

1530225831
andrewrk
v1bri, why not use rust, if you want a borrow checker?

1530225985
andrewrk
what I want to avoid in zig is a large set of valid, safe programs which are unable to compile

1530226021
v1bri
"why not use rust", a valid question...

1530226044
v1bri
because zig is getting more things right: defer, error handling, comptime, memory allocation (and failure to do so)

1530226742
Triplefox[m]
rust is talented at solving certain memory management problems that are both intrinsically complex and need deep optimization...most either aren't that complex or do not need optimization and i think zig is currently working on answers within the "not that complex" part of this venn diagram

1530226964
Triplefox[m]
there's always opportunities to discover simpler semantics that get many of the same qualities without the same overhead...if we analogize that cs is like mathematics, it's all a question of figuring out how to reframe the problem

1530227378
v1bri
rad thanks. i think enforced error handling is going to go a long way in helping everyone avoid common PITA bugs

1530227691
andrewrk
I do want to make the semantic analysis catch more memory safety bugs

1530227697
andrewrk
but not the full guarantees that rust provides

1530228352
v1bri
great. i agree, there is room for improved ergonomics over what rust provides

1530228490
v1bri
very interested in the proposals on enforced resource type handling (#494, #782, #885)

1530229135
v1bri
also the docs are a little vague on the "blk: { <stuff>; break :blk <expression>; }" pattern

1530229187
v1bri
that just means the block evaluates to the expression following the "break"?

