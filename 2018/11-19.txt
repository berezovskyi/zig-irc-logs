1542590040
daurnimator
MajorLag: perhaps a union?

1542590091
daurnimator
nbjoerg: "the cfe experience"?

1542590155
nbjoerg
c/c++ frontend

1542590159
nbjoerg
aka clang

1542594822
suirad
whats the most straightforward way to interact with c++ code from zig? Create a c wrapper for it?

1542595508
MajorLag
probably

1542595686
daurnimator
I forget the result from the discussion the other day: can you process the result of @embedFile at compile time?

1542595772
MajorLag
yes, with the standard comptime caveats.

1542596226
daurnimator
MajorLag: cool. confirmed :)

1542596337
daurnimator
(context:

1542596456
MajorLag
I don't think your sample code is ensuring the file is processed at comptime, though I would expect it to be in release-fast.

1542596528
daurnimator
MajorLag:

1542596564
daurnimator
(added comptime to return of compileTimeParseFile)

1542596597
daurnimator
huh. maybe that doesn't work.... @compileLog(compileTimeParseFile("sample-file")); prints "runtime value"

1542596639
MajorLag
I wasn't even aware of that syntax. I'd have done `const pared_file_data = comptime compileTimeParseFile("sample-file"); std.debug.warn("FILE={}\n", parsed_file_data);`

1542596730
daurnimator
well this certainly is odd.

1542596766
MajorLag
what's odd about it? there's no output in the paste

1542596812
daurnimator
MajorLag: compiling it prints `| (runtime value)`. Running it returns the correct thing.

1542596831
daurnimator
either the comptime block is happening at runtime; or @compileLog is printing the wrong thing

1542596832
MajorLag
well yeah, but running it may just mean it is processing it at runtime.

1542596856
daurnimator
MajorLag: shouldn't the `comptime` block make that not-possible?

1542596918
MajorLag
yes. I'm not sure why compilelog would think it is runtime, but it probably isn't. You could check the binary, see if the contents of sample-file appear in it.

1542596962
daurnimator
it does not.

1542596968
daurnimator
I guess I'll file a zig bug

1542597042
MajorLag
I don't think it is a bug, it's just that comptime vs runtime is not always easy to determine with how it currently works. At least I don't think so. But if you file a bug andrew should at least explain why it's doing what it is doing.

1542597217
daurnimator


1542597326
MajorLag
I think what is happening is that x is a runtime value, populated by a function that just returns 111. What does compileLog say if you do it my way?

1542597410
daurnimator
MajorLag: ah. that works :)

1542602919
oats
what's the 'use' keyword do?

1542603010
MajorLag
adds everything in a namespace into the current one. Mostly useful for @cImports.

1542608083
daurnimator
oh man. I just realised that zig treads a damn near perfect ground for implementing "declarative" data format specs. WebIDL, ASN1, WSDL..... could all be handled

1542608110
daurnimator
(uh, a more modern example: protobufs)

1542608144
daurnimator
The other day I asked about using libraries at compile time (the example at the time was libpng). Did we get any conclusion on that?

1542608272
benjikun
is protobufs just like msgpack?

1542608308
daurnimator
benjikun: in what way?

1542608316
benjikun
just wondering, don't know what it is

1542608368
benjikun
is it readable or binary

1542608391
daurnimator
benjikun: it's a serialisation format that comes with a syntax for specifying its structs. see e.g.

1542608403
benjikun
oh I see

1542608414
daurnimator
benjikun: ^^ that goes in a '.proto' file

1542608458
daurnimator
then each programming language has some sort of "generate a class from a .proto file" function

1542608494
benjikun
interesting

1542608500
daurnimator
statically compiled languages generally have a utility that generates source

1542608512
benjikun
have you used nim?

1542608516
daurnimator
dynamic language generally end up writing a .proto file parser that they use at runtime

1542608524
daurnimator
benjikun: not really. I did a tutorial or so but that's it

1542608549
benjikun
ah

1542616019
d_s
daurnimator: to generate code for protocol you specified in .proto file, you use protoc

1542616064
d_s
so each programming language doesn't parse .proto and gen code

1542616206
daurnimator
d_s: many do.

1542616228
d_s
so they do it wrong, there is no benefit to write own parser

1542616282
daurnimator
d_s: sure there is: being able to take .proto files at runtime

1542616293
d_s
protoc generates source code in target language that understand described protocol in .proto

1542616329
d_s
dynamic protocol?

1542616357
d_s
someone drink to much when impl. this idea of dynamic protocol

1542616362
d_s
show me such example

1542616384
daurnimator
d_s: e.g. I've done it using

1542616411
d_s
the protocol desciption itself

1542616435
daurnimator
yes. it was for a work project where the .proto was provided at runtime

1542616436
d_s
such protocol which require making .proto ad-hoc

1542616440
daurnimator
yes

1542616464
d_s
show me desciption of such protocol

1542616541
daurnimator
d_s: we used it at $WORK to translate protobufs to json. it had to allow the user to upload a .proto file at runtime and not need a recompile/redeploy.

1542616675
d_s
oh, it must be so much fun to use product which chagnes protocol so frequently

1542616684
d_s
probably even without backward compatibility

1542617085
benjikun
toxic

1542617314
benjikun
daurnimator: Have you used terra before?

1542617973
benjikun
seems like something you'd give a go

1542622506
daurnimator
benjikun: yeah... it's not really like what it seems

1542622515
daurnimator
benjikun: titan/pallene are what I

1542630525
MajorLag
@daurnimator: you can't call external libraries at comptime, nor is this a feature that's likely to be implemented.

1542631785
nbjoerg
it would be useful to have a builtin predicate for that?

1542640929
Sahnvour
hi andrewrk, this code `asm volatile ("" : : [_]"m"(i15(-3)) : "");` asserts in LLVM during codegen because i15 is not a "SimpleValueType". Should we forbid types that are not native with a compiler error + TODO ?

1542640975
andrewrk
Sahnvour, perhaps we can call gen_widen_or_shorten before passing the value to llvm

1542641011
andrewrk
this will emit a zext or sext instruction as appropriate, which should be semantically correct and have no downsides

1542641056
andrewrk
so you would figure out the power-of-two ZigType * to pass as an argument to that function

1542641065
andrewrk
does that make sense?

1542641074
Sahnvour
yep

1542641087
Sahnvour
I was wondering if that's OK to choose the type from codegen->builtin_types

1542641109
andrewrk
yes those types are handy aliases for the common primitive types

1542641116
andrewrk
all guaranteed to be populated at startup

1542642033
Sahnvour
we can safely assume all native types are power of two in size ? no exotic architectures ?

1542642187
andrewrk
Sahnvour, we can safely assume that "SimpleValueType" means "integer, pointer, or floating-point type whose bit width is a power of two greater than or equal to eight and less than or equal to a target-specific size limit."

1542642318
Sahnvour
thanks

1542642741
andrewrk
Sahnvour,  also in case you didn't know we have get_int_type which accepts a bit width parameter

1542642774
andrewrk
this will return the same pointers as the types in codegen->builtin_types, when appropriate, or create new integer types if that size was never used before

1542642869
Sahnvour
cool

1542651700
Sahnvour
how can I test compile_errors.zig alone (not running the full test suite) ?

1542651726
andrewrk
make install && bin/zig build --build-file ../build.zig test-compile-errors -Dskip-release

1542651757
andrewrk
for more options see: bin/zig build --build-file ../build.zig --help

1542651900
Sahnvour
thanks

1542670025
benjikun
I wish there were more articles on zig; these wikipedia moderators want more before the zig page can be published

1542670088
andrewrk
benjikun, the articles listed under Reading and Viewing Material is not enough?

1542670126
andrewrk
that's 3 different authors

1542670135
andrewrk
I can find more

1542670143
benjikun


1542670152
benjikun
You can see the ones I've found in the references section

1542670164
benjikun
sdtimes, infoworld, and jaxenter

1542670255
benjikun
I'm not sure if the jaxenter one qualifies, but I added it still

1542670316
benjikun
If you see anything wrong on that page and or want to add anything, I'd appreciate it btw

1542670392
andrewrk
benjikun, I'm compiling a list of more links with little snippets that you can use if you want

1542670557
benjikun
thank you

1542670567
benjikun
I wonder how many github repos use zig now

1542670576
andrewrk
benjikun, about 160

1542670588
andrewrk


1542670601
benjikun
yeah I saw that before I think

1542670607
benjikun
it'd be nice to have the highlighting already

1542670655
benjikun
the wikipedia syntax highlighting stuff uses pygments

1542670688
benjikun
I'm not sure about how open they'd be to add zig

1542670712
andrewrk
sr.ht also uses pygments. I looked at the project page and they seem friendly and willing to add lots of languages

1542670724
andrewrk


1542670730
andrewrk
"Well, why not write your own? Contributing to Pygments is easy and fun. Take a look at the docs on lexer development and contact details."

1542670766
benjikun
hmm

1542670770
benjikun


1542671725
andrewrk
benjikun, almost done with the list

1542671916
benjikun
mk

