1519435081
andrewrk
grinz, is your gist referring to #588 which is to be solved by #770?

1519435115
andrewrk
yes, interop with C and with common operating system API such as windows and linux

1519435168
andrewrk
I don't think winapi uses utf-8. see

1519435205
grinz
this is exactly why []null type is useless in that case

1519435552
grinz
andrewrk, yeah

1519435579
grinz
is there api to enumerate (and call by name) functions in scope/struct?

1519435883
andrewrk
grinz, []null for UTF-16 means it is terminated with u16(0)

1519435884
andrewrk
so it still works

1519435903
andrewrk
the full type would be:  []null u16

1519435947
andrewrk
I don't think we have a function for that yet, but feel free to file an issue - it's planned to support that kind of reflection

1519436042
grinz
what about computed goto support?

1519436093
andrewrk
see this comment for computed goto:

1519436124
andrewrk
short summary is: let's come up with a use case where performance could be measurably improved by computed goto. and then let's try to write an LLVM optimization pass that detects the pattern and changes it to computed goto.

1519436131
andrewrk
if that doesn't work we can talk about adding computed goto to the language

1519436164
grinz
optimization pass is not good enough

1519436171
grinz
is has to be assert-like statement

1519436180
andrewrk
good enough in what sense?

1519436191
grinz
optimizations are too fragile

1519436206
grinz
you violate it rules and get bad performance without any warnings

1519436282
andrewrk
I agree with both of those statements, but I am not convinced that computed goto at the language level solves them

1519436341
andrewrk
if performance of a particular section of your code is a feature, then you need a test that makes sure that performance is maintained

1519436369
grinz
I am fine with while (true) switch construct as long as we have a way to get an error if compiler failed to transform to computed goto

1519436398
andrewrk
I think this issue is worth discussing in the bug tracker if you would be willing to start that conversation

1519436649
GitHub60
[zig] andrewrk pushed 1 new commit to master:

1519436650
GitHub60
zig/master 8db7a14 Andrew Kelley: update errors section of docs...

1519436650
GitHub66
[zig] andrewrk closed pull request #768: document when to use error!type in function decl (master...func-decl-error)

1519436688
grinz
Well, I am still not sure I want to use clang for writing lexer. My latest experiment shown that compilers generally are not able to generate sane code for lexers

1519436723
grinz
You add one line and get new assembly for the whole function hurting performance by 20-30%

1519436849
andrewrk
grinz, are you considering having the lexer be in assembly?

1519436854
grinz
And you can always use C for the lexer as a workaround so its not much of a problem

1519436856
grinz
yup

1519436893
andrewrk
interesting. zig does have inline assembly, if that helps. it's mostly the same syntax as gcc and clang

1519436918
andrewrk
I'll be on later. bye

1519449613
grinz
Is it possible to define function that takes value of arbitrary type T without passing T explicitly?

1519449681
MajorLag_
fn myFunc(thing: var)

1519449694
grinz
oh

1519449702
grinz
I was confused by error message "error: parameter of type '(integer literal)' requires comptime"

1519449717
grinz
When I tried myFunc(123)

1519449758
MajorLag_
been there.

1519449821
grinz
But i want that function to work with integer literals.

1519449867
grinz
Adding comptime breaks runtime values (obviously)

1519450050
grinz
Also it would be nice to take types as well

1519450099
grinz
And no function overloading, right?

1519450254
grinz


1519450257
grinz
so many issues(

1519450285
MajorLag_
Yeah, unfortunately comptime is broken in many ways.

1519451338
grinz
No operator overloading?

1519451504
MajorLag_
Nope

1519451524
grinz
Why? Is it planned?

1519451806
MajorLag_
I don't know andrewrk or the rest of the community's reasoning. Personally I think it just obfuscates things. As far as I am aware there are no plans to implement it, but I'm relatively new to Zig myself so don't have a good knowledge of previous discussions.

1519451849
grinz
Then 1 + 2 should also be replaced with 1.add(2)

1519451889
grinz
Lack of operator overloading is major PITA when working with custom big integer / money / simd types

1519451895
MajorLag_
1 + 2 is obvious though. There's no hidden allocation or computation involved.

1519451914
MajorLag_
You can't say that about overloaded operators.

1519452028
grinz
a | b is more obvious than _mm_or_si128(a, b)

1519452201
grinz
result &= (mouse_x < test.left) | (mouse_x > test.right) | (mouse_y < test.top) | (mouse_y > test.bottom);

1519452206
grinz
Now imagine that without operator overloadin

1519452270
grinz
I was able to apply De Morgan's rule after I made SIMD wrapper with operator overloading.

1519452310
grinz
Function call version was too messy to figure out possibility of such transformation

1519452637
grinz
comptime var output2: []const u8 = "test"; @compileLog(output2);

1519452648
grinz
this outputs "| (struct []const u8 constant)". Why not "test"?

1519452806
MajorLag_
Good question. Bug?

1519453990
grinz
But I can use @compileError instead!

1519454664
tiehuis
compileError is only working for the string case since it accepts only a string unlike compileLog which will try and print the repesentation of any type

1519454676
tiehuis
relevant source is:

1519454688
tiehuis
and:

1519454705
tiehuis
not sure why the array is treated as a struct though, that definitely seems a bug

1519454871
tiehuis
actually maybe string slices are stored in a similar way as a struct internally, with the pointer and len fields

1519454888
tiehuis
i think that would make sense here and explain what is going on

1519454916
grinz
But it's broken anyway

1519454916
tiehuis
also if you just defined the value as `const output2 = "test";` you would get the output you want

1519454939
tiehuis
but thats only because it defines it as a [4]u8 and not a []const u8 which you may not want

1519455338
grinz
I need compile time string builder.

1519455370
tiehuis
you can do compile-time concatenation with '++'

1519455375
grinz
And it's not going to work with array type as I cannot redefine such var due to type mismatch

1519455408
tiehuis
can you show what an expected use of it and how you would use it

1519455439
tiehuis
nevermind that, let me have a look

1519455498
grinz
i know about ++. It works fine with slice but @compileLog do not show it contents

1519455502
grinz
Only @compileError

1519455568
tiehuis
i don't think it would be unreasonable to special case comptime slices

1519455602
grinz
comptime var output: []const u8 = "";

1519455621
grinz
I use it like this. And then output = output ++ "...";

1519455645
grinz
BTW this crashes compiler: comptime var output = ""[0..];

1519455660
grinz
zig/src/analyze.cpp:394: TypeTableEntry* get_pointer_to_type_extra(CodeGen*, TypeTableEntry*, bool, bool, uint32_t, uint32_t, uint32_t): Assertion `byte_alignment > 0' failed.

1519455769
tiehuis
what version compiler? i can't seem to replicate that

1519455972
grinz
0.1.1.b66547e9

1519455973
grinz
nightly

1519456446
tiehuis
anymore to that example, just updated to latest and still not getting it:

1519456580
grinz
LLVM 5.0.1

1519456620
tiehuis
same version myself

1519456667
grinz
It also crashes without comptime

1519456714
grinz
pub fn main() void { ""[0..]; }

1519456718
grinz
Minimized example

1519456851
grinz
But this one works fine: var a = ""[0..]; pub fn main() void { }

1519456883
tiehuis
what is your build command for these?

1519456903
grinz
zig build-exe a.zig

1519457125
grinz
1+ char strings works fine

1519457194
grinz
Same problem: pub fn main() void { ([]u32{})[0..]; }

1519457263
tiehuis
yeah still can't replicate this. there must be a different somewhere between our environments.

1519457273
tiehuis
my version for reference is: 0.1.1.8db7a142

1519457304
tiehuis
is this a release or debug compiler?

1519457332
grinz
cmake defaults to debug I guess

1519457358
grinz
yes, debug

1519457404
tiehuis
hmm, `get_pointer_to_type_extra` doesn't even appear on line 394 for the latest source

1519457424
grinz
Because I had b66547e9

1519457480
grinz
0.1.1.8db7a142 - still crashes

1519457482
tiehuis
thats pretty much the latest commit, though

1519457489
tiehuis
last is just a doc update

1519457496
tiehuis
i'll rebuild in debug and see

1519457515
tiehuis
ah there we go

1519457525
tiehuis
should have tried that sooner sorry

1519457537
tiehuis
i can make an issue for this if you want

1519457580
grinz
I'll file it

1519462133
grinz


1519462138
grinz
So weird

1519477020
hoppetosse
andrewrk: I'm trying to get zig to compile to wasm, using zig build-obj main.zig --target-arch wasm32 --target-environ unknown --target-os fr

1519477020
hoppetosse
eestanding

1519477034
hoppetosse
fails with  "unable to create target based on: wasm32-unknown-unknown-unknown"

1519477152
hoppetosse
I'm about to try going from llvm IR to wasm with  binaryen, but

1519477233
hoppetosse
I'm not really sure what I'm doing, haha

1519489660
jfo
hey y'all what is the state of the art in writing formatted strings to stdout

1519490083
jfo
hoppetosse: are you still here? I'm working on getting zig -> wasm working smoothly

1519490142
hoppetosse
jfo: yep, still here

1519490161
hoppetosse
Have you had any success=

1519490162
hoppetosse
?

1519490163
jfo
the bad news is that there are multiple hoops to jump through, including circumventing a bug that prevents passing `wasm` all the way to llvm as a target

1519490164
jfo


1519490186
jfo
the good news is that after llvm6 comes out any minute now, and that gets fixed, this will be very easy to do

1519490209
hoppetosse
Oh wow, awesome

1519490212
jfo
(those are two separate things, the bug is not because of llvm)

1519490242
hoppetosse
you've gotten a lot further than I have

1519490265
jfo
we're hoping to see wasm land as a native target in llvm7 in ~6 months, the bulk of the work until then will be stubbing out or implementing std lib operations to make the language usable

1519490272
hoppetosse
I was still trying to figure out how to get the --target through

1519490299
jfo
yeah I've been really excited about wasm... llvm being able to output it directly and not go through a binaryen backend is awesome

1519490339
hoppetosse
Lookin forward to it XD

1519490351
jfo
I kept trying c -> wasm every few months but would be really frustrated by the brittle toolchains and how huge and inscrutable emscripten output is... I understand now it's basically polyfilling libc lol

1519490394
jfo
yeah I'm optimistic! zig is a good candidate for wasm development what with the manual mem management etc :)

1519490409
jfo
but the whole pipeline is not quite ready for prime time yet

1519490604
hoppetosse
Still, you've managed to

1519490610
hoppetosse
get something working

1519490713
jfo
:) yeah it was a lot, actually I forgot to mention the step where you have to compile llvm from source with the experimental target flag then compile zig off of that... like I said lots of hoops haha

1519490815
jfo
did you have a usecase in mind or are you just experimenting?

1519490828
hoppetosse
Oh, so you mean I can't just make a zig build with your changes?

1519490845
hoppetosse
My usecase is games

1519490916
hoppetosse
I'm doing a game development course and we'll be doing web development for the next semester. Since I've already done web dev professionally, I kinda wanted to explore wasm and game related tech

1519490935
jfo
yeah sorry, that gist is a bit light on some of the important details.

1519490938
jfo
games, cool!

1519490943
hoppetosse
I've got a small zig project for a game engine

1519490962
jfo
I would be very interested to see if it's possible to get that working in wasm land

1519490968
hoppetosse
and one of my classmates wants to help me, so this will be an exciting 6 months

1519490970
jfo
does it interact with the gpu?

1519490975
hoppetosse
opengl

1519491013
jfo
hmm, yeah getting wasm talking to webgl  is something I am really interested in doing

1519491032
hoppetosse


1519491044
hoppetosse
I haven't touched it much over the past few months

1519491078
hoppetosse
I'd been developing on linux, started trying to get it working on windows and failed so far

1519491087
hoppetosse
but there's a few breaking changes coming

1519491091
jfo
it likely be a while before the wasm support is mature enough to be able to handle those dependencies

1519491093
jfo
yeah quite a few

1519491108
hoppetosse
I also want to cut dependencies

1519491116
hoppetosse
libpng has been an issue

1519491132
hoppetosse
I've ported a simple c++ png decoder to zig

1519491213
hoppetosse
It's compiling, but I think I screwed up the huffman encoding part

1519491240
hoppetosse
I don't really want to depend on zlib either

1519491320
jfo
the issue with dependencies in wasm is that they have to have some kind of mapping to the browser api. currently most of the standard lib is unsupported, I've just been able to compile basic functions, which is a good start...

1519491342
jfo
this is why emscripten is so heavy, it does a lot of that hooking things up

1519491351
jfo
see :

1519491441
jfo
it's not impossible to imagine compiling zig to llvm or wasm and being able to link everything together via emscripten or something, ultimately I'd like out of the box support from zig via llvm directly for a lot of this, but it's definitely in the early stages and certainly non-trivial

1519491626
hoppetosse
Yeah, I'm going trying that now

1519491667
hoppetosse
at least work out what I'll need

1519492107
jfo
hoppetosse: I reread the gist, the only big thing I've left out is what I thought it was... you have to 1) build llvm from

1519492187
jfo
then build zig where -DCMAKE_PREFIX_PATH is set to the install directory of that llvm

1519492194
jfo
off of the llvm6 branch

1519492202
jfo
and from there I think the gist is accurate

1519492227
hoppetosse
I'll give it a shot, thanks for the bearings =)

1519492297
jfo
but it

1519492640
hoppetosse
Thanks, will do!

1519497136
GitHub29
[zig] thejoshwolfe closed pull request #784: Add utf8 string view (master...utf8-string-view)

1519497140
GitHub83
[zig] thejoshwolfe pushed 1 new commit to master:

1519497140
GitHub83
zig/master 08d595b Marc Tiehuis: Add utf8 string view

1519508704
GitHub84
[zig] bscheinman opened pull request #790: General-purpose memory allocator (master...gpalloc)

1519509505
GitHub120
[zig] bscheinman opened pull request #791: Add support for event loop and basic network listeners, and a general-purpose memory allocator (master...gpalloc_squash)

1519511081
GitHub4
[zig] bscheinman closed pull request #790: General-purpose memory allocator (master...gpalloc)

