1532060725
andrewrk
tiehuis, what's the way to port the logic of function using std.math.big.Int?   bool bigint_fits_in_bits(const BigInt *bn, size_t bit_count, bool is_signed);

1532060754
andrewrk
I'm guessing I should use sizeInBase(2) and then make sure it's positive for unsigned types?

1532060845
andrewrk
or maybe bitcount()

1532060995
dbandstra
andrewrk, just to follow up a bit on the comment about comparing a nullable to a non-nullable... it would be ergonomic to be able to compare two things that would be comparable if they weren't optional (ints, floats, etc). nullable types are kind of like boxes in zig, but not completely (`some_nullable_int = 5` doesn't require boxing syntax), so it would be in line with that

1532061034
andrewrk
it is different than == or != on nullable pointers though

1532061056
andrewrk
for example for a ?i32 it would be 2 operations vs ?*i32 it would be 1 operation

1532061201
dbandstra
is that bad?

1532061218
andrewrk
it might be ok

1532061227
andrewrk
I think it's worth a proposal issue

1532061332
dbandstra
ok, i'll try to put one together at some point

1532064660
dbandstra
`const x = func() orelse return;` or `const x = func() orelse continue;` is an interesting feature

1532064794
dbandstra
one of the most bizarre things coming from c :p

1532064967
andrewrk
it seems like that's what you naturally end up with if you consider how the noreturn type works

1532065102
dbandstra
yeah

1532065136
dbandstra
i've worked in languages with a 'never' type but they didn't support this

1532065158
dbandstra
probably because it was typescript being restricted by js compatibility

1532065312
dbandstra
while i'm on the topic of breaking free of c/js/ts, switch statements as expressions is sooo nice

1532065345
andrewrk
agreed

1532065346
dbandstra
it's such a pleasant feeling every time i'm working on something and realize i can use it

1532065376
andrewrk


1532065415
dbandstra
haven't been following this but it looks like stage2 built its first program?

1532065429
andrewrk
that's right! its first program with a successful exit code

1532065434
dbandstra
congrats :D

1532065446
andrewrk
this means we can start having stage2 tests

1532065580
dbandstra
1 passing, 10 or 20 thousand to go?

1532065825
andrewrk
I type fast ;)

1532066114
GitHub129
[zig] andrewrk opened pull request #1266: Self hosted libc hello world (master...self-hosted-libc-hello-world)

1532100059
winksaville
So stage3 will be able to be used to create compilers without previous stages using llvm c interface. But for zig the other key apparently is compiling compiler-rt, what is special about compiling compler-rt?

1532100107
andrewrk
it's a dependency of llvm-generated .o files

1532100114
andrewrk
so you need it built for the target

1532101511
Hejsil
We have way too may words for "interface".

1532101513
winksaville
hmmm, is it correct that only stage1 can compile std/special/compiler-rt/* files or is it some other reason a stage1 compiler is required?

1532101792
winksaville
(I'm trying to understand what is stage1 able to do that stage3 can't and thus requires stage 1/2 to be maintained moving forward)

1532101851
andrewrk
stage1 can compile C++ code

1532101858
andrewrk
LLVM and clang have C++ APIs

1532101973
andrewrk
(unfortunately)

1532101977
winksaville
couldn't stage3 spawn clang++ to compile c++ code?

1532102041
andrewrk
Hejsil, you should be proud of me,  look at this meta programming that I'm doing in self-hosted:

1532102099
andrewrk
I'm thinking I should maybe whitelist types in that switch statement to prevent accidentally adding a type that misses a ref

1532102119
Hejsil
Love it

1532102133
Hejsil
But it's using "deprecated" @member*thing*

1532102137
Hejsil
:)

1532102172
andrewrk
oops, I forgot :)

1532102188
andrewrk
I was thinking, I should go through your std-meta  branch, and merge the earlier commits that have tests passing

1532102201
andrewrk
no reason to lose all of the branch just because one of the commits at the end is mysteriously broken

1532102230
Hejsil
Oooh ye

1532102242
Hejsil
Forgot that is still sitting around

1532102714
bheads_
Next thing you know andrew will be talking about using traits!

1532102949
Hejsil
Arg! One of the many "interface" words!

1532102975
bheads_
Do you count contracts?

1532102981
Hejsil
Yes

1532102989
Hejsil
Contract is a "static interface"

1532103065
Hejsil
Would be nice if, when discussing "interfaces", people would prefix the language the word comes from

1532103089
Hejsil
So if they say "Traits", they should really be saying "Rust Traits"

1532103128
Hejsil
Then there should be no question (I think) as for the semantics the person is trying to describe

1532103136
Hejsil
Or!

1532103156
Hejsil
We can just use my terms! "static/dynamic interfaces"

1532103167
Hejsil
I think that covers everything!

1532103276
winksaville
Where can I find the definition of "static/dynamic interfaces"?

1532103296
Hejsil
Idk, made them up just now

1532103341
Hejsil
Mostly joking, but it would be nice if we didn't have 10 words for the same things

1532103403
Hejsil
And "static/dynamic interfaces" draws parallels to "static/dynamic typing" so I think it's not the worst wordings i've ever come up with

1532103550
winksaville
"interface" to me means a set of method signatures that may have multiple implementations. Not sure how to modify that with "static/dynamic". What is your definition of "interface"?

1532103644
Hejsil
Ye, maybe interface is not the best word. I want something simular to "type"

1532103691
Hejsil
Actually, the wording is not to far of what i want

1532103706
Hejsil
By static/dynamic, I just mean when things are resolved

1532103709
Hejsil
Just like types

1532103730
Hejsil
So a static interface would try to resolve calls to methods and field access at compile time

1532103737
Hejsil
While dynamic would be a runtime

1532103751
Hejsil
So OOP is "dynamic interfaces"

1532103762
Hejsil
And concepts is "static interfaces"

1532103819
bheads_
so traits and classes  :)

1532103848
winksaville
You say OOP is "dynamic interfaces" do mean type hierarchies or method dispatching or something else?

1532103860
Hejsil
method dispatching

1532103872
bheads_
which doesn';t really define OOP

1532103874
Hejsil
That is really most of what makes OOP what it is

1532103891
Hejsil
Well, we embed types into eachother to

1532103960
Hejsil
Ok, actually there is a word for what I want!

1532103964
Hejsil
Dynamic dispatch

1532103967
Hejsil
There we go!

1532103992
Hejsil
Do we have one word for "concept" like things?

1532104031
bheads_
depends on the impl

1532104050
Hejsil
True

1532104085
Hejsil
Mostly, i just want one "concept" proposal, and one "dynamic dispatch" proposal

1532104114
winksaville
so is "Dynamic dispatch" is dispatching through "vtables" when a c++ method is "virtual" as opposed to non-virtual c++ methods are resolved at compile?

1532104116
Hejsil
Right now, I think there are 5 and they kinda discuss both static and dynamic

1532104120
bheads_
I am trying to envision dynamic dispatch in zig

1532104142
bheads_
and not vtable sillyness

1532104188
winksaville
s/so is/so/

1532104210
Hejsil
winksaville, ye, that about covers it

1532104244
Hejsil
I think you need some way of storing a pointer to some functions in dynamic dispatch

1532104258
Hejsil
Or lookup based om some enum

1532104284
Hejsil
Is there some other dynamic dispatching that does not do "vtables"

1532104314
bheads_
okay but how would this work:   foo(a);   foo(b);    or    a.foo();   b.foo();

1532104325
bheads_
nothing dynamic here

1532104355
Hejsil
Well, who knows what foo does :)

1532104367
Hejsil
Could have a user implemented vtable in there

1532104381
winksaville
but a->foo() might be dynamic

1532104430
Hejsil
Hmm, right. C++ does communicate a possible dynamic dispatch

1532104451
Hejsil
Though, if you do OOP, most of you methods calls will be ->foo, even if they are static

1532104463
Hejsil
non-virtual

1532104466
Hejsil
geeh, words

1532104474
bheads_
yeah all this needs to be comptime

1532104486
bheads_
only function pointers can be dynamic

1532104542
bheads_
also cant alias a struct in a struct, you need to name it

1532104667
winksaville
you can also dispatch using switch on value/enum without vtable or function pointers, but that doesn't give you polymorphic behavior. To get polymorphism I think you need function pointers or other dynamic way to choose the call target based on some "other" information such as "type".

1532104668
bheads_
there might be something there if the concepts/traits/duck typing/interface supports defining function pointers

1532104780
winksaville
slightly off topic but concerning pointers, does zig support "move semantics" or notion of "ownership"?

1532104909
winksaville
andrewrk: line 66 of src-self-hosted/ir.zig on your hello world branch has a typo, "populated durign codegen".

1532104952
Hejsil
winksaville, no but it has been discussed plenty

1532104978
Hejsil
So far, there has not been anything Ziggy enough

1532104984
Hejsil
As far as I know

1532105033
Hejsil
I think ownership is difficult for memory, because not all allocators actually give out ownership to memory

1532105052
Hejsil
Some, like Arena or Fixed Allocator owns the memory they give out

1532105129
winksaville
My use case is supporting asynchronous messaging and when I send a message I'd sure like to "move" it to the target so that I don't accidentally have an alias and modify it after sending.

1532105240
bheads_
how big is the message?

1532105271
Hejsil
I think with

1532105291
Hejsil
Though, this would only catch you using moved values at runtime

1532105294
Hejsil
so not ideal

1532105332
bheads_
one simple idea is a move assignment just for optional types

1532105358
bheads_
ie:  a <== b; b is now null, a is what b was

1532105388
Hejsil
Still only runtime checked, and using b is now a pain

1532105398
Hejsil
b.?.acess_member

1532105424
winksaville
a message is arbirtary in size, although smaller the better. At a minumum it would probably be ver, cmd, src, target, flags plus any user data of arbitrary sizes.

1532105463
bheads_
winksaville, I am just suggesting that sometimes the cost of a copy is less then the over head so thread safe moving a message

1532105535
bheads_
optional types will always be a pain

1532105546
winksaville
bheads_: a <== b LGTM, and I'd expect the compiler to enforce me not using it after "sending" so shouldn't be a pain to use.

1532105576
bheads_
well the compiler will know b is now null

1532105609
bheads_
same problem as var a: ?int = null;  ... compile knows a is null

1532105645
Hejsil
Could use undefined then.

1532105674
Hejsil
var a: int = 2; var b <== a; // a is now undefined

1532105697
Hejsil
And the compiler knows, for some cases that a is undefined

1532105717
Hejsil
as long as complicated branching doesn't occure

1532105756
Hejsil
Though, then var a: u8 = 2; var b = move(&a); // move sets a to undefined

1532105760
Hejsil
should work as well

1532105775
bheads_
you need to rewrite that stack pointers then

1532105790
Hejsil
Passing ptr to a

1532105823
bheads_
var a: i32 = 1;  var p = &a;  var b <== a;   where is p pointing?

1532105867
Bas_
What is <== ?

1532105880
Hejsil
p would point to a

1532105881
bheads_
some made up move assingment operator

1532105885
Hejsil
i don't see the problem

1532105900
Hejsil
Zig doens't prove lifetime, so it can't catch this

1532105926
Hejsil
(maybe it could) but it would never be perfect without profs

1532105978
winksaville
what is "profs"

1532105986
Hejsil
Sorrym *proofs

1532106032
winksaville
Bas_: <== a proposed "move" assignment

1532106062
bheads_
I just dont see the purpose of moving primitive types

1532106064
winksaville
In my simple use case I want `send(message.dest, <== message);`

1532106076
Hejsil
Lol

1532106093
Hejsil
Well, small text messages require simple examples

1532106115
winksaville
Hejsil: u laughing at me :)

1532106136
Hejsil
Naah, it was the "moving primitive types" :)

1532106172
bheads_
so how do you move a struct on the stack?

1532106196
bheads_
something I never understood

1532106245
winksaville
you need to move the struct as a whole or disallow it, in my case I'd be happy saying it has to be allocated on the heap.

1532106264
Bas_
You don't move a struct anyway :P

1532106273
Bas_
maybe you can copy the pointer ^^

1532106278
bheads_
so.... why not share the heap between the producer and consumer...

1532106288
bheads_
then your just transfering ownership

1532106333
bheads_
so is move copy ellusion or an ownership issue

1532106358
Hejsil
Isn't moves purely and ownership issue?

1532106375
bheads_
I guess so, I always struggled with this concept

1532106382
Hejsil
And i C++, to avoid copy ctor, which Zig doesn't have

1532106453
bheads_
so to move you need either an optional type or you need to copy the src to dest and re init the src

1532106468
winksaville
call it ownership transfer or move either way I'd like the compiler to slap my hand if I try to "use" something after sending it.

1532106505
bheads_
The copiler would need to track null or undefined access in comptime

1532106509
Hejsil
bheads_ or have the compile complain using moved values

1532106596
Hejsil
I think this discussion is a good example of "move semantics are complicated", and therefore we should probalby/maybe/onlymyopinion not have them

1532106626
Bas_
C++ also doesn't complain if you move stuff

1532106628
bheads_
I would agree Hejsil

1532106653
winksaville
:( you giving up to easy

1532106657
Hejsil
lol

1532106660
winksaville
s/you/your/

1532106669
bheads_
I think a nice to have would be detecting accessing null or undefined at comptime would be a good feature

1532106677
Hejsil
True

1532106693
Bas_
And I actually think that often RAII makes people lazy and not think about ownership.

1532106693
bheads_
but that is not related to move

1532106724
Hejsil
And Im sure that will come with a good control flow analysis pass in the compiler

1532106728
bheads_
{ defer message = null;  send(dest, message); }

1532106740
MajorLag2
I feel like I should demonstrate something like a handle system as an alternative to building move-semantics into the language for things like this.

1532106755
bheads_
you can always make a new block and defer

1532106773
Hejsil
MajorLag2 plz do

1532106779
Hejsil
Would love to see alternatives

1532106781
bheads_
though if send bubbled up an error you could leak...

1532106783
Bas_
or just do send(dest, message); message = null; ^^

1532106784
MajorLag2
My todo list is already so long though...

1532106798
Hejsil
:(

1532106804
winksaville
bheads_: I like "{ defer message = null; send(message.dest, message); }" good solution I can use now!!

1532106825
bheads_
:D

1532106876
bheads_
winksaville, only problem I can see is error handling, sometimes I think we need an okdefer

1532106877
Bas_
You can also use it to: moveMessage(* Message m) { defer m.* = null; return m.*; }

1532106939
bheads_
Bas_, wouldn't that have to be a ** to null the source pointer?

1532106947
Bas_
Maybe...

1532106965
bheads_
This is why java has ruined my brain

1532106986
bheads_
anything beyond a single pointer makes me have to think

1532107005
Bas_
It depends on whether you have your message as a pointer or by value

1532107025
Bas_
setting the message to null also doesn't work. :P

1532107053
Bas_
moveMessage(*?Message m) ...

1532107060
bheads_
yeah it has to be optional

1532107063
Bas_
moveMessage(**Message m) ...

1532107070
Bas_
one of those should work

1532107094
bheads_
lol, just keep adding one of these * & ?

1532107136
bheads_
hummm maybe we do need an okdefer

1532107145
winksaville
Yep, I'll use one of those for now, but in an ideal world i'd like a send binary operator "<<==" so I could say `message.dest <<== message` and have the compiler error if message use used after that point.

1532107237
bheads_
fn foo(... stuff ..) {   var t = sql_start_transaction();  errdefer sql_roll_back(t); okdefer sql_commit(t); ... do sqly stuff .. }

1532107239
winksaville
Maybe by limiting "move/ownership" to this simple case it wouldn't be hard to implement?

1532107276
Bas_
can't you just put your okdefer as the last statement in the function?

1532107306
bheads_
depends on the flow control

1532107351
Bas_
hmm yeah ok

1532107531
winksaville
everyone, txs for the help on how to send a message with zig now, in the furture I may advocate for a "send operator" but next I need some advice on how to construct a message.

1532107706
winksaville
I see all messages having a header at the beginning followed by arbitrary stuff after the header and ideally I'd like to construct the message at comptime. I suspect it's possible any example code?

1532107762
bheads_
Do you mean a generic type?

1532107821
bheads_
or do you mean const messages made at comptime?

1532108293
winksaville
I'm not sure but a possible usage syntax might be `const MyMessage = Message({ id: u64, data: []u8});` and it would make `struct { header: messageHeader, id: u64, data: []u8};`

1532108413
bheads_
Did you check out the examples here?

1532108442
bheads_
also checkout

1532108646
winksaville
bheads_: txs, that will started

1532108668
winksaville
will get me started :)

1532109065
diginet
question re: Zig's type system

1532109166
diginet
I noticed that Zig has Type: Type, but impredicative type systems of this form are known to be inconsistent, am I missing something?

1532109268
diginet
(cf. martin-lof's original type theory)

1532109298
Hejsil
Idk, there doesn't seem to be problems with the type type

1532109304
Hejsil
As far as I know

1532109330
bheads_
first class types are really useful

1532109843
andi3
@Bas_ you have to read "The UNIX- HATERS Handbook" regarding worse is better, its ridicules, granted giving anyone working on unix a really good laugh  :DD

1532110137
diginet
the UHH is great

1532110167
diginet
Hejsil, bheads_ it is indeed useful, I'm just worried that it's unsound

1532110186
diginet
Type: Type in Zig is a compile-time construct though, right?

1532110330
bheads_
whats Type: Type ?  there is comptime t: type

1532110330
Hejsil
Do you mean `const SomeType: type = struct {}`

1532110387
diginet
bheads_: I mean the type of tpyes

1532110432
bheads_
I belive Type is only a comptime concept

1532110466
Hejsil
Yes, type is only a comptime concept

1532111881
andrewrk
diginet, what's wrong with `type`? do you have a code example?

1532111897
andrewrk
if I'm being honest I probably will never read martin-lof's original type theory

1532112690
diginet
andrewrk: I haven't studied Zig closely enough to say, but impredicative type systems can theoretically fall victim to a type-level analogue of Russell's paradox

1532113014
bheads_
I am not sure how zig has impredicative types

1532113161
diginet
perhaps it does not and I am mistaken, I was just curious if this problem had come up before

1532113649
diginet
there is another language, Seed7 which reminds me of Zig's first class types

1532118562
very-mediocre
re:type type

1532118576
very-mediocre
all structs are subtypes of type, yet zig has no inheritance...

1532118635
very-mediocre
i think that's theoretically unsound but works nonetheless.

1532118769
very-mediocre
pretty sure that's how most languages do it too

1532118933
very-mediocre
If you're gonna be academic about it, the fact that you can pass "Cat" or"Dog" as a "Type" param is polymorphic.

1532119054
very-mediocre
or a union is also a "type"

1532119088
very-mediocre
late night drunken ramblings, disregard if way off :)

1532120780
GitHub78
[zig] Hejsil pushed 1 new commit to master:

1532120780
GitHub78
zig/master 1f4c7d5 Jimmi HC: Fixed windows getPos

1532122834
tiehuis
andrewrk: regarding bitcount, it actually adds on an extra bit for signed integers already, however, its not currently optimal in a twos-complement signed context

1532122860
tiehuis
further, sizeInBase is more like the traditional gmp sizeInBase, in that it will always return a lower-bound but may be off by 1 (or maybe 2)

1532122944
tiehuis
bitCount should assume twos-complement though so it can be changed to handle that

1532123001
tiehuis
i'll be back in ~2 hours so if you haven't looked at it then i'll add some tests and change it

1532124213
winksaville
In the docs the term "optional" is used but it seems to me that using "nullable" might be better. In my mind "opitional" would be the term I'd used to explain that a parameter is optional if a "default" value for a parameter was provided.

