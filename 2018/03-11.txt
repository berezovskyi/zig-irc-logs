1520727879
ltr_
hello

1520729774
MajorLag
Hi

1520730020
GitHub23
[zig] AndreaOrru pushed 2 new commits to master:

1520730020
GitHub23
zig/master c18059a Andrea Orru: Merge branch 'master' of

1520730020
GitHub23
zig/master d062139 Andrea Orru: zen-specific: main -> _start

1520731027
MajorLag
Even after updating to an artifact after the comptime patch, it still manages to screw up looping.

1520742054
andrewrk
MajorLag: I just pushed a bug fix related to improperly caching comptime. Are you running latest master?

1520742094
andrewrk
Sorry just saw your message

1520742132
andrewrk
Apologies for the bug. I'm very interested in a test case

1520744295
MajorLag
Yeah, I still haven't nailed it down. I thought the patch fixed it because it fixed my original test case, but it was a no go.

1520744787
MajorLag
ok... this is weird. I've uncommented the code to work on it again and it is working now... only it shouldn't be, because I have a compileLog statement in the middle of a loop it has to go through.

1520744878
MajorLag
oh, nevermind. I forgot to disable some code that skips all the work if the source and destination encoding match.

1520745560
MajorLag
ok... it looks like it might have to do with taking a slice of a comptime slice. In which cast it is incendental that it happens inside of a loop.

1520747200
MajorLag
Ok, I think it's actually pretty simple. Taking a slice of a comptime var turns it into a const slice.

1520747546
MajorLag
...no there's more to it than that...

1520748536
MajorLag
andrerk: #826. At comptime, a slice of a slice of an array is considered const. One fewer slice and it works fine.

1520752760
MajorLag
...and after hacking around that it looks like there's something else causing comptime to fail at this. Something to deal with in the morning I guess.

1520754090
andrewrk
MajorLag: I really appreciate the test case. I know that was a pain to produce

1520754130
andrewrk
At least whenever I fix one of these, I add a test case. So these bugs are getting squashed permanently

1520783658
MajorLag
Happy to help, if  I can. I should get around to getting interfaced with the debug SDK so we can do something about that COFF trace support. All my tedious work with the win32 api before should help, it seemed to include a lot of

1520783662
MajorLag
COM stuff.

1520783885
MajorLag
I just wanted to finish this first, a more complete unicode library. It supports UTF-32/16/8 with or without BOM in BE or LE. Comptime conversion is currently the only thing missing I think.

1520784270
MajorLag
well, that and some little things, cleanups, and WTF-8 support which would apparently be useful for interacting with certain systems.

1520786576
MajorLag
andrewrk: the latest comptime issue seems to be that it is memorizing the result of an iterator's next() function from the end of the previous invokation of the comptime function. I have some stuff to do for a few hours but I'll try to put together a test case later.

1520794111
ltr_
the tetris code has a problem , i dont know if it is cos im compiling it with the master version

1520794151
ltr_
z/tetris/src/static_geometry.zig:64:67: error: cast discards const qualifier, i was able to compile and run it changing the constants to variables

1520799988
ltr_
how can i add static libraries to an executable in the build.zig file?

1520800215
andrewrk
MajorLag, ok thanks, I'll look at your other issue now

1520800440
andrewrk
ltr_, fixed tetris

1520800493
ltr_
just comiled it using the docker image, and it works fine

1520800513
ltr_
the resulting docker image lacks gcc-6 libs

1520800518
ltr_
for crtbegin/end

1520800625
andrewrk
ltr_, for static libs, try addObjectFile

1520800653
ltr_
to the executable?

1520800657
andrewrk
that should maybe be renamed addObjectOrStaticLib

1520800684
ltr_
so instead of exe.linkSystemLibrary("png");

1520800693
ltr_
it should be exe.addObjectFile

1520800698
ltr_
or something like that

1520800699
andrewrk
exe.addObjectFile("libpng.a")

1520800701
andrewrk
yeah

1520800733
ltr_
tetris runs perfect

1520800753
ltr_
andrewrk: should i be able to use libuv now?

1520800820
andrewrk
you can add --verbose-link to `zig build` to make sure it links correctly

1520801805
MajorLag
andrewrk: the conditions for this case are not obvious. Could be a while before I have a test case.  Something is really weird about it, the compileLog statements are not being output in the order I would expect.

1520801835
andrewrk
even if you have a large test case with multiple files, maybe you can push  to a branch and tell me to check it out

1520802010
MajorLag
Might come to that.  It's only two files, the unicode implementation and the tests.

1520802055
MajorLag
....and the relvent tests could be easily included in the main file I suppose.

1520802055
ltr_
?.c:1:1: note: 'uv_close_cb' depends on itself

1520802149
ltr_
I'm getting a lot of redefinition/invalid zig code generated/depends on it self errors using libuv, i suppose complex c unions and structs still have some problems

1520802176
andrewrk
ltr_, I'm working on a zig-native standard library event framework using async/await

1520802179
MajorLag
There's a known issue with "depends on itself" false positives.

1520802180
andrewrk
did you know we have async/await now?

1520802231
ltr_
yes, ill check it out, may be i can make the async part by my self not reliying on libuv

1520802256
andrewrk
to be useful you'll still need a userland event loop of some kind

1520802283
andrewrk
I need to solve

1520802710
MajorLag
andrewrk, what precisely does it mean when @compileLog outputs "(runtime value)"? I have been assuming it means that @compileLog was enountered while compiling code for runtime instead of being run during comtime, is that correct?

1520802781
andrewrk
MajorLag, it means that you passed a value to @compileLog that was not known at compile time

1520802813
andrewrk
I think that's the same thing as what you said

1520802931
MajorLag
I don't know, my interpretation of what you said would mean that it shouldn't be logging "(runtime value)" unless I call something with @compileLog in it at run time. In my tests, it seems to always be the last value returned from a comptime var.

1520803300
MajorLag
Hmm... looks like comptime does weird things with error unions. Might be related. For instance, it can catch an error but it doesn't appear to execute the catch statement.

1520803480
MajorLag
Is it possible that the compiler could optimize out a @compileLog statement?

1520803529
MajorLag
`var x = func(); @compileLog(x); return x;` seems to ignore the log.

1520803605
MajorLag
....except only in some cirucmstances... This is weird.

1520803637
MajorLag
I think I'm dealing with @compileLog bugs making it hard to work out the conditions for the comptime bug.

