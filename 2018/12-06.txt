1544062609
daurnimator
hey is it possible to make slices compatible (memory layout-wise) with a struct iov?

1544072666
StateOff
Hi. Is there a way to get the type from *type?

1544072728
MajorLag
const X = *T; const Y = X.Child; //Y == T

1544072740
MajorLag
or const Y = comptime meta.Child(X);

1544072920
StateOff
Great. Will try. So far I got it working with @typeInfo(T).Pointer.child, but this seems like an overkill.

1544073162
StateOff
Another one: I try to get a struct's field address (as int) via typeInfo. What I did is @ptrToInt(struct_ptr) + @bitOffset(T, field.name)/8. I wonder if there is an easier way?

1544073527
MajorLag
@ptrToInt(&struct.field)

1544074601
StateOff
struct in this case is a 'type', and I can't do T.field

1544074659
MajorLag
So... if it's a type, what exactly does the pointer represent, since it isn't instantiated?

1544074724
MajorLag
You can get the relative offset of a field from the struct using @byteOffsetOf(T, field_name);

1544074887
StateOff
Yes that's what I'm doing. It seems a bit weird to ask for these things but I am writing a serializer so I need to introspect structs, follow certain pointers etc.

1544074902
StateOff
So for zig's comptime reflection got me pretty far.

1544074959
MajorLag
You might want to look at

1544075976
StateOff
That's great! Thanks for the hint. Thant makes a good reference although my use case will be a bit different.

1544076320
StateOff
My stuff allows annotating a struct to handle pointers (Null, follow and serialize to an index, Keep live). Deserializing would relink the pointers based on the index, if they were followed. Live pointers will be just reinstantiated (only works if the app state did not change or the full state was brought back). Nulled pointers expect user handling but may inject some need bombs into the application ;)

1544076415
StateOff
Lot's of rope.

1544097259
Hejsil
Seems like llvm can optimize chaining ifs of mem.eql into some kind of statemachine... I have just been really outsmarted by the compiler

1544097290
Hejsil
Relevant code:

