1522195479
jab
PokeROMdomizer

1522195481
jab
:P

1522195527
Hejsil
I like the ROMdomizer. The Poke in front make it weird to read :)

1522195547
jab
yes

1522195554
jab
ROMdomizer is generic

1522195558
jab
but could still work

1522195671
Hejsil
The only great name I can remember calling a program releated thing, was calling an AST renderer "HPInkjet"

1522195773
Hejsil
Sadly, the renderer never really had driver problems, so the name was missleading

1522195779
andrewrk
lol

1522196033
jab
I wrote this game recently:

1522197156
andrewrk
neat!

1522197462
jab
is there a std reference?

1522197473
jab
besides webmd

1522197590
andrewrk
no, that's blocking on auto docgen

1522197698
Hejsil
Just an index of the std would be extremely useful. Actually, that's all the documentation it'll ever need!

1522197767
Hejsil
Hmmm... Maybe i could generate one using the zig parser in the std

1522197793
Hejsil
andrewrk, does the self hosted parser still only parse a subset?

1522197832
andrewrk
yeah the self hosted parser isn't quite up to that task yet

1522197851
Hejsil
Ooh well

1522197859
andrewrk
I'm probably going to do Pointer Reform before working on it further

1522197891
Hejsil
Np. If I really need it, a parser isn't a hard thing to work one

1522197903
Hejsil
So I might look into that

1522197950
jab
no string functions?

1522197981
Hejsil
std.mem should have most things you would need for strings

1522197999
Hejsil
indexOf, dupe, copy, set

1522198017
Hejsil
Basic things that is

1522198082
Hejsil
eql, split, hash, trim, lessThan

1522198092
Hejsil
I think that's all function relevant to strings in std.mem

1522198119
jab
eql is a weird function name to me

1522198124
jab
everything else is spelled out

1522198135
jab
even C comprssed words like cpy is mem.copy

1522198152
andrewrk
good point. we'll probably rename that before 1.0.0

1522198153
Hejsil
But 2 more letters :)

1522198162
jab
lol

1522198175
andrewrk
jab, std.mem is for byte manipulation. std lib has no string manipulation yet

1522198195
jab
yeah substr or search or regex substitution

1522198202
jab
reverse

1522198380
MajorLag
jab, I recently thought of making a tweening library named move.zig

1522198432
MajorLag
^ on the subject of names from an hour ago

1522198526
andrewrk
hahahaha

1522198632
jab
haha

1522198861
jab
rand.zig isn't completely generic it looks like

1522198870
jab
its MT or nothing

1522198879
jab
and you can reuse Rand struct if you have your own

1522198893
jab
cant*

1522198921
andrewrk
jab, yeah we should update Rand to follow the interface pattern

1522198938
andrewrk
that's some of the oldest code in the std lib

1522198945
MajorLag
also: on the subject of null terminated literal strings, if the default were to change to []null T, you could still allow the old style strings using r"" or something. I think that and being able to implicitly cast []null cont T to []const T would cover any objections, minor as they are.

1522199082
andrewrk
the implicit cast will certainly work. using r"" for old style strings... tough sell. they buy you 1 byte of memory each

1522199113
andrewrk
is there another reason to have that besides saving bytes?

1522199152
MajorLag
no, I don't think so. I realize how minor a thing it is. I dunno, it just bothers me somehow.

1522199159
andrewrk
I know what you mean

1522199203
MajorLag
I suppose I could always write a comptime wrapper to deal with it, like my _L function for UTF16 literals.

1522199218
MajorLag
yeah, that'd satisfy any edge cases I think.

1522199383
itsMontoya
So this is weird

1522199386
itsMontoya
I installed clang

1522199396
itsMontoya
But it looks like the variable isn't being respected

1522199401
itsMontoya
I didn't want to uninstall Clang

1522199924
jab
r"" would be...?

1522199931
jab
not null-terminated?

1522199968
MajorLag
yeah, but I think I talked myself out of it. The rare circumstance where I might care about the extra byte could be solved with a comptime function wrapper.

1522199987
andrewrk
ah yeah that's a good point

1522200071
jab
so you're moving to null-terminated strings?

1522200080
jab
as default

1522200194
MajorLag
andrewrk: are there tests for the syscalls? I'm wondering because if the ones I'm adding end up in the standard lib, and tests are desired for that, then I'll need to work that out. setcap in particular could be difficult.

1522200262
andrewrk
MajorLag, not directly. the closest we have is tests for generic std lib stuff that ends up making syscalls

1522200283
andrewrk
such as std/io_test.zig

1522200356
MajorLag
ok, so stuff involving file io I should test, but it's ok to leave setcap and mount alone?

1522207637
andrewrk
MajorLag: yeah that sounds fine. I'll have a look at the pull request when you make one and double check that it looks good

1522210672
tiehuis
regarding the arch issue, i've just had another look and it appears that cmake is attempting to dynamically link clang but statically link llvm which is probably the cause

1522210709
tiehuis
i'll need a fix for the aur pkgbuild's but will see if it is a general problem

1522212914
tiehuis
If you use this patch you should be fine to compile using the system llvm/clang on arch:

1522212930
tiehuis
this just disables the static-linking for release mode in favour of dynamic linking

1522212954
tiehuis
i'm just finishing off the testing now and will update the aur package shortly

1522213051
tiehuis
the main issue seems to be that the llvm-6 upgrade removed the static libraries from the package list (can check at the bottom here):

1522213099
tiehuis
in general we could probably check in the cmake script that clang/llvm are both either static or dynamic as a mismatch will probably occur otherwise

1522214449
tiehuis
okay, the zig and zig-git packages in the aur are now up to date, let me know if you encounter any issues

1522214478
tiehuis
i also changed the zig-git to avoid a full retest on each update so it should be easier to use if you just want to stay on the bleeding edge feature-wise

1522231395
hellerve
so, i just got deleteTree to work on macos

1522231457
hellerve
but i had to add `error.AccessDenied` to the list of expected errors when we assume it’s a file, because that’s what macos will return

1522231469
hellerve
ill have to figure out whether that breaks anything on any other system

1522231667
hellerve
if that’s a bit too cryptic i’ll try to write it up in a more digestible way in my pr

1522232743
GitHub11
[zig] hellerve opened pull request #864: Getting dir entries on OS X (master...wip-macos-dirent)

1522248377
jab
is it possible to get an integer value corresponding to a type id

1522248385
jab
like i32.value

1522248390
jab
so i can hash it

1522248500
jab
also, for error messages, it doesn't combine relavent lines

1522248506
jab
an example: /usr/local/Cellar/zig/0.2.0/lib/zig/std/hash_map.zig:12:5: note: declared here

1522248509
jab
pub fn HashMap(comptime K: type, comptime V: type,

1522248516
jab
the remaining 2 arguments are hidden

1522248527
jab
probably because they were written on a newline

1522248933
jab
also, what do you think about chaining on null operators like kotlin?

1522248949
jab
x?.y?.z() == ?i32 if z() returns i32

1522248979
jab
and the ??x operator seems weird with pointer reform

1522248989
jab
since prefix operator is becoming access

1522248995
jab
*x == x.&

1522249000
jab
??x = x.?

1522249090
jab
null can be handled like errors: x ?? 0 == x catch 0

1522249122
andrewrk
are you proposing something?  x ?? 0  works today

1522249261
jab
only proposing changing ??x to x.? or something for conistency

1522249278
jab
and adding null access like x?.y?.z()

1522249997
jab
will "for" eventually work with iterators of some kind?

1522250020
jab
or generators

1522250040
jab
calls next() ?T and if null breaks

1522250266
jab
who is working on a terminal gui library?

1522250449
jab
zig threading library name: Zzz

1522250480
jab
zig profiler: zoom

1522250668
jab
zombie would be a cool name for something

1522250680
jab
the letter z is beginning to lose meaning to me

1522250806
andrewrk
thanks for the AUR update tiehuis

1522251522
jab
so my work has an outside work policy which sucks

1522251609
andrewrk
jab, you can cast an enum to an integer. and you can get the type id enum of a type

1522251639
andrewrk


1522251664
jab
hmm, but that doesn't help with custom types it looks like

1522251679
jab
struct {} is the same as struct { i: i32 }

1522251695
andrewrk
that's correct. struct types do not have a generated id

1522251728
jab
i'm trying to store values in a hash based on type

1522251741
jab
if any struct can overwrite any struct it does not work

1522251751
andrewrk
I'll fix the combining relevant lines in the self hosted compiler

1522251774
jab
maybe hash on typename?

1522251787
andrewrk
you can have type name collisions in structs

1522251795
andrewrk
for example if you define them in a.zig and b.zig with the same name

1522251796
jab
dang

1522251811
andrewrk
maybe your hashing strategy can have structural equivalence

1522251829
andrewrk
what are you trying to do?

1522251841
andrewrk
I think you should open an issue for your null operator ideas

1522251863
jab
nothing right now but going through steps in my head for a component bucket

1522251876
andrewrk
what's a component bucket?

1522251895
jab
map.put(@typeId(Position), Position { .x = 0, .y = 0 });

1522251936
andrewrk
it would be able to store any type?

1522251942
jab
a part of this:

1522251948
jab
nope, just position

1522251972
andrewrk
if it always stores the same type then why do you need type id at all? just hash the x and y

1522251984
jab
because the type changes

1522252009
jab
the map can store Positions, or Collisions, or...

1522252036
andrewrk
in the same map?

1522252058
jab
one way to do it, not the only way

1522252067
jab
but at some point there needs to be a type -> instance mapping

1522252097
andrewrk
I'm afraid I don't understand the use case

1522252105
jab
right here:

1522252108
jab
read the component part

1522252138
jab
it's an architectural approach to game design. you have game entities composed of components which are accessible by type

1522252141
jab
Unity has this

1522252160
jab
you can do GetComponent<Position>(); or GetComponent<Health>()

1522252177
andrewrk
this is just global variables

1522252186
jab
urm

1522252191
jab
this.GetComponent<Position>()

1522252213
andrewrk
how is this different than a struct, with a field for each type?

1522252229
jab
the advantage is you can add/remove at runtime

1522252249
jab
you have systems which run on entity sets that have specific components attached

1522252271
jab
so collision system would only iterate over entities which have Collidable, Position

1522252274
jab
or something

1522252290
jab
You

1522252298
jab
but there could be dozens of components

1522252307
andrewrk
I see, so the difference here is in how much memory it will consume

1522252318
jab
and separation of data access

1522252320
jab
only see what you need

1522252391
jab
in C there is no way to do a type -> instance mapping either so the solution is to use some loosely guaraenteed mapping

1522252399
jab
like numbers or strings

1522252436
jab
so you would do: map.put("Position", Position{...}); and map.get("Position") as Position, but this is easier in C than zig

1522252449
jab
since there is no void pointer in zig?

1522252460
andrewrk
there's no way it's easier in c than zig

1522252469
jab
ideally it would be comptime where you can get the type back exactly

1522252499
jab
How would you do type->instance map?

1522252550
andrewrk
to do it with status quo zig, I would have all my Component-enabled structs have a `pub const component_id = 1;` where I would make each component have a unique number instead of 1

1522252558
jab
basically: getComponent(comptime T: type) T, where this function looks up T in a map

1522252565
andrewrk
or maybe I would just generate a random u32

1522252571
jab
gotcha

1522252573
jab
yeah

1522252601
jab
i'll write proof of concept

1522252659
andrewrk
std.HashMap should work fine for this

1522252718
jab
what would be the value of hashmap?

1522252726
jab
void *? :P

1522252764
andrewrk
a union

1522252779
jab
of all possible types?

1522252815
andrewrk
yes you would have to specify the set at compile time

1522252824
andrewrk
or you can do your void * strategy

1522252874
jab
if you go the union strategy, a union tag type could be used at the component id

1522252880
jab
as*

1522252909
andrewrk
yeah that's a good idea

1522252964
andrewrk
a hash kinda seems like overkill

1522252976
jab
yeah

1522253030
andrewrk
if a component is a union it would be pretty straightforward to have a list of components. if you don't have more than a dozen, a hash is not worth the overhead

1522253481
jab
this works:

1522253671
jab
no way to pass TagType to a function though

1522253737
jab
trying this:

1522254503
jab
hmm, nvm, comptime: @TagType(Component) works

1522254539
jab
should get a play.ziglang.com going :p

1522254769
GitHub191
[zig] bnoordhuis opened pull request #865: skeleton stage 2 support for 'zig build' (master...zig-build-stage2)

1522255257
andrewrk
jab, we definitely should. I'm thinking about what the simplest, yet secure, way to do that is

1522255725
jab
andrewrk: the only difficult part of these union stuff is turning it into a library. a user has to define the whole union type and how will the sepcific tagtype be passed to functions?

1522255755
jab
comptime T: type, comptime tag: @TagType(T), comps: []T) ?T

1522255776
andrewrk
the library user would have to provide the union as well

1522258022
jab
arraylist has no remove method?

1522258058
jab
just a pop()

1522258063
jab
arraylist is a stack

1522258081
andrewrk
jab, feel free to make a pull request

1522258096
andrewrk
the standard library is volatile until 1.0.0

1522258100
jab
:D

1522258970
jab
how would I get the tagtype at runtime of a union instance

1522258977
jab
I get that Union.field is a TagType

1522258993
jab
but what about the TagType of: Union { .field = {...} };

1522259144
andrewrk
hm I'm not following - can you show a bigger code snippet?

1522259178
andrewrk
oh

1522259185
andrewrk
@TagType(@typeOf(instance))

1522259249
jab
failing on line 81:

1522259366
andrewrk
pointer has no tag type

1522259375
andrewrk
@TagType(@typeOf(t).Child)

1522259412
jab
error: expected type '@TagType(Component)', found 'type'

1522259446
andrewrk
you're passing a type when you need to pass an instance of a type

1522259488
andrewrk
e.g. you need to pass Component.position, not @typeOf(Component.position)

1522259508
jab
there's no way to get "Component.position" from an instance?

1522259543
andrewrk
from an instance of the union? you can cast it

1522259569
andrewrk


1522259595
jab
the add() function takes a union instance, it shouldn't need a TagType passed a long with it since which tagtype it needs should be in the passed instance

1522259617
andrewrk
correct

1522259629
andrewrk
see above linked example

1522259636
jab
the TagType instance is not known generically

1522259647
jab
I basically tried @TagType(T)(t)

1522259678
andrewrk
on which line?

1522259684
jab
i erased it :P

1522259720
andrewrk
maybe you need to deref the pointer

1522259852
jab
hmm that works

1522259866
jab
but now it fails in a way i don't think a workaround is possible

1522259894
jab


1522259933
jab
i'mt trying to have the switch case be a TagType which needs to be known at compile time

1522259961
andrewrk
you can use an if statement

1522259967
jab
but when I add a component, it's a runtime component which could be generated. i need to look up the existing component with that TagType (if it exists) to remove it

1522260007
jab
the problem is i can't call it at runtime, it has to be comptime

1522260016
andrewrk
if conditions can be runtime

1522260031
jab
TagType is a comptime knowledge, right?

1522260050
andrewrk
the type is. the tag is runtime

1522260102
andrewrk
you can compare 2 union(enum) instance's tags with each other at runtime, which is what you're trying to do

1522260684
jab
ugly but it works:

1522260813
andrewrk
nice!

1522260847
andrewrk
I wouldn't even call it ugly. what I like about this is that there is no text substitution or macro weirdness. even though it's messing with types, it's all functions and if statements and easily understandable things

1522260861
andrewrk
you can look at any line of code and understand exactly what it does

1522260899
jab
true

1522260909
jab
i guess it's the interraction with the stdlib stuff

1522260926
jab
like i have to reappend the list after changing it since i get back values not reference

1522260978
jab
so, since structs cannot be passed by value it creates confusing interfaces: ArrayList's append has (t: &const T), but that reference is there only because the language doesn't allow passing by value

1522260995
jab
because in the function it does *new_pos = *t; copying it by value

1522261007
andrewrk
comps = if (self.bags.get(ent)) |item| item.value else std.ArrayList(T).init(self.allocator);

1522261010
jab
so semantically it disconnects

1522261026
jab
i like that

1522261057
andrewrk
I think the type of comps should not be nullable

1522261070
andrewrk
??x  is not always wrong, but it's always a code smell

1522261076
jab
so what about this interface:

1522261090
jab
andrewrk: good point, i agree

1522261129
jab
I see there there isn't a stack allocation, which is the purpose of not being able to pass by value

1522261132
jab
buuuuut

1522261136
andrewrk
jab, see

1522261140
jab


1522261151
jab
this function returns a T, not a &T which does allocate to the stack

1522261216
jab
yep

1522261231
andrewrk
it's high on my priority list

1522261316
jab
i think x.? should replace ??x

1522261320
jab
i'll submit an issue for that

1522261329
jab
if the consensus is *x should be x.&

1522261410
jab
x.& would be impossible on a nullable reference, right?

1522261414
jab
(??x).&

1522261417
andrewrk
correct

1522261426
andrewrk
yeah I think you have a strong case for .?

1522261430
jab
then x.? would throw a panic, but x.& wouldn't

1522261630
MajorLag2
andrewrk, is there a better way of doing something iff x is not null than using if(x != null) { ... ??x } ?

1522261909
andrewrk
if (maybe_x) |x| { ... }

1522261930
andrewrk
it works with while too

1522261937
andrewrk
and errors

1522262069
MajorLag2
ah, yeah, it didn't click that that would work with nullables.

1522262689
jab
if there was a x?. syntax then that would clash with x?.

1522262691
jab
x.?*

1522263204
jab
functions can be private, but not variables? i guess that makes sense in a C-esque way

1522263316
jab
@TagType isn't @tagType, and @typeOf().Child isn't @typeOf().child when naming convention suggests they should be

1522264151
andrewrk
function and variables have the same visibility rules

1522264159
andrewrk
if you're seeing something different then it's a bug

1522264202
jab
i can access this variable:

1522264208
andrewrk
@typeOf is against convention, and is the candidate to change. Convention is that a function that returns a type is capitalized

1522264210
jab
member*

1522264221
jab
Gotcha

1522264222
andrewrk
idk about the convention yet. there are some awkward things about it

1522264235
andrewrk
unfortunately the convention infects the language because of builtin functions

1522264275
andrewrk
that is not a variable; it is a field. See

1522264307
jab
what's funny is i can add a "pub" before fields but it doesn't do anything

1522264324
jab
yep, issue mentions that

1522264460
andrewrk
this issue is pretty low on my priority list

1522264472
jab
i've noticed in linux, init() is complimented with uninit()

1522264475
jab
yeah

1522264528
jab
but i like deinit more

1522264629
andrewrk
I think aiwakura is pushing for that to be renamed to giveItToMeBaby() and getOuttaTown() respectively

1522264661
jab
hahaha

1522264700
jab
what is the proper way to run through an iterator with next?

1522264704
jab
i've been doing while (true)

1522264714
jab
oh wait, while (next()) |item| {}

1522265319
jab
copying a slice like: *a = *b results in pointing to the same memory?

1522265328
jab
so only one should be freed by the allocator?

1522265456
andrewrk
the deref operator does not work on a slice

1522265524
jab
urm

1522265526
jab
a = b then

1522265560
andrewrk
a slice is {ptr, len} and a = b does this: a.ptr = b.ptr; a.len = b.len

1522265660
jab
that's what i thought. so should only deallocate one

1522268214
jab
there's no way to have a generic function without passing the type, is there?

1522268331
jab
func(comptime T: type=inferred, x: &T) { ... }

1522268475
andrewrk
fn foo(x: var) { ... }

1522268495
andrewrk
x can be any type. you can use @typeOf(x) in the type expression of the following parameters and return type

1522268556
jab
hmmm cool

1522268621
jab
variable length args?

1522268646
jab
is fn foo(x: var) comptime?

1522268651
andrewrk


1522268667
andrewrk
in your example, foo is generic, but x can be a runtime value (with a comptime known type)

1522268765
jab
is there a way to explode the args when passing to another function?

1522268794
andrewrk
yes, just pass the args

1522268825
andrewrk
like this:

1522268845
andrewrk
I'm considering ripping out var args and replacing it with tuples. I don't remember if I typed up an issue yet

1522268848
jab
heh

1522268853
jab
error: compiler bug: unable to call var args function at compile time.

1522268874
andrewrk
yeah that's one of the things that would be slightly easier with tuples

1522268876
andrewrk
that bug

1522268933
jab
fn new(comptime t: var, args: ...) @typeOf(t) { return t.init(args); }

1522268938
jab
playing around with writing that function

1522268963
andrewrk
wouldn't you rather do T.init(a, b, c) ?

1522268973
jab
true, but was just playing

1522268978
andrewrk
fair enough

1522268987
jab
creating contracts on init/deinit expectations

1522268989
andrewrk
you might find this repo interesting:

1522269168
jab
yeah hmm

1522270142
MajorLag2
that repo reminds me: wouldn't things be cleaner if namespace and struct were the same? they're almost entirely functionally identical.

1522271201
jab
Hejsil: yo

1522271369
Hejsil
Yo

1522271530
curtisf
Is there any hope in compiling Zig with mingw/cygwin? I didn't see documentation for it

1522272251
andrewrk
MajorLag2, that's an interesting idea

1522272418
andrewrk
curtisf, last I checked it built fine with mingw. we used to have travis CI do a mingw build but then the llvm pacman package broke

1522272449
andrewrk
curtisf,

1522274043
jab
can you check the existance of a function on a type at comptime?

1522274049
jab
like for say... var

1522274063
jab
if t: var t.foo() doesn't exist, use t.bar()

1522274505
Hejsil
jab, not a language features, but using type reflection you might be able to write comptime code that does this

1522274509
Hejsil
Related

1522274553
Hejsil
Or, well. I guess type reflection at comptime is a language feature

1522274682
MajorLag2
jab, sadly not yet. there isn't quite enough introspection. You can examin struct/union/enum members, but not things that merely exist in the struct/union/enum namespace.

1522274825
MajorLag2
that said, depending on your use case, you could do something like `struct { .has_foo: void, }` and in your comptime function iterate over the struct members for .has_foo. problems with that is you have to do a string compare by member name, but at least the field doesn't take up any space at runtime.

1522274876
andrewrk
jab, it's planned, but I don't think I made an issue for it yet

1522274927
andrewrk
I think this @reflect function is going to be nice

1522274963
jab
I like the potential of comptime stuff

1522274980
jab
can build really cool stuff, but i can see it moving to c++ compile time speeds

1522275021
jab
i can start sending pull requests once i get the build working on my mac. not sure how my libc stuff got fudged

1522275024
jab
i blame xcode

1522275035
andrewrk
jab, almost all comptime code execution can be cached

1522275064
jab
heyyyy

1522275069
jab
zig_cache/ will be sued

1522275071
jab
used

1522275074
andrewrk
it will!

1522275080
Hejsil
Wuuh!

1522276023
jab
no threading functionality?

1522276441
jab
man "Create an OpenGL library that does not depend on libc."

1522276465
jab
like mesa3d? that would be awesome but that's a massive project

1522277089
Hejsil
"Unable to determine Windows SDK path." but I'm building on linux :)

1522277106
Hejsil
This seems to happen when there is no libc_include_dir

1522277113
Hejsil
Not a very telling error message

1522277610
GitHub104
[zig] Hejsil pushed 1 new commit to master:

1522277610
GitHub104
zig/master 72ce146 Jimmi Holst Christensen: Fixed looking for windows sdk when targeting linux

1522277625
Hejsil
Much better

1522278674
MajorLag
appdir version of zig should now allow you to specify the C directories in your environment variables, making it slightly easier yet to use.

1522280288
andrewrk
jab, I'm working on threading in a branch

1522281263
jab
andrewrk: woah soundio is your project?

