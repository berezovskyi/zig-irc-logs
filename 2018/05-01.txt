1525134399
GitHub130
[zig] andrewrk pushed 3 new commits to master:

1525134399
GitHub130
zig/master 7c82286 Andrew Kelley: zig fmt: only some docs have doc comments

1525134399
GitHub130
zig/master 61a726c Andrew Kelley: zig fmt: comments in field decls

1525134399
GitHub130
zig/master 4cc1008 Andrew Kelley: zig fmt: error set decls

1525152685
GitHub39
[zig] andrewrk pushed 1 new commit to master:

1525152685
GitHub39
zig/master 3a8dc4e Andrew Kelley: zig fmt: line comments in struct initializer

1525154149
andrewrk
I just got all the behavior tests passing with new ptr deref syntax

1525154170
andrewrk
I used zig fmt to automatically update all the source from old ptr deref syntax to new ptr deref syntax

1525166216
alexnask
Andrew, is the syntax for pointer reform finalized?

1525166237
alexnask
I know syntax is the last thing we should worry about but I find so many sigils to be a bit onfusing

1525166342
alexnask
Perhaps confusing is not the right word actually, the pattern makes sense but I'm sure many people will struggle to get it and use [*] everywhere :p

1525166746
alexnask
Also, what do you think about having an additional @namespaceInfo() builtin that produces a []TypeInfo.Definition?

1525171557
alexnask
I think @typeInfo is finally done

1525171567
alexnask
let's see if appveyor and Travis CI agree :p

1525178321
GitHub66
[zig] Hejsil opened pull request #970: Fixed extern enums having the wrong size (master...extern-enum-size-fix)

1525182576
GitHub22
[zig] Hejsil closed pull request #970: Fixed extern enums having the wrong size (master...extern-enum-size-fix)

1525182581
GitHub111
[zig] Hejsil reopened pull request #970: Fixed extern enums having the wrong size (master...extern-enum-size-fix)

1525184895
andrewrk
alexnask, yeah it's the syntax in this comment:

1525184902
andrewrk
except I decided to use x.* instead of x.&

1525184907
andrewrk
do you have another suggestion?

1525184986
alexnask
Not really, I'm pretty fine with it as long as we have good docs, I just think it may confuse beginners.

1525185066
andrewrk
congrats on getting @typeInfo done. I'll have a look soon

1525185084
alexnask
I seem to remeber I saw some bug for comptime mem.eql(u8), am I safe to use it?

1525185094
andrewrk
yes

1525185098
alexnask
I'm writing an Interface library with @typeInfo

1525185119
alexnask
It will get better with @createType/@reify/w.e. but I think it will be pretty solid as is

1525185159
andrewrk
maybe you're thinking of

1525185177
alexnask
Something like:

1525185185
andrewrk
the problem is that checking if slices overlap requires ptrToInt which does not work at comptime

1525185203
alexnask
Ah, okay, it's probably what I was thinking about

1525185204
andrewrk
but right now we don't do any checking  so mem.copy will work fine at comptime and we'll make sure it continues to work when we solve #382

1525185248
andrewrk
where is MyVtable defined?

1525185265
alexnask
Right, didn't include that, it's just a struct with (optionally nullable) fn pointers

1525185318
alexnask
Also I'm probably missing an allocator param in init, although that depends on the storage policy, hmm

1525188775
alexnask
@andrewrk Is there any way to unpack varargs into a function call (that does not have varargs)?

1525190780
alexnask
error: operator not allowed for type '?fn(usize, []u8) void'

1525190785
alexnask
Trying to do == null

1525190790
alexnask
Is this a bug or intended behavior?

1525191705
andrewrk
bug

1525191723
andrewrk
alexnask, no, but I'm thinking with tuples we should have @call(function, args_tuple);

1525191740
alexnask
That would be good

1525191759
alexnask
I've hit on a weird error which (I think) is a bug

1525191778
alexnask
I'm trying to generate functions in a comptime context (through the anonymous struct idiom)

1525191797
alexnask
And I'm getting error messages like 'cannot store runtime value in compile time variable' inside the function bodies

1525191844
alexnask


1525191857
alexnask
Am I doing something a bit too magical? :p

1525191887
andrewrk
intToPtr does not work at comptime

1525191907
alexnask
The function body is not meant to work at compiletime

1525191912
andrewrk
oh right

1525191914
alexnask
I just want to generate the function at comptime

1525191949
andrewrk
one guess about what's going on:

1525191968
andrewrk
when I originally programmed the way that scopes work, I didn't think it was possible to put a function inside a function

1525191992
andrewrk
so we have bugs such as: compiler crash because inner function codegen tries to run outer function's defers

1525192009
andrewrk
it's possible that the inner functions think they're in the comptime scope from the outer function

1525192017
alexnask
Ok, I'll take a look at this specific case and try to fix it

1525192020
andrewrk
of course this is all going to be fixed, but right now, functions inside functinos is still an open issue

1525192033
alexnask
I think it's the only error left, the rest of the implementation seems to work well

1525192039
alexnask
Which is pretty good

1525192077
andrewrk
people are doing metaprogramming in zig way before I thought its metaprogramming features were ready

1525192099
alexnask
Well, @typeInfo and @field is pretty good already ;)

1525192102
andrewrk
:)

1525192185
alexnask
I mean, abstracting away all of that Interface stuff is something that I think would only be possible in C++ and Dlang (at least the way I did it)

1525192195
alexnask
So zig metaprogramming is not that shabby at all :P

1525192712
andrewrk
argh, it seems that std.atomic.queue is sometimes failing on CI. I've been running the failed test in a loop in gdb for 3 hours and I can't reproduce it

1525192735
andrewrk
maybe it's time to work on a race detector

1525192767
alexnask
I noticed it appveyor and travis both took a long time to complete that test on my PR

1525192774
alexnask
Though they didn't fail for me

1525192824
andrewrk
I wonder if it's just getting killed by CI because it's a little resource intensive

1525192830
andrewrk
I like that explanation because that means my code isn't broken

1525192854
alexnask
haha

1525192874
andrewrk
it wants to make 6 kernel threads and then watch them thrash and probably travis/appveyor have only 2 each

1525192927
andrewrk
anyone in here have experience with lock-free programming and want to check std.atomic.queue and std.atomic.stack?

1525193035
bodie_
hi

1525193040
andrewrk
hi bodie_

1525193054
alexnask
yo

1525193060
bodie_
watching the tetris vid.  wouldn't printf evaluate to an error if it fails, and the return type %void would be satisfied?

1525193075
bodie_
(but the compiler says the error is ignored)

1525193089
andrewrk
I think that video is over a year old and things have changed a lot since then

1525193115
andrewrk
that is in fact how it works now if you use std.io.getStdOut()

1525193156
bodie_
cool

1525193175
bodie_
do you guys have a preferred social hub, like a discord?  I'm thinking of picking it up a bit and will have questions

1525193181
bodie_
or is that IRC

1525193201
andrewrk
this channel is the best place for questions, feedback, and  discussion of zig

1525193201
bodie_
(nice language btw)

1525193205
bodie_
okay, cool.

1525193246
andrewrk
so far it's been very pleasant. I'm really happy with how nice everybody has been to each other

1525193251
andrewrk
and I'm hoping we can keep it that way as it grows

1525193268
bodie_
you'd better restrict it to Canadians only then ;)

1525193291
bodie_
j/p

1525193304
andrewrk
bodie_, what are you thinking about working on using zig?

1525193382
bodie_
Honestly I just stumbled back upon it because I was reading a little about higher-kinded types and noticed that I liked the "comptime" syntax a lot.  it resembles something I was attempting (without much success) with Go

1525193430
bodie_
I'm thinking of using it for a game / small engine

1525193438
andrewrk
neat, that's a good use case

1525193451
bodie_
I have some other requirements for some backend applications I will probably prefer Rust or Go for

1525193453
andrewrk
if your game is open source drop a link and I'll follow along

1525193460
bodie_
right on :)

1525193492
bodie_
it's nothing yet and I haven't allocated it any priority, but hopefully I will be able to pretty soon

1525193498
andrewrk
you're going to run into immaturity problems in zig that you wouldn't run into with go or rust, but if you're ready for that, then I think you're gonna have a great time

1525193516
bodie_
I

1525193528
bodie_
is that a similar story on windows?

1525193558
andrewrk
I've been using msvc to debug on windows

1525193594
bodie_
I didn't notice whether Zig has first-class functions or closures.  It seems like those would be a little tricky to manage memory for, especially generically

1525193607
bodie_
That still seems to be a problem for rust

1525193615
andrewrk
it gets the call stack correct, but I noticed a lot of variables are missing. This is the same problem as clang + linking with LLD, so if that community improves debugging then we get the benefits too

1525193618
bodie_
YOU get a Box and YOU get a Box and YOU get a Box!

1525193629
bodie_
I see

1525193655
andrewrk
here's the issue for closures:

1525193677
bodie_
Cool.  I assume you also don't have sum types?

1525193698
andrewrk
we do:

1525193706
andrewrk
see the union(enum) example

1525193757
andrewrk
is that what you meant by sum type?

1525193941
bodie_
Kind of, Rust enums are pretty similar but don't have the ability to do proper types as their members.  They're all tuples I think

1525193961
bodie_
I'm sure you could apply comptime to enum in zig, right?

1525194019
bodie_
the closures issue is pretty nice

1525194041
bodie_
are there any projects I could look at for a good intro to zig at the current iteration?

1525194532
bodie_
( andrewrk )

1525194564
bodie_
oh another thing I've had issues with in Rust is building on Windows wanting to compile packages that only have Linux build scripts

1525194574
bodie_
for shared lib imports

1525194580
alexnask
@andrewrk Btw, I managed to work around that issue with a small helper function

1525194592
alexnask
So the interface lib works now! Not bad :)

1525194638
alexnask
@bodie_ Enums work in comptime yes

1525194669
alexnask
@bodie_ The only things that don't work are inline asm (-> syscalls), pointer casting and some other low level stuff

1525194671
alexnask
(in comptime)

1525194688
bodie_
nice.  I assume it chains right?  like you could have a whole tree of comptime types evaluating

1525194698
alexnask
Yes, no issues there

1525194706
bodie_
could you also use comptime'd enums to support heterogeneous lists that way?

1525194712
alexnask
Types are just expressions at comptime

1525194741
alexnask
@bodie_ Tuples are a planned feature (replacing varargs)

1525194743
bodie_
instead of say, vec T... trying to think through how this would look

1525194782
alexnask
Well, you could make a union (rust enum/ADT) of  the types you need and require a slice of that type

1525194828
alexnask
In theory, you could use comptime varargs and check the types yourself but they are broken atm (and probably will be removed from the language)

1525194835
bodie_
hm

1525194865
alexnask
As for examples, I'm not sure what exactly you are looking for, I have some cool (but pretty confusing) metaprogramming code if you want to check that out :P

1525194884
bodie_
that would be fun.  I'm looking for cross-platform opengl game stuff

1525194893
bodie_
maybe concurrency

1525194931
alexnask
You should be able to call into OpenGL really easily using @cImport()

1525194963
alexnask
I have some code that does that but it's windows-only (with a nice OpenGL loader based on metaprogramming too)

1525194972
alexnask


1525194973
bodie_
why's that?

1525194999
bodie_
last question, should I go with the emacs or the vim package?

1525195002
alexnask
That code is pretty confusing but it showcases some metaprogramming with the new @typeInfo builtin

1525195008
bodie_
nice, ok

1525195015
bodie_
sorry *VS Code

1525195018
bodie_
not vim

1525195033
bodie_
also, has anyone played with wasm?

1525195055
bodie_
it

1525195061
alexnask
Well, my goal was to automatically load GL functions from a struct like:

1525195075
alexnask
I'm using sublime text, so I couldn't tell you ;)

1525195088
bodie_
that's just syntax highlighting, right?

1525195094
alexnask
Pretty much

1525195182
alexnask
For OpenGl, you should just be able to @cImport(@cInclude("gl/gl.h")) and get all GL types + functions

1525195272
alexnask_
My ISP sucks -_-

1525195296
bodie_
wow, @typeinfo looks nice

1525195345
alexnask_
It's pretty nice ^^

1525195346
bodie_
this metaprogramming gist looks a bit like an implementation of runtime generics.  is that right?

1525195353
alexnask_
It's not available on master yet though

1525195355
alexnask_
Yes

1525195364
bodie_
like Go's interfaces or Rust's trait objects

1525195368
alexnask_
Right on

1525195388
alexnask_
With a choice of storage policy (just sbo_storage for now)

1525195407
alexnask_
+ optional functions

1525195423
bodie_
so are you guys planning to add such a type to zig?

1525195440
bodie_
or maybe just as a library

1525195463
bodie_
I find runtime dynamic types pretty annoying but I recognize that they are necessary.  I think it's a sore spot from having no other choice in Go for the last few years

1525195465
alexnask_
That's my implementation

1525195479
alexnask_
The idiomatic way to do it is much different

1525195484
bodie_
oh?

1525195490
bodie_
what's that, c-style?

1525195507
alexnask_
People usually make a vtable type that they insert as a field in their implementation types

1525195545
bodie_
This is like .... C-style evil OOP interfaces

1525195548
bodie_
you're a monster

1525195563
alexnask


1525195583
alexnask
Allocator here is the "vtable" type

1525195677
alexnask_
Basically they insert the vtable into the implementation as a field and use the field pointer to get back to the implementation struct's pointer

1525195699
alexnask_
Well, C-style evil OOP interfaces is how everyone implements them under the hood ;)

1525195718
bodie_
lol

1525195738
alexnask_
At least in my version the implementation is separate from the interface type ;)

1525195755
alexnask_
(it doesn't need to know about the interface at all)

1525195834
alexnask_
So  I guess that makes me a bit less of a monster :P

1525195925
bodie_
so MyInterface.init constructs a new interface wrapper w/ the vtable from FooReader

1525195944
bodie_
right?

1525195947
alexnask
Yes

1525195958
alexnask
It basically generates the vtable at comptime

1525195976
alexnask
Gets a pointer to it (in static binary memory) and stores it

1525195984
bodie_
ahhh, init is a comptime function

1525195987
alexnask
Then the storage policy takes care of holding the object

1525195990
alexnask
Nope ;)

1525195993
alexnask
That's the magic

1525195995
alexnask
:p

1525196005
alexnask
'.vtable = &comptime make_vtable(VTableType, ImplType),'

1525196024
alexnask
This takes a pointer to a comptime evaluated function which returns a vtable

1525196041
alexnask
That forces the compiler to store the vtable in static memory

1525196070
bodie_
how did you come up with that idea?

1525196088
alexnask
I saw that technique used in C++ in some CPPCon talk

1525196100
alexnask
Not very original :P

1525196105
bodie_
works for me

1525196120
alexnask
And I kinda assumed the compiler was going to do the right thing with that expression

1525196122
bodie_
doesn't C++ have virtual classes though? lol

1525196135
bodie_
or was that implementation-side

1525196145
alexnask
Yes, C++ has virtual methods

1525196161
alexnask
But the presenter basically made his own version

1525196167
bodie_
featuring "duck-typing"

1525196176
alexnask
To decouple the interface/implementation types + get whatever storage policy you need

1525196194
bodie_
I'm not following the bit about storage policy and allocation

1525196220
alexnask
Well, the storage policy simply takes care of providing us the pointer to the implementation object

1525196237
alexnask
You could, for example, have a non-owning storage policy which just takes the pointer and stores that

1525196264
alexnask
The SBO storage policy copies the data into a buffer (if it fits) or allocates on the heap and copies the data there

1525196311
alexnask
Another example would be an inplace-only storage policy (a single buffer, where the implementation

1525196370
bodie_
in other words, Box

1525196390
bodie_
er, Box would be the first example

1525196412
alexnask
Box is always a heap allocation, isn't it?

1525196417
alexnask
But yes, kinda like box

1525196429
bodie_
so the sbo_storage object owns its own allocated memory for the boxed value and manages its lifecycle

1525196441
alexnask
Right

1525196461
alexnask
My plan is to add a nonowning_storage and an inplace_storage

1525196469
alexnask
Then the user can define theirs if they need to

1525196561
bodie_
is the purpose of this to make mockable APIs?

1525196567
bodie_
I'm not necessarily following

1525196579
bodie_
it seems like a lot of legwork in a direction that is kinda the opposite of what Zig looks like it's for

1525196591
bodie_
just curious, not trying to attack

1525196595
alexnask_
Well, it is just an extra configuration point

1525196601
alexnask_
Right, no problem ;)

1525196611
alexnask_
If you need a non-owning interface

1525196625
alexnask_
And you know the object will always be alive while the interface object is alive

1525196628
alexnask_
Then you can do that

1525196659
alexnask_
If you want to store the interface objects and gurantee that your implementation objects fit into it, you can do that

1525196689
alexnask_
If you just want to heap allocate the implementation object and keep a pointer to it, you can do that too

1525196693
bodie_
Zig++ :P

1525196732
alexnask_
I'm not too keen on interface types either, tbh, it just seemed like an interesting application for metaprogramming since we don't have traits

1525196753
bodie_
well it's definitely cool

1525196777
bodie_
I'm just evaluating it as an outsider who's trying to understand how people think about design in zig

1525196797
bodie_
um, on that note, what about type constraints?  comptime T where T has methods ...

1525196798
alexnask_
Well, make it clear and simple is the general idea

1525196820
alexnask_
@bodie_ You can use @typeInfo or other metaprogramming builtins to check for those

1525196833
bodie_
gotcha, but it's still call-time

1525196838
bodie_
in the sense of C++ templates

1525196850
alexnask_
Yes

1525196866
bodie_
I guess you could do "types for types" somehow with a comptime fn....

1525196880
bodie_
hold on while my mind unravels

1525196888
bodie_
ok, better now

1525196895
alexnask_
I'm not too sure I understand what you mean :P

1525196921
bodie_
like compile-time generics in Rust (I've been thinking about Rust a lot recently sadly)

1525196987
bodie_
I guess I was thinking, have a struct that defines the methods you want on your interface, and then have a comptime method that checks your "implementing type" for those methods, but eventually you're going to barf somewhere down in the comptime elaboration of the fn for the implementing type

1525196987
alexnask
Can you link me to an example? Not too familiar with rust beside the basics

1525197000
bodie_
like if Duck has Quack and you call Quack inside your comptime fn, you'll fail if you pass Dog

1525197007
bodie_
but not until you hit Quack

1525197035
bodie_
but if you had a macro that checks to make sure T implements Quack, before trying to elaborate the CallQuack fn, then you would fail

1525197049
bodie_
CallQuack(IsDuck(Dog)) or whatever

1525197074
bodie_
IsDuck would also have to return its passed type argument in the success case

1525197111
bodie_
alexnask, basically traits are just compile-time interface types that you use in your template

1525197113
MajorLag
alexnask, does @typeIno know about a type's namespaced fns? If so that's basically already done.

1525197184
bodie_
I'm just thinking you still have to manually check the comptime type's methods when you elaborate, so why not just let it fail deep inside the graph

1525197192
bodie_
unless you have a type verification macro

1525197194
bodie_
just an idea

1525197214
bodie_
I'll stop rambling ^_^

1525197319
MajorLag
well that's what I was thinking would do it: have a fn that iterates over a type's namespaced fns and compares them to a desired set of fns.

1525197441
MajorLag
you can do that with members currently, but not namespaced stuff. So yeah, your only option would be to call it later and let the compiler complain.

1525197460
MajorLag
but that doesn't help if you want to change behavior based on the passed in type

1525197790
bodie_
MajorLag, what do you mean by namespaced fns?  Like methods in another language?

1525197820
bodie_
Oh, I see.  "Methods" could be functions defined only in the scope of the enclosing struct, or they could be actual fields of the struct

1525197832
bodie_
"namespaced fns" must be the former

1525198032
MajorLag
yeah, that's what I mean. They're normal every-day functions, but they exist in the namespace of a struct/union/enum, and have the one special property of using `instance.func()` syntax to pass the struct instance as the first argument.

1525198229
bodie_
that's just like Go method sugar

1525198618
alexnask
@MajorLag @typeInfo knows about all definitions within the scope of the type

1525198646
alexnask
Ah, I thought traits were runtime polymorphism, I didn't realize the where thingy was a compile time thing

1525198646
andrewrk
bodie_, there's an emacs mode

1525198823
andrewrk
bodie_, my opinion on metaprogramming is that it's good to be skeptical about it. there are times when it's the best solution, but it can be tempting to abuse it

1525198827
alexnask
@MajorLag I'm already using that to generate vtables from arbitrary types (looking into the namespaced funcs etc.)

1525198858
andrewrk
for example, a programming language on top of assembly is metaprogramming, but it's something we've come to agree upon certain standards and there is a lot of tooling that goes around it

1525198880
andrewrk
on the other hand, "shallow metaprogramming" - where you use it just for 1 use case, I think can be easily abused

1525198903
andrewrk
often a little bit of verbosity or even redundancy can be ultimately better for maintenance

1525198931
andrewrk
that said, if metaprogramming can prevent footguns in practice, it's a pretty good justification

1525200738
bodie_
alexnask, weirdly, traits are both

1525200754
bodie_
they are adding a "dyn T" syntax to distinguish.  it's very confusing at first

1525200772
alexnask
Hmm, TIL

1525200800
alexnask
When you use them as a function argument, do they always work as runtime polymorphism?

1525200818
alexnask
And using them in where clauses forces compile-time checking?

1525200843
bodie_
it's syntax dependent, I'm still not quite clear on it, and the pain of rust types is making me not want to gitgud at it

1525200848
alexnask
Or does the compiler decide which functions are going to use them as vtables and which are just going to be specialized?

1525200864
alexnask
Haha, fair enough :)

1525200901
bodie_
I think it depends on the type signature

1525200927
bodie_
of the declaration

1525200931
alexnask
Are you @binary132 on github btw?

1525200933
bodie_
yes

1525200964
alexnask
Ok, good to know, I answered your comment on the namespaced functions, let me know if you need any clarifications

1525201018
bodie_
excellent example!

1525201024
bodie_
are you using Zig for games?

1525201040
alexnask
I'm planning on writing a 4kb intro with it

1525201043
alexnask
So kinda :P

1525201045
bodie_
nice

1525201053
bodie_
anyone using it with libjit?

1525201075
alexnask
Not as far as I'm aware

1525201082
bodie_
lua bindings?

1525201087
bodie_
I guess you can just use anything from the C world

1525201095
alexnask
Then again, since you don't really need to write bindings on C libraries, someone may as well be using it

1525201131
alexnask
Hand-writen bindings are only required if you want a more idiomatic zig layer over the C calls

1525201164
alexnask
Or for particularly involved translations (think windows header bindings, even there the changes you need to get up and going are minimal)

1525202269
andrewrk
arguably we wouldn't even need bindings if C let you annotate more type information - such as non nullable pointers

1525202449
alexnask
Do we parse GCC style __attribute__?

1525202468
andrewrk
yes

1525202512
andrewrk
we  support the nonnull attribute on parameters, so one option is improving .h files to include this attribute

1525202542
andrewrk
the attribute is for parameters only - it cannot describe types generally

1525202957
bodie_
how well does this doc still reflect intent / reality?

1525202974
bodie_
maybe an andrewrk question

1525202994
bodie_
in particular, having a good consistent build system that is compatible with windows is really important.

1525203003
bodie_
being able to grab C deps, etc

1525203016
bodie_
or even using zig to build a whole C / C++ project

1525204387
andrewrk
bodie_, there is some proof of concept of the build system, but it's not ready to build C/C++ projects cross platform yet

1525204405
andrewrk
the planned work in that link is all still planned

1525204889
bodie_
cool :)

1525204907
bodie_
andrewrk, one last query.  do you use GTD or some other planning system?

1525204947
bodie_
I'm working on something for myself to use but it's a bit of a chicken-and-egg problem.  I have been using org-mode with pomodoro with varying success

1525204980
andrewrk
what's GTD?

1525204993
andrewrk
this?

1525205054
andrewrk
I mostly just try to organize my life so that I can squeeze in zig work in between my full time job and maintaining my (happy!) relationship with my girlfriend

1525205088
andrewrk
someday soon though I hope to work on zig full time and get funded via donations

1525205089
bodie_
haha, my third kid was due yesterday, so managing time is always a critical challenge.

1525205119
bodie_
yeah.  it would be neat if you could get sponsored by a company that would see its utility

1525205121
andrewrk


1525205141
andrewrk
btw to other contributors - you are welcome to have your own donation links - I'll even put them on ziglang.org

1525205197
andrewrk
I think company sponsorship will happen eventually

1525205206
andrewrk
at some point zig will be just too good to ignore :)

1525205754
bodie_
If I start making good use of it I'll be sure to pitch in :)

1525205900
andrewrk
I'll never sell to a company though. zig will always be free and open source software that is motivated by the open source community

1525205957
andrewrk
that will always be a weakness and a strength - weakness because we don't have $$$ and strength because our motivations are pure

1525206023
andrewrk
bodie_, in more direct answer to your planning question - for zig issues we have milestones. every issue is assigned a milestone (except ones that are brand new)

1525206034
andrewrk
the milestone is priority

1525206059
andrewrk
however, at least up until 1.0.0, zig is coordinating releases with LLVM. So when LLVM 7.0.0 is released, 1 week later zig will release 0.3.0

1525206083
bodie_
I was asking more personally since I really respected the level of detail and organization of your overall structure

1525206100
andrewrk
ah. thanks for the compliment

1525206162
bodie_
I happen to be interested in personal project management / optimization techniques

1525206167
bodie_
not great at it myself

1525206188
andrewrk
for me I've vowed to only use zig for my own open source projects from now on

1525206209
andrewrk
and I have a lot of open source stuff I want to build... so I better get zig to a reasonable level of maturity!

1525206251
bodie_
cool, do you feel it has good support for web-facing applications at this point?

1525206277
andrewrk
here's the issue for that:

1525206303
andrewrk
I'm actively working on a proof of concept M:N threaded  non-blocking I/O HTTP server

1525206382
andrewrk
short answer is: no

1525206717
bodie_
how about udp and tcp?

1525207162
andrewrk
I mean we have access to the underlying OS APIs

1525207174
andrewrk
it's a question of how much is properly abstracted

1525207188
andrewrk
I haven't done the networking abstractions for windows yet

1525207198
andrewrk
and you can always use C libraries

1525207203
andrewrk
including libc

