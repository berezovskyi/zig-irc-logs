1541727989
c15ade4
its cool how you can watch the livestreams a bit later

1541727991
c15ade4
semi live stream

1541728486
c15ade4
andrewrk: just a warning, i think you made a slight mistake at the beginning

1541728499
c15ade4
Im not sure you intended the camera to be active while the countdown was on

1541732725
daurnimator
Where are std lib docs?

1541733424
daurnimator
andrewrk: watching your stream now

1541733440
daurnimator
andrewrk: clone2 is just fork with extra flags.

1541733473
daurnimator
andrewrk: newer platforms don't have a fork syscall. you're meant to use the clone2 syscall instead.

1541733491
andrewrk
daurnimator, that's really good to know, thanks

1541733513
andrewrk
std lib docs don't exist yet

1541733555
daurnimator
andrewrk: there are many syscalls that have gained an extra flags argument as time goes on. newer arches don't get the old syscall without the flags argument.

1541733802
daurnimator
andrewrk: note the actual kernel implementation of fork:

1541734331
daurnimator
andrewrk: also I wanted to get a bit more about zig's coroutine feature and perhaps share some of what I hope for

1541734366
daurnimator
andrewrk: IMO a good coroutine implementation needs to avoid the "red function/blue function" issue (

1541734422
daurnimator
which is essentially that a non-async function needs to be able to call an async function

1541734460
daurnimator
--> what is zig's current status/thinking on that?

1541734686
andrewrk
daurnimator, how would that work with needing to suspend? would functions secretly be generated as coroutines?

1541734707
andrewrk
most coroutines need access to an event loop object

1541734716
daurnimator
andrewrk: so there's a few approaches:

1541734722
andrewrk
I have a lot of bones to pick with this red/blue function article

1541734734
daurnimator
1. if you try and yield() and you're called from an non-async function. it throws an error instead.

1541734785
andrewrk
also - this conversation is interesting to me but I have some household duties at the moment. I hope you stop by during the day soon when I can give you more attention

1541734798
daurnimator
this can be helpful if you can write a function like so: async fn foo(x) { if (x > 42) { suspend wait(); } else { return compute() } }

1541734812
daurnimator
i.e. a function that only

1541734829
daurnimator
that can be helped along by a function `is_suspendable`

1541734924
daurnimator
2. construct an event loop

1541735004
andrewrk
I have a lot of thoughts on this

1541735057
daurnimator
2. can be combined with 1.: fn foo() { looptype loop; if (@isSuspendable()) { loop = mainloop } else { loop = newLoop(); } loop.addJob(fooJob); if (!@isSuspendable()) { loop.runUntilEmpty(); } }

1541735087
daurnimator
(sorry for pseudo-syntax. I don't know zig much yet so I'm sort of combining all sorts of things together)

1541735296
andrewrk
check the logs tomorrow and I'll have a thoughtful response for you

1541735300
daurnimator
andrewrk: k :)

1541735308
daurnimator
andrewrk: our time zones don't match up very well

1541735491
diltsman
Given this code: const vector_table align(4) section(".vector") = VectorTable.{.initial_sp_value = 0x20100000,.reset = _start};

1541735503
diltsman
I get this in the binary: 82b00846 01910090

1541735505
diltsman
Any ideas?

1541735539
diltsman
This is the struct definition: const VectorTable = packed struct.{initial_sp_value: U32,reset: fn () void};

1541736200
diltsman
Why wouldn't I see some bytes that look vaguely like 0x20100000?

1541743240
andrewrk
diltsman, that output looks surprising to me

1541744209
hryx
andrewrk, just watched (and enjoyed) the stream video. I didn't know you're doing weekly streams!

1541744759
andrewrk
hryx, yep, I have the older ones saved here:

1541744765
andrewrk
some are better than others

1541744816
andrewrk
I recommend: * Allocators & Memory Management * Compile Time Code Execution * "Hello World" x86 Kernel

1541744843
hryx
rad. I'm looking forward to those

1541767146
DutchGh0st
does the compiler run on arm?

1541767179
DutchGh0st
I downloaded the LInux 0.3 compiler, on my raspberry, but it cant run it..

1541767397
nbjoerg
pre-built is x86_64 only

1541767470
DutchGh0st
mhh okey, how do I build for arm then?

1541767486
nbjoerg
build from source?

1541767490
DutchGh0st
I guess

1541768045
DutchGh0st
mh, bad luck at first try: " llvm-c/Core.h: No such file or directory",

1541768073
DutchGh0st
I have gcc 8.2.0 and clang 7.0.0 installed, but I dont know how this all works ^^

1541771674
diltsman
andrewrk, it looks odd to me, too.  The only other thing that the linker puts in that section is a while(true) loop for _start.  It appears mostly correct (bn. 8000e in there twice...)

1541771704
diltsman
Dumping .text seems to think that the symbol at 00080000 is <panic>, though I don't know where that is coming from.

1541772156
euantor
DutchGh0st: Probably best to read the CI script for Linux:

1541772180
DutchGh0st
is there a String implementation in stdlib?

1541772183
euantor
It installs all the dependencies required to build on x86_64 and then builds, you will need the same dependencies for ARM

1541772185
DutchGh0st
Im making one currently...

1541772624
daurnimator
DutchGh0st: "String implementation"?

1541772631
DutchGh0st
dynamic String's

1541772643
daurnimator
DutchGh0st: how is a string more than a slice of u8?

1541772660
DutchGh0st
well, you cant push onto a []const u8

1541772663
DutchGh0st
or []u8

1541772704
DutchGh0st


1541772917
diltsman
andrewrk, I had to export the vector_table symbol.  I wouldn't think that would be necessary, since the .vector section is like this in the linker script: KEEP(*(.vector))

1541773138
MajorLag
DutchGh0st, ArrayList(u8) is  basically what you're describing.

1541773186
Hejsil
There is also Buffer:

1541773372
DutchGh0st
I suppose hahahaha

1541773372
diltsman
andrewrk, it seems to be working now.  The issue was that the vector_table symbol was not being exported (not certain why I needed to declare it export).  I declared it export, had to change the types of the vector table entries to be C ABI compatible, then recompiled.  It had been placing the panic handler at the location of vector_table.  Still not certain why I had to export it even though the section has KEEP in the linker script.

1541773648
daurnimator
DutchGh0st: I'm used to languages with immutable strings, so I wouldn't even expect that as part of a string library!

1541773672
DutchGh0st
Immutable Strings...mhh

1541773697
DutchGh0st
I think extend() and push() are essential to a String

1541773747
DutchGh0st
why? well, if the capacity is large enough, why would't you be able to just push and extend? creating a new string, allocating enough space AND then copying everything over seems really expensive

1541773791
daurnimator
DutchGh0st: because with immutable strings you can reference count them. as well as storing other data along side such as hashes, utf8 validity, etc.

1541773804
DutchGh0st
now, sure, I also need to do that, but a

1541773836
DutchGh0st
Just put reference counted struct around a mutable String

1541773863
DutchGh0st
and provide acces to it using like "getRef()" or "getMut()", which would bump the refcount

1541773891
Hejsil
DutchGh0st, Immutable string uses a different data structure from mutable ones, so they don't require a copy on append

1541773897
Hejsil
Normally they do at least

1541773907
Hejsil
"append"

1541773934
daurnimator
DutchGh0st: immutable strings can also more easily use data in the data section of your executable etc.

1541773949
daurnimator
anyway. different strokes for different folks

1541773960
Hejsil
It really depends on the problem

1541773963
DutchGh0st
oh it more keeps track of the little strings, but all those little strings may on different places in memory, Hejsil?

1541774011
Hejsil
I'm not 100% sure on the datastructure. It tends to be some kind of tree of cache sized blocks i think

1541774020
daurnimator
DutchGh0st: now you're talking about a rope...

1541774033
Hejsil
But yea, you'll get memory in different places

1541774037
DutchGh0st
heh ^^

1541774053
Hejsil
But an allocator could fix a lot of cache issues with such a data structure

1541774089
DutchGh0st
How did you read my mind haha

1541774111
DutchGh0st
I just wanted to ask "but what if you Iterate, don't you get lots of cache misses"?

1541774120
Hejsil
:)

1541774170
Hejsil
Different tools for different problems. Sometimes you don't want shared strings, and the copy would cost more than the cache miss

1541774183
Hejsil
shared mutable strings*

1541774189
daurnimator
and now you're asking about gap buffers. possibly without realising it

1541774204
daurnimator
are you familiar with

1541774271
Hejsil
If you're asking me, then I'm not

1541774326
Hejsil
I

1541774330
Hejsil
I've*

1541774364
DutchGh0st
No, but the triangle thingy makes sense actually

1541774654
DutchGh0st
so daurnimator, what language(s) do you come from ?

1541774711
daurnimator
DutchGh0st: Lua, C, JS, Haxe, (going back a while:) Actionscript

1541775678
DutchGh0st
mh, the correct way to get an iterator of *T and *const T out of an ArrayList(T), is trough list.toSlice() ?

1541775724
DutchGh0st
and then using `for(..) |item| {}` on the slice?

1541777087
presiden
speaking of gap buffer,

1541780446
andrewrk
DutchGh0st, you might have better luck cross compiling for arm rather than trying to build zig on arm

1541780463
DutchGh0st
I figured

1541780493
DutchGh0st
but that is sad, because I like the vim colorscheme I have on my raspberry, its nice than the one I currently have in vscode...

1541780507
DutchGh0st
so I wanted to use vim to write in haha

1541780586
andrewrk
diltsman, ah right. if you don't export something, it doesn't go into the object file

1541780633
andrewrk
unless you (directly or indirectly) depend on it by something that is exported

1541782800
andrewrk
diltsman, I do think that it should be possible to export a packed struct. I'll open an issue for that

1541782812
andrewrk
or rather, export a variable whose type is a packed struct

1541782922
andrewrk
wait, that already works

1541783162
andrewrk
diltsman, I just tried your example, the only change being to add `export` in front of `var` and it compiles for me

1541806732
presiden
how do you declare an array which size is calculated from a function that can be computed at compile time?

1541806806
presiden
let say, I have fn foo(n: u32) u32 { n+42 /* or some complex calculation */ }

1541806840
presiden
and I want var arr: [foo(10)]bool = undefined; for example

