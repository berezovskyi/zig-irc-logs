1524183736
MajorLag
yeah, it's a tweening library

1524184762
MajorLag
...did I misunderstand somethig? isn't 0.2.0.cc35f085 supposed to have @field?

1524184932
MajorLag
oh nevermind, I think I extracted the wrong build accidentally

1524185298
MajorLag
works as advertised.

1524191370
relatingdata
in zig what is the way of declaring the constant C++ array of constant strings like    const (char *) const months[12] = { "Jan", .... ,"Dec"};  ?

1524191621
MajorLag
`const months = []const []const u8{ "Jan", "Feb", ... };`

1524195187
relatingdata
Thanks :-) easier on the eye too :-)

1524205295
GitHub10
[zig] andrewrk pushed 1 new commit to master:

1524205295
GitHub10
zig/master 6e57243 Andrew Kelley: zig fmt: preserve comments in front of test blocks...

1524205430
heakins
OK now my AES-128 implementation can encrypt 155MB/s compared to 212MB/s for mbedTLS... getting closer

1524207425
GitHub118
[zig] harryeakins opened pull request #935: Improving throughput test (master...improving_throughput_test)

1524220949
alexnask
Are there any docs on async/promises?

1524221003
alexnask
Nvm I'll look into the coroutines tests

1524221304
alexnask
What allocator is used when none is given to async?

1524222964
Hejsil
alexnask, I haven't done anything with coroutines, but I would guess that it would use the parent async functions allocator

1524222993
Hejsil
Aka, you have to provide an allocator if you're doing an async all from a non async function

1524223195
alexnask
Right, makes sense

1524232057
alexnask
Can I declare a comptime constant at global scope that will not get included in the binary?

1524235009
Hejsil
alexnask, if it isn't used at runtime, then it isn't compiled into the binary

1524235052
Hejsil
And for things like: const a = 2; fn a() u64 { return a; }, Im pretty sure the optimizer will take care of that

1524235208
alexnask
Right, good to know, I thought defining consts in global scope forced them into the binary

1524235233
alexnask
I got around my usecase a different way (that uses @field) anyways :)

1524235297
andrewrk
alexnask, I'm doing a proof of concept on a bunch of concurrency stuff and I'll write docs soon

1524235680
alexnask
Pretty nice, I just use a struct with function pointers (+ a global instance named gl) and a func that automatically loads all of them from OpenGL

1524235684
alexnask
Works like a charm

1524235749
andrewrk
alexnask, nice, is the code published somewhere?

1524235768
andrewrk
on windows, right?

1524235787
alexnask
Not yet, I guess I will upload it at some point

1524235791
alexnask
Yup it's on windows

1524235823
alexnask
This is basically it though:

1524235825
alexnask
Nice and simple

1524235846
andrewrk
oh wow that's beautiful

1524235954
andrewrk
alexnask, mind if I post this on twitter?

1524235956
alexnask
I'm going to work on @reflect/@reify this weekend btw

1524235961
alexnask
Ofc not, go ahead :)

1524235984
alexnask
Would you prefer that I delete all the current @typeId etc functions or should I make them post a deprecation warning?

1524236033
alexnask
I'll also make a std.meta package that exposes them like before so basically @<reflection_func> -> std.meta.<reflection_func>

1524236052
alexnask
(That will obviously use @reflect behind the scenes)

1524236137
andrewrk
alexnask, `comptime` in front of `const` is redundant

1524236148
andrewrk
maybe I can make a compile error for this

1524236159
alexnask
TIL

1524236186
andrewrk
or rather, it's equivalent to putting the comptime in front of the initializer expression. but @memberName is always comptime so that is redundant

1524236255
alexnask
Right, got it, I thought const meant that the value was always present at runtime while comptime forced it to only be used in a comptime context

1524236257
andrewrk
is wglGetProcAddress expecting a null terminated string?

1524236274
alexnask
Yes, I shpuld probably ++ []u8 { 0 } right?

1524236293
andrewrk
I believe you can simply change "gl" to c"gl"

1524236310
andrewrk
otherwise what you said should work fine

1524236338
alexnask
The compiler doesn't complain with c"gl", nice

1524236557
alexnask
Right, it appears I still need to add the null byte

1524236565
alexnask
Even with c"gl"

1524236599
andrewrk
ah ok. so zig decided that &const u8 and []const u8 would be resolved to []const u8, ignoring null terminators

1524236607
andrewrk
this will be solved with pointer reform

1524236628
alexnask
Here's a new screenshot if you want it ;)

1524238530
andrewrk
MajorLag, I'm happy to take over the std.os.time PR from you and do whatever needs to be done to get it merged this weekend

1524238535
andrewrk
thanks for spearheading that work

1524238572
andrewrk
I looked into the aux vector thing on linux too; I think I can make static linux binaries use the vdso

1524239185
MajorLag
Cool. I'd be really surprised if darwin works on the first attempt. If it weren't for the merge conflict CI could have helped me get that right first.

1524239208
MajorLag
How would that work w/ vdso?

1524240320
alexnask
std.mem.eql appears not to be working at comptime

1524240376
alexnask
Nvm, I think it's not std.mem.eql

1524240777
andrewrk
MajorLag, there's an "auxilery vector" given to programs, even static ones, which contains the address of the vdso. so then you just have to find the function address and jump to it, or something like that

1524241131
MajorLag
yeah, that's how it works. It's an elf image, so you have to do a lookup in the symbol table. What I mean is, how is the compiler doing that? vdso may or may not exist at runtime. Or did you just mean adding support for vDSO to os.time? That shouldn't be too tricky, though there is the problem of first determining if vDSO is available or not.

1524241233
andrewrk
I mean adding support in the std lib for accessing the auxilery vector, and then yes having std.os.time use the vdso, if available

1524241336
alexnask
I hate WinAPI so much >.<

1524241490
MajorLag
anything in particular?

1524241961
alexnask
I'm struggling to find any parts I don't hate :p

1524242046
andrewrk
I think the audio api is better than linux

1524242054
andrewrk
that's a pretty low bar though

1524242065
alexnask
The one that triggered me right now is all the juggling to create a rendering context, then load OpenGL functions just to make a modern OpenGL enabled rendering context

1524242079
andrewrk
I would be curious to see a minimal example

1524242080
alexnask
Just give me the best version of OpenGL you can handle man :P

1524242135
andrewrk
I wonder if a cross platform abstraction for creating a window + opengl context makes sense to be in std

1524242167
alexnask
Only if nice OpenGL bindings are also available

1524242178
alexnask
But then people would ask for sound and inputs too etc

1524242184
alexnask
And in the end you are just remaking SDL

1524242225
andrewrk
true. I think we just need to have a great package manager, and trust users to create high quality packages

1524242293
alexnask
Right, the package manager would be great

1524242393
andrewrk
working on it! self-hosted compiler is underway, plus I have some networking proof of concept code working

1524243409
MajorLag
oh, yeah, win32 kind hates opengl > 1.1. Otherwise I have pretty much the oposite opinion and find Win32 API makes a lot more sense to me than posix.

1524243464
MajorLag
but posix is a pretty low bar too, I guess.

1524243829
MajorLag
as far as the context thing, what casey does in hmh is create a whole new window and opengl context just for loading extensions, then throw them away when he's done.

1524243889
MajorLag
alexnask:

1524263021
alexnask
@MajorLag I do something similar

1524265588
GitHub145
[zig] tiehuis pushed 2 new commits to master:

1524265588
GitHub145
zig/master eef4bbb Harry Eakins: Changed all MB to MiB

1524265588
GitHub145
zig/master b229aff Harry Eakins: Readability improvements and bug-fix to std/crypto/throughput_test.zig

1524265588
GitHub199
[zig] tiehuis closed pull request #935: Improving throughput test (master...improving_throughput_test)

1524265631
achambe
andrewrk: as far as network applications go, I had the thought a memcached compatible server might be an appropriate showcase people can use - I had the impression memcached has a simple protocol, but not certain.

1524265885
achambe
also, maybe a jerk comment, but be careful how much time you spend writing crypto code in zig, its just a bottomless pit of work with not that much payoff if zig has a C compiler built in.

1524265916
achambe
crypto libraries can probably be bundled with no dependency on libc anyway.

1524265950
achambe
doing that will mainly just attract people complaining the implementations are not constant time

1524265956
achambe
or not fast enough

1524265957
achambe
etc etc.

1524265986
achambe
go ahead if it is just for fun though.

