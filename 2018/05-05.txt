1525495348
achambe
Just had an idea

1525495363
achambe
that json parser by tiehuis

1525495380
achambe
I wonder if coroutines would be cleaner than the switch based state machine

1525495453
achambe
I guess it would need to wait for the stacksize reflection

1525516004
alexnask
@acahmbe Why would we need the stacksize reflection to use coroutines in that case (the json parser)?

1525516046
alexnask
Isn't the only error we need to worry about the allocation failure on the coroutine's state?

1525516078
achambe
alexnask: well the current json parser is zero allocation

1525516080
alexnask
I assume the coroutine's stack is also allocated by the async allocator

1525516102
achambe
yeah, it would work, but it is actually a downgrade

1525516113
alexnask
I'm pretty sure it uses an ArrayList to store the values

1525516141
alexnask
I agree, I was just wondering why you talked about the stacksize reflection, if I was missing something about LLVM/zig coros

1525516166
achambe
Hmm, I was just thinking it was needed to make a fixed size coroutine stack

1525516175
achambe
or however it works

1525516181
achambe
as a struct

1525516190
achambe
meh, im just talking nonsense :)

1525516198
alexnask
I'm not too familiar with the coroutine implementation to be honst

1525516201
achambe
there are plenty more parsers needed in the future anyway.

1525516205
alexnask
I'd have to make sure

1525516229
alexnask
I'm pretty sure you would end up with similar codegen, LLVM is really good at optimizing the coros away

1525516268
achambe
yeah, I am a bit curious about them, haven't had a chance to see even the C++ coroutines

1525516333
alexnask
There are a couple of interesting cppcon videos thawt talk about the C++ coro proposals + some low level implementation details in the LLVM size

1525516334
achambe
used for anything big**

1525516349
alexnask
in the LLVM side**

1525516411
alexnask
Basically the coros get compiled down to state machines anyway, so with inlining + memory allocation elision I'm confident you'd get back something similar to the original state machine

1525516460
alexnask
If LLVM can elide the allocator calls, which I'm not sure it can if the allocator is not malloc/free

1525516903
GitHub65
[zig] tiehuis pushed 1 new commit to master:

1525516903
GitHub65
zig/master d7b0299 Marc Tiehuis: Fix bigint multi-limb shift and masks

1525541391
alexnask
I'm getting really weird behavior with my ZigList sbo implementation

1525541440
alexnask
I suspect some buffer is written to without a resize but this should crash with the current implementation too

1525542916
alexnask
Or perhaps we are copying a small buffer then writing to the copy, that should probably work (although it sounds like a bug in the original implementation too, each buffer should own its own memory)

1525554926
MajorLag
Given that there is no official documentation for the build system, where's the best place to see what my options are? I want to pre-process some files and embed the results (using @embedFile or some other mechanism). Unfortunately I can't just use comptime for this due to the lack of most pointer stuff working in comptime.

