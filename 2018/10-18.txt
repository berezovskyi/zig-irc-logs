1539844893
hio
is there an issue that explains the new struct syntax with the . dot?

1539844901
hio
just interested to read about the reasoning here

1539845345
Hejsil
hio,

1539845405
Hejsil
It's still being talked about, and people are proposing other solutions. I still think what we have now is pretty good, and it has some syntactic similarities with .? and .*

1539845410
hio
ok thanks, btw I will propose to make a name change from struct to type. Structs are just types, even the error messages call them types when they refer to them.

1539845451
Hejsil
enum/union/struct/error/i32 etc are all types

1539845454
Hejsil
So that wont work

1539845569
hio
aaargg but it would look so much better :(

1539845600
Hejsil
It would?

1539845655
Hejsil
I think struct makes perfect sense here. Why would we use type.{} for structs, but not for union.{}? What makes struct more of a type than union? :)

1539845744
hio
ok I will try to think of it differently

1539851878
very-mediocre
For #760 I think you're on to something Hejsil, when you say that `error` should just always require braces

1539851894
very-mediocre
and your suggestion of `anyerror` could be something like `error.*`

1539851943
Hejsil
I actually have an idea, where the only "real" syntax change from 0.3.0 would be to change `error` to `anyerror`, or something like that

1539851967
Hejsil
I think we can split expressions into TypeExpr and NonTypeExpr

1539851988
very-mediocre
this makes much more sense than the other solutions imho

1539852016
very-mediocre
i think the other approaches are looking at the problem backwards, it's a problem with error being ambiguous, rather than function declaration syntax being ambiguous

1539852041
very-mediocre
I can't think of any other situation where {} is optional

1539852097
Hejsil
A TypeExpr, is an expression that could evaluate to a type: []NonTypeExpr, [N]NonTypeExpr, [*]NonTypeExpr, *NonTypeExpr, NonTypeExpr!NonTypeExpr, <container_keyword> {}, NonTypeExpr . Symbol, NonTypeExpr (<params>)

1539852114
Hejsil
Note here, that an initializer is not a TypeExpr

1539852127
Hejsil
There are more, but this is the basic idea

1539852136
Hejsil
There is no way a initializer can ever return a type

1539852166
Hejsil
Or... Hmm, I'll think about it some more, but im pretty sure this can work

1539852207
Hejsil
There are syntaxes that can return a type and syntaxes that can't, basically

1539852216
Hejsil
expr + expr can never return a type

1539852226
Hejsil
a{.a = 1} can never return a type

1539852229
very-mediocre
Yeah, it all makes sense to me

1539852243
Hejsil
A.B can, a() can, an so on

1539852245
very-mediocre
and it seems infinitely more appropriate than changing the way functions are declared in general

1539852295
Hejsil
I'm looking into tools for checking if the grammar I come up with is none ambiguous. Something like this

1539852326
Hejsil
After I come up with a gramma, I could generate a parser, and see if it can parse the entire std. If so, then there is no breaking changes

1539852338
very-mediocre
Interesting approach

1539852352
Hejsil
Then I could implement the grammar in stage1 and stage2

1539852399
very-mediocre
I have no experience with such tools though

1539852418
very-mediocre
I have no idea if they're reliable

1539852494
very-mediocre
It might be easier to roll your own test that's tailored for zig, since all this does is generate all variations of known syntax constructs

1539852510
Hejsil
Idk about cfg-checker, but I've used parser generators before, and they are good

1539852644
very-mediocre
sadly this is one of those areas I never had time to dig into other than academically (we did a Lisp)

1539852703
Hejsil
Maybe this is a better option:

1539852720
Hejsil
There is a parser generator also

1539852730
Hejsil
And it generates examples, it seems

1539852947
very-mediocre
a lot of people prototype languages using generators, then once they come up with something stable, reimplement it as self hosted

1539872953
MajorLag
hmmm "cannot store runtime value in compile time variable" thrown on a const assignment from a comptime fn called on a comptime variable... in a comptime block. I don't know how to comptime harder.

1539892049
MajorLag
If we have `@OpaqueHandle(T)`, should we do away with `@OpaqueType()` since it would be identical to `@OpaqueHandle(*c_void)`?

1539892137
andrewrk
I don't think that's quite right. an opaque handle has a known size. @OpaqueType() makes a type with an unknown, but non-zero, size

1539892178
andrewrk
c_void itself is defined as @OpaqueType()

1539892853
MajorLag
But there's no reason I couldn't make, say, an `@OpaqueHandle(*MyStruct)` right? It seems there's significant overlap with `@OpaqueType` to me.

1539892934
andrewrk
That's right. I agree about the overlap. I think this is related to my question on the issue -  in a pure zig codebase, would there be a reason to use @OpaqueHandle?

1539892940
andrewrk
that question applies to @OpaqueType() as well

1539896264
andrewrk
live stream in 3 minutes -

