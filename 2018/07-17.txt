1531788088
GitHub19
[zig] winksaville opened pull request #1254: Add swapRemoveOrError (master...add-swapRemoveOrError)

1531789199
GitHub7
[zig] andrewrk pushed 1 new commit to master:

1531789199
GitHub7
zig/master 97bfeac Andrew Kelley: self-hosted: create tmp dir for .o files and emit .o file for fn

1531800132
GitHub7
[zig] andrewrk pushed 1 new commit to master:

1531800132
GitHub7
zig/master 3bb00ea Andrew Kelley: self-hosted: implement getAppDataDir for windows

1531804572
dbandstra
why is it not possible to compare `?T` to `T`? i saw the issue that was resolved a couple days ago but it was only for pointers

1531804599
dbandstra
if it compiles down to two comparisons i don't see why that's a problem

1531804650
dbandstra
my example: `if (if (transparent_color_index) |t| t == index else false) {` (thanks to thejoshwolfe for the crazy if-in-if idea)

1531804749
dbandstra
i'm not sure if there was an argument against it (the non-pointer case) or if it kind of got missed

1531805901
dbandstra
`if ((transparent_color_index orelse ~index) == index)` is cuter for my situation ... forgot about this operator. but this wouldn't work for e.g. floats

1531813355
GitHub191
[zig] kristate opened pull request #1255: Revert removal of IR dead code (master...issue1249)

1531817690
lmb_
hello, i just started noodling around with zig, and have a question re "comptime return types". i have a fn (comptime a, comptime data: []const u8) []const u8. if i try to assign the result of that to a comptime const I get a compiler error. am I missing something or is this not supported by zig?

1531818784
tiehuis
lmb_: that should be fine, could you post the full example?

1531818815
tiehuis
the compile-time evaluation part of zig usually has the largest share of bugs so it is possible that there is could be an issue there

1531818848
tiehuis
also, i've pushed a wrapper library over SDL2 that I had lying around here:

1531818893
tiehuis
main intention here is to better convery single-item pointer types, nullable types and untranslatable macros

1531818925
tiehuis
it's a fairly quick pass so there are probably issues but feel free to make any prs

1531818965
tiehuis
@cImport works pretty well as is for small examples right now, so it isn't that required, but it may be helpful if you want to be more heavily dependent

1531819234
lmb_
@tiehuis: it goes roughly like this

1531819255
lmb_
the idea is to build testcases for a parser at compile time

1531819438
tiehuis
can you try `const data = comptime makeToken` instead of `comptime const data = makeToken`

1531819916
lmb_
yup

1531819977
tiehuis
that work okay?

1531820002
lmb_
yeah, it compiles!

1531820004
lmb_
cheers

1531820025
lmb_
comptime errors could use some love, but then i'm guessing there is an issue for that already :D

1531820027
tiehuis
awesome! i don't know the reason why that first one doesn't work at the momemnt but generally putting comptime on the function call is preferable

1531820031
tiehuis
to needing it on a const

1531820038
lmb_
ok

1531820050
tiehuis
you shouldn't ever need it on a const decl as far as i can think

1531820056
lmb_
it wasn't entirely clear at which points i can slap it

1531820071
lmb_
so i just put it in a few places where it seemed reasonable

1531820113
tiehuis
i believe that initial wya doesn't work because it won't execute makeToken at comptime by default and

1531820127
tiehuis
comptime on the left side doesn't act as a single block like one may otherwise expect

1531820139
tiehuis
e.g. `comptime { const data = makeToken(...); }`

1531820149
lmb_
i kind of expected the compiler to implicitly make the return value of makeToken comptime

1531820157
lmb_
ah

1531820175
lmb_
so `comptime makeToken` is just a comptime block with a single statement in it?

1531820182
tiehuis
yeah, i think thats doable, and the compiler should try to execute the rhs at comptime whenever the lhs is explicitly comptime

1531820195
tiehuis
you can think of it like that probably, yeah

1531820241
lmb_
ok, thanks for the help

1531820257
lmb_
coming from a Go background, zig is pretty easy to pick up

1531820260
lmb_
and so far its fun

1531820270
lmb_
so thanks for working on it!

1531820271
tiehuis
no problem

1531820285
tiehuis
that's good to hear! feel free to ask any more questions if any other issues come up

1531825642
unique_id
well, I'm having some eye strain issues atm. That means limiting computer use to programming only. Signing out.

1531837478
andrewrk
dbandstra, I could answer the question for more specific cases - but for example we already don't support == for structs, so if the optional type had a struct as a child type, that wouldn't work

1531837652
GitHub97
[zig] andrewrk closed pull request #1255: Revert removal of IR dead code (master...issue1249)

1531837654
GitHub116
[zig] andrewrk pushed 1 new commit to master:

1531837654
GitHub116
zig/master 69e3b4e kristopher tate: revert commit 860d3da9156a0b1f4a1e3e644b423da3e768bb86 ; please see #1249 for more information; (#1255)

1531837702
GitHub15
[zig] andrewrk closed pull request #1253: Give ArrayList tests consistent names (master...give-std.ArrayList-tests-consistent-names)

1531837704
GitHub128
[zig] andrewrk pushed 1 new commit to master:

1531837704
GitHub128
zig/master d1a6024 Wink Saville: Give ArrayList tests consistent names (#1253)...

1531837795
GitHub129
[zig] andrewrk closed pull request #1254: Add swapRemoveOrError (master...add-swapRemoveOrError)

1531837799
GitHub178
[zig] andrewrk pushed 1 new commit to master:

1531837799
GitHub178
zig/master 3cbf59b Wink Saville: Add swapRemoveOrError (#1254)...

1531838647
GitHub43
[zig] andrewrk pushed 1 new commit to master:

1531838648
GitHub43
zig/master 1a7cf4c Andrew Kelley: port 69e3b4e to self-hosted compiler...

1531846613
lmb
just wondering, is this a known bug?

1531846680
lmb
changing var to type in the function signature makes it go away

1531846859
andrewrk
lmb,

1531847974
GitHub153
[zig] andrewrk pushed 1 new commit to master:

1531847975
GitHub153
zig/master ecf8da0 Andrew Kelley: self-hosted: linking

1531855169
GitHub66
[zig] andrewrk pushed 1 new commit to master:

1531855170
GitHub66
zig/master a9ab528 Andrew Kelley: std.event.Loop.onNextTick dispatches work to waiting threads

1531855843
lmb
ok, thanks

1531857190
wilsonk
any idea why doing 'zig build' with a pretty much empty build.zig file (just a dummy build function) gives a ton of 'duplicate struct field' errors?

1531857297
wilsonk
zig-cache has all the builtin code copied into it and that is the source of all the duplicate fields?

1531857328
andrewrk
wilsonk, I'd be happy to help. can you paste the file somewhere and link it?

1531857353
andrewrk
I tried just now to reproduce the issue unsuccessfully

1531857422
wilsonk
strange...there is really nothing to it

1531857457
wilsonk
am I not supposed to pass in the Builder?

1531857582
andrewrk
/home/andy/tmp/build.zig:1:18: error: use of undeclared identifier 'Builder'

1531857599
andrewrk
that's what I get. are you using a master build? you're using the old pointer syntax

1531857617
wilsonk
yeah, I just saw that and changed it

1531857641
wilsonk
weird that I don't get the undeclared identifier error

1531857858
wilsonk
ah, nvm...I see what I did

1531857921
andrewrk
what was it?

1531857971
wilsonk
just wasn't using '--build-file'

1531857992
andrewrk
so it was looking at build.zig in the current working directory

1531858006
wilsonk
yes

1531858141
wilsonk
so it seems like 'zig build' fails even with a build.zig file in the cwd but 'zig build --build-file build.zig' doesn't produce any errors about duplicate symbols?  (I just pulled the newest repo and built one minute ago, btw)

1531858311
andrewrk
I'd be happy to help if you provide a paste

1531858461
wilsonk
Oh, that is fine...it is working now if I just supply the --build-file arg. No problems

1531858700
andrewrk
that's not a known issue and I'm unable to reproduce it

1531858928
wilsonk
whoa, weird...now it is working with just the regular 'zig build' command?  Not sure what happened before...it was trying to include 'builtin' twice or something? Weird

1531860320
wilsonk
what does the ?? operator do? Test an optional for null?

1531860356
andrewrk
there is no ?? operator

1531860386
wilsonk
oh, there used to be one...yes? Was it changed to something else?

1531860391
andrewrk


1531860400
andrewrk
yes, it changed to the `orelse` keyword

1531860426
wilsonk
ok, cool

1531867185
wilsonk
can you index a pointer in Zig?  Like pointer[2] = 0xFF...the compiler says 'index of single-item pointer'?

1531867216
andrewrk
wilsonk, yes you can - you need to obtain an unknown length pointer

1531867268
andrewrk
if you show me some code I can suggest how to modify it

1531867528
wilsonk
'const p = @intToPtr(*usiz, fn());   p[2] = otherUsiz;'  ... something like that.

1531867692
andrewrk
do this: const p = @intToPtr([*]usize, fn());

1531867714
andrewrk
*usize means "there is exactly 1 item at this address"

1531867729
andrewrk
[*]usize means "there are an unknown number of items in a row at this address"

1531867771
wilsonk
ah, ok. Nice

