1528675572
dbandstra
byronh__, thanks, it was in a subfolder of /usr/lib for some reason

1528675601
dbandstra
byronh__, here is a basic inflate function

1528676217
byronh__
Sweet, i will check that out

1528681959
dbandstra
is it possible to declare an error type that extends/includes another error type?

1528682019
dbandstra
i have an InflateInStream which operates on a source InStream and i want its "read" callback to include the errors generated by the source read

1528693766
ofelas
i "converted" zlib/contrib/puff.c to zig yesterday if anyone finds that interesting, see

1528694172
andrewrk
dbandstra, use the || operator

1528694242
andrewrk
here's an example:

1528695041
dbandstra
thanks!

1528695373
tiehuis
olefas: very cool, i did a similar thing a little while back, too, which may be useful to compare:

1528702029
very-mediocre
Is the lack of a (pointer to object)->property operator intentional?

1528702049
very-mediocre
I find myself doing a lot of explicit dereferencing

1528702074
very-mediocre
(referring to C's -> operator)

1528703625
andrewrk
very-mediocre, you can use . for both T and *T

1528703699
andrewrk
if it's [*]T then you would have to do value[0].field. if you were resorting to that it's probably because of @cImport, and you can consider doing a translate-c offline and then fixing up some of the pointer types in function prototypes

1528704830
very-mediocre
i'd disconnected, just saw your response andrewrk, thanks

1528704869
donpdonp
im trying to do a simple 'actor' setup where each pthread has a queue of actions to perform where other threads have access to push onto the queue. is there a thread-safe ArrayList?

1528706635
donpdonp
question2: given this line of C "struct epoll_event ev;"  ev points at memory allocated for the size of 1 epoll_event. I'm not sure how to do the equivalent in zig.

1528706660
donpdonp
"var event: c.epoll_event = <?>"

1528707065
donpdonp
okay after reading some more and using --verbose-cimport a lot, its "c.epoll_event{.events = 0, .data = c.epoll_data{.fd=0}}"

1528707856
very-mediocre
in reading the `std` I noticed there's a lot of `const self = @fieldParentPtr` which seems hacky

1528707895
very-mediocre
and you can't call methods like `pub fn readNext(self: *const Self) T { self.pos += 1 }`

1528707947
very-mediocre
I guess this is a limitation for now, unless someone has found a better way of having a struct reference itself in a non-const way

1528708064
very-mediocre
(the reason you can't call such a "method" is you can't increment a property e.g.`pos` if `self` is a const reference)

1528708184
tiehuis
const isn't analogous to immutable, that is the pointer itself is const and can't change but the member values of a const pointer can be

1528708215
tiehuis
same as in C or javascript

1528708353
very-mediocre
Nonetheless the compiler complains

1528708366
very-mediocre
and does not allow that sort of definition

1528708379
tiehuis
oh did i have it the other way around?

1528708391
very-mediocre


1528708433
very-mediocre
You'll find `self` is gotten like this pretty often

1528708473
tiehuis
that is to get some pseudo-interface like behavior

1528708508
very-mediocre
Hm, I may be missing something

1528708516
very-mediocre
(seems to be a recurring theme lately)

1528708556
very-mediocre
When you make a call such as MyStruct.function() it passes the first parameter as a *const MyStruct

1528708581
tiehuis
only if MyStruct is declared with var

1528708595
tiehuis
i mean const

1528708619
tiehuis
if it is var it is passed is implicitly cast to const or non-const otherwise

1528708649
very-mediocre
Hm, still complaining, although this may be that bizarre caching issue I was facing

1528708672
tiehuis
i think i see what you mean before, with read taking a *Self

1528708678
very-mediocre
I've had the compiler continue to complain and not notice I updated my code, which has been confusing to say the least

1528708692
tiehuis
it looks like @fieldParentPtr returns a non-const ptr which is probably why it is okay in that InStream example

1528708714
tiehuis
if you have a full example i can try it out and see

1528708736
very-mediocre
Just a sec, just want to make sure if making the struct `var` would work

1528708741
very-mediocre
rather declaring the instance

1528708769
very-mediocre
Well! You're right

1528708800
tiehuis
great!

1528708804
very-mediocre
Thanks a bunch

1528708814
tiehuis
no problem, feel free to ask if anything else comes up

1528708816
very-mediocre
My main issue with discoverability of such mistakes is not related to the language

1528708834
very-mediocre
It's related to my code updates not being picked up by the compiler, I'm using a weird setup with a network drive

1528708864
very-mediocre
If I make fixes the compiler sometimes keeps stale data, so I learn incorrect things, like "changing it to var doesn't work"

1528708885
very-mediocre
The language itself is fantastic, props to andrewrk and contributors like you :)

1528708899
tiehuis
that's odd, the compiler does zero caching at the moment by the way so i presume it is some os level caching?

1528709071
very-mediocre
Yes it's my setup

1528709076
very-mediocre
It's been the source of much grief

1528709084
tiehuis
sounds rough

1528709109
very-mediocre
The worst is the brain damage it causes when trying to learn something

1528709125
very-mediocre
When you try a fix and it still gives you the same complaint... Is just mind numbing

1528709151
very-mediocre
And the fix is correct, but you learn not to do it because of the stale output

1528710624
very-mediocre
(not that i got this one right btw, I didn't know this one, but even after taking your suggestion I had to do several compiles for it to work :) )

1528721122
bodie_
is there any documentation for Zig coroutines?

1528725453
Hejsil
I wrote a GC in Zig. Should I be punished?

1528725586
clownpriest
very cool!

1528725709
Hejsil
It does collect automagicly yet though

1528725714
Hejsil
And maybe it shouldn't

1528725784
Hejsil
s/does/doesn't/g

1528727644
clownpriest
is there really no way to do a runtime sized stack allocated array?

1528728094
very-mediocre
afaik only with slab preallocation

1528728195
very-mediocre
or maybe some very shady template-based solution if pass in sized array types as the generic type e.g. [15]u8

1528728215
very-mediocre
but this would obviously be horrid

1528728255
very-mediocre
and the extent of "runtime" here would be deciding between available sizes determined at compile time

1528728354
very-mediocre
This idea was so horrid it caused clownpriest to disconnect :)

1528728663
clownpriest
lol sorry, work connection boots me off regularly, it sucks

1528728667
clownpriest
but yeh that is not ideal

1528728741
very-mediocre
why can't you allocate on the heap?

1528728969
clownpriest
i can, just looking for potential speed gains

1528728990
clownpriest
want to void paging through memory because i'm following pointers into heap

1528729084
very-mediocre
I see

1528729119
very-mediocre
Arena seems decent for that, just have one per "domain" and dealloc at an opportune time

1528729156
very-mediocre
before it ever gets a chance to get fragmented

1528729199
clownpriest
yeah

1528729202
very-mediocre
obv. workload dependent, but that's as close as general purpose as possible now i think

1528735727
andrewrk
bodie_, I can do the coroutines documentation today :)

1528743546
bodie_
bravo

1528744685
GitHub28
[zig] andrewrk pushed 1 new commit to master:

1528744685
GitHub28
zig/master 03c16c6 Andrew Kelley: implement @tagName as a switch instead of table lookup...

1528744927
bb010g
tiehuis: If you take a look at

1528744985
bb010g
When you use "$srcdir/../eject.patch", you're depending on the build being performed from a directory where the patches sit above the source directory. This is not required, though, and causes problems when doing things like building from a chroot because unneeded files aren't copied over.

1528745006
bb010g
To fix this, just use the patches that are in $srcdir.

1528749807
bheads_
andrewrk, have you thought about streaming or youtubing zig coding sessions?

1528749823
andrewrk
bheads_, yes, in fact I am taking a poll right now on what time would be best

1528749856
andrewrk
vote here or here:

1528749930
bheads_
sweet

1528750062
bheads_
+1 for 14 UTC Thursday (I dont have twitter or reddit accounts...)

1528750296
andrewrk
noted

1528750341
andrewrk
looks like I'll be getting up early on thursdays :)

1528750450
bheads_
lol I get in to the office at 7am, so works good for me

1528750884
bheads_
Q: How do you know you work in enterprise software development?

1528750950
bheads_
A: You spend 8 hours + 5 client meetings to fix SQL written by Oracle in 2011 so the price of a pair of sandels is correct on your java web application....

1528752946
GitHub20
[zig] andrewrk pushed 1 new commit to master:

1528752947
GitHub20
zig/master 5252566 Andrew Kelley: langref: add coroutines documentation...

1528753117
andrewrk
bodie_,

1528753166
GitHub139
[zig] andrewrk pushed 1 new commit to master:

1528753166
GitHub139
zig/master 0a18d53 Andrew Kelley: langref: add orelse keyword to syntax highlighting

