1523242007
andrewrk
zig tcp server vs node.js tcp server strace:

1523242429
achambe
andrewrk: beautiful

1523242455
achambe
is that the demo you mentioned in your talk about gracefully handling oom ?

1523242467
andrewrk
this is a demo of async/await

1523242502
achambe
yeah, in a talk you gave, you mentioned you were also doing an http server demo that serves while out of memory

1523242510
andrewrk
ah yes, that's what this is

1523242514
achambe
awesome

1523242516
andrewrk
I mean it's not done yet, but this is an important milestone

1523242531
andrewrk
one of the things I want to try is multiplexing coroutines onto kernel threads

1523242535
andrewrk
this is single threaded so far

1523242704
achambe
syscalls being out of control is one of the big problems with Go too. zig seems like a good solution to that.

1523242737
achambe
andrewrk: dunno if you have seen this library:

1523242756
achambe
perhaps some of the idioms there would match well with the async stuff you are working on

1523242791
achambe
tree structuring of coroutines etc.

1523242881
andrewrk
I'll have a look, thanks

1523243591
achambe
crazy project idea: alternative nix interpreter in zig. (notice your nixos store paths)

1523243783
andrewrk
is the current one in c++?

1523243787
achambe
yeah

1523243792
achambe
using the bhoem gc

1523243961
achambe
the language seems simple with few builtins, but perhaps its not a practical project in reality

1523243988
achambe
so many other things with higher value

1523249630
GitHub82
[zig] andrewrk pushed 7 new commits to master:

1523249630
GitHub82
zig/master 8f4ad95 Andrew Kelley: update what std tests to run

1523249630
GitHub82
zig/master b85ef65 Andrew Kelley: running into the llvm corosplit error again

1523249630
GitHub82
zig/master 0d22a00 Andrew Kelley:

1523261600
_PiGreco_
hi everyone

1523261607
_PiGreco_
no zig in macports? :)

1523262314
achambe
sad that capnproto is C++ and not C, zig can't use it :(

1523266317
Dodo
Can you make you're own Iterator that works with the 'for' loop?

1523266323
Dodo
*your

1523266943
Hejsil
Dodo, you can define a function that returns ?T (where T is your item type) and then do this:

1523266960
Hejsil
But, you can't define an iterator that works with for, no

1523267070
Dodo
oh well, that looks pretty clean as well :)

1523267438
Dodo
talking about 'iterators', what about .map() and .filter()?

1523267642
Hejsil
There is nothing like those in the standard library

1523267673
Hejsil
Though, you could implement some iterator library with them in it

1523267690
Hejsil
Though, if you want lazy, map and filter, then you'll need to be creative

1523267725
Dodo
mh, I see that as a challenge ^^

1523267731
Hejsil
Have fun :)

1523267762
Dodo
but I only downloaded the compiler a few days ago hahaha

1523267833
Hejsil
If you have any questions, feel free to ask. The docs do not cover everything

1523268051
Dodo
will do

1523268067
Dodo
think I'll need it ^^

1523279328
Dodo
if I have a function that returns this: "return union(enum) {         Ready: T,         Pending: void,     };"

1523279366
Dodo
how would I switch against it to get T out of it?

1523279683
Dodo
or do I make a function for it that returns ?&T to get a reference back, but only if the variant was 'Ready'?

1523279775
Dodo
but I dont know the type of the return type, only that its a union

1523279791
Dodo
so what should the function take as paramater?

1523280363
Dodo
OH

1523280379
Dodo
you can just type the function-name, then .<variant>

1523280383
Dodo
heh!:D

1523280741
Dodo
how do I 'create' a void-type?

1523280751
Dodo
or well, a new 'void'

1523280955
Hejsil
Creating void: void{}

1523280983
Hejsil
Switching on union(enum):

1523281021
Hejsil
Your union looks a lot like a nullable though

1523281023
Hejsil
:)

1523281032
Dodo
I know it looks like a nullable

1523281040
Dodo
but somethimes you want to create your own nullable

1523281048
Hejsil
Alright

1523281049
Dodo
or type that is nullable-like

1523281061
Hejsil
Ye, I can imagine having names would give clarity

1523281084
Dodo
is ther something like an online playground to show what I've done?

1523281094
Hejsil
Nope

1523281101
Dodo
Ill use pastebin

1523281208
Dodo


1523281321
Dodo
could've also returned the union directly I notice now

1523281405
Braedon
Most iterators also have a '.next()' though so you can always do `var it_next = it.next(); while(it_next) |next| { ... // use next }`

1523281424
Braedon
Which is quite like a for loop, though of course yeh we don't have maps/reduce and stuff :)

1523281753
Hejsil
Dodo, Was there anything specific you needed comment on in your code? If you're just playing around unions, this seems correct

1523281907
andrewrk
Hejsil, you've been busy while I was asleep

1523281922
Hejsil
I've overtaken your commit count! >:)

1523281953
andrewrk
argh!

1523281969
Hejsil
Well, after I got While parsing, nearly all the code was already there for 'for' and 'if'

1523281979
Hejsil
comptime, and defer where simple

1523281987
Hejsil
So it wasn't really that much work

1523282012
Dodo
just wondering if it was the right way indeed Hejsil

1523282070
andrewrk
Test 37/39 zig fmt: ...

1523282074
andrewrk
wow, so close

1523282106
Hejsil
self hosted parser hype!

1523282141
Hejsil
This was way more work than expected. All I wanted was to create some small program that generated an index of `std` :(

1523282190
andrewrk
that's how it happens. you think "I understand the basics of how this works" and then you get sucked into the details

1523282209
Hejsil
Indeed

1523282265
Hejsil
I think I'll probably go back to doing some randomizer work when the parser is done. That indexing thing can wait

1523282288
andrewrk
I'll get started on analysis in the self hosted compiler!

1523282290
Hejsil
Index, as in some html page for easy browsing

1523282302
Hejsil
Nice!

1523282339
andrewrk
it's all coming together - I was wanting to finish this coroutine proof of concept that I just got done last night because I want to make it use a thread pool and coroutines to parallelize work

1523282541
Hejsil
How would zig doc play work? Would it run while the analyzer is running, so it knows which files are imported, or would zig doc just naively iterate over the ast, assuming that all files imported are actually used?

1523282578
andrewrk
docs would be a build artifact from the other build modes

1523282580
Hejsil
s/zig doc play/zig doc/g

1523282611
andrewrk
this is another situation where multiboot is relevant

1523282614
andrewrk
*multibuild

1523282638
Hejsil
Aaaah, so it'll be the same as the zig json that was worked on

1523282643
Hejsil
I remember that now!

1523282649
andrewrk
the first pass will be like that

1523282713
andrewrk
ideally, a build will simultaneously process code for the multiple comptime branch configurations that can be made - release vs debug, linux vs windows, etc. docs would indicate when something is only available in one context or indicate that something could be a different type

1523282742
Hejsil
Make sense

1523282760
Hejsil
Anyways, I'm off for a bit

1523282773
andrewrk
take care

1523286167
MajorLag
andrewrk: with tagged unions: setting it to "undefined" seems to cause a runtime saftey error if you define it later, "access of inactive union field".

1523286197
MajorLag
how would I reset the tag?

1523286292
andrewrk
overwrite the entire union

1523286309
andrewrk
foo = TypeName { .Blah = whateven }

1523286359
andrewrk
that's a great point though, if you set a union to undefined, it should set the safety tag to a special value to note that none of the tags are active

1523286394
andrewrk
because I bet right now it would let you write/read with the 0th field

1523286408
MajorLag
right, ok, that makes sense.

1523286589
MajorLag
actually no, it threw the same error... but maybe the first listed field isn't necessarily the 0th.

1523286601
andrewrk
oh right, the most aligned one is

1523286606
andrewrk
e.g. the biggest size

1523286705
andrewrk
anyway I think this is working as designed, with a potential impromevent to runtime safety to be made

1523286779
MajorLag
doesn't seem to work either. probably it is whatever happens to be in the tag value location in memory at the time? but yeah, academic. being able to set to undefined and handle it later would be a minor but welcom convenience.

