1532316668
andrewrk


1532327055
hryx
Nice job @andrewrk!!

1532351376
bheads_
stage2 hello world!? Nice

1532363807
andrewrk
ofelas, congrats on working deflate/inflate

1532363965
winksaville
Is there a way to "extend" std/fmt dynamically to be able print non-primitive types?

1532364306
andrewrk
winksaville, yes, you can define a format function on your struct or union

1532364357
andrewrk
pub fn format( self: Int, comptime fmt: []const u8, context: var, comptime FmtError: type, output: fn (@typeOf(context), []const u8) FmtError!void,) FmtError!void

1532364372
andrewrk
where  `Int` is your type

1532364403
andrewrk
don't be scared of the parameters. you just call output(context, "text")

1532364449
andrewrk
you can thank MajorLag2 for this functionality

1532364772
winksaville
txs

1532364845
winksaville
MajorLag2: And txs to you for adding custom fmt!

1532365590
winksaville
I've asked questions that didn't get answered here, probably because they were lost amongst the other posts. There is a ziglang@googlegroups.com should I post over there?

1532365773
andrewrk
sure

1532365813
andrewrk
you can also repeat your questions periodically

1532365871
winksaville
I have, but I feel like I'm being a nag :) Should we add a link to it on ziglang.org?

1532365987
winksaville
I'll add a PR to github ziglang/www.ziglang.org

1532366378
andrewrk
we also don't have a link to the subreddit on the home page

1532366556
winksaville
k, I'll add that too

1532367285
winksaville
Added

1532367401
andrewrk
thanks

1532369740
ofelas
andrewrk: thanks

1532375288
unique_id
I don't expect this to be the case, but is there something like __LINE__?

1532376082
andrewrk
unique_id, no. I was thinking about adding a builtin function for obtaining a comptime struct which contains things like line, column, source file, etc

1532376103
andrewrk
I think I'd like to remove `this` in favor of builtin functions

1532376122
andrewrk
unique_id, oh, there is one really nice thing you can do

1532376186
andrewrk
I haven't tried this yet, but capture @returnAddress() and store the resulting usize somewhere. that points to a point in your binary that you can then map back to source with std.debug.printSourceAtAddress

1532376201
andrewrk
that's what error return traces do internally

1532376220
andrewrk
the nice thing about this is you can do it at runtime - capture locations of various things and then only print them if something goes wrong

1532376261
andrewrk
we could also have a function std.debug.captureStackTrace where you give it a # of frames to capture, and then you can later free it or print it

1532376277
andrewrk
if you pick some low number like 4, it's actually a pretty cheap operation

1532376318
andrewrk
all  the hard problems to do this stuff is solved, what's missing is some glue code / convenience API

1532377543
ofelas
would that work on a stripped executable?

1532378170
andrewrk
no

1532378191
andrewrk
but you could store the addresses/stack traces somewhere, retrieve them later, and then map them to your debug info

1532378194
unique_id
printSourceAtAddress is private :) - I really don't need this functionality atm

1532378210
andrewrk
right, that's what I mean about glue code

1532378849
unique_id
how do I run/write tests that depend on linked in 3rd party libraries, atm I'm getting undefined symbol errors

1532379650
andrewrk
--library foo should work for the test command

1532379760
unique_id
yeah it works

