1518398192
izabera
zig looks cool :)

1518398200
andrewrk
thanks izabera

1518421707
GitHub157
[zig] andrewrk pushed 2 new commits to master:

1518421707
GitHub157
zig/master 4a4ea92 Andrew Kelley: remove std.heap.IncrementingAllocator...

1518421707
GitHub157
zig/master 445b033 Andrew Kelley: introduce std.heap.ArenaAllocator and std.heap.DirectAllocator...

1518423740
GitHub177
[zig] andrewrk pushed 2 new commits to master:

1518423740
GitHub177
zig/master ec0846a Andrew Kelley: std.heap.ArenaAllocator: fix incorrectly activating safety check

1518423740
GitHub177
zig/master 227ead5 Andrew Kelley: back to malloc instead of aligned_alloc for c_allocator...

1518444294
Hejsil
andrewrk, I think I got the gist of you and MajorLag_ discussion on deref from yesterday. Did you discuss just having [1]u8 be a pointer to one u8, and then having deref be `[0]ptr`? Aka, no special syntax for pointers to single values.

1518444322
Hejsil
ptr[0]

1518444323
Hejsil
*

1518445177
MajorLag_
Hejsil, andrewrk brought it up. My thought was that it makes ptr look like a block when it isn't. Doesn't mean it might not be an acceptable solution though, since all of the ones proposed so far have issues.

1518445246
Hejsil
Maybe keep `*ptr` to mean `ptr[0]`. Then the access doesn't look like block access

1518445259
Hejsil
Though idk if we want

1518445263
Hejsil
* for slices and all that

1518445268
Hejsil
Hmmm

1518445275
Hejsil
Ooh well, that was my 2 cents

1518445452
MajorLag_
andrewrk: re: array syntax issue. What about using the `**` operator for this? var array: i32**4 = i32{0}**4; If we use a different deref operator than `*`, Then the operator could be extended to allow syntax like this without ambiguity (I think): const c = 4; var array: i32**4*c = i32(0)**4*c;

1518445569
MajorLag_
Personally, I still lke my `.` operator idea, but I get that it is a bit strange coming from C tradition, and it would force 2 other operators to change.

1518445708
Hejsil
My only real problem with `.`, is that it kinda just disappears in code. I can imagine missing it easily, if it is at the end of some large function

1518445719
MajorLag_
Taht is also true.

1518445786
Hejsil
Btw isn't const c = 4; var array: i32**4*c = i32(0)**4*c; ambiguous? If i32(0)**4 is an array of 4 0's. Then is i32**4 an array of 4 types or the type "array of 4 i32"

1518445839
Hejsil
Or maybe he ment i32{0}**4

1518445844
Hejsil
Because, then it is not

1518445946
MajorLag_
What's wrong with `i32**4` meaning "an array of 4 i32s" and `i32(0)**4` being "an array of 4 0s (that are i32)"?

1518445967
Hejsil
What if you want to have an array of types at comptime

1518445986
Hejsil
does i32**4 give you [4]type{ i32, i32, i32, i32}

1518445994
Hejsil
or [4]i32

1518446003
MajorLag_
Ah, I see

1518446055
Hejsil
But (i32**4){ 0 } ** 4 isn't ambiguous i think

1518446099
Hejsil
I

1518446100
MajorLag_
Ok, no, actually I don't see it. comptime var arrayOfTypes: type**4 = i32**4;

1518446107
Hejsil
I'm kinda jumping between syntaxes

1518446212
Hejsil
Ok, if i32(0)**4 is = [4]i32{ 0, 0, 0, 0}. i32(0) is the value, and 4 the size. Then wouldn't i32**4 be [4]type { i32, i32, i32, i32 }

1518446222
Hejsil
Because i32 is the value and 4 is the size

1518446227
MajorLag_
yes

1518446288
MajorLag_
Ah, ok. Yeah, I see it now.

1518446296
Hejsil
:)

1518446302
MajorLag_
drat

1518446315
Hejsil
Anyways, I don't mind the ** syntax for array types too

1518446340
Hejsil
Because there are ways to avoid this ambiguity

1518446354
Hejsil
Aka (i32**4){ 0 } ** 4

1518446406
Hejsil
So <type>**<comptime_int> is an array type

1518446445
Hejsil
and <array_lit>**<comptime_int> is array repetition.

1518446458
MajorLag_
Yeah, that makes sense.

1518446545
MajorLag_
currently <array_lit>**<comptime_int> doesn't work if <comptime_int> is an expression without (), but I don't see why not since operator precedence could make it unambiguous.

1518446598
Hejsil
Ye, that should probably just work

1518446603
MajorLag_
well, that assumes deref isn't prefix '*'

1518446649
Hejsil
But then again, I would probably write u8**(4 * 1024) no matter what

1518446666
MajorLag_
well yeah

1518446683
MajorLag_
assuming you didn't hate whoever had to read it

1518446690
MajorLag_
which in my case is usually me

1518446698
Hejsil
Who knows :)

1518446826
Hejsil
One thing to keep in mind is, that ** should probably evaluate from right to left

1518446838
Hejsil
I actually don't know if it already does that

1518446854
Hejsil
Hmmm

1518446871
MajorLag_
Here's another thought for the pile: [*]T //ptr to block of unknown size; [*N]T //pointer to block of comptime known size; [5]T //array

1518446895
Hejsil
Uuuh

1518446901
MajorLag_
Falls down if N is an expression

1518446910
Hejsil
Ooh ye

1518446911
Hejsil
...

1518446918
Hejsil
Looked good for a second there

1518447011
Hejsil
Well. If we throw away * deref, then is there a problem?

1518447032
Hejsil
Other than [*4*1025]u8 being a little weird

1518447054
MajorLag_
maybe not. * is still used for multiplication, but since there's no value to the left it would be unambiguous?

1518447064
Hejsil
No?

1518447134
MajorLag_
It does look funny, but I don't think there's a way out of that for this problem.

1518447194
Hejsil
I like the logic in this syntax though. [*] pointer to block. [*5] pointer to block of size 5. [5] block of size 5

1518453833
andrewrk
That's pretty good

1518454886
MajorLag_
Would this be valid? [N]null T;

1518455569
andrewrk
no

1518455638
andrewrk
I spoke too soon. I am just now understanding the implications of this question

1518455762
andrewrk
a related question is, what is the type of string literals

1518456041
Hejsil
[N]const u8?

1518456054
Hejsil
As it's probably global data?

1518456057
Hejsil
Or...

1518456060
Hejsil
Hmm

1518456098
Hejsil
If that's the case. Then the user is required to mem.copy onto the stack to modify the literal

1518456125
andrewrk
that's currently true today and it is true in C

1518456153
andrewrk
I think string literals should be [*N]null const u8

1518456157
Hejsil
Ooh, you can't do this today? var str: [1]u8 = "1";?

1518456170
andrewrk
Hejsil, ah, you can in fact do that

1518456192
andrewrk
and check this out, that type - [*N]null const u8 - would implicitly cast to [*]null const u8

1518456198
andrewrk
so we wouldn't need c"string literals"

1518456209
andrewrk
normal zig string literals could be passed to C functions

1518456231
Hejsil
That's pretty convenient

1518456274
MajorLag_
So that would mean all Zig string literals are null terminated?

1518456290
andrewrk
yeah that's the idea

1518456312
andrewrk
so you get both - knowledge of the length and null termination. if you slice a string, though, the null termination is removed from the type

1518456340
andrewrk
and most functions should still accept normal slices - not force the caller to pass a null terminated slice

1518456363
Hejsil
Ye, null terminated stuff is only for calling C

1518456462
MajorLag_
Well, what I'm wondering is if I say: const string = "Text"; then string.len is 5?

1518456463
andrewrk
hmm I think the string literal type needs to be an array literal though - we can't just make it be a pointer

1518456480
andrewrk
no the len would not include the null

1518456529
andrewrk
"null" as part of the type system would mean "the length is short by 1"

1518456557
Hejsil
I would assume accessing the null terminator would assert? At least for anything that isn't [*]null

1518456572
Hejsil
Out of bounds I mean

1518456594
andrewrk
yeah out ouf bounds would work the same way

1518456601
MajorLag_
I feel like some naive copy using .len would remove the null and that would be a problem if the result was passed to C.

1518456633
andrewrk
the naive copy would use the normal types without the "null" in the type, and the C function prototypes would have the "null" in the type, so there would be a type mismatch

1518456673
andrewrk
e.g. extern fn puts(text: [*]null const u8) void;

1518456692
andrewrk
if you try to pass a [*]const u8 to that, you get a compile error

1518456742
andrewrk
this is the main point of having a pointer type that understands it should be null terminated

1518456742
MajorLag_
yes, that should allow it to be caught. Then my only remaining thought is that it means I have extra bytes in my binary which might be a concern on embedded, but that's pretty edge-case and there are ways around it I guess.

1518456764
andrewrk
you mean all the string literals that don't get passed to C?

1518456773
MajorLag_
Yeah, very edge case

1518456797
MajorLag_
Like, if you wrote a pure Zig OS for something.

1518456817
andrewrk
if you do please make all the syscalls accept lengths with strings :)

1518456923
Hejsil
Would [N]null cast to [N] (casting between array types)? For code like this: var a: [1]u8 = "1";

1518456968
Hejsil
If they did, then you could probably avoid the null terminator if you stored all your strings in your program this way

1518456995
andrewrk
I don't want people to have to worry about whether or not they're saving a null terminator byte

1518457040
andrewrk
these are the kinds of things I want to be non-issues

1518457054
andrewrk
so that people can not be distracted from the actual problems they're trying to solve

1518457156
MajorLag_
I dunno. I guess I just like the explicit difference as a matter of personal preference.

1518457178
Hejsil
Did we even reach a conclusion on deref *? Seems like we embrace [*N] with open arms :)

1518457184
andrewrk
MajorLag_, explicit diference of what?

1518457225
MajorLag_
c"" vs ""

1518457231
andrewrk
ahh

1518457261
andrewrk
yeah maybe we can keep that

1518457262
MajorLag_
it is admittedly bikeshedding as far as I can tell.

1518457317
andrewrk
Hejsil, [*N] lets us keep existing array syntax right? but we still have the deref problem to solve

1518457365
Hejsil
Indeed

1518460499
GitHub27
[zig] andrewrk pushed 1 new commit to master:

1518460499
GitHub27
zig/master b4e44c4 Andrew Kelley: self hosted parser tests every combination of memory allocation failure

1518460515
andrewrk
^ example of the arena allocator being useful

1518468980
andrewrk
Hejsil, just saw your build.zig TODO

1518469157
Hejsil
Well, it seems things changed in Zig at some point, because I can now run tests with the newest Zig build

1518469176
Hejsil
Though non of my test code uses the "crc" package

1518469204
andrewrk
I'll add a test to zig's test suite to ensure it continues working

1518469264
Hejsil
I assume all the windows goodies comming with llvm6 will also allow profiling on windows?

1518469388
andrewrk
Hejsil, I think so! what profiling tools?

1518469394
andrewrk
msvc?

1518469412
Hejsil
Well anything that works lol

1518469433
andrewrk
the problem that is fixed with llvm6 is proper debug info

1518469463
Hejsil
Kinda have to figure out why writing nds roms back to disk is really slow on windows after my latest PR :)

1518469475
andrewrk
it slowed down recently?

1518469517
andrewrk
Hejsil, the llvm6 branch does work if you build llvm6.0.0rc2  on windows (instructions in the wiki)

1518469521
andrewrk
I just tested it this morning

1518469547
Hejsil
Well, I'm now reading file systems inside files systems (Nitro and NARC in the nds rom), and my writing functions does alot of seekTo then write

1518469557
Hejsil
Which I think is probably the bottleneck

1518469560
Hejsil
But wonna be sure

1518469579
Hejsil
I'll test the llvm6 branch tomorrow

1518469635
andrewrk
you're seeking and writing, and not writing an entirely new file?

1518469675
Hejsil
I am, but nds roms are structured weird. I have to write some tables that knows the offsets of the file in the nds rom

1518469705
Hejsil
But I could probably just have these tables in memory until I've written all files, and then write the tables

1518469715
andrewrk
one thing to watch out for, std.io.OutStream is not buffered

1518469719
Hejsil
Which will remove most of the file seeking

1518469726
Hejsil
Oooh

1518469737
andrewrk
you can wrap it in a std.io.BufferedOutStream

1518469810
Hejsil
I still need to eliminate alot of the seekTo's though :)

1518469814
andrewrk
example usage:

1518469828
andrewrk
yeah be careful using buffered out stream with seeking

1518469836
andrewrk
you'd want to flush before seeking every time

1518469842
Hejsil
Ye, I can imagine

1518469855
Hejsil
I wonna make the nds loading and writing code simpler anyways

1518469870
Hejsil
Maybe even eliminate recursion

1518469885
andrewrk
my favorite hobby

1518469955
andrewrk
recursion is super useful... and harmful to static analysis

1518469979
Hejsil
Indeed, and those stack overflows too

1518470005
andrewrk
someday we're gonna have a feature to opt in to having the compiler determine maximum stack upper bound

1518470030
andrewrk
and then we'll even put on our sunglasses and tell the linker, "I only need 80 KB."

1518470099
Hejsil
And be able to spawn tasks/coroutines

1518470105
andrewrk
yeah that's a huge win

1518470133
andrewrk
I learned more about coroutines though, and I don't think you have to create a stack for them. they share the stack of the caller

1518470160
Hejsil
How does that work?

1518470252
andrewrk
you allocate heap memory for the stack frame and registers of the coroutine you're calling. this memory is called the coroutine frame. when the coro suspends it saves that information in the coro frame, and the current stack frame and registers are replaced with a different one's coro frame

1518470294
andrewrk
the coroutine can only suspend in its own frame, so for example if it calls a function, that function has to return before the coro can suspend

1518470360
andrewrk
there's kind of a secret component to making coroutines useful, which is a userland scheduler, which would create all the coroutines, and then when one suspends, decide which one to resume

1518470518
Hejsil
And then it's the schedulers job to spread these coroutines over a number of threads then if some parallelism is wanted?

1518470540
andrewrk
yes

1518470589
Hejsil
Make sense. And Zig would ofc allow for different user level schedulers, like allocators :)

1518470595
andrewrk
of course :)

1518470599
Hejsil
Nice

1518471235
andrewrk
there's a problem to solve regarding what it will look like to call a coroutine

1518471264
andrewrk
currently the semantics of LLVM coroutines are:  inside the coroutine, you ask how many bytes it needs. then you have to somehow allocate that memory.

1518471303
andrewrk
currently zig language has no dependencies on the standard library and it does not define any error codes

1518471401
andrewrk
to maintain this we'd have to have something like this: @coroCall(context: var, alloc: fn(context: var, byte_count: usize)?[]u8, args: ...) ?CoroHandle

1518471464
andrewrk
I think this is an llvm limitation though. it would be way better if we could ask the coro size from outside

1518471533
andrewrk
then it could be:  const need_bytes = @coroFrameSize(coro_fn); const bytes = try allocator.alloc(u8, need_bytes); const handle = @coroCreate(coro_fn, bytes, args...);

1518471622
Hejsil
Aaah, so the size of the frame is only available from inside coro, and it requires a callback to allocate memory

1518471642
andrewrk
yeah. this is so important I think I might submit a patch to LLVM

1518475640
andrewrk
I just glanced through the code, it looks to be fundamentally possible. so it's just a matter of doing the work and convincing LLVM to accept it

