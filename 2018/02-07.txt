1518005612
tjpalmer
jfo, thanks for the tips. I guess I thought it was further along than it was, including in llvm.

1518008065
SimonNa
hi, I gave Zig a try :) I'm in examples/guess_number, 'zig build' fails; only if I move ./main.zig to ./src/main.zig, game compiles and works well

1518008106
SimonNa
(Arch 64 bit, I built Zig from github repository)

1518008307
SimonNa
I suppose 'zig build' is the correct command still to build, or what would the workflow be?

1518010271
jfo
SimonNa: I think the standard build template expects main.zig to live in ./src, but that is configurable (when you run `zig build` in a directory without a build.zig file, it writes a template for you.)

1518010389
jfo
you can also compile the main directly with `zig build-exe main.zig`, that should work wherever `main.zig` is if it's not referencing relative paths with @import

1518010399
SimonNa
ah, yes, it writes build.zig and that then points to nonexistant src/main.zip

1518010449
SimonNa
yeah, build-exe works out of the box :)

1518010455
jfo
I find this behavior a little confusing too, I would expect the template to be a flag like `zig build --template` and for `zig build` to fail if there is no build.zig

1518010460
jfo
:)

1518010506
jfo
it's very easy to run build in the wrong directory or something and have a new file

1518010514
SimonNa
yes, that sounds easier to understand

1518010560
SimonNa
in the impl, on 'zig build' I even got compile errors (with lines in the example), surely it couldn't be that the example had this many errors

1518010579
SimonNa
yeah, would have expected a cleaner, shorter error here

1518010613
SimonNa
anyway, building Zig in the first place went well, sticking 100 % to the build instructions from the github readme, that was good

1518010628
jfo
:+1:

1518010712
SimonNa
the compelling features are the non-null and non-error by default, and forced un-nulling/un-error-packing when an API allows returning null/error

1518010758
jfo


1518010825
SimonNa
thanks, good idea to report. I'll reply later with the experience from building the example game

1518010857
SimonNa
it's easy to look into the generated files and guess a working setup, but better error would indeed be nice

1518010892
jfo
hi Hejsil

1518010898
Hejsil
Yo

1518010925
jfo
SimonNa, please do! that's valuable new user experience testing :)

1518010938
SimonNa
hnn :)

1518011206
Hejsil
jfo, your method issue made me realize the magic of method calls in Zig. It's not a lot, but calling methods is basically syntactic sugar for @typeOf(instance).method(instance)

1518011254
Hejsil
Which is a weird behavior, compared to the normal namespace access that . does

1518011286
jfo
yes I think the core issue is the overloading (as it were) of dot access

1518011309
jfo
I find it strange that I use the same syntax for both "instance" and "static" "methods"

1518011332
jfo
sorry for all the quotes but I don't mean to use these terms concretely though they are currently applicable

1518011379
jfo
and oh yeah I see what you're saying with @typeOf

1518011387
Hejsil
I think, "instance" and "static" makes sense. It's basicly just namespace access

1518011413
jfo
yes I just don't want to pin the discussion to that framing, there is a lot of baggage that comes with the terminology

1518011415
Hejsil
Ye, you need typeOf to avoid the method magic

1518011427
jfo
like you said to avoid public protected etc

1518011466
Hejsil
Uuurh, if method syntax changes, then my codebase will break hard

1518011468
Hejsil
Again

1518011469
Hejsil
Lol

1518011473
jfo
the ability to treat a struct body as just another scope is really interesting to me, you can do some funky variable psuedo capture kind of

1518011498
jfo
I don't think changing the syntax is necessarily the right idea, I was just trying to make it clearer when something is taking self

1518011523
Hejsil
Well, let's see what happens

1518011552
jfo
one of the only things I like about javascript is the ability to name anon functions with variable assignment

1518011621
jfo
if we had both anon function syntax and default struct init values, that could be a way to make a distinction b/t instance and static method. I haven't fully though this through yet though so I'm interested to see where the discussion goes

1518011724
Hejsil
I think there was a discussion about changing the function syntax, so that you just bound anon functions to constants.

1518011735
Hejsil
const func = fn() void { }

1518011740
Hejsil
Something like that

1518011746
Hejsil
Though I can't find where that was

1518011775
jfo
yeah I really like that

1518011781
jfo
at least as an option

1518011859
jfo
oh god anything but `->` pls :) ptphpd

1518011915
jfo
actually I think there's conflation with C's dereferencing member access with that too though

1518011926
jfo
idk, glad we're thinking about it though!

1518011945
Hejsil
`->` was mostly just joking around

1518011959
Hejsil
Though I actually think the syntax makes things more clear

1518011987
Hejsil
instance->method(): Put instance into method, or something like that

1518012001
jfo
yeah I'm kidding too, it's not the worst thing in the world. it would be funny to take -> out of the return value definition and put it straight back in again somewhere else

1518012030
Hejsil
Oooh ye, totally forgot that lol

1518012052
Hejsil
Even though I still write -> by mistake

1518012065
jfo
ha

1518012089
SimonNa
jfo:

1518012115
jfo
SimonNa: ty!

1518012122
jfo
gtg to work, ttyl

1518012127
SimonNa
see you!

1518021011
MajorLag_
Jon Blow is doing compiler stuff on twitch right now if anyone is interested

1518027621
andrewrk
I wish he would use text to communicate information about jai

1518027629
andrewrk
videos take so long to consume

1518028556
MajorLag_
I agree. Can't cntrl-f a video.

1518032282
GitHub150
[zig] bnoordhuis opened pull request #750: DRY 'is slice?' conditionals in parser (master...dry-slice)

1518032346
GitHub49
[zig] andrewrk pushed 1 new commit to master:

1518032347
GitHub49
zig/master 0090c2d Ben Noordhuis: DRY 'is slice?' conditionals in parser (#750)

1518032347
GitHub131
[zig] andrewrk closed pull request #750: DRY 'is slice?' conditionals in parser (master...dry-slice)

1518033502
zesterer
If people are worried about conflating "->" with C's pointer member access operator, why not use "=>" instead?

1518033523
andrewrk
I'm pretty happy with . instead of ->

1518033529
andrewrk
do people really want it changed?

1518033686
zesterer
andrewrk: I mean for function declarations. i.e: fn add(a: i8, b: i8) => i8 { return a + b; }

1518033952
andrewrk
this would be to have void return types allow omitting the type

1518033983
andrewrk
and then an inferred error would be !=> void  or would it be  => !void ?

1518034010
andrewrk
and also we need to solve the ambiguity of fn foo() => error {}{}

1518034291
zesterer
andrewrk: I see no reason to change the current syntax other than the "readdition" of the "->" operator changed to "=>". Unless there is call to of course?

1518034337
andrewrk
if we're going to mess with the return type again I want to solve the syntax problem at the same time

1518035746
jfo
andrewrk: the only thing I don't like about omitting -> on return types is that it makes function signatures look a little wierd on type declarations. ie struct { f: fn(u8) u8 }

1518035781
jfo
in that case the return type is kind of disconnected, but struct { f: (fn(u8) u8) } solves that for me so nbd

1518036397
zesterer
andrewrk: What syntax problem, sorry?

1518036507
andrewrk
zesterer,  the ambiguity of fn foo() => error {}{}

1518036531
andrewrk
`symbol {}`  could be the return type, or `symbol` could be the return type and {} the fn body

1518036557
andrewrk
most notably with error {}  in the error-sets branch

1518036569
zesterer
andrewrk: I'm not quite sure what "symbol {}" is supposed to be here. {} is the void object, right?

1518036594
andrewrk
for example Foo {}  instantiates a struct of type Foo

1518036610
andrewrk
fn bar() Foo {}

1518036634
andrewrk
fn bar() Foo {.a = 1} {}

1518036709
zesterer
andrewrk: The implication being that it's possible to have a value in a return type?

1518036766
andrewrk
with error {} (the empty error set) it's actually ambiguous

1518036854
zesterer
I don't understand why you'd want a value as part of the return type definition of a function at all.

1518036857
SimonNa
what was the original design decision behind 'fn bar() Foo' instead of 'fn bar(): Foo' or '-> Foo'?

1518036886
andrewrk
SimonNa,

1518036895
zesterer
SimonNa: "fn bar(): Foo" implies that the function

1518036930
andrewrk
zesterer, you wouldn't want a value. but you want a context free grammar, and whether something is a value or a type is context

1518036967
zesterer
andrewrk: I agree. Why is "error {}" a type? Or am I myself falling to this ambiguity issue?

1518036970
SimonNa
yeah, thanks :)

1518037015
andrewrk
in the error-sets branch, error{} is an ErrorSet type, which has 0 members in the set

1518037037
andrewrk
which is important for calling functions which return an inferred error union type at compile time

1518037092
zesterer
I think using braces in types is a huge mistake, personally.

1518037104
andrewrk
what's your counter proposal?

1518037126
zesterer
I don't have one, but they're used as an indication of code, not types in most cases

1518037141
zesterer
Is it possible to use "<>" or "[]" instead?

1518037150
andrewrk
struct {  }  looks very comfortable to users of most other languages with the feature

1518037165
zesterer
But "struct{}" isn't a type

1518037170
andrewrk
yes it is

1518037187
zesterer
Which languages are you talking about? I've never seen that syntax used before

1518037193
andrewrk
C, Rust, Go

1518037225
zesterer
I've never seen that used in C as a type in my life. Can you give an example use case?

1518037375
SimonNa
zesterer: in C: struct { int x; } y; // for when you don't have to name the type

1518037390
SimonNa
and likewise struct{} y; is allowed in C

1518037436
zesterer
SimonNa: Okay fair enough. I'd forgotten about that.

1518037441
SimonNa
probably handy for throwaway local structs? I've never used it much :)

1518037450
zesterer
Still seems like appallingly ugly syntax though

1518038149
GitHub27
[zig] bnoordhuis opened pull request #752: format struct pointers as "<typename>@<address>" (master...format-struct-pointers)

1518038342
GitHub46
[zig] andrewrk pushed 1 new commit to master:

1518038342
GitHub46
zig/master 79ad1d9 Ben Noordhuis: format struct pointers as "<typename>@<address>" (#752)

1518038345
GitHub53
[zig] andrewrk closed pull request #752: format struct pointers as "<typename>@<address>" (master...format-struct-pointers)

1518038633
MajorLag_
anonymous structs aren't very useful in Zig. Try taking an anonymous struct as an argument, for instance. That's not a complaint, just an observation.

1518038659
andrewrk
I would agree with that observation. they're mostly useful for returning from a function

1518041319
zesterer
andrewrk: Why must 'error {}' be the error set? Why not '%{}'?

1518041493
andrewrk
there's no `%` sigil in error-sets branch

1518041526
andrewrk
plus, error { } looks a lot like enum { } which is very similar to how it acts

1518041535
zesterer
Right

1518041753
zesterer
Perhaps requiring a single comma inside an empty set to differentiate it from a code block? "error {,}"

1518041765
zesterer
It's ugly, but it would fix the issue

1518042351
andrewrk
I'm not satisfied with that

1518043375
GitHub90
[zig] bnoordhuis opened pull request #753: implement openSelfExe() on darwin (master...darwin-openselfexe)

1518043380
GitHub51
[zig] jfo opened pull request #754: improve behavior of `zig build` (master...master)

1518043534
GitHub161
[zig] andrewrk pushed 1 new commit to master:

1518043534
GitHub161
zig/master c88e6e8 Jeff Fowler: improve behavior of `zig build` (#754)...

1518043536
GitHub20
[zig] andrewrk closed pull request #754: improve behavior of `zig build` (master...master)

1518045066
zesterer
andrewrk: I wouldn't be either. Just throwing ideas out there ;)

1518045285
GitHub195
[zig] andrewrk closed pull request #753: implement openSelfExe() on darwin (master...darwin-openselfexe)

1518045286
GitHub158
[zig] andrewrk pushed 1 new commit to master:

1518045287
GitHub158
zig/master dd20f55 Ben Noordhuis: implement openSelfExe() on darwin (#753)

