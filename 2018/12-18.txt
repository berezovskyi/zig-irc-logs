1545091280
daurnimator


1545091288
andrewrk
thanks!

1545091308
daurnimator
andrewrk: I feel like I don't know that much about it..... but its really hard to find people that know the actual details

1545091645
andrewrk
yes! got @sliceToBytes working:

1545091833
andrewrk
and here's what happens if you change all the `var` to `const`:

1545091845
daurnimator
andrewrk: to use kernel32.dll+user32.dll or not is sort of like the question to use libc or not for linux.

1545092546
daurnimator
andrewrk: copy ellision progress is good. Though my lack of ability to read LLVM IR only lets me observe assume that a single removed memcpy call is what you were trying to do.

1545097221
andrewrk
daurnimator, also the fewer number of alloca's

1545097256
andrewrk
also if you slice the expression inside @sliceToBytes in master, it creates yet another memcpy/alloca, but if you do it in copy elision branch, it does not. still only 1 alloca per var

1545104364
mgxm
andrewrk: I made some progress on the freebsd side

1545104459
andrewrk
mgxm, do tell

1545104517
mgxm
tomorrow I will try to get the stack trace working

1545104556
daurnimator
andrewrk: don't forget to tick off sliceToBytes on

1545104600
mgxm
the debug info is not implemente

1545104701
andrewrk
mgxm, isn't it ELF/Dwarf?

1545104733
andrewrk
daurnimator, thanks :)

1545104836
daurnimator
andrewrk: re

1545104894
mgxm
yes, but it's not implemented on the debug.zig, so I'm getting "unable to open deub info"

1545105155
andrewrk
daurnimator, find out what the ABI is and use that, and ignore valgrind.h

1545105166
andrewrk
if they don't have a stable ABI and require depending on C code, give up

1545105183
daurnimator
andrewrk: valgrind.h is full of per-target inline assembly

1545105213
daurnimator
each target with a 1000-line explanation of platform specific hacks

1545105226
andrewrk
I suggest starting with x86_64

1545105246
daurnimator
linux?

1545105306
andrewrk
sure, I mean it's up to you, which platform would be most useful to you right now?

1545105323
daurnimator
andrewrk: well amd64 linux is what I use day-to-da

1545105326
daurnimator
y

1545105350
daurnimator
though my question was more about what approach is best

1545105361
daurnimator
sounds like you think porting the header to zig is the best answer?

1545105525
andrewrk
daurnimator, I think so. make sure the ABI is stable

1545105556
daurnimator
andrewrk: it is (though its extensible)

1545105604
daurnimator
one "trouble" may be valgrind plugins that add more things on top of valgrind.h

1545105664
daurnimator
andrewrk: why did you immediately dismiss the approach of e.g. improving @cImport (I have no idea what definciencies may existg)?

1545106197
andrewrk
daurnimator, it's an unnecessary dependency on libclang

1545106379
daurnimator
andrewrk: so what's the long-term steady state? that valgrind also ship e.g. valgrind.zig 'headers'?

1545106380
andrewrk
I don't want to create dependencies on C where they don't fundamentally exist

1545106445
andrewrk
the long term steady state is that valgrind has a well documented stable ABI, and then languages can create their own bindings packages

1545106507
daurnimator
I'm not sure that makes sense

1545106566
daurnimator
AFAIK, valgrind essentially "emulates" a CPU. it tracks loads/stores to look for undefined behaviour. it has a JIT to run at almost-native speed.

1545106600
daurnimator
what the valgrind header does is insert 'magic' assembly no-ops that valgrind looks for as it emulates a CPU

1545106693
daurnimator
so you run a no-op instruction that tells valgrind "memory at 0xdeadbeef is now defined to write to for 42 bytes". "memory at 0xcafebabe is now undefined"

1545106766
daurnimator
so the "ABI" as I guess we call it is "insert this specific assembly instruction; insert the arguments by ______; this clobbers registers X,Y,Z"

1545106955
andrewrk
it comes down to inline assembly

1545109134
daurnimator
andrewrk: yeah.... so you're still saying you want to just implement it as inline assembly in valgrind.zig?

1545109226
andrewrk
yes, I would be reluctant to add the first .h file to the zig standard library in order to get this valgrind compatibility

1545109292
daurnimator
okay. I may have to figure out how inline assembly works in zig. I have seen it once or twice I think

1545118730
IntoxicatedHippo
Has anyone looked in to making a Zig Emacs mode based on cc-mode? I've been trying to do it but I can't find a good way to handle while and for loop syntax.

1545134980
ross_k
Is there a reason the std library doesn't define abs() for integers? There's fabs() and complex.abs(), but can't find one that takes an i32.

1545139280
Hejsil
ross_k, i think you're looking for absCast

1545139518
knebulae
daurnimator and andrewrk - I have a lot of experience going down this road to varying degrees of success, and daurnimator is right, using raw NT opens up a lot of possibilities for pure POSIX on Windows (not WSL/Cygwin/MinGW).  But the truth is that hardly no one actually writes raw NT software really except drivers and utilities mostly.  There are a few things needed to get UEFI going.  I will make the changes to the options discussed, and prepare a

1545139518
knebulae
basic PoC UEFI application.  Then I need to learn to use git well enough to do a PR.  And no, I'm not new, I'm old. :/

1545141975
bodie_
andrewrk, what's your priority on the coro rewrite?  that's a ton of work, right?

1545142687
andrewrk
knebulae, we're not too much sticklers for process around here. feel free to mail your patch to the mailing list

1545142703
andrewrk
or paste a link here

1545143779
andrewrk
bodie_, yes it's a ton of work and depends on this copy elision branch that is also a ton of work. I think the coro rewrite is less work than copy elision though

1545143827
andrewrk
my plan after merging copy elision is to do some other, less huge things, such as SIMD, anon enum literals, then move on to coro rewrite

1545143869
andrewrk
probably just fix bugs for a few days and merge PRs too

1545147598
bodie_
andrewrk, I was just reading your comment on 943 (package management.)  This is an obviously huge problem for many stacks, not just languages.  Have you thought about a Nix-like option?

1545147599
MajorLag
You know, if you could `use` with structs, then you could include an interface's 'convenience' functions in your implementation directly. They'd just have to be written with `self: var`

1545148079
andrewrk
that's an interesting idea

1545151456
bodie_
then the in-tool solution would just need to support the features required by something like that

1545151466
bodie_
"just"

1545151472
bodie_
but it frames the problem differently...

1545151494
halosghost
“just” has become one of my favorite four-letter words

1545151527
bodie_
it is very often a weasel-word or has other social weirdness

1545151553
halosghost
“just get me this report that we have no spec for and has all sorts of weird edge cases… by Thursday”

1545151613
bodie_
social just-ice :)

1545151817
MajorLag
andrewrk: currently here's what I'm trying, a slight modification on Hejsil's gists:

1545155378
mgxm
stack trace partially working on freebsd

1545155644
Hejsil
Repl for the people

1545155657
Hejsil
(Really just a wrapper around the zig compiler, but whatevs)

1545155766
halosghost
ooh, a zig repl

1545155779
halosghost
:D

1545155792
andrewrk
mgxm, nice! getting source printing should be not too much more further work, I think

1545155820
andrewrk
also don't worry about those ???. I never got around to doing the dwarf code for determining function names yet

1545155839
andrewrk
it could be a contributor friendly issue actually. I'll write it up

1545155893
andrewrk
Hejsil, woah. looking at your video, I have no idea how this works

1545155899
andrewrk
it looks like magic

1545155920
Hejsil
The repl? Its pretty simple. We just generate code and invoke the compiler :)

1545155931
Hejsil
And print the latest expression

1545155967
halosghost
yeah, that's awesome

1545156000
halosghost
Hejsil: can it access @ functions?

1545156010
andrewrk
it appends each expression? so if you print again, does it print twice?

1545156016
Hejsil
No

1545156065
Hejsil
>> u8(1) generates const _0 = u8(1); print(_0)

1545156096
Hejsil
next line generates: >> _0 + _0    const _0 = u8(1); const _1 = _0 + _0; print(_1)

1545156538
mgxm
andrewrk: great, good to know. I will have free time in these days and maybe I can do that

1545159592
zachcarter
Hejsil: this isn't a real repl though right? because code is re-compiled?

1545159611
zachcarter
it's more akin to -

1545159667
zachcarter
there's a grant in progress for Nim to add support for a true repl to Nim - this is the RFC:

1545159673
zachcarter
seems like a lot of work

1545159735
andrewrk
I think we're going to have a compiler repl before we have a zig repl

1545159757
andrewrk
by compiler repl, I mean the command line equivalent of an IDE

1545159777
andrewrk
(which tests out the API that an IDE could use)

1545159823
andrewrk
hot code swapping is probably related to repls too:

1545160048
knebulae
andrewrk: any pointers for build environment on Windows?

1545160080
andrewrk
knebulae, are you asking for suggestions for a text editor / IDE?

1545160261
knebulae
I was more wondering if you built via cygwin or mingw, or cross-compiled from linux.

1545160361
andrewrk


1545160461
knebulae
andrewrk: thanks

1545160514
andrewrk
this is the supported way. I'm sure other ways work too

1545163366
MajorLag
after several revisions, I think this pattern is actually shaping up to be pretty reasonable:

1545163675
andrewrk
MajorLag, looks pretty good

1545163699
andrewrk
what would it look like with `use` as you want it to work?

1545163833
MajorLag
you wouldn't need the `AllocatorInterface(Impl)` wrapper, AbstractAllocator and FixedBufferAllocator (or wahtever) could just have `use AllocatorInterface;` (defined with `self: var`).

1545163858
MajorLag
and I suppose I'd rename AbstractAllocator to just Allocator

1545163953
MajorLag
It was just a thought as to how it could be cleaned up a bit, but I'm not sure that allowing `use` in structs will ultimately be a good idea.

1545163998
MajorLag
I'm willing to forge ahead as is on updating std.

1545166142
ForLoveOfCats
Is the Zig compiler fully self hosting or is the C++ implimentation currently being used?

1545166154
andrewrk
ForLoveOfCats, c++

1545166183
andrewrk
I started a serious effort to self host, and that led to a coroutines rewrite which is now blocking further progress

1545166231
ForLoveOfCats
I thought so, but the readme mentions compiling the self hosted compiler as a step in compiling Zig for normal use

1545166245
ForLoveOfCats
Am I misinterpreting it?

1545166299
andrewrk
I wonder if the italics actually make people not see the notes rather than point them out

1545166336
ForLoveOfCats
I did read that, however the wording threw me off hence I came here to ensure I understood its meaning

1545166344
ForLoveOfCats
which I did

1545166348
ForLoveOfCats
Thank you for your time!

1545166372
andrewrk
ForLoveOfCats, I see, thanks, I will clarify the wording

1545166530
andrewrk
ForLoveOfCats, I pushed a commit to clarify the wording. thanks for the feedback

1545166597
ForLoveOfCats
Oh wow, awesome!

1545176316
daurnimator
knebulae: writing drivers and utilities in zig seems like a reasonable goal IMO....

1545176368
daurnimator
but also, as I mentioned earlier, there are many situations where normal programs drop down to the nt api for a single task

1545176396
daurnimator
e.g. libuv uses the nt level socket api for polling, bypassing winsock. (which is much faster!)

1545176429
daurnimator
knebulae: also there is a project 'midipix' which is an implementation of posix on top of the nt api. I'd love it if zig "just worked" for midipix

