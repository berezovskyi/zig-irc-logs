1544584441
zachcarter
hello

1544584685
zachcarter
checking out zig, coming from the Nim world

1544588568
reductum
I'm trying to track down a memory leak. I have a loop creating hundreds of thousands of nodes in a linked list.

1544588596
reductum
When I use heap.DirectAllocator to allocate the new nodes, I quickly use up all the memory of my machine.

1544588645
reductum
But if I calculate how much space all the nodes will take, allocate a buffer of that size, and used a heap.FixedBufferAllocator, there is no memory explosion.

1544588691
reductum
Now, I'm not surprised the fixed buffer allocator is faster, but I would expect the 2 allocators to ultimately allocate the same amount of memory.

1544588806
reductum
Maybe I'm missing something simple. If anyone has any ideas, they would be most welcome.

1544592581
andrewrk
reductum, DirectAllocator isn't meant to be used as a general purpose allocator. zig has no general purpose allocator in the standard library yet.

1544592600
andrewrk
DirectAllocator on posix systems calls mmap directly. so if you allocate 1 byte, you get an entire page

1544595468
reductum
andrewrk: Thank you. I had assumed it wrapped malloc. I should have read the source more closely!

1544595524
andrewrk
reductum, better standard library docs will happen eventually

1544595546
andrewrk
reductum, also if you're willing to link against libc (or already are linking against libc) I would recommend to use std.heap.c_allocator, which wraps malloc

1544596315
reductum
andrewrk: I happen to be working on Advent of Code stuff, and want to abide by the Zig rules.

1544596343
reductum
But it's been a really lovely experience exploring the current zig standard library and getting used to the language.

1544596356
reductum
Thanks for clearing up my confusion :)

1544596414
andrewrk
reductum, ah, for advent of code, I can recommend the ArenaAllocator backed by DirectAllocator. like this:

1544596454
andrewrk
idea being that you're going to run the thing once, so you don't mind allocating everything in one big arena, and then freeing it all together at the end (or just let the OS free it on shutdown)

1544596463
andrewrk
*not shutdown - on application exit

1544596573
reductum
That sounds ideal! I'll try it out.

1544598307
reductum
Day 10 is actually the first one I've done in a while that doesn't require an allocator.

1544599235
emekoi
is this (

1544610518
euantor
zachcarter: Nice to see a face I recognise from Nim here :)

1544619564
zachcarter
o/ euantor :)

1544628752
unique_id
I like how "struct { x: if(true) Foo else void }" replaces "static if" (an if statement that does not introduce a scope). I never made that connection before.

1544631963
andrewrk
alright, let's get everybody's pull requests merged today :)

1544632029
halosghost
all 12?

1544632039
andrewrk
I'm gonna try

1544632064
halosghost
ambitious

1544632066
halosghost
I believe in you :)

1544632489
andrewrk
halosghost, well, not copy elision yet. there's still a bunch to do

1544634161
halosghost
hehe

1544634983
MajorLag
If it helps, mine has no conflicts with master since I rebased it a while back. As long as you're satisfied with the code it should be a freebie.

1544635362
andrewrk
MajorLag, nice, I'll go on to that one after the one I'm looking at now

1544637275
daurnimator
aw, no copy ellision :(

1544638008
andrewrk
daurnimator, it's still coming along, slowly but surely

1544641750
mgxm
first time testing zig and am getting this error on freebsd

1544641781
mgxm
xf86_64.zig:101:15: error: invalid token: '&'

1544641865
andrewrk
mgxm, willing to contribute a little? try this:

1544642024
mgxm
sure

1544646698
sjums
Hey, I currently have a piece of code crashing the zig compiler without any stack traces or errors. Is this ever intended?

1544646711
andrewrk
sjums, no, that's always a bug

1544646729
andrewrk
unless it's a stack overflow in which case it's a bug in stage2 but not stage1

1544646754
sjums
Unsure what it is. Will try to make a minimal example

1544646775
andrewrk
thanks

1544646780
sjums
...tomorrow :) currently heading to bed!

1544646798
andrewrk
good night

1544646827
sjums
Thanks. You too whenever you reach that time ðŸ‘Œ

1544648371
mgxm
andrewrk: after patching:

1544648439
andrewrk
mgxm, @maxValue is replaced by std.math.maxInt

1544648469
andrewrk
does the second error have any notes?

1544648764
mgxm
no, just that...

1544648798
mgxm
I'm home now, I will try to build on my machine.

1544649095
andrewrk
mgxm, your machine is also x86_64, yes?

1544649175
andrewrk
try this:

1544649903
mgxm
same error with maxValue, I will clone and start again... maybe I'm doing something wrong.

1544650012
andrewrk
std.math.maxInt, not @maxValue

1544650022
andrewrk
@maxValue was deleted and that code needs to be updated

1544650037
andrewrk
don't forget to `make install` after you modify std lib files

1544650062
andrewrk
you probably don't need to clone and start again

1544653543
mgxm
so, I changed all the references from maxValue to use std.math.maxInt, and now I will try to fix the other errors.

1544653592
andrewrk
mgxm, sounds like progress

1544653606
mgxm
std/os/file.zig:183:33: error: no member named 'access' in '/usr/home/build/zig/build/lib/zig/std/os/freebsd/index.zig'

1544653608
mgxm
/std/os/file.zig:183:52: error: no member named 'F_OK' in '/usr/home/build/zig/build/lib/zig/std/os/freebsd/index.zig'yye

1544653655
andrewrk
mgxm, looks like you need to either add the `access` freebsd syscall in freebsd/index.zig or adjust the code that is depending on `access` to use a different system API

1544653683
mgxm
yes, I Ill try to do that

1544653699
mgxm
but I have to start all the build process again and again

1544653710
andrewrk
all the build process? why?

1544653725
andrewrk
when you do `make install` it is supposed to only build the things that changed

1544653726
mgxm
if not, I get Unable to create builtin.zig: invalid format

1544653766
andrewrk
I was debugging this issue earlier, on my freebsd raspberry pi, but gdb didn't work and lldb kept freezing and kill -9 didn't kill it

1544653781
andrewrk
and `make` was rebuilding all the source files, not only the ones that changed

1544653786
andrewrk
so I gave up for now

1544653805
andrewrk
maybe debugging will work better on x86_64

1544653842
andrewrk
mgxm, whatever is causing that error is probably in os.cpp in the compiler

1544653886
mgxm
cool, thank you

1544653900
mgxm
I'lll try to find the issue

1544654096
andrewrk
mgxm, it has to do with reading the cache from ~/.local/share/zig/stage1/

1544654918
mgxm
yes, indeed... removing the cache exe/ud4....txt resolved the error

1544655180
andrewrk
don't get used to doing that though... that's supposed to be working

1544655249
andrewrk
there's probably a silly bug in the freebsd os.cpp functions

1544658944
mgxm
andrewrk: I was reading the code an trying to figure out the error

1544658966
mgxm
seems to be on this line

1544659043
andrewrk
mgxm, can you see if `this_path` and `chf->path` are different by some strange thing? perhaps one of them has an extra null byte or something like that

1544659126
mgxm
yes, of course

1544659133
mgxm
I will make my dinner and come back later

