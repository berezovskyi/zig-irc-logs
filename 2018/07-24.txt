1532400660
nwsharp
Hey. Poking away on float parsing.

1532400681
nwsharp
What's the preferred line-limit length in the standard library code?

1532400876
v1zix
Based on the Zig style guide, it's recommended to be 100:

1532406707
GitHub175
[zig] andrewrk pushed 1 new commit to master:

1532406707
GitHub175
zig/master 10bdf73 Andrew Kelley: Merge pull request #1266 from ziglang/self-hosted-libc-hello-world...

1532406708
GitHub114
[zig] andrewrk closed pull request #1266: Self hosted libc hello world (master...self-hosted-libc-hello-world)

1532410137
dbandstra
hmm `_ = func();` is risky if you change a function which used to return just a regular value, so that it now can return errors... now all those calls are silently ignoring the errors

1532414498
GitHub139
[zig] nwsharp opened pull request #1282: std.io: PeekStream and SliceStream (master...master)

1532416354
Triplefox[m]
topic that came up at the meetup i went to tonight: compiler assistance with constant-time execution guarantees to prevent sidechannel attacks. it sounds interesting but also challenging to practically implement because cpu hardware isn't presently specified so tightly that it works the same everywhere

1532419161
unique_id
andrewrk, I have some C++ code that looks like this:

1532419966
unique_id
the loops are searching through a multidimensional data structure. When a condition is found, we invoke an algorithm on the data structure. There's no way to know what the algo does other than that it made progress, so we must restart our search.

1532420131
unique_id
The algo is given the current position

1532420314
nwsharp
I think that comes back to (about!) the only legitimate use of goto in C++ that I've come to accept these days: breaking out of multiple loop levels cleanly.

1532420372
nwsharp
Because what you have there is basically while(1) { for(...) { for (...) { break 2; } } }

1532420422
unique_id
right

1532420424
skyfex
Doesn't Zig have blocks for that? blk: { .... break :blk; .... }

1532420449
skyfex
Doesn't seem to be well documented, but there are some examples in the documentation that uses it

1532420458
unique_id
if the while loop in nwsharp is given a block name, then it would work

1532420474
unique_id
as far as I can see, to use blocks, I have to introduce an additional while loop, which is fine.

1532420500
unique_id
an while loop*, so 1 while, 2 for

1532420513
nwsharp
Mhm. Just started Zig yesterday. Didn't notice block labeling. Good ergonomic feature.

1532420545
skyfex
You sure? Again, the documentation is missing, but look at @compileLog example.. there's a block without a while or for loop

1532420578
unique_id
as far as I can see, blk: { break :blk; } breaks out of the entire block, it does not go to the top

1532420601
unique_id
it goes to the bottom, and if the block is a while/loop, then its like a continue

1532420610
nwsharp
Yeah, you'd need the extra while loop. Which IMHO is actually better even though it's more nesting.

1532420613
skyfex
Oh right, I didn't think it through probably

1532420617
skyfex
*properly

1532420646
very-mediocre
the outer while loop makes sense because what the goto would be doing is looping, imho it's more explicit which is in line with zig's style

1532420658
skyfex
Yes, I mean, you are essentially implementing a special loop, so 'while' would make it clearer

1532420701
unique_id
nwsharp: it's not better because I think it would need to look like this:

1532420736
unique_id
very-mediocre: it's less explicit, more confusing. Look at my last pastebin. It's not self documenting, that's for sure, and has a confusing extra break

1532420759
nwsharp
I honestly think that looks better fwiw.

1532420848
very-mediocre
Trying to parse the pastebins, not sure they're 100% equivalent

1532420903
very-mediocre
I'm not pro at zig, when you do `break :blk` i'm not sure if that breaks the whole while loop

1532420932
skyfex
Actually, I think the clearer way to implemented it is to introduce a variable.. while (!workFinished) { ... } and then break out of the outer for loop.. I think that very clearly expresses what you want to do

1532420941
very-mediocre
but I digress, I'd say it's more explicit but less readable, so you may have a point

1532420957
very-mediocre
since zig's priority is readability

1532420993
unique_id
it doesn't break out of the whole loop

1532421037
nwsharp
I don't like the induced-break-from-boolean pattern very much. It's about the only option w/o goto, though.

1532421044
very-mediocre
ok. Looking at the docs as I haven't seen an example of while with a labeled block before

1532421210
very-mediocre
recursion is an option here (or... it will be once they fix it)

1532421238
very-mediocre
anyway unique_id you have a point about readability

1532421243
nwsharp
Yeah, the docs could definitely use a bit on labeled blocks.

1532421256
nwsharp
It's in a few examples but I think it just comes out of nowhere.

1532421267
skyfex
There's also "for { } else { }" which could probably be used to good effect here.. have the outer for loop return a boolean which states if work is done. If you found work needed to be done, do "break :blk false" and in the else do "break :blk true"

1532421376
very-mediocre
skyfex's `while (!workFinished)` is what I'd do intuitively tbh

1532421398
unique_id
break :restart_work

1532421421
unique_id
now it documents itself

1532421427
nwsharp
I actually oftentimes write new functions that contains just the loop structure so I can use "return" to break out of all of them.

1532421430
unique_id
i'll have a look at the for else stuff

1532421596
nwsharp
Anyways, going to hit the sack. Will dream of breaking out of nested loops.

1532421599
skyfex
Yeah, just using functions would be good.. nested functions would probably help, but it's not supported yet

1532421642
nwsharp
Yeah. Once you start bringing up nested functions then closures start rearing their heads.

1532421668
very-mediocre
tbh it looks very recursive to me

1532421681
very-mediocre
the function should simply call itself until it terminates

1532421703
unique_id
these things are just complicating what is really simple and probably very efficient code. It's best to use while(true) :restart_work { }, which hopefully will result in the same number of jumps in the executable

1532421718
nwsharp
Unless you can guarantee a tail call you'd end up very unhappy if the algorithm takes a while to converge.

1532421746
very-mediocre
True.

1532421795
very-mediocre
This function looks like it ends on a tail call though

1532421807
nwsharp
Does zig have a mechanism to enforce a tail-call?

1532421816
very-mediocre
Recursion is broken in zig right now

1532421837
nwsharp
Well, there are tail-calls w/o recursion.

1532421874
nwsharp
I honestly would be surprised if I ever noticed that recursion was broken. I almost never use it. I think it's terrible.

1532421877
very-mediocre
True but that optimization is minor and wouldn't be felt in most cases

1532421897
nwsharp
It's not about speed so much as it is about stack space.

1532421919
nwsharp
And you definitely feel that in my experience.

1532421921
unique_id
My recursion skills are rusty, but I don't think I'd ever replace 14 lines of simple looping with a recursive function

1532421950
very-mediocre
It depends on context. If you're writing a compiler it's sometimes cleaner due to referential transparency

1532421965
nwsharp
Especially if you're like me and you like to put lots of things on the stack to avoid malloc at all costs.

1532421968
very-mediocre
where every function call can be considered as what it evaluates to

1532422006
nwsharp
(I write storage appliance software for a living. Malloc can sometimes be slower than your disk!)

1532422224
nwsharp
Now definitely going to bed.

1532422229
very-mediocre
gn

1532422237
very-mediocre
I might be forced to leave because Windows 10 decided it's update time

1532422250
nwsharp
hehe

1532423226
unique_id
andrewrk: This shows how bloated the Zig code looks compared to C++, primarily because of lack of c-style for loops:

1532423433
unique_id
ive labeled the gotos inconsistently in the c++ code, but it's fine. Just an error in extracting the code out.

1532423567
skyfex
Although I agree that the lack of C-style for loop makes Zig less clear here, I think C++ in general is a pretty good example that adding syntax to make various things "easier" can quickly make the language itself painfully bloated

1532423672
unique_id
Absolutely. But looping is central to programming and some code bases are going to have lots of the traditional style of looping (I'm guessing), and it gets bad when you have loops inside loops.

1532423674
skyfex
What would be better than C-style for loops is loops on ranges. There is a proposal for this, so you can chime in there:

1532423675
skyfex


1532423723
unique_id
absolutely, any solution where you don't have to declare a variable outside the loop would be fine

1532423769
unique_id
and thejoshwolfe's comment on a..b not knowing about whether it includes b, it wouldn't ever do that xD. Common we know this.

1532423778
unique_id
because b could be len

1532423782
unique_id
and we are 0 indexed

1532423845
Triplefox[m]
i've dealt with translating c-style loops to simple for-iterator/while syntax in haxe many a time...it mostly showed me that for loops in c are really terse constructs that do a lot, perhaps too much

1532423936
unique_id
all I mean when I say c-style for loops is a looping construct that does not require me to declare a variable outside of the loop

1532424495
Triplefox[m]
here is what happened with nim and inclusive range

1532428440
skyfex
Nim's syntax is pretty great in this regard. (0..<n) is absolutely clear. The only problem is that leaves (0..n) a bit ambigous

1532428601
very-mediocre
I fnid (0..<n) ugly

1532428701
very-mediocre
it's too fidgety having a syntax solution rather than a simple +1

1532428749
very-mediocre
in general I'm aghast at inconsistent syntax

1532428762
very-mediocre
< is a comparison operator, if you have it in a different context then that becomes a new operator

1532428782
very-mediocre
I have the same gripe with zig's `while (condition) : { i += 1}`

1532428799
very-mediocre
`:` denotes types everywhere else

1532428924
very-mediocre
`blk:` is also somewhat intuitive as it's the English usage of `:` to denote a label

1532428993
very-mediocre
Someone reading `while (condition) : { i += 1}` for the first time cannot understand it as it's special syntax

1532429110
very-mediocre
imho ranges should be indexed like arrays, with a non-inclusive upper bound

1532429632
skyfex
There's not enough characters on a standard keyboard to have both completely consistent and sufficiently large syntax if you ask me. If you want complete consistency, then it's best to go for real simplicity like Lisp or Forth

1532429655
very-mediocre
I want reasonable consistency, of course that's subjective and everything I say is imho

1532429671
skyfex
(but I don't like the while syntax either.. I think it should be replaced with for loop on ranges)

1532429740
unique_id
oh common

1532429774
skyfex
(but that introduces the problem that 0..n being exclusive is intuitive for arrays, but 0..n being inclusive is possibly more intuitive for ranges in general)

1532429822
very-mediocre
Ranges being inclusive is a footgun if everything else in your language isn't

1532429826
unique_id
if you remove ": (i+=1)" then you remove the usefulness of the continue statement

1532429854
very-mediocre
unique_id: I don't argue that it should be removed, only that the syntax is confusing

1532429876
unique_id
no more/less confusing than c's syntax

1532429906
very-mediocre
while (condition) : {expr} {something}

1532429916
very-mediocre
what does the colon mean, grammatically?

1532429916
unique_id
it's (expr)

1532430054
very-mediocre
fair enough, it's () not {}

1532430060
very-mediocre
but the point still stands

1532430065
skyfex
unique_id: good point.. it is an uglyness, but maybe it's a necessary uglyness

1532430093
unique_id
I don't find it ugly

1532430110
very-mediocre
But then why colon in terms of grammar?

1532430123
unique_id
who cares

1532430136
very-mediocre
well that's where we differ, I care about symbols being intuitive

1532430145
unique_id
the syntax is intuitive

1532430150
unique_id
and very simple

1532430173
skyfex
I'd say it's objectively a conceptual uglyness.. in that it's not very consistent with the rest of the language. Suddenly there's a statement that's evaluated somewhere completely different from where it is typed? Subjectively I don't find it too ugly either, but I think that's because I'm used to C style for loops

1532430184
tiehuis
: for while is a bit of an oddball compared to all other uses of :

1532430217
very-mediocre
andrewrk doesn't want to change it and I accept that, but I couldn't help discussing it while on the topic of consistent operators

1532430227
skyfex
My experience is that C style for loops is not very intuitive for people learning the language, I taught C++ for a class.. it always required qui

1532430230
skyfex
te a bit of explaining

1532430266
very-mediocre
If I were a beginner I'd find while() : () { } more confusing

1532430289
very-mediocre
for loop has 1 set of parentheses

1532430289
unique_id
if c style for loops are not intuitive, then it's because these people are completely new to programming

1532430308
unique_id
and their opinion isn't worth a dime

1532430332
skyfex
Logically it should be "while (..) { .. } : (..)" but I realize that's less readable to experienced programmers

1532430348
skyfex
That's why I say some uglyness can be necessary

1532430349
unique_id
yes, and defer shouldn't exist ...

1532430357
unique_id
or be placed somewhere completely differently..common

1532430368
very-mediocre
I don't think defer is analogous

1532430408
very-mediocre
for me it's the mental parsing of operators and parentheses that i find adds the most complexity to nested code

1532430444
very-mediocre
>`<skyfex> Logically it should be "while (..) { .. } : (..)"` hence my mistake above, i recalled it that way

1532430446
skyfex
defer is actually a pretty good example that if you're going to have a construct that moves your code somewhere else, it should be a pretty damn explicit syntax for it

1532430477
unique_id
like a special location in a for or while loop

1532430561
unique_id
having the post operation at the top with the condition makes the loop more declarative, it makes it way clearer what it's doing

1532430581
skyfex
but anyway, I'm not proposing any changes.. only if for loops is generalized to the point that "while(..) : (..)" becomes redundant should it be considered at all.. but that's way in the future for the language

1532430582
unique_id
versus having it after the loop body

1532430605
very-mediocre
unique_id: at this point you're just reinventing the for loop, but with exotic syntax

1532430625
very-mediocre
and i daresay, special syntax

1532430662
very-mediocre
and more parentheses and operators than needed

1532430771
very-mediocre
skyfex: with ranges `for` becomes pretty nice

1532430846
very-mediocre
I wonder if something can be done at comptime to generate int ranges

1532431156
very-mediocre
comptime is a bad way to put it

1532431167
very-mediocre
i mean a minimal-cost abstraction

1532431171
very-mediocre
static when needed.

1532431236
skyfex
I think LLVM optimizations can handle it in most cases

1532431309
very-mediocre
in userland we can do it as generators right now, but there's surely quite an overhead

1532431318
very-mediocre
and LLVM doesn't optimize that yet apparently

1532431383
MajorLag2
seems like a lot of effort to avoid declaring a variable outside a while loop.

1532431417
very-mediocre
I'm actually OK with while loops, I'm just hopelessly into playing the devil's advocate for everything

1532431437
very-mediocre
In my own code I just don't use the continue expression thing for while loops and do i+=1 at the end of the loop

1532431444
MajorLag2
fair enough. I too find value in spitballing these things sometimes.

1532431502
very-mediocre
I'm aware I can be annoying so I often have to remind that I think zig is awesome, there's very little to criticize honestly

1532431582
MajorLag2
I didn't think it was annoying, I just thought that once generators came up as a solution it was worth mentioning that all you were doing was trying to avoid declaring a variable.

1532431620
very-mediocre
that's true, ultimately that's what ranges boil down to. :/

1532431779
very-mediocre
still removes quite a bit of boilerplate if you have a lot of nested loops

1532431791
very-mediocre
or else languages wouldn't bother having range literals

1532431889
unique_id
very-mediocre: I don't want to see your loops if you never make use of early continues. What about early returns? Skip them too? In my early continue/return can simplify the rest of the code a lot

1532431900
unique_id
wow. I meant in my opinion

1532431928
very-mediocre
Of course I use early continues and returns

1532431960
unique_id
you said you do i+=1 at the end of the loop

1532431973
unique_id
so you'll have to place that before all continues

1532431978
very-mediocre
true

1532431992
very-mediocre
so far it's been OK

1532431997
unique_id
OK

1532431997
very-mediocre
i may change my tune when I do more advanced things with zig

1532432214
very-mediocre
in many of those cases I'd be using `for`

1532432386
very-mediocre
I find that most code that needs early continues is dealing with domain logic of some kind, often i'll be looping through an array

1532432395
very-mediocre
rather than incrementing an int

1532438174
bheads_
zig should be able to name while statments

1532438216
bheads_
A: while(1) {  B: while(1) {  continue A;  break A;  }}  << continue and break on the outer loop

1532438613
andrewrk
dbandstra, it's planned so that _ = foo() is not allowed to ignore errors. I'll dig up the issue

1532438782
GitHub14
[zig] andrewrk pushed 2 new commits to master:

1532438782
GitHub14
zig/master 74c80d2 Andrew Kelley: Merge pull request #1282 from nwsharp/master...

1532438782
GitHub14
zig/master 0046551 Nathan Sharp: std.io: PeekStream and SliceStream...

1532438785
GitHub185
[zig] andrewrk closed pull request #1282: std.io: PeekStream and SliceStream (master...master)

1532439515
andrewrk
unique_id,

1532439541
andrewrk
oops. throw in a break; at the end of the outer while.

1532439564
bheads_
so you can label a loop

1532439605
andrewrk
ah, sorry you all talked about this already :)

1532439612
andrewrk
I'm still catching up in the scrollback

1532439641
bheads_
I wasn't sure if it was supported, I dont see it in the docs

1532439818
andrewrk
nwsharp,

1532439887
andrewrk
nwsharp, we also have plans to have the compiler complain about call graph cycles, and then various not-fully-proven ideas about how to have recursion that is proven to be safe (you might need to allocate some heap memory)

1532440221
andrewrk
bheads_, we have labeled while and for. the syntax is close to what you have:  continue :A; break :A;

1532441902
bheads_
yep got the syntax wrong, but there is no mention of that usage in the docs. So I was just guessing that this existed or that it would be a good feature to add

1532441964
andrewrk
I made a note to add docs for this

1532441975
andrewrk


1532442029
bheads_
nice :)

1532442150
GitHub7
[zig] andrewrk pushed 1 new commit to master:

1532442151
GitHub7
zig/master 29e19ac Andrew Kelley: fix logic for determining whether param requires comptime...

1532442152
GitHub16
[zig] andrewrk closed pull request #1213: Possible fix for #778. Two cases. (master...generic_function_argument)

1532442329
very-mediocre
very simple comptime int ranges

1532442329
very-mediocre


1532442373
very-mediocre
for those who like that sort of thing. Most other stuff should use for(slice)

1532442472
andrewrk
very-mediocre, that's pretty clever

1532442481
andrewrk
the `inline` is unnecessary

1532442488
andrewrk
on the fn

1532442498
bheads_
nice! I would love to see a common pattern for generators, either Alexandrescu style ranges or coros

1532442523
very-mediocre
ah, I guess the compiler would inline as it sees fit at the callsite

1532442530
andrewrk
very-mediocre, this is relevant:

1532442705
very-mediocre
that's pretty great

1532442722
very-mediocre
for a second i was going to make a dyn_range equivalent that wasn't comptime

1532442767
very-mediocre
although in this particular case you're better off using for(slice), but the "eager to be comptime" idea did occur

1532442791
andrewrk
I don't see what's so bad about {var i: usize = 0; while (i < n) : (i += 1) {}}

1532442818
very-mediocre
haha, sorry for being such a pest and not letting that go, it's purely subjective

1532442838
andrewrk
no worries, it seems that people care very much about how for range loops look

1532442843
bheads_
that works when your looping over ints

1532442845
very-mediocre
it feels like a special usage of the colon that doesn't occur anywhere else

1532442869
bheads_
what about looping over dynamic sets and generators

1532442874
andrewrk
my reasoning was: colons are used for block labels and labeled break and continue. and this is a special continue block

1532442878
bheads_
also ranges should be safer

1532442897
andrewrk
we might end up having generators. that's still on the table

1532442924
andrewrk
if I can wrangle llvm's coroutine allocation elision and get some guarantees out of it

1532442951
bheads_
and thats why you are the best andrew

1532442952
andrewrk
generators would clearly be the most satisfying answer to looping over a range

1532442961
very-mediocre
re: colon, I see

1532443014
very-mediocre
but if it's a block, why is it in parentheses

1532443020
very-mediocre
rather than {}

1532443031
andrewrk
otherwise it would be ambiguous with the {} block of whe while loop

1532443040
andrewrk
same reason that if, switch, for, etc have ()

1532443063
andrewrk
if foo { } // are you initializing a struct or is it the condition of an if?

1532443081
very-mediocre
good point, there's a lot of ambiguous cases :/

1532443120
bheads_
ok so why not  while(i < 10, i += 10)

1532443126
andrewrk
there is only 1 right now, which is

1532443174
andrewrk
because the unwrapped optional expression is in scope

1532443198
andrewrk
while (optional_node) |node| : (optional_node = node.next) {}

1532443257
andrewrk
I'm totally open to changing this syntax, provided the new thing is somehow better, and all the problems that are currently solved stay solved

1532443284
bheads__
I am personally fine with the colon syntax, just wondering if there was a syntax reason for it

1532443315
very-mediocre
isn't it a bit of a half-measure, to add the 3rd param of a C-style for loop to while?

1532443342
very-mediocre
I understand the reason for it, as unique_id mentioned before you'd have to repeat the incrementation if you had it in the loop body

1532443379
bheads__
In truth you only need one kind of loop

1532443443
bheads__
do {}  << forever  do (cond) {} << c while loop   do (cond; incrementor) {}   do (initializer, cond; inc) {}

1532443479
bheads__
I had designed a language like this years ago

1532443510
bheads__
though no for each kind of loop

1532443519
bheads__
which I really like

1532443581
bheads__


1532443620
very-mediocre
I think the ugly truth is the C for loop is ugly but we're used to it

1532443653
bheads__
The increament part is really important

1532443663
bheads__
the init part is just a QOL

1532443671
very-mediocre
true.

1532443695
bheads__
the inc part prevents a lot of bugs that can happen when using gotos or just whiles

1532443748
andrewrk
I think instead of documenting `this` I'm just going to propose to delete the feature

1532443759
very-mediocre
crazy idea: while (var i: usize = 0 < 1 then i += 1)

1532443765
very-mediocre
< n rather.

1532443779
very-mediocre
but that looks rather monstrous upon reading it. lol

1532443812
andrewrk
I'm not even going to consider for ranges until the fate of generators is decided

1532443857
bheads__
andrewrk, I mean in the terms zig has them defined, loop over slices and optional types

1532443875
bheads__
and what functionality will need to replace this?

1532443892
andrewrk
I don't understand

1532443894
bheads__
very-mediocre, I cant even read that X)

1532443909
andrewrk
can you explain the question?

1532443926
bheads__
didn't this give us comptime access to the scope?

1532443926
very-mediocre
bheads__: I know, I always shoot from the hip. I'm in permanent brainstorm mode for everything. :/

1532443957
bheads__
very-mediocre, never stop doing that!  we need more of that in the world

1532443957
andrewrk
bheads__, ah, yes. it did. but nobody needs that feature. here you can read my explanation:

1532444006
andrewrk
I did a test run of removing the scope parameter from @setRuntimeSafety and it worked fine

1532444203
bheads__
hummm I remember a proposal I had that would be solved using this, but I cant remember or find it..  I guess it was not that important any more :)

1532444256
very-mediocre
somewhat offtopic: bheads__:`but I cant remember or find it` -> don't you wish every OS had a notepad in its system tray or equivalent, with tag-based indexing?

1532444297
bheads__
lol, I wish I could just remember things better , and I am only in my 30s!

1532444301
very-mediocre
I think I lost 3/4 of my possibly-good ideas because I failed to note them down / store them in a retrievable way

1532444316
very-mediocre
lol.

1532444357
bheads__
What I need is a computer that records all my conversations and indexes them

1532444376
very-mediocre
get a job at the NSA then. :)

1532444393
bheads__
lol, just need to be a cyborg

1532444412
andrewrk
I just trust myself to be deterministic, and think of the same solutions when I consider the same problems

1532444443
andrewrk
I know where my keys are because I think "where would I put my keys?" and they're always there!

1532444463
very-mediocre
so essentially you have pure functions for everything you do

1532444467
andrewrk
yes

1532444490
bheads__
lol if only like was so simple

1532444506
bheads__
but no I forgot the non-deterministic things

1532444515
bheads__
like a random person you meet at a party

1532444522
bheads__
then you meet them again

1532444542
bheads__
or you have one odd bug, you fix and move on.  Then a year later your looking at that code again

1532444585
bheads__
I get a lot of code written by other companies that like to copy code (oracle....) which includes all of the same bugs

1532444657
very-mediocre
that was quite a scattershot thing you just wrote, lol

1532444676
bheads__
shotgun chatting

1532444678
very-mediocre
that's good imho, even if it makes me look like a fool, I think fast iteration and failure is good

1532444689
very-mediocre
you should exploit zero-cost failure

1532444758
very-mediocre
tbh it's the easiest way to learn something

1532444765
bheads__
??

1532444792
very-mediocre
say something on the internet that might be wrong, and you can be sure someone will educate you shortly :)

1532444814
very-mediocre
you don't lose anything except reputation

1532444819
very-mediocre
so just be anonymous when you do it

1532444838
bheads__
sure, but I hate most of the internet

1532444850
bheads__
social media the most :)

1532444862
very-mediocre
you're telling me, I don't have facebook

1532445039
MajorLag2
re: `this`, isn't `this` necessary for getting the type of `self` in non-top level struct definitions?

1532445096
bheads__
andrewrk proposes an @thisType

1532445103
bheads__
to find the scope

1532445135
bheads__
it does open up to use this as a name which is nice

1532445225
very-mediocre
Feels like unnecessary usage of `inline` and `comptime` should be warnings, except zig intentionally has no warnings

1532445243
very-mediocre
and I have to say I like not having warnings, so I'm conflicted.

1532445263
andrewrk
in general, inline should not be used to guess how to optimize code

1532445276
andrewrk
it should be used when creating a stack frame for the function call would be semantically incorrect

1532445283
andrewrk
this is important in OS dev and embedded dev

1532445293
bheads__
a possible idea would be to have a check and sanitize mode in the compiler that checks these things

1532445306
very-mediocre
maybe it's in the scope of zig fmt?

1532445315
very-mediocre
like lint + format

1532445322
andrewrk
e.g. you can call inline functions before you set up the stack but not normal functions

1532445348
very-mediocre
right... But what if as a programmer my intent was referential transparency of a function

1532445357
bheads__
but your not really calling an inline function

1532445369
very-mediocre
like in the range example I posted above, the idea was to express a macro-like usage

1532445394
andrewrk
with current zig semantics, you want `comptime range()`

1532445405
very-mediocre
ah, I see!

1532445438
andrewrk
until that one issue is solved you would need to do this at the callsite

1532445471
very-mediocre
instead of marking "try to be comptime," shouldn't everything be comptime if possible?

1532445475
bheads__
and inline loops are for loop unrolling, which can be a really good performance booster (reducing cache misses)

1532445497
andrewrk
very-mediocre, I'm going to explore that. the key question is if the function is: fn foo() { unreachable; }

1532445510
andrewrk
then should every function call to foo be a compile error?

1532445535
andrewrk
I think the answer is - only when we can prove that it's on the guaranteed-to-be-executed path

1532445555
andrewrk
e.g. if you did pub fn main() void { unreachable; } this should be a compile error - we know for sure control flow will hit unreachable

1532445571
very-mediocre
that makes sense

1532445588
very-mediocre
couldn't it be that you'd have to mark the function as dynamic/runtime

1532445597
very-mediocre
if you really wanted to call it?

1532445603
very-mediocre
otherwise it'd be safer to have it be a compiler error

1532445612
andrewrk
that's a good point, maybe the default can be the other way

1532445616
very-mediocre
I thought the point of `unreachable` was safety

1532445623
andrewrk
the other issue is if the function takes more than 1000 backwards branches at compile time to analyze

1532445653
andrewrk
e.g. fn foo() void { var i: usize = 0; while (i < 1001) : (i += 1) {} }

1532445669
andrewrk
if you call foo() somewhere we would get an error: analysis exceeded 1000 backwards branches

1532445749
very-mediocre
right

1532445763
very-mediocre
it's already the case for top-level consts though

1532445767
very-mediocre
they're implicitly comptime already

1532445801
andrewrk
yeah. I think there's a good chance the issue is resolved in favor of zig optimistically evaluating functions at comptime when all the args are comptime known

1532445828
bheads__
except extern ?

1532445831
very-mediocre
I mean if you introduced a way to mark functions to try to be comptime, that'd clash with implicit comptime stuff

1532445836
andrewrk
bheads__, right of course

1532445872
very-mediocre
either we'd have to explicitly mark those ones too, or go for the reverse paradigm of marking things dynamic on purpose

1532445892
very-mediocre
like "this function does so many iterations, I'd prefer to do it at runtime"

1532445899
andrewrk
we used to have that

1532445967
bheads__
in your foo example, if you try to run it in comptime and it fails, then it should auto be runtime

1532445975
bheads__
unless you call it explicitly

1532446003
andrewrk
but wouldn't you want to know? maybe you were counting on it asserting some condition and now silently it went from 999 to 1001 and you don't realize it's no longer comptime

1532446026
bheads__
then mark it as comptime

1532446042
bheads__
if I call foo I dont want the compiler to fail just cause it could run it in comptime

1532446069
andrewrk
yeah. anyway. I think the various issues and tradeoffs of this issue are clear now

1532446077
andrewrk
back to self-hosted compiler work

1532446110
bheads__
lol mush mush!

1532446180
very-mediocre
Do I dare venture into compilter internals? Alas, not today.

1532450647
andrewrk
this is pretty fun:

1532450663
andrewrk
tiehuis's rng impl works at comptime, so it can be used to generate hash functions

1532450693
andrewrk
example usage:

1532451416
very-mediocre
comptime is awesome

1532451443
very-mediocre
one of the more exciting things about zig

1532451451
MajorLag2
won't that bool implementation create 2 new random ints for each time it is run on a bool? Or is caching being relied on?

1532451476
andrewrk
MajorLag2, it will create 2 new random ints per seed

1532451502
very-mediocre
the seed is constant

1532451512
MajorLag2
Yeah, ok, I see it now.

1532451519
andrewrk
right, the random ints it creates are static constants

1532451548
andrewrk
in release mode I'm guessing the entire hash functions will be inlined

1532451549
MajorLag2
yeah, and only the first passed bool will cause a new function to be created.

1532451589
MajorLag2
so it'll work out as long as the hashes don't need to be consistent across builds.

1532451632
very-mediocre
why is that? a good seeded rng should be consistent

1532451644
MajorLag2
because the order will matter

1532451668
very-mediocre
oh right

1532451672
very-mediocre
the seed is shared

1532451679
andrewrk
I think it's deterministic

1532451732
andrewrk
I'm passing in seed explicitly - if you pass the same seed, you get the same values

1532451745
very-mediocre
yeah since separate functions are generated, it's deterministic after all, each generated function should have its own instance of rng, no?

1532451752
andrewrk
correct

1532451754
MajorLag2
yeah, I think you're right, because the state of the rng isn't shared

1532451770
andrewrk
it's a waste - but a comptime waste, not a runtime waste

1532451788
andrewrk
easy to cache

1532451995
very-mediocre
If anonymous functions are added, comptime is really going to fly

1532452027
very-mediocre
it wouldn't add new functionality per se but it'd be much more expressive

1532452079
very-mediocre
maybe it's just me but I waste a lot of mental energy on where to define certain functions

1532452082
andrewrk
when you say anonymous functions, are you describing syntactic sugar, or something semantic?

1532452101
very-mediocre
I mean inline function definitions a-la JavaScript

1532452105
andrewrk
because you can do:  const F = struct { fn f()void{} }.f;

1532452128
very-mediocre
that's interesting but a bit ugly

1532452155
andrewrk
right, but that's why I'm asking if you're talking about syntactic sugar - make it prettier - or something that has to fundamentally change

1532452163
very-mediocre
yes, it'd be syntactic sugar

1532452184
very-mediocre
something like C++ closures and anon functions is technically syntactic sugar too

1532452272
very-mediocre
say you had a comptime macro-like function range(type:T, a:T, b:T) [@intCast(usize, b - a)]T like in my previous example, I'd like to add a 3rd param "step function"

1532452279
Bas_
What I don't like about the C++ closures is that you now basically have two ways to create functions ^^

1532452282
very-mediocre
obviously you can go and write out step functions and import them

1532452287
very-mediocre
but it'd be really intuitive to just write them inline

1532452298
very-mediocre
at the callsite even

1532452301
bheads_
_ = foo( fn(a:i32) i32 { return a*a; });

1532452309
bheads_
as function params too

1532452323
very-mediocre
that's supported?!

1532452328
bheads_
I dont think so

1532452335
andrewrk
I think it's planned

1532452366
andrewrk
I don't remember where that landed

1532452785
GitHub1
[zig] winksaville opened pull request #1285: Add formatted printing of pointers (master...add-formatted-printing-of-pointers)

1532452975
winksaville
andrewrk: #1285 is a first stab and adding support for "{p}" for pointer printing. There is debug logging which I'll remove before merging, but I wanted to keep them until this was approved to make it easier to test/debug.

1532453007
andrewrk
thanks winksaville - I'll have a look

1532453985
winksaville
andrewrk: Any thing else you want me to do to

1532454013
andrewrk
nope, I'll try to get around to that later today, thanks

1532456581
GitHub30
[zig] andrewrk pushed 2 new commits to master:

1532456581
GitHub30
zig/master 2ea0856 Andrew Kelley: self-hosted: function types use table lookup

1532456581
GitHub30
zig/master 1d4a94b Andrew Kelley: remove old section from readme...

