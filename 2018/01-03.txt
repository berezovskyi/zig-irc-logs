1514945319
GitHub23
[zig] andrewrk pushed 1 new commit to master:

1514945319
GitHub23
zig/master 0ea50b3 Andrew Kelley: ir: new pass iteration strategy...

1514965926
GitHub157
[zig] andrewrk pushed 1 new commit to master:

1514965926
GitHub157
zig/master d9d61ed Andrew Kelley: doc fixes

1514967342
GitHub146
[zig] andrewrk pushed 1 new commit to master:

1514967342
GitHub146
zig/master c741d3f Andrew Kelley: add test for while respecting implicit comptime

1514968092
GitHub177
[zig] andrewrk pushed 1 new commit to master:

1514968093
GitHub177
zig/master 6281a51 Andrew Kelley: add noInlineCall to docs

1514969901
andrewrk


1514973371
GitHub108
[zig] andrewrk pushed 1 new commit to master:

1514973371
GitHub108
zig/master 36ff266 Andrew Kelley: fix self hosted compiler on windows

1514995736
andrewrk
I submitted the link to /r/programming

1514995824
andrewrk
and hacker news

1514998607
Mentol
does the compiler can be used into a macos?

1514998657
Mentol
do the libraries built with Zig, could be used easily from other languages/platforms? (Java/Android, Swift/iOs)

1514998723
andrewrk
Mentol, yes, the compiler works on macos

1514998740
andrewrk
you can export a C-ABI compatible library

1514998904
Mentol
Perfect! And thanks by Zig. I've used Go and Rust but I want other simpler language to replace to C (Rust is at line with C++ and Go is not expressive)

1514999010
andrewrk
Mentol, I hope you like it. It is still very young, please be patient and report issues

1514999061
Mentol
no problem

1514999686
Mentol
and what do you think about Nim? -besides of syntax like Python or C- (The competitor more similar to Zip)

1514999720
andrewrk
Mentol, I think that the garbage collector makes it unsuitable for many purposes

1514999730
Mentol
right

1514999742
andrewrk
if our goal is to write reusable software, it has to cater to the common denominator environment

1514999810
andrewrk
also, nim depends on C, whereas Zig is trying to replace C

1514999960
andrewrk
and then the things that set zig apart: nim has hidden control flow, hidden memory allocations, and crashes on out of memory conditions

1515000358
Mentol
should be used the last version (0.1.1) or trunk one?

1515000400
andrewrk
Mentol, almost certainly trunk

1515000423
andrewrk
if you want to see just some of the things that have changed since 0.1.1 you can read

1515006711
Mentol
In the documentation, for the installation from MacOs, it could be added the line "brew install cmake" at the beginning

1515006952
andrewrk
thank you

1515007006
GitHub29
[zig] andrewrk pushed 1 new commit to master:

1515007006
GitHub29
zig/master 5c988cc Andrew Kelley: readme: update macos installation instructions

1515009834
Mentol
does the enum can be used to handle bitmask flags?

1515009880
Mentol
so a variable could store several values of a same enum

1515010211
andrewrk
Mentol, why not a normal const for that?

1515010224
andrewrk
const FlagA = 0b01;

1515010227
andrewrk
const FlagB = 0b10;

1515010295
Mentol
const Charset = enum(u2) { Lower, Upper, Digit, Punct };

1515010345
Mentol
for then, to be able to use a variable which can be set to Charset.Upper|Charset.Digit i.e.

1515010357
Mentol
if it is possible

1515010459
andrewrk
hmm. what would be the type of the result? Charset.Upper|Charset.Digit ?

1515010726
Mentol
in Go, it's the way to define bit operators for the enum

1515010779
Mentol
a bitwise-or

1515010848
andrewrk
why not: const Lower = 0b0001; const Upper = 0b0010; const Digit = 0b0100; const Punct = 0b1000;

1515010881
andrewrk
or even: const Lower = 1 << 0; const Upper = 1 << 1; const Digit = 1 << 2; const Punct = 1 << 3;

1515010914
Mentol
ok, so it's done at Go (using << )

1515010928
Mentol
could be used from the enum?

1515010970
Mentol
I mean, assign a value like '1 << 0' to the first value in the enum

1515011013
andrewrk
you can do that, yes:  const Charset = enum(u2) { Lower = 1 << 0, Upper = 1 << 1, Digit = 1 << 2, Punct = 1 << 3 };

1515011025
Mentol
perfect :)

1515011027
Mentol
Thanks!

1515011038
andrewrk
however, I believe the expression `Charset.Upper | Charset.Digit` is a compile error

1515011044
andrewrk
what type would you expect it to be?

1515011082
andrewrk
you could do:  u2(Charset.Upper) | u2(Charset.Digit)

1515011107
Mentol
it was only an example since syntax at Go; the example was to show that I want a variable with several values of an enum

1515011121
Mentol
that's right for me :)

1515011953
Mentol
I got invalid token '<<'

1515012576
Mentol
I had to use =>  const Charset = enum(u2) { Lower = 0b0001, ... };

1515012591
andrewrk
Mentol, hmm looks like you need parentheses

1515012597
andrewrk
A = (1 << 0),

1515012607
andrewrk
I think I can fix that

1515012638
Mentol
yes; it works with parentheses

1515013521
Mentol
do both variables and constants are visible when importing?

1515013526
andrewrk
yes

1515013569
GitHub166
[zig] andrewrk pushed 1 new commit to master:

1515013569
GitHub166
zig/master 5b15603 Andrew Kelley: enum tag values are expressions so no parentheses needed

1515013570
andrewrk
Mentol, now you do not need parentheses ^

1515013585
Mentol
cool :)

1515021961
GitHub77
[zig] andrewrk pushed 1 new commit to master:

1515021962
GitHub77
zig/master a45db7e Andrew Kelley: add building the self hosted compiler to the main test suite

