1538650435
tiehuis
updated the zig aur packages `zig`, `zig-git`, sorry it took a few days there

1538650466
tiehuis
also, see the `zig-static` package too if you don't really want to compile from source, these just take the automatically built static binaries and package them up

1538650498
tiehuis
will likely be up to date much quicker than the others since they don't rely on the system LLVM

1538659002
bheads
Morning all!

1538659024
andrewrk
morning bheads

1538659034
bheads
I was wondering if any updates/work has been done on the interface / inheritence side of things

1538659059
andrewrk
nope, none at all

1538659070
bheads
The code I messing with needs widgets what has child widgets

1538659075
andrewrk
aha

1538659082
andrewrk
the classic OOP use case

1538659095
bheads
I ended up with a Widget struct that have some base properties and function pointers

1538659133
bheads
the parent structs have a widget member and replace the fn pointers, I use @fieldParentPtr to find the parent in the overloads

1538659141
bheads
it works but is a little clunky

1538659207
bheads
also fn pointers dont pass the calling struct point, ie:  self.widget.click(self.widget, event_data); // have to pass the widget

1538659257
bheads
@andrewk also congrates on 0.3

1538659322
bheads
I was trying to think over ofer ways to avoid this oop pattern, but I code in java all day, I think it has rotten my brain

1538659350
andrewrk
I think for widgets at least, this oop pattern makes a lot of sense

1538659385
bheads
I thought about a tagged union on the widget, but then the widget has to know all possible widget types

1538659413
bheads
so its not extendable

1538659560
andrewrk
right

1538659571
bheads
anonymous structs would help

1538659582
andrewrk
I have a plan for that

1538659587
andrewrk
the main problem is initializing them, right?

1538659629
bheads
no difference the a member struct, just one less .name = Foo {}...

1538659671
andrewrk
oh, I see - "including" a structs fields into another one, aka inheritance

1538659675
bheads
what is trickey is how do you get the anonymous struct type out of the parent

1538659693
bheads
correct

1538660596
bheads
This is what I am doing now,

1538660617
bheads
its works, but not very dry

1538660650
bheads
also caused a few stack overflows when I messed it up

1538660783
andrewrk
bheads, this makes sense, for what zig supports currently. keep your eye on

1538660798
andrewrk
I believe it even says in that issue "implement a widget based UI framework before closing"

1538660917
bheads
yep I do remember read some of these issues, was just wondering if I was doing this correctly for the time being or if there was a better way

1538660945
andrewrk
yeah this looks like the best thing to do, at least for now

1538661018
bheads
okay cool, I was also reading the ticket on 'use'.  I was starting to get tired of typing sdl.SDL_xxxxx.  Never though of aliasing all the sdl functions, or use 'use' on the import.

1538661061
bheads
a translate-c option to remove funtion prefixes like this would be nice

1538661145
andrewrk
I think there's no shame in using `use` when it comes to c imports

1538661191
andrewrk
and I agree that would be nice. the alternative is manually redeclaring every export

1538661193
bheads
I really dont like polluting the name space

1538665618
euantor
I've managed to get Zig to build on FreeBSD, just for fun. Only problem I now have is with `os_self_exe_path`:

1538665648
andrewrk
is that not possible on freebsd?

1538665651
euantor
I'm not quite sure how to resolve that - FreeBSD does have the ability to have a `procfs`, but it's disabled by default so it can't really be relied on

1538665652
andrewrk
it's a rather important component

1538665714
euantor
I believe the usual way to get the full path to the executable is to use `realpath(argv[0])`

1538665771
andrewrk
we could have os_init() accept arg0

1538665782
euantor
That could work

1538665805
euantor
I had to make some other changes to `os.cpp` to get to this point too:

1538665818
andrewrk
does freebsd have a stable syscall ABI? or is it a system where you use libc to make syscalls?

1538665823
euantor
There are quite a few conditions that only cover Windows, Mac and Linux

1538665853
andrewrk
if freebsd relies on libc for syscalls, that means it depends on a dynamic linker, which probably has a way to figure out the exe's own path

1538665865
andrewrk
maybe it exposes an api

1538665885
euantor
I believe it's fairly stable, but I'm not entirely sure

1538665940
andrewrk
what about sysctl CTL_KERN KERN_PROC KERN_PROC_PATHNAME -1

1538665960
euantor
that could work, I've never seen that one before

1538666322
euantor
That one will work for FreeBSD, but it seems not for OpenBSD:

1538666339
euantor
Pity, one step at a time I suppose

1538666376
andrewrk
that's right

1538666407
euantor
I'll introduce another `ZIG_OS_` define for FreeBSD and see if I can get any further

1538666464
andrewrk
sounds good

1538671557
Hejsil
andrewrk, how does this line compile on master?

1538671602
andrewrk
Hejsil, you mean why does it not get changed by zig fmt?

1538671632
andrewrk
oh you're looking at the return type

1538671645
Hejsil
No, that's a local function. This is a test from master that passes CI. This line doesn't compile with my changes

1538671657
andrewrk
I believe there is a special case hack in parser.cpp for dealing with the return type ambiguity

1538671703
andrewrk
oh! it's not using `return` for the return value

1538671734
andrewrk
what does it do in your branch?

1538671745
Hejsil
Compile error, but that make sense

1538671749
andrewrk
agreed

1538671751
andrewrk
you can change the test case

1538671754
Hejsil
This is only syntax, so this is array initialization

1538671776
Hejsil
Got it, I was just confused for a sec

1538671789
andrewrk
I'm actually wondering if master branch thinks that is an extern declaration

1538671804
andrewrk
but since it's never referenced, we don't get the compile error for missing `extern`

1538671842
Hejsil
Tests are running. I have a simple fmt branch that fixed all the tings!

1538671846
andrewrk
amazing

1538671853
Hejsil
Until i reach the code that is in string literals

1538671861
andrewrk
ah, right

1538671871
andrewrk
I suppose that would be a reason to have test cases in files

1538671926
andrewrk
Hejsil, did you see this btw? not that I think it's a good idea, I just know that you're into these "fun" things ;)

1538671966
Hejsil
Ye, I saw it lol

1538671976
Hejsil
That's the hackiest of hacks

1538672002
Hejsil
Makes me feel the same as writing insane macros in C

1538672008
Hejsil
Love it

1538672010
andrewrk
haha

1538672024
andrewrk
I just finished a major ir.cpp refactor, 1713 insertions(+), 2125 deletions(-)

1538672030
andrewrk
do you think the tests will pass first try?

1538672042
Hejsil
Going pretty good so far

1538672052
Hejsil
I think it'll fail at the compiler error tests

1538672059
andrewrk
err, I meant mine. but yours too :)

1538672060
Hejsil
Thoses that have code in string literals

1538672063
Hejsil
Aaah

1538672065
Hejsil
No way

1538672069
andrewrk
hahahah you have no faith

1538672085
andrewrk
Segmentation fault

1538672086
andrewrk
argghh

1538672092
Hejsil
That was fast

1538672241
Hejsil
RwLock takes a long time to complete

1538672251
Hejsil
std.event.RwLock test that is

1538672557
Hejsil
Aah, i branched at the "std.Mutex: implement blocking mutexes on linux"

1538672664
halosghost
andrewrk: phew

1538672679
halosghost
andrewrk: that's quite a rewrite

1538672684
halosghost
and in Cxx, no less

1538673311
Hejsil
andrewrk, seems that "translate_c.zig" doesn't get recompiled when I change it

1538673373
Hejsil
Oooh wait!

1538673374
andrewrk
hmmmm

1538673380
Hejsil
I have two zig folders right now

1538673385
Hejsil
Sec, Im stupid

1538673396
andrewrk
I was gonna say, I was reeeeeally careful with the cache invalidation

1538673414
Hejsil
Yep, cache is smarter than me

1538673419
Hejsil
Don't worry

1538673848
halosghost
andrewrk: how does isCompTime() work?

1538673858
halosghost
andrewrk: something about when `t` gets its value?

1538673905
andrewrk
a static if will not analyze the branch not taken, so you get the type directly. a runtime if will invoke peer type resolution and the result will have the type of the larger int

1538673948
halosghost
ahh

1538673950
halosghost
I see

1538674000
halosghost
so, eventhough that code always takes the first branch, the type resolution will cause the u7 to be up-cast to a u8 if at runtime

1538674001
halosghost
interesting

1538674112
Hejsil
The dark arts of Zig

1538674382
halosghost
andrewrk: am I right in my reading of the docs that though structs can have member functions, there is no special syntax to offer methods (i.e., functions that take a reference to the caller)?

1538674547
andrewrk
halosghost, that's right, methods are not special, other than that you can call them with foo.bar() syntax

1538674585
andrewrk
foo.bar() is syntactic sugar for @typeOf(foo).bar(foo)

1538674592
halosghost
oh

1538674598
halosghost
hmm

1538674610
halosghost
yeah, that makes ense

1538674624
halosghost
andrewrk: any plans for something like lua's : method sugar? (if you're not familiar with it, I'll be happy to explain it)

1538674681
halosghost
wait

1538674682
andrewrk
no plans for that

1538674704
andrewrk
zig is not a very sugary language

1538674705
halosghost
hmm

1538674756
halosghost
oh, wait

1538674760
halosghost
nevermind

1538674765
halosghost
it sounds like what you said above means you already have it

1538674768
halosghost
yeah

1538674769
halosghost
nevermind :)

1538674908
andrewrk
ok Hejsil to be fair this segfault happens in master branch if you add a very reasonable assert in ir_get_var_is_comptime. this doesn't count!

1538674958
halosghost
lol

1538675158
Hejsil
Yes yes

1538675201
Hejsil
Fixing up tests after changing syntax is kinda painful :/

1538675327
andrewrk
maybe it would be worth transitioning to a test framework that lets zig fmt help with syntax changes

1538675371
andrewrk
on the other hand, syntax changes are rare if you consider the entire lifetime of the project

1538675375
andrewrk
at some point there are simply no more syntax changes

1538675467
Hejsil
Indeed, so It might be fine

1538675479
andrewrk
zig isn't going to be like java or go, there's going to be a point where it's done and won't get any bigger. (apart from basic maintenance such as keeping up with new hardware intrinsics)

1538675484
Hejsil
This is not a "sed"able syntax change :(

1538675498
andrewrk
maybe it's vim macro-able

1538675512
halosghost
hehe

1538675540
andrewrk
you can do a lot with vim macroable

1538675543
andrewrk
*with vim macros

1538675609
Hejsil
Im fixing up compile-error, and sometimes the line:column wont match anymore

1538675617
Hejsil
Can your vim-macros handle that :)

1538675633
andrewrk
good point

1538675656
andrewrk
it's going to get even trickier when we try to have the same test cases passing for stage1 and stage2

1538675660
Hejsil
vim-macros 0 - 1 real life

1538675670
Hejsil
Indeed

1538675735
Hejsil
Maybe we need a way to skip first N tests

1538675834
andrewrk
I'm fine with that if you want to add it. there's also -Dtest-filter="aoeu"

1538675891
andrewrk
(need to double check the --help menu, both of my zig directories have WIP changes that are blocking me from doing that)

1538675936
Hejsil
Well, skipping N tests is more useful in this case, as compile-error tests don't have a lot in commen in terms of tests

1538675969
Hejsil
And yes, the build system of the zig repo does expose Dtest-filter

1538676031
andrewrk
I'm pretty happy with `zig build` being cached now

1538676037
andrewrk
that was a bit of a downer before

1538676362
Hejsil
Oooh yeeeah. I can use -Drelease-skip

1538676402
Hejsil
-Dskip-release*

1538677851
Hejsil
Hmmm. vscode seems to have a max of 10000 cursors at the same time

1538677861
andrewrk
lol

1538677885
Hejsil
complier_rt has a ton of array literals :)

1538677934
Hejsil
I guess i should really use "find/replace"

1538678071
andrewrk
Hejsil, I just pushed that big refactor. I think it should generally not conflict with any of your stuff

1538678159
DutchGh0st
hi, how do I create a slice from a ptr and a length?

1538678167
DutchGh0st
Im trying to call Zig from Rust

1538678181
andrewrk
ptr[0..len]

1538678220
DutchGh0st
error: slice of single-item pointer

1538678220
DutchGh0st
var s = buf[0..len];

1538678255
andrewrk
you probably want to declare buf like this:  buf: [*]u8

1538678274
andrewrk
that means you're expecting a pointer to an unknown number of contiguous items

1538678294
halosghost
I haven't properly described how awesome it is that Zig now differentiates between pointer-to-single-time and pointer-to-buffer

1538678343
DutchGh0st
but then you still need to provide the length, right?

1538678381
DutchGh0st
rust str's dont have a null byte at the end...

1538678383
halosghost
well, if you declare it as a pointer-to-buffer, then presumably, 0..len will now work

1538678395
halosghost
(speaking as someone who hasn't tried yet :P)

1538678407
DutchGh0st
well, here's the funny thing

1538678486
andrewrk
DutchGh0st, what exactly are you getting from Rust? can I see the full function?

1538678502
DutchGh0st
imma make this a github repo ^^, 2 seconds

1538678698
DutchGh0st


1538678714
DutchGh0st
zig + ffi... zigiffy...

1538678743
andrewrk
DutchGh0st, the printing function looks fine to me

1538678749
DutchGh0st
funny thing, the rust signature in the extern block is not correct

1538678761
DutchGh0st
it does know nothing about a length

1538678772
DutchGh0st
yet it still prints "hello"

1538678795
andrewrk
DutchGh0st, try running with valgrind

1538678812
DutchGh0st
howw do I do that?

1538678849
andrewrk


1538678890
andrewrk
use --no-rosegment when compiling your zig thing to work around a valgrind bug, then `valgrind ./yourprogram`

1538679004
DutchGh0st
but I dont have valgrind installed...

1538679066
Hejsil
andrewrk, is there a way of having docs not delete the docgen_tmp folder?

1538679108
andrewrk
Hejsil, I don't think so, other than commenting out the `defer deleteTree()`

1538679115
Hejsil
I guess I'll just comment out the defer os.deleteTree(allocator, tmp_dir_name) catch {};

1538679118
Hejsil
Right

1538679128
andrewrk
troubleshooting?

1538679151
Hejsil
Well, docs should use the new syntax too

1538679161
Hejsil
And it's easier to inspect the output files

1538679169
andrewrk
yeah. I thought I made the error message show a line number in langref.html.in though

1538679175
andrewrk
I'm pretty sure it does

1538679187
Hejsil
Oooh yeeeah

1538679192
Hejsil
It does do that

1538679219
Hejsil
The giant squigle line distracted me

1538679252
Hejsil
Hmm, it only points to the block, not the code that fails

1538679262
andrewrk
yeah, you'd have to copy-paste it out of there

1538679273
andrewrk
but since it's not html, you can cut/paste verbatim, no &amp; or anything

1538679352
andrewrk
DutchGh0st, the bottom line is that mismatched function declarations is undefined behavior, and that means anything can happen - including it magically working sometimes

1538679375
DutchGh0st
I see

1538679385
DutchGh0st
I guess the string was not big enough to crash

1538679390
DutchGh0st
but I've updated it now :)

1538679399
DutchGh0st
it

1538679425
DutchGh0st
its kinda cool really

1538679492
andrewrk
DutchGh0st, does "cargo build" build the zig code? where does it execute build-lib?

1538679513
DutchGh0st
it does not build the zig code, sadly

1538679516
DutchGh0st
still need to do that manually

1538679530
DutchGh0st
but 'zig.exe' is not in my path variable, so can't really do that yet

1538679536
DutchGh0st
unless I use some paths

1538679581
andrewrk
I wonder if it would make sense to have a cargo crate that contains static zig 0.3.0, and then you can depend on it like a rust crate, and it provides the zig binary

1538679628
andrewrk
you could make it work for windows, mac, linux, then depending on this rust crate would give you cross platform zig in your path, for rust projects, that has no system dependencies

1538679681
DutchGh0st
mhh yeahh

1538679685
DutchGh0st
hehe

1538679706
DutchGh0st
you could do some really fun things I suppose haha

1538679741
andrewrk
the point would simply be ability to depend on zig code in rust projects without requiring zig installed globally

1538679785
andrewrk
that might be a really compelling use case for nodejs projects actually, since it can be a pain to depend on node modules on windows that need to compile native extensions

1538679831
andrewrk
static compiler + liberation from libc opens up some opportunities

1538680021
DutchGh0st
andd

1538680056
DutchGh0st
I dont know much of a pleasure it is to compile Zig to wasm?

1538680065
DutchGh0st
or is that just an LLVM thing?

1538680092
andrewrk
I think it works now in the static builds

1538680111
DutchGh0st
I do know there is a whole team that focussus on being able to write Rust, and then compile to wasm

1538680143
DutchGh0st
it'd be interesting to see a bunch of languages combined together :)

1538680151
andrewrk
rust has multiplicative complexity, which requires a large team to tackle

1538680171
andrewrk
zig's simplicity allows it to be developed and maintained by a small team

1538680189
DutchGh0st
yeah :)

1538680209
Hejsil
I'd be fun to try to make a small Zig compiler, like people do with C all the time

1538680224
DutchGh0st
how I should go the other way around

1538680236
DutchGh0st
call into Rust from Zig

1538680258
andrewrk
DutchGh0st, it's the same as calling into Rust from C

1538680272
andrewrk
from zig's perspective it's the same as calling into C

1538680632
DutchGh0st
this is interesting

1538680649
DutchGh0st
if I change my directory to the /zig directory, and call 'cargo run', it runs

1538680675
DutchGh0st
if I go inside the projects main folder, and call `cargo run`, it does not exit succesfully

1538680682
DutchGh0st
(exit code: 3221225781)

1538680695
andrewrk
that sounds like an issue with the cargo build system

1538680709
wink_
andrewrk: Do need me to look into anything else on the `x0` proposal (

1538680744
DutchGh0st
now I am using a String, which does heap alloc

1538680905
DutchGh0st
that'd be bad andrewrk

1538681199
DutchGh0st
oh, it seems to have compiled as dll or something?

1538681403
Hejsil
It's done!

1538681422
andrewrk
brilliant

1538681467
Hejsil
+90,171 −90,187

1538681475
andrewrk
meanwhile, macos build is broken because of the bad macho linker code again :(

1538681488
Hejsil
compile_rt really gives code to the diff

1538681498
Hejsil
:/

1538681553
andrewrk
oh you had to edit the big compiler_rt test

1538681615
Hejsil
Yep

1538681620
andrewrk
great work

1538681644
Hejsil
That's get me above 100.000+ lines of code added to zig :)

1538681649
andrewrk
hahaha

1538681671
andrewrk
well you did write most of zig fmt

1538681686
Hejsil
Well, the render part was rewritten

1538681696
halosghost
andrewrk: I seem to remember your writing something about a hypothetical big-int library for Zig; did that ever get finished / included in the standard library?

1538681700
Hejsil
And parsing is probably gonna be rewritten again :)

1538681710
Hejsil
again/too*

1538681718
andrewrk
Hejsil, did you see that coroutines are going to solve recursion pretty cleanly? the fib() example here:

1538681741
andrewrk
halosghost, yes, tiehuis contributed that, it's std.math.big.Int I believe

1538681759
halosghost
sweet

1538681772
Hejsil
I did. I like that we get async/await, and solve recursion at the same time

1538681780
halosghost
a reasonable implementation of rationals would just be a struct of two bigints

1538681780
Hejsil
The sematics also seem more sane

1538681796
andrewrk
the recursion example is so beautiful

1538681800
Hejsil
Asyncs being generic always bothered me a little

1538681808
andrewrk
me too

1538681818
andrewrk
the local variables go on the heap frame, but what about the return address that has to go on the stack?

1538681862
andrewrk
await solves that - it puts your frame pointer on the target frame, and then suspends; target tail-call-resumes you when it returns

1538681886
Hejsil
Would it be possible to write a helper "recurse" function, that does the mess in fib :)

1538681892
Hejsil
Or...

1538681905
Hejsil
Well, that probably wouldn't be able to reuse the frame for both calls

1538684059
andrewrk
Hejsil, your PR does not update the self hosted parser, correct?

1538684071
andrewrk
but didn't you have to write the code, to make the branch that auto fixes?

1538684083
andrewrk
I ask because I don't see any changes to std/zig/parser_test.zig

1538684096
Hejsil
Oooh ye, I didn't do that

1538684339
DutchGh0st
wow, autmatic build tools dangerous

1538684346
DutchGh0st
8are

1538684350
DutchGh0st
*are

1538684369
DutchGh0st
It keeps running my build.rs file, which compiles the zig code...well, it

1538684373
Hejsil
Geeh, seems two token lookahead in the self-hosted-parser is a pain :/

1538684412
Hejsil
Idk how much time I have to write this change to the self-hosted-parser, as I'll be gone for a week starting tomorrow

1538684414
DutchGh0st
however somehow the hello.h file does not end up in /zigiffy/zig, but in /zigiffy instead

1538684526
andrewrk
Hejsil, that's ok, I can finish where you left off

1538684540
andrewrk
hell, maybe I'll convert it to be recursive first

1538684561
Hejsil
Maybe you should do the async proposal first :)

1538684569
andrewrk
yeah. that's pretty high priority

1538684580
andrewrk
it would be unfortunate if your PR bit rots though

1538684631
andrewrk
maybe not. could run the zig fmt fixer on the new master branch before merging, and the conflicts will be minimal

1538685501
andrewrk
anyone have any live stream topic ideas? what can I talk about

1538695330
tiehuis
euantor: also check out this freebsd branch which may help:

1538695361
tiehuis
it is a bit outdated but i did at one point have hello world working as expected and was part of the way through getting `zig build` to work

