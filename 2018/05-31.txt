1527751995
Hejsil
Urg, this is an awful bug I have somehow created

1527752016
Hejsil
Somehow TypeId's type get's allocated twice

1527752029
Hejsil
So they can't cast between eachother

1527768348
bodie_
good luck with the new adventure andrewrk!

1527780786
andrewrk
Hejsil do you have a small test case?

1527780791
andrewrk
thanks bodie_ :)

1527785987
file_crafter
hello what do I need to know if I already know C?

1527786176
darithorn
I would say not much else. Just program in Zig to get comfortable with the comptime and the different idioms.

1527786377
file_crafter
the testing thing in the stdlib is pretty cool

1527787251
file_crafter
do I have to worry about memory leaks in zig?

1527787280
darithorn
yes, if you allocate memory on the heap then you have to free it once you're done

1527787295
darithorn
but allocation is completely explicit. zig doesn't allocate anything without you knowing

1527787345
file_crafter
very cool

1527787383
darithorn
If a function, at least from the stdlib, needs to allocate something one of the parameters it needs will be an allocator.

1527787402
darithorn
you can look at std/mem.zig and std/heap.zig for examples

1527791744
Hejsil
andrewrk, the std-meta branch can't compile any tests because of the problem i described

1527791752
Hejsil
It's hard to get a small testcase

1527791764
Hejsil
It happend after I tried to remove the @typeId builtin

1527791816
andrewrk
ah

1527791824
andrewrk
I can have a look at the branch

1527791859
Hejsil
I've stepped through a few times, and couldn't spot exactly where both TypeId type entries are allocated

1527791889
andrewrk
maybe we could put something like if (thing.name == "TypeId") { BREAKPOINT; }

1527791890
Hejsil
You knowledge of ir/analyze.cpp would be much appreciated :)

1527791895
andrewrk
ok I'll have a look

1527792091
Hejsil
Also, maybe std.reflection is a better name that std.meta

1527792094
Hejsil
Idk :)

1527792585
andrewrk
we're about to have * for pointers instead of & and that's going to fix a lot of comptime bugs

1527792590
andrewrk
I'm about halfway done

1527796169
nicolaslekoala
Hi, I'm currently reading the zig source code (the part that it is written in zig, at least), and I'm wondering how you navigate around the source code?

1527796202
nicolaslekoala
I added tags and Tagbar support very quickly, and it's better than nothing

1527796244
nicolaslekoala
But it's still not optimal. Is there something that you recommend? A tool that you use? Other than familiarity with the code base

1527796546
andrewrk
nicolaslekoala, I'm afraid there are not yet any good tools

1527796565
andrewrk


1527796605
andrewrk
also

1527796628
andrewrk
both of these will come with the self hosted compiler. it's a big effort but it's coming up very soon. we have the parser and zig fmt fully done

1527797008
Hejsil
Started working on an example for parsing zigs command line with my zig-clap lib

1527797070
Hejsil
Be aware, that this is an example of clap.core, which doesn't have the args->struct convinience

1527797094
Hejsil
But on linux, this allocates no memory!

1527797609
andrewrk
oh neat

1527802263
SomeOtherGuy_
Hello world

1527802318
SomeOtherGuy_
Is there any talk about dependency/package management with zig?

1527802323
andrewrk
hello SomeOtherGuy_

1527802350
andrewrk


1527802357
SomeOtherGuy_
Thanks man

1527802363
SomeOtherGuy_
Nice language by the way

1527802411
andrewrk
thank you

1527805495
SomeOtherGuy_
Reading through github, I noticed where zig seems to be on concurrency. I have an abstraction I like, I might try and implement in the c++ compiler as an expirement.

1527805545
SomeOtherGuy_
They python "async with" code snippet just seemed really straightforward

1527807862
isaachier
andrewrk, out of curiosity, have you considered porting the compiler to C and translating that to zig. it seems like a solution to the issue of maintaining a separate C++ source.

1527807935
isaachier
granted the output would not be idiomatic zig

