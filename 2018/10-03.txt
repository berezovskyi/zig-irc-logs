1538525219
bbrittain
makes sense to me

1538525654
bbrittain
what's the mach-o lld stuff I've been seeing you do all about ? andrewrk

1538556359
bkleiner
Hi, does anybody see something wrong with this code?

1538568562
Jenz
Congratulations on 0.3.0 release!

1538568585
Jenz
Bit late I know, but Iâ€™ve been away (and still am)

1538573097
andrewrk
bbrittain, the macho lld code is essentially unmaintained, and can't handle a lot of simple linking tasks

1538573159
andrewrk
plus LLD in general does not do incremental linking (nor is that planned), which is going to be a necessary component of zig's plan for Super Fast Debug Builds (TM)

1538573189
andrewrk
bkleiner, I'm having a look now

1538573256
andrewrk
bkleiner, I'm hitting a similar issue right now myself. my plan of attack here is: (1) redo coroutines (2) start adding race detection / other concurrency debugging features until I discover the bug

1538573309
andrewrk
see

1538574066
bkleiner
andrewrk, that make sense, i did some more digging and noticed that if i increase the buffer size here

1538574158
andrewrk
bkleiner, yeah. the main issue is that I built a lot of abstractions on top of a coroutines prototype, to get a feel for how coroutines should work. and that project succeeded in that now I know what to do in the coroutine rewrite. but status quo is that there are bugs and race conditions

1538574203
andrewrk
I think we're going to want a lot of fuzz testing in the multithreaded async I/O code

1538574330
bkleiner
probably, yeah :)

1538574436
bkleiner
also: i really like the coroutines interface so far. it seems to be somewhere in the middle between golang and rust. well done. im really looking forward to using it in a more "real life" application.

1538574512
bkleiner
(although: some syntax sugar for `await try async` would be a nice to have)

1538575067
andrewrk
bkleiner, in the rewrite, async can't fail

1538575111
andrewrk
`await async` chain together in the same way, but error.OutOfMemory is not possible

1538575131
andrewrk
here's the plan:

1538578603
andrewrk
my goodness

1538578615
andrewrk
windows mutexes are affected by a global registry setting:

1538579119
very-mediocre
That... sure is something

1538579326
andrewrk
also they sadly require initialization at runtime, which means you can't initialize them by simply setting their fields to static data

1538581182
euantor


1538581242
andrewrk
hi euantor

1538581249
andrewrk
that sounds nice

1538581274
andrewrk
the biggest blocker for other OS support is lack of a way to run continuous integration tests

1538581278
euantor
Awesome. I may be asking some questions in here when I get a chance to actually look at it

1538581302
andrewrk
if we had CI tests for openbsd/freebsd I would add support for it in a heartbeat

1538581307
euantor
Regarding CI, would a standard Jenkins setup not work?

1538581334
andrewrk
I'm sure that could work fine, but it's a lot of work to set up and nobody has done it

1538581352
andrewrk
and then there's the question of where are the server(s)?

1538581355
euantor
The Jenkins agent should run on both Open and Free BSD. I might look at getting something running if nobody else is looking at it.

1538581378
halosghost
hmm, I wonder if qemu could be used for that

1538581399
halosghost
just be like a roll-your-own docker really

1538581403
euantor
I've been playing with Nim for a while and they got some DigitalOcean credit donated to pay for site hosting and build servers - might be worth trying that route?

1538581413
euantor
I've no idea how they applied for it or anything though

1538581414
andrewrk
I don't think digital ocean has freebsd/openbsd

1538581427
andrewrk
err, sorry, I'm thinking of non-x86 architectures

1538581431
euantor
They have FreeBSD for sure, and I think they allow you to bring your own ISO these days

1538581440
andrewrk
I'm getting this conflated with ARM

1538581454
euantor
hah, easy done

1538581487
euantor


1538581505
andrewrk
anyway, if someone makes it easy for zig to know if master branch pushes & pull requests break X, then we can add X support

1538581525
euantor
ok, I'll have a look and see what I can do over the course of this week/end

1538582900
bbrittain
andrewrk: I only ask because our toolchain team knows who you are because of that work

1538582904
bbrittain
they appreciate it :)

1538582975
bbrittain
also, why would you self host a jenkins instance? Wouldn't travisci give you free instances?

1538582985
andrewrk
travis ci doesn't have openbsd/freebsd

1538582998
andrewrk
there's also ARM and other architectures to solve

1538583017
andrewrk
if you try to do something fancy like qemu on travis you hit the 1hr timeout

1538583031
andrewrk
the azure people promised us 6 hour timeouts, so that might be something to look into

1538583084
andrewrk
if I had a bigger office I'd just buy a bunch of servers and install various combinations of hardware, and run my own build bot cluster

1538583105
bbrittain
oh dear, supporting *bsd is way more effort than it's worth

1538583117
bbrittain
mark it as a tier-3 platform and move on :)

1538583143
andrewrk
it'll have good support, it's just not a priority until the language gets closer to 1.0.0

1538589391
Hejsil_
Hmmm. Seems like you can't take `@typeOf(unreachable)`

1538589436
Hejsil_
error: unreachable code

1538589589
andrewrk
that's right - @typeOf() takes an expression

1538589626
andrewrk
and evaluating an expression can't hit unreachable at compile-time

1538589949
Hejsil
Well, @typeOf doesn't evaluate the expression though

1538589976
Hejsil
And isn't unreachable of type noreturn?

1538590020
andrewrk
it does evaluate the expression

1538590032
Hejsil
How does that work for runtime values?

1538590046
Hejsil
var a: usize = 0; @typeOf(a); works

1538590055
Hejsil
but a can't be comptime evaluated

1538590071
andrewrk
hm I think "evaluation" is an ambiguous term in zig

1538590116
andrewrk
I'm thinking

1538590128
Hejsil
Well, Zig can clearly typecheck unreachable, so it's kinda weird that @typeOf doesn't work

1538590219
andrewrk
hmm I think you're right

1538590289
Hejsil
I'll report it as a bug then :)

1538593421
dimenus
andrewrk: going to try to call COM from zig

1538593440
dimenus
hopefully build some directx code

1538593730
Hejsil
andrewrk, are we going to wait for stage2 before making anymore breaking syntax changes?

1538593786
Hejsil
Was considering working on #760 followed by tuples

1538594141
andrewrk
dimenus, interesting, doesn't that require C++ API?

1538594159
andrewrk
Hejsil, nah you can break syntax

1538594177
andrewrk
breaking is kind of always OK, because you can do it in 2 phases

1538594206
Hejsil
1. Break everything. 2. Make Zig fmt fix it!

1538594232
Hejsil
Idk if these are the actual phases

1538594259
dimenus
Yes it is a c++ api, but one of Jon Blow's employees wrapped directx in JAI directly

1538594267
dimenus
so in theory we should be able to do the same

1538594271
andrewrk
haha :)

1538594290
andrewrk
dimenus, interesting, let me know what problems you run into

1538594300
dimenus
that's my intent :D

1538594334
andrewrk
Hejsil, what's your proposal for changing syntax to fix #760?

1538594347
dimenus
personal life is finally settling down a bit, so I hope to work on a lot more projects in the next couple months

1538594358
andrewrk
Hejsil, oh, is it this?

1538594384
Hejsil
Ye, it seems that's what ended the discussion

1538594386
Hejsil
And I like it

1538594404
Hejsil
Though, error.{} requires an extra lookahead to parse

1538594445
andrewrk
I think thejoshwolfe pointed out that this proposal still doesn't let us get rid of () in if, while, for, etc, but I don't know if he pointed that out publicly. I'll ask him

1538594459
andrewrk
I'm still ok with the `.` solution to the syntax ambiguity though

1538594512
andrewrk
I guess maybe let's keep the removing () as a separate thing, unless you want to take on extra scrutiny in these changes, in which case, go for it :)

1538594552
Hejsil
Naah, if (expr) can stay with this PR

1538594596
andrewrk
this is good, this syntax paves the way for

1538594617
Hejsil
My goal is not to fix if (), but to fix the return type problem, and then start looking into how we can best do tuple literals (maybe anonymous literals)

1538594622
Hejsil
^ Exactly

1538594665
andrewrk
one use case that i want tuples to solve is multiple return values from a block going into multiple variables

1538594689
Hejsil
Yes plz

1538594692
andrewrk
I think it is tightly coupled with the return value elision issue. for example:

1538594711
andrewrk
var a, const b = blk: {

1538594728
andrewrk
break :blk [value1, x + y];

1538594746
andrewrk
in this case, the codegen should be a = value1; b = x + y;

1538594758
andrewrk
no other value copying should happen, it shouldn't really even have to create a tuple

1538594827
andrewrk
anyway that's how I'm thinking about it. we probably still have to think about the possibility of tuples represented in memory, because it will probably be allowed to have them in struct fields. right?

1538594851
andrewrk
even though the main use cases are multiple return values and multiple arguments

1538594985
andrewrk
and this is tied into the new coroutines rewrite

1538595023
andrewrk
var frame = async foo(); // the memory pointer from the frame variable goes to async to be used as the memory to execute foo

1538595070
andrewrk
it seems the next major iteration of zig's syntax/semantics is a lot of things at once. it's going to be a difficult but rewarding set of changes

1538595118
Hejsil
Looking forward to trying async/await once it's more finalized. I've kinda just kept my distance until the idea proved it self

1538595127
andrewrk
it's a game of pick up sticks, and I actually think that #287 is on the top

1538595184
andrewrk
Hejsil, anyway, I do think #760 is independent. go for it :)

1538595216
Hejsil
Already did. I actually implemented most of phase 1 before asking

1538595233
Hejsil
Which might not have been the best idea, but

1538595253
Hejsil
It seems it worked out

1538595256
andrewrk
:)

1538598942
MajorLag
dimenus: I think alexnask wrote a COM implementation already... but I can't find it in his gists so maybe I'm mistaken.

1538599316
MajorLag
part of me can't help but think the #760 syntax is specifically designed to drive Allman brace users crazy. I'm sure I'll get over it.

1538599984
andrewrk
oh, is that where you put it on the next line?

1538600038
andrewrk
I think the . is unfortunate, but, it's more important to fix the ambiguity

1538600329
MajorLag
yes, Allman braces are in the same column as their pair. It's not that big a deal, you can't reasonably be expected to accomodate these sorts of preferences .

1538601223
tom1998
Heyo

1538601254
tom1998
Last night I was having an issue @cIncluding the enet library - I tried it with translate-c, and got this src file:

1538601257
tom1998


1538601280
tom1998
This fails to compile, since there are 2 definitions of suboptarg in the generated file

1538601336
tom1998
on linux, this isn't an issue! suboptarg seems to be a mac-specific variable, since it only pops up in the apple developer OS docs

1538601373
tom1998
This is pretty much as far as I can go with this, it should be noted that enet compiles fine with C

1538601405
tom1998
I think the current workaround is going to have to be to create a C wrapper, then import THAT - unless there's something in zig that can be done?

1538601434
tom1998
Potentially I can run translate-c to create a .zig file, manually doctor that, then @include normally? Is this normal for broken @cIncludes?

1538601550
andrewrk
thanks for the example tom1998

1538601563
andrewrk
I'll make an issue for this

1538601584
andrewrk
in the mean time, why not edit the generated .zig code to fix the problem with suboptarg?

1538601650
andrewrk
as opposed to creating a C wrapper and using that?

1538601713
tom1998
yeah, as mentioned i think i'll do that, bit of a pain to commit to the repo but maybe i can do some hackery with makefiles & git diff;)

1538601746
tom1998
super cool that translate-c is exposed as a cli option though!

1538601761
andrewrk
you can think of it as an .h file with better pointer support

1538601773
tom1998
ahhhh ok, ta

1538601798
tom1998
whilst i'm here bugging you with questions, what's the difference between *, [*], [X] and []?

1538601808
tom1998
(I understand [] and *, it's mainly the other two)

1538601812
andrewrk
I hope I answered this in the docs. let me see if that's true

1538601854
andrewrk
hmm it's not very clear here:

1538601862
andrewrk
I'm going to open an issue to improve this

1538601884
andrewrk
you can read some info about the pointer types here:

1538601969
andrewrk
issue to improve the docs on this

1538602039
andrewrk
here's an issue for your use case

1538602203
tom1998
Alright, ta for the link to the pointer reform section

1538602212
tom1998
I think i'm on 0.2, does this effect me?

1538602271
andrewrk
oh, yeah, don't use that

1538602288
andrewrk
I should just delete 0.2 from the internet :)

1538602326
andrewrk
tom1998, what does `zig version` print?

1538602449
tom1998
Oh no i'm on 0.3, i remember having issues with 0.2 now, i downloaded 'master'

1538602456
tom1998
i didn't realise 0.3 was out

1538602868
tom1998
Not sure if I'm being an idiot but I can't find [*] anywhere on this release notes page

1538602888
tom1998
No sorry, [X], i found [*]

