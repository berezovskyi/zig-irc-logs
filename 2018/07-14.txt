1531527947
karlguy
Just wanted to thank you guys for how great Zig is. It restores my faith in humanity that there are some people that understand what it means to create an viable alternative for C (unlike the crazy people at Rust) :)

1531529021
karlguy
Also quick question, what's the use case of non-power-of-two primitive sizes?

1531529043
karlguy
Besides bitflags, of course

1531529623
andrewrk
hi karlguy

1531529694
andrewrk
non power of two sizes will still be power of 2 sizes if you look at, e.g, @sizeOf(u3)

1531529709
andrewrk
they're used for 2 purposes right now

1531529743
andrewrk
1 is to have a smaller maximum range, so that we can, for example make the operand to left shift have just the right amount of bits so that undefined behavior cannot be invoked

1531529752
andrewrk
2 is for bit fields - if you put them in a packed struct

1531530004
karlguy
Ok, got it. So if I had a bit field containing a u5 and a u3, would it occupy a byte of space?

1531530059
karlguy
* in the future

1531530151
karlguy
Or would this have to always be done in an unpacked struct

1531530394
karlguy
Nevermind, that was a stupid question that I should have thought more about before asking. :P

1531532968
andrewrk
karlguy, that's correct - @sizeOf(packed struct {a: u5, b: u3}) == 1

1531533510
GitHub176
[zig] andrewrk pushed 1 new commit to master:

1531533511
GitHub176
zig/master e78b1b8 Andrew Kelley: self-hosted: basic IR pass2

1531550045
beetcoin
hi, all.

1531550068
beetcoin
Zig seems like a very cool project. I just heard about it

1531553073
unique_id
hi beetcoin. I'm enjoying it a huge amount after a very tiny adjustment period. I'm not returning to c++ :)

1531553729
beetcoin
unique_id, indeed, my first comment after learning about Zig was: "wow, this is an ACTUAL C++, not a C++#$%^&

1531553742
beetcoin
"

1531553804
beetcoin
in the early days, the conceit was that C++ was, to most people, "C plus classes"

1531553820
beetcoin
which is already a lame idea

1531553860
beetcoin
then add 25 years of kitchen sinks and crazy ideas

1531553928
beetcoin
Zig is a wonderful idea

1531553942
stratact
it's still possible that Zig might implement some form of OOP either via inheritance or composition

1531553975
beetcoin
I remember reading some O'Reilly book called "21st Century C" and was sorely disappointed by the quality of the book... when what we really wanted was basically what Zig promises

1531554033
beetcoin
stratact I've yet to really play around with it, I might do it this weekend if I get a chance. I just watched the talk about "Perfect Software"

1531554185
beetcoin
Does anyone know why it's called "Zig"?

1531554281
stratact
andrewrk would definitely be able to tell you that :P

1531554682
unique_id
stratact: open set polymorphism is important, no one should fault a language for trying to tackle that problem

1531554755
unique_id
so it wouldn't surprise me if zig gains features in that area, if they are needed

1531554864
stratact
I'm not faulting Zig for that, I'm just telling beetcoin that Zig will have some form of that because of the "C plus classes" comment

1531554911
unique_id
badly worded on my part, I agree with you

1531555285
very-mediocre
Not sure if this is a terrible suggestion: some way to cache comptime computed consts

1531555342
unique_id
beetcoin: the industry definitely moved too far into the OOP design patterns gang-of-four camp :) - Also, I guess C++ should have gained destructive moves instead of adding rvalues and all of that, at this point there's just too many things that wouldn't be here were C++ designed from the ground up.

1531555362
unique_id
redesigned*

1531555373
beetcoin
agreed on all points

1531555484
very-mediocre
unique_id: so true, Factories of Factories made me hate programming for a while

1531555496
beetcoin
i would vastly prefer composition to inheritance. if the devs go with some kind of trait system based off static dispatch, that would probably be the best compromise

1531555585
beetcoin
i've already heard talk of call graph analysis

1531555589
beetcoin
so that fits in very well...

1531555688
very-mediocre
beetcoin: have you seen composition in golang?

1531555704
very-mediocre
it's basically struct embedding

1531555724
beetcoin
i wrote one script in Go two years ago and got annoyed with GOPATH

1531555730
beetcoin
so i know very little about it haha

1531555734
very-mediocre
it's intuitive like inheritance, no need to explicitly access the component

1531555736
very-mediocre
i see

1531555776
beetcoin
I know it's fashionable to bash on Go these days

1531555795
very-mediocre
it has a lot of flaws, but i think it nails composition and interfaces

1531555807
beetcoin
I see, I'll have to look closer

1531555827
very-mediocre
people always say "golang interfaces have problems" but I'd love to hear why and I've yet to find any specific objections

1531555994
very-mediocre


1531556016
very-mediocre
just skim the 2 code blocks and you'll get it, it's very intuitive

1531556077
beetcoin
that's perfectly reasonable to me

1531556128
very-mediocre
right now in zig if you look at std.io for example, there's a lot of `self.stream.[whatever]`

1531556150
very-mediocre
it's a bit clunky if you're writing a stream that wraps another stream

1531556158
very-mediocre
`FileStream.stream.dosomething`

1531556188
very-mediocre
you can't really say FileStream "is a" stream

1531556192
very-mediocre
it "has" a stream

1531556203
very-mediocre
but in golang you can do "is a" and "has a" even in composition

1531556238
very-mediocre
anyway, I like this approach. Just my 2 cents

1531556268
beetcoin
i see what you mean, yeah clunky

1531556284
very-mediocre
tbf composition is clunky like that in almost all languages

1531556318
beetcoin
good point

1531557822
beetcoin
it's just that I've read and used Rust and tons of other approaches, and everything I read about Zig "scratches the itch" better than any of the others

1531557840
beetcoin
I'm not aware myself of how many similar projects to Zig have been tried

1531557848
beetcoin
but it's just so nice so far :)

1531557910
beetcoin
I especially love no hidden flow control and the emphasis on no hidden allocations

1531557981
very-mediocre
it is pretty great

1531558021
very-mediocre
So far I've only toyed with it in my spare time, if I had consistent blocks of spare time I'd do something

1531558029
very-mediocre
more than just toy

1531558136
very-mediocre
I have a few personal niggles, e.g. I dislike `while (i < 5) : { i += 1}`

1531558153
very-mediocre
and I'd love to have simplistic OOP

1531558176
very-mediocre
but despite that I believe this is shaping up to be my favorite low level language

1531558265
very-mediocre
imho continuation expressions are an unnecessary construct that adds very little

1531558288
very-mediocre
while other things that were more valuable were left out on purpose for the sake of minimalism e.g. c-style for loops

1531558343
very-mediocre
also `:` is a type indicator nearly everywhere else

1531558367
very-mediocre
hope this is taken constructively, not as bashing. I love the language.

1531558371
beetcoin
yeah hmm...

1531558469
beetcoin
switch is vastly improved though

1531558554
beetcoin
"else" is better than "default"

1531558589
beetcoin
although it's common to bind as in a match to some name which could be used in the "else" case

1531558637
unique_id
The continuation expression is what turns a while loop into a c-style for loop, though without the init part

1531559253
Bas_
Yesterday I asked about reallocFn, but I actually still have a question about that.

1531559281
Bas_
Does it act like the C realloc function? In that it tries to extend the current memory and if that fails allocates a new piece and copies the data over for you?

1531559322
Bas_
Because I actually don't like that it does that magic for you. That means it's only useful for extending dynamic arrays/vectors and nothing else.

1531559363
Bas_
In cases where you want to insert an element or do something different than appending you will want to reorder the data and the extra copy will only harm you.

1531559831
tiehuis
Bas_: that is going to depend on the allocator being used

1531559892
Bas_
Hmm...

1531559968
Bas_
What I was thinking was that it should just try to extend the memory and if that's not possible return an error. So the caller can then do the alloc-copy-free dance.

1531559976
unique_id
tiehuis: so an allocator could return an error every time an expansion fails, instead of allocating new memory?

1531560010
Bas_
But if that's not explicitly (documented) in the interface people might not handle that case.

1531560042
unique_id
You do make a good point Bas_. traditional realloc isn't efficient when inserting

1531560089
tiehuis
if you look at std/mem.zig, realloc is only going to call the underlying reallocFn implementation and if that fails it will return an error

1531560110
tiehuis
if your reallocFn didn't want to copy elements then it could, but yeah, it isn't specified in the top-level so wouldn't

1531560125
tiehuis
work with the behaviour of other allocators at the moment as far as i'm aware

1531560276
beetcoin
wait, what's the difference between realloc and reallocFn?

1531560300
tiehuis
so an Allocator is a struct that has 3 user-defined functions, allocFn, reallocFn, freeFn

1531560319
tiehuis
you create a new allocator by filling in those functions and you get some extra functions on top of that once implemented

1531560335
beetcoin
Ah

1531560386
tiehuis
the c allocator binding for example just uses malloc, realloc and free here

1531560492
beetcoin
right, that's interesting

1531560521
tiehuis
if you look at std/heap.zig that is where all the allocators are implemented

1531560533
beetcoin
i was reading in there

1531560666
beetcoin
so it keeps the entire heap in userspace but provides an interface for substituting different approaches or styles of allocation

1531560983
unique_id
realizing that you haven't touched the mouse in hours is pretty cool :) "WHOAH what's that? A mouse! I forgot about that thing, cool!"

1531561028
beetcoin
Zig is an ambitious project... with a lot of promise

1531561035
beetcoin
kind of daunting actually

1531561360
beetcoin
btw i take back what i said about runtime dispatch

1531561403
unique_id
Give it a few days, it should become simpler than C to you. Though learning the zig standard library might take some time with the lack of documentation.

1531561446
unique_id
or maybe more than a few days, I've followed the project on and off before committing

1531561485
beetcoin
Well, I should say the person who should be daunted is the creator himself. A lot of pressure to get things right early

1531561513
Bas_
He's got the right mindset imo.

1531561539
Bas_
And I really feel like it has the potential to become great.

1531561567
beetcoin
i do too.

1531561594
beetcoin
i haven't even used it but i'm falling in love the 'try'

1531561606
beetcoin
the LAZIEST thing you can do is handle the error properly

1531561622
beetcoin
i totally relate to the idea of wanting to throw out an entire library because the error handling is worrisome

1531561623
unique_id
Maybe Linus will comment on zig at some point

1531561629
Bas_
lol

1531561800
beetcoin
well shit, i have to get on a plane "tomorrow". time to go to sleep. goodnight gents

1531561901
unique_id
gn

1531561994
Bas_
good night

1531562025
Bas_
I think Linus doesn't like type based aliasing.

1531563493
Bas_
And to be honest neither am I. I'm more in favor of having everything being noalias by default as in

1531563700
unique_id
yes, same.

1531570233
GitHub167
[zig] tiehuis opened pull request #1236: Add --stdin option to zig fmt (master...zig-fmt-stdin)

1531574695
andrewrk
very-mediocre, can you elaborate on caching comptime computed consts? zig already caches all comptime function calls

1531574927
andrewrk
very-mediocre, what do you mean about continuation expressions? I'm not aware that we have those

1531575131
andrewrk
look at all these delicious pull requests today

1531575355
andrewrk
Bas_, thanks for the PRs

1531575363
GitHub9
[zig] andrewrk closed pull request #1232: Fix array list insert (master...fix-array-list-insert)

1531575367
GitHub198
[zig] andrewrk pushed 3 new commits to master:

1531575367
GitHub198
zig/master 5f1aa35 Andrew Kelley: Merge pull request #1232 from BarabasGitHub/fix-array-list-insert...

1531575367
GitHub198
zig/master fe98a2d Bas van den Berg: Add a copyBackwards to fix the broken insert methods for ArrayList.

1531575367
GitHub198
zig/master a1cafa6 Bas van den Berg: Improve ArrayList insert unit tests.

1531576483
GitHub123
[zig] andrewrk closed pull request #1233: Replace loop in ensureCapacity with a std.mem.max for the new capacity. (master...remove-weird-loop-in-array-list)

1531576497
andi3
what if the difference between a struct with fn foo()... and a struct with foo: fn() ....I assume the second one is a function pointer?

1531576567
GitHub86
[zig] andrewrk pushed 1 new commit to master:

1531576568
GitHub86
zig/master 317ed57 Andrew Kelley: docs: clarify mem.Allocator.reallocFn

1531576613
andrewrk
andi3, correct

1531576685
andi3
it actually makes sense cause foo is the name and after the `:` come the type, not sure why I did not immediately see that, sometimes ...

1531577030
GitHub0
[zig] andrewrk pushed 3 new commits to master:

1531577030
GitHub0
zig/master 2a719ee Andrew Kelley: Merge branch 'tgschultz-arraylist-remove'

1531577030
GitHub0
zig/master b44332f Andrew Kelley: std.ArrayList - rename remove to swapRemove

1531577030
GitHub0
zig/master a0c1498 tgschultz: Added `remove` to ArrayList

1531577076
GitHub4
[zig] andrewrk closed pull request #1219: Added `remove` to ArrayList (master...arraylist-remove)

1531578257
Bas_
If I want to look into stack traces for windows, do I have to fiddle around in the compiler?

1531578357
Bas_
or is it all in std.debug?

1531578390
unique_id
andrewrk: two tests in the documentation use the term "continuation expression"

1531578421
andrewrk
ah

1531578424
unique_id
andrewrk: also I think where it says "windows not supported" it's supposed to say "fuchsia not supported"

1531578449
andrewrk
you're right

1531578469
andrewrk
I think "continuation expression" means something else. maybe I can call it "continue expression"

1531578504
unique_id
yes, that term is used once in the documentation

1531578513
unique_id
:)

1531579161
andi3
I think I now know how allocators work and how zig currently handles interfaces

1531579197
andi3
so if I have an Interface like Allocator and it has some function pointers

1531579236
andi3
If I implement that interface in my custom struct I embed an Allocator struct and set those pointers accordingly and when someone expects to get an Allocator I just pass that member of my new struct

1531579252
andrewrk
precisely

1531579265
andi3
but now I have to deal with those function pointers and aren't function pointers less efficient than functions on a struct itself?

1531579293
andrewrk
that's precisely the tradeoff that you make when you use interfaces

1531579296
andi3
Like struct Foo { fn foo() ...} vs struct Foo { foo : fn ...} the second one always has to do the lookup

1531579308
andi3
but if I had real interfaces I would not have to do that tradeoff

1531579333
andrewrk
real interfaces use function pointers too

1531579334
andi3
because than the Inferface would just demand, hey you should have a function foo

1531579345
andi3
and as soon as Foo has foo() then is has this interface

1531579368
andi3
and if Foo would not have foo then my compiler would shout at me

1531579377
andi3
real interfaces use function pointers too - sorry I do not understand

1531579436
andrewrk
I think what you are describing, zig has with duck typing

1531579477
andi3
but you can't specify the type

1531579506
andi3
I mean you can use TypeOff and assert

1531579510
andrewrk
the point of an interface is that you can use the same machine code with multiple different implementations, which inherently requires function pointers

1531579562
andi3
not if you statically dispatch, in that case the interface is just used as a guard at compile time

1531579567
andrewrk
it sounds like you're talking about duck typing vs contracts

1531579589
andi3
yes if that is the proper name

1531579639
andrewrk
you want to be able to say that a parameter has to have a write() method, or a certain field, or something like that

1531579640
andi3
I mean your allocators would certainly be better with constraints than with all the function pointers

1531579646
andi3
yes

1531579698
andi3
and not use reflection all over the place

1531579986
andrewrk
that is quite possibly the case

1531579999
andrewrk
I don't consider the issue resolved

1531580209
andi3
ok, how come the first allocators are implemented using const name = struct {} and then the StackFallBackAlloc is implemented using anonymous struct in some function and some ParentPtr I do not quite understand :(

1531580372
andrewrk
for API convenience at the callsite

1531580788
andi3
I do not really see the difference in any case I would have thought the other allocators would want to provide the same api convenience?

1531580946
andrewrk
because they would get leaked when the function returned

1531580960
andrewrk
but the stack fallback allocator knows that its lifetime can't last longer than the stack frame of the calling function

1531580967
andrewrk
so its API can be more convenient

1531581134
andi3
ok thanks for the explanation I understand a bit more of it, what I still miss is why do you do that `const self = @fieldParentPtr(Self, "allocator", allocator);` it gives a pointer to the struct you (this) are currently in but isn't that equal to this anyway?

1531581418
andrewrk
when you have const Foo = struct { field: Field }, and you have a *Field pointer, you can get a *Foo pointer

1531581446
andrewrk
because if you know where field is in memory, you can do math to calculate the base of the struct

1531582012
andi3
yes I just do not get why this is needed in the StackFallbackAllocator functions because to me it seems as if `this` was already the same of the Parent pointer of the allocator field of allocator

1531582201
andrewrk
this is the same as all the other allocators - they all use @fieldParentPtr in their alloc, realloc, and free functions

1531582467
GitHub194
[zig] andrewrk pushed 3 new commits to master:

1531582467
GitHub194
zig/master ed3181f Andrew Kelley: Merge branch 'eduardosm-extern-return-small-struct'

1531582467
GitHub194
zig/master f78d4ed Andrew Kelley: add an assertion to the test

1531582467
GitHub194
zig/master 722b9b9 Eduardo Sánchez Muñoz: codegen: Store returned value if type is 'handle_is_ptr' and function is not 'first_arg_ret'....

1531582498
GitHub84
[zig] andrewrk closed pull request #1234: codegen: Store returned value if type is 'handle_is_ptr' and function… (master...extern-return-small-struct)

1531582695
winksaville
I just ran the compiler tests and it took 18min30s is there a way to run only a specific test?

1531582719
andrewrk
winksaville, there are a few options

1531582732
andrewrk
I just added this option:  -Dskip-release

1531582739
andrewrk
this makes all the tests complete in ~5 min for me

1531582747
andrewrk
but it's still quite comprehensive

1531582769
andrewrk
there's also -Dtest-filter=fooo   which will run only tests matching "fooo"

1531582801
andrewrk
also each type of test has its own step. for example you can run only the compile error tests with the `test-compile-error` step instead of the master `test` step

1531582804
andrewrk
see the --help menu

1531582821
andrewrk
bin/zig build --build-file ../build.zig --help

1531582894
winksaville
txs

1531582990
winksaville
Should I test with stage1 or stage2 compiler, how are they different?

1531583029
GitHub152
[zig] andrewrk pushed 1 new commit to master:

1531583029
GitHub152
zig/master bf441ed Marc Tiehuis: Add --stdin option to zig fmt

1531583033
GitHub135
[zig] andrewrk closed pull request #1236: Add --stdin option to zig fmt (master...zig-fmt-stdin)

1531583046
andrewrk
winksaville, stage2 is under construction; it is not an operational compiler

1531583143
winksaville
ok, the README.md says "...which can be used for testing and developement." so I wasn't sure :)

1531583234
andi3
so now you've implement alloc for the allocator of the ArenaAllocator and use ParrentPtr to get to the files of the struct its embedded in, but mem.Allocator already has an alloc() func so if you call alloc on the allocator member of ArenaAloc e.g. what is it even going to do? I think zig has already gone to far :D

1531583284
andrewrk
winksaville, yep, for example `zig fmt` is only available in stage2

1531583600
winksaville
andrewrk, so it has build-exe, build-lib, build-obj and the targets list is "complete" do those commands work?

1531583688
GitHub56
[zig] andrewrk pushed 1 new commit to master:

1531583689
GitHub56
zig/master 29c756a Andrew Kelley: docs: correct some misinformation

1531583722
andrewrk
build-obj is under construction. I don't even know what those other commands will do

1531583747
andrewrk
(until I make further progress)

1531583884
andrewrk
andi3, this is what it looks like if you don't have any OOP features and you try to do some amount of OOP stuff

1531583946
andi3
I don't get it and I'm really afraid tbh

1531584144
winksaville
andrewrk: I ran "time bin/zig build --build-file ../build.zig --prefix $(pwd)/stage2" it took 6s, I run it again it still takes 6s. Compared to ninja which takes 20ms to build zig the second time, are there plans to speed up and parallelize zig build?

1531584169
andrewrk
yep, lots of them

1531584202
andrewrk
zig currently does absolutely zero caching

1531584221
andrewrk
so that's how time it takes to rebuild everything, including compiler_rt.o and builtin.o

1531584343
andrewrk
in fact in that command it's buidling compiler_rt.o and builtin.o twice - once for the build script and once for building stage2, which I believe is the default step

1531584406
winksaville
andrewrk: sg, is stage2 designed to be parallelized?

1531584420
andrewrk
yes it is. from the very beginning

1531584448
andrewrk
it's also designed to be a long lived process, caching in memory

1531584494
andrewrk
so you don't so much as perform a build, as you do establish an ongoing build, which will keep your targets up to date in response to file system notifications

1531584525
GitHub47
[zig] BarabasGitHub opened pull request #1237: Fix aligned reallocation (master...fix-reallocating-from-0)

1531584566
winksaville
andrewrk: great was hoping you'd say that!

1531584608
GitHub156
[zig] andrewrk closed pull request #1237: Fix aligned reallocation (master...fix-reallocating-from-0)

1531584611
GitHub180
[zig] andrewrk pushed 3 new commits to master:

1531584611
GitHub180
zig/master 91636f1 Andrew Kelley: Merge pull request #1237 from BarabasGitHub/fix-reallocating-from-0...

1531584611
GitHub180
zig/master c021a44 Bas van den Berg: Fix aligned reallocation from zero size.

1531584611
GitHub180
zig/master 8be6c98 Bas van den Berg: Create unit test that tests aligned reallocation.

1531584732
Bas_
yay

1531585895
andi3
at which point is DirectAllocator.alloc ever called ? in the tests only DirectAllocator.allocator is used

1531586145
andi3
ah so you have your directAlloator with en allocator member which has the alloc func of Directallocator set as its allocFn which is called by the alloc fn ob allocator, easy

1531586233
andi3
and when you call the alloc of the allocator of DirectAllocator then it calls allocFn which calls alloc of DirectAllocator which gets the pointer to direktAllocator and uses its members to do some stuff, still horrifying

1531586440
Bas_
how do I assert that something returns an error?

1531586452
andrewrk
Bas_, std.debug.assertError

1531586461
Bas_
ah ok

1531586484
andrewrk
you can do it manually with if and @panic

1531586504
andrewrk
if (foo()) |_| @panic("expected error") else |err| assert(err == target_err);

1531586526
andrewrk
I think we can add `==` support for this case though

1531586546
andrewrk
since it's O(1) and makes sense

1531586660
Bas_
So you can do assert(foo() == error); ?

1531586735
andrewrk
that already works - error is a type

1531586741
andrewrk
it would be: assert(foo() == error.Something);

1531586871
Bas_
No, that doesn't work for me. It says

1531586878
Bas_
error: operator not allowed for type '@typeOf(Allocator_realloc).ReturnType.ErrorSet![]u8'

1531586901
andrewrk
assert(foo() == error); // asserts that foo() returns a type which is error

1531586909
Bas_
Ah

1531586916
Bas_
Yeah I want to check the value.

1531586978
Bas_
assertError works for me.

1531591157
GitHub117
[zig] BarabasGitHub opened pull request #1238: Improve realloc on fixed buffer allocator (master...improve-realloc-on-fixed-buffer-allocator)

1531595562
Bas_
andrewrk: so pointers don't work at all with comptime?

1531595608
andrewrk
they do

1531595614
andrewrk
but they don't have addresses

1531595641
andrewrk
you can even do @ptrToInt on them, but then the result is a runtime-known value

1531598683
GitHub111
[zig] andrewrk pushed 1 new commit to master:

1531598683
GitHub111
zig/master 278829f Andrew Kelley: self-hosted: adding a fn to an llvm module

1531600288
GitHub119
[zig] andrewrk pushed 1 new commit to master:

1531600288
GitHub119
zig/master 69e50ad Bas van den Berg: Improve realloc on fixed buffer allocator (#1238)...

1531600289
GitHub85
[zig] andrewrk closed pull request #1238: Improve realloc on fixed buffer allocator (master...improve-realloc-on-fixed-buffer-allocator)

1531600334
GitHub138
[zig] andrewrk pushed 1 new commit to master:

1531600334
GitHub138
zig/master 28c3d48 Andrew Kelley: rename Module to Compilation...

1531604805
Bas__
Shouldn't we support more bits for integers than just 2-8, 16, 32, 64 and an odd 29? (I'm trying to shoehorn an i56 into the stage1 compiler)

1531604833
andrewrk
Bas__,

1531604842
andrewrk
in the mean time you can use

1531604881
Bas__
Ah ok

1531604919
Bas__
I'll try that. Even though I think I just succeeded in hacking in the i56 =P

1531607215
winksaville_
It looks like zig only supports LLVM 6.0, is that correct?

1531607242
andrewrk
winksaville, that's correct. although we have an up-to-date llvm7 branch with all tests passing

1531607425
winksaville_
nice, because I'm using Arch Linux and it will probably be tracking LLVM upwards

1531607482
andrewrk
every zig version will be tied to exactly 1 llvm version, which is the latest release of llvm at the time of the zig release

1531607546
winksaville_
Have you considered adding LLVM as a dependency so can be supplied with zig if a users system doesn't have the proper version?

1531607561
andrewrk
you mean bundling the llvm source code, like we do with LLD?

1531608795
stratact
👍 on Zig's productivity today

1531608987
winksaville_
yes, include the LLVM sources

