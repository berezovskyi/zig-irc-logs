1522975539
MajorLag
something is weird about the stack in Windows debug mode.

1522982940
MajorLag
Is debug mode on windows by chance just handling the exception and continuing execution?

1522983013
MajorLag
because that would explain it.

1522987508
andrewrk
MajorLag: I know that I didn't intentionally put that in. Would you mind opening an issue for this mystery? I think it's worth figuring out what's going on.

1522992055
relatingdata
has anybody looked at an actor type model for protecting data during concurrency? Pony look like they have it right but the syntax seem to make my brain hurt! P# from microsoft has some nice Manuals/Doco

1522992204
relatingdata
did anyone get a chance to look at "the with no trivial copy-assignment; use copy-initialization instead [-Werror=class-memaccess]" error from gcc version 8.0.1 in deps/lld/COFF/SymbolTable.cpp ?

1523013677
GitHub45
[zig] tiehuis opened pull request #900: Add common hash/checksum functions (master...hash-and-checksums)

1523020963
man213
Hello guys. Does anybody have tried to build a dynamic library under windows and successfully call a function from it? When I'm trying to do that, I recieve 0xC000007B error ("The application was unable to start correctly").

1523022281
GitHub59
[zig] andrewrk closed pull request #900: Add common hash/checksum functions (master...hash-and-checksums)

1523022283
GitHub6
[zig] andrewrk pushed 1 new commit to master:

1523022283
GitHub6
zig/master 7186e92 Andrew Kelley: Merge pull request #900 from zig-lang/hash-and-checksums...

1523026241
andrewrk
relatingdata, we now have linux x86_64 master branch builds available on

1523026311
andrewrk
if you're trying to contribute to the c++ compiler, I think we just need to add -Wno-class-memaccess to the LLD building flags

1523026342
andrewrk
or maybe disable -Werror for LLD

1523026433
andrewrk
man213, I'll have a look at this tonight

1523028409
Dodo
is it possible to create a new project by saying like 'zig new <projectname>' or whatever?

1523028572
andrewrk
Dodo, zig build --init

1523028596
andrewrk
I should update this to create a fully working project

1523028832
Dodo
huh, thats nice

1523028845
Dodo
I've a simple hello world setup,

1523028907
Dodo
but I seem to get an error at "const std = @import("std");", error: invalid carriage return, only '\n' line endings are supported

1523028924
andrewrk
Dodo, pretty soon 'zig fmt' will fix that issue

1523028938
Dodo
sounds like 'cargo fmt' haha

1523028943
andrewrk
for now you'll have to configure your editor to use unix newlines

1523028949
andrewrk
rather than windows

1523028965
Dodo
oowww I see

1523029007
Dodo
meaning if I use the ubuntu shell, it should work?

1523029030
andrewrk
is that the Windows Subsystem for Linux?

1523029034
Dodo
yess

1523029059
andrewrk
I mean, zig supports windows - it seems like you would want to use it natively

1523029110
Dodo
I wrote the file with visual code, maybe visuel code uses weird newlines?

1523029145
andrewrk
are you using the zig extension to vscode?

1523029163
Dodo
not yet..

1523029170
Dodo
I just downloaded the compiler...5 minits ago

1523029172
andrewrk
I believe that will fix the newline issue

1523029180
andrewrk
I hope

1523029225
Dodo
installing it :)

1523029295
Dodo
still getting the error..

1523029378
Dodo
Im trying to compile using this command: "..\zig-0.2.0\zig.exe build-exe .\hello.zig" , thats why?..

1523029379
raytracer[m]
Do you see a "CRLF" symbol in the bottom right corner?

1523029390
Dodo
I do

1523029404
Dodo
oh what do you know

1523029407
Dodo
LF fixes it

1523029497
andrewrk
Dodo, idea here is to get everybody on the same page. Source code is cross platform and therefore we need cross-platform standards for newlines

1523029577
Dodo
ah yeah, makes sense

1523029811
Dodo
quick question, you can do

1523029931
andrewrk
Dodo, no-  you cannot do unsafe things such as call an external library, or make syscalls

1523029977
andrewrk
right now @ptrCast does not work at comptime but I have a plan to make that work

1523030025
andrewrk
you can't crash the compiler at comptime

1523030037
andrewrk
well, you certainly can :) but it's always a bug in the compiler when you do

1523030051
Dodo
But still, that's quite alot of power

1523030076
andrewrk
MajorLag and Hejsil probably had a seizure when I made the statement "you can't crash the compiler at comptime"

1523030104
andrewrk
(between the two of them they've reported dozens of bugs in the comptime evaluation code)

1523030234
Dodo
can I 'warn' (print??) a number that I got from a comptime?

1523030492
MajorLag2
Dodo: yes, but you have to explicitly cast it to a type first. `warn("{}\n", isize(comptime_num));`

1523030532
Dodo
ohh

1523030553
MajorLag2
andrewrk: indeed, "you can't crash the compiler at comptime" is a statement I'd have to disagree with. "you shouldn't be able to crash the compiler at comptime" is correct though.

1523030616
andrewrk
indeed

1523030622
Dodo
but I define the variable to hold the result in the 'comptime' block,

1523030633
MajorLag2
oh, then you want to print it at comptime?

1523030640
andrewrk
there's an issue for printing number literals

1523030653
Dodo
well, calculate the number at compile time, then print at runtime?

1523030665
MajorLag2
then you're storing it somewhere

1523030691
Dodo
or can I say like 'const whatever = comptime { //expression };' ?

1523030698
andrewrk
yep

1523030700
MajorLag2
you can totally say that

1523030716
Dodo
why didn't I try that yet :3

1523030820
MajorLag2
It can take a little while to form a good mental model of comptime, but it is worth it. I built my entire interpolation collection in a mere 178 lines thanks to comptime.

1523030878
Dodo
var fib_15 = comptime { fib(15) }; <---- expected token ';', found '}'

1523030889
MajorLag2
fib(15);

1523030901
andrewrk
var fib_15 = comptime fib(15);

1523030934
andrewrk
hmm I don't have a good place in the docs to link to which explains labeled blocks

1523030948
MajorLag2
there's that aray initialization

1523030989
Dodo
comptime {fib(15);}; complained about not being able to print a void type

1523031004
andrewrk
yeah that works. Dodo  have a look at

1523031005
Dodo
which makes sense, because the expression returns void

1523031038
andrewrk
this is just to show you labeled block and labeled break

1523031046
MajorLag2
yeah, either don't use the block or use a labeled break expression

1523031088
Dodo
yes

1523031092
Dodo
but it worked! :D

1523031164
Dodo
oh this is amazing  \o/

1523031331
Dodo
it's pretty fast calculating fib(90) recursivly! guess thats the optimizer doings its work \o/

1523031457
Dodo
Im comming from Rust, hope they get comptime one day as well

1523031820
andrewrk
I think it's inevitable

1523032123
Dodo
it is, they now 'support' it, but its really just constant expressions, no if-else, looping, or other stuff

1523032207
Dodo
can I make the '<' and '>' operator work for my own structs?

1523032579
Dodo
is it a .cmp() function I need to create ?

1523032672
andrewrk
there is no operator overloading

1523032680
andrewrk


1523033116
Dodo
so for as far as I understand, operator overloading is 'hidden territory', and the prefered way is to be explicit?

1523033291
Dodo
but...wouldn't people come up with their own function names for operatoroverloading then?... I think that 'if (struct < struct) {//do something}' is pretty clear about what it does

1523033330
MajorLag
but what if `<` does an allocation? That's very non-obvious.

1523033355
Dodo
?

1523033383
Dodo
oh you mean function that '<' would call?

1523033388
MajorLag
yes.

1523033398
Dodo
well, that is non-ovious, true

1523033413
MajorLag
there's also the problem of error handling semantics.

1523033427
Dodo
however, comparing doesnt really require allocs I think

1523033442
MajorLag
admittedly an extreme example

1523033471
Dodo
honestly I love the way Rust does these things,

1523033489
andrewrk
one of the features of C that I do not want to give up, is that, aside from the preprocessor, you can look at code and always know exactly what the control flow is doing, without looking anywhere else

1523033491
koomi
'<' is not an obvious operation at all for non-trivial structs

1523033509
Dodo
there you can implement Eq, PartialEq, Ord, PartialOrd etc, and you know exactly what '<' and '>' do

1523033529
andrewrk
with operator overloading, you would have to potentially look somewhere other than the code you're reading to find out the control flow of the code you're reading

1523033534
koomi
starting with the problem that there can be many ways to define an order

1523033543
Dodo
true

1523037074
Dodo
btw, to get back to the conversation about overloading,

1523037173
Dodo
the point was made that you should be able to read the programm, and know what is does, but if sombody makes functions to represent the operators, than..how do you know what's going on in that function?

1523038027
Dodo
do unions have generic support?

1523038479
Dodo
huh, you can make a Some(T)/None union \o/

1523039105
MajorLag
Dodo, did you just reinvent a nullable?

1523039120
Dodo
maybe?

1523039161
Dodo
in Rust there is the type "Option<T>", which is an enum having 2 variants: Some(T), and None

1523039196
MajorLag
Yeah, that's a nullable. We do that in zig with ?T

1523039197
Dodo
where None is just a variant, not really 'null'

1523039204
Dodo
ah I see

1523039224
MajorLag


1523039240
Dodo
guess I first should read docs ^^

1523039258
MajorLag
We have nice semantics for dealing with them. Comes in real handy for interacting with C.

1523039324
Dodo
ah yeah

1523039370
Dodo
I came up with this: 'fn Option(comptime T: type) type {     return union {         Some: T,         None: void,     }; }'

1523039440
MajorLag
You might also be interested in the section on Errors:

1523039444
Dodo
but I cant really accesss the fields I think

1523039462
MajorLag
In a nullable? you have to unwrap it first.

1523039490
MajorLag
Depending on context there are a few ways to do that.

1523039529
MajorLag
var x =returnsANullable() ?? <what to do or assign if the result was a null>;

1523039572
MajorLag
in that case x would be assigned to either the unwrapped nullable or whatever the expression after ?? is.

1523039682
MajorLag
but sometimes, in for loops for instance, we use the payload operator:  for(arrayOfNullables) | x | { <stuff to do if item was not null> } else { <stuff to do if it was> };

1523039691
Dodo
oh that's the same as in rust, there it's like 'let x = returns_option().unwrap_or(value)', or 'let x = returns_option().unwrap_or_else(|| //closure)'

1523040682
Dodo
how.. do I 'warn' an enum?

1523040715
andrewrk
Dodo, there is

1523040728
andrewrk
PR welcome which adds printing enum support to std.fmt.format

1523041366
MajorLag
that reminds me I should probably do a PR for these additions to std.os.linux. Adds a couple dozen syscalls and related constants and macros. if desired, also a errnoToError function.

1523041463
andrewrk
that would be welcome. the reason we don't have errnoToError currently is that it's useful to constrain the error set to the actual error set possible from the syscall

1523041674
Dodo
so '??nullable' only unwraps?

1523041790
andrewrk
??nullable is syntactic sugar for:   nullable ?? unreachable

1523042466
MajorLag
I thought as much, but for me errnoToError was useful to minimize boilerplate around a bunch of syscalls.

1523042736
Dodo
is there a way to loop over a range of numbers?

1523042744
Dodo
without using 'while' ?

1523042744
andrewrk
no

1523043365
Dodo
how do I go from u8 to char?

1523043453
Dodo
sure, a char can be seen as a u8, but I'd like to print text to my terminal, and not raw bytes

1523043568
MajorLag
warn("{c}\n", u8('a'));

1523043855
Dodo
I know I ask many question, but what about reading a file at runtime?

1523043964
andrewrk
std.os.File

1523044012
andrewrk
Dodo, here's some example code:

1523044023
andrewrk
questions are always welcome

1523044045
andrewrk
some day I will be able to respond to every question with a link to documentation

1523044070
Dodo
yeah:D

1523044145
Dodo
got to say that using '@embedFile' is much more easy than..that

1523045363
andrewrk
Dodo, ah, but that's at comptime

1523045394
andrewrk
comptime code is easy. you just emit a compile error if something doesn't work

1523045401
andrewrk
runtime code is hard. you have to handle errors appropriately

1523045426
andrewrk
oh, and you have free unlimited memory at comptime

1523047863
alexnask
@andrewrk What is the recommended allocator to use at comptime for std functions that require one?

1523047911
andrewrk
FixedBufferAllocator

1523047962
andrewrk
I haven't personally tried this use case. you may run into a problem. if you do, feel free to open an issue

1523048082
alexnask
Will do :) I assume the DirectAllocator would not work, or is the compiler able to execute syscalls etc in comptime contexts?

1523048992
andrewrk
syscalls are not allowed at comptime

1523049004
andrewrk
right so that's why the direct allocator will not work

1523049022
andrewrk
there could be a concept of a comptime allocator. I'm still thinking about what that might look like

