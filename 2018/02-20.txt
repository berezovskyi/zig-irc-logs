1519097066
andrewrk
coroutines proposal is up

1519097708
andrewrk


1519121610
achamb
has any thought been given to things like restricted ranges for integer types in zig?

1519121622
achamb
seems like a safety mode sort of thing

1519121672
achamb
e.g. an integer that must be in the range 0-59

1519121689
achamb
or 1-12

1519121772
achamb
i think it is something ada has

1519130207
MajorLag_
Closest we have right now is arbitrary bit-length integers. In safe and debug mode those would be checked for range at runtime.

1519143392
jfo
achamb: I was actually thinking how much I would like that in the context of an index to a fixed length array. Like a modified usize. Then out of bounds access on the array would be synonymous with integer overflow for the derived type. I don't know how useful that would be in that context or if it's a thing that exists other places but it's a though

1519143847
andrewrk
achamb, I've been thinking a lot about this recently

1519143856
andrewrk
I haven't typed out any proposals

1519154010
sient
re

1519154044
sient
(C -> C++)

1519155130
andrewrk
sient, what does REGISTER do?

1519155195
sient
depends, but what I have done in the past is register a static variable that has a ctor which constructs a singleton instance and adds it to a static list

1519155207
sient
I can share a link to code if need be

1519155217
andrewrk
yes please, may I see?

1519155301
sient
it is a bit messy, it starts here

1519155350
sient
I used to maintain a list of all handlers, it would sometimes causes wasted time spent debugging due to forgetting to register

1519155714
andrewrk
sient, it looks like it still registers at runtime, but the difference is that now you can put REGISTER_IPC_MESSAGE below the type declaration instead of in the Run function. is that right?

1519155972
andrewrk
one strategy you could have in zig, is iterate over a list of modules (files) at compile time and instantiate them this way

1519155992
andrewrk
then you would get compile errors for not fulfilling the plugin interface or whatever

1519156044
andrewrk
the short answer to your question is no, there are no static constructors. but I really think you can accomplish the goals a better way with comptime machinery

1519156053
sient
ah, that'd be perfect - didn't realize comptime could introspect like this; is there a test for the feature I can look at?

1519156068
andrewrk
hm, no but I should add some

1519156098
andrewrk
maybe try this:

1519156106
sient
yes, banning static ctors seems like a good idea ; chrome bans them outright due to startup time penalties

1519156158
andrewrk
as you noted, there aren't a lot of tests for things like this. if you run into bugs I'll try to get them sorted right away to unblock you

1519156192
sient
that example looks perfect, thanks

1519157670
MajorLag_
Pretty much any time I try to do something with (type)"var" other than take it as a comptime parameter it crashes the compiler. I'm mentioning this rather than continue to make bug reports.

1519157721
MajorLag_
Most of these should never be allowed anyway, I'm just poking around trying to see if I can make reasonable implementations of things that might otherwise be language features.

1519157960
andrewrk
MajorLag_, it's a mistake that "var" is allowed as a type. it's really just syntax that function parameters and return type can use

1519157964
andrewrk
I'll fix it in the parser soon

1519157971
andrewrk
it's not really a type

1519158154
MajorLag_
Yeah, I get that.

1519158265
andrewrk
I think we have plans for the stuff you're trying to do though

1519158278
andrewrk
right now you can't have a variable at compile time that gets assigned a different type

1519158282
andrewrk
that's a problem

1519158317
andrewrk
I think we need to make comptime variables support being assigned different types

