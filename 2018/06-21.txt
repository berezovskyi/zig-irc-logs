1529540658
isolier
Is there a way to get the intel syntax assembly from a zig source file?

1529541984
andrewrk
isolier: I really tried to make Intel syntax the default. I had to revert it. Bottom line is llvm support for Intel syntax isn't good enough

1529543417
relatingdata
Hi Andrew et al

1529543486
relatingdata
Where are we at with the self hosting compiler and the work on caching files /functions /AST etc and llvm backend?

1529544217
andrewrk
relatingdata: I just got the breaking changes I wanted to done, I'm planning on starting that effort this week

1529544237
andrewrk
It will be a couple months I think before we are fully self hosting

1529544855
relatingdata
:-) when you have an initial plan please let me see if I can help in any way :-)

1529545107
relatingdata
I am fascinated by the pony language at the moment and their "objectives"

1529545167
relatingdata
by fully self hosting do you mean that we will not rely on llvm?

1529548346
andrewrk
relatingdata: no, we will always depend on llvm

1529548363
andrewrk
Fully self hosted means that the self hosted compiler can build the self hosted compiler

1529550107
relatingdata
:-) so a zig compiler "fully" written in zig, able to compile itself after bootstrapping :-)

1529550162
relatingdata
and obviously the build system follow :-)

1529550207
relatingdata
is there any effort to produce a C -> zig translator/compiler?

1529552908
andrewrk
relatingdata: yes. Have a look at the translate-c command

1529552920
andrewrk
zig translate-c file.c

1529553374
relatingdata
ok :-) Thanks

1529553471
relatingdata
The C++ used in the compiler at the moment is C++11 or more modern or older? I remember a time when C++ compilers were in most part translators to C and some supporting libraries

1529553528
relatingdata
If the objective is to get a working self hosted compiler has that avenue been explored?

1529553593
relatingdata
a C++ to zig compiler seems a big target to attempt (at the moment)

1529553877
very-mediocre
since the target is llvm having a c transpilation step would be superfluous

1529555543
andrewrk
relatingdata, see also this issue:

1529555573
andrewrk
there's no reason to try to auto translate the compiler

1529555585
andrewrk
for one, it's just overcomplicated

1529555606
andrewrk
more importantly, this is an opportunity to rewrite and rework the ugly parts from a clean slate

1529555628
andrewrk
why would I give that opportunity up in exchange for maintaining a messy, awkwardly translated codebase?

1529555867
relatingdata
indeed you wouldn't! but only if it speeds things up and improves zig along the journey

1529556000
relatingdata
are things like bison/yacc flex/lex in use or are the more modern things that I am not aware of

1529556065
andrewrk
it's recursive descent

1529556081
andrewrk
the only 3rd party dependencies are llvm, libclang, lld

1529556102
relatingdata
Most of my compiler writing has been LISP targeting LISP and fairly simple ones at that :-) It nice when your AST is the source code :-)

1529556112
relatingdata
:-)

1529556152
relatingdata
and code and data are the same

1529557601
kristate
andrewrk: thanks for improving on my PR; reading through the diff has improved my understanding

1529557926
andrewrk
no problem

1529557935
kristate
I am excited

1529557968
kristate
and also happy for you that you get to work full time on zig

1529558020
andrewrk
we should see some accelerated progress now :)

1529558065
kristate
I have been working on the event loop code and have come up with an event handle of sorts

1529558101
kristate
somewhat similar to libuv -- I have been trying to keep the design neutral to iocp on windows

1529558207
GitHub111
[zig] tiehuis opened pull request #1143: Add float repr bit extraction functions (master...float-repr)

1529558209
kristate
andrewrk: Ah, I also had a question about function declarations in zig

1529558235
kristate
const my_function_h = fn (*EventHandle) error!void;

1529558307
kristate
is that correct? if I do that, I get ->-> error: 'my_function_h' depends on itself

1529558349
andrewrk
hmm, do you have a test case?

1529558384
andrewrk
we do have a couple bugs related to this:

1529558438
andrewrk
if you show me your test case I can help you come up with a workaround

1529558493
andrewrk
my plan is to use the self hosted compiler to try out a different approach for top level declaration resolution and if it solves this bug then "backport" the solution into the stage1 compiler

1529559928
GitHub189
[zig] andrewrk closed pull request #1143: Add float repr bit extraction functions (master...float-repr)

1529559929
GitHub89
[zig] andrewrk pushed 1 new commit to master:

1529559929
GitHub89
zig/master f50c0c6 Marc Tiehuis: Add float repr bit extraction functions

1529560595
kristate
andrewrk: let me come up with a small test case -- thanks

1529560912
kristate
here is a small test case and issue:

1529561211
andrewrk
kristate, it's definitely a bug. I posted a workaround for y ou

1529561244
andrewrk
I'm headed to bed, good night

1529561253
kristate
andrewrk: thanks, goodnight

1529566653
alexnask
Is there some kind of priority queue for issues/features in zig?

1529566695
alexnask
I will likely be finishing up basic @reify tomorrow but I don't really know what to tackle next, I would like to work on the self hosting compiler

1529583326
GitHub120
[zig] isaachier opened pull request #1145: Fixes #1111. (master...bigint-neg-one-incr-fix)

1529587627
very-mediocre
std.heap.FixedBufferAllocator doesn't do any heap allocation currently, right?

1529587664
very-mediocre
I skimmed it and it looks like it manages a buffer that lives on the stack? Or am I missing something?

1529588621
vegecode
exit

1529588884
GitHub173
[zig] isaachier opened pull request #1147: Fix segmentation fault on invalid enum field (master...enum-invalid-field-fix)

1529598870
ltr__
hello everyone o/

1529598920
ltr__
hey andrewrk , saw your twit about vulkan libraries , are you working on something related with zig and games?

1529598942
alexnask
Hi

1529598976
alexnask
Afaict andrewrk was looking into using some graphics API without a libc dependency

1529599028
ltr__
yes, i was under the impresion that vulkan was much more lightweight than opengl

1529599066
ltr__
any experiments with zig<->vulakn so far?

1529599069
alexnask
I don't know if lightweight is a correct description, it's much lower level for sure

1529599091
alexnask
But at least on linux it uses libc (and c++??) under the hood

1529599096
ltr__
thin layer between gpu and the rest of the world

1529599126
alexnask
It seems like @cImport'ing vulkan is buggy atm

1529599138
ltr__
oh =/

1529599142
alexnask
But it should be pretty easy to use if that bug is fixed

1529599152
ltr__
ill try to look into that this weekend

1529599152
alexnask
And it may be an easy manual fix, I may look into it tomorrow

1529599172
ltr__
nice, ill be msg you then

1529599175
alexnask
But in general it's really easy to use C libraries

1529599220
ltr__
may be it can be used with sdl on top of vulkan

1529599248
alexnask
SDL should work fine

1529599253
alexnask


1529599285
ltr__
my goal is to do a PoC of a simple  game i have a in mind, ill use zig to do it.

1529599308
ltr__
yeah i saw that, thats why i think sdl would be a good choice, it works well with zig

1529599353
alexnask
I've used windows and opengl headers before really easily, vulkan headers must be doing something pretty weird to not work with @cImport

1529599389
ltr__
i can imagine that is the same problems that libuv has, opaque unions that macro dark magic

1529599405
ltr__
and* macro magic

1529599450
ltr__
im always lost with opengl versions , supported hardware and capabilities of each one

1529599620
very-mediocre
ltr__ for OpenGL there are 2 main "mobile" versions (OpenGL ES 2 and 3) with a big discontinuity of feature sets

1529599632
very-mediocre
and the desktop version is generally equivalent to DX12

1529599643
very-mediocre
The ES versions are very disappointing

1529599649
very-mediocre
3 in particular has very poor hardware support

1529599684
very-mediocre
For targeting mobile many teams stick with OpenGL ES 2

1529599691
very-mediocre
or even use Vulkan

1529599730
very-mediocre
and WebGL is a derivation of OpenGL ES 2

1529599802
LPeter1997
Hi! I've just found out about this language and it's like the perfect thing I was searching for. Is there any way I can contribute to the project in any way? (I'm a hobbyist compiler writer if that matters any)

1529600082
alexnask
Hi

1529600110
alexnask
Any helps is appreciated, I'm a hobbyist compiler dev too and I've made a couple of PRs

1529600129
alexnask
Just pick any issue on the tracker and give it a shot I guess :)

1529600242
very-mediocre_
google is awesome for rewriting links like that

1529600245
very-mediocre_
actual link:

1529600253
very-mediocre_
oh my messages died

1529600265
very-mediocre_
LPeter1997: ^ the above is a compiler internals video

1529600277
alexnask
Something like #1118 could be a reasonable start

1529600341
LPeter1997
Thanks guys! I'll watch the video and toy around with the compiler, then I'll look at issues. Are proposals in the form of issues too?

1529600350
alexnask
Yes

1529601133
andrewrk
alexnask, the milestones are the priority queue

1529601158
alexnask
fair enough

1529601177
andrewrk
very-mediocre, std.heap.FixedBufferAllocator manages a buffer that you pass to it upon initialization - which could be anywhere

1529601204
very-mediocre
figured after looking into it more deeply, but thanks :)

1529602851
GitHub193
[zig] andrewrk closed pull request #1145: Fix bigint -1 increment operation (master...bigint-neg-one-incr-fix)

1529602852
GitHub17
zig/master eeda1a1 Isaac Hier: Fix logic

1529602852
GitHub17
zig/master f1207a8 Isaac Hier: Add test case

1529602852
GitHub17
zig/master 0ab4afb Isaac Hier: Fix increment operation for bigint -1

1529602852
GitHub17
[zig] andrewrk pushed 4 new commits to master:

1529603666
vegecode
I'm trying to use @setGlobalSection and I'm getting an error. I can't see any use of it in github other than when the issue was filed that suggested the feature. I think I'm doing the syntax the same, does anyone see my problem?

1529603682
vegecode
const isrfn = nakedcc fn(void)void; const vectortable = ([]isrfn{undefined} ** 14) ++ []isrfun{_start}; {@setGlobalSection(vectortable, ".isrvectors");}

1529603837
vegecode
Here is where the issue is filed:

1529603907
andrewrk
vegecode, apologies for that being out of date

1529603915
andrewrk
is it a function or a variable?

1529603922
vegecode
Oh my goodness that is quite alright.

1529603953
vegecode
I am trying to declare a table of function pointers to nakedcc void functions to put where interrupts go

1529603992
vegecode
The section isrvectors has 14 interrupt vectors that I'm leaving undefined for now and then the 15th is the reset vector

1529604010
vegecode
I thought the linker would automatically put the address of the entry point in it, but it doesn't

1529604022
vegecode
The generated assembly does declare it as the entry point oo

1529604100
andrewrk
there is syntax for section now

1529604105
vegecode
Also, is it possible to declare a variable or function as required (like for copyright strings, etc., or interrupts)

1529604152
andrewrk
export var aoeu: i32 section(".text2") = 1234;

1529604178
andrewrk
this is completely undocumented. I am making a note for myself to add documentation for it

1529604220
andrewrk
for "required" stuff I think you want the `export` keyword

1529604244
vegecode
Perfect, thank you

1529605109
vegecode
export const vectortable section(".isrvectors") = []isrfn{@intToPtr(isrfn, 0x3FFF)} ** 14 ++ []isrfn{_start};

1529605206
vegecode
const isrfn = nakedcc fn();

1529605213
vegecode
What am I doing wrong here?

1529605222
vegecode
I've tried sticking void in there and after the parentheses

1529605254
vegecode
I get invalid token ';'

1529605314
vegecode
If I stick void after the parentheses it expects '{' when I'm trying to declare another function quite a ways down the page

1529605401
vegecode
I can

1529605409
vegecode
I can't seem to declare a void function pointer

1529605628
vegecode
I'm over on my lunch by twenty minutes, but if you could point me to an example of a void function pointer I will check the channel logs after work

1529605893
andrewrk
vegecode, const isrfn = nakedcc fn() void;

1529606728
GitHub88
[zig] andrewrk pushed 1 new commit to master:

1529606728
GitHub88
zig/master 5f38d6e Andrew Kelley: add casting docs, __extenddftf2, and __extendsftf2

1529617522
GitHub174
[zig] andrewrk opened pull request #1149: fix compiler crash for invalid enum (master...issue346)

