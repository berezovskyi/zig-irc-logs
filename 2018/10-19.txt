1539953378
bheads
...sigh... I keep missing the live stream

1539953741
Hejsil
bheads, I just watch them on YT, as there is no way for me to watch them without skipping hours of sleep

1539953877
Hejsil
Some of these grammar checkers are pretty good. Here is another ambiguity with the grammar on ziglang.com:

1539953964
Hejsil
Maybe this actually shows it better:

1539957889
bheads
I live in EST time, its just 5pm is when I leave work and am stuck in traffic

1539963085
MajorLag
Does anyone know, are arrays handled the same way as structs re: #733?

1539963458
MajorLag
Also, what's the appropriate way of submitting PRs that are dependant on other PRs?

1539966912
Hejsil
#733 is the same for arrays

1539966917
Hejsil
MajorLag

1539967306
MajorLag
Hejsil, re: generic meta.eql, should it follow pointers? Is an [N]*u8 `eql` to another [N]*u8 if the values are the same, or only if the pointers are?

1539967366
Hejsil
I'd say no. We want the "safe" subset. If the user wants to follow pointers, they should have another solution that takes into account cycles

1539967422
Hejsil
So just == on ptrs, and .len == .len and .ptr == .ptr on slices

1539967494
Hejsil
Also, meta.lessThan would also be useful :)

1539967617
Hejsil
Also, for the PR depend on PRs. Idk how to do this, but If the first PR is done, and I know enough to review it, I could merge it

1539967631
MajorLag
ok, so is `*T == *const T` if they point to the same place?

1539967672
MajorLag
I would think so, but they are technically different types.

1539967711
Hejsil
Would that ever happen?

1539967726
Hejsil
Don't we pass fn eql(a: var, b: @typeOf(a)) bool ?

1539967737
Hejsil
So we should always compare types, that are the same

1539967810
MajorLag
It came up in a test with slices, which is why I asked. eql could be eql(a: var, b: var) with additional asserts, or even eql(a: var, b: var<EqlType(a)>) some day.

1539967836
Hejsil
Why is eql(a: var, b: @typeOf(a)) bool not good enough?

1539967879
MajorLag
It could be, it depends on your definition of `eql`. Since we're going with pointers not being eql even if their values are, then it probably is good enough.

1539967921
Hejsil
I think, 99% of the time, the user wants to compare two types, that are the same :)

1539967961
Hejsil
And if they don't, they should probably make their own, and have a comment explain why, two different types can be compared for equallity

1539967963
MajorLag
edge cases matter

1539967987
Hejsil
Exactly, and that is why they should roll their own

1539968004
MajorLag
anyway, I agree that eql shouldn't be deep equlaity.

1539968018
Hejsil
Actually, I'd say 100%, a generic eql, should only compare types that are the same

1539972190
MajorLag
Hejsil, I didn't worry about following formatting standards as I figured a run through std.fmt would fix that.

1539972379
Hejsil
Right. Then just do that, and we're done!

1539972449
MajorLag
zig fmt is part of the compiler now? Or do I have to compile stage2 still?

1539972577
Hejsil
You still need stage2. I can run fmt after merge, if that is better

1539972629
MajorLag
It'd be easier for me. the dev environment I use when working with git will probably OOM trying to compile stage2

1539972700
MajorLag
Hmm.... I think a lot of my utility code will become a lot simpler if I just assume copy elision will work soon.

1539975241
Hejsil
MajorLag, did you see my latest comments on the meta.zig PR

1539975576
MajorLag
I hadn't before I wrote that comment. I don't think returning a `*align(1) T` would make the function very useful. Then again, having this alignment limitation at all make it seem kinda pointless. For ints, mem.readInt() would probably be better, and for other types I have, and plan to make a PR for, arbitrary type reading/writing from streams that would work. Alignment would not be relevant.

1539975787
Hejsil
MajorLag, in my randomizer, I use aliasing ptrs into byte arrays, so that reading/writing roms is trivial. Just read bytes, alias into bytes, modify alias', write bytes back

1539975794
Hejsil
No need for serialization on write

1539975817
Hejsil
So, i'd find it useful

1539975845
MajorLag
No need for serialization unless the endianess is different than native

1539975854
Hejsil
I have lu16 wrappers

1539975861
Hejsil
lux wrappers*

1539975921
MajorLag
doesn't that kinda defeat the purpose?

1539975944
Hejsil
It's still more trival to alias a byte buffer, than deserialize

1539975954
Hejsil
and serialize

1539976088
Hejsil
The stdlib is gonna get cleaned up at some point. Having it in allows us to think about something like this when we do the cleanup

1539976245
MajorLag
deserializtion is pretty trivial. It just isn't as efficient if the endianess matches.

1539976327
Hejsil
Anyways, you can decided. I have my own implementation I use, so I wont miss them in std if you don't think it's worth it

1539976386
Hejsil
but stream.write(mem.toBytes(packed_boy)) is the best serialization :)

1539976500
MajorLag
`file_stream_writer.write(&value);` is my way. struct doesn't even need to be packed.

1539976532
Hejsil
I like to have them packed, to document layout

1539976573
Hejsil
In a way, it's declarative deserialization. I just declare my layout, and now it just works

1539976586
MajorLag
layout is documented by order & size of fields as far as I'm concerned. compiler added padding is invisible in the code and ignored by the arbitrary type writer.

1539976611
Hejsil
What about a:u4, b: u4?

1539976638
MajorLag
if it is an actual bitfield it has to be packed for now, but I have plans to fix that because endianess is an issue there too.

1539976672
MajorLag
for now I'd probably just take it as a u8

1539976694
Hejsil
True. I think I have a few packed sturcts, where I don't take care of endianess proporly for sub 8 bit types

1539976714
Hejsil
structs* properly*

1539976741
MajorLag
bitfield endianess is pretty hairy, which is why I've left it largely unsolved. It also hasn't come up that often.

1539976787
Hejsil
This one is probably wrong

1539976970
MajorLag
I probably still have too much java developer in my because my inclanation is to turn that into a struct.{u16} with fns to do the masking and shifting to retrieve the values.

1539977374
Hejsil
Hmmm, maybe these int wrappers need to be optimized a little

1539977592
MajorLag
...derp, I don't have to force the byteAsValue alignment to 1, I can use the alignment of the byte buffer.

1539977721
Hejsil
RIP toBytes :(

1539977744
MajorLag
seemed excessive since asBytes(&val).* was the same.

1539977745
Hejsil
I kinda wonna keep it, as it is a more safe function, because you can't dangle any pointer :)

1539977780
Hejsil
Hmm, idk. I have things like toBytes(SomeType{<some_lines>})

1539977806
Hejsil
That would be asBytes(&SomeType{<some_lines>}).*

1539977819
Hejsil
Which I guess is still fine

1539977847
Hejsil
But people are lazy, so we should encourage the safest alternative

1539977863
Hejsil
and people will probably search for "to bytes" before "as bytes" :)

1539977874
Hejsil
or maybe, I'm just talking out of my ass

1539977888
Hejsil
Who knows!

1539977989
MajorLag
hmm... well, the saftey argument isn't a bad one I suppose.

1539978038
Hejsil
It was at least my reasoning for having asBytes and toBytes

1539978433
Hejsil
Seems the optimizer likes this version of mem.readInt better:

1539978636
Hejsil
This is probably llvm being a little stupid. It seems like it could optimize mem.writeInt no prob

1539978671
MajorLag
I'm often unimpressed by LLVM's optimizations.

1539980655
dimenus
andrewrk: zig tests fail on my machine, our urct / windsdk checking is still flawed

1539980665
dimenus
i'm improving it and simplifying it at the moment

1539980683
dimenus
*winsdk

1539984447
Hejsil
MajorLag merged and formatted

