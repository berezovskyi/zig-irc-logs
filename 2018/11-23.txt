1542932620
daurnimator
huh. how does deferring in a loop work?

1542932650
daurnimator
Where does the deferred list of actions live?

1542932666
daurnimator
On the stack I assume..... but then if it's in a loop how do you know how much stack space you need

1542934035
suirad
i was told the other day that defer statements happen at each iteration. If i were to guess about the stack, the compiler knows ahead of time how many defer statements are in a scope, so it could probably preallocate them

1542934085
benjikun
you could inline it (unroll the loop) if you want

1542934166
benjikun
I'm not sure how much of a difference it'll make

1542934568
daurnimator
suirad: yeah I was building on your question.... but knowing how many loop iterations happen would be akin to solving the halting problem.

1542934578
daurnimator
unless we limit it to comptime loops

1542934593
daurnimator
in which case the answer to your question is a bit different....

1542958902
Hejsil
daurnimator, defers are executed at the exit of a block, and each iteration of a loop, enters the loop block, executes the statements in the block, exits the block, repeat

1542960744
daurnimator
Hejsil: ah okay, that makes sense then!

1542990631
andrewrk
MajorLag, nice, got your PR. I'll work on getting this merged over the next few days

1542990650
andrewrk
got some others in the merge queue as well

1543004198
ducktype
hi

1543004251
ducktype
error: expected type 'usize', found '*[0]u8'

1543004293
ducktype
i need to pass an empty asciiz string to the last argoument of mount

1543004294
ducktype
ret = std.os.linux.mount(&"none",&"/",&"none",std.os.linux.MS_REC|std.os.linux.MS_PRIVATE,&"");

1543004305
andrewrk
hi ducktype

1543004325
ducktype
i'm out of luck, sorry for being lazy and asking here

1543004334
andrewrk
I believe you want @ptrToInt

1543004359
andrewrk
an empty string though?

1543004381
andrewrk
why not just pass 0 or undefined to the data argument, since you're not going to use it?

1543004408
ducktype
make sense trying

1543004424
andrewrk
or is that data that the kernel reads? let me look at the man page

1543004437
ducktype
thank you, my first time with zig

1543004443
andrewrk
"The  data  argument is interpreted by the different filesystems. "

1543004448
ducktype
golang want an empty string

1543004465
andrewrk
I think you want @ptrToInt(c"")

1543004477
andrewrk
the c"" makes it an asciiz string (null terminated).

1543004499
ducktype
very good super useful and to the point

1543004500
ducktype
ty

1543004548
andrewrk
ducktype, I'm happy to help. If you want to read more about how strings such as this might change in the future of zig, see this issue:

1543004553
ducktype
i'm trying some unshare/mount overlay/mount bind container like in zig

1543004587
ducktype
i've found that issue page but i've not uderstood all correctly

1543004625
ducktype
i've switched to zig because golang can't call unshare()

1543004645
ducktype
unshare needs that the calling process is single threaded

1543004671
andrewrk
I see

1543004719
ducktype
zig is cool i like the crosscompile just-works

1543004721
ducktype
so cool

1543004743
andrewrk
thank you

1543004750
andrewrk
it is still immature but I am working hard on changing that

1543004776
ducktype
i see some similarity with jay

1543004854
ducktype


1543004902
ducktype


1543004926
ducktype
but i don't think Jonathan Blow have released it already

1543006381
hryx
some extremely WIP stage1-generated docs:

1543006389
hryx


1543006392
hryx


1543006395
hryx


1543006406
hryx
still mostly a prototype

1543006411
andrewrk
hryx, neat!

1543006426
hryx


1543006447
andrewrk
what's going to be really exciting to me, is when each function lists all the possible errors, with the doc comments for the errors intact

1543006469
hryx
ugh, so awesommmmme

1543006479
andrewrk
this is already exciting though, nice demo

1543006491
hryx
thanks a bunch!

1543006505
hryx
next is to get imports resolved and populate the file tree on the left

1543006569
andrewrk
btw it's ok to use javascript in the generated docs (no dependencies / http requests though), to implement, e.g. a search feature

1543006652
hryx
great, I'll keep that in mind

1543008821
andrewrk
hryx, your html page ends with </div</body>

1543009393
hryx
good catch

1543009423
hryx
it might be nice to take advantage of some kind of templating like there is in the existing zig manual generator

1543009445
hryx
for now it has a lot of ugly buf_append_str(buf, "<span>") and so on

1543010908
hryx
Are there only ever three packages? root (the actual project), builtin, and std?

1543010997
hryx
trying to grasp the difference between "package" and "import" as far as the compiler is concerned

1543011190
andrewrk
hryx, a package is a mapping of a name to an import. an import alias, if you will

1543011201
andrewrk
to make "std" map to std/index.zig we create a package

1543011260
andrewrk
a package is a tuple: (pkg_name, path_to_main_import_file)

1543011369
hryx
Ahh, I see. What confused me a bit is that PackageTableEntry just contains a map of names to more PackageTableEntrys

1543011870
benjikun
hryx: doc stuff looks great so far :)

1543011910
andrewrk
hryx, ah, that's because every source file exists within a package, so we know which aliases are available to import

1543011950
andrewrk
consider, if you are library A, and you @import("B"). now someone uses your library, so they @import("A") but they don't have "B" in scope

1543011979
andrewrk
in fact for them "B" might be aliased to a completely different dependency than it is for you!

1543012059
hryx
ahh gotcha

1543012064
hryx
thanks benjikun!

1543012140
hryx
Basically where I am now the root source is parsed, and I think (?) the IR passes should have resolved the imports, so I'm trying to iterate the imports that were found

1543012188
hryx
I've been focusing my attention on the CodeGen->root_import

1543012212
hryx
or CodeGen->import_table

1543012336
andrewrk
hryx, there's one concept you should be aware of, even if you don't handle it right now. I'm looking for the issue

1543012400
andrewrk
hmm I don't think I typed it up

1543012417
andrewrk
in summary: when building we currently assume one target, one build mode, etc

1543012427
andrewrk
however code exists for multiple targets, multiple build modes

1543012510
andrewrk
when building documentation, and also for some kinds of compile errors, it would make sense to do a "multibuild" that does analysis for a complete set of supported targets and build options

1543012543
andrewrk
e.g. if (builtin.os == builtin.Os.windows) foo() else bar()

1543012552
hryx
Totally, that's a good idea. You can see I totally dodged this situation for now here:

1543012554
andrewrk
we would actually explore both branches of this even though it's a static if

1543012577
andrewrk
yeah, I think that's a good approach for now. this is going to be a very difficult and interesting problem to solve

1543012597
hryx
agreed :>

1543012608
andrewrk
I'm guessing it will come down to providing a "set" of build options to build at the same time

1543012726
hryx
a possible minimum viable approach could be to render an entirely separate copy of docs for a specific platform/triple

1543012731
andrewrk
agreed

1543012736
andrewrk
I think that's the first step

1543012779
andrewrk
I think this approach will be harmonious with the idea of generating docs for your entire project at once including all dependencies

1543012805
andrewrk
rather than looking at docs on a website, you'll be looking at the docs you specifically generate, because they will be for the target, build mode, threading model, build options, etc that you specifically selected

1543012856
andrewrk
I like the idea of searchable docs that are comprehensive to one's entire project, including dependencies

1543012858
hryx
that is a really cool vision

1543012870
andrewrk
I see it as not only docs but a code exploration tool

1543012890
hryx
yeah!

1543012904
andrewrk
example code, with clickable function names, etc

1543012922
hryx
One thing I was thinking about was linking to the tests in these docs

1543012927
hryx
examples for free

1543012934
andrewrk
yeah that's nice

1543013008
andrewrk
I haven't looked at your implementation yet, but another thing to consider, is you could have stage1 output some kind of format, and then build from source zig code that parses it and does the rest of the work, and then execute that as a child process, in the same way zig test and zig build work

1543013027
andrewrk
this would potentially save us from having to redo a lot of stuff later in stage2, as well as avoid implementing things like html templating in c++

1543013072
andrewrk
the less C++ code we have to maintain, the better

1543013088
andrewrk
and it's ok to pay some performance cost for it in stage1; we'll reclaim it when self hosted is done

1543013096
hryx
that's actually a great idea, that saves from having to write all this uggo HTML in C++

1543013122
andrewrk
great, yeah look at std/special/test_runner.zig and std/special/build_runner.zig, and the corresponding code in main.cpp

1543013139
hryx
my implementation so far is a bit jenky as I'm still getting to know the code base, but those examples you saw were in fact generated by c++ I promise :>

1543013146
hryx
I'll get it to a reasonable point and push it to a fork

1543013149
hryx
so ye can see it

1543013154
andrewrk
fun :)

1543014880
benjikun
How can I force @bytesToSlice() to use big endian reading

1543014897
andrewrk
benjikun, have you seen the std.mem.readInt* functions?

1543014908
benjikun
I haven't, I'll take a look :)

1543015010
benjikun
this is perfect ty

