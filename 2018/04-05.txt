1522895649
Braedon
I may be wrong but I felt that you could run functions on generic objects

1522895665
Braedon
Like; fn Foo(T: type, T obj) { obj.RunX() }?

1522895766
andrewrk
this is duck typing

1522895775
andrewrk
if T has a RunX method then it will compile

1522895925
Braedon
Yeh that's what I thought

1522895955
Braedon
Assertion failed: (payload_type->di_type), function get_error_union_type

1522895985
Braedon
Which probably means that I'm passing some error union somewhere and not handling it

1522896019
Braedon
Oh never mind I did !type in my main generic function

1522896414
andrewrk
if you get an assertion failure, that's a compiler bug

1522896931
Braedon
Nah it was me

1522896940
Braedon
The compiler should have given a better warning to be fair

1522896953
Braedon
But it was me sticking an '!' onto a type that it didn't belong too

1522896964
Braedon
Almost done locale basics

1522928614
Braedon
Do I have to cast enums to use bitwise?

1522928715
Hejsil
Yep

1522929879
Hejsil
Braedon, what do you need the bitwise operators on enums for?

1522929905
MajorLag
it's a common pattern for flags

1522929966
Hejsil
You can do this instead:

1522929991
Hejsil
This struct is 1 byte

1522930078
MajorLag
but can you do this with that?: `var window = sdl.CreateWindow("test", 0, 0, 640, 480, sdl.SDL_WINDOW_FULLSCREEN | sdl.SDL_WINDOW_OPENGL); ?

1522930211
MajorLag
with a packed struct of bools, you'd either have to initialize the entire thing: Id{flag0 = false, flag1 = false, ...}, or create an intance undefined, memset it to 0, then set the flags you want to true...

1522930320
MajorLag
however, you can do this easily enough:

1522930657
Hejsil
You can get simular behavior like this:

1522930669
Hejsil
It is more verbose though

1522930683
MajorLag
it's a lot of boiler plate

1522930712
Hejsil
It's also less error prone :)

1522930720
MajorLag
that a set of pub consts?

1522930765
Hejsil
takeFlags(5) is allowed if you just use numbers

1522930847
Hejsil
Not saying using pub const fields is wrong. It has the nice bitwise or thing

1522930881
MajorLag
your way can't do this: var to_check = Flag1 | Flag2 | Flag5; var chk = flags & to_chk; if(chk == to_chk)....

1522930952
Braedon
Mhmm interesting I like that

1522930961
Hejsil
You could define a function that does this

1522930973
MajorLag
it's a common enough pattern that I wonder if zig shouldn't have an enum type for this behavior. Then again, it's easy enough to do with an empty struct, so it is kind of unneeded.

1522930983
Braedon
Again yeh but maybe?

1522930984
Braedon
Also I found a bit of validation haha, I found a comment that says '// TODO ASCII is wrong, we actually need full unicode support to compare paths.'

1522931003
MajorLag
though typing in the numbers by hand instead of an autoincrement is a bit tedious, but also kinda necessary if you intend to expose it.

1522931005
Braedon
And I just finished my string invaraiant way to split strings

1522931023
Braedon
It kinda is though something like iota could be useful?

1522931090
MajorLag
iota is weird. I think it should act like enum and auto increment except where specified if we're going to do that.

1522931120
Braedon
Yeh something like it but not exactly it cause its weird as hell

1522931170
MajorLag
Braedon: In windows, even unicode is wrong. Windows file paths can encode surrogate halves in UTF-16.

1522931183
Braedon
Yep mine does utf16 :)

1522931189
Braedon
And utf22

1522931192
Braedon
And every variant you want

1522931209
Braedon
Just need to give it a way to view and iterate through them and its happy

1522931252
MajorLag
right, but what I'm saying is, if you follow the unicode standard, windows file paths aren't necessarily valid unicode because it explicitly forbids encoding surrogate halves.

1522931267
Braedon
Yah that's what I'm saying

1522931267
MajorLag
*unpaired

1522931275
Braedon
You call it like this; `var it = split(unicode.Utf8View, unicode.Utf8Iterator, []const u8).init("Cat, Mat, Bat", ",");` and so for Utf16 you would just create a view and iterator for Utf16 with those special rules

1522931291
MajorLag
ah, I see.

1522931316
Braedon
Now commonly there are shortcuts to do stuff like `stringUtils.asciiSplit_it.init("Cat, Mat, Bat", ",")`

1522931317
MajorLag
You don't care about unicode, just as long as an iterator returns codepoints

1522931321
Braedon
Yep

1522931324
Braedon
Or not even codepoints

1522931326
Braedon
It could return anything

1522931364
Braedon
All you need is a way to slice your view, compare views, create iterators from views, and iterate through that, as well as reset iterator

1522931367
Braedon
Then you can do 'anything'

1522931396
Braedon
This will work for EVERY 'memory' function, they said they wanted something that could work with anything and I knew how annoying Windows is so i made sure it was done right

1522937507
MajorLag
Hejsil, the bitflags thing with an empty struct could be made safe, if there were a way to mark a type alias such that it wouldn't implicitly cast to what it is aliased to and would be considered a new type instead. Something like: `const MyFlag = @noImplicitCast(u8); const MySet = struct { pub const FLAG0 = MyFlag(0b00000001); pub const FLAG0 = MyFlag(0b00000010); ... };` the the compiler would throw an error when

1522937507
MajorLag
1);` instead of `funcTakingFlags(MySet.FLAG0);`

1522938137
MajorLag
Actually andrewrk, what do you think about that in general? Being able to 'divorce' a type alias from the type it aliases so that you have to explicit cast between them?

1522938727
andrewrk
MajorLag, I think you can accomplish that by putting a type in a struct

1522938813
alexnask
Hi

1522938825
andrewrk
hi

1522938854
alexnask
Sorry for flooding the issues tracker :P

1522938862
alexnask
I'm just testing things out

1522938874
alexnask
Is there any way to check if the Child type of a Pointer type is const?

1522938914
andrewrk
I don't think so but there should be

1522938934
andrewrk
see

1522939020
alexnask
I've looked at this issue, in fact I think I will be trying to implement a subset of that proposal

1522939049
alexnask
My motivation is e.g. building a function that gets the i'th field of any struct.

1522939074
alexnask
It should return a const pointer if the reference passed in is const

1522939179
andrewrk
related, there is a problem with @fieldParentPtr where it returns a ptr with the same const-ness as the field ptr, but that's incorrect. the two are unrelated. so you would have to provide the const-ness as an argument to @fieldParentPtr for it to be correct

1522939340
alexnask
I guess what I'm asking is wether the const-ness of a type part of the type itself, or an attribute of the pointer type?

1522939361
alexnask
For example, is "const i32" a type?

1522939468
andrewrk
it's an attribute of the pointer type

1522939597
andrewrk
alexnask, it's planned to add @field which does field access syntax but with a comptime []const u8 field name instead of an identifier

1522939638
alexnask
Ah, cool, I'll go ahead and close that issue then

1522941079
MajorLag
andrewrk, I suppose so, it's a hairier to set up for the usecase I mentioned though. I suppose it is preferable to adding a new builtin function.

1522941104
andrewrk
this is for the SDL flags use case, right?

1522941731
MajorLag
well not just SDL, bitflags in general.

1522942462
andrewrk
for bit flags in general, what's the downside of Hejsil's suggestion?

1522942973
MajorLag
You can't do bitwise operations on them: var to_check = Flag1 | Flag2 | Flag5; var chk = flags & to_chk; if(chk == to_chk)....

1522942995
MajorLag
so passing a set of flags into a function becomes a chore too

1522943162
andrewrk
I feel like normal u32 or whatever is pretty ok for this use case

1522943190
andrewrk
It seems like bugs with flags like this are rare

1522943838
hinst
need to terminate statements with ; character ?

1522943890
andrewrk
hinst, correct

1522945097
MajorLag
yeah, I generally agree andrewrk, I was just considering how one would make it strict if one were so inclined.

1522946531
andrewrk
MajorLag, that's fair. I think we could come up with a use-case-specific solution, but then we would want to weigh that against introducing another way to do things and adding complexity to the language

1522949331
MajorLag
andrewrk: I've been testing a possible saftey improvement to the interface pattern, but I can't seem to get it to break in a case where it should... I might just be missing something stupid here:

1522950010
alexnask
@MajorLag it fails for me fwiw

1522950260
MajorLag
odd. I even tried throwing extra garbage on the stack before using he interface, and using @noInlineCall to get it. I'll try it in linux

1522950291
alexnask
I tried on WSL (linux on windows)

1522950310
alexnask
So I assume it will work on linux, odd one for sure

1522950438
MajorLag
yeah, it breaks (that is, breaks in the intended way) on linux. so what magic makes it work on win32 I wonder?

1522950454
alexnask
let me try on win64 too

1522950484
alexnask
perhaps LLVM removed the extra variables you initialized and it is a case of the interface still being on the bottom of the stack or smth?

1522950574
alexnask
yup, it works on win64 for me too... hmmm

1522950576
MajorLag
that's what I thought, but I threw extra variables on the stack intentionally and then warn'ed them out to be sure they were being used. When that didn't work I made one of the variables a []u32{0}**1024, still worked.

1522950606
MajorLag
Is windows doing escape analysis and allocation behind my back?

1522950676
alexnask
Nah that would be too much magic I think :P

1522950718
alexnask
I assume returning the interface by value from getInterfaceForThing breaks?

1522950818
alexnask
seems so, so the interface stays in the stack for some reason

1522953161
andrewrk
MajorLag, type expressions are implicitly comptime

1522953281
andrewrk
MajorLag, perhaps this can be incorporated into the language. E.g. if you use @fieldParentPtr on a given struct (and the struct is not extern or packed) then it will add a hidden "sig" field and do this check

1522953583
MajorLag
that's what I was thinking. there are probably some cases where it will still break (trying to read from deallocated memory comes to mind).

1522953652
MajorLag
also, whatever the hell is going on in win32 here.

1522953782
raytracer[m]
Hey there. Can somebody give me any tipps when it comes to analyzing the difference in behavior in debug vs release mode? I have ported a small C++ program (

1522953865
andrewrk
hi raytracer[m]

1522953876
andrewrk
that's a high priority compiler bug you found there

1522954162
raytracer[m]
Ah should I open a Github Issue or is it an already known bug?

1522954184
andrewrk
I would appreciate a github issue

1522954397
andrewrk
raytracer[m], oh, one thing to consider

1522954399
andrewrk


1522954499
MajorLag
...so related note: that thing that should fail but doesn't in windows? breaks in release-fast and release-safe, just not in debug.

1522954512
MajorLag
or tests.

1522954925
raytracer[m]
Thanks for the tip. I already tried to set the Float Mode to strict mode. I will try come up with a minimal working example and open an Issue.

1522954951
andrewrk
thanks. I'll have a look right away

1522957860
andrewrk
raytracer[m], when I run smallpt in valgrind I see a bunch of invalid reads

1522957864
andrewrk
even in debug mode

1522957875
andrewrk
for some reason valgrind is not picking up the debug info though

1522958462
andrewrk
raytracer[m], also I recommend to use BufferdOutStream for your use case

1522958763
raytracer[m]
Hmm interesting, thank you for your effort. I will take a further look at it tomorrow, precompiled valgrind does not seem to be available for Mac OS High Sierra and compiling it from source currently fails on my system.

1522958763
raytracer[m]
Btw.

1522958839
andrewrk
raytracer[m], you're linking against libc for malloc - you can also use printf from C

1522958895
andrewrk
providing a full standard library competing with libc is a big effort and is not complete yet. apologies for the incompleteness (specifically with regards to floating point printing)

1522958904
raytracer[m]
Oh you are right, I will try that

1522959088
andrewrk
I can reproduce the missing debug symbols in valgrind with just clang

1522959399
raytracer[m]
Oh no problem at all @ standard library. Porting smallpt to zig was just a small weekend project, unfortunately the original authors intent was to produce a C++ version in less than 100 lines so the readability is less than ideal. So the code has probably to go through quite a few iterations before it becomes readable (currently it is basically an almost literal translation)

1522964065
GitHub49
[zig] bnoordhuis opened pull request #897: fix use-after-free in BufMap.set() (master...fix879)

1522964734
andrewrk
raytracer[m], I got valgrind debug info working. here's a sample output on smallpt:

1522966565
raytracer[m]
Thank you very much, now I know where to look. I will probably continue to work on it on the weekend, good night for now (currently midnight here).

1522967579
GitHub119
[zig] bnoordhuis opened pull request #899: fix llvm assert on version string with git sha (master...fix898)

1522968925
GitHub92
[zig] andrewrk closed pull request #899: fix llvm assert on version string with git sha (master...fix898)

1522968927
GitHub198
[zig] andrewrk pushed 2 new commits to master:

1522968928
GitHub198
zig/master 873641c Andrew Kelley: Merge pull request #899 from bnoordhuis/fix898...

1522968928
GitHub198
zig/master 8980281 Ben Noordhuis: fix llvm assert on version string with git sha...

