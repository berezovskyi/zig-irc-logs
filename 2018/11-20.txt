1542672546
daurnimator
Misc thing: I use sublimetext. commenting doesn't work in the zig syntax

1542672554
daurnimator
normally I press ctrl+/ to comment out a line

1542672575
daurnimator
I guess I should file an issue

1542672592
daurnimator
oh, someone already has:

1542674550
andrewrk
benjikun,

1542674553
andrewrk
that took a long time

1542674686
benjikun
I started the 8ch /tech/ thread haha

1542674706
benjikun
they don't like references to blogs

1542674763
benjikun
sadly

1542675035
benjikun
added llvm weekly reference

1542675171
benjikun
It's annoying because there aren't that many independent non-blogish news websites that I know of for things like zig

1542675227
benjikun
It'd be cool if we could get zig mentioned in something as broadly accepted as wired

1542675234
daurnimator
there's not for any programming languages

1542675235
benjikun
perhaps in a post like this:

1542675323
daurnimator
Thinking about Lua: the main citable sources are academic papers and conference talks.

1542675343
daurnimator
which we have enough of due to Lua being maintained by a professor....

1542675377
benjikun
yeah hmm

1542675465
daurnimator
sounds like we need a zig-conf

1542675470
benjikun
The conference-y talk we have is the one Andrew did at recurse center, I've already got that one on there

1542675514
daurnimator
Someone should submit a talk to

1542675524
daurnimator
> The deadline for submission is November 25th.

1542675529
daurnimator
sooner than I expected!

1542675627
andrewrk
I've never been to FOSDEM and I'd love to go

1542675675
benjikun
same

1542675691
benjikun
I've never really been to any big conference tbh

1542675784
daurnimator
It always seems to end up clashing with other things for me :(

1542675822
benjikun
The nim founder got a nim book published with o'reilly very fast somehow

1542675824
daurnimator
I've got to be in the sf bay area that week; so I probably won't make it... again

1542675837
daurnimator
benjikun: o'reily

1542675845
benjikun
didn't know that

1542675857
daurnimator
benjikun: if you wanted to write the book, I'm sure we could get o'reily to publish it

1542675882
benjikun
They also have a book published with manning

1542675939
benjikun
I suppose we can't really write a book yet, not stable enough

1542676018
daurnimator
that hasn't stopped languages before

1542676020
daurnimator
(though it should :p )

1542676027
benjikun
true lol

1542676579
benjikun


1542676583
benjikun
This looks pretty dang good

1542676615
daurnimator
dat hockey stick, what all the VCs look for :)

1542677417
benjikun
I look for it on my robinhood account

1542728529
diltsman
I have a Zig symbol in a separate .zig file from my main/initial file.  How do I reference that symbol?

1542729198
presiden
const symbolname = @import("path/to/file.zig").symbolname

1542729845
diltsman
const pio = @import("pio");  pio.zig the file, and it is in the same directory as the main file.

1542729883
andrewrk
diltsman, are you trying to set up an alias so that you can @import("pio") ?

1542729897
andrewrk
zig build system, or command line invocation?

1542730429
diltsman
zig build system.  I just want to create an instance of a struct in pio.zig.

1542730461
andrewrk
const S = @import("pio.zig").S;  var instance = S{};

1542730483
andrewrk
where "pio.zig" is a file path, with forward slashes, relative to the current file

1542730503
andrewrk
if you want to set up an alias you can do this:

1542735704
diltsman
I don't suppose that there is a way to specify that a packed struct (bit field) should write a word (32-bits) at a time, si there?

1542735830
andrewrk
diltsman, you could make all the 32 bits a single field

1542735876
diltsman
Would that generate 32-bit reads/writes if one of the fields is 8 bits and byte aligned?

1542735908
andrewrk
yes, it's guaranteed to use minimal number of bits possible given the byte alignment

1542735931
andrewrk
so if your 32 bit field is byte-aligned, then it will generate 32-bit reads/writes

1542736135
andrewrk
diltsman,

1542736154
andrewrk
I pasted the LLVM IR at the bottom, you can see the load/store is 32 bit and align(1)

1542736218
diltsman
I see that.  But reads/writes tothe 4-bit fields wouldn't generate a 32-bit write...

1542736270
diltsman
Dealing with memory mapped I/O on ARM has lots of bitfields that must be read/written in 32-bit aligned chunks.

1542736450
andrewrk
I think I'm going to run into this problem soon, I picked up my arm OS project

1542736479
andrewrk
I don't understand yet though, why would you expect the u4 fields to have anything to do with 32 bits? that would overlap with the next fieldf

1542736510
andrewrk
I think I need to see some code examples to understand the use case better

1542736563
andrewrk
in short though, if you need writes of minimum 32 bits then your fields should be minimum 32 bits.

1542737398
diltsman
andrewrk, here is an example struct (total is 32 bits) that would need to be read/written all at once:

1542737466
andrewrk
diltsman, can you read it into a temporary variable, edit the fields, and then write it back to memory?

1542737492
andrewrk
var tmp = volatile_ptr.*; tmp.lastxfr = 1; volatile_ptr.* = tmp;

1542737555
diltsman
Yes, that could be done.  I wonder how the optimizer would handle that.  As long as field accesses are done through functions rather than the fields directly it wouldn't obfuscate use too much.

1542737706
andrewrk


1542737738
andrewrk
how does that look?

1542737859
andrewrk
the volatile memcpy call in debug mode is unfortunate. we could potentially detect this in zig and emit integer loads/stores instead of memcpy

1542737937
andrewrk
hmm I also think you need _unused: u8 at the end

1542738212
diltsman
My bad.  The td field should be u16.

1542738489
diltsman
Can you compile that for 32-bit ARM?

1542738731
andrewrk
diltsman,

1542738833
andrewrk
oh good there is actually no memcpy call in debug mode. it got lowered to normal loads/stores

1542738889
diltsman
I didn't realize that Zig was on Compiler Explorer.  Matt Godbolt is a great guy and a good speaker.

1542739189
diltsman
andrewrk: If I am reading that right, it is loading the upper 8 bits, then the middle 16, then the lower 8 from the struct.  Not a 32-bit load.

1542739390
diltsman
It looks like in debug it generates a 32-bit load, but in release it generates byte and half-word loads.

1542740643
andrewrk
diltsman, I think the volatile didn't get correctly propagated. let me try something.

1542741155
andrewrk
I found a problem, working on a solution

1542742017
andrewrk
diltsman,

1542742025
andrewrk
it's not going to be a quick fix, but I'll work on this today

1542742569
MajorLag
Looks like you could also bitcast it back and forth.

1542742716
andrewrk
that's a good workaround

1542744680
diltsman
MajorLag, I'm trying to figure out why it generates two loads and a store for the bitCast.  It should be able to load, modify in register, and store.

1542744955
andrewrk
diltsman, it's because zig emits a memcpy intrinsic to llvm and does not mark it volatile. so llvm is free to lower it in any way

1542744964
andrewrk
I'm working on it now

1542744974
andrewrk
I described the problem in the issue #1761

1542745016
diltsman
andrewrk: I was refering to his bitcast workaround.

1542745026
andrewrk
ah, my mistake

1542745055
diltsman
It loads two values into r1, then stores r1 on the stack.

1542745073
diltsman
Never mind.  It is an indirection.  I see the double load.

1542745080
andrewrk
this is solved in my copy elision branch

1542745085
andrewrk
which is not merge ready yet

1542745248
MajorLag
andrewrk, if I have `fn foo() T { var x: T = undefined; //do stuff with x; return x; }` would that be elided in the branch code? Or does this require something like @returnValue()?

1542745328
andrewrk
MajorLag, that's the "part 2" of copy elision that my current branch does not solve

1542745375
andrewrk
so a second proposal must be accepted to solve this use case. and this "part 2" thing is much, much easier than part 1

1542745503
andrewrk
an interesting component of that is going ot be that in the case of a function returning ?T, E!T, or E!?T,  `@returnValue()` would refer to the *T only

1542745621
andrewrk
I haven't figured out how to introduce this concept into the language in a clear way

1542745876
andrewrk
hmm I just thought of one though. I'm going to propose it in an issue

1542746592
MajorLag
ok, that'll make what I'm currently working on a bit less convoluted eventually. On a different subject, there isn't a way to set the active tag of a union other than to assign it a new value right? And the only way you can do that is `union = T{.Field = x, }`, right? I'm writing code that serializes and deserializes unions, it writes the active tag out, then the value. On read it reads in the tag to know what valu

1542746593
MajorLag
can't see a way to assign it. `@field(union, field_name) = field_val;` throws an invlad union tag access assert.

1542746598
MajorLag
Any ideas?

1542746776
MajorLag
I can't do `union.* = UnionType{.field_name = field_value};` because I have no way of expressing that since `field_name` is a `[]const u8`.

1542746811
andrewrk
MajorLag, that's right

1542746815
andrewrk
did your message get cut off?

1542746822
MajorLag
possibly.

1542746823
andrewrk
" know what valu"

1542746858
andrewrk
oh I think I might know what you're talking about. I opened an issue for this recently.

1542746878
MajorLag
"know what value to expect. Problem is, I can't see a way to assign it. `@field(union, field_name) = field_val;` throws an invlad union tag access assert."

1542746885
andrewrk
is it this?

1542746899
MajorLag
yes that's exactly the issue

1542746966
MajorLag
Only workaround I can think of is to manually access the bytes of the tag and change them.

1542746977
andrewrk
does the proposed solution look ok to you?

1542747020
MajorLag
yeah, that'd work just fine.

1542747034
andrewrk
ok I accepted it so it's now planned

1542747193
andrewrk
this might be one of those "easy" issues that people were asking for

1542747267
MajorLag
well... if I could change one thing: it'd be nice to do `@unionInit(Type, name, undefined);` which currenlty wouldn't work I think. Reasoning is that if the union is value is, say, a big struct then I want the serialization code to fill in the values in-place instead of creating a new instance and copying it in. Copy elision mike make that unnecessary anyway eventually.

1542747293
andrewrk
it would work with undefined, just like UnionName { .FieldName = undefined }

1542747303
MajorLag
oh, then I'm totally cool with it.

1542747311
andrewrk
it would be semantically equivalent to that syntax, except with a comptime string for FieldName rather than a token

1542747353
andrewrk
compiler builtins are actually modeled as semantic constructs rather than function calls

1542747424
MajorLag
yeah that makes sense.

1542747437
andrewrk
for untagged unions, `x = UnionName { .FieldName = undefined }` is a no-op in release mode. only in debug mode does it do anything, which is change the secret debug tag

1542747523
MajorLag
the one that differentiates between a union that hasn't been assigned anything yet and one that has?

1542747601
MajorLag
fortunately, there's no sane way for me to serialize untagged unions in the general case, so I just don't. The caller can implement their own serialization function for the type the same way we can implement custom formatters.

1542747641
MajorLag
fortunate in that I don't have to deal with it I mean.

1542747675
andrewrk
not sure I understand your question - in debug mode, unions with automatic container layout (non extern non packed) actually have a secret tag, and zig always knows which field is active. I don't think I made it support a meta "undefined" state, but that would be a good idea.

1542747742
andrewrk
you wouldn't want to use this secret tag (which you could only access with pointer hacks) for serialization because it wouldn't work in release modes where the secret tag is omitted

1542748012
MajorLag
right, I wouldn't plan to support it because the tag's existence is invisible to the user anyway. I could have sworn an issue involving un-initialized unions having a seemingly valid tag value came up.

1542748098
MajorLag
905?

1542748495
andrewrk
ah, yes, that's what I was referring to

1542749091
diltsman
Is there a way to specify a function parameter as volatile?

1542749223
andrewrk
you mean a non-pointer parameter?

1542749244
andrewrk
how would that work?

1542749390
MajorLag
andrewrk: in my testing, it looks like the secret tag sticks around in release-fast, and also is still present in all modes if you assign a tag and that tag is > u32 (though it is always set to 0).

1542749435
diltsman
andrewrk, I'm used to how C uses volatile.  What I want, is a self parameter to be volatile.

1542749463
andrewrk
how about:  self: *volatile T

1542749492
andrewrk
MajorLag, if that's true that's a bug

1542749521
MajorLag
I'll write it up. It is easy to show.

1542749526
andrewrk
thanks

1542749532
diltsman
Thanks, that works for me.

1542749986
errpr
I'm having a problem. My program never halts if I link to window's xinput1_4 DLL

1542750001
andrewrk
that's interesting

1542750019
benjikun
weird

1542750057
errpr


1542750059
errpr
this is my code

1542750132
andrewrk
errpr, are you broadcasting coding videos?

1542750148
errpr
no

1542750264
diltsman
I compile this: pub const PIO = packed struct{var mem: [82]u32;};var pioa = PIO{.mem=undefined};

1542750275
diltsman
I get this error: error: no member named 'mem' in struct 'PIO'

1542750351
andrewrk
errpr, your types look like they might be worth double checking. For example, you could `const win = @import("std").os.windows;` and then use `win.HINSTANCE` `win.DWORD` etc

1542750388
andrewrk
hmm they look ok though

1542750390
errpr
I ripped the types from MajorLag

1542750427
andrewrk
is this a problem with the direct x API? does an equivalent C program work?

1542750442
errpr
checking that now

1542750487
andrewrk
is this related to XInputEnable?

1542750506
errpr
XInputEnable doesn't change it

1542750518
errpr
I tried setting it to true and false

1542750558
andrewrk
diltsman, `var` is making `mem` a global variable in the namespace of your struct rather than a field

1542750583
andrewrk
that actually should be a compile error that says "variables must be initialized"

1542750632
andrewrk
packed struct{mem: [82]u32,}

1542750662
andrewrk
errpr, oh, maybe this has something to do with DLL destructors

1542750703
diltsman
That makes sense.  That is gonna catch me a few times before I get it down.

1542750781
MajorLag
andrewrk: nevermind the second part of that debug tag issue, further testing reveals it was just alignment padding where I didn't expect it.

1542750818
andrewrk
hmm never mind there is no such thing as a DLL destructor

1542751452
errpr
the C version exits properly

1542751550
andrewrk
errpr, I have one more idea to try. add --verbose-link to your zig build command, and then repeat the test using link.exe (msvc's linker). I expect that to have the same behavior.

1542751582
andrewrk
Then replace the xinput1_4.lib from the linker line with the path on your system to xinput1_4.lib provided by microsoft

1542751591
andrewrk
see if that changes anything

1542751727
andrewrk
another thing to try is the C object linked with zig using zig's generated .lib file

1542751738
andrewrk
I can also try to reproduce this on my system

1542751844
errpr
hmm my link.exe says its GNU

1542751943
andrewrk
zig is supposed to generate msvc compatible objects on windows

1542751952
errpr
okay swapping that out with MSVC link.exe fixed it

1542751972
andrewrk
even with zig-generated xinput1_4.lib ?

1542751998
errpr
yeah

1542752026
andrewrk
interesting. that points toward an LLD bug, which is nice because the LLD team is actually quite active and responsive

1542752069
andrewrk
if we can put together a high quality bug report and report it upstream, I think it should be fixed within 1 release cycle, which means zig 0.4.0 (with llvm/clang/lld 8.0.0) would have the fix

1542752118
andrewrk
if we can reproduce it with clang+lld, that would bring some quick attention

1542752444
errpr
I don't understand compilers :)

1542752809
benjikun
errpr: What are you making?

1542752837
andrewrk
errpr,  thanks for the report. I'll take it from here.

1542752862
errpr
benjikun I'm following handmade hero, a video series on making games with no libraries

1542752912
andrewrk
ahhh

1542752917
benjikun
That's nice

1542755990
j`ey
where does the backtrace code live

1542755992
j`ey
?

1542756015
j`ey
(or even the default panic handler)

1542756140
j`ey
found it: std/special/panic.zig

1542756194
andrewrk
j`ey, that's the default panic handler. you can override it by putting your own `pub fn panic(...` function in your root source file

1542756296
j`ey
interested in 'dumpCurrentStackTrace(first_trace_addr)' :)

1542756362
benjikun
std/debug/index.zig

1542756373
benjikun
if you hadn't already found it

1542756380
andrewrk
j`ey, be warned, I'm pretty sure that code leaks memory. there's a few TODO items to make it more friendly to calling sometime other than when you're about to crash

1542756387
j`ey
benjikun: thanks, I had

1542756412
j`ey
remembered I had a local copy of te zig code, so could grep/vim it :)

1542756414
andrewrk
although if you're just debugging something, it should be fine

1542756427
j`ey
andrewrk: just interested in it

1542756812
j`ey
fp = @intToPtr(*const usize, fp).*

1542756817
j`ey
what's the .* here?

1542756829
benjikun
dereference

1542756860
j`ey
why the weird syntax?

1542756869
benjikun
I like it

1542756896
j`ey
oh, it's the normal deref syntax for zig?

1542756916
andrewrk
j`ey, there's a good explanation, which I documented here:

1542756968
j`ey
thanks

1542757009
j`ey
didnt even know "var a: type = i32;" was a thing in zig

1542757038
andrewrk
it's required to use `const` unless inside a comptime scope

1542757245
j`ey
what do you mean by "pointer operator"?

1542757292
j`ey
oh, just saying a type is a pointer.. I think

1542757293
andrewrk
the operator that takes a type, and returns a type which is a pointer to it

1542757330
andrewrk
in zig `*i32` is actually a prefix operator, operating on an expression, which is i32, and then the result of the expression is the type *i32

1542758384
j`ey
can you remind me how to set debug/opts on godbolt?

