1516839631
itsMontoya
"If you never initialize a heap allocator, then you can be sure your program is never going to cause heap allocations." :thumbsup:

1516839675
hoppetosse
I just arrived, but even with no context I agree

1516839815
itsMontoya
"llvm/ADT/Hashing.h: No such file or directory

1516839842
itsMontoya
I'm on clang 5.0.1

1516840940
itsMontoya
Has anyone encountered that issue building master?

1516840966
itsMontoya
Oh amazing, someone wrote a zig extension for VSCode..

1516841067
itsMontoya
andrewrk: Any ideas about my build issue?

1516841294
itsMontoya
Oh! cmake has an issue

1516841295
itsMontoya
Can't find llvm

1516862802
GitHub124
[zig] andrewrk pushed 1 new commit to master:

1516862803
GitHub124
zig/master e5bc587 Andrew Kelley: rename "debug safety" to "runtime safety"...

1516869342
davr0s
anynoe around?

1516870949
andrewrk
hi davr0s

1516871076
lqd
andrewrk: are you planning on doing coroutines using llvm's coro support ?

1516871598
GitHub91
[zig] andrewrk opened pull request #720: syntax: functions require return type. remove `->` (master...require-return-type)

1516892622
GitHub73
[zig] andrewrk closed pull request #720: syntax: functions require return type. remove `->` (master...require-return-type)

1516892623
GitHub127
zig/master f767088 Andrew Kelley: Merge pull request #720 from zig-lang/require-return-type...

1516892623
GitHub127
[zig] andrewrk pushed 1 new commit to master:

1516893521
davr0s
anyone around?

1516895499
andrewrk
hi davr0s

1516895509
andrewrk
lqd, yes I am planning on experimenting with that soon

1516895777
lqd
oh cool! I’ve heard complaints that they allocate too much, so it’ll be an interesting exploration for sure

1516895895
andrewrk
lqd, I still don't fully understand how it's supposed to work

1516895915
andrewrk
there's a builtin for determining how much the coro needs to allocate, and then you pass the memory to another coro builtin

1516895925
andrewrk
but it's not clear to me how it can know how much stack space it would need

1516896516
lqd
yeah, + it’s not even stable yet IIRC (maybe for llvm 7)

1516896650
andrewrk
my plan is to expose the llvm coro primitives somewhat directly, experiment with these building blocks, and then do another design iteration

1516896701
dimenus
hi all

1516896708
andrewrk
welcome back dimenus :)

1516896728
dimenus
you've been busy I see

1516896732
andrewrk
indeed

1516896971
dimenus
andrewrk, did you experiment with the LLVM C API at all or did you always gravitate to the C++ one?

1516897030
andrewrk
we use the C API for codegen as much as possible, only supplementing it where the C API is deficient

1516897038
andrewrk
for debug info there is only a C++ API

1516897056
andrewrk
and for clang I tried the C API but it was woefully incomplete

1516897101
dimenus
that makes sense

1516897135
andrewrk
the plan for self hosting is to expose our own C API for only the C++ API we need

1516897148
andrewrk
then both the c++ compiler and the self hosted compiler will use the C API

1516897471
dimenus
iteration should improve when we're not constantly recompiling templates :)

1516897495
dimenus
well, constantly is an exaggeration - but still

1516899282
dimenus
catch feels more ergonomic than %%, but in the back of my head I just think of exceptions

1516899286
dimenus
which I want no part of

1516899291
dimenus
:D

1516899315
andrewrk
don't worry. it's not exceptions

1516899384
andrewrk
dimenus, you're on windows right?

1516899394
dimenus
yessir

1516899422
andrewrk
I added a killer new feature having to do with getting stack traces for errors, but we need windows debug info support for it to work on windows

1516899491
andrewrk
which I think makes sense to do in the llvm6 branch

1516899504
davr0s
hi,

1516899514
andrewrk
hi davr0s

1516899530
davr0s
i posted an issue on the zig github, my nick there is dobkeratops

1516899560
davr0s
zig reminded me of my own language experiment 2-3 years ago, i thought i'd compare notes

1516899586
davr0s


1516899613
davr0s
i gave up on this project figuring its too much work with no community to build IDE/debugger integratoin

1516899638
davr0s
my 'bypass' of needing a community was to make it more C++ inter-operable, but i never got round to writing the transpiler- it remained theoretical possibility

1516899681
davr0s
I find the tooling (IDE with dot-autocomplete) counts for a hell of a lot... C++is messy but has momentum behind it

1516899696
davr0s
it's taking years to get rust tooling up to scratch - it's IDE support is still flaky

1516899720
davr0s
anyway it would be nice to know how many of my original goals you may share or have even delivered on already

1516899765
davr0s
it seems you have managed to get more people interested than i did

1516899766
andrewrk
davr0s, I suggest browsing these docs:

1516899775
andrewrk
it should give you an idea of the language

1516899843
dimenus
so you're saying you want someone to work on that?

1516899903
andrewrk
it would be pretty great :D

1516899936
davr0s
whats the %void mean (the % ..)

1516899946
davr0s
what does^

1516900010
andrewrk
dimenus, I realized there was no issue for it so I made

1516900039
dimenus
davr0s: the '%' on a type indicates that the function can return either a valid value of that type or an error

1516900049
dimenus
see the docs under the 'Errors' section

1516900080
davr0s
is %T  shorthand for Result<T,E> or similar

1516900086
andrewrk
davr0s, yes

1516900090
davr0s
just as ?T is shorthand for Option<T> perhaps

1516900117
andrewrk
davr0s, that syntax is about to change. see

1516900151
davr0s
sort a makes sense, although a bit cryptic.  but ?T is certainly intuitive and has precedent

1516900171
andrewrk
?T and %T are basically the same, except %T can be any error code instead of only null

1516900185
davr0s
is that like     Error<T, E=()>

1516900205
davr0s
i guess you might use 'void' instead of rust syntax ()

1516900811
davr0s
"allocator ... For example, Rust seems to encourage a single global allocator strategy, "

1516900843
davr0s
i was sort of ok with the way that in C++ you can override the allocator per type, at least,

1516900857
davr0s
and you could then build abstractions for custom 'entity buffers' which allocate internally

1516900872
davr0s
with everything then backing onto a default global allocator

1516900883
andrewrk
that's a stdlib decision rather than a language decision

1516900898
andrewrk
you can build an ArrayList that takes a comptime allocator argument

1516900924
davr0s
it might influence language choices - it has influenced how Rust is going with 'box'

1516900944
davr0s
I like a lot of what jonathan blow says, but

1516900946
andrewrk
I think it's settled that in zig, the language will not call into the standard library

1516900974
davr0s
he's got the wrong end of the stick on some restrictions/capabilities in C++ - his first video shows some mistakes in his perceptions

1516900991
andrewrk
the closest thing to that is builtin.zig, which you can see an example of here:

1516900995
davr0s
C++ is certainly a mess , but some parts aren't as bad as he thinks

1516901024
dimenus
davr0s: do you have retorts to any specific criticisms?

1516901038
davr0s
dimenus jonathan blows criticisms of C++, yes

1516901044
dimenus
he's softened on a few things, for instance types CAN have a constructor/destructor but it's an opt-in thing

1516901051
davr0s
ok.

1516901060
andrewrk
interesting

1516901067
davr0s
'pointers and references' are unpopular with many peopel , i think he was amongst them

1516901085
davr0s
but I've learned from Rust that references make operator overloading much nicer

1516901095
davr0s
I dont like rust operator overloading

1516901103
davr0s
i've always liked C++ operator overloading .

1516901104
dimenus
he uses const reference for anything over 8 bytes by default

1516901118
dimenus
if you want mutable variablefs, you take a pointer to it instead

1516901148
dimenus
i think the beef is that in c++ you can do non-const references AND pointers which just brings confusion

1516901155
davr0s
so if you want to say   foo += bar .. you needed to say &foo += bar  like in rust maybe .    actually he might not even allow that kind of overload

1516901167
davr0s
i know he doesn't like "dot-calls" e.g. "a.foo(b)"

1516901176
davr0s
he mentally associates that with OOP, but thats not necaserily true

1516901184
andrewrk
dot calls are great

1516901190
andrewrk
everybody loves dot calls

1516901191
davr0s
rust and go both show 'dot-calls' without C++ class model

1516901193
dimenus
not to rust's degree, andrew :P

1516901199
dimenus
imo

1516901210
davr0s
i am bitterly dissapointed C++ didn't get UFCS

1516901222
andrewrk
oh I see. yeah I don't like it when it's hard to figure out which function is being invoked

1516901227
davr0s
bouncing between methods and free functions makes me want to stab the committee to death

1516901233
dimenus
IIRC you can have a procedure that has a using for the first argument, which will allow you to call it like its a dot call

1516901243
andrewrk
in zig currently the only way to not know which function is being invoked is by using a function pointer explicitly

1516901272
davr0s
i know he has the idea of making functions infix, thats also intersting but only applies to args=2 ?

1516901293
dimenus
eg, struct foo - proc_on_foo(using foo) - afoo.proc_on_foo()

1516901310
davr0s
anyway i hope i'm amongst likeminded people in observing: dotcalls give synergy between 'dot-autocomplete' and reducing nesting

1516901333
andrewrk
autocomplete makes sense. what do you mean by reducing nesting?

1516901335
davr0s
a.foo().bar(y).baz(x,y,z)   ..  gave you handy suggestions as you type, and follows the order of calls

1516901345
dimenus
i personally don't like chaining like that

1516901359
dimenus
but that's just my opinion

1516901360
davr0s
baz(bar(foo(a) ,y),x,y,z)

1516901365
andrewrk
I think function calls should mostly be on their own lines

1516901372
dimenus
it also stems from the C# world (which is what I do professional work on) where people chain dot calls liek that

1516901375
davr0s
depends on the context

1516901379
dimenus
and are unaware they're making cosntant copies of strings over and over

1516901408
dimenus
my_string.TrimLeft('0').Pad().Blah().ToString()

1516901411
davr0s
well to my mind, that should be down to instrumentation and making 'the efficient way' easier, and library design

1516901413
dimenus
makes 4 or 5 copies of immutable data

1516901440
davr0s
some of those steps could be lazy eval stufd

1516901474
davr0s
there could be a specialization for some cases, then what that gives you is an intuitive interface to find the functions

1516901484
dimenus
i'm not against dot calls, but I don't like chaining, especially when it's long enough that it requires multiple lines

1516901488
davr0s
composing a few functions rather than figuring out a name (which someone then has to discover)

1516901507
davr0s
multiple lines I may draw the line.   i dont like the 'builder pattern'  heh

1516901534
davr0s
but maths type cases.. i find it's fine.    target.sub(point).normalize()   //get me a normal vector pointing at something

1516901578
davr0s
anyway thats why i  like the idea of UFCS, i'm hopefully preaching to the converted but in C++ having to bounce between members and free-functions is hell

1516901585
andrewrk
as far as how zig decides about these things: the only important things are: * does the syntax/design lead to correct, maintainable software? * does it lead to the most optimal code?

1516901611
davr0s
i'm sure we agree on the goals

1516901611
andrewrk
other things besides these, such as does it look aesthetically pleasing, and is it fast to type, are not concerns

1516901638
davr0s
aesthetically pleasing is in the eye of the beholder: it all depends on one's path through life

1516901643
andrewrk
agreed

1516901673
davr0s
there's things where I agree analytically with a rust choice, but it still trips me up a little due to decades of C/C++ intuition

1516901696
davr0s
i usually write   Type varname first then correct it, even thogh i think  varname:Type is 'objectively' superior

1516901709
davr0s
thats why i'm big on wanting an option to omit types altogether

1516901738
davr0s
i want  fn foo(a,b,c){...}   to do the equivalent of    template<typename A,typename B,typename C>  auto foo(A a,B b, C c){ ...}

1516901742
dimenus
CRLF / tabs are two things that have caused me the most friction in Zig

1516901752
dimenus
otherwise, I've had a pretty good experience I think

1516901762
andrewrk
oh yeah. I need to get zig fmt going for you

1516901777
davr0s
one feature request I have for Rust is the abiltiy to omit types in "impls", like haskell does

1516901781
dimenus
CRLF I kind of understand, but the tabs I don't think I've asked about.

1516901787
davr0s
at that point I would accept compulsory traits a bit more

1516901813
davr0s
'writing the trait saves you a bit of typing in repeated impl's, by specifying the pattern of types for a group of functions'

1516901830
dimenus
rust's compile time is way too long for me to entertain using it at this point

1516901854
dimenus
this obsession with the javascript style micro framworks while having to build dependencies from scratch each time

1516901857
dimenus
is just too much friction

1516901889
davr0s
i would hope this are details which can be solved with caching

1516901896
davr0s
..rather than a design limitation

1516901899
andrewrk
dimenus, oh yeah btw I decided to work on compiler speed in the self hosted one only

1516901918
andrewrk
which is underway

1516901937
andrewrk


1516901948
dimenus
that's logical, you don't really want to do all of the work twice

1516901959
dimenus
and focusing on it in the self-hosted version allows you to refine the language as you do it

1516901984
davr0s
i actually wonder if rust suffered for being self-hosted

1516901998
davr0s
they made decisions based on 'what does the compiler sourcebase look like'

1516902000
davr0s
and had to refactor as they made changes

1516902016
dimenus
Rust pays an enormous complexity cost in their pursuit of correctness

1516902022
dimenus
which may be super useful in certain problem domains

1516902042
davr0s
yeah i am sold on the idea that it would help collabortion across the internet - you'd have more faith in commits from disparate sources

1516902069
andrewrk
davr0s, you may be interested to read about zig's self hosting strategy

1516902091
davr0s
it does have a slighlty haskel-esque feel in that 'once you fought the compiler, it's surprising how often your code will actually work'

1516902113
andrewrk
I think we have already accomplished something very close to this in zig

1516902131
andrewrk
there are obviously some issues that the compiler cannot catch since we are not doing a borrow checker

1516902160
andrewrk
here's zig's self hosting strategy:

1516902167
davr0s
yeah i'm happy with the middle ground, e.g. i point out how C++ references are 'not as verbose as rust borrows, but not as unsafe as raw pointers'

1516902204
andrewrk
in summary: compiling zig is always exactly a 3 step process: 1. compile C++ compiler 2. use 1 to compile zig compiler 3. use 2 to compile zig compiler again

1516902230
andrewrk
no matter how much we change the language, it's always a 3 step process. we never delete the C++ code from the repo

1516902238
davr0s
ah so you will keep the c++ version going

1516902247
andrewrk
yes. this makes it easier for package maintainers such as debian

1516902273
davr0s
i dont know if you read my idea , i never got round to it - it was to ensure my C++ compiler used a C++ subset that I could transpile to my language :)

1516902284
andrewrk
I did read that

1516902287
andrewrk
sounds ambitious

1516902303
davr0s
the design of the language had to include 'enough features to match what I used in C++' and of course i could constrain my C++ useage accordingly

1516902346
davr0s
ambitious if you considered a huge feature set

1516902357
dimenus
i'm actually writing a JAI-lite thing on the side

1516902365
dimenus
with a bytecode backend and AST injection

1516902373
dimenus
i know nothing about language design though

1516902376
davr0s
everyone in the world could have their own personal LLVM front-end lol

1516902377
dimenus
so its been fun

1516902395
davr0s
maybe thats what we need, just make the tools for making languages better :)

1516902417
dimenus
i'm just exploring ideas we're not doing in zig to better understand them

1516902434
dimenus
sometimes Jon gets too ranty and is tough to listen to.

1516902465
davr0s
i haven't looked at jai for a while

1516902466
andrewrk
dimenus, that's smart

1516902475
davr0s
recently i spent a while trying to get back into rust

1516902477
andrewrk
have you come up with anything that we should reconsider?

1516902488
dimenus
andrewrk, that's actually where I've been the past month or two

1516902500
davr0s
i figured the safety stuff would introduce me to new problems ii haven't considered

1516902518
davr0s
i've not dealt with web servers etc much at all

1516902528
davr0s
my background is console gamedev

1516902534
andrewrk
neat

1516902562
andrewrk
I've done a little PC game dev, but never made money doing it

1516902567
dimenus
andrewrk: I'm not far enough along yet, i have never even taken a compiler course in college so I'm just experimenting and remaking stuff as I go

1516902577
davr0s
i'm kind of stuck these days,

1516902610
dimenus
i have valid ast representation of simple expressions and a C output backend (which seemed like the easiest first step rather than LLVM)

1516902614
davr0s
i'm most productive in C++, but would be loathed to ever work with other people on C++ projects again

1516902622
dimenus
but the bytecode backend is barely started

1516902687
dimenus
jon can call arbitrary functions in bytecode from the demo, but maybe he's only looking up addresses in a table of things he defined

1516902770
davr0s
i've dabled with haskel a bit and actually it made more sense after rust, but i dont think i want to move to a GC'd pure functional language

1516902778
dimenus
i like the compiler message pump and his pipelining of small pieces of code though

1516902780
davr0s
over time i've actually begun to appreciate it's syntax

1516902786
dimenus
but that seems difficult to juggle once you get threading involved

1516902799
dimenus
i've spent 0 time w/ haskell

1516902806
davr0s
i now think we've all got it wrong with the C family languages, ... but it's too hard to change because it's burned into so many skulls, mine included

1516902816
davr0s
(i mean r.e. syntax)

1516902838
davr0s
the currying /function call idea is really awesome IMO

1516902885
davr0s
anyway as a middle ground, i'm content with a compact lambda syntax. Rust's is ok, the world's broader use of x=>x*x   is also ok

1516902904
davr0s
anyway i'm not about to ask for haskell-esque syntax

1516903167
davr0s
i do like expression based syntax a lot, i gather you have this

1516903194
davr0s
you did the same 'for ... else'  (after i did this, i discovered it alraedy exists in python..)

1516903351
davr0s
do you have a stance on default args etc

1516903375
davr0s
this is one thing i find irritating about rust: its great having a macro system, but i'd prefer the inbult function call syntax to be as powerful as possible

1516903409
davr0s
rust sometimes wants you tto wrap macros to cover ommissions in the core features (like default args, n-ary functions)

1516903424
davr0s
which means mixing 2 syntaxes to acheive one thing

1516903548
andrewrk
davr0s, stance on default args is "no"

1516903591
davr0s
i'm guesing that means you dont want named parameters either

1516903624
davr0s
my take is that can save quite  a bit of repetition , wrapping trivial helpers for common calls

1516903635
davr0s
you could have 3 args and you commonly ommit any one of them

1516903643
davr0s
you've saved writing 3 functions

1516903657
andrewrk


1516903663
davr0s
i find rusts's stance on this clunky ... "make_window_named()" "make_window_unnamed()" etc

1516903712
davr0s
C++ is kind of ok with trailing defaults but i've always wanted true named args... the ability to ommit any .. and it's not just 'functions with a lot of args..'

1516903774
Hejsil
Ye

1516903776
Hejsil
Yo*

1516903792
Hejsil
Is that an argument on defaults args I see?

1516903798
davr0s
hehe yes

1516903847
davr0s
r.e. Default Args vs Currying:  i think you have 2 contrasting use cases.  Maths functions suit currying... GUI functions , AI framework setup etc suits Defaults

1516903857
davr0s
so my take would be 'the first default ends curry-ability'

1516903869
davr0s
dont give defaults for funtions like "matrix_mul"

1516903880
davr0s
give defaults for functions like "create_window"

1516903933
davr0s
i think currying might be weird outside of haskells's syntax anyway, but i'm not opposed to it

1516903940
davr0s
i think both could co-exist

1516903967
Hejsil
Unless Zig get's closures, then I don't think it'll have currying either

1516903990
Hejsil
They are kinda the same, in that you construct something to capture values

1516904019
davr0s
whats rather important IMO is at least 'inlineable closures', for writing code in abstractions

1516904046
davr0s
(or by the term closure do you really mean objects that capture state at runtime)

1516904064
Hejsil
Yes

1516904115
davr0s
i think 'inlineable lambdas' are really handy for writing loops in a way that you can parallelize

1516904142
davr0s
foreach(foos, |x|...) --->   swap in par_foreach(foos, |x| ...)

1516904165
MajorLag_
I'm missing something about array declaration, or there's a bug:   const size = 25; var arr = [size]u8;   ==>  error: variable of type 'type' must be const or comptime

1516904182
davr0s
i really liked Rust's original 'do notaiton' where they basically had a trailing lambda syntax that looked more like 'inbuilt constructrs'

1516904187
MajorLag_
wait, I see what i'm missing, nevermind

1516904193
davr0s
do  foo.foreach |x| { ... }

1516904194
MajorLag_
I'm useless pre-lunch

1516904202
Hejsil
Lol, was about to answer that

1516904242
Hejsil
Hmm, idk. Have never written lambda heavy code

1516904267
Hejsil
But I do find, that being able to have procedures without names is super useful

1516904274
davr0s
from my experience in console gamedev i've yearned for it to be better

1516904276
Hejsil
I rarely need the closure

1516904316
davr0s
the mentality to write parallizeable stuff fits the functional paradigm 'apply this algorithm to this colleciton' etc etc

1516904329
davr0s
and we needed that even for singlethreaded stuff

1516904345
davr0s
the issue shows up in pipelineing on some processors, and modern processors are moving toward generalized SIMD

1516904351
davr0s
e.g. the intel 'vgather' stuff

1516904372
Hejsil
vgather? I'll look into that!

1516904386
davr0s
basically it's vectorized indexed addressing

1516904393
Hejsil
Aah

1516904417
davr0s
src1[i=0..n-1] =   src2[  src3[i=0..n-1] ]

1516904429
davr0s
where 'src2' is an address register,  'src1, src2' are vector registers

1516904454
davr0s
the existance of this kind of instruction facilitates vectorizing more general purpose code... so long as your 'loop iterations' can be proved independant

1516904464
davr0s
now what if you wrote everything as maps in the first place

1516904492
Hejsil
Well, then you depend on your optimizer to inline and all that stuff

1516904496
davr0s
its the same scenario we had back on the xbox 360... your code had to be unrolledfor pipelineing, assuming the iterations were independant

1516904518
davr0s
'optimizing' became refactoring traversals until loop bodies were independant hence unrollable

1516904540
davr0s
yeah but if you actually write it as a map.. it's actually , iroinically, more explicit

1516904551
davr0s
you're saying "apply this function across this collection"

1516904565
davr0s
rather than "here's some serial steps, can you figure out if they're parallelizable?"

1516904596
davr0s
the point is the universe has this underlying capability - parallelism - and our tools (and even CPU designs) are evolving toward it

1516904629
Hejsil
Would be interesting if CPU's where designed with a more functional mindset

1516904639
Hejsil
I don't even know if it could work buut

1516904658
davr0s
you probably know they have all sorts of madness going on at runtime to figure out if opereations are dependant or not

1516904665
davr0s
but SIMD basically makes it explicit

1516904669
Hejsil
Yeye

1516904689
davr0s
its like they had to do the interim step of OOOE etc because our tools/mindset hadn't caught up

1516904702
davr0s
but now we have GPUs and compute shaders, and FP

1516904774
davr0s
r.e. 'functional mindset', the SIMD stuff is already explicitely 'parallel mindset'

1516904776
davr0s
and vgather broadens it

1516904821
davr0s
i would really like to do away with the CPU/GPU divide eventually, just have a large number of cores maybe paired up sharing wide vector units, so they dont get crippled on scalar threads  (more like xeon phi)

1516904832
davr0s
not sure if we'll get there

1516904877
davr0s
trying to make serial stuff go faster is flogging a dead horse

1516904884
davr0s
has been for a long time

1516904935
dimenus
just use liquid nitrogen

1516904936
dimenus
problem solved

1516904941
davr0s
anyway, thats why i like inlineable lambdas and high-order-functions, and the ability to use 'a trailing lambda without nesting'

1516905326
MajorLag_
Ok, I wasn't testing what I wanted to test anyway with the last bit.   var size = usize(25); var temp: [size]u8 = undefined;    => error: unable to evaluate constant expression

1516905359
Hejsil
Size is var, so the compiler doesn't know it's value

1516905423
MajorLag_
I'm confused as to why that matters.

1516905444
MajorLag_
You can't push an array onto the stack at runtime?

1516905447
Hejsil
Let's say you have a global size

1516905455
Hejsil
Aka it can change whenever

1516905477
Hejsil
Then you have no idea how big temp will be

1516905482
Hejsil
aka you should heap allocate it

1516905504
Hejsil
Btw, arrays have a comptime known size in Zig

1516905552
MajorLag_
Alright, fine, not allowed because its dangerous. Whatever.

1516905558
Hejsil
Indeed

1516905610
Hejsil
Also [1]u8 != [2]u8. They are different types

1516905618
Hejsil
And types only exists at compile time

1516905633
Hejsil
Soo the compiler have to know size, before it can figure out the type of temp

1516905641
dimenus
MajorLag_: VLAs are kind of a hack in C

1516905662
dimenus
also, what's to stop you from declaring an array larger than the size of the stack?

1516905700
Hejsil
Indeed

1516905709
Hejsil
But you could do that at compile time too

1516905729
Hejsil
I don't think Zig is gonna stop you from [@maxValue(u64)]u64

1516905733
Hejsil
:)

1516905744
MajorLag_
I'm a little annoyed by the "mommy knows best" approach being taken here if I'm honest.

1516905796
Hejsil
Use alloca then :)

1516905798
Hejsil
From libc

1516905803
Hejsil
Isn't that in libc

1516905804
Hejsil
Idk

1516905823
dimenus
Yes, alloca is more appropriate

1516905845
dimenus
MajorLag_: I understand the sentiment, but consider my question.

1516905861
dimenus
if you rely on a library function to call it, the stack limit can be specified explicitly

1516905881
dimenus
eg, if size_requested > stack_size -> panic

1516905907
dimenus
where as if the compiler just assumes the size is valid, there's no way to explicitly check it in release build without paying an additional runtime cost

1516905911
dimenus
w/ guard pages etc

1516905940
MajorLag_
Great, so I'm supposed to link libc to use Zig? That's silly. Zig had an @alloca, it was removed, along with = zeroes.

1516906012
MajorLag_
Maybe I'm just too used to C, but these things are starting to add up for me.

1516906024
dimenus
MSVC doesn't support VLAs either

1516906117
dimenus
as for the alloca removal, you'll have to ask andrewrk

1516906132
dimenus
i'm not on the rust end of 'easy to abuse means we should remove it' type of thinking

1516906325
Hejsil
I mean, couldn't alloca be implemented in userspace with inline assembly

1516906334
Hejsil
Maybe we want that in the std

1516906335
Hejsil
Idk

1516906368
dimenus
I do think we should have an alloca or eq personally

1516906403
Hejsil
Having alloca return a slice, instead of pointer is reason alone to have it in Zig instead of using libc's

1516906424
Hejsil
good enough reason alone*

1516906484
Hejsil
Anyways, I haven't needed alloca yet in Zig, soo I'll leave this discussion to people who knows it's usecase

1516907661
dimenus
MajorLag_: this illustrates the example with alloca/VLAs:

1516907667
dimenus
this code crashes in linux on gcc, but is fine on windows

1516907682
dimenus
because alloca in windows actually allocates on the heap behind the scenes if you ask for too much memory

1516907715
dimenus
soooo, the behavior of alloca isn't even agreed on between C compilers

1516907758
dimenus
VLA memory is defined at function scope rather than block scope, unlike everything else

1516907976
andrewrk
MajorLag_, why do you think you have to link libc to use zig?

1516908069
MajorLag_
andrewrk, I don't. It was a suggestion from Hejsil, probably in jest.

1516908079
andrewrk
oh I see

1516908092
andrewrk
let me ask you this question, what's the use case for alloca?

1516908124
andrewrk
do you know the upper bound of the size of the data you want to add to the stack at compile time?

1516908218
MajorLag_
In this case, I needed a temporary buffer of variable size and didn't want to heap allocate it. In my case, I can certainly heap allocate but it wasn't the way I wrote the code at first, but I imagine there are use cases where that isn't desired. I honestly don't know. alloca exists, so someone had a use for it.

1516908243
andrewrk
so the size of the amount you need to alloca is only known at runtime?

1516908253
andrewrk
how do you know that size isn't larger than your stack size?

1516908265
MajorLag_
I see where you're going, if I know the upper bound I could allocate an array of that size and take a slice to it, which is another option.

1516908335
andrewrk
one of the features that I plan to add to zig is figuring out the stack size upper bound at compile time. then we can use an actually correct value for the initial stack size. this is especially valuable for threads

1516908456
MajorLag_
In this case I knew it would fit because I knew what I was loading. I'm probably not a good candidate for trying to understand alloca use cases, it was just where I went on first attempt out of habit.

1516908538
andrewrk
if you know it will fit, then uses a compile time known size for an array. this tells zig that you might need up to that many bytes in this  stack frame, and it can take that into account in measuring the appropriate stack size

1516908597
andrewrk
one of zig's core values is robustness, and knowing the correct stack size is a legitimate concern

1516909008
andrewrk
MajorLag_, just throwing this out there - I really appreciate the fact that you're using zig but you're also skeptical. I hope you don't feel like an outsider here, I really value your opinion especially if it seems like everybody disagrees with you

1516909024
andrewrk
we need diversity of thought

1516909271
DuClare
I am so disappointed that people on lobsters ended up in a completely tangential argument about the title :(

1516909285
Hejsil
Lol

1516909562
MajorLag_
andrewrk, thanks. I really do appreciate Zig's existence even if I sometimes disagree with or fail to see the rationale behind its choices.

1516909822
andrewrk
Hejsil, your zig-crc made me realize that git submodules is a pretty reasonable way to accomplish zig packages

1516909999
Hejsil
Until multible packages rely on the same package :)

1516910032
Hejsil
But ye, it's decent

1516910048
Hejsil
Just have a top level index.zig in you lib, and all is good

1516910094
andrewrk
if you want you can add this in your build.zig:  randomizer.addPackagePath("crc", "src/zig-crc/index.zig");

1516910103
andrewrk
then you can @import("crc") anywhere in your app

1516910120
Hejsil
Omg really?

1516910132
Hejsil
I always though "std" was some hardcoded thing

1516910140
Hejsil
Nice

1516910148
andrewrk
lmk if it works, I haven't tested it too much yet

1516910152
Hejsil
That build system needs documentation lol

1516910168
andrewrk
yeah. #367

1516910190
andrewrk
I'm a lot more motivated to add docs now that the example code is tested

1516910212
Hejsil
Understandable

1516910255
andrewrk
there are some pretty major speed improvements we can do to the build system too, but that got pushed back to 0.3.0

1516910281
andrewrk
you'll also be able to print a visualization of the dependency graph of a build

1516910324
Hejsil
Exciting stuff

