1534982466
kristate
TAI64N implementation

1534985062
kristate
andrewrk: hey, thanks for your input on tai64n

1534985084
kristate
it's mostly a wire format, so its best to store the bytestream

1534985091
kristate
most implementations store the 12 bytes

1534986328
andrewrk
kristate, interesting - can you point me to some open source code I can see where the code uses the API that stores the 12 bytes?

1534986343
kristate


1534986382
andrewrk
where's the usage?

1534986462
kristate
andrewrk: can you reiterate what you mean?

1534986473
andrewrk
found it:

1534986503
kristate
pub last_handshake_tai64n : Option<Tai64n>,

1534986566
kristate
having a struct/type for tai64 is handy and keeps mistakes out of the implementation

1534986578
hoppetosse
kristate I know there's the enumToInt function - I was just wondering if there was a reason to not implicitly cast it in the case of packed enums

1534986903
scientes
kristate, I just got your brother's email

1534987237
kristate
scientes:

1534987256
kristate
scientes: yes, please meet with my brother

1534987353
andrewrk
kristate, this is a good example - I'm becoming convinced

1534987894
kristate
⭐︎

1534988475
ryanmtate
@kristate howdy

1534988495
kristate
scientes: ryanmtate: cool, we're all synced up

1534988583
kristate
andrewrk: you don't seem to be connected via a secure connection

1534989016
scientes
ryanmtate, oh hi

1534989057
scientes
I'm vulnerable  because my znc certificate is self-signed, i should probably fix that....

1534989066
scientes
i have a signed certificate on the same server too

1534989093
ryanmtate
@scientes; hey, responding to your email!

1534989111
ryanmtate
yes, I need to use TLS as well...

1535028677
Hejsil
DutchGh0st, benchmarks!

1535028691
Hejsil
This is for u64

1535028729
Hejsil
And the atoi is my "no runtime loops" version

1535028933
andrewrk
Hejsil, interesting, it has better worst case perf, nearly independent of the input

1535028959
andrewrk
why is 22 and 24 faster than 20?

1535028973
Hejsil
Overflowing input

1535028998
Hejsil
We check if the buffer passed in is larger than max_digits for the type

1535029178
DutchGh0st
is there a way to create a 32 bit pointer?

1535029668
Hejsil
DutchGh0st, I don't think so

1535030023
DutchGh0st
mhh

1535030033
DutchGh0st
it would be cool hahaha

1535030045
DutchGh0st
have you benched the atoi() version btw yet? "D

1535030149
Hejsil
Ran some earlier, but I had to fix a problem that caused u128 to not compile for atoi

1535030156
Hejsil
Running new ones right now

1535030446
DutchGh0st
owh

1535030447
DutchGh0st
ghehe

1535030454
DutchGh0st
how did it fail?

1535030660
Hejsil
This is u64 before I tried fixing the u128 issue

1535030667
Hejsil
It's actually not to bad

1535030816
DutchGh0st
what version is this?

1535030818
DutchGh0st
yours?

1535030843
Hejsil
Ye, the no runtime loop version

1535030869
Hejsil
I can include yours too, if you can send me the code :)

1535030873
DutchGh0st
could you also bench the version I wrote?

1535030876
DutchGh0st
yeah 2 seconds

1535030891
DutchGh0st
are you okey with copy pasting from github? xD

1535030930
DutchGh0st


1535031085
DutchGh0st
or you could git clone even

1535031386
Hejsil
u64 bencmarks

1535031532
Hejsil
u127 benchmarks

1535031556
Hejsil
Ummm

1535031566
andrewrk
wow that is a really good worst case time

1535031567
Hejsil
loopless gets faster with input size?

1535031590
Hejsil
But who really parses strings to u127 :)

1535031598
Hejsil
Maybe this could be used for a bigint lib

1535031618
andrewrk
what is the code size cost? e.g. difference in binary size with parseUnsigned vs atoi

1535031647
Hejsil
I'll compile them into sep objs

1535031674
andrewrk
I'm perhaps a little too eager to have different implementations behind `if (builtin.mode == ReleaseSmall)` blocks

1535031686
andrewrk
but the idea is nice

1535031770
andrewrk
in other news, I have learned a lot about mach-o files, and I can at the very least make the following improvements to macos stack traces:

1535031801
andrewrk
* instead of std.os.openSelfExe() I figured out that we can just access our own exe which is already mmapped by the OS, so that's pretty foolproof and fast

1535031820
andrewrk
that improvement can be made on linux too

1535031847
andrewrk
* add source file and line number of the function that an address is in

1535031874
andrewrk
i'm still trying to figure out how to get the exact address-to-line info. lldb is able to do it based on the .o file somehow but I don't see where the info is and it's driving me mad

1535032407
Hejsil
Sizes!

1535032436
Hejsil
I wonder why safe builds are so big

1535032604
Hejsil
--release-safe benchmarks:

1535033174
DutchGh0st
damn

1535033184
DutchGh0st
I suppose my version does not like bounds checks haha

1535033325
DutchGh0st
and rip large numbers for me :(

1535033340
DutchGh0st
but well, there is this crazy thing: the law of small numbers

1535033387
DutchGh0st
if you look at any code, most numbers are small

1535035593
DutchGh0st


1535035615
DutchGh0st
that just compared the times of both versions on this benchmark:

1535035685
DutchGh0st
and if both times where equal, it just prints EQUAL

1535037084
andrewrk
I figured it out...

1535037087
andrewrk
forgot to increment a pointer

1535037211
andrewrk
my fault for trying to get clever with unknown length ptrs and not slicing when I could have

1535037301
andrewrk
jackpot

1535037304
andrewrk
found the debug info

1535037358
redj
andrewrk: what does that look like? get clever with unknown length ptrs vs slicing... if you can easily show?

1535037378
andrewrk
redj, sure I can show

1535037531
andrewrk
redj,

1535037588
andrewrk
the bad code forgets to increment the pointer so it doesn't find all the sections

1535037791
DutchGh0st
oh btw, Hejsil , I have to thank you for pointing out that if the slice passed into atoi() is larger than the maximum number of digits of the integer type you want to convert into, the whole thing crashes

1535037872
DutchGh0st
I basically made a little library in Rust that uses the same technique, but in the documentation I never mentioned that case, which I now do! :)

1535037882
redj
thanks andrewrk, looking forward to diving into zig when I get more time... btw I'm glad you changed 0.3.0's goals...

1535037927
andrewrk
DutchGh0st, sounds like a good case study of rust's macros vs zig's comptime

1535037962
DutchGh0st
I quite like the comptime honestly

1535037981
DutchGh0st
and the inline while

1535038022
DutchGh0st
because if you make a mistake in a macro, its super hard to debug, and you get verry unhelpfull error messages

1535038074
andrewrk
there's room for improvement in zig there too

1535038079
andrewrk
at least we have @compileLog

1535038705
DutchGh0st
but one thing Im a little scared of, is that Im going to mess up a few times with releasing resources, and 'who' should clean up

1535038731
andrewrk
that's fair

1535038740
andrewrk
in comptime code though all your resources are probably static

1535038750
andrewrk
e.g. global constants

1535039650
DutchGh0st
yes, but runtime code

1535039673
DutchGh0st
like vectors, and heap memory

1535039782
DutchGh0st
Oh, that is one thing I wanted to ask about, and tell me if it's the docs somewhere,

1535039837
DutchGh0st
but what happens if a  vector goess out of scope? Does it auto-destruct? or do you need to 'defer free(vec)' right after creation?

1535039928
andrewrk
DutchGh0st, zig does not have destructors

1535039933
andrewrk
there's no hidden control flow

1535039942
andrewrk
so if you don't see the code doing something, it's not doing something

1535040135
DutchGh0st
soo it's not always good to ' defer list.deinit();' right after creating one (using std's arraylist as an example)

1535040150
DutchGh0st
because you might pass the whole list to another function

1535040174
andrewrk
you can also use errdefer

1535040201
DutchGh0st
but that runs on errors,

1535040207
andrewrk
right

1535040273
DutchGh0st
but whenever the list is 'moved', or passed into another function that

1535040308
andrewrk
if it's not clear who owns the memory, consider reference counting

1535040318
andrewrk
then you can defer deref()

1535040352
andrewrk
but usually you know who owns the memory so it's ether defer or errdefer

1535040388
andrewrk
it's the same problem with open file descriptors, opengl texture handles, pipes, sockets, etc

1535040396
andrewrk
memory is just yet another resource

1535040451
DutchGh0st
I wonder how hard it would be to write a tracker that scans over the source and tells if you maybe messed up

1535040481
andrewrk
nothing can be perfect, but there are a lot of tools that can help in this regard

1535040514
andrewrk
for example if you use std.heap.c_allocator then you can check for memory leaks with valgrind --leak-check=full

1535040538
andrewrk
zig could also provide a debug allocator to do something similar

1535040610
DutchGh0st
ohh yeah, valgrind, thats also a thing

1535040657
DutchGh0st
I dont have any experience with it, how well does it catch mistakes?

1535040668
andrewrk
100%

1535040685
andrewrk
and it gives you a stack trace of where it was allocated, freed, reallocated

1535040742
DutchGh0st
:D

1535042061
DutchGh0st
I wonder how well all this comptime stuff would work with idea's like decorators

1535048623
DutchGh0st
How do I match against what I get back from @typeInfo

1535049152
andrewrk
here's an example:

1535049156
andrewrk
look for @typeInfo

1535049415
DutchGh0st
"error: not an enum type         builtin.TypeInfo.Fn => |*info| {"

1535049497
andrewrk
use builtin.TypeId instead of builtin.TypeInfo

1535049507
andrewrk
or use @TagType(builtin.TypeInfo).Fn

1535049515
andrewrk
or wait for

1535049541
andrewrk
or wait for

1535049584
DutchGh0st
Im trying to print the argument types a function takes

1535050106
DutchGh0st
error: expected type 'type', found '?type'                     comptime var t: type = ??a.arg_type;

1535050162
MajorLag


1535050235
MajorLag
if an arg is type 'type' or 'var', every arg after it and the return type will be `arg_type == null`

1535050376
andrewrk
yes, when you use reflection, the illusion that generic functions and normal functions are the same is dispelled

1535050398
MajorLag
also happens when you try to make interfaces out of them.

1535050430
andrewrk
yeah. it's one of the unsolved problems

1535050461
MajorLag
interesting note, if you use `@typeOf(@field(Type, "actual field"))` on an actual field, it won't work. You need an instance of Type to use @field against. I solved this by `const ptr = @intToPtr(*T, 0);` then `@typeOf(@field(ptr, "actual field"))`

1535050478
andrewrk
yuck

1535050494
DutchGh0st
what is this 'TargetType' ?

1535050501
andrewrk
(that's not a criticism of your code, but of myself because of what you were forced to do)

1535050502
wink_
MajorLag: it looks like paste.ubuntu.com have expiration dates (8/30/2018), it would be nice if they were permanent so they'd be useable "forever" from the logs (

1535050502
MajorLag
I know, but I couldn't think of a better way without actually instantiating something.

1535050579
MajorLag
@wink, I'm manually setting them to expire in a week. Partly because the language is still in flux and I don't think it's a good idea to have a lot of invalid syntax and bad workarounds floating around, but also because I want to dispose of incriminating evidence.

1535050615
andrewrk
lol

1535050624
MajorLag
DutchGh0st: TargetType is whatever type the function is a member of. Oh, it occurs to me now you might want to examine a top level function...

1535050684
DutchGh0st


1535050712
MajorLag
andrewrk: based on discussion in the "comptime interfaces" thread, I've designed a simple trait mechanism and a much more elaborate typeclass mechanism. Typeclasses can act pretty well as a "comptime interface" in my experiments, provided a tiny bit of language sugar.

1535050712
wink_
MajorLag: IMHO, I think it would be better to have it permanent, but your call.

1535050756
andrewrk
MajorLag, I'll be sure to read that carefully when I go through all those discussions

1535050769
andrewrk
I've been putting off that particular language design decision, although I know it's important

1535050815
MajorLag
DutchGh0st: just replace `@field(TargetType, "fnName")` with the function identifier. `@typeOf(someFn);`

1535050815
andrewrk
after 0.3.0 is released it'll be time to create a 0.5.0 milestone and then sort out what "sooner" (0.4.0) and "later" (0.5.0)

1535050848
andrewrk
*sort out what issues will be done

1535050911
DutchGh0st
"error: variable of type 'FnArg' must be const or comptime"

1535051069
DutchGh0st
wait Im a noob

1535051131
MajorLag
what I like about my idea, aside from it being mine, is that it is pretty simple. `var<x>` where `x` is of type `fn(type)bool`. the compiler will run the comptime function `x` against the type of that var and throw an error if it comes back false. In my implementation of this (without the var<> part, it's done with asserts), simple traits like `hasFn("next")` are pretty clear already, but for Typeclasses (which are

1535051132
MajorLag
r instance specifying the arguments of the "next" fn and any fields that need to be exposed) I added a lot of @compileErrors to give better detail, like "argument #2 of fn 'doStuff' does not match TypeclassType definition.".

1535051175
DutchGh0st
can you alter the argtypes?

1535051198
andrewrk
MajorLag, I'm also going to evaluate if the feature should solve runtime dispatch or not, or whether that should be a different feature, or whether that should not exist

1535051203
MajorLag
DutchGh0st: I pulled that code out of my Typeclass implementation, which is wrapped in a comptime{} block. Changing the for to inline might also work.

1535051244
MajorLag
I don't know that it can help with runtime dispatch. That requires vtables and the like...

1535051252
MajorLag
or our current interface implementation.

1535051275
DutchGh0st
noo but I mean compiletime change

1535051312
MajorLag
No, you can't reify a typeInfo currently. There's no way to go from typeInfo back to a type.

1535051378
andrewrk
it's a contended issue whether to have that

1535051388
andrewrk
it's extremely powerful - some might say too powerful

1535051412
DutchGh0st
I suppose it would be usefull if you are into decorator like stuff

1535051426
andrewrk
and while everybody has fun writing @reify-style code, nobody wants to read it

1535051431
MajorLag
As much as I can dream up interesting uses for it, I do also see how it could make things overly complicated.

1535051460
DutchGh0st
but you dont have to use if you dont want to

1535051490
andrewrk
DutchGh0st, zig's philosophy is that actually you do end up having to use features that you don't want to, because in practice people collaborate

1535051501
andrewrk
so it's important what is

1535051515
andrewrk
because you can know with 100% certainty that when you crack open your collaborator's code, they didn't do certain things

1535051522
andrewrk
and that certainty lets you rapidly understand code

1535051544
DutchGh0st
that''sss true

1535052629
DutchGh0st


1535052633
DutchGh0st
hehe, that just works:D

1535052894
DutchGh0st
basically you can create compile functions that take other functions and return 'wrapped' functions this way?

1535053121
andrewrk
yep

1535053143
andrewrk
the std lib uses this for a nice std.os.createThread API

1535053162
andrewrk
where you don't have to cast a void * for context

1535053222
DutchGh0st
ohh :D

1535053231
DutchGh0st
how do I yank out the return type of the function?

1535053270
andrewrk
@typeOf(foo).ReturnType

1535053532
DutchGh0st
is there also a way of saying like 'this variable is all the arguments of the function Im decorating'?

1535053550
DutchGh0st
basically like the *args in python

1535053586
andrewrk
no, but that might come with

1535053686
DutchGh0st
hehe

1535053713
DutchGh0st
all these things, like woa

1535053799
wink_
andrewrk: I wanted to get the return type of a fn in a struct. I created a function that loops over the names in a Definition and then returning def.data.Fn.return_type. Is there a easier way to lookup the fn's in a struct?

1535054064
MajorLag
@field(Type, "fnName").ReturnType should work

1535054103
MajorLag
Or even: Type.fnName.ReturnType

1535054209
wink_
T.fnName.ReturnType is an error "'fn(*BmAdd) void' does not support field access"

1535054250
MajorLag
Oh, sorry. `@typeOf(T.fnName).ReturnType`

1535054256
wink_
But @typeof(T.fnName).ReturnType does work!!!

1535054280
wink_
txs!!

1535054288
DutchGh0st
can you return functions without wrapping them in a struct?

1535054336
wink_
DutchGh0st: good question, you can pass them as parameters, but I haven't tried returning a fn.

1535054351
DutchGh0st
expected type 'type', found 'fn(usize) usize' ...

1535054353
DutchGh0st
mhhh

1535054354
DutchGh0st
I suppose

1535054419
DutchGh0st
with decorators, you can

1535054444
MajorLag
Kind of. I call it a comptime closure.

1535054448
MajorLag


1535054462
DutchGh0st


1535054465
DutchGh0st
yeah

1535054498
DutchGh0st
TraitFn?

1535054503
DutchGh0st
thats new for me

1535054585
MajorLag
TraitFn is defined as `fn(type)bool`. It isn't a built in type

1535054634
DutchGh0st
ohh I see

1535054680
MajorLag
I don't know if you realize, but you can say things like: `const StringList = [][]const u8`

1535054750
MajorLag
and then use StringList as an alias for [][]const u8: `var data = StringList{"A","B","C",};`. That one in particular I've had to use to get around lack of varargs at comptime.

1535055053
cgag
is there a way to split a namespace across files, like the equivalent of multiple files with 'package "main"' in go?

1535055099
MajorLag
hierarchically, yes. `use @import("whatever.zig");` will import the entirety of "whatever.zig" into the current namespace.

1535055240
MajorLag
I'm not sure how a circular use reference would be handled.

1535055316
andrewrk
it works correctly

1535055344
andrewrk
top level declarations are order-independent, regardless of which files they are declared in

1535055456
cgag
ah ok, didn't know about `use`, thanks

1535055487
andrewrk
it's generally discouraged unless you're trying to make your public API better

1535055658
cgag
yeah i just thought of a less hacky way  to do this, but was curious regardless

1535057039
andrewrk
zig live stream in 15 minutes

1535057056
andrewrk
topic will be finishing up hello world in vulkan, if I can tear myself away from these macos stack traces

1535057644
Thorn
hello

1535057647
Thorn
has anyone tried zig for embedded? any starter projects for cortex-m for example? I did google but couldn't find any

1535061087
unique_id
i'll miss the stream, it's almost 12 am here

1535063803
andrewrk
unique_id, you didn't miss much, turns out it's incredibly boring to port a C++ hello world vulkan app to zig

1535063822
andrewrk
(you warned me)

1535063831
wink_
txs for the stream!

1535064181
Thorn
found

