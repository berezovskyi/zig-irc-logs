1525396866
achambe
andrewrk: is the code for your async http server online somewhere?

1525399870
andrewrk
achambe, the tcp one is but I didn't finish the http one yet

1525400838
GitHub47
[zig] andrewrk closed pull request #970: Fixed extern enums having the wrong size (master...extern-enum-size-fix)

1525400841
GitHub124
[zig] andrewrk pushed 1 new commit to master:

1525400841
GitHub124
zig/master aa2586d Jimmi Holst Christensen: Fixed extern enums having the wrong size (#970)...

1525401034
andrewrk
alexnask, oh wow, your @typeInfo implementation works with using fields of type `type` and the nested structs even works

1525401043
andrewrk
I thought you were blocking on pointer reform

1525402969
GitHub79
[zig] andrewrk closed pull request #951: Metaprogramming - @typeInfo [DONE] (master...reflect_reify)

1525402969
GitHub15
zig/master ec2a3ed Alexandros Naskos: Attempt at adding comptime union field access

1525402969
GitHub15
zig/master fb88f5a Alexandros Naskos: @typeInfo with void payloads now works!

1525402969
GitHub15
zig/master 7eab623 Alexandros Naskos: One step towards @typeInfo

1525402969
GitHub15
[zig] andrewrk pushed 37 new commits to master:

1525403009
andrewrk
@typeInfo has arrived

1525403011
andrewrk
go nuts

1525403432
MajorLag
That's some impressive work. I really didn't expect to see that idea implemented so soon.

1525403734
GitHub7
[zig] andrewrk closed pull request #981: ArrayList iterator, unifying API of HashMap and its derivatives (master...ArrayIteratorUnifiedSyntax)

1525403735
GitHub114
zig/master e907c5c Braedon: Unified API

1525403735
GitHub114
[zig] andrewrk pushed 2 new commits to master:

1525403735
GitHub114
zig/master 33fa87a Andrew Kelley: Merge pull request #981 from BraedonWooding/ArrayIteratorUnifiedSyntax...

1525403746
andrewrk
neither did I

1525413396
GitHub124
[zig] tiehuis closed pull request #973: Add json decoder (master...json-decoder)

1525413398
GitHub174
[zig] tiehuis pushed 3 new commits to master:

1525413398
GitHub174
zig/master ef3111b Marc Tiehuis: Use allocator backed array for json value decoder

1525413398
GitHub174
zig/master f174726 Marc Tiehuis: Fix review comments for json decoder

1525413398
GitHub174
zig/master 0afc6a9 Marc Tiehuis: Add json decoder...

1525421842
alexnask
@andrewrk The only thing that kinda blocked me was nullable types, I really hate how I had to abuse @typeOf(undefined)

1525421849
alexnask
But that will be fixed eventually

1525438949
andrewrk
yeah, and it's actually quite a nice workaround for the time being

1525438969
andrewrk
but - agreed - I've started pointer reform branch

1525440428
alexnask
@andrewrk Isn't not being able to reassign type variables and have pointers to types/nullable types a separate bug?

1525440447
alexnask
I mean, with pointer reform I guess lots and lots of pointer code will change so the bugs will be corrected with it

1525440492
alexnask
But they could be fixed in isolation, right?

1525440529
andrewrk
the isolated fix is to introduce a separate syntax for address-of and pointer type

1525440544
andrewrk
e.g. * for pointer type, & for address-of

1525440574
alexnask
Why is that? I fail to see how it's related to being unable to reassign a variable of type 'type'

1525440586
alexnask
I know a = b; -> *(&a) = b;

1525440587
andrewrk
let me show you some Zig IR

1525440610
andrewrk
the & operator - if a is type `type`, modifies the type to be a pointer

1525440646
alexnask
Right, so the same IR is generated as for creating a reference type from a

1525440652
alexnask
pointer type*

1525440701
andrewrk
if a = i32, then @typeOf(&a) == type. if a = i32(1), then @typeOf(a) == &i32

1525440718
alexnask
I see, gotcha

1525440731
alexnask
I assume something similar happens with ?type behind the scenes

1525440783
andrewrk
right. the maybe unwrap operator needs a pointer because you can assign to it, e.g. ??a = 1234;

1525440827
andrewrk
wait a minute, I'm getting two things confused

1525440987
andrewrk
I forget why, but the zig IR instructions for dealing with nullable types need pointer values

1525441204
andrewrk
alexnask, oh right.    if (nullable_value) |*unwrapped_ref| { ... }

1525441275
alexnask
@andrewrk TypeTableEntry* get_maybe_type(CodeGen*, TypeTableEntry*): Assertion `child_type->di_type' failed. is the error when trying to define a struct with a nullable type field

1525441311
alexnask
Which probably means 'type' doesn't have a LLVM type attached to it (which makes sense)

1525441334
andrewrk
oh maybe there's an additional problem here

1525441358
andrewrk
I don't think I've ever tested making a struct that uses types that are not valid at runtime

1525441381
alexnask
'type' works fine if you only use it in a comptime context

1525441415
alexnask
seems to work in a runtime context too woops :P

1525441458
andrewrk
hmmm. that sounds like a bug

1525441463
alexnask
(the field becomes a 0-bit)

1525441541
alexnask
Idk it's a pretty weird edgecase

1525441560
alexnask
Trying to assign to the field yields 'error: cannot assign to constant' but it can be constructed properly

1525441580
alexnask
woops my instance was const

1525441592
alexnask
assigning seems to work, so I agree it's a bug for sure :p

1525442152
alexnask
andrewrk Are there any async code docs/realistic examples?

1525442160
alexnask
I assume they work much like C++ coroutines?

1525442496
andrewrk
that's a big gap in the docs

1525442545
andrewrk
this is mostly correct:

1525442565
andrewrk
yes they work like c++ coroutines

1525442585
andrewrk
did you see the tcp server example?

1525442602
andrewrk
it's still W.I.P. but it's the best example right now

1525442636
alexnask
I'll take a look at it, thanks

1525442647
andrewrk


1525442662
andrewrk
+ look in std/event.zig

1525443401
alexnask
I love that struct literal idea

1525443427
alexnask
In fact, I think it would be useful to generalize it for all brace-initializers where we know the expected type

1525443440
alexnask
(arrays, slices, union, etc.)

1525444953
andrewrk
that's what I'm thinking - tuples would implicitly cast to arrays and slices, struct literals would implicitly cast to structs and unions

1525458894
GitHub65
[zig] andrewrk pushed 1 new commit to master:

1525458894
GitHub65
zig/master 8721eb6 Andrew Kelley: zig fmt: fix tokenization of float literal with exponent

1525466813
GitHub133
[zig] andrewrk pushed 1 new commit to master:

1525466813
GitHub133
zig/master eef21df Andrew Kelley: zig fmt: same-line comment on comptime expression

1525467008
GitHub121
[zig] andrewrk pushed 1 new commit to master:

1525467008
GitHub121
zig/master 0fc8885 Andrew Kelley: zig fmt: switch with empty body

1525470516
GitHub30
[zig] Hejsil pushed 1 new commit to master:

1525470516
GitHub30
zig/master 87c0060 Jimmi Holst Christensen: Made container methods that can be const, const

