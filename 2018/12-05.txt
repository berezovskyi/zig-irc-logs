1543968310
andrewrk
emekoi, even better, it's semantically guaranteed to not even analyze the dead branch

1543968357
andrewrk
try it yourself - put a compile error such as `var x: bool = 3;` inside the `else` clause of `if (true)`

1543970974
emekoi
does the ipv6 parser in std/net support ip addresses like "::1"?

1543971042
daurnimator
I'd hope so....

1543971052
daurnimator
The real question is does it support scopes

1543971171
daurnimator
looks like it only supports numeric scopes?

1543971206
emekoi
from a cursory glance i don't think it does

1543971263
daurnimator


1543971539
emekoi
daurnimator, i was talking about my question

1543971600
daurnimator
emekoi: ah okay. yeah the lack of tests doesn't make me hopeful.....

1543971675
emekoi
yeah, for now i'll just use an addrinfo struct and use that to init the Address

1543977248
diltsman
andrewrk, should I put my ARM memory mapped IO thoughts in as an Issue or something else?

1543979939
andrewrk
diltsman, maybe here:

1543982408
ibebrett
question about importing c code

1543982449
ibebrett
attempting to use SDL_LoadTexture via: const c = @cImport({     @cInclude("SDL2/SDL_image.h"); });

1543982468
ibebrett
getting this error when attempting to use the function:  expected type '?*struct_SDL_Renderer', found '*struct_SDL_Renderer'   var tex = c.IMG_LoadTexture(renderer, c"test.png")

1543982479
ibebrett
now to me this is saying it expected an optional pointer to renderer

1543982484
ibebrett
is there a way to cast it to that?

1543982602
ibebrett
nevermind i think i figured out what it is

1543982612
ibebrett
so i am using someone's zig sdl2 and they redefined all the structs

1543982734
ibebrett
got it to work by force casting, but not optional

1543985960
emekoi
is there a reason that implicit returns were removed?

1543994176
reductum
Oh my goodness. I spent so much time trying to figure out why my tests were passing, but my answer for advent of code 5-1 was wrong.

1543994186
reductum
Then I actually read the question.

1544007057
nbjoerg
andrewrk: I would recomment avoiding the term "analyze the dead branch"

1544007069
nbjoerg
andrewrk: that brings back nightmares from Visual Studio

1544007122
nbjoerg
andrewrk: where certain uninstanciated templates literally contained syntax errors that were not caught for years because VS kind of handled templates as token string

1544007128
nbjoerg
andrewrk: without actually parsing them

1544009351
Hejsil
This is not really what I expected @noInlineCall to doo...

1544009412
j`ey
?

1544009436
j`ey
Hejsil: what did you expect?

1544009457
j`ey
a call I guess? rather than a jmp?

1544009471
Hejsil
Well, i guess it is semantically correct, but i did not expect the compiler to inline the value into the function

1544009492
Hejsil
But there should really be a call too

1544009554
Hejsil
I was hoping I could use @noInlineCall to ensure that the functions code is not inlined, so it is not optimized based on the context of where it is called

1544009567
Hejsil
(working on a small benchmarking lib)

1544009605
j`ey
wait that looks wrong, got confused

1544009614
j`ey
jumo is fine because its a leaf call

1544009653
Hejsil
Not if you expect to get your own stackframe (in a GC)

1544011135
nbjoerg
hm

1544011140
nbjoerg
that's certainly strange

1544012568
j`ey
interested in what the llvm ir looks like

1544013550
Hejsil
Anyways, just wrote a simple benchmarking lib

