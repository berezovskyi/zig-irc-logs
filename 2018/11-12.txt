1541981092
benjikun
how do I cast i8 to usize?

1541981126
benjikun
is that a nono

1541981232
benjikun
oh, nevermind, @intCast(usize, yadayada)

1541984441
oats
why does zig not allow variable shadowing?

1541984458
oats
/home/oats/projects/zig/hellos/terminal.zig:52:21: error: redeclaration of variable 'column'

1541984460
oats
for (line) |column, x| {

1541984492
oats
`column` is defined in a scope enclosing that loop, but has nothing to do with the loop

1541984749
hryx
My guess is either to keep the language simpler or to prevent bugs... or both

1541984773
oats
fair enough :)

1541985167
hryx
I've definitely caused some fun/havoc in Go (which allows shadowing) by accidentally using `x :=` instead of `x =` and vice versa

1541985219
shachaf
The "x, err :=" where you want to assign to x but shadow err is the best.

1541985318
shachaf
Er, no the other way around.

1541985329
benjikun
Have any of you used nim?

1541985330
hryx
that's my favorite!

1541985346
benjikun
I'm kinda attached to nim atm

1541985358
shachaf
I've played Nim, does that count?

1541985377
benjikun
no but I've seen that game everytime I've googled 'nim'

1541985379
benjikun
lol

1541985841
oats
what's a nim?

1541985914
benjikun
a language that compiles to C/C++/objC/JS

1541985946
benjikun
the original name was 'Nimrod' but it was shortened to 'Nim'

1541986079
benjikun
I'm making a draft for a starting wikipedia page for Zig, what should I put under "influenced by"?

1541986111
hryx
C, at least

1541986113
benjikun
I'm thinking C/C++ for sure

1541986125
benjikun
isn't `defer` a thing from go originally?

1541986150
hryx
not sure, but that's where I first saw it

1541986365
benjikun
what paradigms should I include?

1541986375
benjikun
imperative, structured?

1541986445
oats
ooh, zig has defer :D

1541986734
jfondren
defer I thought was from Jai, Jon Blow's language

1541986742
benjikun
possibly

1541986746
benjikun
I like that guy

1541986797
shachaf
I first saw defer in Go but it's pretty strange that it's function-scoped rather than block-scoped.

1541986897
benjikun
zig first appeared in 2017, right?

1541986899
benjikun
anyone know?

1541987053
benjikun
I'll just go with that, because that's when 0.1.0 came

1541987064
hryx
first commit was in 2015

1541987189
benjikun
ooh, thanks

1541987191
benjikun
I'll change it to that

1542009639
meowray


1542024053
jreut
What sorts of things are fit for inclusion in Zig's standard library?

1542024109
jreut
I've been writing a CSV parser for a project. Is that something you want andrewrk?

1542025693
iamthad
Is it possible to make a struct type support array initialization?

1542027175
Hejsil
jreut, as far as I know most things are welcome in std, but will later be removed once we approach 1.0.0.

1542027222
Hejsil
iamthad, You want this? const A = struct.{a: u8, b: f32}; const a = A.{4, 2.3}; ?

1542027265
iamthad
Yeah, that's what I'm looking for.

1542027297
Hejsil
I don't think Zig is gonna have this. It's to easy to make mistakes

1542027363
iamthad
Gotcha. It doesn't save that much typing compared to making an init function anyway.

1542027878
iamthad
Is it possible to test that a particular expression fails to compile / gives a compileError?

1542028486
Ronja
what's the situation with strings and unicode in zig?

1542028985
Hejsil
iamthad, no and I think it's a rejected proposal. I can try to find the issue

1542029039
Hejsil
Ronja, "strings" are just arrays/slices of bytes ([]u8). Special unicode handling like iteration and decoding is handled in userland

1542029134
iamthad
I see some CompileErrorContext stuff in the tests directory but that looks pretty complex.

1542029178
Hejsil
That's just a layer that invokes the compiler on a string, and tests if the compiler succeeds or fails

1542029185
Hejsil
Only useful for tests really

1542029207
Hejsil
(the code that does this that is)

1542029259
iamthad
Gotcha, thanks

1542029404
Hejsil
iamthad, can't find the issue, but it has been discussed

1542029424
iamthad
Thanks for checking. I'll keep an eye on it.

1542029752
Hejsil
iamthad, found it

1542029793
Hejsil
Hmm, I thought there where more things discussed here

1542029808
Hejsil
Maybe some of the debate on this is in other issues

1542029838
Hejsil
It can be hard to find the correct "meta programming" proposal sometimes

1542029915
iamthad
I see. My intended usage was for testing that a given error is caught at compile time, rather than the more versatile usage there

1542029957
Hejsil
Aaah, right. I think there has been some talk here too. Let me look further

1542030054
Hejsil
This:

1542030139
iamthad
Thanks, that's the sort of thing I'm looking for. Seems like a good capability

1542031913
jreut
Hejsil, thanks for the information!

1542031979
Hejsil
For now, the more code we have in std (with good tests) the more we stress the language :)

1542031999
Hejsil
Relevant:

1542032000
Ronja
Hejsil: does the standard library (plan to) support things like "get character count" for say utf-8 encoded strings? or methods like to_upper() for non-ascii characters?

1542032013
Hejsil
Idk

1542032026
jreut
:) glad to hear it. it's been great having a builtin test facility in a systems language

1542033232
Ronja
I'm tempted to comment that not seemlessly supporting unicode strings in a brand new language quite unappealing for very large swaths of the world in 2018

1542033305
Ronja
I'm talking about things like slicing, truncating, to_uppering etc. of strings internally encoded in utf-8, preferrably

1542033554
bheads
Thats really a std lib problem

1542033579
bheads
They put auto decoding for utf-8 in D, and now they are trying to remove it

1542033590
euantor
All of the above can be easily implemented in the standard library - either by wrapping a C lib or by writing it fresh

1542033621
euantor
Remmeber that Zig isn't 1.0 and something not being in the standard library yet doesn't mean that it'll never be

1542033633
Ronja
yes I am aware

1542033678
euantor
I would imagine the only reasons for it not already being there are: nobody has needed it enough to spend the time; it's fairly boring work

1542033729
bheads
The language is still in flux, so there is no point in polishing the stdlib yet.  Things are added as people need it.

1542033768
Ronja
but can something like const str = "åäö"; const slice = str[1..2]; assert(mem.eql(u8, slice, "äö")); really be a std lib thing? I've never written a programming language, though, so...

1542033794
bheads
You need a function to decode that string

1542033808
Ronja
why?

1542033815
bheads
having the language do it would hide the implmentation

1542033826
bheads
utf decoding is not cheap

1542033826
Ronja
you say that like it's a bad thing

1542033833
bheads
not saying that

1542033871
bheads
Zig is avoiding "magic" code

1542033891
Ronja
I get that

1542033897
bheads
besides what if my array is just bytes

1542033902
Hejsil
If you decode your "åäö" into a []u32, then your slicing would work

1542033903
bheads
I dont want that to get decoded

1542033968
Ronja
I guess really my point is that "strings == byte arrays" is an easy thing to do but it makes the language very very inconvenient for many many people

1542033977
bheads
no strings != bytes

1542034022
Ronja
a separate unicode-aware string type that does decoding, character counting, slicing and uppercasing for me is really nice

1542034033
bheads
sure, that can be in user land

1542034044
bheads
you dont need that in that language

1542034057
Hejsil
It's probably best if it isn't

1542034064
Hejsil
At least in Zig

1542034075
bheads
They added it in D, and its a mess

1542034094
Ronja
I guess, but can the user land implementation be as nice as str[n..m] or will become something like utf8_str_slice(strptr, n, m)

1542034127
Hejsil
Ronja, as I said. You could decode into a []u32, and then it would work

1542034154
Hejsil
But it depends on what you need from you string

1542034216
bheads
also in your string slice example what does n and m mean?  codepoints or indexs?

1542034217
Hejsil
There is probably gonna be something like an UniString, and then you can call str.slice(n,m)

1542034248
Hejsil
In the context of strings, it's probably codepoints

1542034252
bheads
it should be

1542034257
Ronja
bheads: codepoints. I don't know why I would every want anything else in string contexts.

1542034261
Ronja
ever*

1542034263
bheads
that way mixing arrays and strings are bad

1542034279
bheads
to easy to mix up codepoints and index

1542034314
Hejsil
Well, if you have precomputed indexs that are safe to slice with on a string, then you wouldn't wonna pay the cost of slicing with codepoints

1542034322
Ronja
bheads: that's exactly my point

1542034346
bheads
so slicing syntax would be a bad choice

1542034377
Ronja
what do you mean? python and rust can do slicing on codepoint counts just fine

1542034402
bheads
yeah but now slicing means two different things

1542034413
Ronja
I guess, technically

1542034419
Hejsil
Well, if your string is UTF8 encoded, then your slicing operation ins O(N)

1542034426
Ronja
yse

1542034428
bheads
no its not

1542034437
bheads
you need to decode to find the index bounds

1542034438
euantor
Zig's string is more like Rust's CString

1542034439
Hejsil
Enligten me

1542034472
Hejsil
And how is that not O(N)?

1542034495
bheads
I read it as O(1) my bad

1542034497
Hejsil
euantor, ye that's about right

1542034516
bheads
zig doesn't have strings, just arrays

1542034556
bheads
strings have data and an encoding

1542034774
bheads
we are just hardcoding in the encoding, normally utf-8

1542040122
oats
Is an aim of Zig to replace C for use in microprocessors and embedded platforms, too?

1542040722
benjikun
I think the potential to maintain that possibility is an aim

1542040756
benjikun
anyone can correct me if I'm wrong on that

1542041359
benjikun


1542041397
benjikun
I'm working on this page for zig, if any of you guys wanna help add references or material, there ya go

1542041484
benjikun
I think adding specific "description" and "history" sections would be nice

1542041700
oats
yeah, I most pages on programming languages seem to have a "design" section

1542041705
oats
s/I//

1542041741
benjikun
true

1542041745
oats
it should probably have subsections on syntax, memory management, types, etc

1542041771
oats
although I'd be hestitant to describe the syntax on the wikipedia page when it's in such flux :P

1542041821
benjikun
yeah, I'm also pretty new to zig and I don't want to make any mistakes on the page heh

1542042406
oats
benjikun: you know what, I think that's pretty good as is

1542042445
oats
though I'd be tempted to remove the first "hello world" example

1542042454
oats
and just show the one using warn()

1542042699
benjikun
hmmm

1542042833
benjikun
should I submit it for review?

1542043055
oats


1542043070
oats
how about that hello world, I think it kinda hints at how namespacing works a bit better

1542043113
benjikun
will do

1542043160
oats
and how about a factorial function? :D

1542043164
oats
moment

1542043195
benjikun


1542043208
benjikun
How about this one?

1542043275
oats
that's great :D

1542043295
oats
I didn't know about comptime int

1542043314
oats
does that mean that the compiler's actually doing the calculation, and the result is hardcoded in the binary?

1542043323
benjikun
I believe so

1542043358
oats
maybe if you use that, attach a short explanation of the comptime things used, since that's an important feature of zig

1542043452
benjikun
true, will do

1542043786
benjikun
added

1542044202
oats
looks pretty good

1542044422
benjikun
ty

1542044431
benjikun
I wish this IRC were more active

1542044447
benjikun
this channel, I mean

1542044486
benjikun
s/were/was/ I don't really know, english, man

1542045359
oats
eh, zig's not very big

1542045360
oats
kinda expected

1542045379
oats
it's also the middle of a work day in the States

1542045428
benjikun
yeah, ik

1542045449
benjikun
just would be nice

1542046264
DutchGh0st
can you force the size and alignment of a struct?

1542049365
DutchGh0st
In rust I have a function that returns an _mm128i struct, which is a simd struct...

1542049381
DutchGh0st
I import that into zig, but set the return type to a 'c_int'

1542049428
DutchGh0st
I then call the function, cast the reference to a Zig struct that has an array of 16 bytes internally to match the size..., is it safe to then derefence it?

1542049450
DutchGh0st
*call the function, take a reference to the return value, and cast it

1542051049
MajorLag
oddly enough, there doesn't seem to be a way to declare a struct, or a struct field, with an alignment. Best I can come up with is having an init fn that has an aligned return: `pub fn init() align(16) T`

1542051237
DutchGh0st
const _mm128i align(16) = struct { <-- ?

1542051288
DutchGh0st
const _mm128i align(16) = struct { data: [16]u8, } , doesn't that have an align of 16, and a size of 16?

1542051414
DutchGh0st


1542051418
DutchGh0st
but thats cheating a bit

1542051431
DutchGh0st
I have not had a

1542052289
benjikun
oats: Well they are criticizing the lack of independent sources on the wikipedia article

1542052549
benjikun
There are only two real "articles" on zig :/

1542052809
benjikun
These wikipedia people are the most passive aggressive people I've ever met

1542055642
MajorLag
yeah, you can create an instance of a struct with an alignment, but can't create the type with an inherent alignment.

1542055715
MajorLag
er... or maybe you can and I just had the syntax wrong despite several variations

1542055753
benjikun
Is stdlib documentation planned for anytime soon?

1542055785
MajorLag
I don't believe so

1542055807
benjikun
dang

1542055856
MajorLag
`const _mm128i align(16) = struct {` has an alignment of 8 in my test, but the compiler didn't bark about it so that's probably a bug.

1542056698
MajorLag
No, wait, I think that means "align this variable (_mm128i) at 16", but since _mm128i is a type, that's effectively meaningless. So there isn't a way to say "this type is aligned to X", at least not that I can fidn.

1542058122
DutchGh0st
well, there should I think?

1542058154
DutchGh0st
In rust we have `#[repr(align(N))]`, where N is the alignment

1542058188
DutchGh0st
but maybe I just have to wait untill simd stuff comes into Zig :)

1542058217
DutchGh0st
it was just a test if it was possible currently with FFI,...and...it basically is not really

1542058340
MajorLag
DutchGh0st, this version of your paste should be less hacky at least:

1542058347
MajorLag
I haven't tested it

1542058356
benjikun
He left

1542058697
MajorLag
I know, but IIRC he looks at the logs

1542058702
benjikun
oh, I see

1542058706
benjikun
sorry

1542059463
benjikun
If I'm doing a "@cInclude("X11/Xlib.h");" and I want to do something like "const display = c.XOpenDisplay(0x0);", how would I do that?

1542059496
benjikun
It's complaining about not being able to implicitly cast to '[*]const u8'

1542059822
MajorLag
in this case probably `const display = c.XOpenDisplay(@intToPtr([*]const u8, 0));`. Ideally it would be `const display = c.XOpenDisplay(null);`, but from the error it looks like zig didn't translate `char *` as nullable.

1542059857
benjikun
oh okay, I see tysm

1542059872
benjikun
well, actually using 'null' lets it compile now

1542059916
MajorLag
maybe it did correctly translate it and the error only reported the non-nullable portion of the type.

1542060246
benjikun
hm

1542060603
benjikun
Xlib uses a #define for Mod1Mask and some other stuff (`#define AllMods (ShiftMask|LockMask|ControlMask| \`)

1542060607
benjikun
Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask)

1542060622
benjikun
How would I utilize those?

1542060634
benjikun
I can't just do `c.Mod1Mask`

1542060917
benjikun
oh, I guess I can just use the integer counterpart that I find from the X11 stuff

1542065429
jfondren
you should be able to do c.Mod1Mask; you can do that for many other X11 constants

1542065443
jfondren
it looks like zig's C translation doesn't understand constants defined with bitwise operators

1542065450
jfondren
that's probably an oversight.

1542065474
benjikun
ah

1542065495
jfondren
$ grep KeyPress /usr/include/X11/X.h

1542065495
jfondren
#define KeyPressMask                    (1L<<0)

1542065496
jfondren
#define KeyPress                2

1542065502
jfondren
$ zig translate-c /usr/include/X11/X.h|grep KeyPress

1542065504
jfondren
pub const KeyPress = 2;

1542065529
benjikun
good idea

1542065537
benjikun
ty

