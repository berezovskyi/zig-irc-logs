1541894729
daurnimator
andrewrk: hey just watching your video (via HN)

1541894749
daurnimator
andrewrk: should mention Lua as a lang that you can suprisingly write "perfect code"

1541894986
daurnimator
andrewrk: also I didn't get my reply in scrollback overnight :)

1541899662
hryx
daurnimator: I must agree about the Lua comment :>

1541899818
hryx
I'd love some feedback from people here on a proposal. I don't want to put this up on GitHub if it's a dupe, or captured better somewhere else. Or if it contains lies/errors.

1541899826
hryx


1541899872
hryx
Lemme know what you think!

1541899919
hryx
(title is "RFC: Make function definitions expressions")

1541901985
shachaf
Hmm, I started writing about what I want in an error-handling system a little while ago and came up with something pretty close to what Zig has:

1541902026
shachaf
Actually it looks like Zig has a lot of language features I've been wanting and trying to figure out, like named-break-with-value

1541902093
shachaf
How does the |x| { ... } syntax work? Is it a standalone thing in some way or syntactically a part of for/catch/etc.?

1541902475
hryx
shachaf: That syntax is specific to constructs which a) "unwrap" a value which can be null/error, or b) provide reference during iteration, switch, etc.

1541902482
hryx
far as I know it means nothing on its own

1541902570
shachaf
OK, that's what I figured.

1541902752
hryx
Also shachaf, that's quite a thoughtful braindump on error handling. how do you like Zig's so far?

1541902868
shachaf
I've been wondering about a general meaning for "block argument that can early-exit" that can be worked out at compile-time and isn't macros or something complicated like delimited continuations. But I think having these things be user-defined might be counter to the Zig philosophy.

1541902964
shachaf
I haven't actually used Zig yet, though I heard of it before. I'll have to look at it a bit more, though, it looks like it has some form of a bunch of things I've wanted.

1541904552
hryx
Also shachaf, that's quite a thoughtful braindump on error handling. how do you like Zig's so far?

1541904570
hryx
oops, sorry. Accidentally hit up ._.

1541904800
jfondren
glibc's getrusage() headers are awful:

1541904821
jfondren
all that and it's just an array of ints, really.

1541905357
hryx
jfondren: can you explain the @"" in that link? Are those some kind of anonymous struct members or something?

1541905370
shachaf
A lot of things in glibc seem pretty bad. Some functions are just way worse than the system calls they're wrapping.

1541905418
shachaf
It looks like Zig binaries on Linux aren't dynamically linked at all? How do they handle things like DNS?

1541905514
jfondren
the @"" doesn't compile. So I thought about submitting that as a bug. But the other file there is produced by gcc itself, and it's also completely useless.

1541905707
jfondren
zig produces dynamically-linked binaries with --library c

1541906122
jfondren
DNS:

1541906358
jfondren
speaking of |x| { error handling }, I just rewrote that gist to use those. that's quite a bit nicer.

1541906643
shachaf
OK, so if you want to use system libraries you have to link libc presumably.

1541906656
shachaf
I guess DNS is less of an issue than things like OpenGL.

1541906920
jfondren
if you want to use system libraries you have to link with them, sure. But there's a lot of functionality in syscalls that zig can invoke directly, and the functionality in the system libraries can be reimplemented without the libraries. For DNS, there's already stuff like FireDNS, libdns, etc., that you might prefer to gethostbyname

1541907013
jfondren
I'd say, --library is an option. (literally.)

1541907172
shachaf
Yes, the system DNS library isn't great anyway, and I guess parsing resolv.conf yourself is the best you can do.

1541907244
shachaf
But if you want e.g. libGL there's not much you can do (?).

1541907247
MajorLag
hryx, overall I think it's a solid proposal. The idea has been brought up a few times but hasn't really been anyone's priority. Personally, I'm in favor of it because it is more consistent with the rest of the language and it means I can stop wrapping comptime-generated functions in structs. Honestly not sure which syntax for `extern` makes more sense.

1541907911
hryx
Thank you MajorLag. If it's a worthwhile consideration I'll post it. I've been looking for some way to contribute to zig with my limited experience -- this is something I'd be down to tackle, though I have no idea how much work is involved yet.

1541908053
hryx
jfondren: Hope you don't mind, I made a revision using `orelse` to reduce the indentation. also removed stdio.h

1541908315
shachaf
On closures: I recently found out that D supports closures relative to a stack frame, which are only valid inside the scope they're defined in.

1541908319
hryx
shachaf: have you looked at the Tetris proof of concept? (By Andrew, author of zig) It links against GLFW and libpng:

1541908381
shachaf
I'm not sure whether it's a good idea in general but it would work for some of the examples in #1048 with no extra copying.

1541908391
shachaf
Nope, haven't looked.

1541908459
daurnimator
shachaf: I assume by asking about dns you're really asking about nss libs your system may expect?

1541908521
shachaf
daurnimator: Yes.

1541908568
shachaf
Recently I was trying to figure out what the real ABI that you need to/can assume when writing static Linux binaries is.

1541908572
daurnimator
shachaf: I assume the best answer would be the same as it is in musl: the nss shared library mode is a terrible idea: use of the nscd socket is the least-bad way to get it

1541908613
shachaf
The answer is something like, the Linux system call ABI, which is nice, and then a bunch of things like parsing reasonably stable formats like /etc/resolv.conf and /etc/passwd yourself.

1541908645
daurnimator
shachaf: also lots of /proc and /sys....

1541908667
daurnimator
shachaf: and then you have what the system dynamic linker expects/understands

1541908677
shachaf
Right. But at least that's in ther ketnel and it's pretty well-specified.

1541908723
shachaf
And then when you get to things that you just have to dynamically link, like OpenGL, it more or less pulls in the system libc anyway.

1541908734
daurnimator
shachaf: and then you have some other interesting things like set_robust_list, which should only ever be called

1541908797
shachaf
Well, if you're writing your own runtime presumably you're taking care of that.

1541908828
daurnimator
shachaf: but what about when you then link against something else that expects glibc's management functions for it

1541908834
daurnimator
you end up having to emulate misc glibc apis...

1541908845
shachaf
Right.

1541908884
shachaf
If it's statically linked then at least you know what the surface you have to emulate is.

1541908906
daurnimator
shachaf: if what is statically linked?

1541908916
daurnimator
shachaf: what if you're using zig to create a shared library though

1541908919
shachaf
The something thing you link against.

1541909087
shachaf
It's all just a mess.

1541912396
oats
howdy, I'm getting familiar with some zig by following along with the x86 kernel live-coding video, which I'm finding very fun and informative

1541912436
oats
I've just stumbled across some type thing that I don't understand, what's the difference between a *T pointer and this strange [*]T pointer?

1541912761
MajorLag
*T is a pointer to a single T, [*]T is a pointer to an unknown number of T

1541912816
MajorLag
For instnace, *u8 is a pointer to a single byte. [*]u8 is a pointer to an unknown number of bytes, most likely a null terminated C-string.

1541912925
oats
ah, gotcha

1541912933
oats
Thanks :)

1541913047
oats
Does that mean that stuff like pointer arithmetic isn't available for *T ?

1541913062
MajorLag
Right.

1541926010
raoof
hi and thanks andrew and everybody else for making a cool language. I have a question, I have png file and I wanted to read the file and parse it at compile time, is it possible?

1541930805
hryx
raoof, take a look at @embedFile() -

1541930815
daurnimator
hryx: they left

1541931116
hryx
too true

1541931195
daurnimator
hryx: though I think their question is still useful to me

1541931204
daurnimator
==> Can you e.g. call libpng at compile time?

1541931400
hryx
ooh, that's a good question, I don't know if you can call extern/C functions at compile time

1541935062
raoof
hryx, thanks I'm using @embedFile I meant calling libpng to avoid decoding png at runtime

1541935303
m4r35n357
Can zig parse command line arguments?  I couldn't find anything in the documentation section.  (I am probably here prematurely, but I have a short c program that I would be interested in converting if that is feasible)

1541935395
m4r35n357
BTW I am motivated to try zig as a replacement for c, with native 128 bit floats.  And yes, my problem domain does benefit from the extra precision!

1541947509
MajorLag
You cannot call library functions at compile time. I did write a pure zig png library, but a) it's really sloppy and needs a lot of rework I haven't done yet, and b) it requires an allocator, which currently doesn't work at comptime either. What I've done in one of my demos is have an extra build step to pre-process assets into the memory layout I want, then dump that to a file that is @embedFile'd into the main pr

1541949888
raoof
MajorLag, thanks good to know

1541960585
oats
what's the reason for the change in struct syntax?

1541960589
oats
struct.{ ... }

1541961035
hryx
oats: That was done to resolve a syntactic ambiguity having to do with function return types. There's an issue for it somewhere. But it's probably going to be reverted soon after the problem is solved a different way

1541961115
hryx
ah, here

1541961568
oats
hryx: does this mean that single-expression functions don't need braces?

1541961601
oats
oh wait, never mind

1541961604
oats
I misread the issue

1541961610
oats
I see why this is a problem

1541962645
oats
fwiw, I like Hejsil's solution the best so far

1541962981
hryx
totally, I think that's the one that's gonna happen

1541963032
hryx
here's the work on it

1541963588
oats
awesome

1541963598
oats
another question, how does one separate code into multiple files?

1541963603
oats
I can't find any documentation on how that works

1541964328
hryx
oats: You always need one root file (e.g. "main.zig") which is the target of `zig build-exe`. That file can include other files with @import("other/file.zig"). Any files in your source tree which don't end up getting imported like this aren't compiled -- this means tests in those files won't get run either

1541964390
oats
hryx: makes sense, thanks :)

1541964446
hryx
I was originally confused by the fact that you have to have exactly one root file (instead of `build [file1] [file2] ...`), but I like it now :>

1541964763
oats
I love compilers that are build systems

1541964776
oats
I've about made enough makefiles

1541968168
oats
what's the difference between a struct field and a plain variable declared in a struct?

1541969180
oats
also, what's zig's polymorphism story? is there one yet?

1541972068
benjikun
does the `@import("std").build.Builder;` stuff work at compile-time

1541972079
MajorLag
oats, a struct field is an instance variable, a variable declared in a struct is just namespaced to that struct type. Zig has polymorphic functions using comptime parameters or the 'var' keyword. For the latter, see "printValue" under Case Study: printf in Zig (

1541979340
shachaf
hryx: I get a syntax error building build.zig for that tetris repository -- has the syntax changed or something?

1541979772
shachaf
Oh, it works with 0.3.0 but not 0.3.0+ef5d7ce4

