1543190657
JinShil
Hello.  I'm wondering if Zig has any plans for memory safety either by providing language features or through libraries.  Language could include something like a borrow checker or lifetime annotations, library features could potentially be smart pointers.

1543190686
benjikun
isn't borrow checking a rust thing?

1543190702
benjikun
someone can correct me if I'm wrong but I think andrew said it's out of zig's scope for now

1543190714
JinShil
I'm sure some kind of smart pointer implementation can be built in zig, but I'm wondering if anyone on this channel knows about any broader plans for zig.

1543190734
JinShil
Yes it's a Rust thing.  I'm not aware of any other language that has a borrow checker.

1543190742
JinShil
Liftime annotations exist in D.

1543190751
benjikun
I'm not sure about what lifetime annotations are

1543190816
JinShil
In D lifetime annotations are keywords `scope` and `return` that tell a function that a reference cannot escape (scope) or can and whose lifetime is tied to the return value (return)

1543190852
benjikun
I see, interesting

1543190882
JinShil
Rust also has lifetime annotations, but it's quite different:

1543190897
JinShil
Anyway, back to zig...

1543190906
JinShil
Any plans for memory safety features?

1543191047
benjikun


1543191238
JinShil
"too complicated".  I see.

1543191556
JinShil
Looks like andrewrk is looking for something though.

1543195095
daurnimator
what about if a function could force a 'defer'?

1543195278
daurnimator
I guess that's what 'clean' was about

1543195489
benjikun
how are you today daurnimator

1543195497
daurnimator
benjikun: good :P

1543195507
benjikun
glad to hear ;3

1543195616
ibebrett
total zig newbie here

1543195635
ibebrett
but I'm taking on a "build an allocator project" as a starter project

1543195638
daurnimator
ibebrett: welcome!

1543195643
daurnimator
ibebrett: ambitious....

1543195652
ibebrett
anyway, I built an initial "idiotic allocator" here:

1543195692
ibebrett
as the project notes, hopefully I can find some type of allocator that will be useful to the wider zig community, but I was wondering if anyone wanted to read some of the code there and give some tips

1543195708
ibebrett
I'm pretty sure I'm doing some things in a cludgy way

1543195842
daurnimator
ibebrett: your buffer is global yet you can have multiple allocators.

1543195926
ibebrett
would making the IdioticAllocator struct not "pub" be the right way to "seal it off"

1543195933
benjikun
I think that's on purpose

1543195934
ibebrett
or is there a way to make a "one of",

1543195948
ibebrett
or is it better in this case to just write the code with out a struct at all

1543195963
daurnimator
ibebrett: yeah make it not pub. or bring the buffer into the struct...

1543195982
daurnimator
ibebrett: also your bufferSize choice is incorrect

1543195989
daurnimator
s/choice/check/

1543196001
benjikun
>=

1543196007
benjikun
?

1543196031
daurnimator
benjikun: need to check if(n+self.index >= bufferSize)

1543196045
daurnimator
currently missing the `n + `

1543196059
benjikun
oh true

1543196102
daurnimator
ibebrett: something I'd do is make the IdioticAllocator a function that returns the struct to make the bufferSize a parameter

1543196264
ibebrett
so here is my newbishness

1543196273
ibebrett
to make the bufferSize a parameter

1543196299
ibebrett
would that be something i'd be able to do with the way I've declared buffer?

1543196321
benjikun
no you would have to move the buffer into the struct

1543196456
benjikun
if you had multiple instances of IdioticAllocators, they would write over each other

1543196462
benjikun
with how it is currently

1543196472
ibebrett
yeah, as you noted before I intended to only have one

1543196514
ibebrett
but I don't really have a strong design for this up front, I think doing what daurnimator is saying makes sense to me as

1543196545
ibebrett
I didn't really have a design for this "IdioticAllocator" and exposing it with the size as a param allows it to "land" in the library as at least

1543196552
ibebrett
some fake allocator that just uses the stack

1543197073
benjikun
fair enough

1543197313
ibebrett
stuck on one small thing

1543197356
ibebrett
so if within the struct i have say buffer: []u8, can i initialize that with a "comptime" size

1543197416
ibebrett
so in the init function have something like:  pub fn init(comptime bufferSize: usize) { ... return {  .buffer = []u8{0} ** bufferSize  } }

1543197423
ibebrett
it doesnt seem like I can...

1543197564
ibebrett


1543197568
ibebrett
this makes me think I can?

1543197585
benjikun
you can

1543197590
benjikun
lemme write an example

1543197595
ibebrett
Thanks!

1543197618
ibebrett
so structs don't have to share sizes?

1543198041
daurnimator
ibebrett: they're different structs.

1543198059
daurnimator
(if you return them from a function)

1543198102
ibebrett
interesting

1543198294
daurnimator
ibebrett: essentially you can write a function that creates structs. it's not too different from C where you could write with the preprocessor: #define IdioticAllocator(size) struct{char buffer[(size)];size_t index;}

1543198328
ibebrett
right

1543198335
ibebrett
so just return struct {

1543198337
ibebrett
}

1543198340
daurnimator
ibebrett: yep

1543198346
benjikun


1543198359
ibebrett
thanks!

1543198370
ibebrett
i think i found:

1543198417
benjikun
I'm pretty new too, so don't take everything I say concretely :p

1543198425
daurnimator
me too :P

1543198875
ibebrett
that really helped!

1543198879
ibebrett
thanks!

1543198940
benjikun
np :)

1543199361
ibebrett
hmm, finding something interesting, not sure If I am making a mistake

1543199471
ibebrett
here is what I have with your suggestion:

1543199533
ibebrett
but when I test it with:

1543199567
ibebrett
I am getting values like this: BUFF LEN 200 INDEX 140732511991824 N 800error: OutOfMemory

1543200222
daurnimator
ibebrett: yeah I'm confused too. printing self.index I see it's not initialised to 0 as I'd expect.

1543200254
daurnimator
ibebrett: but also trying to print off self results in: Unable to format type 'fn(*Allocator, usize, u29) Error![]u8'

1543200431
daurnimator
ibebrett: oh. in the test you only get the allocator member. you throw the rest away

1543200480
ibebrett
i see, but the allocFn gets values on the struct using the "parent" thing

1543200498
ibebrett
16       const self = @fieldParentPtr(Self, "allocator", allocator);

1543200529
benjikun
I would make the alloc function take a `self: *Self`

1543200535
benjikun
and avoid using @fieldParentPtr

1543200547
daurnimator
benjikun: huh? that allocFn is a callback

1543200576
benjikun
oh can you not change the parameters on those

1543200604
ibebrett
well anyway, as you said daurnimator, "keeping" the outer struct worked

1543200622
ibebrett
so i dunno if the compiler cant determine i have that reference in terms of what goes on the stack

1543200819
daurnimator
ibebrett: took me a while to see what was happening.... seems like a bit of a footgun. I wonder if there's anything we could do to at least raise a warning...

1543201168
ibebrett
dumb question, but say it didn't have to use

1543201174
ibebrett
@fieldParentPtr

1543201190
ibebrett
would that be enough to cause zig to not "throw out" the data

1543201233
MajorLag
daurnimator, it's a known issue, andrew has ideas but nothing is in yet to deal with that kind of problem. I experimented with a debug saftey feature but it just didn't work properly.

1543201273
MajorLag
ibererett, @fieldParentPtr doesn't do any magic, it just handles the pointer arithmetic for you to turn the *Member to *Parent.

1543201285
daurnimator
MajorLag: I think some sort of "don't copy" mark on a struct member would work.

1543201302
benjikun
ibebrett: It would force you to keep track of the entire struct so in a way yes

1543201318
MajorLag
daurnimator yeah, that's one of the things he mentioned recently, though I don't remember in what issue.

1543201370
MajorLag
but it would also mean the allocator couldn't be used anymore, since things that take an allocator expect *Allocator, not *MyAllocatorImpl

1543201385
MajorLag
that last bit was for benjikun

1543201387
benjikun
yea

1543201404
benjikun
I realized that when daurnimator brought up it being a callback thing

1543202123
daurnimator
ibebrett: btw, you don't take alignment into account

1543202138
daurnimator
I'm suprised we don't have a arg-not-used warning

1543206318
suirad
howdy

1543206325
benjikun
hiya

1543206369
presiden
hola

1543206407
suirad
whatcha working on?

1543206481
benjikun
programming a shoot em' up type game

1543206587
suirad
nice what in?

1543206592
benjikun
zig :p

1543206594
benjikun
SDL2

1543206600
benjikun
just started an hour ago or so

1543206965
presiden
solving project euler

1543206976
benjikun
presiden: what problem are ya doin?

1543207004
presiden
all of them?

1543207010
presiden
well, wip

1543207019
benjikun
I meant what are you on

1543207055
presiden
still in 20-30

1543207063
benjikun
ah

1543207088
suirad
i have an idea for a simple leak detecting allocator, that you could use to wrap another allocator you are using in a fn to detect any leaks. am probably going to implement it.

1543207104
presiden
using projecteuler mainly for learning the ins and out of new language

1543207125
benjikun
I see presiden

1543207127
benjikun
suirad: sounds cool

1543207143
suirad
we've got to get those github repo counts up for syntax highlighting, and making small useful libraries could help

1543207189
benjikun
true, we're almost there

1543207229
presiden
that's the plan anyway, tho I only got as far as 50-ies or something

1543207235
presiden
on other language

1543207337
suirad
Ive also been thinking about what stuff thats useful/commonly used in c++ to make that could help productivity. I am a prefer C, but usually when I talk to someone who prefers c++ the usually like to say how quickly they can stark work using std stuff.

1543207412
suirad
thats why i made the refcount/shared_ptr equivalent thing before and started trying to make something similar to a unique_ptr

1543211590
daurnimator
andrewrk: watching from the shadows? :) just saw #1790

1543212770
suirad
lol

1543214695
suirad
anyone there?

1543214802
benjikun
I'm here

1543214820
benjikun
what's up?

1543214878
suirad
If im making a debugging tool, should i also support releasesafe? im having it give a compile error for anything other than debug mode

1543214933
suirad
i can also just optimize out

1543214961
benjikun
not sure

1543214967
benjikun
why not support releasesafe?

1543215065
suirad
its a simple leak detecting allocator. essentially im going to keep an atomic count of allocations/frees. then on .deinit panic if not allocation_count != 0

1543215072
suirad
lol

1543215077
suirad
if allocation count is 0

1543215095
suirad
lol sorry its late

1543215121
suirad
panic if allocation count isnt 0 on deinit

1543215151
benjikun
it's fine :p

1543215167
benjikun
I would probably let it work on releasesafe

1543215178
suirad
its an allocator that wraps another allocator that you pass to it in .init

1543215237
suirad
and since you pass in another allocator, i could on releasefast/releasesmall, just make my alloc/realloc/free fn pointers just point to the allocator that i am wrapping

1543215249
suirad
instead of my own

1543215269
benjikun
a debugging safety blanket

1543215270
benjikun
nice idea

1543215381
benjikun
that's like this

1543215470
benjikun
or massif, too

1543215472
suirad
ahh yea exactly

1543215682
suirad
after talking about it out loud, making it just optimize out would probably be for the best

1543215945
suirad
once i get it working, ill add a feature to allow a # of leftover allocations to pass, so you can keep allocated values but keep the safety

1543218159
suirad
should i panic or return an error when a leak is detected?

1543218741
benjikun
either would be fine, but I would return an error

1543218794
benjikun
I reserve panics for things that are immediately fatal and or need stacktraces

1543218986
suirad
would a leak not meet that criteria?

1543219159
benjikun
idk if a stacktrace would be relevant because it points to where the panic is

1543219179
benjikun
aren't you waiting until the final deinit to check

1543219187
suirad
yes

1543219201
benjikun
meh, up to you

1543219215
suirad
im thinking of moving my 'check for leak' portion of .deinit to a fn called .checkLeak that raises if a leak is detected. Then changing .deinit to call .checkLeak and panic if it raises

1543219281
suirad
hmm raising was nice to have in testing though...

1543219667
suirad
i think i'll keep it a raise for sake of simplicity and testing

1543220338
suirad
benjikun: im done for tonight if you want to check it out

1543220390
suirad
ill finish an example tomorrow

1543220398
suirad


1543220412
benjikun
lookin at it one sec

1543220476
benjikun
looks nice :)

1543220533
suirad
thanks :)

1543220542
suirad
I'll post it to the subreddit

1543220603
benjikun
sounds good, will upvote lol

1543220938
suirad
submitted; goodnight! :)

1543234550
daurnimator
huh.... io.InStream doesn't seem to have a readUntil where I can provide statically allocated memory...

1543238145
MajorLag
You can always use a FixedBufferAllocator to provide statically allocated memory to anything that takes an allocator.

1543240469
daurnimator
MajorLag: oh right. will that work at comptime?

1543241047
MajorLag
Sadly no. No allocators work at comptime for a variety of reasons:

1543246878
andrewrk
alright one of my goals for today is to give everybody's PRs either a merge or a round of feedback

1543253661
ducktype
hi again

1543253721
ducktype
index.zig:1020:15: error: expected type 'u32', found 'usize'     return u32(syscall0(SYS_geteuid));

1543253747
ducktype
i'm havng trouble calling std.os.linux.geteuid()

1543253765
andrewrk
ducktype, you need

1543253770
ducktype
the cast shound convert usize to u32 i think

1543253792
andrewrk
zig won't cast automatically because it could destroy numerical information

1543253807
ducktype
var real_euid = std.os.linux.geteuid();

1543253809
andrewrk
so you have to choose a destructive cast @truncate or an assertion cast @intCast

1543253820
ducktype
should infer the correct type

1543253853
ducktype
i'm not specifying the type explicitly

1543253890
andrewrk
the return type of geteuid is usize. but the man page for geteuid says "these functions are always successful." so I think it would be ok to do the @intCast in the implementation of geteuid

1543254056
ducktype
so i need to change zig lib source code?

1543254089
andrewrk
ducktype, yes, you can make the contribution, or you can file an issue, and work around in the meantime with @intCast

1543254100
ducktype
ty

1543255912
very-mediocre
this is scary for any ecosystem:

1543256036
very-mediocre
I wonder if zig's future package manager could employ some strategy to mitigate such a risk

1543256122
very-mediocre
in an idea world, desktop OSes would do what mobile OSes do with application manifests that describe certain permissions / url whitelists etc

1543256313
andrewrk
zig's plan is for decentralized package management, where everything is locked in all the time with hashes. We'll have tools that help you upgrade to new versions of software, and help make decisions such as which versions to update to and how to determine the trustworthiness etc

1543256372
andrewrk
with zig package management, your software dependencies don't change until you decide to do the work of upgrading them. and then at that point plz use the tools to help you upgrade safely

1543256410
very-mediocre
interesting, what kinds of strategies do the tools use for this?

1543256463
very-mediocre
it seems hard to assess what kind of change is a malicious one. It'd be nice if there were a manifest of some kind that you'd diff when upgrading, to see if additional "permissions" were added, but this seems to be the OS's job

1543256515
very-mediocre
(meaning "permissions" are OS-specific so this would only work in a locked down OS with a standard set,, e.g. mobile)

1543256552
andrewrk
tools for determining API / ABI compatibility, tools for determining what forks of packages are available, potentially the concept of "trusted maintainers" with signed pub keys, etc

1543256596
very-mediocre
I see!

1543256882
very-mediocre
I feel like I'd want to be warned if anything that does an "external" operation is changed, e.g. syscalls, particularly as pertaining to networking

1543256953
very-mediocre
for packages where it's expected, e.g. something that does a lot of IO, it might not mean much, but I'd flinch if for example a networking-related call were added to a library expected to be pure, e.g. math

1543258580
ducktype
to convert []u8 to an asciiz i need to relocate it?

1543258612
ducktype
there is some helper function already in std?

1543258983
ducktype
i call std.fmt.allocPrint() but i need a zero-terminated string/array to pass in to syscalls

1543258998
ducktype
i'm not sure which is the best way to do it

1543259539
suirad_
Another way to help with dependencies is enforcing zig fmt on them, which should make strange / obfuscated code more obvious upon review.

1543259630
suirad_
andrewrk: Speaking of security, ive been meaning to try something in zig.

1543259661
suirad_
At comptime you cannot do syscalls correct?

1543259716
ducktype
suirad_: could be possible technically i think but i'm not doing it at compiletime

1543259752
ducktype
suirad_: if you are talking to me :)

1543259799
suirad_
ducktype: I was adding to the previous convo :P

1543259834
suirad_
I was going to see if I could trigger some shellcode at comptime

1543259880
ducktype
suirad_: i see :)

1543266303
andrewrk
it's not possible to do anything unsafe at compile time

1543266313
andrewrk
the only way to crash the compiler at compile time is via compiler bugs

1543267152
rom1504
can you use all the memory at compile time ?

1543267600
andrewrk
yes

1543267844
rom1504
wouldn't that make the compiler crash ?

1543267917
andrewrk
yes but it is a bug

1543268105
andrewrk
in self-hosted, once some of the zig issues are resolved, we will not have unbounded recursion

1543268131
andrewrk
and so attempting to allocate too much memory during a compilation will give error: not enough memory to complete compilation

1543268151
rom1504
oh ok, cool

1543268178
andrewrk
with potentially more information about why. and this is important because the compiler stays running, providing several features. you don't want it to crash

1543268229
rom1504
how far is zig from being self-hosted now ?

1543268251
andrewrk
pretty far. I think it will happen in 0.5.0 (0.4.0 is the next release)

1543268303
rom1504
ok, keep at it :)

