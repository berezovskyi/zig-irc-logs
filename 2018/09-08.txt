1536367291
martinium
Happy Friday fellow ziggers

1536374711
andrewrk
Hi  martinium

1536374720
andrewrk
How's your project going?

1536374838
scientes
llvm-ir with slices is really verbose

1536381805
dbandstra
unique_id, when playing oxid did the framerate ever start to get sluggish for you at random times?

1536381831
dbandstra
i don't really know why it happens, i did a bit of profiling and it should be able to run at like 10,000 fps

1536381902
dbandstra
maybe sdl_mixer is doing something funny i dunno

1536405920
unique_id
dbandstra: I don't think so. The only issue I have is if I move the window I lose the ability to control the character for a while. But this is Linux+i3, so who knows what's happening.

1536406300
unique_id
Well, I lose all ability to send input to the program (just to make that clear). But the framerate looks fine. This is some i3/X11 issue I bet.

1536412263
unique_id
Question. I need to have "worker threads" read from a global boolean to know when to shut down. They should not read the variable from a register. I don't remember the C++ discussion about when to use volatile but for C++ it or atomic would be the options.

1536412264
unique_id
What do I do in Zig?

1536412286
andrewrk
unique_id, atomics

1536415249
unique_id
My worker threads need a pointer to my TaskManager. That means my TaskManager can't be moved around. Also for now I can't initialize my worker threads inside TaskManager.init. Hmm. Maybe init returns pointer to a heap allocated TaskManager? Maybe that's the most sound design. Best way to make TaskManager non-movable.

1536415290
scientes
you generally should not pass stack variables between threads

1536415713
andrewrk
unique_id, until

1536415720
andrewrk
I usually rename it from init/deinit to create/destroy

1536415741
andrewrk
when it's heap allocated

1536416049
scientes
does this test case fail for anybody else:

1536416131
MajorLag
that should fail, you're returning a slice of the stack that will be invalid when the function returns.

1536416142
scientes
oh my bad

1536416198
MajorLag
though in practice it will sometimes work because that portion of the stack, though invalid, isn't overwritten yet.

1536416229
scientes
mem.toSliceConst does that

1536416233
scientes
thats the bug i was looking at

1536416300
MajorLag
mem.toSliceConst returns a slice of data that it was passed a pointer to, that's legit.

1536416366
MajorLag
slices are a kind of pointer.

1536416375
MajorLag
they don't tehmselves contain data.

1536416406
scientes
pointer and length

1536416462
MajorLag
yeah. in old parlance this would have been called a "fat" pointer.

1536416499
andrewrk
every pointer in zig has the concept of "how many"

1536416510
andrewrk
pointer to array: compile-time known how many

1536416515
andrewrk
slice: runtime known how many

1536416533
andrewrk
[*]: unknown how many

1536416536
andrewrk
*: exactly one

1536416563
andrewrk
and soon we will have [*]null: how many is determined by a final null / 0

1536416607
andrewrk
*[1]T and *T can implicitly cast to each other since they represent the same thing

1536417839
MajorLag
andrewrk, are `[]null` and `[N]null` still planned to be a thing? Because it occurs to me that unicode strings will not function as expected if the compiler does things like implicitly casting `[]null u8` to `[]const u8`.

1536417869
MajorLag
unicode in this case being UTF-16 or 32.

1536417951
andrewrk
MajorLag, yeah those are still planned. hmm let me consider

1536417972
andrewrk
window's "wide string" would be [*]null u16

1536418003
andrewrk
this is a pointer to array of u16s with length determined by a sentinel u16 that is 0

1536418041
MajorLag
So the rule will be that you have to cast []null u8 to the appropriate integer type, which makes sense to me so far.

1536418079
andrewrk
what's the problematic use case?

1536418105
scientes
ok, arm64 patches ready for review, just got vdso working

1536418111
MajorLag
there wouldn't be one in that case. I was thinking UTF-16 would be `[]null u8`, which would cause the problem.

1536418118
andrewrk
scientes, congrats! I'll have a look in a bit

1536418146
MajorLag
But since you know you're working with UTF-16, it isn't unreasonable to expect you to use `[]null u16`.

1536418158
scientes
also, musl's arm64 vdso code is broken

1536418184
andrewrk
MajorLag, so if you represent UTF-16 as bytes, this would be equivalent to representing an arbitrary file as bytes - in both cases null termination is the incorrect way to determine the length, and normal slices should be used instead

1536418199
MajorLag
right, makes sense.

1536418226
andrewrk
scientes, #musl is really friendly, I recommend mentioning your findings there

1536421257
unique_id
If anyone is maintaining a list of cIncludes that lead to issues: when using pthread_cond_t from pthread.h I get the error: compiler bug @cImport generated invalid zig code

1536422258
unique_id
"Each architecture must define the following macros..." __SIZEOF_PTHREAD_MUTEX_T

1536422260
unique_id
..ok

1536422277
unique_id
So the size isn't available in the header? It doesn't seem so. I'll just make it something huge.

1536422870
andrewrk
unique_id, __SIZEOF_PTHREAD_MUTEX_T is probably in a macro that zig doesn't (or can't) support

1536422895
andrewrk
we essentially have to parse the C code ourselves to try to translate a macro, and some concepts are inherently impossible to represent soundly in zig

1536423041
andrewrk
unique_id, hm this looks like a simple integer. it should work

1536423068
unique_id
it was pthread_cond_init that failed

1536423086
unique_id
I was just trying to find the size of pthread_cond_t and pthread_mutex_t

1536423102
unique_id
because you do have to store them by value. So I just made them 64 byte large

1536423108
andrewrk
$ ./zig translate-c /nix/store/akak0rxhbi4n87z3nx78ipv76frvj841-glibc-2.27-dev/include/pthread.h | grep SIZEOF

1536423115
andrewrk
pub const __SIZEOF_PTHREAD_MUTEX_T = 40;

1536423149
andrewrk
hm I don't understand the problem

1536423155
andrewrk
why can't you use the API like normal like you do in C?

1536423184
unique_id
I can either cImport which fails, or I define pthread_cond_t myself which is difficult.

1536423195
unique_id
so I just made it 64 bytes

1536423357
andrewrk
there's another workaround you can do which is to do the cImport offline using `zig translate-c` and then patch up the resulting code

1536423409
andrewrk
you could switch back to @cImport once the issue is resolved

1536423521
unique_id
The way I have it now is fine, no worries.

1536425095
Barabas
Hello, my zig compiler encounters unreachable code.

1536425115
andrewrk
hi Barabas

1536425129
Barabas
It seems to try and open "E:Â®~\x1b\\Zig\\build-release\\lib\\zig\\std\\special\\panic.zig"

1536425169
Barabas
And then goes to the EINVAL case in os.cpp in os_fetch_file_path (line 1104)

1536425182
Barabas
This is on windows (with master)

1536425208
andrewrk
I wonder if I broke it with  b35c74ea4c9d93d6a8d90812d2066a78b9abb64e

1536425249
Barabas
This is while runnning  bin\zig.exe build --build-file ..\build.zig test

1536425337
Barabas
I'll try the commit before b35

1536425444
Barabas
Hmmm, now it fails trying to create the cache dir

1536425602
Barabas
Which... also does os_path_resolve

1536426007
andrewrk
Barabas, I'll audit the code that determines that path on windows

1536426013
andrewrk
might not fix it until monday though

1536426026
Barabas
Alright

1536426035
andrewrk
sorry about the trouble

1536426036
Barabas
I see my g->cache_dir is already messed up

1536426098
Barabas
I'll update my visual studio and re-open the console, just to be sure.

1536426105
andrewrk
oh I think I might have found it

1536426114
andrewrk
yeah I found it

1536426119
Barabas
That's fast =D

1536426129
andrewrk
sometimes reading code is faster than debugging :)

1536426142
Barabas
^^

1536426156
andrewrk
can you try something and recompile on top of master for me?

1536426173
Barabas
Of course

1536426257
andrewrk
Barabas,

1536426282
andrewrk
I backported some zig std lib code to stage1 and made this mistake

1536426425
Barabas
I'll try it out.

1536426533
Barabas
(ClCompile target) ->          E:\Zig\src\os.cpp(509): error C2679: binary '=': no operator found which takes a right-hand operand of type 'initializer list' (or there is no acceptable conversion) [E:\Zig\build-release\zig.vcxproj]

1536426567
andrewrk
just a sec

1536426630
andrewrk
Barabas,

1536426724
Barabas
Seems better, but you have to cast the char[2] to a uint8_t *

1536426779
andrewrk
ah, thanks, does it fix the bug though?

1536426815
andrewrk
I think I would just change result_drive_buf to a uint8_t

1536426873
Barabas
I think so. There are other problems though.

1536426898
Barabas
Some stage2 test fails

1536426920
andrewrk
I gotta go, back later

1536426929
Barabas
Alright

1536426955
andrewrk
Barabas, that's a flaky test, try it again. I'll fix it soon, I promise

1536426961
Barabas
Ok =D

1536426991
Barabas
Just trying to get back to do some zig programming after my holiday ^^

1536427212
Barabas
It says the build failed, but at least I can run the unit tests for my code

1536434441
Angr1st
Hello everyone the documentation for building zig from source on windows states "Visual Studio 2015" as requirement. Has anyone tried building it with the newest version (Visual Studio 2017 15.8.3)?

1536435919
dbandstra
i tried vs2017 and it didn't work

1536435999
Angr1st
well fair enough going to install visual studio 2015 then

1536436004
dbandstra
oh wait

1536436022
dbandstra
i wasn't trying to build zig, i think i downloaded the binary and tried to use it, but it was getting SDK related errors

1536436063
dbandstra
andrew said "I haven't tried to support vs2017 yet since last time I tried to build llvm it didn't work. might be time to try again "

1536436070
dbandstra


1536436265
Angr1st
Ok I will just try it and if it does not work I will go with the way shown in the wiki

1536436752
Angr1st
I did a quick google search an It seems like llvm needs msbuild targets only shipped with vs2015 v140 and vs2017 only ships with v141 by default. You can use the visual studio installer to add the v140.

1536436782
Angr1st
to vs2017 though

1536439473
Angr1st
So building it worked using vs2017 (Using the vs2017 installer I also installed CMake) but I think the test are not run using the command shown in the wiki 'bin\zig.exe build --build-file ..\build.zig test'. Can someone tell me how to run the test?

1536439677
dbandstra
what output did you get from running that?

1536439703
dbandstra
works for me in linux

1536439737
Angr1st
Invalid argument: --build-file

1536439766
Angr1st
Usage: .\bin\zig.exe [command] [options] Commands:   build                        build project from build.zig   build-exe [source]           create executable from source or object files   build-lib [source]           create library from source or object files   build-obj [source]           create object from source or assembly   builtin                      show the source code of that @import("builtin")   run [source]                 cr

1536439901
dbandstra
did you copy that exact command? zig build --buildfile

1536439901
Angr1st
so it outputs the help of zig.exe after showing 'Invalid argument: --build-file'

1536439906
dbandstra
--build-file*

1536439916
dbandstra
i get that output if i forget the `build` in the middle

1536439985
Angr1st
well it seems like I was just not good enough at using copy and paste

1536440018
Angr1st
but now I get ' error: unable to find 'builtin.zig' const builtin = @import("builtin");                 ^'

1536440168
Angr1st
followed by "error: expected type 'noreturn', found 'void' pub fn panic(msg: []const u8, error_return_trace: ?*builtin.StackTrace) noreturn {"

1536441187
dbandstra
i'm not sure about that

