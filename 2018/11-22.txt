1542855788
benjikun
Under implicit cast: arrays in the docs it says `TODO: [N]T to []const T`

1542855805
benjikun
does that mean explaining it is a TODO or implementing it

1542860479
hryx
benjikun: I think everything marked TODO in the docs means "to be documented", not that it's unimplimented

1542860489
benjikun
yeah that's what I thought

1542861886
andrewrk
hryx, that's correct

1542862449
redj
andrewrk: gotta rename that to TODOC ;)

1542864561
andrewrk
redj, clever :)

1542864889
daurnimator
andrewrk: how goes? :)

1542864907
andrewrk
hi daurnimator

1542864915
andrewrk
made some good progress on copy elision today

1542864931
andrewrk
I almost have an empty file compiling successfully

1542864964
andrewrk
(this is a joke - an empty file uses the default panic handler which calls the debug info parsing code which basically involves a full stress test of the standard library)

1542864985
benjikun
lol

1542865092
andrewrk
good night

1542865107
andrewrk
I will be taking the day off tomorrow for the united states holiday thanksgiving

1542865243
benjikun
night night

1542865244
benjikun
sleep well

1542865252
daurnimator
andrewrk: will be exciting to have copy ellison moved so we can move onto other things :P

1542865253
benjikun
andrewrk: Same, going out to eat with family

1542869637
suirad
is there a shorthand way to go from [*]T to []T without looping manually?

1542869766
suirad
ahh std.mem.toSlice()

1542869856
daurnimator
suirad: you have a null-terminated object?

1542869863
daurnimator
s/object/array/

1542871692
suirad
Yes

1542872233
suirad
Is defering in a loop safe?

1542872317
benjikun
I'm pretty sure it is, are you wanting the defer to be in reference to the loop block?

1542872398
benjikun
just note it will defer each loop iteration

1542872415
benjikun
so depends on what you want

1542872468
suirad
Im parsing strings of arbitrary length and need to allocate temporary []u8. They are only used once and I dont care what happens after they are used.

1542872547
suirad
benjikun: okay, so each loop iteration executes defer lines?

1542872552
benjikun
yep

1542872572
benjikun
the deferred code will run at each loop iteration exit too

1542872608
benjikun
could you not have a buffer outside the loop and reuse it?

1542872622
benjikun
and then just free it after the looping is over

1542872733
suirad
probably. Thats where I was headed next now that I have this test passing

1542872816
benjikun
sounds good

1542873012
benjikun
Just realized if you do a self-referential function call, it segfaults `fn foo() void { foo(); }`

1542873050
benjikun
wonder if having a compiler error for that would be reasonable

1542873199
benjikun
someone recently asked for a consistent way for making segfaults, that's an easy one lol

1542874707
benjikun
dunno maybe this is normal and I'm crazy for thinking a compiler error is reasonable, it happens in C too

1542874815
hryx
nah, it doesn't make you crazy -- if the compiler segfaults, it's a compiler bug

1542874838
benjikun
no I meant it segfaults when running the compiled program

1542874855
hryx
ohhh I see. in debug mode or release?

1542874871
benjikun
debug

1542874978
benjikun
actually what the heck

1542874996
benjikun
it doesn't happen in --release-fast or --release-safe but it happens when you do `zig run test.zig`

1542875005
benjikun
debug mode is the default mode right?

1542875018
hryx
yeah

1542875025
hryx
it might have been optimized away in release-fast

1542875034
benjikun
hmm true

1542875067
hryx
if I recall, the upcoming coroutine refactor will affect recursion in a few ways, possibly including detecting it (not sure)

1542875100
hryx
either way, it'll surely affect the kind of function in your example

1542875105
benjikun
interesting

1542875125
benjikun
I opened an issue for people to see just in case

1542875129
benjikun
should I close it?

1542875147
benjikun
not sure if it warrants having an issue

1542875189
hryx
it's worth having the issue open I'm sure

1542875221
benjikun
mk good

1542875240
benjikun
How is the docgen stuff coming along?

1542875287
hryx
been very limited during the week due to dayjob, but now it's a holiday :O

1542875308
benjikun
woohoo

