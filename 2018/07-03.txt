1530581028
GitHub93
[zig] tiehuis pushed 1 new commit to master:

1530581028
GitHub93
zig/master 1eda86e Marc Tiehuis: Clean up outstanding compiler_rt todos

1530597206
dbandstra
i'm trying zig on windows for the first time. trying to build the tetris game, but get this "unable to determine windows sdk path"

1530597382
dbandstra
has anyone else dealt with that? (i'm on windows 7 and have vs2017 installed if it matters)

1530598238
dbandstra
from glancing (i'm using the downloaded zig binary) it looks like i have everything os_find_windows_sdk is looking for...

1530604213
andrewrk
dbandstra, I haven't tried to support vs2017 yet since last time I tried to build llvm it didn't work. might be time to try again

1530635310
andi3
I just read

1530635481
andi3
and is there a clear definition of where |value| can be used? I like that syntax in ruby a lot but in zig it seems a bit magic to me becauseI do not know yet how I could write code that exposes such functionality (accessing an element by |...|) by myself, hope that makes some sense?

1530635630
andrewrk
andi3, null is used only with optionals (the ?T syntax)

1530635665
andrewrk
undefined can be cast to any value, and it means the value could be anything, even something that is nonsense according to the type

1530635676
andrewrk
you can check if something is null, but it doesn't make sense to check if something is undefined

1530635726
andrewrk
undefined can be translated to english as, "not a meaningful value. if I try to use this value it would be a bug. I'll either not use the value, or overwrite it later"

1530635856
andrewrk
I'll expand on this in the docs

1530635861
andrewrk
thanks for speaking up :)

1530635912
andrewrk
|value| syntax is not a generic tool that can be used to create a anonymous function, like in ruby. in zig the |x| syntax is valid only in some places and it has syntactic meaning

1530635927
andi3
The docs on error values were nice btw, read them again yesterday and I think I understand most of it

1530636152
andi3
so take `for (items) |value, i| {` if I have a custom data structure can I make it such that it can be used as items ?

1530636241
andi3
and I do not quite understand the usage in such case (same goes for optional examples) `if (a) |value| {` why do you give a a new name? this feels redundant

1530636376
MajorLag1
`a` is an array (or slice), `value` is the name you're assigning to the element you're iterating over in the loop body.

1530636404
MajorLag1
oh wait, I read that wrong, you used `if` not `for`

1530636411
andi3
yes

1530636515
MajorLag1
but it is similar rationale: `a` is a nullable (optional) or error union. `a` is of type `?T` or `!T`. `value` is the name you're giving to whatever the optional or error union is wrapping for use inside the body of the if statement. `a` refers to the union, `value` to the unwrapped payload.

1530636592
andi3
ok but a inside the if could just be the unwrapped value because if would just unwrap it because inside if it's guaranteed to hold a value

1530636684
MajorLag1
`if(a) { a = null; }` would fail in your scenario, because the unwrapped value is not an optional type (it can't be null).

1530636732
MajorLag1
Not that that is a useful example.

1530636827
andi3
hm yes does not quite convince me why this |..| is useful for those if clauses with optionals TBH

1530636855
andi3
can you maybe answer if I can implement this: "so take `for (items) |value, i| {` if I have a custom data structure can I make it such that it can be used as items ?" ?

1530636988
MajorLag1
Only if it is an array or slice under the hood. See `std.ArrayList`. For only works on slices and arrays. The zig way of doing what you want is probably to use `while`: `while(iterator.next()) |val| { ... }`

1530637174
andi3
ok that while with iterator example is not bad but why nut just allow for as well in that case? the return value of next() can be either optional or error union I guess?

1530637332
andrewrk
andi3, I'm not sure I understand your question

1530637355
andrewrk
while and if support these types: bool, E!T, ?T

1530637361
MajorLag1
Yes, though I think the error union case requires an else||{} block to be present too. There's been some debate about using for with iterators, let me see if I can dig up an issue.

1530637366
andrewrk
for supports these types: [N]T, []T

1530637399
andrewrk
that's right - in zig it is syntactically unambiguous which type is expected

1530637409
andrewrk
if (x) {} // must be a bool

1530637423
andrewrk
if (x) |_| {} // must be an optional

1530637436
andrewrk
if (x) |x| {} else |_| {} // must be an error union

1530637448
andrewrk
oops, 2nd x is a typo.

1530637615
andi3
thanks Andrew I think you understood the question because I understand your answer :D

1530637644
andi3
anything about why if(a) |value| requires the unwrapped value to be assigned to a new name?

1530637946
andrewrk
instead of working like kotlin? it's a design decision that makes it explicitly clear that the new name has a different type

1530637964
andrewrk
there are several places where zig is consistent in this way

1530637995
andrewrk
you can use: if (a) |*value|

1530638004
andrewrk
this makes value a pointer to the non-optional part

1530638460
andi3
TBH I have not used kotlin yet although I somewhat wanted to but not had the need for it lately

1530638499
andi3
you can use: if (a) |*value|, yes may I ask why I'd do that? I'd like to think that performance is not the reason because behind the scenes zig will not actually copy the value

1530638590
andrewrk
the value in the | | is read-only

1530638605
andrewrk
so if you want to modify `a`, you use the *value syntax and then you can modify a by writing through the pointer

1530638626
andrewrk
you are correct that zig will not copy the value

1530638678
andrewrk
zig does not have hidden references - you can't modify 2 values at once

1530638738
andrewrk
that's not quite true anymore - passing by non-copying-value might be a hidden reference. but it's undefined behavior to observe this happening

1530638844
andi3
ah ok that makes sense

1530638967
andi3
"There's been some debate about using for with iterators," - that is a bit weird for me but as I already like go I can say that having less features is not bad in the 99% case, but it just feels weird that I can not write a data structure with the same ergonomics as builtins

1530639101
andrewrk
I think the while (foo.next()) |item| {} syntax is good enough

1530639127
andrewrk
if anything I would remove for syntax and add a standard library iterator for arrays/slices

1530639164
andi3
can you squeeze in a counter like for (items) |val, I| that way as well? I missed that in for each loops in java/ cpp a lot and liked in ruby

1530639246
andrewrk
the thing is, the counter in a for loop is exposing something we already need to have, where as adding the syntax for while would be bolting a counter on top of something unrelated

1530639265
andrewrk
which you could  just do in userland by making a variable

1530639287
andrewrk
andi3, for loops in zig have the counter already

1530639308
andi3
I think this is a place where zig would really need interfaces as a language feature to define such iterators for for loops e.g. and make them implementable by users at least this seems the obvious thing to do for me

1530639311
andrewrk
var i: usize = 0; while (foo.next()) |item| : (i += 1) {} // here's your while loop counter

1530639438
andi3
yes of course it's definitely possible already

1530641074
GitHub150
[zig] andrewrk pushed 1 new commit to master:

1530641074
GitHub150
zig/master 27fc49f Andrew Kelley: langref: improve docs for while and undefined...

1530641133
andrewrk
andi3,

1530641271
andi3
Using this value would be a bug - its a bug or actual UB?

1530641471
andi3


1530641588
andrewrk
it's an undefined value, not undefined behavior. but zig makes branching on undefined value undefined behavior - that way zig is allowed to detect it and crash (and also optimize around it)

1530641626
andrewrk
andi3, added to my docs todo list. That's labeled blocks and labeled break.

1530641659
andrewrk
you can think of `break :block_name value` as `return value` except instead of returning from the function it returns from the  block which has the `block_name` label

1530642009
andi3
ok I do not really get it but looking forward to more docs on it :)

1530642132
GitHub141
[zig] andrewrk pushed 1 new commit to master:

1530642132
GitHub141
zig/master 291afcf Andrew Kelley: fix runtime libc detection depending on locale...

1530642345
MajorLag1
andi3, it's a useful construct for assigning a value with logic. For instance, the following would make x an array of 10 u8s from 0 to 9: `const x = blk: { var a: [10]u8 = undefined; for(a) |*e, i| e.* = @intCast(u8, i); break :blk a; }`.

1530642372
MajorLag1
which is a bad example because an array literal would be shorter in this case.

1530642628
andi3
is blk actually a keyword? or is it just some name?

1530642724
MajorLag1
it's a label, so it can be whatever.

1530642745
andrewrk
your_name_here: { }

1530642774
andi3
I think your example made me understand, it was not clear to me that blk: begins and :blk ends a block (that is how I would phrase it now)

1530642785
MajorLag1
also useful for breaking out of nested loops

1530642813
andi3
could you give another example? I'm interested now MajorLag1

1530642824
MajorLag1
I think there's one in the docs, one sec

1530642878
andi3
yes maybe I missed it I'm reading through again as I type

1530642904
MajorLag1
hmm... maybe not. I'll type up soemthing quick.

1530643075
andi3
`<andrewrk> your_name_here: { }` -- that confused me because I now think it always has to be something like `<andrewrk> your_name_here: { some_code_   break your_name_here: ret_val}`

1530643223
andrewrk
search docs for `break :`

1530643303
MajorLag1
here's a completely useless example of breaking from nested loops:

1530643607
andi3
ok well that is pretty much goto ?

1530643635
MajorLag1
you could think of it as a much more limited goto, since you can only break to an outer scope, not an arbitrary label.

1530643832
andrewrk
it's true though, we had goto until this syntax. then goto became unnecessary since this is just as powerful

1530643865
MajorLag1
Well, there's still no way to do computed jumps.

1530643885
andrewrk
that's true

1530643897
MajorLag1
there's a proposal for explicit @tailCall() out there that might take care of that though.

1530643916
andrewrk
oh I hadn't considered that that is equivalent to computed jumps

1530643920
andi3
I think the examples in switch and union where you return a value are different from goto though

1530644105
MajorLag1
A bit. Normally the value of a block is `void`. `var x = {};` sets x to `void`. C lets you do this: `int x = { 10 };`, which would set x to the result of the expression in the block. Zig did that too way early on, but it doesn't clearly express intent, so now Zig uses labeled break for that: `var x = blk: { break :blk 10; };`

1530644226
andi3
actually I think the syntax without blk: is cleaner but once you get used to things it does not matter so ....

1530644260
MajorLag1
it only looks that way because the examples aren't complicated.

1530644315
andrewrk
my reasoning is: occasionally you need the verbosity of explicit block names. so that syntax has to exist. then the question is whether we have additional syntax for the simpler case. in general I am in favor of not having additional syntax.

1530644361
andi3
I kind of hate the word blocks though because I just can not remember the difference between blocks and procks in ruby, poisoned my head, so I would agree with one style for both cases (although this does not really translate 1:1 to ruby, anyway)

1530644402
andrewrk
forget everything you know about ruby

1530644447
andrewrk
if there's a programming language whose design decisions are polar opposite of zig, it's ruby

1530644687
andi3
next thing I want to understand is coroutines and async but without allocators I feel a bit lost in there, after that I'd feel about comfortable starting in zig, I know about the concept of allocators in general but am not clear about how they should be used in zig

1530644838
andrewrk
I agree, we need some "intro to memory management" docs

1530645095
andi3
and the async<...> syntax is a bit ... new? I mean there is nothing like it in the language

1530646560
MajorLag1
It was created as a result of the introduction of async. There are plans to replace parentheses in other parts of the language with <>. For instance `union(enum)` => `union<enum>`, but this hasn't been changed yet.

1530647726
andi3
so the first async example is fine by me

1530647807
andi3
and the abcdefg as well, but the third with the `suspend |p| {         comptime assert(@typeOf(p) == promise->void);         a_promise = p;     }` is again some |...| magic where does p come from? how come p is accessible in the async function?

1530647885
andi3
and when you call `resume a_promise;` it is still undefined as far as I read the code (which is wrong so I miss something of course)

1530651410
MajorLag1
The async call begins execution of testSuspendBlock(), which sets a_promise = p and then suspends, returning control to just after the async call. resume a_promise gives control back to testSuspendBlock() just after the suspend block, which then sets result to true and returns control back.

1530651472
MajorLag1
so a_promise is set to p when resume is called.

1530651744
andi3
so if I do `const p = try async<s..` this does only declare a variable and not yet start the async call afai see, but how can you `resume a_promise;` after that?

1530651774
andi3
I mean what does `suspend |p| {` even do if p is not a local of the function

1530654854
MajorLag1
I think you're getting confused because the same name is used in two separate scopes. The `p` in `const p = try async<s..` will be the promise yeilded by the async function when it suspends. The `p` in `suspend |p| {` is the promise that will be yeilded when the coroutine suspends. They are the same promise in this case, but that is ignored. The code will work the same if you change either name because they are in

1530654999
andi3
I will kook into it again !

1530655003
MajorLag1
`suspend;` alone would also yeild a promise back to the caller. What `suspend |p| {...` does is provide a name for the promise that is going to be yeilded so that it can be referenced in the block.

1530655007
andi3
look into it again

1530655516
MajorLag1
andrewrk: might that code be a little clearer as `_ = try async<std.debug.global_allocator> testSuspendBlock();` and then `cancel a_promise;`?

1530658717
stratact
I'm curious, does Zig have some sort of reference checking like what Rust has? How does Zig do safety?

1530661881
andrewrk
stratact: zig is not safe. It's possible to have a dangling pointer

1530662083
stratact
Are there going to be plans to make it safe in the future?

1530662278
stratact
I mean, having the checking would be a really sweet feature, I just don't see why not

