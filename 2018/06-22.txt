1529626042
GitHub152
[zig] isaachier closed pull request #1147: Fix segmentation fault on invalid enum field (master...enum-invalid-field-fix)

1529630483
GitHub161
[zig] andrewrk closed pull request #1149: fix compiler crash for invalid enum (master...issue346)

1529630483
GitHub123
[zig] andrewrk pushed 1 new commit to master:

1529630483
GitHub123
zig/master be2a4c4 Andrew Kelley: Merge pull request #1149 from ziglang/issue346...

1529637644
vegecode
Actually my question still stands. Is there an equivalent to the -g flag for clang that will map instructions to lines of source code?

1529640383
andrewrk
vegecode: it's on by default. Unfortunately llvm does not support outputting elf files which would embed the debug info

1529640399
andrewrk
I mean llvm does not yet support outputting .o files for msp430

1529640412
vegecode
gotcha. I wasn't sure how that worked. Thanks!

1529640433
vegecode
If I find something in a header that @cImport can't handle, should I report it?

1529640456
andrewrk
Yes, go ahead

1529640465
andrewrk
There may be some existing issues

1529640592
vegecode
The thing it is having trouble with is imported from another header in the same folder. Is that normally something it can do?

1529640990
vegecode
Well I moved the dependency all into the same file and it's still having trouble. I'll figure it out.

1529641485
vegecode
PBOUT_H &= ~(0x80);

1529641513
vegecode
This line fails with error: unable to perform binary not operation on type 'comptime_int'

1529641584
vegecode
If I cast it first to a u8 all is well

1529641594
vegecode
Is that expected?

1529642077
dbandstra
that seems reasonable to me, comptime ints have no size, right?

1529642098
dbandstra
~ would yield an infinity number of 1 bits

1529642297
vegecode
Yeah, even though I've been bitten in C with type inferences before, i still resent the boilerplate.

1529642354
vegecode
I saw the video of the presentation andrewrk did on zig and about how he left out feature requests made by people in order to keep the language simple.

1529642409
vegecode
I personally really like uniform function call syntax as an idea. It would be much quicker to annotate types like 1024.u16 instead of u16(1024)

1529642428
vegecode
Endlessly nested parentheses are very difficult to read.

1529642434
dbandstra
yeah i agree with that

1529642812
andrewrk
vegecode, I think translate-c is missing a cast to c_int there

1529643092
vegecode
that line of code was actually in my zig file

1529643208
vegecode
I finally got a blinking led run by an interrupt. Huzzah! Unfortunately for embedded, volatile is only through pointers in zig so that is going to require some effort to port the header file for the device. Not terribly so, though.

1529643331
vegecode
It's kind of a fool's errand to do this. Most of the msp430s have silicon errata that needs work arounds. I highly doubt llvm's half-baked msp430 backend can do that

1529643360
vegecode
But it's still fun I guess

1529643367
vegecode
Goodnight

1529684691
alexnask
The fact that all graphics APIs apparently depend on libc blows my mind

1529690859
andrewrk
At least on Linux

1529692000
alexnask
@andrewrk Was looking into the current lambda/closure proposals, one I didn't see which is pretty interesting is having using the stack frame pointer of the parent function

1529692037
alexnask
Ofc then the function cannot escape the parent function body

1529692102
alexnask
And I'm not too sure on the LLVM IR for that, I think that's how D nested functions work though

1529692470
MajorLag1
I'm having a tough time with comptime today. `error: cannot store runtime value in compile time variable` when all the variables involved are known at comptime and marked `const`, and the function is called in a comptime block.

1529692496
MajorLag1
I don't know how to make it any more clear to the compiler that this should all be done at comptime

1529693602
MajorLag1
I think it may be syntactically impossible to access the bytes of a type at comptime right now.

1529693770
alexnask
The bytes of a type?

1529693783
alexnask
Do you mean @sizeOf or..?

1529693840
MajorLag1
I mean, take an isize, for instance, and get an [8]u8

1529693868
MajorLag1
or rather, a slice of u8

1529693873
alexnask
Aah right gotcha

1529693924
MajorLag1
No matter what you do the compiler complains that your const value is in fact a runtime value and can't be placed in a comptime variable. you can't use pointer casting to do it because comptime.

1529693961
MajorLag1
The closest I've come is crashing the compiler on a TODO because you can't bitcast to an array type.

1529693967
alexnask
Well, you can pointer cast but not take a slice of it

1529694007
alexnask
Hmm I'm trying to think if the compiler can even do that

1529694008
MajorLag1
ok, you can't use @intToPtr

1529694015
MajorLag1
or rather @ptrToInt

1529694049
MajorLag1
which is where I go when something otherwise can't be done

1529694088
alexnask


1529694093
alexnask
^ this works

1529694109
alexnask
only for 1 byte though, a slice of len 2 yields "error: out of bounds slice"

1529694121
MajorLag1
yeah, I know, I filed that bug this morning

1529694125
alexnask
that's probably because all integer types are bigints under the hood at comptime

1529694141
MajorLag1
even if I explicitly cast it to a regular type?

1529694160
alexnask
Not too sure tbh, I don't think the compiler can handle what you are trying to do at comptime

1529694164
alexnask
Yes

1529694205
alexnask
Casting it only changes the type at comptime, all integer values are bigints

1529694251
MajorLag1
Ok, here's the use case: given a value at comptime, byte-swap it to the endianess oposite of the comile target endianess.

1529694306
MajorLag1
Given what you've told me, maybe i can do it by constructing the byte array from the value at comtime instead of trying to cast.

1529694319
alexnask
Yes, that would be possible

1529694330
alexnask
I think

1529694358
alexnask
The way I would think of it is that the memory layout/representation is not defined at comptime

1529694411
alexnask
So there is no way to take some chunk of bytes and cast it to another type as if you're just talking about  bytes

1529694415
alexnask
if that makes sense :p

1529694634
MajorLag1
yeah, that makes sense, it just wasn't obvious that's how it worked.

1529694662
alexnask
Right, the docs should probably be clearer on exactly what is compatible at comptime

1529694857
MajorLag1
yeah, copying the bytes works as expected.

1529694879
MajorLag1
thanks for the info.

1529694903
alexnask
No problem, would you mind sharing your solution?

1529694994
alexnask
I'm wondering if we can do some compiler side magic when casting specific types (like integers) to [*]u8

1529695018
alexnask
Or to [*]const u8 prov

1529695021
alexnask
prob*

1529695591
MajorLag1
the solution is that I took the value and did the appropriate bitshifting to dump it into a comptime created array.

1529710733
fubd
zig looks like my jam! what's the wasm story so far?

