1536537613
cgag
should that work?

1536610805
andrewrk
cgag, I'll have a look

1536610813
andrewrk
it certainly shouldn't assert

1536610858
andrewrk
cgag, this might be zig tryign to represent Expr differently since the enum tag can only possibly be one thing

1536610935
andrewrk
cgag, yeah, you can work around it by adding a dummy field to Expr

1536610955
andrewrk
this is a bug

1536614417
cgag
in the real code the Expr type has 4 different tag possibilities, and doesn't assert but instead i end up hitting `access of inactive union field`

1536614462
cgag
that's just pruned down as small as i could make it, and i assume closer to the root of whatever's going wrong

1536614530
andrewrk
cgag, those are 2 different issues, and I'm not sure that the inactive union field access is a bug

1536614544
andrewrk
you have to reassign over the entire union to change the active tag

1536614553
andrewrk
can i see the code with that problem?

1536614573
cgag
let me see if i can find a smaller way to show it real quick

1536614630
andrewrk
cgag, here's an example of changing the active field of a union:

1536615264
cgag
i'm pretty sure it's not that,

1536615280
cgag
it's kind of a huge mess, but zig test parser.zig will trigger the inactive field access

1536615281
andrewrk
I get a 404 for that URL

1536615285
andrewrk
is it private?

1536615341
cgag
woops, should be public now

1536615537
unique_id
andrewrk: Is this a bug?

1536615578
andrewrk
if it asserts it's a guaranteed bug - I think you're asking if it's supposed to be a compile error or not

1536615608
unique_id
no I just thought maybe it's asserting because it hasn't been implemented :)

1536615627
unique_id
but then the assert would say that

1536615634
andrewrk
usually I'll try to have the message say "TODO" in it for those cases

1536615651
andrewrk
yeah that's supposed to be a compile error - opaque types don't have sizes, so they can't be fields in a struct

1536615664
andrewrk
and it's always a bug if translate-c generates code that has compile errors

1536616033
andrewrk
cgag, ah I see, this should be impossible since you just switched on it

1536616159
andrewrk
looks like zig is generating bad data for the global constant test_lit_true_bool

1536616241
andrewrk
cgag, this is a nasty bug, my apologies. here's a workaround:

1536616296
andrewrk
this might be

1536616819
andrewrk
cgag,

1536616847
andrewrk
unique_id, I gotta run, can I trouble you to file a bug report with your test case?

1536616866
cgag
interesting workaround

1536616875
cgag
thanks, for making the issue, will take a look at that

1536616898
cgag
i need to learn how to use gdb

1536616906
andrewrk
it's pretty great

1536616910
andrewrk
I highly recommend investing in it

1536616937
andrewrk
these "silent wrong data/code" bugs are really high priority

1536616944
andrewrk
really appreciate the report

1536616991
cgag
i've gotten by with printfs in higher level languages but hitting stuff like this leaves me completely stumped

1536617062
andrewrk
yeah it's tough using an early beta language. there are some assumptions you can no longer trust perfectly, such as "the compiler is never wrong"

1536617117
andrewrk
my goal is for there to be 0 bugs for the 1.0.0 release

1536617141
andrewrk
and not just known bugs - we'll use code coverage, fuzzing, and anything else we can think of to surface issues

1536617175
cgag
it's fun though, i like that doing these learning projects doubles  way to contribute

1536617220
cgag
yeah i'm definitely interested to see what fuzzing can do, learning more about that's been on my todo list for a while

