1527562818
andrewrk
darithorn, no runtime reflection - but you can use comptime reflection to create a lookup table that you can use at runtime

1527562979
darithorn
good idea i didn't even bother thinking about doing that.

1527578156
GitHub109
[zig] andrewrk pushed 6 new commits to master:

1527578156
GitHub109
zig/master 77ec81b Andrew Kelley: zig fmt: respect line breaks in if-else

1527578156
GitHub109
zig/master 71badeb Andrew Kelley: zig fmt: respect line breaks after infix operators

1527578156
GitHub109
zig/master 354ab1c Andrew Kelley: zig fmt: render fn decl with trailing comma 1 line per param

1527579353
GitHub44
[zig] andrewrk pushed 1 new commit to master:

1527579353
GitHub44
zig/master cd325e4 Andrew Kelley: zig fmt: fix extra space after comma before multi line string

1527581044
GitHub27
[zig] andrewrk pushed 1 new commit to master:

1527581044
GitHub27
zig/master cdf30c3 Andrew Kelley: zig fmt: fix implementation of firstToken() for fn call

1527582264
GitHub93
[zig] andrewrk pushed 1 new commit to master:

1527582264
GitHub93
zig/master 0c16cd2 Andrew Kelley: run zig fmt on the codebase...

1527587941
GitHub54
[zig] tiehuis opened pull request #1026: Machine readable errors (master...machine-readable-errors)

1527612200
darithorn
when I create a generic struct e.g. `fn Foo(comptime T: type) type` in a local scope is that struct and any functions in it "freed" at the end of the scope?

1527612591
isaachier
presumably it is stack allocated

1527612614
isaachier
no "freeing" really needed

1527614671
andrewrk
darithorn, declaring a struct is a compile-time operation

1527614694
darithorn
that's what i figured and that i didn't need to worry. I just wanted to make sure

1527614694
andrewrk
types do not take up any space at runtime

1527614787
darithorn
I create a generic struct that creates a generic function and I pass that function into a c library that stores that function pointer for later use

1527614827
darithorn
pretty much like a callback system

1527614916
andrewrk
darithorn, the pointer will be pointing to a statically known address in your binary

1527614957
andrewrk
every instance of the generic function exists when your program starts

1527614984
andrewrk
it's pretty convenient, eh? :)

1527615133
darithorn
yeah. if I could just figure out how to register those callbacks automatically, given a struct type, then this would be perfect

1527615187
andrewrk
you probably need to generate a list at compile-time of fn ptr and other data needed to register, then on startup iterate over this list and call the C functions to register them

1527615282
darithorn
that's what i did normally but it meant that all my zig functions would have to have the same signature and it was just a mess

1527615339
darithorn
i wanted to create a wrapper, which is what that generic function from earlier does (just manually)

1527615368
andrewrk
feel free to link me to your code if it's open source and I'll see if I can make any suggestions

1527615411
darithorn
i'm working on a binding/wrapper for the godot engine

1527615581
darithorn
the c++ wrapper for godot engine does similar where it wraps the method

1527615583
darithorn


1527615664
darithorn
I have it working manually, where you call registerMethod for every function you want to register to the engine but I'm trying to automate it so a single call to `registerClass` would register every function for you

1527615724
andrewrk
I'm pretty sure it is possible

1527615798
darithorn
the problem i'm having trouble getting over is wrapping them. if you don't wrap them then every function has to have a signature of `(godot_object *, void *method_data, void *user_data, int num_args, godot_variant **args)`

1527615925
andrewrk
here's an example of wrapping in zig std lib:

1527616507
darithorn
i do similar right now. here's my code for registerMethod:

1527616528
darithorn
an example using it is line 239

1527616546
darithorn
and GodotMethod is defined line 23

1527616911
andrewrk
oh I see what's going on

1527616925
darithorn
haha sorry for the rough code

1527616958
andrewrk
line 204 looks like it would benefit from

1527616989
darithorn
yeah i'm waiting for that change. it would definitely make parts a little cleaner

1527617278
darithorn
the godot api uses a struct containing function pointers so I have to use ?? twice:

1527617338
andrewrk
having to use ?? is common when doing direct .h file imports. but if you are making a wrapper (which it looks like you are doing) then I recommend using `zig translate-c` and save the output. Then you can clean it up by removing `?` from some pointers

1527617355
andrewrk
if you're going through the trouble of making a wrapper, I think it's better to avoid @cImport

1527617492
darithorn
true, i didn't think about that. i'll do that once i start cleaning this up after i get it mostly working

1527617563
darithorn
and yeah i am making a wrapper. using the c api godot exposes directly is very ugly. this is one of their examples:

1527619743
isaachier
I was try to implement a regex engine for zig using pcre but I found the output of translate-c was a bit too C-like to be idiomatic.

1527619760
isaachier
trying*

1527619830
isaachier
Started a new one from scratch in pure zig here:

1527619858
andrewrk
isaachier, did you see tiehuis's engine?

1527619864
andrewrk


1527619906
isaachier
no but awesome. mine was more for my own learning anyway. haven't really invested that much time into it.

1527619922
andrewrk
neat

1527619940
andrewrk
I'd be interested int trying to make one that supports compiling at comptime

1527620018
isaachier
ya that was my thoughts as well. comptime compilation/jit would be fantastic.

1527623714
Skilfingr
When the compiler quits with "unreachable" (then crashs), what is the meaning? What is the best way to find out why?

1527624118
Skilfingr
I guess my question should be, how can i write log messages while compiling

1527624136
darithorn
you can use @compileLog

1527624275
Skilfingr
thx. somehow i did not find it. only @compileError

1527624346
darithorn
also my process is to add small bits of code at a time and compile often. that way if i run into an `unreachable` or similar then i know it's from the last few lines of code i added

1527624576
Skilfingr
I try to create a gl loader by modifying an existing generator for c. I generated a ton of errors and try to solve them step by step. Now I do not know till where did the compiler run. But I will find out now :D

1527625791
andrewrk
Skilfingr, you can find out where it crashed with gdb

1527625809
andrewrk
usually there is an IrInstruction or an AstNode which you can use to track down source file, line, column

1527625827
andrewrk
to be clear, this is a compiler bug when this happens

1527629980
GitHub6
[zig] andrewrk pushed 1 new commit to master:

1527629980
GitHub6
zig/master d172e3f Andrew Kelley: fix AtomicFile for relative paths...

1527631893
GitHub32
[zig] andrewrk pushed 1 new commit to master:

1527631894
GitHub32
zig/master b0eebfa Andrew Kelley: fix syntax of std/json_test.zig...

1527633945
darithorn
how do i turn a c pointer that is an array to a zig array? i.e. *int to []i32

