1530060427
andrewrk
oats, yes

1530060462
andrewrk
if anyone wants to code review the Channel implementation I just made:

1530060465
andrewrk
I haven't tested it yet

1530060574
andrewrk
this is the zig equivalent of a go channel

1530067134
vegecode
In the documentation for @import it says that the path is relative to the path of the file that contains the include statement. This could get cumbersome. Is there a way to add a search path for includes? I tried -L<path> but no dice.

1530069133
oats
I like how tab characters are illegal

1530069140
oats
nice

1530069409
tiehuis
vegecode: use `-isystem` for now for cImports

1530069430
tiehuis
if you mean for zig packages themselves, i believe you want to use pkg-begin to create an alias for a directory

1530071286
vegecode
|| unreachable: /deps/zig/src/ir.cpp:const_ptr_pointee:131

1530071291
vegecode
any idea what this means?

1530071358
vegecode
I'm trying to do some auto conversion of msp-gcc headers

1530071367
vegecode
I'm creating a lot of lines like this:

1530071368
vegecode
pub const ADC10CTL0 = @intToPtr(*volatile u16, ADC10CTL0_ld);

1530071395
vegecode
and then using it like: pub const ADC10CTL0_ld: u16 = 0x0740;

1530071426
vegecode
Actually those lines are backwards. Creating bottom line and then using in intToPtr cast line I mean

1530071704
vegecode
I'm trying to make an MMIO header basically. I have a bunch of hardcoded addresses. I want them to be volatile pointers.

1530072398
vegecode
Update zig to latest pre-built binary and the line is line 166.

1530072434
vegecode
which corresponds to:         case ConstPtrSpecialHardCodedAddr: zig_unreachable();

1530073384
vegecode
also, I can't build the zig compiler. I get the error -- Could NOT find CLANG (missing: CLANG_LIBRARIES CLANG_INCLUDE_DIRS)

1530073408
vegecode
I tried doing export CLANG_INCLUDE_DIRS=/usr/lib/llvm-6.0/include/

1530073416
vegecode
I don't really understand cmake

1530073442
vegecode
I would try and fix the error myself if I could build zig

1530073675
vegecode
I'm feeling silly now. I just added the line set(CLANG_INCLUDE_DIRS /usr/lib/llvm-6.0/include) to the top of the CmakeLists.txt file.

1530075575
vegecode
When I do the same compile with the locally built current master 4de60dde I get a segmentation fault

1530080981
andrewrk
vegecode, sorry, all these bugs must be frustrating

1530080988
andrewrk
we'll have to squash them one by one

1530081803
dbandstra
andrewrk, is there a way to write my build.zig so that i can get a binary that runs tests?

1530081810
dbandstra
andrewrk, this is my current build.zig

1530081834
dbandstra
i'm getting a weird crash when running `zig build test` and i think if i had a binary i could debug it

1530081844
dbandstra
not really sure though

1530081856
andrewrk
you can use `zig build --verbose` to see the command it runs

1530081862
andrewrk
and then run that directly (perhaps in a debugger)

1530081876
andrewrk
zig build test --verbose

1530082186
dbandstra
hmm ok

1530082204
dbandstra
i guess it's failing at runtime. i got this much info 'Stop reason: signal SIGSEGV: address access protected (fault address: 0x241328)'

1530082218
dbandstra
not sure if there's any more i can get

1530082257
dbandstra
probably copied a struct by value somewhere or something

1530082406
andrewrk
a debugger (gdb on linux, lldb on mac, msvc on windows) should be able to give you a useful stack trace

1530082620
dbandstra
hmm yeah i'm debugging with vscode and lldb

1530082644
dbandstra
i'm wondering what it means when it says the value of a function pointer is "<not available>"

1530082663
dbandstra
does that mean it's null/garbage, or just that it can't print a function pointer

1530082693
dbandstra
(talking to myself)

1530083370
dbandstra
will have to come back to it tomorrow

1530083735
andrewrk
it means the debugger wasn't capable enough to understand the debug info, or the debug info wasn't good enough to describe the value

1530084687
very-mediocre
is there an idiomatic preference for streams vs coroutines for iterable data?

1530084759
very-mediocre
i feel byte-at-a-time will be slower as a "generator"/coroutine but multiplexing in languages such as golang offset this greatly

1530084920
very-mediocre
(and of course the input would be buffered)

1530085086
andrewrk
it's hard to make a generalization

1530085104
andrewrk
I have some more experimentation to do with coroutines before I can fully answer that question

1530085126
very-mediocre
okay, i was thinking in terms of language design at least

1530085134
very-mediocre
coroutines are "sexier"

1530085188
very-mediocre
but there's obviously a tradeoff

1530085199
very-mediocre
anyway, I'll toy around with it too

1530085210
very-mediocre
(knowing that coroutines are not yet optimized)

1530085444
andrewrk
I'm testing this Channel abstraction that I made today. It should be pretty useful for concurrency with coroutines

1530085481
very-mediocre
i saw it, looks cool

1530085488
very-mediocre
i was just looking at golang channels yesterday

1530085502
very-mediocre
one nice thing golang has is "select"

1530085517
very-mediocre
which sort of like "load balances" between channels

1530085567
very-mediocre
it's like a switch statement that has a block for different channels

1530085586
very-mediocre
and it enters the block for whichever channel has data ready to be consumed

1530085668
very-mediocre
it feels less deterministic than async/await though

1530085739
very-mediocre
it's more of a listener model.

1530086195
andrewrk
hmm I should be able to add "select" support in userland

1530086231
andrewrk
I can't think of when I would need it though

1530086316
very-mediocre
when channel bottlenecks vary, and you want to do whatever is ready first

1530086341
very-mediocre
the most obvious example is for a task-worker kind of thing

1530086346
very-mediocre
with different types of workers

1530086376
very-mediocre
say you have MailWorker and NotificationWorker

1530086409
very-mediocre
in node you wouldn't want to do `await MailWorker.get(); await NotificationWorker.get()` in sequence

1530086447
very-mediocre
you'd end up using events

1530086460
very-mediocre
it's a bit boilerplatey

1530086517
very-mediocre
actually I'm doing something like this in one of my node projects

1530086522
very-mediocre
select would've been nicer

1530086571
very-mediocre
don't mean to ramble, so i'll clarify a bit briefly

1530086593
very-mediocre
in the project there's a beanstalkd queue with various jobs being pushed into it

1530086602
very-mediocre
of different types, which need to be handled by different kinds of workers

1530086652
very-mediocre
and the dispatching of work is pretty ugly, it's separate statements for listening to each kind of event

1530086663
very-mediocre
and invoking the correct kind of worker

1530086712
very-mediocre
in golang the entire abstraction of listening to events from a channel is built-in

1530086754
very-mediocre
you just `select` on some channels as if it were a synchronous select, and whichever channel has something enqueued has its block run

1530086762
very-mediocre
sorry if i'm too wordy, I suck at describing these things

1530086847
very-mediocre
tl;dr: in go, listening to channels is implicit, you don't need to explicitly subscribe to events, the channels themselves are also the events

1530087052
very-mediocre
in node you'd either not use async/await at all here (and weave a tangled web of `.then` handlers) or use a combination of explicitly listening to events and `awaiting` results

1530087770
very-mediocre
i re-read that and reaffirm that i am terrible at describing these things, lol

1530087822
very-mediocre
actual tl;dr: in golang you can dispatch centrally which is much nicer than using `.then`

1530087946
very-mediocre
...and also much nicer than dispatching custom events and consuming them

1530088278
very-mediocre
actually andrewrk, how would you handle something like this in zig?

1530088284
very-mediocre
there's no .then

1530088307
very-mediocre
say you want to receive jobs from different queues/channels

1530088321
very-mediocre
you can't `await` them in sequence

1530088334
very-mediocre
and you can't do a .then on each one of them to have its own handler when the job comes in

1530088402
andrewrk
hmmm let me think

1530088556
andrewrk
you do event_loop.onNextTick() on an async function handler for each channel

1530088575
andrewrk
the event loop runs all the async functions, which all await their respective channels

1530088598
andrewrk
and then when the respective channel gets something put in it, it will resolve

1530088673
very-mediocre
ahh, so you're explicitly scheduling it

1530088703
andrewrk
yeah because the event loop is in userland

1530088753
very-mediocre
okay, i see

1530088913
very-mediocre
i'm sure this could be abstracted into a select if needed

1530088928
very-mediocre
also in userland

1530089043
andrewrk
good night

1530089063
very-mediocre
bye

1530097753
metaden
hi everyone

1530097777
metaden
New to zig.

1530105429
oats
metadenâ€º me too!

1530105434
oats
kinda neat, isn't it

1530106903
kevw
andrewrk: I was reading the thread local proposal on github (

1530109373
metaden
@intToPtr does not work

1530109382
metaden
*i32 does not exist

1530109422
metaden
oats, ya

1530109874
metaden
docs are not updated to 0.2

1530109876
metaden
for ex:

1530109925
metaden
test "volatile" {     // In Zig, loads and stores are assumed to not have side effects.     // If a given load or store should have side effects, such as     // Memory Mapped Input/Output (MMIO), use `volatile`:     const mmio_ptr = @intToPtr(*volatile u8, 0x12345678);      // Now loads and stores with mmio_ptr are guaranteed to all happen     // and in the same order as in source code.     assert(@typeOf(mmio_ptr) == *volatile u8); }

1530109925
metaden
this is correct.

1530111326
MajorLag1
@intToPtr does work. 2.0 is wildly out of date compared to current master. Documentation you quoted is from master.

1530111346
MajorLag1
documentation for 2.0 is here:

1530111359
MajorLag1
s/2.0/0.2.0/g

1530111420
oats
MajorLag1â€º really, that's slightly discouraging

1530112030
MajorLag1
There are quite a lot. I'm not aware of any single list, most of it is scattered across github issues. Pointer syntax was entirely changed, explicit casting now uses builtins, and @typeInfo was added are the biggest changes I can think of offhand.

1530112275
MajorLag1
here's the issue regarding pointer changes:

1530112601
metaden
awesome. this is just what i need now

1530112602
metaden
thanks

1530112705
metaden
how far is latest github branch from 0.2 in terms of syntax changes

1530112706
metaden
?

1530113334
GitHub144
[zig] tgschultz opened pull request #1162: Fix up some std.rand syntax #1161 (master...master)

1530113806
MajorLag1
metaden, it's a bit subjective, but I'd say "extremely". There have been 637 commits since 0.2.0.

1530113870
metaden
oh...for now maybe i will stick with 0.2

1530113969
MajorLag1
Maybe extremely is a bit of a stretch. My code all has a lot of pointers and casting, so it was a lot of changes for me.

1530114164
MajorLag1
Personally, I'm always on master.

1530114719
MajorLag1
Ugh, I pasted the wrong link for poitner changes, sorry:

1530116962
GitHub2
[zig] andrewrk pushed 5 new commits to master:

1530116963
GitHub2
zig/master 1f45075 Ben Noordhuis: dry floating-point type definitions

1530116963
GitHub2
zig/master 0ebc7b6 Ben Noordhuis: scope variables in floating point cast tests...

1530116963
GitHub154
[zig] andrewrk closed pull request #1159: add f16 type (master...f16)

1530116963
GitHub2
zig/master fd75e73 Ben Noordhuis: add f16 type...

1530117030
GitHub51
[zig] andrewrk closed pull request #1162: Fix up some std.rand syntax #1161 (master...master)

1530117032
GitHub185
[zig] andrewrk pushed 1 new commit to master:

1530117033
GitHub185
zig/master 3e94347 tgschultz: Fix up some std.rand syntax #1161 (#1162)...

1530118813
GitHub27
[zig] andrewrk pushed 1 new commit to master:

1530118814
GitHub27
zig/master 6f88ecc Andrew Kelley: add f16 to langref

1530119831
GitHub196
[zig] andrewrk pushed 1 new commit to master:

1530119831
GitHub196
zig/master 19961c5 Andrew Kelley: fix comptime @tagName crashing sometimes...

1530139588
GitHub30
[zig] andrewrk pushed 1 new commit to master:

1530139588
GitHub30
zig/master 2fa588e Andrew Kelley: fix coroutine accessing freed memory...

