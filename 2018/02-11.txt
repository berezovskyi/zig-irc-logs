1518312984
lorde_kumamon[m]
So, is IRC still the main place for discussion?

1518313525
andrewrk
lorde_kumamon[m], yes

1518313541
lorde_kumamon[m]
Great

1518313614
lorde_kumamon[m]
I was a happy Rust user, but I'm going back to C++. I don't want anything with that community ever again. So I'm lurking for alternatives that might become ready to replace C++.

1518313660
lorde_kumamon[m]
A friend suggested Zig, so I saw there is an IRC room and I came here, but I'm still reading the site

1518313706
andrewrk
zig is young compared to rust

1518313740
andrewrk
but the language is much simpler, so we can move fast

1518313832
lorde_kumamon[m]
I'm curious about thing. That's why I joined the IRC channel. I won't have this answer lurking in the project pages

1518313882
lorde_kumamon[m]
I'm okay working with people from different political views. Projects should always stay technical (lile Torvalds attitude: show me the code)

1518313888
lorde_kumamon[m]
But Rust community is a cancer that I can no longer bear

1518313908
lorde_kumamon[m]
It's everywhere from the today's noob to all leadership team

1518313926
andrewrk
lorde_kumamon[m], what you are talking about is offtopic here

1518313927
lorde_kumamon[m]
And the problem there is: they mix politics with technical debate

1518313950
lorde_kumamon[m]
andrewrk: great. This already answer my question. Thanks very much.

1518314606
GitHub68
[zig] andrewrk pushed 2 new commits to master:

1518314607
GitHub68
zig/master 46aa416 Andrew Kelley: std.os and std.io API update...

1518314607
GitHub68
zig/master 8c31eaf Andrew Kelley: std zig tokenizer: don't require 3 newlines at the end of the source

1518316685
MajorLag_
andrewrk: I think it would be useful to be able to return an instance of a struct that's defined within the function returning it. Compiler doesn't seem to like this. Am I missing something or is it just not a thing?

1518316774
andrewrk
MajorLag_, what did you put for the return type?

1518316832
MajorLag_
I'll make a paste quick

1518317097
MajorLag_


1518317194
MajorLag_
I actually forget what I was really trying to do with this this morning. I was trying to see how terse a closure implementation I could make in Zig I think and this came up.

1518317232
MajorLag_
It was an exercise, I actually don't find much use for closures.

1518318468
andrewrk
MajorLag_, that seems like a pretty reasonable error - trying to access a variable that is out of scope

1518318485
andrewrk
you'd need support for inferred return type to do that

1518319036
MajorLag_
I'm not chomping at the bit for it or anything, it was just something that came up. That and either tuples or a way to comptime generate structs with variable numbers of fields. None of this is anything I actually really want mind you.

1518328194
MajorLag_
How does this proposed pointer syntax work with the null? var v: []null T ?

1518328301
andrewrk
MajorLag_, yeah

1518328370
andrewrk
it's extra information in the slice type that guarantees a null at v[v.len]

1518328517
MajorLag_
Ok, and the new array syntax is for stack allocated fixed length arrays. So [] always means it's a pointer. Right?

1518328915
andrewrk
not necessarily stack allocated. global storage too

1518328930
andrewrk
but yes [] always means it's a pointer, that's the idea

1518330913
MajorLag_
it feels a little weird, but it makes sense.

1518331354
MajorLag_
?^?[*]null u8   for C's **char...

1518331639
andrewrk
MajorLag_, you mean like the argv array that gets passed to main?

1518331671
andrewrk
it would be:    [*]null [*]null u8

1518331993
MajorLag_
there are other contexts for **char, like changing the actively displayed string based on what you're mousing over or whatever. Don't get me wrong, the fact that there are multiple meanings of **char is good evidence why this is better.

1518332691
andrewrk
ah I see

1518332837
andrewrk
oh yeah I'm missing the nullability too, in the argv example:   ?[*]null ?[*]null u8

1518344939
GitHub82
[zig] andrewrk pushed 1 new commit to master:

1518344939
GitHub82
zig/master e743b30 Andrew Kelley: std: refactor posixOpen to be friendlier to error return traces

1518366877
andrewrk
I'm doing a live stream in 25 minutes:

1518368240
MajorLag_
Sadly I won't be able to stay long as I have a prior engagement. I will watch the vod later.

1518368600
jfo1
andrewrk: I'm in twitch just figuring out logging in thanks for the shoutout!

1518368878
jfo
:+1:

1518368884
jfo
yes

1518376802
vegard
o/

1518377761
andrewrk
hi vegard

1518377892
andrewrk
vegard, let me try to come up with a source example to answer your question

1518378756
vegard
something like this?

1518378875
vegard
so in the C equivalent, if you just did: const int *xptr = &x; then this would generate a relocation to x where xptr is defined, right?

1518378904
vegard
and the question is, when you replace that &x by a function call (which is evaluated at compile time), and especially when you combine that with cross-compilation, does it still manage to output a relocation?

1518379158
andrewrk
vegard, here's updated zig code with the llvm output:

1518379329
andrewrk
I found a related bug when looking into this, but apart from this bug (which I'm about to fix) the answer is yes it all works, even when cross compiling, because llvm supports that

1518379461
vegard


1518379480
vegard
I'd be curious to see the objdump -Dr for the zig-generated object file

1518379548
vegard
and I still don't really understand how it would work when x_ptr is initialised through a function call :-D but if it does, then that's wonderful.

1518379708
andrewrk
vegard, here's the objdump:

1518379825
vegard
so where is x_ptr? maybe it has to be used by something or exported somehow?

1518379844
andrewrk
it ended up being unnamed

1518379854
vegard
oh I see

1518379879
vegard
I wonder why. shouldn't it be accessible as x_ptr if linking with other object files?

1518379891
andrewrk
ah, in order to do that you need the export keyword

1518379903
andrewrk
nothing is visible to other object files unless you use export

1518379909
vegard
I see

1518379985
andrewrk
...and there's a bug, because even with export it is unnamed. I'm looking into this now

1518380052
vegard
alright, cool :-) don't worry too much for my sake though, I'm just curious

1518380111
vegard
I've been working on a compiler too (only have ~2k loc so far, so I'm far behind!) and I've been stuck on this exact issue for months.

1518380162
andrewrk
ahh I see

1518380220
andrewrk
yeah it's really tricky

1518380282
andrewrk
it might be instructive to look at the ConstExprValue struct:

1518380326
andrewrk
notably, if it's a pointer, it knows information about its parent, such as, am I pointing to the 3rd array item of something, or the 4th field of a struct

1518380569
andrewrk
vegard, I have the same bug if you do `export var x_ptr = &x;`

1518380578
andrewrk
so the compile time stuff is working fine, this is something else

1518380683
vegard
ah, hm

1518380850
vegard
I think maybe my problem is that I'm trying to actually JIT-compile everything that gets executed at compile time

1518380876
vegard
since that doesn't preserve any of that "parent information", it only works on the raw byte values (as compiled code would do)

1518380911
andrewrk
ah I see

1518380922
andrewrk
yes, zig compile time execution is very much interpreted

1518380941
andrewrk
and safe - you can't crash the compiler with it

1518380951
andrewrk
well, in theory you can't. there are defintely bugs right now :)

1518380979
vegard
so if you had a struct type with a pointer member, is the size of that struct different at compile time from what gets put into the binary?

1518381004
andrewrk
the pointer size is known at compile time

1518381034
andrewrk
I don't think I understand the question

1518381052
vegard
I mean if you had (using C syntax) struct foo { int *p; }; struct foo a = ...; struct foo b = a; then that would generate a copy of a and store it in b. that copy would not be a straight memcpy, but it would also have to copy that extra "parent information"

1518381070
vegard
so the actual size of the struct is larger than just the raw byte values

1518381078
andrewrk
you're thinking of it in terms of JIT still

1518381086
vegard
probably :-P

1518381097
andrewrk
in zig we have this extra information but we preserve the semantics of the zig code as if the struct were how it would act at runtime

1518381148
andrewrk
there is no actual struct at compile time

1518381157
vegard
ok, I see

1518381165
andrewrk
it's this ConstExprVal thing. and we use it to implement every operation that you can do with a struct in zig code

1518381196
vegard
there is no operator overloading in zig, right?

1518381199
andrewrk
correct

1518381276
vegard
so if you allocated an N-size array of int pointers at compile time, you would actually have to allocate a lot more memory than just N * sizeof(int), right?

1518381278
andrewrk
vegard, one thing that I think is unique to zig's compile time execution is how printf works

1518381288
andrewrk
I'd be curious how you plan to do it in v

1518381312
andrewrk
that's correct, it would implement N * sizeof(ConstExprVal)

1518381325
andrewrk
s/implement/allocate/

1518381386
andrewrk
we can potentially do an optimziation where we try to only allocate N * sizeof(int), but if you for example take a pointer to one of the elements, we'd have to expand this out

1518381395
andrewrk
we do this optimization if all the elements are the value undefined

1518381449
andrewrk
vegard,

1518381466
vegard
yeah, as I said I don't really have a solution that works myself! so maybe this extra information and interpreting it is the solution

1518381537
vegard
I just had this feeling that if something can be done efficiently at run-time, then it should be possible to do it equally efficiently at compile time.

1518381605
vegard
and I mean, it is, clearly. but for cross-compilation especially you would need some shuffling/marshalling of the data when you want to output the object file.

1518381636
andrewrk
for one off things, interpreting is often faster

1518381643
andrewrk
JIT only starts to pay off if you have some loops

1518381707
vegard
yeah but what if you program needs the first 10k prime numbers? well, you would probably cache it.

1518381728
vegard
it still feels like something you should be able to do without having to invoke the compiler twice.

1518382073
andrewrk
yeah you just cache it, same as how you will cache analysis of functions

1518382094
andrewrk
zig caches all compile time function calls

1518382108
andrewrk
it's part of the semantics, so that functions which return types, can return the same type

1518382723
MajorLag_
andrewrk: re: pointer reform and the ^ symbol. Would you be willing to consider alternatives for a dereference operator? If so, you could take back * for "pointer to a single thing".

1518382757
MajorLag_
and it would have nice symetry: *T, [*]T, [*]null T

1518382789
andrewrk
MajorLag_, that's pretty good. what would you propose for the deref operator?

1518382948
andrewrk
you know what

1518382981
andrewrk
we could allow implicitly dereferencing a pointer

1518382986
andrewrk
given that it only points to 1 thing

1518383021
andrewrk
that's a separate issue

1518383027
andrewrk
we still need a deref operator

1518383116
MajorLag_
Not sure you'll like my suggestion, but ".". accessing a struct field in Zig is struct.field regardless of "struct" being a pointer or not, so "." already sorta dereferences. As a postfix operator it also has the potential to be clearer: (*a).b.c => a..b.c //where a is &&struct; a*b**c //where c is &i32  =>  a*b*c.;  of course, then you'll need to change the slice range operator, conveniently -> is available: var s = array[x->y];

1518383164
andrewrk
interesting

1518383200
andrewrk
return a.;

1518383202
andrewrk
it's a little subtle

1518383213
MajorLag_
regardless of what a new deref operator would be, I do like * for pointers. everyone is used to them, they don't have the keyboard issues of ^ and it's got nice consistency with the new block pointers

1518383219
MajorLag_
ayeah, there is that

1518383338
MajorLag_
I thought of backtick, but it has similar keyboard issues to ^ from what I can tell and it is also subtle.

1518383451
andrewrk
I do like the * idea, i'll think of some ideas for deref

1518383534
andrewrk
what about `[0]` postfix

1518383621
MajorLag_
it's very C. My thought would be that it makes whatever you're dereferencing look like it's a block.

1518383819
andrewrk
yeah that's true

1518383844
andrewrk
maybe * postfix?

1518383853
andrewrk
a* += 1

1518383896
andrewrk
vegard, I fixed the bug and here's the updated gist:

1518383924
MajorLag_
a*=1?

1518383937
andrewrk
where a has type *i32

1518383947
andrewrk
oh I see your point

1518383965
andrewrk
the space would matter *= vs * =

1518383970
andrewrk
it's a flaw

1518384001
andrewrk
generally you should not be able to click somewhere, insert a single space, and then have the code still compile successfully but have different results

1518384014
MajorLag_
yeah, I'd agree with that

1518384375
MajorLag_
Ok here's a though, if Zig implicitly dereferences a single poiner (&i32 vs &&i32), maybe ^ isn't a big deal to use for postfix deref?

1518384388
MajorLag_
No, wait, Zig has ^=

1518384756
MajorLag_
On that note, if zig implicitly derefs a single pointer, then maybe mandating the use of ()s when derefing isn't so bad. (a*) = 1; but only if a is **i32. if a is *i32 then: a = 1;

1518384787
MajorLag_
Not sure it's a great idea to obscure pointers that way, but it's done for structs already.

1518384973
MajorLag_
problem with implicit deref is, if a and b are both &i32: a = b; is ambiguous.

1518385212
MajorLag_
unless of course you want to introduce a new operator for "change where this pointer points", which I'd rather not.

1518385331
MajorLag_
although: a->b; a->&c; ...

1518385342
andrewrk
MajorLag_, I don't think we would make a = 1 work when a is a pointer, but maybe we would allow it if passing to a parameter that wants a i32 you could pass a  *i32

1518385365
MajorLag_
ah, I see. that makes sense

1518385591
GitHub24
[zig] andrewrk pushed 1 new commit to master:

1518385591
GitHub24
zig/master f2d6016 Andrew Kelley: fix exported variable not named in the object file...

1518386026
MajorLag_
a> = 1;  a>.b.c;  a*b*c>;  double deref would have to be (a>)>. Don't think it conflicts with logic, var x = a>b; would be invalid if interpreted as (a>)b. I dunno, it's a tough problem.

1518386172
andrewrk
man. people would complain about that so hard

1518386251
MajorLag_
people complain about anything, but yeah, we can probably do better.

1518386262
andrewrk
just throwing some more ideas out there

1518386275
andrewrk
[0] for block types like [*]

1518386283
andrewrk
.0  for *

1518386326
andrewrk
postfix [x] is definitely the correct way to deref block pointers

1518386379
andrewrk
I'm warming up to . postfix too

1518386426
andrewrk
I'm fine with [start:end] being the slice syntax

1518386436
MajorLag_
[0]T makes sense enough I think. A zero length array otherwise being meaningless. When you say .0 for *, we've thrown around so many variations I'm not sure what you're referring to. .0 as a deref? Seems strange.

1518386458
andrewrk
yeah I meant as a deref

1518386479
andrewrk
we already have foo[x]  deref for block style pointers, we'll just keep that, and there won't be anything else you can do

1518386490
andrewrk
so all we need is a way to deref only-1-thing pointers

1518386602
MajorLag_
well, thinking about it, it kinda makes sense. If we pretend "a" is a struct, "a.0" is a field representing "a" itself, though then I'm tempted to be able to access any field of a using a numeral "a.1" for the first, etc. Which is intriguing, but probably a bad idea.

1518386667
andrewrk
the problem with `.` postfix is that it's ambiguous with `.` as a field access

1518386681
andrewrk
...or is it?

1518386687
MajorLag_
how so?

1518386695
andrewrk
never mind, it's fine

1518386697
andrewrk
I like `.` postfix

1518386743
andrewrk
let me see if thejoshwolfe approves

1518386790
andrewrk
we have to figure out what to do with the ... operator in switches

1518386891
MajorLag_
-> looks a bit too much like => maybe. could use ":"?

1518386925
andrewrk
problem is that, with slicing, [start:end_exclusive] but with switches it's start...end_inclusive

1518386945
andrewrk
which, there's an open question of do we support the other operator in either case?

1518386995
MajorLag_
That's a good question.

1518387022
MajorLag_
Hmm... -> exclusive range, +> inclusive range?

1518387092
MajorLag_
can think of +> as short for a->b+1

1518387239
andrewrk
I think I don't want there to be the other option for slicing

1518387273
andrewrk
actually I think status quo is fine - slicing is exclusive, switch is inclusive. But they should be different operators

1518387399
MajorLag_
"::" could be inclusive, but then I'd expect to be able to use them interchangeably. Also it's a somewhat subtle difference that could introduce errors due to typo.

1518387525
andrewrk
I think *foo could still work

1518387588
andrewrk
if foo is of type `type` then it makes a pointer type. otherwise it's deref

1518387634
andrewrk
hmm no this is #588 again.

1518387640
MajorLag_
comptime var x = *i32; comptime var y = *x; Did I get **i32 or i32?

1518387679
andrewrk
that would be **i32, no problem. but we would have the     `*b = f32;` problem from #588

1518387695
andrewrk
I don't think we're going to support the deref on a pointer type

1518387707
andrewrk
e.g. right now in status quo zig there is no such thing as  *&i32

1518387718
andrewrk
I think!

1518387721
MajorLag_
there's type.Child anyway isn't there? or am I misremembering?

1518387749
andrewrk
error: attempt to dereference non-pointer type 'type'

1518387750
andrewrk
whew

1518387759
andrewrk
yeah that's right

1518389355
andrewrk
I want to work on a fun issue for the rest of the day

1518389369
andrewrk
I've been slogging through Important Design Decisions for a few weeks now

1518389403
andrewrk
maybe coroutines :)

