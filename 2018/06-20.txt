1529457468
vegecode
I've found something interesting when compiling Zig for msp430. I'm not 100% sure if it's a bug per se, but it is not allowing me to use a call to std.mem.set during my _start nakedcc entry point.

1529457495
vegecode
I'm also not sure if the mistake is my fault, or Zig

1529457499
vegecode
or llvm

1529457515
vegecode


1529457664
vegecode
I am using nakedcc to avoid generating a prologue because the stack hasn't been set up yet. Maybe it just isn't possible to use auto variables in a nakedcc function? Assembly only. It seems like it should be possible.

1529457707
vegecode
Or is there another function attribute or something like that that I can use to decrement the stack pointer myself with assembly?

1529457777
vegecode
Now that I typed that out, it makes sense that you can't have auto variables in a nakedcc function, but I'm still surprised that the call to mem.set was inlined (I think)

1529457788
vegecode
Is there a way to declare a function call as no-inline?

1529457837
vegecode
I might just be trying to get something to work that can be easily stepped around by just calling a function to do the non-assembly initialization within _start

1529457933
vegecode
Well nevermind, I think I found my own answer. I need to get a rubber duck to talk to.

1529461086
GitHub140
[zig] tiehuis opened pull request #1139: Add floating-point internal bit representation to TypeInfo (master...float-typeinfo)

1529461903
andrewrk
vegecode, I think sadly we are in far different timezones

1529461930
andrewrk
I'll be around later

1529462029
vegecode
I'm in Missouri. I'm making great progress again now though. I thought about it all day, apparently all I needed was to type it out in here to figure out my issue. Didn't even need an answer!

1529462180
vegecode
I have noticed that llvm replaced my call to mem.set with a call to libc's memset when I added the flag --release-fast.

1529462246
vegecode
I am really loving Zig so far! Have a great night!

1529475789
very-mediocre
that's a

1529491678
GitHub88
[zig] andrewrk pushed 1 new commit to master:

1529491679
GitHub88
zig/master 55193cb Andrew Kelley: fix runtime fn ptr equality codegen...

1529493827
GitHub40
[zig] tiehuis closed pull request #1139: Add floating-point internal bit representation to TypeInfo (master...float-typeinfo)

1529499303
kristate
@andrewrk: please check this comment when you have time, thanks!

1529500907
alexnask
@kristate This looks like it should be fixed

1529500936
alexnask
The issue was probably that @typeOf(init) would be *const T instead of T, looks like the code expects the naked type (T) so it should work fine

1529502665
alexnask
@reify is going well btw, just aggregate types left

1529502709
andrewrk
kristate: thanks for reminding me, I was looking forward to fixing that after #733

1529502724
kristate
I am working on a PR right now

1529502764
kristate
andrewrk: please check it over, should be ready in 5 minutes

1529502766
andrewrk
Sounds good

1529502809
andrewrk
I'll have a look

1529502839
andrewrk
alexnask: exciting

1529503211
Hejsil
@reify is to much power for me to use resposively

1529503234
Hejsil
And I can't stop myself!

1529503621
kristate
going through tests

1529504564
very-mediocre
isn't there a worry that every library will roll its own dialect of zig?

1529504567
very-mediocre
or is that a desired property?

1529504918
very-mediocre
metaprogramming is admittedly quite exciting though :)

1529505421
alexnask
Right it's pretty good as is

1529505454
alexnask
The only extra thing that @reify will enable that isn't achieavable now is generating aggregate types with an arbitrary amount of fields

1529505493
alexnask
Right now, a type function can only fake such functionality by having an upper limit of fields and disabling some by defining them as void

1529505546
alexnask
which I would argue is more messy than generating fields with iterative code

1529505573
very-mediocre
been peeking at the repo on github, your work here is awesome btw :)

1529505611
alexnask
I've only messed with @typeInfo stuff though, I want to work on other parts of the compiler after my finals are over

1529505751
very-mediocre
still need to properly look into what can be done at comptime

1529505756
very-mediocre
haven't had time unfortunately

1529505792
very-mediocre
my exposure to metaprogramming is quite limited

1529505799
alexnask
Everything that doesn't involve inline assembly and pointer arithmetic, pretty much

1529505810
alexnask
+ working with types as values

1529505816
very-mediocre
The gears in my head are spinning a bit

1529505830
very-mediocre
Thinking of generating a perfect hashing function for a set of data at comptime

1529505835
very-mediocre
that sort of thing

1529505839
very-mediocre
but it's all very vague in my mind

1529505894
alexnask
If you've used C++ constexpr you can think of comptime as a superset of that (but also kinda templates at the same time)

1529505929
very-mediocre
I've used old school C++ prior to constexpr being a thing

1529505979
very-mediocre
I get how it's templates

1529505983
alexnask
Right, one usecase I can think of is generating sine/cosine tables

1529506009
alexnask
This is something I bet C++ programmers would love to do but afaik constexpr doesn support floating point operations

1529506048
very-mediocre
yeah that's pretty common

1529506079
alexnask
Basically comptime is used to generate any type of data at compile time and types just happen to be a type of data in that context

1529506142
very-mediocre
also i guess it replaces the preprocessor

1529506165
very-mediocre
i.e. conditional compilation

1529506173
very-mediocre
still need to do a deep dive though

1529506174
alexnask
So another example is vtables, you can use comptime to generate a unique vtable for each implementation type of an interface and store it in static memory

1529506201
very-mediocre
right

1529506211
very-mediocre
that's pretty cool

1529506256
very-mediocre
I wonder if slightly improved OOP would be standard

1529506268
very-mediocre
or if several paradigms could be imported

1529506288
very-mediocre
metaprogramming brings lots of openness, it's scary

1529506311
very-mediocre
probably unfounded fears i guess

1529506341
very-mediocre
thinking of how JavaScript is disastrously without paradigms yet it works

1529506351
very-mediocre
so surely zig is better than that even with metaprogramming

1529506371
alexnask
I think as long as the standard library provides useful abstractions built on top of the metaprogramming features people will probably tend to use those

1529506386
alexnask
Ofc the same thing is true if those are language features in the first place

1529506399
very-mediocre
that's really it, like where do we draw the line

1529506431
very-mediocre
should vtables be a thing you import?

1529506439
very-mediocre
I'm sure andrewrk has firm ideas about these things of course

1529506479
very-mediocre
just when seen from outside these questions come up

1529509022
kristate
tests passed, pushing the PR

1529509394
kristate
pushed the PR:

1529509397
GitHub103
[zig] kristate opened pull request #1141: std.mem.Allocator: replace create signature with construct signature (master...stdmem-replace-create-with-construct)

1529513620
alexnask
Nice, only struct, enum and union reification left

1529513627
alexnask
so probably like 95% of the work :P

1529513673
alexnask
Any suggestions on the @typeName of the generated types btw?

1529513699
alexnask
I use get_anon_type_name for now but it always seems to return '@reify()'

1529516177
MajorLag1
If name were a property of TypeInfo as described here:

1529516718
alexnask
Right, attaching general information about the type in TypeInfo makes sense

1529516754
alexnask
Ofc, Type: type would have to be omitted if we were to use it for @reify

1529516770
alexnask
Unless the user had to manually set type=TypeInfo.SelfType or something similar

1529518664
MajorLag1
Either that or @reify could override whatever it is set to. Omitting .Type shouldn't be a big deal because you had to have that to get the TypeInfo, but if you pass a TypeInfo around for some reason then there's no way to get the type back out of it.

1529526430
GitHub8
[zig] bnoordhuis opened pull request #1142: fix f128 remainder division bug (master...fix1137)

1529529448
andi3
Hello, could someone give me an update on the current status interfaces? I kind of read the two issues "vtable abstraction" and "Proposal Interfaces" but am left with the impression that I=one is supposed to hack together his own script or use some 3rd party lib? Don' you think such an essential feature should be part of the standard?

1529529527
andi3
also, saying "out meta programming can do this" somehow makes me afraid, because if I read ruby code it's always extremely bogus and there are all kind of crazy things going on under the hood of some code and I fear the same for zig with too much meta magic required to t=do a basic job.

1529529606
andrewrk
andi3, my official stance on OOP / interfaces, is that there is an open issue to investigate whether such features are necessary:

1529529622
andrewrk
I also have experience with ruby and have the same concerns as you

1529529656
andi3
on the other hand golang code has yet been by far the most readable code in my experience ever, there has yet to come something I do not understand at all, it's just really easy to read for me

1529529889
andrewrk
the lack of features is a feature

1529530059
andi3
I mean, that's only really true as long as it does not require strange workarounds, otherwise brainf*** would have an amazing "feature", rest assured, strange workarounds very much depend on the point of view

1529530073
andi3
For me gelang interfaces are nice to work with, compared to java, and the only thing I miss, is the option to explicitly implement an interface and get compile time errors if I mess up. in go this can be done by using  var _ SomeInterface = SomeStruct{} but this does not feel right, but is's okay to work with

1529530099
andi3
(I miss this in some cases, not all the time)

1529530492
GitHub154
[zig] andrewrk pushed 7 new commits to master:

1529530492
GitHub154
zig/master 4b46af4 kristopher tate: std.mem.Allocator.construct: remove deprecation warning;

1529530492
GitHub154
zig/master 71db8df kristopher tate: std: update stdlib to match updated allocator create signature; ref #733

1529530492
GitHub154
zig/master 457c0f0 kristopher tate: std.mem: remove allocator create in favor of construct; ref #733

1529530493
GitHub187
[zig] andrewrk closed pull request #1141: std.mem.Allocator: replace create signature with construct signature (master...stdmem-replace-create-with-construct)

1529530672
GitHub9
[zig] andrewrk closed pull request #1142: fix f128 remainder division bug (master...fix1137)

1529530677
GitHub40
[zig] andrewrk pushed 1 new commit to master:

1529530677
GitHub40
zig/master eb6a8e6 Ben Noordhuis: fix f128 remainder division bug...

