1518136505
acha
andrewrk: I just had a quick thought, instead of errdefer have you considered something like

1518136522
acha
defer when PatternMatch { }

1518136606
acha
it seems like less is baked into the language that way.

1518140929
andrewrk
would you like to make a proposal on github?

1518141225
acha
andrewrk: not in the best position to champion the idea tbh, just thought i would offer it up for your consideration in case you like it.

1518141283
acha
I haven't really used zig at all other than reading the docs for example.

1518141883
acha
Not really sure it is a good idea, just something that crossed my mind while reading the docs.

1518142225
andrewrk
acha, what would be an example PatternMatch?

1518142278
acha
Hmm, well I was also thinking about this idea for the myrddin programming language. over there things that fail are either `Ok result, or `Err . So in myrddin it would be defer when `Err _ { }

1518142285
acha
but zig is a bit different.

1518142346
acha
I dunno if you can match on an error or nullable for example.

1518142437
andrewrk
if (expression) |value_if_ok| expression else |err_code| expression

1518143003
acha
right, ah i can see why error defers are different, they must always be the outer scope right?

1518143145
andrewrk
they can be in any scope. the errdefer expression is activated if control flow leaves the scope by returning an error from the function

1518143177
andrewrk
so, an errdefer inside a scope that has no `return` or `try` expression is dead code

1518143207
acha
got it.

1518150842
andrewrk
gonna merge error sets in a few minutes

1518151711
GitHub178
[zig] andrewrk opened pull request #759: Error Sets (master...error-sets)

1518155294
GitHub100
[zig] andrewrk pushed 1 new commit to master:

1518155295
GitHub100
zig/master 5911962 Andrew Kelley: Merge pull request #759 from zig-lang/error-sets...

1518155295
GitHub63
[zig] andrewrk closed pull request #759: Error Sets (master...error-sets)

1518156971
GitHub60
[zig] andrewrk pushed 1 new commit to master:

1518156972
GitHub60
zig/master 2c697e5 Andrew Kelley: appveyor: don't try to build for mingw...

1518161099
Hejsil
Uuuuh error sets. Time for another syntax refactor!

1518161704
Hejsil
andrewrk, so this is the intended way of getting a functions error set? @typeOf(foo).ReturnType.ErrorSet

1518183104
zesterer
What's the status of the ambiguous return problem so far?

1518183337
zesterer
I've been thinking, and the simplest, most elegant fit for this problem I can see is to add an equals before the function body like: "fn foo(b: Bar) void = {}"

1518183705
zesterer
Really, if a Zig-ish syntax is wanted, it should be: "cont foo: fn (b: Bar) void = {}"

1518186456
MajorLag_
Isn't the ambiguous return syntax only a problem if you remove the return specification requirement?

1518186528
lqd
summary is at

1518187181
MajorLag_
I see. Hadn't really considered that since empty struct literal as a return type never occurred to me, and I know basically nothing about the new error sets stuff

1518187182
zesterer_
MajorLag_: AFAIK, it's still a problem since it may affect more than just error sets

1518187228
MajorLag_
I can see that, with the example case being returning A{} as an empty struct literal, I just think that's so edge case that (A{}) is perfectly acceptable.

1518187237
MajorLag_
Error sets are less edge case I imagine

1518187708
MajorLag_
"cont foo: fn (b: Bar) void = {}" looks right to me.

1518188072
Hejsil
Does that mean that any block can implicitly cast to a function?

1518188087
Hejsil
Can I do { ... }()?

1518188105
Hejsil
Aka, call a block

1518188198
Hejsil
Or maybe (fn (b: bar) void)({ ... })()

1518188216
SimonNa
calling function literal immediately, it's handy in D occasionally: immutable x = { ...some code... return y; }();

1518188248
Hejsil
Well, we have blk: { break :blk 4; }, so that is not needed in Zig

1518188285
SimonNa
hmm

1518188291
MajorLag_
It would be nice to unify the syntax though.

1518188312
SimonNa
I agree with the judgement that const ... = { ... } suggests that such blocks are flexible literals

1518188594
zesterer_
Is making them flexible literals a problem? It would be nice to throw around code block as if they're closures, but it does somewhat undermine Zig's focus on simplicity

1518191966
MajorLag_
Something like this?

1518192181
MajorLag_
If tuples also happen, you could allocate a tuple of whatever you wanted to capture and pass that as the capture.

1518192940
sdf82882
Hi! I need a programming language I can easily call from C++ code (which is not C or C++, which I don't like very much). Would I be able to use zig for this? Just asking before starting learning the whole language

1518192994
GitHub154
[zig] andrewrk pushed 1 new commit to master:

1518192994
GitHub154
zig/master 3919afc Andrew Kelley: fix crash with error peer type resolution...

1518193399
andrewrk
sdf82882, yes, it's a perfect fit, see for example

1518193416
andrewrk
sdf82882, the only reason you might not do it is that zig is still at an early beta version and not stable yet

1518193501
sdf82882
I don't really care about that, it's a personal project, and it's going to be small enough at first that rewriting it in another language if I encounter any stopper wouldn't be the end of the world, andrewrk, thanks

1518193549
andrewrk
sdf82882, sounds fun, let me know if you run into any issues and I'll try to sort them out quickly for you

1518193574
sdf82882
The first thing we will change is replacing the Makefile with zigs own custom build system. The build system of zig is written in zig itself, which reduces the requirement of knowing the oft-arcane Makefile idiosyncrasies.

1518193632
sdf82882
This might be a problem, since the makefile I have is autogenerated by a tool of the framework I'm using, and it's complex enough that I wouldn't want to (or know how to) translate it by hand

1518193636
andrewrk
that's optional, of course

1518193641
andrewrk
you can also call zig from a makefile

1518193658
sdf82882
Oh, I see the verbose output and it seems what it's doing is pretty straightforward, cool

1518193904
sdf82882
yeah, looks exactly what I need, thanks

1518195745
sdf82882
andrewrk, is the full documentation the place to learn the language right now? I was looking at some examples, like

1518195884
sdf82882
any "gentler" introduction?

1518196051
Hejsil
There currently is a difference in how errors are handled between 0.1.1 and master. Documentation for master has information on try

1518196081
Hejsil
guess game is using the master syntax

1518196143
MajorLag_
try is in the Error section.

1518196172
sdf82882
Thanks, Hejsil, I was looking at the 0.1.1

1518196281
andrewrk
hi Hejsil

1518196286
Hejsil
Yo

1518196319
andrewrk
sdf82882, we're pretty close to 0.2.0 release - I recommend a master build and docs at this point

1518196372
sdf82882
andrewrk, that's what I'm studying from right now, so that's good

1518196558
Hejsil
andrewrk, Did @memberIndexByTag or @memberTag make it in with error sets?

1518196698
andrewrk
Hejsil, ah, no, let's open separate issues for those

1518196797
andrewrk
Hejsil, I'm not sure how @memberTag would work actually. I think you just can do usize(error_value) for that

1518196835
andrewrk
oh, @memberTag  would take a field index and return the error value

1518196855
andrewrk
anyway, yeah, let's get those reflection features going if you need them, feel free to open issues

1518202238
GitHub119
[zig] andrewrk pushed 2 new commits to master:

1518202238
GitHub119
zig/master e7bf8f3 Andrew Kelley: fix compiler crash switching on global error with no else

1518202238
GitHub119
zig/master 1fb308c Andrew Kelley: self hosted compiler: move tokenization and parsing to std lib

1518202978
Hejsil
How would this @field actually work?

1518203015
Hejsil
I would assume it can only get the value of constant members in struct/unions, and error set/enum tags

1518207433
andrewrk
Hejsil, it's the same as `a.b` except `b` is a comptime string

1518207445
andrewrk
so it's pretty powerful

1518207514
Hejsil
Aaah, ok. Was just mislead by the T parameter

1518207525
andrewrk
ah, yeah, poor name choice

1518207563
MajorLag_
That'll be a huge improvement on string matching against @memberName

1518207598
andrewrk
should save you a few @setEvalBranchQuota branches :)

1518208034
skyfex
andrewrk: I was wondering, is there a timeline to have the self hosting compiler replace the C++ version? do you expect to stop development of the C++ version at some point?

1518209775
andrewrk
skyfex, it will always be in the source tree and be part of the build process

1518209787
andrewrk
but I do plan for some features to only be available in the self hosted compiler

1518210072
andrewrk
as for timeline... the road is open. full speed ahead

1518210115
andrewrk
the milestone is 0.2.0 which means that it's prioritized over everything in 0.3.0 and beyond

1518216893
GitHub76
[zig] bnoordhuis opened pull request #768: document when to use error!type in function decl (master...func-decl-error)

1518219136
GitHub7
[zig] andrewrk pushed 1 new commit to master:

1518219137
GitHub7
zig/master a2bd9f8 Andrew Kelley: std lib: modify allocator idiom...

