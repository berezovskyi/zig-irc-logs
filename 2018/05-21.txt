1526860858
andrewrk
bb010g, I've never tried building stage 3

1526860873
andrewrk
stage 2 isn't complete so we can't build stage 3 yet

1526860906
andrewrk
the most stage 2 does is `zig fmt`

1526863607
darithorn
is there a way to make sure that a function i've written is done at compile time?

1526864266
andrewrk
darithorn, at the callsite, you can use `comptime`

1526864314
andrewrk


1526864481
darithorn
ah okay i just wasn't sure how strict it was yet. a lot is available at compile time then! :D

1526864957
bb010g
andrewrk: Ok. It probably wouldn't hurt to note that in the readme. :)

1526864994
andrewrk
bb010g, good idea

1526869720
darithorn
is there a reason you can't assign a variable of type 'type' even though it's comptime? i try to assign it after initialization and i get "attempt to dereference non pointer type 'type'"

1526869974
darithorn


1526870384
MajorLag2
darithorn: possibly it's #740?

1526870393
MajorLag2
nope, nevermind

1526870504
andrewrk
darithorn, this is

1526870509
andrewrk
I'm working on this issue as we speak

1526881337
donpdonp
greetings, zigonauts.

1526881385
donpdonp
im trying to take the first step with using a C library from zig.

1526881427
donpdonp
I believe the code is fine, I can run it with $ zig build-exe src/main.zig --library c   and everything is happy. what I cant figure out is what to put in build.zig so that $ zig build  will produce the same output

1526881620
andrewrk
hi donpdonp. yeah apologies for the lack of documentation

1526881685
andrewrk
donpdonp, here's an example:

1526881700
andrewrk
I'm guessing  exe.linkSystemLibrary("c");  is what you were missing

1526882660
donpdonp
andrewrk: thx! I found it by dgging into the zig code

1526882700
donpdonp
for fun i thought id try connecting zig to

1526882711
andrewrk
ah neat, I was reading about that earlier today

1526882811
donpdonp
what would i use to add a path for finding these system libraries?

1526882830
donpdonp
ive got libui in a local folder so linkSystemLibrary("ui") isnt finding it

1526882952
donpdonp
oh here it is: b.addLibPath("../libui/build/out");

1526883111
donpdonp
and naturally, the next thing would be: b.addCIncludePath("../libui");

1526883326
donpdonp
ui.h has "typedef struct uiInitOptions uiInitOptions; struct uiInitOptions { size_t Size; };

1526883356
donpdonp
given const ui = @cImport({ @cInclude("ui.h"); });, how would I define a zig variable of type uiInitOption?

1526883401
andrewrk
var x: ui.uiInitOption = undefined;

1526883431
andrewrk
I would recommend doing all your C imports in 1 @cImport block and naming the namespace `c`

1526883457
donpdonp
andrewrk: that var declaration worked. wow. thx. zig++

1526884643
donpdonp
warn("ui init sizeof is {}\n", @sizeOf(ui.uiInitOptions)); => main.zig:26:34: error: compiler bug: integer and float literals in var args function must be casted.

1526884649
donpdonp
o^O

1526884885
andrewrk
donpdonp, you can work around like this: usize(@sizeOf(ui.uiInitOptions))

1526884893
andrewrk
you can also print that valueu at compile time:

1526884905
andrewrk
@compileLog(@sizeOf(ui.uiInitOptions));

1526884918
andrewrk


1526884989
donpdonp
woah thats gonna be my new best friend :)

1526884998
donpdonp
@compileLog(@sizeOf(ui.struct_uiInitOptions));

1526885008
donpdonp
| 8

1526885010
donpdonp
/home/donp/code/zig/hello/src/main.zig:26:3: error: found compile log statement

1526885012
donpdonp
@compileLog(@sizeOf(ui.struct_uiInitOptions));

1526885019
donpdonp
haha. it worked then said hey you cant use compile log! :)

1526885043
andrewrk
yep, that's to prevent a working build from having messy output

1526885051
donpdonp
o^O

1526885071
donpdonp
im guessing that has to do with build.zig: const mode = b.standardReleaseOptions();

1526885121
andrewrk
look at the output of `zig build --help` with and without b.standardReleaseOptions()

1526885291
donpdonp
are you saying the output of 'zig build --help' changes depending on whats in the local build.zig ??

1526885341
donpdonp
im not seeing anything obvious from the output about release options or compilelog

1526885453
andrewrk
yes, zig build is declarative

1526885487
andrewrk


1526885494
andrewrk
I need to add ReleaseSmall to these docs

1526885580
donpdonp
const mode = b.smallReleaseOptions(); => no member named 'smallReleaseOptions' in struct 'Builder'

1526885603
donpdonp
is that a post 0.20 feature?

1526885611
donpdonp
0.2.0

1526885636
donpdonp
if so, whats the flag to allow compileLog in 0.2.0 without it being an aerror

1526885872
donpdonp
here's another one that comes from the docs but doesnt compile. trying to set the bytes of the struct to 0 with: for (o[0..o_size]) |*b| b.* = 0;  -> error: expected token 'Symbol', found '*'

1526885874
donpdonp
for (o[0..o_size]) |*b| b.* = 0;

1526885876
donpdonp
^

1526885898
donpdonp
sorry for the barrage of questions :)

1526887013
andrewrk
donpdonp, you can find the documentation for 0.2.0 here:

1526887049
andrewrk
however I  suggest tracking master branch

1526887101
andrewrk
I'm going to sleep. have a good night, I will check for questions tomorrow

1526889300
donpdonp
goo dnight

1526890649
donpdonp
what format characters does zig like?

1526890662
donpdonp
both {h} and {%h} fail (for hex chars). cant find docs on it

1526897636
Hejsil
donpdonp, {x} for hex :)

1526898322
donpdonp
warn("hex {x}", 0x123a); error: compiler bug: integer and float literals in var args

1526898340
donpdonp
should i be using zig master-branch?

1526898405
donpdonp
warn("hex {x}", usize(0x123a)); works as expected though im not sure what usize() is doing

1526898903
Hejsil
Zig has the concept of a compile time int (and float). These are bigints, and cannot exists in the final binary. They cast to all integer types that they fit into

1526898920
Hejsil
For now, you can't pass comptime ints to varargs functions

1526898934
Hejsil
usize() is a cast

1526902714
donpdonp
Hejsil: can i use "{}" for a function that return a c-string

1526902733
donpdonp
or rather, how would I? I get "u8@7fab84312fc8"

1526902837
Hejsil
You could do std.debug.warn("{}", std.cstr.toSliceConst(c"Hello World!\n"))

1526902870
Hejsil
I don't think there is any way to specify in the format string that your '&const u8' is a c strings

1526902906
Hejsil
I think

1526903036
donpdonp
std.cstr.toSliceConst(my_cstr)) => expected type '&const u8', found '?&const u8'

1526903064
donpdonp
how would i convert a "nullable" str pointer to a zig-friendly str pointer

1526903255
donpdonp
@ptrCast(&const u8, nullable_u8_ptr); works. yea zig for letting me do the quick and dirty thing

1526903334
Hejsil_
donpdonp, you probably wonna unwrap the nullable pointer instead :)

1526903339
Hejsil_
like this: ??nullable_ptr

1526903345
donpdonp
o^O

1526903353
Hejsil_
Or: nullable_ptr ?? something_else

1526903411
donpdonp
i see. that is more zig-ish. ok thx.

1526903442
donpdonp
zig is a pretty wonderful language.

1526905792
donpdonp
ok so how do i go from a '[]const u8' to a c-string?

1526905807
donpdonp
ive tried addNullByte(allocator, str) w/o success

1526905872
Hejsil
It depends

1526905890
Hejsil
Do you know that you're string have a null terminating byte?

1526905897
Hejsil
If soo, then you can just do slice.ptr

1526905934
Hejsil
If not, then do const s = addNullByte(allocator, slice); useS(s.ptr);

1526905982
donpdonp
well im using curl(c"http://") works fine. func(url: []const u8) { curl(url) } dies

1526906003
donpdonp
where func("http://") is called (not a c"")

1526906062
Hejsil
c"" gives you &u8, while "" gives []u8

1526906076
Hejsil
Aka, "" gives you a slice which is a ptr and a length

1526906079
Hejsil
"" won

1526906085
Hejsil
"" wont have a null terminated byte

1526906107
Hejsil
Because you're suppose to use s.len to figure out the end

1526906131
Hejsil
c"" will have a null terminated byte, so you just get a pointer to the start of the string

1526906146
donpdonp
where does 'allocator' come from

1526906199
Hejsil
If you want to append an extra charactor to your string (the null terminator in this case) you have to allocate (on the heap or somewhere else)

1526906214
Hejsil
In Zig, the way you allocate memory is by passing around allocators

1526906232
donpdonp
okay so how i get an allocator

1526906232
Hejsil
For debugging, you can use std.debug.global_allocator

1526906303
donpdonp
var allocator = std.debug.global_allocator;

1526906305
donpdonp
var cstr = std.cstr.addNullByte(allocator, url);

1526906316
donpdonp
curl(url) still fails :( (where c"url-here" works)

1526906327
donpdonp
curl(cstr) I mean

1526906336
Hejsil
cstr.ptr and it should work

1526906360
donpdonp
c.curl_easy_setopt(curl, c.CURLOPT_URL, cstr.ptr); =>  error: type '@typeOf(addNullByte).ReturnType.ErrorSet![]u8' does not support field access

1526906371
Hejsil
Aaah

1526906372
Hejsil
Right

1526906384
Hejsil
addNullByte can fail

1526906392
Hejsil
So you have to catch the error

1526906399
Hejsil
Either by passing it up

1526906408
Hejsil
try cstr.addNullByte(allocator, slice)

1526906418
Hejsil
Or by handeling it

1526906437
donpdonp
ug. allocating a single byte shouldnt require exception handling :)

1526906439
Hejsil
cstr.addNullByte(allocator, slice) catch |err| { handle error here };

1526906448
donpdonp
thx for the syntax. what is 'slice'

1526906482
Hejsil
'slice' is just your string

1526906501
donpdonp
ohh

1526906521
Hejsil
The section on error handling :)

1526906533
donpdonp
wait how is cstr declared

1526906603
Hejsil
What do you mean?

1526906613
donpdonp
cstr.addNullByte implies cstr already exists

1526906618
donpdonp
but im trying to create cstr

1526906647
Hejsil
Ooh, cstr is the namespace 'cstr' in the zig standard library

1526906649
donpdonp
i cant say var cstr = cstr.addNullByte(..) :

1526906653
Hejsil
std.cstr.addNullByte

1526906654
donpdonp
ohh

1526906672
donpdonp
well that what I was doing

1526906704
donpdonp
btut.. not catching the err

1526906751
donpdonp
/home/donp/code/zig/zigdeck/src/net.zig:15:53: error: incompatible types: 'void' and '[]u8'

1526906753
donpdonp
var cstr = std.cstr.addNullByte(allocator, url) catch |err| { warn("{}",err); };

1526906755
donpdonp
^

1526906772
Hejsil
Right

1526906783
Hejsil
catch is a binary operator

1526906792
Hejsil
It returns the left hand side when no error is there

1526906807
Hejsil
and the right hand side if there was an error

1526906819
Hejsil
A block '{}' returns void by default

1526906864
Hejsil
You could return from the block, and the block returns 'noreturn' instead

1526906878
Hejsil
the 'noreturn' type casts to any type

1526906906
Hejsil
because a result will never be returned from a 'noreturn' expression

1526906918
Hejsil
var cstr = std.cstr.addNullByte(allocator, url) catch |err| { warn("{}",err); return; }; will work

1526906920
donpdonp
ug. i guess im too tired to grok this

1526906953
Hejsil
Well, if you're all new to Zig, and want to use a C lib, then there are some things to get used to :)

1526906995
donpdonp
warn("alloc {}",err); never sends output

1526907001
donpdonp
ie it doesnt fail

1526907018
donpdonp
thx for the help, i apprecieate it

1526907025
Hejsil
Np

1526907027
donpdonp
i need to sign off before i do any more damange to this code

1526907116
donpdonp
the project is here, in case you wanted to see it,

1526923711
donpdonp
omg this is the hardest part of this whole project

1526923720
donpdonp
going from a zigstr to a cstr.

1526923729
donpdonp
anyone have an example code?

1526923799
donpdonp
var cstr: []u8 = std.cstr.addNullByte(&allocator.allocator, url); ->  error: expected type '[]u8', found '@typeOf(addNullByte).ReturnType.ErrorSet![]u8'

1526923861
donpdonp


1526924196
Hejsil
donpdonp, did you read the docs on errors?

1526924222
donpdonp
apparently noy

1526924224
donpdonp
not

1526924247
Hejsil
this:

1526924558
donpdonp
var cstr = try std.cstr.addNullByte(&allocator.allocator, url);

1526924565
donpdonp
error: expected type 'void', found '@typeOf(addNullByte).ReturnType.ErrorSet'

1526924568
donpdonp
nothing makest sense

1526924596
MajorLag2
you called try in a function that doesn't return errors

1526924628
MajorLag2
'void' in this case is referring to the return type of the function. The error message is a little unhelpful on this one.

1526924647
donpdonp
i just want var str="me" to take the place of curl(c"me") so I can curl(str)

1526924655
donpdonp
seems like one utility function and I should be done.

1526924671
donpdonp
even c++ makes this fairly easy.

1526924677
MajorLag2
`try` is equivelent to `expresion catch |err| return err`.

1526924720
donpdonp
the !value as a union is another interesting language feature.

1526924752
donpdonp
ive used functional langs that have a Type T

1526924784
donpdonp
but im frustrated cause i just want to get going on this app and not learn a 40pg chapter on error handling :)

1526924838
MajorLag2
If you want to just ignore any errors, you can use `expression catch unreachable`. In debug builds this will assert if there is an error.

1526924874
MajorLag2
`var cstr = std.cstr.addNullByte(&allocator.allocator, url) catch unreachable;`

1526924967
donpdonp
its not throwing an error

1526924971
donpdonp
its returnign sometihng bogus

1526925007
donpdonp
var url="

1526925090
donpdonp
which I would look at with warn "{}" but the substitution codes arent published

1526925230
MajorLag2
if you're trying to view a cstring with warn: `warn(std.cstring.toSliceConst(the_c_string));` should work.

1526925325
MajorLag2
sorry, that's `std.cstr.toSliceConst()`

1526925380
donpdonp
std.cstr.toSliceConst(cstr) -> expected type '&const u8', found '@typeOf(addNullByte).ReturnType.ErrorSet![]u8'

1526925396
donpdonp
here's the bits that are causing trouble

1526925429
MajorLag2
you didn't unwrap the error from addNullByte. `var cstr = std.cstr.addNullByte(allocator, url);` => `var cstr = std.cstr.addNullByte(allocator, url) catch unreachable;`

1526925490
donpdonp
i added it, the result is unchanged

1526925577
Hejsil
That's because addNullByte returns []u8 and not &u8

1526925600
Hejsil
Use cstr.ptr

1526925629
MajorLag2
I guess that makes sense, since you'd need a slice to free it later, though I wouldn't have expected that either to be honest.

1526925692
donpdonp
Hejsil: yup the catch unreachable, and using cstr.ptr together is working.

1526925699
donpdonp
thx.

1526928544
andrewrk
donpdonp, it's understandable, you just want to get something working

1526928550
andrewrk
here's my recommendation:

1526928573
andrewrk
put `try` in front of every function that can fail

1526928587
andrewrk
put `!` in front of all your return types

1526928596
andrewrk
and now you don't really have to think about error handling too much

1526929739
sherjilozair
Hey andrewrk, do you have a roadmap towards 1.0 somewhere?

1526929775
andrewrk
sherjilozair, it's encoded in github milestones

1526929789
andrewrk
every issue has a milestone attached to it

1526930041
sherjilozair
andrewrk: Any plans on adding UFCS?

1526930092
andrewrk
sherjilozair,

1526930237
sherjilozair
I see. So the answer is no. Slightly disappointed, but I still like the clear focus on being a low-level magic-free language.

