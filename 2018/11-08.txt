1541697545
bheads
interesting talk on coroutines

1541697732
andrewrk
bheads, ah, this is the person who implemented LLVM coroutines

1541697796
bheads
the one your having issues with being slow?

1541697832
andrewrk
yes and buggy

1541697844
andrewrk
we have to put "optnone" on all coroutines

1541697884
andrewrk
hmm I wonder what his point is about nano-coroutines beating straightforward hand-crafted state machine

1541697903
andrewrk
my understanding is the llvm coroutines are equivalent to a hand-crafted one (and looking at the LLVM IR it appears to be so)

1541697906
andrewrk
maybe he's talking about vaporware

1541697913
andrewrk
I'll have to watch this in full later

1541697920
bheads
no its more about the algorithm

1541697929
bheads
the big thing he adds is prefetching

1541697942
bheads
which coros make writing easy

1541697966
bheads
the state machine code works fine, its just a lot more code to write and maintain

1541697974
andrewrk
I see. yes that's certainly true

1541697986
andrewrk
in the coroutines rewrite, zig will be generating the state machine

1541698027
bheads
have you come up with a plan for generators?

1541698039
andrewrk
either as a switch or an array of function pointers

1541698063
andrewrk
I can't remember where I landed on generators

1541698101
andrewrk
either way the rewrite brings us closer to generators if anything, not farther away

1541698105
bheads
interesting, could you also put the yeild return on the top of the frame?

1541698148
andrewrk
with the rewrite, you could construct a coroutine frame and initialize it statically without invoking it

1541698163
andrewrk
e.g. your coro frame could be global static data that you initialize, and it gets initialized pre-suspended

1541698245
bheads
yeah I like your plan for dealing with the call frame, opens up lots of safty and performance options

1541698387
bheads
on a side note it looks like you got a good chunk of the copy elision work done!

1541699604
andrewrk
yeah it's coming along. I'd say the concept is proven and now it's just the marathon of code changes

1541699677
andrewrk
here's a nice example:

1541699698
andrewrk
note the fewer number of alloca and memcpy instructions on the right

1541699956
andrewrk
it's a good thing this is early in the release cycle though. it's unavoidable that this will introduce new bugs

1541700123
bheads
just need a few projects to help find them

1541700309
bheads
I had a small project I was going to write but the coro rewrite and the parser rewrite put that on hold

1541700331
andrewrk
yeah sorry about that. and is there a 0.3.0 issue blocking you too?

1541700427
bheads
Oh I understand, nothing in .3 is blocking other then having to deal with possible lang changes to rewrite.  I am destracted with a bathroom remodel at home (ie I should be finnishing that over working on side projects :)

1541700628
bheads
Oh and now I remember, that code I was writting was dealing with GUI, so interfaces was missing, I got it working but wasn't very clean

1541700906
andrewrk
fair point, I haven't tried to make a gui with zig yet

1541701042
bheads
and the last thing I tried was using zig with godot and ran into

1541701060
andrewrk
ah right

1541701084
andrewrk
I should take another pass at that

1541701093
andrewrk
so much to do

1541701118
bheads
lol no pressure

1541706857
DutchGh0st
is it sound to do this?: return @ptrCast(*T, @alignCast(@alignOf(T), &slice[0]));

1541706883
DutchGh0st
slice is a slice of bytes, with the size of @sizeOf(T)

1541706951
DutchGh0st
if it is, I might have just created my first mini allocator that builds on top of another allocator \o/

1541708234
DutchGh0st
expected type 'fn(*Allocator, []u8, usize, u29) Error![]u8', found 'fn(*Allocator, []u8, usize, u29) Error![]u8'

1541708240
DutchGh0st
what's the difference :O

1541708985
andrewrk
DutchGh0st, does that error message have hints? I added hints to that error

1541709038
andrewrk
as far as alignment, zig will catch at runtime if your alignment is wrong

1541709239
DutchGh0st
well

1541709249
DutchGh0st
I just yanked the realloc function from std's arena allocator

1541709252
DutchGh0st
that just worked

1541709492
DutchGh0st
huh

1541709496
DutchGh0st
now I changed my error types

1541709498
andrewrk
DutchGh0st, congrats on your first allocator :) what does it do?

1541709501
DutchGh0st
and I get the same in `alloc`

1541709540
DutchGh0st
its a linked list, that allocates 1024 bytes using another allocator, and it just uses an index to track how much of the slice is used

1541709596
DutchGh0st
and if the slice would go full, it allocates a new one

1541709630
DutchGh0st
its perhaps not production ready, but at least I could write it :)

1541709647
andrewrk
what does it do on free() ?

1541709704
DutchGh0st
nothing

1541709717
andrewrk
this sounds a lot like ArenaAllocator

1541709723
DutchGh0st
it sort of is haha

1541709744
andrewrk
that's neat though. if it's better for your use case, then great

1541710077
DutchGh0st


1541710082
DutchGh0st


1541710221
DutchGh0st
if I look in the strace, I see 2 mmaps, and 2 munmaps...which should happen looking from main

1541710683
DutchGh0st
This was easier to write in Zig that in Rust, which is funny

1541710983
DutchGh0st
oh gosh, you can even see zig sourcecode in gdb's text user interface? o.O

1541711602
andrewrk
:)

1541711712
DutchGh0st
oh andrewrk, a question,

1541711754
DutchGh0st
when you open up Stdin, using the function in getStdIn() from std.io,

1541711766
DutchGh0st
should you close it? or is that not needed because its stdin?

1541711771
andrewrk
it's not needed

1541711799
andrewrk
I should add that to the doc comments

1541711801
DutchGh0st
Ohh okey haha, I didn't know that ^^

1541711832
DutchGh0st
yeah that'd be nice

1541711880
andrewrk
on posix, getStdIn is basically return 1

1541712059
DutchGh0st
ahh

1541713659
andrewrk
my stream today will be a short demo of the Copy Elision branch of Zig, live coding a small standard library bugfix or feature, and Q&A. 13 minutes from now.

