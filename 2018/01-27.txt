1517011302
andrewrk
fine by me

1517011415
jfo
well,

1517011467
jfo
the closes I could come to your orange was

1517011475
jfo
closest*

1517011485
jfo
so either one of those will work, it's up to you

1517011951
jfo
I pushed the orangish one

1517012094
andrewrk
cool

1517012476
MajorLag_
is a ?&c_void returned by an extern fn treated specially? because it seems to behave differently than the same type as a field in an extern struct.

1517012699
MajorLag_
or as returned by a non-extern fn, for that matter

1517012747
andrewrk
can you elaborate?

1517012791
andrewrk
?&c_void is not supposed to be special

1517012879
MajorLag_
well I was trying to put together a minimal test case when I realized extern might be a factor. Don't think I'll be able to do that before I have to go though. Basically, if I call SDL_malloc I can do things with the result that I can't do with SDL_Surface.pixels. Specifically, I can cast it to a slice without a @ptrCast. If I return ?&c_void from a native fn (a fake malloc), I can't use ?? with it, but I can do that with SDL_malloc.

1517013048
andrewrk
hmm I'll have to poke around with this

1517013293
MajorLag_
error: slice of non-array type '?&c_void' is the error I get with SDL_Surface.pixels, error: incompatible types: 'void' and '&c_void' with fake malloc, even though the return type is explicitly ?&c_void.

1517013625
andrewrk
it looks like you need to handle null

1517013644
andrewrk
I gotta go AFK. feel free to file a bug and we'll get it sorted out one way or the other.

1517035591
tiehuis
by the way, working casually on a regex engine in zig. i've got a rudimentary parser/compiler/vm right now, might have something decent in a month or so.

1517035616
tiehuis
anyone had any pressing need for regexes yet?

1517039911
MajorLag_
andrewrk: so yeah, it wasn't a bug. I just didn't realize that it's behaving differently because the type I was slicing was actually &c_void, having been unwrapped by ??. However, I think I found a bug while working that out, which I've submitted.

1517040293
tiehuis
that error was actually fixed earlier today

1517040396
tiehuis
if you pull the latest you should be okay

1517040505
MajorLag_
Just my luck

1517040585
MajorLag_
I see why I didn't find it by searching for "extern"

1517040613
tiehuis
yeah, unlucky too that you were only one commit behind!

1517040657
jfo
tiehuis: I was just thinking about regexes last night! what flavor are you using?

1517040771
tiehuis
perl style I believe, although using a dfa approach so no backreferences and things

1517040820
tiehuis
i haven't fleshed out much yet, still need to flesh out some of the compilation and do some refactoring

1517042002
jfo
what is "dfa"?

1517042054
jfo
is it this dfa?

1517042304
tiehuis
yes

1517042328
tiehuis
here a great set of articles outlining how it works:

1517042358
tiehuis
pretty much what i'm basing everything on and it's what a few other languages like go, rust have followed pretty closely

1517044106
jfo
cool, thanks for that link. lmk when it's on gh so I can take a look at it!

1517044977
jfo
tiehuis: this article is v good

1517045010
jfo
I appreciate how concise it is

1517088154
andrewrk
tiehuis, regex engine, that's exciting

1517088167
andrewrk
I have an idea for a use case

1517088206
tiehuis
what use case?

1517088213
andrewrk
you list a bunch of HTTP endpoints with regex, and  the engine combines them into one master regex that dispatches accordingly

1517088287
andrewrk
for example, something like:  addUrl("/user/(\d+)", handleUserFn);  addUrl("/song/(\d+)", handleSongFn);

1517088306
tiehuis
right, i see

1517088319
andrewrk
idea being that instead of doing 2 regexes, at compile time it creates 1 regex

1517088336
andrewrk
this might be very difficult to achieve. I don't really know where to start

1517088343
tiehuis
you can actually do that in linear time fairly efficiently as you can combine regexes into a single automaton

1517088366
tiehuis
i.e

1517088370
andrewrk
ooh

1517088390
tiehuis
although sorry this only allows you to know if one of those match

1517088399
tiehuis
so you wouldn't be able to dispatch in this case

1517088439
tiehuis
i know that fast routers in go typically use a radix trie, which we could compute at compile time

1517088453
tiehuis
those routers though usually are more limiting in their matching, however

1517088489
tiehuis
also would be really cool to be able to get regex construction at compile-time for free

1517088503
tiehuis
think the only thing blocking this right now is the ability to use allocators at compile-time

1517088625
tiehuis
just going back to the regex group construction, if we had good enough regex simplification you could just construct one big regex of the alternation of all the routes

1517088641
tiehuis
and then rely on the engine to simplify common literal prefixes

1517088962
andrewrk
tiehuis, I think we can solve the allocators at compile time problem

1517089115
andrewrk
not sure how to hook it up yet, but you should be able to allocate static storage with a comptime known size

1517089834
andrewrk
maybe we could have @comptimeAllocate() and then we could use that to create a mem.Allocator at comptime and pass that to a function

1517089896
andrewrk
I  think this should work

1517095934
GitHub156
[zig] andrewrk pushed 1 new commit to master:

1517095935
GitHub156
zig/master f66ac9a Andrew Kelley: fix crash when align 1 field before self referential......

