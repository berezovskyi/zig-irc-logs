1531979553
GitHub169
[zig] jayschwa opened pull request #1262: docs: Highlight reader's position in table of contents (master...show-place-in-toc)

1531979717
hryx
The docs briefly mention a case where pointer arithmetic is not supported. Does Zig support pointer arithmetic in some ways, though?

1531983692
tiehuis
hryx: zig has different pointers for a single item vs. an unknown number of items

1531983702
tiehuis
these are denoted by *T and [*]T respectively

1531983723
tiehuis
you can perform arithmetic as normal on the pointer to many, but it is disabled on the single-item pointer case

1531983745
tiehuis
of course, you can @ptrCast between any pointers if you need to

1531985288
hryx
Good to know tiehuis, thanks very much

1531993139
tiehuis
has anyone done any c va_args implementation from within zig?

1531993149
tiehuis
that is, implementing a variadic function in zig

1531993246
tiehuis
i'll implement one otherwise shortly, since i need it to implement printf and friends in libc

1532008625
andrewrk
tiehuis, I think there's an issue for that

1532008637
andrewrk
I'm not aware of any work done on it

1532011726
GitHub122
[zig] andrewrk pushed 1 new commit to master:

1532011727
GitHub122
zig/master a9f0681 Andrew Kelley: prevent non-export symbols from clobbering builtins...

1532012452
unique_id
Does the current standard library have string to ints/floats conversion functions?

1532012744
andrewrk
we have float printing but not float parsing yet. we have int parsing and printing

1532012770
andrewrk
if you're linking libc you can use those functions in the mean time

1532012778
andrewrk
which I suspect you are for your game

1532013198
unique_id
This is actually unrelated to my game. I'm converting some C++ currency/trading code to zig (nothing special). I was using stod which is part of the c++ stdlib, so I'll use strtod for now.

1532013263
andrewrk
a long while back I started this branch, but I'd probably start over now:

1532013275
andrewrk
"This branch is 1 commit ahead, 1513 commits behind master. "

1532013726
unique_id
Btw once I've ported this spreadsheet application over to zig, I think I'll have the honor of having made the first such app for Zig :D

1532013744
andrewrk
ooh neat!

1532013777
andrewrk
unique_id, I'm excited to get this self-hosted compiler going for you - I have some ambitious goals for how fast it will let you iterate

1532013805
unique_id
awesome!

1532013831
andrewrk
from the very beginning it's designed to utilize all cpu cores maximally, and stay alive watching for files to be updated and auto-rebuild

1532013850
andrewrk
if all that goes well then I'm going to look into hot code swapping

1532013870
bheads_
Thats going to be so good for fast development

1532013885
bheads_
but code swapping is really tricky in some systems

1532013899
andrewrk
I think at least swapping functions out can be portable

1532013913
andrewrk
it's a messy feature though, to be sure

1532016586
unique_id
I'm just getting ready to ramp up my productivity. I've been in a horrible slump. I was always very productive in C#. Everything went to hell when I switched to C++, and also when switching excessively between C++ and other languages. Then I tried C and managed a month of insane productivity but switched back to C++ thinking I could carry it over. Go figure. Sigh. There's just too many things about C++ that distract me/annoy me/

1532016588
unique_id
hinder me, it breaks my spirit.

1532016617
andrewrk
I know what you mean

1532017489
bheads_
I have spent the last 5 years writting enterprise java... it takes me way to long to code without and ide and a GC.  It has broken me... I tried to get back into C++, but five mins after having to write header files I just give up

1532017737
bheads_
I need zig or jai to fix me

1532018099
andrewrk
well, seeing as jai is closed source

1532018108
andrewrk
that leaves zig :)

1532019851
unique_id
Is the write method in os/file.zig supposed to be private?

1532019894
andrewrk
unique_id, no it's not. but I think that calling it with method syntax (incorrectly?) ignores visibility modifiers

1532020044
GitHub21
[zig] andrewrk pushed 1 new commit to master:

1532020044
GitHub21
zig/master 0736e6a Andrew Kelley: std.os.File: add missing pub modifiers

1532020045
andrewrk
unique_id, ^

1532020433
andi3
I was just testing out translate-c and it did not work,

1532020651
andrewrk
andi3, translate-c is mostly complete for .h files. for translating source there is a lot of work to do

1532020757
andi3
allright

1532021333
unique_id
program arguments?

1532021463
andrewrk
unique_id, there are a few APIs for that. the easiest cross platform one is: std.os.argsAlloc

1532021470
andrewrk
it has to heap allocate because of windows

1532021575
unique_id
Windows doesn't put them on the stack for you?

1532021623
unique_id
apparently that's how it works on Linux/system v ABI

1532021822
andrewrk
yeah

1532021841
andrewrk
if you're targeting posix, you can use std.os.posixArgs which is a non-allocating API

1532022319
andi3
just looking at jai again Jon aims at 30 000 lines in under one second/ half a second compile time complete rebuild,  is there some estimate for what zig aims for?

1532022361
andrewrk
no. I'm not far enough along to estimate

1532022374
andrewrk
a clean build won't be that fast though, for several reasons

1532022409
andrewrk
1. zig is sticking with LLVM as the backend and LLD as the linker. this gives us debug info

1532022410
andi3
he plans to eliminate llvm for most of those super fast rebuilds to be fair

1532022465
andrewrk
2. I'm exploring a model where zig stays alive and watches files and rebuilds using memory cached information. this means that clean builds are somewhat slower, but incremental builds are much faster

1532022500
andrewrk
all that said, the job system is the same basic design, so I think it should be reasonably similar

1532022554
andrewrk
jai not using llvm means that it doesn't have debug info, or work on non-x86-64 systems

1532022587
andi3
yes

1532022733
andi3
what I wonder is, if you use no optimization in llvm whatsoever, (why) is it still slow? like shouldn't you be able to run straight without optimizations really fast?

1532022767
winksaville
as I understand it jai is using llvm for "release" builds and supporting other targets.

1532022812
andi3
yes but if it was fast without optimizations he could just run it without optimizations and be done with fast builds

1532022949
andrewrk
abstractions are inherently slow

1532023029
andi3
he mentions that going from 30 000 lines jai to 200 000 lines c to parsing that c to compiling that c is still faster than llvm so not sure what you mean by abstraction?

1532023049
andrewrk
LLVM is an abstraction over code generation

1532023111
andrewrk
so if you use LLVM to do code generation, you're going to take a performance hit over implementing the whole thing yourself and tightly coupling it with your frontend code

1532023118
andi3
yes but so is generating c parsing c and compiling c

1532023374
andi3
and Jon wants to get debug into his own .o files actually so I think that is actually reasonable and developing on x86 as the 99,99% case that seems like a tradeoff, for some programs, non optimized builds will not work of course but than some functions will be able to ne compiled with llvm optimizations so if this works out, it sounds sound

1532023455
andrewrk
yeah, it's impressive results so far

1532023520
andrewrk
zig also has planned @optimizeFor() which works at the block scope level (or at least at the function level), and this would allow you to do some optimization in even debug builds, or debug code in release builds

1532023529
andi3
and its going to be open sourced with a pretty free license as well just saying cause you mentioned - well, seeing as jai is closed source (but of course at the moment you are spot on)

1532023537
andrewrk
this feature requires LLVM even for debug builds

1532023575
andrewrk
I think jai will become much more relevant when it is available

1532023587
winksaville
andi3: have you watched jonathan's "Demo: Backend Speedup" video (

1532023590
andi3
my guess/ hope would be that it would be possible that LLVM without optimizations could be made to go much faster maybe they just not focussed on that because they are all into optimization that there is low hanging fruit

1532023626
andi3
@winksaville actually no but I might skip through

1532023689
winksaville
In the "backend" videos he explains a lot of things he's done.

1532023797
andi3
today I wanted to read the build.zig code but seeing @ParentPointer and remembering what reading the Allocator code (which, now I understand actually) made me sad again and I stopped again

1532023929
winksaville
andrewrk: I've got a zig question, I don't understand "const Self = this" I've used it blindly here (

1532023939
andi3
every time @ParentPointer in zig code is used I think one programmer will loose an hour of its life reading code compared to static interfaces/ traits whatever you call it

1532024017
andrewrk
winksaville, it's not documented yet and it might change. suffice to say that if you do `const Foo = this;` at the scope of a struct or union, then Foo now refers to that type

1532024092
winksaville
And what does "b.buffer" mean, is b a pointer?

1532024109
andi3
@winksaville just stepped into the video and he indeed sped up llvm by a good margin (2x ?) as far as I grasp as first thanks for the link

1532024139
andrewrk
winksaville, try this: @compileLog(@typeOf(b));

1532024145
andrewrk
that will tell you the type of b

1532024156
winksaville
k

1532024528
andrewrk
andi3, I don't understand, are you complaining about the priority order of github issues?

1532024539
andrewrk
there are several open issues for interfaces/traits/oop

1532024837
andi3
can't hide that I wish there was more progression I guess but despite of my angry tone I definitely respect your rhythm to do the things just can't hold back that much, sorry

1532024874
Bas_
You're free to contribute ^^

1532024967
andi3
to me its actually not like there is a whole lot to discuss in the end it basically comes down to whether Andrew agrees with the c or golang types of arguments

1532025117
unique_id
andi3: right now their 80,000 line game is compiling in 1s

1532025119
unique_id
possibly testing more crazy ideas.

1532025171
andi3
one thing I really like about zig so far as well are coroutines, I have not yet really got the hang of it so its not like I can fully grasp the potential but what I have seen so far is really great and I think I will really enjoy coroutines in any language in the future like Kotlin as much around this for totally different areas as well for example

1532025174
unique_id
I really don't see why Zig should experiment with removing llvm at this point in time. That can be done at any point in time.

1532025192
unique_id
whoops

1532025276
Bas_
I heard about jai before, but seeing that it's not even available I don't understand the hype.

1532025315
Bas_
And why are there a so many plugins for stuff when you can't even compile anything? =/

1532026073
winksaville
Here,

1532026348
unique_id
I've personally completely bought into const, var, @ functions, try, the different pointer types and alignment, custom allocators, and honestly everything from Zig. Jai doesn't have these things from what I can see. Zig feels like a better language at the core level. I also do think methods are a nice way to namespace things, something Jai doesn't have. However, JBlow is doing some exciting innovation with his "Contex struct" and

1532026349
unique_id
temporary storage as seen in his new talk I linked above.

1532026393
unique_id
I look forward to seeing how it turns out :)

1532026597
andrewrk
I'll have a look at Context structs

1532026600
unique_id
I used to want to program in assembly just so I could tie random things to different registers that would survive across function calls. It's something I wanted to play with. That's JBlow's context struct :)

1532026609
andrewrk
I wish there was a way to read about it without waiting while a video plays

1532026616
Bas_
same =D

1532026626
andrewrk
I can read a lot faster than I can wait for videos to end

1532026672
andrewrk
unique_id, I was brainstorming an idea for this

1532026709
winksaville
andrewrk: in the "..." menu on youtube you can "open transcript" :)

1532026761
winksaville
If you click on a line it goes to that point in the video.

1532026780
andrewrk
idea being that you could have a scope where, e.g. "allocator" is bound to some value, and then you omit that parameter to functions with a matching name

1532026832
andrewrk
we're probably not going to have that. but I'll have a look at jai's feature all the same

1532027140
bheads_
I have been wondering about jai contexts, is it really just a context in thread local global scope, with a magical ctx.allocator?

1532027142
andrewrk
unique_id, that must be what this tweet was about:

1532027155
andrewrk
person asks: "what happens when you run out of temporary storage? For applications that don't know the maximum size in advance, is using it a bad idea?"

1532027162
andrewrk
jblow replies: "It falls back to heap allocation which it then leaks. If you don't know the maximum size, it's not a candidate for temporary storage."

1532027187
andrewrk
this is one of those edge cases that zig refuses to ignore

1532027206
winksaville
andrewrk: were you able to see the transcript on youtube?

1532027249
andrewrk
winksaville, sorry, I thought you were joking. I don't see how that would help. For one that's not the way the media was designed to be consumed, and for two it doesn't have the code snippets

1532027297
winksaville
when you click on the line in the transcript it goes to the video so you can see the "context" :)

1532027324
andrewrk
I'm not going to look right now, I'm working

1532027336
winksaville
np, just an FYI

1532027789
winksaville
andrewrk: When you've got time, my experiment,

1532027838
andrewrk
you should keep the initStack function and delete the initHeap function

1532027869
andrewrk
if you want it on the heap, then you do allocator.create(Buffer4k.init())

1532027948
andrewrk
if you're worried about extra memcpys then don't because there's an issue open for that.

1532028037
winksaville
just what I was looking for, txs

1532028503
andrewrk
almost there...

1532028511
andrewrk
just need to implement implicit casting

1532028538
bheads_
nice!

1532028570
andrewrk
once this works I can start having stage2 tests

1532028593
bheads_
then on to the promis lands of stage3

1532028595
Bas_
cool

1532028600
Bas_
^^

1532028607
andrewrk
stage3 is just when stage2 is good enough to build itself :)

1532028613
bheads_
exactly

1532028623
bheads_
its a compilers promis land

1532028627
andrewrk
ahhh

1532028628
bheads_
of self compiling

1532028653
andrewrk
through stage3 still links against zig_cpp.a from stage1 though

1532028671
andrewrk
I think that's unique to zig's bootstrapping strategy

1532028682
bheads_
well, no one is perfect

1532028690
andrewrk
you actually can't build stage3 from only stage2

1532028725
Bas_
Why not?

1532028734
andrewrk
until LLVM rewrites itself in zig in 2028 :)

1532028738
Bas_
Ah

1532028743
bheads_
ZZVM

1532028766
andrewrk
I have a plan

1532028768
Bas_
Well... if someone pays me =P

1532028776
andrewrk
first I get them to convert their build system from cmake to zig

1532028796
andrewrk
then the C-API layer

1532028801
bheads_
or zig translate-c++

1532028824
andrewrk
then, "hey we could just implement this 1 new file in zig, it operates seamlessly, plus we already depend on it for the build system"

1532028875
andrewrk
zig translate-c++ just segfaults

1532028878
andrewrk
give up

1532028886
Bas_
=D

1532028908
bheads_
what about translate-llvm

1532028941
andrewrk
that's not better than just using .a files from stage 1

1532028961
Bas_
This might be relevant

1532028972
andrewrk
"source" doesn't mean the format that it's in - it means whether it's the thing people look at and edit, or it's the thing they generate

1532028975
bheads_
compile llvm in llvm asm then decompile that back to zig

1532029005
bheads_
you need a path to migrate from c++ to zig

1532029102
andrewrk
to rephrase, it doesn't matter if we have `.zig` files that provide the LLVM features. it matters what files the llvm community - people - are editing upstream

1532029102
very-mediocre
C++ feels too crazy to transpile to anything ;|

1532029105
Bas_
The gist of it is that you shouldn't try to be perfect, but useful ^^

1532029130
Bas_
And then you can make it close to perfect later

1532029174
bheads_
Having a project in to language is bad plan

1532029181
bheads_
in two***

1532029201
bheads_
most people will give up on using the new language

1532029267
andrewrk
I could see there being a manual port of LLVM to zig

1532029279
andrewrk
it would take a team of people to port each upstream commit

1532029297
bheads_
You should checkout what the D team did

1532029299
andrewrk
we don't have that kind of person-power right now

1532029312
bheads_
they transpiled the c++ to D

1532029324
andrewrk
that makes sense for D

1532029331
bheads_
that goal was to keep parity during the conversiob

1532029334
bheads_
conversion**

1532029336
andrewrk
D is C++++

1532029342
bheads_
lol

1532029347
bheads_
it wished it was

1532029385
Bas_
With garbage collection, right?

1532029399
andrewrk
I think this is a fine plan for the problem of self-hosted re: llvm:

1532029404
very-mediocre
with a stdlib that depends on the garbage collector, and the garbage collector is poor :/

1532029427
very-mediocre
and later on, a short-lived effort to ditch the garbage collector which didn't pan out

1532029434
very-mediocre
(responding to Bas_)

1532029448
bheads_
andrewrk, the only thing I see bad about this is that zig is 100% depended on llvm

1532029478
bheads_
ie, can a zig compiler be written to use the gcc back end?

1532029486
andrewrk
bheads_, no, it's tightly coupled to llvm

1532029509
andrewrk
I mean obviously it could, with some amount of work, but it's not designed that way

1532029588
Bas_
Ehm... I don't get it I think. Does that mean the zig compiler has to parse C++?

1532029594
bheads_
just want to prevent a language decision being decided around how llvm works

1532029625
bheads_
Bas, zig_ccp.a has a c api

1532029658
Bas_
No i mean this

1532029660
Bas_
Use Zig's libc and Zig Self-Hosted Compiler - using zig as a C++ compiler - to build libstdc++ from source for the target.

1532029678
andrewrk
Bas_, zig links against libclang, and clang supports compiling C++ - so we just expose that

1532029687
Bas_
Ooh

1532029758
Bas_
This is a stupid question. What's the value of the self hosted compiler if you have to maintain the stage1/C++ one anyway?

1532029792
bheads_
Thats not dumb at all :)

1532029797
andrewrk
that's a really important question

1532029817
andrewrk
1. I'm using async/await/coroutines and a multithreaded event loop. this would be too hard (at least for me) to get right in c++

1532029854
andrewrk
2. it gives us cross-compiled compiler-rt for all targets. so we can produce a working compiler for all targets without needing gcc-multilib or a cross build of binutils or whatever

1532029955
andrewrk
3. superfluous features can be written in only the self-hosted compiler. for example the auto doc generator

1532029968
andrewrk
4. it actually is a lot easier to write correct code in zig than c++

1532030103
bheads_
I feel like Walter Bright (D lang compiler dev) soent so much time writing C++ for the compiler he didn't get a lot of experience writting complex programs in D. He never seemed to think about anything past really trivial ideas.

1532030144
bheads_
so writting the compiler in zig means zig will get a work out (and so will andrewrk and co)

1532030245
bheads_
then more I think about it, having the stage2 and stage3 compilers depend in zig_cpp.a is good for the stage1 compiler.  its really easy for things like that to bitrot.

1532030340
andrewrk
stage1 can't bit rot because the CI builds will build 1,2,3

1532030351
Bas_
Hmhm I see.

1532030358
andrewrk
that's a huge benefit of having an O(1) self-hosting process

1532030367
Bas_
So stage1 will mostly be a 'minimal' compier to compile the stage2 compiler.

1532030374
andrewrk
exactly - but it has to work

1532030382
Bas_
Sure

1532030395
Bas_
But it doesn't have to be perfect :P

1532030400
bheads_
right but it would be easy to fix a bug in the zig compiler and ignore the stage1

1532030413
bheads_
if the bug does not effect building the stage2

1532030420
andrewrk
right. at some point, we start shipping stage 3, and I close all the bugs that only apply to stage1 (or at least re-label and de-prioritize them)

1532030473
bheads_
would the stage1 and stage2/3 compilers share the same tests

1532030540
andrewrk
we'll have:  test/stage1/*, test/stage2/*, and test/both/*

1532030553
andrewrk
ideally all the tests will be in the "both" dir

1532030562
andrewrk
but in reality some will be in stage1 and some will be in stage2

1532030764
bheads_
interesting

1532030768
bheads_
but makes sense

1532031174
winksaville
I've built stage1 and I don't see `zig_cpp.a` I do see `zig_llvm.cpp` and `zig_llvm.cpp.o`, what am I missing?

1532031325
winksaville
I think I see it now, `libzig_cpp.a`

1532032387
winksaville
Can you write a compiler in zig that compiles language XYX that just uses llvm c interface plus zig_llvm.cpp?

1532032433
andrewrk
you can write a compiler in zig that compiles language XYX (assuming that's a made up name) that just uses llvm c interfaces

1532032452
andrewrk
zig_llvm.cpp is needed for only some extra API that llvm's C API is lacking

1532032665
winksaville
yes, just made up XYZ, and I mentioned zig_llvm because I'd heard/saw that you'd said that.

1532032671
andi3
@Bas_ This might be relevant

1532032831
Bas_
In a way, yes. But at the same time Zig is here, in it's imperfect form.

1532032854
andrewrk
incremental improvements

1532032927
winksaville
Will stage3 be able to compile std/special/compiler-rt/* ?

1532032930
andi3
...but the link is great I read a couple of related articles for the bigger picture,  definitely interesting thoughts

1532032998
GitHub120
[zig] eduardosm opened pull request #1264: [WIP] begin implementing "ABI hooks" (master...fn-abi)

1532033082
Bas_
I thought it was funny he said: " Unix and C are the ultimate computer viruses. "

1532033089
Bas_
Because he's kinda right. =D

1532033805
andi3
I would say virus is by far not doing it justice but its still funny right :D

1532033879
andi3
talking about jai I think its funny how jai is partly the opposite of the zen of zig but nevertheless some may argue both languages have many similarities, anyway no point in getting very much into politics here :D

1532033971
andi3
I mean just Jons attitude like "just hack it" vs "perfekt software" but still both languages share much of the design

1532034777
winksaville
andi3: txs for the link, good read and as for jai, I find it interesting and it does seem that zig and jai have similarties, but the big difference is zig is here now and jai isn't !!

1532034845
winksaville
With just a few days looking a zig I do concur with andrewrk that it's easier to write correct code in zig rather than c/c++, hence my interest.

1532034879
winksaville
So thanks Andrew for creating zig and making it available and open source!

1532035024
bheads_
also:

1532035252
bheads_
andrewrk, Way multiple .o files and not just one?

1532035665
andi3
thanks for the heads up

1532037543
winksaville
Does zig support "move semantics" of "objects"?

1532038370
GitHub152
[zig] andrewrk pushed 1 new commit to master:

1532038371
GitHub152
zig/master 0a880d5 Andrew Kelley: fix generation of error defers for fns inside fns...

1532038981
bheads_
andrewrk, thanks for the live stream, learned a few new things about the compiler

1532039017
andrewrk
bheads_, no problem. thanks for the great questions! and for helping me when I got stuck, haha

