1516968648
Hejsil
andrewrk, seems .addPackagePath worked perfectly fine

1516975802
jfo
andrewrk are you around?

1516975893
jfo
I am wondering... is there any reason why a comptime function can't return a function? I know this is in the broader context of the discussion around variable capture and closures, but if a compile time function knows everything ahead of time, doesn't that mean it doesn't need to concern itself with that?

1516980627
andrewrk
jfo, it's planned to support that

1516981074
GitHub56
[zig] andrewrk pushed 1 new commit to master:

1516981075
GitHub56
zig/master ad3e2a5 Andrew Kelley: fix compiler crash on function with invalid return type...

1516982141
noonien
hello!

1516982160
noonien
i've just stumbled upon zig, and i'm enjoying it

1516982245
noonien
i've got up to "comptime" in the docs. from what i understand, comptime calls cannot call external functions, and i was wondering if this rules out reading a file at compile time

1516982289
Hejsil
Yes, because reading files in the std calls out to the os

1516982296
Hejsil
Aka external functions

1516982299
noonien
a use-case for this, that i would find interesting, is parsing protobuf files at compile time, instead of using a code generator

1516982311
Hejsil
True, that would be cool

1516982327
Hejsil
But

1516982332
Hejsil
You have @embedFile

1516982352
noonien
oh, cool. i've not gotten that far yet, will look into it.

1516982363
Hejsil
Ye, just remembered myself

1516982376
noonien
oh, awesome! so you can read a file at compile time, great!

1516982402
Hejsil
Sadly, no way to have UI, i think :)

1516982417
Hejsil
I mean, you would probably have to interface os for that

1516982431
noonien
UI?

1516982437
Hejsil
User interface

1516982457
Hejsil
Well, GUI (Graphical User Interface) is actually what I was refering too

1516982466
Hejsil
Not that I have a usecase for this

1516982470
noonien
well, having the content of the file would be great and pretty much all that's needed as far as I can tell so far

1516982493
Hejsil
Indeed. I don't think drawing on the screen at comptime has much use

1516982520
Hejsil
Unless you intend to do crazy stuff like what you can do in Jai

1516982569
noonien
Nope. I've not got any experience with Jai. I'm only interested in perhaps using zig for embedded projects

1516982597
Hejsil
I think Zig will suit your needs then

1516983051
jfo
andrewrk: awesome! yeah I thought so... I'm curious about the difference b/t comptime higher order functions and runtime ones, though, the broader discussion around closures doesn't really apply to comptime does it? Because you're basically doing macro expansion on the comptime code? (I realize that's a misleading oversimplification, but it's a useful framing)

1516983075
andrewrk
that's correct

1516983140
jfo
is there any reason you can't next comptime function calls? will a comptime function be able to return a comptime function?

1516983155
jfo
is that a meaningless question?

1516983156
andrewrk
that should work fine

1516983177
jfo
cool! I am

1516983182
andrewrk
I don't know what it means to  "next" a function call, but you should be able to return a comptime function from a comptime function

1516983221
jfo
I'd like to try to build a parser combinator when this is available

1516983224
jfo
oh sorry nest

1516983227
jfo
not next

1516983234
jfo
typo

1516983255
Hejsil
Well,

1516983280
Hejsil
It's pretty interesting to doo

1516983309
Hejsil
But what feature are you waiting for, before you play around with that?

1516983388
jfo
Hejsil: Jeg vil tale, men min baby gr√¶der nu

1516983394
jfo
brb

1516983427
jfo
oh wait he stopped

1516983488
jfo
I think higher orderness is necessary for the "combinator" part, not the "parser" part

1516983497
jfo
here is a good talk about these:

1516983544
jfo
lol

1516983650
jfo
this looks awesome though I will look through your code ty

1516983667
Hejsil
It's a little bit of a hack at places

1516983690
Hejsil
Because we don't have GC, I kinda needed the user to provide a cleanup function

1516983709
Hejsil
And, local structs are used to create functions and return them

1516983732
andrewrk
Hejsil, one trick to consider, is to have an arena allocator, and so you don't have to worry about freeing individual things, and you can just free the entire AST by freeing the arena at the end

1516983740
andrewrk
I'm going to do this for the self hosted parser

1516983747
jfo
oh I see, that is clever. But certainly it will be better when you can return functions directly I guess?

1516983779
Hejsil
andrewrk, the user can just provide that allocator and then not provide a cleanup function :)

1516983890
andrewrk
I'm going to do this for the self hosted parser

1516983893
andrewrk
oops

1516983918
Hejsil
That makes sense

1516983944
MajorLag_
It appears that a struct declared in a function block has the name of the function block for its type in error output:   error: invalid cast from type '&u32' to '&testNestedStructCast()'

1516983972
andrewrk
MajorLag_,

1516984075
MajorLag_
Makes sense.

1516984138
andrewrk
the suggested workaround for now is to put the struct definition outside the function

1516984156
andrewrk
(still plan to fix it though)

1516984195
Hejsil
Let's assume that a lib allows the user to provide an allocator, but cleans up on error. If the user provides something like an arena, will the empty free calls be a problem?

1516984212
Hejsil
For speed that is

1516984278
andrewrk
I think in practice that is likely not going to be the speed bottleneck of a given program

1516984287
Hejsil
Probably true

1516984400
andrewrk
my plan for the self hosted parser is: create mem.Arena which takes a mem.Allocator, and provides another mem.Allocator which is meant to be used without calling free. Then you can call arena.free() to free everything that you allocated with it

1516984419
andrewrk
so you still pass a normal allocator to the parser

1516984435
Hejsil
Ye, that's what I would expect

1516984444
andrewrk
parser.parse() returns a Tree, and you can do tree.free() to free all of it at once

1516984543
Hejsil
I guess tree.free() would do the traversal to free. While, if the user provided an arena, they would just call arena.free() instead

1516984594
andrewrk
it wouldn't do the traversal; it would do only self.arena.free()

1516984614
andrewrk
because each parser.parse() creates a new arena for the AST that it returns

1516984641
Hejsil
Aah, ok

1516984681
noonien
it would be cool to have something that automatically formats zig source code with a well defined style guide

1516984686
noonien
something akin to "gofmt"

1516984695
Hejsil
I think that is planned

1516984702
noonien
awesome!

1516984734
andrewrk
you can see progress on zig fmt in these tests:

1516984740
Hejsil
That'll also help people avoid the "newline" "problem" that new users will face

1516984742
noonien
also, from what i can tell. errors in zig are just ints. is it possible to annotate errors?

1516984752
andrewrk
these tests are what the self hosted parser understands, and also verify that zig fmt outputs the same thing

1516984815
andrewrk
noonien, you can have doc comments for errors, and when we have automatic docgen it will tell you, for every function, the list of possible errors, and the docs for each error

1516984836
andrewrk
and you can even override the doc comment for a given error on a per-function basis

1516984840
noonien
yup. but that's not what i meant.

1516984852
noonien
for example, it would be great to be able to wrap errors

1516984856
andrewrk
I see

1516984870
andrewrk
it's not possible

1516984879
andrewrk
you are welcome to open a github issue and make a proposal

1516984901
Hejsil
Wasn't this discussed before?

1516984907
noonien
hmm, i'm not familiar enough with the language to make a proposal, will think about it

1516984914
andrewrk
Hejsil, probably. I don't remember where

1516984920
Hejsil
And the conclusion was, that that's when you make a tagged union and return that

1516984925
andrewrk
yen

1516984928
andrewrk
*yes

1516984938
Hejsil
I can't remember where I read it

1516984945
noonien
i like go errors for example, errors satisfy an interface that can return a string that describes what happened

1516984957
andrewrk
you can call @errorName(err)

1516984962
noonien
this probably doesn't bode well with how zig works though

1516985002
andrewrk
zig error codes are intended to be understood by the code; it's expected that there is a translation step between an error code and a user friendly error message

1516985011
andrewrk
(for command line programs sometimes you can get away with @errorName)

1516985020
noonien
sure, but you can't really have errors as: `can't parse definition: open file.dsl failed: permission denied`

1516985039
Hejsil
Well, you probably have the file name at call site

1516985050
Hejsil
And then you get error.PermissionDenied back

1516985056
andrewrk
I would argue that correct software design would be bubbling up that in a data structure understandable by code, only rendering the error message at the very end

1516985127
andrewrk
I've seen the anti-pattern of getting a "black box" error string from a low level component at a lot of work environments

1516985161
noonien
Hejsil: yes, but for example, calling "lib.parse" will have the user check for the errors "lib.parse" can return, AND the errors any other function "lib.parse" might call

1516985172
andrewrk
you end up with things like "error: can't parse definition: parsing definition failed: error: permission denied"

1516985208
noonien
Hejsil: in most cases, the user doesn't care why the parsing failed, as long as it's not fixable, but the error message would be more descriptive

1516985242
andrewrk
we actually have a feature that addresses this issue

1516985274
andrewrk
consider if lib.parse catches PermissionDenied and returns ParseError, so now the caller only has to deal with ParseError

1516985278
Hejsil
I totally understand. I'm just saying, that some consideration should be put into having most information available at callsite

1516985281
Hejsil
If possible

1516985292
andrewrk
in zig you can capture an error return trace

1516985293
Hejsil
If not, then custom error union

1516985308
andrewrk
this is kind of like a "stack trace" and it would include the permission denied error, as well as the parse error

1516985314
andrewrk
so in a debugging situtation, you know exactly what happened

1516985321
noonien
andrewrk: yes, but the user wouldn't know why ParserError was returned if I understand correctly

1516985366
andrewrk
it sounds like the requirements of the program dictate that you need a more complicated error reporting mechanism

1516985382
andrewrk
I think that zig's error codes are in harmony with that

1516985418
andrewrk
e.g. in a parser that can get PermissionDenied, that could happen for any number of files

1516985432
andrewrk
you probably also want to note the token range that caused the file to be looked up

1516985446
andrewrk
the error return value seems like the wrong place to handle this to me

1516985483
noonien
i see, so you're suggesting another type, that encompasses the error details, that is populated when an error occurs

1516985487
andrewrk
yes

1516985532
noonien
this is a nice workaround, however, it basically leaves error handling to the user imho

1516985550
noonien
but i can understand why zig might want to make such a decision

1516985568
andrewrk
I think you are overestimating the number of cases that an error code is not sufficient

1516985617
andrewrk
I think that's a fair statement though. zig provides tools and then leaves error handling to the user

1516985678
noonien
perhaps, i'm coming from go, and have learned that having as much info when an error occurs is usually desirable

1516985705
noonien
but having strings as errors, and being able to compose errors will probably mean that each function that can return an error be able to allocate it

1516985785
andrewrk
I see your point

1516985813
andrewrk
if you ever catch one error code and return a different one, it would make sense if there was some kind of hierarchy

1516985825
andrewrk
"ParseError because PermissionDenied"

1516985860
andrewrk
and then associated parameters

1516985901
noonien
yes, this is one of the simple examples. in a bigger program there will probably be even more complex scenarios

1516985966
noonien
like having user-facing errors, that can store their underlying cause hidden. this way the underlying cause can be logged, while the user is shown the user facing error

1516986014
andrewrk
if we want to log the underlying cause, it can log an error return trace, which solves the issue except for parameters such as which file didn't open

1516986037
andrewrk
the error return trace shows all the lines of code where an error code was returned from a function

1516986062
andrewrk
so that would, in our example, include PermissionDenied as well as ParseError

1516986072
noonien
perhaps one such error would be "InvalidForm (can't read file)", while the app knows the entire error trace: "InvalidForm(field1), ParseError, PermissionDenied(file.txt)"

1516986119
andrewrk
that makes sense

1516986203
noonien
for example, go doesn't come with support for error stacks built-in, but because the `error` type is an interface, one can make their own type that wraps errors, there's several libraries that do that actually

1516986275
noonien
ofc, zigs aproach is probablly more in-tune with the language tuned to be as optimal as possible from a memory and speed perspective

1516986280
andrewrk
I think in a situation like this it's pretty reasonable to define structs for return values where you want to return a possible error code and parameters

1516986305
andrewrk
the workflow would be: use zig's error types until you need parameters, then switch to union(enum)

1516986356
noonien
cool, from what i can tell, zig doesn't support multiple return values, right?

1516986371
andrewrk
there have been a few proposals kicking around

1516986377
andrewrk
but nothing accepted yet

1516986395
andrewrk
I think having an error as one of multiple return values would be an anti-pattern

1516986413
andrewrk
you'd want a union(enum) instead

1516986421
andrewrk
e.g. Rust's Result type

1516986566
noonien
that makes sense

1516986654
noonien
are there any docs for the standard library?

1516986805
noonien
i see there's a promising proposal for multiple return values that looks promising:

1516986945
andrewrk
noonien, no. part of the work of the self hosted compiler is getting documentation generation to work, and then we'll have std lib docs

1516987090
noonien
oh, i see the stdlib simulates traits by passing methods to structs

1516987145
noonien
interesting

1516987194
noonien
i'm guessing implementing interfaces is discussed in

1516995537
MajorLag_
andrewk, the problem with union(enum) is that you can't use it with Zig's error handling conveniences like catch, try, etc., if I understand correctly. It would be nice if there was a way to do what noonien was talking about and keep that. Not sure what the solution would look like.

1516995570
andrewrk
fair point

1516995825
MajorLag_
If I were doing it in C, I'd make error a struct with the error's int value, a *void, and a length. But obviously that's pretty inelegant and unsafe for Zig.

1516995848
andrewrk
you could still do that, but yeah maybe there's a better way

1516996053
andrewrk
if you pass in a context struct, you can add error information to it, and then still use an error for the return value

1516996129
MajorLag_
Yeah, that seems a lot simpler, but it does mean adding an extra parameter to everything that can error.

1516996153
andrewrk


1516996156
andrewrk
example

1516996182
andrewrk
in this example it does not mean an extra parameter, because you have the "self" parameter anyway

1516999112
jfo
tiehuis: I made some improvements to the syntax file but I can't for the life of me figure out quite what is wrong with multiline strings

1516999713
andrewrk
jfo, it should be a nearly identical regex as for single line comments

1516999728
jfo
i know, that's what's doing my head in

1516999826
jfo
I got it matching with

1516999843
jfo
I think it's in good enoguh shape for the linguist PR though now, I'll do that tomorrow

1516999870
andrewrk
exciting

1516999888
andrewrk
I hope they try to say that zig isn't popular enough

1516999899
andrewrk
I will then make a github comment linking to 50+ zig repos from various people

1516999983
jfo
that's part of the contributing guidelines anyway, please link to that in the

1517000003
andrewrk
ok

1517000057
jfo
ty! gtg ttyl

1517000072
andrewrk
l8r

1517001582
tiehuis
should we disallow any preceeding characters on multi-line string literals?

1517001617
tiehuis
never mind about that, found a case where you can actual from some valid construct

1517009996
jfo
andrewrk:

