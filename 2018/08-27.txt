1535328498
cgag
haven't done much c/c++, do a lot of go, how do you guys generally represent multiple return values, just return a struct?

1535328798
MajorLag
cgag, yes. However there's a proposal for tuples (#208), and for multiple return values (#498).

1535328815
scientes
or use out variables with pointers, as is normally done in C

1535328830
scientes
*out arguments

1535328848
scientes
but i'm all for multiple return values

1535328852
MajorLag
Yeah, that is used by some builtins.

1535328868
scientes
so that the functions are pure

1535328888
scientes
which is important for a bunch of optimizations

1535328908
MajorLag
tuples seem like they're pretty likely to happen.

1535329022
scientes
i'm more for multiple return values

1535329036
scientes
which allows you to switch values without a temp variable

1535329046
scientes
a, b = b, a

1535329058
scientes
multiple assignment too

1535329099
kristate
back online

1535329170
scientes
good morning

1535329350
kristate
morning

1535329351
cgag
actually i guess in my case it's should probably just be an error union anyway, i just did a hacky port of golangs parsefloat and the second return value is a bool for overflow

1535329378
cgag
multiple return values is pretty nice though,  would be happy to see that

1535329456
scientes
i think it is important for optimization reasons, allows functions to be labled pure (although that has to be annotated, and there is no way to annotate that AFAIK)

1535329922
cgag
after writing a bunch of rust and go, parens on an if statement feel pretty weird, has dropping those been discussed?

1535330957
MajorLag
I believe it has, but I can't find an issue for it. Personally I find it makes for harder to read code.

1535334751
kristate
andrewrk: I reopened the PR with a patch

1535334751
kristate


1535334809
scientes
I ported zig to arm64, most things don't work however, write() works

1535334814
scientes
and argc/argv works

1535335038
kristate
scientes: this is good

1535335042
kristate
arm64/linux?

1535335046
scientes
yes

1535335050
kristate
cool beans

1535335068
scientes


1535335090
scientes
there is something wrong with the calling conventions cause 1 gets turned into -3412

1535335098
scientes
but that 1 was comptime 1

1535382814
bodie_
I can't seem to find docs for exporting Zig symbols into shared libs for use from C / C++

1535389156
Guest38217
andrewrk: You were going to elaborate on somethin' or other after dinner a few days back, no?

1535389187
dirkson
Whoops, my name was borked. Fixed.

1535393187
andrewrk
dirkson, I believe it was on my ideas for what the stage2 compiler could do

1535393228
andrewrk
which is, in summary, to be a command line IDE with a repl interface, which you would use as the backend for a real ide or a text editor plugin

1535393330
dirkson
Yeah, ok. So it's imagined that you'll need 1) Your compiler (or one implmented very similarly) and 2) a text editor with the ability to interface with this compiler   in order to maintain nontrivial zig codebases?

1535393391
andrewrk
that would be one option, but I'm hinting that there would be an alternative (2) which is to use the command line interface of the stage2 compiler and a plain text editor

1535393407
andrewrk
certainly, integration would be nicer

1535393407
dirkson
Hmm, true.

1535393438
andrewrk
but you could accomplish all the same things - refactorings, renamings, finding out the fields of a type

1535393498
dirkson
I'm not being explicit because I disagree, I'm just trying to nail down what level of integration is expected, because that has implications for other language features. This opinion seems consistent with language features I was eyeing suspiciously, though, so that seems good : )

1535393687
dirkson
Is composability of tools a design goal? (I.e. The Unix way of having multiple smaller tools that chat with each other)

1535394064
andrewrk
dirkson, it's hard for me to answer the question at that level of generality. can you give a zig-specific example?

1535394199
dirkson
Well, I was considering whether the compiler and repl could/should be separated. One of the things I observe with other languages is that people create alternative compilers for them at a fairly high rate, for various niche needs. If you want to support that for Zig, separating out the repl would help - It'd allow people to

1535394201
dirkson
do both at once.

1535394233
andrewrk
I see

1535394289
andrewrk
I think that alternative implementations would choose to support a different set of features in the zig toolset

1535394307
andrewrk
for example an alternative implementation may not support the --watch  flag which enables the repl stuff

1535394338
andrewrk
just replacing the repl wouldn't really work, because it is fundamentally tightly coupled with the compiler

1535394357
dirkson
Hmm. Yeah, ok. I can see separating things at that level, too.

1535394406
andrewrk
that's a bit into the future though. writing the language specification is scheduled for 1.0.0 and we're still at 0.3.0

1535394413
dirkson
True!

1535394730
dirkson
I think, left to my own devices, I'd probably produce some sort of library for parsing Zig code, and just re-use it in the repl and compiler. That way, you support the repl behavior you want without duplicating code, and keeping the repl code separate from the parts of the compiler it doesn't need to understand (I.e. The actual translation of zig code into assembly) while also providing three independent

1535394732
dirkson
projects that all have utility apart from one another. Buuut I tend to lean pretty heavily towards the 'small, composable tools' mindset.

1535394831
andrewrk
dirkson, we have that already

1535394838
andrewrk
std.zig.parse

1535394855
andrewrk
and then for rendering the AST, std.zig.render

1535394881
andrewrk
sorry by "that" I mean some sort of library for parsing zig code

1535394888
dirkson
I figured : )

1535394914
andrewrk
here isaachier uses it to make zig ctags:

1535394952
andrewrk
as for the other stuff, I guess I'll have to admit that I'm thinking about this a bit of a different way

1535394975
dirkson
Neat! Then I don't think I understand why the repl/compiler need to be so tightly integrated. Clearly, there's a bunch of overlap, but in my head the repl mostly needs to either call the 'parse' bits, or needs to call the 'compile' bits, depending on what you ask it to do.

1535395002
andrewrk
my goal is not really to create composable tools - although I do see the value in those things - but my goal is that the set of use cases that zig is attempting to solve are optimally and ideally solved

1535395021
dirkson
Mmm, you've got the build system integrated into the compiler too. Maybe that's part of it.

1535395029
andrewrk
often these two different goals are in harmony, but sometimes not

1535395056
dirkson
Aye.

1535395084
andrewrk
when I talk about the stage2 compiler repl, I'm describing a system that watches files on disk, and incrementally builds and links a project, keeping all the compiler analysis in memory

1535395109
andrewrk
the IDE features are merely an interface to introspect that state

1535395115
andrewrk
that's why I claim they are tightly coupled

1535395164
dirkson
Yeah. I think the build system is a good example of where composability and other concerns are in conflict. Understanding zig code allows the build system to do tricks that would otherwise be impossible for more traditional build systems.

1535395234
andrewrk
my main goal with the build system is to create a standard, consistent build strategy for zig projects, but more importantly, to remove a dependency on an external build system

1535395267
andrewrk
idea being that even a very big and complicated zig project can potentially only depend on a zig compiler and nothing else

1535395301
andrewrk
fewer dependencies means that more people - both developers and users - will be able to use your project

1535395575
dirkson
Naw, that particular argument I don't buy. Given that you can set the license on all thedependencies, and bundle them all together, adding additional dependencies doesn't create any additional issues for devs. By default, people would just depend on the standard Zig Compiler Bundle. But if they needed to, they could pull it apart and replace bits, while only needing to understand simplified interfaces between

1535395577
dirkson
parts. My window manager does this - apt-get install i3 pulls in i3-wm, i3-lock, and i3-panel (Or similar) which all work together nicely. But I can still swap out one of those sub-parts for one I prefer, if I want to.

1535395650
andrewrk
as another example, the biggest reason that people don't contribute to zig is inability to obtain and build the correct version of LLVM

1535395688
dirkson
Sure. Dependencies from another source can be a problem. But the

1535395695
andrewrk
agreed

1535395712
andrewrk
so for example GNU Make, and Zig are from different sources

1535395757
andrewrk
therefore a build system coming from the Zig source is meaningful, because it removes a dependency from another source

1535395915
dirkson
Sure. But, from a strictly dependency-issue-oriented perspective, providing the zig-make system as a separate binary or as a separate block of code integrated into the main compiler binary doesn't neccesarily change the minimum complexity to start a zig project.

1535395943
andrewrk
agreed

1535395965
dirkson
You just have other, compelling reasons for integrating the two :)

1535396364
dirkson
Thanks for the chat, and please pardon my attempts to nudge dev work. I wouldn't care so much if I weren't so excited about Zig as a language : )

1535396413
andrewrk
I'm happy to chat with you, dirkson

1535398846
wink_
I improved the zig-benchmark

1535399865
hoppetosse
andrewrk: what's the difference between a c_void and an Opaquetype?

1535399900
andrewrk
hoppetosse, c_void is defined like this:  const c_void = @OpaqueType();

1535400146
hoppetosse
And with my PR, the only difference is that ptrs can implicitly cast to c_void, but not other opaque types?

1535400227
hoppetosse
or more correctly, *T will implicit cast to *c_void, but not *@OpaqueType

1535400416
andrewrk
hoppetosse, yes, exactly

1535400428
andrewrk
make sense?

1535400467
andrewrk
like with other C types, c_void generally should be avoided when possible. e.g. you would create a special @OpaqueType for different things

1535400502
andrewrk
but we smooth over interfacing with C, and zig users can increase safety by changing declarations to zig types rather than C types

1535400848
hoppetosse
makes perfect sense, just wanted to confirm the rationale =)

1535407927
scientes
It would be nice if the the editor integration worked similar to clang static analyzer

1535408903
andrewrk
hoppetosse, can you remove the std.debug.warn line from your PR?

1535408992
andrewrk
nvm I'll get it for you

1535409003
hoppetosse
oops! sorry about that

1535409042
andrewrk
no worries :)

1535409053
hoppetosse
I also forgot to remove the std.debug from the assert call

1535409072
andrewrk
I'll get it, I'm already half done mergin

1535409080
hoppetosse
cool!

1535409114
andrewrk
done. thanks!

1535409205
hoppetosse
andrewrk: what distro are you on?

1535409227
andrewrk
nixos

1535409270
hoppetosse
If you've heard of

1535409299
hoppetosse
check out

1535409386
hoppetosse
spoiler:

1535409424
hoppetosse
Zig really is living up to its effortless c-interop =)

1535409518
andrewrk
hoppetosse, hmm maybe my version is wrong: lld: error: undefined symbol: uiNewForm

1535409567
hoppetosse
ah, damn

1535409625
andrewrk
3.1a

1535409626
hoppetosse
they do warn in the readme: libui is currently mid-alpha software XD

1535409633
andrewrk
which one were you using?

1535409652
hoppetosse
Alpha4

1535409658
andrewrk
screenshot looks great though :)

1535409670
hoppetosse
3.1 is from 2016!

1535409686
hoppetosse
granted alpha 4 is from 3 weeks ago

1535409730
hoppetosse
It was a pretty painless port of their control gallery example

1535409767
hoppetosse
the rest of tick is still not really operational

1535409786
hoppetosse
I really want to get it done before the summer though

1535409804
hoppetosse
not done, but up and running =)

1535410660
andrewrk
hoppetosse, it might be fun to start doing a simple game in it, even in the unfinished state

1535410864
hoppetosse
That's a good goal to set. Up and running with an example game

1535410887
hoppetosse
I mean, at least something like flappy bird =P

