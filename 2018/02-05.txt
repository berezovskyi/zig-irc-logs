1517826281
zesterer
Passing a callback to fmt.format()... I get "Unable to evaluate constant expression". Any ideas?

1517832814
tjpalmer
Anyone know the secret for compiling to wasm? I tried this: exe.setTarget(builtin.Arch.wasm32, builtin.Os.freestanding, builtin.Environ.unknown);

1517832826
tjpalmer
Got this error: unable to create target based on: wasm32-unknown-unknown-unknown

1517832861
tjpalmer
I can dig around more, but I figured I'd check first to see if anyone else already knows the answer.

1517832946
tjpalmer
And I haven't really tried `format` so I can't answer that myself.

1517834681
andrewrk
benzrf, all the assertion failures are bugs

1517836166
GitHub21
[zig] andrewrk closed pull request #743: Use /dev/urandom and sysctl(RANDOM_UUID) on Linux. (master...linux-random)

1517836166
GitHub18
[zig] andrewrk pushed 2 new commits to master:

1517836167
GitHub18
zig/master ec59f76 Andrew Kelley: Merge pull request #743 from bnoordhuis/linux-random...

1517836167
GitHub18
zig/master 73ee434 Ben Noordhuis: Use /dev/urandom and sysctl(RANDOM_UUID) on Linux....

1517840837
GitHub176
[zig] andrewrk pushed 1 new commit to master:

1517840837
GitHub176
zig/master 44d8d65 Andrew Kelley: fix test failure, organize code, add new compile error

1517844642
andrewrk
zesterer, did you forget the format parameter? where is the error pointing to?

1517846265
zesterer
andrewrk: I don't believe so. Since I'm new to Zig, I'm using Zen as a reference when it comes to syntax, and I'm doing exactly what Zen does:

1517846348
andrewrk
zesterer, I'll run your code and have a look

1517846366
andrewrk
also, sorry I couldn't get to all your tickets. busy weekend for me

1517846401
zesterer
andrewrk: Cheers. If you're building the entire kernel, you'll want to clone the root repostory and then the submodules. For now, I've not touched the printf method, but that can be changed in main.zig

1517848198
andrewrk
zesterer, it compiles for me

1517848304
andrewrk
oh, nvm I was able to trigger that compile error by adding a printf call

1517848795
jfo
I'm wondering what an assert that's expecting an error looks like, could someone point me to an example of that in the src?

1517848816
andrewrk
zesterer, your printf format argument does not have `comptime` on it. so it's a runtime known value

1517848892
andrewrk
jfo,  foo() catch |err| assert(err == error.MyError) else @panic("expected error")

1517848925
jfo
awesome, thanks

1517848997
andrewrk
I think in the future we can have assert(foo() == error.MyError) but afaik that doesn't work yet

1517850972
zesterer
andrewrk: Did you change "print" to "printf" in main.zig?

1517850985
zesterer
andrewrk: Oh wait dw. New messages

1517851103
zesterer
andrewrk: FYI, the error message appeared to point at a completely different parameter (hence my confusion). I assumed it was a problem with the callback

1517851285
andrewrk
zesterer, it pointed at the correct parameter for me, because I used the official zig compiler, which only supports spaces

1517851291
andrewrk
so I did s/\t/    /g

1517851294
andrewrk
to get it to compile

1517851298
andrewrk
and it pointed to the correct parameter

1517851299
zesterer
andrewrk: Touche ;-)

1517851480
zesterer
andrewrk: Just a thought: shouldn't the error report strip all initial whitespace from the line? That way it doesn't take up so much space

1517851554
andrewrk
maybe. it kinda looks good as is though

1517851738
zesterer
Fair enough. You're the maintainer.

1517852708
andrewrk
zesterer, to be fair, the error message printing could be updated to support tabs. it's not a fundamental limitation

1517852718
andrewrk
just a bug in your fork

1517852757
zesterer
andrewrk: I might fix that. I'd just replace all tabs in the error output with spaces. Easiest and probably the smartest way of doing it

1517852817
andrewrk
zesterer, or you could iterate over the line byte by byte, and if it's a ' ' or '\t', print the same thing, otherwise print a ' '

1517852830
andrewrk
instead of printing ' ' * column

1517852953
GitHub44
[zig] andrewrk pushed 1 new commit to master:

1517852953
GitHub44
zig/master 40e4e42 Andrew Kelley: handle linux returning EINVAL for large reads...

1517853094
zesterer
andrewrk: Fair point

1517854632
benzrf
andrewrk: semi-serious suggestion: why not aim for entirely eliminating 'comptime' as a language-level concept

1517854663
andrewrk
how would you solve the problems that comptime solves?

1517854674
benzrf
same ways as in any dependently-typed language ;)

1517854866
benzrf
oh wait hmmmmmmm

1517854902
GitHub17
[zig] andrewrk pushed 1 new commit to master:

1517854902
GitHub17
zig/master 917e6fe Andrew Kelley: handle linux returning EINVAL for large writes...

1517854967
benzrf
i guess to make that work in the context of a language like zig, you might end up having to basically reimplement haskell-style typeclass machinery >.>

1517855133
zesterer
benzrf: Without comptime, you'd have weirdly ambiguous errors for things that can/can't be comptime-evaluated but NEED to be comptime evaluated. Like printf format strings. You'd end up with the source of an error being a long way from its reported location, which causes a lot of problems

1517855246
zesterer
i.e: You pass a non-comptime string into fmt.format, and then a comptime string. The error occurs within fmt.format (which is confusing enough for new users, since it implies a problem with the standard library), yet behaves differently for each parameter.

1517855296
zesterer
At least I assume that's why. Feel free to correct me.

1517855488
andrewrk
that's right

1517858078
jfo
andrewrk: the plan is to pin to the llvm release coming out in a month or so, is that right?

1517858649
andrewrk
jfo: that's right. 0.2.0 planned release date is the Monday 1 week after llvm 6.0.0

1517858800
jfo
ok. I've added head to homebrew but will likely need to account for that somehow then

1517858808
jfo


1517858827
jfo
I assume it's acceptable for --HEAD formulas to be flakier, considering.

1517858833
jfo
(acceptable to them, I mean)

1517861567
jfo
also re: build sys

