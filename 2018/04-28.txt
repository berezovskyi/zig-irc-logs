1524909398
alexnask
This is an Iterator interface implementation with a SBO and automatic vtable generation if anyone is interested:

1524909448
alexnask
Iterator(T) (our interface type) holds an implementation object either in an inplace small buffer or on the heap (in which case the buffer is used to hold the heap + alloc pointers)

1524909623
Hejsil
You could probably generate most of that once you have @reify and @reflect

1524909632
Hejsil
Which is exiting

1524909650
Hejsil
exciting*

1524909689
Hejsil
A none owning interface would be a lot simpler to implement though (all interfaces in std are none owning)

1524909753
alexnask
I know

1524909765
alexnask
I actually have some code that does that

1524909772
alexnask
Well, theoretical code

1524909789
alexnask
Btw, @reflect (which I decided to call @typeInfo) is nearly done

1524909797
alexnask
Only function def info is left

1524909798
Hejsil
I have code (that crash the compiler) that does it too :)

1524909803
Hejsil
Uuuh

1524909806
Hejsil
Hype

1524909832
alexnask
I'm going to start work on @reify (perhaps @renderType, I'd like your opinion on the name) after that

1524909862
alexnask
I want to make it explicit you can only reflect/reify types so @typeInfo/@renderType sound good to me, what do you think?

1524909883
Hejsil
I like @typeInfo, but @renderType i'm not sure

1524909908
Hejsil
When I think render, I think, output assembly, video rendering, pretty printers

1524909915
alexnask
Right

1524909920
Hejsil
But I guess it is a kind of code generation

1524909925
Hejsil
So idk

1524909932
Hejsil
@createType ?

1524909937
alexnask
@mixinType, @generateType could be other option

1524909939
alexnask
options*

1524909942
alexnask
or @createType, yes

1524909963
Hejsil
The name shouldn't stop you from implementing it though :)

1524909970
alexnask
Hehe

1524909990
alexnask
It isn't :P

1524909991
Hejsil
I'm sure, if something half decent is chosen, people will accept it

1524910002
alexnask
I'm sure @reify will be a alot more involved though

1524910010
Hejsil
Probably

1524910017
Hejsil
I wish you all the best of luck

1524910032
alexnask
Thanks

1524910052
alexnask
The only part that kind of bums me out is that we will not be able to generate methods

1524910072
Hejsil
Hmm

1524910116
alexnask
That would involve a full blown mixin-like construct like Dlang (to get from AST to function definition body)

1524910153
Hejsil
Types have some storage data (fields) and global data (const vars and fn). Is it not possible to add a fn to the global data of the type an then generate it?

1524910189
Hejsil
typeinfo.functions.add(some_function)?

1524910229
alexnask
Sure but I don't think this will actually work for more than non-trivial methods

1524910240
alexnask
Idk I'll see what I can do when writing it

1524910270
alexnask
I mean it could be semi/useful if you could bind generic functions and instanciate them somehow

1524910281
Hejsil
I mean. Generating code inside the method can be done with inline loops @field and all that stuff on the Type/Parameter

1524910293
alexnask
Right

1524910306
Hejsil
Anyways, we'll see how that all goes

1524910316
Hejsil
I have no idea of the backend of types in zig

1524910322
alexnask
I guess if the FnDef has a func_type + a function pointer

1524910326
Hejsil
You probably know better that I

1524910346
alexnask
The issue is that if you want your method to have a &Self parameter

1524910357
alexnask
Self is not an actual type yet

1524910362
Hejsil
Oooh right

1524910395
Hejsil
Hmmm

1524910399
Hejsil
That's a hard one

1524910422
alexnask
If you need methods that don't rely on types that are yet to be generated

1524910440
alexnask
Then you could do it, even instanciate a generic function with the type of args you need I think.

1524910511
Hejsil
Is fn def a struct like this: struct { args: []type, arg_names: []const u8, return: type, } ?

1524910527
Hejsil
Or something simular

1524910534
alexnask
It's the only part left but something similar, yes

1524910550
Hejsil
Hmm.

1524910555
alexnask
or rather FnDef = struct { calling_convention etc., args: ArgDef[] }

1524910563
alexnask
ArgDef = { name, type, etc. }

1524910589
Hejsil
Right, my point was that it is `type` and not `TypeInfo` that is stored

1524910604
alexnask
Right, I started with "deep" TypeInfo's

1524910607
Hejsil
Or whatever the @typeInfo returns

1524910616
alexnask
But we agreed with andrew "shallow" typeinfos are better

1524910626
alexnask
So, type's, yup.

1524910661
Hejsil
They probably are, but I could see method generation maybe working if it was deep TypeInfo's

1524910667
Hejsil
But there are probably problems with this

1524910670
alexnask
Deep typeinfos would actually make that possible, you could just point it to the root typeinfo

1524910689
alexnask
Hmm

1524910697
Hejsil
What was the reasoning for shallow?

1524910774
alexnask
Easier to generate, you can cache them (with deep typeinfo there is some non-trivial reasons that make caching more involved), you can just get child info with @typeInfo again

1524910784
alexnask
I didn't think about the methods at the time

1524910792
Hejsil
I see

1524910798
Hejsil
Caching is a good reason

1524910906
alexnask
The code is also much less error prone (I was doing some pretty funky stuff to avoid infinite loops while generating typeinfo's)

1524910923
alexnask
Anyways, I still thionk it's up to debate since this usecase is pretty good, we

1524910932
alexnask
we'll have to see with @andrewrk*

1524910940
Hejsil
Right

1524910954
Hejsil
Methods are important, so it's worth thinking about

1524911043
alexnask
Well I could do something funky like using @typeOf(undefined) to represent Self in argument types but it seems like too much magic :p

1524911085
Hejsil
Could we use `this`?

1524911109
alexnask
'this' always refers to the parent scope right?

1524911114
Hejsil


1524911126
Hejsil
This works

1524911149
alexnask
Right, the issue is that if you use 'this' while generating your typeInfo

1524911162
alexnask
'this' will just point to the scope you are doing your generating in

1524911163
Hejsil
Hmm right

1524911165
alexnask
(I think)

1524911168
Hejsil
Hmm

1524911177
Hejsil
Curses!

1524911222
Hejsil
Maybe we need some @lazyThis() that gives a type that resolves `this` when @createType is called on TypeInfo

1524911227
Hejsil
Idk how complicated that would be

1524911234
alexnask
I can't just use a union for an ArgType since 'Self' could be nested inside any arbitrary type expression

1524911243
alexnask
Hmm

1524911336
alexnask
@lazyCreateType(&root_typeinfo) could be an option too

1524911415
Hejsil
True

1524911424
Hejsil
Probably better too

1524911515
alexnask
Another solution is just using deep type infos for @createType and shallow type infos for @typeInfo

1524911533
alexnask
And have a .expand() method for shallow -> deep conversion

1524911535
alexnask
Idk

1524911575
alexnask
We'll see

1524911594
alexnask
Gotta go, I'll be finishing off @typeInfo later, see you around

1524911608
Hejsil
Cya

1524917133
GitHub18
[zig] Hejsil pushed 1 new commit to master:

1524917133
GitHub18
zig/master 3178528 Jimmi Holst Christensen: Removed zero sized error set optimization...

1524918404
Dodo
alexnask, what name should I put on the contributors? :)

1524921127
alexnask
@Dodo Alexnadros Naskos

1524921131
alexnask
:D

1524921156
Dodo
okey!

1524921218
alexnask
Alexandros*

1524921245
Dodo
oh hahaha, that'll be pushed in the next push

1524921252
alexnask
I updated the gist with a heap + SBO optimization for the interface btw :)

1524921283
alexnask
And plenty of comments + a couple of examples

1524921402
Dodo
look at the new branch I created xD

1524921412
Dodo
already bussy working on it ^^

1524921431
alexnask
Nice!

1524921469
alexnask
Hit me up if you run into any issues, I haven't tested much though it seems solid

1524921523
Dodo
the few tests so far have not blown up

1524921529
Dodo
soo all going well haha

1524921597
alexnask
I'm just a touch concerned with the comptime vtable generation, I'm not sure if the compiler is smart enough to cache the vtable for an implementation type

1524921610
alexnask
Or if it will create multiple vtables for each use

1524921613
alexnask
I'll check it out

1524921914
alexnask
But at worst I think an intermediate function that just calls IteratorVTable(T).init(ImplType) will be enough to force caching

1524922037
alexnask
But at worst I think an intermediate function that just calls IteratorVTable(T).init(ImplType) will be enough to force caching

1524922039
alexnask
woops

1524922100
Hejsil
Are you sure

1524922137
alexnask
It seems to work fine

1524922149
Hejsil
Stack pointer does that sometimes

1524922154
alexnask


1524922155
Hejsil
Just work, that is

1524922160
Hejsil
Even if it is undefined

1524922183
alexnask
Right, I'll make sure that it isn't on the stack but I'm 90% certain it's in static memory

1524922184
Dodo
Once(usize).init_iter(49).chain(&range) it too big,

1524922185
Dodo
darnit xD

1524922198
Dodo
*is

1524922200
alexnask
The Chain iterator?

1524922204
Dodo
yeahh

1524922253
Dodo
well, it has 2 ptr's to Iterators, and a ptr like what, 4 bytes?

1524922259
Dodo
so thats 8

1524922268
alexnask
On x64 a pointer is 8 bytes

1524922271
alexnask
(64 bits)

1524922277
Dodo
8!

1524922278
Dodo
oh dar

1524922280
Dodo
*dar

1524922282
Dodo
*dear

1524922282
alexnask
:D

1524922292
Dodo
can we bump the buffersize? :3

1524922306
alexnask
Sure, just change Iterator_Buffer_Size

1524922319
alexnask
I would suggest keeping it as small as possible though :P

1524922320
Dodo
however, would that be a good idea?

1524922328
alexnask
Atm @sizeOf(Iterator(T)) is 32 bytes

1524922351
Dodo
I wonder how the performance is if Chain is heap allocated

1524922382
alexnask
It's just 1 allocation

1524922384
alexnask
And 1 free

1524922398
alexnask
However, I think it should fit

1524922421
alexnask
If it's just 2 pointers + 1 enum it should be 17 bytes

1524922435
alexnask
And you can fit up to 23 bytes with a 24 byte buffer

1524922438
Hejsil
It seems to be static data: frame: u8@7ffe24a31070 vtable: IteratorVTable(usize)@23e3e0

1524922441
Hejsil
You win this time

1524922444
alexnask
:D

1524922446
Hejsil
:)

1524922451
alexnask
That's why the comptime is after the ref

1524922465
Dodo
so 24 should be enough?

1524922470
Hejsil
I assumed it would just put the comptime data on the stack of the function

1524922471
alexnask
I think so

1524922486
Dodo
well thats funny

1524922489
alexnask
@Hejsil I think it would do that if the whole expression was comptime

1524922490
Dodo
its already 24 xD

1524922507
Dodo
25 works

1524922515
alexnask
Yes, is it erroring saying Chain is too big? Are you sure you are keeping pointers to iterator's and not iterators?

1524922518
alexnask
Ah well

1524922518
alexnask
:p

1524922521
Hejsil
True, but you can do &someFn(), and that will give you a ptr to stack memory

1524922544
Hejsil
I'll play around and see when comptime is stack, or static

1524922549
alexnask
Sure, it will initialize var __temp = someFn(); then take &__temp

1524922555
Dodo
state: ChainState,         iter_a: &Iter,         iter_b: &Iter,

1524922562
Dodo
thats all Chain has

1524922573
Dodo
and a 'const Self = this';

1524922573
alexnask
If you did &comptime someFn(); someFn is evaluated at comptime

1524922589
alexnask
So I think the data will always be in static memory

1524922595
alexnask
Not 100% sure though.

1524922601
Hejsil
I think that's an optimization

1524922614
alexnask
@Dodo You caould try making ChainState an enum(u8)

1524922625
Hejsil
You can probably rely on it

1524922640
Dodo
nope

1524922655
alexnask
@Dodo ah well LLVM probably bumps Chain up to 24 bytes

1524922684
Dodo
should we make it 32 bytes?

1524922690
Dodo
thats a nice multiple of 8

1524922706
alexnask
@Hejsil I think if your comptime value is ConstValSpecialStatic it will end up in static memory

1524922720
Hejsil
I'd probably do this to ensure that it is static:

1524922725
alexnask
@Dodo Yes, it should be fine

1524922726
Hejsil
This makes it pretty clear at least

1524922732
Hejsil
But whatever

1524922734
Hejsil
If it works it works

1524922758
alexnask
I think it's pretty clear with the comments

1524922811
Hejsil
True, a comment would do just fine

1524922827
Dodo
how can this: "self.data.small_buffer.flag_byte = 1;" be turned into a comptime expression?

1524922830
alexnask
ConstValSpecialRuntime constexpr values probably get shoved into the frame

1524922832
Dodo
than we can make comptime iterators

1524922854
alexnask
@Dodo They should work at comptime as is

1524922857
alexnask
Well, on my branch

1524922873
alexnask
So on master in a bit, comptime union field access is broken atm

1524922887
Dodo
well, it doesnt work for me haha

1524922893
alexnask
Yup, that's a bug ^^

1524922898
Dodo
error: unable to evaluate constant expression :(

1524922901
alexnask
Let me try to make sure it does work on mine

1524922910
alexnask
Yes, the union access is broken

1524922920
alexnask
But my PR should make it into master today or tomorrow

1524922955
Dodo
mh, I should git clone the compiler... but that also involves building it

1524922972
Dodo
can I just go into visual studio and compile?

1524923007
Dodo
I've never really build a C/C++ project...

1524923033
alexnask
You need cmake + visual studio

1524923048
alexnask
But it's really easy

1524923080
alexnask


1524923081
Dodo
I dont know if I have cmake,

1524923114
alexnask
@Dodo You don't really need to build the compiler though

1524923130
alexnask
You can find builds for every commit here:

1524923324
Dodo
\o/

1524923356
alexnask
I should probably enable them for my fork too

1524923377
Dodo
there is actually quite some stuff I got to change now hahaha

1524923396
Dodo
which means there's quite some functions already :)

1524923416
alexnask
Yes, I saw there's a lot of stuff in there :)

1524923424
Dodo
I hope I can make it work before dinner

1524923536
alexnask
@Dodo Actually Once fails in comptime on my branch too, I'll take a look after I'm done with @typeInfo

1524923550
alexnask
It doesn't even fail with an error message, it just crashes the compiler :p

1524924000
alexnask
I enabled travis CI and appveyor builds for my fork btw, if anyone wants to play with @typeInfo I'm @alexnask on github and the branch is reflect_reify

1524924148
alexnask
(Or you can find them in PR#951)

1524925457
Dodo
it crashes the compiler :O

1524925461
Dodo
sounds good xD

1524925583
alexnask
Meh that happens :p

1524925591
alexnask
The compiler is just a program after all ;)

1524925598
alexnask
I've crashed clang lots of times too :P

1524925673
GitHub170
[zig] Hejsil pushed 1 new commit to master:

1524925673
GitHub170
zig/master 2fc34ea Jimmi Holst Christensen: Functions with infered error set can now return literals...

1524925714
alexnask
@Hejsil Nice, that one was so annoying :P

1524925718
Hejsil
:)

1524925745
Hejsil
I'm not sure I've covered everything. The code for this is a little complicated

1524925767
Hejsil
Code for infered error set

1524925969
alexnask
@Dodo fwiw form the quick look I took it's just a 1-liner fix

1524925973
alexnask
from*

1524926012
Dodo
mhh, alexnask , can you look at something?

1524926024
Dodo
why does that work?

1524926087
Dodo
next_front_iter gets destroyed when the function exits, right?, sooooo that would mean self.frontiter has a reference to garbage

1524926091
Dodo
yet the test passes

1524926101
alexnask
Hmm let me see

1524926144
Dodo
here's the test:

1524926161
Hejsil
As far as I know, pointers to invalid stack can happen to work

1524926179
alexnask
Yup

1524926181
Dodo
or it works because I use an array there, so the Iterator in that memory is still valid

1524926200
alexnask
I think it's just randomly working

1524926203
Hejsil
My question is why you are even able to do next_front_iter.next() when next_front_iter is nullable :)

1524926214
Hejsil
Ooh wait

1524926215
alexnask
;)

1524926215
alexnask
var next_front_iter = self.iter.next() ?? return null;

1524926215
Hejsil
no

1524926217
Hejsil
My bad

1524926228
Hejsil
Did not spot the return

1524926229
Hejsil
lol

1524926246
Dodo
I wish we had like a .map() on nullables

1524926268
Dodo
where it applies the function if its not null, otherwise returns null

1524926270
alexnask
@Dodo I don't think it works because of the array, because the Iterator gets copied on the stack anyways

1524926273
alexnask
It's just random

1524926297
Dodo
well, that randomness is reproducable

1524926306
Hejsil
Dodo, you could do (it ?? return null).map()

1524926307
alexnask
Sure

1524926308
Dodo
it has not crashed yet xD

1524926320
alexnask
I mean, it will keep running well :P

1524926321
MajorLag
try compiling in a different release mode, that usually breaks that sort of behavior on at least one build for me.

1524926325
alexnask
Probably because of some optimization

1524926343
alexnask
Or because you don't touch the stack much between next() calls

1524926348
Dodo
but still, what Im doing there is horribly terribly wrong,

1524926351
Dodo
so I should change it

1524926351
alexnask
Yes :P

1524926364
Dodo
this would not compile in

1524926373
alexnask
Rust is great, yes ;)

1524926403
alexnask
zig is great too though, just in different ways ^_^

1524926403
Dodo
it's kind of scary how things like that can creep up so easily

1524926413
alexnask
zig is more like C than Rust

1524926430
Dodo
what if you're writing some kind of super important code, and you do this...

1524926431
Hejsil
I think, for trivial cases, Zig could detect that you're returning pointers to invalid data

1524926433
alexnask
In C even hello world is usually written in a buggy way

1524926460
alexnask
(not returning 0 and ignoring printf() return)

1524926487
alexnask
Right, some escape analysis would be great

1524926504
Dodo
I remember I once saw a video of people using multiple kernel bugs to gain privileges on a system

1524926544
Dodo
and bugs in browsers like firefox, safari and edge..hell, even one or two in VirtualBox and VMware

1524926571
Dodo
they got quite some money for it tho haha

1524926603
alexnask
C: sustaining bug bounties since 1972

1524926605
alexnask
:P

1524926611
Hejsil
If we didn't have security bugs, then how would hackers earn money :)

1524926652
Hejsil
I tend to leave a few in my programs. That way, I keep the economy going.

1524926653
Dodo
stealing passwords from the backup that's stored on "

1524926693
Dodo
have you guys done Capture the Flag's?

1524926707
alexnask
inurl:"/AppData/Filezilla/*" filetype:xml :P

1524926711
alexnask
@dodo nope

1524926714
Hejsil
Nope

1524926790
alexnask
Never really got into cybersecurity stuff tbh

1524926802
Hejsil
^

1524926808
alexnask
Just give me a compiler and/or systems code :P

1524926875
alexnask
Compilers are the greatest, I remember debugging away for 10-12 hours on rock (ooc-lang compiler) to end up with a 5-line fix

1524926886
alexnask
But damn it those 5 lines were good :p

1524926907
Dodo
xD

1524926939
Dodo
I seem to enjoy writing stuff more than to break it, but both are just cool haha

1524927083
Dodo
allright, Flatten seems to brake compilition, even when the Iterator_Buffer_Size is 100

1524927194
Dodo
it holds an &Iterator(Iterator(T)), that should only be 8 bytes, and an ?Iterator(T), which is...32(???) bytes

1524927208
alexnask
If you're holding an Iterator by value then it will never fit into an Iterator

1524927236
alexnask
@sizeOf(Iterator(T)) > @sizeOf(Iterator(T).data)

1524927238
Dodo
but holding it by reference is also wrong

1524927258
Dodo
or well, at least how I did it

1524927259
alexnask
Right, so Flatten needs to be heap allocated

1524927279
alexnask
I think, I don't think you can ever make it fit into the small buffer

1524927433
alexnask
@Dodo It's pretty trivial, just pass in a &mem.Allocator into your Flatten.init_iter and then pass it trhough to Iterator(T).init

1524927446
alexnask
But you'll have to .deinit your Flatten iterators

1524927469
Dodo
defer flatten.deinit

1524927474
Dodo
right?

1524927486
alexnask
yup (+ a parentheses pair obviously)

1524927671
Dodo
mh, but `frontiter: ?Iter`, can just be 'frontiter: ?&Iter`, but malloc the Iter, and overwrite it each time?

1524927696
Dodo
still need to have deinit to clean up, but well

1524927715
alexnask
Yes, you could handle the allocation in Flatten for sure

1524927736
Dodo
what would be better to do?\

1524927743
alexnask
Hmm

1524927765
alexnask
Well imho you should let Iterator handle the allocation, since it's not strictly necessary for Flatten

1524927780
alexnask
Flatten can work without an allocation

1524927805
alexnask
It's just that if you need it as an Iterator, since Iterator owns the memory if needs to be pushed onto the heap

1524927853
Dodo
so it should only have a .next() method,

1524927911
Dodo
and something to set it up obviously

1524927918
alexnask
Right, any struct with a next(&Self) ?T is compatible with Iterator(T)

1524927948
alexnask
Iterator(T) just handles the vtable stuff + holds the memory

1524927982
alexnask
You could set up Iterator(T) to just point to the iterator implementation instead of owning it but that makes stuff even harder to keep track of imo

1524928013
alexnask
You don't even need an init method that returns an Iterator(T)

1524928021
alexnask
I just wrote it for convenience

1524928048
alexnask
Iterator(T).init(alloc, some_object) will work as long as @typeOf(some_object) has a next(&Self) ?T method

1524928229
alexnask
(which means people could use Zigterator with types made in other packages)

1524928266
Dodo


1524928280
Dodo
or Im just overcomplicating things

1524928318
alexnask
@Dodo I would suggest having an init_iter method on Flatten just like other iterators

1524928343
alexnask
But taking the allocator in init_iter and calling Iterator.init instead of Iterator.init_inline_ptr

1524928364
Dodo
oh mh yeah

1524928373
alexnask
That way you can write 'var flatten = Flatten(Iterator(usize)).init_iter(std.debug.global_allocator, &sliceiter);'

1524928403
alexnask
And you can catch unreachable in Flatten.init_iter or return !Self, your call

1524928446
Dodo
!Self is nicer

1524928453
alexnask
Yes, I think so too :)

1524928482
Dodo
so that would be 'try return ....' ?

1524928612
alexnask
Nah, just return Iterator(T).init(...);

1524928625
alexnask
I meant !Iterator(T) btw

1524928650
alexnask
try A; compiles down to A catch |err| return err;

1524928670
alexnask
You want to return the error or the object anyways, so you can just return the expression itself

1524928691
GitHub34
[zig] Hejsil pushed 1 new commit to master:

1524928691
GitHub34
zig/master fba0347 Jimmi Holst Christensen: .ReturnType and @ArgType now emits errors on unresolved types...

1524929238
Dodo
mhhh Im a bit confused haha

1524929381
Dodo
Or Im just really dumb by not writing 'catch unreachable'

1524931085
GitHub89
[zig] Hejsil pushed 1 new commit to master:

1524931085
GitHub89
zig/master 341f8c1 Jimmi Holst Christensen: Fixed wrong formatting for arg_index when reporting @ArgType error

1524931282
Hejsil
printf format strings are the worst ):

1524931595
Dodo
almost there

1524931607
Dodo
just .map() and .filter()

1524932762
Dodo
Done!

1524933000
Dodo
okey nearly done, the slice bit still has to be updated

1524933004
Dodo
but well xD

1524933016
alexnask
Close enough ;)

1524933183
Hejsil
Well, the failing travis build for osx is andrewrk's problem now. The log is to long for me to see the error...

1524933814
Hejsil
Hmmm, something tells me that unresolved types might not be null, but be uninitialized memory

1524934031
Dodo
whoa, git is actually really easy to use

1524934052
Dodo
I never made a branch to update something and then merge

1524934203
Dodo
alexnask: , with fix of the comptime issue, this:

1524934215
Dodo
because that would be so powerfull

1524934284
Dodo
with some more magic you could turn the arraylist into an array as well, and you can collect any comptime known Iterator into an array \o/

1524934415
alexnask
hmm

1524934424
alexnask
Not sure if ArrayList works at comptime

1524934443
alexnask
Actually I think anything that uses an allocator won't work

1524934452
alexnask
Not 100% on that though

1524934466
Dodo
could create a function that collects into an array, all that's needed is the type, and the length

1524934500
alexnask
It may be th @ptrCast that doesn't work, which may also be the cause of Iterator's not working at comptime atm.

1524934539
Dodo
actually I only need a length...I already know the type !

1524934541
alexnask
It should work in theory (although it's pretty complex to implement in the IR evaluation)

1524934570
alexnask
Right, you can pass a slice to write in and return an error if the slice is not big enough

1524934573
alexnask
Or something similar

1524934605
Dodo
collect_array and collect_slice it is

1524934755
alexnask
@Hejsil Users/travis/build/zig-lang/zig/src/ir.cpp:18733:21: error: format specifies type 'size_t' (aka 'unsigned long') but the argument has type 'uint64_t' (aka 'unsigned long long') [-Werror,-Wformat]

1524934756
alexnask
arg_index, buf_ptr(&fn_type->name)));

1524934765
alexnask
is the error on the MacOS build

1524934783
Dodo
which reminds me, .count() is also a usefull method. That consumes an Iterator, returning how many items it contained

1524934786
alexnask
Alathough that's on my branch so the line number is probably incorrect

1524935009
Hejsil
alexnask I did fix that :)

1524935060
alexnask
Right, I'm probably quite behind master atm

1524935062
Hejsil
I think I found it, but this time I'll push to a branch so I don't pollute this chat or master with commits

1524935100
Hejsil
It seems to be a not initialized ptr that is checked for null

1524935116
Hejsil
And only on osx does this fail

1524935748
alexnask
I feel like the function def code will be bigger than the rest of the typeinfos combined :P

1524936023
Dodo
how do I have a noreturn `anonymous` function?

1524936035
Dodo
struct { fn apply(tup: &Tuple(Item, Item)) { *tup.t1 = *tup.t2; } }.apply

1524936049
Dodo
but that does not compile

1524936142
Hejsil
struct { fn apply(tup: &Tuple(Item, Item)) void { *tup.t1 = *tup.t2; } }.apply

1524936177
Hejsil
The compiler errors for forgetting the return type is bad

1524936187
Hejsil
are bad*

1524936359
Dodo
darnit

1524936366
Dodo
I cant take my tuple type by value

1524936384
Dodo
but I ..need to xD

1524936391
Dodo
anyway, dinner

1524936394
Hejsil
We'll get it soon :)

1524938473
GitHub121
[zig] Hejsil merged osx-fix-for-param-info into master:

1524939081
Dodo
well Hejsil , once it's possible to take user defined structs and enums by value, this function works:

1524939153
Dodo
and honestly, I think that looks really clean

1524939154
Hejsil
Couldn't you just take by &const and then take a copy inside

1524939159
Hejsil
But yes

1524939165
Hejsil
We need "Pass by value" semantics

1524939174
Hejsil
For structs

1524939182
Dodo
well, I'd have to change the way how 'map()' works, which would be a breaking change

1524939225
Dodo
because then I'd require to take integer types  etc also by &const, or '&', which is really weird

1524939281
Hejsil
Ye, for generic code, &const ptr is a nessesary evil. For now:

1524941376
Dodo
is there a page where there is a releasedate for version 0.3?

1524941856
Dodo
while(self.iter.next()) |*val| {//do something} <--- val is a reference to the actual value , right?

1524943844
Hejsil
Dodo, yes

1524943876
Hejsil
If next() returns ?T then @typeOf(val) is &T

1524945009
Dodo
exactly what I need

1524945769
andrewrk
Hejsil, I have 3 full uninterrupted days to work on zig starting now

1524945826
Hejsil
Well, now I just fix all my bottlenecks myself :)

1524945847
andrewrk
I'm thinking about tackling pointer reform

1524945853
Hejsil
Wuuh

1524945879
andrewrk
either that or make significant progress on self hosted compiler (with concurrency / job system)

1524948012
Hejsil
Oooh yes! Blocked again!

1524948090
andrewrk
oh no

1524948117
Hejsil
I'm getting good at this compiler crashing business

1524948121
Hejsil
Or well

1524948129
Hejsil
It looks like invalid LLVM generation

1524948134
andrewrk
yes that is certainly what it is

1524948149
andrewrk
is that using coroutines?

1524948153
Hejsil
Nope

1524948161
andrewrk
good find

1524948194
Hejsil
It's probably in here somewhere

1524948236
andrewrk
I'll have a look in a few minutes after I finish writing this test for std.atomic.Stack

1524948242
Hejsil
Np

1524948260
andrewrk
I think I understand AtomicOrder enough to write good docs on them now

1524948406
Hejsil
It might have something todo with alignment cast

1524948421
Hejsil
Maybe

1524948519
Hejsil
Wait no, that's not what is happening

1524948622
Hejsil
Oooh, i see it

1524948638
Hejsil
Im accessing parameters of a function inside a "local function"

1524948661
andrewrk
ah. yeah we don't have good compile errors for that yet

1524948664
Hejsil
This is nothign new

1524948679
andrewrk
local functions are a minefield right now

1524948688
Hejsil
But they're sooo useful!

1524948695
andrewrk
yeah we gotta fix it

1524948698
Hejsil
I can't stop myself!

1524948709
andrewrk
even I used them in the thread implementation

1524948734
andrewrk


1524948813
Hejsil
My wishlist for christmas is full of Zig features

1524948830
andrewrk
lol

1524948851
andrewrk
3 days of zig for me! I'm excited

1524948856
Hejsil
Was const a = fn() void {} approved?

1524948870
andrewrk
making an anonymous function implementation? yeah I think so

1524948873
Hejsil
Aka, do to functions what was done to structs

1524948879
andrewrk
yeah that makes sense

1524948954
Hejsil
And I'm building again!

1524952942
GitHub151
[zig] andrewrk opened pull request #963: Atomic stack and queue (master...atomic-stack-and-queue)

1524957904
Hejsil
andrewrk, I have done it again!

1524957925
Hejsil
And it's not even related to local functions this time

1524958197
andrewrk
argh, I can't keep up

1524958245
Hejsil
Lol

1524958256
Hejsil
I'm trying to figure out exactly how this happends

1524958289
Hejsil
How did I create a fn(&const u9) u16 and call it with a u16

1524958290
Hejsil
Idk

