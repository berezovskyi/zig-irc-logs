1524734160
Dodo
do slices have a reverse method / is there a function that reverses slices?

1524736186
tiehuis
Dodo: std.mem.reverse

1524737264
alexnask
Time for some code

1524737267
alexnask
Finally :P

1524737365
alexnask
Does @import work with a comptime string?

1524737488
alexnask
Does anyone know if static initialization of local variables is guaranteed to happen on the first call in C++?

1524737505
alexnask
Or rather initialization of static local variables

1524737521
tiehuis
alexnask: should be fine to use a comptime string

1524737610
alexnask
@tiehuis Right, I was looking at the discussion on the package manager and I'm wondering why it isn't just possible to write it as a package in std

1524737624
alexnask
You basically need network access at comptime and that's it

1524737642
tiehuis
yeah, although not sure if we'd want to do that

1524737665
alexnask
Or in the builtins

1524737676
alexnask
That would be better imho

1524737677
tiehuis
also i think static variables are all initializaed before main regardless of scope

1524737686
alexnask
Not that I'm opposed to the compiler doing the fetching itselfd

1524737715
alexnask
@tiehuis I'm pretty sure most compilers evaluate the initialization expression on the first call but I'm not sure if I can rely on that behavior

1524737716
tiehuis
don't quote me on that

1524737793
tiehuis
here is a relevant snippet of the standard:

1524737823
alexnask
It seems that scoped statics are initialized when the scope is evaluated for the first time

1524737842
alexnask
Thanks for the link, I'll take a look

1524737915
alexnask
Right, so I can't rely on this, a valid implementation could initialize the variable before the function is run

1524737916
alexnask
Damn

1524740117
alexnask
could not convert template argument ‘type_ptr_hash’ from ‘uint32_t(const TypeTableEntry*) {aka unsigned int(const TypeTableEntry*)}’ to ‘uint32_t (*)(TypeTableEntry*) {aka unsigned int (*)(TypeTableEntry*)}’

1524740119
alexnask
you wot mate

1524741638
achambe
I think function can't be implicitly casted to a function pointed because of the const ?

1524741651
achambe
pointer

1524742723
alexnask
Right, I got that much but it makes no sense to me, I would have thought it is implicitly castable from a const pointer param to a non-const pointer param

1524742743
alexnask
But then again, C++, so who knows :P

1524743113
MajorLag
Interesting note: it is possible for HeapAlloc to fail and crash your program without ever returning.

1524743142
MajorLag
Which means: it is possible for malloc to fail and crash your program regardless of checking for null.

1524743145
MajorLag
good work MS

1524743165
MajorLag
I can probably catch it with SEH, but seriously...

1524744493
alexnask
@andrewrk Am I allowed to use a local no capture lambda in compiler code?

1524744524
alexnask
I saw some 'auto' in places so I guess we are targetting C++11 + ?

1524752010
andrewrk
MajorLag, how can this happen?

1524752167
MajorLag
andrewrk: I don't think it can anymore. I think I was fooled by release-fast behavior in regards to buffer flushing with warn(). It made it appear HeapAlloc was causing the crash but I'm pretty sure it was actually a use-after-free happening somewhere else. It was just oddly consistent and I hadn't been awake long enough I think.

1524752233
alexnask
8/15 TypeInfo cases are done

1524752235
alexnask
Nice

1524752238
andrewrk
alexnask, I don't really have a good reason to say no to no-capture lambdas other than personal preference

1524752276
andrewrk
we're targeting gcc >= 5.0.0 and clang >= 3.6.0

1524752321
alexnask
@andrewerk Ok, thanks!

1524752322
andrewrk
although an argument could be made that we shouldn't use features that don't exist in zig, to make porting code more straightforward

1524752406
alexnask
Sure, I just want to use a lambda in this case to avoid code repetition, and I don't think making a new function makes much sense.

1524752415
alexnask
I could split it off in a regular function regardless

1524752442
andrewrk
eh go for it, I'm sure it's fine

1524752459
alexnask
@andrewrk I added a type info cache in CodeGen, I assume it's ok? :P

1524752477
andrewrk
as long as it's perfect

1524752515
andrewrk
and by that I don't mean that it has no bugs, I mean that the cache by design has no false positives

1524752556
alexnask
Some kind of caching is actually required the way I am building the values, since we could ask for a typeinfo of a parent type while we are still generating it

1524752558
andrewrk
I think a typeinfo cache should be ok since types in zig are immutable

1524752561
alexnask
If you see what I mean :p

1524752601
alexnask
Like, const Foo = struct { const Self = this; fn init() Self { ... } };

1524752670
alexnask
I think the way I did it is ok, I'll see what pops out in testing (no worries, there will be LOTS of tests)

1524752710
andrewrk
I see now- for example StructField has a &TypeInfo

1524752720
andrewrk
maybe it should only have []type

1524752734
andrewrk
and you'd have to call @typeInfo again to explore fields

1524752749
andrewrk
I think that's probably better

1524752754
alexnask
Hmm

1524752761
andrewrk
but it might need Pointer Reform in order to work

1524752797
andrewrk
oops, not []type. it would just be type

1524752802
alexnask
I'm more partial to fully expanding the TypeInfo and @reify-ing what we need as types but I can see the arguments against that

1524752831
andrewrk
reify would stil work with a shallow typeinfo

1524752843
alexnask
I know

1524752861
alexnask
I'm just talking design, not functionality ;)

1524752879
alexnask
But I can switch it up if you think storing the types is better

1524752881
alexnask
No biggie

1524752883
andrewrk
sorry I didn't suggest this earlier, I know it would cause you to back out of a bunch of work you already did

1524753087
alexnask
Btw, do methods live in a type entry's decls_scope?

1524753093
andrewrk
yes

1524753103
alexnask
Nice and conveniant :P

1524753579
alexnask
I'm guessing 'type' is not a valid identifier?

1524753594
andrewrk
if you want you can use @"type"

1524753627
andrewrk
but for convenience it may be better to come up with a non-conflicting name

1524753655
alexnask
Yup

1524753691
andrewrk
@"foo" is mostly for API compatibility with external functions or .h files that have conflicting names as zig keywords

1524753815
alexnask
?type causes a compiler assert to fail btw

1524753824
andrewrk
that's the Pointer Reform thing

1524753829
alexnask
How should I deal with optional types for now?

1524753841
alexnask
E.g. a union's tag type or a promise's child type

1524754034
alexnask
assigning void will have to do I guess, although I'm not sure if promise->void == promise

1524754044
andrewrk
I think I've realized that unfortunately @typeInfo depends on having distinct operators for address-of and "pointer-to" operator (on types)

1524754047
andrewrk


1524754086
andrewrk
I have some time this evening; I can start on this and get enough done that it can unblock you from finishing @typeInfo

1524754115
alexnask
I don't actually think I need them

1524754121
alexnask
To just generate the typeinfop

1524754159
alexnask
I'll give it a go

1524754179
andrewrk
promise->void is distinct from promise in an important way

1524754189
andrewrk
you can await a promise->void but you cannot await a promise

1524754238
andrewrk
`the_type->data.promise->result_type == nullptr` means it's promise and not promise->void

1524754254
alexnask
I gathered that from the comments

1524754258
alexnask
I'll use some tag type

1524754269
alexnask
TypeInfo.Promise.NoType

1524754278
alexnask
Or perhaps noreturn

1524754298
andrewrk
why not ?type

1524754313
alexnask
Well, for now it causes the compiler to assert false sooo :P

1524754324
andrewrk
yeah, so this is why this depends on #588

1524754340
andrewrk
I'll work on unblocking you

1524754351
alexnask
Sure, I'll just go ahead and implement it with 'type' for now and when I have #588 I'll switch it up

1524754358
andrewrk
sounds good

1524756075
alexnask
Ok, switched to shallow typeinfo generation, back to implementing the rest of the types!

1524756096
alexnask
I think it makes a lot more sense retrospectively

1524756100
alexnask
Should have thought more about it :p

1524756123
andrewrk
I always have to start coding something the wrong way before a the right way reveals itself to me

1524756207
alexnask
I used @typeOf(undefined) as a 'null' type for now

1524756238
andrewrk
I'm pretty sure you're still going to hit #588

1524756281
alexnask
Idk, I don't see how I would, at least in the compiler side code

1524756290
alexnask
I only need ?type with the current layout

1524756332
andrewrk
oh, we actually have the PtrTypeOf instruction to distinguish from address-of

1524761582
alexnask
It appears that unions never have a nullptr tag_type

1524761624
alexnask
Or rather I tested with a union { ... } and an extern union { ... } and TypeTableEntryUnion::tag_type != nullptr

1524761649
alexnask
Btw, is TypeUnionField::enum_field supposed to be nullptr when tag_type is nullptr?

1524761742
alexnask
(tag_type is a type with name @TagType(WhateverUnion) while @TagType(WhateverUnion) errors)

1524762916
Guest50075
How do you access command line arguments in zig ?

1524766337
MajorLag
Guest50075: std.os.args() returns an iterator for commandline arguments.

1524773515
andrewrk
alexnask, yes I believe so

1524773895
Hejsil
andrewrk, are there any workaround for this:

1524773976
Hejsil
Forget it. Figured it out!

1524775074
andrewrk
Hejsil, I'm going to work on pointer reform this evening because it's blocking alexnask

1524775128
Hejsil
Exciting

1524775143
Hejsil
But then again. I'll have to go through all my pointers

1524775146
Hejsil
Ooh well

1524775186
andrewrk
Hejsil, I was thinking - if I finish zig fmt (make it preserve comments) we could make it be a tool to do source level translations from before pointer reform to after

1524775211
Hejsil
Btw. @field makes the functional "with" pattern really nice. imut.with("field", value).with("field2", value2)

1524775217
Hejsil
Uuuh, that's neat

1524775336
andrewrk
wait, what does @field bring to the table in your example?

1524775347
andrewrk
oh, it is setting the value?

1524775405
Hejsil
Returning a copy of imut with "field" set to value

1524775418
andrewrk
ah

1524775436
andrewrk
I think it would be more idiomatic to do IMut { .field = value, .field2 = value2, }

1524775458
Hejsil
True, but for

1524775478
Hejsil
But maybe I should just drop that and require lib users to fill out the entire struct

1524775479
Hejsil
Idk

1524775507
andrewrk
I guess I can see the "argument" for this feature ;)

1524775514
Hejsil
:)

1524775528
Hejsil
It's better that Builders

1524775528
andrewrk
the []Argument if you will

1524775537
Hejsil
Ooh god

1524775558
andrewrk
mwa ha ha

1524775585
Hejsil
What is the best word for this even (context: clap)? Argument, Flag, Option?

1524775587
Hejsil
Idk

1524775617
andrewrk
well if the 'a' in "clap" stands for Argument then I suppose it is an argument

1524775634
Hejsil
Maybe, it's actuall a parameter

1524775639
Hejsil
And you send in arguments

1524775641
Hejsil
Idk

1524775646
andrewrk
I see

1524775691
Hejsil
I'll open an issue on clap for this, so I don't forget!

1524784213
achambe
Thanks for making tab an error

1524784230
achambe
lol - I often swap between two lots of code that use either

1524784237
achambe
and usually mess it up

1524784246
achambe
not a problem here :P

1524784329
achambe
andrewrk: in the compiler, is there any compilation time cost for unused imports?

1524784661
Hejsil
achambe, As far as I know, Zig will lazily load imports. If they are unused, Zig wont even try to open the fields imported

1524784672
Hejsil
files*

1524784782
achambe
Ah cool.

1524784884
Hejsil
Uuuurg. Inline loops and comptime stuff really needs better error messages: "error: control flow attempts to use compile-time variable at runtime", is not that helpful if the compiler is not gonna tell me the dependencies leading to this error :(

