1517879038
benzrf
hmmm so how exactly does fmt type stuff work

1517879062
benzrf
is it basically like hyper aggressive optimization where you can unroll loops etc since u know the values you're gonna use already

1517880989
tjpalmer
andrewrk, have you tested compiling to wasm? Do you have docs on what settings to use?

1517901230
aiwakura
hi

1517907532
jfo
tjpalmer: I've been excited / thinking about wasm as well. I think supporting it will look something like this:

1517907590
jfo
there's work to be done on supporting the platform though, and I think llvm's native wasm backend is still in progress. please let me know what you find out though.

1517923848
hoppetosse
andrewrk: zig build is failing for some reason:

1517932633
zesterer
Falcon Heavy launch soon. Anybody watching?

1517936120
andrewrk
hoppetosse, hm that's an odd error

1517936156
hoppetosse
andrewrk: yep

1517936168
andrewrk
I'd edit os.cpp in the compiler to put more information than "fork failed"

1517936504
hoppetosse
Where would I get the extra info though?

1517936515
hoppetosse
I was just going over man fork

1517936555
hoppetosse
apparently errno is set on failure, but I can't find what the errno's would correspond to

1517937022
hoppetosse
d'oh, never mind

1517938062
zesterer
andrewrk: I must say, I'm loving how clear and concise Zig code tends to be. Although there's one thing I'm unsure of: is there a way to pull two file namespaces into one? For example, I'd like importing file X from file Y to also allow file Y access to the features contained within file Z (assuming Z is imported by X). I know I can just make the namespace public, but that just means another identifier chain (i.e: X.Z.something)

1517939753
MajorLag_
I believe "use" might be what you want. See

1517939974
MajorLag_
Another alternative, make the import public, then in Y: const Z = X.Z

1517940004
MajorLag_
Which is what I'd prefer personally since it doesn't obfuscate the source of a symbol.

1517940317
hoppetosse
zesterer: a lot of the index.zig files in the stdlib do pretty much this

1517940439
zesterer
MajorLag_: Although in this case, obfuscating the source of the symbol is actually the intended behaviour

1517940472
zesterer
MajorLag_: Thanks for the link

