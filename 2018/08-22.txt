1534900238
andrewrk
I pushed some breaking changes to the std lib. most updates can be done by appending `Alloc` to get the previous semantics. the good news is that many functions such as File.openRead and File.openWrite no longer can fail with OutOfMemory and no longer require an allocator

1534900390
scientes
I saw that

1534900553
Dirkson
andrewrk, to repeat something I asked while you were gone: How much tool support is considered acceptable for being able to write and maintain zig? Like, with C the minimum viable tool support is mainly "a text editor and a compiler". But if we end up doing implicit typing for both function arguments and function return,s it will more or less require the text editor to be able to find all libraries and

1534900555
Dirkson
understand all zig code in order to maintain non-trivial zig code.

1534900563
Dirkson
And also, welcome back! I hope your vacation-ey thing was wonderful.

1534901597
andrewrk
thanks Dirkson

1534901615
andrewrk
I think the answer to that question is subjective, but, did you hear my brainstormed ideas for a compiler repl?

1534901636
Dirkson
I didn't, no.

1534901659
Dirkson
Oh, now that I google 'repl', perhaps you did mention a few items to me.

1534905127
andrewrk
Dirkson, I'll elaborate in a bit, after dinner

1534905287
scientes
isn't it 11PM in NYC?

1534905296
scientes
10*

1534909972
andrewrk
sounds about right. it's 11:52pm now

1534910703
Dirkson
Okie dokie. No rush - I'm perfectly fine with async.

1534910997
ESphynx
andrewrk: are you coming to FOSSCON? :)

1534911098
andrewrk
ESphynx, interesting, that's just a few hours train ride from me

1534911107
andrewrk
if I knew about it more in advance I'd seriously consideri t

1534911134
ESphynx
redj: why didnt' you tell him earlier?

1534911142
ESphynx
andrewrk: you can make it :) come on :)

1534911174
ESphynx
andrewrk: ESR will be giving a talk about the Obsolescence of C and what comes next

1534911183
ESphynx
andrewrk: So you and me will be fighting about whether it will be eC or Zig ;P

1534911204
c15ade4
eC?

1534911216
andrewrk
ESphynx, esr thinks it's Go, and we flat out disagree on the fundamental principles of what makes software high quality

1534911225
redj
ESphynx: I lurk in here and look at the progress a little be but I don't have much time to spend on zig...

1534911238
andrewrk
he said he doesn't care about Windows, and it's not worth it to care about Out Of Memory, etc

1534911265
andrewrk
redj, I don't blame you, before 1.0.0

1534911278
andrewrk
before 1.0.0 means you're part of the development process, rather than just a happy user

1534911317
redj
andrewrk: but I am curious about the development process and the design decisions for sure

1534911323
ESphynx
andrewrk: so we'll have 3 strong contenders then :P and surely someone else in the room will think it's Rust :)

1534911354
c15ade4
god, i hate c++ style OO so much, and that is the first thing i see on eC site

1534911385
ESphynx
c15ade4: well, it is only loosely inspired from the 'sane' part of C++ :P

1534911406
redj
c15ade4: I don't think many zig-liking people will like eC... I could be wrong

1534942048
DutchGh0st
can you compare types?

1534942076
DutchGh0st
in such a way that for example a u8 would be smaller than a u9 or u10 and so on

1534943154
Hejsil
DutchGh0st, do you want to only sort int types? If so, then you can do T1.bit_count < T2.bit_count

1534943162
Hejsil
Idk how you would order all types

1534943172
DutchGh0st
well here's

1534943174
DutchGh0st
welp

1534943178
DutchGh0st
here's the thing,

1534943197
DutchGh0st
I tried to make a 'digits10' function, returning how many digits a base 10 number has

1534943253
DutchGh0st
it looks like this:

1534943295
DutchGh0st
butt if you pass a 'u8', it fails to compile, telling that 10000 is outside the range of a u8

1534943299
DutchGh0st
which is truee

1534943408
DutchGh0st
so I wondered if you could make a version that based on the type passed in, calls the right function that does not exceed the types max value, if you know what I mean

1534943617
Hejsil
Have you looked at inline loops?

1534943716
Hejsil
Actually, no need for that

1534943849
DutchGh0st
this works with comptime called from the outside :)

1534943850
Hejsil
Wouldn't something like this be good?

1534943851
DutchGh0st
so thats cool

1534943958
DutchGh0st
mhhh

1534943978
Hejsil
Do you need the "loop unrolling" that you have in your code? :)

1534943998
DutchGh0st
your function multiplies 5 times if there's 5 digits in the number

1534944015
Hejsil
I assume that the optimizer is smart

1534944030
DutchGh0st
and I wonder how this would work out with the instruction level parallelism

1534944031
Hejsil
It that is not the case, I could use an inline loop to remove the runtime mult

1534944110
DutchGh0st
is there not like a 'comptime if', but then the branch take is not comptime?

1534944112
Hejsil
You can do this to:

1534944128
Hejsil
inline loops are unrolled at comptime

1534944256
Hejsil
In my inline loop example, digit10(u8, n) would compile to

1534944272
DutchGh0st
would it also work if you receive from a tcp connection or something?

1534944298
Hejsil
Yes, n is still only runtime known

1534944306
DutchGh0st
no way hahaha

1534944329
DutchGh0st
so it compiles down to a long list of if's

1534944334
Hejsil
Yes

1534944346
DutchGh0st
damn

1534944349
DutchGh0st
thats clever

1534944362
Hejsil
inline loops are really cool

1534944374
DutchGh0st
thats something I had not thought about actually

1534944483
DutchGh0st
I watched 'fastware', a talk Andrei Alexandrescu gave a few times, and he showed this digits10 function, and the speedup versus the digits10 version you 'normally' would write, which devides by 10, and adds 1 to the result on each iteration

1534944497
DutchGh0st
he got like a 2x speedup

1534944558
Hejsil
Make sense, if the compiler is not able to unroll the loop good enough

1534944582
DutchGh0st
but this inline while loop, wow

1534944626
DutchGh0st
its basically metaprogramming in a way, because (in this case) it just compiles down to a list of if's, and covering all cases

1534944663
Hejsil
It's a way of generating code (in a way)

1534944675
Hejsil
You can iterate over an array of types with inline loops

1534944722
DutchGh0st
in a way it's nicer

1534944765
DutchGh0st
because the function I wrote doesnt work for ... 9 bit? integers or integer types with less bits

1534944782
DutchGh0st
your function does:D

1534945218
Hejsil
Decided to have the base as an arg too:

1534945371
DutchGh0st
the 'base' ?

1534945382
Hejsil
You know, base 10, base 8, base 2

1534945391
Hejsil
of decimal, octal and binary

1534945414
DutchGh0st
Ohh

1534945416
DutchGh0st
wait

1534945449
DutchGh0st
this does mean you could make a table based atoi() function, that also take a base

1534945515
DutchGh0st
you'd call it like atoi(u64, 10, "1000") or something, you want to make a u64 in base 10, out of the string "1000"

1534945559
Hejsil
Well, parseInt in std allows for the base:

1534945665
DutchGh0st
yeah but ParseUnsigned is not optimized

1534945707
DutchGh0st
Im sure its plenty fast, but using a different technique it might even be faster :)

1534945801
DutchGh0st
if you make a constant table, that has all the powers of the base, up to the max power of the base (for u64, with base 10, you'd have a 1 with 20 zero's, the next element of the table is a 1 with 19 zero's...)

1534945839
DutchGh0st
than place yourself at table.len - to_parse.len,

1534945860
DutchGh0st
for every byte in to_parse, subtract 48, let if overflow if it does

1534945881
DutchGh0st
compare if after subtraction the value is less than 10,

1534945888
DutchGh0st
well

1534945892
DutchGh0st
greater than 9

1534945902
DutchGh0st
if that is false, return an error

1534945939
DutchGh0st
otherwise multiply the value you have with the place of the table, and add that to the result

1534945972
DutchGh0st
and then increment the place of the table by one,

1534946133
DutchGh0st
if you can read a bit of Rust, this is what I mean:

1534946253
Hejsil
Didn't read it too carefully, but I see at lot of unrolling and rables. All of this could be generated in Zig :)

1534946301
DutchGh0st
yeahhhh

1534946401
Hejsil
Well, I'm sure there is room for small optimizations in std :)

1534946793
DutchGh0st
Ill try and make something :)

1534947083
DutchGh0st
its safe iterating over an array that is 'undefined', right?

1534948434
DutchGh0st
error: integer value 000000000000000000001 cannot be implicitly casted to type 'u64'

1534948439
DutchGh0st
what does that mean?

1534949947
Hejsil
The 000000000000000000001 is probably a bigint bug in Zig

1534950131
Hejsil
As long as you don't use the undefined values inside the loop, then it should be fine

1534950198
DutchGh0st
ohhmygoodlord

1534950231
DutchGh0st
why didnt they just make the ascii table to be 48 equals '0', and 58 equals 'A'....

1534950233
DutchGh0st
and so on..

1534950870
MajorLag
I really don't think I should have to explicitly tell the compiler to call `fn(type)bool` at comptime to get it to stop pretending everything it is passed is the same type.

1534950916
DutchGh0st
can just sub with overflow without caring you overflowed?

1534950959
MajorLag
_ = subWithOverflow?

1534951142
DutchGh0st
but that sets a bool if it overflowed

1534951146
DutchGh0st
while I dont care about that

1534951309
MajorLag
what behavior are you looking for? On overflow, let it wrap? there are operators for that: `a -% b`

1534951394
DutchGh0st
Im parsing bytes to numbers

1534951406
DutchGh0st
but lets say, 47 in ascii...

1534951417
DutchGh0st
subtract 48, and I want to end with 255

1534951431
DutchGh0st
wraparound

1534952042
MajorLag
then you want the `%<op>` operators.

1534952049
MajorLag


1534953790
DutchGh0st


1534953793
DutchGh0st
thats what I came up with

1534953824
DutchGh0st
it does not skip whitespaces or anything, and currently only handles unsigned,

1534953943
DutchGh0st
and Im not happy how I unrolled it, is there a better way?

1534956810
kristate
scientes: you online?

1534957610
andrewrk
hoppetosse, I'm looking at your PR

1534958984
hoppetosse
andrewrk: just saw it go in, cheers XD

1534959074
hoppetosse
Do you have any thoughts on what's causing #1277?

1534959122
hoppetosse
and do you think it's related to #1178?

1534959285
andrewrk
I'll have a look at 1277 right now

1534959494
hoppetosse
since more data always helps: compilation only fails in linux, not windows

1534959538
DutchGh0st
how would I do a better unroll of this?:

1534959567
hoppetosse
and I'm pretty sure the error appears once for each function that has a param of type ?fn

1534959646
andrewrk
DutchGh0st, read through this section:

1534959672
andrewrk
particularly the example of implementing printf in zig

1534959688
andrewrk
hoppetosse, I'm debugging the issue now, thanks!

1534959715
hoppetosse
thank you too XD

1534959738
andrewrk
hoppetosse, hmm this actually seems like an LLVM bug, but maybe we can work around it

1534959767
andrewrk
it says about @0 "Global is external" but @0 is defined like this: @0 = internal unnamed_addr constant void ()*, align 8

1534959792
andrewrk
I think we should just not generate the global since we don't reference it

1534959834
andrewrk
("it's a bug in llvm" is not an excuse; llvm bugs are zig bugs)

1534959879
hoppetosse
The bug also happens when the fn in at the top level

1534959902
hoppetosse
would that be a problem if it's a pub/extern var?

1534959919
hoppetosse
well, not pub

1534960075
unique_id
Hey andrewrk, I don't know how to word this but... I've made a temporary but sad decision to continue with my C++ codebase :( The reason is stupid. I have a lot of code to write and what keeps me going is the live feedback of IDE-like features. For C/C++ I use YouCompleteMe. I have a stupid habit of writing a lot of code between compiles and that only works well when given IDE-like instant feedback on errors. Since this is

1534960076
unique_id
obviously lacking for Zig given how new it is + needing to instantiate code to get compile errors, I lose the cruise control feeling I had with C/C++.

1534960124
andrewrk
unique_id, I think that is a completely reasonable decision given where zig is in its maturity

1534960128
andrewrk
loved having you while you tried it out :)

1534960132
unique_id
This is of course entirely my fault as I'm jumping into a language in its early stages and being stubborn with the way I write code

1534960166
andrewrk
this is one reason that I'm making the self hosted compiler long-lived with a powerful query interface

1534960175
andrewrk
it should make integrations with IDE really nice

1534960211
andrewrk
the compiler essentially will be doing most of the work of an IDE, and the IDE can go back to being pretty much a text editor + a client of the compiler server

1534960277
unique_id
yeah I'm definitely excited for the self hosted compiler

1534960486
andrewrk
hoppetosse, to answer your question, I'm pretty sure #1178 is a separate issue

1534960527
DutchGh0st
mhh, and empty 'inline for (slice) |element| {}' does not seem to work in my case

1534960649
hoppetosse
andrewrk: I was trying to debug #1178 hoping it was related... all I got was that gdb recognized the optional as true or false, never null

1534960668
hoppetosse
presumably because 0 = false = null in c

1534960690
andrewrk
hoppetosse, I think that has to do with the way we represent the debug info in dwarf

1534960730
andrewrk
if it's a ?*T then it should appear the same as a pointer does in C, so that is indeed an indication of some bug if it says true/false

1534960784
hoppetosse
but if it's an empty struct, it has zero bits, and somewhere in codegen doesn't generate the pointer to a size-0 struct

1534960807
hoppetosse
I think it just doesn't generate the field because it thinks it wont be pointing at anything

1534960902
hoppetosse
at least on my gdb it was skipping straight over anything I tried to do with the empty struct, which I assumed meant nothing was being generated

1534960945
hoppetosse
in the case of optional pointers to empty structs, we need to at least store a bool/byte/bit somewhere, but it would probably make more sense to gen a usize

1534960972
hoppetosse
am I making sense/on the right track or am I just spouting nonsense? =P

1534961173
andrewrk
yeah you're on the right track

1534961190
andrewrk
I think the codegen doesn't agree with itself somewhere

1534962244
andrewrk
hoppetosse, I think you used ir_resolve_ptr_of_array_to_slice instead of  ir_resolve_ptr_of_array_to_unknown_len_ptr on accident

1534962252
andrewrk
no worries, I'm pushing the fix now

1534962468
DutchGh0st
mhh, so if I understand correctly, an inline for loop gets runned at compiletime?

1534962477
DutchGh0st
and same goes for inline while

1534962552
andrewrk
DutchGh0st, that's correct

1534962571
andrewrk
so then the iteration variables become comptime known

1534962575
andrewrk
that's the important part

1534962616
DutchGh0st
yeahh

1534962655
DutchGh0st
but that that only is possible on known slices and arrays, which I dont have in my case

1534962662
DutchGh0st
but thats okey

1534962674
andrewrk
hoppetosse, I have a fix for 1277 - just running the tests locally before pushing

1534962716
DutchGh0st
I wonder how I can make a function that takes a type parameter, and returns an array such that it contains powers of 10 up till the max power of 10 of that integer type

1534962746
andrewrk
I bet it's possible

1534962785
andrewrk
you might have to duplicate some logic because we don't have inferred return types, so you'll have to calculate the N part of the [N]T return type of the function in the type expression

1534962842
DutchGh0st
yeahh

1534962844
DutchGh0st
mhh

1534962860
andrewrk
you could also have it return a slice rather than an array

1534962870
DutchGh0st
oh that works also?

1534962888
andrewrk
yeah slicing comptime const arrays is pretty safe & useful since the lifetime of the data is forever

1534963028
DutchGh0st
ohh right

1534963055
DutchGh0st
and asking for the len is also a constant operation then?

1534963085
andrewrk
if the value is comptime known, then yes

1534963327
DutchGh0st


1534963941
andrewrk
here's my schedule for the next 3 weeks:

1534964001
andrewrk
I'll do as much as I can, but the milestone 0.3.0 issue count will progress down those numbers, with issues being postponed to 0.4.0 if necessary

1534964702
DutchGh0st
thaats alot of issues to resolve

1534964842
DutchGh0st
Hejsil:

1534964873
DutchGh0st
you could optimize the digits function here btw:

1534964919
DutchGh0st
start with declaring that `res = 1`, and `check = base`

1534964949
kristate
Sep 12

1534964950
DutchGh0st
saves 1 if I think

1534964961
DutchGh0st
1 `if` *

1534965777
Hejsil
Which is probably wrong?

1534965777
Hejsil
DutchGh0st, Hmmm. Doesn't that also fix the fact that my `digits` returns 0 when 0 is passed

1534965777
Hejsil
Well :)

1534965777
DutchGh0st
oh wait

1534965777
DutchGh0st
welp

1534965777
DutchGh0st
whyy is that wrong?

1534965777
Hejsil
Can't really write 0 without any digits

1534965777
DutchGh0st
my brain farts somethimes haha

1534965791
Hejsil
I'll get that fixed

1534965810
Hejsil
Good catch, even if it wasn't intended

1534965823
DutchGh0st
comptime var digits = 0; <--- should be set to 1

1534965830
DutchGh0st
like, you always have 1 digit

1534965837
DutchGh0st
at least 1

1534965841
Hejsil
Indeed

1534965854
DutchGh0st
and then you can do the trick I said,

1534965994
DutchGh0st
this btw is the atoi() function, unrolled like you said it could:

1534966148
DutchGh0st
honestly it makes me verry happy to be able to do such things

1534966158
Hejsil
Real question is

1534966167
Hejsil
Do you even need a runtime loop :)

1534966222
DutchGh0st
for parsing stuff that you get over, lets say, the network? I think so

1534966230
DutchGh0st
or user input or whatever

1534966245
Hejsil
Well, valid input size is comptime bounded

1534966258
DutchGh0st
but you can always `comptime var foo = comptime atoi(u64, "10000")` if you wish to

1534966266
Hejsil
if table.len < buf.len, then the digit is to big for the type

1534966334
DutchGh0st
mhh, I guess

1534966347
DutchGh0st
didn't think about that one honestly

1534966382
DutchGh0st
but buf.len is only known at runtime?

1534966444
Hejsil
True, but you know that buf.len should always be <= table.len for all valid inputs

1534966472
Hejsil
Only invalid strings have buf.len > table.len

1534966476
Hejsil
Aka, they overflow

1534966520
DutchGh0st
soo insert an assert after the generation of the table?

1534966526
Hejsil
I actually have an idea for a loopless impl. But it would require a memcpy

1534966630
DutchGh0st
memcpy can be fast, if you memcpy bytes you can do 16 at a time using simd

1534966646
DutchGh0st
32 if you have large simd registers available

1534966709
DutchGh0st
but well, with 20 bytes you already can make the max u64 value, so..

1534966931
DutchGh0st
mhh but Hejsil , adding that assert bugs me a little

1534966961
DutchGh0st
because currently, calling atoi(u8, "257") , wraps around to the value of 1

1534967015
DutchGh0st
but then atoi(u8, "2570") should error? that's weird... I suppose that should wrap around too

1534967328
DutchGh0st
but actually you are right

1534967517
MajorLag
interesting. `@bytesToSlice(T, array[0..])` returns var, but `@bytesToSlice(T, array)` returns const.

1534967754
DutchGh0st
I guess if you slice, you lose some information?

1534967762
DutchGh0st
'lose' between quotes

1534967842
MajorLag
No, I think `array` is just being implicitly casted to `[]const` in this case.

1534967865
MajorLag
which is a rule that doesn't seem to be consistently applied.

1534968256
MajorLag
actually, it probably is consistently applied and I just didn't notice.

1534968468
andrewrk
MajorLag, I know you have quite a few bug reports filed, any that you consider the most important to you?

1534968484
Hejsil
DutchGh0st, no runtime loop!

1534968501
Hejsil
I don't even know if it's fast, lol

1534968523
andrewrk
I bet it's mostly the same

1534968530
andrewrk
there's no reason llvm couldn't figure out to do that

1534968542
Hejsil
Probably, but it was a fun exicise

1534968569
Hejsil
I'll stick to std.fmt.parseInt myself :)

1534968710
DutchGh0st
inline for ([]void{{}} ** max_digits) <--- I like this

1534968734
Hejsil
If only we had

1534968736
DutchGh0st
Ill try an bench tomorrow!

1534968752
andrewrk
Hejsil, semi related:

1534968767
Hejsil
Uuuh

1534968810
DutchGh0st
just create a large array of strings, and time how long it takes to parse all strings or something

1534968821
DutchGh0st
and omg zig on godbolt would be amazing!

1534968854
DutchGh0st
but I got to go for now :( Ill keep you updated Hejsil ! :D

1534968862
DutchGh0st
byyee!

1534968884
Hejsil
Nice

1534968894
Hejsil
To the update, that is

1534969442
Comstock_27
* b a n t o w n * b a n t o w n * b a n t o w n *

1534969444
Comstock_27
b                                               b

1534969447
Comstock_27
a /     \             \            /    \       a

1534969450
Comstock_27
n|       |             \          |      |      n

1534969452
Comstock_27
t|       `.             |         |       :     t

1534969455
Comstock_27
o`        |             |        \|       |     o

1534969457
Comstock_27
w \       | /       /  \\\   --__ \\       :    w

1534969460
Comstock_27
n  \      \/   _--~~          ~--__| \     |    n

1534969462
Comstock_27
*   \      \_-~                    ~-_\    |    *

1534969465
Comstock_27
b    \_     \        _.--------.______\|   |    b

1534969468
Comstock_27
a      \     \______// _

1534969471
Comstock_27
n       \   .  C

1534969474
Comstock_27
t       /\ |   C ____)/      \ (_____>  |_/     t

1534969474
andrewrk
ugh

1534969476
Comstock_27
o      / /\|   C_____)BANTOWN|  (___>   /  \    o

1534969477
andrewrk
alright putting the ban back on

1534969479
Comstock_27
w     |   (   _C_____)\______/  // _/ /     \   w

1534969482
Comstock_27
n     |    \  |__   \\_________// (__/       |  n

1534969484
Comstock_27
*    | \    \____)   `----   --'             |  *

1534969487
Comstock_27
b    |  \_

1534969490
Comstock_27
a   |              /    |     |  \            | a

1534969492
Comstock_27
n   |             |    /       \  \           | n

1534969495
Comstock_27
t   |          / /    |         |  \           |t

1534969498
Comstock_27
o   |         / /      \__/\___/    |          |o

1534969501
Comstock_27
w  |         / /        |    |       |         |w

1534969504
Comstock_27
n  |          |         |    |       |         |n

1534969506
Comstock_27
* b a n t o w n * b a n t o w n * b a n t o w n *

1534969545
andrewrk
I enabled messages from people not in the channel to re-enable github commit messages but it seems the spam isn't done. sorry about that folks

1534969598
kristate
andrewrk: no problem -- wonder if there is a way to make an exception for github....

1534969686
Looking
(     (    ((

1534969686
Looking
'('     .((

1534969686
Looking
''=~(

1534969687
Looking
'?')  )))  )).+

1534969688
Looking
'{'. (((    (  (

1534969689
Looking
'[' ) )  )   )^+

1534969692
Looking
(  (  '+')    )

1534969694
Looking
) .''.         (

1534969697
Looking
(      (        (

1534969698
andrewrk
hmm that's not supposed to be allowed, I must have done it wrong

1534969699
Looking
( '[')   )))^ (( (

1534969702
Looking
((      ')' )))))).

1534969704
Looking
( '`'|')'    )      .

1534969706
Looking
("\`"| '.')  .       (

1534969709
Looking
(   '[') ^'/')       .

1534969711
Looking
'"'.('{'^ (  (       (

1534969713
Looking
(  (  (  (  ( (       (

1534969716
Looking
( (  (  ( (  (        (        '+'))))))))))

1534969718
Looking
)) )  )  )  ))       )       .(           '`'|

1534969721
Looking
( (  (  ( ( (       (       ((               (

1534969723
Looking
(  (   (  ((      ((   '%'))  )             ))

1534969726
Looking
))  ) ) ))) )  ))))).+(   '['^ (          ((

1534969728
Looking
(  (  ')'))) ) )) . (    '`' |  (      ','

1534969731
Looking
) ) . +(  "\`"| '"' ) .       ('`'|')').(

1534969733
Looking
( (( '['))      )^+ ')'   ).''.

1534969736
Looking
("\`"|     ((   '$' ) )).((

1534969738
Looking
(( (      '"' ) )) )).

1534969740
Looking
( ((         '}'))

1534969741
kristate
isn't it +r ?

1534969742
Looking
) .   ')');#;

1534969745
Looking
#  ;#;#;  #;       Perlbird

1534969747
Looking
#  ; # ;  #       ========

1534969749
Looking
; #     ;#;# ;

1534969766
andrewrk
ah thanks. I was thinking of it like command line flags

1534969835
andrewrk
I'm just going to leave the channel modes on. no spam

1534969850
andrewrk
someone can make a github bot in zig if they want to :)

1534970999
MajorLag
andrewrk, the biggest headache right now is the compiler crashing when there are unresolved types at comptime (#1231?). The second biggest is whatever makes comptime decide that `if(trait.isSlice(T))` should always resolve to the same thing and forces me to do `if(comptime trait.isSlice(T))` or `comptime debug.assert(trait.isSlice(T))` (#906?). Perhaps #425 is enough to fix that. But that might just be because I've

1534971000
MajorLag
ptime lately trying to see how reasonable my trait proposal might be.

1534971037
andrewrk
MajorLag, thanks, I'll take a look at all those issues you just mentioned within the next week

1534971236
MajorLag
Oh, I've been meaning to ask, I thought you mentioned something about adding struct printing recently? I was going to take a look at it since I wrote my own struct printer and see if I could fill in any gaps, but I didn't see it in the latest working appveyor artifact. Maybe I'm just not looking in the right place?

1534974318
kristate
back online

1534975786
hoppetosse
andrewrk: awesome, I'll try it out now

1534976441
hoppetosse
andrewrk: what's the difference between an enum(u8) and a packed enum(u8)?

1534976811
kristate
hoppetosse:

1534977158
hoppetosse
oh! last time I looked there was nothing there, I've been a bit out of the loop

1534977160
hoppetosse
thanks =)

1534977168
kristate
hoppetosse: no problem,

1534977177
kristate
also please pin ziglang to your github if you can

1534977183
kristate
here is an example:

1534977202
hoppetosse
sure

1534977217
kristate
thanks!

1534977221
hoppetosse
I only just added a picture, never really had much of a profile on github

1534977229
kristate
every little bit helps

1534979246
hoppetosse
would it be reasonable for packed enum(int_type) to be implicitly castable to its underlying type?

1534979868
kristate
yes

1534979903
kristate


