1518741530
defenestrator
Hello, I'm trying to get started with zig on OS X (from the latest on github) , and I'm having trouble compiling the "Hello world" program in the docs.

1518741567
defenestrator
I'm getting "====parse:==== /Users/justin/src/zigstuff/hello/hello.zig:5:43: error: expected Semicolon, found LParen     var stdout_file = try std.io.getStdOut();                                           ~ error: ParseError

1518741585
defenestrator
Should I be expecting problems right now or did I do something wrong?

1518742775
defenestrator
andrewrk:

1518744023
andrewrk
hi defenestrator

1518744041
andrewrk
are you using 0.1.1 from homebrew, or master branch compiled from source?

1518744057
andrewrk
same question from the docs, are you using

1518744069
defenestrator
master branch from source

1518744075
defenestrator
and docs from master branch

1518744079
andrewrk
excellent

1518744098
andrewrk
are you trying to use the self hosted compiler?

1518744156
andrewrk
it's not ready yet - for now use the stage1 compiler (the one built by cmake)

1518744203
defenestrator
I'll double check, but I'm pretty sure I'm using stage1

1518744230
defenestrator
I think I tried stage2 and it didn't even like the build command

1518744240
andrewrk
yeah, it's a work in progress

1518744323
defenestrator
ohh

1518744371
defenestrator
okay, I think I was using build/zig

1518744380
defenestrator
but I just tried build/bin/zig and that works fine

1518744390
defenestrator
weird, I thought I tried that before, but I must not have

1518744395
defenestrator
sorry, user error :)

1518744404
andrewrk
no worries. what you tried to do will work eventually

1518747364
andrewrk
I just patched llvm to give us llvm.coro.sizeof(fn_ptr) so that we can find out the number of bytes to allocate for a coroutine before calling i t

1518747380
andrewrk
hopefully they like the idea and accept the patch

1518755185
andrewrk


1518756024
GitHub45
[zig] andrewrk pushed 1 new commit to master:

1518756025
GitHub45
zig/master cbbd6cf Andrew Kelley: add an assert to catch #777...

1518778402
jfo
wait actually this makes me want to know why there are two zig executables in `build` and `build/bin`... are they not linked or the same thing?

1518778429
jfo
I just realized I've been using `build/zig` but I haven't run into any issues like that yet...

1518796743
andrewrk
jfo, it's a cmake thing

1518796745
andrewrk
bin/zig is the real one

1518796771
andrewrk
(and only exists after you make install)

1518801107
defenestrator
Is there syntax to specify a string literal that includes no newlines but can be described across multiple lines in source?

1518801205
andrewrk
defenestrator,  you can use double quotes and the ++ operator

1518801220
andrewrk
++ is compile-time string concatenation

1518801281
defenestrator
ah, cool, thanks.

1518801628
andrewrk
we also have ** for compile-time array multiplication

1518801652
andrewrk
if you want to repeat a string N times (useful for zero initialization)

1518803152
MajorLag_
I forget, are we expecting to get traceback from runtime safety asserts on Windows when llvm6 hits?

1518803456
andrewrk
MajorLag_, you'll be able to open it in msvc and use that as a debugger

1518803476
andrewrk
there is still more work to do to print a stack trace directly in the terminal

1518804222
MajorLag_
That's a shame. I don't use msvc. I've been having to add warn statements in a binary-search kind of method to locate the sources of integer overflows and oobs.

1518804371
MajorLag_
Does the runtime safety assert call my panic handler if I provide one? And if so, is there a way to determine the source line number from that?

1518804663
andrewrk
MajorLag_, yes it does

1518804674
andrewrk
that's exactly what the default panic handler does on linux

1518804696
andrewrk


1518804706
MajorLag_
oh, so the StackTrace parameter itself isn't supported on windows.

1518804715
andrewrk
it is actually

1518804725
andrewrk
and that has a bunch of addresses

1518804736
andrewrk
and then we don't know how to turn those addresses into file, line number on windows yet

1518804770
andrewrk
to be clear, that StackTrace is actually the error return trace, if any (the "if any" is why it's nullable)

1518804771
MajorLag_
Ah, ok. Doesn't seem like it'll be helpful then for my situation.

1518804805
andrewrk
this is the code we have to improve to make it work on windows:

1518804843
andrewrk
it might not be so bad:

1518804875
andrewrk
we'd have to figure out how to use the COM API from zig

1518804892
andrewrk
but we'll have to cross that bridge eventually, I think

1518804900
MajorLag_
Well it's a place to start anyway. I could have saved myself probably 7 hours of debugging so far if I'd had line numbers this whole time, so it's worth me looking in to it.

1518804939
andrewrk
MajorLag_, yeah I'm sorry about that. it's not really fair to have the linux debugging situation more advanced than windows. it kind of shows bias in the zig project. but I want to make it better and make windows a first class supported citizen

1518804971
MajorLag_
It's alright, it's still experimental. One expects these kinds of things.

1518805210
MajorLag_
And I seem to be more productive with Zig than C, and it's likely C would take me longer to debug anyway since I wouldn't even have these asserts because I'm too lazy to add them myself.

1518805229
andrewrk
awesome. I'm really happy to hear that.

1518805246
andrewrk
at the end of the day it's not about the bells and whistles and fancy programming language concepts, it's about being productive

1518805499
andrewrk
MajorLag_, looks like

1518805624
andrewrk
and here's an example for finding line numbers from an address:

1518805647
andrewrk
I believe that's all the components you need to get stack traces working in zig (apart from figuring out how to call these functions and link against the correct libraries in the first place)

1518805742
andrewrk
MajorLag_, I think you're going to be happy when we have windows stack traces. after error return traces landed, I've barely needed to use a debugger when working on zig code

1518812612
GitHub166
[zig] andrewrk pushed 1 new commit to master:

1518812613
GitHub166
zig/master 72ca2b2 Andrew Kelley: ability to slice an undefined pointer at compile time if the len is 0

