1531354778
GitHub185
[zig] andrewrk pushed 1 new commit to master:

1531354779
GitHub185
zig/master 30c4add Andrew Kelley: std.event.Future: workaround in tests for llvm coro memory...

1531359587
GitHub105
[zig] andrewrk pushed 1 new commit to master:

1531359588
GitHub105
zig/master ce11d6d Andrew Kelley: ir: refactor lvalues

1531368801
dbandstra
concerning a zig png loader.. not png i have been working on a tga loader, and imo zipped tgas are a reasonable alternative to pngs

1531368963
dbandstra
i have a pcx loader as well, in case anyone is a fan of outdated image formats

1531369060
dbandstra


1531369080
dbandstra
unfortunately has a few dependencies on other tings in my utils repo, but i could spin off a standalone version if anyone was interested

1531388903
sneow
hello zig

1531389154
unique_id
hello

1531393557
hio
Memory safety should be the nr.1 concern of any new language. I'm afraid that while ziglang does everything else right, I dont see enough attention on this.

1531394790
Hejsil
Well, Zig provides tools for access out of bounds and using unused memory

1531394813
Hejsil
And allocators is a powerfull tool for managing memory, though it's still manual

1531394961
Hejsil
And this seems to be the most promising solution for ensuring that "resources" are passed around and freed correctly:

1531395110
Hejsil
hio, so what specifically are you refering to when you're saying that not enough attention is put in this area?

1531395563
hio
Hejsil: I think having every allocation trackable through a gui interface would make it comparable to Rust. I just want to have some kind of peace of mind that my program wont have any memory related issues that will cause crashes or out of memory problems at a critical time after I deploy my code. Yes it wont be 'perfect' because not every program run will cause every code path to happen but it will be as good as it gets. This would

1531395564
hio
be acceptable for me in terms of safety. So lets say I start my zig program and then it will prompt me to open the webbrowser at localhost:9991 to show me a list of allocations live as they happen and as they get freed. Kind of like valgrind or address sanitizer but live in a nice gui. That would make memory safety a first class citizen of the language which as I said, it should be because it's a big deal

1531395658
Hejsil
I think a lot can be done here with a leak checking allocator

1531395690
Hejsil
It could track lines where allocations happens and report if they weren't freed

1531395724
Hejsil
Let me see if I can find the discussions on leak checking

1531395786
Hejsil
If you have any specific ideas, here is the related issue:

1531395874
Hejsil
I personally think a leak checking allocator should be in std, but I don't know what andrewrk thinks of this

1531396132
Richard10
Can I use range in a for statement?  for example  for ( 0 ... 10)  | i |  { ... }

1531396139
hio
usability is the most important thing here, it should all be very easy for me to understand why, where and when allocations happen. That's why I suggested even providing a html gui for it because it's so important to make it obvious whether my code is running okay or not. Imagine a real usecase, I deploy my zig program and during production I realize that my zig process is running out of memory, constantly getting more and more. How

1531396139
hio
do I fix it, how do I debug and find the location in my code that is causing the problem?

1531396347
Hejsil
Richard10, No, you should use the while loop for this

1531396373
Hejsil
hio, so your concern is more about reporting memory usage rather than leaks

1531396394
Hejsil
Does rust even have anything in the compiler for this?

1531396401
Hejsil
I can imagine there is external tools

1531396418
Hejsil
I agree that it is important though

1531396491
hio
no, it's leaks. If I decided on using Rust it's very easy: I have "100%" confidence that I'll never have a memory leak. That's the competition so zig has to provide some kind of competitor here that is equivalent or at least near equivalent (imo)

1531396530
Richard10
OK, THANKS

1531396555
Hejsil
Ooh, right. You just made it sound like your program was not leaking and running out of memory (which indeed could happend)

1531396574
lqd
leaks are considered safe and are not checked by the compiler at all

1531396605
hio
I mean tracking memory in general would be nice to see, no other language has that kind of diagnostics built in. Dart has something similar, called the observatory. That's how I got the idea for an html gui after all, it's really convenient

1531396641
lqd
(leaks +in rust are not checked I meant)

1531397128
Hejsil
hio, this could be a thing:

1531397187
Hejsil
Pretty sure we have the tools to get most of this working already

1531397221
hio
that would be great, it would make it equal to c/c++ in terms of tool support

1531397222
unique_id
Looking at Rust wrappings and bindings of C libraries, the community seems to have gone too far in the name of safety. The main vulkan wrapper follows the idea of not being able to trigger undefined behavior if you don't write unsafe code. The point of vulkan is to remove checking and get out of your engine's way, not add checking and extra abstractions. There are validation layers, they can use used. Respect the design of Vulkan.

1531397564
unique_id
I think productivity should be the nr.1 concern of any new language.

1531397603
Hejsil
I think any new language

1531397618
Hejsil
nr1 concern is to solve the problem they set out to solve

1531397620
Hejsil
and solve it well

1531397621
Hejsil
:)

1531397764
unique_id
Sure, I agree. My experience with C++ is that its so complex that it draws you into chat rooms and other places just to discuss/learn about the language itself and you forget to do your programming :) It's really unfortunate.

1531397873
unique_id
But I'm not blaming the c++ people for that. They'll improve the language for a long, long time.

1531397934
Hejsil
The 30+ years near full backwards compatibility of such a big language is a respectable commitment

1531403195
andrewrk
hi sneow

1531403643
andrewrk
hio, have you used `valgrind --leak-check=full` to debug a memory leak in native code?

1531403646
andrewrk
it's magical

1531403693
andrewrk
once I discovered that, I lost my fear of memory leaks. it gives you a list of leaks, and a stack trace of where each leak was allocated

1531403758
andrewrk
you mentioned safety though, which in my mind is a separate concern from leaks

1531403871
hio
the report is hard to read, lots of different kinds of leaks and who knows which ones are actually real leaks

1531403904
andrewrk
that has not been my experience

1531403926
andrewrk
I've never seen a false positive memory leak from valgrind

1531403975
hio
Me neither, I meant that valgrind usually reports a lot of "maybe" leaks. Does valgrind work with zig produced binaries?

1531403999
andrewrk
it does, if you work around a valgrind bug with --no-rosegment

1531404017
hio
hm ok cool

1531404110
andrewrk
I don't think zig will ever have the sophisticated compile-time checks that rust has - you will always be able to store a dangling pointer somewhere. I do have lots of plans and ideas to increase runtime safety checks but it will never be perfect. plus we have release-fast mode where we don't have runtime checks

1531404135
andrewrk
so if memory safety is your nr1 concern, I think you should give rust a go

1531404590
unique_id
Sometimes I need to use the traditional for loop. Is it: "var i: u32 = 0; while(i < count) : (i += 1)" ?

1531405122
andrewrk
unique_id, yes

1531405127
unique_id
I need to make a large struct mostly zero initialized but set a few fields. Do I set it to undefined and use @memset/std.mem.set or is there a better way to zero initialize?

1531405141
andrewrk
nope, your understanding is correct

1531405154
unique_id
okay :)

1531405258
andrewrk
and then before doing the memset, consider whether you would want a compile error at this point when you add a new field to the struct - that can be a compelling reason to explicitly initialize all the fields (even if most of them are to undefined/0)

1531405325
unique_id
sure, but in this case it's a vulkan struct for choosing enabled device features

1531405332
andrewrk
ah, fair enough

1531405417
andrewrk
unique_id, I hope you will be posting screenshots :)

1531405459
unique_id
I will!

1531405767
MajorLag2
Since people were mentioning image loaders, I do have an entirely-too-compatable pure zig .bmp loader. png has been next on the list since it is used a lot and doesn't look too hard, but I've had a lot going on.

1531406084
andrewrk
ha - it's really hard to resist the urge to implement all the weird bmp features

1531406131
MajorLag2
It bothered me whenever something in the test set was incompatible, so I kept going until there weren't any.

1531406166
MajorLag2
So if anyone has a powerful need to support OS/2 Huffman1D monochrome bitmaps, I've got you covered.

1531409056
unique_id
andrewrk, afaik the vulkan xml spec has enough information in it to generate complete zig bindings with correct usage of optionals and [*] :) OpenGL I don't know about, its xml does have a 'len' attribute. The xml files are definitely ugly, you need to parse C types, and it might be better to write a non-generic parser that's very hacky looking but you know it works for the current and probably all future specs. This isn't something I

1531409058
unique_id
can work on now, but either me or someone will do it in the future :)

1531409106
andrewrk
good to know

1531409146
andrewrk
does the vulkan xml spec also note when ptrs are null terminated?

1531409395
unique_id
Yes, it appears so. len="null-terminated"

1531409440
andrewrk
beautiful. zig has a type planned for that pointer type as well

1531411291
andi3
"I do have an entirely-too-compatable pure zig .bmp loader" - wouldn't it make more sense to push forward on zig libc and then solve all those issues with the respective mature c lib ?

1531411327
andrewrk
zig can export a c ABI and .h file

1531411334
andrewrk
why would you want to maintain it in C?

1531411335
andrewrk
:)

1531411586
andi3
why maintain? I mean you just take some c.png lib and use it with zig and be fine across all platforms

1531411723
andrewrk
ah I see. yeah that's something we want to get to. but there are benefits to having the code in zig:  faster, allocator support, less likely for the impl to eat errors, static stack size calculation (this isn't implemented yet)

1531411887
andrewrk
error return traces

1531412332
andi3
I think an old c lib that has lots of though put into its functionality and was used widely will still have less bugs than zig code and will be faster due to algorithmic complexity which is much more important than what the optimizer will do so unless you basically type the same code as c, c will be better for such things for a  long time

1531412354
andrewrk
that's a fair point

1531412373
andi3
and time is limited resource as well so why even bother retyping all that, python guys reuse fortran code all the time for the same reason, zig would be for c what python is for fortran

1531420732
andi3
reading

1531420770
andrewrk
andi3, sounds like you'd like to make a proposal

1531420941
andi3
well it was a question to begin with cause that seemed like the obvious extension of an opaque type so I thought someone might have thought the same :D

1531421056
andrewrk
you can use a struct for that

1531421068
andrewrk
const my_int = struct {data: i32};

1531421294
andrewrk
I'm going to do a live coding stream in 2 hours. any suggestions for what to do?

1531422344
douglasC
andrewrk: I am new to zig, so anything basic for me.

1531422581
andi3
yes but then I always have to do my_int.data or access and that is kind of ridicules

1531422659
andi3
Memory management/ custom allocator would be really cool

1531422674
andrewrk
andi3, but that's what you wanted I thought? inability to cast to an int

1531422703
andi3
yes, just still not awkward syntax

1531422741
andrewrk
what would it look like if it were not awkward?

1531422827
GitHub123
[zig] andrewrk pushed 1 new commit to master:

1531422828
GitHub123
zig/master 687bd92 Andrew Kelley: self-hosted: generate zig IR for simple function...

1531422873
andi3
just my_int = @OpaqueType(i32) ; my_int = 3; some_other_myint = my_int; // not awkward, just like an int, var int : i32 = my_int ->compile error

1531422948
Bas_
How is that dif... oh I see. You mean all normal operations still work?

1531422993
andrewrk
so far that syntax will work verbatim with my struct example

1531423018
andi3
ok Andrew give me a sec :D

1531423164
andi3
actually no it does not?  error: integer value 3 cannot be implicitly casted to type 'my_int'     var i : my_int = 3;

1531423201
andi3
this really is most useful on numeric types

1531423220
very-mediocre
possibly a silly question, but why do you not want it to be castable to i32

1531423266
andi3
say you have a func that takes two ints, you do not want the caller to pass the args in wrong order

1531423308
andi3
you can name them appropriately and then they can be passes thought out the program

1531423331
andi3
async/ M:N multiplexing would be nice to see as well @andrew

1531423377
very-mediocre
isn't it a bit ugly to use opaque types just to ensure param order?

1531423432
Bas_
I think it can be nice for some things, like when you use physical units

1531423438
very-mediocre
also you'd have to use both i32 and the fake-i32 at the callsite

1531423448
andrewrk
andi3, yeah I think on stream I'll live code converting `zig fmt` from single-threaded blocking to multi-core event based

1531423473
andrewrk
which will be fun because std.event.* doesn't support file I/O yet

1531423504
very-mediocre
ok, i see what you mean regarding physical units

1531423538
andi3
something about build system/ with c code maybe would be nice as well. there is already a good blog post though

1531423542
Bas_
Though I never actually worked with anything like that, so it could be that it's more of a pain than a benefit.

1531423581
very-mediocre
Bas_: I'm of that opinion, I've never felt the need to write down units

1531423628
very-mediocre
andrewrk: where would i find your stream if i wanted to watch it later? your YT channel?

1531423638
andrewrk
twitch.tv/superjoe30

1531423643
very-mediocre
ty

1531423656
andi3
like a couple days ago I wrote about ADA which takes this constraints to a new level its really not just units at all, I'd argue there is very little reason to have pure ints in your program at all aide from for loops

1531423666
very-mediocre
sounds like it'll be kickass but unfortunately it's super late for me so I'll catch it tomorrow instead

1531423689
andi3
will it be uploaded to yt later?

1531423718
andrewrk
yes

1531423730
andi3
nice

1531423774
very-mediocre
andi3 that sounds pretty radical, why wouldn't you have ints?

1531423835
andrewrk
sorry, I just changed my username: twitch.tv/andrewrok

1531423910
andi3
its just hard to read and easier to make mistakes but hard to read because there are ints everywhere which eventually will have names like tmp1 tmp2 .. and having them as explicit types serves as double documentation. And they are very easy (one line) to create and have absolutely no runtime overhead

1531424050
andi3
I think there is really no reason not to use them, how would that make your program harder to use?

1531424072
very-mediocre
i'm having a hard time picturing how this would look

1531424110
very-mediocre
can you give me an example of what 2 different i32 types would be?

1531424119
andi3


1531424147
very-mediocre
ok that's clear

1531424173
very-mediocre
the @OpaqueType(i32) idea didn't really evoke this for me

1531424218
very-mediocre
if you settle for using structs, you can do comptime constraints

1531424234
very-mediocre
if you return the struct from a function, just like you'd do generics

1531424274
GitHub178
[zig] andrewrk pushed 1 new commit to master:

1531424275
GitHub178
zig/master 69e60e3 Andrew Kelley: self-hosted: better IR for empty fn...

1531424303
Bas_
I actually like these

1531424309
Bas_
type Day_type   is range    1 ..   31;

1531424331
andi3
yes constraints on the range are great

1531424367
Bas_
I also like the u2 types, but an explicit range is pretty nice as well imo.

1531424386
andi3
one other useful constraint is to only allow for + but not * because e.g. how do you multiply two days? that can just be forbidden. But that goes somewhat against operator overloading in zig so that may not be feasible

1531424461
Bas_
Unless you have a nice syntax for that I'd delegate that to a struct then.

1531424476
very-mediocre
pub fn DayType(comptime val: u8) type { comptime assert(val > 0 and val < 32); return struct { val: u8 } }

1531424512
Bas_
That just checks on construction?

1531424543
very-mediocre
yeah, i just shot from the hip

1531424549
Bas_
ok

1531424554
andi3
yes that does not work

1531424583
Bas_
The good thing about being explicit about these things is that the compiler also knows.

1531424597
andi3
but if you want to constraint range + operator + conversion, I agree one could reach for a real struct so thats not really needed

1531424622
andi3
but simple conversion and or range should be possible as a one liner

1531424628
very-mediocre
you could do getters and setters of course

1531424774
very-mediocre
anyway i see what you're getting at...

1531424910
andi3
I would define OpaqueType(x) as a type that is just like x but does not convert automatically, so the same would be possible for structs where all of x methods/ fields are available on the new type, although for structs I've not had the need yet

1531425298
andi3
what I find really interesting was the suggestion proposed here to have some web ui for analytics

1531425329
very-mediocre
that code i wrote above is wrong fyi, forgot i wanted to return the struct with the value pre-assigned. I'm too sleepy to be on here right now

1531425333
Bas_
Is it on purpose that I can't subtract two pointers from each other to get the difference/size?

1531425368
very-mediocre


1531425380
andi3
go can produce call-graphs and I think that is the right way to go to have easy to use analytics data as profiling/ call graphs available

1531425384
very-mediocre
this should be subtractable

1531425410
Bas_
Yeah it is, but then I've to take into account the size of the type as well.

1531425418
Bas_
I can do it of course, but...

1531425440
andi3
Is it on purpose that I can't subtract two pointers - I think that is actually a good thing for the same reasoning as I want OpaqueTypes for ints

1531425493
andi3
I've to take into account the size of the type as well. - what do you mean?

1531425539
very-mediocre_
you can do a macro that takes the size into account

1531425663
Bas_
@andi3 if you have two * i64, and you do the @ptrToInt, to know how many elements there are inbetween you have to divide by @sizeOf(i64)

1531425675
andi3
... you mean the size of the type pointed to I see

1531425716
Bas_
yes

1531425732
Bas_
C has this neat feature where it does that for you =P

1531425745
andi3
cpp has std::ptrdiff that would be the same I guess

1531425759
andrewrk
andi3, you can subtract [*] pointers but not * pointers

1531425772
andrewrk
I think

1531425776
andrewrk
at least add

1531425779
Bas_
Let me try

1531425781
andi3
yes but in c that is rather a bug than a feature if you agree with the people that know c and write the compiler and turn on their warnings you will get warnings for those things

1531425824
andrewrk
wait, why would you want to add 2 pointers together? you'd want to add a pointer and a usize

1531425836
Bas_
subtract

1531425878
andrewrk
error: expected type 'usize', found '[*]i32'

1531425887
Bas_
Yeah I get that.

1531425889
andrewrk
my mistake

1531425927
andrewrk
supporting pointer subtraction might be something we add to [*]

1531425933
Bas_
ok

1531425943
andrewrk
it would assert that it didn't create a negative number (e.g. it would return a usize, not isize)

1531425957
Bas_
Yeah that'd be good.

1531425995
andrewrk
I spent nearly all of yesterday and half of today doing this commit:

1531426010
Bas_
I'm wondering a bit. Things I used to do with poitners in C++ I find quite messy to do in Zig.

1531426011
andrewrk
1,555 additions and 315 deletions. it took a while to work through the compile errors but then everything worked the first try

1531426020
andi3
what is the reasoning to not put this into a builtin? if you have builtins for conversion from ptr to int this seems more appropriate

1531426065
andrewrk
what, a builtin for pointer subtraction?

1531426074
andi3
those are probably things that should not have been done in cpp that way anyway

1531426078
Bas_
lol

1531426079
andi3
yes like std::ptrdiff

1531426101
andrewrk
Bas_, if you show me some messy zig code examples I'll try to make some suggestions

1531426119
andi3
std::difference is the correct one actually

1531426120
Bas_
How can I show you?

1531426131
Bas_
std::difference is silly imo. just do a - b ^^

1531426140
andrewrk
if it's open source you can link me to a repository, or you can paste a snippet to, e.g.

1531426192
andi3
but it shows what you do if you read the code you know whats going on, if you. just subtract two numbers nobody knows what those do, are they in a for loop, pointers... can be anything

1531426290
Bas_


1531426361
Bas_
And this is my C++ code

1531426534
andi3
the right cpp code would be one include one one more line though :D so indeed easier than zig

1531426584
andrewrk
I'm looking

1531426901
Bas_
Thanks

1531426941
andrewrk
Bas_, unless I'm reading it wrong, partition always returns data_in.len

1531426965
Bas_
Then you're reading it wrong. =D

1531426979
andrewrk
in english what is partition supposed to return?

1531426988
Bas_
The partition point.

1531427005
andrewrk
oh I see

1531427025
Bas_
so everything before is true and everything after false.

1531427030
andrewrk
got it

1531427033
Bas_
ok

1531427297
andrewrk
Bas_, I didn't work through all the logic, but my suggestion is to avoid @ptrToInt, and slice less, and introduce some index variables

1531427310
stratact
andrewrk: quick question, why does Zig go for duck typing in generics, when the goal of the language is clarity? Wouldn't some kind of "contract-based" generics be more in-tuned with Zig for the sake of clarity? Ideally this would work with a traits system, but this again goes back to the bikeshed discussion of OOP

1531427323
andrewrk
as a litmus test there's no reason this function shouldn't be able to run at comptime, but depending on @ptrToInt makes it runtime-only

1531427346
Bas_
Alright, I'll try to do it with indices

1531427360
Bas_
Yeah I didn't want to use @ptrToInt =D

1531427383
andrewrk
it's definitely possible to implement this in a straightforward way without it

1531427412
andrewrk
stratact, I don't have a really good answer for you

1531427439
stratact
andrewrk: that's fine. I just wanted to share at least

1531427442
andi3
stratact I think the same when I see var in that code here again instead of traits, bad thing is if you have a function in a function in a .... and somewhere down a var is used and it. gives you some compile error out of the darkness of some lib you are using which should have been caught right at the beginning

1531427450
andrewrk
for me, too much contract based generics can make it difficult to read code

1531427509
stratact
hmm, I see

1531427511
andrewrk
it introduces a lot of complexity

1531427520
andi3
how does contracts make code difficult to read? I find it makes it way easier than just var whee I have no idea what specifics of that var are actually used/ needed/ relied on

1531427532
andrewrk
I didn't want to give up the ways in which C is actually quite nice and simple

1531427565
andrewrk
andi3, it's all in the specifics

1531427640
andrewrk
maybe we can talk about specific contracts rather than contracts in general

1531427647
Bas_
I agree that simplicity is nice. And that's actually lacking in quite a few popular languages.

1531427708
andi3
well complex problems require complex solutions just not as crusted as cpp but certainly about as capable and expressing contracts is pretty important IMO

1531427833
very-mediocre_
`crusted as cpp` - hear, hear

1531427835
andrewrk
andi3, that's certainly true. and given that most programming languages are turing complete, you can write complex enough code to solve a problem of any complexity. the question is, what does the structure of the solution look like?

1531427838
stratact
Maybe there is a good compromise that Zig can do, which is not to be as complicated as how Rust does contract based generics but not to be too simple in duck typing generics, in order to be "practical" but at the same time not too complex

1531427860
andrewrk
zig's answer to this question is that we have very simple building blocks, and you create your own castle with them

1531427870
andrewrk
your castle will be complicated, but the bricks are just bricks

1531427916
Bas_
I'm already afraid there will be too much stuff in std :P

1531427917
andi3
well the Turing complete thing really is pointless I just need while(x) and am Turing complete but what is the point and still even if you are not Turing complete that does not make life e.g. the problems much easier either just because halting problem is solved does not mean all other language problems are

1531427944
andi3
well the structure of the solution is just what traits are all about, giving structure into the program

1531427964
andi3
your castle will be complicated, but the bricks are just bricks - that sounds nice hehe :D

1531427975
andrewrk
Bas_, right now std's biggest goal is a test bed for the language. once the language is stabilized, the next task is to audit the standard library and figure out what APIs will or won't make it in. by that time we'll have nice package management solution so the non- std-lib code can go live in packages

1531427989
Bas_
ok cool

1531428092
stratact
Anyway just food for thought about clarity in Zig, cause I thought having contracts might make easier for the reader to understand how a generic type or function is to be used

1531428124
andi3
....and fail fast -> better error messages

1531428145
andrewrk
here's an open issue that is related to contracts / `var` param type:

1531428181
andrewrk
I don't consider the issue resolved

1531428477
Bas_
I guess there's no slick way to reverse iterate through a slice?

1531428562
andi3
I'm already afraid there will be too much stuff in std :P - why? You do not have to use it but reimplementing bubble sort every time does not cut it either so I'm happy to have something at least the size of cpp stdlib with solid algorithms which spare my time on off by one errors and bad algorithms

1531428604
andi3
is the stream about to start? (no pressure :D )

1531428632
Bas_
I don't mind a sorting function and that stuff

1531428668
stratact
I'd say one of the things I'm not too happy about Rust is its libstd is too minimal for my tastes, but the idea is that things to be split into separate dependencies because programming APIs evolve and old stuff shouldn't be used as much anymore

1531428779
Bas_
I also think the std in C++ is going to grow too big

1531428790
andi3
I mean cpp also has partial sort and find max element and rotate and stuff which is not really a given in all languages

1531428808
Bas_
But there what also annoys me is that the language can't work without std

1531428861
andi3
well judging from the latest talks I've heard the standard committee is mostly against a big stdlib although most users want one, the argument mainly is that standardization takes time and by time of adoption things are obsolete again

1531428875
Bas_
as well

1531428890
Bas_
And I'm not sure stuff like regex should be in there

1531428920
Bas_
while at the same time really useful things like string view take a long time

1531428944
andi3
I'd want to be able to use zig for scripting as well so I hope I can quickly do simple things like that

1531428979
andi3
also, zig is it's own build system but if you have to go back to python or something else for scripting this defeats the point of a build system in the main language

1531428980
Bas_
yes I actually think Zig can be used for scripting. At least it feels like it.

1531428994
Bas_
Yeah that's really awesome

1531429003
Bas_
(As I hate CMake =D)

1531429018
stratact
andrewrk: will Zig have more "batteries included" in the std library than say languages like Rust?

1531429038
andi3
but then you need basic utilities for easy access of files/ text/ system commands basically thats is

1531429093
andi3
everyone hates cmake but at least it's something that brings cpp builds together and helps some clang tooling but the idea with build system in the same language is really great, jai has it and I'm not sure why rust does not have it, seems obvious in hindsight

1531429126
Bas_
I also don't know why there are so many build systems that get it wrong

1531429132
douglasC
twitch.tv... Service Unavailable - Maximum number of active clients reached.  Anybody else get this

1531429138
Bas_
xD

1531429175
andi3
Andrew is live @stratact

1531429204
stratact
oh, link?

1531429269
andi3
may I say that I find it great that Andrew is so very productive but watching his desktop is quite a pain I mean beautiful desktops for linux exist these days anyway off topic and personal taste please don't take this seriously :D

1531429274
andi3


1531429293
winksaville
newbie here: compiled and install zig. Then followed the docs and wrote and ran hello.zip, worked fine. But have a question, how do you return a specific value from main? (A quick search of the docs and web didn't find an answer)

1531429377
Bas_
return specific_value; ? =P

1531429469
stratact
andi3: did he answer my question earlier because I didn't catch it if he did

1531429565
andi3
I do not think that is yet decided

1531429569
andi3
afaik

1531429812
andi3
I think you can't return from main cause its return type is void @winksaville

1531429870
stratact
ouch, the self hosted compiler links to libc...

1531429904
andi3
ah so you have `expected return type of main to be 'u8', 'noreturn', 'void', or '!void'` at your disposal if you choose u8 e.g. you can return 1 without issue

1531429933
andi3
well if you have libc in zig someday that will be no issue, that will be such a relief honestly can't wait for that

1531429970
winksaville
@Bas_: I tried return 123; but compiler complained "error: interger value 123 cannot be implicitly casted to type 'void' ". So then an error told me that main can be 'u8', 'noreturn', 'void', or '!void'. So I changed it to 'u8' but then zig says:

1531429991
winksaville
var stdout_file = try std.io.getStdOut();

1531430071
winksaville
preceded by:

1531430074
winksaville
hello.zig:4:21: error: expected type 'u8', found 'WindowsGetStdHandleErrs'

1531430110
andi3
`const std = @import("std");` should suffice because that return does not actually count as IO

1531430160
andi3
9I'm myself a newly in zig at best)

1531430395
winksaville
@andi3: I have that as the first line, and all was well until changing the return type of main to u8. I'm guessing I've got to "catch" the try.

1531431139
winksaville
Found a solution:

1531431146
Bas_
I made a new implementation with just indices. It's indeed nicer.

1531431196
winksaville
const std = @import("std");

1531431207
winksaville
pub fn main() u8 {

1531431217
winksaville
var stdout_file = std.io.getStdOut() catch |err| return 2;

1531431226
winksaville
stdout_file.write("Hello, world!\n") catch |err| return 3;

1531431236
winksaville
return 123;

1531431238
winksaville
}

1531432913
unique_id
I joined late on the twitch stream. Cool stream, I don't have a twitch account to comment. Not yet.

1531433659
karlguy
andrewrk: nice, another dvorak user. :P

1531434452
stratact
Is there ever a need to have IO blocking?

1531436334
andrewrk
winksaville, looks like you got it figured out, yeah? make sense?

1531436374
andrewrk
Bas_, and that implementation you can use at comptime :)

1531436395
Bas_
Yeah that's cool.

1531436559
andrewrk
stratact, it depends

1531437498
winksaville
andrewrk, what I did makes sense but how can I ignore an error? For instance I want to report the error and continue to the next statement: if (stdout_file.write("Hello, world!\n")) { stderr_file.write("err to stdout"); } return 123;

1531437784
andrewrk
foo() catch |err| report(err);

1531437790
andrewrk
foo() catch {};

1531437931
GitHub100
[zig] andrewrk pushed 1 new commit to master:

1531437931
GitHub100
zig/master ac096c2 Andrew Kelley: zig fmt

1531438943
isaachier
hey andrewrk, added more to my readme for the game boy emulator here:

1531439078
andrewrk
isaachier, added to ziglang.org

1531439193
isaachier
thanks!

1531439248
winksaville
andrewrk, txs. Now I want to "capture" the error to a local variable is there a standard "error.None"? It seems I can initialize it to anything but that feels a little weird:

1531439252
winksaville
var my_err: error = error.Xyz; report(my_err);

1531439285
andrewrk
var my_err: E!void = {};

1531439305
winksaville
obvious :)

1531439313
andrewrk
where E can be `error` or any other error set. see

