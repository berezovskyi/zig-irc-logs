1533173802
MajorLag1
How to make yourself really confused about why your inflate implementation doesn't work: step 1: refuse to believe anyone is foolish enough to mix LSB and MSB. step 2: Accidentally break your symbol lookup

1533174268
MajorLag1
Which reminds me, `const x = u8(255) & u16(0xFF00);` results in u16(0). Which makes sense since addition would act similarly, but I'm wondering if bitwise operators should ensure operands are the same type?

1533182605
andrewrk
hmmm. it's a good question

1533182631
andrewrk
in your case what was the intended result?

1533221060
kristate
andrewrk: good morning!

1533229060
andrewrk
good morning kristate

1533229072
andrewrk
you've been busy

1533229089
kristate
andrewrk: yeah, trying to take care of some of this low hanging fruit

1533229130
kristate
about to push Call RtlGenRandom() instead of CryptGetRandom()

1533229780
kristate
andrewrk: by the way, resume @handle(); works now after your coro cancel commits;

1533229816
andrewrk
kristate, brilliant - even that case you mentioned that was broken before?

1533229837
kristate
Yes! I am quite happy

1533229850
andrewrk
amazing

1533229873
andrewrk
I read the RtlGenRandom issue

1533229883
andrewrk
that is quite unfortunate, that the deprecated API is more desirable

1533229921
kristate
Well, Microsoft is trying its best to unify its cryptoAPI, but for random bytes everyone is calling SystemFunction036();

1533229987
andrewrk
hm maybe that's fine. Do we really need to use LoadLibrary and GetProcAddress? why can't we just put `extern "advapi32" fn SystemFunction036...` and call it?

1533230005
kristate
Yes, that is what I have done

1533230010
kristate
about to push

1533230020
andrewrk
oh, microsoft.

1533230024
andrewrk
ok, i'll look :)

1533230377
kristate


1533230620
andrewrk
kristate, looks good, I'm going to merge it, did the windows tests pass for you?

1533230641
kristate
I don't have a windows box, so I am waiting for CI

1533230650
andrewrk
I'll run them locally real quick :)

1533230655
kristate
thanks <3

1533230910
andrewrk
a couple of minor easy to fix things, I'll take care of it

1533230918
kristate
okay, cool

1533232652
kristate


1533232743
andrewrk
one moment, I'm almost done merging @handle()

1533232785
kristate
cool beans

1533232993
Dirkson
Hey all. Coming from C, one thing that I think would help me pick up Zig faster is some information on where it diverges from C most radically. Are there any writeups for that yet?

1533233020
andrewrk
hi Dirkson

1533233034
Dirkson
andrewrk: Hi person making a cool thing!

1533233036
andrewrk
I don't think such writing exists

1533233055
Dirkson
Okie dokie

1533233066
andrewrk
maybe this:

1533233079
kristate
Dirkson: Yeah, I would point you to this:

1533233101
kristate
comptime and that there are built-in functions that pull LLVM closer to your app

1533233122
Dirkson
Interesting

1533233181
kristate
I would dare say that zig is more low level than C -- and safer because there is less ambiguity about what it will compile to.

1533233300
Dirkson
I could see that.

1533233425
MajorLag
That's not an unreasonable assertion.

1533233718
Dirkson
From my perspective, what I've seen so far suggests that it fixes a bunch of stuff I hate about C while potentially reducing complexity, rather than increasing it.

1533233873
kristate
Dirkson: I was starting to write a lot of Rust, but got discouraged for a number of reasons. Zig feels at home and its internals are simple enough that its easy to hack on

1533233895
andrewrk
kristate, @handle() is merged. thanks for your great work!

1533233902
kristate
andrewrk: yay!

1533233990
Dirkson
kristate: I never got started with Rust. I kept finding weird corner cases just trying to learn the damn language. The first set of corner cases was around how the semicolon functions. They eventually fixed the worst of that, but the

1533234223
kristate
Dirkson: yes, I ran into a number of those too. Zig has some rough edges, but there is no magic hand waving

1533234262
kristate
granted, once we get through 0.4.0, I am pretty sure that most rough edges will be rounded

1533234265
andrewrk
kristate, for `_`, I think we should handle it in the semantic analysis, not the parser

1533234316
kristate
andrewrk: which path does less work / less CPU cycles?

1533234348
andrewrk
probably semantic analysis, because we need that code anyway for |captures|

1533234425
Dirkson


1533234428
Dirkson
the information I was trying to find, but you know, I feel like it really does highlight something important :D

1533234437
andrewrk
I'm guessing the solution will be in create_local_var / add_variable

1533234517
andrewrk
Dirkson, ah yeah, I wonder what tiehuis got stuck on

1533234681
Dirkson
Ouch. Spectral-norm, though, returns some 20x slower than the C example. Although it does return a slightly different value

1533234796
kristate
andrewrk: okay, I retooled around create_local_var

1533234882
andrewrk
Dirkson, I'll look into that. there's no reason the LLVM IR of clang and zig for spectral norm should be radically different

1533234918
Dirkson
andrewrk: Potentially debug-related stuff? I haven't worked out how to make zig produce release binaries yet.

1533234942
andrewrk
oh, it's probably this issue:

1533234962
andrewrk
Dirkson,

1533235109
Dirkson
andrewrk: Thanks! I had assumed that --release-fast would work with 'build' not just 'build-exe'. That brought it up to about 3x slower than the C example.

1533235188
Dirkson
But there's a note in the source that it used to segfault on --release-fast, so you appear to have fixed whatever issue was causing that at some point

1533235245
andrewrk
3x slower is still fishy. I'll look into it at some point

1533235498
kristate
andrewrk: is there a macro to breakpoint in the cpp code?

1533235520
andrewrk
BREAKPOINT;

1533235522
kristate
cool

1533235525
Dirkson
Well, the other thing I think is fishy is that they return different results: C: 1.274224152 Zig: 1.27422606e+00 .  Although the C version appears to use doubles, and the zig f32.

1533235576
andrewrk
unless the C version is compiled with -ffast-math, zig would need some @setFloatMode(FloatMode.Strict) in there too

1533235703
Dirkson
Oh, neat.

1533235755
Dirkson
You seem to have some expectation of how fast Zig should be compared to C. Mind if I ask what that expectation is?

1533235894
andrewrk
it should be as fast or faster

1533235899
andrewrk
in all cases

1533235917
andrewrk
as long as by C you mean clang

1533235928
andrewrk
because it's the same backend

1533235937
andrewrk
and zig isn't doing any extra hidden cost stuff

1533236001
Dirkson
Ok, cool.

1533236009
andrewrk
faster because zig has extra undefined behavior for the optimizer to take advantage of. see this for more details:

1533236124
Dirkson
Nice : )

1533236246
kristate
andrewrk: I actually think that var _: should be handled in the parser because we have a lot of false positives with ir_create_var -- plus, there is already special code in ir_gen_symbol to deal with the static nature of _

1533236285
kristate
I actually got it so that for for ([]void{}) |_, i| { for ([]void{}) |_, j| { will work, so I will push that too.

1533236292
andrewrk
kristate, in that case I think it should go in ir_gen_var_decl

1533236309
andrewrk
we know how to parse the code if a variable has a _ for a name - we just want to make it a semantic analysis error

1533236331
kristate
andrewrk: hmm, interesting

1533236331
andrewrk
you can see there are a few other checks there that technically could have gone into the parser but are here instead

1533236347
andrewrk
consider: if you're in an IDE and it's going to highlight all the errors with red squigglies

1533236366
andrewrk
better for the parsing to complete and then we highlight all the variables that have _ for names, rather than give up parsing after the first one

1533236429
kristate
yes, this makes sense

1533236449
Dirkson


1533236509
andrewrk
Dirkson, yes

1533236573
Dirkson
Ah, there we go. build-exe drops its exe someplace different than build does.

1533236603
andrewrk
Dirkson, yeah the output path(s) of artifacts is something I haven't settled on yet

1533236821
Dirkson
andrewrk: Operating in strict mode with a f64, like the C example, the Zig example runs about 7x slower than the C example, but actually produces the same result now.

1533236884
andrewrk
I'm guessing this is

1533237579
Dirkson
andrewrk: Even when the C is built using "-fno-vectorize", it still runs at around 1 second to zig's 7.

1533237659
andrewrk
Dirkson, the next step is to look at the LLVM IR difference between the clang code and the zig code

1533237711
andrewrk
both pre- and post- optimization

1533237768
Dirkson
The slowest I can get the C version to go is about 1.6seconds at -O0. I've not tinkered with LLVM much before, but I'll see what I can't figure out

1533238098
andrewrk
they might be different implementations

1533238118
andrewrk
e.g. tiehuis might not have made a direct port

1533238526
Dirkson
I did consider this. There's one major change, and it'd be fairly easy to undo. That's probably easier than figuring out LLVM IR

1533238587
Dirkson
Theoretically the change should be compile time, buuuut

1533238859
Dirkson
Ok, the obvious change didn't do much. Everything else is zig-specific stuff that I don't fully understand yet

1533238982
Dirkson
Got it.

1533239134
Dirkson
The default argument provided was different in each of the programs. Stupid thing to not notice, but it doesn't appear to affect the output. The zig implementation does appear to be roughly as fast as the C implementation. Huzzah!

1533239187
andrewrk
good to know

1533242631
andrewrk
I stream in 15 minutes

1533242662
stratact
ah nice, good luck

1533246069
unique_id


1533247963
unique_id
Vulkan is extra, extra verbose. The Khronos people really want it to run on MacOS and it's looking like the solution will be MoltenVK. I believe it was bought by Valve and open sourced, and Dota 2 runs better on MoltenVK than OpenGL on MacOS

1533248184
unique_id
(I should really sign up for a twitch account, this is looking pretty out of place here)

1533248867
unique_id
this is going to take forever, glGenBuffers doesn't use up video memory IIRC

1533249129
Dirkson
unique_id: Hey, I missed the earlier video. Why'd you mention Vulkan?

1533249253
unique_id
nvm don't remember what glGenBuffers does

1533249273
unique_id
andrew is streaming

1533249345
Dirkson
I noticed that bit. I also noticed opengl code going up on the screen

1533249793
unique_id
_mesa_error(ctx, GL_OUT_OF_MEMORY, "glCreateBuffers"); -- hmmmm

1533250421
unique_id
My last comment on the stream: I don't know what the heck you're supposed to do on OpenGL. Can you can call glGetError and check for GL_OUT_OF_MEMORY? I don't know. Is the documentation missing this? But your application just deadlocked? I don't know. All I know is that Vulkan is not lacking in this regard, in fact you can take care of CPU-side allocation for the driver via VkAllocationCallbacks.

1533250471
unique_id
So it's got it all

1533251268
unique_id
andrewrk: glGenBuffers doesn't actually allocate gpu resources, it just "reserves" a name. You'll have to call glBindBuffer for that. GL_OUT_OF_MEMORY can be 'returned' from any command, it's implicit. That's what the spec says. As you can see, OpenGL likes implicitness :)

1533251678
andrewrk
unique_id, ah, thanks for the comments

1533251779
andrewrk
sounds like I should ditch OpenGL immediately

1533251863
Dirkson
Having worked in both opengl and vulkan, I am strongly of the opinion that vulkan is better. Lots more boilerplate, but you can actually get meaningful errors out of it reliably. And tell it stuff like "Use this graphics card, not that one."

1533253748
kristate
andrewrk: fell asleep

1533253752
kristate
just got up

1533253756
andrewrk
hi

1533253779
kristate
are you on twitch?

1533253902
andrewrk
yes:

1533253929
andrewrk
the stream is done, here is the recording:

1533254016
kristate
andrewrk: I'll have to watch later. I added a test case for _ in compile_errors.zig which worked for parser.cpp

1533254033
kristate
andrewrk: but it doesn't work for analyze.cpp

1533254045
kristate
even though I do get the err output

