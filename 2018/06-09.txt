1528506840
bb010g
andrewrk: I'm working on fixing up the zig-git PKGBUILD for Arch, and it's dropping off build/zig_cpp/lib{embedded_lld_{coff,elf,lib,mingw,wasm},zig_cpp}.a in weird locations. Are those required, and if they are, where should they ideally be installed?

1528506889
andrewrk
bb010g, no, they're not required. I put them as install targets because they're used by stage2

1528506898
andrewrk
but it's not recommended to ship stage 2 yet

1528506926
bb010g
Where will they need to go once stage 2 becomes a thing?

1528507022
andrewrk
"installed" to a prefix of $BUILD/stage1 in the build folder. then stage 2 uses them and "installs" to a prefix of $BUILD/stage2. then stage 3 uses stage 2 and that's the one you actually install to your system or to the package outpust

1528507064
andrewrk
the .a files will not end up in the final installation

1528507170
bb010g
Ok. So the PKGBUILD should be able to clean them up before install, then.

1528507191
andrewrk
yes

1528507365
tiehuis
I was going to add a patch to the PKGBUILD tomorrow to fix this when i was back home by the way

1528507411
tiehuis
Its a pretty straightforward cmake patch to disable the targets

1528507442
bb010g
I'm just running into this now since I'm setting up aurutils and using aur build's chroot stuff

1528510339
bb010g
`namcap` is reporting "Dependency included and not needed ('llvm')"

1528510355
bb010g
Is that just a build dep?

1528510466
andrewrk
it's just a build dep if building statically against it

1528510473
andrewrk
if it's a .so then it's a runtime dep

1528510774
bb010g
It's the package llvm that it's talking about, which has `BugpointPasses.so`, `LLVMHello.so`, some executables, and a bunch of `.a`s and headers

1528510872
andrewrk
you can use `ldd` on the produced zig executable to find out what the runtime dependencies are

1528511005
bb010g
Yeah, doesn't look like it

1528511091
bb010g
llvm-libs is a transitive dep of clang, which covers all the .so's from there

1528511707
bb010g
Last namcap issue is license. It's fully MIT, right?

1528511810
bb010g
Oh, NVM, that's just because it's a `-git` package. I'll pastebin the fixed files:

1528511852
bb010g
PKGBUILD:

1528511871
bb010g
leave_zig_cpp.patch:

1528512225
bb010g
That patch should probably be renamed to no_stage_2 or something, since it also does libembedded_*

1528516244
GitHub145
[zig] BraedonWooding closed pull request #1071: Added directory open/next for windows (master...WindowsDirOpen)

1528516982
GitHub28
[zig] BraedonWooding opened pull request #1084: Dir Open, Next, Close; DeleteDir for Windows (master...DirOpenWin)

1528518472
GitHub196
[zig] andrewrk pushed 1 new commit to master:

1528518472
GitHub196
zig/master 6edd811 Andrew Kelley: nullable pointers follow const-casting rules...

1528522410
xtreak
Hi I downloaded the linux binary distribution and unzipped it. I went to the directory where I had zig binary. I created a hello world program and tried to run it. I had `Unable to find zig lib directory. Reinstall Zig or use --zig-install-prefix.` as the error

1528522475
xtreak
Can I just use the binary or do I need to do some other step from there to run it. If it's the later it will be helpful if someone can point me there so that I can follow the installation steps.

1528522495
bb010g
What distribution are you using?

1528522540
xtreak
I am on a ubuntu machine and I downloaded binaries from

1528525499
andrewrk
xtreak, I added the runtime stdlib detection after 0.2.0

1528525505
andrewrk
I suggest using the master CI build

1528525674
xtreak
andrewrk: Works now. Thanks.

1528527426
very-mediocre_
got disconnected...

1528527439
very-mediocre_
seems my message didn't make it

1528527476
very-mediocre_
andrewrk: I encountered some weirdness with nullables again. If you recall the gist I sent earlier, it ended up with me saying I must've missed something

1528527499
very-mediocre_
I encountered something similar again, but then I toyed with the code and after several recompiles it behaved as expected

1528527516
very-mediocre_
Am I going crazy, or could there be some caching issue?

1528527555
very-mediocre_
The exact thing I just experienced was: `var match_next: ?u8 = arr[cur_pos];`

1528527574
very-mediocre_
and the compiler was complaining that `arr[cur_pos]` was u8 instead of ?u8, and wasn't letting me assign it

1528527579
very-mediocre_
now it's compiling fine...

1528527585
very-mediocre_
the same code.

1528527866
very-mediocre
Actually I'm starting to think it's something to do with my system at this point, please disregard for now

1528527893
very-mediocre
The files are on a network drive so it may be a sync issue.

1528530210
donpdonp
can someone explain 'error: unknown-length pointer to opaque'

1528536048
donpdonp
the hashmap.zig test has a line 'assert((??map.get(2)).value == 22);'

1528536074
donpdonp
when i try to use it 'warn("root count {}\n", root.get("url").value);' -> error: type '?*Entry' does not support field access (for .value)

1528536212
donpdonp
(using zig master branch)

1528536953
donpdonp
ok i stumbled my way into var url = (??root.get("url")).*; url.value.String

1528554317
andrewrk
donpdonp, you can create the unknown length pointer to opaque like this:  [*]c_void

1528554321
andrewrk
fix with *c_void

1528557492
bheads
Is there a way to log what a function after comptime resolution?  ie the resulting function in Case Study: printf in Zig

1528557602
bheads
would something like @compileLog(this) work (or in the future?)

1528557808
andrewrk
bheads, if you could see it, it would look something like this:

1528557811
andrewrk
(zig ir)

1528557846
andrewrk
but, maybe it would be a good idea to clean up that syntax and make it a little more user friendly and then yes, in fact, provide a way to introspect zig ir

1528558449
bheads
interesting, is that the --verbose-ir flag?

1528558456
andrewrk
yes

1528558461
andrewrk
be warned, it's a firehose

1528558514
bheads
lol  yeah ir can be tricky but we could make a tool that takes the ir and the source code and makes an output like godbolt

1528558630
andrewrk
there are 2 tricks to make the output reasonably small. here they are:

1528558733
bheads
nice, should but this info in a wiki page so it not lost

1528558737
bheads
should put**

1528558977
GitHub134
[zig] andrewrk pushed 1 new commit to master:

1528558977
GitHub134
zig/master 9046b5e Andrew Kelley: fix assertion failure when debug printing comptime values

1528559616
GitHub25
[zig] marleck55 opened pull request #1090: std/fmt: Use lowercase k for kilo in base 1000 (master...lowercase-k)

1528560338
GitHub39
[zig] andrewrk pushed 3 new commits to master:

1528560338
GitHub39
zig/master 670a0a3 Andrew Kelley: Merge branch 'clownpriest-arraylist_set'

1528560338
GitHub39
zig/master fc64467 Andrew Kelley: clean up std.ArrayList...

1528560338
GitHub39
zig/master e0092ee Arthur Elliott: add set function to arraylist...

1528560375
GitHub127
[zig] andrewrk closed pull request #1090: std/fmt: Use lowercase k for kilo in base 1000 (master...lowercase-k)

1528560375
GitHub167
zig/master 7a96355 marleck55: std/fmt: Use lowercase k for kilo in base 1000 (#1090)

1528560375
GitHub167
[zig] andrewrk pushed 1 new commit to master:

1528560405
GitHub78
[zig] andrewrk closed pull request #1075: add set function to arraylist (master...arraylist_set)

1528560512
clownpriest


1528560522
clownpriest
wrote a pure zig implementation of xxhash function

1528560543
clownpriest
still not optimized, but the basic functionality works

1528560565
andrewrk
oh neat! this looks useful

1528560609
clownpriest
yeah the function is supposed to be super fast, but i'd imagine the current implementation is still quite slow, will be a nice exercise in optimizations in zig

1528560634
andrewrk
I know tiehuis has a lot of experience doing that

1528560652
andrewrk
he may have some tips

1528560656
clownpriest
i will ping him to ask to take a look once it's in better shape

1528563068
MajorLag1
andrewrk, is there a new typeId for [*] that is undocumented, or some way to tell *T from [*]T in comptime code?

1528563337
andrewrk
MajorLag1, I made a couple modifications to type info regarding slices and pointers

1528563377
andrewrk
have a look at TypeInfo.Pointer:

1528563406
andrewrk
@typeInfo([]u8) is now Pointer with Size == .Slice

1528567127
clownpriest
is there a way to un-const a []const u8?

1528567135
clownpriest
i want to reslice and re-assign to it

1528567151
clownpriest
x = x[i..]

1528567895
andrewrk
sounds like you should use a different variable

1528567918
clownpriest
yeah that's what i ended up doing, just wondering if there's a way to get around that

1528567925
clownpriest
tho i guess that's not a good idea

1528568107
andrewrk
it makes more sense to use a different variable

1528568117
andrewrk
if you somehow did the other thing, your "program safety score" would go down

1528568133
MajorLag1
I haven't had to do it in a while, but I think `x = @intToPtr([*]T, @ptrToInt(x.ptr))[i..end]` might still work to remove const. Still a bad idea unless a library is being really stupid or something.

1528568174
clownpriest
right

1528568189
andrewrk
yes that will work. @intToPtr and @ptrToInt is very bad for this "program safety score"

1528568213
MajorLag1
yeah, but they'll get you out of a jam when you need them.

1528568302
andrewrk
agreed

1528568753
GitHub171
[zig] tgschultz opened pull request #1092: Add C string support to std.fmt w/ "{s}" (master...zig-std.fmt-c-string)

