1531186757
andrewrk
this 501 http code s3 redirect thing is maddening

1531186775
andrewrk
I've half a mind to push a plain text file with a link to the latest instead of an actual redirect

1531186801
andrewrk
*301 not 501

1531187102
MajorLag2
How much control do you get over it?

1531187110
andrewrk
none

1531187117
MajorLag2
well ok, that's a problem.

1531187129
andrewrk


1531187387
MajorLag2
don't the advanced conditional redirect rules let you make it a 302? That page makes it look like they do

1531187422
andrewrk
what xml would you put in? I'm messing with that right now

1531187439
andrewrk
I tried this:  <Redirect> <HttpRedirectCode>302</HttpRedirectCode></Redirect>

1531187447
andrewrk
"The XML you provided was not well-formed or did not validate against our published schema"

1531187642
andrewrk
tried matching 301 and got "The provided HTTP error code (301) is not valid. Valid codes are 4XX or 5XX."

1531187781
andrewrk
it worked! I had to remove the `/` at the beginning of the path

1531187799
MajorLag2
Cool. One more check off the todo list.

1531187993
andrewrk
I ran a cache invalidation so it should be correct now

1531188099
andrewrk
ugh now it's redirecting to the wrong place

1531188125
andrewrk
worse, it's redirecting from https to http

1531188161
andrewrk
what a disaster

1531188324
andrewrk
at least my m:n threading tests pass now on all OS's

1531188330
andrewrk
onwards!

1531188382
GitHub175
[zig] andrewrk pushed 1 new commit to master:

1531188382
GitHub175
zig/master 10cc49d Andrew Kelley: define c macros before importing llvm h files...

1531188422
GitHub134
[zig] andrewrk pushed 1 new commit to master:

1531188422
GitHub134
zig/master ccef60a Andrew Kelley: Merge pull request #1198 from ziglang/m-n-threading...

1531188422
GitHub25
[zig] andrewrk closed pull request #1198: M:N threading (master...m-n-threading)

1531189435
GitHub97
[zig] andrewrk pushed 1 new commit to master:

1531189435
GitHub97
zig/master b6eb404 Andrew Kelley: organize std.event into directories

1531191532
v1zix
Sorry for the basic question, but I was reading through the docs and was curious if there's a way to use a for loop to iterate over a range like for (i = 0; i < some_val; i++)? Or is that something intended for while loops to handle?

1531192066
MajorLag2
That's handled by while loops in zig. `for` specifically iterates over arrays and slices.

1531192270
v1zix
Cool, thanks

1531192985
andrewrk
v1zix, no need to apologize - basic questions are on topic here

1531192993
stratact
Does Zig have iterators as well?

1531193064
andrewrk
no

1531193124
stratact
Are there plans?

1531193190
andrewrk
there's an open issue

1531193423
andrewrk
there are no current plans to have iterators and no proposals in the issue tracker

1531193490
andrewrk
it's something I would consider when considering OOP, and something I would consider when considering generators (see #1194)

1531193509
stratact
andrewrk: I'm looking at the issue 809 and I have one thing to comment on. Iterators is not all about syntax bueaty, it's also about efficiency. What I do to make Rust programs more efficient, is that instead of passing arraylists or string buffers that which require allocation, is that I make custom iterator structs that would be passed around until iterated when needed.

1531193585
andrewrk
you can do that in zig too, no problem

1531193597
stratact
oh okay

1531193602
andrewrk
it just looks like while (it.next()) |item| { }

1531193614
stratact
ah right

1531193730
andrewrk
the only thing rust has on zig in terms of efficiency is noalias. see

1531194130
stratact
andrewrk: could you explain how noalias works in laymans terms, I'm curious what it is, but I'm having a hard time following in that issue

1531194135
wilsonk
Anybody else getting "zig/build/lib/zig/std/event/locked.zig:23:28: error: use of undeclared identifier 'Loop'". Just in the past few minutes when building the stage2 compiler?

1531194148
GitHub110
[zig] andrewrk pushed 2 new commits to master:

1531194148
GitHub110
zig/master b5cfbfd Andrew Kelley: fix regression from b6eb4048

1531194148
GitHub110
zig/master 1b82a9d Andrew Kelley: enable basic event loop test

1531194149
andrewrk
wilsonk, my bad. just pushed a fix

1531194165
wilsonk
great, thanks :)

1531194198
andrewrk
wilsonk, note that stage2 only does `zig fmt` right now, but I'm working on it

1531194233
wilsonk
yep, I saw that. Just checking it out a little

1531194235
andrewrk
I just got M:N threading in std.event.Loop working on all supported targets, so the stage2 compiler is going to be fully parallel

1531194248
andrewrk
with no mutexes

1531194328
stratact
oh okay, so noalias forces pointers to not point in the same memory location?

1531194343
andrewrk
stratact, that's correct

1531194361
andrewrk
aliasing is when the same data is accessed via multiple pointers

1531194406
stratact
oh I see now

1531194409
andrewrk
the more you can tell the compiler/optimizer about all the ways in which you are not aliasing, the better

1531194459
andrewrk
you will note that a lot of libc APIs have `restrict` on them, when there are more than 1 pointer parameter

1531194462
andrewrk
such as memcpy

1531194531
stratact
gotcha, so it makes it safer that way

1531194547
andrewrk
it's actually less safe

1531194582
andrewrk
because when you require that parameters do not alias, then it's undefined behavior if you pass pointers that alias each other

1531194618
andrewrk
and the lack of safety lets the optimizer make things faster

1531194664
stratact
understood. Although I assume the debug checking mechanisms will alert Zig programmers if there are possible uses of undefined behavior

1531194680
andrewrk
that's the idea

1531194692
andrewrk
it's not possible for every kind of undefined behavior

1531194699
andrewrk
but we can catch a lot of mistakes

1531194849
stratact
well I'm sure as Zig will evolve, so will the debug checker, for accounting more possible undefined behavior possibilities?

1531194912
andrewrk
indeed. but here's an example of something you can never prevent: you call an extern function, which looks at the return address, adds a random offset, and randomly modifies the memory there

1531194916
andrewrk
zig can never detect this

1531194939
andrewrk
hmm that's not the best example, because this would affect rust too

1531194950
stratact
gotcha

1531194983
andrewrk
there will always be some way to make dangling pointer references in a way zig cannot detect

1531195000
GitHub12
[zig] wilsonk opened pull request #1212: Emit error when compiling undefined function pointer. Fixes #880. (master...undefined_function_pointer)

1531195016
andrewrk
also, if you build in release-fast mode and run into an untested code path that has undefined behavior, there would be no safety there

1531195052
andrewrk
wilsonk, thanks for the PR! I'll have a look tomorrow morning

1531195065
wilsonk
sounds good

1531195139
stratact
Hmm, I guess I will need to know when code is undetectable unsafe than detectable unsafe

1531195238
stratact
if that's the right way to describe it?

1531195439
stratact
andrewrk: I mean, is there documentation about parts of the language that have uncertainty in checking?

1531195582
stratact
oh right, it's impossible to account for all possibilities, like you said...

1531215916
Richard10
while with Optionals:  The else branch is allowed on optional iteration. In this case, it will be executed on the first null value encountered.  For allows an else attached to it, the same as a while loop.

1531216102
Richard10
But in this code, when it  encounter null, the code in else is not executed.

1531216111
Richard10
test "for else" {     // For allows an else attached to it, the same as a while loop.     var items = []?i32 { 3, 4, null, 5 };      // For loops can also be used as expressions.     var sum: i32 = 0;     const result = for (items) |value| {         if (value == null) {             break 9;         } else {             sum += value.?;         }     } else blk: {         assert(sum == 7);         break :blk sum;     }; }

1531232041
GitHub81
[zig] andrewrk pushed 1 new commit to master:

1531232041
GitHub81
zig/master 28f9230 Andrew Kelley: fix crash when calling comptime-known undefined function ptr...

1531232046
GitHub166
[zig] andrewrk closed pull request #1212: Emit error when compiling undefined function pointer. Fixes #880. (master...undefined_function_pointer)

1531233583
GitHub134
[zig] andrewrk pushed 1 new commit to master:

1531233584
GitHub134
zig/master 696ef0b Andrew Kelley: langref: docs for union safety

1531237697
GitHub133
[zig] andrewrk pushed 1 new commit to master:

1531237697
GitHub133
zig/master 0ce6934 Andrew Kelley: allow var args calls to async functions

1531242200
GitHub126
[zig] wilsonk opened pull request #1213: Possible fix for #778. Two cases. (master...generic_function_argument)

1531244656
vegecode
Could someone tell me how they approach debugging the compiler? I can't get breakpoints or anything to be hit with lldb so I've resorted to printf style. I had a case that would always get to zig_unreachable but my breakpoint in zig_panic (which is wrapped by zig_unreachable) was never hit. The process just terminated.

1531244756
vegecode
If you use gdb or lldb, what arguments do you pass?

1531244775
andrewrk
vegecode, I use gdb on linux, lldb on macos, and msvc on windows

1531244786
andrewrk
breakpoints work in all of them

1531244814
andrewrk
gdb path/to/zig

1531244884
vegecode
ok thanks.

1531244996
douglas
Where would I find zig libraries?  I am looking for regex in particular.

1531245021
andrewrk
douglas, there is not one in std yet but I know that tiehuis has one in progress

1531245039
andrewrk


1531245072
andrewrk
I'll have a better answer for you about zig libraries once we have the package manager all sorted out

1531245103
douglas
Thanks.  I guess I could use a C lib?

1531245149
andrewrk
yep

1531245294
vegecode
I don't remember the name of the file but I think it was compiler_rt.o or something like that which is generated for each target to be used in place of libc calls like memset and such? I have to use the --emit-asm option and so there is obviously then no object file created, but there is also no asm file like that either. Is it possible to generate that as an asm file?

1531245350
vegecode
Not a huge deal, just wondering how much I can go straight zig at this point.

1531245375
andrewrk
vegecode, yes it is possible

1531245391
andrewrk
there are 2: builtin.o and compiler_rt.o

1531245418
andrewrk
builtin has memset/memcpy and some others, and compiler_rt has udivmod, fixunsdfdi, etc

1531245473
vegecode
I'm guessing I can just compile builtin.zig and compiler_rt.zig with --emit-asm option then

1531245755
vegecode
There is no compiler_rt.zig in the zig source and there's no object file in the zig-cache for my project with assembly. Where is compiler_rt.o compiled from?

1531245873
andrewrk
vegecode, bin/zig build-obj ../std/special/compiler_rt/index.zig --emit asm

1531245880
andrewrk
(you'll need your --target arguments)

1531245909
andrewrk
bin/zig build-obj ../std/special/builtin.zig --emit asm

1531245937
vegecode
Thanks. I really appreciate it.

1531246044
andrewrk
vegecode, I noticed an assertion trip when I used --output for the compiler_rt case, but I think you can get it to be compiler_rt.s if you use --name compiler_rt

1531246105
vegecode
Ok. I will mess with it tonight. Thanks.

1531246258
douglas
Is there a zig forum yet?

1531246330
andrewrk
we have a subreddit

1531246509
douglas
Nice

1531249939
Bas_
Is it actually fine to modify the .len on a slice?

1531249956
Bas_
I mean... it works... but I'm not sure if it's actually supposed to be used like that.

1531250006
andrewrk
Bas_, probably it will be a compile error to do that before 1.0.0

1531250127
Bas_
Alright, I'll change my code then.

1531250308
GitHub48
[zig] andrewrk pushed 1 new commit to master:

1531250308
GitHub48
zig/master 8fba0a6 Andrew Kelley: introduce std.event.Group for making parallel async calls

1531253637
douglas
Just tried cross compiling Linux <=> Windows... It worked great  :-)

1531254231
andrewrk
douglas, happy to hear that :)

1531254261
andrewrk
C libraries are still problematic in that regard, but I have a plan for that

1531254297
Bas_
Do we have lambdas?

1531254645
andrewrk
see

1531254661
andrewrk
see also

1531254785
Bas_
Ah yeah I actually saw the second one already.

1531254797
Bas_
And is there an easy way to get the last element from a slice?

1531254812
Bas_
or do I have to do slice[slice.len - 1]?

1531254964
andrewrk
that's the best way to do it

1531254984
Bas_
ok

1531255026
andrewrk
Bas_, there's a workaround to put a function inside a function available

1531255040
andrewrk
you put it in a struct

1531255053
andrewrk
there are a couple of known bugs with it, such as if there are any defers in scope it will crash the compiler

1531255073
Bas_
I actually have a predicate which I want to invert to pass to another function.

1531255130
Bas_
I mean, can it capture parameters from inside the function?

1531255169
andrewrk
only comptime-known ones

1531255177
andrewrk
so it does not have the ability to be a closure

1531255249
Bas_
Ok, that'll do for now I guess.

1531257978
unique_id
Hi. I thought that I'd announce that I'm going to be using Zig full time. Being self employed (or not working), I'm in a great position to do this. I'm trying to specialize in a category of games that hit a really nice ratio of interest-in-game/effort and it fits to be using a language that hits a really nice ratio of features/complexity. I don't mind bugs or even radical language redesigns.

1531258026
andrewrk
unique_id, wow! that's really exciting

1531258053
andrewrk
let me know if you run into any blockers and I'll try to keep you moving along :)

1531258255
wilsonk
sweet

1531258379
unique_id
will do, thanks

