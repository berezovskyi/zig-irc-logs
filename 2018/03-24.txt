1521852019
MajorLag
andrewrk, with just a small modification to std.format, this is possible:

1521852103
MajorLag
It could be improved if I could pass v.format, so then a type could have multiple formaters, and b) could be named whatever the programmer wants. However, the compiler wants the variable to be comptime if I try that.

1521855532
andrewrk
MajorLag, I like this idea of std.fmt.format looking for a special function name and calling it if it exists to provide a custom formatter

1521855574
andrewrk
is that what the "catching" of a compile error would be for? checking if a method exists?

1521855665
MajorLag
pretty much yeah. Then you wouldn't need to tell fmt that it should call it, it could just do it. I'm not sure if that's better though.

1521855791
andrewrk
I'll extend the reflection support enough to make this work

1521855802
andrewrk
without the catching a compile error thing

1521855830
MajorLag
By adding a way to introspect namespaces/empty structs? That'd be slick.

1521855868
andrewrk
yes

1521855883
Tobba
MajorLag: I mean, that's the whole fun part of having proper meta-typing

1521855940
Tobba
andrewrk: (unrelated) out of curiosity, do you have any plans wrt quasi-quotation in zig?

1521856071
andrewrk
what's that? messing with the AST?

1521856130
Tobba
being able to "quote" expressions/statements or raw lists of tokens; such that you can read them at compile time

1521856147
andrewrk
and then eval them right?

1521856183
Tobba
that, or with a plain token list, you could conceivably parse them to implement something like the struct keyword as a comptime function

1521856219
andrewrk
I'd have to see a really convincing use case for that. It's one of those things where it can be easily abused and make a codebase difficult to read

1521856283
Tobba
(afaik "quasi-quotation" usually refers to the simple token list variant, but I'm halfway sure it can refer to either)

1521856288
Tobba
oh that's very true

1521856369
Tobba
there's at least a neat aspect of being able to manipulate both expressions and token lists at compile time; that you could conceivably expose the whole parser as a plain comptime function

1521856387
Tobba
but that's not exactly a practical use case

1521856408
andrewrk
the tokenizer and parser is already exposed in the standard library; one could call it at compile time

1521856493
Tobba
oo, neat (is there a list of everything included in the standard lib somewhere?)

1521856512
MajorLag
Source for the standard lib is the only thing I know of.

1521856543
andrewrk
that's right. generated documentation is pending more progress on the self hosted compiler

1521856571
Tobba
figured

1521856589
Tobba
DSLs aren't always bad for readability though, if used responsibly

1521856605
Tobba
I'm curious if there's a nice inbetween somewhere

1521856829
Tobba
i.e for dealing with shader uniforms with OpenGL or setting up networking tables for a game

1521857327
Tobba
also, quasi-quotation of token lists gets a whole lot less messy if you match up brackets during lexing and have the tokens behave as a tree (I might've mentioned this before); doesn't really affect the readability concern though

1521857408
Tobba
in theory that makes it a lot easier to generate good errors when hitting mismatched brackets too

1521858850
hobomatic
So what are the semantics of the 'var' type? from what I have been able to intuit, its like an expression that is spliced in at compile time

1521858988
andrewrk
hobomatic, there is no var type - that's a syntactic construct that is only valid as a parameter placeholder or a return type placeholder, to make the function infer the type

1521859012
andrewrk
maybe "auto" is a better word

1521859019
hobomatic
ah, ok

1521859050
MajorLag
or "any"

1521859581
hobomatic
another naive question, what is the purpose of std.empty_import?

1521859750
andrewrk
hobomatic, it's used by std/c/index.zig

1521860266
hobomatic
ah OK makes sense.

1521892646
sand-witch
andrewrk: Hey, since you created libsoundio.. I've been trying out LabSound (3d audio, forked from chrome/webkit web audio API). I fiddled with its cmake to get it compiling on Linux, only now I'm getting errors from RtAudio via stdio.

1521892682
sand-witch
Is this what you were referring to when you listed "Errors are communicated via return codes, not logging to stdio." as one of libsoundio's features?

1521892705
sand-witch
Or was it yet another library that you were referring to?

1521901014
gazatu
yo

1521901032
gazatu
i just wanted to ask if there is a workaround for following error: "LLVM ERROR: cannot move instruction since its users are not dominated by CoroBegin"

1521901162
gazatu
i also get this kind of error: "Call parameter type does not match function signature! %Allocator* %1  %StackTrace*  %8 = call fastcc i8* @__zig_coro_alloc_helper(void ({ i16, %"[]u8" }*, %StackTrace*, %Allocator*, i64, i29)* %7, %Allocator* %1, %Allocator* %1, i16* %2, i64 120), !dbg !2403 LLVM ERROR: Broken function found, compilation aborted! LLVM ERROR: IO failure on output stream: invalid argument"

1521912964
andrewrk
sand-witch, yes. alsa-lib is also guilty

1521912980
andrewrk
gazatu, I'm working on that right now

1521913015
andrewrk
I believe that is

1521917416
hobomatic
there is no multiline comment syntax, right?

1521917516
hobomatic
also, i notice that the parser/lexer doesn't like tabs as whitespace

1521917611
andrewrk
hobomatic, correct

1521917618
andrewrk
zig has line-independent tokenization

1521917659
andrewrk
hard tabs as whitespace:

1521919398
hobomatic
I see, yeah i can definitely understand wanting to keeping complexity out of the tokenizer and letting/requiring editors to do editor things.

1521920153
andrewrk
I might relax the tab restriction once we have zig fmt (it would allow tabs but change them into spaces)

1521920528
MajorLag
andrewrk, is there a way to import a file from a folder in a package that isn't the index? Specifically, I need a syscall that isn't in os.linux, and the number is defined in linux.arch, which isn't pub (why not?). As far as I can tell, I can't even switch on builtin.arch and import myself because there's no way to get at the arch.zig files without either copying them locally or specifying the full path.

1521920747
andrewrk
MajorLag, this is the same question as "can I access non-public stuff even though it's supposed to be private?" - which is to say - it's often the case that the API designer failed to make enough things public

1521920758
andrewrk
can I just fix the API for you? :)

1521920765
MajorLag
yeah, I mean, I guess that's the real problem here.

1521920794
MajorLag
I sometimes rathole on workarounds.

1521920819
andrewrk
I think std.os.linux should have the syscall1, syscall2, etc functions exposed. would that solve the problem?

1521920840
andrewrk
and the syscall numbers

1521920860
MajorLag
doesn't look like there's anything in <arch>.zig that shouldn't be exposed.

1521920889
MajorLag
so just making linux.arch pub would be great

1521920893
andrewrk
on it

1521920917
andrewrk
I'm starting to think that maybe the default should be public, and you have to use a keyword to make things private

1521920957
MajorLag
I do find myself writing "pub" automatically a lot.

1521921246
andrewrk
running tests and then pushing

1521921278
andrewrk
feel free to make a PR adding some syscalls to the std lib btw

1521921313
MajorLag
I'll probably do that for any I run into. And associated constants.

1521921332
andrewrk
musl libc source code is really useful for this

1521921398
MajorLag
I'll check that out. I've actually been looking at a combination of Go's syscall package and whatever google turns up which is unfortunately often mixed in with glibc as though the syscall interface isn't independent.

1521921427
andrewrk
I think you'll be pleasantly surpised with musl how clean and simple it is

1521921443
andrewrk
tests passed

1521921448
MajorLag
I remember a similar issue with fuse. Lots of documentation on using the fus library, pretty much none on fuse itself.

1521921489
GitHub197
[zig] andrewrk pushed 1 new commit to master:

1521921489
GitHub197
zig/master 2cff319 Andrew Kelley: std.os.linux exposes syscall functions and syscall numbers

1521921512
MajorLag
thanks.

1521931753
sand-witch
I agree with public by default

1521932045
andrewrk
that's kinda why I've been dragging my feet on enforcing "pub" for fields

1521933624
sand-witch
One thing I don't find very intuitive is the import/namespace system. I don't think it's positive that people shave off the root part of the namespace and leave the less significant child namespace, or even rename them to their liking during import. I am pretty fond of the c++ system where by default you use whatever namespacing the library author designed, and they tend to be very flat. But that's really all I've known for a

1521933625
sand-witch
long time now, so I might be wrong.

1521933720
sand-witch
Maybe C++ doesn't require as many namespaces due to function overloading, but then on the other hand you have C which has no namespaces so I don't know.

1521933904
andrewrk
sand-witch, one if the big reasons for status quo is that you know where every identifier comes from

1521933921
andrewrk
often in c or c++ you have trouble figuring out where something is defined

1521934011
sand-witch
yes that's true. And looking at the zig std library right now I see that the functions are named differently to take advantage of this system. So they are shorter like mem.eql, mem.set, etc

1521934035
GitHub150
[zig] andrewrk pushed 3 new commits to master:

1521934035
GitHub150
zig/master 897e783 Andrew Kelley: add promise->T syntax parsing...

1521934035
GitHub150
zig/master 18af2f9 Andrew Kelley: fix async fns with inferred error sets...

1521934035
GitHub150
zig/master b1c07c0 Andrew Kelley: move error ret tracing codegen to zig ir...

1521934145
sand-witch
some* :) (where it makes sense)

1521934779
andrewrk
sand-witch, if you feel strongly about the importing system, the best thing you can do is create a proposal as a github issue, and suggest an alternative to status quo that is well-reasoned and convincing, with code examples

1521934821
andrewrk
that said I'm always open to feedback even if you don't have an alternative suggestion

1521934887
andrewrk
another thing to consider is that zig does not allow identifier shadowing at all. so ability to rename things when importing is important

1521934947
Sahnvour
hi, I discovered Zig a few days ago and since I don't have specific project ideas to play with it, was wondering if there are accessible tasks to learn and contribute to it

1521935002
andrewrk
hi Sahnvour

1521935022
andrewrk
there is a "help wanted" label on github which may be interesting to you

1521935104
andrewrk
perhaps also the "userland" label

1521935143
andrewrk
one example would be a deflate / inflate implementation in the standard library

1521935230
Sahnvour
thanks, I'll have a look

1521935587
Sahnvour
btw, my main machine is on windows, do you think

1521935664
andrewrk
I'm not working on it at the moment. That actually might be a nice issue for you to work on if you're intested in contributing

1521935738
andrewrk
here's a starting point:

1521935775
Sahnvour
I feel like it would be useful, but have no idea how these things work under the hood at the moment so I may not be anywhere near efficient

