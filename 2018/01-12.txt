1515722573
GitHub102
[zig] andrewrk pushed 1 new commit to master:

1515722574
GitHub102
zig/master 3268276 Andrew Kelley: the same string literal codegens to the same constant...

1515741326
GitHub143
[zig] andrewrk opened pull request #684:

1515794983
hio
Is it explained somewhere why some unbehaved behavior cannot be prevented?

1515795000
hio
undefined*

1515795341
andrewrk
hio, this explains some concepts:

1515795471
andrewrk
I should probably add a section to that about the kinds of undefined behavior that cannot be prevented, such as *@intToPtr(&usize, randomInteger(usize)) = randomInteger(usize);

1515795505
andrewrk
in zig you could convert a random number to a pointer then write a random value to it. this could have undefined behavior if the address overlapped with memory that was in use

1515795682
hio
I assume this is left in the language to have it be compatible with C?

1515795913
andrewrk
not quite

1515795947
andrewrk
it's in the language because it's a feature used to build operating systems and embedded software

1515795987
andrewrk
more generally, zig is a language for generating object files, libraries, and executables

1515796020
andrewrk
and one of the (useful) features of machine code is that you can cast an integer to a pointer and read/write

1515796026
andrewrk
and so zig supports it

1515796040
andrewrk
zig also supports inline assembly

1515797225
DuClare
Hm.  How do you do a C-like conversion of negative signed integer to some unsigned type without UB?

1515797950
andrewrk
DuClare, @bitCast(DestinationType, value)

1515797954
andrewrk
I should add that to the docs

1515797992
andrewrk
there's also @truncate(DestinationType, value)

1515798022
DuClare
Nice

