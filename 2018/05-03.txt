1525305610
achambe
hmm, fiddle with core counts?

1525305864
achambe
andrewrk: not sure if possible, but perhaps there is a recording debugger that works with windows. I think firefox was doing something like using 'rr' to record every test run, and on failure dumping the trace.

1525305891
achambe
though windows...

1525305957
andrewrk
I want to rule out the possibilty that appveyor is hanging because we're requesting too much memory or CPU power or something like that

1525306278
andrewrk
oh wow look at this

1525306282
andrewrk
Be careful when using Sleep in the following scenarios:

1525306286
andrewrk
Threads that are under concurrency control. For example, an I/O completion port or thread pool limits the number of associated threads that can run. If the maximum number of threads is already running, no additional associated thread can run until a running thread finishes. If a thread uses Sleep with an interval of zero to wait for one of the additional associated threads to accomplish some work, the process might deadlock.

1525306323
andrewrk
hmm, that should be fine actually

1525306816
GitHub71
[zig] andrewrk pushed 1 new commit to master:

1525306816
GitHub71
zig/master c186cd1 Andrew Kelley: std.atomic - use AtomicOrder.SeqCst for everything...

1525309254
andrewrk
achambe, wow - I just watched appveyor be stuck on std.atomic.queue for 20 minutes and then finish it. And then the next time it got to that same test, it finished it right away

1525309305
andrewrk
I think this could be a matter of asking appveyor for too many CPU cycles

1525310205
andrewrk
my best guess right now is that appveyor runs in a guest VM with 1 core and spawning 6 threads that are thrashing each other will eventually work, but is very slow

1525310267
andrewrk
and we're running that slow test 12 times (an extra 6 times on accident because compiler-rt is inadvertently running the std tests)

1525311305
andrewrk
ok I'm convinced now. it really is just 1 core thrashing and being slow (which is intentional for the test) and it's just too slow for appveyor

1525311433
GitHub6
[zig] andrewrk pushed 1 new commit to master:

1525311433
GitHub6
zig/master 02c1b9d Andrew Kelley: fix compiler-rt tests accidentally running std tests...

1525311803
GitHub182
[zig] andrewrk closed pull request #972: Fixed inlining determination test (master...nested_func_comptime)

1525311805
GitHub33
[zig] andrewrk pushed 1 new commit to master:

1525311806
GitHub33
zig/master 131c133 Alexandros Naskos: Fixed inlining determination test (#972)...

1525312684
andrewrk
alright I think we're done with those appveyor failures

1525314016
achambe
neat

1525314228
achambe
Hopefully sometime I can automate more operating system installs - I would love a CI platform that just provided you with ssh to all the different operating systems and that was it. Each new ssh connection it just trashes the old vm or something

1525314266
achambe
need windows + linux + freebsd + mac + openbsd

1525314356
achambe
* arm

1525314756
andrewrk
that would be great

1525314772
andrewrk
we could start passing tests one at a time

1525315352
GitHub21
[zig] andrewrk opened pull request #979: add ReleaseSmall mode in zig tests (master...test-release-small)

1525317077
andrewrk
alexnask, I'll get to your @typeInfo PR after dinner

1525356076
GitHub145
[zig] BraedonWooding opened pull request #981: ArrayList iterator, unifying API of HashMap and its derivatives (master...ArrayIteratorUnifiedSyntax)

1525362456
GitHub160
[zig] andrewrk closed pull request #979: add ReleaseSmall mode in zig tests (master...test-release-small)

1525362461
GitHub82
[zig] andrewrk pushed 1 new commit to master:

1525362462
GitHub82
zig/master 7337029 Andrew Kelley: Merge pull request #979 from zig-lang/test-release-small...

1525366202
alexnask
andrewrk, were optional argument names in the callsite ever considered for zig?

1525366218
alexnask
I think it can add a lot for code readability in certain places

1525370973
andrewrk
alexnask,

1525370993
andrewrk
what do you mean "in the callsite"?

1525371072
alexnask
I mean something like: 'mem.copy(u8, src: some_slice, dest: some_slice);'

1525371090
andrewrk
ohh

1525371093
alexnask
Assuming the parameter names for mem.copy are src and dest

1525371110
andrewrk
I'm not sure there's a formal issue open for this. I'm open to the idea

1525371119
alexnask
Default values was another one I was going to ask about but I figured we woudn't have them in zig

1525371156
andrewrk
there's a pretty reasonable case to be made about named args at callsite preventing bugs

1525371175
alexnask
right, it's useful when passing arguments with the same types about

1525371196
alexnask
+ the function name + argument names used can give you an even better idea of what the func is doing

1525371257
andrewrk
I wonder how reasonable it would be to require named args if there were more than 1 of the same type in the parameter list

1525371274
alexnask
I think that would be kind of extreme :P

1525371301
andrewrk
yeah probably

1525371330
alexnask
I'll open an issue in a bit

1525371369
alexnask
perhaps it will be a good feature to get acquainted with the parsing stage of the compiler too

1525371382
alexnask
(if it's accepted that is)

