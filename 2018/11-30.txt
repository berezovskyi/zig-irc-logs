1543541716
daurnimator
andrewrk: catching up on your stream now. will note things as I watch.

1543541742
daurnimator
- 17 digits of decimal fraction is enough for floating point.

1543541756
daurnimator
(though 14 is often used in languages for "beauty")

1543541767
tbodt
andrewrk: you should put your stream in the "science and technology" category where all the other programming streams are now

1543542084
daurnimator
- log_a(x) == log_b(x)/log_b(a)

1543542806
daurnimator
andrewrk: you might find

1543545131
andrewrk
daurnimator, yeah I foolishly though I could wing it on that stream. ended up giving up at the end. I need to learn me some CS fundamentals before trying again

1543545160
andrewrk
tbodt, ok

1543545235
daurnimator
andrewrk: if you do attempt number parsing again I can probably suggest that you pretty much port the code in that link

1543547940
MajorLag
So does it seem off to anyone else that `std.math.maxFloat(f32) != std.math.f32_max`? Perhaps these constants should be renamed to something like `std.math.f32_finite_max`.

1543548101
andrewrk
MajorLag, I reverted the maxFloat PR

1543548116
andrewrk
I believe wink_ opened it for discussion again

1543548157
MajorLag
Yeah, now with `maxFloat(f32) == f32_inf`. That makes sense enough, but causes confusion I think because the finite constants are also called simply "max"

1543548308
MajorLag
I could have brought this up in the new PR, but it isn't an objection to that implementation, just sort of an observation about a related part of the std lib.

1543548431
andrewrk
I think those are ported from libc

1543548469
andrewrk


1543548470
MajorLag
probably, but does that mean we shouldn't rename them to more accurately represent what they are?

1543548508
andrewrk
yes but I would argue a prerequisite to that is a full understanding of their purpose

1543548518
MajorLag
ok, fair enough

1543548522
andrewrk
which I admit I do not possess

1543548672
andrewrk
interesting, true_min has exponent 0, mantissa 1, whereas min has exponent 1, mantissa 0

1543548709
andrewrk


1543548726
MajorLag
true_min vs min appears to involve "subnormal" float representations, which I also admit to not really understanding

1543548773
daurnimator
andrewrk: yeah subnormal

1543548801
daurnimator
andrewrk: so something you may have missed understanding (didn't see it on the stream) is that the mantissa has an implicit leading 1 bit.

1543548813
andrewrk
oh yeah I forgot about that

1543548905
daurnimator
IIRC a subnormal is where there is

1543548952
daurnimator
which is signified by an exponent of 0.

1543549003
daurnimator
so your "true_min" is the smallest subnormal number: the exponent is 0, and just the last bit of the mantissa is set.

1543549057
daurnimator
vs the smallest normal number, which is where the exponent is 1 (i.e. -126) and the mantissa is 0. which is 1.0 * 2 ^ (-126)

1543549234
MajorLag
ok, so they appear to exist to prevent underflow from addition and subtraction of normal float values, by linearly filling the gap between negative and positive normal floats.

1543549253
daurnimator
though calling it "true_min" is weird: it's the smallest positive (non-zero) number.

1543549284
MajorLag
a mor accurate name might be "subnormal_min". Apparently not all hardware supports subnormals.

1543549316
MajorLag
so the distinction is potentially relevant for performance reasons.

1543549319
daurnimator
MajorLag: to me "min" has no limitation on being positive.

1543549347
daurnimator
the more correct name may be "epsilon".

1543549354
MajorLag
was it positive? I guess I didn't look very closely.

1543549383
MajorLag
huh, yep, so still not an accurate name really.

1543549419
daurnimator
that's what it is usually named. can't find much on google suprisingly. however here is at least one reference:

1543549512
MajorLag
but epsilon is defined differently still.

1543549525
andrewrk
suffice to say... it's not super clear what maxFloat would do, and it's especially not clear what maxValue would do if it supported both int and float.

1543549533
andrewrk
I'm leaning towards, this doesn't belong in std

1543549560
daurnimator
andrewrk: I'm fine with maxFloat returning infinity

1543549582
daurnimator
it's a useful condition for e.g. finding the minimum

1543549583
andrewrk
then use std.math.inf

1543549585
MajorLag
I mean, if there's one thing that makes sense, it is that the maximum possible float value is infinity.

1543549624
MajorLag
but there seems to be a lot of wiggle room for what kind of max people might actually want

1543549643
daurnimator
fn findMin(somecollection) T { var smallest = maxValue(T); for (somecollection) |x| if (x < smallest) { smallest = x } } return smallest; }

1543549659
daurnimator
^ I can imagine wanting to write something like that

1543549666
daurnimator
which would work on both ints and floats and whatever else

1543549771
andrewrk
that's something to think about

1543551973
benjikun
true that could be nice

1543552403
benjikun


1543552706
benjikun
that's what nim's parseFloat proc does ^

1543552936
benjikun
This guy has a lot of blog posts on parsing floats this way. Here's another:

1543552942
benjikun
Seems beneficial

1543553031
daurnimator
glibc's strtod has lots of issues, don't use it for a template...

1543553072
benjikun
The core method is reused in java and nim

1543553083
benjikun
The post only details how the algorithm itself works

1543553156
daurnimator
benjikun: see from my link earlier:

1543553169
benjikun
I did look over it

1543553276
daurnimator
also, for going back the other direction, see

1543553473
andrewrk
daurnimator, for the other direction, see

1543553544
daurnimator
andrewrk: ah cool. I haven't heard of Ryu before. from their paper: > On average, Ryu is roughly three times faster than Grisu3 for 32-bit and 64-bit floating point numbers.

1543553606
andrewrk
tiehuis does excellent work

1543553691
benjikun
The qi double parsing in boost seems pretty fast compared to others

1543553857
benjikun
>One note of interest is that QI fails to parse some very long fixed-notation inputs; X3 parses these correctly, but runs significantly slower than with short scientific-notation inputs.

1543554140
benjikun
neat workaround that ryu uses

1543554804
benjikun


1543555030
benjikun
This seems pretty versatile actually

1543567074
Triplefox[m]
Re: subnormal floats. Not having them is a pretty important topic for real-time DSP code, it often causes audio plugins to suddenly freeze due to processing overhead when the signal gets quiet. With some CPU instruction sets they are avoidable now but folks have come up with "anti-denormal" tricks in the past:

1543567998
forgot-password
Good morning :)

1543568676
Hejsil
Started working on a scanf like function in Zig

1543580105
forgot-password
andrewrk: Hi, I was wondering which OS you built your zig-vulkan-triangle project on.

1543583078
sjums
andrew threw me in the direction of ArrayLists yesterday for dynamically sized arrays

1543583092
sjums
So now I'll have to read up on writing a memory allocator

1543583101
sjums
which is not yet in the docs

1543583113
sjums
never written such a thing before :3

1543583128
sjums
advent of code gonna be hell of a challenge this year :D

1543583155
MajorLag
Why? There are already allocators you can use in std. Not that I'm discouraging writing your own allocator, which is a good exercise.

1543583198
Hejsil
Use gc an be done with it

1543583199
Hejsil
:)

1543583203
sjums
There's a std.debug.something_allocator, right?

1543583226
Hejsil
std.debug.global_allocator (use only for prototyping(tm))

1543583247
MajorLag
more practical allocators: FixedBufferAllocator or DirectAllocator.

1543583257
MajorLag
which are in std.heap

1543583278
sjums
noted and noted.

1543583281
Hejsil
I tend to reach for Direct- and ArenaAllocator mostly

1543583296
Hejsil
and FixedBufferAllocator, for tests

1543583375
MajorLag
FixedBufferAllocator wraps a slice of u8 and is pretty naive. Mostly useful for tests or small temporary allocations. DirectAllocator calls the OS allocator.

1543583398
sjums
You are talking to someone who have never managed his own memory before. Throwing more types of allocators at me are currently like talking to a door

1543583422
sjums
:b

1543583436
MajorLag
Ok, you want DirectAllocator then, it's basically malloc

1543583447
MajorLag
which is the C std lib allocator

1543583468
MajorLag
(though the actual C std lib allocator is a completely difference allocator in zig's std lib)

1543583497
Hejsil
And malloc does a lot of magic that DirectAllocator doesn't

1543583568
MajorLag
The Windows implementation is actually fairly close. The POSIX one allocates an entire page for small allocations though.

1543583768
Hejsil
He wanted a simple answer. We didn't deliver :)

1543583854
MajorLag
Well, if you've never had to allocate your own memory before, then I can't think of a simpler option than just using DirectAllocator. You can learn the trade-offs and use cases of other allocators later.

1543583923
Hejsil
Indeed

1543583966
MajorLag
One or more of us should maybe write an intro to manual memory management we can link people to.

1543584141
sjums
I did get a satisfactory answer :)

1543584156
sjums
I'm not expecting everything new to be simple and easy

1543584211
sjums
I'm gonna read some tests (they are good examples) on using the allocators, and up my daily coffee intake by a factor of two!

1543591098
andrewrk
MajorLag, that's a great idea

1543593597
andrewrk
here's a private leaderboard for zig users for advent of code 2018: 384812-f73c8aea

1543593609
andrewrk
rules: * Use Zig! * NO LIBC

1543594989
presiden
andrewrk: nice

1543595043
presiden
clicky link,

1543612013
MajorLag
is something up with CI or did my push just not run it for some reason?

1543612289
andrewrk


1543612300
andrewrk
I don't see a build queued

1543612467
MajorLag
something to do with the rebase=>force push?

1543612524
MajorLag
or perhaps I simply wasn't patient enough

1543612693
andrewrk
I'm not sure. I think that's supposed to trigger a build

1543613134
robbym
Hello, I just found this language and was wondering it has been tested on any embedded platforms?

1543613675
andrewrk
robbym, here are some:

1543613854
robbym
Nice! Thanks for the links.

1543616409
andrewrk
robbym, also I just recorded this, 10 minutes ago:

1543616512
suirad_
andrewrk: I was just about to post that here, nice work, congrats

1543616642
suirad_
you should post it on the sub and crosspost it to related subs

1543616680
suirad_
also, any chance of a swag shop for my irl shilling for zig?

1543616774
andrewrk
suirad_, some day

1543619200
bbrittain
andrewrk: yes, travisg knows me :)

1543619227
andrewrk
bbrittain, oh, lol, you're in #osdev

1543619315
andrewrk
I'm going to try to blow the #osdev people's minds when I hook up zig's debug info parsing / panic handler up to bare metal

1543619329
andrewrk
so that you get stack traces in kernel panics

1543619338
bbrittain
they'll like that

