1538219469
unique_id
I just rewrote a simple file merging application in Zig (from C++).  Less than 100 lines. Comparing the difference is a lot of fun. I'm much happier with the Zig code.

1538219669
unique_id
There's a lot of possible i/o errors and the Zig code just looks more robust to me and I know what it's doing.

1538220409
c15ade4
:)

1538220667
redj
unique_id: you can't show this C++ vs Zig for all to see?

1538221203
unique_id
I'll do it next time, sorry. I find that the explicit try statements make things much clearer. I also found a great use for orelse.

1538222450
unique_id
I'm building a zig library and then I'm going to depend on it from another zig project. I've never done this before, I don't know what to do.

1538222497
unique_id
the zig library has an index.zig file. From the main project I'd like to: @import("Library"), in the same way that you do @import("std")

1538225090
unique_id
I figured it out. Packages. exe.addPackagePath

1538251315
srgpqt
Hi all. Trying to use a c library from zig and can't seem to figure out how to deal with pointers to opaque types. The lib has a function that returns a pointer to an opaque type, and another function that accepts that pointer. When i try pass the pointer to that function, the compiler tells me "error: unknown-length pointer to opaque"

1538251355
andrewrk
hi srgpqt. here's an example of what's not allowed: [*]c_void

1538251359
andrewrk
what is allowed: *c_void

1538251406
andrewrk
you may also be interested in

1538251434
srgpqt
yeah i already read through that issue, thanks

1538251455
andrewrk
I'm happy to help further if I can see some code snippets and error messages

1538251518
andrewrk
until #1059 is resolved, it might be worth your time to translate-c offline and save the results in a .zig file that you manually edit to fix up the pointer types

1538251844
srgpqt
still not clear exactly what syntax i need to make it work, perhaps i would have to manually fix up with translate-c? It's something like this:

1538251847
srgpqt
struct Base { int value; }

1538251850
srgpqt
typedef struct Foo Foo; // opaque type extending Base

1538251852
srgpqt
Foo *newFoo(void);

1538251855
srgpqt
void setBaseValue(Base *f, int value);

1538251869
srgpqt
so i want to call newFoo from zig, and pass that value to setBaseValue

1538252167
andrewrk
srgpqt, you'll need to @ptrCast(*Base, foo)

1538252193
andrewrk
it's unfortunate that setBaseValue has ?[*]T:  pub extern fn setBaseValue(f: ?[*]struct_Base, value: c_int) void;

1538252210
andrewrk
better would be: pub extern fn setBaseValue(f: *struct_Base, value: c_int) void;

1538252219
andrewrk
this is what #1059 is talking about

1538252451
srgpqt
yeah

1538252567
srgpqt
i had already tried @ptrCast, it gives me "error: cast increases pointer alignment"

1538253187
srgpqt
I may have worked around it with some intermediate variables using @ptrCast and @alignCast... guess i'll find out

1538253438
andrewrk
srgpqt, ah ok that's the real issue - pointer alignment. I think you just have to settle for a @ptrCast and an @alignCast

1538253447
andrewrk
there's a better way to design a C API so that this does not happen

1538253523
srgpqt
For sure, but it would be nice if there was a convenient escape hatch for this use case. I'll try making a small helper function that does the casts for my situation

1538253533
srgpqt
Thanks

1538253535
andrewrk
agreed. #1059 describes that escape hatch

