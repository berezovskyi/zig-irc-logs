1528157952
GitHub83
[zig] andrewrk opened pull request #1053: Pointer Reform: proper slicing and indexing (master...pointer-reform-slicing)

1528164688
GitHub58
[zig] andrewrk closed pull request #1053: Pointer Reform: proper slicing and indexing (master...pointer-reform-slicing)

1528164691
GitHub27
[zig] andrewrk pushed 1 new commit to master:

1528164691
GitHub27
zig/master e53b683 Andrew Kelley: Pointer Reform: proper slicing and indexing (#1053)...

1528172881
GitHub79
[zig] jayschwa opened pull request #1056: WIP: Add snapcraft.yaml (master...snapcraft)

1528182465
Hejsil
When exporting to C, is it best to declare all pointer arguments nullable?

1528182511
Hejsil
Or will Zig generate some wrapper that asserts that pointers are not null if I use not null pointers?

1528182523
Hejsil
andrewrk

1528193068
GitHub136
[zig] Hejsil opened pull request #1057: Rename integer literal type and float literal type (master...comptime-int)

1528206997
andrewrk
Hejsil, best to use pointers in the same way you would for zig code

1528207015
andrewrk
importing .h files unfortunately gives only nullable unknown length pointers

1528207032
andrewrk
but the other way around is no problem

1528207039
andrewrk
we can add nonnull GNU attributes and stuff

1528208227
GitHub111
[zig] andrewrk closed pull request #1057: Rename integer literal type and float literal type (master...comptime-int)

1528208229
GitHub42
[zig] andrewrk pushed 1 new commit to master:

1528208229
GitHub42
zig/master 677eaf2 Andrew Kelley: Merge pull request #1057 from ziglang/comptime-int...

1528208951
clownpriest
allocating an array with size specified at runtime, how do?

1528208981
clownpriest
unable to evaluate constant expression

1528208981
clownpriest
const border = [m+1]u32{} = undefined;

1528209049
andrewrk
clownpriest,

1528209061
andrewrk
allocator.alloc(Type, count)

1528209065
clownpriest
excellent

1528209818
Hejsil_
andrewrk, Aah right! Forgot about the notnull attribute in C

1528210263
andrewrk
Hejsil_, potentially we could even figure out a way to annotate unknown length vs single item pointers in a way that would allow us to recover the information in translate-c

1528210286
andrewrk
for example we could use a typedef with a custom annotation

1528210330
andrewrk
and you would want to manually perform this annotation before running translate-c for the porting use case

1528210342
andrewrk
because the generated code would be much nicer. same thing for nullables

1528210723
GitHub115
[zig] andrewrk pushed 1 new commit to master:

1528210724
GitHub115
zig/master 7a09482 Andrew Kelley: fix crash when evaluating return type has compile error...

1528229436
clownpriest
any suggestions on how i could allocate a module-level global hashmap and initialize it at compile time?

1528229463
clownpriest
or pointers to existing code that does something similar

1528229511
clownpriest
searching through zig compiler repo isn't turning up useful examples (tho i could be searching for the wrong thing)

1528229538
andrewrk
clownpriest, that's a really fun idea that afaik nobody has explored yet

1528229547
andrewrk
the current std lib hash map uses the heap for memory exclusively

1528229572
andrewrk
are you intending it to be read-only at runtime?

1528229581
clownpriest
yup

1528229597
andrewrk
this would be a good use case to explore trying to compute a perfect hash at comptime

1528230218
clownpriest
i'm not too well versed in compilers, but i'm assuming that if all the data is known at compile time, then it should be doable

1528230257
clownpriest
especially with the input i'm using (just raw u8's for both key and value, super simple hash function, wouldn't even really call it a hash)

1528230421
clownpriest
i could get my job done without a hashmap atm, just use pairs of static arrays and keep track of offsets, but feels like this sort of thing could be cool

1528231713
dbandstra2
could someone take a few minutes to look at something? i have some code that's crashing and i'm 75% sure it's not my fault

1528231721
dbandstra2


1528231735
dbandstra2
it's in a test so (hopefully) can be replicated

1528231785
dbandstra2
but anyway std.mem.eql is failing when (i think) it shouldn't be. the |item| part of the for loop is yielding random garbage (but it goes away if i add a debug print!)

1528231852
andrewrk
dbandstra2, I'll have a look in a few moments

1528231865
dbandstra2
thanks

1528234805
pancake
hi

1528234810
pancake
i cant build zig from git on mac

1528234828
pancake
/Users/pancake/prg/zig/deps/lld/wasm/WriterUtils.h:27:16: error: use of overloaded operator '==' is ambiguous (with operand types 'const llvm::wasm::WasmSignature' and

1528234875
pancake
zig/deps/lld/include/lld/Core/SymbolTable.h:68:20: error: no member named 'HashString' in namespace 'llvm' return llvm::HashStr...

1528234881
andrewrk
are you using the system compiler? what macos version?

1528234896
pancake
10.13.5

1528234921
pancake
cmake -D CLANG_INCLUDE_DIRS=/usr/local/Cellar/llvm/HEAD-9016627/include/ -D LLVM_LIBRARIES=/usr/local/Cellar/llvm/HEAD-9016627/lib ..

1528234935
andrewrk
HEAD-9016627 is not llvm@6

1528234956
andrewrk


1528234987
pancake
i dont have this directory. ill run reinstall llvm@6

1528235229
pancake
thanks :)

1528235313
andrewrk
pancake, did it work?

1528235327
pancake
almost finished to build 85%

1528235363
andrewrk
good

1528235396
pancake
link fails

1528235491
pancake


1528235525
pancake
1m doing clean build

1528235588
andrewrk
what cmake line did you use?

1528235750
pancake
cmake -D CLANG_INCLUDE_DIRS=/usr/local/Cellar/llvm/6.0.0/include -D LLVM_LIBRARIES=/usr/local/Cellar/llvm/6.0.0/lib ..

1528235759
andrewrk
that is not the cmake line suggested in the readme

1528236199
pancake
works. sorry

1528236283
GitHub54
[zig] andrewrk pushed 1 new commit to master:

1528236283
GitHub54
zig/master 652f4bd Andrew Kelley: disallow unknown-length pointer to opaque...

1528236353
andrewrk
no worries

1528240705
dbandstra2
andrewrk: nevermind, i found the problem. another one of those struct copying "footguns"

1528240910
dbandstra2
memorialized in a gist, maybe we should have a "gallery of footguns" someday

1528242208
andrewrk
there's an issue for this

