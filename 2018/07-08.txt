1531009867
dbandstra
how do i use zig fmt...? i finalyl decided to check it out but i realized i have no idea where it is

1531009994
GitHub10
[zig] andrewrk pushed 1 new commit to master:

1531009994
GitHub10
zig/master ced3aae Andrew Kelley: cleaner output from zig build when there are compile errors

1531014440
tiehuis
dbandstra: for now `zig fmt` is only present in the stage2 compiler so you need to build that

1531014449
tiehuis
there are instructions at the bottom of the README

1531015809
dbandstra
tiehuis, thanks

1531015895
dbandstra
has anyone managed to get it integrated with vs code?

1531016132
tiehuis
i don't think so, i did it with vim but don't use vscode personally so it isn't on my list

1531016181
tiehuis
i'll have a look sometime today though and if it isn't too much work i can add an autofmt option

1531016233
dbandstra
here is a file from elm's extension

1531016251
tiehuis
made an issue for it

1531016272
tiehuis
thanks, that will be helpful

1531019901
dbandstra
is it possible to create a zero-length slice in the middle of an expression, without having to refer to any memory?

1531020101
dbandstra
this almost works `const y: []u32 = ([0]u32{})[0..];` but doesn't compile becaues the expression has type `[]const u32`

1531020395
dbandstra
(i want it to be `[]u32`)

1531021105
tiehuis
separating those statements seems to work: e.g. `var y = [0]u32{}; var z: []u32 = y[0..];`

1531021128
tiehuis
may be a better way to do that but not sure

1531022424
GitHub33
[zig] thejoshwolfe pushed 1 new commit to master:

1531022425
GitHub33
zig/master 410b4d9 Josh Wolfe: builder.addBuildOption

1531022782
dbandstra
i want to return this from a function and it feels wrong to return a slice of a local even if it's 0 length

1531022823
dbandstra
oh well

1531034596
andi3
@Hejsil the main pro point Blow mentioned as well is that for loops are such a common building block und using coroutines makes it much easier to reason about them (replace the `visit` function with `yield`), of course you can not delete or insert this way but many times you just want to find/ modify/ filter a range and in those cases you have to do less work/ less errors as can be seen at about min 6 left vs right side

1531034714
andi3
and I'd like to point out the headline of this irc being `be excellent to each other`, saying "watching someone talking In his underwear" is not exactly excellent

1531047254
Bas_
If you have a single struct. How do you copy it byte-wise to a byte arrray/slice?

1531047290
Bas_
I'm trying to use std.mem.copy, but it wants a slice and ... well I don't have a slice, I only have one thing.

1531047350
Bas_
Taking the address doesn't work, because a pointer is not a slice, and I can't make the pointer into a slice because it says it's a single-item pointer.

1531048814
tiehuis
Bas_: you can do this: `const ptr = @sliceToBytes(([]const Foo{a})[0..1]);`, where Foo is your struct type and a is a value of type Foo

1531048866
tiehuis
that is a bit awkward, i think there should be a more straight-forward way using @ptrCast or something but it is eluding me; don't usually do slice casting and the like

1531049181
tiehuis
also, remember to make sure you use a `packed struct` since the ordering of fields isn't guaranteed otherwise

1531049201
Bas_
Hmm... yes that's a bit awkward.

1531049255
tiehuis
if you make that an inline fn it can at least hide away some of the messiness for the moment

1531049258
Bas_
I tried bitcast, but that crashed

1531049288
tiehuis
yeah, bitCast won't work since you just want a re-intepretation of the memory and not a new copy, right?

1531049296
tiehuis
also, it doesn't work for arrays just yet

1531049301
Bas_
yes

1531049328
Bas_
I just want to copy the struct to a byte buffer.

1531049392
tiehuis
copied to a new array?

1531049444
Bas_
a slice of an existing one.

1531049754
tiehuis
here are two variants for any type, one returning a slice/view and another a new array copy:

1531049938
Bas_
Ah cool. Thanks.

1531049968
tiehuis
the second one should eventually work as you expect via @bitCast

1531059261
very-mediocre
any way to use `@setEvalBranchQuota` for an implicitly comptime const (declared outside of functions/structs)

1531059301
very-mediocre
say for instance you want to generate a lookup table of prime numbers at comptime, for use at runtime

1531059364
very-mediocre
doing it like `comptime { const primes = genPrimes(100); }` means `primes` becomes unusable at runtime

1531059500
MajorLag2
`const primes = comptime val: { @setEvalBranchQuata(...); break :val genPrimes(100); }` ?

1531060714
very-mediocre
MajorLag2: thanks

1531060719
very-mediocre
Didn't know that was a thing

1531060838
very-mediocre
ah, that doesn't work

1531060845
very-mediocre
can't use break outside of a loop

1531060873
very-mediocre
i could add a dummy loop but then we kind of descend into hacky nonsense

1531060884
MajorLag2
you can use labeled breaks this way.

1531060927
MajorLag2
I won't know why it wouldn't be working.

1531060938
very-mediocre
might have a syntax error

1531060945
very-mediocre
hmm

1531060992
very-mediocre
yeah, my mistake

1531061001
very-mediocre
that works, thanks

1531061042
very-mediocre
(put the colon in the wrong place in the break, i've yet to use labeled breaks at all before this)

1531063811
Bas_
in tests, do I do foo() catch unreachable; or try foo(); ?

1531063860
MajorLag2
Either should fail the test and give you a return trace.

1531063891
MajorLag2
Actually, no, I think `unreachable` only gives you the spot where unreachable happened.

1531065772
Bas_
Sorry my pc decided to die. I wanted to ask (or maybe I already did): In tests, do I do foo() catch unreachable; or try foo(); ?

1531074916
andi3
@Bas_

1531075162
andi3
a few days ago a question about advise on memory management came up and it just happened that I was talking to a friend about zig and we came to the same question again like I think its pretty clear how zig wants users to acquire memory but what is the strategy for releasing it? I see defer as an option and probably deallocating a whole pool/ arena and doing frees manually but apart from that? thanks

1531078146
very-mediocre
andi3 i don't think it's fully worked out yet. `defer` is sufficient for a procedural style but it's unclear what OOP features there will be, and if they will be amenable to RAII

1531078444
andi3
okay I mean having things in flux is fine by me as well good to know

1531078656
very-mediocre
I like the defer pattern, personally

1531078700
very-mediocre
i don't see many other options for the procedural style

1531078751
very-mediocre
it covers the main footgun of something failing before you can release memory

1531079000
andi3
I like defer as well cause I like go as well but go has gc so I just need it for files etc. I'd feel a little lost in a new language just without a destructor I think, I mean I like c but tbh the raw bytes sometimes really should be handled by a compiler rather than my brain+hand

1531079138
andi3
actually "even" JBlow has them although advocating against it in the first place, not saying he is the reference but it's just an indication to me

1531079399
stratact
I'm afraid to ask this question, but does zig have some form of type inheritance or composition?

1531079584
stratact
or would that make the language too complicated

1531079671
andi3
I mean composition sure and inheritance I think not but I also think that is pretty much common sense nowadays

1531079766
andi3
@very-mediocre if I may give the reference without annoying you here with links

1531079785
stratact
Composition is nice and I come from a Rust background, but the primary problem is how to implement GUIs with composition, it's not as intuitive compared to inheritance

1531079810
stratact
although there is a thing called "Entity Component System" for it

1531079894
andi3


1531080017
stratact
Alright I'll leave a comment about what I said

1531080221
stratact
andrewrk:

1531080439
very-mediocre
It's anecdotal but I've seen quite a few people itching for some inheritance :)

1531080462
very-mediocre
i'm using it loosely i guess, more like go-style composition

1531080493
very-mediocre
feels like some kind of interfaces is inevitable

1531080516
very-mediocre
I think it will be possible with #reify to do proper interfaces in userspace

1531080529
very-mediocre
@reify*

1531080548
very-mediocre
currently it's possible but clunky

1531080595
very-mediocre
i'm out, bye

1531080633
andi3
`feels like some kind of interfaces is inevitable` I just said to a friend if I choose between generics and interfaces of any kind I take interfaces any day

1531081789
Bas_
Why?

1531081821
Bas_
I've mostly seen interfaces being overused and getting in the way of understanding what is going on.

1531081849
Bas_
Not that ducktyping (such as in Python) makes it easy to see what's happening.

1531081874
andrewrk
dbandstra, you can create a slice of len 0 like this:

1531081890
andrewrk
const slice = ([*]T)(undefined)[0..0];

1531081929
andrewrk
this is safe and works at compile time

1531081992
andrewrk
I agree with andi3, let's be charitable and non-judgemental with how people spend their time

1531082107
andrewrk
I want the zig community and other programming language communities to see each other as friends, and we can help each other

1531082122
andrewrk
there's no reason for it to be adversarial

1531082330
andrewrk
Bas_, in tests, use try foo() or catch @panic()

1531082371
andrewrk
`catch unreachable` will catch test failures in debug mode, but `catch unreachable` will be undefined behavior when testing in release-fast mode. you might get a test failure, might not.

1531082380
Bas_
ok

1531082417
andrewrk
difference between unreachable and @panic() is that @panic() still panics in release-fast mode

1531082418
Bas_
the catch unreachable is what I saw in the zig hashmap tests

1531082433
andrewrk
let me have a look

1531082465
andrewrk
Bas_, yep. these tests are not idiomatic. I wrote these before `try` was allowed in test blocks, and even before we had @panic

1531082469
andrewrk
I'll update them now

1531082539
Bas_
hah ok

1531082560
andrewrk
I really should grep all of zig source for "catch unreachable" and make sure they're all legit. pretty much every occurence should have a comment explaining why the catch is truly unreachable

1531082582
stratact
andrewrk: after you are done updating those, could you look at my github comment about ECS?

1531082640
andrewrk
stratact, I'm about to be AFK for a few hours, but I will have a look when I get back

1531082660
stratact
cool cool

1531082805
andi3
@Bash_ just anytime I want to have a boundary/ API they help me ensure correctness whereas generics are just less typing, although if you have duck typing then interfaces lead to less typing as well which I like but I do not think that would be a goal for zig in itself

1531082879
Bas_
Hmm.. yes I can see that it helps clarify the API.

1531083662
andi3
I really not sure how zig does this internally so far, maybe I missed it and it works really well already but if so I would be quite surprised but nothing wrong with a surprise ... Go has this principle of having really tiny interfaces for example io.Reader which has just a Read method but in turn you can implement your own in a matter of minutes if not seconds

1531083692
andi3
and then plug this into all kinds of existing functionality

1531083817
andi3
what I also miss is simmering like this

1531083864
andi3
notice that ada was explicitly meant to be used in systems were bugs are costly like military tech and so this seems pretty aligned with what zig wants to do actually

1531084037
MajorLag2
There's actually been some discussion about ranged int types in regard to @reify. I wonder if a more arbitrary check could be supported. Like, if the user could @reify a type and assign a validate() fn to it that would be called in the same way runtime saftey checks are or something.

1531084244
andi3
yes that sounds like something, but the first step is automatic conversion IMO

1531084286
andi3
btw. could you tell me reify means? I looked up the issue but the name kind of drives me nuts :D

1531084376
MajorLag2
Reify: to make concrete or real. In this context it's the oposite of @typeInfo. You give it a TypeInfo struct you've but together and it will make a type out of it.

1531084444
andi3
but why reify? is this some acronym?

1531084467
MajorLag2
No, that's an actual word.

1531084471
andi3
oh I see that is actually just English

1531084725
andi3
looking at this

1531085010
Bas_
Looks good.

