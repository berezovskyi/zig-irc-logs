1520993990
jacobdufault
andrewrk: Adding all top-level symbols to the resolve queue causes a bunch of compile errors

1520994061
jacobdufault
I've pushed the latest code

1520994117
andrewrk
that is expected

1520994143
andrewrk
zig code is allowed to depend on lazy analysis, and so it does, and so if you do this you get errors

1520994168
andrewrk
but this should still provide useful output for cquery

1520994212
jacobdufault


1520994243
jacobdufault
Hmm, I wonder if it is possible to have diagnostics and metadata in the same compile pass?

1520994258
jacobdufault
It'd be really unfortunate if two separate invocations were required

1520994360
andrewrk
one is stderr, one is stdout

1520994421
andrewrk
one thing I plan to do is have something where you can do a "multibuild" - specify multiple possible values for compile time variables such as the target OS

1520994422
jacobdufault
FYI: error reporting will exit the compiler

1520994474
andrewrk
you can modify report_errors_and_maybe_exit

1520994483
andrewrk
if we're outputting json we can have both

1520994549
andrewrk
a "multibuild" would create multiple builds simultaneously, for example, linux & windows. the shared work would be shared and cross-referenced. so we would know if you get an error in code only in 1 target

1520994551
jacobdufault
I was doing so. I may need to clean up some other asserts as well, ie, do_code_gen

1520994564
jacobdufault
multibuild sounds like a perfect solution

1520994585
andrewrk
plus then you get your cquery data and generated docs for all the declarations, not just the ones for that target

1520994604
andrewrk
and if you get any compile errors that occur in all builds, you can report it instead of letting it slip by lazy evaluation

1520994686
andrewrk
oh and that gives us errors for "unused function" and "unused variable"

1520994724
andrewrk
which are currently not possible

1520994765
jacobdufault
does do_code_gen affect AST/types?

1520994771
andrewrk
no

1520994803
jacobdufault
nice, since it seems to break in non-trivial ways when resolving all top-level decls. I'm going to disable it for json output mode

1520994826
andrewrk
we can revisit when multibuild is a thing

1520994829
jacobdufault
btw: would you prefer a name other than json? maybe `zig metadata foo.zig`?

1520994864
andrewrk
I'm ok with either

1520994878
andrewrk
I suppose metadata is more descriptive

1520994938
jacobdufault
I'll switch it to metadata then

1520994950
jacobdufault
or, maybe `index`

1520995060
andrewrk
I'd rather not have "index" because I think it will conflict with some of the planned caching nomenclature

1520995084
jacobdufault
sg

1521001277
GitHub187
[zig] AndreaOrru pushed 1 new commit to master:

1521001277
GitHub187
zig/master 7ac4403 Andrea Orru: Compiler error when taking @offsetOf of void struct member...

1521004090
GitHub176
[zig] AndreaOrru pushed 1 new commit to master:

1521004090
GitHub176
zig/master c828c23 Andrea Orru: Tests for zero-bit field compiler error

1521004125
andrewrk
aiwakura, thanks :)

1521004162
aiwakura
my pleasure

1521013101
GitHub83
[zig] andrewrk pushed 1 new commit to master:

1521013101
GitHub83
zig/master efebb6d Andrew Kelley: fix tests broken by previous commit

1521019370
GitHub63
[zig] tiehuis opened pull request #833: Add addIncludeDir to TestStep + fix build template (master...issue-794)

1521049831
gazatu
dunno how this works but i have 1 question

1521049841
andrewrk
hi gazatu

1521049846
gazatu
yo

1521049867
gazatu
how do i link against a library (for example libuv) on windows?

1521049956
andrewrk
--library uv

1521050004
andrewrk
there are plans for a package manager for C libraries, but that's not done yet. so you'll have to do the work of acquiring the .lib and .h files

1521050039
gazatu
oh so that's the problem. i need a .lib file and not a .dll

1521050065
gazatu
thanks that's all i needed to know :D

1521050139
andrewrk
gazatu, you can link dynamically against libuv if you wish

1521050157
andrewrk
then you will end up with a .dll dependency

1521050266
gazatu
mhhh but then i get a bunch of these "lld: error: duplicate symbol: __imp_GetConsoleMode in ./lib\libuv-1.dll and in kernel32.dll"

1521050294
gazatu
i'll just try with a .lib file if that works better

1521050346
andrewrk
I'll have to try that on my windows laptop when I get home. maybe there's something I can fix

1521050426
gazatu
:ok_hand:

1521055512
gazatu
yo i have 1 more question :)

1521055558
gazatu
am i able to use extern fn's when linking against a .lib file?

1521055760
Hejsil
andrewrk, is this a bug?

1521057123
andrewrk
gazatu, btw, I have a work-in-progress proof-of-concept using zig's new async/await features to build a nonblocking tcp server

1521057139
andrewrk
the zig std library will soon compete with libuv

1521057155
andrewrk
yes you are able to use extern functions

1521057167
andrewrk
let me know if you run into a problem

1521057270
gazatu
well i guess im too stupid to make this work then :/ might try a pure zig solution then

1521057404
andrewrk
gazatu, it's probably a flaw in zig

1521057418
andrewrk
it might require some patience on your end, but I'm sure we can get it sorted

1521057493
andrewrk
Hejsil, what would you expect p to be? I get the same value (4) with or without the comptime stuff

1521057550
Hejsil
Should't p be 10? Since it's an inline loop and i is used to inline the loop 10 times

1521057608
andrewrk
it's inlined 5 times because you break out of the loop after 5 iterations

1521057620
Hejsil
But t is only know at runtime

1521057630
andrewrk
oh!

1521057642
Hejsil
Maybe the variable names where bad, lol

1521057660
ltr_
how is async/await thing going to work?, i would be able to tune the thread pool?

1521057747
andrewrk
Hejsil, I think this is a missing compile error - the loop is inlined, and therefore control statements such as break and continue which apply to the inlined loop must be compile time known

1521057763
Hejsil
That make sense

1521057824
andrewrk
ltr_, yes, the thread pool, if any, would all be in userland

1521057824
Hejsil
So it's related to

1521057835
andrewrk
I'll hopefully have a proof of concept within the next week

1521057852
andrewrk
Hejsil, ah, yes I believe so

1521057884
andrewrk
this is an important bug, but we're releasing 0.2.0 tomorrow, so we're gonna have some known bugs

1521057904
andrewrk
"no bugs allowed in releases" doesn't start until 1.0.0

1521057918
Hejsil
Np, now I know exactly what to avoid in my inline loops

1521060919
jfo
hey all, I've been working on a long post describing a small project in zig that I hopw will provide some rudimentary insight into the language for curious folks. Any feedback is appreciated, the draft is here:

1521068154
aiwakura
oh wow jfo, that's beautiful! I'm gonna go through it tonight

1521069301
aiwakura
seems like the `==` operator is not defined for instances of union(enum), or structs for that matter

1521069322
aiwakura
is that by design or is it something we could add support for?

1521071673
MajorLag
jfo, I think it is worth mentioning that things like bounds and overflow checking only happen in debug and release-safe modes (or when you turn them on with @setRuntimeSaftey).

