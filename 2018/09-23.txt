1537677146
scientes
why can't i do an assignment inside an if() ?

1537677370
scientes
andrewrk, yeah the static zig isn't working either, it can build the executables but they crash

1537677485
scientes
there must be something differn't about my environment

1537677593
andrewrk
scientes, you can:  if (blk: {assignment = whatever; break :blk true;}) {...}

1537677609
andrewrk
that looks pretty ugly though, I probably wouldn't do it

1537677646
andrewrk
very strange about executables crashing. I would like to understand why this is happening

1537677652
scientes
me too

1537677965
scientes
oh, that wasn't llvm-7 related, I was overflowing the stack

1537678161
scientes
so the static build works

1537692973
Jenz
Does it matter whether I have my main function return void or !void ?

1537693809
very-mediocre
Jenz that's a loaded question

1537693839
very-mediocre
It should be !void for compiler safety if it has the potential to throw an error

1537693859
very-mediocre
Many things don't "matter" in the output and are compiler safety features

1537695071
Jenz
Thanks very-mediocre

1537695260
very-mediocre
Just to be clear, you're best off trying to use `void` by default

1537695282
very-mediocre
but if you have anything in the function body that could return an error, the compiler would then force you to change to !void

1537695320
very-mediocre
!void is shorthand for Error!void

1537695380
very-mediocre
which is a union type, indicating the function can return void or error

1537695409
Jenz
Yeah thanks, I (think I) get it

1537707126
Jenz
Why is the global allocator in std.debug ?

1537708648
Jenz
Or, is that a stupid question?

1537709006
andrewrk
Jenz, what's nice about !void is that in debug mode you'll get an error return trace if you return an error. the trace will show all the places the error was returned from a function

1537709109
andrewrk
Jenz, that's a great question. it's there because it is not a general purpose allocatored - it's a statically allocated 100KB block of bytes, and you can never free anything

1537709139
andrewrk
in other words, it's handy for quick tests and debugging, but otherwise it is not the correct allocator choice for your software

1537709231
Jenz
Aha! Then everything makes sense, thanks again andrewrk!

1537709284
Jenz
I was incorrect in assuming it was

1537709303
andrewrk
you would find it in a future version of zig :)

1537709310
Jenz
"production" allocator as in not "debug" one

1537709317
Jenz
Oh, haha very well :D

1537709338
andrewrk
we have no general purpose allocator currently. one alternative is to link against libc and use std.heap.c_allocator

1537709362
andrewrk
depending on the requirements of your software, an arena allocator may be appropriate

1537709369
andrewrk
and we do have one of those

1537709443
Jenz
Either way, the debug one is what I need

1537709827
andrewrk
the debug one is just a std.heap.FixedBufferAllocator. you can make your own as big as you want

1537726107
wink_
Have there been discussions about extending structs at compile time, something like:

