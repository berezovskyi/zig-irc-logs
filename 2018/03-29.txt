1522282157
MajorLag
andrewrk, evidence that making `[]null const u8` the default and implicit casting to `&const u8` and `[]const u8` is the right move: I basically just implemented this behavior in a struct to make it smoother to talk to syscalls.

1522283265
jab
do you guys get a massive amount of warnings when building?

1522283278
jab
like: ld: warning: direct access in function 'llvm::OnDiskChainedHashTableGenerator...

1522284091
jab
woo! got builds working

1522284777
andrewrk
alright, done with day job

1522284779
andrewrk
zig time!

1522284803
andrewrk
MajorLag, noted

1522284899
andrewrk
MajorLag, that's a keen observation that the same kind of code that could give you non-null-terminated string literals if the default was null-terminated, could give you null-terminated if the default is non-. I hadn't considered that

1522285221
andrewrk
jab, yes I made libsoundio. I'm really just trying to make music, but I don't have a good enough language to build my digital audio workstation in yet ;)

1522285344
GitHub19
[zig] andrewrk closed pull request #865: skeleton stage 2 support for 'zig build' (master...zig-build-stage2)

1522285345
GitHub133
[zig] andrewrk pushed 3 new commits to master:

1522285346
GitHub133
zig/master 5627347 Andrew Kelley: Merge pull request #865 from bnoordhuis/zig-build-stage2...

1522285346
GitHub133
zig/master b60b01c Ben Noordhuis: skeleton stage 2 support for 'zig build'...

1522285346
GitHub133
zig/master db70b90 Ben Noordhuis: non-zero exit when build.zig cannot be created...

1522285698
MajorLag
andrewrk, or anyone, am I missing something obvious or is this a bug?

1522285748
andrewrk
MajorLag, I think you need const FileDir = comptime DStr.literal("file/")

1522285778
MajorLag
oh, I would have thought that'd be implied by const.

1522285780
andrewrk
related is

1522285792
andrewrk
you can do: const foo = runtimeFunction();

1522285860
MajorLag
And I do. I guess that's what lead me to believe it would work with just `const`.

1522286074
MajorLag
hmmm: const FileSrc = `comptime DStr.literal(RealRootPath.str ++ FileDir.str);`

1522286085
MajorLag
whoops. meant to paste the erro

1522286106
MajorLag
`error: expected type '[]const u8', found '&const u8'`

1522286144
MajorLag
arrow points to the `++`  operator, and the lhand should definitely be a []const u8

1522286206
andrewrk
that means the result of the ++ expression - the entire `a ++ b` was `&const u8` but DStr.literal expects []const u8

1522286224
andrewrk
self hosted parser uses a squiggly underline around the entire expression instead of a mere ^

1522286259
MajorLag
ok, but that still doesn't make sense to me. Shouldn't []const u8 ++ []const u8 => []const u8?

1522286317
andrewrk
hmm yeah that seems like a bug

1522286352
MajorLag
want an issue? I can work around this for now I think.

1522286359
andrewrk
this is probably easy to fix, I'll take a quick look

1522286377
andrewrk
this is why I have 2 git clones of zig :)

1522289375
andrewrk
MajorLag, fixing now:

1522289585
MajorLag
cool, thanks. The error in your issue doesn't match the code though.

1522289619
MajorLag
will be confusing to future computational historians

1522289630
andrewrk
oops

1522289724
andrewrk
fixed

1522293960
GitHub152
[zig] andrewrk pushed 1 new commit to master:

1522293960
GitHub152
zig/master 032fccf Andrew Kelley: fix compile time array concatenation for slices...

1522293963
andrewrk
MajorLag, ^

1522294437
MajorLag
Thanks. I'll circle back and un-workaround my code in the morning.

1522297098
andrewrk
argh. I'd have #821 solved except there's a bug in llvm's coroutine implementation

1522301233
curtisf
Other than

1522301263
curtisf
At the moment I'm wondering if there are slice-of-structs literals

1522301308
andrewrk
curtisf, I think the docs you linked are the best thing we have so far

1522301348
andrewrk
you can cast array literals to []const T

1522301408
andrewrk
const slice_of_structs: []const T = []T{ T { }, T { }, T { } }

1522301412
andrewrk
where T is your struct name

1522301424
andrewrk
and you'll need to fill in the inner { }  with fields

1522301453
andrewrk
if this syntax is cumbersome, you can use functions executed at comptime

1522301516
andrewrk
here's an example:

1522301544
andrewrk
you can also do something like:  const foo = comptime {  };

1522301569
andrewrk
and then do any arbitrayr computation in the comptime block  to come up with your static data

1522301679
curtisf
Thanks, that seems obvious now, it might be a bit too late

1522316500
Hejsil
andrewrk, The self hosted compiler is trying to lookup the stage 0 libs in {cmake_dir}/zig_cpp/{libname}.a, but my stage 0 build outputs the libs into {cmake_dir}

1522316541
Hejsil
Bug, or am I building stage 1 wrong?

1522316986
Hejsil
I see the program. I need to make install for it to work

1522317000
Hejsil
problem*

1522323824
GitHub2
[zig] Hejsil pushed 1 new commit to master:

1522323824
GitHub2
zig/master 9df2a6a Jimmi Holst Christensen: std.zig.parser can now parse top level test declarations

1522327539
walac
andrewrk: I see references for a parsegen tool in the docs but I could not find anything in sources, is this still valid?

1522327645
GitHub0
[zig] tiehuis opened pull request #867: Rewrite Rand functions (master...rand-overhaul)

1522332452
andrewrk
walac, where do you see that?

1522339439
walac
andrewrk:

1522340254
andrewrk
walac, that comment is incorrect. Deleting it now

1522340644
walac
andrewrk: ok. Btw, any interest in converting the parser to a gen tool, like bison?

1522340884
andrewrk
walac, nope. why?

1522341029
walac
andrewrk: well, I found use a parser generator makes easier to build a correct parser given the grammar, and the code becomes easier to understand (that part is a personal view). The downside is to learn a new tool syntax

1522341055
walac
I was thinking on making an experiment on converting the parser to bison and see how it goes

1522341070
andrewrk
I think it makes it difficult to have error messages exactly how you want them

1522341104
andrewrk
that also introduces another system dependency

1522341213
walac
That's a good point, but I believe the C++ implementation will be replaced by zig one in the near future, right?

1522341300
jab
This is beautiful: #define ICE_P(x) (sizeof(int) == sizeof(*(1 ? ((void *)((x)*0l)) : (int*)1))

1522341323
andrewrk
walac, correct - the self hosted parser in fact already exists and supports a subset of zig syntax

1522341412
andrewrk
it uses an arena allocator and no recursion

1522341440
andrewrk
the API is exactly what we want, no global variables, it integrates directly with the tokenizer

1522341445
andrewrk
it's kind of hard to want something else

1522341538
andrewrk
jab, I don't understand - it looks like it dereferences a void * which should be a compile error

1522341548
walac
andrewrk: for the zig implementation I think it justifies a hand-crafted parser, but for C++... that code will die anyway... Where is the zig implementation? Under src-self-hosted/ dir?

1522341569
andrewrk
walac, it's planned for the c++ code to never die:

1522341591
walac
andrewrk: ah, so my mistake

1522341621
andrewrk
c++ implementation will forever be just good enough to build the latest self hosted compiler

1522341662
jab
andrewrk: it doesn't actualy deref in a sizeof

1522341669
jab
so it just gets the type void which is size 1

1522341689
andrewrk
void is size 1?

1522341690
jab
sizeof is "comptime"

1522341693
jab
yeah

1522341696
jab


1522341739
andrewrk
what does ICE_P stand for?

1522341751
jab
integer constant expression p?

1522341758
jab
p being predicate which is a lisp thing

1522341782
jab
so it tests for integer constant expressions

1522341794
jab
or something known at compile time, hence why x fails

1522341799
jab
(it's not const)

1522341813
jab
this basically tests if something can be used in an array expression

1522341819
jab
at runtime lol

1522341843
jab
linus' comment:

1522347292
GitHub196
[zig] andrewrk closed pull request #867: Rewrite Rand functions (master...rand-overhaul)

1522347292
GitHub38
zig/master b80398b Andrew Kelley: Merge pull request #867 from zig-lang/rand-overhaul...

1522347292
GitHub38
[zig] andrewrk pushed 1 new commit to master:

1522351743
jab
haha, i was thinking about doing that

1522351747
jab
glad my efforts weren't wasted

1522352060
andrewrk
tiehuis is a machine

1522353000
cmwt
I just learned about Zig. I was wondering if there has been any discussion over having variables and objects be `const` by default? I am just curious.

1522353477
Hejsil
I don't think there is a default

1522353498
Hejsil
Pick 'var' if you want mutablility. Pick 'const' if you dont

1522353636
curtisf
does zig have "pointer to const", or does it behave more like Java's final / JavaScript's const where it only prevents modification of the value at the variable itself?

1522353668
Hejsil
Yes, zig have pointer to const.

1522353711
Hejsil
Taking pointer of a const, gives pointer to const. Taking pointer to var gives normal pointer. Normal pointer casts to const pointer, but not the other way around

1522353793
Hejsil
"Normal". Let's call them mutable pointers instead

1522353877
cmwt
@Hejsil, Thank you for telling me.

1522353965
curtisf
I'm assuming a holder of a pointer-to-const cannot assume that the pointed-to data doesn't change, it's just a restriction on syntactically being able to modify the object through that pointer. Is that right?

1522354048
Hejsil
Yes

1522354067
Hejsil
Const pointers are not safe from concurrency

1522354103
Hejsil
Also, const values can have fields that are mutable pointers

1522354140
Hejsil
const a = HaveMutPtr { .ptr = &some_value }; a.ptr

1522354148
Hejsil
*a.ptr = 3;

1522354152
Hejsil
is valid

1522354174
jjido
Does Zig have generators? They are also concerned with weak const-ness

1522354260
Hejsil
andrewrk is working on coroutines, but I don't know how useful they will be for generators

1522354273
Hejsil
I haven't played with them yet

1522354415
curtisf
I'm going to be asking a lot of questions, thanks in advance for being helpful. What is the nicest way to write a loop 0 to len - 1? I wanted to iterate over two slices of the same length

1522354545
jacobdufault
re coroutines, do the coroutines have an associated stack (ie, yielding in nested function calls)?

1522354679
Hejsil
curtisf,

1522354810
Hejsil
jacobdufault, The tests on coroutines might answer your question:

1522354813
curtisf
ah, the for loop documentation doesn't mention also getting index, but I now see it being used in some other places

1522354817
Hejsil
Aka, I have no idea

1522354846
curtisf
oh, I lied, it's there

1522354986
jacobdufault
Hejsil: I was looking at the tests but did not see anything similar, so I'm assuming it is not supported. Just wanted to confirm

1522355303
Hejsil
When It's documented, we'll know :)

1522355503
GitHub6
[zig] Hejsil pushed 1 new commit to master:

1522355503
GitHub6
zig/master 530f795 Jimmi Holst Christensen: std.zig.parser now supports all infix operators

1522355894
GitHub68
[zig] Hejsil pushed 1 new commit to master:

1522355894
GitHub68
zig/master 8ada030 Jimmi Holst Christensen: Fixed self hosted compiler compiler error from prev commit

1522357606
Hejsil
curtisf, The compiler assumes the memory of a const pointer don't change. It should be marked as a volatile pointer, if it does

1522357653
curtisf
I will keep that in mind, thanks!

1522359668
GitHub68
[zig] Hejsil pushed 1 new commit to master:

1522359668
GitHub68
zig/master edca173 Jimmi Holst Christensen: std.zig.parser now parses call expr

1522361063
andrewrk
Quick note on volatile and memory reads/writes in general: there is no guarantee about load and store ordering unless you use atomics

1522361084
andrewrk
However volatile loads and stores are ordered according to each other

1522361140
andrewrk
But a good rule of thumb is: volatile is for memory mapped I/O and atomics are for kernel threading.

1522361167
andrewrk
Volatile mixed with kernel threads is almost certainly a bug

1522361502
jacobdufault
andrewrk: (see above) do coroutines have a stack associated with them?

