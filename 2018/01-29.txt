1517188059
benzrf
hi, i was looking over the zig docs & was wondering:

1517188071
benzrf
how exactly does "strict aliasing" work in zig?

1517188102
benzrf
because in C, the precise rule AIUI is that you can't deref a pointer whose type is different from the "effective type" of the object it points to

1517188138
benzrf
but the docs do this:

1517188144
benzrf
so i assume the rule is different in zig?

1517196348
andrewrk
benzrf: you found a serious bug in the docs. My apologies, I did not catch this when I reviewed the patch

1517196425
andrewrk
I'm going to see if I can add a runtime safety check for this so that it will panic

1517196435
benzrf
haha

1517196457
benzrf
which patch?

1517196483
benzrf
that seems like itd be hard to add a check for, though, unless you carry around type info with each pointer?

1517198373
aiwakura
andrewrk I'm having a weird error

1517198379
aiwakura
in zen

1517198411
aiwakura
I'm trying to update build.zig to use a bunch of catch unreachable

1517198666
aiwakura


1517198678
aiwakura
wanna give it a try?

1517198688
aiwakura
I must be doing something really dumb

1517239460
andrewrk
benzrf, it might not be possible to check in all cases, but maybe some common cases can be prevented

1517240123
andrewrk
aiwakura, -> is removed

1517240223
andrewrk
and return types are required now

1517240227
andrewrk
even void

1517241495
GitHub175
[zig] andrewrk pushed 2 new commits to master:

1517241495
GitHub175
zig/master 2b5e0b6 Andrew Kelley: std: fix fn return syntax for zen os

1517241495
GitHub175
zig/master abe6c2d Andrew Kelley: allow packed containers in extern functions

1517245927
MajorLag_
You know what I really like about Zig?   var flask = dungeon.GetYeFlask() ?? exitWithMessage("You can't get ye flask!");  Handling the null without all the busywork means I'll actually handle the null for a change.

1517246150
benzrf
MajorLag_: that's a feature of most languages that distinguish between nullable and non-nullable in the type system :p

1517246166
benzrf
e.g., haskell, rust, the MLs

1517246379
MajorLag_
maybe, but those have other things I don't like about them.

1517246386
benzrf
e.g.?

1517246400
benzrf
oh you mean the language as a whole rather than the specific nullability stuff?

1517246499
MajorLag_
yeah, I like that Zig is as low level as C and doesn't try to force me into some idealistic paradigm, but has quality of life improvements like the above.

1517246634
MajorLag_
And actually has a decent level of documentation, unlike some other "better C" alternatives I could name and also fund.

1517246695
benzrf
"forcing into idealistic paradigm" is a product of viewing what you're used to as "normal"

1517246710
MajorLag_
maybe

1517246715
benzrf
but i probably shouldnt be getting into PL wars right now

1517246716
benzrf
or in this channel

1517246731
benzrf
zig definitely looks nice for writing ABI-compatible code, though

1517246767
benzrf
i've been writing a toy garbage collector for my toy compiler and zig looks like it'd be a gr8 step up from C for that purpose

1517246802
benzrf
i like rust from what i've seen of it, but it's absolutely not suitable for poking around in the stack

1517246855
MajorLag_
What I mean is the difference between "you can't ever do X because it's Y. You have to do it by using our overly abstracted idiomatic mechanism...". I've yet to run into an instance in Zig where I can't do something, i just have to reassure the compiler that I mean what I'm saying occasionally.

1517246882
benzrf
does zig have computed jumps

1517246929
benzrf
cuz i bet asm writers from decades ago would think it's idealistic and child-padded to not allow that :-)

1517247002
benzrf
in any case, i wrote a separate garbage collector of a different style (mark-and-sweep) before this, but i had to implement an interpreter first so that i'd have something to gc for - i initially tried writing it in rust, since it seemed much nicer than C for writing an interpreter, but i realized pretty quickly that rust is specifically designed to prevent you from setting up the kind of data structures that a

1517247004
benzrf
gc would operate on

1517247006
benzrf
lol

1517247058
benzrf
you could technically use refcounted pointers or something but that would just make me feel silly to write a gc on top of

1517247118
andrewrk
benzrf, contrarian opinions are welcome here, as long as you follow the rule in the topic - "be excellent to each other" :)

1517247138
andrewrk
(I'm not calling you out, I'm responding to " i probably shouldnt be getting into PL wars right now")

1517247159
benzrf
well, part of the reason i said that is that i have work i'm supposed to be catching up on >w>

1517247216
benzrf
MajorLag_: i noticed that you said "overly abstracted" -

1517247275
andrewrk
benzrf, no computed jumps  at this time. the idea is on the table

1517247281
benzrf
jeez

1517247289
benzrf
i was using it as an example because i assumed it wouldnt have them :P

1517247318
andrewrk
I mean you're not wrong. we just removed goto

1517247322
benzrf
hah

1517247342
benzrf
anyway, "overly abstracted" is a phrase that only makes sense if you look at each language in terms of how it abstracts over the hardware, rather than as a construct unto itself

1517247344
andrewrk
but if someone can come up with a use case for computed jumps, and there is not a reasonable alternative way to support that use case, that's a strong reason to make it work

1517247357
benzrf
will zig support tail recursion

1517247381
andrewrk
probably. see

1517247383
benzrf
neat

1517247392
MajorLag_
I'm curious what we mean by "computed jumps" in this context.

1517247399
benzrf
my aforementioned compiler was originally gonna target C, but C doesnt support mandating tail recursion, which is kind of critical for my use case

1517247401
benzrf
i ended up using llvm IR

1517247418
andrewrk
we also

1517247427
benzrf
what

1517247450
benzrf
(i guess i wouldve had to switch anyway - C isn't terribly friendly to gc examination, but llvm has specific infrastructure)

1517247455
andrewrk
it might be opt-in. but we want to achieve compile-time known stack size for all threads

1517247477
benzrf
what do you mean by "compile-time known stack size"

1517247485
benzrf
for each function's frame? the max depth?

1517247488
andrewrk
yes

1517247496
benzrf
...which one?

1517247514
andrewrk
e.g. you can guarantee no stack overflow at compile time, and  when creating a kernel thread, you can create it with a small stack size guaranteed to not overflow

1517247525
benzrf
now THAT seems straitjacketing to me

1517247537
andrewrk
that's the reason for making it opt-in

1517247561
andrewrk
you get some nice benefits if you do it though

1517247566
benzrf
annotating every function call seems bananas

1517247582
andrewrk
you wouldn't annotate every function call, the compiler can figure out the call graph

1517247595
benzrf
oh

1517247606
andrewrk
you'd have to annotate:  external function prototypes,  function pointers,  non-tail recursion

1517247620
benzrf
i suppose "recursion" is an overloaded term

1517247629
benzrf
that sounds like a hell of a mess

1517247641
benzrf
you'd need to be very very specific about what kind of behavior is allowed to get what guarantees

1517247645
benzrf
sounds kinda like rust to me ;)

1517247651
andrewrk
yeah. at this point it's just an idea. might not work out. obviously I wouldn't do it if it made the language to difficult to use

1517247666
andrewrk
*too. and yes I agree with that sentiment

1517247678
benzrf
well, to be clear - it sounds like an interesting idea if done right

1517247690
andrewrk
it's highly desirable for OS and embedded targets

1517247696
benzrf
i was just poking fun at how it seemed, to me, to be a bit at odds with the apparent language philosophy

1517247711
andrewrk
how would you characterize the apparent language philosophy?

1517247716
benzrf
from what ive seen, it seems like the zig approach would be to allow explicit tail recursion and then tell the user to not have cycles in their call graph

1517247758
benzrf
"avoid locally unsafe behavior unless the user says 'yeah i want that' but don't impose strong static guarantees in general, in order to get out of the user's way"

1517247769
benzrf
i may be wrong - i havent looked in depth

1517247794
benzrf
sorry, s/strong static guarantees in general/strong static guarantees regarding whole-program correctness/

1517247806
andrewrk
benzrf, that sounds fair. but we also try to give users tools to make their code robust and handle all the edge cases

1517247821
andrewrk
opt-in to having a statically determined stack size would be one such tool

1517247884
benzrf
i mean the elevator pitch doesnt sound too incompatible - i just mean that if you examine what you'd need to do to handle that goal really robustly, it seems like it would /end up/ being at odds

1517247905
andrewrk
that's fair

1517247988
benzrf
bbl

1517250350
MajorLag_
benzrf made me curious, so I thought I'd try to implement computed jumps using nakedcc and an array of fn. So far I've managed to crash the compiler and discovered that it can't parse array initialization syntax for arrays of functions.

1517250360
benzrf
lol

1517250423
benzrf
the compiler i mentioned writing is for a tiny subset of haskell

1517250439
benzrf
i wanted to try implementing something approximating the stg machine that ghc uses

1517250449
benzrf
which is based entirely on computed jumps...

1517250489
benzrf
i ended up tweaking the concept heavily to use the system callstack and tail recursion when possible

1517250500
benzrf
but it was a pain :v

1517250516
andrewrk
MajorLag_, are you sure you're just not forgetting `void`?

1517250544
benzrf
maybe i shouldve just targeted assembly

1517250640
andrewrk
[]nakedcc fn()void{fn1, fn2, fn3}

1517250642
andrewrk
this worked for me

1517250644
MajorLag_
const nfunc = nakedcc fn() void;   var arr: []nfunc = {a, b, c};       ==>   error: expected token ';', found ','

1517250657
MajorLag_
ah, ok, I'm just doing array syntax wrong

1517250665
MajorLag_
for some reason

1517250672
andrewrk
maybe because array syntax is confusing

1517250703
MajorLag_
I don't think it is really, I'm just easily confused.

1517250808
MajorLag_
compiler still crashes though. I'll see if I can minimize the test case.

1517250827
andrewrk
it could be passing a number literal to assembly

1517250975
andrewrk
huh I don't have an issue for this. I'll open one.

1517251185
MajorLag_
it's pretty minimal it turns out, just calling an empty nakedcc fn() void causes it

1517251198
andrewrk
oh, that makes sense

1517251221
andrewrk
see also

1517251248
andrewrk
wait, nvm the compiler shouldn't crash

1517251262
MajorLag_
yeah, and there's nothing in the fucntion body at all.

1517251333
MajorLag_
making it noreturn instead of void and adding a @panic didn't help

1517251857
andrewrk
MajorLag_, do you think it should be legal to call nakedcc functions?

1517251889
andrewrk
and should you be allowed to pass parameters?

1517252119
andrewrk
hm. you'd have to specify the calling convention at the callsite

1517252123
andrewrk
so for now I'm going to make it an error

1517252475
MajorLag_
what are they for if you can't call them?

1517252497
GitHub35
[zig] andrewrk pushed 1 new commit to master:

1517252497
GitHub35
zig/master 1c60f31 Andrew Kelley: add compile error for calling naked function

1517252499
andrewrk
MajorLag_, for entry points in a .o file

1517252512
andrewrk
or calling from assembly

1517252536
andrewrk
we could add support for specifying calling convention at callsite

1517252551
andrewrk
here are some examples of usage of nakedcc:

1517252553
andrewrk


1517252565
andrewrk


1517252682
MajorLag_
well, outside of my little experiment I'm not really sure what the use case would be, but that of course doesn't mean it doesn't exist.

1517252869
andrewrk
hm I think we could allow calling naked functions with no args

1517252878
andrewrk
and no return value

1517252930
andrewrk
you could also take a naked function and @ptrCast it to a normal function and then call it. that's valid

1517252935
andrewrk
I think that's the best way to call nakedcc functions actually.

1517253095
MajorLag_
Would that end up wrapping it in a pro/epilog needlessly?

1517253229
andrewrk
presumably you want to be able to return from the naked function, right?

1517253248
andrewrk
it would have the prolog/epilogue of whatever calling convention you casted it to

1517253326
andrewrk
if you wanted it to be more like a goto, you could tail call it

1517253401
MajorLag_
Yeah, that makes sense.

1517253791
jfo
++ opt in disallowed non tail recursion, -- mandatory same

1517258698
benzrf
andrewrk: on the topic of my original question - is there a spec regarding what type compatability, etc, looks like, for the purposes of pointer aliasing rules

1517258736
benzrf
i see that there's some sort of allocator feature thing, tho the docu seems sparse, & how would that interact with this

1517258756
andrewrk
benzrf, not yet. and truth be told, we don't actually codegen the TBAA in LLVM yet

1517258767
benzrf
tbaa = ?

1517258767
andrewrk
so what is in the docs really is just: "warning: we're gonna have TBAA"

1517258770
benzrf
hah

1517258774
benzrf
type based ? aliasing?

1517258777
andrewrk
yes

1517258785
benzrf
oh alias analysis

1517258785
andrewrk


1517258792
benzrf
aha

1517258809
benzrf
good thing my compiler writing has forced me to already get familiar with llvm ir :>

1517258851
benzrf
i wish they had a better specification of the semantics of non-integral pointer types :(

1517258881
benzrf
i'm using them for the gc intrinsics features, and its not clear to me whether im causing UB when i indirectly convert them into ints, which i have to do since i have some code that's generic over the data it handles

1517258893
benzrf
er, not "int"s, but integral types

1517258899
andrewrk
is there a particular problem you ran into?

1517258919
benzrf
no, im just paranoid because it's not very detailed - but this is unrelated to zig anyway

1517258932
benzrf
er, unless zig uses non-integral pointer types somehow?

1517258936
benzrf
in llvm

1517258950
andrewrk
no, all our pointer types are integral currently

1517258955
andrewrk
I don't have a plan to break from that

1517258967
benzrf
yeah, im just rambling about tangential stuff

1517258998
andrewrk
but if, for example, we could prove that a pointer size is never depended on, we could insert runtime safety checks alognside the pointer, in debug mode

1517259015
benzrf
i'm not sure what you mean by that?

1517259024
andrewrk
err, I mean insert data alongside the pointer, to use for runtime safety checks

1517259030
benzrf
oh

1517259036
benzrf
well i don't think that's what non integral pointer types do in llvm

1517259048
benzrf
i think they were just introduced for use in the garbage collection infrastructure

1517259062
andrewrk
for example, in zig, unless you specify `packed union` or `extern union`, @sizeOf(TheUnion) is not guaranteed to be minimal. it might have a secret field used for a safety check

1517259085
andrewrk
(in fact in debug builds it does, and you get a panic if you access the wrong field of a union)

1517259113
andrewrk
ah I see. zig ignores 100% of the garbage collection features of LLVM

1517259116
benzrf
yeah

1517259137
benzrf
they only exist to block optimizations that make it unclear how pointers are related to each other, which might destroy the information llvm needs to generate relocation info

1517259142
benzrf
...as far as i can tell

1517259149
benzrf
like i said, the docu is pretty scant

1517259160
andrewrk
I'm just thankful we have LangRef.html at all :)

1517259165
benzrf
no kidding

1517259169
andrewrk
It's the 1 browser tab that I never close

1517259434
andrewrk
it just occurred to me that the TBAA LLVM supports has the concept of hierarchies because of inheritance, but zig can largely ignore that

1517259777
andrewrk
I'm really tempted to make it a rule that mutable pointer parameters in zig must not alias by default

1517259847
andrewrk
but it's pretty hard to enforce, somewhat easy to do on accident, and the undefined behavior only exerts itself sometimes

1517259903
andrewrk
on the other hand it allows for a decent optimization, and would eliminate the 1 way that rust can be faster than zig

1517260026
benzrf
define "alias"

1517260035
benzrf
can i pass two pointers where incrementing one would alias the other?

1517260144
benzrf
also - the majority of rust's supposed pain points are the rules that prevent you from causing UB because of that requirement

1517260159
benzrf
you'd have to contort yourself just as much to avoid the UB either way, but the compiler won't tell you that you fucked up

1517260174
benzrf
well.... i guess "you'd have to contort yourself just as much to avoid the UB either way" is arguable :v

1517260186
andrewrk
that's probably right

1517260202
benzrf
actually hmmmm no, what you're describing is a lot more limited

1517260225
benzrf
rust promises

1517260252
andrewrk
example of what I'm proposing:

1517260262
andrewrk
we already have this with putting "noalias" in front of a paramater (restrict in C)

1517260267
andrewrk
but this would make it the default

1517260278
benzrf
well, i get that example

1517260284
benzrf
i guess i dont know the semantics of noalias yet

1517260300
benzrf
how does noalias account for situations like i asked about, where one point can be used to get to another pointer even though they arent equal?

1517260320
benzrf
e.g. "int i[2]; foo(&i[0], &i[1]);"

1517260340
benzrf
does it have some sort of transitive requirement thing?

1517260363
andrewrk
hm let me think about this

1517260368
benzrf
sorry that was gibberish - does it have some kind of requirement that you can't have a relation between two pointers which is the transitive closure of certain operations

1517260414
andrewrk
it's a limitation of what you can do, directly through a single pointer

1517260428
benzrf
so as soon as i modify any of my pointers, then, all bets are off

1517260434
andrewrk
yeah

1517260457
benzrf
well, if that's your rule, i don't think "the 1 way that rust can be faster than zig" quite applies :p

1517260474
benzrf
that's a MUCH weaker guarantee the compiler gets to work with

1517260491
andrewrk
so in this example, this does violate it, if you for example did this in foo:  *a[1] += 1; *b

1517260504
benzrf
wait, what?

1517260508
andrewrk
because you modified b through a

1517260512
benzrf
wait

1517260514
benzrf
oh

1517260521
benzrf
when i said "all bets are off" i meant the compiler no longer gets to assume anything

1517260524
andrewrk
I thought you meant a pointer indirection

1517260525
benzrf
you're saying i get ub if i modify any pointers?

1517260543
benzrf
oh wait

1517260552
andrewrk
what you aren't allowed to do, is change the bytes that ptr1 points to, and, doing so, also change the bytes that ptr2 points to

1517260564
andrewrk
where "bytes that ptr points to" is defined as whatever bytes you access via ptr

1517260604
benzrf
well, that really just defers the issue - what if i modify a and then do "b[-1]"

1517260623
andrewrk
if you promised that a and b are noalias, that violates it

1517260640
benzrf
well, then that leads back to the question i tried to ask - 16:12 <benzrf> sorry that was gibberish - does it have some kind of requirement that you can't have a relation between two pointers which is the transitive closure of certain operations

1517260685
andrewrk
I don't understand some of those words

1517260706
andrewrk
I'm not sure what transitive closure of certain operations means

1517260730
benzrf
is there a rule like - i have certain operations, like indexing and incrementing and taking struct children, and if i can connect two pointers by a sequence of these, then i'm violating the rule

1517260742
andrewrk
yeah I think that's right

1517260747
benzrf
harsh

1517260754
andrewrk
agreed

1517260762
andrewrk
you

1517260771
andrewrk
which makes it an unfortunate missed optimization much of the time

1517260774
benzrf
immediate example off the top of my head -

1517260790
benzrf
what if i have some kind of data structure where there's one metadata node at the top, and i have a function where i pass in the top node plus a pointer to the child i wanna manipulate

1517260808
benzrf
oh wait the rule is just if i actually go and use the pointer i get from that?

1517260815
andrewrk
indirect pointers don't count

1517260819
andrewrk
that's fine

1517260827
benzrf
oh i see

1517260841
benzrf
so it only applies to operations which don't require a load or store

1517260844
andrewrk
exactly

1517260851
benzrf
ah that's a bit less harsh :)

1517260858
andrewrk
yeah. that's why it's tempting

1517260879
andrewrk
if we could provide reasonable debug runtime safety checks somehow

1517260886
andrewrk
I would 100% make that the default requirement

1517260902
benzrf
i feel like increasing the UB surface without making it statically harder to hit that surface is bad ergonomics

1517260912
andrewrk
I agree

1517260914
benzrf
runtime checks are all very well but they don't fully compensate at all

1517260917
benzrf
kk

1517260925
andrewrk
that's true. But we gotta go fast

1517260946
benzrf
ability to reason about a language is fundamentally inversely connected to its power

1517260961
benzrf
one has to give

1517260981
benzrf
well, depending on the definition of "power", of course

1517261001
andrewrk
maybe it's not so bad to leave it off by default, because you can always use the "noalias" keyword in speed bottlenecks

1517261014
benzrf
¯\_(ツ)_/¯

1517261263
benzrf
so hmm hold on

1517261293
benzrf
actually wait i think i can figure this out nvm

1517261808
benzrf
yeah ok after reading this

1517262486
MajorLag_
Did Zig used to have a "use" keyword? It's in my UDL which was copied from zig.vim, but it isn't in the docs that I can see.

1517262507
andrewrk
it still has it

1517262514
andrewrk
use @import("foo.zig");

1517262544
andrewrk
it's recommended to generally avoid it, but it's useful for example in this situation:

1517262588
andrewrk
I might replace it or redefine it to only work in this use case

1517262609
andrewrk
unless someone really pushes the case that we should keep use and convinces me to keep it as is

1517262631
MajorLag_
Can it not be used on "std"?  use @import("std");  => error: invalid token: 'use'

1517262691
andrewrk
maybe you're trying to use it in a scope other than top level

1517262706
andrewrk
which, I agree, if we have it then it should work at any scope

1517262723
MajorLag_
Yeah, it's in a test{} block

1517262735
andrewrk
currently not supported

1517262769
MajorLag_
That's fine, I have little use for it, I just didn't know what it was and my tests on using it for namespaces produced errors.

1517262880
MajorLag_
One way it could be useful, and you've probably already thought of this, is for struct composition, but that could be considered less clear.

1517262903
andrewrk
e.g. include the fields of another struct?

1517262939
MajorLag_
yeah, a syntactical convenience over having a member that is that struct.

1517262960
andrewrk
I'm not convinced that this is better than a member that is a struct

1517262966
andrewrk
aside from looking prettier

1517263042
MajorLag_
Me either. I had to work with some kernel ABI facing Go code that used a lot of that and I'm not really sure it didn't just make things slightly more confusing.

1517263335
MajorLag_
And in your c.zig case, couldn't you have just declared: pub const stuff = @cImport({... and then in main.zig: const c = @import("c.zig").stuff; ?

1517263354
andrewrk
yes, that's true

1517263395
andrewrk
if you're trying to provide a particular API though, it seems like you should be able to do that

1517266041
MajorLag_
Well one place I can think of it being a problem in the general case is for readability. If I'm reading a Zig file with like 10 "use" imports, then I have no idea which one any given symbol came from. That's probably not a big deal though.

1517266094
andrewrk
that's the main reason use is discouraged

1517266105
andrewrk
also it helps the compiler go faster to avoid 'use'

1517266124
andrewrk
instead of telling the compiler to search for an identifier, you're telling it exactly where it is

1517266156
andrewrk
zig has to resolve all the use decls to look something up; it won't even load a @import("foo.zig") from disk until a decl through that import is accessed

