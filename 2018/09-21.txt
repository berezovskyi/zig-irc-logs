1537488045
wink_
andrewrk: do you generally use gcc or clang as your build compiler when build llvm?

1537488101
andrewrk
wink_, whatever is the default compiler on the system

1537488170
wink_
So generally clang on osX and gcc on linux?

1537488234
wink_
(I'm on Arch Linux and have both installed but gcc is the default)

1537497238
wilsonk
I built LLVM-7 on Linux (Ubuntu 16.04) with GCC-5.4 and Clang-7 (after bulding clang-7 with GCC-5.4 obviously).  Each built without incident for me...just so people know.  The final resulting clang-7 buillds llvm/clang/compiler-rt/lld about %14 faster than GCC-5.4!  That is pretty significant, I thought. So it takes 6 mins 13 seconds on average to build llvm/clang/compiler-rt/lld now.

1537504744
cgag
vimquit

1537504760
cgag
hmm, wonder how "vim" got there.

1537506270
nornagon
are there any examples of integrating zig's build system with an external build system? I'd like to vendor skia as part of a project, and skia is built with gn. it'd be neat if i could wrap skia's build and have it automatically built as part of the zig build

1537506941
andrewrk
nornagon, you could have the external build system call `zig build-exe ...` or `zig build-lib ...` directly, or if you use the zig build system you coudl use the Command step. Here's an example:

1537506968
andrewrk
instead of exe.getOutputPath() you would use the skia build system command

1537506972
nornagon
oh hm, i hadn't considered driving zig through an external build system

1537506978
nornagon
that makes sense

1537506989
andrewrk
if you already have a build system, that probably makes the most sense

1537507001
andrewrk
`zig build` can help you avoid yet another dependency if you don't already

1537507071
nornagon
is there a way you can specify c include paths with `zig build-exe`?

1537507077
andrewrk
yes

1537507083
andrewrk
-isystem or -dirafter

1537507099
andrewrk
I think we can add -I like C compilers but I haven't yet

1537507168
andrewrk
I'm headed to bed. if you have any more questions feel free to leave them for me here and I'll answer in the morning. you can check the logs at your leisure

1537509237
very-mediocre
Controversial but important thing to consider: andrewrk, be wary of adding a "Code of conduct" to your project

1537509259
very-mediocre
once the marxist mob moves in and ousts you, the drama begins

1537509260
very-mediocre


1537509277
very-mediocre
and so it starts.

1537509317
very-mediocre
Contrary to what they claim, their CoC does not have a monopoly on egalitarian behavior

1537509327
very-mediocre
so imho be wary of the pressure to accept it.

1537509358
very-mediocre
Just my 2 cents after watching several projects get taken over by the dispensers of false moral outrage.

1537509428
very-mediocre
You can be egalitarian, inclusive, whatever, without paying the "protection money" (social credit is the currency they manipulate).

1537509857
very-mediocre
The model is akin to buying indulgences, just add this piece of paper and you're suddenly a paragon of virtue. The convenience is part of the scam.

1537510580
nornagon
good username

1537511450
nornagon
trying to build a glfw example on macOS, and i'm getting this error from lld:

1537511452
nornagon
Assertion failed: (dylib.file), function exports, file /Users/nornagon/Source/Reference/zig/deps/lld/lib/ReaderWriter/MachO/File.h, line 365.

1537511461
nornagon
here's the repro:

1537512749
nornagon
I added some logging to File.h, and it looks like the framework that triggers it is CoreGraphics

1537512898
nornagon
ah, maybe it's failing to find one of the other frameworks that CoreGraphics refers to

1537512902
nornagon
i'll take another look tomorrow

1537518135
Jenz
Hey, is there no docs for the stdlib?

1537518188
Jenz
And I think zig looks very promising :)

1537518764
very-mediocre
afaik no docs yet for it and it's still in flux

1537518817
very-mediocre
but zig code is pretty clean so it's not very hard to grasp the std code by reading it:

1537519303
unique_id
yeah you get used to the stdlib pretty quickly. And you can always search a file for "pub fn" to see all the functions that you can use :)

1537519792
unique_id
very-mediocre: About the CoC thing, I agree with you but most people don't see what you see, they're not observant enough. It's best to discuss this in private.

1537520843
DutchGh0st
mh, @compileError's should always error with the message, right?

1537521015
DutchGh0st
I can see this being debatable for correctness, but it does not give any compile error on windows at least:

1537521203
very-mediocre
unique_id: part of the scam is you're not allowed to call it out. I have said nothing objectionable about anyone, I have not defined classes of people that are better or worse than others. If anything that's their MO.

1537521208
very-mediocre
plot twist: I'm not even white.

1537521241
very-mediocre
I'm sure it's best to discuss in private lest accusations of racism/whateverism are made, but it's plainly untrue.

1537521328
very-mediocre
In the end it's not my project, but I just needed to say this because I do care about it and it's such a shame how politically motivated groups are taking over communities.

1537521366
very-mediocre
Anything I write here is intended to provide a data point for andrewrk's perusal, nothing more.

1537521422
DutchGh0st
maybe this is a little bit worse:

1537522520
very-mediocre
I'm unclear about some aspects of how comptime works. In this code:

1537522564
very-mediocre
...in usage, is it necessary to call `comptime range()` or would `range()` suffice for it to run at comptime?

1537522573
very-mediocre
e.g. line 25

1537522589
DutchGh0st
oh my

1537522610
DutchGh0st
if else clauses in the return type to figure out the length of the array, thats cool

1537522659
very-mediocre
I was reflexively reaching for the nonexistent ternary operator for those :)

1537522679
DutchGh0st
ternary, meh

1537522713
DutchGh0st
but I guess the range function is written in such a way that you

1537522745
very-mediocre
All the params are comptime though

1537522762
very-mediocre
I guess I'm wondering if zig is currently smart enough to know that

1537522772
DutchGh0st
then you can't call it with non-comptime variables

1537522792
DutchGh0st
try making just a variable, and pass it to the range function, won't work

1537522806
very-mediocre
Yes, but if everything about it is comptime-known, then certainly it should always be run at comptime, no?

1537522827
very-mediocre
Yes, I'm aware that it's static-only for now, it was an experiment

1537522858
DutchGh0st
mhh, comptime param's dont mean the function is comptime

1537522883
very-mediocre
that's true, but it's "comptime-pure"

1537522884
very-mediocre
so to speak

1537522906
very-mediocre
It doesn't touch anything not-comptime

1537522913
DutchGh0st
probably still need to write 'comptime range(....)' in order to fully have it comptime evaluated

1537522925
very-mediocre
What if I write `inline while`

1537522929
very-mediocre
on line 15

1537522984
DutchGh0st
mhhh

1537523025
very-mediocre
This simple code exposed a lot of flaws in my understanding

1537523053
DutchGh0st
if you write inline while, what I think is that line 16 gets unrolled

1537523080
very-mediocre
Yes, that makes it static/comptime

1537523082
DutchGh0st
e.g, this simple function here:

1537523102
very-mediocre
at that point, if I were to call `range()` instead of `comptime range()` what difference would remain?

1537523126
DutchGh0st
basically a lookup of 'is the variable less than 10? return 1, less than 100? return 2, less than 1000? return 3 etc etc'

1537523163
DutchGh0st
that the input still has to be comptime

1537523185
very-mediocre
hmm

1537523218
very-mediocre
And another thing I'm exploring here, is whether one can write it in such a way as to benefit from comptime when everything is comptime-known

1537523221
DutchGh0st
but why not make everything runtime?

1537523225
very-mediocre
but also allow it to run dynamically

1537523245
very-mediocre
>but why not make everything runtime? -- because it's a learning project :)

1537523268
very-mediocre
also generating huge ranges at runtime can be very slow

1537523301
DutchGh0st
wait but you'r making an array also an returning that...

1537523326
DutchGh0st
lazy evaluation helps on that point,

1537523343
very-mediocre
lazy evaluation amortizes the processor load

1537523363
DutchGh0st
comptime lazy evaluation is a thing

1537523370
very-mediocre
really?

1537523376
very-mediocre
Isn't it equivalent to what this code is doing?

1537523388
DutchGh0st
make a struct, that has like a start, a stepsize and a end,

1537523411
very-mediocre
Ultimately it's either a precomputed array (comptime) or runtime evaluated.

1537523431
DutchGh0st
make something like a 'next' function that returns an optional integer (the type would be ?usize, or ?u32, or whatever you like there),

1537523452
very-mediocre
I wouldn't call that "comptime lazy evaluation"

1537523464
DutchGh0st
you could also make a 'size' function that returns how many elements you expect to come,

1537523473
Jenz
Thanks for answer previously very-mediocre

1537523486
very-mediocre
np :]

1537523573
DutchGh0st
and then call "comptime r  = comptime range(...);" "comptime buff: [r.size()] u32 = undefined;", "for(buff) |*elem| { elem.* = r.next() catch unreachable }"

1537523633
very-mediocre
oh, I see what you mean

1537523641
very-mediocre
a non-comptime function, that you later call at comptime

1537523651
DutchGh0st
or you could just make a `while(r.next() |item| { // do stuff }' inside a comptime block then

1537523664
very-mediocre
Sure

1537523675
very-mediocre
Your response was very helpful to me actually

1537523702
very-mediocre
I've been away from zig a couple of months and I hadn't grasped comptime back then

1537523716
very-mediocre
now you've helped me realize that non comptime stuff can be run at comptime

1537523733
very-mediocre
(trying to get back into zig)

1537523884
very-mediocre
DutchGh0st: it's coming back to me now, the reason I wrote it as a comptime function is the return type has to be comptime-known

1537523907
very-mediocre
otherwise memory would have to be allocated

1537524056
Jenz
I love the build system

1537524077
Jenz
Though I don't get much of is, as there's no doc haha

1537524082
DutchGh0st
thats why I suggested using a lazy sequence

1537524084
DutchGh0st
like this:

1537524093
very-mediocre
jenz: there are docs, just not stdlib docs:

1537524104
DutchGh0st


1537524144
Jenz
yeah I know, I was reffering to the build system docs :)

1537524145
DutchGh0st
whichs works both at run and compiletime

1537524151
very-mediocre
DutchGh0st: that's awesome

1537524235
DutchGh0st
and if you wanted to, you could making it more flexible!

1537524253
DutchGh0st
if you want your range to be a range of u32, you could do that, hold on

1537524273
very-mediocre
yes I can see how to do that :)

1537524356
Jenz
Any contributors here?

1537524372
Jenz
(To zig)

1537524393
very-mediocre
DutchGh0st: hm I think the use case in your pastebin differs from what I had in mind, I was aiming for the Python-esque "looping at runtime through a range"

1537524402
very-mediocre
where the range itself is static, however

1537524432
DutchGh0st
comptime var r = comptime range.init(10, 100, 1000);

1537524444
DutchGh0st
then you can just call a runtime .next() I think?

1537524445
DutchGh0st
hold on!

1537524459
very-mediocre
yes but then .next() generates the values at runtime, which amortizes the cost (so it's not that slow

1537524468
very-mediocre
but it's still not as fast as precomputing the entire rangw

1537524533
Jenz
No contributors here?

1537524564
very-mediocre
jenz: andrewrk is the project owner/maintainer

1537524574
DutchGh0st
what do you mean by precomputing?

1537524576
very-mediocre
he's probably asleep (US timezone)

1537524578
DutchGh0st
create a list?

1537524592
very-mediocre
DutchGh0st: I mean the entire array of numbers in the range is static, not generated at runtime

1537524593
Jenz
I see, thanks I'll remember that

1537524616
very-mediocre
jenz: some other contributors chat here too

1537524665
Jenz
Hm, but none seems to be interested atm

1537524672
Jenz
(if here)

1537524694
very-mediocre
consider time zones :) andrewrk is very active overall

1537524704
DutchGh0st
okey, you can very-mediocre

1537524722
Jenz
I don't doubt it

1537524724
DutchGh0st


1537524768
very-mediocre
DutchGh0st: I'm not sure that's equivalent to my `range` function

1537524790
DutchGh0st
if Im correct that just expands to "sum += 10; sum += 20; sum += 30" at compiletime, but those statements get runned at runtime

1537524794
very-mediocre
the outcome is the same but I think the codegen here might be more verbose

1537524856
very-mediocre
Your approach gives us a fully unrolled loop

1537524868
very-mediocre
anyway both approaches seem to have pros/cons

1537524903
very-mediocre
I was aiming for a breezy, low mental load way of looping through any range that comes to mind, and having the compiler treat the range like an inline defined array

1537524922
DutchGh0st
but then you still need to loop over the array

1537524929
very-mediocre
Yes, that's fine with me

1537524937
DutchGh0st
2 secs

1537524941
very-mediocre
That's the desired use case in fact

1537525077
DutchGh0st


1537525103
very-mediocre
yep that works

1537525113
very-mediocre
but usability is lower than my approach

1537525127
very-mediocre
but mine only works for comptime known ranges.

1537525127
DutchGh0st
the last loop is runtime, the loop that fills the array is comptime

1537525133
very-mediocre
yes, I understand

1537525145
very-mediocre
I'm modeling my approach after other languages that provide ranges natively

1537525152
DutchGh0st
you could have a function that takes a range, and returns the buffer

1537525164
very-mediocre
DutchGh0st: that's what my function is :)

1537525169
DutchGh0st
so you dont have to write the filling loop anymore

1537525185
very-mediocre
that's literally what this is in the first place:

1537525195
very-mediocre
fun convo btw :)

1537525219
very-mediocre
first I thought "my approach sucks" after seeing your solution

1537525225
very-mediocre
then I realized there are pros and cons

1537525230
DutchGh0st
I guess, but this is about what I know of comptime hahaha

1537525255
DutchGh0st
it's difficult to get somethimes, but yeah, its fun to play with!

1537525287
DutchGh0st
anyway, gotta go now! goodluck with figuring out what you think solves your problem! :D

1537525289
DutchGh0st
byee!

1537525291
very-mediocre
bye

1537525315
very-mediocre
I don't have a real problem yet, this is just an experiment I wrote a couple months ago for learning comptime, revisited to day as it's my day off :)

1537525386
very-mediocre
jenz: hang around, I'm sure you will get responses from people involved in zig

1537525391
very-mediocre
they are very helpful

1537525457
Jenz
Thanks, I will

1537525476
very-mediocre
What questions do you have? I might be able to answer some

1537525574
Jenz
I didn't have any, I just wanted to tell them thanks, and that they they've done a good job :)

1537525582
very-mediocre
DutchGh0st: in case you read chatlogs, look at this:

1537525593
very-mediocre
That's what I was aiming for with my `range` implementation

1537525604
very-mediocre
jenz: andrewrk often reads the chatlogs

1537525624
very-mediocre
zig is indeed awesome :)

1537525627
Jenz
Though just now I came across something, what does this syntax do?: `[][]const u8{exe.getOutputPath()}`

1537525658
very-mediocre
{ } is an array initializer

1537525721
Jenz
Then, does this getOutputPath return a two-dimensional array?

1537525721
very-mediocre
example: const my_array: []u8 = "A"; is the same as the inline array ([]u8 {'A'})

1537525735
very-mediocre
I think so yes.

1537525750
Jenz
Ah ok, thanks then it makes sense

1537525808
Jenz
`exe` is of whatever type `Builder#addExecutable` returns

1537525845
very-mediocre
yes

1537525851
very-mediocre


1537525871
very-mediocre
you can see it returns a pointer to a LibExeObjStep

1537525903
very-mediocre
and that's defined here:

1537525915
Jenz
Yeah, thanks, I'll be back, gtg, class

1537525923
very-mediocre
bye.

1537526291
Hejsil
very-mediocre, for ranges that go from 0-n, this can be used:

1537526353
Hejsil
Not a general purpose range, but it has the nice property of briefness with no runtime storage

1537526983
very-mediocre
nice

1537527003
very-mediocre
here you're benefiting from `i`

1537527072
very-mediocre
I actually don't get the appeal of ranges like:

1537527084
very-mediocre
but people seem to really love them, and a lot of languages advertise having ranges like this...

1537527133
Hejsil
I very rarely need these kinds of ranges. I only use my "to" function in some test code

1537527163
very-mediocre
I suspect they might be popular around data science circles

1537527169
very-mediocre
those people tend to use Python, Julia, etc

1537527205
very-mediocre
after all this discussion I find my solution not-so-bad after all

1537527235
Hejsil
Here is a range :) var i: usize = offset; while (i < end) : (i += step) { }

1537527241
very-mediocre
:)

1537527302
very-mediocre
This has been a good thought experiment

1537527311
very-mediocre
It's got me thinking about a discussion I had with andrewrk a couple of months ago

1537527324
very-mediocre
about zig trying to run things at comptime if everything about them is comptime-known

1537527373
very-mediocre
then I could change the signature from: pub fn range(comptime inclusive: bool, comptime a: comptime_int, comptime b: comptime_int, comptime step: comptime_int)

1537527386
very-mediocre
to use a more generic int (not sure which yet)

1537527398
very-mediocre
(perhaps with generics)

1537527415
very-mediocre
and it'd work statically and dynamically

1537527478
very-mediocre
Another thing that'd be cool is if `comptime_int` would auto-cast to a runtime int value

1537527532
Hejsil
Not sure I understand this one. Doesn't it already do this?

1537527545
very-mediocre
Yes and no

1537527552
Hejsil
(casting to any i/ux that is)

1537527563
very-mediocre
it does infer it for literals I believe

1537527579
very-mediocre
let me review this, I forgot what the exact case was where it didn't happen

1537527626
very-mediocre


1537527717
very-mediocre
iirc I encountered something like this as well when writing range.zig

1537527730
very-mediocre
trying to remember, it's been 2 months S:

1537527800
Hejsil
Aaah, right

1537527844
very-mediocre
iirc (could be way off) the original range function I wrote returned comptime_int

1537527859
very-mediocre
and I think that caused errors

1537528005
DutchGh0st
very-mediocre: , reading about the ranges in kotlin,

1537528042
DutchGh0st
but are they lazily generated? or does it generate a whole array behind the scenes?

1537528076
very-mediocre
No idea how it's implemented

1537528079
Hejsil
It probably just generates the appropriate loop

1537528087
Hejsil
So lazy, i guess

1537528114
very-mediocre
lazy but still without the overhead of a stream like .next()

1537528125
very-mediocre
(is my best guess)

1537528196
Hejsil
Hmmm... Actually, it probalby generates some datastructure that has a next()

1537528214
Hejsil
Because they work without loops

1537528243
DutchGh0st
I broke the compiler

1537528244
DutchGh0st
yay

1537528245
very-mediocre
they aren't iterators though afaik

1537528250
DutchGh0st
unreachable: C:\projects\zig-d3l86\src\analyze.cpp:is_container:3912

1537528287
Hejsil
^ I've hit is one as well, but was lazy, and didn't wonna try to make a small example

1537528305
DutchGh0st
Ill try

1537528320
Hejsil
Probably some comptime stuff

1537528322
DutchGh0st
I think I know where to look

1537528324
DutchGh0st
yeah

1537528338
DutchGh0st
just like concatting a comptime undefined with a defined array segfaults

1537528394
DutchGh0st
sure, it's probably UB without  comptime, still a segfault should not happen o.O

1537528601
DutchGh0st
reduces to couple of lines

1537528742
DutchGh0st
but I dont get it, why am I able to dereference a @This() ?

1537528744
DutchGh0st
its not a ptr

1537528751
DutchGh0st
is it>?

1537528828
Hejsil
In Zig IR any identifier is a ptr deref, as far as I know

1537528843
Hejsil
And sometimes (through bugs) it slips into userland code

1537528861
Hejsil
This is probably related to that

1537528896
DutchGh0st


1537528924
DutchGh0st
small enough? ^^

1537528945
DutchGh0st
what is your github, Hejsil?

1537528950
Hejsil
Small enough for an issue, yes :)

1537528955
Hejsil
Can you guess? :)

1537528996
Hejsil
I think this is a bug related to pass by value

1537529002
Hejsil
Idk if @This() is required

1537529004
Hejsil
Is it?

1537529020
DutchGh0st
I dont know

1537529021
DutchGh0st
hold on

1537529037
DutchGh0st
yea

1537529051
DutchGh0st
it is

1537529086
Hejsil
Well, idk then

1537529098
Hejsil
Probalby some @This() + pass by value interaction

1537529238
very-mediocre
what happens if you do `const Self = @This();` in the struct body

1537529244
very-mediocre
then use :Self in the signature?

1537529262
DutchGh0st
probably wont make a difference

1537529269
DutchGh0st
Self would be an alias to @This

1537529285
very-mediocre
I'm asking because @This() is context sensitive

1537529296
very-mediocre
maybe calling it in a function param is tripping it :)

1537529310
DutchGh0st
*@This() <-- ptr to self, *const @This <-- const ptr to self

1537529316
DutchGh0st
@This <-- is self

1537529329
DutchGh0st
that's how I see it at least?

1537529346
very-mediocre
I agree

1537529353
very-mediocre
just saying the way it's evaluated is based on context

1537529374
very-mediocre
it's definitely a bug

1537529390
DutchGh0st
Just like in Rust, `*const @This` would be &self, `*@This()` would be &mut self, and @This would be `self`

1537529444
DutchGh0st
actually Hejsil, the function that takes @This() does not have to be compiletime at all

1537529491
DutchGh0st
but if the struct is compiletime, you create a const / comptime var , and then at runtime call the function, it still gives that message

1537529721
very-mediocre
DutchGh0st: your example doesn't compile for me

1537529729
very-mediocre
on the latest master binary

1537529743
very-mediocre
`error: attempt to dereference non-pointer type 'S'         const crash = self.*.n;`

1537529748
DutchGh0st
I just found out yeah

1537529780
DutchGh0st
well, in that case its not an issue anymore :)

1537530286
DutchGh0st
how do I turn on sigsegv on windows btw?

1537530363
DutchGh0st
or something that tells me a programm failed to execute, because currently when something crashes...the programm just hangs for a second, and then stops executing without any message

1537530956
DutchGh0st
is this a known issue?

1537530991
DutchGh0st
unreachable: /deps/zig/src/analyze.cpp:const_values_equal_ptr:5506

1537530991
DutchGh0st
Aborted (core dumped)

1537549650
andrewrk
nice, we're at full green CI, 2 days after LLVM 7 release. not bad

1537550288
DutchGh0st
good job :D

1537553096
crimson_penguin
o/

1537553315
andrewrk
hi crimson_penguin

1537553354
crimson_penguin
hey!

1537553378
crimson_penguin
I wasn't on Freenode for a while, because they forced SASL, and I was too lazy to set it up with my ZNC server, but then I spent 5 minutes and did it

1537553416
andrewrk
welcome

1537557619
MajorLag
there's no existing way to expand varargs right? Like, lets say I have a wrapper type, I can't have its init() take `args:...` and pass that to the init() of the type it wraps?

1537557973
DutchGh0st
if that was the case you could make decorator functions as well :)

1537557989
Jenz
\o

1537558045
andrewrk
hi Jenz

1537558077
andrewrk
MajorLag, I believe var args auto explodes when you pass it to another function

1537558088
andrewrk
so you can do that

1537558089
Jenz
Thanks so much for zig, I think you've done a fantastic job andrewrk

1537558113
andrewrk
that being said I've been putting off bugs surrounding var args since I plan to remove the feature and add tuples instead

1537558131
andrewrk
thanks Jenz. what are you working on?

1537558138
Jenz
Eh, nothing atm

1537558163
Jenz
Im a bit unexperienced in about everything

1537558201
Jenz
And trying to make sense of the build system

1537558224
andrewrk
of zig build? yeah it's undocumented and at the proof-of-concept stage. rough place to start

1537558278
Jenz
I really like it, nice place to start IMO, rough seems to work, given enough work

1537558286
Jenz
At least for most cases

1537558289
MajorLag
my test suggests that isn't true andrewrk. `error: expected type '*Allocator', found '(args)'`. Not a big deal, I can crack this nut a different way.

1537558322
andrewrk
MajorLag, ah my mistake.

1537558327
MajorLag
In fact, that wasn't a great way to solve it anyway.

1537565062
Jenz
Anyone knows where I can find precompiled LLVM 7? On x86_64-pc-linux-gnu, Arch if that's relevant

1537565164
Jenz
("Arch" as in the distro, not architecture)

1537565483
andrewrk
Jenz, why not use the static zig build from

1537565534
Jenz
Ah, I guess that's a much better idea indeed, thanks!

1537565568
andrewrk
it's updated on successful master branch builds, so you can go back and get newer ones when you want to update

1537565588
Jenz
Alright, sounds good

