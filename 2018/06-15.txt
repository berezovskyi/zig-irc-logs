1529024078
rhencke
Hi, all.  I see references to 'zig fmt' on the issue tracker, but I can't figure out how to invoke it.  I'm building zig from the master branch.  Does anyone know?

1529025563
MajorLag1
andrewrk what's the recommend way to take a [*] to an array?

1529026974
GitHub11
[zig] jayschwa opened pull request #1113: Make `zig version` compliant with SemVer (master...semver-build-metadata)

1529034145
MajorLag1
Well, catching up with pointer reform wasn't so bad. Only took 2 hours to correct all my code. Casting structs to byte slices is much more verbose than it used to be though. And you can't `@ptrCast` to `[*]const c_void` at all.

1529034783
MajorLag1
spoke too soon, something broke in my ini parser. Possibly because something broke in BufMap again.

1529044639
pianofingers
andrewrk, Have you seen Herb's c++ proposal on zero overhead deterministic exceptions? People are really liking it so it's good to be aware of it, C++ is going to be in a huge flux because of them once they finally arrive. They are more efficient than error codes because they share the return channel while a CPU flag (like the carry) is used to indicate whether an error occured. They want to coordinate this ABI extension with C, so in C you would have

1529044639
pianofingers
_Either(int, std_error).

1529044783
pianofingers
Also they seem to be deciding to that throwing exceptions should be done significantly less often than today. No exceptions on precondition violations for example, and they're even thinking about handling OOM differently..not handling them by default. So people would opt in to handling those in some way by calling a different function like try_push_back. I'm not sure what they'll do with constructors then..

1529044967
alexnask
@pianofingers I took a look at that, it seems pretty interesting

1529045062
alexnask
TBH I don't understand why exceptions weren't like that in C++ in the first place

1529045073
alexnask
But then again I wasn't around when C++ was being designed :P

1529045160
very-mediocre
hindsight is 20/20

1529045257
pianofingers
The way they'll integrate them into the current language is "noexcept" = no exceptions, "" = dynamic exceptions, "throws" = static exceptions (no dynamic exceptions).

1529045374
alexnask
This is not gonna confuse beginners at all /s

1529045629
very-mediocre
They need to make a clean break and deprecate more things

1529045641
very-mediocre
There's wayyyy too much baggage in C++

1529045765
alexnask
Yes, it could actually become pretty good, but they will never get rid of features less obscure than trigraphs :p

1529045983
very-mediocre
I really only ever used it as C with classes and generics

1529045994
very-mediocre
beyond that things get messy

1529046196
alexnask
I like me some templates unsuprisingly :P

1529046228
alexnask
RAII is a great idea but yes you need to chose a subset of the language carefully

1529047251
pianofingers
There's quiet a lot of game programmer types rebelling against 'OOP' right now. As far as I can see, the main problem is that people private everything by default and therefore treat any type T as a hierarchy of types that need to communicate instead of just a flat table of data. This I think is really the only problem and it's fitting that Zig doesn't have private. RAII on the other hand is great, but C++ messes it up with non destructive moves.

1529047356
pianofingers
Rust and Zig show better alternatives, with Zig possibly having "var x = clean foo()" or "var x = noclean foo()" <- that's a proposal I noticed that I really like.

1529047627
alexnask
@andrewrk Should @elemCast work for Fn and Promise types?

1529047649
alexnask
I guess promise types should work but I dont see how Fn types would

1529047704
very-mediocre
I don't mind class hierarchies of actual things

1529047719
very-mediocre
what I hate is those very abstract Javaesque classes

1529047725
very-mediocre
overuse of design patterns is infuriating

1529047806
very-mediocre
You end up with interfaces like IGameFactoryFactory

1529047810
very-mediocre
yes that's a factory of a factory

1529047837
very-mediocre
and you have to pass it something that implements IGameModuleDBAdapter

1529047874
very-mediocre
this popular article comes to mind:

1529047896
Triplefox[m]
i am a fan of shallow hierarchies...ime the applications i write usually manifest most simply as an intricate top level

1529047943
Triplefox[m]
deeper code with reusable modules, those are the things i can't get until much later when the code matures...i see it as like harvesting

1529048031
very-mediocre
I think erring on the side of pure functions fixes a lot of these things

1529048051
very-mediocre
it helps you identify if a function or structure can be a module on its own

1529048100
very-mediocre
The problem with OOP is nobody can decide what should be its own module/abstraction

1529048101
Triplefox[m]
i use the rule john carmack outlined here

1529048157
Triplefox[m]
since i'm also working on games it serves me really well...when you have a real-time event loop the difficulty is that aiming for pure functions is the exceptional case

1529048179
very-mediocre
It's more of a design thing I guess

1529048206
very-mediocre
I try to decide if the thing I am trying to abstract is actually "pure" in nature

1529048215
very-mediocre
if so, it's a separate module

1529048225
very-mediocre
(could be a class, depends on the language)

1529048234
very-mediocre
I might still implement it with some side effects

1529048237
very-mediocre
if needed.

1529048251
very-mediocre
Conceptual purity is just a really powerful hint

1529048326
Triplefox[m]
semi-related, i had a bad experience with how "pure" worked in D - transcendental math sets hardware state, so doing some trigonometry made my function non-pure...turned me off to how they did there

1529048374
alexnask
@TripleFox I think you can mark a function as pure when it actually mutates stuff in D right?

1529048438
alexnask
So called "weak purity"

1529048449
Triplefox[m]
there is some workaround yes...but it feels like it's not the right way to do it(not that i have a better idea)

1529048557
very-mediocre
I'm not a compiler guy but I still don't understand why a compiler can't mark functions as impure

1529048572
very-mediocre
and then taint any function that calls an impure function, making it impure too

1529048716
Triplefox[m]
i guess in my mind, if i want weak guarantees about semantics for a specific application, metaprogramming tends to do better at that

1529048778
Triplefox[m]
the time-honored tradition of the macroassembler

1529048872
very-mediocre_
ugh flaky internet keeps dropping

1529048875
alexnask
How is Ds nogc these days?

1529048899
alexnask
Haven't checked it out in ages, I remember the standard library used it in many places it shouldnt though

1529048918
very-mediocre_


1529048930
alexnask
(I mean the GC, not nogc :P)

1529049028
very-mediocre_
My last message got eaten. tl;dr: andrewrk's idea was: when passing a const pointer as a function param, it would be guaranteed that item would not be modified by any side effects

1529049036
very-mediocre_
const pointer to a struct**

1529049084
very-mediocre_
so you don't want to call any function that has side effects on that struct

1529049089
very-mediocre_
the compiler should complain if you try

1529049165
very-mediocre_
in his example `innocent_function` mutates the parameter

1529049183
Triplefox[m]
nogc is a work in progress but I understand there's a commitment being made there and a lot of interest in using D in its "betterC" mode. i don't work with D frequently enough to say more.

1529049196
Triplefox[m]
i'm more interested in zig as the "better c" of course :)

1529049566
pianofingers
If you were to ask the D people "How do I write an application that uses custom memory allocators and just doesn't use the GC" they'd look at you like you were crazy. That's just the truth. In their eyes you always use the GC except in a few places where you really can't. Super dumb, super sad. They're competing with C#, not C++, and they still can't see it.

1529049604
alexnask
There is Allocator support in their std experimental library I think

1529049608
very-mediocre_
In my experience they tell you the GC runs on allocation, so just preallocate

1529049611
alexnask
But yes most people probably just use the GC

1529049658
pianofingers
Triplefox[m]: I've heard that transitive const isn't all that fun to use

1529049718
pianofingers
whoops you guys were talking about pure functions, not immutable :)

1529049764
Triplefox[m]
truth be told, the things that I use D for are kind of "scripting" tasks that I would prefer a native binary for

1529049765
pianofingers
very-mediocre_: Which means "we're not like you, you're a weirdo, here's how you can do something that nobody else does". It's a lonely rode, no one should take it.

1529049765
very-mediocre_
Part of it was using pure functions to detect mutability violations

1529049802
very-mediocre_
Yeah they are a bit cult-ish

1529049827
very-mediocre_
The people who make D are decent imho

1529049835
very-mediocre_
the community is a bit fanatical though

1529049887
very-mediocre_
One thing I found weird though is Walter Bright and Andrei Alexandrescu have been publicly sighing about the GC for a few years now

1529049922
very-mediocre_
Makes the whole nogc attempt feel low energy

1529049950
very-mediocre_
that's what scared me away from D

1529049956
pianofingers
agreed

1529049996
very-mediocre_
I still can't tell if they're serious about nogc

1529050022
very-mediocre_
Lately they've published blog articles that recommend living with it :/

1529050090
very-mediocre_
pianofingers: "They're competing with C#, not C++, and they still can't see it."

1529050091
very-mediocre_
this

1529050104
very-mediocre_
I don't know why I'd roll a web server using vibe.d

1529050154
very-mediocre_
It's barely maintained, anyone rational would just use C#

1529050169
very-mediocre_
and the same goes across the board

1529050173
very-mediocre_
for any use case.

1529050174
pianofingers
I mean I don't know, it's the one thing that looks pretty cool and performant?

1529050212
very-mediocre_
I was considering it for a web backend but the low energy scared me off

1529050235
very-mediocre_
Performance was a bit hard to understand, I read some discussions where people had poor results

1529050244
very-mediocre_
and there were some not-obvious cavetas

1529050246
very-mediocre_
caveats

1529050288
very-mediocre_
In the end it's just async

1529050297
very-mediocre_
You get that out of the box in C# or node.js

1529050413
Triplefox[m]
one thing that keeps me coming back to D is that the basic compiler tech seems good. i really trust walter's work there. but maybe the language needs a reset

1529050430
very-mediocre_
This

1529050452
very-mediocre_
this is the reset

1529050637
pianofingers
Anyways, I wasn't around back when D was created. Back then the GC probably seemed like the correct choice. And yes Walter has certainly done a lot of cool and impressive work and made a really fast compiler as I understand it.

1529060220
GitHub4
[zig] alexnask opened pull request #1116: WIP: Remove @ptrCast and replace it with @elemCast (master...elemCast)

1529060295
alexnask
The issue with this PR is that we lose the ability to cast Fn pointers through @ptrCast

1529060342
alexnask
But I'll see how I can workaround this while fixing tests and the standard library

1529060560
Hejsil
alexnask, not to be a downer, but maybe it would be best to wait for the proposal to be accepted before puping to much work into it :)

1529060577
alexnask
Oh woops I just assumed it would be accepted :p

1529060589
Hejsil
Not being able to ptr to a fn ptr, seems like a big flaw

1529060597
alexnask
Well I've started now, I just need to modify some zig code so I may as well do it and close it if it isnta ccepted :P

1529060619
alexnask
Can't they be explicitely casted?

1529060690
alexnask
If they can, I don't see the difference tbh, you wouldn't need @ptrCast in the first place

1529060695
alexnask
I'll check it out

1529060765
rcdchen
run the test error:  $ zig test test.zig    error: invalid token:']'     assert(@typeOf(null_terminated_bytes) == [*]const u8);                                                ^

1529060787
alexnask
@rcdchen Is this with latest master?

1529060788
Hejsil
rcdchen, are you using Zig 2.0?

1529060797
rcdchen
yes

1529060801
Hejsil
Uum

1529060807
Hejsil
Yes who, lol

1529060862
rcdchen
yes,  I am  using Zig 2.0

1529060868
Hejsil
Aah, makes sense

1529061014
Hejsil
rcdchen, [*]T is only valid on master

1529061044
Hejsil
Here is 2.0 docs

1529061109
rcdchen
thank you!

1529061501
rcdchen
I think it would be more convenient to use the gitter to communicate than freenode. Please think about it. Maybe I'm used to the gitter.

1529062438
bheads__
Some of the issues in D come from the fact that the language devs dont use it for more then trivial programs.  Even Walter doesn't bother with the GC, he just disables it and leaks memory. The DMD compiler leaks memory all day long, so if you have a non trivial program you can run out of memory compiling it!  I had to rewrite a vibe.d site cause of that issue.

1529062730
bheads__
They added nogc, but only like 20% of the stdlib supports it, and you cant use a few of the language features.  Like how can you support nogc when the language uses the gc?!? So they added betterc, guess what its just a worst language then zig cause it wasn't a thought out language, just a subset of D :) And of course there is not stdlib, so you just have to use libc

1529065348
alexnask
Actually even worse, @ptrCast is the only way to convert *T to [*]T it seems

1529066155
Hejsil
Ye, that's pretty bad too

1529066191
Hejsil
I think implicit cast from * -> [*] is being considered

1529066725
bodie__
yay zig-fmt in vim :D

1529066834
bodie__
I'm getting "Unable to find zig lib directory" after building zig from master and linking it into my PATH using a symlink

1529066855
bodie__
macOS 10.13.5

1529066876
bodie__
er, when I try to run "zig build-exe main.zig" on the hello-world example

1529066918
bodie__
It works if I refer to it using the real full path in the build directory

1529066940
bodie__
I assume this means that the zig binary looks for its libraries in its local path?

1529066966
bodie__
maybe a relative path such as "../lib"?

1529067055
Hejsil
did you make install?

1529067084
bodie__
I used ninja but yes

1529067094
bodie__
it looks like it's installing libs to the local path of the build

1529067220
bodie__
perhaps there's a CMake variable that needs to be set?

1529067262
Hejsil
Naah, it should just work

1529067290
Hejsil
you should have: <build_folder>/zig and <build_folder>/lib/std

1529067332
bodie__
Well it's $BUILD/lib/zig/std but yes

1529067338
Hejsil
Aah right

1529067359
bodie__
I created a symlink in my user's PATH to $BUILD/bin/zig

1529067369
Hejsil
Idk if bin/zig will work

1529067373
bodie__
that works on ubuntu, because when you `ninja install`, it installs the libs to a global path

1529067388
bodie__
on macOS it appears to install them to a build-local path

1529067412
Hejsil
On my linux machine, it installs libs locally

1529067425
bodie__
hmm

1529067431
Hejsil
and I symlink $BUILD/zig and not $BUILD/bin/zig

1529067443
bodie__
well I'm not at my linux box so I could be wrong about that, but that's what I recall

1529067452
bodie__
hmm, ok.  I'll try that

1529067456
Hejsil
I think it did at some point

1529067461
Hejsil
But the default was changed to local

1529067521
bodie__
I changed the symlink to $BUILD/zig and the problem remains

1529067528
Hejsil
Hmm

1529067591
bodie__
any other mac users?

1529067611
bodie__
I could've sworn I had this working on my personal laptop

1529067740
bodie__
nope, same issue

1529067759
bodie__
I just built it without ever checking that it worked since I assumed it was working after checking on my linux box

1529067950
bodie__
the homebrew (0.2.0) macOS installation of zig works

1529067981
bodie__
guess I'll open an issue

1529068681
bodie__
When I build from 0.2.0, the install path is /usr/local/lib.

1529068764
Hejsil
Ye, that changed after 2.0

1529069166
bodie__
Here's the issue to describe it.  andrewrk fyi

1529069652
bheads__
How do you test if some type A is an array of type T?  I think I am okay testing []T []const T, but how to detect static array types? [N]T

1529069834
MajorLag1
`@typeId(A) == builtin.TypeId.Array and A.Child == T`

1529069924
bheads__
Looks like it only works with static arrays I am seeing some odd behavoir...

1529069939
MajorLag1
[N]T is a static array

1529069958
bheads__
right, I am working on code that should work with any array of T

1529069991
MajorLag1
I don't understand, you want to also test for [*]T?

1529070019
bheads__
no, not the unknown length

1529070041
bheads__
but a *const []T should also wok

1529070055
alexnask
Right so you want indexables basically

1529070057
MajorLag1
Then you'll have to see if it is a pointer first

1529070059
alexnask
Slices + arrays

1529070065
bheads__
yeah I got that part

1529070079
bheads__
its just static array were throwing me off

1529070089
alexnask
I would unwrap the type, (have an F that takes *const T and returns T) then use TypeInfo to check if this is an array or slice.

1529070089
bheads__
cant test the type in a switch

1529070162
bheads__
assert(@typeId([]i32) == TypeId.Array); // thrown off on this

1529070173
alexnask
Right

1529070174
bheads__
this fails

1529070174
alexnask
So

1529070174
MajorLag1
because it isn't an array

1529070179
alexnask
Slices are structs

1529070183
alexnask
With a .ptr and .len field

1529070239
alexnask
So it's a bit involved to check if a type is a slice (unless you know what the type of the slice should be), will probably be a function in std.meta

1529070260
bheads__
comptime const arg_t = comptime if (meta.isPointer(@typeOf(arg))) meta.pointerOf(@typeOf(arg)) else @typeOf(arg);

1529070291
bheads__
this does alright at unwrapping it for me

1529070365
alexnask
Right, to check if arg_t is a slice you should take its TypeInfo, check that it has Struct typeId then check its fields

1529070385
MajorLag1
The docs don't say it, but at some point I think a TypeId.Slice was added. Though apparently @tagName(@typeId()) is broken right now, so I can't check.

1529070399
Hejsil
On master, slices are not structs anymore

1529070405
Hejsil
slices have TypeId.Pointer

1529070414
alexnask
Huh missed that somehow

1529070434
Hejsil
@typeInfo(T).Pointer.size == TypeInfo.Pointer.Size.Slice

1529070435
bheads__
humm.. makes it trickier

1529070436
MajorLag1


1529070449
MajorLag1
I'm pretty sure that compiler isn't up to date

1529070466
Hejsil
Ye, it's not lol

1529070481
MajorLag1
Ah, ok

1529070502
Hejsil
Though, TypeId.Slice is fairly new too

1529070506
MajorLag1
Point is, it is a lot less cumbersome to determine if a type is a slice than it used to be

1529070508
alexnask
Ah right

1529070543
bodie__
man, looking at all these proposals in github, I can really see how feature creep is a nightmare beast to be fought with all of one's might :)

1529070546
alexnask
Its still a struct in the compiler code, @typeInfo just treats it like a pointer and adds Slice to the size enum

1529070563
Hejsil
Yep

1529070576
bodie__
please don't turn Zig into a worse D or Rust...

1529070628
Hejsil
andrewrk has been good at saying no

1529070814
alexnask
Does anyone know if I can force docgen_tmp around when executing the tests?

1529070910
MajorLag1
oh weird, @tagName(@typeId(T)) crashes, but only in tests.

1529071073
bodie__
Maybe the right approach to some of the features people want is some kind of macro / language extensions package

1529071298
bheads__
what, you want macros....?

1529071323
alexnask
/mnt/c/dev/test.zig:12:51: error: slice of non-array type '?*u8'

1529071330
alexnask
async<*std.mem.Allocator> fn simpleAsyncFn() void {

1529071331
alexnask
wew :P

1529071341
alexnask
I broke something

1529071614
bodie__
well, like how Haskell lets you import language features.

1529071673
bodie__
Then zig could be kept small but also have the option to have e.g. third-party extensions.  just thinking out loud here.

1529071930
bheads__
... TODO const expr analyze union field value for equality ....

1529073007
very-mediocre
how do people around here feel about private/public for properties?

1529073185
very-mediocre
i find myself wanting it, but I suspect it's bad for some reason :)

1529073191
very-mediocre
private properties that is

1529073811
bheads__
its is a mixed bag, it gets overused in OOP patterns, but for example you might have a struct that has thread safe accessor function you dont want users to bypass them...

1529074507
very-mediocre
hm I'm not convinced of them being bad

1529074667
very-mediocre_
messages got eaten again, ah well :/

1529076155
MajorLag1
bheads__, ver-mediocre, my feeling is that the programmer can communicate to the user that a field is private and shouldn't be directly accessed via simple naming convention: _varname. If the programmer insists on accessing it directly they might have a good reason. That said, if you really, really need to access it then there's always `@intToPtr(T, @ptrToInt(struct_instance.field) + @offsetOf(Struct, "field"))` as an escape hatch, so it

1529076155
MajorLag1
n't that big a deal to me.

1529076279
MajorLag1
..in fact, thinking about it, it's probably better than the naming convention for one big reason: that information will be explicitly communicated via @typeInfo to comptime code.

1529076314
bheads__
naming convention is not a good or safe way to handle things

1529077488
bheads__
finally got these array meta functions working

1529077620
bheads__
ugh copy and paste failed me this morning

1529077664
bheads__
huh, I guess I cant copy and paste between snap package apps...

1529077712
bheads__
link if anyone is interested:

1529077885
very-mediocre_
comptime return?

1529077895
very-mediocre_
I've not delved into comptime yet, that seems peculiar

1529077988
very-mediocre_
comptime porta-potties notwithstanding

1529077995
bheads__
lol

1529078821
alexnask
The comptime is probably reduntant there, yes

1529078878
alexnask
The comptime ifs too

1529078963
alexnask
It doesn't hurt since it will guarantee a compiler error if your condition somehow ends up being a runtime condition

1529079414
very-mediocre_
i see

1529079611
alexnask
In general any expression that can be evaluated at comptime will be

1529079642
alexnask
If you shove the result into a runtime variable, it's just the result of the comptime computation

1529079735
bheads__
yeah I was probably went overboard on the comptimes

1529079848
GitHub112
[zig] andrewrk closed pull request #1113: Make `zig version` compliant with SemVer (master...semver-build-metadata)

1529079851
alexnask
In general, I feel like a good guideline is to use it when you want a whole block of code (with variable decls etc) at comptime and in places where you may have intermediate expressions that you want in static storage

1529079877
alexnask
e.g. some_ptr = &comptime some_meta_func(FooType, BarType)

1529079906
bheads__
I do want to avoid comptime at the call site

1529079925
bheads__
but maybe I shouldnt care

1529079939
alexnask
Right, in this case even without comptime I'm 90% positive it would happen at comptime

1529079951
alexnask
It's just that it would have been stored in an intermediate runtime variable

1529079964
alexnask
(Which would be initialized with the value evaluated at comptime)

1529080105
alexnask
But that's a pretty extreme edgecase

1529080137
andrewrk
alexnask, here's another relevant proposal to @ptrElemCast:

1529080175
andrewrk
in summary we want casts that do very specific things rather than T(value) "guessing" what you want

1529080232
andrewrk
T(value) can still do "implicit casts" or maybe we remove that syntax altogether and users would need to bind something to a variable if they wanted to cast: const casted_value: T = value;

1529080362
alexnask
Right, so we keep implicit casts for certain (useful) cases and handle the rest of the casts with builtins

1529080379
bheads__
const casted_value: T = value;   <-  That is a good pattern but results in lots of extra code

1529080379
alexnask
There are some fundamentally unsafe casts though, how should those be handled?

1529080391
alexnask
E.g. T* -> fn(<ArgList>)RetType

1529080404
alexnask
Well

1529080441
alexnask
All those "unsafe casts" can be done with @ptrCast I guess, I just started replacing it without really thinking about it, I assumed those casts where available with the explicit casting syntax

1529080471
Hejsil
@yourProgramExplodesIfYouCastWrongCast(fn()void, ptr) :)

1529080483
Hejsil
I like this builtin

1529080485
alexnask
@reallyReallyUnsafeCast()

1529080485
Hejsil
Can we have it

1529080512
andrewrk
lol

1529080531
andrewrk
some of the casts are simply known and documented to be unsafe

1529080533
bheads__
you have to md5 the the filename, line number and type to compute the unsafe cast key

1529080553
Hejsil
Nice

1529080561
andrewrk
I was thinking though it would be neat to have a "safety score" calculator

1529080565
alexnask
@bheads__ Someone would hack some metaprogramming solution :P

1529080575
andrewrk
it analyzes the codebase, and docks points for unsafe casts

1529080580
bheads__
alexnask, it wans't me

1529080617
andrewrk
an IDE could maybe gently underline the unsafe things, in a way that looks like, ok you don't necessarily need to change this

1529080628
andrewrk
but it would make you uncomfortable if it felt like the code didn't need such a thing

1529080636
andrewrk
might make someone compelled to write a comment to justify it

1529080645
bheads__
really as long as unsafe casts stickout it should be okay

1529080668
Hejsil
Every time you compile, the compiler sends your score to a leaderboard :)

1529080680
alexnask
It just sends the score, we promise /s

1529080686
bheads__
well you could have your repo reject the pull request

1529080919
bheads__
so something like @unsafeCast(T, var)   would do a possible unsafe C style case

1529080938
bheads__
most cases implicate cast will work

1529080980
bheads__
@truncating  for a few known types i64 -> i8

1529081008
bheads__
then cast between signed/unsigned and flaot/int types

1529081028
bheads__
I thought most was convered already

1529081056
Hejsil
@truncating does not do the safty check i8(some_i64) does

1529081085
bheads__
ah, okay so that would need to change

1529081161
bheads__
would there we want an @unsafeTruncate or just use @unsafeCast?

1529081239
Hejsil
Well, i8(some_i64) is not an unsafe cast, because the compiler does the runtime check. The unsafe casts, are the ones that the compiler cannot check.

1529081245
Hejsil
Like the current @ptrCast

1529081351
bheads__
right, I dont think we can remove unsafe casts as long as you can interface to C

1529081373
andrewrk
Hejsil, i8(some_i64) is unsafe - it invokes undefined behavior in release-fast mode if the number didn't fit

1529081387
Hejsil
Aah, welll

1529081408
Hejsil
Ok, then we have unsafe-but-checked casts and unsafe casts :)

1529081414
andrewrk
yeah

1529081484
Hejsil
Let's say, we had all casts as builtins. Would we categories the casts based on unsafeness?

1529081500
Hejsil
In the docs that is

1529081509
andrewrk
we're always looking for ways to try to add checks to unsafe stuff though. for example, it is within zig's rights to insert a field into a struct at the beginning with a "magic identifier" and check for that if you cast to it

1529081537
Hejsil
Hmm

1529081555
Hejsil
Alright, all casts are unsafe-but-checked-if-possible!

1529081559
andrewrk
lol

1529081585
Hejsil
Except @truncate

1529081590
bheads__
there is always unsafe blocks

1529081596
andrewrk
hmm, I think we would perhaps make a nice red noticable warning label and put it on all the casts that assert

1529081613
andrewrk
and on the + operator

1529081620
andrewrk
the + operator looks so innocent

1529081627
Hejsil
:)

1529081633
andrewrk
but it's a bug factory

1529081657
Hejsil
u8 + u8, should give a u9 :)

1529081661
Hejsil
Then it's safe

1529081670
andrewrk
woah

1529081696
bheads__
I think you blew up andrew

1529081699
Hejsil
Lol

1529081717
Hejsil
We're not gonna consider this as a feature, are we?

1529081722
Hejsil
It was a joke, lol

1529081726
andrewrk
nah don't worry, but just run with it for a second

1529081730
andrewrk
that actually would let us make the + operator safe

1529081743
andrewrk
with the result being that you'd have to put @intShorten casts at a lot of places

1529081751
bheads__
yeah it would

1529081755
Hejsil
Hmmm

1529081761
andrewrk
so the safety moves to this cast

1529081768
bheads__
or use +%

1529081773
andrewrk
I don't think we should do it, but I also don't think it's as bad of an idea as it seems

1529081791
Hejsil
And then we can have @unsafeAdd :)

1529081792
andrewrk
especially if we had min/max values in the integer type system

1529081817
bheads__
could this happen at comptime?

1529081826
bheads__
if not already

1529081844
Hejsil
Well, if you use 2 + 2, then it's comptime_int + comptime_int

1529081862
bheads__
comptime_int doesnt have a size does it?

1529081863
Hejsil
And comptime_int is a bigint

1529081876
bheads__
so its already happening

1529081906
Hejsil
But, u8(1) + 1 casts to u8 + u8, so not  always

1529081940
bheads__
ah... so + in comptime could overflow

1529081974
Hejsil
Yes

1529081987
bheads__
that trick wont help with the other overflows though

1529082005
bheads__
u8(1) - 2  :(

1529082019
Hejsil
Woun't that become a i10

1529082029
Hejsil
And then im pretty use it's safe

1529082058
Hejsil
s/use/sure/g

1529082096
bheads__
thats interesting,   then u8(255) * u8(10) ....

1529082129
bheads__
a u16?

1529082149
Hejsil
I think, yes

1529082166
Hejsil
Your int types could explode really fast, lol

1529082182
bheads__
well thats why andrew suggested a cap on the that

1529082221
alexnask
I think there's a C++ library that does similar stuff (through a safe_int type)

1529082269
bheads__
I mean llvm can make huge int types..

1529082294
bheads__
all those truncates...

1529082360
Hejsil
Already did a safe add in userland:

1529082384
Hejsil
Could be fun to compare the difference in assembly using safe add vs normal add

1529082401
alexnask
I do like the concept of constrained subtypes, like in Ada which can be useful for similar safety related issues

1529082460
bheads__
@unsafeMath(); // enable c style math in this scope

1529082582
bheads__
var x: i32 #=  i32(99) + i32(1234); // tuncate equals, debug and release-safe modes do the runtime check

1529082708
Hejsil
Well, you would probably just do var x = i32(i32(99) + i32(1234))

1529082879
bheads__
I thought that was going away

1529082896
bheads__
I just used it indicate the type

1529083112
andrewrk
i32(99) works as an implicit cast, so that would be fine. (although indeed part 2 of the proposal optionally suggests removing that syntax)

1529083812
andrewrk
Hejsil, inspired by our conversation:

1529084003
Hejsil
andrewrk, what about allocations?

1529084023
Hejsil
allocator.construct(T(undefined))

1529084033
Hejsil
Wait

1529084038
Hejsil
That would just work lol

1529084061
Hejsil
But then, what about allocator.alloc(T, 122); ?

1529084095
Hejsil
No wait, the allocator should probably do for (slice) |*i| i.* = undefined;

1529084098
MajorLag1
`pub fn reallyReallyUnsafeCast(comptime T: type, ptr: var) T { return @intToPtr(T, @ptrToInt(ptr)); }`

1529084108
Hejsil
The best cast

1529084131
andrewrk


1529084134
Hejsil
I think i'll use this in production, but call it `cast` instead

1529084140
andrewrk
it's doing it on bytes, but if we changed it to do it to T then it would work

1529084148
Hejsil
Nice

1529084187
Hejsil
And I would guess all mapped memory code would use `packed` structs, soo

1529084223
Hejsil
Well, not guess

1529084232
Hejsil
All memory mapped code should use packed structs

1529084257
Hejsil
Ye, It'll probably just work

1529084259
andrewrk
this is the beauty of "clearly specify intent"

1529084271
andrewrk
the compiler knows what you're trying to do

1529084308
Hejsil
The compiler is the one that needs to read your code most often after all :)

1529084505
Hejsil
Does this work? &@bitCast([2]u16, ptr.arr_of_4_u8)

1529084523
Hejsil
Aka, giving me a pointer to arr_of_4_u8, but as the type *[2]u16?

1529084557
bodie__
andrewrk is this a known issue on macOS?

1529084719
andrewrk
@bitCast isn't fully implemented

1529084742
Hejsil
Ye, I see after trying to do an example

1529084753
Hejsil
I'll just do the ptrCast

1529084797
andrewrk
bodie_, hmm. looks like something wrong with zig's code to find the std lib. it's trying to look relative to the zig binary path

1529084827
andrewrk


1529084837
andrewrk
it's looking relative to _NSGetExecutablePath

1529084907
andrewrk
perhaps we should call realpath on that

1529084958
andrewrk
I think that would solve your isseu

1529085166
Hejsil
Oooh boy! I have something that compiles after a major refactor. Time to see if everything is broken!

1529085225
Hejsil
Hmmm

1529085235
Hejsil
I think my refactor revealed a bug lol

1529085306
Hejsil
And my refactor is not done, but it's the first big step

1529085444
Hejsil
Hmm, a pokemon lvl 277. I think i did something wrong

1529085550
bheads__
sounds like you used cheat engine

1529085571
Hejsil
I would never

1529085598
Hejsil
Except when I softlocked myself in a game, and tried to cheatengine myself out of it

1529085603
Hejsil
Spoilers, it didn't work

1529086007
GitHub43
[zig] andrewrk reopened pull request #1113: Make `zig version` compliant with SemVer (master...semver-build-metadata)

1529086029
GitHub19
[zig] andrewrk pushed 1 new commit to master:

1529086029
GitHub19
zig/master b3a3e20 Jay Weisskopf: Make `zig version` compliant with SemVer (#1113)...

1529086031
GitHub171
[zig] andrewrk closed pull request #1113: Make `zig version` compliant with SemVer (master...semver-build-metadata)

1529093023
Hejsil
Well, i've been blocked by the issues I just posted to github

1529093176
andrewrk
damn, alright I'll prioritize those

1529093247
Hejsil
Well, I probably need a break anyways

1529093262
Hejsil
So no rush if you're doing important features

1529093425
andrewrk
Hejsil, I want to get your opinion on

1529093441
andrewrk
I still need to fix a particular thing, but I mean how do you think this change would affect pokemon randomizer

1529093485
andrewrk
I'm guessing you're in favor of it because it solves

1529093526
Hejsil
I don't think there would be any problems with the hidden ptrs in my randomizer. If there is, then the current code wouldn't work anyways

1529093533
Hejsil
I'm for it

1529093545
Hejsil
And yes, it solves the generic function problem

1529093565
Hejsil
And having values semantics is really nice

1529093587
Hejsil
Also, I think Nim already does this, so maybe we should look into what problems they've had

1529093688
andrewrk
ok great

1529093696
andrewrk
this is one of the last obstacles before self hosting

1529093700
andrewrk
the list is shrinking

1529093706
Hejsil
Wuuh

1529093738
andrewrk
the implicit cast thing will be easy

1529093765
andrewrk
then it's null terminated pointer type / remove c string literals

1529093781
andrewrk
add tuples / remove var args, which should hopefully close a lot of bugs

1529093788
andrewrk
and then self host is the next item

1529103800
Hejsil
andrewrk, just remembered that it was friday. What project are you working on today?

1529103818
Hejsil
More zig-window or?

