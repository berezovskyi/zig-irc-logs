1528589885
GitHub31
[zig] bnoordhuis opened pull request #1094: support `--target-arch wasm32` (master...wasm)

1528590563
clownpriest


1528590627
clownpriest
granted it's just compared to Go, but the zig code could be tuned quite a lot more

1528591462
andrewrk
clownpriest, neat!

1528595442
donlzx
what is floating point optimized mode and strict mode exactly? I got confused when following the official langref.html.

1528598072
andrewrk
donlzx, do you have a specific question? I'll try to explain it

1528598273
GitHub196
[zig] andrewrk opened pull request #1095: breaking syntax change: ??x  to  x.? (master...optionals)

1528598378
GitHub198
[zig] andrewrk pushed 1 new commit to master:

1528598378
GitHub198
zig/master d464b25 Ben Noordhuis: support `--target-arch wasm32` (#1094)...

1528598381
GitHub15
[zig] andrewrk closed pull request #1094: support `--target-arch wasm32` (master...wasm)

1528598651
bheads
nice you got the .? change in.  Did you decide on the ?? to ifnull change yet?

1528598744
andrewrk
yes, just posted

1528599059
bheads___
var window = sdl.SDL_CreateaWindow(...) orelse std.os.abort();

1528599076
bheads___
I like the way ir looks

1528599109
andrewrk
it has the nice property that someone who never saw any zig syntax could probably get the gist of it

1528599138
bheads___
Way better then ?? at first glance

1528599399
bheads___
Ebeen enjoy zig, thanks for the hard work Andrew

1528599416
andrewrk
glad to hear :)

1528599419
andrewrk
what are you working on?

1528599481
bheads___
Porting a raycaster to zig, impressed with how easy it was to get Sdl working

1528599504
andrewrk
ah nice. yeah sdl was one of the libraries I made sure works:

1528599616
bheads___
I am slowly porting my D app, but not planning to take to production anytime soon.

1528599652
bheads___
Lol i see you had an issue with the same macros

1528599800
andrewrk
I don't understand why C libraries make such heavy use of macros

1528599832
andrewrk
here's libsoundio.h:

1528599847
bheads___
I have always hated that as well about c and c++

1528599866
andrewrk
the only macros that are intended to be used by users are the aliases for native and foreign endian. and even then I probably should have made it enums or something

1528600004
andrewrk
ok and SOUNDIO_MAX_CHANNELS because C doesn't let you use static consts as array lengths

1528600010
bheads___
I also hate how macros are how you handle cross platform, and build logic. But ehhh the 70s

1528600052
donlzx
hi andrewrk, I'm new to Zig. Upon reading the doc the first time, I couldn't tell what is the difference between strict and optimized float modes.  It would be better that these concepts were briefly explained in the langref.html#Floats section before the example codes.

1528600159
andrewrk
donlzx, I see, maybe the docs that are under @setFloatMode can be more prominently advertised in the main float section

1528600244
bheads___
I bet you cant wait to port that lib to zig! But looks like a good library to me.

1528600308
andrewrk
it's tempting, but there's a big hurdle to overcome: on linux, alsa-lib kind of

1528600321
andrewrk
linux sound essentially depends on alsa-lib

1528600350
andrewrk
and alsa-lib does things like dump log lines to stdout, and it has a lisp interpreter in it

1528600358
andrewrk
I'm sure it has some panics on out of memory in there

1528600378
bheads___
Ugh... What about pulse?

1528600382
andrewrk
one of my projects will be to look into avoiding alsa lib

1528600395
andrewrk
pulse should be reasonable to have a pure zig lib for it, assuming the protocol is reasonably stable

1528600404
andrewrk
the protocol between libpulseaudio and pulseaudio-server

1528600449
bheads___
I would think so, its been around for a long time now

1528600542
bheads___
Linux legacy is such a crux, even wayland has failed to replace x11.

1528600573
bheads___
Okay off to bed, later all

1528602151
GitHub63
[zig] andrewrk closed pull request #1095: breaking syntax change: ??x  to  x.? (master...optionals)

1528602151
GitHub102
zig/master ec1b6f6 Andrew Kelley: breaking syntax change: ??x  to  x.? (#1095)...

1528602151
GitHub102
[zig] andrewrk pushed 1 new commit to master:

1528604548
GitHub57
[zig] andrewrk opened pull request #1096: breaking syntax change: orelse keyword instead of ?? (master...orelse)

1528604571
avisaven
hi

1528604580
andrewrk
hi avisaven

1528604651
avisaven
zig looks like its matured a lot recently, it's really an awesome project andrewrk, congrats on it dude

1528604789
avisaven
i was wondering at what version you were thinking about syntax lockdown

1528607185
avisaven
why are function return types the only time that the type of something is not denoted after a colon?

1528607276
avisaven
for variable types, argument types, and member types, they're all after a colon, but the return type isn't

1528607599
andrewrk
thanks avisaven

1528607611
andrewrk
the current plan is no lock down of any kind until 1.0.0

1528607647
GitHub57
[zig] andrewrk closed pull request #1096: breaking syntax change: orelse keyword instead of ?? (master...orelse)

1528607650
GitHub199
[zig] andrewrk pushed 1 new commit to master:

1528607650
GitHub199
zig/master 77678b2 Andrew Kelley: breaking syntax change: orelse keyword instead of ?? (#1096)...

1528607698
avisaven
ah gotchya, sounds good

1528607839
andrewrk
return type used to have -> and then the type, but I removed that when we made return types mandatory

1528607852
andrewrk
there's still an outstanding syntax issue with return types

1528607884
andrewrk


1528607966
andrewrk
I'm going to bed, night all

1528607971
GitHub175
[zig] andrewrk pushed 1 new commit to master:

1528607971
GitHub175
zig/master 0a95b0f Andrew Kelley: std.zig: update syntax for orelse keyword

1528607974
avisaven
have a good night!

1528611889
GitHub20
[zig] tiehuis closed pull request #1081: Add arbitrary-precision integer to std (master...bigint)

1528611891
GitHub84
[zig] tiehuis pushed 1 new commit to master:

1528611891
GitHub84
zig/master dc8bda7 Marc Tiehuis: Add arbitrary-precision integer to std...

1528617054
tiehuis
bb010g: thanks for those aur patches, i've updated the zig/zig-git packages to omit the stage2 artifacts

1528617106
tiehuis
namcap is also handy, wasn't aware of it, i've not changed the dependencies for the moment though since there is no harm in them and i haven't checked if the xml2 was fixed in the system llvm yet

1528618102
bb010g
tiehus: Since you didn't make git a makedepend, this still fails when building without git installed

1528618294
tiehuis
thanks, fixed

1528619793
bb010g
tiehuis: It still fails when building in a chroot because you didn't properly place your patches in the source array, as recommended in

1528619806
bb010g
Also, the libxml2 change makes no difference besides that namcap lint because the llvm package depends on libxml2.

1528640858
isaachier
Is there a reason the compiler code doesn't use any std constructs and/or C++11?

1528640993
isaachier
STL*

1528648781
Tanner_
Is the build system documented anywhere at all?

1528649447
andrewrk
Tanner_, not yet

1528649506
andrewrk
isaachier, just that I personally find code that looks more like C and less like C++ easier to maintain

1528649854
GitHub115
[zig] andrewrk pushed 1 new commit to master:

1528649854
GitHub115
zig/master 854f90a tgschultz: Added C string support to fmt by using "{s}". The format string requirement is for saftey. (#1092)

1528649855
GitHub13
[zig] andrewrk closed pull request #1092: Add C string support to std.fmt w/ "{s}" (master...zig-std.fmt-c-string)

1528651015
Tanner_
I love the idea of using Zig because it seems like a blatantly better C, but my use case requires cross compilation. Can I do that without the build system for now?

1528651072
Tanner_
I have compiled Zig from source.

1528651121
isaachier
Tanner_ zig is inherently a cross compiler

1528651161
Tanner_
Yes, I know, but there isn't documentation on using that feature.

1528651173
isaachier
try this: <path-to-zig-dir>/zig targets

1528651227
isaachier
running zig on its own shows the options `--target-arch`, `--target-environ`, and `--target-os`.

1528651235
isaachier
that should help you start

1528651338
Tanner_
Oh, thank you!

1528656211
Tanner_
andrewrk: are there any plans to fill out some more of the docs soon?

1528656260
andrewrk
Tanner_, yes. here's the issue:

1528656280
andrewrk
every week day except friday I plan to fill out a documentation section

1528656291
andrewrk
docs for the std lib are coming after the self hosted compiler

1528656393
Tanner_
sounds great. do you know the next section you're working on?

1528656580
andrewrk
I'll probably just search the docs for TODO and do the first one

1528656783
Tanner_
Are there plans to stabilize the language soon? Or will breaking changes still be made?

1528656851
andrewrk
breaking changes can be made right up until 1.0.0

1528656872
andrewrk
however I'm trying to do all the breaking changes at the same time, and as early as possible

1528656932
Tanner_
With the pointer update from & to *, was that purely syntactical or was something else added?

1528656958
Tanner_
I find build.zig code with things like "&Builder"

1528656967
andrewrk
semantically, it made it possible to have a pointer to `type` instead of crashing the compiler

1528656987
andrewrk
and now we also have [*] which is an unknown length pointer, while * is a single-item pointer

1528657040
andrewrk
this makes the runtime alias safety for #733 simple, so now you'll start seeing fn(Foo) rather than fn(*const Foo)

1528657378
Tanner_
Do you know of any up to date build.zig files?

1528657408
andrewrk


1528657412
andrewrk
this one gets tested by CI

1528657552
Tanner_
ah, nice. thank you!

1528660501
Tanner_
zig-by-example might be good

1528662294
Tanner_
Is there a standard by which a function is a @? Some of these are compiler internals, I understand, but what about clz and ctz?

1528663573
andrewrk
Tanner_, all functions that start with @ are compiler-provided functions:

1528663905
Tanner_
I guess my question is why should something such as clz or memset be considered special?

1528663931
Tanner_
I would think having fewer things be intrinsic would be better.

1528671072
clownpriest
dude...zig is faster than reference C implementation of xxhash

1528671075
clownpriest
this is nuts

1528671115
clownpriest
(by a very considerable margin)

1528671993
byronh__
Thats iteresting since xxhash is a simple algorithm, is zigs simplicity alowwing for better optimization?

1528672037
clownpriest
that's my guess, smaller semantics allow for more llvm ir optimization

1528672049
clownpriest
tho i haven't looked at the generated assembly yet

1528672120
byronh__
Did you try compiling the reference c code with zig and measuring?

1528672161
clownpriest
i have not yet, no

1528672165
clownpriest


1528672190
clownpriest
benchmark code is in the test folder. maybe i set thing up improperly? i think for the most part i'm comparing apples to apples

1528672669
byronh__
Hummm only big difference i see (and i am on a phone) is that it looks like your not including the init call in the benchmark.  Is the reference c or c++?

1528673329
byronh__
Other thing to make sure is maybe use clang6 to compile the reference implementation, maybe llvm6 is giving a performance boost

1528674014
byronh__
But yeah awsome you got xxhash lib.  I have been thinking about a zlib zig lib

1528674048
dbandstra
i'm playing with zlib atm

1528674256
byronh__
Ooo... I will definitely be interested in what you come up with

1528674299
clownpriest
byronh__, the init call is definitely outside of the benchmark, you think i should include it? i think the bare XXH64 function in C is also stateless

1528674319
clownpriest
whereas the streaming API would have a stateful init as well

1528674349
clownpriest
but yeah, i should probably test an llvm6 compile C version. tho i doubt it could make up that large of a gap, but could definitely be wrong

1528674417
byronh__
I would messure the init, yeah i doubt it will make a difference but better to be sure

1528674527
clownpriest
just tried, still faster than C on all load sizes

1528674535
clownpriest
tho slightly slower than current numbers

1528674555
clownpriest
(with init included)

1528674617
byronh__
Nice!!

1528674653
dbandstra
does anyone know how to link against a c library (like zlib) in the `zig test` or `zig build-exe` command? i only have it working with a build.zig file

1528674657
clownpriest
either way, the checksum() function in the zig impl doesn't actually need an init() call

1528674666
clownpriest
all state is in the function

1528674689
dbandstra
i use --library but then i get `lld: error: unable to find library -lz`

1528674969
byronh__
dbandstra Need to set the lib path?

