1526174932
tiehuis
quick write-up on some big-integer implementation details and comparisons:

1526180885
andrewrk
tiehuis, nice!

1526180885
GitHub136
[zig] andrewrk pushed 2 new commits to master:

1526180886
GitHub136
zig/master 7cdc9d9 Andrew Kelley: refactor std.zig.render to be recursive...

1526180886
GitHub136
zig/master 911cbf5 Andrew Kelley: recursive render top level decl

1526180889
andrewrk
reading now

1526181378
andrewrk
exciting results :)

1526181523
andrewrk
added to ziglang.org

1526183877
GitHub190
[zig] andrewrk pushed 1 new commit to master:

1526183877
GitHub190
zig/master 548ddd1 Andrew Kelley: fix AST dumping code in self hosted compiler

1526188120
GitHub103
[zig] andrewrk pushed 2 new commits to master:

1526188120
GitHub103
zig/master 05ecb49 Andrew Kelley: README: https links

1526188120
GitHub103
zig/master 4c3aa09 Andrew Kelley: self hosted compiler: remove unused flag

1526219766
Skilfingr
andrewrk, when we reach unreachable code in a function then panic is called. Must the function then still return the correct stack pointer address in ESP? Is the RET instruction executed at this point?

1526220371
Skilfingr
I want to initialize many function pointers (with different parameters) with the same dummy function. All stdcall. The dummy function will only do a warn() and "panic".

1526228948
andrewrk
Skilfingr, panic has the return type "noreturn" which meants control flow shall not return from it

1526228952
andrewrk
there's no coming back from panic

1526228995
andrewrk
let's figure out the best way to solve your problem

1526229018
andrewrk
do you have some (non working is fine) code to demonstrate what you're trying to do?

1526229163
andrewrk
if you're asking if you can clobber ESP in your panic implementation, that's fine

1526229665
Skilfingr
thinking about gl loader

1526229704
Skilfingr
Before loading the functions, i want to init the functions pointers with a dummy function. But i do not want to create 1000 dummy functions

1526229767
andrewrk
and the dummy function will load the real function and replace itself?

1526229803
Skilfingr
no, the dummy will just print a warning if called and then call panic

1526229833
andrewrk
why not initialize the functions to null?

1526229857
Skilfingr
i thought null pointers in zig are not a thing

1526229883
andrewrk
you can opt in to having them, but then you have to explicitly handle the possibility of null

1526229903
atk
at every call site?

1526229909
andrewrk
e.g. you would call with (??fn_ptr)(arg1, arg2). And you would get a panic if the fn_ptr was null

1526229937
atk
It might be a bit of a performance PITA to have a null check at every call site, especially in any potential hot paths.

1526229962
andrewrk
in release mode the null check is not present

1526229970
atk
hmm

1526229999
andrewrk
you can also disable the check in debug mode

1526230191
andrewrk
the dummy function idea is fine too. It should be ok to @ptrCast your dummy function (which just calls @panic) to the gl function in question

1526230736
Skilfingr
?? seems better then if (x) |y| for each call. In normal zig code i might use this. Not sure for a wrapper. Now i have two options. thanks.

1526230831
andrewrk
?? communicates exactly what you intend: in debug mode you want to panic; in release-fast mode you want to assume it will never be null

1526235978
GitHub113
[zig] andrewrk pushed 1 new commit to master:

1526235978
GitHub113
zig/master abcd418 Andrew Kelley: std.zig.parse cleanup

1526241558
_0joshuaolson1
Is there an analogue of @import("builtin") for the compiling platform? builtin.environ is just an enum, so I don't know how an arbitrary comptime function could get, for example, the compiling platform's endianness.

1526242935
_0joshuaolson1_
I'm porting a biginteger library, and even with this information endianess will complicate supporting comptime...

1526243158
andrewrk
_0joshuaolson1_, why do you need to know the compiling platform?

1526243168
andrewrk
comptime function execution emulates the target platform

1526243267
_0joshuaolson1_
For suppoting initializing/computing a bigint at compile-time (like as a constant) that can then be used at runtime. Thanks, is the target emulation thing in the documentation?

1526243377
_0joshuaolson1_
And how far does the emulation go? All Zig-defined behavior?

1526243420
andrewrk
it's probably good to mention it explicitly, but it's necessary for something to have the same behavior whether run at compile-time or runtime

1526243444
andrewrk
if you can observe a difference in comptime code and runtime code, it's a zig compiler bug

1526243520
_0joshuaolson1_
Then there's no complication after all! Awesome

1526244033
_0joshuaolson1
Wait, in theory what endianness would comptime code see if it received an array pointer from a C call?

1526244072
_0joshuaolson1
I don't care why one would ever do that, just curious about the emulation's design.

1526244603
andrewrk
you can't make a C call at compile time

1526244614
_0joshuaolson1
No network requests either?

1526244620
andrewrk
correct - no syscalls

1526244625
andrewrk
but we do have @embedFile

1526250698
strangeqargo
:D

