1518488814
GitHub179
[zig] andrewrk pushed 1 new commit to master:

1518488815
GitHub179
zig/master dfbb825 Andrew Kelley: fix self hosted tokenizer handling of EOF

1518518413
vegard
-- Could NOT find CLANG (missing:  CLANG_LIBRARIES CLANG_INCLUDE_DIRS)

1518518425
vegard
oops. I get that ^ when I run the cmake command from the readme

1518518434
vegard
I have installed clang and libclang-dev

1518519098
vegard
alright, looks like I needed llvm-5.0 and clang-5.0 on ubuntu

1518519238
vegard
/home/vegard/git/zig/deps/lld/lib/ReaderWriter/MachO/MachONormalizedFileToAtoms.cpp: In function ‘llvm::Error lld::mach_o::{anonymous}::processSection(lld::DefinedAtom::ContentType, const lld::mach_o::normalized::Section&, bool, const lld::mach_o::normalized::NormalizedFile&, lld::mach_o::MachOFile&, bool, bool)’:

1518519243
vegard
/home/vegard/git/zig/deps/lld/lib/ReaderWriter/MachO/MachONormalizedFileToAtoms.cpp:487:21: error: ‘size’ may be used uninitialized in this function [-Werror=maybe-uninitialized]

1518519246
vegard
offset += size;

1518519580
vegard
there's a few more, gonna pass -Wno-error=maybe-uninitialized in CXXFLAGS for now

1518519763
vegard
and -Wno-error=strict-aliasing ...

1518521245
vegard
it works.

1518525419
vegard
andrewrk: echo -n '||=' > test.zig && ./zig build-obj test.zig

1518534419
andrewrk
vegard, what version of what compiler gives those errors?

1518535022
vegard
zig latest git master, my g++ is g++ (Ubuntu 5.4.1-2ubuntu1~16.04) 5.4.1 20160904

1518535080
andrewrk
good to know. I've been testing with g++ 6.4.0

1518535105
andrewrk
the self hosted zig compiler handles '||=' just fine :)

1518535671
vegard
also saw this:

1518535766
GitHub61
[zig] andrewrk pushed 1 new commit to master:

1518535766
GitHub61
zig/master 2dcff95 Andrew Kelley: self hosted: add tokenizer test fix eof handling

1518535874
andrewrk
does it fix it if you replace create with the `new` operator?

1518536034
vegard
yes.

1518536424
andrewrk
this is problematic, because we don't want exceptions, and new can throw std::bad_alloc

1518536943
andrewrk
ah, we can use new(std::nothrow)

1518537376
GitHub71
[zig] andrewrk pushed 1 new commit to master:

1518537376
GitHub71
zig/master 02f70cd Andrew Kelley: zig_llvm.cpp uses new(std::nothrow)...

1518537376
andrewrk
vegard, fixed ^

1518537593
vegard
cool, good job :-)

1518538190
vegard
the ||= is supposed to be fixed too?

1518538409
andrewrk
make install && bin/zig build --build-file ../build.zig --prefix $(pwd)/stage2 install && stage2/bin/zig fmt test.zig

1518538414
andrewrk
test.zig:1:1: error: expected variable declaration or function, found Pipe

1518538660
vegard
I still get segfault with this after pulling: make zig && echo -n '||=' > test.zig && ./zig build-obj test.zig

1518538669
GitHub165
zig/master c721354 Andrew Kelley: correct doc comment in self hosted parser

1518538669
GitHub165
[zig] andrewrk pushed 1 new commit to master:

1518538853
MajorLag_
So about that deref operator. `$` isn't unprecedented and is apparently not a big deal to type on international keyboards. It is however ugly.

1518539011
andrewrk
$ is less of a deal than ^ ?

1518539035
MajorLag_
apparently quite a bit, yes

1518539075
MajorLag_


1518539225
andrewrk
good to know

1518539252
andrewrk
just throwing out one other option here.

1518539264
MajorLag_
yeah, I'm not wild about `$`, just thought I'd mention it

1518539283
andrewrk
1. change all @ to $.  2. use @ for address-of. 3. use '&' for pointer-to-a-single-thing

1518539292
andrewrk
(keep * deref)

1518539317
andrewrk
if you think about the * thing, the item inside [] indicates how many bytes long the block is

1518539339
andrewrk
originally I meant [*] as "could be anything! you don't know how many"

1518539365
MajorLag_
That could work. Though $typeOf is going to feel like a variable to people used to shell languages. # isn't available for that is it?

1518539366
andrewrk
but if * is the poniter-to-single-thing, then [*] kinda means "the length of the block is a pointer"

1518539394
andrewrk
# could be available too

1518539407
andrewrk
#import #typeOf #"identifier"

1518539424
andrewrk
traditionally # means you're giving some info to the compiler too, so that's not bad

1518539442
MajorLag_
unfortunately `?` already has a meaning in Zig. [?]

1518539455
andrewrk
yeah that's what I thought of first

1518539460
Hejsil
[_] maybe then?

1518539466
andrewrk
for pointer to anything?

1518539476
andrewrk
oops I mean for pointer to block of unknown size?

1518539481
Hejsil
Yes

1518539483
MajorLag_
_ could be an identifier... well, except you're considering making _ mean "ignore me"

1518539499
Hejsil
_ is not an identifier as far as I know

1518539509
Hejsil
_ = 5 is valid, even if _ is not declared

1518539518
Hejsil
So I would assume it's a special thing

1518539521
MajorLag_
actually it already does mean that doesn't it? _= sdl.SDL_UpdateTexture(...

1518539523
andrewrk
yeah it's special

1518539598
MajorLag_
hmm... [_] would sorta mean "ignore the length" then I guess.

1518539626
andrewrk
I think [*] is fine for pointer to block of any length

1518539642
MajorLag_
well certainly I prefer it, but we are spitballing

1518539646
andrewrk
it's basically * from C except 2 extra characters to punish you for not using a better type

1518539807
MajorLag_
I'm curious how translate-c will handle this. Just assume all pointers are [*]null ?

1518539821
andrewrk
not the null part

1518539831
andrewrk
it's the worst possible thing, [*] for everything

1518539860
andrewrk
and we won't even support field access of a [*]Struct, you'll have to cast it to  &  (or whatever the single pointer type is)

1518539878
andrewrk
well it's not bad:  foo[0].field

1518539893
andrewrk
not cast, but access an index.

1518539908
andrewrk
oh, it's ?[*] too

1518539911
MajorLag_
yeah that makes sense.

1518539916
andrewrk
(??foo)[0].field

1518539942
andrewrk
there

1518539955
andrewrk
but it's uncommon

1518539986
MajorLag_
these sorts of measures make sense when interacting with C in my opinon.

1518539993
andrewrk
agreed

1518540027
andrewrk
it would be nice if there was some way we could know that, e.g. printf wants a [*]null though

1518540041
MajorLag_
Zig already has the most painless interaction with C I've seen outside of C.

1518541938
vegard
andrewrk: echo -ne '@"\' > unreachable.zig && ./zig build-obj unreachable.zig

1518542557
andrewrk
vegard, the c++ compiler only has to be able to build the self hosted compiler

1518542717
andrewrk
vegard, make install && bin/zig build --build-file ../build.zig --prefix $(pwd)/stage2 install && stage2/bin/zig fmt unreachable.zig

1518542721
andrewrk
unreachable.zig:1:1: error: expected variable declaration or function, found Invalid

1518543056
vegard
oh, okay.

1518543313
andrewrk
it still can be fixed, just low on my priority list :)

1518543431
andrewrk
MajorLag_, things like the argument to libc `puts` should be `[*]null const u8` instead of `?[*] const u8` is one reason that we have @import("std").c

1518543452
andrewrk
I think it would make sense to just put all the libc prototypes in there, to get the better APIs

1518543466
andrewrk
plus, we're going to need that anyway for zig's libc implementation

1518543488
andrewrk
once we have our own libc we're going to rock the cross compilation world

1518544627
MajorLag_
I don't do a lot of cross compilation, so I guess I don't follow?

1518549918
andrewrk
say you're making a game, and you want it to work on linux and windows

1518549928
andrewrk
and it depends on zlib and libpng

1518549955
andrewrk
once we have our own libc, you'll be able to actually build zlib and libpng, with zig, for both targets, no matter which target you're developing on

1518549972
andrewrk
`zig build` in your game's repo will be able to do everything

1518549995
andrewrk
zig libraries will be able to depend on c libraries, without a dependency on a system C compiler

1518550082
andrewrk
the less things you require people to manually install, the more useful zig libraries can be

1518550570
MajorLag_
So the Zig libc implementation would literally replace libc. So would libpng/zlib object files be lniked against Zig-libc and my code, or would libpng/zlib get built using translate-c and the Zig-libc?

1518550748
andrewrk
if you opted into this, libpng/zlib would be linked against zig-libc, and your code linked against zig-libc as well

1518550909
andrewrk
but then implementations would ultimately be the same, e.g. if you used the libc allocator, or if you used the zig default general purpose allocator, it would be the same thing

1518550985
MajorLag_
But I still would have no requirement for a C environment, which is wicked cool.

1518550990
andrewrk
yeah that's the idea

1518551046
andrewrk
the implementation would be mostly a port of musl

1518551059
andrewrk
which is what we've already done for e.g. std.math

1518551070
andrewrk
and musl is gaining popularity recently with docker and alpine linux

1518551081
andrewrk
so we'd actually have pretty decent compatibility with popular libraries

1518551135
andrewrk


1518551154
andrewrk
and then port wine for the windows parts of libc

1518555824
Hejsil
andrewrk, found a fun bug :)

1518555830
Hejsil
Have opened an issue

1518558992
andrewrk
Hejsil, goodness

1518558993
andrewrk
thanks

1518559078
Hejsil
Hit that on a refactor of some code. Good thing it wasn't to hard to find, as I was aware I needed to change the function signatures

1518559121
andrewrk
yeah I'm really sorry that is quite a nasty bug

1518559182
MajorLag_
Oh neat, you can use comptime type creation to instead create a namespace. For example, to only write a bunch of math functions once and create f32 and f64 versions.

1518559267
andrewrk
yep. you can also accept f32 or f64 as a comptime parameter

1518559377
andrewrk
I guess you already knew that and prefer the namespace way of organizing. that's neat, I hadn't thought of that

1518561809
MajorLag_
yeah, but if I wrote it like: lerp(comptime T: type, s: T, e: T, x: T) T   then I would always have to pass the type in when calling it.

1518561914
MajorLag_
this way I can just import it: const interpolate = @import("interpolate.zig").Create(f32);

1518561968
andrewrk
yeah that's pretty nifty

1518561969
MajorLag_
then I can call any interpolation in the library with the specified type.

1518562009
MajorLag_
I don't know if you caught Jon's library stream, but he was talking about a similar concept for Jai. Zig already has it, it turns out.

1518562084
andrewrk
I didn't catch it

1518562088
andrewrk
any other interesting nuggets?

1518562430
MajorLag_
It was a while ago. Um... He talked about different ways they might do things like add a type to "Print", you know, register handlers for things at comptime. I'm sure I'm forgetting a lot.

1518562574
andrewrk
ah I've thought about that

1518562603
MajorLag_
I can think of a way to accomplish it in Zig today, I think.

1518562688
MajorLag_
Taking fmt as an example, you'd have it first see if the type was a struct and contained a function with the right signature (or name), then call that with the flags between "{}"

1518562705
MajorLag_
If it didn't, fallback to normal behavior

1518562721
andrewrk
that's a nice idea

1518562788
andrewrk
one crazy thing I just thought of, format could take a namespace (@import) as a special arg, e.g. "{@}" and that arg isn't printed, instead it's expected to have a comptime function that can override printing for different types

1518562808
andrewrk
and then in that format, after that arg, it checks that comptime function first to see if it has an override

1518562848
andrewrk
so you could even kinda change the default printing for ints and non-structs using this strategy

1518562866
MajorLag_
Yeah, that seems totally doable.

1518562902
andrewrk
a comptime string arg such as the format arg is really a Domain Specific Language

1518562917
andrewrk
you can pretty much do anything as long as it doesn't call external functions or os api

1518562922
MajorLag_
Behind the scenes, is there any difference between a struct and a namespace? Are structs a superset of namespace?

1518562962
andrewrk
they're implemented differently, but in practice an empty struct is the same thing as a namespace

1518563104
MajorLag_
the Create() I mentioned above is implemented as returning an "empty" struct full of function pointers. I use them pretty interchangeably.

1518563118
MajorLag_
er, not pointers

1518563127
MajorLag_
specifically not pointers

1518563289
MajorLag_
I could even extend it to do some basic reflection on struct types and make educated guesses as to what the importer wanted. Like, it's a struct full of f32 members, or an array of such, so it is probably a vector. That's overengineering though.

1518563409
MajorLag_
Or I could get really crazy: const interpolate = @import("interpolate.zig").Create(ComplexStruct, "memberName", "member2Name", "member3Name");  specifying which members to perform interpolation on for that type.

1518563478
andrewrk
MajorLag_, this is why I think we don't need macros

1518563666
MajorLag_
I would have to agree. There's very little I think I couldn't do with comptime. There are probably a lot of language features that could be implemented in "std" if one were inclined.

1518563736
MajorLag_
Did you add the ability to call nakedcc if they're (void)void? if so I might take another crack at computed jumps.

1518563768
MajorLag_
it occurs I could have also used inline maybe.

1518563842
andrewrk
I don't remember. I'll have to get back to you on that, I'm about to be busy for the evening

