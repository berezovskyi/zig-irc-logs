1540341228
dbandstra
andrewrk, what are you working on these days? i've been out of the loop

1540341268
dbandstra
copy-elision-2?

1540343561
andrewrk
dbandstra, that's right. the first attempt turned out to be the wrong approach, I think. I'm not happy with how the code turned out so far

1540343571
andrewrk
it's a prerequisite for fixing coroutines

1540344255
andrewrk
I took off friday and yesterday to travel for a national arcade game tournament, but now I'm back in action on Zig

1540345767
dbandstra
haha cool

1540345952
dbandstra
i haven't even looked at the async/coroutine side of zig yet, am i right in thinking they're totally in flux atm, even the syntax?

1540345960
andrewrk
yes

1540346053
dbandstra
was there some proposal where the read/write functions of std streams would become asynchronous functions?

1540346067
dbandstra
meaning i guess you wouldn't be able to use a stream without an allocator?

1540346095
andrewrk
in the coroutines rewrite, coroutines no longer require allocators

1540346101
dbandstra
oh cool

1540346122
andrewrk
the memory has to go somewhere; but it becomes very simple to have the memory go into the current stack frame (or current coroutine frame)

1540346141
andrewrk
and it is equally simple to have the memory be in a struct, preallocated, or globally allocated, etc

1540346160
dbandstra
do coroutines execute synchronously till the first yield?

1540346168
andrewrk
yes

1540346201
andrewrk
if you want to not execute till the first yield, you can just do: `var frame: @Frame(coroutine_function) = undefined`

1540346226
dbandstra
so that means that, if base instream/outstream read/write was async, and you had a simple implementation (like SliceInStream) which returns right away, there'd be no extra overhead?

1540346361
andrewrk
there would be overhead because `return` in an async function does an atomic rmw so that a thread racing for `return` and a thread racing for `await` have the desired effect. however for an async function that has no suspend points, zig could make an optimization to omit that. because it would be impossible for that situation to occur

1540346389
andrewrk
an async function that returns right away has no suspend points

1540346413
dbandstra
ok

1540346495
dbandstra
i guess the optimization wouldn't work if you have a function which just takes a poitner to an std.io.InStream, but then again such a function needs to be written async style anyway

1540360119
dbandstra
andrewrk, do you know why my audio mixing callback might not be getting called at all?

1540360158
dbandstra
if you don't see anything wrong with the "extern" then i'll keep trying myself to diagnose it

1540360184
andrewrk
dbandstra, it looks fine to me. it seems most likely to be an SDL API thing

1540360190
dbandstra
ok

1540360199
dbandstra
i'll have to do a c equivalent of this and see if that works

1540360205
andrewrk
bummer

1540360229
dbandstra
i was using SDL_Mixer formerly, but now i want to do a custom mixer

1540360323
andrewrk
is there perhaps an error log that you are not seeing that can be enabled?

1540360359
dbandstra
not that i know of

1540360500
andrewrk
if you're not getting a segfault, it seems extremely unlikely to me that there is a zig compiler bug causing a function to not get called

1540360536
andrewrk
but your code does look correct too

1540360556
dbandstra
all i know is i hear no sound, std.debug.warn in the callback does nothing, nor does @panic

1540360765
dbandstra
c version seems silent too, i'm doing something stupid :p

1540361104
andrewrk
I apologize for the fact that I am relieved :)

1540361128
dbandstra
hehe

1540361137
dbandstra
i'm also glad that nothing's wrong with zig here

1540361394
dbandstra
the problem: i was using SDL_OpenAudioDevice (new fangled api) instead of SDL_OpenAudio, and should have been using SDL_PauseAudioDevice instead of SDL_PauseAudio

1540361432
andrewrk
ah. I remember that now. apologies for not spotting it

1540361451
andrewrk
(that said, it's a shame the SDL API couldn't catch it too)

1540361471
andrewrk
I think the concept of "debug mode runtime checks" is under-valued

1540361585
dbandstra
this is kind of spooky actually, SDL_OpenAudio returns device ID 1, where SDL_OpenAudioDevice (with device name = NULL) returns ID 2

1540361616
dbandstra
if those are actualyl different devices, then this bug only  manifested because of my hardware config

1540361639
dbandstra
SDL_PauseAudio(x) just runs SDL_PauseAudioDevice(1, x)

1540361762
dbandstra
anyways

1540387855
Hejsil
andrewrk, I'm finding a handful of syntactic ambiguities: fn(comptime a: {}) void (comptime param or comptime labeld block?)

1540395503
MajorLag
Can anyone tell me if bitfields in Zig begin at LSB always or if it is machine endianess dependant? My guess is that it relies on LLVM for this and that LLVM uses MSB on big endian, but I am having trouble verifying.

1540401138
andrewrk
MajorLag, machine endianness dependant

1540403895
MajorLag
Thanks, now I think I know enough to add arbitrary packed struct reading w/ endian correcting.

