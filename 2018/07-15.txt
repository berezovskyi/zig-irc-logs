1531618641
karlguy
hey, what does pub on a type inside a struct do? aka, whats the difference between foo and bar here:

1531618646
karlguy
pub const Baz = struct {

1531618648
karlguy
foo: ?os.File,

1531618649
karlguy
pub bar: ?os.File,

1531618650
karlguy
}

1531619786
tiehuis
karlguy: this is relevant

1531620800
karlguy
tiehuis: ok, thanks!

1531622396
andrewrk
I'm starting to think that it might not be a good idea to have private fields after all

1531622466
stratact
why is that?

1531622513
andrewrk
for one, it makes sense, at least in test builds, that you would be able to access al the fields of everything

1531622579
stratact
okay but if you gonna have fields be public by default, at least provide a private option

1531622586
andrewrk
that's probably reasonable

1531622768
stratact
There are time times when designing an API that a user of the API shouldn't know or have to think about some fields but the methods should do the work for them

1531622805
stratact
I'm a fan of encapsulation of course

1531624574
karlguy
Geez, I'm gonna feel like a troll then if I say I agree with andrewrk to not have private fields. :P

1531624680
karlguy
If they were classes, they would make sense, but these are structs, which are meant to represent data structures.

1531624683
andrewrk
maybe what "pub" does for fields is make it so that changing them does not require a major version bump

1531624697
andrewrk
err,

1531624849
karlguy
Maybe, but that would leak aspects of the built system into the code

1531624890
karlguy
It's just the tradeoff here between encapsulation vs C-like structs, I guess.

1531624903
karlguy
And I'm on the wrong side of preference

1531625364
stratact
I'm fine with Zig having pub fields by default, just allow Zig programmers to specify a "priv" to a field is all I'm suggesting

1531625429
andrewrk
fields are kinda part of the public API whether we like it or not

1531625449
andrewrk
they affect the size of a struct, which may affect the decision of how the struct could be used

1531625470
andrewrk
if you added 1MB to a struct but it was all private fields, that still should probably be a major version bump

1531625501
andrewrk
or if you make it go from @sizeOf(usize) to larger than that

1531625532
andrewrk
there's reflection, too

1531625874
karlguy
IMO everything should just be public. If person 1 writes a Zig library that has private fields, and person 2 really wanted to access those privates, person 2 could do it though hacky pointer manipulation and whatnot. This is not possible in Java and C++.

1531626033
karlguy
A language actively sabotaging programmers from accessing fields they could access anyways seems a bit un-C-like.

1531626144
andrewrk
I do think private by default makes sense for global variable declarations and functions though

1531626156
karlguy
Yes, of course

1531627727
GitHub191
[zig] andrewrk pushed 1 new commit to master:

1531627727
GitHub191
zig/master 363f4fa Andrew Kelley: self-hosted: generate LLVM IR for simple function

1531631530
hryx
Hm. I just spent way too long thinking about this public struct field issue. In the end I guess I agree that struct fields might as well all be public. A struct is just a chunk of data, like an array (and you wouldn't try to control the visibility of individual array elements), plus method sugar if you're using Zig or Rust

1531631545
hryx
Maybe structs just aren't a great candidate for API "objects" in the first place. Good documentation will always help, but I'm curious what language-level opportunities there are to encourage good APIs with proper encapsulation while offering access to raw data as needed.

1531634778
hryx
Related silly idea: read-only struct fields

1531634789
hryx
A struct field qualifier that issues a compiler error if assignment is attempted outside the module or file scope. Example:

1531634846
hryx
As a possible way to provide some API safety & self-documentation without necessitating hiding data representation (via visibility restrictions a la "priv")?

1531644515
Bas_
I like how python does it.

1531644553
Bas_
At least in the sense that everything is public and if you want to mess things up by touching the stuff you shouldn't be touching it's on you.

1531644603
Bas_
I still think 'pub' is useful for documentation, to communicate that this is the public interface and that you probably shouldn't touch the other things.

1531644672
Bas_
But almost everytime things are encapsulated it just makes me annoyed because it doesn't exactly do what I want and since I can't touch the privates there's no way for me to fix it either, other than writing my own implementation.

1531646526
GitHub114
[zig] BarabasGitHub opened pull request #1240: Allow for all integer types up to 128 bits. (master...issue-#745-allow-any-integer-type)

1531650720
GitHub56
[zig] isaachier opened pull request #1241: Add lower and upper functions (master...lower-upper-functions)

1531664277
andi3
did someone write a dead simple deterministic finite automata using coroutines? I'm thinking about it but have some sort of metal barrier still

1531665960
kristate
Test 16/26 safety integer division by zero...

1531665961
kristate
Program expected to exit with code 126 but instead signaled 9

1531665964
kristate
I was away on a business trip and have returned! I pulled the most recent source and ran into this error upon testing:

1531665966
kristate
Test 16/26 safety integer division by zero...

1531665967
kristate
Program expected to exit with code 126 but instead signaled 9

1531666134
kristate
@andrewrk Ran into #549 today

1531667880
GitHub29
[zig] thejoshwolfe closed pull request #1241: Add lower and upper functions (master...lower-upper-functions)

1531668563
winksaville
I'm trying to run a particular test in std/array_list.zig: test "std.ArrayList.swapRemove". I tried "bin/zig build --build-file ../build.zig test -Dtest-filter=std.ArrayList.swapRemove" and I got a bunch of "No tests to run." and then 173 "docgen example code 1/174...OK" but I don't see anything about std.ArrayList.swapRemove

1531668883
bodie_
hryx / andrewrk, has immutable / val by default been considered?

1531668950
bodie_
I personally favor opt-in mutability, but it's not for everyone.  That said, I believe even C++ style guides say everything that doesn't need to be mutable should be declared as const, which is obviously backwards.

1531669029
bodie_
If you need to, I guess you could declare your whole type "mut" and "inherit" mutability into all of its members

1531669049
very-mediocre
is const insufficient?

1531669077
bodie_
"everything that doesn't need to be mutable should be const".  what's wrong with that sentence....

1531669095
very-mediocre
I'm asking what you mean by "const by default"

1531669106
very-mediocre
We have `const` and `var`

1531669126
bodie_
oh, so you have to pick one.  ok

1531669142
bodie_
I don't use Zig, I was just commenting on what hryx was saying about read-only struct fields

1531669147
very-mediocre
ah I see

1531669168
very-mediocre
unlike languages like javascript, a const pointer to an array doesn't let you write to its contents

1531669172
bodie_
a "read-only" field sounds to me like a val :)

1531669183
very-mediocre
oh you mean for struct properties, i see

1531669189
bodie_
but I guess it's not, since it could have internal mutability

1531669212
very-mediocre
yeah currently it's not granular, if you have a const reference to a struct you can't modify any of its properties of that struct through that reference

1531669306
very-mediocre
it's unclear what would happen if const/var were implemented per-property, then I guess there'd be some precedence rule

1531669328
bodie_
I should probably be more familiar with Zig syntax before commenting on it :D

1531669353
very-mediocre
I'd say if you had a var pointer/alias to a struct, and a const struct property, then the property should stay const

1531669365
very-mediocre
(hypothetically)

1531669383
bodie_
That's how it would work in other languages

1531669409
very-mediocre
bodie_: I theorycraft a bit too, I haven't used zig enough, really busy with work and managing autoimmune disease latelly :(

1531669422
very-mediocre
so I say a lot of silly things :)

1531669929
very-mediocre
also i'm holding back from using it a bit until I play around and find a paradigm for certain things

1531669943
very-mediocre
for example, simple Lz77 encoding... Implement as a stream or generator?

1531670081
very-mediocre
Just stuff like that. For now going with a stream... But I'm not too committed.

1531670115
bodie_
I have a couple of projects on the back burner I'm thinking of using Zig for, but they haven't taken priority yet.... :/

1531670167
bodie_
There are still a few things missing, and I guess I could always use C libs, but for most stuff for me, for now, it's just simpler to use Go.

1531670192
bodie_
That said, it's really fun to watch the progress, and the free coroutines are really intriguing.

1531670305
very-mediocre
Another thing: consts that are declared outside of structs are implicitly comptime

1531670311
very-mediocre
really great for pre-generating static data

1531670319
very-mediocre
but there's no caching

1531670350
very-mediocre
say you're doing a performant HashMap and you want it to expand to a prime number capacity

1531670375
very-mediocre
would be great to pre-generate primes at comptime but currently it kills the compile time, so you're better off copypasting a large sequence of them instead

1531670399
very-mediocre
and I've read on github "everything" might become a struct in order to simplify the language

1531670399
bodie_
that's the kind of thing where a filesystem memo macro could be cool

1531670416
very-mediocre
iirc there's an "embed" thing but I've yet to try it

1531670452
very-mediocre
if everything becomes a struct, I'm a bit unclear if consts declared in a struct body would be implicitly comptime too

1531670494
very-mediocre


1531670518
very-mediocre
this is promising :)

1531670660
very-mediocre
Generating the file wouldn't be at comptime though I suppose :/

1531670695
bodie_
yes, to get a memoized comptime generator, you'd need a way to also store the results and interpret them again as zig IR (llvm?)

1531670711
very-mediocre
in this case it gives you everything as bytes

1531670731
bodie_
then it would be something like: if file X exists, load and interpret it as llvm bytecode, otherwise generate and memoize as file X

1531670748
bodie_
so yeah, a few steps beyond what is possible now

1531670765
very-mediocre
something like that minus the bytecode, it's only for raw data

1531670779
bodie_
I suppose you could just store 64-bit integers

1531670779
very-mediocre
but yeah

1531670788
very-mediocre
That's what I had in mind

1531670790
bodie_
for that particular use case anyway

1531670835
very-mediocre
i'm unclear if we can cast several bytes into a var

1531670893
very-mediocre
I'm too inexperienced with zig to know this

1531670902
bodie_


1531670910
very-mediocre
I was looking at this:

1531670925
very-mediocre
...to combine the bytes

1531670951
very-mediocre
bitcast needs a var to begin with

1531670956
very-mediocre
embedFile gives an array of bytes

1531670969
very-mediocre
don't think you can bitcast a whole array

1531670977
bodie_
isn't the []u8 from embedFile a var?

1531670990
bodie_
I dunno why not

1531670995
very-mediocre
yeah but it'll contain all the values

1531671017
very-mediocre
hmm, maybe if bitCast could return a []u32 for example

1531671049
bodie_
Maybe you could bitcast []u8 to []u32 :D

1531671050
very-mediocre
otherwise I'd go with bytesToSlice to get an array with the bytes combined into elements

1531671099
bodie_
I guess slice wouldn't work because it has a byte representation such as size, start, end or whatever

1531671143
bodie_
I could go find out, but then again I could go work on the stuff at the top of my pile so I could get to the stuff I should actually be considering Zig for :/

1531671153
very-mediocre
lol

1531671159
very-mediocre
I'm pretty sure it'd be byteToSliec

1531671182
very-mediocre
embedFile gets you an array/slice of bytes, you'd need to combine each 4 into 1 var

1531671185
very-mediocre
to get u32

1531671199
bodie_
yeah but why can't you just cast []u8 to []u32

1531671204
very-mediocre
if that works, sure

1531671207
very-mediocre
no idea if it does

1531674169
Bas_
byteToSlice can covert your []u8 to an []u32

1531676887
Bas_
How do I access a struct inside a struct? Like the hashmap in std has a

1531677017
Bas_
Oh it works when I do HashMap(...).Entry, but not when I try to access Entry from the variable I get back from the HashMap function.

1531678911
Bas_
I think there might be something wrong with alignments of structs. It seems to take the alignment of the first field instead of the one with the largest alignment.

1531679430
very-mediocre
>"How do I access a struct inside a struct?"

1531679442
very-mediocre
from within a struct method, the 1st param will be the struct instance

1531679475
very-mediocre
otherwise if you do `const instance = MyStruct.init()` you should be able to do `instance.Entries`

1531679492
very-mediocre
oh, you mean a struct definition inside a struct definition, my mistake

1531679576
very-mediocre
you're right, that's a limitation of using functions that return structs, the namespacing becomes annoying

1531679614
very-mediocre
what you can do is use a separate variable to return the struct type, e.g. `const HashMap_t = HashMap(...)`

1531679648
very-mediocre
then `const a_hash_map = HashMap_t.init(); const EntryType = HashMap_t.Entry;`

1531679727
very-mediocre
annnd it's later than i thought, i'm out :/

1531681066
Bas_
Ehm... so does the init() return another type than the HashMap(...) ?

1531681071
Bas_
I thought they were the same.

1531683707
andi3
its curious how zig prioritizes reading over writing and yet here we are reading two hours allocator function pointer indirections trying to figure things out or squinting at some obscure init functions just because there is no proper ctor dtor and things are hacked together in some way

