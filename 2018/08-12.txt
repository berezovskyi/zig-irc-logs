1534034727
tiehuis
Dirkson: I wouldn't rule that out being an error in the future

1534036314
scientes
how do i reslice a slice?

1534036347
scientes
(without modifying slice.ptr)

1534036564
scientes
nvm

1534037114
MajorLag
I think not allowing creating variables without using them would make it annoying to test WIP code. That was an issue I had with Go.

1534037164
scientes
thats why you make a bunch of small functions

1534038287
scientes
the problem is turning slices into pointers

1534038293
scientes
slices into arrays

1534038494
scientes
PITA

1534039309
scientes
a do {} while() loop would be nice

1534039314
scientes
i guess it doesn't get much use though

1534040707
scientes
why is it so hard to zero initilize a struct?

1534040838
scientes
arm64 has a didicated 0 register to make it fast

1534044092
tiehuis
i think the idea is that if you want to zero initialize a struct you should have to explicitly zero all fields

1534044118
tiehuis
this way at least when the definitions changes you need to re-evaluate this behavior

1534044141
tiehuis
you can create a function to return a zero initialized value as an option of course

1534047539
scientes
are inlined whiles still inlined when --release-small ?

1534047637
scientes
i assume so

1534049689
scientes
there has got to be an easier way to turn a slice into a array

1534050428
scientes
yeah doing x25519 in zig is too difficult without being able to turn slice to array without an explicit cast

1534050825
scientes
poly1305 also runs into this problem

1534054090
mnoronha
I haven't used cmake too much before. After I make changes, will I run into problems if I just rebuild with `make install`?

1534054099
mnoronha
i.e. not `rm -rf build`, etc.

1534054323
mnoronha
Well, it works with just `make install`, and the output suggests the generated makefile checks, and it's late everywhere but the west coast, so I think this is resolved :)

1534054461
scientes
mnoronha, if you are doing alot of building i suggest using -G "Ninja", and then running "ninja" instead of "make"

1534054523
mnoronha
scientes: Will do. Is that just to speed up compiles?

1534054528
scientes
yeah

1534054541
scientes
mainly speed up later compiler, not the first one

1534054555
scientes
but it also use -j by default, unlike make

1534054580
mnoronha
Ah gotcha. To be honest, I've also been poking at the rust compiler and not taking 40+ minutes to build is refreshing even doing nothing fancy

1534054596
mnoronha
Ah yea, make not using -j by default was confusing to me when I first learned about it. Are there any disadvantages?

1534054623
scientes
not really

1534103091
ft3
Hi everyone

1534103134
ft3
I was wondering if it's possible to return an anonymous function from a function

1534103141
ft3
Sort of like in Go

1534103290
ft3
I read the docs, but didn't find anything about it.

1534103403
ft3
Also I tried writing some code to test it but got only compile errors

1534104062
scientes
ft3,

1534104366
ft3
Thank you

1534104536
scientes
also

1534105576
ft3
so if I understand correctly, you can do it only at comptime for now?

1534105869
scientes
there is no interpreter, if that is what you are asking

1534105903
ft3
no that's not what i meant

1534106988
scientes
what do you mean?

1534107011
scientes
I don't think it is properly handled yet

1534107016
scientes
but that it will be eventually

1534107053
scientes
you can't even cast arrays right yet

1534107154
scientes
that was a snarky comment

1534107175
scientes
its just when you remove pointer arithmetic you have to address its use cases

1534109143
MajorLag
why aren't you just using Many Item pointers ([*]) instead of arrays? You can use do pointer arithmetic on those, and since the lengths you're using ar comptime known you don't really need to pass them as an argument.

1534111662
scientes
yeah i'll do that

1534111676
scientes
but it would be nice to have proper type checking

1534111985
scientes
you still have to cast to those

1534112007
scientes
i'm tempted to use slices and see if it compiles them out

1534112093
scientes
ahh you just do &

1534112207
shodan45
small bit of hopefully constructive criticism - I'm reading

1534112537
scientes
how do i do pointer arithmatic on [*] types?

1534112590
scientes
zig/std/crypto/x25519.zig:289:16: error: expected type '[*]u32', found '*u32'

1534112590
scientes
recip(&work[32],&work[32]);

1534112659
scientes
work[32..].ptr is kinda ugly (but not as bad as @ptrCast

1534112801
scientes
why can't slices with comptime parameters just implicitely cast to array?

