1528849044
byronh__
Clownpriest, what do you mean?

1528849075
clownpriest
3.add(4)

1528849126
clownpriest
just thinking about how you might want to abstract something like addition into an interface

1528849145
clownpriest
have a function called add() that accepts anything that's add-able

1528849155
clownpriest
just as a toy example

1528849157
andrewrk
what's the use case for such a function?

1528849175
clownpriest
i mean, it's just a toy example

1528849221
clownpriest
but even as a toy, it would be nice to be able to add an i32 to a usize, tho i know why that's potentially a bad idea

1528849244
andrewrk
you can do that, you just have to explicitly cast your i32 to usize, which asserts that it is non-negative

1528849253
clownpriest
right

1528849269
andrewrk
why do you have an i32 if it's never negative?

1528849284
clownpriest
because i got handed an i32, not my choice

1528849304
clownpriest
from some library i'm using

1528849309
clownpriest
(hypothetical)

1528849316
andrewrk
at the moment you are handed an i32, you should check if it is negative, return an error if it is, otherwise cast it to u32  (or u31 even)

1528849338
GitHub100
[zig] BraedonWooding closed pull request #1068: Zig Fmt recursive option (master...FmtDirectory)

1528849339
GitHub197
[zig] BraedonWooding reopened pull request #1068: Zig Fmt recursive option (master...FmtDirectory)

1528849348
andrewrk
you may be interested in std.math.cast:

1528849365
andrewrk
it casts an integer to another type, returning error.Overflow if it cannot be casted

1528849412
clownpriest
very cool, thanks for this link

1528849437
andrewrk
if it's a C API, and the documentation states that the value will never be negative, then actually the .h file is wrong, and it should be u32, not i32

1528849460
andrewrk
at which point you may consider doing translate-c offline, and then patch up the extern fn declaration

1528849489
clownpriest
i mean in zig-zig code

1528849503
clownpriest
and purely as a hypothetical toy example

1528849530
clownpriest
the larger point is about contracts between types and operations over those types

1528849594
andrewrk
in your hypothetical example, an API author has chosen the wrong type for an integer. it makes sense then that trying to use their API means you have to perform an undesirable cast

1528849638
clownpriest
what if i have Vec3's and Vec5's and i want to have a single add() function to handle both of them

1528849686
andrewrk
sounds like you want to use `var` parameter types and comptime reflection

1528849737
clownpriest
which is what bheads' solution is suggesting

1528849805
clownpriest
that add(x: var) would check that x has a function called "add" and any other conditions it needs to assert

1528849856
clownpriest
in which case, my question is just, why shouldn't add(x: var) also be able to take an i32

1528849908
andrewrk
I think APIs are generally nicer if you use explicit types for everything, and resort to generics only when it solves a specific problem

1528849938
clownpriest
yeah

1528849949
clownpriest
you're most likely objectively right

1528849967
clownpriest
i'm just so tempted....

1528849996
clownpriest
and seems like things like serialization can be pretty nifty with that kind of power (see rust's serde crate)

1528850207
clownpriest
all that said....i think the drive towards minimalism in the language is of critical importance

1528850226
clownpriest
kinda feel like a drug addict after all those other bloated languages tho

1528850245
clownpriest
i have tasted the sweet milk of unbridled abstraction

1528850525
andrewrk
I have just the cure

1528850556
andrewrk
clownpriest, watch this start to finish and you will be cured

1528850574
clownpriest
this is one of my favorite tech talks ever

1528850597
clownpriest
all programming is data transformation

1528850642
clownpriest
the Q&A at the end was pretty funny

1528850694
clownpriest
language lawyer who's drank the c++ kool aid: "but mike, what about abstraction?"

1528850712
clownpriest
mike: "your templates will not save you from yourself"

1528850725
clownpriest
"(or the hardware)"

1528850779
clownpriest
thank you for the reminder

1528850832
dbandstra
andrewrk: thanks for adding || to the docs, i think you forgot to add it to the table of operators though (and the precedence section). btw are there any other undocumented operators?

1528851013
andrewrk
dbandstra, ah, thanks, I'll do that tomorrow. looks like || is the only missing one

1528869694
alexnask
@andrewrk Congratz on going full time on zig

1528869723
alexnask
Haven't been around lately, I have to study for my finals, I will be back with more metaprogramming nonsense after I take them :P

1528869887
alexnask
Personally I would love a weekly zig livestream btw, especially if it's focused on a single project (like a game or something), I think this kind of content is getting more and more popular

1528870822
juturnas
I'm trying to pass an extern zig function as a callback to a C function, and I'm getting the error "error: cast discards const qualifier".  I understand why the pointer to a zig func is const, but what do I need to do to hand that off to a C function that isn't expecting a const pointer?

1528870876
alexnask
@juturnas I don't think a zig function pointer should be const

1528870883
alexnask
Can you show the code please?

1528870966
alexnask
I may be wrong though, you could accept a const function pointer in your function prototype to work around it

1528871170
juturnas


1528871292
juturnas
I'm not 100% sure I understand where the const comes into play

1528871308
alexnask
Right, the function pointer is probably const for sure

1528871325
alexnask
Though I'm not sure what the purpose of the @ptrCast is here?

1528871369
alexnask
'callback' is already of the type you are trying to cast to (well, if we ignore the constness for a second)

1528871404
juturnas
`/Desktop/zigfilter/zf.zig:45:52: error: expected type '?[*]extern fn(?*struct_nfq_q_handle, ?[*]struct_nfgenmsg, ?*struct_nfq_data, ?*c_void) c_int', found '*const extern fn(?*struct_nfq_q_handle, ?[*]struct_nfgenmsg, ?*struct_nfq_data, ?*c_void) c_int'`

1528871464
alexnask
Hmmm

1528871465
juturnas
Trying to address the difference between those two signatures with the cast

1528871493
alexnask
I'm not too familiar with the new pointer syntax but * should implicitely convert to [*] so the issue is probably still the constness

1528871502
juturnas
rog

1528871534
juturnas
This is the first real zig code I'm writing - can I throw that cast or function call into an unsafe block for now as a workaround?

1528871590
alexnask
I don't think you can discard the const, the best workaround is probably to write the prototype yourself, although this should work out of the box

1528871613
juturnas
Ahh gotcha, I didn't realize that was an option, makes sense though

1528871623
alexnask
@juturnas you can use zig translate-c

1528871649
alexnask
Instead of directly using @cImport, if you need to modify signatures

1528871685
alexnask
Also, the C functions probably expect a 'stdcallcc' func pointer

1528871715
alexnask
This is probably not an issue if you're running on x64 though, the default calling convention should be equivalent to stdcallcc on all major platforms

1528871720
alexnask
Just saying though

1528871795
alexnask
Oh, nvm, 'extern' should do the trick, stdcallcc is a windows thing

1528871869
juturnas
Interesting, thanks for the info

1528871952
alexnask
Hit me up if you have any issues. I definitely think this would be worthy of an issue on github, people shouldn't have to manually modify signatures to use C functions that expect callbacks

1528872152
juturnas
will do, thanks

1528885755
GitHub104
[zig] tiehuis opened pull request #1105: Add i128 compiler-rt div/mul support (master...i128-compiler-rt)

1528889584
GitHub28
[zig] BraedonWooding closed pull request #1068: Zig Fmt recursive option (master...FmtDirectory)

1528889588
GitHub31
[zig] BraedonWooding reopened pull request #1068: Zig Fmt recursive option (master...FmtDirectory)

1528895991
andrewrk
alexnask, hmm maybe we should translate-c function pointers into * instead of [*]

1528895999
andrewrk
btw * does not implicitly cast to [*]

1528897287
alexnask
@andrewrk Is there any reason why it shouldn't? Does [*] there is more than one element pointed to (I though it meant you have to treat it as an array, but that doesn't mean that the array has more than one element imo)

1528897457
andrewrk
it does allow *T to *[1]T to [*]T

1528897484
andrewrk
[*] means it is "unknown length"

1528897558
andrewrk
my only concern is if allowing it would ever cause a bug

1528897756
alexnask
Hmm

1528897982
andrewrk
it is unfortunate about juturnas's example. I hope they will not be scared away

1528898016
andrewrk
I don't consider the ergonomics of the code they had to write acceptable

1528898231
bheads__
is this something a lib function could help with ie:  typecons.stripConst(comptime T: type) T

1528898253
bheads__
or typecons.castToCFunctionPtr ?

1528898254
andrewrk
bheads__, that suggestion ignores the root cause

1528898269
bheads__
fair enough

1528898336
andrewrk
there could be a function for converting *T to [*]T. maybe that's enough

1528898362
bheads__
wouldnt ptrCast do that?

1528898385
bheads__
just need a better way to write the dest pointer type

1528898392
andrewrk
I'm probably going to remove ptrCast and add ptrElemCast, which only takes the new child type

1528898422
andrewrk
there is also

1528898765
andrewrk
alexnask, btw now that pointer reform has landed, you should now be good to use ?type instead of type(undefined)

1528898783
andrewrk
I have not made that change myself yet

1528898802
alexnask
@andrewrk Good to know, I'll take a look at it and confirm if it works (/ switch the typeInfo code)

1528902331
GitHub85
[zig] andrewrk pushed 1 new commit to master:

1528902331
GitHub85
zig/master 8dd2479 Andrew Kelley: disallow implicit casts that break rules for optionals...

1528903090
GitHub172
zig/master 41e6c66 Andrew Kelley: langref: add merge error sets operator to operator table

1528903090
GitHub172
[zig] andrewrk pushed 1 new commit to master:

1528904946
GitHub33
[zig] andrewrk closed pull request #1101: Fix types in AST switch statements (master...ast-switch-fixes)

1528904946
GitHub184
[zig] andrewrk pushed 1 new commit to master:

1528904946
GitHub184
zig/master e1f56c9 Andrew Kelley: std.zig.ast: add test for iterate...

1528905590
GitHub36
[zig] andrewrk pushed 1 new commit to master:

1528905590
GitHub36
zig/master fc87f6e Andrew Kelley: fix race condition bug in test harness of std.atomic

1528914995
ManDeJan
Hello everyone! I want to try zig out but I'm unable to download the binaries, is the linux download broken for anyone else?

1528915246
andrewrk
hi ManDeJan. I'll take a look

1528915254
edr
it worked for me, maybe try clearing your cache?

1528915274
andrewrk
worked for me

1528915302
andrewrk
the download link returns http 301 but it should return 302:

1528915309
andrewrk
it's annoying to fix. sorry. will try to solve it eventually

1528915315
ManDeJan
I get an 403 forbidden

1528915325
ManDeJan
I'll try another browser

1528915357
andrewrk
the latest is currently

1528915478
ManDeJan
That works, thank you very much :)

1528916613
mahmudov
prebuilt binaries needs to llvm for runtime ?

1528916649
mahmudov
i have llvm 4.0.0, i think for compile it needs 5.x but for run ?

1528916952
andrewrk
mahmudov, the prebuilt linux binary is 100% static. it will work on any linux

1528917604
dbandstra2
what would be the best way to read a packed struct from a file, then use the values from the struct, where the struct fields might not be aligned? (e.g. u32 after odd number of u16s)

1528917923
andrewrk
dbandstra2, in general I would recommend using normal structs, and then carefully parsing the file a field at a time, validating user input along the way

1528917988
bheads_
it would have the same alignment as the struct that wrote it, but if you writing the bytes of a struct direct to disk it should be 1 byte aligned

1528918033
dbandstra2
andrewrk: ok

1528921078
dbandstra2
andrewrk: i guess alternative would be something like this

1528921099
dbandstra2
andrewrk: having the packed struct is still kind of nice because you can use @sizeOf and @offsetOf to seek around

1528921251
andrewrk
dbandstra2, offset is null if the type is zero bits (@sizeOf() == 0)

1528921280
dbandstra2
ah

1528921296
andrewrk
I might change that to just make the value undefined

1528921376
andrewrk
all those `comptime` keywords are redundant

1528921398
andrewrk
because getField returns `type` it cannot be executed at runtime, and therefore is always implicitly comptime-evaluated - the entire body

1528921455
andrewrk
btw have you seen

1528921658
dbandstra2
nope, but i was kinda wondering if someone already did zip file parsing hehe

1528921807
dbandstra2
what i'm trying to do is figure out how to make composable utilities in zig (do just one thing, work on any kind of in/out stream)

1528921880
dbandstra2
it would be cool to get that hexdump tool split into a zip reader, and the hex dumper stuff in a separate file

1528922058
dbandstra2
mainly just need to figure out what the scanning/walking interface would look like (maybe a coroutine?)

1528922094
andrewrk
I think the std lib is missing some basic event loop features before that becomes straightforward

1528922112
andrewrk
e.g. async/await API for file system I/O

1528922320
very-mediocre
would you roll zig's equivalent to libevent or libuv via syscalls?

1528922377
very-mediocre
seems a pretty huge undertaking

1528922481
dbandstra2
andrewrk: do you mean file reads would be asynchronous?

1528922498
dbandstra2
andrewrk: or there would be sync/async variants of functions like in nodejs?

1528922989
andrewrk
very-mediocre, what do you mean via syscalls?

1528923028
andrewrk
here's an event based tcp server in the standard library test suite:

1528923041
andrewrk
here's the syscalls it uses:

1528923143
andrewrk
dbandstra2, yeah, what's the point of coroutines if you're not doing async I/O ?

1528923200
dbandstra2
you could walk through files in the zip archive without allocating a whole list of them

1528923236
dbandstra2
the scan-zip function could just yield them as it reads through the archive

1528923243
andrewrk
you can do that in a blocking fashion, without coroutines

1528923309
dbandstra2
you're right. i haven't actually read about coroutines yet

1528923331
very-mediocre
I was referring to epoll

1528923339
very-mediocre
doing that cross-platform is hairy

1528923377
very-mediocre
checking the code you linked now

1528923444
very-mediocre
ah i see you're implementing it for linux only for now

1528923445
very-mediocre
okay

1528923452
very-mediocre
*nix rather

1528923496
andrewrk
linux only, for now, that's correct

1528923527
andrewrk
I'm planning on having the self hosted compiler fully take advantage of coroutines and async I/O, so it'll get battle tested

1528923535
andrewrk
on all supported platforms

1528923544
very-mediocre
i noticed someone here was importing the C libevent the other day, that's why I asked what you had in mind for an event loop

1528923565
very-mediocre
makes sense!

1528923566
andrewrk
certainly an event loop in the std lib that does not depend on libc or any other third party code

1528923789
very-mediocre
you know, when you think about it, what used to be considered pretty involved projects are kind of "solved" these days and it's just a matter of implementing, so yeah, maybe not that huge an undertaking after all

1528923825
very-mediocre
i think that's why zig is appealing actually, there's a LOT of "solved" things but nobody put them together coherently

1528923908
andrewrk
exactly

1528923909
very-mediocre
(and zig does that)

1528923914
andrewrk
zig is nothing now, it's just engineered very carefully

1528923919
andrewrk
*nothing new

1528923939
andrewrk
except for error return traces! error return traces are new and someday people will be raving about them

1528923982
zignoob
'there's a LOT of "solved" things but nobody put them together coherently' rewrite it in rust tries to do that?

1528924006
dbandstra2
here are my bookmarks of zig code repos collected from the last few days of watching irc. are there any other cool ones?

1528924040
very-mediocre
I'm not so sure about that, while I didn't use Rust a lot I thought it was too convoluted for my liking

1528924051
dbandstra2
preferably active/recent ones

1528924108
very-mediocre
again I like Rust overall, but it's not doing what zig does

1528924219
very-mediocre
apologies if I sound incoherent, I suck at talking about programming, lol

1528924248
very-mediocre
I just think Rust (intentionally) sacrifices elegance for safety

1528924261
very-mediocre
that's great if you're doing something like Servo

1528924300
andrewrk
I would say that elegance is one of the last priority items that zig is motivated by

1528924312
andrewrk
zig would happily sacrifice elegance for safety

1528924321
very-mediocre
Really? I think zig is an extremely elegant solution

1528924329
very-mediocre
I don't mean "cute" as in Ruby

1528924338
andrewrk
ah

1528924341
very-mediocre
I mean the design is lean and makes sense

1528924352
andrewrk
ok now we're on the same page

1528924362
very-mediocre
"A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away"

1528924366
very-mediocre
that famous quote comes to mind

1528924396
very-mediocre
man, it's so hard to talk about this stuff

1528924459
very-mediocre
i'll leave this here:

1528924497
very-mediocre
i like the 2nd answer

1528924593
ltr__
how i see zig, an the reason why cought my eye in the first place, is that i can imagine very clearly how things would be implemented in C, it has the same ergonomics, but saves you a lot of boilerplate. the faster i can translate one language in my mind to C the better.

1528924788
very-mediocre
That's a good answer since so many languages are based on C

1528924898
very-mediocre
I gave it some thought, a lot of times when implementing something I'm not happy with it because it isn't optimal

1528924917
very-mediocre
I think elegance is how close code is to optimal in terms of software design

1528924936
very-mediocre
merits like correctness, safety, performance etc follow from that

1528924950
very-mediocre
I'm done pontificating now :)

1528925000
andrewrk
I'm stuck on implementing

1528925036
andrewrk
I realized the debug safety I wanted to do is fundamentally impossible, so now I have to decide, still do it, but have imperfect safety, or give up and re-evaluate

1528925102
mahmudov
cool andrewrk, thnks +1

1528925147
zignoob
I'm currently reading zig docs some more,

1528925198
andrewrk
zignoob, that code is demonstrating the useful compile error that @OpaqueType produces for certain types of mistakes

1528925313
bheads_
andrewrk, I would put it on hold, give it a day or two then come back and re-review.  Your not going to solve the aliasing problem that easy :)

1528925319
mahmudov
andrewk if i download once staitc binary of zig so i can produce the next releases with it ? according to s2 or s3? is it suggestible?

1528925324
mahmudov
static*

1528925367
zignoob
ok, is there any zig idiom to reproduce a similar effect?

1528925368
andrewrk
mahmudov, I am sorry, I do not understand your question. I recommend the static build of master branch.

1528925420
very-mediocre
mind if I ask why passing non-copyable things implicitly is beneficial?

1528925441
andrewrk
zignoob, I suggest creating a struct with the type as a field

1528925470
zignoob
ok thats the c way of doing it

1528925472
mahmudov
i mean if i download the prebuilt binary of 0.x so with using this static binary can i compile the zig 0.x+1 (next releases)

1528925573
andrewrk
mahmudov, zig is not yet self-hosted. You would be downloading a binary compiled from C++ source.

1528925573
mahmudov
Build Self-Hosted Zig from Zig Source Code - iread this

1528925594
andrewrk
> Note: Stage 2 compiler is not complete. Beta users of Zig should use the Stage 1 compiler for now.

1528925605
mahmudov
hm ok clear, andrewrk +1

1528925661
bheads_
looking at 733, I think D pure functions solved this issue, but thats not a path I would want to go down

1528925719
bheads_
D pure functions are ones that dont cause side effects, ie they dont change params or global data

1528925728
andrewrk
very-mediocre, the most common function parameter wants these semantics: I either want a small byvalue item, or a pointer to a larger item. If it's a pointer, I promise that I will not, directly or indirectly, modify the bytes of it

1528925769
andrewrk
the closest we have now is:  *const T   but this does not allow a small byvalue item, and it also does not contain the promise of not indirectly modifying it

1528925784
very-mediocre
I see

1528925812
bheads_
Here is the idea in D

1528925844
very-mediocre
nim lets you mark functions as pure

1528925847
andrewrk
I've read about pure functions in D. we want this parameter type in non-pure functions too

1528925861
very-mediocre
but that's still the user having to BYOS (bring your own safety)

1528925919
zignoob
about your issue, why can structs only be passed as pointers?

1528925968
andrewrk
to avoid this issue

1528926049
zignoob
if you pass by value you have no side effects so the issue does not even exist?

1528926057
andrewrk
if I can solve this issue and a couple more big ones, we will get to the point where it is guaranteed the only memcpy's that zig would generate would be in variable declarations

1528926090
andrewrk
if you pass by value, then there is a hidden memcpy

1528926109
andrewrk
and then you have programmers wondering whether they should make struct parameters pointers or not

1528926119
zignoob
yes that is bad so you just prohibit this for performance reasons

1528926131
andrewrk
instead they should be thinking about what semantics they want, and the compiler can choose the best way to represent that

1528926164
zignoob
yes so one way a friend of mine designs his language is making them pointers in the compiler so you always pass by ref and then the compiler optimises for you

1528926216
zignoob
I mean you always pass by values unless you want side effects

1528926235
zignoob
that is aligned with the general semantics one would expect from pointers vs values

1528926250
bheads_
maybe dont let allow a global to be passed by value

1528926314
bheads_
so globals cannot be passed by const ref

1528926388
bheads_
if you really really want to, then you would have to do an unsafe ptr cast

1528926419
andrewrk
I think I'm going to just make this change, put some safety in, and the stuff that zig can't catch is undefined behavior

1528926436
very-mediocre
that sounds reasonable

1528926467
very-mediocre
what you're looking for is "no side effects" and that's not a solved problem except if you're Rust or FP

1528926473
andrewrk
there's plenty of undefined behavior zig can't catch, for example a pointer to a stack variable outliving the function

1528926496
bheads_
yeah that one sucks

1528926521
andrewrk
we can get better safety with more advanced flow analysis, but never perfect

1528926530
bheads_
though there are ways to prevent that

1528926602
bheads_
but most ways I have seen are not zen

1528926706
very-mediocre
if you wanna do it like nim

1528926721
very-mediocre
the compiler would complain that "innocent_function" can cause side effects

1528926747
very-mediocre
dont_modify_param would be labeled as pure / not causing side effects

1528926757
very-mediocre
any functions called inside it would have to have that annotation too

1528926768
very-mediocre
it's "infectious" purity

1528926777
bheads_
same as D

1528926815
very-mediocre
right

1528926820
very-mediocre
pure functions are a really good habit

1528926826
very-mediocre
i accidentally make most of my functions pure

1528926855
bheads_
but const refs need to work with impure functions

1528926856
very-mediocre
or pure-ish, like I have a lucid idea of the side effects and try to contain them

1528926877
very-mediocre
yes it's very much a programmer initiative to mark a function as pure

1528926884
very-mediocre
it's opt-in safety

1528926919
very-mediocre
in a sense it's better than not having it at all, then you'd be making your functions pure on your own, without the compiler helping you

1528926938
very-mediocre
but it also introduces a new keyword or annotation, which might bloat the language.

1528926953
andrewrk
there's a related concept that we might add in zig, which is whether you want the compiler to evaluate a function at comptime at a given callsite, if it happens to know all the args at comptime

1528926969
andrewrk
for example you would want std.debug.assert to have this property

1528926983
bheads_
or a logger

1528926984
andrewrk
it would catch more bugs at compile-time

1528926996
andrewrk
a logger? how can you log something at compile-time?

1528927013
bheads_
I mean have the compiler catch thats a logger is pure

1528927030
zignoob
for example you would want std.debug.assert to have this property || yes that sounds like it'd make a lot of sense

1528927047
very-mediocre
i don't think it's possible for a compiler to infer purity

1528927050
andrewrk
you would also want pure functions to have this property, probably

1528927064
andrewrk
zig used to infer purity

1528927070
very-mediocre
i mean in a useful way

1528927078
very-mediocre
like if you already have no possible side effects

1528927086
very-mediocre
what good is identifying it as pure at this point?

1528927095
very-mediocre
or am i misunderstanding

1528927103
andrewrk
then you know that you can evaluate it at compile time at a callsite if you know all the args

1528927124
very-mediocre
oh, sure, I get it now

1528927132
bheads_
ah yeah

1528927132
very-mediocre
I'm still stuck on the other issue

1528927138
bheads_
I was too

1528927170
very-mediocre
if you're gonna add a purity keyword for that comptime feature

1528927180
andrewrk
e.g. if we remove T.Child and expect users to use `comptime std.meta.Child(T)`, it's unfortunate that it requires `comptime`. zig should figure out to eval that function at compile time and just let you do std.meta.Child(T)

1528927190
very-mediocre
could it double as a way to mark functions pure?

1528927216
andrewrk
I haven't given up on having zig figure it out implicitly

1528927216
bheads_
whats about marking the function signature as comptime ?

1528927249
andrewrk
bheads_, that sounds like it would require the function to always run at comptime\

1528927262
bheads_
right, some function you would want to

1528927360
very-mediocre
couldn't you mark functions as impure (innocent_function)

1528927377
very-mediocre
and keep note of what variables are affected by it

1528927394
andrewrk
did you see the examples that I posted?

1528927410
very-mediocre
yes but I don't fully grasp the AtomicRmw API

1528927415
very-mediocre
so I didn't catch everything

1528927466
very-mediocre
(assuming you're talking to me)

1528927484
very-mediocre
(now I think you weren't, lol)

1528927501
andrewrk
I was - I'm pointing out that it's not straightforward to know what variables are affected

1528927539
very-mediocre
I see

1528927541
bheads_
yeah... pointers in structs and globals as your pointed out makes things tricky

1528927544
very-mediocre
the indirection of `modify` ruins it?

1528927553
bheads_
I do have to take off for the day, later all

1528927558
very-mediocre
wouldn't modify be marked as impure first

1528927567
very-mediocre
and then taint `innocent_function` with the same impurity

1528927588
very-mediocre
+ any additional impurity that innocent_function might do (not featured in this example)

1528927659
very-mediocre
i get that modify is general

1528927668
very-mediocre
so it's hard to tell it affects global_array

1528927676
very-mediocre
but it's still impure

1528927684
very-mediocre
by virtue of assigning

1528927704
very-mediocre
but at the callsite in innocent_function, it becomes clear, no?

1528927843
very-mediocre
like 1. modify has side effects on its 1st parameter; 2. a function that calls modify(1st param) becomes impure toward that 1st param as well

1528927858
very-mediocre
at this point we know innocent_function has side effects on global_array

1528928707
very-mediocre
I'm in a weird timezone and it's really late here, so I'm gonna call it a night

1528928717
very-mediocre
keep up the good work, andrewrk :)

