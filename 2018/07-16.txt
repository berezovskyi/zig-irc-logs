1531720996
very-mediocre
just saw this: `very-mediocre, can you elaborate on caching comptime computed consts? zig already caches all comptime function calls`

1531721040
very-mediocre
I have a top-level const declaration that computes 500 primes, compile time is quite lengthy when using `zig test` on this file

1531721054
very-mediocre
it's still just a few seconds, but definitely noticeable

1531721061
andrewrk
ah I see, caching between invocations

1531721063
very-mediocre
(ping andrewrk)

1531721065
andrewrk
I have a plan to do that

1531721079
very-mediocre
i see!

1531721101
andrewrk
I am exploring this concept this week in the self hosted compiler

1531721149
very-mediocre
re:`very-mediocre, what do you mean about continuation expressions? I'm not aware that we have those` -> i meant "continue expression" i.e. while (condition) : { expression }

1531721196
very-mediocre
100% personal feedback about this of course, I feel it breaks the principle of not having unnecessary things, and it's not that consistent to have : denote this

1531721199
andrewrk
I updated the docs to say "continue expression"

1531721219
very-mediocre
right, I just checked the docs because I knew I'd seen it there :)

1531721240
andrewrk
I appreciate the feedback. This feature is here to stay - it's the same thing as the final expression in a C for loop

1531721251
very-mediocre
Understood

1531721279
andrewrk
good night

1531721284
very-mediocre
bye

1531721297
very-mediocre
gn

1531722491
unique_id
very-mediocre: "that's a limitation of using functions that return structs, the namespacing becomes annoying" - You have to do the very same thing in languages that don't use anonymous structs. C++: using T = Type<bool>::InnerType; It's not annoying IMO, it's the proper way.

1531722918
unique_id
Bas_: HashMap(...) returns a type. init returns an instantiation of that type.

1531723007
unique_id
Bas_: Well.. I don't know if it's correct to say that HashMap(...) returns a type, or I should say it does so at compile time. It refers to a type.

1531723121
unique_id
Or you think of HashMap(...) as being a type, like std::vector<int> is a type in C++

1531723137
unique_id
could*

1531723925
very-mediocre
It's "proper" but still a bit of a niggle

1531723965
very-mediocre
Let's be honest, zig doesn't really have many "major" problems

1531723976
very-mediocre
imho it's already mostly better than C

1531724052
very-mediocre
I mean no "major" design problems

1531725803
stratact
Well Zig can't just be a "better C," it has to be a unique language in its own right which cater to the needs that no other language does, so that it would make people (especially companies) want to use Zig instead of something that's already maintain and in abundance. I think Zig having first-class debugging makes this language unique and attractive that many would want to try switch to.

1531733143
unique_id
andrewrk, there's a leftover "const fmt = std.fmt" in buffer.zig

1531749522
andrewrk
unique_id, thanks

1531752945
GitHub56
[zig] andrewrk closed pull request #1240: Allow for all integer types up to 128 bits. (master...issue-#745-allow-any-integer-type)

1531752945
GitHub185
zig/master e9a03cc Andrew Kelley: all integer sizes are available as primitives...

1531752945
GitHub185
[zig] andrewrk pushed 1 new commit to master:

1531756851
winksaville
I'm trying to run a particular test in the compiler, such as std/array_list.zig: test "std.ArrayList.swapRemove"?

1531756852
GitHub40
[zig] andrewrk pushed 1 new commit to master:

1531756853
GitHub40
zig/master d3ce9d0 Andrew Kelley: codegen: remove unused variable

1531756854
winksaville
I tried "bin/zig build --build-file ../build.zig test -Dtest-filter=std.ArrayList.swapRemove" and I got a bunch of "No tests to run." and then 173 "docgen example code 1/174...OK" but I don't see anything about std.ArrayList.swapRemove

1531756889
andrewrk
if you're trying to hit a specific test, I recommend this:  bin/zig test file_with_the_test.zig --test-filter "foo"

1531757203
winksaville
andrewrk: txs, ./bin/zig test ../std/array_list.zig --test-filter "std.ArrayList.swapRemove" worked and reported:

1531757205
winksaville
Test 1/1 std.ArrayList.swapRemove...OK

1531757222
andrewrk
now you have a binary which only contains that 1 test

1531757232
andrewrk
so you can run it again with `gdb ./zig-cache/test -ex run`

1531757347
winksaville
But then I tired leaving off the --test-filter and ran "./bin/zig test ../std/array_list.zig" and it ran 612 tests, I was expecting it to run just the 5 tests in array_list.zig, what's happening?

1531757380
andrewrk
it's importing other files, and in each of those files they are importing other files, and zig ends up discovering all the tests

1531757406
andrewrk
it's why you can do `bin/zig test ../std/index.zig` and it tests all the standard library

1531757434
winksaville
got it

1531757456
andrewrk
some of the way this works may change, but I don't consider it to be a high priority

1531757478
winksaville
how do you run all of the tests in one file?

1531757564
andrewrk
there's no way to specify that to zig

1531757617
winksaville
interesting

1531757644
andrewrk
if you do `zig test file.zig` then it will at least run all the tests in that file

1531757709
winksaville
yeah, but 600 others also

1531757718
winksaville
in my case

1531758771
winksaville
So it seems the naming convention is used to limit tests and test-filter can then be used to do a simple 'starts with' syntax (no regex), correct?

1531758932
andrewrk
correct, except 'contains' instead of 'starts with'

1531759110
winksaville
Is "std.ArrayList.swapRemove" the new convention, the other tests are space separated english snippets in array_list.zig?

1531759128
andrewrk
there's no convention because I'm probably going to change how it works

1531759135
andrewrk
it's the wild wild west

1531759141
winksaville
:)

1531759166
winksaville
I was thinking I'd update the docs, but maybe to early for that?

1531759177
winksaville
(gtg, be back on line later)

1531759206
andrewrk
if you're looking for somewhere to contribute, my suggestion would be to build a simple project using zig, and then when you run into issues, work on those issues

1531777041
winksaville
in array_list swapRemove does not return an error how do you "catch" out of bounds errors?

1531777048
winksaville
I tried:

1531777049
winksaville
var val: error!i32 = list.swapRemove(0) catch |err| { std.debug.warn("caught err:{}\n", err); };

1531777066
winksaville
But the compiler says:

1531777076
andrewrk
swapRemove asserts that the index is in bounds

1531777085
andrewrk
you can tell because the return value does not have a possible error

1531777150
winksaville
ok, but swapRemove takes an index which can be out of bounds, I assume I can "catch" it some how?

1531777194
andrewrk
no, because the function does not return an error

1531777254
winksaville
So wouldn't it be prudent to have a swapRemoveOrError fn?

1531777292
andrewrk
no. any call to such a function would be a code smell

1531777322
andrewrk
why would you try to remove something that is out of bounds?

1531777357
winksaville
Because someone asked me to. Why is there a removeOrError but not remove?

1531777464
andrewrk
I forgot to delete that function when I merged somebody's PR

1531777500
andrewrk
you're right, it's inconsistent. we should either have the "OrError" variants or none of them

1531777524
winksaville
glad I got something right :)

1531777595
GitHub153
[zig] andrewrk pushed 1 new commit to master:

1531777595
GitHub153
zig/master 9b56efc Andrew Kelley: remove std.ArrayList.removeOrError function

1531777596
andrewrk
winksaville, it's gone

1531777660
andrewrk
I recommend this line before your call to array.swapRemove:  if (index >= array.len) return error.OutOfBounds;

1531777678
andrewrk
assuming that's what you want

1531777737
winksaville
Yea and why not have both swapRemove and swapRemoveOrError?

1531778034
andrewrk
I suppose that could be fine

1531778253
winksaville
There is a "fn pop(self: *Self) T" and "fn popOrNull(self: *Self) ?T" why both of these and not "fn popOrError(self: *Self) !T"

1531778552
andrewrk
what would the error be?

1531778617
winksaville
OutOfBounds or EmptyList

1531778676
andrewrk
that doesn't make sense for pop. pop doesn't need to assert that the list is non-empty

1531778684
andrewrk
if you wish to do this assertion, you can do list.pop().?

1531778719
andrewrk
list.pop() orelse return error.EmptyList

1531778781
andrewrk
one of the most important concepts in programming is to understand the difference between: normal runtime behavior, error handling behavior, and assertions

1531778894
winksaville
that seems to be a squishy statment, in the end to write "perfect" code we need to handle both, I think.

1531779096
winksaville
handling somethings with Null and other things with errors seems odd, but if that's the intent then I case swapRemoveOrNull would be prudent.

1531779170
andrewrk
swapRemoveOrNull is right out

1531779186
andrewrk
perfect code has assertions in it

1531779198
andrewrk
every statement which derefereces a pointer is asserting that the pointer is valid

1531779221
andrewrk
it would be incorrect, and in fact impossible, to make every pointer dereference return a possible error

1531779234
andrewrk
implicit assertions are a fundamental requirement of software

1531779411
winksaville
what do you mean by "swapRemoveOrNull is right out"

1531779424
andrewrk
I believe it is a british idiom

1531779489
andrewrk
it means "there is no doubt that this will not happen"

1531779649
winksaville
k, so you'd prefer popOrNull and swapRemoveOrError

1531779821
andrewrk
the way I would prefer all std library modifications is in the form of a pull request, with tests, and an explanation for the use case, ideally with a link to your open source zig project

1531779872
andrewrk
you can always make the modifications in the form of utility methods that are available in your project in the mean time

1531780175
winksaville
np, I'm trying to figure out the philosophy as array_list seems inconsistent. All of the inserts returning errors, then there is removeOrError but swapRemove didn't return an error and pop returning Null. Hence the questions.

1531780267
andrewrk
the std lib is not stable until 1.0.0

1531780276
andrewrk
right now it's mostly a test bed for the language

1531780424
winksaville
sg

1531781617
MajorLag1
For the record, I think I added a "orError" variation just because `set` had an `orError` variation.

1531782189
GitHub185
[zig] winksaville opened pull request #1253: Give ArrayList tests consistent names (master...give-std.ArrayList-tests-consistent-names)

1531783129
andrewrk
MajorLag1, that makes sense

1531783658
GitHub52
[zig] andrewrk pushed 1 new commit to master:

1531783658
GitHub52
zig/master 0fa24b6 Andrew Kelley: allow implicit cast of undefined to optional

