1522718486
relatingdata
Hi

1522718609
relatingdata
been playing with Zig for a couple of weeks and had a bit of time to look at some of the documentation over Easter :-

1522718626
relatingdata
:-) ;-)

1522718711
relatingdata
a few questions come to mind: is there any notion of C++ type operator overloading functions envisioned for Zig?

1522719105
relatingdata
having worked in many different languages in the past 40 odd years having a definite language indentation style is a definite advantage the one i have been favoring ober the last couple of years is

1522719133
relatingdata
seems to work for me for C python and javascript :-

1522719139
relatingdata
:-)

1522719482
MajorLag
operator overloading: short answer is no. Longer answer at end of this issue

1522719672
MajorLag
As I understand it, there will be a zigfmt, but the compiler won't enforce an indentation style except in cases where it might cause confusion, like a bracketless if with two indented statements under it.

1522719751
relatingdata
ok understood

1522719913
relatingdata
the reason I was asking is that I deal a lot with vectors/matrices/tensors and also complex number both in f32 and f64 a lot of wich can be off loaded onto GPU in various ways Julia does this nicely in some ways but I am still looking for a way of doing this in a low level language

1522719931
relatingdata
Typescript type generics?

1522720303
MajorLag
There are generics, they work using the comptime functionality:

1522720315
MajorLag
I'm not familiar with typescript, anything special about their generics?

1522720625
relatingdata
No, must do more reading and much more coding to get familiar  with the set of features of Zig :-)

1522728803
andrewrk
MajorLag, I have the static linux build working. I just need to integrate it with travis ci now

1522729059
relatingdata
how close is zig to generating web assembly from the llvm code?

1522729127
andrewrk
relatingdata, I believe it works now, but LLVM has webassembly as an experimental target (not included by default)

1522729150
andrewrk
I expect it to become default in llvm 7

1522729157
andrewrk
about 6 months from now

1522729397
relatingdata
so should I try to create something like

1522729437
andrewrk
sounds like a fun project

1522739228
tiehuis
relatingdata: if you were interested in wasm compilation see here:

1522739260
tiehuis
you don't to patch the compiler anymore either, so the only main requirement now is to have LLVM compiled with WebAssembly support

1522739296
tiehuis
the static docker build has this enabled so that should actually work right now

1522739332
tiehuis
i'd also modified parcel to recognize zig files and get automatic conversion from js here:

1522739356
tiehuis
that was a WIP though and hadn't got the tests passing on that yet

1522743311
kvuser7
Hi all, anyone have any ideas why one of my test passes, and the other fails, in this code? -

1522743340
kvuser7
var buf_stream = io.BufferedInStream(io.FileInStream.Error).init(&file_in_stream.stream);const st = &buf_stream.stream;

1522743423
kvuser7
I see code like this in std/io_test.zig, where the stream is init'd in one line, then a reference to a member is done on another line, but if you do it all in one line "BufferedInStream(...).init(...).stream" it causes strange behavior

1522747575
Hejsil
kvuser7, this:

1522747588
Hejsil


1522751220
Braedon
mem.alloc() is used to assign ptrs right?  That is pointers on the heap that aren't based off the stack?

1522754056
Hejsil
Braedon, Simple answer: std.heap.c_allocator.alloc() and std.heap.c_allocator.create()

1522754079
Hejsil
Complicated answer. You should probably look into allocators and why they are useful

1522754354
Braedon
Ahh yeh that's what I was looking for

1522754360
Braedon
Yeh I was using a self made allocator

1522754371
Braedon
In my own code, and wanted to know if there was a std one

1522754612
Hejsil
std.heap.c_allocator is an allocator wrapping malloc/free from C's standard lib. Zig doesn't have a general purpose allocator yet

1522754707
Braedon
I think it should eventually have one, but yeh I had mine just wrapping around C's

1522754784
Braedon
Alignment in the call has to be passed in right?  Probably best as @alignof(T)

1522754910
Hejsil
Alignment of allocated memory?

1522755018
Braedon
The alignment field in the call type of u29.

1522755025
Braedon
*parameter not filed

1522755027
Braedon
*field

1522755046
Braedon
`fn cAlloc(self: &Allocator, n: usize, alignment: u29) ![]u8` is the type declaration

1522755202
MajorLag
The allocator implementation takes it that way, but the allocator interface takes a type and passes @alignOf(T) for you: `fn alloc(self: &Allocator, comptime T: type, n: usize) ![]T { return self.alignedAlloc(T, @alignOf(T), n); }`

1522755400
Braedon
Ahhh nice

1522755602
Braedon
I'm looking towards helping MacOS/Linux Dev with the compiler (got quite a bit of compiler building experience under my belt, though mainly toy languages).

1522755629
Braedon
Is there a todo list for each target?  Like how there are milestones?

1522755630
MajorLag
andrewrk: Having that artifact avaialbe just like the windows one will be so slick.

1522765145
kammd[m]
Hey guys is there any plan for hpux target??

1522765891
andrewrk
kammd[m], that is entirely decided by llvm

1522765922
andrewrk
oh that's an OS, not an architecture isn't it?

1522765938
andrewrk
you can write freestanding code for hpux today

1522765950
andrewrk
so the question is, is there a plan to flesh out the standard library for hpux

1522765955
kammd[m]
andrewrk: yeah arch is ia64

1522766001
andrewrk
you can also use libc on hpux  now

1522766309
kammd[m]
andrewrk: hmm is there is any documentation on how I can try it out? just a pointer would be great..

1522766514
andrewrk
is ia64 the same thing as x86_64?

1522766638
kammd[m]
andrewrk: sadly nope.. Itanium

1522767367
sandwit
I don't know how to express this without coming across as caring too much about frivolous things, but I feel like "const Name = struct" is valuing consistency too far above pragmatism? Pretty much everyone else does "struct Name {}" and that even leads to less noise on the screen imo.

1522767559
sandwit
though if struct is thought of as a type of sorts, then of course having the name on the left side does fit better

1522768192
andrewrk
another reason to support that would be for interdependent structs inside a function definition

1522768228
andrewrk
we could read the struct definitions out of order. whereas with const decls in a fn we have to do it in order

1522768818
MajorLag
for now, i'm still hoping for fn to go the struct route: const name =fn(...) ... {...}; Then I don't need to wrap inner functions in a struct.

1522768964
GitHub188
[zig] andrewrk pushed 1 new commit to master:

1522768964
GitHub188
zig/master aadc14f Andrew Kelley: upload static linux artifacts on successful travis build

1522769016
andrewrk
MajorLag, ^ this works. I'm hoping that travis CI will display the URL to the uploaded artifact

1522769236
Hejsil
MajorLag, one day, hopefully :)

1522771469
GitHub183
[zig] andrewrk pushed 1 new commit to master:

1522771469
GitHub183
zig/master 65e4bb1 Andrew Kelley: travis artifacts: don't upload extra stuff

1522771696
andrewrk
MajorLag, argh. I think I have to implement something more complicated, because travis does not list the uploaded artifacts visibly. you'd have to click "download raw log" and then scroll to the bottom

1522772511
MajorLag
apparenty it can be automatically pushed to github releases, but you need to jump through hoops with an api key

1522774786
GitHub106
[zig] andrewrk pushed 1 new commit to master:

1522774786
GitHub106
zig/master 21b47b3 Andrew Kelley: travis: don't upload build/ folder as artifacts

1522778873
andrewrk
MajorLag, I don't want to create a git tag for every commit

1522779629
MajorLag
can it be as simple as just having the build process push it over sftp or something?

1522779866
GitHub192
zig/master d1f8e72 Andrew Kelley: travis: don't upload other files as artifacts

1522779866
GitHub192
[zig] andrewrk pushed 1 new commit to master:

1522780086
andrewrk
MajorLag,

1522780103
andrewrk
it's just a matter of exposing the URL to the most recent file

1522790796
walac
hi there, was trying to build github.com/tiehuis/zligc, but it feels like there is a conflict between the builting

1522790826
walac
* conflict between builtin and zlibc symbols

1522791158
andrewrk
walac, are you using the build script?

1522791174
andrewrk
it looks like the build script only does addObject which would not produce builtin.o which is the conflicting object

1522791196
walac
andrewrk: nope, I implemented memcpy and a simple test, then ran ~/work/zig/build/zig test string.zig

1522791223
andrewrk
I see

1522791290
andrewrk
walac, I suggest following compiler_rt's pattern from zig:

1522791321
andrewrk
essentially, set the linkage to internal on all the exported functions when testing. This way the symbol does not conflict with another object file

1522791336
walac
andrewrk: thanks :)

1522792707
brannock
Would this kind of iterative development work on windows if I'm using Microsoft C compiler?

1522792992
andrewrk
brannock, in theory yes. there might be a bug or two currently

1522793014
andrewrk
or a missing feature such as

1522794451
GitHub22
[zig] andrewrk pushed 1 new commit to master:

1522794451
GitHub22
zig/master 9dfd1a7 Andrew Kelley: remove more signal handling stuff from std.os.ChildProcess...

1522797672
Braedon
How do you convert array literals to their generic array format?  Like pass in "true" as []u8 rather than [4]u8?

1522797680
Braedon
A ptr cast?

1522797934
Braedon
More info: While I know I can probably create a c""/normal literal then do a memcpy to get it into proper array format (and do it at comptime so its not 'effecting runtime') I feel there must be a better way

1522798665
Braedon
No worries, I just realised I can implicitly cast to '[]const u8' duh

1522799748
andrewrk
Braedon, you can slice arrays with array[a..b] syntax

1522799759
andrewrk
if you slice a mutable array you get a mutable slice

1522799994
Braedon
It isn't a mutable array though

