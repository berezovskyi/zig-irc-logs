1535415482
scientes
pub const f64_min = 2.22507385850720138309e-308;

1535415489
scientes
pub const f64_min = 2.22507385850720138309e-308;

1535415493
scientes
pub const f64_min = 2.22507385850720138309e-308;

1535415497
scientes
home/shawn/zig/std/math/index.zig:11:21: error: float literal out of range of any type

1535415500
scientes
there we go

1535415718
scientes
hmm i see its taken from musl....

1535415724
scientes
(this is arm64)

1535421427
kristate
morning

1535421653
andrewrk
morning

1535421684
scientes
I got a basic CI server going

1535422241
andrewrk
scientes, can you get it working with master branch pushes on github.com/shawnl/zig?

1535422274
scientes
yean of course, its pull requests that is slightly more complicated

1535422337
andrewrk
ah

1535422345
scientes
cause you have to use github hooks

1535422968
kristate
andrewrk:

1535423357
kristate
I find it funny, all of our names are 8 chars in length: andrewrk scientes kristate

1535424747
scientes
Can I write a build-in in zig?

1535424775
scientes
@mul could be written in zig

1535425350
andrewrk
scientes, that's true - there are a few builtins now that could be written in userland

1535425572
scientes
the std/index.zig test suite uses too much ram (~1GB) for the buildbot

1535425577
scientes
i think there is a leak

1535425622
scientes
i'll open a bug

1535425726
kristate
andrewrk: scientes: on that note, this is something that I have been meaning to ask, but how is the stage1 compiler managing memory?

1535425781
andrewrk
kristate, it treats malloc as one giant arena allocator and never frees

1535425791
kristate
andrewrk: haha, I imagined as such

1535425795
andrewrk
there are no plans to change this

1535425826
kristate
andrewrk: is that how the llvm guys are doing it? I mean, I like this pump and dump idea

1535425851
kristate
but like scientes mentions, I get pretty high memory usage on builds

1535425852
andrewrk
they're probably using C++ abstractions to manage memory

1535425900
kristate
andrewrk: we will be managing on stage2, correct?

1535425954
kristate
grep -R "defer" src-self-hosted/ | wc -l  #213

1535425969
kristate
I see that we have defer in self hosted, so I assume this is correct.

1535426081
scientes
to support 32-bit platforms we need to stay under 3GB

1535426155
kristate
scientes: well hopefully we can jettison stage1 as fast as possible and get over to self hosted zig

1535426163
scientes
yeah that would be awesome

1535426173
scientes
*will

1535426208
kristate
that is why I am excited about 0.3.0 -- we can get all of the nasty bugs out of the way, and we have a good test case

1535426226
kristate
0.4.0 could be a target to get stage2 out

1535426246
kristate
andrewrk has a list here

1535426318
andrewrk
kristate, yes, stage2 is a long lived process, so memory is all accounted for

1535426324
andrewrk
lots of stuff is reference counted

1535426352
kristate
cool beans

1535426422
andrewrk
we're stuck with stage1 forever though

1535426432
kristate
andrewrk: I'll rebase #1427 because there seems to be a conflict with some of the laster pushes

1535426435
andrewrk


1535426507
kristate
well yeah, but once it is good enoughâ„¢ we can continue forwards, right?

1535426680
andrewrk
right

1535426686
andrewrk
there's a point where it becomes significantly less important

1535426697
andrewrk
when we start shipping stage3 instead of stage1

1535426732
andrewrk
(stage3 is just stage2 built with stage2)

1535429284
dbandstra
if anyone wants to check it out i have a functioning game here

1535429298
dbandstra
getting kind of bored of working on it so i guess it's "done" enough

1535430507
andrewrk
dbandstra, cool!

1535430589
andrewrk
dbandstra, mind if I do a "let's play" of it on the stream thursday?

1535430767
scientes
i'm getting usr/include/x86_64-linux-gnu/sys/types.h:145:10: note: 'stddef.h' file not found

1535430767
scientes
#include <stddef.h>

1535430801
scientes
stddef.h is a "special" header, that isn't in /usr/include, like <stdbool.H>

1535430820
dbandstra
andrewrk, haha, sure

1535430836
scientes
probably should be ignored

1535431047
andrewrk
scientes, stddef.h is provided by zig

1535431055
andrewrk
I'm guessing you're not doing `make install` :)

1535431060
scientes
ahhhh

1535431085
scientes
ok, i'll do it

1535431102
andrewrk
did you see the softlink trick that I suggested, if you really want to try to avoid it?

1535431110
scientes
yes that is what i'm using

1535431141
andrewrk
you'll need to also softlink the c_headers folder to $INSTALL/lib/zig/include

1535431215
andrewrk
dbandstra, is zig annoying you in some way that makes you bored, or did you get bored naturally?

1535431242
andrewrk
I'm always interested in feedback when someone puts a lot of time into a zig project

1535431449
andrewrk
also I linked your game on

1535431477
dbandstra
a little bit of both, with the disclaimer that i only had/have low-quality distraction-filled free time to work on it

1535431507
dbandstra
i was having a hard time coming up with useful abstractions/generalized code, especially for the game entity system

1535431681
dbandstra
haven't thought anything through enough to come up with a proposal or anything though

1535431746
dbandstra
on the other hand, when it comes to something like the monster's AI, my attention span drops to zero, but i've always been like that :P

1535431901
scientes
looks like a bug to llvm-arm64 to me:

1535431918
scientes
i'll reduce it some more

1535432137
dbandstra
another thing i never figured out is how to structure modules/files/capitalization of exported stuff

1535432198
dbandstra
if i have a file that just exports a single function it ends up `const someFunc = @import("some_func.zig").someFunc; someFunc();` or maybe `const SomeFunc = @import("some_func.zig"); SomeFunc.run();` ...

1535432322
dbandstra
i guess default exports or destructuring imports is "Big Language" stuff

1535432353
andrewrk
scientes, I don't know if you saw this, but this may help you:

1535433197
dbandstra
i would like to keep going with another game but figure out how to share/abstract as much code as possible from this one

1535433205
dbandstra
(within reason)

1535433947
scientes
will zig build against llvm 7?

1535433974
scientes
or i guess that just means master my bad

1535440962
andrewrk
scientes: I ran the full zig test suite against llvm 7.0.0rc2 with assertions enabled two days ago and everything passed

1535440976
andrewrk
This is in the llvm7 branch

1535441028
andrewrk
I will merge this branch into master the same day llvm 7 is released and then release zig 0.3.0 one week later

1535441658
kristate
dbandstra: cool game!

1535442780
kristate
andrewrk: hey, I am trying to access a external c function accepting a **struct

1535442807
kristate
how should I define that function and how should I access it?

1535443015
kristate
translate-c translates static void testtest(struct bob **b) {} as pub fn testtest(b: ?[*](?*struct_bob)) void {}

1535443034
kristate
and struct bob; as pub const struct_bob = @OpaqueType();

1535444087
kristate
andrewrk: is translate-c outputting old code? do we need to update it?

1535461772
hooo
hi, I did this but get an error: "zig translate-c /usr/include/GraphicsMagick/magick/image.h" error: 'magick/forward.h' file not found

1535461793
hooo
how do I specify the include folder?

1535461903
scientes
-i

1535462225
hooo
scientes: I meant obviously for translate-c

1535462230
hooo
how am I supposed to use this functionality?

1535462665
hooo
ok it's -isystem

1535463182
scientes
thats what i meant

1535463342
hoppetosse
andrewrk: it seems I forgot about function pointers implicitly casting to *c_void

1535476552
andrewrk
hoppetosse, should be pretty easy to add

1535476568
hoppetosse
yeah, almost done

1535476605
hoppetosse
I'll send a pr after dinner

1535483684
andrewrk
hoo, I think I fixed one of the nastiest comptime bugs

1535483703
andrewrk
hooo, sorry that wasn't meant to address you, that was an expression

1535484389
andrewrk
wow, yep. just pushed a commit that fixes 4 bugs

1535484421
andrewrk
MajorLag, I think you've been waiting for this commit for a long time

1535486018
MajorLag
Indeed. I got so used to working around it I'd forgotten about it. I wonder how much code I could simplify now. Thanks for fixing it.

1535486095
andrewrk
and now I got my issue quota done for today so I'm going to work on windows stack traces

1535486537
MajorLag
oh boy, that'd be early christmas.

1535492175
kristate
andrewrk: hey, are you online?

1535492271
andrewrk
kristate, yep

1535492285
kristate
can we talk about #1403

1535492310
kristate
josh said he hasn't checked my code, yet it has been rejected

1535492323
andrewrk
yeah let's talk

1535492340
kristate
this has nothing to do with goto

1535492464
andrewrk
what do you think about josh's point at the end, with the code example?

1535492483
kristate
is there an example that is more fleshed out so that I can test it on the branch?

1535492500
kristate
I have no problems with writing code and talking about the points -- josh is bringing important points,

1535492527
kristate
I don't like the fact that after josh posts that it gets auto rejected, then I have to reopen and all sorts of activity takes place

1535492533
andrewrk
the thing he's talking about with a check for referencing a variable is here:

1535492542
kristate
Yes

1535492561
andrewrk
there's no such thing as auto rejection - it's just me making a decision

1535492568
andrewrk
which becomes the new status quo

1535492577
andrewrk
and I respect you which is why I am willing to reconsider status quo

1535492586
andrewrk
but it puts the ball in your court

1535492604
andrewrk
I do feel bad though, I think you could save a lot of effort by waiting to write a working PR until something is officially accepted

1535492687
kristate
I just want to write safe yet effective code, and your proposal makes lots of sense

1535492701
kristate
there was a case that josh brought, which I thought was valid and important

1535492722
andrewrk
before josh said anything, I was already uncomfortable with the if (!var->value->type) code

1535492724
kristate
but by informing the programmer that they are doing something that is not doable, then everything works out

1535492787
andrewrk
just like your PR

1535492799
andrewrk
in the above example it would have hidden the root cause problem

1535492816
kristate
I agree with #1426

1535492830
kristate
and I was glad that to see the patch that followed.

1535492913
andrewrk
can you interact with josh on the issue? I'll re-open it

1535492931
andrewrk
as of this moment reading the discussion I am convinced by josh's arguments, but maybe if you continue the conversation that would change

1535492969
andrewrk
and I really am sorry about rejecting your working code. it feels awful to do that

1535492994
kristate
josh's next question is something that I wonder too: "can you jump to a continue expression before a variable is declared as long as the variable is not used in the continue expression as determined by comptime analysis"

1535493005
kristate
how do we write that up and test it so that I can run it on the branch>

1535493007
kristate
?

1535493034
andrewrk
let me come up with some examples

1535493283
kristate
andrewrk: it's working?

1535493288
kristate
let me post what I have

1535493503
kristate


1535493677
andrewrk
kristate, I'm waiting for my mac to install updates, it says 17 minutes left. sorry for the delay

1535493947
kristate
andrewrk:

1535494055
kristate
andrewrk: I think that josh is confused about the order in which the continue expression is executed

1535494068
andrewrk
I have some more examples I want to try

1535494086
kristate
the scope that we plug into the continue expr comes from the while body

1535494134
kristate
the decl of handle comes before the continue expr

1535494194
kristate
if handle is not available in all branches, then we return an error, which prompts the programmer to re-think their flow

1535494202
kristate
this is a

1535494224
andrewrk
just a minute, working on a couple more examples

1535494228
kristate
cool

1535495448
andrewrk
kristate, updated

1535495458
kristate
let me check it out

1535495529
andrewrk
I used your branch for these examples

1535495581
kristate
the last one is causing an inf loop?

1535495629
andrewrk
yes - the continue jumps to the continue expression before x is declared and initialized

1535495684
andrewrk
the line of code I linked to earlier that I mentioned I was uncomfortable with, is not a sound way to accomplish the goal

1535495703
kristate
andrewrk: but this is correct code, is it not?

1535495739
andrewrk
I don't understand the question

1535495739
kristate
was it supposed to not loop?

1535495774
andrewrk
do you understand that it is invoking undefined behavior?

1535495820
kristate
how is it undefined? the way that continue expr is implemented in the compiler, this is all fine

1535495836
kristate
in fact, it is doing the same thing, regardless of my code

1535495851
andrewrk
what value do you think x is the first time the expression i += x  is evaluated?

1535495853
kristate
all my code does is give the return scope from the while body to the continue expression

1535495946
andrewrk
I feel like the fact that it is not clear to you what is happening is evidence that it is too complicated

1535495989
kristate
hmm, if we change var runtime_true = true; to const runtime_true = true;

1535495998
kristate
we get the reference

1535496012
kristate
cannot reference variable from unreachable code region

1535496025
kristate
andrewrk: I think there maybe something more sinister happening

1535496062
kristate
let me work on your test case -- it should be returning an error

1535496115
kristate
the fact that zig isn't catching that is frightening. I am guessing that it is initing to 0 in the case of var

1535496133
kristate
might be interesting to print out x

1535496205
kristate
andrewrk: yeah, just tried to print it out and its 0

1535496231
andrewrk
that's uninitialized memory

1535496248
kristate
yeah, but why isn't zig throwing an error?

1535496255
andrewrk
zig does catch that. if you run master branch zig on this example it's a compile error

1535496267
kristate
no no, that is only because of a scope difference

1535496286
andrewrk
scopes is how zig figures out if variables are declared or not

1535496297
andrewrk
each variable declaration starts a new scope

1535496428
kristate
hmm, let me play with it for 24 hours and if I can't do something about this, we can reject

1535496444
andrewrk
sounds good, let's revisit in 24 hours

1535496458
kristate
I am worried that down the line another problem may pop up

1535496466
kristate
I also want to understand scopes more

1535496695
kristate
okay, need to catch a bullet train to tokyo

1535496699
kristate
brb

