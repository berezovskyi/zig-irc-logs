1529284507
GitHub55
[zig] binary132 closed pull request #1127: Fix 1117: Use realpath in stage1 Darwin os_self_exe_path (master...fix-1117-macos-realpath)

1529285882
GitHub120
[zig] binary132 opened pull request #1128: Fix 1117: Use realpath in stage1 Darwin os_self_exe_path (master...fix-1117-macos-realpath)

1529286025
bodie_
andrewrk, macOS symlinked zig relative path bug fixed ^

1529297644
GitHub24
[zig] andrewrk pushed 1 new commit to master:

1529297644
GitHub24
zig/master 906ed05 Andrew Kelley: update std.DynLib to use @intCast

1529298292
GitHub44
[zig] andrewrk pushed 1 new commit to master:

1529298292
GitHub44
zig/master 92a3604 Andrew Kelley: msp430 target: c_long is always 32 bits...

1529298667
GitHub139
[zig] andrewrk pushed 1 new commit to master:

1529298667
GitHub139
zig/master d52ef95 Andrew Kelley: disable failing macos test. see #1126...

1529301381
andrewrk
vegecode:

1529305813
GitHub153
[zig] andrewrk opened pull request #1130: remove bool to int syntax. add @boolToInt (master...remove-bool-casting-syntax)

1529315685
kristate
Will @import follow symbolic links?

1529315709
kristate
Rather, const exp = @import("exp/index.zig"); works but const exp = @import("exp"); does not

1529315738
kristate
where exp is a symlink to a directory containing index.zig

1529322135
bodie_
andrewrk, revised PR

1529322144
bodie_
I'm a little confused as to why this didn't work:

1529322237
bodie_
It passed its assertions, but I was getting an error somewhere later in the build about an invalid character \xcf

1529322257
bodie_
I didn't finish picking it apart to figure out why, I just used a separate scratch space

1529322792
bodie_
I did spew some output:

1529322823
bodie_
as you can see, the original source given is garbage, but in reality it's just the zig hello world

1529322853
bodie_
the real original source is on line 1634

1529323097
alexnask
\xcf is Ï

1529323101
alexnask
weird :P

1529324623
bheads__
Ran into a fun bug with nested while loops this weekend

1529324728
bheads__
mn, just re read and noticed its correct

1529324739
bheads__
so nm!

1529326947
bodie__
sorry, didn't see if anyone has a response to the above tidbits, I don't have my laptop set up for my bouncer yet

1529333096
andrewrk
kristate, index.zig is not a thing other than a (perhaps silly) convention

1529333134
andrewrk
if you want to map a string into the import namespace, use --pkg-begin name path.zig --pkg-end

1529333234
kristate
andrewrk: morning -- got it, std would be internally --pkg-begin std build/path/to/std/index.zig --pkg-end ?

1529333269
andrewrk
yep

1529333330
kristate
cool

1529333569
GitHub152
[zig] andrewrk pushed 1 new commit to master:

1529333569
GitHub152
zig/master 7151d72 Andrew Kelley: Merge pull request #1130 from ziglang/remove-bool-casting-syntax...

1529333571
GitHub196
[zig] andrewrk closed pull request #1130: remove bool to int syntax. add @boolToInt (master...remove-bool-casting-syntax)

1529334317
GitHub161
[zig] andrewrk pushed 1 new commit to master:

1529334318
GitHub161
zig/master d49d6f0 Andrew Kelley: fix compiler crash when using @intToFloat with float literal...

1529334807
GitHub45
[zig] andrewrk pushed 1 new commit to master:

1529334807
GitHub45
zig/master 8fd7cc1 Andrew Kelley: disallow opaque as a return type of fn type syntax...

1529335171
MajorLag1
andrewrk, I was about to update 1132 with examples of the casts producing errors when used on inferred variables. Do you know if d49d6f0 would fix that too?

1529335194
andrewrk
I believe it does

1529336704
very-mediocre
is there a decent pattern for making a struct property point to another in a constructor-ish function e.g. init()

1529336742
very-mediocre
my particular case: a ring buffer implementation wraps over a regular array, both the array and ring buffer are properties of the same struct

1529336828
very-mediocre
in struct.init() which returns a struct instance, doing something like instance.ringbuffer.init(&instance.array) doesn't work because &instance.array is local to the struct.init() function

1529336970
andrewrk
very-mediocre, I'm acutely aware of this problem, and the issue that represents it is this one:

1529336992
andrewrk
I think we're probably going to have named return values which you would use for this case

1529337038
andrewrk
and we would have some kind of guarantee that fields would not be copied

1529337092
very-mediocre
hmm, checking out the proposal

1529337161
very-mediocre
also I feel this has safety implications

1529337180
very-mediocre
it's an easy mistake to make for someone who only has experience with heap-allocating everything

1529337261
very-mediocre
i.e. in GC'd languages

1529337835
GitHub133
[zig] andrewrk pushed 1 new commit to master:

1529337835
GitHub133
zig/master 48985a7 Andrew Kelley: langref: add docs for void...

1529337849
andrewrk
docs for void are up:

1529337979
very-mediocre
awesome 👍

1529338228
very-mediocre
Do you have plans for the compiler to generate warnings?

1529338259
very-mediocre
feels like "returning pointer to local variable" would be a good one

1529338272
very-mediocre
hm or actually maybe that shouldn't even compile

1529338300
very-mediocre
oh, it already doesn't compile i think

1529338345
andrewrk
compiler warnings has been proposed and rejected

1529338400
very-mediocre
the reason the compiler let me get away with it is I wasn't returning the local pointer, I was returning an instance of a struct, which has a property that points to a local variable

1529338407
very-mediocre
i see

1529338432
andrewrk
it is planned for more advanced data flow / control flow analysis to be able to catch the problem as you just described

1529338475
very-mediocre
awesome

1529338510
very-mediocre
the vast majority of modern languages heap allocate everything so it's such a huge footgun for anyone coming in from one of those

1529338813
GitHub163
[zig] andrewrk pushed 6 new commits to master:

1529338814
GitHub163
zig/master 0456822 Bodie Solomon: Fix 1117: Tweak realpath logic to use out_path as scratch space

1529338814
GitHub163
zig/master e6b6915 Bodie Solomon: Fix 1117: Use realpath in stage1 Darwin os_self_exe_path...

1529338814
GitHub163
zig/master c7057bd Bodie Solomon: Fix 1117: Revise realpath scratch logic

1529338817
GitHub109
[zig] andrewrk closed pull request #1128: Fix 1117: Use realpath in stage1 Darwin os_self_exe_path (master...fix-1117-macos-realpath)

1529338917
very-mediocre
So I take it when we return an instance in an init() function, it's implemented as a pointer and not passed by value?

1529338925
very-mediocre
or is that determined by the size of the returned instance?

1529338986
very-mediocre
(as per the fairly recent commit allowing non-copyable types to be passed via an implicit mechanism decided by the compiler)

1529339085
andrewrk
for return values, currently it's implemented as a memcpy, but optimizations can do the same kind of copy elisions that happen in C code. However it's not guaranteed

1529339100
andrewrk
so that's what the well-defined copy eliding semantics are for - to provide guarantees about what will or won't be copied

1529339122
very-mediocre
understood

1529339167
andrewrk
my recommendation is, if you don't have the unusual (but valid) use case where one field points to its neighbor, use the bare struct as the return value. this will be eventually made to be non-copying

1529339215
andrewrk
however for now if you need to have that use case, unfortunately the solution is to workaround by making the init function accept a pointer to the return value

1529339274
very-mediocre
I don't quite follow the workaround

1529339295
very-mediocre
You mean to manually assign the returned instance?

1529339300
andrewrk


1529339314
very-mediocre
ahhh

1529339317
very-mediocre
gotcha

1529339344
andrewrk
there is a usage example below in the tests

1529339353
very-mediocre
cool, thanks

1529339417
GitHub150
[zig] andrewrk closed pull request #1112: add cross compilation regression test (master...wasm-smoke-test)

1529340064
Hejsil
Is there a reason debug.global allocator does not reset between tests?

1529340335
andrewrk
Hejsil, new best practice is to use std.heap.FixedBufferAllocator for all the tests

1529340367
andrewrk
or just anything that isn't std.debug.global_allocator, really

1529340372
Hejsil
But debug.global allocator is soooo convenient :(

1529340376
andrewrk
hahaha

1529340381
Hejsil
Is there a reason for this?

1529340392
Hejsil
I mean, I can imagine people could shoot them self

1529340405
Hejsil
But really, should tests be self contained and not rely on global state

1529340411
andrewrk
oh, we could reset it in std/special/test_runner.zig

1529340467
Hejsil
Actually, what reason does debug.global_allocator have, if not for tests?

1529340471
Hejsil
and toy programs

1529340482
andrewrk
just toy programs and quick testing

1529340501
Hejsil
So long term, production ready tests should not use it

1529340504
andrewrk
correct

1529340518
Hejsil
Alright, time to be a good boy and get rid of it!

1529340531
andrewrk
it's allocator training wheels

1529340571
bheads_
Seems like a good wiki topic, intro to allocators, and best practices :)

1529340586
Hejsil
I think that is a Todo on the docs :)

1529340607
andrewrk
docs have seen steady progress lately

1529340616
andrewrk
the number of TODOs is dropping

1529340647
MajorLag1
andrewrk, should calling @noInlineCall on an inline fn be an error? because it looks like it just has no effect instead.

1529340649
very-mediocre
>Alright, time to be a good boy and get rid of it! -> time to say see you later, allocator

1529340664
very-mediocre
I'll see myself out

1529340666
Hejsil
Oooh god

1529340668
bheads_


1529340696
andrewrk
MajorLag1, yes that should be a compile error

1529340784
MajorLag1
interesting note: this came up because I was testing if it was possible to abuse inlining to get the copy eliding behavior being discussed. Turns out you can, if you trick the compiler into returning a ptr to a local variable.

1529340823
very-mediocre
That sounds fancy

1529340840
very-mediocre
my current mediocre workaround is to have a `new()` function that returns the instance

1529340858
very-mediocre
followed by `init(self: *Whatever)` (as per andrewrk's example)

1529340862
MajorLag1
I wouldn't recommend abusing inline in this fashion

1529340928
GitHub13
[zig] andrewrk pushed 1 new commit to master:

1529340928
GitHub13
zig/master cd4676a Andrew Kelley: stage1: update darwin code to workaround old libc bug...

1529341047
very-mediocre
I take it zig will generally apply copy elision everywhere it can instead of explicit move semantics, right?

1529341079
very-mediocre
ok i realized that's silly

1529341082
very-mediocre
and probably a yes

1529341088
very-mediocre
silly question i mean

1529341113
very-mediocre
I'm more wondering if that lends itself to Rust-style compiler errors

1529341133
andrewrk
I've tried to think about how move semantics apply to zig, and I don't think move semantics are relevant to zig

1529341150
very-mediocre
I was just thinking you almost always want to move everything

1529341170
very-mediocre
that's the main thing Rust nailed

1529341202
andrewrk
assuming we get copy elision semantics working how I want them to work, the only time zig would generate a memcpy is for variable declarations

1529341221
andrewrk
because variable declarations represent memory storage locations

1529341232
very-mediocre
makes sense

1529341252
very-mediocre
so declaration-assignment isn't a move since this isn't Rust

1529341262
very-mediocre
and there's no `borrowing` concept

1529341286
andrewrk
I think even in Rust, struct assignment will do a memcpy to copy the fields

1529341309
very-mediocre
oh, really

1529341315
andrewrk
it's not making the new variable reference the old data is it?

1529341327
andrewrk
let me try something

1529341328
bheads_
would it be usful to have a debug flag that reports were memcpy's are happening?

1529341331
very-mediocre
good question

1529341378
very-mediocre
I'm very rusty on rust, no pun intended (really)

1529341473
bheads_
maybe simular to -profile=gc with the DMD compiler

1529341485
very-mediocre
I thought absolutely everything in Rust was "borrowed" unless you explicitly cloned it

1529341504
very-mediocre
bheads_: seems reasonable

1529341582
very-mediocre
like if `let a = whateverStruct; let b = a;` then you can't use a anymore

1529341745
very-mediocre
Rust is really on to something with the realization that in most programs, you almost always want to move stuff

1529341776
very-mediocre
but then because everything is a move by default, you end up with a hairy situation regarding passing things to functions

1529341780
very-mediocre
hence `borrowing`

1529341880
bheads_
That works for about 90% of things, its the other 10% that makes rust a PITA

1529341916
very-mediocre
for me it's lifetime annotations that hurt me most

1529341976
bheads_
if zig can make the 10% safe then the other 90% should be safe as well

1529342050
very-mediocre
imho there's a ratio, if you lose 80% of your productivity to go from 80%->90% safety, that's not a tradeoff I want to make

1529342094
bheads_
sure, but rust did the oposite

1529342111
bheads_
they targeted the 90% but now the hard stuff is even harder

1529342125
very-mediocre
Yeah, it's great for some projects

1529342137
very-mediocre
imho the biggest flaw with Rust

1529342145
very-mediocre
is that part of the tradeoff wasn't for safety

1529342146
bheads_
but really an experianced programmer doesn't mess up the easy stuff

1529342160
very-mediocre
productivity was lost for reasons other than safety at times, i.e. all those sigils

1529342167
very-mediocre
it's very dense and hard to read

1529342185
very-mediocre
bheads_: don't be so sure, I do stupid things all the time :)

1529342209
bheads_
lol yeah, I avoided rust due to language and the fact that the hard stuff is not safe or easy

1529342225
very-mediocre
yeah, but I have to give Rust credit

1529342232
andrewrk


1529342244
very-mediocre
I hate using this trite expression which is usually an excuse, but Rust really "started a discussion" about safety

1529342247
andrewrk
the rust code does 3 memcpy's:

1529342312
very-mediocre
huh

1529342326
very-mediocre
that's weird

1529342340
bheads_
oh I mess up the easy stuff too, but writting a threaded job handler that has messaging, sequencing and multiple memory patterns in all languages is hard enough

1529342372
very-mediocre
iirc the section about ownership in the Rust manual had a section called "move semantics"

1529342398
very-mediocre
what's with all these memcpys!

1529342437
very-mediocre
possibly an optimization?

1529342441
bheads_
Thats really odd, I thought the point was that it moved ownership...

1529342468
very-mediocre
like does it get optimized out at a later stage?

1529342476
very-mediocre
i'm not at all familiar with llvm ir

1529342482
bheads_
I mean I guessed it did, maybe the point class is small enough that it a copy is "okay" (tm)

1529342510
very-mediocre


1529342541
andrewrk
zig does 2 memcpys for equivalent code:

1529342647
bheads_
thats good, and it makes sense, as both are const

1529342754
bheads_
but in rust, are a and b really pointers on the heap?

1529342800
very-mediocre
iirc you have to Box<> things to put them on the heap

1529342811
very-mediocre
so these should be stack?

1529342844
very-mediocre
interesting test

1529342849
very-mediocre
I'm sure we're missing something though

1529342854
very-mediocre
why does Rust do 3 memcpy

1529342856
bheads_
then why is it memcpy the assignment to a?

1529342868
very-mediocre
Is that really an rvalue in the initial assignment?

1529342874
andrewrk
very-mediocre, one for the variable declaration of `a`. one for the assignment to `b`. a third to do a by-value function call

1529342900
very-mediocre
hm that's weird, the whole point of move semantics is not being wasteful with rvalues

1529342901
bheads_
the call to foo is the only one that makes sense

1529342910
andrewrk
zig has 2 because we defined "by-non-copying-value" function call semantics

1529342927
very-mediocre
right

1529342935
very-mediocre
tbf in idiomatic rust you'd pass a reference

1529342960
andrewrk
right but my point is that `let b = a`, even with move semantics, does not elide the memcpy

1529342960
bheads_
foo could be transfering ownership into a global space

1529342972
very-mediocre
yeah, hmm

1529342974
bheads_
so you cant barrow

1529342995
very-mediocre
like C++ defines move semantics as copy elision for rvalues

1529342998
andrewrk
so that's why I think move semantics are not relevant to zig

1529343008
very-mediocre
those are very weird results though

1529343031
very-mediocre
I get your point, that explicit moves might not be part of the language design

1529343057
andrewrk
move semantics make sense if you have constructors and destructors

1529343076
bheads_
there still is ownership transfer

1529343081
andrewrk
yes but it's a userland concept

1529343085
very-mediocre
agree with bheads_

1529343090
bheads_
very true

1529343090
very-mediocre
I'm surprised Rust does memcpy

1529343107
very-mediocre
when you do b=a, a can no longer be used

1529343110
very-mediocre
why copy it then?

1529343124
andrewrk
I do think we will have the ability to disallow copies via assignment

1529343150
bheads_
@notCopyable()  on a struct def?

1529343154
andrewrk
something like that

1529343162
bheads_
sounds legit

1529343166
very-mediocre
that sounds like move semantics :)

1529343176
andrewrk
fair enough :)

1529343198
bheads_
more of, dont copy this, you need to call self.copy() to handle this!

1529343208
very-mediocre
Shooting from the hip here: inline fn move(a: T, b: T) T {}

1529343234
bheads_
you would need pointer to pointer

1529343242
bheads_
and b would need to be nullable

1529343245
very-mediocre
not with the new copy elision semantics iirc

1529343246
very-mediocre
but yeah

1529343257
very-mediocre
i'd do pointers anyway, I'm OCD like that

1529343275
very-mediocre
or perhaps

1529343280
very-mediocre
a.move(b)

1529343295
very-mediocre
I like userland for this I guess

1529343305
bheads_
it would have to be a language construct since a pointer is not a struct

1529343326
bheads_
const b #= a;  // a is now null

1529343348
bheads_
but as andrew pointed out, this is a userland idea

1529343353
very-mediocre
just pointer swap, no?

1529343372
bheads_
if your avoiding a memcpy

1529343402
very-mediocre
in C++ the move constructor is implemented as a manual userland pointer swap

1529343412
very-mediocre
the compiler is just there to call the move constructor when you assign

1529343415
bheads_
sometimes

1529343421
very-mediocre
yeah, typically

1529343448
bheads_
if the result is on the stack in the calling function you could use that memory in place

1529343480
bheads_
no sure how many compilers can do that though

1529343514
very-mediocre
hm I'm finding that Rust result hard to believe

1529343526
bheads_
maybe a debug build thing?

1529343534
very-mediocre
Why is the initial declaration a memcpy

1529343548
very-mediocre
like it instantians the Point anonymously, then copies it to a new address and assigns it?

1529343553
very-mediocre
instantiates**

1529343586
very-mediocre
andrewrk: could the Rust test have been in a debug configuration?

1529343599
andrewrk
very-mediocre, yes it was, as was the zig one

1529343622
bheads_
in D the compiler has a block of memory for a struct in ROM that is in the init state.  when you create an instance it copies the init state to the new location, then it calls a postblit function on it (a constructor)

1529343642
very-mediocre
andrewrk: I bet the memcpy's get optimized out in release builds then, no?

1529343645
andrewrk
with optimizations on, in both the zig and rust examples, there would be no memcpy's

1529343649
very-mediocre
ah

1529343655
very-mediocre
thanks for clarifying

1529343664
very-mediocre
I guess Rust relies on the optimizations

1529343887
very-mediocre
btw andrewrk on a different note, do you plan to have an idiomatic style regarding snake case vs camelCase vs PascalCase?

1529343896
very-mediocre
some languages endorse a particular style

1529343906
andrewrk


1529343929
very-mediocre
ah, wasn't aware of this

1529343943
very-mediocre
I'm one of those weird guys who is partial to snake case for functions and variables, PascalCase for structs/classes

1529343955
very-mediocre
camelcase dies when you have acronyms

1529343960
very-mediocre
i.e. XMLHttpRequest?

1529343964
very-mediocre
XmlHttpRequest?

1529343980
very-mediocre
both camel and pascalcase fail here

1529344108
andrewrk
I believe that is addressed in the above link

1529344134
very-mediocre
it is

1529344179
very-mediocre
just saw it :)

1529344762
GitHub165
[zig] andrewrk pushed 1 new commit to master:

1529344762
GitHub165
zig/master 1ca90b5 Andrew Kelley: zig fmt: support directories...

1529344764
GitHub69
[zig] andrewrk closed pull request #1068: Zig Fmt recursive option (master...FmtDirectory)

1529345515
very-mediocre
any idiom for explicitly discarding an unused return value?

1529345529
donpdonp
_ = returnvaluefunc();

1529345533
very-mediocre
ahhh

1529345535
very-mediocre
awesome thanks

1529345554
very-mediocre
i knew i'd seen it somewhere but couldn't find it

1529348585
GitHub129
[zig] andrewrk opened pull request #1134: remove error set casting syntax. add `@errSetCast` (master...no-explicit-casting)

1529348876
MajorLag1
andrewrk, is the old casting syntax meant to still work on the condition that the type you're casting to is the same signedness and >= bit_count of the source type?

1529348920
andrewrk
yes, all the casts still work where you could do:  var x: T = value;

1529348980
andrewrk
this is now equivalent to T(value)

1529349017
andrewrk
so now there is no "cast harder" syntax. instead there are explicit builtins for all the kinds of casting you would want

1529349184
andrewrk
this is in line with the "communicate intent precisely" philosophy

1529349701
MajorLag1
There had been some talk of removing the `var x = T(value);` variation, so I wasn't sure.

1529349770
andrewrk
that'll be a separate proposal. not happening any time soon, if ever

1529349778
MajorLag1
good to know, thanks.

