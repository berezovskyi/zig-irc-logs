1537930075
Elronnd
I'm looking at zig and I see in one place pub main() !void and in another pub main() void.  What does the ! mean?

1537930334
scientes
Elronnd, an error can be returned

1537930348
scientes
Elronnd, if an error is returned in main, it generates a stack trace (in debug mode)

1537930377
Elronnd
ahh

1537930401
Elronnd
why is '\t' a disallowed character?

1537930460
scientes
you have to use spaces

1537930492
Elronnd
yes, but why?

1537930514
dirkson
That's a long story. Short version is that the language designer hates tabs. Longer version involves some explanation about wanting the compiler to know the screenspace position of all keywords for some reason. I don't understand it yet, but there's a github issue about it

1537930564
scientes
I have a pet peeve of people that question stuff that can be easily worked around

1537930579
scientes
bikeshedding

1537930611
dirkson
scientes: I have a pet peeve of people that force others to use their tab conventions. Somehow we must coexist :D

1537930659
dirkson
There has been some indication that tabs will be allowed through some pre-compiler formatter. It's unclear if this will allow complex things, like erroring when tabs are used somewhere other than the start of a line.

1537930728
dirkson
There's a language called 'nim' that uses the same formatter approach. As someone who prefer tabs-for-indent, I found it annoying, but acceptable.

1537930936
Elronnd
I like the way ante does it

1537930949
Elronnd
if you don't have any braces, it will use whitespace for indentation and error if you don't do it right

1537930956
Elronnd
if you do have braces, then it ignores all whitespace

1537931223
dirkson
Actually, thinking about Nim makes me remember why I gave up on it - Namely, the fact that arguments could be implicitly typed, and return values could be implicitly typed, leading to an insane amount of searching to find out what any function actually did. I really worry about Zig in this regard, as it seems these are planned features. I struggle to imagine good enough tool integration to make that tolerable.

1537931262
scientes
yeah I see implicit typing in places, like siphash

1537931269
scientes
its confusing

1537931304
scientes
I am also confused on how it even works

1537931368
dirkson
I think I've got a rough idea how it works. It's just that it's not really human-readable when looking at code you didn't write. You've got to have some tool to dig down and find the types that a function can potentially operate on

1537931929
c15ade4
dirkson: implicitly typed arguments are deprecated in nim

1537931972
dirkson
c15ade4: Oh. Interesting!

1537931985
dirkson
c15ade4: Do you know why, offhand?

1537931988
c15ade4
who gives a shit about tabs btw, just run the automatic formatter and forget about it

1537931994
c15ade4
probably the reason you said

1537932164
c15ade4
its pretty silly to go through the trouble to learn a whole new programming language

1537932174
c15ade4
but not be able to readjust to invisible characters being diferent

1537932289
c15ade4


1537932469
dirkson
I've not been able to get my editor (vim) to treat X number of spaces and a tab identically. Which seems odd, given how often people bicker about it. So that means I need some third party tool to use tabs, like the formatter, which is another arbitrary things I have to memorize and get right in every file. It's also a bit of a code smell - If someone cares strongly enough about tabs vs spaces to force you to use

1537932472
dirkson
one over the other, they will probably care deeply about other trivialities too - And not all of those are as harmless as invisible characters. This seems particularly salient when the language doesn't use whitespace as meaning, as Zig doesn't.

1537932585
dirkson
So like... It's minor, and there's plenty of stuff I hate more about other languages, so the tab thing isn't going to scare me off... But it's a definite, if small, negative mark.

1537933158
c15ade4
its not a triviality - it makes git diffs better, it makes code search easier, it makes things consistent

1537933178
c15ade4
If zig fmt could support either it might be nice

1537933186
c15ade4
but you need one canonical form

1537933216
dirkson
What's 'it' here? Using spaces in place of tabs?

1537933234
c15ade4
enforcing one or the other

1537933248
dirkson
Ah, gotcha

1537933257
c15ade4
if you chose tabs then you just will have space people complaining

1537933273
c15ade4
at least with space the compiled can say col 7

1537933276
c15ade4
and people know what that means

1537933280
c15ade4
compiler**

1537933283
Elronnd
c15ade4: then why if you must have one canonical way do these both compile?

1537933324
andrewrk
it is planned for zig fmt to support fixing whitespace, including form feed, carriage return, hard tab, U+0085, U+2028, and U+2029

1537933326
dirkson
c15ade4: Oooooh, that might what andrew was talking about with the compiler knowing the screenspace location of all symbols in the code.

1537933374
Elronnd
where do I get an allocator from?  I have a function that wants one

1537933383
andrewrk
Elronnd, are you linking against libc?

1537933402
Elronnd
andrewrk: not sure

1537933424
andrewrk
if you're just doing a quick test, you can use std.debug.global_allocator

1537933439
Elronnd
ldd says it's a static executable, so I would guess not

1537933439
andrewrk
if you're linking libc, you can pretty much always use std.heap.c_allocator for your allocator

1537933450
Elronnd
but I don't mind linking to libc

1537933459
c15ade4
Elronnd: I dunno, I guess you could be extreme and say non zigfmt code cannot compile :P. Im sure people would hate it.

1537933480
andrewrk
Elronnd, keep an eye on this issue:

1537933499
Elronnd
c15ade4: yes exactly, so where do you draw the line?  And how do you decide that a line must be drawn in the first place?

1537933505
andrewrk
until this is closed, zig has no general purpose allocator in the standard library

1537933519
Elronnd
andrewrk: so I should just link against libc and use that?

1537933520
Elronnd
ok

1537933525
andrewrk
however we do have some special purpose allocators. for example if you are making a command line application, an ArenaAllocator would be appropriate

1537933561
andrewrk
but there's no shame in linking libc to get a feature missing from the standard library

1537933585
andrewrk
that said, zig does plan to have all the stuff so you'd never need to do that :)

1537933607
dirkson
Hmm. No, printing out meaningful column numbers is doable with both tabs and spaces. Vim, at least, outputs a number in the lower right that corresponds to a column number if you counted each tab as a single character.

1537933632
dirkson
(And also a screenspace column number that counts each tab as $TabWidth characters)

1537933632
Elronnd
I'm using readFileAlloc.  So, just to be clear, I have to call freeFn on the memory it gives me once I'm done with it?

1537933651
andrewrk
Elronnd, that's right, unless you are ok with the memory leaking

1537933672
andrewrk
generally, every call to readFileAlloc will be followed by either a `defer` or an `errdefer`

1537933717
andrewrk
and if it's followed by errdefer, then there will be an additional place where the cleanup code goes

1537933731
Elronnd
defer means defer until end of lexical scope?  Or function?

1537933749
dirkson
And I lack the knowledge of nano or emacs to make either of them print out any kind of column number at all :D

1537933804
andrewrk
Elronnd, lexical scope

1537933889
andrewrk
note that go defer is different; it appends the defer expression to a list to execute at the end of the function. if you do this in a loop it requires memory allocation and therefore it can fail

1537933910
Elronnd
dirkson: vim will show you the column number by default if you set ruler ;)

1537933922
scientes
I noticed that stack allocation in linked to the function, not lexical scope, however

1537933934
dirkson
Elronnd: Yeah, I must have set that up at some point.

1537933971
andrewrk
scientes, indeed, although I don't see the analogy

1537933980
andrewrk
consider the behavior of stack allocation in a loop

1537934028
andrewrk
if you declare a variable in a loop, it's not actually stack allocating at each iteration. "stack allocation" is as simple as subtracting the total number of needed stack bytes from a register at the beginning of the function

1537934158
scientes
well c89 allows variable declarations at every lexical scope, so always assumed the stack would get extended at each lexical scope, until i saw otherwise

1537934199
andrewrk
you can think of it as a union

1537934225
scientes
will it at least reuse the stack for differn't lexical scopes that are independent of each other, in a function?

1537934251
andrewrk
yes: {var a: i32; {var b: i32;} {var c: i32;}} - the size needed for the stack is 8 bytes, not 12

1537934320
scientes
ah ok, so what i saw was just the side-effect of the in-function allocation growing upwards, while entering a function allocates downwards

1537934430
Elronnd
scientes: I always thought that it just moved those to the top transparently

1537934442
scientes
so if a function over-flows the stack, it will get SIGSEGV on the first variable

1537934492
scientes
(if it in initialized)

1537934508
andrewrk
it's possible for the stack frame to be larger than the guard page, in which case it's possible to not get a sigsegv

1537934525
andrewrk
some targets such as windows have solutions to that problem

1537934541
andrewrk


1537934742
scientes
you will still most likely get SIGSEGV beyond the guard page

1537934858
andrewrk
one would hope

1537934897
andrewrk
even better than a SIGSEGV, is determining at compile-time the upper bound stack requirements

1537934927
scientes
is there a reason variables are alloocated upwards in a function?

1537934946
scientes
i would think you would be more likely to hit the guard page if you did it the other way around

1537934947
andrewrk
I'm not sure. that's a decision made by LLVM's lowering code

1537934968
andrewrk
good night

1537934975
scientes
the other way also means you allocate less lazy memory

1537934981
scientes
good night

1537935099
Elronnd
is there a way to convert a string literal to a slice?  I tried putting [0..] after it but that complained that it's a const []u8, not plain []u8

1537935123
scientes
Elronnd, its still a slice

1537935125
scientes
just a const slice

1537935142
scientes
you mean []const u8

1537935179
Elronnd
err, yeah

1537935470
Elronnd
is there something like .? but for error types?

1537963749
MajorLag
Elrond, not sure if your question was answered but the equivelent for errors would be `var x = <expr> catch unreachable`. It is unlikely that a `x.!` operator will be added.

1537963760
MajorLag
Elronnd rather

1537971256
andrewrk
Elronnd, string literals go into the const data section of your binary, so you can't modify the bytes

1537971275
andrewrk
if you want mutable memory you have to choose somewhere to put it

1537982607
DutchGh0st
mhhh, how wrong is it to create a huge compiletime string?

1537982659
DutchGh0st


1537982949
DutchGh0st
it takes up 25 of gigs haha:

1537984244
andrewrk
DutchGh0st, over 4GB you might expose bugs where the size is stored as a 32 bit integer rather than 64 (perhaps in LLVM it does this)

1537984277
andrewrk
zig makes it easier to avoid these kind of bugs... but the compiler is not written in zig yet :)

1537984282
DutchGh0st
but it compiled, ...

1537984315
DutchGh0st
I got onto this idea, because in Rust there was an integer overflow resulting in a buffer overflow with string::repeat

1537984351
DutchGh0st
in the stdlib

1537984451
andrewrk
DutchGh0st, zig is pretty immature right now. if you go looking for bugs you're going to find them

1537984464
andrewrk
it's not really time to start fuzzing yet

1537984482
andrewrk
once all the breaking changes are done and all the new proposals land and there are no more planned proposals, then it's time to start fuzzing

1537984504
DutchGh0st
I'd be interested in helping with fuzzing once the time is there :)

1537984529
andrewrk
and I mean fuzzing metaphorically - e.g. looking for all bugs, even ones that are not blocking practical use of the language

1537988988
andrewrk
1 more bug until 0.3.0

1537988992
andrewrk
(and a lot of release notes to type up)

1537989061
DutchGh0st
documentation, thats always fun...

1537989111
DutchGh0st
BUT HEY, ITS ALMOST FRIDAY, SOO THATS COOL! :D

1538001739
tom1998
Hey!

1538001801
tom1998
I'm trying to figure out the zig build system - how can I execute arbitrary system commands within zig? (i.e., I want the build system to clone some dependencies and compile them with cmake)

1538001896
tom1998
Is the idea just to call into C at the moment for anything that either isn't implemented / isn't documented?

