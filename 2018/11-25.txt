1543104592
suirad
the build pipeline on my PR keeps failing the tests on an assertion, but im not sure why. im guessing that the env vars are weird on the build machines, but im not sure.

1543104650
suirad


1543104884
benjikun
looking at it

1543104897
benjikun
the tests worked locally right?

1543104932
suirad
yea

1543105012
benjikun
I'll try em

1543105040
suirad
I appreciate it.

1543106273
benjikun
computer crashed, one sec lol

1543106727
benjikun
I get an assertion failure on linux

1543106814
benjikun
same thing that the azure testbox returns

1543106913
benjikun


1543106995
benjikun
line 795 in index.zig

1543107081
benjikun
lemme try printing out the env variables and see what comes out

1543107122
hryx
I don't suppose it has to do with null-terminated strings?

1543107227
hryx
(in case mem.eql is returning false due to that)

1543107260
suirad
strange, since they should both be []u8

1543107407
benjikun
what's the correct way to output to the terminal in a test block?

1543107419
benjikun
probably a dumb question

1543107420
suirad
i usually just do a std.debug.warn

1543107433
benjikun
it isn't outputting anything with warn

1543107450
suirad
then regular stdout

1543107460
benjikun
will do one sec

1543107533
benjikun
still nothing

1543107577
suirad
it might be exiting too quickly, output then loop

1543107596
suirad
there might be a flush if you're using stdout

1543107671
benjikun
I counted the bufmap of envs returned and it came out to be 0, weird

1543107733
suirad
that is wierd, but does explain why its failing on non windows, since im only working on windows stuff lol

1543107767
benjikun
lol

1543107855
benjikun
did you look at the logs for the failure on the windows test?

1543107870
suirad
yea, outofmemory apparently

1543107875
benjikun
mhm

1543107925
suirad
which is funny cause now that im checking, my tests for it pass. But when i call the fn in a small test program i get the overflow error

1543107981
suirad
err i meant outofmemory

1543108142
benjikun
interesting

1543108449
suirad
i know whats causing the outofmemory, but the other systems failing is confusing. at least after this there will be new working tests haha

1543109452
benjikun
this is weird

1543109478
benjikun
for some reason in the test, the count returns 0 but if I just use it outside of that it works normally and returns 28 envs

1543109488
benjikun
so it's something with the test on line 777

1543109592
benjikun
which makes no sense

1543109633
benjikun
oh wait

1543109649
benjikun
ignore that

1543109674
benjikun
wait actually I was right

1543109678
benjikun
works outside of the test lol

1543109721
hryx
in a normal executable?

1543109733
hryx
tests are run in a child process I think -- I wonder if that affects environment

1543109886
benjikun
what the heck

1543109908
benjikun
I made a test file and copied the exact same test and it works fine

1543109909
benjikun
???

1543109910
hryx
though it looks like the env should be getting passed by the compiler:

1543109936
hryx
weird

1543109990
suirad
lol

1543109997
suirad
compiler bug maybe?

1543110118
benjikun
is the new built zig version that I'm using (from the PR) somehow finding my default system-wide zig stdlib

1543110141
benjikun
is that possible

1543110182
hryx
I think the zig exe just looks for ../lib

1543110205
hryx
I'll try to find out though

1543110211
benjikun
that's what I'm thinking

1543110325
hryx
oh, it's based on the install prefix. did you build with `make install`?

1543110378
benjikun
yea

1543110385
benjikun
I did

1543110409
benjikun
can I somehow print out where it's looking?

1543110730
hryx
if you don't mind rebuilding you can put this in main.cpp: printf("%s\n", buf_ptr(get_zig_lib_dir()));

1543111212
benjikun
mk will do

1543111753
benjikun
hryx: I did it but it isn't printing anywhere

1543112208
hryx
benjikun: where did you put the printf? it works for me if I put it here, build, and then call `./bin/zig test`

1543112278
benjikun
oh wait, it does output

1543112299
benjikun
yeah it's the correct path (not finding my normal install)

1543112346
benjikun
I have no clue what else would cause the test in std/os/index.zig to fail but not the same test in its own file

1543112543
daurnimator
andrewrk: reading and replying again...

1543112607
daurnimator
andrewrk: so to make things not require an allocation I might have to swap Job to be part of an intrusive linked list. (where I previously had the vague CollectionOf(Job))

1543112882
daurnimator
have updated my previous comment to match

1543113970
suirad
so weird. its now failing the pipeline somewhere completely unrelated....

1543114041
benjikun
strange

1543114714
benjikun
why are `i0` and `u0` types?

1543115587
daurnimator
consistency I guess?

1543115629
daurnimator
benjikun:

1543115645
benjikun
yea

1543115658
benjikun
yea ig consistency

1543118325
MajorLag
Consider an enum with only one field. The type of the enum would be u0.

1543118351
benjikun
oh true

1543118352
MajorLag
the tag type

1543124796
benjikun
I don't have a lot of experience with python but I'm attempting to make the zig plugin for pygments so we can get highlighting on sr.ht, wikipedia, and rosettacode

1543124800
benjikun


1543124816
benjikun
This is what I have so far

1543124858
benjikun
the test.py and output.html files are just for testing how it looks

1543124946
hryx
tite benji!!

1543124970
benjikun
ty :)

1543124982
benjikun
if anyone sees anything wrong in `zig_lexer.py` lmk

1543124984
hryx
I think I've been having dreams about zig syntax highlighting

1543124993
benjikun
lmao

1543124993
benjikun
same

1543124996
hryx
so you're helping my sleep quality

1543125026
benjikun
:p

1543125065
hryx
I didn't know pygments was python

1543125082
benjikun
yep it is

1543125083
hryx
yet as I type the first two letters of "pygments" I feel dumb

1543125093
benjikun
hehe

1543125133
hryx
yo. here's something weird, maybe someone can explain

1543125146
hryx
this is legal at top level: `pub const x: void;`

1543125182
hryx
but in a function or container type: "variables must be initialized"

1543125198
benjikun
interesting

1543125205
hryx
is the top-level one legal because of externs?

1543125224
benjikun
I'm not sure

1543125225
hryx
everywhere else, you have to say x = undefined to leave it uninitialized

1543125312
benjikun
if you try to interact with it though

1543125317
benjikun
it says it must be initialized

1543125320
benjikun
hmm

1543125369
hryx
huh...

1543125370
benjikun
e.g. warn("{}\n", @typeOf(x)); in main() makes it realize

1543125420
benjikun
feels like a bug to me

1543125459
hryx
good idea trying to use the var. Maybe MajorLag or andrewrk could shed some light

1543125496
benjikun
only thing I can think of is if it has to do with extern behavior like you said

1543125515
benjikun
good catch

1543125519
MajorLag
`pub const x = {};` aught to work to initialize a variable to void. `pub const x: void;` isn't complete. `pub const x: void = void{};` would be, but you can shorten it.

1543125667
benjikun
it doesn't catch it even if it isn't void

1543125673
benjikun
`pub const x: i64` works too

1543125705
hryx
yeah MajorLag I don't understand why it's legal to have that incomplete declaration at top level, while inside a function or struct it throws an error

1543125727
hryx
without trying to access it, that is

1543125749
MajorLag
It shouldn't be, but if you're not using it at all it probably isn't being analyzed far enough.

1543125769
hryx
ah that could be why

1543125774
hryx
I assumed anything pub was analyzed

1543125792
MajorLag
no, but anything extern is

1543125803
hryx
dayum

1543125876
hryx
also MajorLag what's your GitHub username, if you don't mind sharing?

1543125892
MajorLag
tgschultz

1543125912
benjikun
followed

1543125938
hryx
(^_^)_b

1543129331
benjikun
I went to the pygments devs channel (#pocoo) and asked how I could get the ziglexer plugin added to pygments head

1543129340
benjikun
but a guy said that the repo isn't actively maintained anymore

1543129414
benjikun
what the heck

1543129488
benjikun
so I don't have a clue about how we'll get zig highlighted on wikipedia/sr.ht/rosettacode

1543129501
hryx
wadu heck

1543129533
benjikun
:/

1543129620
benjikun
maybe he's wrong because the repo seems to still get updated but they aren't accepting PRs

1543129657
hryx


1543129660
hryx
is that the right repo?

1543129666
benjikun
yep

1543129671
hryx
last commit 13 hours ago. last one before that: 1+ year ago

1543129680
benjikun
ugh

1543129721
hryx
oh my mistake, I'm misreading BitBucket's merge tree

1543129745
hryx
that was the timestamp of an old commit, recently merged

1543129768
MajorLag
Anyone want to see some comptime shenanegans? Pseudo-struct with comptime generated fields:

1543129778
benjikun
look at all of the language adding requests in PRs

1543129863
benjikun
they make it seem like it's easy as pie to add your language's lexer once you make it on their website lol

1543129917
hryx
MajorLag: whoa

1543129926
hryx
delightfully devilish, seymour

1543130034
hryx
yo that sucks benjikun

1543130052
hryx
I feel bad for the maintainer who has to sort through all of it too

1543130057
benjikun
true

1543130084
benjikun
look at pocoo.org

1543130097
hryx
don't worry, they'll rewrite bitbucket in zig in a couple years anyway, so it will obviously be re-prioritized

1543130105
hryx
thx atlassian

1543130111
benjikun
lmao

1543130151
daurnimator
What is the zig equivalent of atoi? (convert string to integer)

1543130223
benjikun
you can do it cleverly because of how characters are plain u8s in zig

1543130244
daurnimator
I'd be suprised if there isn't something in the standard library....

1543130301
hryx
me too. then again, AK was implementing a float parser on stream the other week, so maybe it's TODO still

1543130385
MajorLag
std.fmt.parseInt

1543130396
MajorLag
no wait, the other way around

1543130414
daurnimator
huh? what other way?

1543130416
MajorLag
no wait, that was right. brain

1543130429
MajorLag
it's too late to be thinking. I'm going to bed.

1543130434
daurnimator
night :)

1543130438
hryx
peece

1543130442
benjikun
night majorlag

1543130707
benjikun
I know parseInt is what you wanted

1543130717
benjikun
but here is a simple alternative atoi in zig daurnimator

1543130721
benjikun
lol

1543130908
hryx
you joke! But you are not far off from std:

1543130979
benjikun
I think using it would be fine if you added in comptime type recognition and possible error returns tbh

1543130996
benjikun
possible error returns being invalid character and overflow

1543131072
benjikun
speaking of the parseFloat livestream, I'm ready for the next one

1543131087
benjikun
I enjoy those streams a ton

1543131856
daurnimator
o.o std.mem.split does not work like expected

1543131863
daurnimator
It seems to skip empty fields

1543131956
benjikun
what do you mean?

1543132233
daurnimator


1543132304
hryx
daurnimator: Are you saying that you expect "x\t\ty" to split into ["x", "", "y"]?

1543132312
daurnimator
hryx: yes

1543132324
daurnimator
\t is the field separator.

1543132339
benjikun
hmm

1543132353
hryx
yeah that's how strings.Split works in Go too

1543132359
hryx
as in, what you expected

1543132396
hryx
I'll comment on your issue

1543132465
benjikun
also how it works in nim

1543132504
hryx
good call

1543132519
benjikun
yeah I think an `allowEmpty` flag would be great

1543132659
benjikun
commented too :p

1543132808
hryx
nice

1543135391
suirad
can anyone think of a comptime trick to have a defer propagate to the calling function? i tried inlining but that didnt work.

1543136368
hryx
suirad: what's the use case?

1543136732
suirad
trying to make something to the effect of a unique_ptr by causing a compile error if .deinit() isnt called; using comptime.

1543136878
suirad
i feel like a comptime fn that gets inlined should bring its variables and scope to the calling location

1543136914
suirad
*comptime variables

1543137340
suirad
this is kinda where I am so far:

1543137415
hryx
Interesting idea. But I feel that when I see curly braces, I like knowing where the scope boundaries are

1543137447
hryx
What would it be like if an inline function (whose vars were hoisted like you say) were called from many different places?

1543137460
hryx
increase chance of symbol collision?

1543137526
hryx
side note: cool trick using .rs to highlight the source. I can't wait for zig highlighting :>

1543139177
suirad
to prevent collision you could probably use some reflection stuff from std.meta or something. i presume XP

1543139462
suirad
essentially though, all I need to get this to work is: 1. add some sort of marker/flag for the used variable, in the scope of its use | 2. pre-set/defer an resulting action if the flag isnt cleared(compileerror) | 3. clear the flag on .deinit()

1543139567
suirad
4. have it be contained within comptime; so no additions to the data structure & and cleaned away

1543139590
suirad
thats all :)

1543141510
daurnimator
is there a generic string=>enum function around?

1543142073
benjikun
daurnimator: Do you mean like using a string as a tag?

1543142122
daurnimator
benjikun: I mean like this:

1543142523
daurnimator
^ should I PR that to zig std lib?

1543142630
benjikun
it could work with unions too, right?

1543142670
benjikun
would go into std.meta

1543142685
benjikun
I think idk

1543142880
benjikun
I'm not sure where else it would fit in

1543143013
daurnimator
yeah std.meta would probably make sense

1543143078
daurnimator
Can I wrap an integer type? I want to add methods to it, but still want it to work with e.g. @intCast().

1543143138
daurnimator
silly example: struct Foo { n: u32, fn isEven(self: Foo) bool { return self.n%2==0 } };

1543143267
benjikun
there are a few things kinda like this we could add to std.meta but I'm not sure if they're hugely necessary

1543143384
benjikun
and I'm not sure if you can do that

1543143400
benjikun
do you want to maintain how it works with operators?

1543143419
benjikun
or would you be okay with just `foo.value()`

1543143427
benjikun
not entirely sure what I'm even typing, I'm tired

1543143536
daurnimator
benjikun: hrm. good question. for my particular case now I don't need it to work with operators I think

1543143575
benjikun
hmm

1543143628
benjikun
I don't think you can without doing a `.something` to retrieve its value

1543143633
benjikun
unless there is some hacky way

1543143762
benjikun
anyways, off to sleep. night night, have fun programming

1543143771
benjikun
:)

1543146356
daurnimator
If I have an optional enum is a smart packing used?

1543148786
daurnimator
Is there a way to say "the int type that can fit at least X"

1543148811
daurnimator
e.g. I have a comptime integer 12345 => how do I get the smallest unsigned integer type that it will fit into?

1543149404
daurnimator
^^ I'm going to label those questions 'A' and 'B'

1543149438
daurnimator
C: How can I create an array of u21 where each element has the alignment of a u32?

1543155812
andrewrk
daurnimator, no smart packing yet but that's planned. I don't know if I made an issue yet

1543155973
daurnimator
D. how do you get plain `zig test` to work? I've created a build.zig with a test step, however I always get "Expected source file argument"

1543156001
andrewrk
`zig build test` and then add a test step to your build script

1543156078
daurnimator
andrewrk: I just used `b.addTest()`

1543156453
andrewrk
yeah that's the one

1543157277
daurnimator
andrewrk: but that doesn't seem to work?

1543157300
daurnimator
I can write: `const test_step = b.step("test", "Test the program");` which gives me the `zig build test` command.

1543157314
andrewrk


1543157331
daurnimator
andrewrk: I'm asking how b.addTest() is meant to be used.

1543157346
andrewrk
one of the planned features for this is to output a dependency graph for troubleshooting

1543157390
daurnimator


1543157442
andrewrk
daurnimator, did the example I linked answer your question?

1543157537
daurnimator
andrewrk: no.

1543157589
andrewrk
b.addTest creates a step to run `zig test` as part of your build process

1543157603
daurnimator
andrewrk: okay. so it just is a `zig test` invoker.

1543157614
andrewrk
yes

1543157618
daurnimator
andrewrk: the original question was how do I make so I don't need to pass a source to `zig test`: in the help output it says source is optional.

1543157703
andrewrk
I don't think [foo] consistently means "optional" in the usage text

1543157743
andrewrk
in most of those compile options, the args in brackets are mandatory

1543157788
daurnimator
ah

1543157792
daurnimator
thats.... odd

1543157828
daurnimator
andrewrk: E: would you be interested in a PR to include

1543157829
andrewrk
yes, I think that once we near 1.0.0 it will be time to think about how to organize the cli

1543157854
andrewrk
arg parsing as well as how to communicate the options

1543157883
andrewrk
daurnimator, that looks like it belongs in std.meta

1543157890
daurnimator
andrewrk: k. I'll send a PR :)

1543157895
andrewrk
thanks

1543157903
daurnimator
(keeping score: questions A, D, E answered. B, C still open)

1543157937
andrewrk
can you repeat them? I've given up on trying to read all the scrollback all the time

1543157960
andrewrk
I see this one

1543157961
andrewrk
C: How can I create an array of u21 where each element has the alignment of a u32?

1543157991
daurnimator
and B is the line(s) just above that :)

1543158056
andrewrk
if we made @sizeOf(u17) == 4, as discussed in the pointer subtraction issue, that would make your array of u21, each element have alignment of a u32

1543158104
andrewrk
if we don't do that then the question isn't simple. I think we should discuss this in an issue to keep track of the use case

1543158141
andrewrk
"the int type that can fit at least X" you can solve this in userland

1543158242
daurnimator
andrewrk: 'C' is separate to that previous sizeOf issue. I'm writing some code now where I have an array of u21. However for interop with C I want it to have a layout of u32. For the sake of argument lets pretend I wanted a layout of u128 instead.

1543158300
daurnimator
andrewrk: 'B' yes I understand it's solvable in userland. But for some reason I'm failing at doing the maths to figure it out :P std.math.log2 seems like the right place to be looking, but I'm not seeing the answer :(

1543158396
andrewrk
here's a clue

1543158465
andrewrk
if it's interoperating with C you should use only integers that have C type equivalents, e.g. u8, u16, c_long, etc=

1543158503
andrewrk
if you need an array of u128, make an array of u128s

1543158601
daurnimator
andrewrk: so I guess another way of describing what I want is an array of u128 where accesses automatically cast to u21.

1543158638
andrewrk
I don't think that's ever going to be a feature of zig. I recommend making an access function that does the cast

1543158906
daurnimator
andrewrk: perhaps relatedly I asked a different question earlier today: is there a way to have a single-member struct act like it's only member? e.g. `struct {x: u32, fn customMethod() void {} }`

1543158937
andrewrk
no

1543158978
andrewrk
any time you want to propose to make the language more complicated, it's an uphill battle, and we need really convincing use cases

1543158986
daurnimator
maybe another angle on the same question: can I define @intCast for my structure?

1543159014
andrewrk
can you describe what you are trying to accomplish?

1543159035
daurnimator
andrewrk: today I've been playing with

1543159052
andrewrk
ah, excellent use case

1543159076
andrewrk
you're trying to make a Codepoint a more sophisticated type

1543159080
daurnimator
yeah

1543159113
daurnimator
so that you can do e.g. mycodepoint.toUtf8() or mycodepoint.isLower()

1543159124
andrewrk
I would propose this as the null hypothesis: Codepoint as a u21 is perfect. your library can have functions that accept codepoint: u21 as the first arg

1543159200
andrewrk
if it's really just the difference between unicode.toUtf8(mycodepoint) vs mycodepoint.toUtf8(), zig philosophy is to resist the urge, and just accept it

1543159244
andrewrk
if you can show that it involves potential footguns or other mistakes, and something fancier would prevent mistakes, then we have to reconsider

1543159264
daurnimator
okay. will see how things go

1543159320
daurnimator
andrewrk: so what I'm currently figuring out is how

1543159353
andrewrk
why doesn't it work? are you hitting a comptime bug?

1543159430
daurnimator
1. need to adds lots of `comptime` annotations or else `parseUnicodeData` doesn't work.

1543159436
daurnimator
2. too many backwards branches. and uping the limit to makes my computer run out of memory before it gets close to solving it...

1543159440
andrewrk
where is the unicodedata.txt file?

1543159452
daurnimator
andrewrk: run `zig build test` :)

1543159463
andrewrk
oh neat, I see it now

1543159489
daurnimator
3. I don't have any actual "collection" data structure done yet: I'm looking for advice on what to use.

1543159541
andrewrk
your code looks fine. zig compiler needs to be made more efficient with regards to computation as well as memory usage in order to correctly run your comptime parsing code

1543159695
andrewrk
if you loop over an array of bytes at comptime, I think it currently uses 32 bytes per byte, or something absurd like that

1543159768
daurnimator
I can say that my computer uses over 20GB of ram trying to parse that 1.7MB....

1543159834
andrewrk
yeah it's much worse than the theoretical minimum

1543159887
andrewrk
eventually it should be about as fast as CPython

1543159909
daurnimator
It's comptime, so for now I mainly care about it working at all :P

1543159952
andrewrk
this use case of using @embedFile and parsing the stuff at comptime, is a good use case of zig. but I think zig is too immature to handle it right now. it'll be worth trying this again when self hosted is done

1543159974
daurnimator
so put the project on pause until.... 0.5.0?

1543159980
andrewrk
something like that

1543160785
daurnimator
k. bed time for me :)

1543164632
MajorLag
andrewrk: regarding comptime json->struct from the other day, here's a way it could (almost) be done in userland today:

1543164686
andrewrk
MajorLag, very interesting

1543164792
andrewrk
I hadn't considered that you can kinda  create a struct at comptime via embedding

1543164858
MajorLag
it came to me when considering the question of "how could I tack a new field on to a struct?", which is really the only problem that needs solving for this sort of thing.

1543164924
andrewrk
for json though, wouldn't you just want to have a normal struct, and then use reflection to populate it with the parsed json?

1543165035
andrewrk
returning errors when numbers don't fit, etc

1543165149
MajorLag
My understanding of the discussion was that the desire was to create a struct type from a json definition at comptime, to avoid having to manually recreate the struct definition when something changes.

1543165195
MajorLag
Of course, this didn't fit their other desire: not using strings to access the fields since the IDE won't handle it like it would a normal field.

1543165282
MajorLag
Adding a build step that parses JSON and outputs a .zig file would get  them what they wanted though. This was more just an excersize on my part I suppose than a real suggestion of how to do things.

1543165282
andrewrk
I'm not sure I agree with the validity of the use case. I think the struct would be the starting point, not the comptime json string

1543165294
andrewrk
that's fair

1543165341
MajorLag
I like to maintain my reputation as one of the worlds leading experts on abusing comptime.

1543165346
andrewrk
haha

1543165361
andrewrk
you and Hejsil

1543165372
andrewrk
and dbanstra

1543165387
andrewrk


1543165404
MajorLag
oh yeah, I remember that.

1543165433
andrewrk
it seems that everyone is more of an expert at abusing comptime than me

1543165498
MajorLag
out of necessity, we can't change the compiler to get what we want as easily.

1543165524
andrewrk
that's a keen observation

1543165546
andrewrk
I have the privilege of writing code how it should be and then fixing the bugs in the compiler

1543165565
MajorLag
it's a good thing, exercises the language, finds the gaps or lack thereof.

1543165568
andrewrk
and making changes that for others would require approval

1543165662
andrewrk
I appreciate everybody's patience. I hate having to keep saying things like "that's planned" "not done yet" "zig is too immature to be good at that use case yet"

1543165980
andrewrk
I think the number of "really big" proposals is getting small. I believe the entire set of them is as follows:

1543165991
andrewrk
* copy elision * coroutine rewrite / agnostic blocking vs evented I/O * safe recursion / eliminate stack overflow * the object oriented abstraction question * package management * advanced control flow analysis

1543166021
andrewrk
after these it's just a steady flow of documentation, bug fixes, and minor improvements

1543166052
andrewrk
oh, and * zig build system

1543166104
andrewrk
and a linker

1543174812
kristate
Hi!

1543174846
kristate
andrewrk: is something going on with CI?

1543177976
MajorLag
andrewrk, whenever I find myself in a situation where one of the TODO features would be really helpful, I just tell myself I could be writing C instead and remember how good I have it because of what zig already is.

1543185228
reductum
MajorLag: I've been feeling the same way. It's amazing how much of a boost to morale and quality of life Zig already is.

