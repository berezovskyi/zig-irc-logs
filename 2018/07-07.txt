1530930618
stratact
Does zig have heap strings and vectors?

1530931603
andrewrk
stratact, yes in userland

1530931613
andrewrk


1530931648
andrewrk
that would be for encoded utf8 strings

1530931665
andrewrk
std.ArrayList would be your heap allocated vector

1530931683
stratact
Gotcha

1530931698
andrewrk
we don't have a heap-allocated

1530931734
andrewrk
but it would basically be an ArrayList(u21)

1530931758
andrewrk
with functions like toUpperCase which depend on a huge database of ICU data or whatever

1530931779
stratact
why u21, and not u8?

1530931844
andrewrk
for a decoded string? the maximum valid unicode point is U+10FFFF which means you need a 21-bit unsigned integer to represent a codepoint

1530931894
stratact
ah gotcha

1530931955
stratact
what if in the future the unicode standard were to add more code points for more characters to support?

1530931995
andrewrk
YAGNI

1530932061
stratact
heh, I had to look that up ;)

1530932101
andrewrk
unicode defines U+10FFFF as the upper limit and so far 10% of the available codepoints have been used up

1530932131
stratact
I see

1530933227
MajorLag2
except A) it was 16 bit at one point, hence surrogate pairs, and 2) they keep adding emoji.

1530934057
andrewrk
yeah. I still don't think we need to worry about the upper limit being exceeded until it actually happens though

1530934457
stratact
andrewrk: so um, another suggestion, could you add to the documentation about the ArrayList and Buffer types, because those are going to be pretty commonly used in a lot of code. People are going to want to know not just the primitive types but also the common userland types to make Zig appear more interesting to the newcomer

1530934511
andrewrk
my plan is for that to be part of the auto generated docs

1530937592
GitHub39
[zig] andrewrk pushed 1 new commit to master:

1530937592
GitHub39
zig/master d8295c1 Andrew Kelley: add @popCount intrinsic

1530937640
MajorLag2
oh neat, I have a use for that

1530937683
andrewrk
docs are up:

1530948035
very-mediocre
new site theme is lit :]

1530952149
Bas_
Is there a reason @bytesToSlice doesn't work at compile time?

1530954095
tiehuis
i think it should be allowed but it probably just hasn't been yet, probably related is @bitCast not working at compile-time on arrays which should be in the future:

1530955652
Bas_
Ah yes, I tried that as well in the meantime and noticed that currently doesn't work.

1530965479
andi3
regarding the issue with for( times(10) ) |_,i |{}  from yesterday: wouldn't it be much more flexible to implement integrating over things, like also custom data structures, ranges, anything using coroutines and yield (combined into for loops)?

1530967597
Hejsil
andi3, i think the `var it = ...; while(it.next()) |item| {}` basically gives us everything you would want from an iterate feature

1530967647
Hejsil
And this also allows for iterators that can return errors: var it = ...; while(try it.next()) |item| {}`

1530972278
andi3
But itâ€™s much less work to implement iterators using coroutines instead of rolling an own iterator type every time

1530973171
Hejsil
I'm not sure I understand. With an iterator feature, you would still need to declare a type as "iterable" and implement "next" on this type

1530973318
Hejsil
And coroutines in zig are kinda boilerplaty as well. Look at the "range" example from this issue

1530977569
andi3


1530978566
Hejsil
I don't see how this saves any more code than the current alternative

1530978587
Hejsil
You still need to write the next and make function

1530978590
Hejsil
It's the same

1530978650
Hejsil
I think Jblows examples with the functional "iterate" style could save a lot of code

1530978657
Hejsil
He even mentions it himself

1530978699
Hejsil
Around here:

1530983487
andrewrk
I watched a couple minutes of this but I didn't understand the thing that Hejsil is trying to point out

1530991387
Hejsil
I was linking to a place where he shows an "iterate" function which takes a visit function as an argument

1530991445
Hejsil
JBlow himself points out the problems with it

1530996600
Bas_
I was trying to find the reason why there is no function overloading in Zig. I found this:

1530996656
Bas_
It says: add(int, int) and add(float, float) in Zig can just be done through a add(Type: type, Type, Type), such that you call it like add(i32, 5, 9)

1530996683
Bas_
But that still means you can only do it once right? I mean, there's no way to extend functions to accept more types.

1530996761
Bas_
I'm used to C++ and recently I've been trying to write my code just with structs + functions (which have overloads). Somehow it feels a bit silly I've to go back to 'methods'.

1530996788
Bas_
So I'm curious about the reasoning behind it. I looked through a few issues, but couldn't really find anything about why.

1530997099
dbandstra
i am mystified by the whole idea of programming streams

1530997105
dbandstra
video streams i mean

1530997139
dbandstra
what kind of mental state do you have to be in to be willing to watch 3 hours of some guy sitting in his underwear and rambling about his toy projects?

1530997153
Bas_
People are lazy, they'd rather have someone else do something than them actually doing anything themselves.

1530997218
dbandstra
then it's a still a waste of the time on the part of the video creator

1530997347
Bas_
Hmm....

1530997376
Bas_
Maybe he's lonely and wants attention?

1530997386
Bas_
Some people talk to their pet, others to the internet?

1530997450
dbandstra
i guess, but from what i could tell his language could be legitimately interesting

1530997458
Hejsil
Bas_ i think this applies to watching other people do anything

1530997470
Hejsil
Like let's plays or gaming streams

1530997471
dbandstra
but i don't really know because the only things i can dig up is "info collated from years of youtube videos"

1530997543
Bas_
Well sure... hmm... I was going to say that some things I can understand better. Like watching a car race or a football game. Because at least that's exciting and not something you can easily do yourself.

1530997550
Bas_
But then again maybe that also goes for programming?

1530997659
Hejsil
Well, you could play football yourself

1530997877
Bas_
The profs are supposed to be better at it ^^

1530997921
Bas_
Can you make a slice from a pointer?

1530997987
Bas_
Ah yes, I found it.

1530999033
skyfex
Bas_: I think maybe the reason you don't have function overloading in Zig is that it's a low-level and explicit language. If you have two functions with the same name, what is actually the name of each of the functions?

1530999048
skyfex
You need some way to translate the non-unique name.. that's implicit magic

1530999063
skyfex
*translate the non-unique name into a unique name

1530999209
skyfex
It also makes it more complicated to have shared libraries

1530999214
skyfex
(i think)

1530999365
skyfex
When discussing these thing, I have in the back of my mind what would be a "Zig++" feature.. i.e. if you'd make a language that is to Zig what C++ is to C, which features would belong to that language. Zig is a replacement for C, not C++ (although it can compete with C++ in many cases)

1530999412
skyfex
I guess a Zig-like way to do it might be to declare two names, to make it more explicit?

1530999428
Bas_
Yeah I know how you do it in C

1530999452
skyfex
What I mean is.. something like this:

1530999453
Bas_
you do my_type_add() instead of add() (or operator+() in C++)

1530999475
skyfex
fn add 'addFloat' (float, float)

1530999483
skyfex
fn add 'addInt' (int, int)

1530999532
Bas_
yeah or that

1530999535
skyfex
then you'd do add(3.0,2.0) in your code. It'd be translated to addFloat(..) as the actual symbol it calls, and that's what'd you'd see in the debugger

1530999545
Bas_
That's how C++ does it.

1530999570
Bas_
just it has to do add$@@$Float or whatever, because otherwise it might clash with some user defined function

1530999592
skyfex
Yeah, that's the magic/implict part

1530999636
skyfex
I think it's also not standardized? I seem to remember that different C++ compilers wasn't necessarily compatible in that regard

1530999707
Bas_
Nope, it's not.

1530999707
skyfex
It's possible to look at what Nim is doing too, it's a bit closer to Zig in principles

1530999746
skyfex
I really like Nim and Julia when it comes to these things

1530999771
Bas_
I looked at Julia, but never tried it out.

1530999824
skyfex
It's a bit odd in some ways, coming a bit from Matlab and R users.. but pretty solid, and I suppose it's 1.0 soon so might be worth looking at again

1530999855
skyfex
Personally I made a mental note to try to use it again when compiling to binary is finished and mature

1530999863
skyfex
Haven't checked the status of that in a while

1530999887
Bas_
Oh they're doing that now? I remembered it was more like matlab or something.

1531000066
skyfex
It's like a lot of things these days :P

1531000076
skyfex
gtg, good night

1531000350
Bas_
good night

