1521676813
GitHub187
[zig] andrewrk pushed 1 new commit to master:

1521676813
GitHub187
zig/master f885a1a Andrew Kelley: change async function call syntax...

1521682365
MajorLag2
f885a1a appdir should be up on zig.tgschultz.com now. I spent entirely too long tracking down a linker issue that turned out to be file corruption.

1521684565
andrewrk
MajorLag2, I like your "why" section

1521699568
GitHub124
[zig] tiehuis pushed 1 new commit to master:

1521699568
GitHub124
zig/master 53588f4 Marc Tiehuis: Add missing pub specifier to atan2

1521733899
MajorLag
andrewrk, I'm digging The Grand Bootstrapping plan. Outside of a stable base system, and things like plugins, I generally feel that shared libraries have been a failed experiment in application development.

1521735027
andrewrk
I tend to agree with you

1521735054
andrewrk
or at least, I think that shared libraries perhaps had a place saving bytes on a small hard drive, but now that cost is worth it to have predictable software

1521735500
MajorLag
I think the theory was sound, less memory, less disk, security updates without rebuilding every binary, it's just that in practice the negatives outweigh those by quite a lot in most cases.

1521735926
sand-witch
Speaking of that..isn't the MIT license regularly interpreted as needing binary attribution?

1521735941
andrewrk
no

1521735951
andrewrk
it's very close to public domain

1521736016
sand-witch
Reading the license..it's not clear to me. So I'm googling around and I haven't tallied the score but I'm seeing some people saying stuff like "The way I've seen MIT interpreted most often is that you have to distribute the license and attribution even for binary only distribution, or distribution in binary form as part of a larger work."

1521736039
sand-witch
thats just a random hacker news commenter though

1521736142
sand-witch
The MIT license says "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."

1521736231
andrewrk
hm on reinspection I can see how it could be interpreted this way

1521736249
sand-witch
The zlib license uses this wording instead: "This notice may not be removed or altered from any source distribution."

1521736255
sand-witch
So it's a lot clearer for sure

1521736301
andrewrk
if this is a serious issue I would be willing to switch licenses to a clearer one

1521736378
sand-witch
Most people that don't care about this kind of stuff do pick MIT, so it's a trategy that the license isn't clearer

1521736384
andrewrk
the 3 clause BSD license looks clearer too:

1521736444
andrewrk
hm this seems like it's the same as MIT but just more clear

1521736524
sand-witch
yeah

1521736667
sand-witch
The boost license according to wikipedia: "It is a permissive license in the style of the BSD license and the MIT license, but without requiring attribution for redistribution in binary form."

1521736704
andrewrk
ah ok so this is a real issue

1521736792
andrewrk
it looks like LLVM uses University of Illinois license, which looks identical to BSD-3-clause

1521736807
andrewrk
I will follow their lead and choose BSD-3-Clause

1521736830
andrewrk
which requires redistributions in binary form to reproduce the copyright/license in the documentation and/or other materials provided with the distribution

1521736877
andrewrk
zig links against LLVM,clang,LLD, so this is already required; zig is not introducing a new requirement

1521736998
hobomatic
licensing of the compiler itself doesn't seem like it would be any issue at all, but the standard library is a different story

1521737052
andrewrk
ah that's a good point

1521737076
andrewrk
I don't want to require binary attribution for the standard library

1521737080
sand-witch
Sigh. Network issues. Yeah I was thinking more about the standard library

1521737100
andrewrk
however, some parts of it are ported from musl

1521737116
andrewrk
which is MIT licensed

1521737176
andrewrk
I'll say this: zig's license is intended to be the lowest common denominator (the most permissive) of all the code we depend on and/or port code from

1521740537
sand-witch
Using exe.linkSystemLibrary("c") gives me "Unable to determine libc lib path." Am I linking libc correctly?

1521741240
MajorLag
zig needs to know how to find wherever your system libraries are. I believe it was -DCMAKE_ZIG_LIBC_DIR and -DCMAKE_ZIG_LIBC_STATIC_DIR at compiler build to set the default paths. you can pass --libc-lib-dir and --libc-static-lib-dir to set it at compiler run time.

1521744264
sand-witch
Alright I got it to work. I was under the mistaken belief for a while that /lib vs symlinked to /usr/lib. Whoops.

1521745070
andrewrk
sand-witch, are you using ubuntu? I recommend the exact configure line from the readme

1521745078
andrewrk
it will configure zig to find libc

1521745146
sand-witch
okay good to know

1521745462
sand-witch
Is there any way to test that a function I'm writing compiles, without using it?

1521745582
sand-witch
I can write randoms stuff into functions as long as the syntax is correct

1521745974
andrewrk
sand-witch, here's an issue you can track:

1521746013
andrewrk
this is the same problem as generic functions, where you might have a compile error if you invoke it with a certain type, but not with others. I have a plan to solve this which I'm calling "multibuild"

1521746060
andrewrk
it will perform a simultaneous build of all the targets and is then able to give errors for unused functions

1521746210
sand-witch
Okay thanks. I personally find it hard to develop with a lazy mechanism like that. The code I write is never quickly used by main. But I really like the ability to test my code from 'test'.

1521746507
andrewrk
noted. it's an open issue in the design

1521747285
sand-witch
Well, I guess writing too much code before using it is a bit of a flaw of mine. But for new programmers the non-lazy behavior would definitely be less likely to frustrate them as they are learning the language.

1521747311
andrewrk
it's an issue for IDE support too

1521752114
sand-witch
This syntax is insanely good, I love it:

1521752158
sand-witch
I hope a lot of future languages learn from this

1521752192
MajorLag
I too am a fan of Zig's error and null handling.

1521752202
GitHub28
[zig] andrewrk pushed 1 new commit to master:

1521752202
GitHub28
zig/master 7a99d63 Andrew Kelley: ability to use async function pointers...

1521752374
andrewrk
sand-witch, I'm pleased with how the `noreturn` type turned out

1521752426
andrewrk
there's a shortcut for that: p.display = ??c.XOpenDisplay(null);

1521752442
andrewrk
it is semantically equivalent to your code

1521752626
MajorLag
andrewrk: new appdir build running. if this one goes without a hitch I think the build script is good enough to let cron take it from here and the appdir on my site will be at most a day behind master. I took a look at travis ci, and from what I can tell we just need to add an artifact that packes up the binary and libs and setup the publishing. I'm not sure which libxml2 trusty uses though, so we may have to deal

1521752626
MajorLag
go that route.

1521752696
andrewrk
noted

1521759099
jzelinskie
so does zig have any runtime?

1521759236
jzelinskie
it doesn't look like it

