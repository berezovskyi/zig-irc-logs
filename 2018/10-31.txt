1540946845
emekoi
can zig link objective-c code?

1540946891
nbjoerg
abi-wise objective c is pretty much normal C as long as you don't want to do dynamic dispatch directly

1540947410
emekoi
that's good to hear

1540948989
nbjoerg
hm. in deferUnwindExample -- wouldn't it be better to say "defers are not run if they have not been reached"?

1540949576
nbjoerg
for the UB list, I'm missing division overflow?

1540949696
nbjoerg
(i.e. for i8: -128 / -1)

1540949804
nbjoerg
hm. is that assumed to be under the general integer overflow section?

1540949982
nbjoerg
the language from @divFloor in regard to that needs to be copied to @divExact

1540950023
nbjoerg
?

1540950221
andrewrk
nbjoerg, looks like you have some useful feedback/fixes for the lang ref. I'm interested in that information but I'm not able to focus on it at the moment

1540952824
daurnimator
Can someone confirm to me that there is now exponentiation operator?

1540955799
MajorLag
There is no exponentiation operator. You have to use `std.math.pow`. Though I do think scientific notation is parsed for literals.

1540956479
daurnimator
MajorLag: thanks

1540956487
daurnimator
Does setRuntimeSafety(true) work in ReleaseFast mode?

1540956528
daurnimator
e.g. if I have a block that I

1540956648
MajorLag
yeah, that's what it's for.

1540956703
andrewrk
daurnimator, see also this proposal which takes the feature to the next level:

1540956888
diltsman
Any idea why my build would fail with -1073740791?

1540956957
daurnimator
andrewrk: cool :)

1540956994
andrewrk
diltsman, happy to help, can I see some more details?

1540957144
diltsman
This is the build output: TODO implement C ABI for this architecture. See

1540957230
diltsman
What else do you need?  Simple .zig file with a global table and a function.  Simple build.zig.

1540957240
andrewrk
it's this: TODO implement C ABI for this architecture. See

1540957337
diltsman
Given that I will not be using an C, is there something that I can do as a workaround?

1540957357
andrewrk
you ran into an unimplemented feature, which you can read more about on that issue. if you post the particular C ABI you need I can try to prioritize it to unblock you. (just posting the extern function will be sufficient to communicate which C ABI you are trying to use)

1540957438
diltsman
I only have this function: nakedcc fn _start() void

1540957470
diltsman
There are no functions or variables declared extern.

1540957471
andrewrk
what target arch?

1540957479
andrewrk
oh I see it now

1540957488
andrewrk
this is probably a quick fix

1540957508
daurnimator
misc thought: can zig files gain a magic-number?

1540957527
daurnimator
as in: something that can be detected with binfmt_misc

1540957536
andrewrk
it sounds like you're trying to intentionally defeat deterministic builds?

1540957549
andrewrk
can you explain the use case?

1540957568
daurnimator
andrewrk: pretend that zig programs are scripts.

1540957580
daurnimator
i.e. be able to use zig as a scripting language

1540957593
MajorLag
you can already do that I think, with zig run and a #! line.

1540957596
daurnimator
though that's probably acheiveable with a shebang? (is that supported?)

1540957601
andrewrk
what os is binfmt_misc for? shebang lines are supported

1540957616
daurnimator
andrewrk: binfmt_misc is a linux feature

1540957631
daurnimator
wikipedia seems as good a place to start as any:

1540957633
andrewrk
probably shebang lines is the more portable solution

1540957641
daurnimator
andrewrk: what is the recommended shebang?

1540957666
andrewrk
#!full/path/to/zig run

1540957669
daurnimator
I guess the "normal" env hack wouldn't work as you need 'run' in there? #!/usr/bin/env zig

1540957685
andrewrk
yeah there's an issue for this:

1540957726
daurnimator
ah great!

1540957750
MajorLag
can't binfmt_misc work off of the filename pattern or am I misremembering?

1540957796
daurnimator
MajorLag: no, binfmt_misc looks for a pattern in the file. like looking for an elf header, or a bytecode header for some languages, etc.

1540957812
andrewrk
diltsman, I'm not getting that failure with zig master branch

1540957819
daurnimator
MajorLag: oh wait no, there is the "E" type. I forget about that

1540957825
andrewrk
with this source: export nakedcc fn _start() void { }

1540957863
diltsman
I will try it with the master branch in a few minutes.

1540957899
andrewrk
diltsman, ok. I apologize for the breaking changes that you probably run into. we're at the beginning of a release cycle, so there's quite a bit of breaking changes

1540957948
diltsman
Not a big deal.  My whole code base is 15 lines.

1540958128
diltsman
When are you expecting to release?

1540958196
andrewrk
we just had 0.3.0 one month ago (see release notes

1540958208
andrewrk
1.0.0 is about 2 years out

1540958341
diltsman
Is there a Windows binary for master?

1540958532
MajorLag
yes, via appveyor artifact. Here's the latest:

1540958794
diltsman
Thanks.  I was looking for that but couldn't find the artifact link.

1540958864
MajorLag
You need to pick a green build from appveyor, then its a tab on the right.

1540958871
diltsman
Ah.

1540959139
diltsman
What should be here?  The error message says it expects a semi before the curly.  const vector_table align(4) section(".vector") = vectortable: {

1540959259
MajorLag
probably: `const vector_table align(4) section(".vector") = vectortable: vectorable.{` if vectorable is a struct. Could be shortened to `const vector_table align(4) section(".vector") = vectortable.{`

1540959274
MajorLag
this was a recent syntax change that looks like it will be reverted soon.

1540959612
diltsman
Thanks.  Now we are to the point of fixing the linker script, but that shouldn't be terrible.

1540961698
andrewrk
diltsman, the linker is LLD

1540972277
Hejsil
andrewrk> "oh I see, you made the parser code according to the grammar you worked on"

1540972290
Hejsil
I haven't made the stage1 and 2 parser follow the grammar yet

1540987220
nbjoerg
andrewrk: given that you now give good compile-time functions, have you considered supporting D-like mixins?

1540987306
nbjoerg
(btw, the intro statement about RT and GC is misleading if not wrong. it's quite possible to do real-time garbage collection)

1540993902
andrewrk
nbjoerg, according to the D docs "mixins enable string constants to be compiled as regular D code and inserted into the program."

1540993986
andrewrk
zig plans to not have this feature. comptime code gets you 90% of what you would need from this feature, without resorting to string generation, and for the remaining 10% you can generate code like normal using the build system

1540994041
andrewrk
although as an aside I would personally suggest considering if there are viable alternatives to code generation before doing it

1540994138
andrewrk
I stand by the Realtime/garbage collection statement. The most straightforward, verifiable way to create realtime software is to manually manage memory

1540994168
andrewrk
although I'm not sure where you're reading this from. I don't see it on ziglang.org homepage

1540996765
nbjoerg
"Why Zig.." in the wiki

1540996787
nbjoerg
I'm just saying that are hard-real time gc implementations

1540996808
nbjoerg
as all things hard real-time, they operate under certain constraints, but it can be done

1540996849
nbjoerg
that said: the question more mixin is that it is one safe way to allow generic endogenous types without too much repeation

1540996857
nbjoerg
i.e. linked list with internal storage

1540996868
nbjoerg
without too many constraints

1540996903
nbjoerg
in a way that also allows having multiple link entries in the same parent etc

1540996932
nbjoerg
which is quite important for low-level applications like system kernels :)

1540997112
nbjoerg
bbl

1540997529
andrewrk
a hard real-time garbage collector has the vulnerability that if you allocate memory faster than the gc can keep up, you exhaust system resources. to avoid this situation requires careful memory management and understanding of the gc implementation. this defeats the purpose, making manual memory management the simpler choice

1541014037
andrewrk
given that memcpy intrinsic has alignment annotations, would it be a performance improvement if llvm could emit libcalls to, e.g. memcpy1, memcpy4, memcpy8, etc where the number is the alignment value?

1541014046
andrewrk
oops meant that for #llvm on OFTC

1541018330
DutchGh0st
how do I convert the []T returned by pub fn alloc(self: *Allocator, comptime T: type, n: usize) ![]T { into a *T ?

1541018566
DutchGh0st
&returned_slice[0] ?

1541018844
nbjoerg
andrewrk: pretty small

1541018857
nbjoerg
andrewrk: IIRC ARM did something like that at some point

1541018866
nbjoerg
andrewrk: but generally, it rarely matters

1541018990
DutchGh0st
and how do I go back from a ptr to a slice?

1541019000
DutchGh0st
free seems to take a slice?

1541019039
nbjoerg
andrewrk: still missing the point that most of those constraints apply to non-gc memory management just as well

1541019064
nbjoerg
andrewrk: e.g. you still have the problem of how to correctly free large nested object graphs etc

1541019097
nbjoerg
there is a reason why a lot of hard rt coding standars disallow memory allocation at all...

1541019587
DutchGh0st


1541019604
DutchGh0st
why does that complain on line 33, "error: expected error union type, found 'box(i32,*(struct Allocator constant))"

1541019654
nbjoerg
andrewrk: going back to the mixin question

1541019675
DutchGh0st
oh, it was the 'try' keyword

1541019679
DutchGh0st
huh

1541019691
nbjoerg
andrewrk: strings are just somewhat natural as the parser has to deal with them anyway and string manipulation is something easily done

1541019731
nbjoerg
andrewrk: I don't think the current comptime functions really fit the same nieche nor do I think they provide equivalent ease of use

1541019762
nbjoerg
andrewrk: consider a structure that should be on more than one $container without additional allocations

1541019804
nbjoerg
andrewrk: how do you handle this with comptime functions alone without nesting (which is ugly and breaks abstractions)

1541019901
DutchGh0st
mh, what if you have a ptr to some heap memory, obtained by a call to allocator.alloc, but the heaped memory itself is also a resource again, will it kind of like recursively free?

1541019913
DutchGh0st
or its just 'once you free you're toast'

1541022614
andrewrk
DutchGh0st, you want allocator.createOne instead of alloc:

1541022846
andrewrk
and then call destroy

1541022990
andrewrk
nbjoerg, can you give an example of such a structure and a pair of containers?

1541023133
nbjoerg
let's pick a non-trivial, but typical example:

1541023174
nbjoerg
note the various *_ENTRY entries, that are for different linked lists the kernel thread might be a member of

1541023235
andrewrk
you can use std.LinkedList for this

1541023272
nbjoerg
for multiple lists in the same structs?

1541023276
andrewrk
yes

1541023315
andrewrk
use fields of type `std.LinkedList(void).Node` if you want strictly intrusive linked lists; otherwise use something other than `void` if you want the nodes to contain a value

1541023317
nbjoerg
ISTM that would require nesting the list

1541023339
andrewrk
then use @fieldParentPtr to get from a node pointer to the lwp or whatever struct

1541023356
andrewrk
which is what the intrusive linked list macros do in the linked c code

1541023361
nbjoerg
ah, that's the exactly the kind of boilerplate that I would like to avoid...

1541023382
andrewrk
what boilerplate?

1541023417
nbjoerg
having to repeat the element name

1541023442
nbjoerg
but I might be missing something. sec

1541023534
nbjoerg
right, fieldParentPtr seems to be quite redundant

1541023570
nbjoerg
i.e. I should have to tell it the name of the node class

1541023607
nbjoerg
(I shouldn't really have to know that name of the field either, that's already a concession to the limits of the preprocessor in C)

1541025385
andrewrk
I don't think string processing metaprogramming is better than using the field name

1541025696
nbjoerg
well, ignore that part for a momment

1541025730
nbjoerg
what it looks like could be something like: mixin(linkedList, entry1); maxin(linkedList, entry2) etc

1541025780
nbjoerg
which gives you entry1 with an unnamed struct, members for manipulation, maybe an iterator at some point in the future and a type for declaring the container itself

1541025809
nbjoerg
similar for entry2. no further use has to mention it.

1541025816
nbjoerg
well, @mixin

1541025876
nbjoerg
without support for introspecting the current context, it might need an argument for the outer type as well, but again, that's a minor aspect

1541025911
nbjoerg
it doesn't have to be string based -- but string based avoids the need for further special syntax

1541025942
nbjoerg
it could also be a builtin-return type that just specifies a block or struct to be merged

1541029145
nbjoerg
anyway, I can create a more consistent and thought out proposal if you are interested as soon as I have some time

1541029688
nbjoerg
hm. can't find an open issue for the lack of pointer aliasing discussion in the langref?

