1543884916
daurnimator
andrewrk: a quick search didn't find it, do you know what issue #?

1543892451
vegecode
Is it possible to generate a debug binary with the `zig test` command to run with gdb?

1543892462
vegecode
So I can debug my tests?

1543894336
andrewrk
daurnimator,

1543894347
andrewrk
vegecode, yes

1543894353
andrewrk
zig test leaves the test binary there

1543894359
andrewrk
zig-cache/test[.exe]

1543894377
andrewrk
also if your test crashes it prints the path to it

1543894433
daurnimator
andrewrk: thanks

1543894455
daurnimator
andrewrk: otherwise, any interesting progress?

1543894983
vegecode
andrewrk, thanks I never noticed it

1543895074
andrewrk
daurnimator, worked on copy elision today, made progress towards hello world working

1543895333
hryx
Speaking of cache, what's the difference between the project-local `zig-cache` directory and the one at ~/.local/share/zig ?

1543895466
andrewrk
the global one has compiler_rt.a, builtin.a, builtin.zig, the compiler hash, any binaries from `zig run`, and any binaries from `zig build`

1543895479
andrewrk
or anything you use `--cache on`

1543895519
andrewrk
the local one only has .o files and `zig test` output. the .o files are purposefully left in the local dir, notably, so that on macos stack traces can work

1543895537
andrewrk
zig test output is left there so that you can use a debugger on it, like vegecode mentioned

1543895564
andrewrk
I actually had completely removed the local one when I was working on the global cache stuff, but then realized certain things were better with the local one.

1543895567
hryx
fascinating. what's up with macos? is that an rpath thing?

1543895593
andrewrk
the binary in memory, maps addresses to .o files. then you go find the .o files and read the debug info

1543895633
hryx
dope, thanks for the 'splanation

1543895642
andrewrk
so you can try this experiment, have `zig test` call @panic on macos, look at the stack trace, then rm the *.o file and run it again

1543895658
andrewrk
and you won't get a stack trace

1543895706
hryx
I think I'll try that out now

1543899594
reductum
Is there a way to cast something from type [n]u8 to []u8, where n is some number? I want to return a string literal from a function.

1543899636
MajorLag
var my_slice = my_array[s..e]; where s and e are the start and end indexes.

1543899666
MajorLag
or var my_slice = my_array[0..]; to slice the entire array

1543899688
reductum
Thank you

1543927547
sjums
About debugging. How do you debug? What tools do you guys prefer?

1543927750
Hejsil
sjums, I use gdb with the kdbg UI

1543927812
sjums
Gonna be a tough one on windows ;)

1543927832
Hejsil
When I use Windows, i used Visual studio

1543927839
sjums
I've used visual studio when everything's on fire

1543927850
sjums
But it's not the best tool for the job!

1543927851
Hejsil
debug.warn is pretty good too

1543927856
lorenzzzo
If I want to crosscompile Zig for freestading RISCV, what should I do?

1543927918
Hejsil
lorenzzzo, have you seen the --target-arch, --target-environ and --target-os compiler flags?

1543927924
Hejsil
I think thats a good starting pount

1543927927
Hejsil
point*

1543928026
lorenzzzo
Oh ,i did target-arch but forgot the others

1543930455
vegecode
/exit

1543947508
sjums
error: expected type '[]u8', found '[]const u8'

1543947508
sjums
.logLine = it.rest(),

1543947557
sjums
I think I heard something about pointers, but adding an & before it.rest() obv. doesn't work

1543947608
andrewrk
sjums, consider the meaning of the error message

1543947611
andrewrk
why won't it let you do it?

1543947624
andrewrk
what is the error protecting you against?

1543947672
sjums
I can modify the .logline, but the rest of the iterator is immutable, so adding a mutable reference to it though .logline would be bollocks

1543947681
sjums
(am I right?)

1543947727
andrewrk
correct

1543947777
andrewrk
perhaps could your logLine field be marked constant?

1543947866
sjums
In this case yes. If I wanted the []const u8 to be a []u8, would I then have to allocate a new ArrayList, use std.mem.copy and slice the arraylist ?

1543948394
andrewrk
the idea of iterating over a slice of bytes and mutating it at the same time is inherently tricky

1543948417
andrewrk
and probably best be done manually rather than with a split iterator API

1543948424
andrewrk
I doubt that's what you need to do though

1543948581
sjums
If it calms you I come from C#, where it's impossible to modify the collection you are currently looping with a foreach loop.

1543948594
sjums
So I'd never even attempt it in Zig :b

1543948626
sjums
Though, C# only gives runtime errors for that. I can only expect zig to throw errors at compile time in such a case!

1543951894
sjums
Can I access struct members from inside the struct?

1543951918
sjums
const c = struct{ .a = 123, .b = .a };

1543951926
sjums
where c.b would be 123

1543952119
andrewrk
no

1543958179
andrewrk
new blog article:

1543958734
nbjoerg
pff. kernel debugging with a video device. how boring :)

1543958762
nbjoerg
back in my days, all we had was a pc speaker and a busy loop...

1543958843
andrewrk
nbjoerg, video device? what video device? this is stack traces over serial

1543958864
andrewrk
this code doesn't even have a bootloader or a file system, let alone video driver

1543958907
nbjoerg
andrewrk: serial console counts as video device :)

1543958955
nbjoerg
but it's been a couple of years since I had to do pc speaker debugging

1543959091
andrewrk
seems like the first step would be to encode text as sound and decode on another computer

1543959139
nbjoerg
I think there was a patch for NetBSD's ddb somewhere to write panic messages via the keyboard leds

1543959144
nbjoerg
using morse code

1543959165
andrewrk
better than nothing

1543959171
nbjoerg
in my case it was debugging acpi wake-up code

1543959193
nbjoerg
so the primary concern was "which f**king instruction triggered the triple fault this time"...

1543959285
nbjoerg
x86 is so much fun for debugging

1543959347
nbjoerg
when I have 6 month of time with nothing to do, I want to try creating a bi-endian arm kernel

1543959370
nbjoerg
that is a kernel for arm that can run natively both little and big endian binaries

1543961574
bbrittain
we're talking about your post in our offtopic work channel

1543961580
bbrittain
some of my coworkers have watched your videos

1543961611
bbrittain
we're talking about how you really care about OOMs :P

1543961818
andrewrk
bbrittain, in particular, I think that the idea of an OOM killer is an inadequate solution

1543961826
andrewrk
it's inherently heuristics based

1543964675
emekoi
if a value is know at compile time (builtin.os) does zig optimize away branching on that value?

