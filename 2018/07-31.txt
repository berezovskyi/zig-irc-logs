1533003718
GitHub183
[zig] mdsteele opened pull request #1309: Add "Comments" section to language reference (master...docs-comments)

1533004041
GitHub42
zig/master 0db33e9 Matthew D. Steele: Add "Comments" section to language reference (#1309)...

1533004041
GitHub42
[zig] andrewrk pushed 1 new commit to master:

1533004041
GitHub194
[zig] andrewrk closed pull request #1309: Add "Comments" section to language reference (master...docs-comments)

1533004345
aesl
how close is Zig to being production ready?

1533004376
andrewrk
aesl, 2 years

1533004410
aesl
cool, I'm fine with that

1533004432
aesl
how much do you think the syntax will change from now to then?

1533004583
andrewrk
return type syntax. coroutine syntax. required parens for some binary operations. function calling convention. aggregate type definition and literal syntax. alignment and other unusual properties of pointer type syntax

1533004590
andrewrk
there are a few more

1533004608
andrewrk
probably a few more instances of wide sweeping breaking syntax changes

1533004632
andrewrk
once self-hosted compiler is nearing completion I plan to try to do all the syntax stuff as soon as possible

1533004653
andrewrk
oh, and inline assembly syntax

1533004659
andrewrk
lots of changes before 1.0.0.

1533006586
aesl
alright

1533006602
aesl
thanks for the heads up

1533051506
GitHub46
[zig] andrewrk pushed 1 new commit to master:

1533051506
GitHub46
zig/master 058bfb2 Andrew Kelley: std.fmt.format: add '*' for formatting things as pointers...

1533051508
GitHub32
[zig] andrewrk closed pull request #1285: DONOT Merge Add formatted printing of pointers (master...add-formatted-printing-of-pointers)

1533060086
Bas_
Anyone here familiar with local host tcp on windows?

1533060294
bheads_
you asking about winsock?

1533060531
Bas_
Yes. My main problem is that it's somehow super slow.

1533060558
bheads_
have you seen this part of the api docs?

1533060586
andrewrk
Bas_, are you trying to integrate it with evented I/O? that has to do with IOCP

1533060622
Bas_
Basically this.

1533060664
Bas_
Yeah I read their docs, pretty much useless.

1533060732
Bas_
Since it's not directly zig related I don't want to pollute the chat here, but if you have any experience, let me know. ^^

1533060790
bheads_
have you tried adding timing around the api calls? Normally I find I am using and api incorrectly or there is a better api call

1533061004
Bas_
Yeah, sometimes it's slow sometimes it's fast. Though the actual transfer speed is always similar. 500MB/s While Linux does nearly 5GB/s on the same machine (VM in the windows box actually).

1533061031
Bas_
So either winsock is shit, or I'm doing something wrong. Currently I'm thinking winsock is shit ^^

1533061051
andrewrk
linux is native while windows is in a VM?

1533061055
andrewrk
wouldn't that explain it?

1533061118
Bas_
No, the other way around =D

1533061156
bheads_
are you using TCP_NODELAY ?

1533061186
very-mediocre
maybe relevant:

1533061338
very-mediocre
woops, you're referring to winsock, my mistake.

1533061347
Bas_
It looks interesting anyway

1533061355
very-mediocre
read the wrong logs, thought you were talking about iocp

1533061466
bheads_
Without digging into the code all I can think of is make sure your using select

1533061511
bheads_
or using setsockopt and increacing the send buffer

1533061907
moshe
Hi there.

1533061978
andrewrk
hi moshe

1533062094
moshe
hey, I found the solution to my problem right after typing that greeting ;)

1533062145
moshe
I was trying to use --library-path to add a directory to the include path, then I found the isystem flag

1533062148
andrewrk
glad we could help :)

1533062188
moshe
the compiler did not like the particular header file I'm trying to include, though.

1533062270
andrewrk
if you want more information you can use: `zig translate-c file-that-includes-it.h --verbose-cimport`

1533062279
andrewrk
there will be some warnings at the top, likely

1533062303
moshe
"error: compiler bug: @cImport generated invalid zig code"

1533062313
andrewrk
ah, yes, a compiler bug

1533062328
moshe
not after running your command, that was the original output from my test file

1533062371
moshe
it the says ?.c:1:1: note: 'JavaVM' depends on itself  TODO: remember C source location to display here

1533062412
andrewrk
if you are interested in troubleshooting, you can run the above command, save the stdout into foo.zig and then post a link to a paste of it

1533062432
andrewrk
the next step toward solving this is coming up with a small C code example that causes this problem

1533062571
moshe
will do.

1533062621
andrewrk
alternatively if you want to just get on with your day, you can look at the translate-c output, manually patch up the generated zig code, and then use that in your project rather than a @cImport

1533062632
andrewrk
(that said we do want to solve this eventually)

1533063137
moshe
I ran the translate-c command.. the generated zig file has 1960 lines

1533063160
andrewrk
right, so that's why we want to narrow it down to a small test case

1533063178
andrewrk
by searching for JavaVM, and then looking for JavaVM in the C code

1533063567
moshe
I think I do understand the problem: *JavaVM is an opaque typedef that hides an internal struct full of pointers to functions, some of which take a *JavaVM as argument

1533063590
moshe
so there's a circularity there

1533063637
andrewrk
zig needs to generate valid code from that though

1533063642
andrewrk
so it's definitely a bug

1533063658
moshe
Yeah, I agree.

1533063711
moshe
I'll try to create a smaller c file that triggers the problem.

1533063732
andrewrk
that would be much appreciated

1533064221
winksaville
andrewrk: I added all of the tests that I'd created to test {p} to your code that added {*} they all passed except one where I was testing a Slice.

1533064233
winksaville
First off there was a typo/bug in my original test and the test fails on my {p} code too, so the test was bad.

1533064264
andrewrk
you'll need to pass `slice.ptr` to get the slice pointer to print

1533064294
winksaville
how do I do that?

1533064302
winksaville
what's the syntax

1533064306
andrewrk
append the characters ".ptr" to a slice

1533064323
winksaville
k, I'll give that a try

1533064325
andrewrk


1533064789
winksaville
Ok, that did it:

1533064851
winksaville
var expected = try bufPrint(buf1[0..], "value: u16@{x}", @ptrToInt(&value[0]));

1533064867
winksaville
var actual = try bufPrint(buf2[0..], "value: {*}", value[0..].ptr);

1533064881
winksaville
try testExpectedActual(expected, actual);

1533065017
winksaville
andrewrk: That wasn't obvious is the ".ptr" available on arrays or any other thing, searching the docs only has it for slices?

1533065072
andrewrk
correct, the ptr field is only available on slices, as the documentation says

1533065089
winksaville
k

1533065301
winksaville
One other observation, there are 5 "Paths" where "fn formatType" prints the address using code like "return format(context, Errors, output, "{}@{x}", @typeName(T.Child), @ptrToInt(value))"

1533065349
winksaville
I had added formatAddress for those and some "wink_log" printing the PathN.

1533065390
andrewrk
there are not 5 paths in my implementation

1533065411
andrewrk
there is only 1

1533065453
winksaville
You mean the Pointer path in format state machine?

1533065485
andrewrk
yes

1533065537
winksaville
well, yes and no

1533065603
winksaville
What I'm saying is the code that used to print the pointers with the format "{}@{x}" is there but no longer used.

1533065735
winksaville
Should those paths be changed to @compileError?

1533066106
ofelas
why for a struct with fn port(self: *const Self) u16,... fn otherfn(self: *Self, port: u16)... gives redefinition of port?

1533066446
andrewrk
ofelas, because in the definition of otherfn, `port` can refer to both the parameter, and the port function

1533066490
andrewrk
winksaville, they're still used. sometimes a pointer is printed even if it's not explicit

1533066554
ofelas
hmm, okay

1533066739
winksaville
I added all the tests from my PR which attempts to add test coverage of those paths, but none of them were executed in any of the existing tests or the ones I added.

1533066800
andrewrk
what problem are you trying to solve?

1533067055
winksaville
I just wanted to validate my tests worked with the new code and I was guessing those paths were now not being excersied and that seems the case.

1533067154
winksaville
Unexcersied code paths aren't the best idea, so it seems there should be tests for those paths or change them to @compileError, IMHO :)

1533067331
winksaville
I've already incorporated the additonaly tests I'd previously created, I can create a PR if you'd like. I can include the @compileError's if want them.

1533067341
MajorLag1
andrewrk: until reading #1306 I wasn't aware that realloc was not supposed to be able to error if new_len < old_len. Like was mentioned by someone else in the thread, my own pool allocator moves you to a smaller block size pool if you cross below a limit, which can cause an allocation from the OS, which can fail. In my case the behavior can be changed, but the restriction does seem problematic.

1533067459
andrewrk
MajorLag1, noted. we need to resolve that use case, with the use case that I posted in the issue, because currently they're in conflict

1533067543
andrewrk
winksaville, I'm not focused on 100% std lib test coverage just yet. the API is still in flux. feel free to make a pull request

1533067561
winksaville
k

1533068008
MajorLag1
Well, we could have 2 reallocs. Something like realloc (which can fail any time) and resize (which will fail if the memory has to be moved). On the one hand this makes intent more explicit, on the other hand it complicates implementation, and on the gripping hand it doesn't really solve the problem as described by that post so much as it just forces the caller to deal with it.

1533068104
andrewrk
right. there are 2 fundamental questions here, related to each other: (1) should the caller be responsible for tracking the byte count of allocations, and (2) should there be a way for the caller to shrink the byte count of an allocation in an infallible way

1533068137
andrewrk
I think if the caller is responsible for tracking byte count, then it should be able to shrink the byte count without the possibility of failure

1533068173
andrewrk
if the caller doesn't have to track byte count, it's no big deal to allow realloc to fail

1533068334
moshe
andrewk: I managed to reproduce that compiler bug with a small test case.

1533068349
andrewrk
wonderful

1533068362
moshe
I made a github gist with the inputs, sould I post the link here?

1533068386
andrewrk
sure you can do that, or you can file a github issue:

1533068465
moshe
the gist is here

1533068467
MajorLag1
If slices were Go-style and carried around a capacity too, then it wouldn't be an issue. Just spitballing, maybe allocators should return a `struct { data: []var, capacity: usize };`.

1533068526
andrewrk
the zig equivalent of that is std.ArrayList

1533068909
andrewrk
moshe, here you go:

1533068973
MajorLag1
Now I'm tempted to experiment with a unified ArrayList/Allocator type.

1533069265
moshe
thanks!

1533073587
GitHub161
[zig] winksaville opened pull request #1311: Add tests to formatted printing of pointers (master...add-tests-to-formatted-printing-of-pointers)

1533076689
aiwakura


1533076694
aiwakura
why is this an error?

1533081539
GitHub149
[zig] andrewrk pushed 1 new commit to master:

1533081539
GitHub149
zig/master de949b7 Andrew Kelley: simpler std.event.Lock implementation

