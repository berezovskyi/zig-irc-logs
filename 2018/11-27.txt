1543292591
ducktype
hi

1543292592
ducktype
error: expected error union type, found '?NextError![]u8'

1543292622
ducktype
how to use try and typeinference with union and nullable oprional return?

1543292638
ducktype
var first_arg = try args.next(allocator);

1543343669
ducktype
hi

1543343715
ducktype
how to pass a null pointer to syscalls? which is the sytntax for a literal null pointer?

1543344171
ducktype
found: @intToPtr([*]const u8,0)

1543344207
ducktype
a quick way to convert ArgIterator to []const []const u8 ?

1543344435
andrewrk
ducktype, sounds like you want std.os.argsAlloc() rather than the iterator API

1543344694
ducktype
ty better

1543345616
andrewrk
ducktype, you can use `null` for pointers when your pointer type has a ? in front of it

1543345635
andrewrk
if a function can accept a null pointer then the pointer type should be, e.g.   ptr: ?[*]const u8

1543345657
andrewrk
and you can use @ptrToInt(ptr) on that type, and it will give you 0

1543345831
ducktype
so most of pub fn mount(special: [*]const u8, dir: [*]const u8, fstype: [*]const u8, flags: u32, data: usize) usize { this arguments in the signature should be optional i think

1543345844
andrewrk
that sounds correct

1543345898
andrewrk
ducktype, are you referring to this? "An  existing  mount may be remounted by specifying MS_REMOUNT... The source and filesystemtype arguments are ignored."

1543345939
andrewrk
if an argument is sometimes ignored, but otherwise should be a valid pointer, then it is still best to leave it as non-optional. and then when the argument would be ignored, pass `undefined`

1543345946
ducktype
i'm checking with strace to see that the unshare and mount commands in util-linux do

1543345961
ducktype
and aften nulls are passed along

1543345969
ducktype
there are many cases

1543345974
ducktype
i think

1543346003
andrewrk
if the only values that can be passed are valid pointers and sometimes the value is ignored, then undefined is your friend

1543346102
ducktype
i'm not sure how much the kernel ignores these args, and because i'm not getting the same result and unshare/mount commands i'm betting on this, i want to do exactly the same call they are doing

1543346127
ducktype
the same results AS unshare/mount commands

1543346147
andrewrk
in this case, I agree, these arguments should be optional

1543346198
andrewrk
I suggest to file an issue, or send a patch, and then in the meantime use a workaround of copy-pasting the function into your own project, and editing the signature

1543346229
ducktype
:)

1543346294
ducktype
var exec_argv = []const []const u8 {shell}; //exec_argvs becomes of type [1][]const u8

1543346323
ducktype
but i want exec_argv to be a "generic" [][] u8

1543346342
ducktype
it's good? how to do that? i'm confused

1543346624
andrewrk
it's an array and you want a slice, so you need to either slice it, or take the address of it

1543346670
andrewrk
const exec_argv: []const []const u8 = [][]const u8{shell};

1543346687
andrewrk
or if it's const you can implicit cast it like this

1543346732
ducktype
not const

1543346737
ducktype
var exec_argv =[][]u8{shell_path}[0..];

1543346784
andrewrk
are you sure it's not const?

1543346805
ducktype
i want to change it depending on some condition

1543346869
ducktype
var exec_argv = ([][]u8{"arg1"})[0..]; if(true) {  exec_argv = (try std.os.argsAlloc(allocator))[1..]; }

1543346926
ducktype
i want to initialize some default arguments, but if someone passed to my program something i will replace with my current args excluding the first

1543347099
ducktype


1543347163
ducktype


1543347165
ducktype
line 131

1543347184
ducktype
error: expected type '[][]u8', found '[]const []u8'

1543347218
jjido
you probably need to give the type before "="

1543347266
andrewrk
ducktype, the compiler is correct - you can't do that because it could modify const data

1543347311
andrewrk
probably here: var exec_argv = ([][]u8{shell_path})[0..];  // you want []const []u8

1543347329
andrewrk
oops

1543347368
andrewrk
var exec_argv: []const []u8 = [][]u8{shell_path};

1543347385
andrewrk
then the assignment later will work

1543347395
ducktype
ty yes

1543347397
ducktype
works

1543347405
andrewrk
does it make sense?

1543347452
andrewrk
there are 3 different memory locations that each have const or not. (1) the exec_argv varibale (2) the list of arguments (3) each argument

1543347464
ducktype
var exec_argv = ([]const []u8{shell_path})[0..];

1543347477
ducktype
i don't understad why this not work

1543347499
andrewrk
[]T{...} is syntax for an array literal

1543347511
andrewrk
[]const T{...} is nonsense; it should be a syntax error

1543347525
ducktype
clear

1543347543
andrewrk
maybe syntax for array literal, with inferred number of items, should look different, like this: [_]T{...}

1543347572
andrewrk
so that it looks different than a slice

1543347598
ducktype
yes is confusing

1543347624
ducktype
[]T{...} is syntax for an array literal so T in my case is []u8 ?

1543347630
andrewrk
yes

1543347638
ducktype
ty

1543347668
ducktype
could not be implicit T{}

1543347679
ducktype
there are already {} to indicate an array

1543347683
ducktype
literal

1543347694
ducktype
?

1543347990
andrewrk
ducktype, I created

1543354753
benjikun


1543355299
benjikun
don't know how I sent that, ignore it

