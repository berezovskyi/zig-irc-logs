1537149118
scientes
how do i pass around a reference to stdout that i can call .print on?

1537149272
scientes
I end up just using posixWrite cause I don't know how to use fmt

1537161155
tiehuis
scientes:

1537161187
scientes
also, you have to use write to print '{' or '}'

1537161202
scientes
oh wait, i can use {}, "{"

1537161231
tiehuis
you can escape them by repeating

1537161239
tiehuis
e.g. print("{{}}") will print "{}"

1537161244
scientes
oh ok

1537161295
scientes
i've got something like gperf brewing, but it has to generate code cause comptime doesn't cut it for complicated algorithms (like you can't std.sort.sort)

1537176744
j`ey


1537177377
j`ey
andrewrk: good place to include your comptime perfect hash:

1537190830
andrewrk
j`ey, ah right nice find

1537190839
andrewrk
it would be interesting to see how much this speeds it up

1537191000
j`ey
andrewrk: and it will be fun to see if there are other 'plans'

1537191940
andrewrk
agreed

1537193643
kristate
andrewrk: morning

1537193651
andrewrk
morning

1537198176
MajorLag
`error: expected enum or union, found 'u32'` `builtin.TypeId.Enum => return @sizeOf(@TagType(T)),`. Now I have to hunt down where something needs a `comptime` in front of it it keep the compiler from being stupid.

1537198425
MajorLag
How the hell can `switch(@typeId(T))` inside a comptime block ever fail this assert? `builtin.TypeId.Enum => debug.assert(@typeId(T) == builtin.TypeId.Enum),`

1537198517
andrewrk
hm I don't understand the code examples

1537198541
andrewrk
oh I see

1537198562
andrewrk
if that assert is failing it seems like a compiler bug to me

1537198701
MajorLag
I fear the circumstances under which it occurs may be too complicated to replicate in a minimal way. If so, I'll package up the related sources causing the problem for you.

1537198768
MajorLag
This just seems a lot like bugs we'd recently determined weren't actually bugs.

1537198799
MajorLag
but since this is happening in a comptime block and no amount of liberally sprinkling "comptime" around seems to be fixing it...

1537198822
andrewrk
I'm disturbed that zig has caused you to have to debug by sprinkling comptime around

1537198950
MajorLag
it's because it isn't always clear what will be considered runtime and what won't.

1537198999
MajorLag
I would think that any use of @typeId() or @typeOf() would be a comtime value, but experience has taught me otherwise.

1537199105
andrewrk
I don't think it's possible for the results of those to not be comptime

1537199116
andrewrk
they panic if zig tries to codegen them

1537199133
kristate
andrewrk: andrew, are you serious about u0?

1537199160
andrewrk
MajorLag,

1537199170
andrewrk
kristate, 100% serious

1537199182
kristate
what is the use case?

1537199209
kristate
I get 0-bit structs; I am not against 0-bit types

1537199212
andrewrk
the null hypothesis is that they're fine, so the burden of proof is on removing them

1537199214
kristate
but integers are another thing

1537199220
MajorLag
maybe they are comptime values, but when you pass a different type into the function they are in it seems like sometimes they still have the same value they had the last time you called the function..

1537199245
andrewrk
there's still an issue open for that right?

1537199262
MajorLag
I thought we'd determined they were all acting correctly?

1537199272
MajorLag
and it was just my reasoning that was wrong

1537199276
kristate
andrewrk: then why are they not implemented in llvm or in any other place if they are so great?

1537199327
andrewrk
MajorLag, hm I think we need to come up with a good example to discuss. or is this the same as that one issue I closed and we discussed briefly?

1537199449
andrewrk
kristate, I think you can make a better argument than an appeal what llvm is doing or what an unspecified other projects are doing

1537199463
andrewrk
llvm doesn't have the concept of 0 bit types at all, so of course there is no i0

1537199494
andrewrk
0 bit types is a slightly higher level abstraction than what LLVM provides

1537199520
andrewrk
kristate, are you not convinced by the math example?

1537199560
kristate
smallest unit is a bit, which represents 0 or 1

1537199571
kristate
there is no such thing as half a bit

1537199592
andrewrk
but there is such a thing as the absence of a bit

1537199592
j`ey
u0.5

1537199637
kristate
there is no spoon

1537200002
kristate
since we are riding on top of llvm, integers should be sacred and map 1:1 with LLVMIntType

1537200017
kristate
0-bit integers can be represented as void

1537200115
MajorLag
andrewrk, I don't know. I can't find a flaw with my reasoning here, but that doesn't mean there isn't one.

1537200254
andrewrk
kristate, 0 bit types are not represented at all in llvm. operations on 0 bit types are no-ops

1537200267
andrewrk
we don't code gen no-ops

1537200299
kristate
andrewrk: right, u0 doesn't make sense :-) there is nothing that you can do with it. its

1537200312
kristate
it's like your tail bone

1537200335
andrewrk
MajorLag, I need to do a better job communicating how it's supposed to work in some of these cases. I'm certainly interested in specific use cases where the way that it works causes you friction

1537200367
kristate
the definition of an integer in computer science is a range of mathematical integers. zero-to-zero is not a range

1537200395
andrewrk
the range of u8 is [0, 256). the range of u0 is [0, 1)

1537200411
kristate
u1 is [0,1]

1537200411
MajorLag
but as andrewrk points out in the issue, just because it is a nop doesn't mean it is useless.

1537200418
kristate
u0 is not a range

1537200421
andrewrk
u1 is [0, 2)

1537200429
andrewrk
the 2nd number is always pow(2, bit_count)

1537200521
MajorLag
andrewrk, I'll see if I can put together something that can be more easily looked at, but if not I'll send you the code that's currently causing me trouble.

1537200536
andrewrk
MajorLag, either one of those would be welcome

1537200593
andrewrk
MajorLag, I hope you're not running into this particularly nasty bug:

1537201216
MajorLag
I don't believe so, I'm only looking at types in the problematic code. No other comptime data is involved.

1537201222
MajorLag
well, comptime ints

1537201429
andrewrk
ok

1537201558
MajorLag
Ah, ok. Forget about this. It was my fault all along. Turns out I'd commented out another switch statement that had the line `builtin.typeId.Int,` before it. So the compiler was quite correctly branching where I told it to with `u32`.

1537201604
andrewrk
is your comment on #906 still a thing though?

1537201637
andrewrk
MajorLag, I don't blame you though - since we're before 1.0.0 there's always that little distrust of the compiler in the back of your head. sorry about that

1537201709
MajorLag
Yes, but I really should stop reactively blaming the compiler just because it's comptime and I ran into a ton of comptime bugs in the past.

1537201794
MajorLag
The comment on #906 is an example of the compiler working as expected given the description of the behavior. It is merely an example of the confusion that behavior can cause.

1537202057
MajorLag
when was that stdcallcc bug introduced btw? I've been waiting to get all my older projects up to date until 0.3.0, but that thread lead me to check if my game engine still worked and it is broken now. I'm not sure if that's because I added stdcallcc to the win32 package functions since I last tested or if that used to work.

1537202077
andrewrk
MajorLag, I don't know if you noticed but it is already fixed in master

1537202085
andrewrk
with a test case to prevent it from breaking again

1537202294
MajorLag
I haven't been keeping up with master because it CI was failing for so long. I'm out of the habit.

1537202336
andrewrk
my bad

1537202338
andrewrk
it's fixed now

1537202360
andrewrk
lots of bugs fixed recently too

1537202370
MajorLag
Sorry to have wasted your time with these non-issues today. I should refrain from reporting problems on monday morning I think.

1537202464
andrewrk
haha, no worries

1537202480
andrewrk
in general your bug reports have been immeasurably helpful

1537202491
andrewrk
I know it's annoying to pause your dev process and file a bug report

1537206854
kristate
wow dude

1537208575
kristate
andrewrk: I am not angry over here, more shocked than anything else. Would you like to give an explanation on why you rejected the issue instead of replying to me?

1537208620
andrewrk
let's talk in private. #zig is for technical discussion about zig

1537208638
kristate
andrewrk: isn't it a technical question?

1537208651
kristate
I am asking technically about u0 -- I have no personal beef with you

1537208726
andrewrk
if you want the discussion on #1530 to continue, you need to make more convincing arguments. your bob and jill example does not explain your thought process adequately, and you did not follow through enough on my response to that example

1537208772
andrewrk
you also have not addressed my point about how many states u0 has

1537208779
kristate
andrewrk: does that merit completely closing and rejecting the issue?

1537208870
andrewrk
kristate, I need you to focus on having a positive attitude and an open mind

1537208885
andrewrk
will you do that?

1537208918
kristate
andrewrk: Definitely positive, Andrew? I have been supporting you financially and the project with my time and resources. I have been flying all over Japan telling everyone about the wonders of zig

1537208932
kristate
but I want zig to succeed more than anything

1537208942
andrewrk
I know you do, and I appreciate what you have been doing

1537208956
andrewrk
but you still have to follow the proposal process

1537208973
kristate
andrewrk: I have been, but if you close the issue there is no process :-)

1537209041
andrewrk
ok, so let's try to get back on topic here. the less meta discussion, the better

1537209094
kristate
andrewrk: yes, I am pretty busy and I really care about zig

1537209102
andrewrk
kristate, let me lead the discussion a little bit. how many states does u1 have?

1537209122
kristate
2 states, 0 or 1

1537209136
andrewrk
right. and how about u0?

1537209152
kristate
1 state in theory

1537209165
andrewrk
according to your quote: information theory states that information that can be stored in a system is proportional to the logarithm of N possible states of that system, denoted logb(N) where b is the base.

1537209176
andrewrk
so for u0: N == 1, and logb(1) == 0

1537209185
andrewrk
however you thought it was logb(0), right?

1537209232
andrewrk
because you said > logb(N) is only defined for N>0. Thus, the logb(0) is undefined.

1537209239
kristate
andrewrk: right, but computers can only register in bits, or 2 states. there is no way to operate on a u0

1537209281
andrewrk
ok, so it would have helped if you had acknowledged that your comment in

1537209383
andrewrk
I would still like to hear that acknowledgment

1537209405
kristate
andrewrk: sorry if you felt I was ignoring you. I felt pretty bad when you rejected and closed the issue, too.

1537209454
kristate
andrewrk: that said, I really think that having u0 will lead to problems down the road, especially when used within structs.

1537209462
kristate
they are not required and should be removed.

1537209515
kristate
andrewrk: likewise, winksaville made a good point that upcasting from u0 to u1 is not possible

1537209537
andrewrk
that's a bug. all the bugs come from the same simple thing, that we need to have u0 be a comptime-known value of zero

1537209554
kristate
andrewrk: seems more like a hack at what end?

1537209564
kristate
andrewrk: what am I not getting?

1537209701
kristate
hey wink_

1537209703
andrewrk
kristate, here's what it comes down to. it's not my job to convince you that u0 should be allowed.  if you want it changed, it's your job to convince me that it shouldn't.  You have not convinced me. If you would like to continue trying to convince me, please comment on the issue, and you're going to need to prepare a strong case. I have an open mind, but you need to invest more time in your arguments

1537209750
kristate
andrewrk: isn't that backwards? we have to convince programmers all over the world to use zig. I want to know your reasons so that I can debate with you

1537209773
kristate
I also want to know your reasons so that if they are good, I can share them with others and spread the love

1537209780
wink_
kristate: q for me?

1537209819
kristate
wink_: what's your take on u0 -- trying to be objective about it and understand what is so great about having it

1537210176
wink_
It seems natural to me as long as it has well defined and unsurprising semantics. At the moment the most surprising semantic is the address of a u0 is null and yet the compiler appears to allow me to deference it.

1537210201
kristate
wink_: yes, this is because it is backed by a void llvm type

1537210215
kristate
I am for u0 being labeled as what it is, void

1537210259
wink_
Can you create a &void ?

1537210319
kristate
andrewrk ?

1537210426
wink_
var v:void = {}; assert(&v == null); // works

1537210836
wink_
var pV = &v; assert(pV.* == {}); // works

1537210887
j`ey
are you sure the derefence is actually emitted?

1537210894
j`ey
it might just replace the load with a void value

1537210973
wink_
I'm not sure of anything, but I'm guessing the compiler is seeing it all as comptime calculations and optimizing it away, but just guessing.

1537210988
j`ey
'When you store a u0, you know that there is only one possible value. So it takes up 0 bits of storage. It's brilliant, you don't actually store anything. When you load it, same thing. You know that there is only one value. So when you load it, you just know that the value is 0 and don't actually do any loading.'

1537211006
kristate
Yeah, this goes against one of the zen of zig: "Small, simple language. Focus on debugging your application rather than debugging your knowledge of your programming language."

1537211021
kristate
wink_ not being sure of anything is bad mojo

1537211286
andrewrk
wink_, there seems to be an unrelated bug with comparison against null: test "aoeu" { var x: i32 = 1; @compileLog(&x == null); }

1537211304
andrewrk
that should be a compile error

1537211340
j`ey
why?

1537211373
andrewrk
only optional pointers can be null. null comparison for this type does not make sense

1537211435
andrewrk
oh I know what's going on here

1537211476
andrewrk
hmm never mind. yeah this appears to be a bug

1537211479
wink_
hmmm so I shouldn't be able to do this: `var x: i32 = 1; assert(&x != null);`

1537211496
andrewrk
right

1537211511
andrewrk
unless you casted &x to ?*i32 first

1537211609
wink_
That seems overly strict, I like the current behavior :)

1537211617
andrewrk
do you have a use case for it?

1537211660
j`ey
I think it makes sense, no point checking for null if it cant ever be!

1537211675
andrewrk
right, it's probably an indication that the programmer made a mistake somewhere

1537211774
wink_
But what is the value of pZero: `var zero: u0; var pZero = &v;`

1537211831
andrewrk
it's a compile-time-only value, just like a pointer to an empty struct, a pointer to a void value, or a pointer to an enum with only 1 item

1537211832
kristate
wink_: did you mean to type `var zero: u0; var pZero = &zero;` ?

1537211852
wink_
yea, sorry

1537211865
andrewrk
there will never be any machine instructions to deal with zero or pZero

1537211879
kristate
so what is the use case for u0 ?

1537211892
j`ey
wink_: can you print pZero?

1537211899
wink_
andrewrk: so `assert(pZero == null)` is ok and I don't have to cast it?

1537211933
andrewrk
wink_, you can only test optional types for null. in your example pZero is not an optional type

1537211940
andrewrk
(well you can right now as you demonstrated, but it's a bug)

1537211994
wink_
And if I do cast it what will be the value of pZero, null I assume?

1537212007
wink_
And should I be able to deference it?

1537212091
andrewrk
the type ?*u0 in memory is represented as a bool which is whether or not it's null. you implicitly casted a T to a ?T so of course it will not be null

1537212136
andrewrk
dereferencing a *u0 always happens at compile-time and the value is always 0

1537212172
andrewrk
this is exactly the same as an enum with 1 tag

1537212247
kristate
yes, enum with one tag makes sense, since it's used inside of the binary and not serialized

1537212264
kristate
but, what is the use case for u0 ?

1537212399
andrewrk
I think you need to come up with a more complete example about how serialization is a problem. serialization works fine with 0 bit types

1537212423
kristate
andrewrk: so it is safe to assume that there is no use case for u0 ?

1537212446
kristate
Hejsil commented that he does not know of the use case

1537212524
wink_
Is `var zero: u0 = 0; var pZero = &zero;` correct code?

1537212554
andrewrk
wink_, yes that will work fine once I fix the bug

1537212641
wink_
It works for me now and I then can do `assert(pZero.* == 0);`

1537212675
andrewrk
kristate, what did you think about the use case that I pointed out in the issue?

1537212691
kristate
andrewrk: have a link?

1537212724
andrewrk
wink_, `pZero.* == 0` should always be comptime-known, but the bug is that it is not

1537212732
j`ey
wink_: can you print the value of pZero?

1537212751
andrewrk
I'm going to close IRC for a bit so I can stop talking about this and just actually fix it. back in a bit

1537212877
wink_
No and I can't print zero either `warn("zero={}\n", zero);` gives "error: compiler bug: var args can't handle void.

1537212903
j`ey
what error do you get for pZero?

1537212933
kristate
wink_: yeah, I filed a bug for that -- it's because it's backed by a llvm void type

1537212980
wink_
same one for pZero

1537213145
kristate


1537213152
wink_
Ok, I'm going to lunch will see what up afterwards.

1537213172
kristate
wink_: thanks

1537213218
rom1504
it's interesting to have a simple way to represent base 1

1537213256
kristate
rom1504: don't get me wrong, I think that the idea is interesting. it's just that having an integer type that is not storable is dangerous

1537213891
rom1504
I don't know enough about zig to have an opinion on that

1537213906
rom1504
however "it's not like you can use u0 for any sort of calculation" is wrong, you can compute anything in base 1

1537213974
j`ey
I guess you could have a list of u0s

1537214001
rom1504
I can imagine it could be useful for some theoritical stuff

1537214006
rom1504
yeah exactly

1537214064
j`ey
but you dont need u0 for that, an empty enum would be fine

1537214094
MajorLag
I can't see how it could possibly be dangerous. You mention serialization in the thread, but we know what we're reading and writing when we serialize, either because it's a known structure or because the format identifies its structure. Either way I have difficult seeing how a 0-bit type makes that more dangerous than it already is.

1537214150
rom1504
j`ey: yeah sure

1537221442
kristate
andrewrk: my u0 patch also included code for guarding against llvm's upper bound of (1<<24)-1 bits. I would appreciate if you could review it and merge it

1537221526
andrewrk
thanks kristate - I'll have a look

1537223147
j`ey
andrewrk: is the stream still 1700 estw?

1537223149
j`ey
-w

1537223169
andrewrk
j`ey, yes, Thursdays at 17:00 EST

1537223372
wink_
andrewrk: I see a commit for dereference *u0 are you done with u0 changes, I want to run the tests I have when you are?

1537223404
andrewrk
wink_, wait for 2 more commits

1537223412
wink_
sg

1537224107
andrewrk
ah I see what's happening with the null == thing. it's kind of amusing

1537224151
andrewrk
we explicitly omit comparing *T and null in the equality code. but then we resolve both sides of a == b with peer type resolution, which sees a null and a T, and concludes that the peer types should resolve to ?T. so it casts your *T to ?*T and then does == null, and of course it's not

1537224501
j`ey
I wouldnt think *T would implicitly cast to ?*T

1537224519
andrewrk
T implicitly casts to ?T

1537224559
andrewrk
it definitely makes sense. it's how you call C APIs since all C APIs have ? in their pointer types

1537224593
j`ey
oh wait, it's the other way around that doesnt make sense

1537224612
andrewrk
yeah there is no implicit cast the other way around

1537224652
andrewrk
wink_, after looking at it, I'm kind of on the fence about the behavior of the pointer comparing thing

1537225012
andrewrk
going to add the error though

1537225162
andrewrk
alright wink_, go nuts

1537225205
wink_
k

1537225430
kristate
that that the language is getting stronger

1537225448
kristate
looking forward to wink_'s tests

1537225466
kristate
*glad that the language is getting stronger

1537225982
wink_
So `assert(&zero == null);` now give a compiler "error: comparison against null can only be done with optionals", which is expected

1537226025
wink_
But `assert(@ptrCast(?*u0, &zero) == null);` crashes compiler is there some other way to cast &zero?

1537226089
andrewrk
it should say error: cannot pointer cast *u0 because it has no actual address

1537226100
andrewrk
this will cause the same crash for *void

1537226140
wink_
Here is the error:

1537226143
wink_
error: comparison against null can only be done with optionals

1537226158
wink_
assert(pZero == null);

1537226199
wink_
And then the "^" points at first "=" in "=="

1537226220
andrewrk
can you give me a full test case for the compiler crash?

1537226229
wink_
k

1537226259
andrewrk
nvm I got it

1537226268
wink_
k

1537226369
wink_
Should &zero == null with the proper pointer cast?

1537226429
andrewrk
no you can only get null by assigning null

1537226437
andrewrk
and you can only assign null to an optional

1537226474
andrewrk
that pointer cast should be a compile error. you can't cast a zero bit pointer to a non-zero-bit pointer

1537226982
wink_
Hmmm, this (

1537227698
andrewrk
wink_, I just pushed a commit

1537227706
wink_
k

1537227715
andrewrk
try your example with  assert(@ptrCast(?*u0, &zero) == null);

1537227763
andrewrk
your gist looks correct to me, and it passes

1537227807
andrewrk
to be clear: void / empty struct / enum with only 1 tag / 0 bit integer, these are not related to null in any way

1537227874
andrewrk
you can think of null like this:  fn Optional(comptime T: type) type { return union(enum) { Some: T, Null, }; }

1537227901
andrewrk
null is that second tag value there ^

1537227918
wink_
k

1537227999
wink_
Now the assert gives the `error: '*u0' and '?*u0' do not have the same in-memory representation`

1537228011
wink_
instead of crashing the compiler, nice :)

1537228105
andrewrk
yeah. trying to @ptrCast a *u0 to a ?*u0 is like trying to pointer cast a void to a bool

1537228130
andrewrk
there's no value there :) you can't make true or false out of it

1537228228
wink_
Also, `var z1 = @intCast(u1, zer0); assert(z1 == 0);` works

1537228277
andrewrk
yeah I fixed that one in cf9200b8

1537228299
wink_
can't format u0, bug #557 not yet fixed.

1537228309
wink_
(as I'm sure you know)

1537228328
andrewrk
yeah. that's a big change. that will be fixed by removing var args and adding tuples

1537228378
wink_
This works: `var pZero:

1537228399
andrewrk
you could even make that a comptime assert

1537228702
wink_
What is there address of zero 'var zero: u0 = 0`?

1537228731
wink_
What is the address ...

1537228742
wink_
gtg check back later.

