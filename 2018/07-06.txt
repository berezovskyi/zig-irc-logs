1530841757
stratact
andrewrk: does Zig have generic functions?

1530841782
andrewrk
stratact, yes. any function which has a comptime parameter

1530841804
stratact
thanks, I'll look into comptime

1530843977
stratact
andrewrk: I got a minor suggestion about the array syntax. Would it be possible to replace the use of curly braces around the items, with square brackets, cause square brackets just looks "nicer" in modern syntax

1530844039
stratact
unless it's for a C compatibility thing?

1530844095
andrewrk
stratact, that might be a natural consequence of when we add tuples

1530844108
andrewrk
keep an eye on

1530844467
stratact
andrewrk: I'm in agreement with what alexnask said in that issue

1530844485
andrewrk
noted

1530876855
unique_id
Hi. I've been here before under a different nic. Don't remember it. Anyways, I think it's time I start writing some code in zig :)

1530878485
unique_id
I find it really difficult to choose between a "better C" and a "better C++" (c++20 and onwards). Both are great choices.

1530878576
unique_id
though one comes with a life long learning curve while the other one forces me to learn casting again :)

1530879494
MajorLag2
You get used to the casting pretty quick. Thing about it is, you ask yourself: "is there a cost, or potential hazard, to casting between these types?" and if the answer is yes then it shouldn't be implicit. So it's worth re-learning I think.

1530880378
unique_id
Yeah I need a break from C++. I haven't had good experience with importing C headers so I'll do some manual translation instead.

1530881036
unique_id
How do I look at the code zig generates when importing c headers?

1530881083
unique_id
So I can learn the way c headers are translated

1530881458
unique_id
I could have sworn there was something, maybe some utility?

1530883550
MajorLag2
`zig translate-c file.c`. This will dump to stdout, so you may want to redirect.

1530888228
ltr__
can we currying with zig?

1530889954
andrewrk
ltr__, I don't think so

1530893344
GitHub130
[zig] andrewrk closed pull request #1195: Fix crash on assertion for enum switch values (master...switch-enum-fix)

1530893344
GitHub29
[zig] andrewrk pushed 4 new commits to master:

1530893345
GitHub29
zig/master 1a5bd88 Andrew Kelley: alternate implementation of previous commit...

1530893345
GitHub29
zig/master 9cff23d Isaac Hier: Fix assertion crash on enum switch values

1530893345
GitHub29
zig/master 9395162 Isaac Hier: Debug enum issue

1530896015
andrewrk
I'm confused. I just pushed changes to ziglang.org but it seems the css style sheet is not being applied to the HTML

1530896359
andrewrk
ok fixed. it was s3cmd using python-mime library which didn't get the correct value for css files

1530896383
darithorn
was just gonna say it wasn't loading any CSS for me then it all of a sudden was fixed

1530896398
darithorn
i like the new look :)

1530896542
andrewrk
thanks to r2453

1530896603
stratact
andrewrk: üëç

1530901275
Bas_
Hey hey, I recently found out about Zig and it looks really promising. Pretty much what I wanted from a language.

1530901286
andrewrk
hi Bas_

1530901333
Bas_
I was wondering if you guys have any equivalent to restrict in C. And all I could find about aliasing was this

1530901353
Bas_
Which also made me wonder why there is an exception for u8

1530901373
Bas_
I know it's the same in C/C++

1530901531
andrewrk
Bas_, yes, we have `noalias` which you can put in front of a parameter

1530901552
andrewrk
looks like it's not documented, so I made a note to myself to add those docs

1530901556
Bas_
Ah cool.

1530901570
andrewrk
see also

1530901697
Bas_
Nice, iirc Fortran does the same.

1530901833
Bas_
Another thing I couldn't really find an answer to was generics and how it handles custom types. For example if I want to print my custom struct, can I somehow make printf do that?

1530901886
andrewrk
ah good question, I don't remember if there is an issue open for that. zig's compile-time reflection is powerful enough to support printing custom types, plus I believe there is a plan to have std.fmt.format() call a custom formatting function if it exists. let me check

1530901929
andrewrk
ah yes, I believe MajorLag2 added this ability:

1530901960
andrewrk
Bas_, so if your custom type has a `format` method then you can use std.fmt.format() on it (std.fmt.format is used by all the formatted print functions such as std.debug.warn)

1530901977
Bas_
Ah alright.

1530902039
Bas_
Ah I see. I really like how you can just code stuff, instead of having to use arcane template magic or anything.

1530902085
andrewrk
I do think the comptime stuff came out quite nicely :)

1530902200
Bas_
Yes, it definitely looks good.

1530902213
Bas_
One other thing. Are there any plans for having multiple return values?

1530902443
andrewrk
Bas_, yes, that would be this issue:

1530902480
andrewrk
I don't think I mentioned it in the proposal but you'd be able to use `var a, var b = foo()` syntax to unpack a tuple return value

1530902504
Bas_
Awesome.

1530903052
andi3
new website style looks great !

1530903211
andi3
maybe this is stupid but is there any stdlib docs yet/ plans?

1530903727
andrewrk
plan is to implement that in the self hosted compiler

1530903736
andrewrk
which I'm working on full steam ahead

1530903756
andrewrk
potentially even the docs before any other kind of compilation

1530903850
stratact
andrewrk: you being the developer, I like how open you are to users suggestions, where not many folks from other languages aren't, so that's a plus for Zig imo

1530903899
andrewrk
I'm super open to the discussion but sadly I have to say "no" to a lot of ideas because one of the main selling points of zig is simplicity and lack of features

1530903920
stratact
yeah of course, I mean within suggestions to fit Zig's goals

1530904008
andi3
ok really good to hear

1530904057
andrewrk
my goal right now is to have the self hosted compiler watching all the source files - even for doc generation - and automatically recompiling

1530904081
andrewrk
so you would be able to edit docs in your editor, press save, and then refresh your browser and the docs would be updated

1530904123
stratact
sounds cool

1530904759
Bas_
Oh cool, you have a building build system!

1530904854
Hejsil
Curse you compiler bugs! I want this to work!

1530904855
Hejsil


1530904870
Hejsil
I think slice to void crashes the compiler

1530904938
MajorLag2
clever

1530904988
Hejsil
We don't need no "range" for

1530905093
Hejsil
It seems the compilerdoesn't like `for` on void slice

1530905102
Hejsil
This works though

1530905108
andrewrk
I'll have a look

1530905134
andrewrk
oh that's really clever

1530905146
andrewrk
i'll fix the bug

1530905147
Hejsil
Btw, FixedBufferAllocator is a great easy way to see how much something allocates

1530905175
andrewrk
yep

1530905183
andrewrk
did you see as well, std.debug.FailingAllocator?

1530905190
Hejsil
Yes i did

1530905191
andrewrk
to test your error handling

1530905204
Hejsil
Ye, I should probably do that to

1530905217
Hejsil
And the static build of Zig is great CI!

1530905244
andrewrk
oh nice! that makes sense

1530905289
andrewrk
Hejsil, did you see that I have a proof of concept of multiplexing coroutines onto a thread pool working?

1530905301
Hejsil
I did

1530905307
Hejsil
Exiting stuff

1530905309
andrewrk
unfortunately we can't tell how fast it is yet because there's an outstanding llvm bug that is forcing us to disable optimizations for async functions

1530905343
andrewrk


1530908594
GitHub152
[zig] andrewrk pushed 2 new commits to master:

1530908594
GitHub152
zig/master 1cf7511 Andrew Kelley: add compile error notes for where struct definitions are...

1530908594
GitHub152
zig/master 6d793c0 Andrew Kelley: langref: add more internal links

1530908977
stratact
So in Zig, are all types themselves except without pointers, copyable? Like there is no "move" in which you can't access the types again?

1530909014
stratact
*access the values

1530909304
andrewrk
I want to get to a place where we can say: "the only hidden memcpys occur at variable declarations", but we're not there yet

1530909333
andrewrk
but that's correct that there's no concept of "move" at the language level

1530909354
andrewrk
if you assign one struct to another, it does a memcpy

1530909367
stratact
Understood

1530909388
bodie_
just make rvalue references a thing :^)

1530909391
andrewrk
there is some more design work to do here though. I want to make certain things guaranteed to not copy

1530909419
andrewrk
for example I want to guarantee that returning a struct from a function, the adress of the struct in the body and at the callsite will be the same

1530909428
andrewrk
this is not currently the case

1530909500
stratact
That sounds really challenging, you'd probably have to allocate for that?

1530909581
stratact
oh wait, the function could be inlined?

1530909596
andrewrk
nope, for example one way we could do it is named return values, and the caller passes a pointer

1530909668
stratact
that sounds interesting

1530909820
stratact
oh okay, the concept came from Go:

1530909879
andrewrk
I actually didn't know this was possible

1530909924
andrewrk
the point of giving them a name is to make them addressable, so you can rely on field addresses being correct after the function returns

1530909965
stratact
That will be fantastic to have :)

1530910046
bodie_
I think named return values in Go are just sugar

1530910057
bodie_
for a var declaration

1530910088
bodie_
it is convenient for avoiding an extra line in certain very short lambdas and such

1530910947
Bas_
Isn't that pretty much how return value optimization works? Instead of (in C++) int foo(); it basically becomes void foo(int& return_value); and it assigns to the return value instead of returning it.

1530911078
andrewrk
Bas_, indeed, however it's not guaranteed in C or C++

1530911085
andrewrk
and what I want is for zig users to be able to rely on it semantically

1530911139
andi3
it actually is in c++17

1530911277
Bas_
I don't like this magic. And there are all kinds of rules. Just write it the second way to be sure ^^ no need to let smartass compilers figure it out for you.

1530911286
Bas_
(or not if you do it slightly wrong)

1530912288
Bas_
Is there a way to get a stack trace on windows? I get TodoSupportCoffDebugInfo =(

1530912360
andrewrk
Bas_, I'm afraid that's one of the high value big features that zig needs

1530912363
andrewrk
windows stack traces

1530912529
andrewrk
Hejsil, here you go, have your times() function

1530912535
GitHub98
zig/master 4ad4cd2 Andrew Kelley: fix iterating over a void slice...

1530912535
GitHub98
[zig] andrewrk pushed 1 new commit to master:

1530912548
Hejsil
Wuuh!

1530912568
stratact
Fast

1530912574
andrewrk
here's a more idiomatic times() implementation:

1530912677
andrewrk
an undefined void value. I wonder what it is??

1530912685
andrewrk
could it be... the only possible value that void can be?

1530912700
Bas_
haha

1530912963
Hejsil
Du we have some runtime checks in case i use an undefined void? :)

1530914174
Bas_
Can anyone explain the difference between these two? expected type '[*]align(8) u8', found '*[]align(8) u8'

1530914575
andrewrk
Bas_, do you have a small code example? I just changed the way that error message works

1530914607
andrewrk
oh, it took me a moment to see it

1530914624
andrewrk
the first is an unknown length pointer to u8

1530914629
andrewrk
the second is a pointer to a slice of u8

1530914649
andrewrk
Bas_, try b.ptr

1530914684
andrewrk
if you looked at a memory diagram of those, the first would have 1 arrow, the 2nd would would have 2 arrows

1530914745
Bas_
thanks, that worked.

1530914770
Bas_
I see

1530915824
Bas_
So I only have two things I'm not happy about. The sublime text syntax doesn't understand how to find functions or toggle comments and I've no stacktrace. ^^

1530915910
GitHub26
[zig] andrewrk pushed 1 new commit to master:

1530915911
GitHub26
zig/master e19f0b5 Andrew Kelley: remove outdated semantic analysis documentation

1530915930
andrewrk
afk, back in a few hours

1530917157
Bas_
Great, I ported my hashing algorithm without too much trouble.

1530917177
Bas_
I'll try around a bit more this weekend. :)

1530920805
MajorLag2
Windows traces are a constant thorn in my side. I've done a lot of warn() debugging. Sadly, it's kind of a difficult issue since Microsoft only distributes the DIA dll with VS and BuildTools, meaning zig can't rely on its presence and can't include it, so the only option seems to be reading the pdb ourselves.

