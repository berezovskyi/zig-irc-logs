1527207026
andrewrk
t5c, I did some research. I know how to implement __guard_local

1527207048
andrewrk
it's actually an extern variable that needs to be in the ".openbsd.randomdata" section

1527207064
andrewrk
and that's it

1527207131
andrewrk
extern var __guard_local: c_long section(".openbsd.randomdata");

1527207187
andrewrk
comptime { if (builtin.os == builtin.Os.openbsd) @export("__guard_local", __guard_local, builtin.GlobalLinkage.Strong);

1527207280
andrewrk
put that in std/special/builtin.zig and do a build-exe. this will generate foo.o builtin.o compiler_rt.o

1527207306
andrewrk
link those together and you should have no missing symbols

1527210028
GitHub14
[zig] andrewrk pushed 3 new commits to master:

1527210029
GitHub14
zig/master af7073b Andrew Kelley: Merge branch 'BraedonWooding-patch-3'

1527210029
GitHub14
zig/master fa5b0ef Andrew Kelley: doc fixups

1527210029
GitHub14
zig/master 938d791 braedonww@gmail.com: Added argtype and error inferring info

1527210059
GitHub109
[zig] andrewrk closed pull request #1014: [Documentation] Add Error Union Documentation and ArgType (master...patch-3)

1527211733
GitHub183
[zig] andrewrk pushed 1 new commit to master:

1527211733
GitHub183
zig/master 4308541 Andrew Kelley: update github.com/zig-lang to github.com/ziglang

1527213174
GitHub162
[zig] andrewrk pushed 1 new commit to master:

1527213174
GitHub162
zig/master b74dda3 Andrew Kelley: std.zig.tokenizer: support hex escape in char literals

1527223146
GitHub105
[zig] andrewrk pushed 1 new commit to master:

1527223146
GitHub105
zig/master e6afea9 Andrew Kelley: zig fmt: support aligned ptr with bit fields

1527223236
GitHub177
[zig] andrewrk pushed 1 new commit to master:

1527223236
GitHub177
zig/master ca49b6f Andrew Kelley: struct fields with no explicit type are not supported...

1527224692
GitHub85
[zig] andrewrk pushed 1 new commit to master:

1527224693
GitHub85
zig/master dfc3e11 Andrew Kelley: zig fmt: fix handling of comments at top of file

1527227638
GitHub130
[zig] andrewrk pushed 3 new commits to master:

1527227639
GitHub130
zig/master 000c01a Andrew Kelley: zig fmt: handle missing trailing comma in array literals

1527227639
GitHub130
zig/master 3f302f8 Andrew Kelley: handle more cases of inserting trailing commas

1527227639
GitHub130
zig/master 08f95d0 Andrew Kelley: enum fields with a type are not supported...

1527228585
GitHub161
[zig] andrewrk pushed 1 new commit to master:

1527228586
GitHub161
zig/master 56cb7f1 Andrew Kelley: update json_test to be compliant with zig source encoding...

1527229241
GitHub53
[zig] andrewrk pushed 1 new commit to master:

1527229241
GitHub53
zig/master a630d3e Andrew Kelley: zig fmt: fix rendering of align keyword of slice type

1527229555
Hejsil
andrewrk, we probably want a lot of these parser fixes on the zig-fmt-pointer-reform branch too :)

1527229601
Hejsil
Because that branch cant parse the randomizer

1527230127
andrewrk
Hejsil, good point. the actual commit that changes prefix -> postfix is small, I might just branch off master and make that commit against it

1527230286
Hejsil
Seeing my git diff explode is horrifying

1527230335
Hejsil
Though most format changes do look alot better than my original format

1527230413
andrewrk
I'm going to bed. Talk to you later

1527231461
donpdonp
c.pthread_create(&thread, null, net_go => error: expected type '?extern fn(?&c_void) ?&c_void', found 'fn(?&c_void) ?&c_void'

1527231488
donpdonp
so I want to define net_go myself in the zig code. how do I satisfy the pthread_create param?

1527231502
donpdonp
(the only diff in the signatures is extern)

1527231539
donpdonp
extern fn net_go(url_cstr: ?&c_void) ?&c_void  does work, but im not really sure if thats correct to do.

1527231560
donpdonp
in other news, how do I get that c_void ptr back into a string?

1527231584
donpdonp
var url = @ptrCast(&[]const u8, url_cstr); => error: cast increases pointer alignment / '?&c_void' has alignment 1 / '&[]const u8' has alignment 8

1527231615
donpdonp
which is some nice error detail but i never had to think about c string alignment before.

1527231968
donpdonp
apparently i was trying too hard.   var url = @ptrCast(&u8, url_cstr); works.

1527231995
donpdonp
its a point to a single u8, but hey go head and read any number of u8's after that one :)

1527233148
Hejsil
I think defining net_go as extern is correct

1527233170
Hejsil
That ensures C calling convention, which is what pthread probably wants :)

1527233637
donpdonp
Hejsil: nod. thx.

1527235889
donpdonp
deps/SoftFloat-3e/source/8086/s_commonNaNToF128M.c.o

1527235914
donpdonp
saw that .o fly by during make. 8086 float emulation or some such? zounds.

1527236954
t5c
andrewrk: compiling the echo world example works. running it give a segfault. I did horrible things to link.cpp but it does compile now...

1527237100
t5c
can't really debug the binary because OpenBSDs gdb is too old it seems

1527237118
t5c


1527237710
t5c
ok, debugging works. segfaulting at _thread_finalize();

1527242103
t5c
andrewrk:

1527242138
t5c
analyze.cpp and link.cpp

1527261536
andrewrk
t5c, can I see your output for --verbose-link ?

1527261821
andrewrk
t5c, looks like you commented out some of the libc start objects. that's probably the cause of the segfault

1527261829
andrewrk
libc depends on a bunch of .o files

1527263874
Hejsil
Now that we have @typeInfo, I would assume that a lot of builtins goes away, correct?

1527263874
t5c
andrewrk: lld --gc-sections -m elf_x86_64 -o foo /usr/bin/../lib/crtbegin.o -L /usr/bin/../lib -L /usr/bin/../lib -dynamic-linker /lib64/ld-linux-x86-64.so.2 ./zig-cache/foo.o -L /usr/local/lib --as-needed --no-as-needed -lc -lm --as-needed --no-as-needed /usr/bin/../lib/crtend.o

1527264126
andrewrk
Hejsil, correct

1527264155
Hejsil
Right, I already started the effort on the std-meta branch

1527264170
Hejsil
The real question is, if we even want a ArgType fn in there

1527264183
andrewrk
why's that?

1527264199
Hejsil
Idk

1527264223
Hejsil
We could write a lot of convenience functions like that then

1527264243
Hejsil
And ArgType is just @typeInfo(T).Fn.args[0].type

1527264273
Hejsil
Actually, the real question is

1527264289
Hejsil
Do we want things like FieldType, fieldName, ArgType

1527264298
Hejsil
All those pretty trivial function

1527264300
andrewrk
in std.meta? or as builtins?

1527264306
Hejsil
std.meta

1527264316
Hejsil
I assume @ArgType goes away

1527264318
andrewrk
I see, idea being that they don't really save that much typing

1527264324
Hejsil
True

1527264337
Hejsil
tagName, maxValue, minValue do save some lines

1527264340
andrewrk
I don't have a strong opinion on this

1527264398
Hejsil
Hmm. Well, it's not a high priority anyways. And my tagName impl only works well when we have "pass structs by value"

1527264563
andrewrk
that issue is next in line after pointer reform

1527264589
Hejsil
Hurray!

1527264614
andrewrk
also I have a surprise announcement to make later today

1527264638
Hejsil
Surprise?

1527264651
Hejsil
Hmmm

1527264741
Hejsil
Looking forward to it. I can't quite imagine what it might be. I guess it truly is a surprise

1527265201
andrewrk
:)

1527271703
andrewrk
t5c, do you have an openbsd box you would be willing to add to a buildbot cluster for CI testing?

1527274210
darithorn
are there any plans on supporting recursive structs from C?

1527275683
t5c
andrewrk: I could set one up and give you full access. Small VPS should be enough I think?

1527275754
andrewrk
t5c, that would be lovely

1527275779
andrewrk
darithorn, a struct that has a pointer to itself? does that not already work?

1527275873
t5c
andrewrk: canada or france prefered?

1527275879
t5c
dunno where you are located

1527275884
darithorn
apparently not because it says @cImport generated invalid zig code and then it has a note 'foo_struct' depends on itself

1527276650
andrewrk
t5c, canada

1527276664
andrewrk
darithorn, that's a bug. something went wrong

1527276708
darithorn
yeah i'm trying to see if i can narrow it down

1527277802
t5c
andrewrk: dunno, I like the Go approach to static binaries. but since openbsd stay stable for at least one release it should be fine

1527278165
darithorn
andrewrk: it's happens when they forward declare the struct using a typedef

1527280393
andrewrk
t5c, that's an option

1527280447
andrewrk
darithorn, that looks correct

1527280465
andrewrk
I fixed a bug like this recently. are you using a master branch build?

1527280513
andrewrk


1527280595
darithorn
hm, it's been a few days since i've updated, let me pull and rebuild and see if that fixes it

1527280806
andrewrk
t5c, to be clear I prefer fully static builds as well. I just want to respect the official ABI as specified by the operating system

1527280837
t5c
yeah no worries ;)

1527280871
t5c
btw. to clarify the openbsd thing: openbsd-6.3 stays stable (API and ABI), openbsd-current does not.

1527281485
darithorn
andrewrk it doesn't fix it. it fails with the same error saying "`foo` depends on itself", which is defined as "const foo = struct_foo;"

1527281580
darithorn
it passes the translate_c test but if you try to compile the code that it generates it fails

1527283518
andrewrk
darithorn, oh, interesting. Alright I'll take a look

1527285133
darithorn
is there a way to turn a const fn pointer to a non-const fn pointer?

1527285200
darithorn
i need to give a C struct a function pointer but the type of &myFunc is &const extern fn(...)

