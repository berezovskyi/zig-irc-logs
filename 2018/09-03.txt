1535933472
MajorLag
<3

1535933512
andrewrk
MajorLag, can you confirm that it works for you in your setup?

1535933528
andrewrk
there might be a couple easily fixable issues

1535933578
MajorLag
Sure, let me see what I can find

1535933735
MajorLag
Gotta wait for the Artifact though.

1535933774
andrewrk
oh yeah. I hope it finishes in time

1535933805
andrewrk
part of my motivation for #1416 is to make the CI runs faster

1535933870
MajorLag
Yeah, I saw the discussion about hitting the limit

1535934228
andrewrk
I think we got lucky

1535934233
andrewrk
it just finished

1535934800
MajorLag
hmm... it doesn't always seem to be pointing to the correct lines.

1535934859
MajorLag


1535934874
andrewrk
like, way off? or +1 line?

1535934902
MajorLag


1535934906
MajorLag
Let me check

1535934932
andrewrk
oh nice! I didn't remember that you got png lib done

1535935016
MajorLag
It's usable but the code is in a sorry state.

1535935154
MajorLag
I'm working on it, along with some other tooling. I'm using it as a tesbed for the other tooling actually, because it exposes the pain points in the API when I start incorperating it. Anyways...

1535935231
MajorLag
Sorry, I'm not at home and there's a lot of latency on this RDP session. This will be a minute

1535935253
andrewrk
MajorLag, oh, this is an error return trace

1535935271
andrewrk
so it's showing you all the places that error.InvalidDistance was returned from a function

1535935299
andrewrk
I would expect the carot to point at the try's and return's

1535935313
andrewrk
sometimes I noticed it points at the next line

1535935336
MajorLag
The second link is a failed assert

1535935372
MajorLag
It looks like it is off in debug/index.zig by a line or two, but the next line reported is off by about 8

1535935440
andrewrk
hmmmm

1535935513
andrewrk
I'm reproducing it and will investigate. thanks!

1535989526
kristate
andrewrk is working hard -- good to see the forward progress

1535989634
kristate
spoke to a room full of young jp programmers about zig -- I have been going around the country lately trying to get more people interested in zig

1535989910
scientes
cool! If I patched the linux kernel adding a futex2() that works on byte-sized arguments there would only be a need for something like WTF::ParkingLot on non-Linux platforms

1535989962
scientes
probably think about that later however, #1363 and #1457 for now

1535991678
scientes
kristate, get some sleep :)

1535991972
scientes
I wish i could see async, cancel, ans suspend in zig, instead of in compiler-speak

1535991997
scientes
*await

1535992009
andrewrk
me too

1535992039
scientes
even the self-hosted compiler will have that problem

1536000761
hooo
we need automated docs from the std library

1536001296
scientes
hooo, do it!

1536001618
hooo
scientes: the problem is that the functions themselves arent really commented

1536001651
hooo
I think there should be a convention inside the std library that each function has a unit test to show basic usage and then I could include those in an std library documentation

1536001675
hooo
because right now it's hard to figure out how to do anything, how to split a string, how to open a file, how to [xyz]

1536001698
scientes
if you know how to do it in C you can usually figure it out

1536001708
scientes
but yeah needs lots of docs

1536001760
DutchGh0st
is this function safe?:

1536001763
DutchGh0st
pub fn itern(comptime size: usize) [size]void {     return undefined; }

1536001777
DutchGh0st
since it's void's anyway

1536003423
scientes
the llvm docs are not clear that a co-routine reading on a promise can be destroyed

1536003528
scientes
i don't think there is any need for that however

1536004656
dbandstra
is there an issue for removing the implicit cast from `T` to `*const T` ?

1536004663
dbandstra
i saw it mentioned here

1536004695
dbandstra
that cast is pretty evil

1536005800
scientes
reading the llvm co-routine docs I feel like promises wern't ever designed to work between threads, as that would require llvm creating calls to futex() and equilivent

1536005926
scientes
but if llvm can do that, then its designed to be optimized in a way go-routines cannot

1536015060
andrewrk
dbandstra, I'll make an issue for it

1536015286
andrewrk


1536016113
andrewrk
scientes, llvm coroutines are just function calls

1536016130
andrewrk
suspend is return; resume is function call

1536016147
andrewrk
await is zig's concept

1536016152
scientes
but what about reading from a promise

1536016159
andrewrk
it's just a struct

1536016210
andrewrk
the coroutine function reads/writes from memory that it allocates for itself (the coroutine frame) and you can put other stuff in there too. it's just memory that has the same lifetime as the coroutine

1536016222
scientes
if the promise is being fufilled from another thread you have to use futex()

1536016242
andrewrk
not true - zig has lock-free thread-safe async/await

1536016255
scientes
otherwise you will spin waiting for the other thread

1536016261
andrewrk
that's not how it works

1536016280
andrewrk
await suspends itself, and puts its own handle in the frame of the target

1536016303
andrewrk
when the target returns, it sees if someone put a handle in it, if they did it resumes them with a tail call after destroying itself

1536016322
andrewrk
otherwise it suspends, and doesn't destroy itself until the await happens

1536016349
scientes
but when await suspends where does execution go?

1536016376
scientes
(if it doesn't block on futex_wait())?

1536016376
andrewrk
same place execution goes if you do suspend - either to the function which called async or the function which called resume

1536016402
andrewrk
when you async, the function immediately executes - like a function call - and control flow returns at the first suspend point, which is either suspend or await

1536016501
andrewrk
futexes are only needed for the thread-safe queue that std.event.Loop uses

1536016519
andrewrk
zig coroutines have no OS dependencies - they can be used in OS programming

1536016568
andrewrk
scientes, oh, are you talking about the fact that threads sharing memory must use mutexes?

1536016598
scientes
when you multiplex co-routines onto threads

1536016607
scientes
thats what i'm getting confused about

1536016645
andrewrk
i'm happy to explain more, what part are you confused about?

1536016685
scientes
i think i understand await better now, should i still generally assume co-routines are running concurrently (even when they arn't)

1536016709
andrewrk
I think the zig std lib should generally assume that

1536016831
scientes
so the allocator is for the stack of the co-routine?

1536016903
scientes
and do you see the race condition that cancel with the is_cancelled bit gets us into when we use co-routines in a multi-threaded context?

1536016987
scientes
where you have an event that needs to be handled and cant

1536017130
andrewrk
yes the allocator is for the stack

1536017177
andrewrk
I think I mentioned this race condition here:

1536017261
scientes
the way to fix it is to make co-routines simpler, not more complicated

1536017269
scientes
and handle the rest of it in user-space as i described

1536017292
scientes


1536017404
andrewrk
scientes, I don't think your understanding of the situation is accurate

1536017417
andrewrk
every coroutine destroys itself

1536017443
scientes
with the final suspend

1536017474
scientes
but thats not how the llvm docs describe it:

1536017608
scientes
i think i am thinking too much of threads, I get threads

1536017656
scientes
see, the caller calls destroy, not the co-routine

1536017671
andrewrk
it doesn't matter who calls it

1536017693
scientes
ok

1536017704
andrewrk
it just has to be at a suspend point

1536017731
andrewrk
this stuff is really tricky to understand

1536017739
andrewrk
even when I'm working on it I spend hours just reminding myself how it works

1536017778
scientes
and if a co-routine returns without calling suspend, it does a final suspend?

1536017807
scientes
(and then destroys itsself)

1536017828
andrewrk
first it does an atomic xchg with the coroutine handle in its own frame

1536017837
andrewrk
the other half of the atomic xchg is await

1536017850
andrewrk
if the await got in first, then the return destroys itself then tail resumes the awaiter

1536017869
andrewrk
if the return got in first, it goes to final suspend, and then the awaiter grabs the return value and then destroys the coroutine

1536017887
andrewrk
however now there's even another atomic xchg it does having to do with cancel

1536017906
scientes
so can we just get rid of `cancel` without replacing it with anything?

1536017911
andrewrk
which is going to have to change, as described by 1363

1536017929
scientes
and make that the suspender's responsibility?

1536017961
andrewrk
so what happens if you async, but then don't await

1536017990
andrewrk
it's a leak

1536018012
andrewrk
or what happens if you suspend, but then you decide not to resume it?

1536018017
andrewrk
same thing

1536018052
scientes
then i proposed a suspendnotfinal, but that requires looking at the promise bits to know if is_cancelled is set, which is UGLY

1536018069
andrewrk
what problem are you trying to solve? I think my proposal is sound

1536018086
andrewrk
oh let me read your comment:

1536018617
andrewrk
I'm reading this issue again and I don't even see the problem that I wrote

1536018642
andrewrk
it can't be in the epoll set and executing at the same time

1536018696
scientes
why not?

1536018731
andrewrk
it suspends and then puts itself in the set. so if it's in the set then it's suspended

1536018747
andrewrk
the proposal is still necessary, I just need a better example

