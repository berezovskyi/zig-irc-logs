1525224219
GitHub129
[zig] alexnask opened pull request #972: Fixed inlining determination test (master...nested_func_comptime)

1525241982
GitHub83
[zig] tiehuis opened pull request #973: Add json decoder (master...json-decoder)

1525262824
alexnask_
It's so nice to see so many and regular PRs

1525268764
andrewrk
indeed!

1525268770
andrewrk
I'll have some time this evening to go through them

1525269868
GitHub160
[zig] andrewrk pushed 1 new commit to master:

1525269868
GitHub160
zig/master 86a428a Andrew Kelley: windows threading: add missing call to CloseHandle

1525277367
bodie_
Can you use valgrind on zig programs?

1525277531
Hejsil
bobie_, Ye

1525277543
Hejsil


1525277837
bodie_
Can you compose structs with anonymous members like in Go?

1525277862
andrewrk
bodie_, there's a bug in valgrind right now that makes debug symbols not work for zig programs (as well as clang + lld programs), but there's a command line option for zig you can use as a workaround

1525277871
andrewrk
--no-rosegment

1525277872
bodie_
nice

1525277882
andrewrk


1525277910
bodie_
I love the Go type composition pattern

1525277914
bodie_
especially around interfaces

1525277916
andrewrk
can you give source example?

1525277921
bodie_
hmm

1525277998
Hejsil
Isn'

1525278025
Hejsil
t that something like this: struct Some { (Other); ... }

1525278036
Hejsil
Basicly you get all the fields of Other in Some

1525278045
Hejsil
And can pass Some to functions taking Other

1525278102
bodie_
yes

1525278109
bodie_
not the last bit

1525278114
bodie_
that is interfaces

1525278130
Hejsil
Ye sure?

1525278139
bodie_
Haha, yes.

1525278140
Hejsil
Because, why shouldn't that work

1525278145
Hejsil
:)

1525278146
bodie_
Because Some is not an Other.

1525278171
Hejsil
But it has the a part of it which is the same memory layout

1525278172
bodie_
If Other implements interface I, then so does Some, so you could pass Some to f(some I) and it would work, because it would construct an I containing the Some at that time.

1525278200
Hejsil
I don't know enough Go

1525278211
bodie_
it's not hard to learn and definitely fun to use!

1525278212
Hejsil
I would just assume you could pass Some to Other

1525278222
Hejsil
Gee, I'll stay with Zig

1525278251
Hejsil
Tried Rust, Go, D, C++ and Nim when scouting for a new systems langauge :)

1525278275
Hejsil
Zig just feels right, where the others failed for me in some aspect

1525278333
Hejsil
Like, in Go. Comments can have semantics

1525278375
Hejsil
Which is a no go for me. Comment's don't have semantics!

1525278454
andrewrk
Hejsil, what turned you away from rust?

1525278455
bodie_
andrewrk:

1525278482
Hejsil
andrewrk, It's just too complicated

1525278489
Hejsil
Rust is super cool, but man

1525278492
Hejsil
Soo much stuff

1525278501
bodie_
Rust tries to do better than C++, but it is almost less usable than C++ sadly.

1525278507
andrewrk
that's the same conclusion I came to

1525278511
bodie_
You really need to work with the type system.

1525278514
andrewrk
I respect the project a lot

1525278521
bodie_
And it's also not actually all that safe.

1525278530
bodie_
Proof-driven Rust would be a lot cooler

1525278532
andrewrk
why not?

1525278607
walac
funny, just scrapping the Rust docs I came to the same conclusion "Jesus, another C++ bloat, thanks"

1525278617
alexnask
I thought using unsafe blocks is relatively rare for packages that are not really low level?

1525278618
andrewrk
bodie_, oh, you're talking about go interfaces

1525278631
bodie_
andrewrk, well, that example isn't supposed to demonstrate interfaces...

1525278635
bodie_
but it happens to

1525278646
alexnask
Ah, right, thought you were talking about rust too :P

1525278650
andrewrk
bodie_, what is it demonstrating?

1525278668
bodie_
andrewrk, it demonstrates making a type that contains an anonymous type as a field

1525278682
andrewrk
oh I see it - io.Writer

1525278697
alexnask
This is similar to Jai's using

1525278711
andrewrk
I didn't even know go had this feature and I've been using it at work

1525278718
Hejsil
Lol

1525278718
bodie_
it's kind of a kludgy example though because I renamed Write

1525278721
alexnask
Were you can basically have a using foo: Foo in a struct then you can access foo'

1525278728
alexnask
foo's fields directly with dot access

1525278731
bodie_
yes

1525278747
bodie_
it's a convenient and better substitute for the way people usually use inheritance

1525278761
bodie_
easily lets you compose a type out of 5 other types if you want to be dumb like that

1525278779
andrewrk
besides namespacing, is this any different than having io.Writer be a named field inside wc ?

1525278779
koomi
bodie_: I think exactly that sort of method overwriting is super nice

1525278796
alexnask
@andrewrk I'm not 100% sure in Go, but I don't think so

1525278798
koomi
you can easily add some functionality like timouts around any Writer or whatever

1525278800
bodie_
no, it actually is a named field, which has its own name

1525278806
bodie_
I mean its own type name as its named

1525278808
bodie_
name.  dammit

1525278818
andrewrk
ok yeah I've thought about this - I think having a name feels more annoying when you're writing code

1525278822
andrewrk
but it's much nicer when reading code

1525278851
koomi
well you can call io.Writer methods on your type

1525278860
bodie_
one thing I've noticed in Go is that certain implicit links between types can cause it to be hard to reason about behaviors

1525278872
koomi
and your type implements all the interfaces of embedded types

1525278876
bodie_
for example the fact that interfaces use duck typing means you need static analysis to know why something is calling Write or how it works

1525278882
koomi
so that's a big advantage to having at as a normal named field

1525278892
andrewrk
you could call io.Writer methods if it had a name:  wc.writer.Write

1525278912
bodie_
yes, in the example you can see it calls by name in the Write "overload"

1525278914
alexnask
Basically you can implicitely cast to the embedded type right?

1525278920
koomi
yes

1525278933
bodie_
not exactly alexnask.  the static types don't match, but that's typically where interfaces come in

1525278941
bodie_
e.g. you can pass the wc to fmt.Fprintf

1525278951
alexnask
right, because Fprintf expects an io.Writer

1525278956
andrewrk
I think this is equivalent to having the field have a name, except syntactically you can omit the field name in various places

1525278957
alexnask
but that only works with interfaces?

1525278963
bodie_
what do you use Go for at work?

1525279007
andrewrk
slowly migrating a monolithic c++ website to use Service Oriented Architecture

1525279014
bodie_
In many ways Zig looks like what I would prefer from Go where it really irritates me sometimes

1525279025
alexnask
can you do struct Foo { int } and then add methods to Foo and have it behave like an int wherever it needs to?

1525279030
bodie_
I've been using Go for 5 years now and I'm getting pretty bored lol

1525279090
andrewrk
getting bored of a language actually kinda seems like a complement to the language to me

1525279098
bodie_
alexnask, correct

1525279102
bodie_
um

1525279104
andrewrk
I will never be bored of C++, I will continue to be frustrated by it every day I have to use it

1525279104
bodie_
not quite on builtins

1525279115
bodie_
sorry "yes" was a reply to "that only works with interfaces"

1525279121
alexnask
@odie_ Gotchab

1525279121
bodie_
because Foo isn't Bar, even if they're both Writer

1525279144
bodie_
sorry neither Foo nor Bar "are" Writer but they implement its methods so a Writer may be constructed using either of Foo or Bar.

1525279199
bodie_
I was trying to come up with a tiny language to implement generic types for Go and it is

1525279228
bodie_
comptime is sweet af

1525279235
alexnask
yeah

1525279256
Hejsil
comptime is the best way to crash the compiler :)

1525279259
bodie_
lol

1525279262
andrewrk
lol

1525279268
andrewrk
I hope that will not be true forever

1525279280
bodie_
how hard is it to build master zig on windows?

1525279290
andrewrk
bodie_,  there are step by step instructions in the wiki

1525279295
bodie_
"master zig" sounds like some zen robot guru from the Mega Man universe lol

1525279330
Hejsil
andrewrk, well comptime is just evaluating Zig ir, and that's probably always be one of the biggest parts of the compiler

1525279366
bodie_
andrewrk, regarding C++ frustration, I agree, but it is boring in the way that it would be boring to have to draw with crayons for work every day

1525279423
bodie_
alexnask, regarding your int question, you would do that by aliasing int, type Foo int

1525279440
bodie_
I'm not trying to get too into Go conversation here though lol just curious about anonymous composition

1525279456
alexnask
Right, was just curiouus how Go handled it exactly

1525279462
andrewrk
bodie_, I see what you mean, that's a fair way to put it

1525279489
andrewrk
Hejsil, we'll get there. It's a finite set of bugs

1525279518
Hejsil
:)

1525279528
alexnask
@andrewrk Is comptime @ptrCast, @ptrToInt, @intToPtr support planned?

1525279535
alexnask
It sounds pretty much impossible to do

1525279562
koomi
one more thing re. embedded types in go: it's different from having a named field in that the embedding type inherits the interface implementations

1525279570
koomi
you could of course write wrappers for all the methods

1525279617
koomi
but with struct embedding you can easily extend other types with a constant amount of work

1525279703
bodie_
it is really convenient for separation of concerns to compose a bigger type out of anonymous interfaces

1525279722
koomi
yeah

1525279757
koomi
it's a neat way to get some inheritance-style composition without all the object-ortientation blabber

1525279767
bodie_
I've been moving more towards value types and just using packages for namespacing what would have been methods though

1525279794
bodie_
I think a lot of OOP is just trying to solve namespaces

1525279845
bodie_
then your "bigger type" is more like a function that calls package funcs on locally scoped values

1525279858
bodie_
you don't need many interfaces that way either

1525279884
bodie_
types with big method sets are evil

1525279892
bodie_
the AWS api package is truly godawful

1525279958
bodie_
sorry for dragging this so offtopic andrewrk :P

1525279959
koomi
haven't used the aws api but generally I think I agree

1525279965
koomi
getting back to zig

1525279975
koomi
has someone used the kvm api from zig yet?

1525280316
koomi
I think it would make a good test case for dealing with systemsy C APIs

1525280453
koomi
lots of ioctls, lots of passing memory around, a memory-mapped fd containing a struct with a union

1525280561
Hejsil
Uuuh! This is valid: @field(error, "SomeString")

1525280567
Hejsil
Time to generate error sets

1525280604
alexnask
lol

1525280606
alexnask
Nice

1525280619
alexnask
And I was actually wondering if it were possible earnlier

1525280759
andrewrk
alexnask, @ptrToInt and @intToPtr will never work at comptime. @ptrCast can work sometimes

1525280787
andrewrk
e.g. if your pointer is to comptime memory, we could make that work

1525280816
alexnask
Right I can see how it could work for integer, floating point types

1525280827
Hejsil
I think I found a bug

1525280829
alexnask
It would be impossible for structs right?

1525280847
Hejsil


1525280857
Hejsil
This should not pass

1525280865
andrewrk
alexnask, it should be possible for packed structs and extern structs

1525280873
andrewrk
since those have well defined layouts

1525280912
alexnask
I thought the fields of a comptime struct value were represented in different ConstExprValues?

1525280940
andrewrk
they are, which is why we currently do not support comptime @ptrCast

1525280960
andrewrk
we would need a more complicated comptime value data structure

1525280968
alexnask
Aah ok when you talked about the well defined layout I was wondering if I missed something

1525281008
andrewrk
alexnask, yes, sorry, sometimes I do not make it clear whether I am talking about status quo or "in theory when zig is done"

1525281068
alexnask
Well, in theory then @ptrToInt and @intToPtr could work too, no? If we assigned a unique integer id to each pointer value and coold look up the pointer through the integer

1525281088
Hejsil
Ooh wait. No that's not a bug

1525281089
Hejsil
lol

1525281095
alexnask
Then see if we can cast it to the type @intToPtr requested

1525281113
andrewrk
Hejsil, isn't this equivalent to

1525281122
Hejsil
True

1525281128
Hejsil
My mind slipped

1525281147
andrewrk
alexnask, I don't think that makes sense to do

1525281182
andrewrk
if we were going to make those functions work at comptime, we would need to coordinate with the linker and know the address they would be at

1525281200
andrewrk
otherwise you could save @ptrToInt() and then at runtime @intToPtr() and it would be wrong

1525281264
andrewrk
I'm trying to think if Address Space Layout Randomization is relevant here

1525281385
andrewrk
btwwe actually do support @intToPtr at compile time, as long as you don't deref it

1525281596
alexnask
andrewrk Right, good to know

1525281671
Hejsil
Aaahaa!

1525281675
Hejsil
Victory!

1525281714
Hejsil
Not useful for what I wanted to use "generating error sets" for, but it's a start

1525281902
Hejsil
What does this even mean:

1525282028
andrewrk
that looks related to

1525282037
andrewrk
yeah it is

1525282044
andrewrk
#588 is really nasty

1525282057
andrewrk
pointer-reform branch is W.I.P.

1525282064
Hejsil
Wait

1525282072
Hejsil
But there are not pointers!

1525282075
Hejsil
This is magick

1525282077
andrewrk
there are in the IR

1525282081
Hejsil
Aaah

1525282085
Hejsil
Curses!

1525282086
andrewrk
in order to assign to a variable, there's a hidden pointer write

1525282111
andrewrk
it makes sense if you think about it

1525282115
Hejsil
Right. I'll just use recursion then

1525282116
Hejsil
True

1525282288
andrewrk
so far at work I've spent the last 1 hour trying to figure out where enqueueEvent is defined in our codebase

1525282294
andrewrk
c++

1525282307
Hejsil
Lol

1525282316
Hejsil
Progress indeed

1525282320
andrewrk
I can't use tools like ctags or clang because we have a custom preprocessor on top of the C++

1525282345
andrewrk
somebody thought that c++ needed another layer of indirection

1525282497
alexnask
lol

1525282505
bodie_
muh zero-cost abstraction

1525282521
bodie_
they never thought about the real costs

1525282534
alexnask
Well it very much depends on the abstraction imo

1525282541
Hejsil
muh zero-cost-when-it-doesn't-fail-and-i-need-to-debug-it-abstraction

1525282545
alexnask
Obviously a custom preprocessor is horrible :P

1525282563
andrewrk
or even just the normal preprocessor :)

1525282570
alexnask
Right :p

1525282597
Hejsil
It's always to tempting just to "Write a macro"

1525282602
Hejsil
What's the worst that could happen

1525282602
bodie_
throw more ripgrep at it

1525282776
bodie_
what are you trying to accomplish with your error set?

1525282801
Hejsil
I want to generate an error set from a enum I got from C

1525282826
Hejsil
And the generating a mapping from the C enum > error set

1525282829
bodie_
does @typeInfo work on C types?  alexnask

1525282832
alexnask
In my case I thought about a library that can decode any struct on top of the JSON library that is currently proposed through the PR, and it would be nice to be able to error out with a field name

1525282865
alexnask
@bodie_ It works on any type, haven't actually tested it though

1525282875
alexnask
I assume integer types will give Int TypeInfo etc.

1525282974
alexnask
(c_void probably returns an Opaque TypeInfo and not a Void TypeInfo but everything else should be intuitive)

1525283016
bodie_
because void in C doesn't mean the same thing as void in Zig, right?

1525283036
bodie_
aiui, zig void is a zero-sized type

1525283071
andrewrk
bodie_, c_void is defined like this: const c_void = @OpaqueType();

1525283076
alexnask
Right, pretty much (and it's the only type you can ignore an expression of without explicitely doing _ = expr; iirc)

1525283140
andrewrk
I almost think we should translace-c `void *` to `usize`

1525283153
andrewrk
any counter examples?

1525283165
bodie_
what does usize mean?

1525283174
andrewrk
unsigned integer with the same number of bytes as a pointer

1525283177
Hejsil
Readability?

1525283202
Hejsil
void_ptr + 5 now gives a different result

1525283205
Hejsil
Idk

1525283211
andrewrk
hm that's fair

1525283263
Hejsil
What are the reasons for not using &void instead of &c_void ?

1525283277
andrewrk
currently, &void is 0 bytes

1525283281
andrewrk
this is so that you can do something like this:

1525283311
Hejsil
Aaah

1525283369
andrewrk
I don't have a 1 liner. but it's so that you can take the address of 0 sized things and that will compile correctly but result in no code generated

1525283399
Hejsil
Ye, for generic code

1525283400
Hejsil
Got it

1525283401
andrewrk
for example, this will probably work: const HashSet = HashMap(void);

1525283611
andrewrk
wow I found the definition of enqueueEvent. Now I have to figure out which of the 4 overloads, each of which have half the arguments with default values, MyType * is implicitly constructing to one of the parameters

1525283650
andrewrk
boy it would be nice if I knew what argument at the callsite mapped to what parameter of the definition

1525283728
Hejsil
C++. The language that keeps on giving

1525283754
bodie_
I don't want to think about what a C void might be referring to.  But if I have to, I think I would like it to BE a usize but READ as a c_void.

1525283826
bodie_
andrewrk, how come calling a fn taking variadic args without any parameters doesn't default to void?

1525283847
bodie_
e.g. HashMap()

1525283918
andrewrk
if you started with 0 parameters, and then add 1 parameter, we want it to be a compile error at all the callsites so you can inspect and potentially fix them

1525283960
bodie_
I actually abuse this in Go to add parameters without breaking my current calls :P

1525283992
bodie_
or for example to define a constructor taking a vararg of optional func configurators

1525284001
bodie_
then you can just Make()

1525284055
andrewrk
zig has a slightly different philosophy, which is that we're willing to trade some pain of typing more and refactoring more, in exchange for a more careful development process that lets you catch bugs

1525284079
andrewrk
for example, if you're adding a new parameter, you might be invalidating the assumptions that were made at some of the callsites

1525284088
bodie_
isn't part of the point of varargs to include noargs?

1525284091
andrewrk
it's probably a good idea to have a quick look at all the callsites and acknowledge the new parameter

1525284092
bodie_
it's *, not +

1525284106
bodie_
you can't always do that when users are using your library

1525284124
bodie_
in fact, you should never assume that you can go back and change your callsites

1525284140
andrewrk
oh I was thinking of normal functions. what does void have to do with var args?

1525284158
bodie_
can you call a fn having only varargs with no args?

1525284162
bodie_
or do you need to pass void

1525284163
andrewrk
yes

1525284165
bodie_
oh ok

1525284182
bodie_
it sounded like you were saying void is required

1525284220
andrewrk
ah - I am suggesting that you could pass `void` for `V` here:

1525284233
andrewrk
looks like I didn't add a test for that, but I should

1525284380
bodie_
does a runtime dynamic strings / rope / free-list library exist for zig or should I just use something from C?

1525284451
andrewrk
I'm not aware of any projects to implement that yet

1525285924
Hejsil
Alright. This time I have a bug:

1525285938
Hejsil
I'll look into this in the debugger

1525290683
GitHub60
[zig] Hejsil opened pull request #975: Added better support for none pure enums in translate-c (master...none-pure-enums)

1525294445
bodie_
is there a moral or a set of first-principles behind the zen of zig?

1525294621
GitHub1
zig/master 6f002e7 Andrew Kelley: Merge pull request #975 from zig-lang/none-pure-enums...

1525294621
GitHub1
[zig] andrewrk pushed 1 new commit to master:

1525294625
GitHub71
[zig] andrewrk closed pull request #975: Added better support for none pure enums in translate-c (master...none-pure-enums)

1525294641
andrewrk
bodie_, it's just my personal opinions. I can expand on them if you like

1525298439
bodie_
sure

1525301842
achambe
Random optinion,  I feel like translate-c combined with being able to import C headers directly are the two most important things for being able to realistically replace C.

1525301846
achambe
opinion*

1525301925
achambe
keep up the good work

1525301992
MajorLag
It certainly saves a lot of tedium.

1525302091
achambe
being able to import headers definitely means you don't lose anything going to zig. its not a downgrade.

1525303518
andrewrk
alright, I'm setting up the atomic queue test to run on a loop on my windows laptop and then I'm going to start going through everybody's pull requests

1525305572
andrewrk
I've got 4 terminal windows open, running the tests that failed in appveyor, on infinite loops. 10 minutes in and so far I can't reproduce the problem

