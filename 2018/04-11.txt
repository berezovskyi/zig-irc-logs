1523405820
achambe
I like the explicitness of that.

1523405937
achambe
Another thought I had was just runtime checks around lifetimes (vs a strict compiler)

1523405963
achambe
(Just browsing the issue tracker and people bring it up)

1523408289
GitHub56
[zig] andrewrk pushed 1 new commit to master:

1523408289
GitHub56
zig/master ee3e279 Andrew Kelley: cmake defaults stage1 to install in build directory

1523414461
MajorLag
Can anyone confirm: there is no way to specify a type for varargs? They're always any, so you always have to cast a literal?

1523414753
andrewrk
MajorLag, that's correct

1523414780
andrewrk
I have some plans to make that better

1523414854
GitHub171
[zig] andrewrk closed pull request #873: Self hosted parser completion (master...self-hosted-parser)

1523414854
GitHub107
zig/master 64d96ad Andrew Kelley: Merge pull request #873 from zig-lang/self-hosted-parser...

1523414854
GitHub107
[zig] andrewrk pushed 1 new commit to master:

1523415043
MajorLag
alright, that's what I thought. It's a minor inconvenience in my API right now. Comptime varargs would also help, though I made the part that could use it pretty tollerable with a type alias in this case. `pub const List = []const []const u8; ... ComptimeThing(x, y, z, List{"a","b","c"});`

1523415430
andrewrk
let's re-evaluate this once #733 is done

1523417414
GitHub91
[zig] andrewrk pushed 1 new commit to master:

1523417414
GitHub91
zig/master 2ec1cec Andrew Kelley: add more linux syscalls and constants...

1523417426
GitHub112
[zig] andrewrk closed pull request #904: Added a couple dozen syscalls and related constants, structs. (master...std.os.linux-syscall-additions)

1523417433
andrewrk
MajorLag, I added everything except the errnoToError function

1523421232
GitHub153
[zig] andrewrk closed pull request #897: fix use-after-free in BufMap.set() (master...fix879)

1523421232
GitHub109
[zig] andrewrk pushed 4 new commits to master:

1523421232
GitHub109
zig/master 58c6424 Andrew Kelley: simplify and fix BufMap logic

1523421232
GitHub109
zig/master 19e0ed5 Andrew Kelley: Merge branch 'fix879' of

1523421232
GitHub109
zig/master 9e8519b Ben Noordhuis: fix use-after-free in BufMap.set()...

1523435846
GitHub10
[zig] Hejsil pushed 1 new commit to master:

1523435847
GitHub10
zig/master dae2875 Jimmi Holst Christensen: std.zig: Major refactor...

1523441128
GitHub55
[zig] Hejsil pushed 1 new commit to master:

1523441129
GitHub55
zig/master 281c17f Jimmi Holst Christensen: std.zig.parser:...

1523444001
GitHub92
[zig] Hejsil pushed 1 new commit to master:

1523444001
GitHub92
zig/master 5f3ec02 Jimmi Holst Christensen: std.zig.parser: Fixed parsing of field access rhs...

1523444765
GitHub145
[zig] Hejsil pushed 1 new commit to master:

1523444766
GitHub145
zig/master 6fb5ab1 Jimmi Holst Christensen: std.zig.parser: Redid parsing of error set delc...

1523445371
MajorLag
andrewrk, fair enough.

1523446710
GitHub94
[zig] Hejsil pushed 1 new commit to master:

1523446711
GitHub94
zig/master 4b0556e Jimmi Holst Christensen: std.zig.parser can now parse `std/heap.zig`:...

1523447201
alexnask
Hi, any tips for getting to understand the compiler internals? I'm currently looking into implementing comptime varargs and I'm just wondering where I should start looking and/or if there is some overview documents to get a feel for how the compiler operates

1523447215
GitHub52
[zig] Hejsil pushed 1 new commit to master:

1523447215
GitHub52
zig/master 841ac0f Jimmi Holst Christensen: std.zig.parser now allows assignment expr in switch cases....

1523447292
Hejsil
alexnask, maybe this:

1523447349
alexnask
Thanks for the link, I've watched that video and I've worked on a couple of compilers before, I guess I just have to dig into ir.cpp now :P

1523447819
GitHub140
[zig] Hejsil pushed 1 new commit to master:

1523447820
GitHub140
zig/master 28ea364 Jimmi Holst Christensen: std.zig.parser now handle `try`'s precedence correctly...

1523450656
GitHub8
[zig] Hejsil pushed 1 new commit to master:

1523450656
GitHub8
zig/master fe71462 Jimmi Holst Christensen: std.zig.parser now accept both string and multiline string for strings...

1523452693
GitHub71
[zig] Hejsil pushed 1 new commit to master:

1523452694
GitHub71
zig/master df4c575 Jimmi Holst Christensen: std.zig.parser now parses inline fn proto...

1523453184
GitHub26
[zig] Hejsil pushed 1 new commit to master:

1523453184
GitHub26
zig/master a7f77d7 Jimmi Holst Christensen: std.zig.parser: requireSemiColon now matches the C++ behavior...

1523459336
alpha
1) Is there docs for the stdlib?

1523459358
Guest6208
2) Does the stdlib have httpclient and httserver modules?

1523459387
andrewrk
alpha, nope. but Hejsil just finished the self hosted parser, which gets us to the next step of auto doc generation (see

1523459477
Guest6208
Okay

1523459490
andrewrk
I just finished a proof of concept TCP server, which needs some API cleanup, and then the next step is either adding http on top of that or trying out multiplexing coroutines onto kernel threads

1523459526
Guest6208
What is the expected release timeline of the http libs?

1523459594
andrewrk
would you like to open an issue for this feature? and then I'll assign a milestone to it, which gives you an idea of the priority

1523459619
Guest6208
Also are there any docs regarding the allocators and their usage in Zig. Coming from other languages, this is the feature which is most different.

1523459643
Guest6208
Sorry I am not on github :(

1523459662
andrewrk
I'll open one

1523459880
Guest6208
Wbu the docs regarding allocators? Since every minor zig code requires its usage?

1523459942
Guest6208
*What about

1523459982
andrewrk
I agree, we should add that to the language reference

1523460156
Guest6208
üëç

1523460302
andrewrk
Guest6208,

1523460551
Guest6208
Thank you!

1523465196
alexnask
@andrewrk Hi, I'm currently working on comptime varargs, just a quick question, are all vararg functions considered generic?

1523465344
andrewrk
alexnask, yes

1523465357
andrewrk
that's a particularly difficult bug to solve, best of luck

1523465381
andrewrk
I'm considering adding tuples to the language and removing var args, for what it's worth

1523465385
andrewrk
that's one reason I haven't solved this yet

1523465439
alexnask
Ah well I was considering writing tuples on top of the existing language :p

1523465484
alexnask
We "only" need @reflect/@reify to build types in an imperative fashion

1523465516
andrewrk
adding @reflect or @reify might be an easier task than fixing comptime var args

1523465520
andrewrk
if you're looking for something to do

1523465526
andrewrk
and I believe that proposal is accepted

1523465587
alexnask
The current roadblock I'm facing is that ir_analyze_instruction_elem_ptr relies on get_fn_var_by_index to get an argument out of the varargs, which appears to rely on the function being generic

1523465643
alexnask
Just a quick question if you can answer off the top of your mind, is there any particular reason why ConstArgTuple just hold indices to arguments instead of owning the resolved argument expressions itself?

1523465754
andrewrk
alexnask, I believe that just holding indices and not owning the resolved expression is the cause of the problem you're trying to solve

1523465809
andrewrk
I can't remember if changing it to owning the resolved expression will cause a problem or not - I think you'll have to change some hashing functions at least

1523465924
alexnask
I will explore this route, it seems like it could simplify the generic function code too (remove the need for expanding varargs into the generic function instance, just use one argument everywhere)

1523465973
andrewrk
what do you think about the idea to remove var args entirely and add tuple support?

1523466013
andrewrk
so the format function would look something like:  std.debug.warn("foo: {} bar: {}\n", [foo, bar]);

1523466081
alexnask
Hmm

1523466094
alexnask
Personally I'm more of a fan of tuple types living in the std

1523466103
alexnask
Although the two are equivalent, really

1523466122
MajorLag
tuples has the advantage of allowing multiple "varargs" sections too.

1523466127
andrewrk
they're very similar. tuples seem less like a weird special case

1523466139
alexnask
Yeah, that's true

1523466161
alexnask
I think reflection would be better to have first though

1523466162
andrewrk
for tuples, the length and the types would be comptime known, the values would be runtime known

1523466181
alexnask
So that people can easily query their tuple types etc.

1523466190
andrewrk
good point

1523466202
alexnask
And would that example code work with the current type system?

1523466210
andrewrk
and that kinda depends on pointer reform

1523466213
alexnask
Since warn does not know what the tuple type will be

1523466234
alexnask
So for it to work, you would need to pass the tuple type in as a generic argument, right?

1523466254
andrewrk
warn would look like: fn warn(comptime format: []const u8, args: var) void

1523466285
alexnask
Good point I always forget about var parameters

1523466399
MajorLag
how would that work with a function taking a tuple? would it have to take var or would there be a way to enforce the type, as in `fn whatever(args: f32...)`?

1523466446
alexnask
I don't see why you would want a tuple with all field being of the same type instead of taking a slice but maybe I'm missing something

1523466459
andrewrk
if it wants to enforce a type, how about having the parameters directly be the things wanted?

1523466490
alexnask
And you should be able to write some code to typecheck your tuple/vararg types

1523466507
andrewrk
if we had tuples I think something like @call(functionPointer, tuple_of_args) would make sense

1523466532
MajorLag
the thing with a slice is that it has some ugly construction if you want to use literals, though this can be cleaned up a bit with a comptime helper fn. If you use var, you have to explicitly type all your literals. It's a minor thing, sure.

1523466572
alexnask
Yeah, makes sense and it's actually probably really simple to write in zig instead of a compiler intrinsic

1523466624
alexnask
@MajorLag sure, I'm just saying you could have some enforce_tuple_type(tuple: var, comptime t: type) function to do your typechecking

1523466665
andrewrk
MajorLag, having to type literals for args with `var` is annoying. and I think we can overcome this

1523466739
MajorLag
So like, in move.zig, the current API allows you to create action types to fit your criteria, so you have to pass a slice of values to the function: `var rotateTo = RotateToAction.init(interpolation.linear, 5.0, f32(1.0));` I have to explicit cast the last parameter because it is varargs

1523466743
alexnask
Anyway all I'm saying is that just with @reify and @field you can get a tuple type up and running in zig

1523466781
alexnask
I personally prefer this approach + tuple literals that call into builtins

1523466825
andrewrk
MajorLag, I'll bump up the priority on fixing that

1523466831
jab
Anyone know any other languages that provide C ABI compatibility?

1523466844
andrewrk
D

1523466851
MajorLag
Odin

1523466862
alexnask
C++ ;)

1523466900
andrewrk
MajorLag,

1523466908
MajorLag
andrewrk, how can you fix that? That's a runtime fn, the function has to take `args: ...` and because it can't specify the type the user has to cast the literal. In this case the type is known, I just have no way of telling that to the compiler.

1523466909
andrewrk
this isn't even that hard of an issue. I'll see if I can knock it out soon

1523466974
MajorLag
well, if you say so.

1523466975
andrewrk
worst case scenario, we generate a specialization of the function for each different literal value you use with it

1523467061
alexnask
@andrewrk: I was thinking of something like that:

1523467090
alexnask
I really think it would be a killer feature, it just makes metaprogramming sooo much easier

1523467108
andrewrk
what would be a killer feature? @reify and @reflect?

1523467133
alexnask
Yes

1523467143
alexnask
But then again I get way too excited about metaprogramming :p

1523467164
andrewrk
I'm pretty sure I accepted this proposal - the current plan is to add these 2 builtins and then remove the redundant reflection features

1523467218
alexnask
Yes I've read through that issue I plan on taking a stab after I fix (or completely fail to fix :P) comptime varargs

1523467324
andrewrk
I think adding @reflect and @reify is going to be much more straightforward than fixing var args

1523467350
andrewrk
the former is adding new things and the latter is figuring out what wrong decisions I made and reworking the code

1523467441
alexnask
I'll try it out anyways, nothing wrong with getting my ass kicked in the process :P I pretty much just want to get familiar with the code base etc, I've worked on compilers before but one as complex as zig

1523467506
alexnask
not*

1523467520
MajorLag
if you're going to do reify/reflect, it'd be great if it worked against namespaces / empty structs too. this would let us determine if a struct passed to warn has a fmt() fn and call it to allow custom formatting.

1523467688
alexnask
Well in principle I suppose we should be able to @reflect and @reify any declaration right? Types should come first for sure but namespaces sound pretty trivial as well

1523467710
andrewrk
MajorLag, I'm still thinking about your idea of making a file actually just be an empty struct

1523467791
alexnask
@reify-ing function sounds like the most involved usecase (assuming it should be possible, I don't think it's included in the proposal)

1523467835
MajorLag
It just seemed like they were basically the same thing, certainly I use comptime generated empty structs as a way of creating a namesapce at comptime. It seemed that `namespace` was just a base type upon which `struct`,`union`, and `enum` sat.

1523468427
andrewrk
wow it's really exciting how close we are to having a `zig fmt` that correctly handles all std lib code

1523468684
jab
Has there been any proposals for handing stack allocation failure?

1523468694
jab
In the case of calling a function?

1523468839
andrewrk
jab,

1523468860
andrewrk
another idea is to use coroutines - because calling a coroutine requires using an allocator and the call can fail

1523469358
MajorLag
speaking of, that async<allocator> syntax only being used in one place bothers me. I think I get the reasoning behind it, it just seems like we should look for other oportunities to do that kind of thing. Like, could promise use it instead of ->?

1523469447
andrewrk
angle brackets? there's a plan to use it for enum<tag> union<tag> and fn<cc>

1523469462
andrewrk
it solves an ambiguity for fn<cc> - consider fn(cc)()

1523469544
MajorLag
ah, ok, nevermind then, you're way ahead of me

1523469601
andrewrk
MajorLag, #623 was a 1-line fix. running tests now

1523469638
MajorLag
This is because I don't write compilers, it really seemed like a harder problem to me.

1523469660
andrewrk
I didn't realize it would be this easy either. I feel kinda bad

1523469698
andrewrk
ah ok it didn't fix it for var args. just `var` type

1523469795
MajorLag
so if I pass `1`, does that turn into a u8 or is it recognized as a literal within the fn, so it can implicitly cast to f32?

1523469836
andrewrk
the latter

1523469842
MajorLag
sweet

1523470948
andrewrk
MajorLag, I think var args integer literals are going to be broken for the same reason as #557. it's related to what alexnask is looking at and the tuple discussion

1523471471
MajorLag
oh well. I can wait, it's clean enough for now.

1523471487
MajorLag
thanks for taking a look though

1523472240
ragge
hey! is compiling to wasm supposed to be supported? tried running zig build-exe --target-arch wasm32 main.zig but getting:

1523472241
ragge
Abort trap: 6

1523472241
ragge
unable to create target based on: wasm32-unknown-unknown-wasm

1523472311
andrewrk
ragge, llvm still treats WebAssembly as an experimental target, so it's not included by default

1523472327
andrewrk
however, I enabled it on the CI builds, which you can find on ziglang.org/download

1523472334
andrewrk
we have CI builds for windows and linux

1523472356
ragge
andrewrk: ah, ok, makes sense. I'll check out the CI builds, thanks!

1523472488
GitHub174
[zig] andrewrk pushed 1 new commit to master:

1523472489
GitHub174
zig/master e48e707 Andrew Kelley: allow integer and float literals to be passed to var params...

1523473000
GitHub57
[zig] Hejsil pushed 2 new commits to master:

1523473001
GitHub57
zig/master ed1b028 Jimmi Holst Christensen: Merge branch 'master' of github.com:zig-lang/zig

1523473001
GitHub57
zig/master 5b584e0 Jimmi Holst Christensen: std.zig.parser special cased error in return....

1523477039
hobomatic
i was just thinking about the namespace/empty struct thing yesterday. One of the first wrong assumptions I made about zig was that empty structs and namespaces were interchangable

1523477058
andrewrk
noted. that's a useful data point

1523485722
GitHub5
[zig] andrewrk pushed 1 new commit to master:

1523485722
GitHub5
zig/master 2b86ffe Andrew Kelley: LLD patch: Do not keep shared symbols to garbage......

1523489792
aiwakura
how do I create a library namespace like "std"?

1523489895
aiwakura
andrewrk, you may have mentioned this to me once

1523490125
aiwakura
nevermind, found it!

1523490158
aiwakura
(.addPackagePath, for the records)

