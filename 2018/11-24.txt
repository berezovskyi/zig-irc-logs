1543021441
andrewrk
daurnimator, I've been thinking about your lua demo. I'm typing up a proposal

1543021464
benjikun
what was that for?

1543021500
andrewrk
daurnimator demoed how the same lua functions can be used in a blocking or async manner

1543021517
andrewrk
so that you can write event-loop-or-blocking-agnostic code

1543021525
benjikun
oh I see

1543023722
benjikun
andrewrk: I'm sorry to pester you about adding to wikipedia again, but do you have any ideas about what languages I should add to a `influenced by`

1543023762
benjikun
I'm thinking: C (obviously) for manual memory management ideas, go for defer

1543023769
benjikun
I'm sure there are specific things coming from C++ and whatnot too

1543023905
benjikun
just wanna make sure there is more places for people googling 'zig' to refer to, wikipedia being one

1543023922
benjikun
I'm going to slowly start adding more to rosettacode and change things that need to be changed overtime with language changes

1543024076
benjikun
ooh and I can add jai to the influenced by section for the allocators stuff

1543025558
andrewrk
benjikun, C, Rust & Go for syntax, nodejs for @import/async/await, llvm ir for builtins and other misc semantics. standard library influenced by musl libc and wine

1543025593
benjikun
tyvm I'll add em

1543025612
andrewrk
I'd say jia for compile time function evaluation, even though I ended up going a very different direction with it

1543025685
andrewrk
error handling inspired by `on error resume next` from VB6

1543025690
andrewrk
just kidding\

1543025706
benjikun
lmao

1543025723
benjikun
I unironically used VB6 at one point

1543025761
andrewrk
it was my first programming language

1543025765
benjikun
forever ago, and then VB.net & C#

1543025786
benjikun
those were some of my starters too :p

1543026221
presiden
<andrewrk> error handling inspired by `on error resume next` from VB6

1543026229
presiden
^ qotd

1543026471
litonico
hey friends, i'm new to zig as of today! anyone up for a few beginner's questions?

1543026477
benjikun
always

1543026483
benjikun
I'll try, at least :)

1543026489
litonico
awesome, thank you!

1543026649
litonico
ok, first off, i've tried to create a static array of functions inside a method. doing that particular thing has raised a few questions:

1543026672
litonico
what is a 'bound function' versus a plain 'ol function?

1543026706
litonico
(i see this in the error: `expected type 'fn(MyStruct) void', found '(bound fn(MyStruct) void)'`)

1543026761
litonico
(when writing `const list_of_fns = [](fn(MyStruct)void) { self.my_function }`)

1543026906
andrewrk
litonico, try using `MyStruct.my_function` rather than `self.my_function`

1543026931
litonico
it works! thank you

1543026953
andrewrk
mostly the only thing you can do with a bound function is call it

1543026965
andrewrk
it's an implementation detail of method calls

1543027019
benjikun
what makes it bounded?

1543027034
andrewrk
a.b syntax

1543027041
andrewrk
where `a` is not a type

1543027047
benjikun
oh I see

1543027132
litonico
i'm sorry, you may have to break this down a little further for me

1543027299
litonico
the 'bound' function is different than a pointer to the function on the type? (this question may not make sense, because i'm still not solid on how zig structs/methods work)

1543027379
andrewrk
I think it would start by ignoring the idea of bound functions, and ignoring the idea of methods. All we have are normal functions

1543027385
andrewrk
*it would help to start by

1543027409
andrewrk
now, introduce the idea that you can put a function inside a struct, and refer to it with MyStruct.my_function

1543027430
andrewrk
still, nothing special about functions or function pointers

1543027475
litonico
ok, all clear so far

1543027477
andrewrk
now, introduce the idea that you can use this syntax:  `a.b()` which is syntax sugar for `@typeOf(a).b(a)`

1543027553
andrewrk
the fact that the expression `a.b` evaluates to a "bound function" is an implementation detail which you can completely ignore

1543027855
litonico
going to run some code for a sec to make sure my next question is correct

1543027932
litonico
ok

1543027938
litonico
i am confused then by, if the syntactic sugar is `@typeOf(a).b(a)`, why it works to call MyStruct.my_function, and not self.my_function, rather than the opposite:

1543028038
benjikun
`self` is an instance of the type MyStruct

1543028055
litonico
yes!

1543028077
litonico
shouldn't that then expand to

1543028095
litonico
MyStruct.my_function(an_instance_of_MyStruct)

1543028098
litonico
which seems correct?

1543028112
andrewrk
yes exactly

1543028164
andrewrk
only simple method calls work. you can't put a bound function in a list

1543028204
benjikun
hmmm

1543028656
litonico
oh, i finally get it

1543028658
litonico
thank you!

1543028687
litonico
i'll be back another day w/ more questions, i'm sure. thank you for your time!

1543030172
daurnimator
andrewrk: yay :)

1543030186
daurnimator
andrewrk: let me know if you need any help or another demo

1543030203
andrewrk
daurnimator, I almost finished typing it up. I'm interested in your feedback

1543030281
daurnimator
andrewrk: also FWIW... I don't like "bound functions". it's one of the

1543030303
andrewrk
zig doesn't really have bound functions. it's just a implementation detail of syntax sugar

1543030308
daurnimator
I know :)

1543030343
daurnimator
lua 'solves' this with the `:` 'operator'. a.b() is just calling a.b. a:b() is the same as a.b(a)

1543030361
andrewrk
we might change the syntax for function pointer calls. I think that would kill bound functions

1543030406
daurnimator
andrewrk: I have a lot I want to talk about but don't want to waste your time/distract you. :P

1543030430
daurnimator
andrewrk: will be enthusiastic to read over this proposal.

1543030439
benjikun
where did you learn lua from originally?

1543030439
daurnimator
andrewrk: how goes copy ellison?

1543030456
daurnimator
benjikun: me? I learned it back in ~2005 due to writing homebrew for the PSP.

1543030468
benjikun
ah

1543030471
andrewrk
copy elision - slow but steady progress

1543030484
benjikun
I remember using it in Gmod and roblox lmao

1543030490
andrewrk
if you look at my commit messages in the PR, you can see some code snippets and corresponding LLVM. compare those to master branch and you'll see some big improvements

1543030497
benjikun
forever ago, and config files

1543030524
andrewrk
I sadly spent a few hours today chasing down a regression that scared the shit out of me, but it turned out to be an LLVM quirk, easy to work around

1543030526
daurnimator
benjikun: I use lua all the time, both for work and fun.

1543030545
andrewrk


1543030557
andrewrk
change the i != 10 to i < 10 and observe the difference

1543030682
daurnimator
andrewrk: huh? what difference

1543030690
daurnimator
I just see `ret`

1543030701
benjikun
it breaks immediately

1543030703
andrewrk
what do you see when it says i != 10?

1543030710
daurnimator
andrewrk: ret

1543030745
MajorLag
i != 10 should be a loop

1543030749
daurnimator
andrewrk: though your original link uses i == 1

1543030775
andrewrk
I mean in the for line

1543030792
andrewrk
for (unsigned i = 0; i != 10; i += 1) vs for (unsigned i = 0; i < 10; i += 1)

1543030893
andrewrk
plz tell me I'm not crazy - I just tried this in private browsing mode

1543030965
benjikun
is the loop not working at all with `i<10`?

1543030966
MajorLag
with != 10 I see a loop. with i < 10 you just get ret, I imagine i is set to literal 1

1543030988
MajorLag
I imagine because i is set to literal 1

1543031000
benjikun
why?

1543031008
andrewrk
just `ret` is the correct optimization

1543031017
andrewrk
note that gcc finds this answer

1543031019
MajorLag
i is < 10, this is guaranteed.

1543031030
andrewrk
msvc doesn't find it either way

1543031038
benjikun
oh I understand now I think

1543031064
daurnimator
andrewrk: yeah I see it now

1543031076
benjikun
so just a matter of compiler optimizations

1543031110
andrewrk
right. I had changed from i < N, to i != N, in for loops, in the copy elision branch, and I was worried that it was the copy elision code that was worse, but it was just this one thing

1543031127
andrewrk
copy elision code is much better :)

1543031223
benjikun
woohoo

1543031439
benjikun
I'm happy zig is taking the decentralized approach for the future package manager

1543031466
daurnimator
andrewrk: so I have a different question: in zig, is it possible to attach metadata to a slice? Internally you obviously keep the length, but what if I want to store other data, e.g. "isValidUtf8" (related to the utf16/wtf8 issue). or to pick another issue that already exists "noNulls"

1543031490
andrewrk
daurnimator, that is not currently possible

1543031494
MajorLag
isn't that what structs are for?

1543031508
benjikun
you could just wrap it with structs, for sure

1543031516
benjikun
s/structs/a struct/

1543031707
daurnimator
Also related to the utf16/utf8 issue: I wonder if we just need a type "FilePath" that is distinct from u8[]

1543031729
daurnimator
that way we don't do needless conversions if you're going from e.g. a directory iterator to opening files.

1543031742
MajorLag
I've been thinking anyone writing a new OS should just make paths a `[][]const u8`

1543031757
benjikun
I wouldn't oppose that being in std/io daurnimator

1543031781
daurnimator
MajorLag: array of arrays??

1543031878
MajorLag
slice of slices actually. each slice is the name of a directory in the path. No separator characer, all bytes valid.

1543031910
daurnimator
though I'm afraid FilePath might end up being a middling solution that makes things more difficult while leaving some corner cases unhandled. e.g. I think different filesystems have different limitations: some are case insensitive, windows will blow up if you use the non \\??\ syntax and use filenames like NUL

1543031924
benjikun
true

1543031930
benjikun
hard to tell if it's worth including in stdlib

1543031940
benjikun
with zig's goal of maintaining its small size

1543031988
andrewrk
MajorLag, what about how to represent paths to users?

1543032001
andrewrk
daurnimator, stick around if you can, I'm just finishing up the last section

1543032009
andrewrk
of the I/O proposal

1543032019
daurnimator
andrewrk: will do

1543032032
MajorLag
Not an issue in a GUI. For commandline, reserve a special graphic that can only be printed by the kernel.

1543032047
MajorLag
or something

1543032085
daurnimator
If you all want to be distracted, go check out arcan/durden. It's a project to write a graphics stack (to replace e.g. xorg/wayland). I really like it...... eventually I'll do some zig stuff with it

1543032102
MajorLag
I've been keeping an eye on it.

1543032187
benjikun
its logo looks like the anarchy symbol

1543032248
benjikun
"game engine"

1543032249
benjikun
hmm

1543032283
benjikun
looks cool

1543032509
benjikun
dang durden looks nice

1543032544
benjikun
I've been stuck on i3 for years

1543032608
daurnimator
the next release of arcan is finally looking usable: it brings wayland seamless support. so you'll be able to run normal wayland and X (via Xwayland) applications

1543032708
benjikun
neat

1543032709
andrewrk
is there a page that describes its goals/comparison to wayland

1543032768
MajorLag
There's some blog entries describing the problems they see with wayland and how they're different, IIRC.

1543032770
hio
Hi, is it possible (in the language) to read JSON into a struct like Newtonsoft in c# does or java in GSON? I mean automatically, without having to assign fields myself

1543032816
daurnimator
andrewrk: not in one place.

1543032856
andrewrk
hio, I don't remember where the status on that is, but I think the compile time reflection features of zig are good enough to implement that

1543032867
andrewrk
MajorLag probably knows what the current roadblocks to that are better than me, actually

1543032964
benjikun
andrewrk: Despite being primarily about arcan v. X11, this post goes over some differences between it and wayland too

1543033033
MajorLag
I think it is maybe possible, but with existing comptime it's a bit complicated. It wouldn't be struct, since we can't generate arbitrary new struct fields at comptime, but it could be something similar to Hejsil's userland tuple implementation.

1543033059
andrewrk
I would say that is in scope though- parsing json into a struct is a valid use case of zig

1543033103
daurnimator
If no one has done that with json yet then I might play with it now

1543033154
benjikun
I wanna help more lol

1543033192
hio
cool, that is good to hear. One of the most needlessly long C code that I've ever written was when I had to parse JSON.

1543033195
benjikun
I've just been writing small filetype parsing libs

1543033247
MajorLag
We have a JSON implementation don't we? It just doesn't create structs.

1543033251
daurnimator
hio:

1543033254
benjikun
MajorLag: yes

1543033307
benjikun


1543033310
hio
yeah I saw that daurnimator but the problem with that is that when the JSON changes, you have to correct all these paths inside strings where you dont get IDE help

1543033370
daurnimator
hio: the problem with converting to structs is that in many cases it results in pointless copying.

1543033372
hio
that's why having it as a language feature is important in my opinion, whether it be full struct creation or just a much more convenient sort of dynamic syntax for going down an arbitrary object tree in general

1543033442
daurnimator
hio: we have the dynamic going down the object tree.

1543033456
hio
how do you mean?

1543033471
daurnimator
hio:

1543033535
daurnimator
What

1543033610
benjikun
yea that'd be cool

1543033630
benjikun
I'm not sure how you could do that currently

1543033639
daurnimator
benjikun: I'm going to give it a try now

1543033649
MajorLag
I have an idea how the feature could work without going full @reify: @addField(Prototype: type, field: []const u8, FieldType: type) type. Keep a var S = type while you parse and keep replacing it with the new type generated by @addField.

1543033650
benjikun
lmk how it goes

1543033712
hio
it doesnt show the harder part when it becomes really nested. Like accessing the 5th item in the json array or iterating over the json array in general, or the nested object. But yeah it's not terrible

1543033794
hio
but imagine if I have to do that on a 5mb json file... having to specify the subparts as "string" will give me no intellisense when I type it out

1543034568
daurnimator
What is the syntax for creating a new var of a new type + initializing it? something like:  var foo = struct {x: u32}({x=42});

1543034680
andrewrk
daurnimator,

1543034700
andrewrk
oh sorry this isn't an answer to your question, this is the proposal I just wrote up

1543034728
andrewrk
struct {x: u32}{.x = 42}

1543034750
daurnimator
andrewrk: thanks and thanks. will review now

1543035419
daurnimator
andrewrk: I'm not sure you understood it entirely

1543035432
daurnimator
andrewrk: the primitive isn't "tell main loop to do thing"

1543035441
daurnimator
andrewrk: but should be "resume me on condition X"

1543035454
andrewrk
this is not a proposal to model zig coroutines like lua's

1543035461
daurnimator
where X might be that an fd becomes writable, or that a futex is readable, or whatever your event loop wants to support

1543035495
andrewrk
oh, I see, I should have picked a different example than a file system operation

1543035508
andrewrk
it is as you say, however file system operations must be queued on a special purpose thread

1543035553
andrewrk
so that's the "nonblocking". for a different thing such as a socket it would be suspend { event_loop.resumeMeWhenFdIsReady(socket_fd, @handle()) }

1543035574
daurnimator
andrewrk: right. so the code should probably be "h = createAsyncIoOperation(); loop.waitforiocompletion(h);"

1543035591
andrewrk
what are you trying to solve?

1543035642
daurnimator
andrewrk: that the primitive should be "wait for event" not "do thing and get back to me"

1543035686
andrewrk
I don't see what you are trying to distinguish between

1543035711
andrewrk
in english those sound like the same thing to me

1543035756
andrewrk
in my examples, it involves the coroutine putting its handle into the e.g. epoll set, and then suspending, to be resumed when the epoll fd becomes active

1543035809
daurnimator
okay lets come back to this point later

1543035842
andrewrk
are you in agreement with the main goal? "ability to write code that is agnostic of blocking vs async I/O"

1543035847
daurnimator
yes

1543036056
daurnimator
different point: I think the io_mode thing is complicated and unnecessary

1543036135
andrewrk
let's discuss on the issue

1543037992
daurnimator
trying to organise my thoughts...

1543046858
JinShil
Hello.  I'm trying to port a D program to Zig (first Zig program) and I need to call some Windows API functions, specifically `SetWindowsHookEx`.  I didn't see that in `std/os/windows`.

1543046910
JinShil
In fact `std/os/windows` looks pretty light.  What's the plan there?  Does it just need to be filled out with `user32` and others?

1543046987
JinShil
Or does `std/os/windows` only contain what's needed to support standard library functionality on Windows?

1543047033
hryx
JinShil: is SetWindowsHookEx a plain C function you can call by including a .h file?

1543047045
hryx
have you looked at

1543047112
benjikun
Isn't that just in some .dll that you can include?

1543047141
JinShil
Yeah, I'm pretty sure I can get it working by just doing the work myself.  My question was really to make a contribution to Zig.  That is, if I'm going to go through the work of writing a zig FFI, I might as well submit a PR to the zig repository.  But I'm not sure if that's the intent with `std/os/windows`

1543047204
JinShil
`SetWindowsHookEx` comes from user32.dll

1543047207
benjikun
You can just include `user32.dll` and it will

1543047208
benjikun
yeah

1543047273
JinShil
Ok, so I think I can do `@cInclude("windows.h");` or whatever the .h file is.

1543047280
hryx
hm, I dunno what the scope of the std/os modules are. you can definitely submit an issue to see if it would be accepted into the stdlib

1543047283
JinShil
Then link with user32.dll, right?

1543047314
JinShil
Or is `@cInclude("user32.dll");` a thing in zig?

1543047368
hryx
you were right the first time, @cInclude("whatever.h")

1543047421
benjikun
there is also `windowsLoadDll` in std/os

1543047430
benjikun
I've never used it, though

1543047484
benjikun
`pub fn windowsLoadDll(allocator: &mem.Allocator, dll_path: []const u8)`

1543047514
hryx
benjikun: I can't find that, where is it?

1543047524
benjikun


1543047526
hryx
it sounds like runtime loading though, not dynamic linking

1543047544
benjikun
oh, true

1543047566
hryx
ah, so it is:

1543047571
hryx
but TIL, thanks

1543047647
JinShil
Thanks folks giving a few things a try.

1543047672
daurnimator
andrewrk: okay.. I replied in that issue. Hopefully my thoughts are coherant

1543047686
daurnimator
Yes I did just spend 3 hours composing that reply >.<

1543047689
benjikun
daurnimator: were you doing that all this time

1543047690
benjikun
holy

1543047694
benjikun
dedication

1543047700
hryx
d.a.n.g.

1543047731
daurnimator
Now time to walk the dog

1543047736
benjikun
lol

1543048374
JinShil
How do I give the zig compier an include path for resolving `#include` statements in a `@cInclude`d C file?

1543048398
benjikun
`--library yadayada`

1543048412
benjikun
or you can add it in a build.zig file if you want

1543048490
JinShil
That'd be cool to put it in a zig source file, but one thing at a time.  --library looks like a "link" argument not an "include" flag.

1543048594
benjikun
Do you mean like the `-I` gcc flag

1543048635
hryx
-isystem [dir]               add additional search path for other .h files

1543048640
hryx
according to `zig help`

1543048658
JinShil
ah, that's it.  Thanks.

1543048680
benjikun
sorry for wrong answer

1543048705
JinShil
No worries.  Happy to have the help.

1543048706
hryx
nah benji

1543048884
benjikun
hryx: I was lookin at your website

1543048885
benjikun
cool music

1543049031
hryx
aw shux, thanks!

1543049092
benjikun
I enjoyed listening to a lot of it :)

1543049112
hryx
<3

1543049118
hryx
releasing some more in 2019

1543049142
benjikun
chiptune or some other style?

1543049247
hryx
one or two (or three?) soundtracks - some pseudo-chiptune, some not at all

1543049260
benjikun
interesting

1543049268
benjikun
looking forward to giving it a listen :p

1543050175
hryx
or if it's an optional return type (signified with a "?") or errable type (signified with "!"), you'd need to handle those

1543050340
JinShil
hryx. Thanks.

1543050432
hryx
JinShil: sure thing - looks like the IRC logger went offline for a sec, so let me know if you missed any of that

1543050439
daurnimator
benjikun: thoughts on my reply?

1543050443
daurnimator
hryx: ^?

1543050500
hryx
I'll peep it daurnimator

1543050505
hryx
I'm no async smartypants tho

1543050842
hryx
daurnimator: It looks well thought-out. Showing language and stdlib proposals will surely help with feedback. I admit the finer points go over my head because I have limited experience with coroutines

1543050865
daurnimator
hryx: this isn't a bad starting point: I don't think any prior knowledge is required

1543050972
hryx
Here you write "some code will

1543051008
JinShil
zig build-exe main.zig -isystem "C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\" --library-path "C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\x86\" --library user32

1543051009
JinShil
Unexpected extra parameter: Files

1543051031
JinShil
It looks like --library-path doesn't like spaces in the directory.

1543051037
JinShil
Is there anything I can do about that?

1543051047
hryx
JinShil, your -- flags need to go before the argument (main.zig)

1543051060
hryx
.....I think

1543051078
daurnimator
hryx: e.g. if you want to create a promise library that includes a call `myPromise.wait()`. then you probably want it to be an error to call it outside of an event loop

1543051079
JinShil
zig build-exe -isystem "C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\" --library-path "C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\x86\" main.zig

1543051087
JinShil
Unexpected extra parameter: (x86)\Windows

1543051103
JinShil
I still think it's struggling with the spaces

1543051187
hryx
hmmm that looks like it should work. this is the stock windows cmd shell?

1543051197
hryx
I dunno the escaping rules but that seems ok

1543051314
hryx
daurnimator: interesting, I'll have to watch the discussion unfold and learn from it :>

1543051715
JinShil
hryx, Tried generic windows shell and power shell.  Same result.

1543052148
hryx
JinShil: from src/main.cpp, it looks like -isystem simply passes the argument to clang. Now I'm not sure about this, but clang may be splitting that string at spaces, even if your shell (and zig) passed it as a single arg.

1543052177
hryx
as a last resort, try prepending the spaces with \ or \\ (not sure which)

1543052264
hryx
failing that, someone more familiar with LLVM or Windows would be better suited to help troubleshoot than me

1543052359
hryx
I don't know what argument processing clang does but you could also try -isystm "'C:\Program Files (x86)...'" (with double AND single quotes around the path)

1543052698
JinShil
This worked:  zig build-exe main.zig --library "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.17134.0\um\x64\User32.Lib"

1543052720
JinShil
Apparently I didn't need -isystem, but I don't know how it was able to locate my imported windows.h

1543052887
hryx
straight up xmas miracle

1543052899
JinShil
lol

1543054307
daurnimator
expected type 'fn(*Buffer, []const u8) anyerror!void', found '(bound fn(*Buffer, []const u8) @typeOf(Buffer_append).ReturnType.ErrorSet!void)

1543054313
daurnimator
^ what should I be using there?

1543054367
daurnimator
I guess @typeOf(Buffer.append).ReturnType.ErrorSet works

1543055243
JinShil
`WinUser.GetMessage(&msg, null, 0, 0)` -->  error: expected type '?[*]struct_tagMSG', found '*struct_tagMSG'

1543055255
JinShil
What's that telling me?

1543055284
JinShil
`msg` is a type of `struct_tagMSG`

1543055302
JinShil
`msg` is variable of type `struct_tagMSG`

1543056127
JinShil
Declaring `msg` as `var msg: ?[*]WinUser.MSG = null;` did the trick, but from what I can tell that just allocates enough memory for the pointer, not enough for the entire `WinUser.MSG` struct.

1543056374
hryx
JinShil: You are right that the underlying type (child type) is `struct_tagMSG`. Are you familiar with what these prefixes mean: `?[*]`

1543056428
hryx
In zig, declaring a variable of type `?T` does not mean it's a pointer, it means `a T or maybe not a T`

1543056507
JinShil
My understanding is that `?` means optional (i.e. may be `null`), correct?

1543056519
hryx
`?*T` is close to the C equivalent of a pointer which may be NULL, but in zig the pointer itself is guaranteed to never be null. that's why there is `?`

1543056539
hryx
yep, but ? doesn't mean "null pointer", as in address 0x0

1543056579
JinShil
Ok, then what's the C equivalent of [*]?  Would that be a double pointer (e.g. void**)?

1543056593
hryx
I'm out of my league here, but I think that `?T` actually holds enough space for T plus a flag saying if it is NULL or not

1543056637
daurnimator
Does std.fmt not handle comptime int?

1543056637
JinShil
Ah, interesting (re-reading the docs with that understanding).

1543056662
hryx
anyway, the reason you have all this crazy crap `?[*]` is because: since something was translated from a C pointer, we don't know if it's null (so we add ?), and it could either be a pointer to a single object OR any array (so we add [] around *)

1543056730
hryx
yeah JinShil search the docs for [*] -- I admit I haven't done much zig-C interation yet so I hope I'm not being confusing!

1543056775
JinShil
hryx, you've been quite helpful.  Thanks.

1543056951
daurnimator
hio, benjikun, andrewrk, MajorLag: json serializer play-thing I promised earlier:

1543057175
hryx
daurnimator: any specific function in std.fmt? what output are you seeing?

1543057314
daurnimator
hryx: formatIntValue. I get: /usr/lib/zig/std/fmt/index.zig:683:23: error: type 'comptime_int' does not support field access

1543057941
hryx
ooooh interesting. formatIntValue calls formatInt on line 683. Then @typeOf(value).is_signed -- the .is_signed is triggering a "field access"

1543057951
hryx
so maybe comptime_int does not support is_signed

1543057958
hryx
this might be a bug

1543057973
hryx
just going off my spidey senses here

1543058074
hryx
two relevant lines in the compiler which print that error, both in ir.cpp

1543060843
JinShil
Does Zig (or will Zig) have anything to ensure compile-time memory safety.  e.g. Rust's borrow checker or D's `scope` and `return` lifetime annotations?

1543060862
JinShil
I mean verify memory-safety at compile-time.

1543061259
hryx
JinShil: That kind of analysis doesn't happen currently, and I believe that Andrew has stated that something like Rust's borrow checker is out of scope for Zig.

1543061337
JinShil
:-(

1543061369
hryx
The language is evolving so nothing is quite set in stone, but closed github issues may reveal which specific ideas have been rejected previously

1543061403
hryx
Zig is more like C without the horrible headaches -- in the sense that the programmer promises to handle (de)allocation

1543061577
hryx
I hope that isn't discouraging though. Zig is almost euphoric when you embrace its balance of power, safety, and simplicity.

1543062090
JinShil
Well it is quite discouraging, but maybe I don't get it.  What are Zig's "safety" features?

1543063125
daurnimator
Can you add information to zig error messages?

1543066077
hio
this error makes no sense to me: "error: incompatible types: '[22]u8' and '[]u8'"

1543066630
hio
`var chars = std.io.readFileAlloc(a, "/home/pc/test/myclass.dart") catch "bla";`

1543066684
hio
if i do "bla"[0..2] it works but I get a different error: `unable to determine libc lib path: executing C compiler command failed`

1543066781
Hejsil
"bla" is type [N]u8 (array of N items), and std.io.readFileAlloc returns []u8 (slice to mutable data). Arrays do implicitly cast to []u8.

1543066884
hio
that's what I expected, that it would cast implicitly but then why is there an error unless I make it into a slice

1543066932
Hejsil
const __global_bla = "bla"; var chars = std.io.readFileAlloc(a, "/home/pc/test/myclass.dart") catch __global_bla;

1543066944
Hejsil
Because your code is the same as what I just wrote

1543066967
Hejsil
And __global_bla is const, so you can't take a mutable slice to it

1543066984
Hejsil
when you do "bla"[0..], you get a []const u8, and []u8 casts to []const u8

1543067061
Hejsil
And arrays casts to []const u8 too

1543067112
hio
yes, your code is the same and it also doesnt work. But you said it should cast implicitly? I still get "error: incompatible types: '[3]u8' and '[]u8'"

1543067148
Hejsil
No, my example is just to make it more clear why it doesn't work

1543067197
Hejsil
[N]u8 -> []const u8. [N]u8 does not cast to []u8

1543067242
hio
oh okay, dont you think that this should automatically convert? to me [3]u8 and []u8 really dont look different enough to justify giving out a compiler error

1543067263
Hejsil
They are very different types though

1543067292
Hejsil
Zig gives you the const slice for free, because it is a lot safer than then mutable one

1543067307
Hejsil
So you have to be explicit about it, when you want to mutate it

1543067387
Hejsil
Do you want @typeOf(chars) to be []u8 or []const u8, btw?

1543067411
hio
I generally want as little const pollution as possible, to me this is just annoying

1543067469
Hejsil
Then this is probably what you want: var bla = "bla"; var chars = std.io.readFileAlloc(a, "/home/pc/test/myclass.dart") catch bla[0..];

1543067583
Hejsil
Or maybe this is probably the most correct way (so you can free chars regardless of error)

1543067584
Hejsil
var chars = std.io.readFileAlloc(a, "/home/pc/test/myclass.dart") catch try mem.dupe(u8, "bla"); defer a.free(chars);

1543067603
Hejsil
But idk what you're trying to do

1543068175
daurnimator
Hejsil: what if you wanted the result to be const?

1543068199
daurnimator
==> how do you cast the result of readFileAlloc to const while doing the catch as well?

1543068217
Hejsil
var chars = std.io.readFileAlloc(a, "/home/pc/test/myclass.dart") catch "bla"[0..]; will get you a []const u8

1543068233
Hejsil
because @typeOf("bla"[0..]) == []const u8

1543068238
Hejsil
and []u8 -> []const u8

1543068274
Hejsil
I think copy-elision will allow this: var chars: []const u8 = std.io.readFileAlloc(a, "/home/pc/test/myclass.dart") catch "bla";

1543068299
Hejsil
Which is a lot cleaner

1543069111
andrewrk
Hejsil, the problem with that is you don't know what to defer for cleanup on the next line

1543069170
MajorLag
hryx, I think the idea is to eventually remove the type.field method of getting bit_count, is_signed, etc. in favor of using std.meta. To that end, a PR I did recently includes adding 'std.meta.trait.isSignedInt/isUnsignedInt', which works with comptime_int. I don't know if it will be as simple a fix as replacing that one piece of code, but it could be.

1543069563
Hejsil
andrewrk, ofc. I just mostly decided to look over the fact of freeing chars because it wasn't really part of the question

1543069571
andrewrk
fair

1543069572
Hejsil
And he could use an arena for that

1543069578
andrewrk
good point

1543069698
daurnimator
andrewrk: I'm about to head to bed now. Anything questions you have now before I do?

1543069724
andrewrk
daurnimator, nope but I should have a response for you when you wake up

1543069732
andrewrk
thanks for taking the time to make that comment

1543069757
daurnimator
andrewrk: I don't thinK I was super clear in what I said. hopefully the psuedo code speaks for itself.

1543069809
andrewrk
I'm probably going to ask some follow up questions - it seems like we have different ideas of how this would be implemented

1543069823
daurnimator
also I just read about @newStackCall. my example can probably be implemented more than I thought....

1543069858
andrewrk
I think you're advocating for stackful coroutines and I'm advocating for stackless coroutines

1543069878
daurnimator
yeah I am currently advocating stackful ones

1543069896
andrewrk
I think that's the fundamental disconnect. maybe I need to address that question directly in the proposal

1543069899
daurnimator
perhaps you could post your rationale of stackless vs stackful?

1543083089
andrewrk
Hejsil, I know in my head how we can support structs with comptime fields, and I think it is the solution to var args / tuples

1543083176
Hejsil
The only way I come up with, was to make comptime fields be definitions of the type

1543083253
andrewrk
we might not expose the feature in struct {} syntax, but fields themselves can be comptime. if you iterate over the fields, these are included as one of them. but the value is a comptime constant

1543083258
Hejsil
Was playing around with generating types (in userland) that could have both comptime and runtime fields, and I just ended up having a list of runtime fields which had storage, and then a list of comptime fields, which where "definitions" of the type it self

1543083295
andrewrk
the comptime fields and values will be part of the struct type (really, every anonymous struct literal will create its own type just for that value)

1543083322
Hejsil
I see, so we came to the same conclusion on that

1543083328
Hejsil
I guess that could work for ano structs

1543083394
andrewrk
I think this is good. I feel confident about this as a resolution to var args / tuples

1543084698
andrewrk
woo!! empty main function with simple panic handler now compiles & runs in copy elision branch

1543084798
Hejsil
Wuuh!

1543084818
andrewrk
that means that bootstrap.zig, builtin.zig, and compiler_rt is all working

1543084839
andrewrk
well. at least that they're able to build

1543085788
andrewrk
diltsman, you're working on an arm os right? is your code open source?

1543085821
andrewrk
I'm looking at freebsd and linux source for how to do PSCI interop but it's rather convoluted

1543085881
errpr
On my PC, `@intCast`ing a negative c_short to u32 at runtime gives me max 32 bit integer instead of a runtime error. The other signed C types still cause an error though.

1543085904
errpr
is this for compatibility or something?

1543085990
andrewrk
errpr, let me see if I can reproduce the behavior. what value are you casting?

1543086001
errpr
var value: c_short = -1;

1543086114
andrewrk
errpr, I just confirmed the behavior and it's a bug. It also should be easy to fix, so let me have a look.

1543086135
errpr
cool.

1543087899
andrewrk
errpr, I created a fix - now I'm just running the tests

1543088804
andrewrk
errpr, fixed. a new build should be available on ziglang.org/download within 2 hours

1543089733
diltsman
andrewrk: Right now I am working on blinking an LED.  I have an issue where my code to initialize .bss is hard faulting.  I haven't had time to track it down yet (relatives visiting).

1543089855
andrewrk
diltsman, what target are you using? aarch64 or armv8?

1543089910
diltsman
armv7m

1543089920
andrewrk
ah, ok. I'm targeting aarch64

1543089935
andrewrk
sounds like we'll overlap a little, but not quite as much as I thought

1543089940
diltsman
I do embedded systems.  Cortex-M is about as large as I ever get to.

1543089958
diltsman
Honestly, the last project I did at work had a PIC with 768 bytes of RAM.

1543089966
andrewrk
fun!

1543089998
andrewrk
I'm happy you're exploring this space with zig - I'm sure you'll run into some stuff that needs fixing

1543090036
andrewrk
how much ROM did that system have? for code and constant data?

1543090054
diltsman
2k words of code space, no EEPROM.

1543090060
diltsman
14-bit instruction size.

1543090077
diltsman
32.768 kHz clock.

1543090136
diltsman
Right now I am trying to figure out the most efficient way to handle the memory mapped I/O for the ARM.  From what I have seen, Zig packed structs don't do nearly as much as I would need.  I have to ensure that reads/writes happen in 32-bit chunks, no matter the size of the fields.

1543090178
andrewrk
right, and we still have that related bug

1543090195
diltsman
Yep.

1543090281
diltsman
I will work up an initial RFC or something related to what I would need from packed structs for them to be useful in my use case.  I expect that most/all of it won't be adopted, but I suspect that it would be interesting to see what I don't see as being possible with them.

1543090310
diltsman
Of course, with family in town, it could be a while.

1543090328
andrewrk
that would be much appreciated. at the very least, the use case you are presenting must be solved in some satisfactory way

1543090340
andrewrk
(or at least have a planned solution)

1543090488
diltsman
Sure.  Everything that I want/need to do can be done with u32 arrays and bit masking, but it would be nice to be able to use a language feature instead.

1543103510
suirad
anyone there mind giving me a hand?

1543103788
benjikun
whatcha tryin to do?

