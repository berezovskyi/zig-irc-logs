1518289602
skyfex
andrewrk: Btw, the reason I asked about the self hosting compiler vs C++ source... i was thinking about trying to contribute, but wasn't sure which one would be best to work on

1518289992
andrewrk
skyfex: well the self hosted one would certainly be the most fun :-)

1518290012
andrewrk
I think the self hosted one because it's not super complicated yet

1518290037
andrewrk
And it doesn't have arbitrary decisions in it that make it hard for people to understand the code

1518290053
andrewrk
Whereas I've allowed the c++ code to accumulate some cruft

1518290084
andrewrk
E.g we could work towards zig fmt in the self hosted compiler pretty easily

1518290211
skyfex
Once the self-hosting compiler is done, have you thought about generating C code from Zig code, instead of maintaining the C++ version? There is this WIP LLVM C backend I think

1518290264
andrewrk
skyfex, I don't think that solves the problem it purports to solve

1518290300
andrewrk
one of the reasons to keep the c++ source and never delete it is for package maintainers that want to bootstrap the compiler, proving that there is no backdoor

1518290318
andrewrk


1518290361
skyfex
ah, good point

1518290387
andrewrk
rust has a crazy complicated bootstrap process that involves dozens of steps

1518290398
andrewrk
in zig it will always be the 3 steps outlined in the current README

1518290423
andrewrk
the downside is we forever have to maintain the c++ compiler

1518300486
jfo
andrewrk: got that error test to work! I really would like something like `expect` though for asserting errors in testing

1518300523
andrewrk
we probably will never have that

1518300529
jfo


1518300542
jfo
why not? will you stick with just assert?

1518300549
andrewrk
that looks pretty good

1518300571
andrewrk
jfo, you should panic if you get OutOfBounds when you expected Overflow

1518300577
andrewrk
and vice versa

1518300602
jfo
ok

1518300607
andrewrk
error.OutOfBounds => @panic("wrong error")

1518300637
jfo
couldn't I `else` that if I didn't need to treat different errors differently?

1518300644
andrewrk
it seems like running a bf program should probably only have the OutOfBounds error right?

1518300662
andrewrk
yeah you could, unless you want to assert to the compiler that these 2 are the only possible errors

1518300682
jfo
yes but the overflow happens before that would happen since the index gets decremented before I use it as an index

1518300697
jfo
whereas the upper bound doesn't overflow, so they are different errs

1518300712
andrewrk
error.Overflow is coming from std.math.sub. You could just do this:   ptr = sub(u16, ptr, 1) catch return error.OutOfBounds;

1518300731
jfo
a distinction I wouldn't have considered without zig's pedantry :)

1518300736
jfo
ah yeah that's a good point

1518300742
jfo
gtg brb

1518301140
jfo
that's interesting how the og thrown error is an overflow but my program can treat it as an out of bounds, the errors are really malleable huh?

1518301168
jfo
I decide how I want to treat the throw

1518301174
andrewrk
exactly

1518301180
andrewrk
it's just an enum value

1518301218
andrewrk
using "try" to bubble up error codes is good for prototyping something. then when you get closer to finalizing an API, think more carefully about the possible errors you're returning

1518301282
jfo
can you talk about why you wouldn't want something like `expect(thing, error.Error)` to be shorthand for unwrapping the error and dealing with it in this way? Just in testing, of course. Somewhere you said we might get assert(err == error.Error), is that off the table too?

1518301352
andrewrk
assert(err == error.Foo) works now

1518301366
andrewrk
oh you mean if `err` is an error union and not an error set

1518301408
jfo
I fuzzy on the difference

1518301425
jfo
but in the first case, I would still have to unwrap it first, right?

1518301431
jfo
I'm* fuzzy

1518301471
andrewrk
you could write expect in userland

1518301535
jfo
not a bad way to say WONTFIX :)

1518301559
jfo
anyway, looking forward to the compiler thing tomorrow, do you have some thoughts on what you're covering?

1518301717
andrewrk
yeah I'm going to start with an overview of the pipeline, then do a round of questions, then show off a bunch of features

1518301759
andrewrk
I was thinking maybe I could get you on the phone, and pipe the audio into the stream

1518301838
jfo
maybe! I'm happy to play the idiot questioner. I'll be watching from a hacker space here, I might not have good privacy though

1518301845
jfo
I'll definitely be on the chat at the least

1518301895
jfo
I'm most interested in how the zig compiler interacts with llvm, and how and where they touch each other

1518301941
jfo
that and a general overview of the compiler structure

1518301943
jfo
brb

1518301976
andrewrk
yeah, I'll make that clear

