1528243630
andrewrk
dbandstra2, the issue that intends to address this in a big way is well-defined copy elision

1528243639
andrewrk


1528243711
andrewrk
I think the proposal is stale, but bottom line is that your gist would actually work correctly

1528245104
dbandstra2
what defines whether a value is considered copyable/non-copyable?

1528245482
dbandstra2
currently you can return any struct... if in the future some structs (but not others) get the elision, or, some structs work and some cause a compile error, what is the criteria ? would the user write some explicit keyword in the struct definition?

1528250216
GitHub77
[zig] andrewrk pushed 1 new commit to master:

1528250216
GitHub77
zig/master bbb565a Andrew Kelley: README: update support table...

1528251582
MajorLag1
andrewrk, is there an issue for annotations?

1528251615
andrewrk
MajorLag1, annotations of C code before translation? or of struct fields?

1528251799
MajorLag1
struct fields, or possibly other things too.

1528253844
andrewrk
dbandstra, I don't have the answer to that stuff off the top of my head. I'll need to re-think that whole issue when I get back to it

1528253864
andrewrk
MajorLag1, I don't think anyone created that proposal yet. would you like to do it?

1528253931
MajorLag1
I might do it tomorrow. I ran into a case where I'd liked to have used it, so I'm probably in the frame of mind to articulate an argument for it.

1528254055
dbandstra
andrewrk, no problem. hopefully as i get better immersed in the language i can be more constructive

1528255237
IntoxicatedHippo
How would you design an API for a library that parses json directly in to structs? Possibly involving nested structs and arrays.

1528255420
IntoxicatedHippo
I have a way of doing it in C but it's quite verbose and there's no way to check if it's valid

1528255508
andrewrk
IntoxicatedHippo, I know that tiehuis intended this API to be a low level json parsing API that you could build a reflection-based API on top of:

1528255532
andrewrk
now that we have @typeInfo and @field I think it should be fairly straightforward

1528255549
andrewrk
and potentially related to MajorLag1's upcoming proposal

1528255655
GitHub58
[zig] andrewrk pushed 2 new commits to master:

1528255656
GitHub58
zig/master bd13e75 Andrew Kelley: disable deref syntax for unknown length pointers...

1528255656
GitHub58
zig/master 0ccc186 Andrew Kelley: disable field access for unknown length pointers...

1528261129
GitHub94
[zig] andrewrk pushed 2 new commits to master:

1528261129
GitHub94
zig/master d3693dc Andrew Kelley: Pointer Reform: update @typeInfo...

1528261129
GitHub94
zig/master 76c8efd Andrew Kelley: add test for not allowing implicit cast from T to [*]const T...

1528268868
GitHub20
[zig] tiehuis opened pull request #1062: Add json.TokenStream (master...json-changes)

1528269512
tiehuis
IntoxicatedHippo: I was thinking something simple like this

1528269565
tiehuis
one more thing i didn't write there, but we could add json.Value as a field and delay parsing or allow parsing dynamic multi-typed arrays via that

1528269604
tiehuis
otherwise, i'd just start of simple and handle the common cases first, omitting the more complex ideas mentioned

1528272742
kristate
Trying to flush-out async IO. Posted a comment here:

1528272773
kristate
I wonder if we should tie scheduler functionality to allocators

1528273666
kristate
Here is a simple test harness for #938

1528282264
GitHub175
[zig] tiehuis pushed 1 new commit to master:

1528282264
GitHub175
zig/master 212449b Marc Tiehuis: Fix Log2Int type construction...

1528286580
Hejsil
Why is it not possible to export function that take/return pointers to Zig auto layout structs?

1528291210
MajorLag1
Does anyone know, is there a reasoning behind forcing input buffers to be exactly equal to @sizeOf(T) when converting between bytes and types, instead of >= ? For instance: std.mem.readIntBE

1528295736
GitHub138
[zig] BraedonWooding opened pull request #1064: Add newline to zig fmt error (master...patch-4)

1528295811
clownpriest


1528295833
clownpriest
working on a strings library. still super early, but hope is to cover a very large area of functionality

1528295919
clownpriest
i've only just started learning zig, so i'd imagine it's not the best code, but it compiles and runs

1528296212
andrewrk
clownpriest, neat!

1528296336
GitHub75
[zig] andrewrk closed pull request #1064: Add newline to zig fmt error (master...patch-4)

1528296337
GitHub10
[zig] andrewrk pushed 1 new commit to master:

1528296337
GitHub10
zig/master f389e53 Braedon: Add newline to zig fmt error (#1064)

1528296568
andrewrk
MajorLag1, that can be up for discussion.  I reasoned that if the number didn't match exactly, it was probably a mistake

1528296593
andrewrk
I'd be curious to see an example where that is not the case

1528296748
andrewrk
kristate, why not have ChildProcess.exec start the event loop (scheduler) and use it, and then deinitialize it before returning?

1528296871
kristate
andrewrk: Thanks for the reply/followup. (i) there could be a loop already running inside of the thread/instance and (ii) starting a new scheduler could be expensive

1528296914
kristate
also, waiting on one scheduler while another is already running is the same as blocking

1528297014
andrewrk
kristate, we'll definitely want to have a non-blocking API for child processes where you can use an already existing event loop

1528297029
andrewrk
the blocking API might simply create an event loop and then call down to this one

1528297063
kristate
andrewrk: that's why I thought it might be cool to piggy-back on the allocator since it seems to be tied to async already

1528297083
andrewrk
can you elaborate? I don't see allocators as being tied to async

1528297111
andrewrk
I would agree the other way around - async depends on allocators

1528297136
kristate
andrewrk: that is my understanding, async depends on allocators

1528297154
kristate


1528297181
andrewrk
right, to create a coroutine requires an allocator

1528297212
kristate
so when the coro is allocated, it could also register with an event loop that might be tied to the allocator

1528297286
andrewrk
here's the thing though: coroutines as a language feature currently do not require an event loop

1528297307
andrewrk
and an event loop can be created entirely in userland

1528297322
andrewrk
wait, are you suggesting a userland change or a language change?

1528297499
kristate
thanks for the good questions, I think more or less stdlib. I come from a C background and don't want to force loops on anyone. But, stdlib needs a loop

1528297526
andrewrk
did you see std.event.Loop ?

1528297527
kristate
I think the closest thing would be what apple did with objective-c, and possibly swift (but I haven't looked at swift)

1528297544
kristate
yes, but there is no infra to get a global loop

1528297567
andrewrk
but you can pass a loop as a parameter to anything that needs one

1528297580
andrewrk
the same as if you are using libuv in C

1528297587
kristate
I think that might be too much -- we already pass in the allocator

1528297599
andrewrk
the event loop has an allocator field

1528297612
andrewrk
so if you need an allocator and an event loop, you can accept only an event loop

1528297648
kristate
right, could be possible to do a parent-whatever-you call it to get a pointer to the parent struct

1528297680
kristate
but, in the case that such an allocator was not encased into an event struct, then what would happen? compiler error?

1528297686
andrewrk
not even that:

1528297697
andrewrk
I'm saying that if you have a *Loop you can get a *Allocator by doing loop.allocator

1528297763
kristate
how do you know that you're in a loop from an async function?

1528298002
andrewrk
if you need access to an event loop then you can make it be available from the parameters you pass

1528298015
andrewrk
here's an example:

1528298062
andrewrk
the async functions above actually don't need access to the event loop, but they would if they wanted to do other non-blocking stuff like networking or child process interaction

1528298156
kristate
stdlib is really tough to make async without some sort of trait for event loops and then also finding that event loop

1528298217
MajorLag1
andrewrk, I'm using it those functions to read/write struct fields from a file, in which case it is convenient to just pass `buffer[offset..]`. It isn't a big deal, I was curious because I'm looking at making a PR for some tweaks to std.mem and std.io to match their readInt/writeInt APIs, and fix an issue with writeInt not working on single bytes, and I was considering changing that assert.

1528298373
kristate
Apple provides a runloop per thread by default:

1528298404
andrewrk
the next thing I want to explore is multiplexing kernel threads onto coroutines

1528298418
andrewrk
that would be a single runloop

1528298484
kristate
andrewrk: generally, when is a good time for you? I am in Japan (GMT+9) and it's currently 0:21am

1528298541
andrewrk
my day started 2 hours ago (GMT-5)

1528298557
kristate
Cool -- is Zig full time for you at the moment?

1528298564
andrewrk
it will be starting friday

1528298570
kristate
awesome

1528298599
andrewrk
I'm planning on making an announcement blog post to try to gain some momentum

1528298680
kristate
As much as I have gotten into Rust, I still like programming C. With Zig, I really like how a lot of the power of LLVM is exposed in the builtins

1528298690
GitHub190
[zig] andrewrk closed pull request #1062: Add json.TokenStream (master...json-changes)

1528298694
GitHub42
[zig] andrewrk pushed 1 new commit to master:

1528298695
GitHub42
zig/master e7f141b Marc Tiehuis: Add json.TokenStream (#1062)...

1528299398
kristate
andrewrk: is this proposal still valid?

1528299563
andrewrk
kristate, I deviated a little from that proposal in the implementation and I have yet to document it

1528299579
kristate
okay, I like how the event loop is included

1528299664
kristate
If we can agree on an interface/trait for loops and async i/o, I can start to rework some of stdlib

1528299672
kristate
I really want to get networking up

1528299819
andrewrk
I agree it's a high priority issue

1528300470
kristate
andrewrk: what would be a good way to setup a global variable for the run loop? pub var?

1528300535
andrewrk
yes, if a global variable is the right path

1528300558
andrewrk
I think that we can make progress in the std lib even if we have to refactor it later

1528300567
andrewrk
we can get networking going and then figure out how to restructure it

1528300640
kristate
If you have time, it would be great to get a table outlining how much stdlib is complete -- that is, which parts are set in stone, and which parts are WIP

1528300655
kristate
personally, I am thinking abou

1528300657
andrewrk
good idea

1528300668
andrewrk
in general, until 1.0.0 everything can potentially be changed

1528300671
kristate
personally, I am thinking about taking the best of std and starting over

1528300672
andrewrk
we have no stability yet

1528300684
kristate
I like how there is no reliance on libc

1528300688
andrewrk
std largely exists as a way to test out the language, until the language is stable

1528300693
kristate
and I see that you have lots of syscalls

1528301432
nc-x[m]
How will I go about converting [1]u8 to []u8 ?

1528301734
andrewrk
nc-x[m], array[0..]

1528301838
nc-x[m]
Sorry my question was vague. How do I convert "abc" to []u8 directly in a function call. Using the above syntax I get a []const u8 :(

1528301870
nc-x[m]
To workaround, I am currently first saving it to a variable and then converting it

1528301955
andrewrk
nc-x[m], in zig you have to always be able to answer the question, "where is the memory?"

1528301973
andrewrk
the answer for string literals is, it's in the global constant .data section

1528301989
andrewrk
you cannot mutate string literals, so taking a reference to them gives you a []const u8

1528302009
andrewrk
if you want a mutable slice, you have to answer the question of "where is the memory?"

1528302064
nc-x[m]
So I have to always first save them in a variable before converting them? No other workaround?

1528302293
andrewrk
if you save an array in a local variable of a function, you are answering the question with "the memory will be in the stack frame of this function". if that answer is acceptable then that is the best place to put the memory

1528302312
andrewrk
another place is globally, if that makes sense. otherwise you will have to heap-allocate and then be sure to free the memory when done

1528307446
GitHub105
[zig] isaachier opened pull request #1065: Fix const-ness of buffer in replaceContents method (master...const-buffer-replace-fix)

1528307940
Dodo
hi!

1528308133
Dodo
can I use const Iterators yet? ;p

1528308527
andrewrk
Dodo, what do you mean?

1528308600
GitHub172
[zig] andrewrk closed pull request #1065: Fix const-ness of buffer in replaceContents method (master...const-buffer-replace-fix)

1528308601
GitHub122
[zig] andrewrk pushed 1 new commit to master:

1528308601
GitHub122
zig/master 4fc6018 isaachier: Fix const-ness of buffer in replaceContents method (#1065)

1528308622
Dodo


1528308824
Dodo
in the file "Iterator.zig", there is this one line on line 88... "self.data.small_buffer.flag_byte = 1;"

1528309918
GitHub193
[zig] andrewrk opened pull request #1066: fix std.os.windows.PathFileExists specified in the wrong DLL (master...windows-path-file-exists)

1528313824
GitHub98
[zig] andrewrk closed pull request #1066: fix std.os.windows.PathFileExists specified in the wrong DLL (master...windows-path-file-exists)

1528313824
GitHub65
zig/master b11c5d8 Andrew Kelley: fix std.os.windows.PathFileExists specified in the wrong DLL (#1066)...

1528313824
GitHub65
[zig] andrewrk pushed 1 new commit to master:

1528329428
clownpriest
are there any built in benchmarking functions/tools yet?

