1516667533
jfo
andrewrk: is the hello world on the current docs page meant to build with master or with the tagged release

1516667552
andrewrk
jfo, the docs has the tag/branch in the URL

1516667561
jfo
ah great

1516667574
andrewrk
e.g. there is

1516667584
andrewrk
note that the master branch one now is automatically tested

1516667591
andrewrk
so all those code snippets are correct

1516667664
jfo
yeah I saw that ++

1516667689
jfo
I've got a brew formula ready

1516668218
andrewrk
awesome

1516668454
jfo
there are a few things to peep before submitting a PR, I will make an issue

1516668534
andrewrk
I'll have a look

1516668556
andrewrk
anything I can help with on the linguist issue?

1516668925
jfo


1516668941
jfo
yes, you're welcome to be the source of truth re: categorization in the grammar

1516668959
jfo
I will be able to take a look at it this weekend some more but I thought I'd throw it out there.

1516668992
jfo
I think it is worth thinking through it though, and being as specific as the schema of those standard classes allows

1516669030
jfo
as the syntax of the language is still evolving a lot, this will need to be maintained alongside it, at least for major release imo

1516669068
jfo
and I'll be looking forward to that compiler tour sometime :) we'll have to skype

1516669123
jfo
I have gtg to bed but I will ttyl. Please lmk your thoughts on the homebrew formula, pinning llvm@5 and how to do it in the confines of the homebrew guidelines might be a question for them, but this is basically following the readme installation instructions. I was surprised it was so easy tbqh

1516669127
jfo
see you!

1516678076
GitHub89
[zig] andrewrk pushed 1 new commit to master:

1516678076
GitHub89
zig/master cf39819 Andrew Kelley: add new kind of test: generating .h files. and more...

1516680412
GitHub23
[zig] andrewrk pushed 1 new commit to master:

1516680412
GitHub23
zig/master fa7072f Andrew Kelley: docgen: verify internal links

1516704129
GitHub75
[zig] tiehuis opened pull request #716: Add array type handling for gen_h (master...export-c-additions)

1516712383
MajorLag_
I have to admit to being annoyed by tabs being invalid. It seems you've made a decision to end stupid tab vs space arguments by being needlessly draconian.

1516717271
GitHub92
[zig] andrewrk pushed 1 new commit to master:

1516717271
GitHub92
zig/master b8dcdc7 Andrew Kelley: Merge pull request #716 from zig-lang/export-c-additions...

1516717274
GitHub104
[zig] andrewrk closed pull request #716: Add array type handling for gen_h (master...export-c-additions)

1516723027
andrewrk
MajorLag_, soon you'll be able to use `zig fmt` to fix spacing issues. would this resolve your annoyance?

1516723058
andrewrk
also I'm curious what OS you're using

1516723073
andrewrk
ah, windows right? you ran into that LLD error

1516725662
GitHub187
[zig] andrewrk pushed 1 new commit to master:

1516725662
GitHub187
zig/master c2838f2 Andrew Kelley: fix printf format specifier

1516726454
andrewrk
I'm also curious about your text editor. Visual Studio?

1516727429
MajorLag_
andrewrk, it's a minor thing. Notepad++ doesn't have a way to specify tab->space conversion for user defined languages so I have to set it as the default. The annoyance is philosophical, really, I don't believe it is the compiler's job to enforce formatting. With tabs and newline, not a big deal, but if it were to start mandating K&R indentation or something I'd probably just give it up.

1516727825
andrewrk
we're not going to do something like that. Although it is planned to catch accidentally mis-indented code

1516727912
andrewrk
josh wolfe makes an argument for line endings here:

1516727995
andrewrk
also, sounds like we should make a pull request to notepad++ adding zig

1516727995
MajorLag_
How would you define "accidentally"?

1516728035
andrewrk
for example:

1516728080
andrewrk


1516728115
andrewrk
it doesn't enforce how much you indent, just that you do, when you nest something, and that you outdent correctly when you unnest something

1516728451
MajorLag_
I doubt that will cause me any grief, but it might for someone who has a lot of nesting and a narrow column limit. Still, seems like it would catch enough mistakes to justify it anyway.

1516728527
andrewrk
it still allows indenting with, e.g. 1 space

1516728544
andrewrk
as long as you are consistent for a given nesting column

1516736118
MajorLag_
How would one go about declaring a slice and initializing it? []u8{...} throws a type mismatch error []u8 vs [100]u8.

1516736174
andrewrk
MajorLag_, you have to consider the difference between the actual memory data, and a reference to said data

1516736197
andrewrk
what you initialize is actual data - this would be an array. then you take a slice of that array, which is a reference

1516736225
andrewrk
one way to do this is to slice an array

1516736238
andrewrk
array[0..]

1516736265
andrewrk
with an initialization it probably has to go in parens:  ([]u8{...})[0..]

1516736272
MajorLag_
sure, but if I do that on the initializer it won't work because then I'm trying to cast const []u8 to []u8

1516736295
andrewrk
you want mutable data

1516736320
andrewrk
I suggest `var array = []u8{...};` and then `const slice = array[0..];`

1516736353
MajorLag_
In this case, it probably doesn't have to be, but yeah.

1516736420
andrewrk
if you show me the non-working code I can probably suggest a fix

1516737196
MajorLag_
I'm more or less just working out my understanding of Zig's syntax right now.

1516737407
andrewrk
there is some discussion related to that here:

1516740971
andrewrk
MajorLag_, I'm very open to an alternate syntax for slices and arrays if we come up with something better

1516740991
andrewrk
I think the syntax and semantics can evolve somewhat independently

1516748802
lqd
andrewrk: I presume something like `const message: [5]u8 = ['h', 'e', 'l', 'l', 'o'];` is no good ?

1516748929
andrewrk
lqd, const message = "hello";

1516748945
lqd
lol

1516748962
andrewrk
or: const message = []u8{'h', 'e', 'l', 'l', 'o'};

1516748980
andrewrk
or: const message: [5]u8 = [5]u8{'h', 'e', 'l', 'l', 'o'};

1516748985
lqd
yeah :)

1516749008
lqd
I was more thinking about your "open to alternate syntax for arrays" comment :)

1516749054
lqd
and I wasn't clear about that at all

1516749179
andrewrk
ahh

