1542758413
andrewrk
look at `zig --help`

1542758430
benjikun
zig help

1542758431
benjikun
not --

1542758435
benjikun
;3

1542758439
andrewrk
ah, thanks :)

1542758443
benjikun
np

1542758444
j`ey
you cant run that on godbolt unfortunately

1542758471
andrewrk


1542758472
j`ey
ok, reading main.cpp I got the answer

1542758477
j`ey
thanks

1542758524
andrewrk
j`ey, the builds on the download page are only ~25 MiB zipped, and you can just unzip and run zig. it should be painless to have zig running on your computer

1542758561
andrewrk
they're up to date too. CI updates the page after every commit, if the tests pass

1542758595
j`ey
cool, I may take a look, if godbolt gets too annoying :)

1542758647
andrewrk
godbolt is a liiiitle out of date. it doesn't have the big syntax revert yet

1542758662
andrewrk
to be clear that wasn't sarcasm. it's only a couple weeks old

1542758662
j`ey
how does godbolt get new releases?

1542758679
andrewrk
I believe there is a script that runs semi-regularly and downloads the latest off the zig download page

1542759795
benjikun
andrewrk: Do you think we'll get a regex in stdlib?

1542759807
andrewrk
yes

1542759818
benjikun
PCRE?

1542759823
benjikun
or do you think we'll go our own route

1542759827
andrewrk
here's one

1542759844
benjikun
interesting

1542759877
andrewrk
my goal is to have one that supports compiling the regexes at compile time

1542759888
andrewrk
idk about what flavor yet

1542759892
benjikun
true that'd be nice

1542761878
daurnimator
If you're going to have them in the stdlib then please use a non-backtracking implementation. e.g. re2

1542767145
daurnimator
misc idea: could @This() take an index so you could refer to a parent?

1542767560
MajorLag
That'll get confusing. Common practice is to put something like `const Self = @This();` in each struct that needs it. So you could do `const OuterSelf = @This();` ... `const InnerSelf = @This();` or something like that.

1542769651
daurnimator
MajorLag: yeah that's what I did.... gets a little ugly. would be nicer if @This() took a parameter :)

1542769671
daurnimator
MajorLag:

1542770361
benjikun
maybe you could keep an array with all of the selfs

1542770366
benjikun
dunno if that's possible

1542770401
benjikun
`this[1]` has a similar look to `@This(1)`

1542770458
MajorLag
I think that's probably possible.

1542770468
benjikun
same

1542770494
benjikun
trying to think of a clean way to do it

1542770947
benjikun
I'm not sure

1542770958
andrewrk
I don't think an array with the selfs is a good idea

1542770967
benjikun
yeah me either really, was just thinking about it

1542770974
andrewrk
just have normal consts and give them all reasonable names

1542771000
andrewrk
we must resist the urge to solve non-problems

1542771001
daurnimator
naming things is hard :P

1542771019
daurnimator
as we know, its one of the hardest problems in computer science :P

1542771037
benjikun
true, this isn't perl

1542771040
benjikun
hehe

1542775240
emekoi
is there a reason why all the Sigaction structs in std are missing the sa_sigaction field?

1542776494
emekoi
can anyone think of a way to cause a segfault reliably in zig?

1542776537
andrewrk
@intToPtr(*volatile bool, 0x0).* = true;

1542776784
hryx
Hey friendos, I'm making progress on docgen (#21) despite my heavy dayjob schedule! But I'm struggling a bit with something that maybe you can help me with.

1542776796
hryx
I need to read/tokenize/parse a root source file, resolve its imports, then repeat until the AST is complete.

1542776806
hryx
From what I can tell there isn't any single function in analyze.hpp dedicated to this, and to be honest I don't totally grasp whether I should be using the CodeGen functions for this or not -- there's no code generation involved here, but the CodeGen type seems central to many of the current multi-phase operations.

1542776823
hryx
Any tips would be greatly appreciated!

1542777060
andrewrk
hryx, the functions that are in codegen.cpp and analyze.cpp are admittedly not organized in any particular fashion. everything is kinda global

1542777115
andrewrk
hryx, have you looked at ir_analyze_instruction_import?

1542777140
andrewrk
that function calls file_fetch, add_source_file, scan_import

1542777142
hryx
That one, I don't think so -- I'll go peep it right now

1542777154
hryx
ok that sounds promising

1542779067
andrewrk
all 0.4.0 proposals have either been accepted, rejected, or postponed

1542779750
hryx
glorious. for me it was an educational flurry of email notifications

1542781602
benjikun
same for me hryx

1542781611
benjikun
and scrolling down my github feed

1542781650
hryx
heh!

1542794417
nbjoerg
andrewrk: those lists look more like you want access to the base architecture?

1542818009
MajorLag
any chance windows traces will be working again by 0.4.0?

1542821951
hio
what do you guys think about this capability of other languages: `var newList = oldList.Where(item => item == "hi");` and then it will return a new list with only those items? this feature would be called closures or anonymous functions right?

1542822290
MajorLag
hio, see:

1542822316
hryx
hio: that statement would require an anonymous function (not necessarily a closure), but more importantly it would be allocating a new list. In zig, there aren't any hidden or "automatic" allocations - the programmer would need to supply the space or an allocator object

1542822324
hryx
oops, beat me to it

1542823838
hio
hm how can this be made more convenient.. would be nice if it could feel like a managed language from a convenience viewpoint

1542824853
MajorLag
does anyone know why you need an else prong when switching on a bool? that seems like an oversight.

1542825185
errpr
seems odd to switch on a bool, isn't that an if?

1542825193
j`ey
var newList = oldList.Where(item => item

1542825197
j`ey
woops

1542825213
j`ey
var newList = oldList.Where(item => item == "hi").collect(allocator);

1542825215
j`ey
that'd be nice

1542825389
hio
it would still be more to type, is there really no other way? What if I could declare an allocator for a function and then it would allow me to call all functions without having to explicitly pass that allocator every single time

1542825410
hio
(just for the duration of that function)

1542825510
j`ey
I dont like that kinda implicitness

1542825524
hio
it's only implicit for a single function and you dont have to use it

1542825534
hio
you could make it implicit for even just a single if block

1542825559
hio
I believe jai has something similar but I dont remember anything about it, I just had that idea based on something he said

1542825579
hio
I think with jailang he passes in a context to every function automatically

1542825588
j`ey
thing is, the allocator is passed in as an argument to a function

1542825610
j`ey
so you'd have to pass an the argument to the right parameter magically

1542825668
hio
yeah, idk how the compiler would do that but it would be nice

1542825718
j`ey
too magic for me

1542825798
hio
well then what is your view on coroutines because those look like magic too

1542825845
j`ey
yeah that's also a big magic, but it's defined to be like that

1542825854
j`ey
allocators are just 'normal' objects, nothing special

1542826103
hio
ok i have an idea how it could be implemented

1542826361
j`ey
yeah?

1542826434
hio
make it an optional argument and then the compiler will use the local allocator if it was defined at a function level

1542826533
j`ey
or some kind of naned argument

1542826535
j`ey
named

1542828135
MajorLag
errpr, when used for assignment, I find there are cases where switch(bool) is more readable than if(bool). Specifically if your value expressions are long enough to run over the soft line limit, but short enough to fit if separated.

1542828339
MajorLag
consider the following example:

1542828479
errpr
I see

1542832764
andrewrk
MajorLag, yes, 0.4.0 can't ship without stack traces working again

1542832799
andrewrk
I'm sure it's a reasonably straigthforward fix. it's just hard mentally for me to context switch when I'm deep in copy elision

1542832841
andrewrk
I'm guessing llvm/lld is generating slightly different PDB and zig's debug info code needs to adjust to it

1542832901
andrewrk
hio, coroutines are going to look much less like magic after the rewrite. it will be perfectly clear where they're getting their memory from

1542835557
MajorLag
andrewrk, should we maybe have a "easy fix" tag or something like it to flag bugs that are low priority and could be a good starting point for people looking to work on the compiler?

1542835589
andrewrk
MajorLag, yes I think it's time we have that. I've started using "help wanted" since GitHub recommends those in the UI. Do you think we should rename it?

1542835680
andrewrk
although I tagged the valgrind issue "help wanted". I guess I also used it as "this requires skills other than intimate zig knowledge"

1542835697
MajorLag
I'm not sure. I don't think it communicates well that the problem is probably low-hanging fruit. I imagine it would be used in places where maybe the problem domain isn't well understood by regular contributors.

1542835712
andrewrk
I'm open to suggestions

1542835732
MajorLag
I'll try to think of some. Naming things is hard.

1542835736
andrewrk
agreed

1542836198
andrewrk
whew. just got @bitCast working with copy elision. it seems every semantic construct is a new puzzle to be solved

1542836268
andrewrk
it's pretty sweet though - @bitCast doesn't ever introduce copying, it ends up just turning into a pointer cast

1542836311
andrewrk
and that's guaranteed - pre-optimization

1542836534
andrewrk
oh interesting, with const values it's now hitting error: TODO handle comptime reinterpreted pointer

1542836536
andrewrk
which makes sense

1542836850
andrewrk
MajorLag, I renamed "help wanted" to "contributor friendly" with the description "This issue is limited in scope and/or knowledge of Zig internals."

1542836898
MajorLag
good choice.

1542842333
andrewrk
we're at 93% of the number of github repositories for them to accept the syntax highlighting pull request

1542842369
andrewrk
I'll check again on jan 1 2019

1542842603
suirad
lol ill find more things to reimplement in zig. lots of free time coming up.

1542843312
suirad
andrewrk: What exactly is checked to count for a repository?

1542843821
benjikun
suirad: They use the search "import extension: zig" currently to account for all repos that utilize zig

1542843840
benjikun


1542843888
benjikun
well, actually from that issue it appears they use harvester to count

1542843893
benjikun


1542843909
suirad
Ah yes, i remember seeing that now

1542843934
suirad
benjikun: thanks

1542843986
benjikun
np

