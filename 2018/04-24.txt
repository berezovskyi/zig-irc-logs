1524528638
MajorLag
any chance a bug was introduced recently regarding printing usize? I'm getting some odd results.

1524528678
MajorLag
wait, nevermind. They make sense when I pay attention

1524528715
MajorLag
...yeah, it helps to read the right section of code

1524554728
GitHub92
[zig] tiehuis opened pull request #949: Add initial complex-number support (master...complex-math)

1524557182
alexnask
@andrewrk How is a ConstExpr void value represented?

1524557253
alexnask
Say I'm building a ConstUnionValue, I set the tag then want to set the payload, should I just set it to null if the payload type is void?

1524557338
Dodo
how would I annotate that my function takes a slice?

1524557414
Dodo
take like an '[]const T' ?

1524557528
alexnask
Yes, if it is a read only slice

1524557555
Dodo
well, a Chunks Iterator should only have a read only slice

1524557569
Dodo
ChunksMut should have a write-slice

1524557679
Dodo
I can still shrink my version of the slice, right?

1524557758
alexnask
Right, taking a sub-slice does not modify the elements so it's fine :)

1524557775
Dodo
yeahh

1524557849
Dodo
is there a .len() method on slices?

1524557897
alexnask
a slice is a { ptr: &T, len: usize } struct

1524557900
alexnask
So just .len :)

1524557928
Dodo
hehe

1524557954
Dodo
no method like '.is_empty()' or something?

1524557967
alexnask
I don't think so

1524557969
Dodo
that would return a bool, true if .len is 0, false otherwise

1524557983
alexnask
@typeInfo() works for types with a void payload TypeInfo now! :D

1524558000
alexnask
Woop woop

1524558037
Dodo
mhhh, and splitting a slice so you get 2 subslices?

1524558054
Dodo
any buildin methods for that? or do I need to write my own?

1524558071
alexnask
Take a look at std.mem there may be somethings in there

1524558210
Dodo
there is split(), but that takes 2 slices

1524558246
Dodo
an returns an Iterator, which is not really what Im looking for

1524558303
alexnask
Right, I suggest you write your own helpers, they sound pretty trivial

1524558383
Dodo
that maybe should just return an array of 2 slices, untill tuples are a thing

1524558427
alexnask
probably, yes

1524558440
Dodo
[2][]const T <-- array of 2 slices, right?

1524558459
alexnask
Yup

1524558486
alexnask
Array of 2 tuples of const T to be exact

1524558492
alexnask
2 slices*

1524558492
alexnask
:P

1524558520
Dodo
maybe I should just remove Tuple type that Enumerate() uses anyway, it really doesnt work out

1524559145
Dodo
mh, Im getting this error: `error: invalid character: '\t' `

1524559641
alexnask
Set your editor settings to use tabs instead of spaces

1524559647
alexnask
spaces instead of tabs**

1524559769
Dodo
guess gvim uses spaces then

1524559783
Dodo
and VisualCode just displays them as tabs or whatever

1524559823
alexnask
Yes, VSCode surely has a tabs/spaces option too

1524559833
alexnask
every editor since 1980 should have one :P

1524559970
Dodo
I once read a story that using vim could make you a better programmer, because you'd be forced to write everything by hand

1524559978
Dodo
no autocomplete and stuff,

1524559995
Dodo
and it would improve your typing speed and such

1524560050
alexnask
I've tried vim a couple of times in the past, could never get used to the way it does things

1524560059
alexnask
Emacs is much better imho :P

1524560146
Dodo
I...have emacs installed I think

1524560155
Dodo
but never really got to it yet

1524560476
alexnask
"error: unable to evaluate constant expression"

1524560478
alexnask
Thanks compiler

1524560479
alexnask
:p

1524560516
Dodo
allright, Chunks is finished!

1524560788
Dodo
now ChunksMut, that should just return []T on each iteration I guess

1524560803
Dodo
that'd be a mutable slice , right?

1524560917
alexnask
Yes

1524561907
Dodo
woo, this also works correctly:

1524561936
alexnask
Nice :)

1524561948
Dodo
mhh what else...

1524561951
Dodo
Windows!

1524561982
alexnask
Do you have a .collect() or similar that consumes the iterator into an array?

1524561983
Dodo
&Windows(u32).init(array, 2) should give [1, 2], [2, 3], [3, 4] etc etc

1524561996
Dodo
Not yet, was planning on doing that also

1524562012
Dodo
but...collecting into an array?

1524562014
alexnask
What is the differene between Windows and Chunks?

1524562024
Dodo
Chunks do not overlap, Windows does

1524562032
alexnask
Right, gotcha

1524562052
Dodo
collecting into an array is kind of...dangerous

1524562054
alexnask
Well, yes, something like .to_array() would be a better name I guess

1524562064
alexnask
It should allocate the array ;)

1524562074
alexnask
On the heap

1524562077
Dodo
what if the iterator has more items then the len of the array

1524562091
alexnask
Right there needs to be some heuristic

1524562094
Dodo
what if the array has more space than the iterator

1524562101
Dodo
is there a Vector-like type?

1524562103
alexnask
The way I would do it is have a stack array of N elements

1524562122
alexnask
collect N at a time and move them into the heap allocated array (initially of size N)

1524562127
alexnask
reallocate the array for each chunk

1524562134
alexnask
There is ArrayList I think yes

1524562143
alexnask
Which would do all of this automatically

1524562149
Dodo
I mean, if there is a vector-like type, you could just consume the Iterator, calling .push() or .append() for each item

1524562173
alexnask
std.array_list

1524562176
Dodo
and not care about how the vector re-allocates etc, since you should not have to care about that

1524562186
alexnask
Sure

1524562246
Dodo
that should just be a function on Iterator, .collect() seems a good name I guess

1524562258
alexnask
@andrewrk I'm kinda stuck on @typeInfo, I'm generating a TypeInfo union at compile time, the tag (which is a TypeId) seems to work correctly

1524562267
alexnask
But as soon as I set a struct payload

1524562293
alexnask
I get an error from  'ir_resolve_const': "unable to evaluate constant expression" when I try to access the payload in a comptime ccontext

1524562333
alexnask
Which probably means the field access doesn't get that the whole thing is const.

1524562419
alexnask
hmm

1524562647
Dodo
error: expression value is ignored <-- mhh

1524562702
alexnask
_ = (expr)

1524562725
alexnask
You can't ignore any expression value (that includes returned values from functions) excpet for void s

1524562735
alexnask
_ = (expr) tells the compiler you don't need the expression

1524563078
Dodo
.collect() is a thing now

1524563101
Dodo


1524563125
alexnask
Nice :)

1524563150
alexnask
It's pretty feature complete now

1524563169
Dodo
it probably crashes if the allocation on .append() crashes, but well

1524563186
alexnask
You can propagate the error

1524563205
alexnask
It's really easy, one of the main selling points of zig

1524563213
Dodo
and it uses the debug allocator?? not sure if thats a good thing:

1524563228
alexnask
You should return !std.ArrayList(T) from collect

1524563240
alexnask
then in your while loop 'try list.append(val)'

1524563254
alexnask
And boom you get error handling on allocation failure

1524563269
Dodo
well, but the user handling the error of a collect() ...that might be weird? because when does that error happen?

1524563275
alexnask
You should probably add the allocator as an argument to collect()

1524563289
alexnask
What do you mean?

1524563305
Dodo
well, doesnt .append() only fail if there's no more RAM?

1524563324
alexnask
Probably

1524563327
alexnask
but

1524563348
alexnask
even if it's rare, the user should be able to catch it

1524563359
alexnask
If the user thinks it's not important, they can just "catch unreachable"

1524563370
Dodo
so returning an error for each .collect() call, while an error only occurs when there's no more RAM...

1524563374
Dodo
mh, fair enough

1524563389
alexnask
If their function returns an error union anyway, they can just 'try it.collect()' and they gain all the benefits

1524563411
Dodo
the allocator should just be a comptime argument?

1524563436
alexnask
It should be a &mem.Allocator (which is an interface much like Iterator(T))

1524563670
Dodo
so something like this:

1524563688
alexnask
Right, that looks good to me

1524564084
Dodo
mh, maybe functions like .max(), .max_by(), .max_by_key() (and also the .min() versions) are also nice to have

1524564112
Dodo
but that gives a bit of a problem, since that would only work on types that can use '<' and '>'

1524564144
alexnask
That's not much of an issue tbh

1524564159
alexnask
Say you have a max function in Iterator(T)

1524564175
alexnask
You would just write it like you normally would (using >, <)

1524564187
alexnask
And it just will give a compile error for types that don't support it

1524564219
Dodo
but the point is, that if I have my own struct, and an Iterator(my_struct) ...

1524564224
alexnask
What happens is that when you insantiate an Iterator(T)

1524564229
alexnask
Not all functions are generated

1524564234
alexnask
Only the ones you call

1524564244
alexnask
So if you make an Iterator(my_struct) and never call max

1524564248
alexnask
You won't get an error

1524564258
Dodo
I cant call those functions, while my_struct maybe holds 2 integers, so it is comparable

1524564261
alexnask
If you try to call max on it, that's when the error will kick in

1524564279
alexnask
Ah right, I though you were concerned with just the compiler erroring

1524564282
alexnask
Well in this case

1524564285
alexnask
you can have

1524564295
alexnask
max_filed(comptime field_name: []const u8)

1524564299
alexnask
field*

1524564309
alexnask
And use @field(my_struct, field_name)

1524564330
Dodo
nooo Im more concerned about how it's not going to work for types that dont have '<' and '>', while they can be compared in a way

1524564331
alexnask
which compiles down to the exact same as "my_struct.<field_name>"

1524564370
Dodo
or have all types implement '.lt()', and '.gt()'

1524564402
alexnask
Right, this is an option

1524564418
Dodo
wasn't there an rfc about being able to provide some kind of implementation of the compare operators for your own types?

1524564427
alexnask
You can check @typeId(T) == builtin.TypeId.Int or builtin.TypeId.Float and just use >, <

1524564436
alexnask
Otherwise generate code with lt(), gt()

1524564470
Dodo
mh, good point

1524564518
Dodo
however that would not really work for other buildin types, like arrays

1524564532
alexnask
Well, should you really be able to get the max array?

1524564546
Dodo
maybe you have an Iterator([10]i32) or something

1524564554
alexnask
How is the max array defined? The array with the biggest lenght? The array with the max element?

1524564584
alexnask
Imho if you need the maximum element from all arrays

1524564586
Dodo
the sum of the elements?..? pff hahaha,

1524564594
alexnask
You would probably it.flatten().max()

1524564601
Dodo
oh, .sum() !

1524564610
alexnask
Where flatten takes Iterator([N]T) and makes Iterator(T)

1524564644
Dodo
.flatten() is a better name than .flat_map() yeah

1524564645
alexnask
And if you need the max of the sum of the elements, I still think it's clearer for the user to request it

1524564654
Dodo
yeahh

1524564657
alexnask
By mapping a sum function and then taking the max

1524564690
alexnask
Using .lt() and .gt() is fine imho

1524564704
alexnask
If the user really wants it to work with an array, let them build a struct around it and define the methods

1524564757
Dodo
added a little @TODO, but first I have lunch!

1524564762
Dodo
brb!

1524566958
alexnask
Right, it seems the compiler is unable to access union fields at comptime

1524566968
alexnask
So I'll fix that along with @typeInfo I guess :p

1524567088
Dodo
how many people here work on the compiler? ;o

1524567106
alexnask
I just started :)

1524567116
alexnask
But I've seen 3-4 contributors up to now

1524567168
Dodo
ah allright! cool!

1524567512
alexnask
Writing compilers is like crack for me :P

1524567540
alexnask
If I start working on a bug I can sink into it so quickly and I just love the concept of writing a program that makes programs

1524567563
achambe
Haha, I wrote a c compiler then got burnt out pretty bad

1524567576
achambe
not even as complex as zig

1524567598
alexnask
The preprocessor is a bitch

1524567601
achambe
im appreciative of the work

1524567605
achambe
everyone is doing

1524567612
achambe
yeah preprocessor sucks

1524567680
achambe
My guess is for zig, the comptime interpreter is one of the more annoying things

1524567689
achambe
just a guess from reading issues

1524567733
alexnask
It's quite complex for sure from my 4-hour or so experience :p

1524567823
alexnask
But it's not that bad imho, there are just lots and lots of todos and unhandled cases

1524567836
alexnask
e.g. accessing unions at comptime, which I'm currently fixing

1524568154
Dodo
mh, I got somewhat interested in metaprogramming lately

1524568173
Dodo
but it's difficult to write something that writes code for you

1524568179
alexnask
@typeInfo is coming!

1524568195
alexnask
Which is a great first step

1524568207
Dodo
\o/

1524568209
alexnask
With @reify you then will be able to construct types

1524568216
alexnask
But arbitrary code is not possible to do

1524568222
alexnask
Like you can do in D/Nim

1524568231
Dodo
and what about something that in Python is called a decorator?

1524568279
alexnask
You can simulate that

1524568288
alexnask
By having:

1524568319
Dodo
@reify is something like a metaclass in python?

1524568351
alexnask
@reify will allow you to take a TypeInfo union and get a type out of it

1524568383
alexnask
TypeInfo looks like:

1524568408
alexnask
With lots and lots more structs

1524568436
alexnask
E.g. a struct info:

1524568450
alexnask
(It's missing method info but it will be added)

1524568477
alexnask
Currently I'm working on the inverse, @typeInfo, which takes a type and gives you a TypeInfo

1524568563
alexnask
Then I'll proably remove or deprecate all current metaprogramming calls (expect for @typeId, @sizeOf) and add a std.meta package that works on top of @typeInfo

1524569179
Dodo
btw, I wonder if 'O' could be infered here:

1524569268
Dodo
accessing 'other' 's T would solve it perhaps

1524569337
alexnask
Hmm

1524569358
alexnask
You could write a helper function to infer it I think

1524569366
alexnask
It would take @typeOf(other)

1524569386
alexnask
Remove the pointer, look for an 'it' field with @memberCount etc.

1524569396
alexnask
Get the type of the it field

1524569400
Dodo
or maybe add an 'Item' field on Iterator, than you should be able to say like 'other.item', right?

1524569422
alexnask
Right, then you would need the const Item = T; in Iterator

1524569435
alexnask
But you still need to get the iterator type to do IteratorType.Item

1524569456
Dodo
mhhhh

1524569464
alexnask
Actually, is other supposed to be an Iterator(O)?

1524569469
Dodo
yeah

1524569490
alexnask
Ok, so you could then do @typeOf(other).Child.Item

1524569519
alexnask
So Zip(T, O) -> Zip(T, @typeOf(other).Child.Item)

1524569522
ragge
hi! trying to target webassembly, but getting "unreachable" and "Aborted" when compiling:

1524569567
ragge
i'm running the latest ci build of zig

1524569579
ragge
any ideas? what am I doing wrong? :-)

1524569720
alexnask
Sorry, I can't help you there, never tried the webasm builds

1524569776
Dodo
but adding an 'Item' field would increase the size of an Iterator, or would it be optimized out?\

1524569844
Dodo
it's only needed for the type-system basically

1524569942
alexnask
const Item = T; would not add a field

1524569955
alexnask
You can think of it as a comptime field

1524570284
Dodo
it's only needed for the type-system basically

1524570288
Dodo
woops

1524570428
tiehuis
ragge: try using `export fn add` and `zig build-obj` instead

1524570455
tiehuis
that will export using the C abi, I haven't really played around with anything other than small snippets in that way

1524570475
Dodo
btw, the Range iterator, shouldn't it take just 'start: usize' instead of a comptime?

1524570492
Dodo
what if you wanted to create a Range from 2 variables that are known at runtime

1524570493
tiehuis
some notes:

1524570675
ragge
tiehuis: thanks!

1524570862
alexnask
@Dodo Right I have the bad habit of putting everything in comptime :P

1524570872
alexnask
Makes more sense to have them as runtime parameters for sure

1524570957
GitHub47
zig/master 0501e06 Marc Tiehuis: crypto throughput test now uses os.time module

1524570957
GitHub47
[zig] tiehuis pushed 1 new commit to master:

1524570966
alexnask
Comptime unions work now noice

1524571064
alexnask
Does anyone know how I'm supposed to make a ConstExpr void value?

1524571118
alexnask
(In the compiler, I mean)

1524571124
tiehuis
not sure sorry

1524571199
alexnask
I've got a hunch that an empty struct value would do the trick

1524571296
Dodo


1524571392
alexnask
Right

1524571515
Dodo
I should add Fold

1524572638
Dodo
mh, I might be doing something weird, but the compiler crashes when I run my tests

1524572801
alexnask
Can you send me the code?

1524572814
alexnask
Of the narrowed down test case if possible

1524572921
Dodo


1524572953
Dodo
removing 'var sum = range.sum()' gets rid of the crash

1524572960
Dodo
it must be my implementation

1524573000
alexnask
Sure, the compiler should never crash though

1524573087
alexnask
Can you change the &Iterator(Item) -> &Self?

1524573095
Dodo
when I run the tests, I get a crash popup from Windows: "zig.exe has stopped Working"

1524573100
alexnask
It's the same thing, although I don't think that would cause a crash

1524573117
Dodo
in both .sum() and fold?

1524573145
alexnask
yes

1524573150
alexnask
Although I'm pretty sure

1524573160
alexnask
The crash has something to do with the func

1524573169
alexnask
You pass add that takes 3 args

1524573176
alexnask
and call it with 2 args in fold

1524573213
alexnask
What I would do in your case is instead of having an add function

1524573242
Dodo
mh, look again at .sum()

1524573249
Dodo
that warn never even gets runned

1524573252
alexnask
I would have a type function that takes a T and defines an add function that takes 2 T's

1524573269
alexnask
Then use .fold(0, AdderStruct(Item).add) or smth

1524573299
Dodo
can I define a function inside a function?

1524573326
alexnask
Mb, I meant a function that returns a struct that defines a function

1524573345
alexnask
Not atm, you can define structs though :P

1524573351
Dodo
fine xD

1524573354
alexnask
or really, I would just do

1524573382
alexnask
self.fold(0, struct {  fn add(a: Item, b: Item) Item {  return a + b; } }.add)

1524573430
Dodo
so that's a hacky way for a closure? xD

1524573433
alexnask
Kinda ugly but you can think of it as a function expression syntax (with no captures) :p

1524573450
alexnask
Closures are not supported atm

1524573469
alexnask
I think the issue is with the argument capture and how that would all work safely

1524573507
Dodo
the argument can no longer be used once captured in the closure,

1524573512
Dodo
unless you capture by reference

1524573585
alexnask
Well, I for one would be ok with C++ style captures

1524573595
alexnask
But there's a lot of edgecases and ways to shoot your foot off

1524573639
Dodo
mh, I never had that much trouble with closures in Rust

1524573643
alexnask
+ all allocations need to be explicit, this is a design decision (so you can't just move all your captures to the heap and be done with it like in most other languages)

1524573657
Dodo
but hey, that's the point of Rust :3

1524573663
alexnask
Right but rust closures rely on the burrow checker

1524573710
alexnask
The whole language has strong guarantees about memory so closures profit off of that

1524573739
Dodo
\o/

1524573811
Dodo
one thing that would also be cool to have is to be able to have an Iterator over slices,

1524573852
Dodo
now there is the for loop,  but that doesnt work with our Iterators xD

1524573890
alexnask
Well you could write a SliceIterator

1524573899
alexnask
It sound pretty trivial

1524573992
Dodo
how should it be writting?

1524574007
Dodo
should it use the Range() Iterator to acces the index?

1524574040
Dodo
or should it take a slice, yank out a ptr to the first element, and a ptr to the last element, incrementing the ptr each time?

1524574067
alexnask
Both are possible, the second option sounds better to me though

1524574091
alexnask
So you can just store 2 pointers (current + end)

1524574121
Dodo
or like 'if (self.slice.len == 0) {return null;} var ret = self.slice[0]; self.slice = self.slice[1..]; return ret;'

1524574207
alexnask
Right, that's an option too, it's basically the same

1524574241
alexnask
If you think about it all you're doing is keeping a stable end pointer and bumping a pointer in front of it

1524574251
alexnask
I think it would actually pretty much generate the same code

1524574261
Dodo
the last one is less error prone I thing

1524574263
Dodo
*think

1524574730
Dodo
yay, done

1524574791
alexnask
:D

1524576194
Dodo
maybe I should do a SliceIterMut and SliceIter

1524576222
Dodo
where SliceIterMut returns &T, SliceIter &const T

1524576262
Dodo
that would avoid copying each item

1524578131
alexnask
wow i'm blind

1524578183
Dodo
what happend @alexnask ?

1524578202
alexnask
I was passing a pointer to the first field instead of a pointer to the 3rd field

1524578208
alexnask
And banging mu head against the wall :p

1524578221
alexnask
Noice Pointer @typeInfo up and running!

1524578513
Dodo
hehehehe

1524578584
Dodo
I one type spent half a day in Python wondering why I got an error that some type was not Iterable...turned out I passed in a tuple, instead of tuple[0]

1524578605
Dodo
but yay! :D

1524578619
Dodo
"I one type"...err, "I one day"

1524579058
alexnask
@andrewrk Hey, could you take a look at

1524579089
alexnask
I just want to know if it's the right way to approach the problem in a general sense, although I think it's probably fine

1524579275
hooo
is string concatenation via '+' planned?

1524579355
alexnask
@hooo You can use ++ ;)

1524579364
alexnask
It works on any slice

1524579430
hooo
cool thanks

1524579542
alexnask
No problem, ask away if you have questions

1524580048
Dodo
can you index into an &[]T ?

1524580060
Dodo
which is a ptr to a slice, right?

1524580175
alexnask
I think you'd have to deref it first

1524580185
alexnask
(*slice_ptr)[idx]

1524580294
Dodo
I was thinking to have .split_at() and .split_at_mut() take a pointer to a slice, and return a [2]&const []T / [2]&[]T so you don't lose the original slice, but still get 2 subslices back

1524580405
Dodo
why is this distracted me from my schoolwork ._.

1524580439
alexnask
Taking a  pointer to a slice seems weird to me

1524580535
alexnask
Why not take the slice by value and return [2][]T ?

1524580871
alexnask
schoolwork is for losers, come to the dark side :P (/s)

1524580886
alexnask
We have pointers and cookies

1524581313
Dodo
hahahaha

1524581339
Dodo
why not take the slice by value....well, don't I lose the original slice?

1524581394
Dodo
and Im making my life easy, making templates for the next schoolproject

1524581421
Dodo
15 forensic investigations and starting each time all over again, nah, that's not gonna work out

1524581689
alexnask
:D

1524581699
alexnask
What do you mean you will lose the original slice?

1524581720
alexnask
Taking it by value will just copy the ptr+len pair

1524581800
Dodo
oh right

1524581817
Dodo
Im still used to move semantics

1524581853
alexnask
Ah, right

1524581897
Dodo
and Im used that I could never take a slice by value, because it was not 'Sized',

1524581933
Dodo
at least, in Rust  a '[T]' is impossible to pass around, '&[T]' and '&mut [T]' is fine though

1524581990
alexnask
Right

1524582202
Dodo
I wonder, what was the first language to have a 'slice' type?

1524583419
MajorLag
Believe it or not, there's a wikipedia article for that. FORTRAN probably.

1524584499
Dodo
:O

1524585757
MajorLag
C was actually kind of an outlier in not passing length information along with array pointers.

1524590599
andrewrk
achambe, and their title slide says "For Great Justice"

1524590600
andrewrk
what did you mean about errdefer vs crashing? are you talking about how handling errors introduces untested code paths whereas crashing eliminates code paths?

1524590715
andrewrk
alexnask, yes, for ConstUnionValue the payload is nullptr when the tag type is void

1524590831
andrewrk
alexnask, for "unable to evaluate constant expression" it helps to use --verbose-ir

1524590843
andrewrk
but that's probably too much output, and there are some techniques to get smaller output

1524590935
andrewrk
alexnask, oh, you maybe needed to set constexprvalue->special = ConstValSpecialStatic

1524591349
andrewrk
alexnask, if you look at test/cases/union.zig you can see comptime union tests

1524591744
Dodo
how do I copy I directory (recursively) ?

1524591766
andrewrk
Dodo, that's a useful utility function we should have in the std lib, which we do not currently have

1524591840
andrewrk
alexnask, I'll have a look at your diff!

1524591840
Dodo
ah I see

1524591881
andrewrk
alexnask, want to go ahead and make this a work in progress pull request, and that way I can add some comments via github?

1524595750
Dodo
is there some way to annotate something is heap allocated?

1524597293
andrewrk
that's an interesting idea

1524597306
andrewrk
that should be comptime known

1524597325
andrewrk
Dodo, can you explain more?

1524597347
Dodo
uff

1524597365
Dodo
a pointer type that is heap allocated?

1524597378
andrewrk
I mean, what problem would it solve?

1524597380
Dodo
or rather, that points to heap memory

1524597387
andrewrk
what are you working on that made you want this feature?

1524597414
Dodo
nothing really, just some random thought I had

1524597622
Dodo
some languages have like a special type for that, just wondered haha

1524601298
Dodo
WindowsMut(slice, size) is weird xD:

1524606016
achambe
andrewrk: yaeh thats exactly what I meant about errdefer

1524606030
achambe
it helps write more correct cleanup code

1524606042
achambe
but often those codepaths are still less tested

1524606149
achambe
not suggesting that is something zig should try and fix, just an observation I guess.

1524607153
andrewrk
achambe, we sort of encourage the path to be handled correctly, by forcing the user to deal with error unions in some way

1524610607
alexnask
@andrewrk Sure, I'll go ahead and open a PR in a bit

1524610661
alexnask
The "unable to evaluate constan expression" was because ir_analyze_container_field_ptr was not implemented for comptime unions

1524613610
alexnask
@andrewrk Are ConstExpr void values null in general?

1524613658
alexnask
Or should they just be an empty ConstExprValue with a type and a special?

1524613869
alexnask
Huh is github down or am I having DNS issues?

