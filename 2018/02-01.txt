1517447954
GitHub81
[zig] andrewrk pushed 1 new commit to master:

1517447955
GitHub81
zig/master 3a11757 Andrew Kelley: add docs recommending to only have 1 cImport

1517448340
andrewrk
MajorLag_, I know how we already support struct field metadata

1517448516
MajorLag_
?

1517448633
andrewrk
just a sec, making an example

1517448882
andrewrk
MajorLag_,

1517448920
andrewrk
@field doesn't exist yet, but it's planned. It's field access, for example `some_struct.some_field` except some_field is a comptime string

1517449039
andrewrk
MajorLag_, oops, fixed something:

1517449142
MajorLag_
Interesting, but doesn't @memberXXX only work on enum types? And that meta-field takes up space in the struct at runtime?

1517449174
andrewrk
@memberXXX works on structs, enums, and unions

1517449187
andrewrk
except I think @memberType does not work on enums

1517449188
MajorLag_
huh, documentation made me think otherwise

1517449193
andrewrk
I'll update it

1517449227
andrewrk
oh, yeah. it used to. I need to add docs to struct and union sections

1517449315
MajorLag_
given that the field name is comptime accessible, one could just encode the serialization information in the field name itself. Or, use const members to tell you how to serialize each field. Yeah...

1517449387
andrewrk
zig has a concept of types that have 0 bits. this includes void and structs with all fields 0 bits (or no fields)

1517449398
andrewrk
types that have 0 bits do not generate any runtime code

1517449411
MajorLag_
oh right, so your way works fine then.

1517449439
andrewrk
it might work better for a library, that wants to provide a type, and then only do something with fields that are preceeded by a field of that type

1517449516
andrewrk
you could even have a function that accepted comptime parameters and returned a type, so it would be something like `_: serialize(endian.Big)`

1517449535
MajorLag_
I was thinking it would be useful for netcode. Often the way you represent a struct in memory is not the way you want it on the wire, and having the ability to write a struct once and produce an on-wire version automatically, as well as functions to transform between the two, would remove some tedium.

1517449564
andrewrk
yeah. I should make a proof of concept json parser/serializer

1517449602
MajorLag_
I'm going to make a note to play around with this later, see what can be accomplished even without @field.

1517450192
andrewrk
MajorLag_, docs updated for @memberXXX

1517450240
GitHub187
[zig] andrewrk pushed 2 new commits to master:

1517450240
GitHub187
zig/master 02b6122 Andrew Kelley: add docs for memberType, memberCount, memberName

1517450240
GitHub187
zig/master e6d4028 Andrew Kelley: docs: move source encoding section

1517453162
MajorLag_
hmm... interesting. const FieldType = .... if(FieldType == .... throws an undeclared identifier error on FieldType in the if statement

1517453180
MajorLag_
oh, nevermind compounded from previous error

1517453329
MajorLag_
Although this is legit:  error: no value count available for type '&Foo'

1517453365
MajorLag_
and I'm not sure how I express that I want the non-pointer version of the type, since I can't deref a type.

1517453376
andrewrk
PointerType.Child

1517453461
MajorLag_
neat

1517454061
MajorLag_


1517454098
MajorLag_
oh, shoot, I forgot to do the one step, I hardcoded the type to test it

1517454185
MajorLag_
just replace @intToPtr(&i32 with @intToPtr(&@memberType(StructType, i + 1)

1517454487
MajorLag_
this one is cleaner:

1517454606
andrewrk
oh yeah, forgot you could use offsetof like that

1517454640
andrewrk
cool

1517454684
andrewrk
I need to add support for `_` as a struct field

1517454758
andrewrk
I crashed the compiler by adding a string field

1517454790
andrewrk
oh, I know this bug. right now we don't support a var or const changing types inside a comptime loop

1517454802
andrewrk
but it works if it's just an expression

1517455144
MajorLag_
Next step: make a function that traverses a type hierarchy and prints out all members and values of a struct. That'll come in handy for debugging.

1517455188
andrewrk
yeah. and then integrate it with std.fmt.format

1517456332
MajorLag_
is there a reference for the members of type?

1517456976
andrewrk
MajorLag_, I believe that is a documentation TODO

1517457028
andrewrk


1517457046
andrewrk
look for "buf_eql_str" after that line

1517458143
tjpalmer
Read a bit more on the conversations from yesterday, including on various feature discussions.

1517458168
tjpalmer
Concerning Rust, this is on their 2018 roadmap: "Continuing to improve compile times. By the end of the year, recompilations on large crates should be around 30s."

1517458179
tjpalmer
Recompilations.

1517458231
tjpalmer
Anyway, I personally think that Zig feature set is at a good minimum viable product, by which I mean I think it's an order of magnitude better than C.

1517458312
tjpalmer
Other than ironing out pain points, I'd recommend not iterating much on the existing feature set. I personally think pushing toward a stable released 1.0 is more important.

1517458351
tjpalmer
I think it's a good enough foundation that it can be iterated on later. Just my two cents.

1517458386
tjpalmer
And pain points will be found best by writing Zig code, such as with the current work on the self-hosted compiler. Again, anyway, just my two cents.

1517458888
tjpalmer
Anyway, my point on Rust was explaining one reason why my concerns aren't anywhere inside their roadmap or planned eventual capabilities at all. When I found Zig, I was looking around because I was unhappy with Rust. (Speed and lifetimes, mostly.)

1517460812
MajorLag_
andrewk, ran into a few issues. 1: how do I escape "{" in a format string? 2: []const u8 seems to be TypeId == Struct and I haven't figured a way to detect that it's a slice.

1517461164
MajorLag_
I feel like slice is a special enough struct to get its own TypeId.

1517461213
MajorLag_
Or maybe TypeId should be a flags enum, so it could be struct and array? I don't know.

1517489313
MajorLag_
worked out how to get a raw '{' in a format string. was that documented anywhere?

1517496121
MajorLag_
andrewrk, think I've run into some bugs re: comptime vars and 'type'. Can't reassign a comptime var of type 'type' (attempt to dereference non-pointer type), and using a separate var crashes the compiler, I think this has to do with the use of 'undefined' in this context.

1517496906
hoppetosse
andrewrk: Would it be possible for 'break expression' automatically break the value into the current block?

1517497060
hoppetosse
equivalent to something like 'break :this expr'

1517497149
hoppetosse


1517497155
hoppetosse
this is the kind of function I mean

1517497244
hoppetosse
The if expressions for single assignment looked a lot cleaner with the implicit block return

1517497245
hoppetosse


1517497322
hoppetosse
(I know in this case you can leave the braces out since they're single expressions, but in the more general case)

1517499727
andrewrk
tjpalmer, I agree that pushing toward a stable 1.0 is important. there are a few high level things I want to get started first. 1. error sets (almost done) 2. concurrency/coroutines  3. some various minor language stuff that would be better to do before 1.0

1517499928
andrewrk
MajorLag_, `{{` and `}}` for literal curlies. nope it's not documented. when we get that auto doc generator going it's going to be wonderful

1517499962
andrewrk
I agree the TypeId situation for slices is problematic, would you mind opening an issue?

1517499991
andrewrk
hoppetosse, the only reason break can't do that is if you were in a loop it would be counterintuitive that it is not breaking from the loop

1517501274
MajorLag_
andrewrk, will do. For now I'm checking the typeName[0] for '[' to tell the difference. Ick.

1517501425
andrewrk
yikes

1517501447
andrewrk
at least it's a compile-time hack and not a runtime one, so you'd probably get an error if it didn't work

1517501685
andrewrk
hoppetosse, here's the proposal that addresses what you mentioned:

1517504782
MajorLag_
I think my comptime recursion might be overrunning the stack...

1517504896
andrewrk
that is unfortunately completely possible with the recursive design of the non-self-hosted compiler

1517504918
andrewrk
recursion is disallowed in the self hosted compiler for this reason

1517504955
andrewrk
(comptime recursion is fine, but we need to represent it in the compiler with an explicit stack on the heap)

1517504957
MajorLag_
Actually it's a runtime crash, so it has to be a runtime recursion issue.

1517505009
andrewrk
related:

1517505034
andrewrk
it's generally better to avoid non-tail-call recursion

1517505043
andrewrk
and use an explicit stack

1517505101
andrewrk
I think zig's coroutines, when they exist, might help solve recursion woes

1517505123
MajorLag_
yeah, I can probably refactor this differently. recursion was just the easy way. Interestingly only seems to happen using debug.warn to format and print ints.

1517505168
andrewrk
hmm.

1517505194
andrewrk
maybe because that involves several more stack frames?

1517505248
jfo
I wonder if there is an argument for moving the block vars into the braces and using that syntax for anonymous function declarations as well eg for (exes) |x| {...} becomes for (exes) {|x| ...}, and fn(x) {...} could also be written as {|x| ...}

1517505272
MajorLag_
or it could be something else. if I replace the variable with a constant it should still have to format it the same way, but then it doesn't crash.

1517505340
andrewrk
jfo, what would that argument be?

1517505427
jfo
it's not a strong argument but it feels more natural to me to contain that var in the block like that, mostly from ruby back in the day using {|var| ... } for blocks.

1517505483
andrewrk
so it's a syntactical argument

1517505661
jfo
yes, also just related to the discussion about anon fns

1517505686
jfo
but fn() {} is totally reasonable of course

1517505692
andrewrk
anon functions will look the same as a function definition, but with no name

1517506069
jfo
where did the || {} syntax come from?

1517506478
MajorLag_
andrewrk:   comptime var RootType = @typeOf(root);  if(... RootType is a ptr ...) { RootType = RootType.Child; }  =>  error: attempt to dereference non pointer type 'type'.   Is this a bug or am I not understanding something about comptime?

1517506590
MajorLag_
I suspect the latter. The check is happening at run time where 'type' isn't a thing i can work with like this?

1517506685
MajorLag_
In which case... I have to rethink how this works.

1517507359
andrewrk
MajorLag_, hm I think I need to see more code to understand

1517510357
MajorLag_
andrewrk, I'll probably be sending you something shortly. Want to see if life is any easier if I heap allocate the string, but my suspicion is that isn't the real problem.

1517511639
MajorLag_
Something else is going on here. It's as if format isn't cleaning up after itself or something. I don't know.

1517512254
MajorLag_
andrewrk:

1517512589
MajorLag_
Oh you know what, maybe this is a pointer alignment issue.

1517513005
andrewrk
let me see if this is an easy fix

1517513072
MajorLag_
the layout of the struct seems relevant, but I'm not sure how. If I don't change it and also don't print certain values it works.

1517513125
zesterer
Just thought you'd like to know... I installed zig using the AUR (i.e: building from source) and what I presume is part of the build process managed to use 1.2G of memory before I killed it.

1517513220
andrewrk
zesterer, this is prior to running `zig build` or after?

1517513294
zesterer
andrewrk: I don't know. The AUR package script does everything automatically.

1517513335
andrewrk
zesterer, did you run the check() ?

1517513338
zesterer
andrewrk: The last output I have looks like this:

1517513351
andrewrk
ah ok yes this is running the test suite

1517513430
andrewrk
zesterer, I'm pretty sure that's from this test:

1517513439
zesterer
andrewrk: I have no idea. "yaourt -S zig-git" was the only command I ran. Yaourt, the pkg script, and Zig's build system do the rest"

1517513451
andrewrk
it requires 2 GB I believe

1517513467
andrewrk
it's planned to support a memory cap in the self hosted compiler, but we're not there yet

1517513479
zesterer
Hmmm :\ Might be best to add some kind of warning. My computer froze for about 10 minutes

1517513487
andrewrk
I have a whole rant about that

1517513497
andrewrk
default linux memory management has overcommit on

1517513533
andrewrk
it lies about how much memory is available on the system

1517513538
andrewrk
and then when it runs out it shits its pants

1517513568
andrewrk
zesterer, you should be able to run some install command that skips the check() step

1517513574
andrewrk
I don't use arch, but I'm sure it exists

1517513603
zesterer
I can just alter the pkg script.

1517513620
zesterer
The maintainers should probably edit it though

1517513631
andrewrk
I mean it's not wrong. it just requires 2GBish of RAM

1517514380
andrewrk
MajorLag_, it's not a trivial bug, I'll file an issue for it later

1517514481
MajorLag_
But it is a bug? I can stop pulling my hair out trying to understand it?

1517514517
andrewrk
MajorLag_, it's for sure a bug

1517514545
andrewrk
I mean the code you sent me caused an assertion failure

1517514550
andrewrk
all assertion failures are bugs

1517514610
MajorLag_
huh, it just crashed for me. Maybe it's time to make sure I'm on current master again.

1517514666
andrewrk
you're on windows? I'm guessing you did a release build

1517514681
andrewrk
assertions are off in release builds

1517514697
andrewrk
I was unable to get a release llvm + debug zig on windows, it seems you have to choose one or the other

1517514717
MajorLag_
I'm on windows, but it was a test build

1517514723
andrewrk
and debug llvm + debug zig is extremely slow. it works, but it's unusably slow

1517514849
MajorLag_
does "zig test" build in release or something?

1517514877
andrewrk
I mean a release/debug build of zig compiler itself

1517514884
andrewrk
it has to do with -DCMAKE_BUILD_TYPE

1517514885
MajorLag_
ah, gotcha

1517514910
andrewrk
the wiki instructions for building zig on windows are for the release build

1517515139
hoppetosse
andrewrk: just saw the latest issue in the tracker, that's exactly what I meant

1517515172
andrewrk
hoppetosse, yeah I don't want to change break's behavior because it would confuse C users

1517515193
andrewrk
it  would confuse everybody, really

1517515207
hoppetosse
yeah, that's a good point, I just had no idea what else to call it =P

1517515307
MajorLag_
yeah, I'm not ambitious enough to build zig when there's a perfectly good artifact already built for me

1517515348
andrewrk
MajorLag_, you've been using the appveyor artifacts, yeah?

1517515354
andrewrk
I'm pretty happy with how that's been working out

1517515430
MajorLag_
yep

1517515523
MajorLag_
BTW, I see that I was dereferencing a struct in that code if a struct was a member of another. Changing that behavior seems to have avoided the bug, probably because the compiler was supposed to yell at me about doing that.

1517515549
MajorLag_
dereferencing a struct and then passing it into the recursive function that is.

1517515558
andrewrk
ah

1517517135
andrewrk
MajorLag_, I plan to modify the rule about structs having to get passed as &const T

1517517181
andrewrk
you'll be able to do something like: fn foo(bar: Bar) {}

1517517216
andrewrk
Bar being a struct, and it acts semantically like a value, but in the generated code it's a pointer (or a value, depending on what's faster)

1517517246
andrewrk
at the callsite, when you pass a struct this way, you're guaranteeing that the data won't change during the lifetime of foo

1517517261
andrewrk
that'll just be a way that you could cause undefined behavior (and maybe we insert a safety check for this)

1517517290
andrewrk
the benefit being that 1. it optimizes better and 2. it gives you more natural semantics

1517517382
andrewrk
it lets us put "noalias" on everything passed this way

1517517853
benzrf
ever since i read about the logic behind C's type declaration syntax it's seemed vaguely off-looking to see technically-more-reasonable syntaxes like "foo: &T"

1517517857
MajorLag_
I could see that becoming confusing. I might modify a value and return the struct thinking it's a copy, but it isn't. If the caller didn't expect the original to be modified that's a problem. Personally I'd favor having to be explicit one way or the other.

1517517921
andrewrk
benzrf, I'm not familiar with the logic, can you enlighten me?

1517517943
andrewrk
MajorLag_, modifying parameters is already not allowed

1517517950
andrewrk
that would be a compile error

1517517999
MajorLag_
so how could you cause UB if the compiler won't let you do it?

1517518016
benzrf
andrewrk: oh really?

1517518032
benzrf
well, "int foo" means foo is an int, right?

1517518038
benzrf
so "int *foo" means *foo is an int

1517518063
benzrf
and "int foo[3]" means foo[3] is an int ok well that one doesnt quite work

1517518085
andrewrk


1517518094
andrewrk
the "spiral rule" is pretty confusing

1517518127
andrewrk
var foo: &int;

1517518130
andrewrk
"foo is a pointer to an int"

1517518148
andrewrk
var foo: %?[]int;

1517518152
benzrf
hmm, never heard of that

1517518158
andrewrk
"foo is an error or null or a slice of int"

1517518172
andrewrk
no web page needed to understand this syntax

1517518174
benzrf
but if you know the precedences of expressions, you know the precedences of types

1517518196
benzrf
is *foo[3] derefing foo[3] or indexing *foo? well, that's also whether int *foo[3] is an array of pointers or a pointer to an array

1517518231
benzrf
or int (*x)(char, char) means that... well... *x(char, char) is an int

1517518282
benzrf
i dont, of course, believe that this is more reasonable than what zig does, or what literally any other language does

1517518283
andrewrk
benzrf, I appreciate the explanation, but I must confess I'm not finding it intuitive

1517518296
MajorLag_
andrewrk, another issue I see with having the compiler choose if structs are referenced or copied is if I do @ptrToInt stuff. I might not get what I expect.

1517518312
benzrf
it's just that i've gotten used to parsing c declarations that way, so looking at types in saner low-level languages triggers the same routine in my head, and it looks backwards

1517518314
benzrf
:v

1517518349
andrewrk
MajorLag_, you could cause UB if you had another thread, and modified the value there. that's pretty unlikely. the more common case is that you pass the same value to a function twice. I'll show an example, just a sec

1517518360
andrewrk
benzrf, I see

1517518388
andrewrk
I'm personally happy to retrain habits that have formed out of unfortunate necessity

1517518397
andrewrk
I know that's not true for everyone

1517518409
andrewrk
I keep conventions that already exist if they are harmless

1517518452
benzrf
well, i didn't mean it as a suggestion for a change :>

1517518460
benzrf
just a vague comment

1517518522
benzrf
as a connoisseur of type systems, i would never ever want C's bizarre mixing of type and bound name in anything with real types

1517518608
andrewrk
MajorLag_,

1517518629
benzrf
once you try to write a C type as its own expression instead of as a declaration, the parsability drops way off

1517518635
benzrf
not that it was great to begin with

1517518655
benzrf
s/instead of as a/instead of as part of a/

1517518668
andrewrk
MajorLag_, the compiler could figure out this one and make it a compile error, because it's pretty obvious that you aliased a mutable pointer with a const pointer, but you could obfuscate this enough so that the compiler couldn't catch it at compile time

1517518680
andrewrk
we could catch it at runtime with a secret field in Bar though

1517519398
MajorLag_
Ok, so how about if I explicitly say fn(foo: &Foo)? Will the compiler always give me a pointer to the struct? If so, I think having the compiler determine when it isn't explicit is probably fine.

1517519560
andrewrk
MajorLag_, in this case, it's a mutable pointer to a struct

1517519576
andrewrk
I'm not sure I understand the question

1517519584
andrewrk
you would only be allowed to pass a mutable pointer to Foo to that arg

1517519662
andrewrk
fn(foo: Foo)  would be explicit syntax for "I am passing a struct. The compiler may choose to pass a reference or a value. In case it is a reference, I promise to not modify the contents of the argument I pass for the duration of foo()."

1517519664
MajorLag_
If I'm understanding you correctly, then most of my objections go away. Because if I want to do crazy @ptrToInt stuff then I can explicitly say I need a pointer and the caller has to explicitly give me one.

1517519712
andrewrk
rather "...I promise the contents of the argument I pass will not be modified for the duration of foo"

1517519863
MajorLag_
and if they are, the compiler calls me out on it, or runtime checking does?

1517519868
andrewrk
yes

1517519878
andrewrk
that's the idea

1517519893
andrewrk
and it allows some pretty decent optimization opportunities

1517521753
MajorLag_
Is it just me, or are "result" and "return" just two different ways of saying the same thing in that proposal? The only real difference is that "return" only exists in special blocks called functions that get call/ret, calling convention, and stack manipulation wrapped around them.

1517521797
MajorLag_
Since we already know a function is a function by virtue of how it is declared and called, result seems like a redundant keyword to me.

1517521964
andrewrk
MajorLag_, according to the proposal, `result` and `return` would have the same behavior in the outermost block of a function

1517521994
andrewrk
`result` would be equivalent to `break :x` if the current block were labeled `x`

1517522097
benzrf
so andrewrk, if you're already embracing "we have a type of types and compile-time evaluation", why not go full dependent typing?

1517522099
benzrf
;)

1517522190
andrewrk
I'll give you a serious answer to that question

1517522196
benzrf
:O

1517522248
andrewrk
because there is no coherent proposal to add dependent typing which adheres to zig's goals, which, as a reminder, one of them is a low burden of reasoning about the language and type system when reading code

1517522267
MajorLag_
andrewrk, sure but imagine if that inner block were a function call instead of a block, it would use return. the only difference is that it isn't a function.

1517522270
benzrf
uhhh

1517522283
benzrf
then why is your type system turing complete :P

1517522339
andrewrk
MajorLag_, I'm guessing you're right, but I'm not following along with your example

1517522378
benzrf
wait hold on

1517522389
benzrf
wtf, you already HAVE dependent typing but only for arguments of type type

1517522391
benzrf
o.O

1517522398
MajorLag_
I'll try and give a more coherent argument in the thread later, I will be busy for a few hours.

1517522421
andrewrk
MajorLag_, fwiw I'm leaning towards rejecting the proposal, to keep the language smaller

1517522434
benzrf
oh wait

1517522549
andrewrk
benzrf, "why not implement dependent types" is an argument from language design. that's not how zig works. zig is use case driven. "I have this use case. The current language fails to handle the use case in an adequate way. Therefore some change needs to happen which fits within the goals and solves the use case"

1517522560
andrewrk
this is the reasoning that zig uses

1517522610
benzrf
hold on, is fn notation allowed in a test block

1517522624
benzrf
im fucking around trying some stuff and i get weird parse errors if i move something from outside the test block to inside it

1517522628
andrewrk
currently you cannot create a function inside a function

1517522658
andrewrk
I think you can work around it by making a struct inside a function and putting a function inside that

1517522721
andrewrk
a test block is a function body

1517522739
benzrf
ok wtf you actually are already dependently typed

1517522746
benzrf
o__o

1517522753
andrewrk
how so?

1517522765
benzrf


1517522776
benzrf
well, to a certain degree...

1517522793
andrewrk
how is this different than c++ templates?

1517522801
benzrf
i don't know anything about c+

1517522803
benzrf
+

1517522807
benzrf
ive generally tried to avoid it

1517522825
benzrf
im vaguely aware of templates being parametric codegen or something... i guess i can see how this would be the same thing

1517522837
andrewrk
that shouldn't compile

1517522857
andrewrk
you're not supposed to be able to modify any arguments, let alone comptime arguments

1517522940
benzrf
oh

1517522968
benzrf
well that works because the loop never runs

1517522990
andrewrk
I think it does run at compile time

1517522991
benzrf
actually if i plug in a len greater than 0 it doesnt let me reassign ty because it's not a pointer type or something???

1517523001
andrewrk
oh, because 0

1517523028
andrewrk
benzrf, ok I know what this is, this is a sinister problem

1517523029
andrewrk
just a sec

1517523061
andrewrk
benzrf,

1517523094
andrewrk
we're going to have to make & be only for address-of and use a different sigil for making a pointer type

1517523102
benzrf
o_o

1517523157
benzrf
btw this seems to hang indefinitely

1517523193
andrewrk
you're welcome to file a bug if you would like to be notified when I fix that

1517523201
benzrf
thats ok

1517523216
benzrf
if i do end up using zig for anything serious i obviously dont intend to pull this kind of shit there

1517523227
benzrf
mostly im just trying to torture the type system and compile time execution

1517523253
andrewrk
you can imagine, that in choosing how to spend my precious dev time on zig, I would prioritize solving the more common use cases first

1517523256
benzrf
:)

1517523272
benzrf
wait but how doest he & syntax thing relate to the ty reassignment issue

1517523274
benzrf
there's no & there

1517523311
andrewrk
look at --verbose-ir

1517523344
andrewrk
(I only say this because this can take your torturing to a new level)

1517523381
benzrf
jesus

1517523407
benzrf
hmm. this causes an assertion failure

1517523477
andrewrk
a trick to make it smaller if you want, here's  a stub:

1517523496
andrewrk
and then don't import std or anything. and the ir will be small

1517523728
andrewrk
benzrf, also @compileLog is useful for what you're doing

1517524451
benzrf
why is "export fn entry() { }" producing expected token '{', found 'EOF'

1517524483
benzrf
oh i need a return type

1517524523
benzrf
i'm still getting huge IR that mentions std, odd

1517524654
andrewrk
I could tell you if you show me the code

1517524747
benzrf
hmm, literally just "export fn entry() void {}" works

1517525016
andrewrk
did you include the panic handler?

1517525024
andrewrk
the default panic handler calls into std.debug.dumpStackTrace

1517525027
benzrf
ohhh

1517525036
benzrf
i didnt realize that overrode something

1517525048
benzrf
sorry heh

1517525168
benzrf
ok now this is deeply strange actually

1517525177
benzrf
this gives an assertion error

1517525186
benzrf
but if i remove the variable t and just put void in the return, it does not

1517525196
benzrf
compounding this: this branch shouldnt even be executed

1517525226
benzrf
this is kinda janky o.o

1517525357
andrewrk
there are a few compile time code execution bugs. I'll fix them eventually ¯\_(ツ)_/¯

1517525370
benzrf
it doesnt even seem to be an execution problem though...

1517525391
benzrf
zig: /home/benzrf/codes/builds/zig/src/ir.cpp:9760: IrInstruction* ir_get_var_ptr(IrAnalyze*, IrInstruction*, VariableTableEntry*, bool, bool): Assertion `var->value->type' failed.

1517525407
benzrf
oh, is that the interpreter

1517525415
benzrf
i assumed it was some sort of analysis

1517525448
benzrf
starting to think maybe type-value unification is a questionable idea outside of pure languages if you wanna be at all principled about it >.>

1517525461
andrewrk
benzrf, the interpreter and the analysis is the same thing

1517525464
benzrf
oh

1517525466
benzrf
huh

1517525481
andrewrk
analysis

1517525492
benzrf
hmmmmmm

1517525504
benzrf
wait do you mean that in a broad sense or as an implementation detail of zig

1517525509
andrewrk
the latter

1517525511
benzrf
oh hah

1517525531
andrewrk
but in the broad sense, yeah, it's called "abstract interpretation"

1517525541
benzrf
hmmmm

1517525544
benzrf
hold on

1517525595
benzrf
does that subsume interpretation where you treat variables as opaque & interpret as far as u can based on inferrable knowledge without having a specific value

1517525662
andrewrk
zig doesn't do that yet but it has plans to

1517525676
benzrf
interesting

1517525677
andrewrk
it does, essentially, 1 iteration of a lattice

1517525683
benzrf
lattice?

1517525696
andrewrk
a lattice is the structure you use for abstract interpretation as you described it

1517525704
benzrf
never heard of it

1517525713
andrewrk


1517525717
benzrf
oh hold on

1517525719
benzrf
is this like domains

1517525727
benzrf
oh lmao literally lattices

1517525733
benzrf
i assumed it was some separate programming thing

1517525912
benzrf
hmm....

1517525930
benzrf
dude, you could totally do some simple computational type theory tricks here

1517525933
benzrf
hmmm

1517526025
MajorLag_
before I head out: var x = i32(1);  x will be a mutable i32 with a value of 1.   var x = []i32{1};  x will be a length 1 array of muatble i32 with first value set to 1.  var x = ([]i32{1})[0..];  x will be a slice of const i32. Why not mutable?

1517526104
andrewrk
MajorLag_, you can reassign x. so x is mutable in that way. but an array literal - like string literals - are const if you don't initialize a var with them

1517526129
andrewrk
in fact, all literals are const, if you don't provide mutable storage for them

1517526143
MajorLag_
I ask only because it makes initializing a slice more painful than I think it should be.

1517526171
andrewrk
a slice is a reference. so you also have to tell zig where you want the data to go

1517526233
MajorLag_
yeah, I suppose. Usually when I'm doing this it never leaves scope, so the stack is fine, but I can see how that'd be a problem if I tried to return it.

1517526244
benzrf
hahahahahahahahaha

1517526328
andrewrk
benzrf, there's a way easier way to do this

1517526388
MajorLag_
I suppose if I return a [5]i32 it just copies? Even though, as far as I can tell from my playing with typeIds, arrays are always pointers.

1517526399
benzrf
andrewrk: error out in print_prime if n is not prime?

1517526422
MajorLag_
In fact, from what I can tell, they're pointers to a length and a data ptr just lik a slice...

1517526474
andrewrk
benzrf,

1517526503
benzrf
well, yes, but that wasnt the point

1517526512
benzrf
i just wanted to try 17:58 <benzrf> dude, you could totally do some simple computational type theory tricks here

1517526564
benzrf
this case being, defining types whose inhabitants are based on the validity of a proposition w/o themselves carrying a proof

1517526594
andrewrk
MajorLag_, this is

1517526601
andrewrk
no hidden copy

1517526623
andrewrk
once this issue is complete, there will be no hidden copies, and only using `=` can cause a memcpy

1517526634
aiwakura
people talking about zig on #osdev

1517526639
aiwakura
it's happening

1517526642
benzrf
O:

1517526643
aiwakura
we are taking over

1517526651
andrewrk
all your codebase are belong to us

1517526660
benzrf
andrewrk: so why exactly does that loop reassigning ty error out

1517526698
andrewrk
idk yet, it might be a new bug

1517526701
benzrf
oh do i need to put it in a "comptime" block

1517526702
andrewrk
I still haven't gotten off work yet

1517526746
benzrf
are there block comments'

1517526770
andrewrk
benzrf, removed:

1517526814
benzrf
:[

1517526934
benzrf
ok so why exactly does trying to assign to a variable of type "type" give an error

1517526938
benzrf
wait

1517526942
benzrf
fuck i just asked that 10 seconds ago sorry

1517526948
benzrf
>.>

