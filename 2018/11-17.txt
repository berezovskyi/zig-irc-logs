1542413300
benjikun
I'm probably still missing a lot but still comfy so far

1542413729
andrewrk
oconnor0, try

1542414539
benjikun
andrewrk: Is it OK to use clone and use master normally?

1542414559
benjikun
or should I wait for next release

1542414576
benjikun
I'd like to have the old struct syntax knowing it's already coming back

1542414689
suirad
benjikun are you talking about when it was without the .

1542414695
benjikun
Yep

1542414718
suirad
that was changed back in a recent merge on master, the grammer stuff i believe

1542414734
benjikun
changed back to having the `.`?

1542414741
suirad
to not having it

1542414744
benjikun
yeah ik

1542414770
benjikun
Do you use the latest release or do you build from the master branch normally?

1542414773
suirad
are you saying you want the `const Thing = struct.{}`

1542414788
benjikun
nah

1542414813
suirad
current master no longer has that, i believe

1542414822
suirad
i use latest release

1542414827
benjikun
same

1542414839
benjikun
not sure if using master is recommended

1542414864
benjikun
ig it probably doesn't matter

1542414973
suirad
the only thing that using master has caused me to do, is clear my appdata cache after the grammar stuff caused the struct dot thing to switch back. no complaints here

1542414999
benjikun
you're on windows?

1542415007
benjikun
haven't used zig on windows yet

1542415020
benjikun
only on the WSL & normal nix

1542415101
suirad
primarily yea. i develop on both and use popos(ubuntu) regularly, but my system base is windows.

1542415199
benjikun
I've got devuan on my desktop and windows 10 on my laptop

1542415292
suirad
ive found zig setup on windows to be as frictionless as on linux. Which isnt the norm and id say is a big plus.

1542415361
suirad
download zig.zip; extract and add to path; install git[/gitbash] which comes with vim; install zig vim plugin; good to go

1542417707
diltsman
Wasn't expecting @memcpy to compile to __aeabi_memcpy...

1542417763
diltsman
lld can't find that.  Is it somewhere in the Zig distribution, or would it be somewhere else?

1542417782
daurnimator
diltsman: that function is part of the ARM ABI

1542417808
andrewrk
diltsman, we need to port __aeabi_memcpy from llvm's compiler_rt into zig's std/special/compiler_rt/

1542417840
diltsman
Ok, so work in progress.  Good enough.  While not a concise, a loop will work.

1542417854
andrewrk
or if that's provided by libc we need to port that into std/special/builtin.zig

1542417855
andrewrk
bottom line is it's a missing feature of zig, but relatively small effort to add

1542417878
andrewrk
it's still best to provide it, because optimizations can turn your loop into a @memcpy

1542418147
oats
so I'm expanding on my little toy kernel that I wrote following the x86 kernel coding livestream, and I'm trying to figure out how I can leverage std.fmt.format() to create my own printf-like function, but I can't figure how format() is supposed to be used. can I get any tips?

1542418213
diltsman
To build in release-fast you do "zig.exe build --release-fast", right?

1542418229
suirad
yes

1542418333
diltsman
Unrecognized argument: --release-fast

1542418375
hryx
Hey andrewrk, I want to help with stage2 or std, but I'm not quite able to build stage2 yet. The stage1 compiler segfaults when trying to build any zig files

1542418381
hryx
any tips on debugging?

1542418392
daurnimator
diltsman: zig version ?

1542418404
diltsman
zig-windows-x86_64-0.3.0+3666fbd9

1542418446
benjikun
Is there a difference between build-exe and build

1542418463
benjikun
perhaps try `zig.exe build-exe file.zig --release-fast`

1542418478
hoppetosse
andrewrk: just caught your stream on parsing floats

1542418495
diltsman
benjikun: I have a custom linker script and build.zig.

1542418501
hoppetosse
I remember doing something waaay back when, can't remember where I ported this from:

1542418502
hoppetosse


1542418502
hryx
benjikun: "zig build" uses the zig build system, i.e. you have to write a special build.zig file. "zig build-exe <file>" just builds a regular executable

1542418511
benjikun
oh

1542418536
andrewrk
hryx, stage2 is blocking pretty hard on coroutine rewrite which is blocking on copy elision

1542418545
andrewrk
both high difficulty projects

1542418560
hoppetosse
as soon as you mentioned remembering where the dot was, it clicked

1542418579
andrewrk
hryx, can I suggest another idea for you?

1542418587
hryx
please do!

1542418609
andrewrk


1542418618
diltsman
So, --release-fast won't work.  -Drelease-fast does.

1542418629
andrewrk
until now I've been telling people "wait until self-hosted" for generated docs

1542418655
diltsman
andrewrk: the loop to replace @memcpy optimizes to __eabi_memcpy, too.  So, for now, I can only compile in debug or release-small.

1542418656
andrewrk
but now I think it's valuable to have in stage1

1542418709
hryx
andrewk: ok, sounds good. I'll start poking around with that project

1542418715
andrewrk
oats, I don't remember where it is in the source, but I'm pretty sure this project does print formatting:

1542418760
andrewrk
hoppetosse, ah interesting, I'll review your code before next thursday

1542418839
andrewrk
diltsman, benjikun: apologies for the CLI args inconsistencies. when we start approaching 1.0.0 I'll do a command line args API audit and gain some consistency

1542418875
andrewrk
maybe the different syntax is ok, since the zig build syntax hints that there may be other options outside the set you pass to build-exe, etc

1542419014
benjikun
andrewrk: All is good, I suspect copy elision is taking most of your time

1542419045
diltsman
My only issue is that the command-line help gives the wrong argument.  Other than that, no real preference.

1542421039
daurnimator
so... is there a counting for loop?

1542421053
daurnimator
e.g. how would you count from 1 to n in zig?

1542421067
oats
daurnimator: nope, incrementing can be done with while loops

1542421122
benjikun
daurnimator: Unless you want to write a simple custom function, do this with a while loop

1542421127
oats
var i = 0; while (i < 10) : (i += 1) { ... }

1542421177
daurnimator
ah, the 'continue express' helps to keep it cleaner

1542421181
daurnimator
*expression

1542421204
daurnimator
btw, reading through the manual I don't see where the |value| syntax is introduced... yet it starts showing up in examples

1542421212
shachaf
Oh, that's part of while, interesting.

1542421260
shachaf
daurnimator: As far as I can tell |x| is syntactically part of for, while, catch, etc., not a standalone thing.

1542421269
benjikun
daurnimator:

1542421286
daurnimator
shachaf: I first notice it in 'if' `if (a) |value| {`

1542421321
daurnimator
okay. so it is the result of the thing in the parenthesis?

1542421337
daurnimator
what is that form called

1542421337
hryx
the |x| syntax is called "capturing" I believe

1542421357
daurnimator
hryx: okay. I also see "pointer capture"

1542421364
hryx
and it works on if, while, and switch branches

1542421381
hryx
ah yeah, |*x| does the same thing, but instead of a copy, you get a reference (pointer)

1542421382
daurnimator
is a pointer capture something special syntactically? or can you sort of use other operators on the capture there?

1542421400
hryx
just those two forms exist as far as I know

1542421404
benjikun
to be fair, the documentation is not a tutorial on purpose (for now)

1542421411
hryx
although with for loops, you can additionally capture the index with |x, i|

1542421412
benjikun
with how everything is changing

1542421431
hryx
or, if you only want the index, discard the value with |_, i|

1542421454
hryx
unlike most symbols, _ is actually specially recognized (as "intentionally discarded value")

1542421473
hryx
the throwaway variable name. Go uses it too, and (by convention) Lua

1542421479
shachaf
Hmm, for some reason I thought ranges were a first-class value, but it looks like they only syntactically exist in a few places?

1542421506
hryx
I only know of ranges working in switches

1542421528
benjikun
yeah that's the only place I've seen the ... thing

1542421529
hryx
i.e. `0...9 => { return; }`

1542421532
hryx
yeah

1542421541
shachaf
And slices

1542421556
benjikun
slices are more

1542421558
benjikun
afaik

1542421580
hryx
the slicing notation isn't precisely the same thing, but similar. and it uses .. instead of ...

1542421597
daurnimator
can you declare args as const?

1542421605
benjikun
yes

1542421614
hryx
actually, arguments are already const (I thought this was a bug at first)

1542421625
benjikun
You normally do that for strings

1542421643
benjikun
`const[] u8 filename,` for example, I think

1542421660
benjikun
otherwise you'd have to specify the length

1542421662
hryx
that would be `[]const u8`, but yep

1542421667
benjikun
whoops

1542421670
daurnimator
doesn't that say the array members are const? rather than the array itself?

1542421674
benjikun
lol yeah I'm still getting the hang of prefixed []

1542421690
hryx
I read from left to right as "slice of constant bytes", or `*const i32` as "pointer to constant i32

1542421711
hryx
it's backwards from C/others but I think more intuitive :>

1542421711
benjikun
the order of that stuff was kind of confusing for me at first, too

1542421731
errpr
I'm trying to cast to a void pointer to pass into windows, is this the proper way: `@ptrCast(*c_void, @alignCast(@alignOf(*c_void), BitmapHandle))`

1542421736
hryx
daurnimator: yep, []const u8 means that the array members are const

1542421742
errpr
I don't really know what pointer alignment means, tbh

1542421751
shachaf
For some reason (Ruby?) I thought a..b was [a,b) and a...b was [a,b]

1542421765
hryx
However, as I mentioned, function arguments are all const already. So there's no need to declare param as x: const bool

1542421769
hryx
(for example)

1542421770
shachaf
I didn't find it in the documentation, though.

1542421825
benjikun
be forgiving when it comes to the documentation, it isn't done

1542421827
hryx
shachaf: .. is only used in slicing `x[0..x.len]` and ... is only used in switch branches

1542421832
shachaf
OK.

1542421844
shachaf
That's what I get for random guessing.

1542421882
daurnimator
so does zig do things at comptime where it can automatically?

1542421900
benjikun
yes, I believe so

1542421919
daurnimator
is there a way to see if something is getting done at comptime or not?

1542421929
benjikun
that's a good question, and I've wondered it myself

1542421936
hryx
I think you'd want to look at the zig IR passes?

1542421949
hryx
that would probably reveal it (never done it myself)

1542421990
daurnimator
that doesn't sound easy

1542422021
daurnimator
I guess you could create a comptime{} block in your function and print a compile time warning there or something?

1542422034
hryx
it would be awesome to have some kind of IDE/editor integration that told you when inspecting a function

1542422045
benjikun
hryx: That would be fantastic

1542422050
hryx
`fn f(x: i32) void {} // (comptime)`

1542422057
benjikun
interesting idea

1542422070
daurnimator
hryx: wouldn't it change depending on parameters?

1542422074
hryx
there's an issue for implementing Language Server Protocol, but not sure if it would handle that

1542422094
hryx
daurnimator: yeah I think so

1542422124
daurnimator
likewise there would be some branches that are comptime and others that aren't? I assume?

1542422163
hryx
branches as in branches of an if/switch? Or just blocks?

1542422219
hryx
I'm actually still getting the hang of using comptime, so I'm not super sure... I think you can totally have a comptime block in a runtime function, as long as all the values it refers to are comptime-known

1542422247
hryx
don't quote me on that (I say while being permanently logged on the internet)

1542422299
shachaf
I mean, every comptime block is used in a runtime function.

1542422315
benjikun
building from master rn, I keep hitting blocks where CLANG variables are set to NOTFOUND

1542422339
shachaf
I have the same problem. :-(

1542422347
benjikun
I did `cmake .. -DCMAKE_C_COMPILER/usr/bin/gcc`, and that worked, but the errors came back up after running make

1542422354
shachaf
I thought it might be that my version of clang from apt is too old?

1542422354
hryx
valid point shachaf - I suppose I meant as opposed to a top-level comptime block

1542422396
benjikun
`make CC='/usr/bin/gcc'` doesn't suppress the errors, either hmm

1542422411
shachaf
Ah, I guess so.

1542422488
hryx
I had to install a ton of stuff using LLVM's own repositories as described here

1542422528
hryx
under the section labelled "Install (qualification branch)"

1542422544
benjikun
will do, thanks hryx

1542423926
benjikun
what's the deal with `zig build --build-file ../build.zig test` returning "unable to find zig lib directory"

1542423980
benjikun
hryx: Any idea?

1542424024
benjikun
oh nevermind

1542424197
benjikun


1542424201
benjikun
Now I'm getting this :/

1542424218
benjikun
I installed all of the LLVM stuff hmm

1542424652
benjikun
well, I guess running all the tests doesn't really matter; it installed regardless so that's good

1542426273
daurnimator
hrm

1542426290
daurnimator
how can I generate structs with a function?

1542426464
daurnimator
something like

1542426465
benjikun
at runtime? an anonymous struct or a predefined one?

1542426470
daurnimator
benjikun: at comptime

1542426475
benjikun
ah I got ya

1542426477
benjikun
one sec

1542426490
benjikun


1542426504
andrewrk
daurnimator, look for examples in the standard library, for example std/array_list.zig

1542426529
daurnimator
benjikun: ah, 'type' is the magic I was looking for

1542426534
benjikun
:)

1542426684
benjikun
but yeah, looking at a lot of the tests in the stdlib tend to help

1542426713
benjikun
so for that, you could search "return struct {" in the zig repo and it will normally give you help

1542427063
daurnimator
is there a tailq in the zig std library

1542427129
daurnimator
looks like std.linked_list might actually be a tailq?

1542427135
benjikun
there's a queue thing, not sure if that's the same

1542427141
benjikun
std/atomic/queue.zig

1542427281
daurnimator
benjikun: incase you don't know what I'm asking about, see `man TAILQ_HEAD`

1542427331
andrewrk
daurnimator, are you talking about an intrusive linked list?

1542427343
andrewrk
std.LinkedList can be intrusive if you use @fieldParentPtr

1542427395
daurnimator
andrewrk: yeah intrusive doubly linked list that tracks the tail item.

1542427469
daurnimator
(tracking the tail item is actually quite expensive; so you shouldn't do it unless you need to. however it looks like zig's ListedList module does it all the time. Good for me now, but not necessarily for every task)

1542427584
daurnimator
in an anonymous struct definition, how do I reference the struct itself?

1542427597
daurnimator
ah. const Self = @This();

1542427604
benjikun
yep

1542428969
daurnimator
is there a way to not repeat "MyList" here?

1542429709
daurnimator
:( the zig linked list implementation doesn't have a way to concat one list onto another

1542430115
daurnimator
ooo fun, segfault while compiling

1542430244
benjikun
perhaps make an issue for it

1542430255
daurnimator
reducing it down to a test case now

1542430447
daurnimator


1542430467
daurnimator
^ how

1542430630
daurnimator
andrewrk: I'm not sure how you're saying to use @fieldParentPtr

1542443025
daurnimator
how do I only conditionally have a struct member?

1542443054
andrewrk
daurnimator, make the type void or non-void depending on some comptime value

1542443075
andrewrk
there are some examples in the std lib

1542443094
daurnimator
andrewrk: ah interesting. hadn't considered that

1542443103
daurnimator
andrewrk: and what about for a conditional function?

1542443116
andrewrk


1542443134
andrewrk
if you don't call a function, it doesn't go into the binary. that includes if you don't calll it like this: if(false)foo();

1542443147
andrewrk
in this example foo is not analyzed and will not emit compile errors

1542443184
andrewrk
if(builtin.os == builtin.Os.windows) windowsOnlyFunction();

1542443189
daurnimator
andrewrk: but the function uses things that only sometimes exist

1542443209
andrewrk
I'm sure if you try to code it, it will make sense

1542443287
daurnimator
struct { const Self = @This();  x: if(somecond) u64 : void, pub fn bar(self: *Self) void { dostuffwith(self.x) } }

1542443332
andrewrk
I'm headed to bed, good night

1542444277
daurnimator
aw

1542448534
daurnimator
How can I create

1542449481
shachaf
daurnimator: The same way you return two things from any function, I guess?

1542449516
shachaf
I don't know whether there's a better way to return multiple values, but "const T = struct{a: type, b: type}; fn foo() T { ... }" seems to work

1542449692
shachaf
Also I guess there's a thing where "const r: foo().a = (foo.a){...};" is an error but "const R = foo().a; const r: R = R{...};" isn't? So each time a struct is instantiated it's considered a different type or something?

1542453932
daurnimator
incompatible types: 'bool' and '*bool'

1542453963
daurnimator
getting that error on this line: if ((to_pending != &self.expiredList) && (to_pending.first == null)) {

1542453980
daurnimator
how is that second bit (after the &&) a *bool?

1542454088
daurnimator
hell. replacing it with `true` keeps the same error

1542454100
daurnimator
I think the error message is pointing to the wrong thing....

1542454150
daurnimator
heh.... yeah I think so:

1542455139
daurnimator
created

1542456660
daurnimator
doh. && is not an operator in zig

1542458325
ltr_
andrewrk: I was looking into the CI script for linux to generate de tarball that goes in the webpage, and when it compiles its never says something about static linking the resulting binary, yet it compoiles to a self contained executable , i cant reproduce that., if i  build zig it results on a executable depending on a lot of system libs. any idea whats happening there?, may be its something related with

1542458331
ltr_
nixos?

1542462334
daurnimator
hrm. rotr on small values is odd

1542462570
daurnimator


1542463148
daurnimator
When using a pointer capture, can I have it non-const?

1542465262
daurnimator
how are optional types implemented?

1542465285
daurnimator
==> if I have a ?u64 how much memory does it use?

1542465314
MajorLag
You mean like in a for loop? for(whatever) |*b| ? The pointer should only be const if the elements of whatever you are looping over is const, I think.

1542465317
daurnimator
and is there some way I can tell zig that a certain bitpattern isn't valid for it so that it can use it as the 'null' value

1542465368
MajorLag
Optionl pointers use no extra memory, otherwise it is a tagged union so there is extra space.

1542465401
MajorLag
You can check how much using @sizeOf(?u64)

1542465773
daurnimator
MajorLag: I hope I condensed this down correctly:

1542466092
MajorLag
`for (array) |col| {` => `for (array) |*col| {`

1542466107
MajorLag
just a guess

1542466180
daurnimator
MajorLag: huh. that works :)

1542466184
daurnimator
MajorLag: I don't entirely understand why

1542466297
MajorLag
If you don't capture a pointer, you're telling the compiler that you don't intend to modify the element, so it is const.

1542466393
MajorLag
so within the `for(array)|col|` loop, `col` is const, so `for(col)|*row|` is now looping over a const.

1542466646
daurnimator
MajorLag: thanks

1542466648
MajorLag
Or maybe a better way to put it is that whatever is captured is const, but when you capture a pointer it is the pointer that's const, not what it points to?

1542466734
daurnimator
MajorLag: yep

1542466825
daurnimator
Going back to an earlier question that never got answered: how can I only conditionally define a function in a struct

1542466858
MajorLag
As in, "this function only exists under these conditions"?

1542466862
daurnimator
yes

1542466887
daurnimator
something like: fn foo(x: bool) type { return struct { if(x) fn bar() void {} }; }

1542466958
MajorLag
Hmmm... I'll have to think on that. Usually I think you'd just write it such that it is generated as a noop under those conditions. One thing that comes immediately to mind is to write it such that under those conditions it throws a compile error. That still isn't exactly what you want because introspection will still see it as present though....

1542467044
daurnimator
as an interim solution.... we don't have multiple dispatch do we

1542467056
daurnimator
so... I guess I have to pre-declare a magic return time

1542467117
daurnimator
something like: fn foo(x: bool) type { const mytype = if(x) realtype else void; return struct { fn bar() mytype { if (x) { realbody(); return stuff; } } }; }

1542467120
MajorLag
we don't have runtime multiple dispatch, no. Not as part of the language. I believe alexnask wrote an example vtable implementation in a gist somewhere.

1542467257
daurnimator
oh at least I can do: fn foo(x: bool) type { return struct { fn bar() if(x) realtype else void { if (x) { realbody(); return stuff; } } }; }

1542467336
MajorLag
seems a little strange. You could write the fn under a different name, then optionally link it to the correct one. I'll give an example, just a sec.

1542467356
daurnimator
MajorLag: I'll upload my actual project in a min

1542467365
daurnimator
MajorLag: you'll probably see why I'm doing it this way

1542467446
MajorLag


1542467569
MajorLag
This way is similar to what I proposed about the compileError, but at least introspection won't see it as a function if it is set to void.

1542471461
andrewrk
ltr_, after the tests pass it builds a static executable in a docker container with alpine linux

1542471505
andrewrk
daurnimator, I've been meaning to make a proposal for the "bitpattern not valid" thing you mentioned

1542472204
ltr_
oh

1542472313
MajorLag
andrewrk, thats interesting, I would have thought that'd go against zen. Seems like it could fit pretty well with range-restricted types though and I know that's been brought up.

1542473225
MajorLag
andrewrk: no one has been able to tell me, and I can't find any reference to the reasoning behind align() being restricted to a max of @sizeOf(T). I'd like to propose that align() could be used more generally which would make SSE and similar easier to work with by a) allowing align() > @sizeOf(T), b) allowing [N]align() T, and c) adding the ability to alias align()'d types.

1542473691
daurnimator
okay all done for now

1542473694
daurnimator


1542473714
daurnimator
that's the first non-trivial piece of zig I've written

1542473731
daurnimator
I'd love someone to review it

1542473806
daurnimator
andrewrk: ^ do you want a timing wheel library in the standard library at all? :)

1542476707
daurnimator
huh.... how can I iterate over the

1542476826
daurnimator
e.g. if I have a u8... how do I iterate from 0 to 255? note that the 'normal' way overflows. `var i:myunsignedtype = 0; while (i <= std.math.maxInt(myunsignedtype) - 1) : (i += 1) {}`

1542477054
daurnimator
I think the only way is: `var i:myunsignedtype = 0; while (true) : (i += 1) { ..... if (i == std.math.maxInt(myunsignedtype)) { break; }}`

1542477077
daurnimator
makes me wish for a do/while loop syntax

1542479747
MajorLag
`var i: @IntType(false, MyUnsignedType.bit_count + 1) = 0;`

1542479924
daurnimator
MajorLag: assuming that there is a bigger type available

1542480209
Sahnvour
hi andrewrk, is it OK to replace an embedded IrInstruction* by another (the result of ir_implicit_cast in my case) without doing more ? No ir_ref_instruction or anything ?

1542480289
MajorLag
`var i = MyUnsignedType(0); var done = false; while(!done):(done = @addWithOverflow(MyUnsignedType, i, 1, &i)) {}`; admittedly pretty ugly.

1542481554
andrewrk
MajorLag, what do you mean about align being restricted? we support overalignment, I thought

1542481582
MajorLag
If that's the intention I'm pretty sure it doesn't work. Hold on a sec, I'll rig up an example, maybe I'm doing it wrong.

1542481620
andrewrk


1542481621
MajorLag
But while I'm doing that, the docs for @alignOf say `The result is a target-specific compile time constant. It is guaranteed to be less than or equal to @sizeOf(T).`

1542481675
andrewrk
right, so when you do @alignOf(T) that's called "ABI alignment" and it is guaranteed to be less than or equal to @sizeOf(T), and there's an important reason for that, that I forgot but should probably document

1542481715
andrewrk
so when a pointer has the same alignment as ABI alignment, the align annotation is omitted

1542481738
andrewrk
but more things always can be implicitly cast to less aligned things

1542481743
andrewrk
and you can use any alignment in var and fn declarations

1542481762
andrewrk
*more aligned things always can...

1542481771
MajorLag
hmm... odd, your test is working but I could have sworn my own experiments showed that even though it compiled, larger alignments didn't actually work.

1542481817
andrewrk
the llvm ir for my example:   %x = alloca float, align 64

1542481850
MajorLag
ah. I see the difference. My experiments all used const instead of var.

1542481880
andrewrk
that should work too, smells like a bug

1542481943
MajorLag
`const x: f32 align(128) = 12.34; std.debug.warn("x={}\n", @ptrToInt(&x) % 128);` => `x=64`;

1542482003
andrewrk
hmm now this smells like an LLVM bug. the IR zig produces for your example looks correct

1542482107
andrewrk
wait a minute, I see a problem

1542482141
andrewrk
good catch MajorLag. zig is creating a global constant and not applying the correct alignment. this should hopefully be a quick fix

1542482201
andrewrk
Sahnvour, I don't think you'll need to use ir_ref_instruction unless you're creating a new ir_build_foo function

1542482212
andrewrk
can you elaborate on your question?

1542482329
MajorLag
as for the rest of what I was saying, you could define a SEE u8 array: `[16]align(16) u8` and if you're going to use it a lot it'd be helpful to type alias: `const Sse16u8 = [16]align(16) u8;` is all.

1542482365
andrewrk
MajorLag,

1542482388
Sahnvour
andrewrk, so I have this IrInstructionAsm and when analyzing it, I use ir_implicit_cast as you advised me to, to handle comptime ints/floats. Basically I'm currently just overwriting the IrInstruction* representing the asm input value (contained in the IrInstructionAsm) by the new instruction that is casting it to another type

1542482442
MajorLag
but if you could alias then @alignOf's behavior might not make as much sense. `@alignOf(align(16) u8) == 1;`

1542482488
andrewrk
MajorLag, what you are describing is a new feature; currently alignment requirements can only be specified in variable declarations and function definitions

1542482514
MajorLag
yeah, I know. I did mention it was a proposal.

1542482545
andrewrk
my mistake. I haven't caught up on the chat logs

1542482553
MajorLag
there's a lot of it. no worries.

1542482599
andrewrk
would it make sense to alias a single-item pointer to an SEE array? `*align(16)[16]u8`

1542482654
andrewrk
Sahnvour, I'm not sure overwriting an instruction is a good idea; this would be the first instance of it in the whole compiler

1542482662
andrewrk
or maybe I misunderstand

1542482666
MajorLag
sure, but you still have no way of aligning the array itself

1542482670
MajorLag
other than an allocator

1542482699
andrewrk
is this related to SIMD?

1542482710
Sahnvour
hmm, then I would have to insert this cast earlier ?

1542482726
andrewrk
can I see what you have so far?

1542482745
MajorLag
that's what brought it up, yes. I haven't been doing anything with SIMD but someone here was (I forgot who).

1542482747
Sahnvour
sure, give me a moment (doing multiple things at once)

1542482783
Sahnvour
(and if this was for me ^^')

1542483015
andrewrk
Sahnvour, yes :)

1542483038
andrewrk
MajorLag, I'm planning on giving SIMD some serious attention in 0.4.0

1542483047
andrewrk


1542483134
hryx
andrewrk: I'm working on stage1 docgen. The source is easy to understand, nice & clean. my compliments to you and all contributors

1542483153
andrewrk
hryx, happy to hear that :)

1542483161
andrewrk
is this before or after you cracked open ir.cpp?

1542483179
hryx
I'm in tokenizer.cpp currently, no ir.cpp yet

1542483207
hryx
I want to put together and share a brief implementation plan to make sure I'm not going down the wrong path

1542483212
andrewrk
sounds good

1542483214
hryx
I'll post it on the GH issue when that's ready

1542483277
andrewrk
hryx, here's a pipeline overview: tokenize (tokenizer.cpp) -> AST (parser.cpp) -> Zig IR Pass 1 (no types or comptime computations) (ir.cpp) -> Zig IR Pass 2 (most analysis here) (ir.cpp) -> LLVM IR (codegen.cpp) -> Link (link.cpp)

1542483285
andrewrk
analyze.cpp is utility functions

1542483320
hryx
very helpful, thanks!

1542484397
wink_
FYI: I've taken std/json* moved them to

1542484945
Sahnvour
andrewrk, what I have right now

1542484965
Sahnvour
search for `See here`

1542485052
Sahnvour
but if this is too late in the sense that asm inputs already have their instructions (and we don't watn to override them), I would have to plug myself earlier, when we are actually creating the instructions, so ir_build_asm_something I guess ?

1542485615
andrewrk
Sahnvour, I understand your question now

1542485708
andrewrk
what you want to do is have an intermediate instruction IrInstruction *casted_input_value = ir_implicit_cast(...); and then put the casted instruction in the input_list[i] slot. I see now that what you were talking about was not so much "replacing" instructions in the code, but more just a question of whether to use a tmp variable or mutate the list slot directly

1542485769
andrewrk
IrInstruction *input_value = asm_instruction->input_list[i]->child; IrInstruction *casted_input_value = ir_implicit_cast(...); input_list[i] = casted_input_value;

1542485842
andrewrk
Sahnvour, a couple other things, the way to check for a const instruction is instr_is_comptime, not if the id is Const

1542485853
andrewrk
look at examples for this

1542485960
andrewrk
and finally, upon considering, I'm not sure, do we want to implicit cast comptime ints and floats? or should they just be compile errors? I'm wondering what it looks like to populate a large register with a large integer constant. e.g. xmm0

1542486334
Sahnvour
wow ok, I realise my question was misguiding as I did in fact not read the existing code correctly. It's already creating a new instr based on the input IrInstructionAsm but not modifying/analyzing it as I thought ; should be clear now

1542486429
Sahnvour
regarding the implicit cast, my reasoning was that trying to cast to a more or less "native" machine data type would do the trick for most purposes (otherwise one can always do it directly inside the asm template), and that it is better than just crashing

1542486491
andrewrk
right - but if it's not correct for all cases, better to make it a compile error, and then the user can choose a type like this: usize(1234)

1542486513
Sahnvour
that's sound

1542486524
andrewrk
certainly we do not want it to crash

1542486888
hryx
I asked earlier but don't have a solution yet: I can build stage1 just fine, but using it to compile zig code causes a segfault. Any ideas or debugging tips?

1542487022
andrewrk
hryx, are you using the same compiler to build stage1 as was used to build the llvm and clang you link against?

1542487023
hryx
here's Valgrind output from just now

1542487035
hryx
Good question...

1542487042
andrewrk
C++ has an ABI mismatch issue

1542487054
hryx
is there anything in the Cmake output which would tell me?

1542487082
andrewrk
I notice the valgrind stack traces show a segfault where stage1-compiled code calls into llvm/clang libraries

1542487097
hryx
That would make sense

1542487104
andrewrk
where are you getting llvm/clang from?

1542487120
hryx
apt-get on Linux Mint

1542487122
andrewrk
to be absolutely sure, you can build them from source. there are instructions in the wiki

1542487136
andrewrk
are you building stage1 with clang?

1542487142
hryx
It looks like I have a lot of different LLVM versions installed, so this could be possible

1542487144
hryx
Yep

1542487149
andrewrk
because the default compiler on debian/ubuntu/mint is gcc

1542487154
andrewrk
so that's the problem

1542487164
hryx
oh, it has to be built with gcc?

1542487172
andrewrk
all the apt-get packages are built with the system compiler - gcc

1542487177
hryx
fantastic

1542487183
hryx
thanks a lot, I'll try that

1542487183
andrewrk
so if you link against apt get packages you have to use the system compiler

1542487194
andrewrk
or you can use any compiler you want if you build llvm/clang from source

1542487217
hryx
BTW, these are from the repositories listed at apt.llvm.org, since my distro doesn't have LLVM 7 yet

1542487227
hryx
great tips, that should get me going

1542487235
andrewrk
happy to help

1542487414
Sahnvour
andrewrk, how would use advise the user to "use something like usize(1234)" but in a compiler-error-y fashion ? "comptime constants are not allowed as inputs, instead use explicit typing" ?

1542487547
andrewrk
something like, "expected sized integer or sized float type, found comptime_int"

1542487591
andrewrk
one thing I would want to do is understand exactly why it's crashing. I haven't investigated that yet

1542487604
andrewrk
e.g. what assumption is the code making that is incorrect, causing it to crash?

1542487607
nbjoerg
maybe add an "explicit" in that

1542487645
andrewrk
often that assumption can be reworded into a compile error message

1542487666
Sahnvour
the thing is that later in the code, we expect that some ir struct has pointers set to continue compilation, but it doesn't, I can check that again, just a minute

1542487849
andrewrk
MajorLag, I think copy elision branch might actually fix (or at least clobber) the incorrect alignment of constants issue

1542487866
andrewrk
bottom line is that the issue won't be closed until we have test coverage

1542487970
Sahnvour
yeah right, so in ir_render_asm, we iterate over asmexpr->input_list to create the param_types array to pass to LLVM, but the comptime instr has no `type_ref`

1542487985
Sahnvour
and it crashes later on in LLVM code

1542488049
andrewrk
and let's see how the type_ref is used

1542488090
andrewrk
aha, LLVM's inline assembly syntax requires types on all the inputs

1542488160
andrewrk
so it would, I think, make sense to use u128 with xmm0, for example

1542488176
andrewrk
and zig doesn't understand assembly yet, so we couldn't infer the type without an explicit annotation

1542488187
andrewrk
so therefore I think requiring an explicit type makes sense

1542488386
andrewrk
Sahnvour, I'm going to see if this works:

1542488434
andrewrk
error: couldn't allocate input reg for constraint '{xmm0}'

1542488435
andrewrk
hmmm

1542489160
andrewrk
anyway this doesn't change anything. I think this is a bug in llvm

1542490681
MajorLag
andrewrk, you probably already knew this but I was wrong about not being able to align arrays (because I was doing it wrong from not having thought it through, of course), which would leave my proposal to just the type aliasing, which as you noted could be done by aliasing a pointer type, so I'm pretty sure that whole thing can be chalked up to me not having worked with align() enough to really understand it. At le

1542490682
MajorLag
g.

1542491012
andrewrk
I resolved the xmm0 issue. it depends on SIMD

1542497094
emekoi
is std.Mutex reentrant?

