1539695331
Hejsil
Hmmm. For tuples to replace varargs, the have to be able to contain both runtime and comptime values at the same time.

1539695384
Hejsil
warn("{} {}", .{ 1, q }); Here, 1 is a comptime_int (comptime only type) and q is some runtime variable (runtime only)

1539695412
Hejsil
This is the only problem I see with this proposal

1539696232
Hejsil
Notes so far:

1539697575
bheads
That is looking awesome Hejsil

1539697595
bheads
I am just wondering why inferred initializers can only exist at comptime

1539697626
Hejsil
It's mostly due to the fact that they should be able to contain comptime values

1539697637
Hejsil
But maybe thats a weird limitation

1539697648
Hejsil
Idk, I'm still thinking about this

1539697673
bheads
okay cool, was wondering if there was am implmentation or other reasons for that

1539697674
Hejsil
Also, none of this is implemented yet, so no hopes up :)

1539697683
bheads
all the hopes!

1539697689
Hejsil
Arg, pressure!

1539697697
andrewrk
Hejsil, I thought your array example already works

1539697699
bheads
lol

1539697710
Hejsil
For inline for loops?

1539697713
andrewrk
yes

1539697717
Hejsil
I don't think so?

1539697721
andrewrk
let me try

1539697757
Hejsil
Nope, error: cannot store runtime value in compile time variable

1539697767
andrewrk
well the array would have to be constant

1539697795
Hejsil
Well, for tuples to replace varargs, you have to be able to iterate over runtime tuples

1539697812
Hejsil
varargs is more magic than I thought, now that I think about it

1539697820
andrewrk
this works

1539697845
Hejsil
Yes, i know that :)

1539697868
Hejsil
Is there a reason you can't inline a runtime known array?

1539697871
andrewrk
iterating over a "runtime" tuple would work because the tuple's length and types are known at compile time- it would be like iterating over the fields of a struct

1539697875
Hejsil
All the information for inlining is there

1539697884
Hejsil
So is an arrays

1539697898
Hejsil
an array is [2]u8 == tuple.{u8,u8}

1539697907
andrewrk
hmmm I see

1539697930
andrewrk
so you could make the "inline" aspect of it work, but the item & index values wouldn't be comptime unless the value was

1539697940
Hejsil
Indeed

1539697953
andrewrk
the point of inline is the comptime values though

1539697966
Hejsil
Idk if it's a good idea, but it has to work that for tuples to be like varargs

1539697979
Hejsil
Well, you can always use an inline while

1539697980
andrewrk
hmmm I see

1539697988
andrewrk
that's true, and if it works for tuples then it should work for arrays

1539697992
andrewrk
ok I'm following along

1539698019
andrewrk
I'm pretty sure that for loops on var args crashes the compiler right now

1539698081
Hejsil
It does

1539698177
andrewrk
Hejsil, this looks really good

1539698178
Hejsil
I forgot to write tuple item access into my notes

1539698252
andrewrk
what do you think about the idea of relying on implicit cast of inferred initializers, to remove the T { } syntax, so we can go back to the syntax that people prefer for struct / union / enum declaration?

1539698270
Hejsil
Hmmm

1539698283
andrewrk
Point(.{.a = 1, .b = 2})

1539698291
Hejsil
Interesting

1539698341
Hejsil
It's actually a very good idea, but Idk if the problem people have is struct.{} or Struct.{}

1539698354
Hejsil
Aka, type decl or initializer

1539698370
Hejsil
But I like that we can get some complexity back

1539698388
andrewrk
I would propose to remove Struct.{} since implicit casting an inferred initializer isn't that much more to type, and it's redundant

1539698404
andrewrk
and it teaches you to use inferred initializers

1539698456
Hejsil
Alot of stuff is comming together. I still need to figure out the best way for tuples to replace varargs

1539698474
andrewrk
yeah I'll think about the comptime thing right now... hmmm

1539698543
Hejsil
We are kinda turning into C

1539698559
bheads
Would that mean you would have to use  var foo: Struct = .{...};  vs var foo = Struct.{...};

1539698560
Hejsil
C does the inferred initializers to: (struct something){.a = 1}

1539698581
Hejsil
bheads, oooh no! Two ways to do things!

1539698605
Hejsil
That is a good question, and idk

1539698624
Hejsil
We already have this problem: var a: u8 = 0; var b = u8(0)

1539698635
Hejsil
"problem"

1539698649
bheads
i thought the secound usage was gone

1539698673
Hejsil
Nope. u8(0) is now only an implicit cast though

1539698679
Hejsil
Never a "hard" cast

1539698721
bheads
humm I will have to re-read that section in the docs

1539698996
andrewrk
Hejsil, what do you think about  [a, b, c] for the inferred initializer syntax of tuples?

1539699048
bheads
Would looke cleaner and different the struct initializers

1539699151
bheads
#{a, b, c}

1539699160
andrewrk
I think I have a workable plan for the comptime/runtime thing

1539699309
bheads
I still wonder if a different symbol would look better for the initilizer syntax

1539699336
andrewrk
the idea is: 1. don't try to solve @inlineCall / @noInlineCall with tuples yet. Just let those continue to be special case var args. Builtin functions can be var args, deal with it ðŸ˜Ž 2. tuples are either all comptime or all runtime, just like structs, no hacks

1539699355
bheads
a leading fdot looks like a syntax typo

1539699406
andrewrk
bheads, it looks like that because it's a traditionally unused syntactic construct, so we're not used to it being valid anywhere. the very feeling that it looks like a syntax typo is exactly why it is so available and unambiguous

1539699461
bheads
well before wuth it was Foo.{...} it looks correct   but   .{...} looks like I forgot something is all I am thinking

1539705568
Hejsil
andrewrk, was thinking the same thing. The only problem then is comptime_int, but I saw you talking about having comptime_int -> int, and have int have a min max encoded in it

1539705588
Hejsil
int<0, 10> :)

1539705651
andrewrk
Hejsil, a nice prerequisite change might be making it so you can pass comptime_int to fn foo(x: var)

1539706001
andrewrk
hmm I think that actually it would be pretty simple to model inferred literals with mixed comptime/runtime values

1539706030
Hejsil
When I think about it, it sounds confusing

1539706043
Hejsil
Makes the language weird and complicated (at least from the outside)

1539706128
andrewrk
we also have the option to make comptime stuff an error only if it doesn't get placed in a result location

1539706175
andrewrk
e.g.  const x, var y = .{1, a};

1539706203
andrewrk
with my copy elision branch, when 1 is evaluated it has a "result location" of x, and when 'a' is evaluated it has a "result location" of y

1539706220
Hejsil
Would that work with "var" parameters too?

1539706295
andrewrk
when you call a function, the return value has a result location. the parameter expressions are evaluated with stack allocated result locations

1539706468
andrewrk
so, no. we'd be stuck with the status quo problem of passing comptime values to non-comptime var parameters

1539706494
Hejsil
I think that's fine

1539706524
Hejsil
Most of the time people run into this problem, is when they try to print comptime_int

1539706528
andrewrk
argeed

1539706539
andrewrk
we can solve that with the comptime_int -> int thing

1539706584
Hejsil
Right

1539706688
Hejsil
What would be better. Introduce 3 new "inferred types" or add a boolean flag on the Tuple, Struct and Enum types, that indicate that they are inferred?

1539706730
Hejsil
Hmmm... Actually, 3 new types is probably better

1539706745
Hejsil
As inferred types don't have definitions or layouts

1539706759
andrewrk
I think that makes sense. they're kind of string-based

1539706782
Hejsil
string-based?

1539706814
andrewrk
never mind, I just had some circular thoughts

1539706866
andrewrk
I just meant that, for example, `.Foo` is kinda just a name with no other meaning. it depends on how it gets casted that determines its meaning

1539707031
Hejsil
And they probably doesn't have a runtime representation, so you can't store them in runtime variables

1539707054
Hejsil
Or...

1539707056
Hejsil
Hmmmm

1539707114
Hejsil
What happens when you pass an inferred initializer to "var"?

1539707197
andrewrk
which kind?

1539707207
Hejsil
Well, all of them

1539707228
Hejsil
Or, you could probably just instantiate a tuple from the inferred tuple initializer

1539707247
Hejsil
But enum and structs, they're value/layout depends on what they cast too

1539707258
Hejsil
their*

1539707273
andrewrk
enum: not allowed, unless you use comptime on the parameter

1539707379
Hejsil
Also, you mentioned [1, 2, 3] as tuple literal. It requires endless lookahead to know the difference between a tuple literal and the array type

1539707398
Hejsil
[expr] vs [expr]u8

1539707412
andrewrk
oh, yeah, good point

1539707431
Hejsil
Could be done, but

1539707465
Hejsil
I remember a "side goal" being something like "grepability"

1539707482
andrewrk
yeah yeah. if it's hard for the compiler to parse, it's hard for humans too

1539707501
andrewrk
it should be easy for both

1539707507
Hejsil
Agreed

1539707578
Hejsil
Also, here is a plan for "pass to var". struct/enum inferred initializers can't be passed, as theres nothing we can implicitly cast too

1539707594
Hejsil
We can always cast inferred tuple to a regular tuple

1539707605
andrewrk
why are tuples different than struct?

1539707623
andrewrk
oh because of structural equivalence?

1539707644
Hejsil
Well, we could also cast to a real struct

1539707661
Hejsil
But what layout do we chose, and all that

1539707667
Hejsil
Tuples are trivial

1539707678
andrewrk
yeah. and it doesn't work in status quo. we don't have to solve everything at once

1539707704
Hejsil
And @typeOf on enum/struct inf inits also shouldn't work

1539707715
Hejsil
They have no type yet (for the user)

1539707727
Hejsil
Probably

1539707778
Hejsil
Or...

1539707779
andrewrk
the important use cases are: * printf / var args * multiple assignment / multiple return from blocks * multiple return from functions * switch expressions (enum inferred init) * fn type syntax for calling convention (enum inferred init)

1539707780
Hejsil
Hmmmmmmmmmm...

1539707795
Hejsil
Righto

1539707805
andrewrk
oh and * make people want to use enums instead of bools

1539707845
andrewrk
sweep(.UnderRug); sweep(.TrashCan); rather than sweep(true); sweep(false)

1539707884
andrewrk
looks like Hejsil has his jet pack on..... is your next idea going to be out of this world?

1539707903
Hejsil
Oooh god

1539707915
Hejsil
No, my next idea is to go check if my food is done

1539707919
andrewrk
hahahhaa

1539708258
MajorLag
hmmm.. so I'm trying to get my projects up to current syntax and: "zig\std\io.zig:124:53: error: function with inferred error set must return at least one possible error", which is InStream.readFull.

1539708361
andrewrk
MajorLag, can you try changing the return type of InStream.readFull from `!usize` to `Error!usize` ?

1539708381
andrewrk
same with the read function

1539708406
andrewrk
there's an open issue for the ergonomics of this error

1539708407
MajorLag
just changing readFull to either Error! or error! makes it compile.

1539708415
andrewrk
ok, I'll push that

1539708434
andrewrk
does it fix it if you change only fn read to Error!

1539708435
andrewrk
?

1539708477
MajorLag
nope

1539708501
MajorLag
I think there's an open issue for this

1539708506
andrewrk
there is

1539708550
andrewrk
pushed

1539708719
MajorLag
thanks

1539712770
tom1998
Hey andrewrk, what's the current state on @reify? github issue seemed to leave it a bit of a cliffhanger as far as I understand, I have a use-case I could provide (although it seemed like you already had one & you were just mulling it over) - Assuming it does get approved, what's the barrier for implementing it? Are you pushing for the stage 2 compiler first?

1539712815
andrewrk
if it gets implemented it will be in stage1 & stage2 both

1539712828
andrewrk
it's still in the design review phase, so use cases are encouraged

1539712862
tom1998
Okay, I don't 100% understand the current use cases published, have you heard of an 'Entity component system' in terms of its use in game development?

1539712890
tom1998
Just so i don't re-submit another duplicate use-case without realising, plus knowing you have the understanding of that means I don't need to find a more general case

1539713194
wink_
I'm going to try to implement a 3d software engine as a learning excersise (

1539713194
wink_
dl-zig-demo) and Marc's (

1539719069
Hejsil
My final spec for tuples have been posted on the tuple issue:

1539719189
Hejsil
As for the removal of normal initializers, I think that is the step to take after all this is done, so idk if I should post that too

1539719201
Hejsil
This is a multi step process in it of it self

1539719206
Hejsil
1. Implement tuples

1539719207
andrewrk
agreed

1539719215
Hejsil
2. Implement inferred initalizers

1539719223
Hejsil
3. Remove varargs

1539719259
Hejsil
0.4.0. The Zig we knew and loved is gone :)

1539719282
Hejsil
Better break the language while we can, in my opinion

1539719321
andrewrk
agreed. I'm ok with master being a bit unstable right now

1539719338
andrewrk
0.3.0 is a reasonable target for the next 6 months

1539719347
andrewrk
for people to use if they want stability

1539719360
Hejsil
Yea, 0.3.0 is pretty good.

1539719380
Hejsil
If you don't do crazy stuff

1539719447
andrewrk
ah I see you removed the `for` part

1539719454
andrewrk
we can revisit that later

1539719524
Hejsil
It's a thing I can live without. I think it makes sense that inline for makes everything it iterates over comptime known

1539719537
MajorLag
Lately I've been considering trying to put some of my code into std, just so I don't have to maintain the syntax. If only my proxmox server hadn't exploded recently...

1539719572
andrewrk
MajorLag, are you referring to the big syntax change that just happened?

1539719581
Hejsil
Sorry~

1539719583
andrewrk
there's a branch of `zig fmt` that will do all the fixes for you

1539719609
MajorLag
Eh, it's what you sign up for when tracking master on a pre 1.0 language.

1539719619
Hejsil
I'll wait with my projects a bit, as more changes are comming

1539719654
MajorLag
andrewrk: problem there is it would ruin all my non-standard formatting.

1539719654
Hejsil
I'd be cool to have a zig fmt pass that can translate from 0.3.0 -> 0.4.0

1539719694
andrewrk
Hejsil, "They also implicitly cast to arrays/slices, if all their elements are the same." -> I think we can make this even better, they implicitly cast to arrays/slices, if all their elements can be implicitly casted to the array/slice element type

1539719725
andrewrk
tuple.{u1, u2, u3, u4} can implicitly cast to [4]u8

1539719732
Hejsil
Hmm

1539719748
Hejsil
Well tuple.{u8, u16} should probably not cast to [2]u16

1539719752
Hejsil
Their layout is different

1539719786
andrewrk
even tuple.{u8,u8} layout is different than [2]u16, right?

1539719791
andrewrk
oops, than [2]u8

1539719804
Hejsil
I think it would be the same, right?

1539719816
Hejsil
Why would a tuple.{u8,u8} be different from [2]u8

1539719821
MajorLag
only if tuples follow struct layout rules, which I think the proposal explicitly said they didn't.

1539719843
Hejsil
I actually don't know what they layout of a tuple should be

1539719850
Hejsil
Hmmm

1539719851
andrewrk
hmm I'm thinking

1539719865
Hejsil
I did not think everything through!

1539719890
MajorLag
What's the virtue of being able to cast to arrays anyway?

1539719897
Hejsil
Actually, what is the usecase for tuple->array anyways

1539719899
Hejsil
^

1539719909
andrewrk
I agree that use case is not important

1539719920
Hejsil
Idk, I remember we talked about it, but forgot why we needed it

1539719924
andrewrk
although it might be nice to get rid of separate array init syntax and tuple init syntax

1539719934
Hejsil
They are the same

1539719943
Hejsil
At least in my proposal

1539719984
andrewrk
yes that makes sense. so each value in the inferred tuple initializers has to be able to implicitly cast to the array element type, and that's it

1539720028
andrewrk
I think it might be worthwhile to not allow casting from tuples to arrays, and let the layout of tuples be unspecified. then zig is free to insert safety fields and stuff

1539720043
andrewrk
that's the pattern with struct, union, enum

1539720255
Hejsil
Alright, I just removed that usecase. I'll be off for now, and see the aftermath tomorrow

1539720258
andrewrk
or we can allow implicit casting to arrays - and it would be equivalent to using a tuple initializer

1539720284
andrewrk
so they don't all have to be the same - the code generated would be an implicit cast + store pointer for every element

1539720298
Hejsil
I think we should find the usecase before having the casts :)

1539720305
andrewrk
fair :)

1539720311
Hejsil
Im off

1539720314
andrewrk
o/

