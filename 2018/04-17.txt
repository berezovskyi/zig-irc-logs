1523923539
alexnask
zig build fails in spawnChildEnvMap, specifically 'const term = child.spawnAndWait() catch |err|'

1523923996
alexnask
The child processe's handle is NULL so I guess it's having some trouble spawning zig for some reason

1523924193
MajorLag
Mine doesn't get that far. It compiles the obj, then it starts looking in the registry for the SDK path, which isn't in there, completely ignoring the commandline options I passed it, then it bails.

1523924767
alexnask
Is that with a build file or just calling zig build-exe?

1523924804
MajorLag
just calling the exe. I never got into the habit of using build files because there's basically no documentation for them and my early attempts just crashed.

1523924837
alexnask
Right, this is the first time I'm testing buildfiles on windows so maybe it's not a new issue

1523924846
alexnask
But we appear to be talking about different bugs

1523925047
MajorLag
yeah

1523925140
MajorLag
you're a lot farther a long in the build process. I think this used to work correctly, but looking back the only linking I did with C stuff involved SDL, which it turns out you don't need to link to C runtime to use so the compiler probably ignored those options anyway.

1523927530
MajorLag
....there's an issue in the windows --release-safe/--release-fast code. sometimes calling warn throws an index out of bounds check (or crashes in release-fast)

1523929060
MajorLag
it has something to do with the float value I'm trying to print... weird.

1523929708
MajorLag
it happens in linux too, some kind of fmt vs float issue it seems.

1523929719
MajorLag
today has been a remarkably unproductive day

1523930571
andrewrk
MajorLag, I don't consider the std lib float implementation done yet. printing or parsing

1523931466
andrewrk
I have some W.I.P. code

1523932331
MajorLag
yep, my bad not checking for the dup

1523932371
andrewrk
sorry about the regression with lib dirs. I'm pushing a fix now

1523932510
GitHub24
[zig] andrewrk pushed 1 new commit to master:

1523932510
GitHub24
zig/master 96ebd8b Andrew Kelley: fix windows not respecting --msvc-lib-dir, --kernel32-lib-dir...

1523932511
andrewrk
MajorLag, is it convenient for you to test this? ^

1523932520
MajorLag
probably

1523933937
MajorLag
hmm.. closer. "Unable to determine ucrt path"

1523934114
MajorLag
passing that explicitly with -L doesn't seem to help

1523934354
MajorLag
interestingly, if I pass it as --libc-lib-dir it then complains about determining the kernel32 path.

1523934519
andrewrk
kernel32 path is --kernel32-lib-dir

1523934760
MajorLag
yeah, I know, that was in there too

1523934815
MajorLag
seems --libc-lib-dir takes priority and confuses it. As I understand it, that's a linux/posix parameter anyway

1523942225
relatingdata
has anyone considered a lambda stype syntax for functions so that rather than `fn foo(bytes: []u8) u32 {` we wold have `const foo: u32  = (bytes: []u8) => {` I have been using this in javascript and looks more natural to me :-) ;-)

1523961672
GitHub66
[zig] tiehuis opened pull request #930: Add float rounding and fix negative exponential cases (master...float-printing)

1523970138
walac
Could someone explain me the role of comptime in this sentences

1523970213
walac
What's the differences between this and surrounding them with a comptime block?

1523970519
MajorLag
walac, the first comptime ensures that the expression block to the right is evaluated at comptime. I'm not sure why the comptime in the assert exists, but if you were to wrap the whole thing in a comptime block that would mean the assert would have to happen at compile time. The construction as-is is testing at runtime that comptime expression block produces the correct value.

1523970701
walac
MajorLag: ah, now I got the picture. iirc, the comptime in both expressions is to make sure those expressions will be evaluated in compilation time, although in practice the compiler probably will even without them

1523971181
walac
Another topic: I would like to inspect the assembly code for the binary generated by zig test, but I see it ignores the --emit for test command. Is there any special reason for that?

1523971601
MajorLag
I don't work on the compiler, so someone else will have to answer that one. I think you could commment out the `test` line and replace it with `pub fn main() void` and do a build with --emit as a workaround.

1523971816
walac
MajorLag: thanks

1523978383
andrewrk
walac, you can use objdump on the generated binary

1523978391
andrewrk
which will (for now) be in zig-cache/test

1523978587
walac
andrewrk: I did it with gdb, but originally what I was looking for with --emit is assembly with source annotation. Anyway, I found out what I was looking for :)

1523978704
andrewrk
I'd love to have that feature built into an editor

1523978712
andrewrk
so I could see what my lines of code were producing as I typed them

1523979391
alexnask
Like godbolt but for zig?

1523979674
andrewrk
yes, and built into vim or an IDE or something like that

1523979708
andrewrk
tiehuis actually got godbolt working for zig

1523979744
andrewrk


1523983912
Hejsil
Wait, someone got compiler explore to work with zig!

1523984004
Hejsil
Anyways, just got my nds loading and saving working with no recursion!

1523984010
Hejsil
It's a good day today

1523989082
andrewrk
beautiful

1523990478
andrewrk
Hejsil, I've been thinking about figuring out how to allow recursion without giving up ability to determine stack upper bound size

1523990578
andrewrk
I was thinking that we could have something like @call(new_stack, function, args...). zig would identify loops in your call graph, and emit a compile error where you would have to use a new stack for a function call in order to address the recursion

1523991775
Hejsil
Hmmm. Interesting. Well, the refactor was needed anyways, so my work wasn't waisted :)

1523991783
andrewrk
certainly not

1523991818
Hejsil
How would you allocate more stack?

1523991825
Hejsil
Some builtin?

1523991849
andrewrk
any allocator, and you can defer a free before the call

1523991865
andrewrk
for example, you could use std.heap.DirectAllocator

1523991891
Hejsil
Iteresting

1523991896
andrewrk
and you would figure out how much bytes to allocate with the builtin function that tells you stack upper bound size for a given function

1523992018
Hejsil
And I guess this would address inferring error sets too? :)

1523992027
Hejsil
For recursion that is

1523992036
andrewrk
hmm I don't think it solves that\

1523992061
Hejsil
Well, If you can detect loops, can't you then also figure out all possible errors?

1523992307
andrewrk
I do think it's possible to make error set inference work even with recursive functions

1523992327
andrewrk
I kinda designed myself into a corner the c++ compiler  though, and it would require a lot of rework to fix it

1523992332
andrewrk
which maybe I will do someday

1523992445
andrewrk
but first! my goals for the self hosted compiler:

1523992461
andrewrk
actually I'll post this on an issue

1523992758
andrewrk
I've started on this

1523993591
Hejsil
The memory handling is interesting

1523993596
Hejsil
Looking forward to it

1523997610
MajorLag
`error: expected type '&Allocator', found '&Allocator'`

1523997695
MajorLag
I'm pretty sure that's just my fault for mixing `os` from git in with whatever version I'm using on this box.

1523997773
andrewrk
I've been meaning to improve that error by having it show the declaration sites of both types

1523997799
andrewrk
I'm gonna make an issue for that right now

1523997858
andrewrk


