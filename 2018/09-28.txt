1538099108
renatorabelo
c/lear

1538119651
very-mediocre
this is awesome:https://andrewkelley.me/post/string-matching-comptime-perfect-hashing-zig.html

1538138995
scientes
very-mediocre, it could be better

1538142919
andrewrk
0.3.0 is released

1538142922
andrewrk


1538143862
scientes
WooT! congrats

1538143930
andrewrk
I posted the release notes to hacker news. I hope we get to front page :)

1538146606
very-mediocre
congrats

1538146614
very-mediocre
scientes: everything can always be better :)

1538148460
halosghost
andrewrk: hi

1538148471
halosghost
andrewrk: you exposed arbitrarily-sized, fixed-width integers in 0.3

1538148480
halosghost
andrewrk: I love you

1538148487
halosghost
andrewrk: carry on :)

1538148518
andrewrk
halosghost, and if you put them in a packed struct, you get a bit field

1538148536
halosghost
andrewrk: I love you

1538148543
halosghost
you are loved

1538148557
halosghost
I cannot describe how much I've wanted that in a programming language for so long

1538148800
halosghost
oh man, 0.3's release notes are getting me really excited again

1538148985
halosghost
I should really start getting back into it

1538148990
halosghost
has anyone started on a posit implementation yet?

1538149135
halosghost
looks like not

1538149145
halosghost
well then, might be a fun thing to try my hand at

1538149157
halosghost
andrewrk: seriously though; you (and the rest of the zig contributors) have done some amazing work

1538149169
halosghost
Zig is my best hope at the moment of eventually getting to leave C behind

1538149180
andrewrk
what's posit?

1538149215
halosghost
andrewrk: posits are a fractional numeric type proposal to replace floating-point arithmetic

1538149237
andrewrk
oh interesting, this is the first I've heard of that

1538149241
halosghost
really?

1538149243
halosghost
oh man

1538149250
halosghost
I have some technical talks for you then :)

1538149251
halosghost
one sec

1538149315
halosghost
I'll start with the most recent (and therefore, most salient one):

1538149374
halosghost
this one is a demo of an 8-bit posit implementation in Julia beating a 32-bit float on quality and performance for audio-encoding (along with a lot of the technical details of posit implementations):

1538149414
halosghost
and here's the website that tracks the community of crazy evangelicals of posits and the work being done on them:

1538149432
halosghost
andrewrk: they descend from unums (which have been around longer, so you may have heard of)

1538149456
andrewrk
halosghost, thanks, I'll check this stuff out

1538149475
halosghost
finally, a C software implementation of posits to which a bunch of other bindings exist:

1538149479
halosghost
andrewrk: any time!

1538149509
halosghost
if I can manage to get a few more of my personal projects done, I'd love to start contributing to Zig; and I'm fascinated by posits; so that might be a place I go to start :)

1538149668
halosghost
fair warning about SoftPosit: it's All Rights Reserved

1538149673
halosghost
so, yeah

1538149740
halosghost
oh, no wait; looks like a lot of the files are 3-clause BSD; it just doesn't have a repo-wide license

1538150815
andrewrk
btw halosghost you don't have to wait for AUR - the static linux binaries on

1538150834
andrewrk
I challenge you to find a linux distro on which they don't work out of the box

1538150838
halosghost
haha

1538150855
halosghost
I don't doubt you (at this point, I think you've earned some benefit of the doubt)

1538150859
andrewrk
:)

1538150889
halosghost
honestly, I'd be tempted to do that anyway because of the cool self-hosting stuff :)

1538150892
halosghost
but, we'll see

1538150900
halosghost
I have other things I sadly need to do first

1538150907
halosghost
I think I will go ahead and start idling in here more though

1538150918
halosghost
I really annot describe how excited I am about where Zig is headed

1538151030
halosghost
(which you may have noticed from my post on lobste.rs) :P

1538151199
MajorLag
zig static worked on a 2.6 kernel last I tired. It's about as universal as things get in linux. Only way I can think of it being more universal is to somehow make it a fat binary with builtin QEMU user-mode emulation so it runs on arbitrary architectures.

1538151527
halosghost
including a UEFI header so it can run on absolute bare-metal? :P

1538152944
MajorLag
hmm... a simple benchmark I had for some of my code lost 4ns/loop in zig 0.3 release-fast compared to zig 0.2.

1538152980
halosghost
lost meaning it's slower or faster?

1538152986
andrewrk
MajorLag, that almost certainly has to do with the difference between LLVM 6 and 7

1538153071
MajorLag
it's slower, and yeah since LLVM is the one doing the optimization I'm pretty sure it is to blame.

1538153095
halosghost
well, that's too bad ):

1538153197
andrewrk
there's still stuff zig could be doing to help llvm optimize more

1538153231
andrewrk
I'm hoping that exploring pointer aliasing (the disallowing of it by default with safety checks, etc) will yield some good results

1538153261
andrewrk
especially if we can ditch Type Based Alias Analysis, and just make it something like You Can Only Alias If You Tell The Compiler About It Based Analysis

1538153264
halosghost
afaiu, certainly a more liberal use of restrict pointers helps with performance easily

1538153265
MajorLag
Interesting, release-small is actually a bit faster

1538153292
halosghost
MajorLag: if I had a nickel for everytime I've seen -Os binaries outperform -O2 binaries, I'd have lots of money

1538153302
andrewrk
--release-fast is equivalent to -O3

1538153332
andrewrk
this proposal is to address that:

1538153365
andrewrk
idea being that you choose an overall optimize for - perhaps --release-small, but then at package level, scope level,  you can override what to optimize for

1538153389
halosghost
mm, that sounds fun

1538153393
andrewrk
maybe you want a debug build but your blake2b implementation should just go ahead and be --release-fast

1538153408
MajorLag
I'm not using any pointers in this code, at least not on purpose. It's possible that passing the struct "by-value" is actually being passed as a pointer, but @sizeOf it is only 4 so I doubt it.

1538153414
halosghost
andrewrk: does zig do anything / have anything analogous to intN_fast_t and intN_least_t?

1538153443
andrewrk
MajorLag, right now zig does not optimize by passing small structs by value. even a struct with 1 field is passed by reference. however llvm could decide to make it by value

1538153471
andrewrk
zig also doesn't re-order struct fields yet. there's a lot we haven't tried to do yet

1538153490
MajorLag
ok, but that'd be true of zig 0.2 as well. And since the 0.2 master I'm testing with is only slightly out of date of 0.3 it has to be LLVMs doing.

1538153509
andrewrk
halosghost, I investigated intN_fast_t and intN_least_t early on and came up with the conclusion that they're at best worthless, at worst actually accomplish the opposite of intended

1538153520
halosghost
haha

1538153542
andrewrk
just use the number of bits that you need; zig is allowed to use a larger type if it's faster

1538153543
halosghost
any write-up of that? I'd be interested in knowing your thoughts

1538153548
halosghost
ahh

1538153550
halosghost
fair enough

1538153566
andrewrk
even in structs. because zig does not guarantee the size of structs

1538153570
halosghost
I suppose with {i,u}N now being a thing, it's certainly less of a useful idea

1538153584
MajorLag
and if you need exactly that size, i.e. for structs, that's what `packed` is for.

1538153591
halosghost
right

1538153712
MajorLag
well, anyway, nothing to do but soldier on. The code in question should be faster anyway.

1538153860
andrewrk
the blessing and the curse of llvm is that it's a bit of a black box

1538159542
DutchGh0st
YAAS! :D

1538159683
DutchGh0st
good job \o/

1538160228
halosghost
andrewrk: you said that {i,u}Ns get gracefully compiled to bitfields in packed structs; does that include both sub-power-of-two sized ints and super-sized ones?

1538160303
halosghost
andrewrk: e.g., does an i129 compile down to something like `struct { int64_t upper, lower, top: 1 }`, and an i7 to `struct { int8_t i: 7 }`?

1538160317
halosghost
actually, scrap that

1538160321
halosghost
let me ask the real question

1538160395
halosghost
mmm

1538160410
halosghost
nah, I just need to think about this more before I interrogate you :)

1538160838
andrewrk
halosghost, yes

1538160871
halosghost
awesome

1538160872
andrewrk
yes,  that includes both sub-power-of-two sized ints and super-sized ones, (not that you need to think more)

1538160882
halosghost
right

1538160899
halosghost
well, I'm still on the fence about whether or not it will help me, but it's cool to know :)

1538161839
MajorLag
andrewrk, I'm considering making a pull request that would alter std in a breaking way. What's the easiest way to run every test in std?

1538161977
andrewrk
MajorLag, zig test std/index.zig

1538162009
andrewrk
if you just did make install from the build folder: ./zig test ../std/index.zig

1538162023
MajorLag
\std\io.zig:619:13: error: unable to find 'io_test.zig'

1538162036
andrewrk
yeah - zig doesn't ship with the std lib tests

1538162048
andrewrk
you'll have to use the std/ from source

1538162054
MajorLag
really? there are tests in std

1538162069
andrewrk
yeah but if there's a file that is just tests we don't ship it

1538162078
andrewrk
mostly because of a couple compiler_rt tests that are multiple MiBs

1538162108
MajorLag
well for the first pass I don't really need that thurogh a test.

1538162353
andrewrk
you can also run the zig test suite with -Dskip-release which takes about 5 minutes

1538162378
andrewrk
that will run the std lib tests on all targets, even non-native ones

1538162669
MajorLag
ok. Also, what's the status of meta.zig? I thought there was a branch for it, but can't find it anywhere.

1538162694
MajorLag
nevermind, I just did

1538162706
andrewrk
I think it is quite bit-rotted at this point

1538162761
DutchGh0st
alexnask iss not around anymore  ?

1538162915
MajorLag
I can probably fix that as it is tangentially related. How do you feel about including it in std even without replacing the builtins for now?

1538163010
halosghost
andrewrk: so, another question on {u,i}N: a u1 can either hold the values 0 or 1; am I correct in thinking that an i1 can only hold the values 0 or -1?

1538163040
andrewrk
MajorLag, I would consider that progress

1538163057
andrewrk
halosghost, correct

1538163063
halosghost
fun

1538163082
halosghost
I love how that implies the possibility of a negative bool

1538163094
halosghost
e.g., the difference between “oui” and “si” in French

1538163396
tbodt
is there documentation for the stdlib somewhere?

1538163414
tbodt
or is that in the "we'll get to it someday" list

1538163469
DutchGh0st
is there a 'comptime if' or 'inline if' thingy?

1538163549
andrewrk
tbodt, that's something that is high priority, but I'm insisting on solving it with auto-generated html documentation from the self-hosted compiler

1538163562
andrewrk
so it's a big milestone to get there

1538163585
halosghost
DutchGh0st: there are comptime expressions

1538163593
DutchGh0st
yeah but hold on,

1538163595
andrewrk
DutchGh0st, all if and switch expressions are implicitly comptime if the condition/target expression is comptime known

1538163608
halosghost
andrewrk: ooh, that's fun

1538163629
andrewrk
if you want to force an if or switch to be comptime you can do so simply by putting `comptime` before the condition/target expression, and you'll get a compile error if it couldn't be done

1538163655
tbodt
why is the compiler being made self-hosting? I read somewhere that it solves actual problems but didn't see what those problems were

1538163685
DutchGh0st


1538163700
DutchGh0st
while I just created an unsigned integer type, and passed that to 'is_signed()'

1538163719
andrewrk
tbodt, here is some info

1538163761
andrewrk
the goal is to build the compiler for all targets

1538163796
andrewrk
there's also just the features of zig that I want to use, e.g. async/await with a thread pool. C++ doesn't have that

1538163814
halosghost
andrewrk: if all the arguments of a function are comptime, that function is purely comptime as well, even if user-defined; yeah?

1538163837
andrewrk
halosghost, it won't necessarily be executed at compile-time

1538163841
halosghost
mmmm

1538163865
halosghost
I suppose it would depend on what's in the function body for if it's even possible to be at comptime

1538163866
andrewrk
if it has any parameters or return value types that require comptime, that will force it. e.g. if a parameter has type `type`

1538163887
halosghost
mm

1538163901
andrewrk
the way you can think about it is, you shouldn't have to care whether something happens at comptime or not. so don't worry about it. if you need something to be at comptime, then you can force it to be so

1538163913
halosghost
right

1538163960
halosghost
I'm trying to figure out how my idea for a space-efficient Rational implementation might work now that {u,i}N are a thing

1538163996
andrewrk
DutchGh0st, see

1538164020
andrewrk
for now you will have to use `if (comptime is_signed(N))`

1538164070
DutchGh0st
Ohh

1538164072
DutchGh0st
hehehe

1538164120
DutchGh0st
there isn't a @isSigned() compiler defined function, is there?

1538164131
DutchGh0st
nor a @bitCount()

1538164145
halosghost
there's @typeInfo now

1538164156
halosghost


1538164177
andrewrk
DutchGh0st, int types have a `is_signed` field

1538164197
andrewrk
u32.is_signed

1538164197
DutchGh0st
yeahh that's what I used for is_signed() and bitcount() :)

1538164212
DutchGh0st
Im doing it the good way then I suppose

1538164219
andrewrk
yeah. that might get removed since @typeInfo gives you identical info

1538164286
DutchGh0st
I like how you get to write your own helper functions for stuff like that, and get to exactly write what you want it to do

1538164291
halosghost
@typeInfo(T).Int.is_signed and @typeInfo(T).Int.bits iirc

1538164338
halosghost
(not entirely sure)

1538164347
DutchGh0st
yeup

1538164445
DutchGh0st
and btw, how would you use inline while to unroll a loop, 4 times

1538164503
DutchGh0st
but for each of those 4 unrolls, you want to keep track of a variable, and at the end, sum up all the 4 values,

1538164513
DutchGh0st
how'd you do that?

1538164652
DutchGh0st
so like, loop over [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], by 4 at a time, then do something like 'var r1 = val1 + 1; var r2 = val2 + 1; var r3 = val3 + 1; var r4 = val4 + 1; result += r1 + r2 + r3 + r4'

1538164672
andrewrk
DutchGh0st, sounds like you want

1538164784
DutchGh0st


1538164847
DutchGh0st
see, I'd like to create d1, d2, d3 and d4, and then say 'result = result +% d1 +% d2 +% d3 +%d4;

1538164993
DutchGh0st
instead of 'create d1, add d1 to result', 4 times, I'd like to do this: 'create d1, d2, d3, d4, add d1, d2, d3, and d4 to result'

1538165267
Hejsil
DutchGh0st, use an array? var d: [N]u8 = undefined; {Do inline while loop}; result = d[0] + d[1] + d[2] + d[3];

1538165303
DutchGh0st
I guess

1538165345
DutchGh0st
but where do I create the array then?

1538165352
Hejsil
Before your loop

1538165364
DutchGh0st
the inline loop is an inner loop

1538165372
DutchGh0st
so do I create the array outside of all the loops?

1538165379
DutchGh0st
or does it not matter

1538165391
Hejsil
Doesn't matter

1538165403
DutchGh0st
performance wise also not?

1538165409
Hejsil
Ye

1538165425
DutchGh0st
Im surprised :O

1538165432
Hejsil
{var i: usize = 1;} {var j: usize = 2;}. i and j will "probably" share the same stackspace

1538165521
Hejsil
Btw, working on a userland "@reify". This is gonna be a fun experiment

1538165548
DutchGh0st
what does reify do?

1538165569
Hejsil
Creates an `type` from a `TypeInfo` struct

1538165579
Hejsil
The reverse of `@typeInfo`

1538165637
Hejsil
We can't create TypeId.Enum, .Fn and .ArgTuple, but with some hacks, I think you can generate .Struct and .Union + the rest

1538165681
andrewrk
Hejsil, whaaat, how is that possible?

1538165728
DutchGh0st
oh so you can like write write a metafunction that defines the typeinfo?

1538165730
Hejsil
struct { data: [Size]u8, fn get(comptime field: []const u8) FieldType(field) { <get field from data field> } }

1538165737
DutchGh0st
and then boom, create a struct out of it

1538165737
andrewrk
aha

1538165738
Hejsil
You get the idea

1538165749
DutchGh0st
:D

1538165756
andrewrk
that's actually not unreasonable. I wouldn't be mad if I had to read that implementation

1538165765
Hejsil
Lol

1538165775
Hejsil
Is that a case of not having @reify?

1538165783
Hejsil
I don't even know what will come from this

1538165787
andrewrk
haha

1538165796
andrewrk
happy release day Hejsil :)

1538165800
andrewrk
thanks for all your contributions

1538165806
Hejsil
Wuuuh! 0.3

1538165821
andrewrk
and tiehuis too. I know you read the logs

1538165847
Hejsil
I've been a little inactive on the code side lately as all my project became blocked by bugs.

1538165863
Hejsil
But the bug squash weeks have fixed most of those

1538165872
andrewrk
great, let me know if there are some more I can prioritize

1538165892
andrewrk
because unless bugs are blocking people I want to get back to breaking things!

1538165898
Hejsil
Make sense

1538165921
Hejsil
I think I had some problems with the randomize, where some tests fail in any buildmodes but Debug

1538165928
Hejsil
I'll look into that at some point

1538165942
andrewrk
damn. those are the hardest to debug

1538165957
DutchGh0st
o.O

1538165969
DutchGh0st
what was the cause?

1538165984
DutchGh0st
oh nm

1538166010
Hejsil
Idk yet. I guess I could try running the tests again to refresh my memory (maybe it's fix, who knows)

1538166010
andrewrk
it's all different stuff. but the main problem is that the symptoms of bugs that affect non-debug builds are often divorced from the causes

1538166036
DutchGh0st
does slice have a 'starts_with' function? I know you can write slice[0] == '...', but thats...ugly

1538166055
andrewrk
DutchGh0st, std.mem.startsWith(T, big_slice, small_slice)

1538166066
Hejsil
I'd assume that, if debug, doesn't runtime assert, then all the release modes really should work too

1538166083
Hejsil
Ofc, if you hack hard enough, you could do some stuff

1538166087
Hejsil
But for sane code

1538166089
andrewrk
Hejsil, that's mostly true. (and we want it to be true as much as possible)

1538166096
andrewrk
but there's just some stuff we can't have safety for

1538166103
Hejsil
I know

1538166120
andrewrk
one big thing that will help that is runtime safety for use of undefined value

1538166136
andrewrk
we can't always have it, but there are lots of cases where we can

1538166176
DutchGh0st
can small_slice also be just a value rather than a slice?

1538166208
andrewrk
DutchGh0st, slice.len != 0 and slice[0] == value

1538166220
andrewrk
you are of course welcome to create a helper function for that

1538166283
Hejsil
Also, the build system assumes that `args[0]` is always a path to a zig executable, which is annoying

1538166295
Hejsil
when build the self-hosted-compiler that is

1538166319
andrewrk
hm I thought we passed it as args[1]

1538166349
Hejsil
Or, i don't actually know it gets the exe

1538166360
andrewrk
yeah:

1538166370
Hejsil
But, if I have zig in my path, i can't use it to build zig stage2

1538166417
andrewrk
hmmm. I'm not sure if I quite understand what you're trying to do. but, stage2 is not independent from stage1. it links against zig_llvm.a and I think another .a file from stage1

1538166431
Hejsil
Yeah, i know

1538166432
andrewrk
but anyway the build process for stage2 assumes that you just built stage1

1538166476
Hejsil
I can't do <make stage 1> <add stage 1 exe to path> <use the stage 1 exe from the path to build stage 2>

1538166495
andrewrk
hm. I thought you could

1538166506
Hejsil
Sec, i'll check again

1538166526
andrewrk
I just did it

1538166559
Hejsil
Or, actually, to add more details

1538166572
Hejsil
I have a .bin in my home folder that is in my path

1538166582
Hejsil
and i symlinked stage1/bin/zig -> zig1

1538166612
Hejsil
And then:

1538166613
Hejsil
zig1 build --prefix $(pwd)/build/stage2 install attempt to unwrap error: FileNotFound

1538166631
Hejsil
From zig repo root

1538166634
andrewrk
let me try

1538166756
andrewrk
Hejsil, hm interesting. I think this is simply some code in the tests that is calling std.os.real without taking into account PATH

1538166777
andrewrk
test/tests.zig:112

1538166790
andrewrk
does libc realpath use PATH?

1538166806
andrewrk
nope, looks like it does not

1538166879
andrewrk
Hejsil, ok my suggestion is that std/special/build_runner.zig:43, before it initializes Builder, should resolve zig_exe with PATH and potentially call std.os.real

1538166887
andrewrk
that will fix it

1538166937
andrewrk
or potentially even in src/main.cpp:397, where, you are right, it is using arg0 for zig exe

1538166993
andrewrk
ok even better, instead of using arg0 it should use os_self_exe_path

1538167042
Hejsil
Also, `error{} == error{}` is `false`. Intended?

1538167077
Hejsil
If it follows the rules of enums, then this makes sense

1538167118
Hejsil
But errorsets work like sets (duh), so maybe that should actually evaluate to true

1538167183
andrewrk
mmm I think error{} == error{} should probably be true. that asks the question if error{A,B} should equal error{A}  || error{B}

1538167200
andrewrk
the only complicating factor is that we plan to have doc comments get inherited. should they matter?

1538167218
Hejsil
Idk

1538167240
Hejsil
I only really need error{a,b} == error{a,b} to be true, because that makes some test code easier

1538167244
Hejsil
:)

1538167250
andrewrk
that seems like a reasonable thing to expect

1538167264
Hejsil
Aka, Reify code

1538167328
andrewrk
Hejsil,

1538167341
andrewrk
after this change, `zig build` works in the root dir, with `zig` as a symlink

1538167420
Hejsil
Nice

1538168964
Hejsil
Still note stable enough!

1538169129
Hejsil
Well, Reify is on hold, lol

1538169775
Hejsil
Hmm, seems like i don't have the "randomizer tests pass in debug but not in release" problem on linux

1538169799
Hejsil
But then again, I did only see this problem on windows

1538172435
hoppetosse
Congratulations on 0.3.0!

1538172441
andrewrk
thanks hoppetosse

1538172485
hoppetosse
I had forgotten how much had changed since 0.2.0, it's great XD

1538172567
hoppetosse
I was also very impressed with dbandstra's oxid project, some cool comptime stuff happening

1538172779
andrewrk
oh yeah. I need to update my system so that I can play it

1538172851
andrewrk
on the weekend I started a pure zig X client

1538172862
andrewrk
I think it's doable

1538172889
andrewrk
loading opengl/vulkan at runtime is another problem

1538175689
hoppetosse
I was playing with X11 and XCB earlier in the summer

1538175713
hoppetosse
I also basically translated glad.h and I'm loading opengl dynamically

1538175785
hoppetosse
It might be in tick/examples already

