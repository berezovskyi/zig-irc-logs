1545005255
ShrewdSpirit
Hello. So tonight I found zig from godbolt.org languages and it tingled my curiosity to dig for it. I'm sure it'll be my new beloved language after Go!

1545005320
ShrewdSpirit
I'm going to try clashos on my rpi and see how it works since I always wanted to make a custom OS for it

1545005967
daurnimator
zachcarter: a webview is not really what I'm interested in

1545006616
ShrewdSpirit
Do you guys have any idea why I get "/usr/bin/ld: cannot find -lclangFrontend" and other clang libraries error? I have full llvm toolchain setup

1545010929
zachcarter
daurnimator: I understand it's not comparable to Qt - but there aren't many options available for cross platform GUI

1545010951
zachcarter
if you don't want to use Electron / Chromium / CEF / Webview

1545010968
zachcarter
I'm not sure what realistic options are outside of GTK / Qt

1545011043
zachcarter
ShrewdSpirit: the linker needs to be able to find them - you need to ensure they're in a path the linker is searching in

1545011346
daurnimator
zachcarter: IUP

1545011364
daurnimator
libui has lost it's progress :(

1545011451
zachcarter
daurnimator: thank you for sharing - I was aware of libui but not IUP

1545011472
daurnimator
wxwidgets lives on of course

1545011595
zachcarter
yeah - but C++ :/

1545011664
zachcarter
and I'm not a huge fan overall

1545011673
daurnimator
IUP is frustrating

1545011699
daurnimator
but often easier to use than GTK

1545011723
zachcarter
you might enjoy this article daurnimator:

1545012342
daurnimator
zachcarter: I prefer to use the native widgets where possible. Doing otherwise tends to destroy accessibility

1545012404
zachcarter
agreed

1545013244
knebulae
andrewrk, sorry for the long delay, but info regarding the subsystem can be found here:

1545013422
daurnimator
knebulae: what was the subsystem question?

1545013517
knebulae
daurnimator: "Are there any suggestions for guidance on producing a UEFI application executable, linked with msvc .lib files (EDK-II)?"

1545013536
knebulae
daurnimator: "By way of background, these executables are just Win64-PE files with a different subsystem linked against the UEFI libraries rather than MSVCRT."

1545048854
ShrewdSpirit
Which editor do you guys use for zig?

1545048952
lorenzzzo
lol i just realized that i dont use syntax highlighting

1545048986
knebulae
ShrewdSpirit: Using VSCode with Marc Tiehuis' excellent Zig plugin.

1545049044
ShrewdSpirit
knebulae: Perfect! Thanks

1545049090
ShrewdSpirit
Also does zig support avr (more precisely arduino)?

1545049227
knebulae
ShrewdSpirit: Yes, zig supports all targets llvm supports (although the stdlib only has implementations for Linux (maybe the *BSDs)/MacOS/Windows).  "zig targets" will list the supported target triples.

1545049243
ShrewdSpirit
Cool

1545052763
knebulae
anyone have any good examples or docs on the Builder object?

1545055491
euantor
> maybe the *BSDs

1545055516
euantor
FreeBSD support is a work in progress, but there's no current support for other BSD variants as far as I'm aware

1545055875
euantor


1545056766
andrewrk
knebulae, ok, looks like we need to add more CLI flags and pass them to the linker to expose this subsystem option

1545056872
andrewrk
ShrewdSpirit, AVR isn't supported yet

1545056898
andrewrk
have a look at this table:

1545056931
andrewrk
I should remove some of the ones from `zig targets` because although llvm advertises a backend for more targets than these, when you go to actually use them you get the error message "unable to create target based on: avr-unknown-unknown-unknown"

1545057766
ShrewdSpirit
andrewrk: Oh I see. Thanks

1545057874
unique_id
cross compiling to windows and running through wine because I'm too lazy to boot up windows. The future is here!

1545057889
andrewrk
:)

1545057889
unique_id
(to test windows version)

1545057895
andrewrk
wine is an incredible project

1545057901
unique_id
yeah

1545057913
andrewrk
sometimes I read wine source code to clarify MSDN documentation

1545057929
andrewrk
then test on actual windows, and, sure enough, they got it right

1545058141
knebulae
andrewrk: I was looking at the Zig source, and am a bit torn on the least painful way to implement these linker flags.  UEFI shares almost everything in common with the OsWindows target (and the MSVC linker layout), but it also has two modes of its own, EFI_APPLICATION and EFI_DRIVER, which have different entrypoints. So the question is whether to implement an OsUefi type with its own suboptions, largely duplicating (and/or piggybacking where possible) on

1545058141
knebulae
the OsWindows target code, or implementing the two UEFI subsystems as say a -m option (thus expanding the compilation struct size, and at first glance I have no idea the side-effects here) as an additional Windows subsystem.

1545058239
andrewrk
knebulae, ah, you must be looking at the self-hosted code. I wouldn't worry about that quite yet. you're about 2 minor versions ahead of that being the thing we ship

1545058257
andrewrk
but I think your comments apply to the stage1 compiler as well

1545058278
knebulae
I found relevant code in both source dirs

1545058314
andrewrk
let's start with "what should the UI be from the user's perspective" and then work from there

1545058394
andrewrk
so it's either add `-mefi_application`  and `-mefi_driver`  or introduce `--windows-subsystem [arg]` and remove the current -m options

1545058445
andrewrk
oh I see your point about the windows target now

1545058469
andrewrk
ok, so here's what the windows target means: it means you are building an executable where the assumption is that you have a running windows operating system that you can interact with

1545058484
andrewrk
this is not true for an UEFI application, so the OS is not windows

1545058493
andrewrk
I think that's a pretty clear case

1545058523
andrewrk
we already have a non 1:1 mapping with Zig OS to LLVM OS so it won't be hard to add uefi as another os type

1545058725
knebulae
So, OsUefi as an ostype and -mefi_driver, -mefi_application to differentiate?

1545058780
knebulae
As long as changing the configuration struct to account for the additional two flags will not have adverse side effects elsewhere.

1545058849
andrewrk
knebulae, that sounds good to me. for bonus points you can change all the subsystem flags to be an enum instead of bools, and have the cli parsing code emit an error when more than one is specified

1545058893
knebulae
Damn, I haven't even had my cornflakes yet.

1545058907
andrewrk
haha

1545058916
andrewrk
that CodeGen struct is created once per compilation (1 per invocation of zig binary) so the fields may as well be global variables as far as memory use is concerned

1545059132
knebulae
gotcha

1545059184
andrewrk
is that correct that only 1 subsystem can be selected at a time?

1545059278
knebulae
yes

1545065769
oconnor0
What is the status on network programming?

1545065903
MajorLag
andrewrk: `fn interface(self: *Impl) Interface.Implement(@typeOf(self)) {` => 'error: use of undeclared identifier 'self''. That's a new one to me. If I use the type without the @typeOf I get a false 'depends on itself' error, related to #1832? using `self: var` and @typeOf(self) makes it function as expected. I guess the way parameters and return types can reference a previous parameter only works if that paramete

1545065956
MajorLag
oconnor0: IIRC it mostly doesn't exist yet. There's a big async change coming and I think we're waiting on that.

1545065977
MajorLag
You can call native APIs, but there's not stdlib implementation.

1545066102
oconnor0
MajorLag: thanks. do you know the ETA of the async change?

1545066376
andrewrk
oconnor0, it's (1) copy elision (2) async change (3) then networking should be nice

1545066389
andrewrk
hoping to have 1-3 done by next release (0.4.0)

1545066417
andrewrk
estimated release date: march 15 2019. it's dependent on llvm 8's release date

1545066457
andrewrk
oh, llvm just published that 8 comes out on Feb 27, but they'll probably be 1 week late, and then zig releases 1 week after that. so I stand by my estimate :)

1545066858
oconnor0
andrewk, awesome, thanks.

1545067182
mgxm
is anyone working on freebsd support to libc?

1545067218
andrewrk
mgxm, are you talking about

1545067257
mgxm
about the syscalls

1545067280
andrewrk
I'm not aware of any efforts of this currently

1545067310
andrewrk
if you're going to try to do it, you could follow the patterns for macosx in the standard library

1545067355
andrewrk
most of the libc functions should be in std/c/index.zig which apply to any OS. however there may be some freebsd specific things, and you can look at the example set by std/c/darwin.zig

1545067656
mgxm
so, should I replace all the functions that use syscall to use the c interface?

1545067807
MajorLag
FreeBSD doesn't officially have a stable ABI, right? So probably.

1545067895
Hejsil
MajorLag,

1545067982
MajorLag
Fiar enough, I was only even trying it to workaround the false ''depends on itself'

1545068197
andrewrk
mgxm, yes

1545068226
andrewrk
someone from the freebsd team stopped by and clarified that point

1545072542
ShrewdSpirit
Is zig fully self hosted now?

1545072556
andrewrk
ShrewdSpirit, no, some big changes are needed first

1545072558
ShrewdSpirit
Since the compilation stages confused me

1545072836
j`ey
stage1 is C++

1545074023
knebulae
andrewrk: a wrinkle, now that I've done my homework.  LLVM treats the target triple for UEFI subsystems as x86_64-pc-win32-coff.  Given the current state of the code, I'm inclined to think that rather than creating a new os type for UEFI, extending Windows would be the best bet, and it would prevent having to mess with any of the code that interfaces with LLVM and deals with target triples. Thoughts?

1545074092
andrewrk
knebulae, I understand that to LLVM the target triple is windows - this has to do with calling conventions and mangling and such. but the windows target to Zig means much more, and I'm still confident that UEFI in zig should be represented as a different operating system

1545074110
andrewrk
the LLVM/target triple code is simple, I don't foresee that being a problem

1545074110
knebulae
Ok.  Fair enough.

1545074156
andrewrk
as an example, in zig you should be able to do this:  if (builtin.os == builtin.Os.windows) { std.os.windows.RtlGenRandom(...); }

1545074179
andrewrk
e.g. it's a valid assumption that if the target OS is windows, you can call the RtlGenRandom DLL function

1545074187
andrewrk
however this is not true for the UEFI target

1545074200
andrewrk
does that make sense?

1545074204
knebulae
Understood

1545074251
knebulae
Absolutely.  Stupid question -- where are the builtins defined?

1545074269
andrewrk
they are generated by the compiler. you can see them with `zig builtin`

1545074287
andrewrk


1545076891
MajorLag
Hejsil, after playing around with a few other ways it could be done, I haven't come up with a better approach to interfaces than yours. Seems you've thought it through pretty well.

1545084812
andrewrk
oh boy, I think I may have solved copy elision for @sliceToBytes. that was a tricky one

1545084836
andrewrk
the parameter expression writes directly to the return value

1545084858
andrewrk
or, "refers directly" rather than "writes"

1545089573
daurnimator
"a running windows operating system that you can interact with" <-- could you define this?

1545089611
daurnimator
andrewrk: would "a running nt kernel" be a suitable definition?

1545089622
daurnimator
or do you really mean "win32 is available"

1545089659
andrewrk
I would define it as all of the public API of kernel32.dll being available, and correct, to interface with

1545089722
daurnimator
andrewrk: oh... so somewhere in between nt and win32? that's sorta awkward >.<

1545089748
andrewrk
was that a trick question? sounds like there's something you're implying

1545089791
daurnimator
andrewrk: most windows applications as microsoft make them is a stack of: nt kernel | NTDLL.DLL | kernel32.dll | user32.dll

1545089851
daurnimator
you can create programs that use any number of pieces starting from the left

1545089890
andrewrk
right. so far zig std lib for windows depends on the first 3

1545089904
andrewrk
and I don't think you can depend on any of those for UEFI applications

1545089907
daurnimator
it's

1545089931
daurnimator
(though not impossible)

1545089940
andrewrk
we've avoided it so far. what do you think the standard library will need it for?

1545089967
andrewrk
I'm not necessarily against it, I just haven't seen a need for it yet, and the null hypothesis is fewer dependencies

1545089994
daurnimator
andrewrk: on windows if you do certain things, (like create a graphics handle? I can't remember...) then user32.dll gets loaded in and there's nothing you can do to stop it

1545090048
andrewrk
that's fine - I imagine that applications and libraries which want to do that will have a quite reasonable dependency on user32.dll

1545090065
daurnimator
this is notable because as soon as user32.dll gets loaded into your process on windows, you can no longer fork

1545090075
andrewrk
what dll call is that?

1545090080
andrewrk
I don't think we use that in the standard library

1545090127
daurnimator
andrewrk: this is also related to subsystems. usually things that use ntdll.dll directly and not kernel32.dll are called "native subsystem"

1545090144
andrewrk
I'd like to read more about this

1545090147
daurnimator
native subsystem windows programs are much more interesting from a unix POB

1545090149
daurnimator
*POV

1545090162
daurnimator
also for windows early boot you can

1545090176
andrewrk
my understanding was that kernel32 is the lowest abstraction level windows offers

1545090196
daurnimator
it's the lowest one they document well :P

1545090230
daurnimator
anything lower and the official line is "hear-be-dragons". but for various reasons they can never change it without breaking ABI for *EVERY WINDOWS PROGRAM EVER*. so it's not going anywhere

1545090233
andrewrk
I still think a UEFI executable makes sense to be a separate target OS from windows though. for example my laptop uses UEFI but boots linux

1545090243
daurnimator
andrewrk: yes UEFI should be a different target

1545090245
andrewrk
well, one of my laptops :)

1545090270
daurnimator
andrewrk: however our definition of "windows" doesn't exactly make sense. I think you need to split it into "nt" and "win32"

1545090278
andrewrk
ahh, this is the crux of your point

1545090281
daurnimator
where win32 is 98% a superset of nt.

1545090306
andrewrk
I think there could be a good case to make for this, and I would like to officially consider it

1545090327
andrewrk
on the issue tracker

1545090444
daurnimator
it also has a different side.... wine emulates win32 well, but less-so nt.

1545090452
daurnimator
whereas reactos emulates nt

1545090471
andrewrk
oh, interesting. I thought those were mostly the same codebase

1545090495
daurnimator
reactos is a reimplementation of the nt kernel

1545090516
daurnimator
(and low level dlls)

1545090550
daurnimator
wine is more rewriting kernel32.dll calls to be linux syscalls along with managing lots of misc state.

1545090579
daurnimator
though wine implements

1545091077
daurnimator
andrewrk: will create an issue now I guess

1545091084
andrewrk
daurnimator, thanks, I appreciate it

1545091093
andrewrk
it's good to have someone around who is intimate with windows

1545091148
andrewrk
if you write up the issue, it will help to understand some example use cases where someone would care whether they were targeting one, or the other. in other words, why should we make the user have to care about the difference?

1545091175
andrewrk
it sounds like there are some good answers to this, which would be useful in the issue

