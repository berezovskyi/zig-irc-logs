1523785404
achambe
So, anyone have any applications they are writing in zig? or is it still early days

1523786537
Aequus
Err, using -DCMAKE_PREFIX_PATH didn't work, I get a silly error saying file INSTALL cannot copy file "..." to "/usr/local/bin/zig" even though I don't want it to install to /usr/local, that's why I set it in the first place... When I manually edit cmake_install.cmake and change /usr/local to the prefix I want, it installs it there, but trying to compile anything with Zig, it tells me that it cannot find zig

1523786543
Aequus
lib directory and to reinstall or use --zig-install-prefix, but when I pass --zig-install-prefix=PREFIX, it says invalid argument. Any ideas as to how I can install and use Zig properly from PREFIX?

1523786612
Aequus
Also when I run "make install", it says "Install configuration: "Debug"", how do I change it to release, if possible?

1523786638
Aequus
I know how to workaround the issue, but I want to do it the proper way. :P

1523786689
Aequus
Funnily enough it attempts to install the libembedded_lld_*.a to the PREFIX, but not the zig executable.

1523786890
Aequus
Actually nevermind, my problem was that I used = after --zig-install-prefix. >.>

1523786906
Aequus
.ls

1523786921
Aequus
"zig --zig-install-prefix ~/.local/pkg/zig-0.2.0 build-exe --release-fast hello.zig" works.

1523786926
Aequus
Sorry. :P

1523787076
Aequus
And as to why it tried to install the libembedded_* stuff to CMAKE_PREFIX_PATH whereas the rest to CMAKE_INSTALL_PATH, I dunno.

1523787274
Aequus
CMAKE_INSTALL_PREFIX*

1523787589
Aequus
Huh, I rebuilt and reinstalled with -DCMAKE_BUILD_TYPE=Release, and when issuing the same command that worked with DEBUG, I'm getting:

1523787592
Aequus
: CommandLine Error: Option 'color' registered more than once!

1523787594
Aequus
LLVM ERROR: inconsistency in registered CommandLine options

1523787822
tiehuis
Aequus: when you run your `cmake ..`, is it showing clang with .so files and llvm with .a or vice versa?

1523787897
tiehuis
also, if you want something easy, you can try the master builds from CI:

1523787898
Aequus
tiehuis: Oh, it uses gcc.

1523787921
Aequus
Well it also says found LLVM and CLANG, so I dunno.

1523787928
tiehuis
these are all statically linked so you shouldn't have any particular issues

1523787944
tiehuis
i was having that issue show up in arch when building from source, what is your os/distro?

1523787950
Aequus
arch

1523787976
tiehuis
you can install the package the aur and that should work

1523787986
tiehuis
i had to add a patch to the build step to get around this particular issue

1523788023
Aequus
Ah, all right. Thanks. :)

1523788032
tiehuis
as it seems libclang doesn't provide .a files for static linking so when building it finds the libclang.so and llvm.a files and there is an issue when dynamically linking libclang but statically linking llvm

1523788463
Aequus
tiehuis: Heh, the only reason I wanted Release is because I thought it'd disable dumping a core when the .zig file I'm trying to build doesn't exist. Any ideas?

1523788483
Aequus
This:

1523788484
Aequus
unable to open './hello.zig': file not found

1523788484
Aequus
Aborted (core dumped)

1523788571
tiehuis
aur does a release build, if you wanted to do manually however, you should just be able to modify your CMakeLists.txt with this patch:

1523788575
tiehuis


1523788606
Aequus
Yes, I did that.

1523788618
tiehuis
you shouldn't get a core dump file with that by default

1523788632
Aequus
That's odd. :/

1523788662
tiehuis
maybe you have them enabled by default, have you tried anything here?

1523788742
Aequus
I probably have it enabled, but I thought it wouldn't dump a core with Release (and that patch), and I'm not sure if it's normal behavior from zig. I should probably disable automatic core dumps though.

1523788771
tiehuis
i don't get core dumps even with a debug build

1523788830
tiehuis
it should be an os dependent thing and not visible a zig thing i believe

1523788893
Aequus
Yeah but why would it abort when it could just gracefully exit having not found the source file? I thought it was a Debug/Release thing where with Debug it would abort, and with Release it would just exit or something.

1523789092
tiehuis
it shouldn't really, let me make an issue and i can change that tomorrow

1523789124
tiehuis
actually, i'll just do this now

1523789864
tiehuis
there are actually a few things to consider with how this interacts with tests so it's not a completely trivial change

1523793044
Aequus
LOL, I told my friend about Zig, I made the claim Zig's comptime is epic and generates optimized/better ASM, and he didn't believe so he gave me an example of gcd written in C, told me to write it in Zig, and also told me the optimal ASM would be "foo: movl $120, %eax ret". GCC and Clang transformed the tail recursion into a loop and then inlined it, but didn't precompute the result, etc... whereas what I did

1523793050
Aequus
was: copy his code (could have translate-c'd it) add comptime params, then do: "zig build-obj gcd.zig --release-fast --emit asm" and the result was exactly the optimal asm! I guess I convinced him... He was too lazy to bother with the talk that mentioned it so had to do it this way. :D

1523797300
achambe
Yeah, the comptime feature is really something I want to explore

1523802826
andrewrk
Aequus, unless you're trying to hack on the compiler itself, you can use the statically linked CI build of master branch

1523802838
andrewrk


1523811455
andrewrk
alexnask, I figured out #894

1523811638
alexnask
@andrewrk Cool, what was the issue?

1523811660
GitHub42
[zig] andrewrk pushed 1 new commit to master:

1523811660
GitHub42
zig/master 4a2bfec Andrew Kelley: fix linux implementation of self exe path...

1523811661
andrewrk
this ^

1523811680
andrewrk
sorry for the trouble. pretty annoying bug

1523811838
alexnask
ah so basically it would read garbage after the executable path? Pretty weird that it seemed to happen randomly though :p

1523813247
GitHub164
[zig] andrewrk pushed 1 new commit to master:

1523813248
GitHub164
zig/master b5459eb Andrew Kelley: add @sqrt built-in function...

1523817292
xkern
do you have  a book  recommendation  for writing compiler ?

1523818196
andrewrk
xkern, I recommend trying it without reading any books

1523818208
andrewrk
and if you get stuck you can read other compiler source code for inspiration

1523818223
andrewrk
once you have something basic working without reading anything, you will know what you want to read about

1523820156
GitHub136
[zig] andrewrk pushed 1 new commit to master:

1523820156
GitHub136
zig/master a8d7942 Andrew Kelley: exit with error code instead of panic for file not found

1523820175
GitHub69
[zig] andrewrk pushed 1 new commit to master:

1523820176
GitHub69
zig/master 859b10d Andrew Kelley: std.math.ln and std.math.exp use float strict mode...

1523820176
andrewrk
Aequus, ^ panic issue fixed (at least for the case you were hitting)

1523820266
Aequus
andrewrk: Thanks. :)

1523820348
andrewrk
alright, back to playing with kernel threads :)

1523825111
xkern
andrewk: thanks . i understood from  your message you start and if you get stuck look up tutorials.

1523828925
alexnask
Is there a way to switch the linker zig uses?

1523828948
alexnask
Or should I compile to an object file and have some script do the linking?

1523829015
andrewrk
alexnask, when linking, it's a non-negotiable assumption that zig will use its own linker (which is LLD)

1523829029
andrewrk
however, exporting .o files is supported, as you mentioned

1523829032
andrewrk
what's your use case though?

1523829042
alexnask
Ok, I assume on windows the object files are COFF?

1523829051
andrewrk
corret

1523829053
andrewrk
*correct

1523829067
alexnask
I want to use clinker (

1523829084
alexnask
I'd like to see what binary size I can get down to using just some basic std functions

1523829092
andrewrk
ah, the goal is to get the binary size down

1523829109
andrewrk
see also

1523829115
alexnask
Yes, I'm looking at writing some simple 4KB demo

1523829168
andrewrk
you can also consider running the final executable through upx

1523829227
alexnask
I'm planning on trying out packers, yes, I just want to see if I can get the standard tools people use with C++ running with zig

1523829245
alexnask
I think it will be good enough even without LLVM -Os

1523829262
andrewrk
yes in this case I recommend taking advantage of build-obj

1523829295
alexnask
I will try to contribute to that issue for the compiler though, sounds simple enough

1523829358
andrewrk
alexnask, it should be pretty straightforward. start with modifying

1523829377
andrewrk
we'll probably want to figure out what clang sets OptLevel to for -Os as well

1523829386
alexnask
Will do

1523830690
GitHub166
[zig] andrewrk pushed 1 new commit to master:

1523830691
GitHub166
zig/master b936064 Andrew Kelley: add @atomicLoad builtin...

1523832260
andrewrk
alexnask, another possibly relevant issue:

