1538454069
emekoi
is the hello_libc example up to date?

1538455823
andrewrk
emekoi, yes - it's covered by the main test suite

1538455863
andrewrk
./zig build-exe ../example/hello_world/hello_libc.zig --library c

1538455945
Graznarak
Does Zig have anything special that you have to do, besides casting an int to a pointer, to place a structure at a specific memory location?

1538455972
andrewrk
Graznarak, no

1538455979
andrewrk
if it's memory mapped I/O you might want volatile

1538456016
Graznarak
Ok.  I know in C++ (and maybe C?) it is UB to dereference a pointer that does not point to memory received from the runtime.

1538456027
Graznarak
That will definitely make it easier to do some bare metal stuff.

1538456158
andrewrk
I'm off to bed. I'll check back for more questions in the morning

1538456184
tyler569
that's not accurate Graznarak, it's just implementation-defined

1538456199
tyler569
in C at least

1538467030
sepisoad
hi, where can i find documentation about using c library in zig, I have a c library which i want to use in my zig program, I need to include a couple of c header files and the link to some static and shared libraries

1538467363
Hejsil
I don't think there are any documentation on this front yet. Are you using the build system or just building from the commandline?

1538468237
sepisoad_
Hejsil: i am using command line ATM

1538468259
sepisoad_
the documentation for zig build is missing

1538469022
tiehuis
sepisoad_: here is an example using the build system:

1538469034
Hejsil
Alright. The command line has a --library option. It works the same as -l in C compilers

1538469038
tiehuis
on the command-line the `--object` and `--library` flags should get you most of the way there

1538469069
tiehuis
`--library` can take a specific file-path to a dynamic library

1538469097
tiehuis
can't remember if static libraries need to be specified using `--library` or `--object` but one of those should work

1538469180
Hejsil
As for including headers:

1538469297
sepisoad_
tiehuis, Hejsil: thanks

1538483357
dimenus
andrewrk: congrats on 0.3 release!

1538486306
andrewrk
dimenus, thanks :)

1538486767
andrewrk
scientes, I'm looking at your ARM PR now

1538486792
andrewrk
did you have a solution in mind for CI or should I investigate that now?

1538487413
kmelva
Is there a way to introspect struct field names in a metaprogramming way? For example for implementing serialization to JSON?

1538487472
andrewrk
kmelva, yes. you can see an example here:

1538487509
andrewrk
kmelva, better example, look at lines 175-188

1538487634
kmelva
cool, thanks!

1538487709
andrewrk
kmelva, you may also be interested in this proposal:

1538487753
andrewrk
although you could probably get away without needing something like that, playing tricks with empty structs

1538487791
andrewrk
since empty structs are available to reflection but do not generate any runtime code

1538487822
andrewrk
automatic json serialization/deserialization is something people have thought about but nobody has blazed the trail yet

1538487842
kmelva
I think @typeInfo/@typeId are what I was looking for!

1538487843
andrewrk
you can probably build your code using the lower-level JSON api in the standard library

1538489607
Graznarak
Can you place a struct (think interrupt vector) at a specific location?  Last night we established that you can point a pointer to any location you want.

1538489826
andrewrk
Graznarak, wouldn't that be the same thing as pointing a pointer to a struct to a specific location?

1538489949
andrewrk
have a look at this project, I think it does a lot of what you want:

1538490050
Graznarak
So, do something like create a pointer and initialize the struct at compile-time?

1538490210
andrewrk
I see what you're asking. You need a linker script for that

1538490299
andrewrk


1538490309
andrewrk


1538490353
Graznarak
Thanks.  That was exactly what I was looking for.

1538491472
andrewrk
scientes, this is great work

1538502196
halosghost
ugh; I really wish I could work on Zig (or even C) at $DAYJOB

1538502201
halosghost
C# is a bit soul-crushing

1538502211
halosghost
s/on/with/

1538503308
very-mediocre
halosghost: recently I had to extend a PHP codebase from 2007

1538503321
very-mediocre
I know that feel.

1538503345
halosghost
very-mediocre: ):

1538503376
halosghost
very-mediocre: $DAYJOB is rewriting a C# codebase that feels like it was written sometime around Leviticus. But I'm being pushed into using things like EntityFramework which suck

1538503382
halosghost
it's really frustrating

1538503401
very-mediocre
C# became much more Javaish at some point

1538503414
halosghost
I thought it always was

1538503418
very-mediocre
Like you're not expected to compose things on your own, no, you use the "official" EntityFramework

1538503418
halosghost
but it definitely feels like Java

1538503428
very-mediocre
I used early C# circa 2.0

1538503437
very-mediocre
it was a lot less opinionated

1538503468
very-mediocre
I checked out .NET core recently and I cringed when I saw you had to instantiate a "Kestrel" to start the server

1538503548
very-mediocre
This is gonna sound like blasphemy - but JavaScript seriously liberated me from that kind of mindset

1538503557
halosghost
yeah

1538503563
very-mediocre
anonymous objects were an epiphany for me

1538503564
halosghost
C liberated me from that mindset

1538503587
very-mediocre
You're more perceptive than me then

1538503600
very-mediocre
lol

1538503600
very-mediocre
I started with C and then got involved in C# thinking of it as an "evolution"

1538503618
halosghost
yeah

1538503644
halosghost
after I figured out what void* is and its basic semantics, the trappings of big frameworks fell on my ears, deaf

1538503713
very-mediocre
It makes sense for languages to be minimalistic

1538503718
very-mediocre
DRY works as a metaconcept too

1538503747
very-mediocre
C# and Java have too many overlapping concepts

1538512355
edr
we need a #zig-offtopic so I can argue some of these points ;)

1538514055
rom1504
Kestrel is the server

1538514505
halosghost
you're a server

1538514643
andrewrk
hopefully this coroutine rewrite I'm doing works well, then we can have zig servers

1538514894
bbrittain
tell me more about this rewrite...

1538516393
tom1998
heyo!

1538516407
tom1998
I'm trying to @cimport enet (a networking abstraction library), I'm getting this:

1538516417
tom1998
compiler bug: @cImport generated invalid zig code

1538516417
tom1998
pub const enet = @cImport({

1538517121
tom1998
So, after double checking, i'm like 99% sure this isn't the enet library - it's saying that there's a redefinition of 'suboptarg'

1538517168
tom1998
It won't display the C source code though, so i'm not sure - is there something I've #defined wrong?

1538517187
tom1998
I'm aware this isn't too much info, but this err msg is giving me tnothing

1538519323
andrewrk
tom1998, you can use `zig translate-c` command line interface to see the zig code that @cImport generates

1538519362
andrewrk
it might be this issue:

1538519387
andrewrk
bbrittain, details here:

1538519410
andrewrk
short summary is:  LLVM's coroutine support is buggy, slow, and has poor semantics. so we're going to redo it using normal structs & functions

1538519443
andrewrk
async can no longer give error.OutOfMemory. coroutine frames can be allocated on the stack, heap, globally, etc, just like any other type

1538519495
andrewrk
cancel no longer needs to do a reference counting thing, since coroutines don't free themselves

1538519580
tom1998
After moving to my linux laptop, seems like this issue only happens on OSX, although I was using GCC on linux, let me try with Clang on linux

1538519659
tom1998
Also built fine with clang on linux

1538519691
tom1998
I have to get to bed now, but I'll have a look on translate-c tomorrow, does zig just run translate-c on all the c code then compile it as zig code?

1538519728
andrewrk
tom1998, yes, except it goes directly to AST in memory; it does not literally run a command line application and then generate text and parse text

1538519753
andrewrk
a better way to think of it would be that translate-c is doing @cImport and then rendering the AST to text

