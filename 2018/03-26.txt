1522023235
Sahnvour
making progress in adding stacktrace for COFF, now I'll need to find out how/where to find the addres->source file relations

1522034807
Ojoshuaolson1
Zig's undocumented build system has impressive goals. Is there a good persistent place to list notable existing ones for intelligent discussion? Besides the mentions in

1522034868
Ojoshuaolson1
That issue is closed, btw. Zig forum one day? :P

1522035085
GitHub124
[zig] andrewrk closed pull request #860: doc: fix typo and tighten wording in error sections (master...patch-1)

1522035091
GitHub115
[zig] andrewrk pushed 2 new commits to master:

1522035091
GitHub115
zig/master c0a69a5 Andrew Kelley: Merge pull request #860 from jayschwa/patch-1...

1522035091
GitHub115
zig/master 3e836f5 Jay Weisskopf: doc: fix typo and tighten wording in error sections...

1522035266
Ojoshuaolson1
I'll assume someone saw this. I understand this wouldn't belong in an issue tracker.

1522035368
Ojoshuaolson1
kthxbai

1522073550
andrewrk
Sahnvour, exciting

1522073658
andrewrk
Sahnvour, I think there are a couple approaches you could take. The most straightforward way would be

1522073695
andrewrk
this is unfortunate because it depends on some DLLs that ship with MSVC. But maybe that's OK for debug mode. Or maybe we try to parse pdb files

1522073726
Sahnvour
oh, I assumed the solution would have to be in pure Zig

1522073780
andrewrk
that would be better. unfortunately microsoft decided to provide an API for debug info instead of documenting the format

1522073892
Sahnvour
I think they open-source'd it not so long ago to help the llvm folks

1522073949
Sahnvour
wait, I was thinking that Zig emitted the debug information directly in some COFF section, but it's using pdb files after all ?

1522073957
andrewrk
correct

1522073999
andrewrk
this is provided by LLVM and LLD

1522074018
Sahnvour
ok

1522074486
andrewrk
best possible scenario: we are able to understand debug info with no external dependencies on DLLs

1522074681
Sahnvour
indeed

1522074729
Sahnvour
if llvm has an implementation for reading/writing this format, would it be possible to make use of it, by embedding it inside the zig compiler as some kind of builtins ?

1522074845
andrewrk
the problem with that is that userland programs written in zig need this code embedded in them to print their own stack traces

1522074868
andrewrk
we don't want userland programs written in zig to depend on llvm

1522075042
Sahnvour
maybe I'm missing something but I was thinking about building it right into the zig executable (on windows), statically linked and all (given that there effectively is such a library in llvm)

1522075238
andrewrk
so let's say it's in the zig executable. and now we have a hello world zig program which calls @panic

1522075256
andrewrk
we build hello world with zig, and then run it

1522075260
andrewrk
and it should print a stack trace

1522075271
andrewrk
zig.exe is independent from helloworld.exe

1522075491
Sahnvour
oh, right

1522077957
Sahnvour
I'm not sure it would be doable to use the DIA lib, as it relies on COM and proprietary extensions of msvc (`__uuidof`)

1522077981
Sahnvour
also LLVM has some documentation on the pdb format

1522078443
andrewrk
excellent

1522082106
andrewrk
a recording of the talk I did last week is uploaded:

1522088561
halosghost
o/

1522088576
halosghost
how's it going everyone?

1522088658
isd
\o

1522088679
andrewrk
hello

1522088847
halosghost
andrewrk: I'm really interested in zig; everything you're aiming at (C without the warts, manual memory management, seamless C interop, great cross compilation story) is deeply exciting

1522088881
halosghost
I'm also super excited that 0.2.0 cleaned up a lot of the syntactic noise by replacing sigils with clearer keywords

1522088977
halosghost
I do have a question though: is there a specific motivation for the layouting of blocks (e.g., the for loop syntax being `for (collection) |member|` instead of being some variant of `for member in collection`)?

1522089101
andrewrk
halosghost, only to be consistent with other syntax. switching on a union(enum) unwraps the payload:  Foo => |payload| {}

1522089117
andrewrk
unwrapping a nullable or error union:  if (foo()) |value| {} else |err| {}

1522089134
andrewrk
suspending a coroutine gives you the promise handle:  suspend |p| { }

1522089143
halosghost
cool, that's an awesome reason

1522089162
halosghost
internal consistency is very much a soft spot of mine

1522089242
halosghost
oh, that reminds me

1522089287
halosghost
am I correct in thinking that

1522089299
andrewrk
yes

1522089321
halosghost
I cannot describe how excited that makes me

1522089352
andrewrk
feel free to open as many high quality and well articulated issues as you want. I recommend searching a bit first; many ideas have been proposed and some are still open, some are closed

1522089365
halosghost
sure

1522089447
ltr_
nice talk andrewrk

1522089472
andrewrk
thanks ltr_

1522089510
andrewrk
halosghost, what project are you considering working on in zig?

1522089552
halosghost
there's not a specific project

1522089560
halosghost
C is the language with which I am most familiar

1522089566
halosghost
and most of my personal projects are written in C

1522089586
halosghost
the possibility of moving to a safer language without all the baggage that a lot of the current options offer sounds really great

1522089630
andrewrk
cool

1522089653
andrewrk
zig is a bit young, but the more people trying to use it the faster it will mature

1522089701
halosghost
yeah

1522089872
ltr_
andrewrk: what are you using for autocomplete and aid while coding?

1522089885
andrewrk
vim and grep

1522089892
andrewrk
it's not ideal

1522090061
andrewrk
I'm trying to get the self hosted compiler off the ground so that I can implement all the fun features there instead of in c++:  doc generation, language server, multithreaded compilation, caching build artifacts, watching file system for changes and auto-rebuilding

1522090086
andrewrk
language server being the one that is relevant to autocomplete and coding aid

1522090920
ltr_
thats sounds right

1522093034
faa5e
Have you considered (for recursive functions) to have functions that use the heap instead of the stack?

1522093092
faa5e
This means that some memory is allocated before the (recusive) function is called and the memory is released after the function returns.

1522093140
faa5e
It does mean that a function call can result in an allocation error.

1522093319
andrewrk
faa5e, yes - in fact this is how coroutines work

1522093325
andrewrk
the current syntax for this is

1522093332
andrewrk
async<allocator> function()

1522093349
andrewrk
and it returns error!promise, that is, it can either return error.OutOfMemory or the coroutine handle

1522093386
andrewrk
and then the caller must ensure that the handle is either canceled or awaited

1522093432
faa5e
Hi Andrew, I was just watching your presentation and heard you answer the questions about recursive functions and running out of heap.

1522093491
faa5e
I have worked on a recursive decent parser that sometimes ran out of heap and rewrote it to one using the heap with some C++ classes.

1522093510
andrewrk
neat! I'm working on the same thing with the self-hosted parser

1522093530
andrewrk
the c++ parser is recursive descent but the self hosted one is a state machine

1522093599
faa5e
(It also used goto statements for continueing after returning from a call.)

1522093653
faa5e
The parser can be found at

1522093886
faa5e
It sound very interesting with what you are doing with zig. I am going to have look into it.

1522093901
andrewrk
faa5e, welcome to the community

1522093930
andrewrk
what are you potentially working on in zig?

1522095185
hoppetosse
andrewrk: what's tiehuis' handle on irc?

1522095203
hoppetosse
I've been working on his zligc project

1522095407
andrewrk
it's tiehuis

1522095420
andrewrk
he's around  every few days

1522095422
isd
So I'm toying with getting some bare metal bringup code working with zig on x86_64, and am struggling with a linker error.

1522095430
hoppetosse
I wasn't sure if I'd seen that here or only on github

1522095434
andrewrk
isd, I can help

1522095438
isd
Here's the error:

1522095456
isd
Here's the source:

1522095457
isd
ls

1522095464
isd
(oops, reflexes)

1522095486
isd
Not sure how to get the linker to see the symbol defined in main.zig.

1522095491
andrewrk
isd, ah I think I know what's going on

1522095508
andrewrk
are you trying to make an OS?

1522095525
isd
Yeah, that's the notion

1522095532
isd
(this is a simplification from the original code)

1522095571
andrewrk
isd, oh! you just need to export zig_main

1522095585
andrewrk
export fn zig_main instead of pub fn zig_main

1522095602
isd
Aha. I thought it might be something like that, but couldn't find docs about how it worked

1522095627
andrewrk
another tip: zig supports module level assembly if you want that

1522095687
andrewrk
you could also use a naked function for the entry point

1522095703
isd
what do you mean by naked function?

1522095706
andrewrk


1522095718
andrewrk
it's equivalent to an assembly label

1522095747
isd
Aha, that would simplify the build.zig a bit. Nice.

1522095773
andrewrk
be warned: there are some missing compile errors for naked functions. the only thing it's safe to do is inline assembly and function calls

1522095784
andrewrk
if you make stack variables it'll segfault (since naked functions don't increment the stack pointer)

1522095805
andrewrk
you can also do

1522095854
andrewrk


1522095859
andrewrk
^ module level assembly example

1522096960
itsMontoya
Hi guys

1522096967
itsMontoya
Hey question, is there a way to handle errors without try?

1522097184
andrewrk
hi itsMontoya

1522097190
andrewrk
there is also `catch`

1522097203
andrewrk
catch |err| expression

1522097233
andrewrk
where expression can return a type that is the same as the type of the LHS of the catch ("default") or a `noreturn` type (such as calling @panic)

1522097251
andrewrk
sorry let me give a better syntax example:  foo() catch |e| expression

1522097266
andrewrk
and then the most powerful one is `if`

1522097291
andrewrk
if (foo()) |value| then_expression else |err| else_expression

1522097344
hoppetosse
andrewrk: I hadn't seen the latest youtube video

1522097353
hoppetosse
awesome!

1522097434
halosghost
andrewrk: and blocks are expressions?

1522097438
andrewrk
correct

1522097440
halosghost
cool

1522097459
andrewrk
in order to return an expression from a block you must label the block and then use `break :label value`

1522097469
halosghost
hmm, interesting

1522097488
andrewrk
there's a proposal to add a `result` keyword for returning a value from a block:

1522097533
halosghost
I wonder if that's a reasonable time to lift a syntax choice from rust

1522097536
halosghost
rather than adding a new keyword

1522097567
andrewrk
halosghost, are you referring to the "leave a semicolon off" to have a block return the expression?

1522097568
halosghost
in rust, iirc, if the last line of a block doesn't have a semi-colon, its value becomes the returned value of the block

1522097570
halosghost
yeah

1522097573
halosghost
thoughts?

1522097580
andrewrk
zig used to have that, and removed it to have more consistent syntax

1522097612
andrewrk


1522097704
Sahnvour
I like how zig allows idioms (or plans to) that we struggle to emulate in C++ even with modern standards :)

1522097732
andrewrk
Sahnvour, which one are you referring to?

1522097795
Sahnvour
wrt the issue 629, this is something we're doing with "immediately invoked lambda expressions" for example

1522097837
Sahnvour
which is already wuite convenient but do not feel like a native feature of the language

1522097910
halosghost
andrewrk: fernuff

1522097943
andrewrk
ah yes

1522098660
isd
Is there any documentation re: what syntax zig accepts for inline assembly? I'm trying to reproduce stuff I've gotten working in both C and Rust and struggling to satisfy the compiler

1522098791
andrewrk
isd, ah I'm sorry this is a poorly documented, error prone situation right now. The best we have are examples.

1522098836
andrewrk
look for the asm keyword in

1522098891
andrewrk
it's a subset of gcc/clang's inline assembly syntax. the constraint syntax is documented by LLVM:

1522098905
andrewrk
improvements planned:

1522100683
hoppetosse
"We will have a zigfmt. It will have no configuration options"

1522100699
hoppetosse
=)

1522103205
isd
Thought: I think it might make for mor readable code if @IntType took a custom enum (Signed or Unsigned) instead of a bool as it's first argument.

1522103290
itsMontoya
I'm getting -- Could NOT find LLVM (missing: LLVM_INCLUDE_DIRS)

1522103298
itsMontoya
I git pulled

1522103305
itsMontoya
and was trying to build the updated repo

1522103369
andrewrk
isd, there are 2 issues related to this:

1522103403
andrewrk
also I agree with you, and related to your suggestion is

1522103425
andrewrk
itsMontoya, did you pull from a much older version that depended on LLVM 5?

1522103431
andrewrk
what os/distro are you on?

1522103670
itsMontoya
arch

1522103676
itsMontoya
Let me see what my current version is

1522103678
itsMontoya
one moment

1522103723
itsMontoya
Hmm this is weird, I could have sworn I had it installed

1522103727
itsMontoya
but I don't see it

1522103774
itsMontoya
My Clang is 6.0 I believe

1522103797
itsMontoya
clang version 6.0.0 (tags/RELEASE_600/final)

1522103955
andrewrk
thats good and you also need llvm 6.0.0

1522103972
andrewrk
maybe there is a dev package

1522103980
andrewrk
with the .h files

1522104146
itsMontoya
Ok cool, it works now

1522104165
itsMontoya
I could have sworn at one point llvm and clang were paired for AUR

1522104177
itsMontoya
Maybe I just never installed it on my most recent dev build

1522104375
itsMontoya
If I get comfortable enough with zig, it would be fun to port whiskey to zig

1522104376
itsMontoya


1522104383
itsMontoya
And see how fast it is

1522104473
itsMontoya
Made it further, make failed with "make[2]:

1522104479
itsMontoya
I'll try to google it

1522108457
andrewrk
itsMontoya, ah neat. I'm looking at whiskey

