1534814800
andrewrk
unique_id, are you using

1534814843
wink_
I've got a routine which may return error in release builds but not in debug. I'm using a switch (builtin.mode) but when I have a debug build the compiler complains that ".. must return at least one possible error" how should I handle that?

1534814879
unique_id
andrewrk: no I'm using

1534814904
andrewrk
oh wow that's very simple

1534814914
unique_id
heh yeah

1534814922
unique_id
I didn't know about ztags

1534814945
andrewrk
ztags uses std.zig.parser, so that's neat

1534818361
kristate
andrewrk: you online?

1534818451
andrewrk
hi kristate

1534818460
kristate
andrewrk: hi

1534818464
kristate
when you squash commits, you lose author information.

1534818476
kristate


1534818533
kristate


1534818585
kristate


1534818684
andrewrk
kristate, sorry about that

1534818724
andrewrk
I did know that you did that. thanks for helping mtn with the PR

1534818740
kristate
andrewrk: can you rebase so that I am included?

1534818818
andrewrk
I don't want to force push master but how about a whitespace modification so that you're tagged on those lines?

1534818861
kristate
andrewrk: I would like to be accredited with the work I do.

1534818931
andrewrk
that is a very reasonable thing to want. master branch has an error in it, so let's solve it how we solve all bugs/problems in master branch, by pushing more commits

1534818965
andrewrk
I can push a revert commit, and then merge a different way

1534819150
kristate
andrewrk: I leave it up to you on the logistics of the master branch, but I just don't like code written by one person claimed by another

1534819202
kristate
we're inside of git, so we have the metadata to do this -- sometimes I have brought-in code from the 90s in past projects and I make a note of it in the commit and of course in the source

1534819258
kristate
andrewrk: as long as you make it right, it is fine by me.

1534819743
andrewrk
kristate, it is fixed now. I apologize for not properly crediting you in git

1534819810
kristate
andrewrk: thanks -- what was the command you were calling before versus now

1534819822
kristate
andrewrk: I don't want to make the same mistake myself

1534819830
andrewrk
in git? I was using the squash button in the PR interface

1534819834
andrewrk
on github

1534819845
kristate
ah -- github should know better

1534819858
andrewrk
that's what I was hoping. anyway I did the merge manually just now

1534819861
scientes
it gives you three options, merge squash and rebase

1534819919
kristate
andrewrk: but I don't like squash because it removes lots of commit history which is valuable to check how someone fixed a problem, etc

1534819965
andrewrk
I think this is more coherent as 1 commit rather than 10:

1534820058
andrewrk
I hear your preference though.  I'm fine with using the --no-ff option for your PRs from now on

1534820059
kristate
andrewrk: that's a merge commit, no? the individual commits still exist

1534820074
andrewrk
kristate, yes, I mean the diff is simple enough to be 1 commit

1534820095
andrewrk
but it's all good. --no-ff it is for you :)

1534820130
andrewrk
alright back to merging scientes's PR

1534820156
andrewrk
scientes, I took your code but I'm doing a more thorough job of eradicating allocators in std where we can rely on PATH_MAX

1534820184
kristate
andrewrk: thanks -- I am going to push my bigint branch so that you can understand `bool allow_binop_cast` more

1534820265
scientes
yeah mine was really just to show that it could be

1534820266
scientes
done

1534820274
scientes
go ahead and write your own

1534820619
andrewrk
scientes, for windows we have to use the value 98302

1534820638
scientes
why so much more than 64k?

1534820655
andrewrk
because the max path on most windows file functions is 32767 "wide characters" which means UTF-16LE codepoints

1534820660
scientes
oh wait utf-16 can have doubles

1534820671
scientes
so why not 128K?

1534820675
andrewrk
so it is 32767 * 3 + 1

1534820684
andrewrk
here's the comment I wrote

1534820692
andrewrk
// Each UTF-16LE character may be expanded to 3 UTF-8 bytes. // If it would require 4 UTF-8 bytes, then there would be a surrogate // pair in the UTF-16LE, and we (over)account 3 bytes for it that way. // +1 for the null byte at the end, which can be encoded in 1 byte.

1534820741
scientes
oh, its really ucs-4, not utf-16

1534820750
scientes
on linux it really is 4096, not 4096+1

1534820760
scientes
ucs-2

1534820789
scientes
utf-16 can have doubles that are 32-bits long

1534820830
andrewrk
are you suggesting that windows file paths do not support surrogate pairs?

1534820846
scientes
i'm saying that if they do we need to up the limit

1534820893
andrewrk
but I think 32767 is counting the number of u16 values, not the number of characters

1534820940
andrewrk
I will test

1534820946
scientes
also, if you don't use getcwd() you can go above PATH_MAX with openat()

1534820961
scientes
but I don't think we should do that in std lib

1534820989
andrewrk
I'm changing std.os.getCwd to

1534820990
andrewrk
pub fn getCwd(out_buffer: *[MAX_PATH_BYTES]u8) ![]u8

1534872087
kristate
andrewrk: hey -- what is bigint like on stage2 ?

1534872308
kristate
std.math.big.Int

1534872467
andrewrk
kristate, yep that's it

1534872475
andrewrk
tiehuis and I had some discussion about the data layout

1534872498
kristate
andrewrk: Yeah -- I am not having fun with stage1 anymore. lets get to stage2 as fast as possible

1534872548
andrewrk
there are 2 use cases - zig's use case where nearly all ints are less than 64 bits, and general math library computing where each int having an allocator kinda makes sense

1534872590
kristate
andrewrk: I like that at comptime, ints are big and they can be anything -- I also like that we can cast down

1534872603
kristate
but the infra for that is not really in place. it's very wishy washy

1534872607
andrewrk
so my eventual plan is to divide std.math.big.Int up - the core will be a smaller data layout size, optimized for int sizes less than usize, and you have to pass the allocator in for all the functions

1534872624
andrewrk
and then tiehuis's use case will wrap that one

1534872626
andrewrk
so everybody is happy

1534872730
kristate
andrewrk: btw, any progress on #1364?

1534872747
andrewrk
pull requests first then I'm on it

1534872760
kristate
andrewrk: okay -- about to push what I have for bigint

1534872769
andrewrk
I'm on 1392 now

1534872771
kristate
hopefully it can be a stop gap

1534873577
kristate
pushed

