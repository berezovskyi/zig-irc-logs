1521203970
ice1000
Hi

1521203972
ice1000
Anybody here

1521203981
ice1000
How do you guys write Zig

1521204004
ice1000
With notepad? With the plain text editing mode of some IDE?

1521206876
MajorLag
I write in Notepad++ with a UDL, no idea.

1521206878
MajorLag
*ide

1521207307
jfo
I use vim, we've got pretty good syntax coloring support and eventually I'll get around to indenting etc type plugin stuff...

1521209137
Hejsil
ice1000, with a console and any text editor but nodepad (This is not a joke

1521213353
hoppetosse
andrewrk: congrats on 0.2.0!

1521213958
MajorLag
That reminds me, I should get arround to uploading my Npp Zig UDL somewhere. My color scheme looks a bit like unicorn vomit, but of course that's user configurable.

1521214404
ltr_
andrewrk: can you point me where to read the details on how are you going to implement async await? what are you going to use internally (epoll/kqueue) reactor pattern?etc..

1521214550
andrewrk
ice1000, I use vim

1521214596
andrewrk
MajorLag, unicorn vomit color scheme sounds incredible

1521215388
MajorLag
andrewrk, a sample:

1521215439
andrewrk
ltr_, async/await is done, it works!

1521215459
andrewrk
MajorLag, I like it

1521215509
andrewrk
ltr_, I have a work in progress TCP server using epoll:

1521215520
andrewrk
the epoll/kqueue stuff is entirely in userland

1521215571
andrewrk
the reason this is WIP is

1521215902
ltr_
main branch?

1521216200
ltr_
nicer

1521216204
ltr_
nice*

1521216650
andrewrk
yes, coroutines, async, await are in the main branch

1521216657
andrewrk
the thing I liked is the branch wip-async-tcp-server

1521216660
andrewrk
*linked

1521216684
andrewrk
here is examples of coroutines in the main branch:

1521216689
andrewrk
I still need to add documentation for this

1521217287
Hejsil
No need. Code is the best documentation!

1521217551
andrewrk
hahaha

1521217582
andrewrk
documentation is the part where it tells you how it's

1521217594
andrewrk
so you can tell the difference between bugs and features

1521217602
jfo
lol

1521220105
MajorLag
Anyone interested in a Notepad++ UDL for Zig:

1521220158
andrewrk
MajorLag, mind if I throw this up in a repo and put it under the zig-lang org?

1521220284
MajorLag
Not at all.

1521220328
MajorLag
That goes for anything I throw on zig.tgschultz.com

1521220332
andrewrk
cool

1521220397
andrewrk
oh neat, you have a unicode library complete with documentation

1521220404
MajorLag
"complete"

1521220480
MajorLag
I'd have put this all on git, but I don't use it as part of my normal process and I'm lazy.

1521220493
andrewrk
I linked to your site on ziglang.org

1521220725
andrewrk
at some point I'll have the package manager working well and there can be a nice home for your library

1521223405
Hejsil
andrewrk, sooooo, what is the type signature of an async function? Zig tells me this: @compileLog(@typeOf(SliceFn.it)); -> fn(&const []const u8,?&u8)var

1521223447
Hejsil
This is SliceFn.it: async fn it(context: &const []const T, item: ?&T) void

1521223532
andrewrk
that's a bug, it should have `async` before it

1521223549
andrewrk
oh I see what's happening

1521223570
andrewrk
what's going on is that async functions require, as part of their type, the allocator struct type

1521223586
andrewrk
like this: async(AllocatorType) fn() void

1521223599
Hejsil
Aaaaah

1521223601
andrewrk
but you're allowed to leave it off and it gets inferred. but that makes it generic

1521223620
andrewrk
and then the bug is that generic async fn type name didn't get the async keyword

1521223685
Hejsil
I see

1521223690
andrewrk
I think in practice everybody is going to use std.mem.Allocator

1521223703
andrewrk
but zig the language has no dependency on the standard library

1521223714
andrewrk
and I didn't want to break that

1521223754
Hejsil
Ye, I can understand? So the generic allocator just need an "alloc" and "free" function?

1521223786
andrewrk
yes. although right now, those are named `allocFn` and `freeFn` and must be function pointers

1521223806
andrewrk
I may change this to be less esoteric

1521223931
Hejsil
I see. I wanted to implement something simular to C# Linq with coroutines, but I might just have come up with at better way to do it without them

1521223948
Hejsil
Oooh well, I'll play with couroutines another day

1521225989
jordyd
I'm running macOS 10.13.3 (High Sierra) and I've installed zig via Homebrew. `zig targets` lists my native environment as "unknown". Is this normal?

1521226071
andrewrk
jordyd, that is correct. although perhaps "unknown" should be renamed to "nonspecial"

1521226083
jordyd
Ah ok

1521226149
jordyd
What are the environments, btw? They appear to be ABIs?

1521226158
andrewrk
that is correct

1521226161
andrewrk
it's an LLVM concept

1521226170
andrewrk
it has to do with the C ABI

1521226211
andrewrk
maybe that would be a good thing to rename it to: Environment -> C ABI

1521226236
andrewrk
and then "unknown" -> "unspecified" or "generic"

1521226326
jordyd
Generic sounds best to me

1521226375
jordyd
So what would x86_64-elf translate to? arch=x86_64, os=freestanding, env=gnu?

1521226464
andrewrk
x86_64-elf according to gcc?

1521226481
andrewrk
I believe "elf" translates to "eabi"

1521226519
andrewrk
freestanding? are you working on an OS or embedded device?

1521226552
jordyd
Yeah

1521226580
andrewrk
cool

1521226582
jordyd
GCC calls it x86_64-elf, which is short for x86_64-pc-none-elf I think

1521226598
andrewrk
I would try arch=x86_64, os=freestanding, env=eabi first

1521226616
andrewrk
I think the environ part doesn't matter much when you're doing an OS because you don't interact with C code

1521226697
jordyd
Well, I suppose you wouldn't have to worry about it given anyone using C on your OS would just target whatever ABI you're using

1521226750
jordyd
GCC also has an *-eabi which is used for ARM (i.e., armv6-eabi)

1521226795
andrewrk
I believe in this case armv6 refers to the arch, not the environ

1521226809
andrewrk
you can see armv6 in `zig targets`

1521226820
jordyd
Yeah, I mean armv6-eabi would be the target

1521226843
jordyd
GCC formats their targets as arch-os-abi mostly

1521226927
jordyd
Does LLVM have documentation somewhere on their "environment" concept?

1521226987
andrewrk
jordyd, here's a start:

1521227001
jordyd
Thanks

1521227245
jordyd
Wait, actually, I should be able to ignore the environment and just use "extern" in places where it matters

1521227354
andrewrk
I'm not sure exactly what you mean, but if you're running into a specific problem and you can show me some code or output, I can provide suggestions

1521227793
jordyd
Basically if I define some function in assembly as `foo` and want to reference it from Zig, would `extern "c" fn foo(): return_type;` work?

1521227936
jordyd
Basically I need to either 1) match or disable name mangling and 2) match calling conventions. C++, for example, will disable name mangling and use C's calling conventions by declaring a function as `extern "C"`

1521227968
andrewrk
yes that will work. that will give the function the C calling convention

1521227982
andrewrk
there is no name mangling

1521228020
jordyd
Ah ok

1521228089
andrewrk
you can also use a naked function in zig and inline assembly

1521228824
andrewrk
jordyd, you saw this right?

1521228842
jordyd
Oh no I didn't

1521228845
andrewrk
aiwakura is working on this - it probably will have useful example code for you

1521228870
jordyd
Neat thanks for the link

1521229128
jordyd
Is "inline" a suggestion (like C)?

1521229159
andrewrk
jordyd, no, it's a requirement

1521229172
andrewrk
if an inline function cannot be inlined, it is a compile error

1521229176
jordyd
Nice, that's perfect for little asm one-liners

1521229879
jacobdufault
ah, I was curious was the zen os was, google search never showed results

1521229888
jacobdufault
what the*

1521235159
andrewrk
jacobdufault, have vscode and cquery installed, and I have compile_commands.json generated

1521235169
andrewrk
is there any instructions on how to use vscode-cquery?

1521235237
andrewrk
oh I can do it from within vscode

1521235305
jacobdufault
hmm? I think most things should just work, let me know if you have any specific questions

1521235318
jacobdufault
you'll have to bind keyboard shortcuts for special things like call hierarchy, or you can use the context menu

1521235322
andrewrk
I just learned that vscode has an "install extension" feature from within the editor

1521235328
andrewrk
very handy

1521235330
jacobdufault
ah, yea :)

1521235343
jacobdufault
fwiw vscode struggles a little on the 10k+ line files

1521235355
andrewrk
oh that's interesting

1521235395
andrewrk
it flashed a message about needing to add a specific setting, but it went away before I could memorize what I needed to do

1521235406
jacobdufault
for cquery? I'm surprised that message went away

1521235408
andrewrk
something about a workspace directory

1521235424
jacobdufault
I believe you need to specify cquery.launch.workingDirectory

1521235446
andrewrk
that's it!

1521235455
andrewrk
oh, that's in the wiki

1521235499
jacobdufault
When I eventually get to adding prebuilt binaries that will not be needed

1521235504
jacobdufault
but alas, working on CI is not much fun :P

1521235561
jacobdufault
fyi: it seems like code lens is often not wanted, `editor.codeLens` can turn it off

1521235666
andrewrk
alright let's take this for a test drive

1521235686
andrewrk
how did you get that usages count UI?

1521235736
jacobdufault
that's code lens

1521235761
jacobdufault
`F1: view cquery` to make sure there are no errors, you linked compile_commands.json to the top-level?

1521235769
jacobdufault
ie, one above build dir

1521235836
andrewrk
I don't see "view cquery" as an option in the F1 command menu

1521235854
andrewrk
yes I linked compile_commands.json at the root source dir

1521236135
andrewrk
maybe this version is too old

1521236161
andrewrk
hmm no it's 0.0.10

1521236273
andrewrk
the cquery commands fail from the F1 menu: 'cquery.freshenIndex' not found

1521236431
jacobdufault
ah, when you hit f1 you have to delete the '>'

1521236484
jacobdufault
not sure why freshenIndex is failing, did you restart vscode after installing cquery?

1521236495
andrewrk
yes

1521236507
andrewrk
ok I got it

1521236514
andrewrk
I set the cache directory and reloaded the extension

1521236616
andrewrk
this is brilliant

1521236624
andrewrk
I love the highlighting for the different kinds of things (disabled by default)

1521236632
jacobdufault
semantic highlighting is great :)

1521236664
jacobdufault
you may see some slowdown with it when editing the large files... I turned it off for zig

1521236725
andrewrk
why are the enum items different colors here?

1521236754
Hejsil
cquery for vscode uses a spectrum of colors for highligting

1521236756
Hejsil
Idk why

1521236772
andrewrk
but it should use the same color for the same kind of thing right?

1521236781
Hejsil
Nono, a spectrum for the same things

1521236789
andrewrk
odd

1521236791
Hejsil
Different shades of blue for enums in your case

1521236800
Hejsil
There is an option to change the color

1521236808
Hejsil
Or, the array of colors*

1521236820
jacobdufault
rainbow semantic highlighting

1521236827
Hejsil
The best

1521236838
jacobdufault
:), I liked the feature from kdevelop

1521236914
Hejsil
So you can see the different between SomeLargeTypeA and SomeLargeTypeB without reading their names? :)

1521236957
Hejsil
That's really the only benifit I can think off for different colors of the same semantic category (or whatever you call it)

1521236967
jacobdufault
I think it's most useful on variables so you can see how a variable flows through a function

1521236979
Hejsil
Aaaah, that makes sense

1521237000
jacobdufault
Maybe it should be off by default for other tings

1521237001
jacobdufault
things*

1521237023
Hejsil
cquery for Zig when? :)

1521237049
Hejsil
Was

1521237069
Hejsil
the json PR for cquery, or ctag or how was that

1521237077
jacobdufault
the json PR is for cquery

1521237079
Hejsil
I don't remember the specific usecase

1521237084
Hejsil
Aah, nice

1521237109
jacobdufault
I have to write an indexer in cquery though for the json, but it should be pretty straight-forward, plus probably some refactoring since this will be the first non-clang client

1521237770
Hejsil
andrewrk, bug or feature?

1521237848
Hejsil
Oooh wait, we don't need the middleman

1521237937
andrewrk
Hejsil, are you demonstrating writing to an implicit stack variable?

1521237946
Hejsil
Yes

1521237960
andrewrk
I believe this is related to

1521238032
andrewrk
the code you linked is working as designed

1521238076
Hejsil
So im just writing to the memory that was return by makeS i assue

1521238081
Hejsil
Alright

1521238207
andrewrk
right. and with #287 it will be more explicit where that memory is located

