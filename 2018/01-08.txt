1515428472
skyfex
@andrewrk: Little-endian packed struct tested, and typed  enums both tested and works well for me :)

1515428515
andrewrk
great!

1515428534
andrewrk
and now the biggest issue is the reserved field thing right?

1515428551
skyfex
Hah, yes, I was just about to mention that :)

1515428612
skyfex
Also, it's a bit annoying to type out the whole enum value. It'd be great if I could type just "Connected" instead of "nrf.PinCnfInput.Connected"

1515428630
skyfex
I haven't checked the issues, but I think it might have been discussed already?

1515428642
andrewrk
I think there is not a discussion for that

1515428780
skyfex
K, gotta leave now, but maybe I'll open an issue for that later. I'm not sure if it's in the Zig style, but it'd be good to get some comments I suppose

1515428804
andrewrk
sure, might as well document the reasoning in either case

1515429028
skyfex
I see it as type-inference when declaring variables: not strictly necessary, could sometimes create a bit confusion, but generally worth it. Using enums should really be encouraged over non-descriptive integers or booleans

1515429107
andrewrk
encouraging enum use is a good argument for the feature

1515429150
andrewrk
I was thinking it might make sense to, for example, in switches, allow `.Connected` and the `.` would implicitly be accessing the type you switched on

1515429160
andrewrk
maybe also for function calls with enum parameters

1515429242
skyfex
it would make sense with this proposal as well:

1515429270
andrewrk
good point

1515429277
andrewrk
really good point

1515429303
andrewrk
and for this one:

1515429306
andrewrk
I think I'm sold

1515430955
aiwakura
hi andrewrk

1515430963
aiwakura
let's the madness begin

1515431020
andrewrk
hi aiwakura

1515431079
aiwakura
so %return -> try, correct?

1515431092
andrewrk
correct

1515431099
andrewrk
and ` %% ` -> ` catch `

1515431812
GitHub108
[zig] AndreaOrru pushed 1 new commit to master:

1515431812
GitHub108
zig/master 98a95cc Andrea Orru: exit, createThread for zen

1515433106
andrewrk
skyfex, thanks for the writeup

1515445642
aiwakura
andrewrk are you going to get rid of ?? too?

1515445695
andrewrk
I have no plans in that regard

1515445705
andrewrk
good point though, it's an example of non-keyword control flow

1515445722
andrewrk
I believe C# has a precedent for ?? having the same behaivor as zig

1515447986
jjido
Any chance that a %% b would be allowed again ? I don't feel too good writing a catch b when b is not a closure on the error

1515448484
andrewrk
jjido, actually it is a closure on the error:  a catch |err| b

1515448491
andrewrk
the |err| is optional

1515448506
andrewrk
I'm responding to your comment on #632

1515448988
jjido
andrewrk: yes it is but the syntax hides it (unfortunately)

1515450643
andrewrk
jjido, can you elaborate? what do you mean the syntax hides it?

1515450888
jjido
While b expands to |err| b internally, when a human reads to program they see a catch b. That is what is commonly called "syntactic sugar" and in this case it makes the program harder to understand instead of easier

1515450917
andrewrk
jjido, let me make sure you understand this change

1515450921
andrewrk
`

1515450930
andrewrk
`%%` became `catch`. no other differences

1515450948
jjido
If a %% b is not available I would write a catch |_| b

1515450971
andrewrk
that is valid

1515450978
jjido
The difference is clear

1515450978
andrewrk
are you suggesting the |_| should be required?

1515451011
jjido
Yes that would make more sense with the catch keyword

1515451017
andrewrk
ok I see what you are saying now

1515451041
andrewrk
because without the |_| it sounds like you are catching `b`

1515451107
andrewrk
I think that is worth considering

