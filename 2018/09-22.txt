1537574857
nornagon
andrewrk: any thoughts on why

1537579656
wink_
@jenz and others, here are instructions for building zig and llvm that I used on Arch Linux:

1537579657
wink_


1537579709
wink_
They may work on other distro's, please let me know if there are any issues so I may update the instructions.

1537580527
nornagon
hm.. i added more `-framework` flags and now i'm seeing this: content type not yet supported

1537580528
nornagon
UNREACHABLE executed at /Users/nornagon/Source/Reference/zig/deps/lld/lib/ReaderWriter/MachO/MachONormalizedFileFromAtoms.cpp:342!

1537580553
nornagon
looks like the content type that isn't yet supported is `typeObjCImageInfo`

1537580677
nornagon
ah, linking the glfw dylib dynamically works. it's just trying to link it statically that fails.

1537590435
andrewrk
nornagon, sounds like a limitation of the linker

1537590472
andrewrk
unfortunately the LLD project, which is zig's linker, does not have great MACH-O support

1537590477
andrewrk
that's one of the motivations for

1537590576
andrewrk
good to know that linking dynamically works

1537590936
nornagon
hm, that's weird, chromium builds with lld and depends on those frameworks on OSX. i wonder what's different.

1537591389
andrewrk
I highly doubt chromium builds with lld on macos

1537592235
nornagon
ah interesting, let me check

1537592253
nornagon
they definitely do on windows (but only as of recently)

1537592319
nornagon


1537592476
nornagon
cool, good to know üëç

1537592757
andrewrk
yeah. the windows and linux parts of LLD are pretty solid. it's the macos one that is lagging behind

1537594305
nornagon
is there any sort of (proto-?) package management system for zig?

1537594357
scientes
nornagon, source or binary?

1537594381
nornagon
either, but it seems like it'd be important to include binary stuff to for anything that involved binding to C

1537594400
scientes
as zig compiles statically it isn't really needed unless you link to C

1537595092
nornagon
is there an easier way to cast '*const foo' to '[*]const foo'? i'm calling a C function whose signature is like 'void bar(const foo*)', and zig is interpreting that argument as '[*]const foo' (when in fact, the function only expects a single element, not an array)

1537595204
nornagon
it's kind of tedious to `@ptrCast([*]const foo, &blah)`

1537596229
nornagon


1537596297
nornagon
not that i have any idea how that works üòÖbut it does!

1537601371
scientes
how do i look up the compiled code size of a function?

1537602182
dirkson
andrewrk:

1537605791
wilsonk
dirkson:

1537605857
wilsonk
I think Andrew was thinking of waiting until the self hosting compiler is pretty much working (may also use a different protocol?)

1537606410
wilsonk
scientes: that would be difficult...the second stage compiler will produce a separate object file for each function but I am not sure if that is 'the size of a compiled function' exactly...and I don't know if it is fully working right now. I am just thinking of Andrew's example where he showed that functionality. Why do you need the size, btw?

1537606985
cgag
is there a way to attach more data to errors, like if i'm doing a parser and want to attach line numbers or something?

1537607524
wilsonk
cgag: if you aren't just looking to see the return trace of where the failure was (which will show the line number of each failure), then you might be able to switch on the caught error and print out the line info at the point of the catch? Otherwise, since errors are usually union types, I am not sure if you can inject line info into them, per se. Please take with a grain of salt though, as I am no Zig expert :)

1537608989
Barabas
Aren't errors in zig just enums pretty much?

1537609241
wilsonk
Error sets are pretty much just enums, but usually you would use error union types (to switch on, etc.)

1537609698
wilsonk
I think ;)

1537623243
andrewrk
nornagon, we have plans for making zig packages of C libraries, made to be system-independent via a libc implementation in zig.

1537623323
andrewrk
nornagon, regarding c pointers, here's a relevant proposal:

1537623350
andrewrk
dirkson,

1537623421
andrewrk
scientes, zig doesn't expose the concept of compiled code size of functions. can you elaborate on this interesting use case?

1537623523
andrewrk
cgag, no, errors have to be simple integers under the hood for everything to work. the recommendation is that, if you need to attach extra information (for example maybe it's a parse error and you want to attach line/column), it might be time to treat that not as an error case but as a normal case that you handle differently

1537624715
scientes
andrewrk, I was not thinking of getting it from code, just analyzing the compiled code. I was wondering how many cache lines siphash takes

1537631169
c00lways
hi, how do i check if a variable is undefined?

1537631185
scientes
c00lways, i don't think you can

1537631219
c00lways
@scientes: ai, okay

1537632279
c00lways
how do i for loop from 0 to X ?

1537632323
nornagon
andrewrk: that libc issue looks sweet, but unfortunately the library I'm linking against (Skia) is C++

1537632350
c00lways
can zig link to c++ library?

1537632360
nornagon
it can if you wrap it with a C API :)

1537632375
c00lways
okay cool

1537632389
nornagon
the mono project is maintaining C bindings to Skia here:

1537632473
nornagon
oh hm,

1537632479
unique_id
ohh nice, I'm using Cairo for something right now and I've always wanted to try Skia

1537632548
c00lways
hmm how do i for loop range of numbers?

1537632672
nornagon
unique_id: here's a minimal example of glfw+skia:

1537632697
nornagon
not shown: how to download & build skia :)

1537632727
unique_id
ha, yeah... that may be why I've never tried Skia

1537632807
unique_id
I remember it being difficult, maybe it's not? I'll go for it. Thanks for the example

1537633011
nornagon
it's not so hard. something like: `git clone

1537633044
nornagon
and you might need depot_tools:

1537633078
nornagon
but yeah not quite as simple as ./configure && make üòÖ

1537633091
c00lways
ok nvm, i use while loop instead

1537634290
Jenz
I think you should include the LICENSE in

1537634299
c00lways
how do i debug? seems like it panic with some hex

1537634512
Jenz
I have created an AUR package that downloads the most recent master build, i.e. a bin package, and installing stuff without a license is bad practice if not illegal

1537634571
Jenz
MIT is a special case in which each license is a custom license, and must therefore be provided by someone that holds the license rights

1537634580
Jenz
As far as I understand

1537634581
Jenz
i

1537634587
Jenz
s/i/it/

1537634706
andrewrk
c00lways, "undefined" means that you don't know what the value is. It could be anything. So it doesn't make sense to be able to find out if it's undefined.

1537634772
andrewrk
c00lways, to debug: on windows use msvc, on linux use gdb, on macos use lldb

1537634785
Jenz
gdb is great

1537634816
Jenz
In my - though unexperienced - opinion

1537634819
andrewrk
Jenz, agreed, omitting LICENSE was an oversight. I'll open an issue for that

1537634887
andrewrk
I'll have that fixed by 0.3.0 release which is scheduled for friday

1537634951
tyler569
have you considered doing any 0.3.x releases so the download isn't wayyy out of date again like 0.2.0 is now?

1537634970
scientes
tyler569, the release is scheduled for a few days from now

1537634984
andrewrk
I believe tyler569 is saying to release more often than every 6 months

1537634988
tyler569
right, but I mean to bridge the next gap

1537634988
tyler569
yea

1537634989
scientes
oh nvm

1537635056
andrewrk
I feel OK with the schedule. It's in lock-step with LLVM, and it's a balance between stability and progress. The release schedule will change after 1.0.0

1537635060
andrewrk
I'll consider it though

1537635091
andrewrk
the fundamental problem is that zig is immature and changing the release schedule isn't going to solve that

1537635137
Jenz
So... when will 0.3.0 be released?

1537635157
Jenz
Oh nvm

1537635157
Jenz
...

1537635357
c00lways
hmm how do i know which line gives the error using lldb

1537635501
Jenz
Maybe "backtrace"?

1537635684
c00lways
ai, too difficult

1537635690
c00lways
switching back to go for now

1537635718
Jenz
Is typing "backtrace" really that difficult?...

1537635762
tyler569
"bt" works too fwiw, though I doubt that would have assuaged him

1537635799
scientes
wow, go use to have horrible debugging, i guess it improoved

1537635908
tyler569
who needs a debugger, printf ftw

1537636095
tyler569
or I guess std.debug.warn in this channel

1537636109
Jenz
hehe

1537637307
scientes
home/shawn/bin/perfh.zig:117:37: error: expected type '*Allocator', found '*const Allocator'

1537637308
scientes
enumsstack[i] = try allocator.alloc(u8, size);

1537638754
scientes
so zig 0.3.0 will release with llvm 7 even thought it was developed with llvm 6?

1537639482
andrewrk
scientes, I've been testing with llvm 7 for 4 months

1537639493
Jenz
Hehe

1537639513
Jenz
That's cool andrewrk

1537641167
scientes
andrewrk, well, it crashes for me on ubuntu cosmic     frame #0: 0x00007ffff4a6b772 libLLVM-7.so.1`llvm::DIBuilder::createFile(llvm::StringRef, llvm::StringRef, llvm::Optional<llvm::DIFile::ChecksumInfo<llvm::StringRef> >, llvm::Optional<llvm::StringRef>) + 50

1537641222
scientes
(trying to narrow it down)

1537641238
scientes
* thread #1, name = 'zig', stop reason = signal SIGSEGV: invalid address (fault address: 0x10)

1537642350
l1x
c00lways> switching back to go for now

1537642412
l1x
nice :)

1537642513
Jenz
Well,

1537644537
andrewrk
scientes, is the static build working for you?

1537644564
andrewrk
that's always an option if compiling from source is problematic

1537644627
andrewrk
for compiling from source, make sure you're using the same compiler to to compile zig as you use to compile llvm/clang

1537644651
andrewrk
that means if you got llvm/clang from a package manager, you have to use the same compiler that the package manager used and use that to compile zig

1537644654
andrewrk
this is a limitation of C++

1537646188
dirkson
andrewrk: Hah! Thanks!

1537646631
dirkson
wilsonk: Also thanks to you.

1537646693
wilsonk
dirkson: no problems :)

1537646797
dirkson
I probably didn't need to bug andrew about that, then. That's worth remembering.

1537647102
andrewrk
no worries

1537647315
Jenz
As I see that zig is somewhat lacking in docs; I think I might be able to help out in that area. I *think*, there's been a few times to many I've said I could help out and never done so. I'll just keep playing with it and see how it goes. Wish me luck! :D

1537647444
andrewrk
Jenz, I wonder how practical it would be to start working on

1537647467
andrewrk
you could write pure zig code and use std.zig.parse to parse zig code

1537647484
andrewrk
look at the doc comments and output html

1537647504
andrewrk
it would eventually have to be reworked and integrated into the self hosted compiler, but I'm sure a lot of the code would be useful and survive

1537647534
andrewrk
at least it would give people a place to start contributing, if their doc comments were being exposed in some way

1537647586
Jenz
Indeed, that would be nice; though I will first have to get a bit more comfortable with zig

1537648301
eswtucka
Hi, is there an equivalent to strtod in zig?

1537648322
andrewrk
eswtucka, std.fmt.parseInt

1537648331
andrewrk
oh, that's floats isn't it

1537648348
andrewrk
we don't have float parsing yet in the standard library:

1537648356
andrewrk
you can link against c and use strtod

1537648393
eswtucka
ok, thanks

1537648431
Jenz


1537650292
dirkson
Jenz: The lack of documentation has also occurred to me, although I don't have a lot of spare time to correct it. Ping me if you need a second set of eyes on something you're written, or similar small help.

1537650295
cgag
`it might be time to treat that not as an error case but as a normal case`.   Makes sense, I thought that might the recommendation, basically leaving the zig error handling for exceptional stuff and my own error handling for expected errors like parse errorrs, though it seems like it'd be nice to get to use try/catch for my own errors.  I'm currently setting globals i only assume are set when switching on

1537650298
cgag
certain error enums

1537650489
Jenz
dirkson: thanks

1537653755
stratact
how's the self-hosted compiler coming along?

1537656242
andrewrk
cgag, that's a reasonable strategy too. you can also pass pointer args instead of using global state

1537656531
andrewrk
stratact, it's been on pause while I fix bugs for 0.3.0

1537656559
andrewrk
roadmap after that will be to rework coroutines, then self hosted compiler and/or other big breaking changes

1537656712
stratact
Gotcha, sounds good

