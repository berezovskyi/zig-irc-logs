1520130684
jacobdufault
Is there good way to initialize the members of a nested arraylist, ie, ArrayList(ArrayList(i32))? For example,

1520130732
jacobdufault
I can use `insert`, but I'm hoping to use the for loop variant

1520131492
jacobdufault
andrewrk: I spent some time searching for the issue re 'pub' not being required, would you mind linking me to it?

1520134425
MajorLag
andrewrk: it's really nice having lld finally tell me why it's failing.

1520136287
MajorLag
And it looks like I can link with MinGW64 libs now, so that's cool. Can be free of MSVC. Weird thing though, when I use SDL2 that was distributed with my MinGW64 in C, it is compiled completely static. When I use it with Zig it insists on having the DLL. Not sure what that's all about.

1520138775
MajorLag
...ok, I think this might be a Zig issue. "lld: warning: ignoring unknown argument: -lSDL2main". So it isn't actually doing the linking, it only appeared to work because I still had the extern fn's declared like they were dll.

1520146149
andrewrk
MajorLag: it'll be a couple days before I can work on this, but it should be a pretty straightforward update to link statically against SDL. The --static arg might already work.

1520147882
MajorLag
I was using static. The error above is when I pass target-environ as gnu. If I leave it msvc I think it might actually be linking statically but the resulting exe just immediately crashes.

1520148029
MajorLag
It's not a big deal. I've got pretty much all of win32 api working now so I can get single-executable games built using that.

1520148041
MajorLag
So don't feel like you have to rush something on my account.]

1520148573
andrewrk
MajorLag: cool, thanks, good to know. I'll test linking against SDL with environ msvc and try to debug the runtime crash. Btw did you do --library c when you linked against SDL?

1520148655
andrewrk
In addition to the  --library SDL arguments

1520148824
MajorLag
from what I can tell, with mingw you link against libmingw32. there is no libc.a or libstdc.a

1520148973
MajorLag
To get it to link with msvc environ, I linked against: libSDL2main, libSDL2, libm, libdinput8, libdxguid, libdxerr8, libuser32, libgdi32, libwinmm, libimm32, libole32, liboleaut32, libshell32, libversion, libuuid, libmsvcrt (oh, I guess this is libc), libkernel32, libadvapi32, libmingw32, and libmingwex

1520148995
MajorLag
I've been up too long, brain ain't working so great anymore

1520185932
andrewrk
jacobdufault, I don't have a link handy. If you didn't find it in a search, feel free to file a new issue. Worst case scenario, it's a duplicate, and now someone searching for the same thing as you will find it

1520188951
jacobdufault
will do, thx

1520188959
jacobdufault
any plans for a leak checker in std?

1520188988
jacobdufault
even something simple like an allocator that verifies the same number of malloc/free calls

1520189946
andrewrk
jacobdufault: yes. So far we have std.debug.FailingAllocator which does what you said and returns error.OutOfMemory after N allocations to help with testing

1520190062
andrewrk
But a leak checking allocator could do a lot more - such as capture a stack trace at every allocation and then print them when leaks are detected

1520192153
andrewrk
has anybody played with async/await yet? I haven't had a chance to

1520202996
_0joshuaolson1
Hi, I'm trying to build zig (master). I get a CMake error on Fedora:

1520202999
_0joshuaolson1
CMake Error: The following variables are used in this project, but they are set to NOTFOUND. Please set them or make sure they are set and tested correctly in the CMake files: CLANG_INCLUDE_DIRS

1520203015
_0joshuaolson1
I have the clang libs

1520203407
GitHub119
[zig] 0joshuaolson1 opened pull request #807: Fix Linux gcc requirement (master...patch-1)

1520203590
GitHub194
[zig] andrewrk closed pull request #807: Fix Linux gcc requirement (master...patch-1)

1520203595
GitHub190
[zig] andrewrk pushed 1 new commit to master:

1520203595
GitHub190
zig/master db18d38 Joshua Olson: Fix Linux gcc requirement (#807)...

1520203843
GitHub137
[zig] bscheinman closed pull request #791: Add support for event loop and basic network listeners, and a general-purpose memory allocator (master...gpalloc_squash)

1520205832
_0joshuaolson1
Apparently I left too soon, sorry (i.e. andrewrk). zig master's readme says I need the clang library, but Fedora's clang-libs has dynamic and static libs without an include path. Can I compile zig with g++ and still fulfill the CMake script's requirements?

1520205883
_0joshuaolson1
*I mean include files, not path.

1520205899
andrewrk
_0joshuaolson1, I'm not sure I understand the question

1520205919
andrewrk
does fedora have llvm 5.0.1 libs and clang 5.0.1 libs?

1520205946
andrewrk
looks like it does

1520205950
_0joshuaolson1
Yes.

1520205951
andrewrk
what is your cmake output?

1520205959
_0joshuaolson1
Just a sec.

1520205982
_0joshuaolson1
Configuring zig version 0.1.1.101b774 -- Could NOT find LLVM (missing: LLVM_INCLUDE_DIRS)  -- Could NOT find CLANG (missing: CLANG_INCLUDE_DIRS)  CMake Error: The following variables are used in this project, but they are set to NOTFOUND. Please set them or make sure they are set and tested correctly in the CMake files: CLANG_INCLUDE_DIRS (ADVANCED)    used as include directory in directory /home/xenox/zig    used as include dir

1520205989
_0joshuaolson1
That messed up formatting...

1520206018
_0joshuaolson1
I don't have or want clang the binary, since that might override the use of g++ with the cc/c++ commands?

1520206048
_0joshuaolson1
*nvm, but am I making sense?

1520206071
_0joshuaolson1
Thanks

1520206092
andrewrk
you should be able to install both without changing the defaultt

1520206108
_0joshuaolson1
Should we make another PR for the readme, then?

1520206125
andrewrk
what's wrong with the readme?

1520206146
_0joshuaolson1
This could get fragile - who knows when a Sabayon/Gentoo user will come along or whatever

1520206152
andrewrk
I'm guessing there's a separate package that has the headers and libraries, and you need to install that

1520206161
_0joshuaolson1
The readme says I need the clang and llvm libraries. I do.

1520206162
andrewrk
if you don't trust your system package manager, then install from source

1520206195
_0joshuaolson1
CMake is looking for more than the libraries, apparently, for the stage 1 build to work.

1520206250
_0joshuaolson1
The 'fragile' comment was about how specific to make requirements so this doesn't happen to someone else.

1520206307
andrewrk
if there's a package that provides `llvm-config` I think that would solve your issue

1520206387
_0joshuaolson1
Huh, Fedora doesn't have it. THere's devel and static versions of llvm.

1520206475
andrewrk
_0joshuaolson1, let me send you a diff to try

1520206501
_0joshuaolson1
*thumbs up*, also installing llvm now (separate from llvm-libs)

1520206643
andrewrk
_0joshuaolson1, try this:

1520206748
_0joshuaolson1
I'm slow.

1520206993
_0joshuaolson1
Dang it, copied it wrong. Take 2

1520207111
_0joshuaolson1
The output is the same.

1520207124
_0joshuaolson1
What's core.h from?

1520207134
_0joshuaolson1
Duh, zig

1520207144
andrewrk
no, it's from LLVM

1520207145
_0joshuaolson1
?

1520207159
andrewrk
look for Core.h on your system in /usr/include

1520207195
_0joshuaolson1
grep shows I don't have it.

1520207204
andrewrk
you would need to use find, not grep

1520207226
andrewrk
find /usr/include -name Core.h

1520207244
andrewrk
if you don't have it, then you don't have LLVM libraries installed

1520207279
_0joshuaolson1
Fedora's llvm-libs doesn't have include files - it has .so's and .a's

1520207288
_0joshuaolson1
And yeah, no core.h

1520207359
_0joshuaolson1
I'll keep looking for packages that might have it.

1520207765
andrewrk
here's your other option:

1520207773
andrewrk
it takes a couple hours

