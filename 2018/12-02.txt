1543709880
reductum
andrewrk: Did GH give an estimate of when the syntax highlighting would be rolled out?

1543709926
andrewrk
reductum, no. subscribe to this issue to be notified

1543711179
seedofonan
I can't google up an example of a freestanding target like arm7em (except on github gulitsky/zig-arm-cortex-m-semihosted-hello-world, which doesn't help at all). I can get an .elf output, but there's only debug sections in it. Does anyone have a link to an embedded example?

1543719372
vegecode
Can someone tell me which file in the standard library contains a function that will do the equivalent of sprintf? I have an integer and I want to convert it to text in a buffer. I see how to do it when sending to stdout, but not just to a buffer.

1543719448
vegecode
Is there any kind of general overview of the standard library anywhere? The documentation of the language is pretty good, but I haven't found anything about the standard library, besides of course just looking in the standard library itself.

1543719468
MajorLag
vegcode: std.fmt.bufPrint(buf: []u8, comptime fmt []const u8, args: ...) ![]u8

1543719497
hryx
vegecode: There's no holistic documentation of std yet. I'm working on a documentation generator (right now actually) so soon

1543719521
hryx
API docs that is, not a tutorial

1543719802
vegecode
Thank you.

1543721276
fiatcurrency
Hi, just got started on the language today, anybody know how to print character as literals rather than their code points?

1543721670
vegecode
What does it mean to return a []u8? Is an actual copy of the formatted buffer returned in addition to the buffer that is a parameter?

1543721723
hryx
vegecode: Nope, a []u8 is a slice, which is only a pointer plus length information

1543721736
hryx
so it's not an entire copy of the underlying array, just a reference

1543721777
hryx
actually wait, let me make sure I understand something real quick...

1543721804
hryx
ah, yep. For example here:

1543721833
MajorLag
fiatcurrency, `"{}", someu8` would print the u8 as a number, `"{c}", someu8` treats the u8 as a character.

1543721863
hryx
bufPrintIntToSlice is returning a "window" of `buf` which was passed as a parameter, and therefore alread allocated by the caller

1543721888
fiatcurrency
Thank you, MajorLag

1543722015
vegecode
Thanks hryx, that makes sense. Instead of returning the number of characters printed like sprintf, it returns a slice, which not only has the length parameter encoded in it if that is what the caller wants, but it can then be used in further function calls more easily. That's nice.

1543722170
vegecode
Is there syntax to dereference a struct pointer and access a field at the same time like mystruct->somefield in c?

1543722184
MajorLag
mystruct.field

1543722197
MajorLag
the dereference is implicit

1543722337
vegecode
Thanks, I thought I tried that and it didn't work, but now it is working so I must have been confused.

1543754153
sjums
Is this expected when building release-fast?

1543754181
j`ey
you mean non-deterministic behaviour?

1543754206
j`ey
and I guess the answer is obviously "no" :P

1543754217
sjums
same input with same code returning different results :P

1543754267
sjums
It's a cool feature and all, but I'm unsure what to use it for ._.

1543754293
sjums
The correct result, according to Advent of Code, is 5000

1543760655
DutchGh0st
is there a std function that converts []u8's to an integer type?

1543761129
IntoxicatedHippo
DutchGh0st: fmt.parseInt:

1543761200
DutchGh0st
allright cool!

1543761209
DutchGh0st
Guess its time for Advent of Code in Zig

1543768808
DutchGh0st
with a HashMap,

1543768821
DutchGh0st
if you Iterate over it, you get ?*KV 's

1543768842
DutchGh0st
so you do like ` while(iter.next()) |entry| {}`

1543768892
DutchGh0st
but if I then write `if (entry.*.value == 2) {//...}` , and it complains that an integer value 2 van not be implicitly casted to type *u32

1543768902
DutchGh0st
but didn't I just dereference the entry?

1543768993
DutchGh0st
OH

1543769006
DutchGh0st
I also wrote '  && '  in the if's condition

1543769012
DutchGh0st
gotta use ` and` :P

1543770602
sjums
DutchGh0st: I believe it's entry.?.value

1543770613
sjums
Instead of entry.*.value

1543770615
DutchGh0st
no the while look does that already

1543770622
DutchGh0st
loop*

1543770632
DutchGh0st
thats the |entry| part

1543770665
sjums
I'm 95% sure...

1543770669
sjums
That I'm wrong!

1543770764
DutchGh0st
:D

1543770772
DutchGh0st
Doint some advent of code finally in Zig

1543770774
DutchGh0st
*doing

1543770964
sjums
Currently learning zig. By doing AoC

1543771015
sjums
Coming from C# the learning curve is easily described as steep!

1543771036
DutchGh0st
yeahh

1543771050
DutchGh0st
comming from Rust, so its...fine, sometimes

1543771063
DutchGh0st
its just that I have to lookup the types each time xD

1543771096
DutchGh0st
what day are you sjums ?

1543771104
sjums
2.1 done

1543771116
sjums
Up to*

1543771167
DutchGh0st


1543771172
DutchGh0st
part1

1543771196
DutchGh0st


1543771398
sjums
Wait, does part one entirely run at compile time?

1543771404
j`ey
yep

1543771419
DutchGh0st
it does !

1543771438
DutchGh0st
you could do all puzzles at compiletime I guess

1543771447
DutchGh0st
however, its a bad idea

1543771477
DutchGh0st
you have to use constant array's, and figuring out what the length of the array should be, and...yeah

1543771497
DutchGh0st
plus comptime might need much ram, so only do it for little puzzles like day1 part1

1543771510
DutchGh0st
I like comptime :D

1543771596
sjums
Need to read a little more about that. And about @embedFile

1543771627
DutchGh0st
j`ey: , are you in the Rust mibbit chat knows as j_ey ?

1543771632
sjums
I wrote way too much code reading in the input file! :p

1543771634
DutchGh0st
*known

1543771639
DutchGh0st
heh

1543771645
j`ey
DutchGh0st: yep

1543771646
DutchGh0st
embed file does it at compiletime

1543771651
DutchGh0st
ohh hey! Dodo here!

1543771657
j`ey
DutchGh0st: I know :)

1543775971
DutchGh0st
huh

1543775982
DutchGh0st
how do I return a `?!u32` ?

1543776062
hryx
actually DutchGh0st I ran into that recently too. I'd love to know

1543776086
DutchGh0st
andrewrk: ?

1543776873
andrewrk
DutchGh0st, guide the compiler with an implicit cast

1543776894
DutchGh0st
an implicit cast?

1543776906
DutchGh0st
but I cant write ' fn foo() ?!i32`

1543776913
DutchGh0st
it complains about the ?Ii32

1543776923
andrewrk


1543776968
DutchGh0st
error: invalid token: '!'

1543777021
andrewrk
oh I see your question now. you can't infer the error set if the return type is not an error union

1543777036
DutchGh0st
yeahh

1543777045
DutchGh0st
and what if you want to Maybe return an error?

1543777058
andrewrk


1543777070
andrewrk
this uncovered a compiler bug. it generates invalid llvm

1543777082
DutchGh0st
hehe

1543777086
DutchGh0st
but good!

1543777139
j`ey
andrewrk also someone got weird behaviour this morning

1543777140
j`ey
12:35:53 < sjums> Is this expected when building release-fast?

1543777142
DutchGh0st
I wonder how the error unions work btw, do you create a new union of all possible errors at compiletime?

1543777189
andrewrk
j`ey, it's not enough to see that output, I would have to see the source

1543777212
andrewrk
debug builds cannot catch all undefined behavior

1543778524
DutchGh0st
I wish fancy Iterator chaining was part of stdlib!

1543780691
wink_
The following test fails with "lld: error: undefined symbol: __fixdfti"

1543780697
wink_
test "i65" { var oneF64 = f64(1); assert(1 == @floatToInt(i65, oneF64)); }

1543780823
wink_
But is OK casting to a i64:

1543780873
wink_
test "i64" { var oneF64 = f64(1.0); assert(1 == @floatToInt(i64, oneF64)); }

1543780922
j`ey
also 1 and 1.0?

1543780947
andrewrk
wink_, solution is to port __fixdfti from llvm's compiler_rt project into zig's std/special/compiler_rt/*

1543780964
andrewrk


1543780982
wink_
k, I'll look into doing that, txs

1543781786
DutchGh0st
mh, I wonder

1543781863
DutchGh0st
calling ` /usr/bin/time -f "mem=%M RSS=%M elapsed=%E cpu.sys=%S .user=%U" ` on a release-build in Rust gives: real    0m0,049s

1543781885
DutchGh0st
the Zig version: real    0m2,255s

1543781898
DutchGh0st
where I use -Drelease-fast=true

1543782884
DutchGh0st
huh

1543782897
DutchGh0st
I just wrote ` noreturn` inside a hashmap's value type

1543782905
DutchGh0st
and my computer frooze

1543784262
vegecode
Could someone point me to an example of a main function that return a u8, but also uses functions inside of it that can return errors? I'm getting an error in bootstrap.zig.

1543784292
andrewrk
vegecode, you'll need to use `if` or  `catch` to deal with errors

1543788636
v1zix
I think I might be missing something obvious, but how does one append a string read from a file to an ArrayList of strings? I saw what looks like an example in std.debug with readStringRaw but I'm still missing something

1543788762
andrewrk
what type is your string read from a file?

1543788808
andrewrk
is this what you're trying to do?

1543788808
andrewrk
;)

1543789019
v1zix
Yep haha, one other question how does the list in that function get cleaned up without calling list.deinit()? Does that happen when the allocator is cleaned up?

1543789218
reductum
vegecode: Still getting familiar with Zig's standard lib, but another way is to just read the whole file into an allocated array:

1543789221
reductum


1543789265
andrewrk
v1zix, it doesn't get cleaned up in the code I linked. I didn't bother cleaning up memory because the program is designed to run once and then exit, so there's no point of dealing with memory cleanup

1543789495
reductum
Ah. Meant to tag v1zix up there, not vegecode.

1543789547
v1zix
Cool, thanks for the help

1543790893
andrewrk
I'm running into the painful combination of error sets + interfaces right now :-/

