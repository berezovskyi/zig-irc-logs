1533601594
unique_id
scientes: if is comptime if its condition is comptime

1533601606
scientes
whats the syntax?

1533601629
unique_id
just the normal if syntax

1533601641
scientes
if (comptime foo) {]?

1533601653
unique_id
if (foo)

1533601667
scientes
but I want to put it in the if

1533601672
scientes
to make it clean

1533601683
scientes
like #ifdef HAVE_BAR

1533601736
unique_id
Example from documentation, this is comptime: const separator = if (builtin.os == builtin.Os.windows) '\\' else '/';

1533601779
scientes
having the comptime keyword there would improove readability IMHO

1533601785
scientes
like assert()

1533602119
andrewrk
scientes, that doesn't make sense from a scoping perspective

1533602134
andrewrk
you can put comptime in front of the if, but then the body of the if has to be 100% comptime

1533602146
scientes
I just want the if to be comptime

1533602149
andrewrk
whereas you probably want the branch to be comptime but put runtime code in each prong

1533602158
scientes
the condition

1533602179
scientes
its like #ifdef/#else/#endif

1533602524
unique_id
if (comptime expr) works

1533602541
unique_id
reminds me of c++: if constexpr(expr)

1533602547
scientes
oh ok

1533602567
unique_id
I just tried it, didn't know before :)

1533602577
scientes
should be in the docs

1533602629
scientes
(should have tried myself)

1533602699
scientes
is there a const for endianness?

1533602720
scientes
I can't find it in the source or docs

1533602832
unique_id
There's an entry in the docs called "Compile-Time Expressions" but it just shows this syntax: comptime {}, but there's a test case that shows "comptime expr" syntax. It does say that in the global scope all expressions are implicitly comptime

1533602947
unique_id
scientes: there is, one sec

1533603082
unique_id
if (builtin.endian == builtin.Endian.Little)

1533603087
unique_id
Little/Big

1533603105
unique_id
const builtin = @import("builtin");

1533603202
unique_id
it is in the docs btw :)

1533604041
scientes
oh there it is

1533606380
scientes
ugggh @memcpy() type checking is too much

1533606385
scientes
i'll go back to for () ||

1533606390
scientes
inline for () ||

1533609493
andrewrk
hm I think those docs are wrong

1533609528
andrewrk
nvm

1533609555
andrewrk
I might change @memcpy to allow non-u8 pointers

1533616838
scientes
andrewrk, yeah I think @memcpy should allow arbitrary pointers, its already unsafe with the non-overlap

1533616872
scientes
but yeah I don't need to use it

1533616890
scientes
I wrote a chacha20 implementation but there is still a bug or two cause i'm not getting the right results

1533620748
andrewrk
scientes, btw did you see std.mem.copy?

1533621950
kristate
back online from tokyo university

1533621957
kristate
15pm JST

1533624765
kristate
andrewrk: thinking about breaking-up the loop into separate files for each platform. importing event.loop will import the correct implementation for each OS and we will test the unified API in several test blocks inside of event.loop -- there is just too much custom code between the platforms and with threads, I want to make sure we get this right.

1533624835
kristate
andrewrk: it's not as bad as you might imagine. only downside is if we find a bug in one implementation, we will have to make sure to track it down for each other files -- BUT, if we add the appropriate test case for that bug, we should be able to run against all implementations and if the bug does not show, then so be it

1533624898
kristate
andrewrk: I think that this is going to be important as we go forward -- defining the interface as tests in an index file, and then making sure the tests pass in each implementation

1533626409
andrewrk
kristate, I implemented the darwin file system stuff (not the watching yet) in my async-fs branch

1533626415
andrewrk
I went the other direction with it - not having different files

1533626438
kristate
andrewrk: yes, I see that -- but when we add FS watching in, things will get messy with CFLoopRun

1533626440
andrewrk
I think it's better to have the same function definitions and types in one file, and that can switch out and import os-specific files if necessary

1533626612
andrewrk
kristate, I see, alright my mind is open to your way

1533626638
andrewrk
sorry I gotta get some sleep, I'll be back in ~8 hours

1533626653
kristate
okay, yeah -- please rest well. I will try to get something hacked out with FS watch

1533632980
kristate
rebased on andrew's #1294 and reimplemented some things -- FSWatch is coming next (

1533650523
kristate
so I got the cfrunloop to loop with a C callback

1533650573
kristate
now I need to stuff the posixFsRun code into that callback, and if successful, we can start to do FSWatch specific functions

1533650581
kristate
all in the same thread

1533651184
kristate
Okay, it's working now inside of the loop -- need some way to add coreFoundation to every build

1533655818
kristate
andrewrk: morning!

1533656449
kristate
andrewrk: if one thread's promise handle is resumed in another thread -- what happens?

1533657641
andrewrk
kristate, morning

1533657661
andrewrk
it works - you can think of resume like a function call

1533657797
andrewrk
I looked at the core foundations stuff

1533657804
andrewrk
I don't think we need it. I think kqueue gives us everything we need

1533657813
andrewrk
and that works on the BSDs too

1533657849
kristate
don't get me wrong, I like kqueue and dislike having to do things apple-like

1533657913
kristate
kqueue can track individual files, but cannot track directories

1533657998
andrewrk
I'm pretty sure kqueue can track directories

1533658088
kristate


1533658415
andrewrk
kristate, alright I caught up reading about this, looks like you're a step ahead of me

1533658461
kristate
I just want to implement the feature in the best and performant method, with the least amount of dependancies

1533658518
andrewrk
same

1533658836
kristate


1533659125
andrewrk
kristate, alright so now the problems we need to solve are: ability to build against core foundation when cross compiling, and only depending on it when it's used

1533659178
kristate
andrewrk: agreed. I patched link.cpp, but I think we can do better

1533674587
MajorLag
hmm... TypeInfo doesn't have a []Type for Fn arguments. Have to use @ArgType still.

1533679520
MajorLag
man, comptime caching really ruins a lot of complex use cases.

1533679528
MajorLag
not even really that complex actually.

1533679601
MajorLag
things like "iterate over the pub defs of struct A and see if they have a matching name and type pub def in struct B"

1533682077
scientes
there is an avoidance of @import("std") in the standard library, so that it refers to its own version. However this has the problem that all the test are always run

