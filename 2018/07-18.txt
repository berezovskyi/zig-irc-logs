1531872130
GitHub84
[zig] jayschwa opened pull request #1256: Fixed minor documentation errors (master...fix-docs)

1531876735
GitHub92
[zig] andrewrk closed pull request #1256: Fixed minor documentation errors (master...fix-docs)

1531876736
GitHub13
[zig] andrewrk pushed 1 new commit to master:

1531876736
GitHub13
zig/master 6394f7e Jay Weisskopf: Fixed minor documentation errors (#1256)...

1531885154
GitHub165
[zig] andrewrk pushed 1 new commit to master:

1531885154
GitHub165
zig/master cbfe9a4 Andrew Kelley: fix @setEvalBranchQuota not respected in generic fn calls...

1531897308
GitHub56
[zig] thejoshwolfe pushed 1 new commit to master:

1531897309
GitHub56
zig/master 843529d Josh Wolfe: implement proper utf16leToUtf8

1531902596
GitHub160
[zig] Hejsil pushed 1 new commit to master:

1531902597
GitHub160
zig/master b7be082 Jimmi HC: -Dskip-release now also skips build example tests

1531919108
GitHub123
[zig] Hejsil opened pull request #1258: Allow pointers to any struct in extern/exported declarations (master...extern-ptr-to-everything)

1531922922
GitHub24
[zig] andrewrk pushed 1 new commit to master:

1531922922
GitHub24
zig/master a8a1b5a Andrew Kelley: fix build on windows...

1531925193
GitHub128
[zig] andrewrk pushed 1 new commit to master:

1531925194
GitHub128
zig/master cd488c9 Andrew Kelley: fix std.os.getAppDataDir test on linux

1531925527
GitHub117
[zig] andrewrk pushed 1 new commit to master:

1531925527
GitHub117
zig/master c393a39 Andrew Kelley: fix invalid character test on windows

1531926057
GitHub78
[zig] andrewrk closed pull request #1258: Allow pointers to anything in extern/exported declarations (master...extern-ptr-to-everything)

1531926061
GitHub145
[zig] andrewrk pushed 1 new commit to master:

1531926061
GitHub145
zig/master fd3a41d Jimmi Holst Christensen: Allow pointers to anything in extern/exported declarations (#1258)...

1531934772
bheads_
andrewrk, I just got a chance to watch last weeks live stream, good stuff and thanks for doing it!  Was the problem that the event pool was not working due to you still calling group.call (and not loop.call) in the arguments loop?

1531934815
andrewrk
bheads_, it is working as of

1531934854
andrewrk
this along with:    await (async loop.yield() catch unreachable); // TODO simulate evented I/O for the file I/O below

1531934893
andrewrk
that yield is needed as a workaround for the file I/O being blocking instead of event-based

1531934917
andrewrk
and that catch unreachable is solved by this proposal that I just filed:

1531934940
andrewrk
I'll do a quick demo of it working on thursday at the beginning of the stream :)

1531934949
bheads_
lol, all of the problems you ran into I had while writing a fiber based event dispatched in D

1531934956
andrewrk
ha!

1531934982
andrewrk
I'm annoyed by how long I spent figuring out how to propagate the error code up to the non-async code

1531934983
bheads_
ie, the main loop cannot be one of the worker, and you need to yeild

1531935004
andrewrk
hm, I still have the main loop being one of the workers

1531935006
bheads_
actually that is really hard to do parallel

1531935021
bheads_
I ended up having the main loop spin

1531935032
bheads_
then fall back to an os sleep

1531935053
andrewrk
makes sense. but I'm not settling for anything less than optimal >:-]

1531935058
bheads_
lol

1531935069
bheads_
if the main loop is a work you will always have issues

1531935075
bheads_
is a worker**

1531935080
andrewrk
why's that?

1531935108
bheads_
if you have a single blocking worker task there is a 1 in 4 chance that it is a bottle neck

1531935172
bheads_
another options is your event loop has its own dispatch thread that spins then sleeps when there is no work

1531935210
bheads_
I just find it easier to reason about when its the thread that calls loop.run() to be the dispatcher

1531935212
andrewrk
but all my worker threads are capable of dispatching

1531935237
bheads_
okay so its a pull and not a push dispatcher

1531935249
andrewrk
it's a hybrid

1531935272
andrewrk


1531935330
bheads_
I will have to find time to understand this... all my time is sunk into a bathroom remodel and helping my wife get through a major art fair!

1531935350
andrewrk
this function dispatches as many coroutines as there are available worker threads

1531935364
ofelas
is it safe to assume a codegen bug when things work with release-small but not with release-safe/fast?

1531935390
andrewrk
ofelas, not necessarily because there could be undefined behavior. but probably

1531935397
andrewrk
does it work in debug mode?

1531935417
ofelas
works with "test" if that is debug mode

1531935432
andrewrk
bheads_, and then the main worker loop does this:  get next coroutine. call dispatch(). resume the coroutine we got. epoll()

1531935462
bheads_
each worker needs to call dispatch

1531935486
andrewrk
ofelas, test has other modes too - the default is debug, but you can run your tests with --release-small, --release-fast, or --release-safe

1531935504
andrewrk
bheads_, yes, here:

1531935528
bheads_
I see that now, was this not happening last week?

1531935554
andrewrk
bheads_, correct. I did this commit yesterday:

1531935564
ofelas
ok, will try, and release-fast changes behaviour slightly if i sprinkle some warn() here and there

1531935577
andrewrk
that's the unfortunate nature of advanced optimizations

1531935592
andrewrk
ofelas, if you get stuck I'd be happy to look at your project and try to help

1531935613
andrewrk
are you directly porting C code or did you do your implementation sort of from scratch?

1531935635
andrewrk
a trick if you're porting, is to run the C code and the Zig code side by side in gdb and inspect state along the way

1531935664
ofelas
ok, i'll see if i can wrap my head around this, i ported the deflate part of miniz_oxide to zig, so i've been running c, rust and zig

1531935717
bheads_
andrewrk, okay cool.  I just went back to my D fiber pool and I see that I did what you did, but the main thread is not a worker in the pool for a differnet reason (its handling a socket based RPC dispatcher and a collection of event timers) so the concept is similar

1531935762
andrewrk
ofelas, one thing to consider, make sure you're using wrapping arithmetic where appropriate

1531935790
andrewrk


1531935858
andrewrk
it's possible that the tests are not covering wraparound arithmetic - so you're not getting any panics in testing - but in release modes, with optimizations on, llvm assumes that stuff never wraps and then does incorrect codegen

1531935911
ofelas
thanks, i'll see what i can find

1531935913
andrewrk
and there are no floats right?

1531935927
andrewrk


1531935961
ofelas
no floats, mostly unsigned with a few i32 and bitCast thrown in

1531937256
andrewrk
bheads_, what did you do with your D fiber code? what was the application?

1531942558
Bas__
I was wondering if Zig can take advantage of the asserts when compiling in release-fast

1531942586
andrewrk
Bas__, the asserts are communicated to LLVM in the form of conditional branches to unreachable blocks

1531942591
andrewrk
so the information is there

1531942594
Bas__
Ah cool

1531942605
andrewrk
I haven't done a study on how much LLVM is able to take advantage of this information

1531942668
Bas__
Cause I had an 'assume' macro in my C++ which was an assert in debug and in release an __assume (visual studio) or __builtin_expect (gcc)

1531942689
Bas__
No idea how much it really helped, but I thought it was neat ^^

1531942814
andrewrk
yep. zig's unreachable keyword / assert function at least does that

1531942828
andrewrk
there's also an open issue to bias branches against errors

1531942857
Bas__
yeah cool

1531942881
Bas__
It's funny. Many of the things I did for myself and really like are in Zig ^^

1531942904
andrewrk
:)

1531943243
Bas__
I'm also really happy with integers that don't automagically convert something else.

1531943403
andrewrk
unless it's a guaranteed safe conversion that doesn't change mathematical meaning

1531943507
Bas__
yeah, but that's fine.

1531952288
winksaville
I was playing around with allocators and tried std.heap.c_allocator and when compiling I get error "lld: error: duplicate symbol: _start". I'm guessing I need to link dynamically but don't know how?

1531952324
andrewrk
winksaville, did you put `--library c` as a command line parameter?

1531952411
winksaville
That did it, txs

1531955994
winksaville
andrewrk: in the docs there are a couple examples of build.zig but I don't see how to add "--library c"?

1531956032
andrewrk
here's an example:

1531956133
winksaville
That link went to a "Account recovery page" and it says "you risked getting locked out" I didn't risk getting you or me locked out :)

1531956223
andrewrk
in this case I suggest you use private browsing mode

1531956335
winksaville
I seems it was on my side, I tried to go to my github page and got the same message so I "comfirmed", fingers crossed I didn't mess something up :)

1531956366
winksaville
And I can now use your link, txx

1531956370
winksaville
txs

1531957859
winksaville
andrewrk: do you have a simple example build.zig that adds a "clean" target? Right now I execute like this `zig build --cache-dir build/` and then clean using `rm -rf build/`. That works but maybe you have something simpler?

1531957897
andrewrk
I don't have a recommended solution for that yet

1531957919
winksaville
k, what I've got is good enough for the moment.

