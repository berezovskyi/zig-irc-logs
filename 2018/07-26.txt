1532563551
MajorLag1
#1292

1532563656
andrewrk
thanks

1532563927
MajorLag1
hmmm, almost had it fooled: `return @sliceToBytes(@ptrCast([*]PtrType.Child, ptr)[0..1]);` => `error: unable to evaluate constant expression`

1532573298
dbandstra
for the record, every once in a while, building something in zig either clears my terminal, or dies with a random "bus error" or something like that. after this i can just try again and it usually works

1532573316
dbandstra
it's always been like that for me (playing with zig for a month or two) on ubuntu 18

1532575384
GitHub13
[zig] andrewrk opened pull request #1294: introduce std.event.fs for async file system functions (master...async-fs)

1532577771
andrewrk
dbandstra, I blame LLD:

1532578431
dbandstra
i figured it was not worth paying much attention to

1532578441
dbandstra
andrewrk, i updated my pcx loader

1532578453
dbandstra
andrewrk, it now takes an InStream, and the same implementation works both at runtime and comptime

1532578463
andrewrk
nice!

1532578470
dbandstra
(InStream instead of  []u8)

1532578506
dbandstra
i wonder if deflate/inflate is possible, although i don't have the energy to reimplement big existing c libs in zig

1532578522
andrewrk
ofelas is working on that

1532578527
andrewrk
in theory it's possible

1532580217
dbandstra
there's no stack trace if an error is returned in comptime code in a test

1532580255
dbandstra
just mentions one line test_runner.zig

1532580281
andrewrk
it should be pretty straightforward to add that

1532580293
dbandstra
i don't see an issue yet, i'll make one

1532580306
andrewrk
wait you're talking about this code?  test "foo" {  return error.Bar; }

1532580355
dbandstra
some variation of: test "foo" { comptime { return error.Bar; } }

1532580371
andrewrk
ah

1532580480
dbandstra
guess it's not unique to tests

1532580496
dbandstra
at least the error name does get printed

1532580631
dbandstra
i didn't notice the error name earlier... let this issue be super low priority

1532581237
andrewrk
I'm fairly confident that std.event.fs.watchFile should return a std.event.Channel, but the implementation is non-trivial

1532581260
andrewrk
I mean getting it to work is easy, but the cleanup is tricky

1532584109
dbandstra
hehe my pcx loader is really, really, really slow at comptime... loading a 272x128 image in my game takes like 10 seconds (and my computer starts to get loud)

1532614287
MajorLag1
apparently just because you've wrapped everything in a comptime block doesn't mean that your expression is a constant expression, according to the compiler.

1532614533
hooo_
it's more like 'run at compile time if possible'

1532614622
MajorLag1
it is possible, it just doesn't want to do it

1532614740
MajorLag1
Well, I've wasted enough time trying to manipulate this into working at comptime without substantial modification. I'll just stick to doing it in a separate build step until comptime is fixed enough.

1532617535
andrewrk
that sounds like a bug

1532619384
MajorLag1
probably. Question is, how many function calls deep do you have to be before it shows up? Had similar issues with comptime before in that regard. Makes it difficult to make a minimal test case sometimes.

1532619480
andrewrk
the comptime implementation in stage1 was researchy

1532619501
andrewrk
I'm taking a much more disciplined approach in stage2. I hope to be free of all these pesky bugs

1532619907
MajorLag1
that'd be great. 9/10 times I encounter a bug or limitation it is in comptime.

1532644229
GitHub189
[zig] andrewrk pushed 1 new commit to master:

1532644230
GitHub189
zig/master 2cbad36 Andrew Kelley: add compile error for ignoring return value of while loop bodies...

