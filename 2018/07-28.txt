1532754016
andrewrk
winksaville, what are you trying to do?

1532754042
andrewrk
I don't know what to suggest because it's not clear to me what you're trying to accomplish

1532754075
andrewrk
you can see an example usage of std.atomic.Queue API in its tests

1532754697
dbandstra
12 minutes and counting

1532754715
andrewrk
I'll bet it's leaking memory too

1532754728
dbandstra
yeah

1532754729
andrewrk
what's your comptime branch quota set to?

1532754747
dbandstra
20000000

1532754749
andrewrk
haha

1532754759
dbandstra
i would be sad if it died and the number wasn't high enough

1532754785
dbandstra
now using 60% of my memory (not sure how to read the top display, but i have 16GB in my machine)

1532754788
andrewrk
in theory comptime zig should be able to be roughly as fast as python

1532754798
andrewrk
but I didn't code it with this in mind in stage 1

1532754823
dbandstra
i'm killing the process because my computer sometimes dies if cpu is saturated too long (it's warm here too)

1532754846
andrewrk
turns out we actually need a garbage collector for comptime zig code

1532754848
dbandstra
i'm going to try some smaller images later ... i feel like time is exponential to number of pixels

1532754848
andrewrk
it's a bit ironic

1532754868
dbandstra
hehe

1532754891
andrewrk
oh, I just thought of at least one place where that is true

1532754986
andrewrk
hmm actually it is different than I remembered

1532755012
andrewrk
oh well. anyway comptime code speed is something in scope to improve but as you can imagine, it's pretty low priority in stage 1

1532755228
dbandstra
yeah i lost interest in loading images at comptime but i'm just trying to fill out a test suite

1532757038
dbandstra
well that's enough for me, 64x64 lena image at comptime takes 4 seconds, 128x128 takes 70 seconds

1532757091
dbandstra
i had a ~256x128 image loading in more like 30 seconds earlier but that had a lot of long RLE runs in it

1532758059
dbandstra
oh, if i make the pcx loader work on a slice directly, instead of a stream with readByte() calls, it speeds up dramatically, 128x128 image in 2s instead of 70s, even 512x512 image finished in 17 seconds

1532758066
dbandstra
so i guess it's the function calls

1532758113
dbandstra
without function calls seems more linearly related to number of pixels

1532758372
dbandstra
if my math is right it probably would have taken four and a half hours to do the 512x512 one with function calls

1532758388
kristate_
andrewrk: thanks for the comments

1532759588
kristate_
andrewrk: not sure how to return the promise->T

1532759665
kristate_
andrewrk: get_promise_type(ira->codegen, fn_entry->type_entry->data.fn.fn_type_id.return_type) ?

1532760049
kristate_
andrewrk: I think I got it --

1532761263
kristate_
Can anyone point me in the right direction to converting/exposing an IrInstruction to a LLVMValueRef ?

1532761355
kristate_
I'm assuming I can dump irb->exec->coro_handle into the builtin @handle() IrInstructionHandle

1532761734
kristate_
commented here:

1532762625
unique_id
andrewrk: loop.initSingleThreaded, loop.initMultiThreaded are private

1532764614
unique_id
The Server in std/event/tcp.zig, shouldn't its handleRequestFn take std.net.Address and std.os.File by value?

1532764645
unique_id
since now that's possible

1532781677
bodie_
hi andrewrk, I probably didn't make myself clear enough yesterday.  the error is when I try to build a source file using self-hosted zig.

1532781684
bodie_
The stage2 build works.

1532781692
bodie_
s/build/self-build/

1532789715
andi3
yesterday I read that comptime needs a gc and is slow (may get faster but still...) and just remembered jai running a demo game in the com time vm just fine

1532789749
andi3
not sure if they have a gc but have not heard about that so I am a bit curious as to why zig needs it/ maybe there is a better way?

1532789804
kristate
andi3: comptime is not part of the runtime

1532789807
andi3
good to see, there is some more discussion about interfaces happening at some places here and there ;)

1532789834
kristate
andi3: might be too early to optimize that part of the compiler since we don't have stage2 done, either

1532790372
andi3
for the same reason I was surprised, because if (and I do not know if this is true) but if jai manages without gc then maybe this should be the target for zigs comptime as well for stage2

1532790983
andrewrk
unique_id, I need to revisit the tcp server API

1532791017
andrewrk
now I know better how to do it- instead of passing an async function "handler", it will return a Channel of connections that you can get() from

1532791050
kristate
andrewrk: good morning!

1532791060
andrewrk
wow we are on at the same time kristate! :)

1532791078
kristate
a little past midnight in Japan

1532791109
andrewrk
I'm looking at your PR

1532791155
kristate
thanks!

1532791209
andrewrk
by "remove old semantic analysis code" I mean to remove the suspend |handle| {} feature

1532791220
andrewrk
so that suspend no longer can give a `handle` variable to the block

1532791276
kristate
ah, okay -- do you want to keep the block? I thought that was important because it coincides with llvm.coro.suspend

1532791400
andrewrk
yes the block can stay but the variable capture should be removed - see this code snippet that I'm pasting on the PR comment

1532791509
kristate
okay, cool

1532791612
kristate
going to go to bed for 6 hours or so and then I'll start to rework suspend |handle| {}

1532791751
winksaville
andrewrk: I'm trying to send messages via Queus between entities (actors) which can have any type. In C you'd cast to the type you expect to be present.

1532791784
andrewrk
good night kristate

1532792294
andrewrk
winksaville, all the casts in C you can do in Zig too

1532792315
andrewrk
but it looks like you're trying to do it without unsafe casts?

1532792342
andrewrk
you have 2 options for that: tagged unions and @fieldParentPtr

1532792357
winksaville
I'd like to, if possible

1532792475
winksaville
Ok, I'll look into those, txs

1532792704
winksaville
andrewrk: I watched your twitch stream yesterday, have you commited the async/await code you were working on?

1532792730
andrewrk
not yet

1532792895
winksaville
k, I'll be watching for it

1532793505
winksaville
I've looked in the docs but didn't find a explanation of the type "var". It seems like it provides RTTI for the parameter, is that correct?

1532793756
andrewrk
there is no type "var"

1532793790
andrewrk
however you can put "var" instead of the type in a function definition to tell zig to infer the type

1532793809
andrewrk
there is no run-time type information

1532794056
winksaville
k

1532796199
unique_id
I see. I decided to move from asio+beast to the h2o server for my website stuff, but using Zig.

1532796382
unique_id
I'll use their libh2o library to implement my app logic. I really don't understand how others create non-static websites, I'm not a web dev. fastcgi seems pretty dumb. reverse proxy you still need a server. So I'll use libh2o

1532796763
andrewrk
I'm a fan of event-based I/O systems for non-static websites

1532796807
andrewrk
it makes it easier to implement pushing data updates

1532796814
andrewrk
rather than the website polling the server

1532797174
bodie_
>vulnerability fix >two vulnerability fixes >two vulnerability fixes

1532797185
bodie_
yeah I'm totally gonna throw that up on the public internet

1532797262
bodie_
come to think of it, it's pretty wild how many of us use an HTTP server written in C

1532797513
unique_id
everything at this level is written in C, or sometimes C++ - servers, databases, operating systems

1532797542
unique_id
nginx, postgres are c

1532797552
unique_id
I'm not against C code, public or not

1532797556
bodie_
Hope you're not also exposing your pg on a public interface

1532797637
unique_id
Just as likely as you are to expose yourself to minors..sorry

1532797818
unique_id
h2o is rather new and it's high quality, that's a fact

1532798201
bodie_
hilarious joke, friend

1532798211
bodie_
what this world needs is more pedo jokes

1532798223
andrewrk
let's get back on topic

1532798234
unique_id
bodie_: You posted the first joke

1532798248
andrewrk
unique_id, please stop

1532798290
andrewrk
both of you have good points about software

1532798318
andrewrk
there are a lot of exploits out there against native code facing the web. then again, you can't do anything without native code

1532798391
bodie_
that's why a real proof language for native code would be nice :)

1532798406
bodie_
they exist but they're non-serious because they're nearly unusable, so they might as well not

1532798412
andrewrk
but what if there's a bug in the prover?

1532798423
bodie_
it has to be so tiny it can be hand verified

1532798440
bodie_
near trivially

1532798452
andrewrk
hmm. that sounds so difficult as to be almost impossible to me

1532798471
andrewrk
I don't think we'll ever have that level of confidence

1532798904
bodie_
I think a term rewriter is the first step

1532798921
bodie_
I don't really have time to work on it yet though :D

1532799058
bodie_
there are a couple of cool ideas out there -- pure

1532799089
bodie_
In fact, ML was such a language, invented to implement the progenitor of HOL/Light

1532799182
bodie_
Most of these operate on set theoretic primitives, don't generate small native binaries, have nearly unusable syntax because of dependent types, and so on

1532808378
andrewrk
ooh:

