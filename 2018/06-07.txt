1528329886
clownpriest
nvm, found time.Timer

1528333611
GitHub25
[zig] BraedonWooding opened pull request #1067: Zig Fmt: Added recursive option (master...zigfmt_directory)

1528334958
GitHub133
[zig] BraedonWooding closed pull request #1067: Zig Fmt: Added recursive option (master...zigfmt_directory)

1528334988
GitHub118
[zig] BraedonWooding opened pull request #1068: Zig Fmt recursive option (master...FmtDirectory)

1528339360
kristate
Started an Experimental Standard Library for Zig here:

1528339377
kristate
First task is getting runloops setup and then from there building out

1528341203
andrewrk
kristate, neat! let me know if you have any coroutine questions. I'll start working on those docs

1528351276
GitHub28
[zig] BraedonWooding opened pull request #1071: Added directory open/next for windows (master...WindowsDirOpen)

1528366527
kristate
I started sharing Zig with my students at Tokyo University:

1528372902
donpdonp
im looking and updating a toy zig project from a month ago

1528372918
donpdonp
with the master branch im getting 'error: expected type '?[*]?*c_void', found '*?*c_void'

1528372929
donpdonp
ive not see the [*] mark before

1528373019
donpdonp
another example is var argc: c_int = 0; c.gtk_init(&argc, &argv); => error: expected type '?[*]c_int', found '*c_int'

1528373153
nc-x[m]
donpdonp:

1528373174
donpdonp
nc-x[m]: thx!

1528373793
donpdonp
ive gone through the ticket item and see how to declare all kinds of pointers, but im assuming the argc in my example is the right type, and i need to construct a pointer inside gtk_init()

1528373883
donpdonp
im not sure how to state &argc to satisfy ?[*]c_int

1528374260
Hejsil
donpdonp, I think this is related:

1528374891
donpdonp
hmm still stuck on using &argc. I did get var argc: ?[*]c_int = undefined; c.gtk_init(argc, argv); to work

1528374904
donpdonp
but i dont know how to see argc to point at an actual 0

1528374912
donpdonp
see/set

1528375202
Hejsil
c.gtk_init(@ptrCast([*]c_int, argc), argv) could work

1528375235
Hejsil
Though, the current state of c-translate is a little messy, as all C pointers become [*]

1528375280
Hejsil
argc/&argc

1528375320
donpdonp
yes thats much happier now, and makes sense. thx

1528375359
Hejsil
Np. You'll probably have to do a lot of @ptrCast when calling C functions

1528375367
Hejsil
So brace your self :)

1528375526
donpdonp
the bleeding edge is where all the fun is.

1528375547
Hejsil
Truly

1528375576
Hejsil
But it can sometimes be hard to be productive when everything changes all the time, or a feature you need is not here yet

1528375591
donpdonp
nod.

1528375962
Hejsil
:)

1528376028
donpdonp
my real problem is json.JsonParser crashes on this particular blob of json

1528376052
donpdonp
i thought id update all of zig to see if the parser got updated, but that was a step too far

1528376207
Hejsil
You program crashes or the Zig compiler crashes?

1528376217
donpdonp
program

1528376221
donpdonp


1528376262
donpdonp
the 'dummy ok' output is just to see if im using the json parser correctly / sanity check

1528380188
GitHub91
[zig] clownpriest opened pull request #1075: add set function to arraylist (master...arraylist_set)

1528381505
andrewrk
here is the announcement blog post for me working full time on zig:

1528382305
andrewrk
donpdonp, see also

1528382397
Hejsil
andrewrk living the dream that few can

1528382414
Hejsil
Looking forward to lots of progress on Zig :)

1528382419
andrewrk
:)

1528382556
clownpriest
andrewrk, awesome!

1528382992
clownpriest
i've only been playing with zig for a week now, but so far it feels like it's hitting a real sweet spot

1528383453
andrewrk
happy to hear that

1528385049
bheads__
andrewrk, I have a small D application I want to rewrite (it works fine, but the GC is being a PITA) thats released in production.  Right now C/C++ seems like my only viable option, but I hate C++ and I am dreading writing in it again.  What kinda of state is Zig in for production projects?  Maybe released in a month or two...

1528385136
andrewrk
bheads__, I can't recommend zig in production until 1.0.0

1528385152
bheads__
damn...

1528385179
Hejsil
andrewrk, where does Zig do the layout for extern structs?

1528385192
andrewrk
bheads__, I am curious though, what in particular is being a PITA about the gc?

1528385209
bheads__
the D GC cant compact or minimize

1528385211
andrewrk
Hejsil, LLVM respects C ABI for structs

1528385218
Hejsil
Aah, right

1528385231
andrewrk
I believe right now there is actually no difference between extern structs and normal structs. it's just "zig reserves the right" sort of thing

1528385250
bheads__
The app I have process large FASTQ files and does lots of network IO to our back end at curiogenomics

1528385252
andrewrk
the struct/union code is a mess. I really need to revisit how all that works

1528385268
bheads__
So after processing a few files it sits there eating 500mb

1528385296
Hejsil
So it would be best if I didn't try to implement

1528385312
bheads__
and the std lib hides all of its memory usgae so I really dont know if its a leak or just a bad GC

1528385352
andrewrk
Hejsil, there's a class of bugs/issues that will never really need to be in stage 1 - so if it's possible to wait until the self hosted compiler comes out, then we don't have to maintain 2 implementations of it

1528385368
andrewrk
e.g. the std lib / self hosted compiler does not need that feature in order to build

1528385375
Hejsil
Righto

1528385389
andrewrk
but I mean don't let that stop you if you see a reasonable way to do it

1528385430
andrewrk
I think for #1072 you would be pioneering some new code - I don't think any feature like this exists yet

1528385458
Hejsil
Well, extern unions get all the features of normal unions when I tweak the type checking :)

1528385476
Hejsil
It's just, that I need to make sure the layout is right so I can generate a header

1528385509
andrewrk
I think that is a matter of a few things:

1528385511
andrewrk
make sure the LLVM type gets generated correctly in resolve_union_type

1528385525
andrewrk
make sure constants get generated correctly, in render_const_val

1528385585
andrewrk
make sure the instructions that depend on struct layout in codegen.cpp are correct, e.g. IrInstructionStructFieldPtr or equivalent for unions

1528385602
andrewrk
and then update the generate .h file code (that will be the easiest)

1528385632
Hejsil
Well, couldn't easily wrap my head around resolve_union_type, and if it requires a rework anyways, then I'll leave it for now

1528385634
bheads__
So far I dont see anything missing in zig just need: argument parsing, process spawning, file io, socket io, threading, mutexes, (I was using json for config and a db but I can roll my own format), zlib (gzread) and https post (I am using win api and curl)

1528385719
andrewrk
bheads__, ah, yeah, it's too bad zig isn't stable yet, because it is particularly well suited for doing these kind of operatings while maintaining a low memory overhead

1528385795
bheads__
oh and protobuf (but I would just use protobuf-c and convert that to zig..)

1528385827
bheads__
is there an estimate on 0.3?

1528385838
andrewrk
bheads__, yes, mid-september

1528385878
andrewrk
the day that llvm releases 7.0.0, I merge llvm7 branch into master and then fix bugs for 1 week. then release 0.3.0

1528385880
bheads__
if zig fmt intended to help migrate 0.2 to 0.3

1528385884
bheads__
is**

1528385913
andrewrk
that's a good question. I could have a couple of special subcommands to zig that can help migrate 0.2 to 0.3

1528385921
andrewrk
I'll make that decision when we're closer to that date

1528385952
bheads__
I think go has a tool that does that

1528388850
bheads__
is master broken right now?

1528388851
bheads__
pub fn panic(msg: []const u8, error_return_trace: ?&builtin.StackTrace) noreturn {

1528388876
bheads__
eror:  /home/bheads/Projects/zig/build/lib/zig/std/special/panic.zig:9:60: error: expected type 'type', found '*const type'

1528388918
andrewrk
bheads__, ?*builtin.StackTrace instead of ?&builtin.StackTrace

1528388924
andrewrk
the pointer syntax changed

1528388935
bheads__
right but I just compiled a hello world

1528388953
andrewrk
are you building from source? don't forget to `make install`

1528388977
andrewrk


1528389142
bheads__
ah I see that moves the std lib into the lib folder in the build path

1528389150
bheads__
sorry about the noise

1528389180
andrewrk
no worries

1528389219
andrewrk
I don't mind questions, especially when the documentation is so incomplete

1528389863
bheads__
thanks

1528392467
very-mediocre
Are booleans in zig just sparse ints like in C++?

1528392561
very-mediocre
(or was it bytes)

1528392820
very-mediocre
Looks like it, thanks anyway :]

1528392873
MajorLag1
very-mediocre: a packed struct of booleans is a bitfield, but other than that I think so.

1528392876
andrewrk
very-mediocre, in packed structs they are 1 bit

1528392904
very-mediocre
I see

1528392911
andrewrk
elsewhere they are guaranteed that @sizeOf(bool) == 1

1528392927
andrewrk
I'm not sure I understand your question though

1528392963
very-mediocre
In C++, iirc even for a struct of bools, each bool would use up at least 8 bits

1528392972
very-mediocre
even in a packed struct, I believe

1528393157
bheads__
I dont think there are any systems that can address a single bit, but you can address a byte

1528393191
very-mediocre
In C++ you'd use a userland bitset implementation

1528393202
very-mediocre
for packing bits into a primitive e.g. byte yourself

1528393251
bheads__
correct, but looks like zig will do the addressing for packed structs

1528393289
very-mediocre
I see, so I'll assume from that that there's no need for bitset implementation and the compiler takes care of it?

1528393376
bheads__
thats what andrewrk suggest, I guess its not documented yet

1528393380
very-mediocre
ok I see LLVM uses i1 to represent bool, that pretty much confirms it

1528393386
very-mediocre
thanks!

1528393592
andrewrk
very-mediocre, if you use `extern struct` you get C ABI layout. If you choose `struct` you get no layout or size guarantees other than that each field will be at least ABI aligned. If you choose `packed struct` then you get exactly the fields you choose, in that order, no padding, and when you take references to fields, the pointer has metadata that allows zig to do bit shifting

1528393709
very-mediocre
I see

1528393716
very-mediocre
Appreciate the detailed answer

1528395948
AndrewLaFountain
Good day everybody. Where should I look if I want to help with documentation?

1528396084
andrewrk
AndrewLaFountain, here

1528396091
andrewrk
happy to answer questions

1528396166
AndrewLaFountain
Thanks Andrew! I wish you well following your significant other around. I'm litterally doing the same, just from the west coast. Was there a specific moment of conception for zig, or was it more of a slow boil sort of idea\?

1528396192
andrewrk
slow boil for sure

1528396277
AndrewLaFountain
It's really well done. What would be the most effective spot for documentation? From what I can tell, we're going for doc generation from commented source?

1528396381
andrewrk
yes, you can follow progress on that here:

1528396397
andrewrk
the plan is to do it in only the self hosted compiler, and not in stage 1 (c++ compiler)

1528396411
andrewrk
there is also the language reference

1528396418
andrewrk
which is about half done

1528396509
AndrewLaFountain
A perfect. Thanks a ton. I have to get back to the day job pretty soon, but I'll read through that issue page and the reference and see what I learn.

1528396573
andrewrk
sounds good. you can find the language reference here:

1528399531
very-mediocre
Got a potentially silly question...

1528399542
very-mediocre
Is there a way to loop over a range, without having to reference an array?

1528399627
very-mediocre
nvm, I'll use while

1528400261
t5c
very-mediocre: what about for (array) |item| { ... } ?

1528400285
very-mediocre
that's in relation to an array

1528400298
bheads__
I think he was ask for something like  for (0..10) |i| {  }

1528400310
very-mediocre
Yep

1528400329
very-mediocre
It seems like it's a design decision not to have traditional `for` loops in favor of `while`

1528400350
t5c
oh, ok. now I get it ;)

1528400378
very-mediocre
Apologies if these questions are a bit mundane

1528400687
bheads__
very-mediocre, did you see the while loop continuation express?  while (i < 10) : (i += 1) {}

1528400703
very-mediocre
I did not!

1528400713
andrewrk
very-mediocre, there's an issue for this

1528400728
andrewrk
although I think the resolution is that we're not going to have syntax for that\

1528400746
very-mediocre
I see

1528400750
very-mediocre
I like the confidence

1528400766
andrewrk
this is one of those cases where we will sacrifice some convenience in order to keep the language simpler

1528400804
very-mediocre
Part of the draw of this language is the confident design decisions, so I'm not complaining, for now anyway :)

1528400806
bheads__
makes sense to me, plus it avoids the inclusive/exclusive issue

1528400811
andrewrk
however, there is one more thing which may cause zig to have this ability after all, and it's how we end up implementing generators with coroutines

1528400835
clownpriest
the simplicity of the language is so incredibly valuable

1528400873
clownpriest
anything it takes to prevent becoming c++ (or dare i say rust), is worth the immediate convenience that sugarry syntax brings

1528400894
bheads__
or what happened to D

1528400921
clownpriest
yeah D is a sad story, been following it for years, really hoping it would eventually make it out of the weeds....so sad

1528400927
very-mediocre
That's what drew me. I kind of escaped from C/C++ years ago and never found a more modern replacement

1528400941
bheads__
yeah, to bad I have production code and web sites running on it

1528400959
very-mediocre
What are you referring to wrt. to D. The GC dependency?

1528400961
andrewrk
rest assured I consider language simplicity one of the main features of zig

1528400970
clownpriest
:)

1528400994
bheads__
the GC and stdlib and shared is killing me every day in D

1528401008
andrewrk
what's "shared"?

1528401015
bheads__
a nightmare

1528401035
bheads__
it was an attempt to mark data as shared for concurrency

1528401042
bheads__
it was half baked and never finished

1528401044
andrewrk
oh interesting

1528401056
andrewrk
I need to study this because I have some similar ideas about how to aid concurrency with zig

1528401072
bheads__
its really hard to do right

1528401084
andrewrk
agreed

1528401089
very-mediocre
I think you're on the right track with async/await and some kind of green threads backend for the multiplexing

1528401106
very-mediocre
or just threads, not necessarily green

1528401156
bheads__
yeah you need the full gambit of threads fibers and coros

1528401157
clownpriest
whatever the solution is, it would be nice if it's amenable to static analysis for race conditions

1528401188
andrewrk
clownpriest, 100% agreed

1528401222
very-mediocre
I've only ever seen that done in Rust

1528401249
andrewrk
I believe go has a high quality race detector too

1528401256
very-mediocre
I'm sure there's something about async/await that's amenable to analysis though, at some point you have to `reduce`

1528401264
bheads__
This was how D was going to try to do concurrency

1528401275
very-mediocre
similar to the Promise.all() pattern

1528401294
very-mediocre
or `thread.join`

1528401324
clownpriest
idk how hard Go leans on their goroutine scheduler in the runtime to ensure everything plays nicely tho

1528401337
clownpriest
i'd imagine no runtime makes that significantly more difficult

1528401423
very-mediocre


1528401474
bheads__
there is also languages like pony that promise high concurrency but safe

1528401509
very-mediocre
golang's approach reminds me a bit of linting, seems to catch some common gotchas

1528401531
clownpriest
doesn't pony have a runtime tho? if there's a runtime tracking all dynamic memory allocations then that's different than the compiler being able to track lifetimes statically

1528401569
bheads__
not sure, have not dived into

1528401646
clownpriest
andrewrk, what are your thoughts on RAII style scoped dynamic memory?

1528401681
clownpriest
any potential for that in zig?

1528401683
bheads__
even D is trying to add support for scoped memory lifetimes

1528401706
bheads__
its very much a lite version of lifetime tracking

1528401738
clownpriest
interesting

1528401741
bheads__
scope int* x = new int; // will call delete x when it leaves scope

1528401774
bheads__
of course it doesnt work at all with the stdlib, so kinda useless as a language feature

1528401779
clownpriest
lol

1528401808
very-mediocre
Lifetime annotations are one of the worst things about Rust

1528401831
clownpriest
yeh it's pretty intense

1528401836
bheads__
I do like the idea of lifetimes, but rust takes it to far

1528401841
very-mediocre
I don't know if it's because of the obnoxious syntax or if the idea itself is just cumbersome

1528401914
very-mediocre
A comment about it from hackernews stuck with me: "this is a case of the cure being worse than the illness"

1528401942
andrewrk
very-mediocre, let's focus on working on zig rather than trash talking other languages

1528401956
very-mediocre
Hey I'm not trashing it, I like Rust

1528402042
very-mediocre
but the lifetime annotations are not for me as I was looking to lower the amount of mental load that goes towards writing the code

1528402048
andrewrk
same here

1528402112
very-mediocre
I would legitimately trash very few languages, the world of programming is in a pretty good state now

1528402114
andrewrk
clownpriest, hm I'm not sure I have a general answer to your question. If you can point to some specific code, I may have an opinion on how the best way to write that would be (whether with RAII or otherwise)

1528402168
andrewrk
very-mediocre, thanks. I didn't mean to offend, I just want to make sure that as we get an influx of new community members, we can keep the vibe healthy and positive

1528402224
clownpriest
i guess one idea is that structs have destructors, so like, all structs have their deinit() called on scope exit, and it's the struct's responsibility to have something senible done to the memory they own in that deinit() call

1528402243
clownpriest
something above and beyond depending on the programmer to remember to defer struct.deinit()

1528402273
andrewrk
clownpriest, the downside of that is that we would give up "no hidden control flow" - that is - if you see a struct initialized, you have to go read the definition to find out if any code runs at scope exit

1528402287
clownpriest
right, true

1528402302
very-mediocre
andrewrk I understand, tonality doesn't convey well on the net

1528402308
andrewrk
whereas, currently in zig, if you don't see a function call, you can be sure control flow is contained entirely within the code you are observing

1528402521
clownpriest
couldn't you make the argument that stack allocated variables get handled in with unseen control flow on scope exit tho?

1528402542
clownpriest
isn't that part of the OS?

1528402574
andrewrk
add $sp, 0x16    is hardly hidden control flow

1528402586
clownpriest
right lol

1528402605
dbandstra2
andrewrk: has there been any consideration of making `const` pointers "deep" in zig?

1528402617
andrewrk
dbandstra2, probably not. can you elaborate?

1528402630
dbandstra2
andrewrk: i can't remember if there was some fatal flaw with that idea in c/c++

1528402697
dbandstra2
like it seems somewhat weird that ArrayList.deinit takes a const* self, but it has a side effect (self.allocator is not const)

1528402730
dbandstra2
although i guess that's sort of ok since allocator is something that is created outside and passed in, not something "owned" by the array list

1528402799
andrewrk
I see

1528402832
andrewrk
I don't think this will change. if you consider the simplest case:  var x: i32 = 1234; const ptr = &x;  ptr.* += 1;

1528402850
andrewrk
this all makes sense. I don't see how it could be different

1528402886
dbandstra2
yeah i guess a deep thing would be a different keyword

1528403054
very-mediocre_
sounds like immutable

1528403171
andrewrk
const means immutable

1528403270
very-mediocre_
Yes, I meant the "different keyword" suggested by dbandstra2 could be something like immutable

1528403300
very-mediocre_
although maybe that's silly, I'm just brainstorming a bit :)

1528403316
dbandstra2
i was just throwing that out there and hoping someone would inform me of a previously reached conclusion hehe

1528403404
dbandstra2
i think the reason it doesn't always work in a low-level-ish language is that there's sometimes a field buried in a struct which still has to be mutable no matter what, because it's doing some kind of optimization

1528403453
very-mediocre_
Not that JavaScript is the greatest language on the planet, but in that realm it's been accepted that deep immutability is a user space thing

1528403465
very-mediocre_
i.e. immutable.js

1528403479
very-mediocre_
and lots of Object.freeze and similar things

1528403572
very-mediocre_
andrewrk and all other contributors: thanks, I love zig

1528403577
very-mediocre_
I wanted to say that before leaving

1528403591
andrewrk
very-mediocre_, cheers! come by any time for questions or demos

1528403610
very-mediocre_
👍

1528403730
hoppetosse
andrewrk: just popped in to say congratulations and good luck with the big plunge into full-time Zig!

1528403741
andrewrk
thanks hoppetosse

1528403774
hoppetosse
I haven't been very active due to university and work, but I hope to be able to dive deep in the summer =)

1528403845
andrewrk
looking forward to it

1528403854
andrewrk
the language will be a little more stable by then

1528405375
hoppetosse
Pointer reform was a pretty big deal

1528405386
hoppetosse
I didn't want to pick up tick again before that was through

1528405663
andrewrk
I expect to finish the pointer reform issue today

1528405672
andrewrk
but not null terminated pointers yet

1528406097
bavier`
hello zig folk.  Just wanted to say, as a compiler nerd, contributor to GNU Guix, and supporter of bootstrappable.org, I appreciate your commitment to the Zip bootstrapping process

1528406108
bavier`
s/Zip/Zig

1528406136
andrewrk
bavier`, I think you are the first one to appreciate this particular thing. happy to hear that :)

1528406159
andrewrk
did you find this issue?

1528406247
bavier`
andrewrk: awesome.

1528406671
isd
andrewrk: I am also very appreciative of this.

1528406695
andrewrk
noted

1528409303
GitHub96
[zig] andrewrk pushed 1 new commit to master:

1528409303
GitHub96
zig/master 31aefa6 Andrew Kelley: fix structs that contain types which require comptime...

1528409332
rain1
wow you quit ok cupid to work on zip full time??

1528409334
rain1
thats crazy lol

1528409337
rain1
are you going to be ok?

1528413180
GitHub117
[zig] andrewrk pushed 1 new commit to master:

1528413181
GitHub117
zig/master 688ff28 Andrew Kelley: langref: automatic update of builtin.zig...

1528415492
GitHub41
[zig] andrewrk pushed 1 new commit to master:

1528415492
GitHub41
zig/master b65203f Andrew Kelley: remove @canImplicitCast builtin...

