1533344109
wink_
andrewrk: nice demo!

1533349655
kristate
back online

1533362310
kristate
andrewrk: online?

1533362818
andrewrk
hi kristate

1533362823
andrewrk
I have a few minutes before bed

1533362832
kristate
andrewrk: hi -- about to push async UDP

1533362872
kristate
I am basing it off your async-fs branch

1533362886
andrewrk
interesting

1533362889
andrewrk
linux?

1533362927
kristate
posix -- testing on mac

1533362948
kristate
porting to windows shouldn't be too hard.

1533363075
kristate
andrewrk: oh, I wanted to know -- is there a way to initialize structs without filling out all elements?

1533363101
andrewrk
you can set the whole thing to undefined, and then initialize some elements

1533363134
kristate
andrewrk: I'm initing some sockaddr structs and on macos len is required

1533363452
andrewrk
kristate, len of what?

1533363475
kristate


1533363497
kristate
I'm doing .len = @sizeOf(posix.sockaddr_in)

1533365769
kristate
pushing

1533365886
kristate


1533365895
andrewrk
looking

1533366017
andrewrk
kristate,  you can base the PR on the branch in github and then it will make the diff easier to see, and make the merge button merge it into the correct branch

1533366052
kristate
andrewrk: okay, let me check

1533366083
andrewrk
it's no big deal, I'm looking at only your commits anyway

1533366147
kristate
andrewrk: still need to consolidate net.Address some more. Also, there is huge overlap in some of the posix defines

1533366287
andrewrk
kristate, I really need to deal with

1533366333
kristate
yeah, if you can push through that I can knock down more of the networking library

1533366368
kristate
also, I am thinking about writing a net buffer like object, but does one exist?

1533366369
andrewrk
would you be up for doing some of the file system stuff for macos? (the PR I have in progress)

1533366376
andrewrk
that would help me merge that sooner

1533366379
andrewrk
and I can start on the windows stuff

1533366388
kristate
andrewrk: yeah, I can work through that

1533366496
kristate
okay, let me cherry-pick some of these fixes to darwin and then I will make a async-fs-darwin branch

1533366516
andrewrk
the PR looks good so far

1533366530
kristate
andrewrk: what should I use as a test bench for async-fs?

1533366583
andrewrk
you can add more tests to std/event/fs.zig or you can add std/event/fs_test.zig

1533366607
andrewrk
I think the test I have in std/event/fs.zig hits all the APIs

1533366775
kristate
andrewrk: okay, cool -- I am replying to your comment

1533366911
andrewrk
kristate, I think it's good you followed the API pattern from std.event.fs.Watch for UDP. I think it's going to be nice, having the packets come from a Channel

1533366926
andrewrk
I think we should also update the tcp code that is currently there to have this API

1533366933
kristate
andrewrk: I agree

1533367001
andrewrk
also feel free to stick with networking code if that's what interests you! I just wanted to give you a suggestion if you were looking for something to do

1533367015
andrewrk
good night

1533367131
kristate


1533367134
kristate
night!

1533382445
unique_id
andrewrk: "after I clean this up a bit, I'm going to look into hot code swapping" - that's awesome! It's going to be exciting to see if that's feasable and what can be done with it.

1533390237
kristate
back online

1533397185
wink_
I'm looking for a way for two threads to communicate, specifically if there are no messages on a queue I want a thread to wait until there are messages. A way to do this is with a condition variable and a mutex but I don't see either, did I miss it?

1533411141
Dirkson
Arrays in zig have an array.len property. Is that the only array.whatever thing they have? How should I refer to the .whatever portion?

1533411336
Dirkson
Mmm. "Field", maybe.

1533411961
Dirkson
Currently, zig appears to error when I try to use tab-based indentation. I'm a hardcore tab-ite - Is there any way to browbeat zig into accepting tab-based indentation? Why does it even care that I use tabs?

1533412277
MajorLag
Dirkson:

1533412311
MajorLag
As far as I am aware, arrays only have the one magical comptime field.

1533412357
Dirkson
If you want to go this way then the compiler should have an option to automatically rewrite source files that contain tabs to spaces so that people can still use ziglang without having to switch their editing software.

1533412359
Dirkson
That's coming soon. We have zig fmt in the self-hosted compiler, and it's planned to support hard tabs."

1533412418
Dirkson
That's annoying, but tolerable. Nim was the same way. I find the space-based indenting crazy completely nonsensical, but computer professionals stubbornly keep refusing to consult me on this before implementing things.

1533412436
Dirkson
MajorLag: But thanks! That bit does address the tab thingie.

1533412451
MajorLag
It comes up pretty frequently.

1533415427
Dirkson
Since zig code is utf-8, and string literals are type u8 and part of zig code, that means that SomeStringLiteral[17] is not neccesarily the (17+1)th character of SomeStringLiteral, correct?

1533416885
Dirkson


1533417308
andrewrk
Dirkson, string literals are just byte arrays

1533417327
Dirkson
Coolcool.

1533417357
andrewrk
in my experience, nearly every program and library can be correct by never decoding utf-8

1533417388
Dirkson
Mine too, I just wanted to be sure that what I thought should be happening was actually what was happening :D

1533417405
Dirkson
So the error handling system appears to be designed around the idea of bubbling the error up through numerous functions. That's frequently a thing I want to do, but usually when I want to do it, I'm quite keen on putting that error in front of the user's face at some point in some format they can understand. Does the error system help with this task at all?

1533417451
andrewrk
switching on an error is useful since the compiler makes sure you handle the correct set

1533417463
andrewrk
you can do this to print user friendly messages

1533417478
andrewrk
you can use the @errorName builtin function as a shortcut

1533417491
andrewrk
also errors are supported in the print functions

1533417507
Dirkson
Awesome.

1533417517
andrewrk
if and while support destructuring error unions

1533417532
andrewrk
if (foo()) |ok_value| {...} else |err| {...}

1533417556
andrewrk
catch gives you the error

1533417561
andrewrk
foo() catch |err| { ... }

1533417586
Dirkson
One of my Side Projects is writing @errorName for vulkan. Which is a ROYAL PITA for C, particularly when you're trying to do it after-the-fact for someone else's library.

1533417929
Dirkson
Zig appears to have a standard library, but I haven't found documentation for it yet. Is that a thing?

1533417960
andrewrk


1533417985
andrewrk
this is only going to exist in stage2 which is under heavy development

1533418023
andrewrk
Dirkson, did you see my 1 minute demo from yesterday?

1533418400
Dirkson
Not yet. I avoided it with my usual dislike of technical concepts in video-form, but I'll take a look if it's important :D

1533418521
Dirkson
I am pretty majorly impressed that it only rebuilds the function that changed.

1533418529
andrewrk
oh yeah, you're like me. don't worry after I polish it up I'll write about it in text form

1533418559
andrewrk
I think my longer streams won't be for you but if I do a 1 minute demo, those should be interesting

1533418570
Dirkson
Yah, agreed. This one was pretty cool.

1533418594
andrewrk
I also realized that it shouldn't even be saying "build succeeded" when nothing changes

1533418610
andrewrk
because there's no reason to even relink and no reason to emit a message at all. we read the file, notice nothing changed, and then discard it

1533418625
Dirkson
That seems reasonable to me.

1533418655
Dirkson
You might want to have a switch to enable the current behavior though, to assist with debugging the language.

1533418675
andrewrk
sure. I might invert it though :D - `--build-only-once`

1533418681
andrewrk
rather than `--watch`

1533418691
Dirkson
My aversion got markedly worse after switching to my current "day job", which is making a game in Unity. Roughly half the plugins I buy are only documented in video form. There's a reason I'm currently procrastinating by learning Zig.

1533418874
Dirkson
I could see common workflows where rebuilding constantly wouldn't be ideal. Shucks, anything larger than a few hundred lines and I stop wanting 'build automatically' to be the default. Although then I've usually made a build script to automate all the build weirdness.

1533419097
andrewrk
why wouldn't you want that? it only rebuilds what you change

1533419150
andrewrk
especially when you have a large project, you would want this

1533419239
Dirkson
A lot of the time with a large project, I need to make several changes in several unrelated files before something compilable results. When it watches and tries to build things I know will result in errors, it both gnaws up system resources uselessly and throws error messages that I already know about at me.

1533419330
Dirkson
Also, I have a habit of saving whenever I pause typing. Helps reduce the impact of crashes and/or forgetful dirksons. This results in a lot of saves while I'm im the middle of writing some function or another, which also won't neccesarily be compilable.

1533419357
Dirkson
I don't know how common either of these behaviors are outside of me, though.

1533419524
andrewrk
I also save when I pause typing

1533419552
andrewrk
when you're coding though, don't you have free resources? and it's nice to know the status - that there are compile errors - and then you watch them go away when everything's done

1533419565
andrewrk
that's one thing that IDEs do nicely - red squigglies of the errors while you're coding

1533419593
andrewrk
and maybe you hit save and you didn't expect something to break, then it's good to know an error happened

1533419770
Dirkson
There

1533419772
Dirkson
when I can make them work.

1533419802
andrewrk
you can imagine that an IDE hooking into this setup is much more efficient

1533419812
andrewrk
for your summer days

1533419838
Dirkson
Hah, fair.

1533420017
Dirkson
Yeah, ok. I'm not sure I can come up with any more reasonable objections. You're winning me over to team "Just make the build system continuously do its thing"

1533420177
Dirkson
Doing it continuously means you can skip some steps, actually. Don't have to scrape the build instructions up off the disk every single time you build. You know exactly which files have changed, so you don't have to look at every single file mentioned by the build system every time it runs. Etc. Maybe those aren't worth chasing, but they're at least available.

1533420445
andrewrk
it's pretty optimal. even if you want to manually trigger it, you can have a little shell prompt there:

1533420452
andrewrk
zig> rebuild

1533420464
andrewrk
and it will do a minimal rebuild with only the stuff that changed since last time

1533420483
Dirkson
That's not a bad idea either.

1533420485
andrewrk
I hope your imagination is going wild with all the other commands this prompt could have

1533420496
andrewrk
since it has full introspection into the compilation state

1533420499
Dirkson
That did immediately spring to mind :D

1533420529
andrewrk
zig> rename std.foo.blah newName

1533420547
Dirkson
... Yes.

1533421108
Dirkson
Oh, I wanted to ask- There are a lot of @typeaToTypeb() builtin functions. Is there some reason that they couldn't be replaced by a @cast(fromType, toType, Castable) function?

1533421160
andrewrk
we used to have syntax for that - if you invoked a type as a function

1533421196
Dirkson
Oh, that was the other way I was going to suggest. Why 'used to'?

1533421262
andrewrk
the explicitness is now intentional

1533421274
andrewrk
so that you're likely to get a compile error if you change the types of something

1533421286
andrewrk
rather than now accidentally coercing this new type to some other type

1533421314
andrewrk
I can explain more later but I gotta run, ttyl

1533421382
Dirkson
See you!

1533421518
Dirkson
That's actually why I decided to suggest the "@cast(fromType, toType, Castable)" format instead of the type-function format. It maintains the explicitness, while simplifying the syntax. (While the type-function method simplifies the syntax by

1533422576
unique_id
I save way, way too much. Like an fps player that reloads after every peek-and-shoot.

1533423390
unique_id
How do I create a 0 length slice pointing to nothing?

1533423616
unique_id
I did it with a cast and [0..0] syntax

1533424130
unique_id
I know that if a function needs a struct but does not need to modify it, it should take it by value (and Zig will figure out how best to pass it in). But, in the caller if I need to reference the struct multiple times I might do: "const the_struct = something.something.the_struct;" but I don't want excessive copies, so I'll do "constr the_struct = &...;". Now I'm in a pickle because I need an ugly dereference to call the function:

1533424132
unique_id
"foo(the_struct.*)".

1533424257
unique_id
Do I: 1) make the function take *const TheStruct, or 2) do the dereference when calling the function, or 3) do "const the_struct = ...;" which at least appears to make a copy?

1533424398
unique_id
So the problem is that if I'm already handling the struct through a pointer to const because the struct is large, then making functions accept the struct by-value (to be optimized however Zig likes) breaks the consistency.

1533424514
unique_id
brb in 8 hours :)

