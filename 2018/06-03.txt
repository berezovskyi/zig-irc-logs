1527984001
mreiland
here's the error: error: invalid token: '*'   pub fn init(x:f32,y:f32, c: *const Color) Point {

1527984015
darithorn
do you have the most recent version of zig?

1527984026
mreiland
I downloaded 0.2.0 64 bit

1527984034
mreiland
according to this documentation:

1527984037
mreiland
that syntax is correct

1527984039
darithorn
pointer syntax barely changed yesterday

1527984045
darithorn
That's the documentation for the master branch

1527984046
mreiland
ooooh

1527984049
mreiland
should I redownload?

1527984059
darithorn
v0.2.0 still uses the old syntax, &const Color

1527984069
mreiland
oh ok, that would explain it

1527984100
andrewrk
here's the 0.2.0 docs:

1527984104
mreiland
I just checked, it was master I downloaded

1527984112
mreiland
but it was a few days ago

1527984132
darithorn
yeah, redownload the master and it'll compile fine with what you have now

1527984137
andrewrk
pointer syntax changed yesterday

1527984165
mreiland
the link is still colored, has an update been pushed for it?

1527984172
mreiland
and does it change the URL?

1527984204
darithorn
it doesn't change urls

1527984230
mreiland
oh ok

1527984244
mreiland
zig-linux-x86_64-0.2.0.717ac85a is what I downloaded, I'll redownload and compare build id's

1527984247
mreiland
thanks

1527984276
darithorn
the downloads for "Master" are automatically built every day or so iirc

1527984315
mreiland
how often does syntax like that change?

1527984339
darithorn
not very often. that pointer syntax change has been planned for a while though

1527984342
mreiland
I'm wondering if maybe I should work against the 0.2.0 release

1527984356
mreiland
alright, sounds like it was just wonderful timing on my part then :)

1527984455
mreiland
actually it looks like I have the latest version, I'm guessing the binaries haven't caught up with the documentation yet

1527984495
mreiland
I'll just work off the 0.2.0 docs you linked me until that happens, thanks for the help

1527985579
dbandstra
would it make sense to have an attribute called something like "fixed" for struct fields, which creates a compile error if you try to copy that field out of the struct? then only allow @fieldParentPtr to work on "fixed" fields?

1527985612
dbandstra
i just spent time tracking down some undefined runtime behaviour because i copied `random` out of the Xoroshiro  object, instead of using a pointer

1527985667
dbandstra
maybe i'm missing somethign though, i just discovered @fieldParentPtr 5 minutes ago

1527986473
andrewrk
dbandstra, oh that's an interesting idea

1527986562
andrewrk
mreiland, looks like the latest link redirects to zig-linux-x86_64-0.2.0.b85b68a7.tar.xz

1527986567
andrewrk
that's the newest master branch commit

1527986792
mreiland
I'm probably doing something silly, but I'm looking at the following download page:

1527986837
mreiland
and I'm pulling down the 2nd link (linux) named 'zig-linux-x86_64-master.tar.xz', but it still appears to be pulling down the file 'zig-linux-x86_64-0.2.0.717ac85a.tar.xz'

1527986856
mreiland
am I looking in the wrong place perhaps?

1527987107
dbandstra
try right clicking on the zig-linux-x86_64-master.tar.xz link in a private window

1527987117
dbandstra
opening in a private window *

1527987130
dbandstra
i think it's a browser cache thing

1527987158
MajorLag2
yeah, it sounds like browser caching

1527987178
MajorLag2
but... I can't think of why a browser would think it made sense to cache a download

1527987198
mreiland
yep, that's what it was

1527987210
mreiland
I tried it in a private window and saw the correct download

1527987212
MajorLag2
Yeah, I just pulled it and got /zig-linux-x86_64-0.2.0.b85b68a7.tar.xz

1527987222
mreiland
yeah, mystery solved, thanks guys

1527987238
MajorLag2
sounds like the browser might need a bug report

1527987240
mreiland
I hate how aggressive ff and chrome get with caching sometimes, there's no reason for them to be caching that page

1527987277
dbandstra
there's some kind of redirect or url rewrite going on

1527987299
MajorLag2
it's a 301

1527987319
MajorLag2
...which to be fair is 'moved permanently'

1527987328
mreiland
yeah, I was just diving in to look at that

1527987346
mreiland
the last modified date is also 5/23

1527987356
MajorLag2
so maybe that's something that needs to be changed on our end...

1527987415
mreiland
yeah, I definitely don't think following a link from your frontpage should hit a page that returns a 301, lol

1527987561
dbandstra
looks like 307 is more appropriate?

1527987615
mreiland
and I would bet the last modified being out of date has something to do with amazon

1527987625
mreiland
just a guess though

1527988592
mreiland
Is there good documentation on the standard library and the memory model used by zig?  I don't seem to be finding what I'm looking for in the documentation

1527989735
mreiland
I'll take that as a no so I'll just start asking questions here.

1527989749
mreiland
basically, I'm trying to wrap my head around memory management in zig

1527989771
mreiland
it seems you're not able to copy structs and must always pass them by val

1527989795
mreiland
but they do copy when you return the val from a function?

1527989822
dbandstra
heh you are in the same spot as me

1527989832
dbandstra
i think i was asking that question 2 days ago

1527989840
mreiland
did you get a good answer?

1527989879
dbandstra
yeah that's what the compiler allows, and returning does a memcpy (possibly optimized away in the future)

1527989883
mreiland
my guess is that it does either copy or if the optimizer knows it's safe simply places it where it will ultimately end up in the stack?  I know zig is big on making sure the stack is predictable so you cannot bust it

1527989925
mreiland
ok, so if that's the case then if you do something like so MyStruct.init(MyOtherStruct.init(5,5))

1527989949
mreiland
and MyStruct uses a pointer (since I think that's required by the language), that's a problem waiting to happen?  or does the language do somethign to make that safe?

1527989969
mreiland
to be clear MyStruct contains a MyOtherStruct pointer

1527990041
mreiland
it's the equivalent of passing around a pointer to a local in C or C++, correct?

1527990058
dbandstra
your MyStruct.init function has to take a `&const MyOtherStruct`

1527990066
mreiland
yes

1527990073
dbandstra
and then the compiler will automatically send a reference

1527990083
mreiland
my concern is that the member in MyStruct must also be a pointer

1527990089
dbandstra
(there's an issue i can't find where this feature might removed)

1527990093
mreiland
unless I'm wrong on that, I'm still learning the language

1527990119
mreiland
you mean it uses a reference to avoid the pointer copy?

1527990201
dbandstra
i mean if a function takes a const poitner to something, and you call it with a value, it will be the same as calling it with &value

1527990243
mreiland
let me get a more complete example, I think I'm not communicating well

1527990248
dbandstra
hehe ok

1527990252
dbandstra
maybe a pastebin or something

1527990525
mreiland


1527990552
mreiland
I'm just trying to make sure I understand the language semantics.  I think I'm right on this, but wanted to double check myself

1527990568
dbandstra
ah i see, you should be able to use a value, and initialize the point with `.color = c.*`

1527990578
dbandstra
x.* is the same as *x in C

1527990619
mreiland
oooooh, and that would copy?

1527990625
dbandstra
yeah

1527990633
mreiland
ok, thank you, that's what I was missing

1527990647
dbandstra
and then if you change the init arg to be `*const Color` instead of `*Color`, you wouldn't need to use & when passing it

1527990684
dbandstra
here's a sort of relevant github issue

1527990690
mreiland
that's what you were talking about before with respect to references, gotcha

1527990691
dbandstra
possible future change

1527994459
alpha
Are there any plans to add a default allocator to zig?

1527994746
andrewrk
alpha, you mean a general purpose allocator?

1527994831
andrewrk
mreiland, dbandstra see

1527994856
andrewrk
struct copying is going to change after pointer reform

1527994895
alpha
andrewrk: I mean not having to think about and pass around allocators everywhere

1527995009
alpha
Also why is there no documentation at all

1527995074
andrewrk
alpha,

1527995187
alpha
I know zig is still in alpha stage and I don't have any problem with not having html docs. But even the stdlib source code has no doc comments.

1527995210
alpha
I saw

1527995221
andrewrk
you're suggesting that best practice is to write the docs at the same time as the function definitions

1527995339
andrewrk
there is an argument to be made there. however, given that the language itself isn't even stable yet, the stdlib is changing rapidly. once the language is more stable then we can start stabilizing the std lib

1527995383
dbandstra
andrewrk, is there a way for me to build zig without having to build llvm (which i tried before, but ran out of disk space, it seems to require 100GB)

1527995399
andrewrk
what os

1527995399
dbandstra
i'm on linux

1527995411
andrewrk
how about the static builds automatically built from master?

1527995453
dbandstra
i've been using that but i'd like to be able to mess around with the compiler (also i found a crash in the compiler that i wouldn't mind debugging myself)

1527995491
andrewrk
ah wonderful

1527995504
dbandstra
it's ok if the answer is no.. i should probably repartition or something and give my linux boot more than 100GB

1527995512
andrewrk
be sure to use -DCMAKE_BUILD_TYPE=Release for clang and llvm

1527995519
andrewrk
that should keep the size down

1527995528
andrewrk
also debug builds are way slow

1527995536
tiehuis
what distro are you running?

1527995545
dbandstra
me? ubuntu 18

1527995553
andrewrk
oh, you should be able to use llvm/clang from apt-get

1527995561
tiehuis
because I compile against the package llvm from ubuntu with no issue on 16.04

1527995573
dbandstra
ok

1527995624
tiehuis
i use

1527995655
dbandstra
i need llvm 6?

1527995657
tiehuis
yes

1527995707
tiehuis
looks okay on 18.04, give it a try with the system version and it should work, else just say if not

1527995732
dbandstra
without adding any repositories i see llvm-5.0-dev but only 6 thing is llvm-6.0-tools

1527995748
dbandstra
oh wait

1527995754
dbandstra
it's not sorted :P

1527996549
alpha
zig master builds do not contain zig fmt?

1527996606
andrewrk
alpha, currently you need to build stage2 to get that

1527996628
andrewrk
but we're probably going to do a temporary solution to get it into master builds until the self hosted compiler is done

1527996646
alpha
Okay, thank you

1527996781
andrewrk
alpha, to answer your question about passing allocators around, there was one proposal that I've been meaning to type up

1527996838
andrewrk
a quick summary would be: ability to bind a parameter name to a value within a scope

1527996951
andrewrk
but it's a tough argument to make, adding complexity to the language when a little bit of boilerplate will get the job done

1528000178
alpha
`zig build` gives me -

1528000266
alpha


1528000310
alpha
The contents of `build.zig` are the default generated by `zig build --init`

1528000715
tiehuis
did you create a source file to build?

1528000851
alpha
yes

1528000946
tiehuis
what is your dir structure? I'll try replicate it and get some more information

1528000959
tiehuis
windows stack trace issue is here by the way:

1528001084
alpha
tiehuis: might be related to this

1528001112
alpha
tiehuis: Also, it gives the same error whether a source file is present or not

1528001131
tiehuis
what is your `zig version` produce?

1528001147
alpha
so to replicate, simple create a new directory and in it, `zig build --init` followed by `zig build`

1528001166
alpha
tiehuis: latest master branch downloaded 2-3 hours ago

1528001180
tiehuis
yeah, i did that and the issue (for the latest master) is failure to open the default 'src/main.zig' file

1528001183
alpha
zig version => 0.2.0.b85b68a7

1528001215
alpha
Hmm... even if i have src/main.zig, i get the same error though

1528001246
tiehuis
can you make your main.zig have the content: `pub fn main() void {}`

1528001275
alpha
tried it. same issue.

1528001351
tiehuis
what does `zig build --verbose --verbose-link` print?

1528001415
alpha
zig build-exe C:\Users\alpha\Desktop\s\src\main.zig --verbose-link --cache-dir C:\Users\alpha\Desktop\s\zig-cache --output C:\Users\alpha\Desktop\s\zig-cache\YOUR_NAME_HERE.exe --name YOUR_NAME_HERE reached unreachable code Unable to dump stack trace: Unable to open debug info: TodoSupportCoffDebugInfo  Build failed. The following command failed: .\zig-cache\build zig . .\zig-cache --verbose --verbose-link

1528001718
tiehuis
not really sure at this point sorry, does a normal `zig build-exe src/main.zig` work fine?

1528001749
alpha
yes, I am able to use build-exe

1528001897
alpha
Another question. I have main.zig which has a @cInclude. The `.h` file is in the same dir. But compiling the main.zig file, I get error that it is unable to find the .h file.

1528001898
alpha
^ C:\Users\alpha\AppData\Local\Temp\sWZd7kMK.h:1:10: note: 'mpc.h' file not found #include <mpc.h>          ^

1528001930
tiehuis
add `-isystem /path/to/dir`

1528001952
tiehuis
cInclude doesn't do local header resolution by default and only searches system headers

1528001963
alpha
Okay. Thank you.

1528001990
alpha
Is there any plan for local header resolution?

1528002011
tiehuis
hasn't been asked as far as I'm aware

1528002036
tiehuis
I think it depends on how common a use-case it will come to be and whether the existing solution has shortcomings otherwise

1528002051
alpha
Okay, I will create a Github issue for both these things.

1528002077
tiehuis
great, thanks

1528002810
GitHub9
[zig] tiehuis opened pull request #1039: Add context to zig_unreachable calls (master...context-for-unreachable)

1528002828
tiehuis
I pushed a pr that should add some context to all unreachable calls which should help here

1528002856
tiehuis
when that builds try downloading that artifact if you want to pinpoint the issue

1528002874
tiehuis
just a somewhat temporary measure until those backtraces are implemented

1528003075
alpha
tiehuis: Thank you!

1528003766
dbandstra
has anyone used vscode on linux to debug zig?

1528003790
tiehuis
i think Hejsil uses vscode with debugging, i think on linux, would need to check

1528003824
dbandstra
do you know if i should be using gdb or lldb?

1528003842
dbandstra
sorry for all the questions, i used to do c/c++ stuff on windows

1528003843
tiehuis
i uses gdb because i have a good script for it, but lldb has worked fine for me as well

1528003847
tiehuis
no problem

1528003855
dbandstra
i'm just fighting with vscode

1528003882
tiehuis
i'm not familiar with debugging in vscode unfortunately so can't provide much assistance

1528003888
dbandstra
neither am i :)

1528003911
dbandstra
thanks to you i got zig built though

1528003922
tiehuis
great, that's good to hear

1528003975
dbandstra
ci/travis_linux_install is a good reference for apt getting stuff

1528004997
dbandstra
ahh i'm cooking with gas now

1528006145
dbandstra
is it ever useful to use the `object.*.field` syntax?

1528006176
tiehuis
only unless object was a double pointer which is not common, i think . only implicitly dereferences at most once?

1528006180
tiehuis
would need to double check that

1528006506
dbandstra
looks like . dereferences all the way

1528006700
dbandstra
whoops i'm wrong, it does only once (my typo when testing it out)

1528007457
GitHub181
[zig] andrewrk pushed 1 new commit to master:

1528007458
GitHub181
zig/master 4c27312 Marc Tiehuis: Add context to zig_unreachable calls (#1039)...

1528007461
GitHub22
[zig] andrewrk closed pull request #1039: Add context to zig_unreachable calls (master...context-for-unreachable)

1528007477
andrewrk
I'm headed to bed. planning on working on zig tomorrow though

1528007581
ofelas
Good night too you, good morning from me

1528007686
ofelas
..to.., obviously still early here

1528012337
mediocre
Are there any tasks a mediocre userland-type non-compiler-wizard programmer can contribute to? Love the way the language looks btw.

1528012761
tiehuis
mediocre: check the userland label;

1528012788
tiehuis
else, just writing code and finding bugs/improvements is always very helpful

1528012862
mediocre
thanks!

1528013411
alpha
tiehuis: your pr did not make any difference in the error message

1528013419
alpha
I do not get any line number or anything

1528013491
tiehuis
ahh right, that particular message is from a panic in zig itself

1528013515
tiehuis
i mean a panic in the zig code

1528013576
tiehuis
will just have to implement stack traces or run it through a debugger to get a stack-trace

1528013790
alpha
I found the issue with gdb

1528013844
tiehuis
could you post the information in that issue

1528014109
alpha
Done

1528014137
tiehuis
you forgot the return code after main here

1528014501
alpha
The issue is with cmder

1528014508
alpha
It is not displaying the main error

1528014548
tiehuis
interesting

1528014568
alpha
With cmder it is going to unreachable code somewhere instead

1528014598
tiehuis
can you print a backtrace between the two environments?

1528014641
alpha
Well, zig build works under gdb under cmder

1528014656
alpha
but not directly with cmder

1528014672
alpha
so i am not sure how to get backtrace

1528014746
tiehuis
can you print a core-dump or similar then run gdb on that?

1528015108
alpha
I will try

1528015150
tiehuis
updated the title of the issue to mention cmder

1528025317
Hejsil
dbandstra, ye I debug Zig code in vscode on linux

1528027582
isaachier
hey i think i might have found a bug in the compiler. just to be sure, are empty structs completely supported in zig?

1528035929
spazzpp2
hi

1528035968
spazzpp2
just listening to "andy"s talk at recurse.com

1528036036
spazzpp2
Do you agree that zig looks really promising (compared to slower rust)?

1528039794
isaachier
i doubt rust is slower by much... just allocates more

1528042815
spazzpp2
I wrote a really simple char replacing parser and the result was slower than c

1528051179
isaachier
spazzpp2 i'd compare rust with c++ speed (using clang compiler)

1528054263
andrewrk
isaachier, yes any problems with empty structs are bugs

1528054283
andrewrk
spazzpp2, I don't remember claiming that rust is slower

1528054361
andrewrk
rust is a really solid project. the places where I think zig competes with rust are: robust error handling, writing inherently unsafe code, and simplicity

1528054437
spazzpp2
andrewrk, no, I claimed rust was slower than C. Watching your talk was just context.

1528054474
andrewrk
ah I see

1528054520
spazzpp2
but I'm no rustian

1528054550
andrewrk
I do think that after

1528056480
Sahnvour
andrewrk: slowly making progress on the .pdb thing, I'm able to locate and read its format, but still need to determine how to get address/line information

1528056559
andrewrk
Sahnvour, ah, excellent

1528056569
andrewrk
that's related to what tiehuis and alpha were dealing with earlier

1528057551
Sahnvour
hope I'm not duplicating work ?

1528060990
adrusi
based on the documentation it looks like there isn't really a good way to define a function in C and call it from zig, short of distributing the C code as a separate library, is that right?

1528061090
adrusi
like if my project directory has the files main.zig, my_proc.c, my_proc.h, and I define my_proc in my_proc.c, there isn't a good way of calling my_proc from main.zig

1528061130
adrusi
@cInclude adds a #include <...> to the C buffer, but there's no way to add a #include "..."

1528061254
adrusi
I'm trying to get an error message from a c function that sets errno, but when I @cInclude("errno.h"), zig doesn't recognize c.errno (which doesn't surprise me since errno is declared in a strange way by glibc)

1528061363
adrusi
so my first try at a workaround was to define char const *errorstring() { return strerror(errno); } in C and call that function from zig, but it looks like that doesn't work

1528061381
adrusi
There should probably be a @cIncludeLocal builtin, or similar

1528061566
adrusi
if @andrewrk thinks that makes sense I can make a PR, seems like a simple addition

1528064687
andrewrk
Sahnvour, I believe you are the only one working on windows stack traces

1528065323
andrewrk
adrusi, the zig build system is only a proof of concept right now, but you can use it to build .c and .zig files and put them together

1528065345
andrewrk


1528065417
adrusi
yeah, I've been looking at this example, but it's different because it shows C calling Zig functions rather than Zig calling C Functions

1528065422
andrewrk
adrusi, for errno, try this: @import("std").c._errno()

1528065447
andrewrk
std.c is not complete but it's intended that for libc you can use it instead of @cImport

1528065526
adrusi
however, I'm now thinking that it would be better to use build options configuring C_INCLUDE_PATH rather than having a separate @cIncludeLocal builtin

1528065615
adrusi
I tried implementing @cIncludeLocal, but it doesn't work because the @cImport makes a file in /tmp, and so #include "..." searches for headers relative to there, which is probably what it should be doing

1528065867
andrewrk
do you have a conflicting .h file name and you need to decide how to resolve the conflict in the @cImport block?

1528065903
adrusi
no, that was not the issue

1528065931
adrusi
the issue was that @cInclude(...) was not resolving header files in the PWD

1528065995
adrusi
because @cImport places the generated header file in /tmp, so the preprocessor thinks /tmp is PWD (I think?)

1528066040
andrewrk
why not put the pwd in the include path explicitly?

1528066071
adrusi
yeah, I think that's the right move now

1528067452
alpha
adrusi: I have proposed cInclude to search local directory here

1528067661
andrewrk
that's a compelling reason

1528067730
andrewrk
if it's a single file header, that would be heavily relying on translate-c

1528067740
andrewrk
for the function bodies and such

1528067769
andrewrk
it would probably be better to handle this use case by porting the single file C code into zig and cleaning it up a bit

1528068885
GitHub85
[zig] isaachier opened pull request #1045: Fixes for zero-sized allocation (master...minor-cpp-improvements)

