1518577238
MajorLag_
I think I accidentally created closures in Zig. It only works at comptime though, because if the variable you're trying to capture isn't declared comptime the compiler crashes.

1518577764
MajorLag_
actually it might be a runtime failure, I can't tell because Windows+llvm.

1518577878
MajorLag_


1518578240
MajorLag_
It is runtime. Because it's still doing what I ask, but there isn't a real closure so the variable has been freed. Makes sense.

1518598585
jfo
andrewrk:

1518609513
jfo
MajorLag_: that's really neat. I'm waiting on anon fn literals but that totally works for the same idea!

1518609535
jfo
I think this is the main issue for closure / anon fn stuff:

1518609555
jfo
(main issue as in place where the discussion is, not main blocker)

1518619556
GitHub126
[zig] andrewrk pushed 1 new commit to master:

1518619556
GitHub126
zig/master 1a53c64 Andrew Kelley: self hosted parser supports builtin fn call with no args

1518633834
GitHub76
[zig] andrewrk pushed 1 new commit to master:

1518633835
GitHub76
zig/master d790670 Andrew Kelley: self hosted parser: support string literals

1518634672
GitHub130
[zig] andrewrk pushed 1 new commit to master:

1518634672
GitHub130
zig/master e8d81c5 Andrew Kelley: fix build broken by previous commit

1518636229
sient
it seems like a lot of the self-hosted compiler is going in std, is one of the goals to allow end-users to write user-land apps which can traverse fully typed ASTs?

1518636547
andrewrk
sient, at least the tokenizer and parser can be part of the std lib. the parts that depend on LLVM won't go in there

1518636581
andrewrk
there are a few things in the analysis phase that depend on LLVM, for example @offsetOf and @sizeOf

1518636609
andrewrk
and you could, for example, create a type like this:  var a: [@sizeOf(u32)]u8 = undefined

1518636623
andrewrk
so that would mean that no, we don't get fully typed ASTs in the std lib

1518636782
sient
ah :(, I was hoping that'd be the case as it would enable writing an indexer, ie, goto definition, find references, etc

1518636806
andrewrk
I'll think about it

1518636845
sient
otherwise the indexer would probably have to live in the compiler, or at least have the compiler emit something that can be easily consumed by an indexer

1518636875
andrewrk
it is planned to have the compiler act as a server and provide information about a build in real time

1518636900
andrewrk
e.g. you'd press save in your editor, the compiler would pick up changes, minimally recompile, and push out deltas of what changed to listeners

1518637031
andrewrk
also, once we have proper package management, we will have ability to get a fully typed AST as a package. it's just that the package will depend on llvm and clang

1518637038
sient
that's a neat approach. atm cquery does delta updating (ie, load the previous index from cache and compare it to the current index and apply the changes to the database)... not as efficient as your approach but it ends up working well enough in practice

1518637060
sient
ah, that would be fine, just so long as I could write a (user-land) app that can traverse fully typed AST

1518641463
GitHub105
[zig] andrewrk pushed 1 new commit to master:

1518641463
GitHub105
zig/master 629f134 Andrew Kelley: std.zig.parser understands inferred return type and error inference

1518643304
sient
Maybe I should post an issue, but why do if/while/for require parens? Seems like quite a few newer languages drop them (less boilerplate)

1518643336
andrewrk
it's required for parsing reasons

1518643374
andrewrk
because `foo { }` is struct instantiation syntax

1518643391
andrewrk
if a > foo { }

1518643462
sient
have you considered being more aggressive about whitespace? ie, foo{ -> object construction, foo { -> new block - but maybe those are too visually similar

1518643717
andrewrk
I think that visually similar things should not be semantically distinct

1518643791
GitHub112
[zig] andrewrk pushed 1 new commit to master:

1518643792
GitHub112
zig/master 9fa35ad Andrew Kelley: fix sometimes not type checking function parameters...

