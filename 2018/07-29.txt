1532824929
GitHub131
[zig] dbandstra opened pull request #1300: A few new functions in InStream/OutStream (master...more-stream-functions)

1532827143
GitHub173
[zig] dbandstra opened pull request #1301: add SliceOutStream, rename SliceStream to SliceInStream (master...slice-out-stream)

1532832783
aesl
what is the correct way to return a string from a function?

1532832808
aesl
I'm trying []u8

1532832815
aesl
but the compiler tells me I'm wrong

1532832953
aesl
this is what I'm trying to do. and this is really my first time writing Zig code

1532833096
kristate
woke up -- I slept longer than I anticipated, but it is the weekend :-)

1532833117
dbandstra
aesl, i believe the problem is that you are trying to modify a literal string

1532833146
dbandstra
aesl, "axexixoxu" has the type `[]const u8`, not `[]u8`

1532833186
aesl
I tried that because I didn't know how to allocate a string lol

1532833229
dbandstra
if you first do `var string = "axexixoxu";` then at least it can be modified

1532833276
dbandstra
you probably will have to use the slice operator to pass it to the function - `replace(string[0..])` - because the `string` var is an array, not a slice, and arrays don't get implicityl converted to slices

1532833355
dbandstra
(unless they are const)

1532833368
aesl
oh alright

1532833389
dbandstra
with that out of the way, to compare strings you have to use a function `std.mem.eql(u8, first, second)` , not ==

1532833400
dbandstra
zig is pretty c-ish when it comes to strings

1532833419
aesl
alright

1532833489
aesl
and what about the error I get compiling

1532833499
aesl
error: expected type '[]u8', found '[9]u8

1532833516
dbandstra
that says it's expecting a slice, you provided an array

1532833525
dbandstra
solution is just as i said to tack `[0..]` to the end of the array you were trying to pass

1532833540
aesl
oh okay that's simple

1532833545
dbandstra
(`array[0..]` is short for `array[0..array.len]`)

1532833614
aesl
cool it compiles

1532833623
aesl
I have experience from Rust and C

1532833634
aesl
so its really really nice to have a middle ground

1532833664
aesl
and thank you dbandstra

1532833699
dbandstra
np

1532833967
aesl
is there a standard library reference?

1532834015
dbandstra
nope

1532834106
dbandstra
it's just a collection of stuff for the time being

1532834201
dbandstra
it would be nice to write some docs but things are still changing frequently

1532834249
aesl
that's alright

1532834422
aesl
and say I wanted to allocate my own string instead of writing to the string that's passed into the function

1532834434
aesl
what could I do to copy that string

1532834459
aesl
kind of like strdup from string.h in C

1532834505
dbandstra
first of all allocation-related stuff is really explicit in zig

1532834523
dbandstra
so if there was strdup function, it would take an allocator as a param

1532834541
dbandstra
i haven't dealt with allocators a lot personally, not sure if such an alloc-and-copy function exists

1532834571
dbandstra
but you need first an allocator, such as std.debug.global_allocator (warning: crappy, but i'm not familiar with the others)

1532834595
aesl
oh okay

1532834619
aesl
well I actually saw mem.copy and tried to use it but I got an error using s.len as the size of the array

1532834620
aesl


1532834649
dbandstra
you have to use comptime-known array sizes

1532834674
dbandstra
if you want to do it that way

1532834681
aesl
alright

1532834687
aesl
oh could I take slice

1532834707
aesl
:3 I can

1532834709
dbandstra
a slice is just an alias, it doesn't copy the values

1532834724
aesl
var out = s[0..];

1532834730
aesl
nah like that

1532834733
dbandstra
slice is basically a struct{ptr,len} which is passed around by value

1532834750
dbandstra
so if you modify values of `out` it will be modifying `s` as well

1532834757
aesl
oh really

1532834759
aesl
heck

1532834772
dbandstra
i think slices are the same in golang

1532834812
dbandstra
anyways, you have to use an allocator. so `var newstring = try allocator.alloc(u8, s.len); std.mem.copy(u8, newstring, s);`

1532834903
aesl
alright I'll go figure out the allocators

1532834908
aesl
thanks

1532835086
dbandstra


1532835131
dbandstra
note the `!` prefix in the return type, not sure if you've come across that yet, but it means the function may return an error

1532835297
aesl
oh okay, and no I have not

1532835393
dbandstra
briefly, errors are just another value that gets passed around and returned, and there's a few different syntaxes in the language to make it convenient

1532835418
aesl
okay

1532835427
aesl
I'll need to look into errors

1532835955
aesl
yup I <3 zig

1532842090
kristate
andrewrk: you online?

1532842122
kristate
hmm, 1:28 am in NYC

1532869345
bodie_
Implementing ReFaL in Zig would be a really fun project.

1532869356
bodie_
I wonder if I can find good enough docs to make a go of it.

1532882965
companion_cube
hi, I'm curious about zig (can't say I need it, but still)

1532883000
companion_cube
there are some interesting design points such as the ability to parse .h files — wouldn't that tie the compiler to a C compiler, long term?

1532883026
companion_cube
is there a goal of, some day, having several compilers, perhaps a gcc frontend?

1532883035
companion_cube
maybe even automatic translation from C?

1532883053
companion_cube
(in a tool, not in the compiler)

1532883133
companion_cube
I quite like the rust-inspired syntax, and the simplicity of the design centered around comptime

1532886189
andrewrk
dbandstra, std.mem.dupe

1532886210
andrewrk
hi companion_cube

1532886218
companion_cube
hi andrewrk

1532886237
andrewrk
yes, ability to parse .h files ties zig to libclang

1532886326
dbandstra
andrewrk, ah nice

1532886334
companion_cube
are you the main author, andrewrk?

1532886355
andrewrk
yes

1532886378
andrewrk
although several others have made substantial contributions

1532886381
companion_cube
heh, nice. I like the design, mostly, there even are sum types ✔

1532886720
andrewrk
we have a proof of concept of automatic translation from C

1532886724
andrewrk
zig translate-c foo.c

1532886730
companion_cube
I was reading about Jai earlier, and it's underwhelming, but the "struct of arrays" transformation is cool, and probably doable comptime in Zig

1532886734
andrewrk
it's missing a lot of stuff

1532886742
companion_cube
that's pretty cool!

1532886753
companion_cube
even though it ties even further to having a full C compiler…

1532886766
andrewrk
it does, but there's a clear subset of the language that is divorced from C

1532886848
andrewrk
if you don't use @cImport, and you don't do --library c, we don't actually need the libclang dependency

1532886866
andrewrk
err, sorry I confused 2 things there. if you don't do --library c, then your binary doesn't depend on libc.

1532886880
andrewrk
if you don't use translate-c (which is the same feature as @cImport) then zig compiler doesn't depend on libclang

1532886904
andrewrk
so, once the world is done using C we can delete that dependency ;)

1532886908
companion_cube
:D

1532886949
companion_cube
it'd still be nice to have several compilers (like D has), with something lightweight like dmd in addition to more optimizing, heavier compilers

1532886980
andrewrk
that's a possibility. personally, I'm focused on language stabilization and getting to 1.0.0

1532887013
andrewrk
which I don't consider a dmd equivalent a prerequisite of

1532887028
companion_cube
oh, of course

1532887050
companion_cube
(I'm just worried that some features that would make it to 1.0 would preclude the existence of such lightweight tools)

1532887058
companion_cube
(by requiring a full C compilation chain)

1532887231
andrewrk
the current plan for the language specification is that it will define a clear subset which is "C-less Zig" and so a zig implementation could be compliant with the note that it is "C-less"

1532887252
companion_cube
makes sense.

1532887278
andrewrk
zig really does not depend on C in any way. it just has features to interact with it

1532887283
companion_cube
thanks for your answers!

1532887300
andrewrk
well, sorry that's not technically true. zig depends on llvm, which is written in C++, which depends on C. So there you have it

1532887312
companion_cube
I suppose it stills makes a lot of sense to reuse some C stuff (e.g jemalloc to get a good allocator)

1532887316
andrewrk
but we also have plans to build our own libc and use it to bootstrap ourselves:

1532887354
companion_cube
zig translate-c musl.c? 0:-)

1532887379
andrewrk
you're joking, but much of the zig std lib has been ported from, or at least heavily inspired by musl

1532887391
andrewrk
I can only sing the praises of that project

1532887425
companion_cube
I mostly looked at the data structures of std/, so far, but having a generic HashMap in a C competitor is exciting

1532887810
Bas_
Hey guys

1532887837
Bas_
I put some of the things I was trying out to git, so if you feel like it you can check it out here

1532887933
Bas_
I actually think so far my two favorite features from Zig are the error handling and the build-in unit test capability

1532887941
dbandstra
nice!

1532888007
Bas_
It means I can actually do test driven development very easily. Even if it's a bit troublesome currently on windows without stack traces ^^

1532888039
dbandstra
yeah the unit testing is awesome

1532888240
Bas_
And compared to C++ I notice that I need less code, so that's also great.

1532888250
dbandstra
hmm speaking of which, is there a better way than this to assert an error return? `assert(if (func()) false else |err| err == error.SpecificError);`

1532888265
Bas_
Yes....

1532888315
andrewrk
std.debug.assertError

1532888338
andrewrk
I think we can just add == and != support for comparing error unions against error codes though

1532888339
dbandstra
:nerdface:

1532888372
andrewrk
so after that it would be assert(func() == error.SpecificError)

1532888398
andrewrk
I don't know if there's an issue open for that. maybe I'll just open one right now

1532888411
dbandstra
that sounds similar to comparing optional to non-optional

1532888432
dbandstra
which i think i said i would make an issue for but never did

1532888523
andrewrk


1532888684
Bas_
How would you check if you correctly deallocated all memory? Is there some debug allocator that does that?

1532888738
andrewrk
Bas_, not yet! but that's certainly a good idea to have in the standard library

1532888752
andrewrk
here's a 3-step strategy that works today:

1532888760
andrewrk
1. use std.heap.c_allocator and --library c

1532888768
andrewrk
2. use the --no-rosegment workaround

1532888780
andrewrk
3. run your tests or application with valgrind --leak-check=full

1532889662
hooo
gg, I cant even figure out how to get the length of a string. var xy: []const u8 = "HI"; warn("{}\n", cstr.len("hi")); ===> error: expected type '[*]const u8', found '[2]u8'

1532889778
Bas_
maybe try without the const? Or just omit the type :P

1532889805
Bas_
Also I'm not sure if "hi" is a c string

1532889825
dbandstra
what is cstr?

1532889843
andrewrk
dbandstra, std.cstr is a namespace

1532889860
dbandstra
ah i see

1532889862
andrewrk
hooo, arrays and slices have a .len property

1532889877
andrewrk
"hi".len; xy.len

1532889887
andrewrk
cstr is for when you have null terminated strings

1532889901
hooo
Okay I tried to google it for a long time and searched through the std

1532889922
andrewrk
once this issue is implemented, this will get pretty seamless:

1532889998
andrewrk
if you need a c  string literal right now, you can use c"this syntax"

1532890301
GitHub144
[zig] andrewrk closed pull request #1300: A few new functions in InStream/OutStream (master...more-stream-functions)

1532890303
GitHub197
[zig] andrewrk pushed 3 new commits to master:

1532890303
GitHub197
zig/master f884381 Andrew Kelley: Merge pull request #1300 from dbandstra/more-stream-functions...

1532890303
GitHub197
zig/master f36faa3 dbandstra: add skipBytes function to InStream...

1532890303
GitHub197
zig/master 3ce0ea8 dbandstra: add int writing functions to OutStream...

1532890345
GitHub167
[zig] andrewrk pushed 1 new commit to master:

1532890346
GitHub167
zig/master 608ff52 dbandstra: add SliceOutStream, rename SliceStream to SliceInStream (#1301)

1532890348
GitHub117
[zig] andrewrk closed pull request #1301: add SliceOutStream, rename SliceStream to SliceInStream (master...slice-out-stream)

1532890367
Bas_
I have a question. When implementing functions that work on self, I usually do:

1532890396
Bas_
fn bla(self: * const Self)

1532890419
Bas_
Would it also work the same with just:

1532890425
Bas_
fn bla(self: Self)

1532890425
Bas_
?

1532890760
andrewrk
yes

1532890773
andrewrk
you should use *const Self only if you need to guarantee that it's not a copy

1532890784
Bas_
Ok, usually I don't care.

1532890879
andrewrk
right. the example is if you're using @fieldParentPtr, then you would care

1532890915
Bas_
I see

1532891407
andi3
one more reason to have less use cases for @fieldParentPointer

1532891424
andi3
...and hello everyone :)

1532891737
andrewrk
yes andi3 I know you hate @fieldParentPtr :)

1532891782
andi3
yes my brain is still not ready for it, that's certain :D

1532891796
Bas_
It's weird, I agree.

1532891963
andi3
the function itself is fine, its just its (wide) usage :)

1532891991
andi3
there is some issue about return types and how it should be discouraged to return var because it hinders readability which I totally agree

1532892032
andi3
just how feasible would it be to have smart fix its that would replace those vars in my code so I could actually type the way I want but get the good documentation/ high quality code corrected by the compiler ?

1532892260
andrewrk
quite possible, if the rest of your parameters were not generic

1532892757
andi3
yes sure there are some cases where its not possible

1532899344
MajorLag1
Early someone mentioned general purpose allocation. It comes up a lot, but I'm personally not finding I'm missing it. I think this is an advantage of zig's not having a default allocator; you just don't really need a single allocator to handle dozens of different use cases because you can choose a more appropriate one for every case. I use DirectAllocator when experimenting, but when I nail down how something works I'm always using a more

1532899344
MajorLag1
uned allocation strategy. Between arenas, fixed-buffers, and my rpmalloc-inspired pooling allocator I don't really feel any need for something more general purpose. Just my 2c.

1532899573
dbandstra
i'm personally using a custom thing which is a fixed buffer, with two allocators working as stacks on each end

1532899593
MajorLag1
kinda like the Quake Hunk allocator, IIRC?

1532899593
dbandstra
'free' does nothing, but you can do a 'mark' and 'clear to mark'

1532899596
dbandstra
exactly haha

1532899623
MajorLag1
If it was good enough for Carmack, it's probably pretty good.

1532899640
dbandstra
yeah you can basically use one side for persistent allocations, and the other side for temporary stuff

1532899717
dbandstra
well suited for a game where you don't need dynamic allocations (fixed max number of entities)

1532899817
andrewrk
MajorLag1, that's good to know

1532899842
andrewrk
the first real use case I've had for one is the allocator for coroutines, but I think that can be a pooling one

1532899882
MajorLag1
Or if having an upper limit on allocations is acceptable. For instance, if you have a particle system at reach the limit of allocations, it's probably not a big deal to just not create any more particles.

1532899933
dbandstra
yeah although when you run out of space for one thing you run out of space for everything

1532899971
MajorLag1
only if you haven't separated the memory spaces by use.

1532899991
dbandstra
yeah you would just allocate a particle system with room for N particles, inside the hunk

1532900015
MajorLag1
right, and if allocating a new particle OOMs, just shrug and keep going.

1532900095
MajorLag1
andrewrk, I haven't had to use anything with coroutines yet so I don't have any experience with them in zig. Isn't the allocator for a new stack or something though?

1532900222
andrewrk
I need to do some experiments but here's my working understanding

1532900270
andrewrk
an async function call can be guaranteed to not allocate memory under these conditions: 1. the async function is known at compile time. 2. the promise is awaited in the same stack frame/ coro frame as the async function call

1532900290
andrewrk
further, most asyc function calls fit this category, although not all of them

1532900320
andrewrk
the memory that is allocated is a single stack frame - the "coroutine frame" for the async function

1532900385
andrewrk
so if you, for example, did this:  while (true) { await async foo(); await async bar(); }

1532900412
andrewrk
that looks like: alloc N bytes; free those N bytes; alloc M bytes; free those M bytes

1532900428
andrewrk
there's probably a really efficient allocation strategy for this

1532900445
andrewrk
sorry, in the above example there would be no allocations

1532900459
andrewrk
but assuming that there was, it would still look like that pattern

1532900531
andrewrk
for example if you had a hash table hashed on allocation size, it should be pretty efficient

1532900555
andrewrk
because these N and M values are static and there are a relatively small number of async functions possible

1532900576
andrewrk
the number of async functions is fixed at compile time; the allocation size is not determined at runtime

1532901027
MajorLag1
Yeah, pooling allocator seems appropriate since you have fixed sizes. In mine I stole an idea from rpmalloc and align my spans of blocks on a po2 boundary, so I can find the span a block belongs to with a single bitwise and.

