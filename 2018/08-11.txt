1533947188
tiehuis
scientes: not that i know of, i actually bought some cheap avr chips a few months ago to test but just have never got around to it

1533947198
tiehuis
also in regards to arguments, do you mean command-line arguments?

1533947250
tiehuis
in that case you can use argsAlloc, argsFree:

1533947257
scientes
tiehuis, yeah i gounf os.ArgIteratorPosix

1533947266
scientes
but i just ended up using os.ArgIteratorPosix.raw

1533947278
tiehuis
that works too if you only need posix support

1533951888
kristate
andrewrk: it merged??

1533952193
kristate
andrewrk: when I saw in 598e809 that you changed from initMultiThreaded to initSingleThreaded, I figured that you had found #1363 -- bummer

1533956419
scientes
chaCha20(input[0..], key, nonce, &result);

1533956428
scientes
home/shawn/git/zig/std/crypto/chacha20.zig:138:19: error: expected type '[]u8', found '[]const u8'

1533956432
scientes
why is this a problem?

1533958173
scientes
how do i get my function to write to a slice buffer provided by the caller?

1533958183
scientes
pub fn chaCha20(in: []const u8, key: [8]u32, nonce: [8]u8, out: *[]u8) void {

1533958202
scientes
home/shawn/git/zig/std/crypto/chacha20.zig:102:16: error: index of single-item pointer

1533958209
scientes
otherwise I got my chaCha20 working

1533958477
scientes
bingo

1533969899
MajorLag
..wait, what? Since when can return type be var? This changes everything.

1533970468
MajorLag
Oh, no wait. It still doesn't. I'm just too tired to compile the right file.

1533984555
Barabas
Howdy

1533984649
Barabas
I made a simplex noise implementation, and I get the values I expect (compared to the C++ implementation) in debug mode, but when I compile it with release-fast I don't. Any idea why this might be?

1533993222
Barabas
I hacked the compiler source code to always turn off fast math and now it's fine.

1533993365
Barabas
... now I reverted it and it's still fine. wtf.

1533993444
Barabas
Oh wait... not building with release-fast ><

1533993885
Barabas
Ok, so it's really 'optimized' floating point mode which screws up my numbers. Most of the time it's fine, sometimes it's 2% off, depending on whether I do the calculations with 1 and 2 or 4 and more elements at the same time.

1533998685
hooo
weird ERROR:

1533998844
MajorLag
what's weird about it?

1533998863
MajorLag
'H' == 72

1533998885
hooo
it doesnt tell me whats wrong

1533998898
MajorLag
you reached unreachable code

1533998913
MajorLag
which is explicitly what you told it to do if you didn't match in the switch

1533998923
hooo
yeah but so what, this is an error?

1533998930
MajorLag
it's an assert

1533998959
MajorLag
you've told the compiler "this should never happen", but because you're compiling in debug, it catches the fact that it did happen, and panics with a line number of where it happened.

1533998984
hooo
well how do I do nothing in the else case?

1533998999
MajorLag
else => {}

1534014116
Dirkson
andrewrk: Did you ever consider that "cast(FromType, ToType, Castable)" suggestion of mine? I'm curious what you think of it, since it appears to sidestep the problems of typecasting via "SomeType(Castable)", while simplifying syntax.

1534015112
scientes
he's on vacation for a week

1534015146
scientes
Dirkson, <andrewrk> also, I'm going on vacation tonight. spending 1 week with my family. I might have time to merge PRs and respond to issues, but not much else.

1534025712
Dirkson
Ok, so zig errors when I attempt to not use an expression value. I assume this is to force people to deal with return values, for things like errors. But if I stuff the result into a value, then never use the value, the error vanishes. It seems like this could be  fairly easily detected using static analysis. Is this "TODO" behavior, or am I misunderstanding something?

1534025801
Dirkson
It appears that local values are implicitly typed. Are there other things that are implicitly typed? (function return types, argument types, etc.)

1534026108
MajorLag
Dirkson, zig forces you to acknoledge an expression value, not necessarly do anything with it. We use `_` to explicitly ignore the value. `_ = func();`. Type is inferred under most circumstances, not not function returns (yet). For arguments we have `var`, but that's used for comptime duck-typing and generics.

1534026468
Dirkson
Oh. Is type inference planned for function returns?

1534026651
Dirkson
MajorLag: It seems to me that creating a value without using it should also be an error. (Or at least a warning, as it is in C)

1534027216
MajorLag
Zig doesn't have warnings. Either something is an error or it isn't. It's part of the "being explicit about intent" philosophy.

1534027250
Dirkson
Sure. Not really my point.

