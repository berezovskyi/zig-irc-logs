1524614521
GitHub97
[zig] alexnask opened pull request #951: Metaprogramming - @typeInfo/@reify [WIP] (master...reflect_reify)

1524617680
GitHub50
[zig] andrewrk pushed 1 new commit to master:

1524617680
GitHub50
zig/master 13076d5 Andrew Kelley: std.mem: add more slice manipulation functions...

1524617683
GitHub39
[zig] andrewrk closed pull request #944: Just a few std.mem changes (master...MemChanges)

1524618458
MajorLag
Is it possible to make dwarf an option on windows builds just so we can use stack traces?

1524619062
andrewrk
I think that's more complicated than implementing stack traces

1524619076
andrewrk
I was thinking though, I think Go solves this problem. we could probably read their source code for inspiration

1524619462
GitHub62
[zig] andrewrk closed pull request #949: Add initial complex-number support (master...complex-math)

1524619465
GitHub115
[zig] andrewrk pushed 1 new commit to master:

1524619466
GitHub115
zig/master 27cbb44 Andrew Kelley: Merge pull request #949 from zig-lang/complex-math...

1524619580
andrewrk
alexnask, you're next in line! looking at your PR now

1524624092
andrewrk
alexnask, I'm impressed with how quickly you were able to hack on ir.cpp without any docs

1524626126
andrewrk
alexnask, done. hope that helps

1524632639
GitHub7
[zig] BraedonWooding opened pull request #954: Utf8 Encoding from Codepoint to Bytes (master...patch-2)

1524641844
alexnask_
@andrewrk Tbh looking at how @typeId is implemented got me up an going pretty quick

1524641896
alexnask_
But it's only one aspect of the compiler, I'm sure if I tried to do something a bit more involved like return type inference I would get stuck for a bit :P

1524641940
alexnask_
Docs are for losers anyways (/s)

1524643623
alexnask_
@andrewrk How do you feel about a small buffer optimization being added to ZigList?

1524643658
alexnask_
I think it would make sense since all strings (buf's) are based on it

1524643860
alexnask
This is my favorite way of doing it:

1524654203
achambe
alexnask: neat

1524655866
alexnask
@achambe I think so too :) I'll probably go ahead and implement it for ZigList and open a PR after I'm done with @typeInfo

1524655928
achambe
The trick with the counter  becoming the null terminator is pretty darn clever.

1524655954
alexnask
Yes I was mindblown when I saw it the first time :P

1524656018
alexnask
Andrei Alexandrescu is a wizard tbh

1524665369
alexnask
@andrewrk I implemented the new layout, at least up to some point

1524665422
alexnask
Because the field access of a struct member of the union with the same name as a tag gives back the type of the tag

1524665440
alexnask
aka @compileLog(@typeOf(TypeInfo.Int)); -> &const TypeId

1524665576
alexnask
So for now I'll just keep them as <Name>Info but inside the enum

1524666067
alexnask
It's explicitely coded so that it does that

1524666960
Dodo
look, you can flatten nested Iterators now!

1524666972
Dodo
only works for Iterator(Iterator(T)), but hey xD

1524667089
Dodo
guess you could do some .map() stuff if you need to flatten more

1524669166
alexnask
@Dodo Nice! :D

1524670063
Dodo
mhhh what else...

1524670072
Dodo
.split() on a predicate maybe

1524670441
Dodo
but that could only work for types that can be converted into a slice-like object

1524670460
Dodo
list, string, string-slice or slice

1524670663
alexnask
Well you could have Iterator(T) -> split(pred) -> Iterator([]T) but you would have to define wether the item that triggers the predicate should be included in the left slice, the right slice or dropped

1524670668
alexnask
Which could be an enum option

1524671311
Dodo
uhm, wel, doesnt "hello this is splitted on spaces".split(" ") give you "hello", "this", "is", "splitted", "on", "spaces" ?

1524671319
Dodo
so not inclusive of the predicate

1524671359
Dodo
maybe a little help of memchar or something would speed things up a bit for strings

