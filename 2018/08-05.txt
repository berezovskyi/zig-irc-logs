1533429369
unique_id
i should probably just dereference when calling the function or possibly make the function take ptr to const if its a local one. These kinds of corner cases are unavoidable.

1533429416
wilsonk
does zig have a builtin isalpha function?

1533430912
kristate
woke up 10am JST

1533438713
scientes
does zig have attribute(cleanup)?

1533439131
kristate
scientes: hello, can you rephrase your question?

1533439236
scientes
he cleanup attribute runs a function when the variable goes out of scope.

1533439256
scientes


1533439303
kristate
scientes: please checkout the defer keyword:

1533439331
kristate
scientes: also look into the errdefer keyword:

1533439859
kristate
scientes: does that help you?

1533440444
scientes
yes

1533440451
scientes
also @firldParentPtr is awesome

1533440471
scientes
you don't see the magic of linux's container_of() get used much outside the kernel

1533440766
scientes
and is impossible in go and IIRC rust

1533441487
kristate
scientes: exactly.

1533441501
kristate
scientes: welcome to the community :-)

1533445897
scientes
the translate-c is out of date and produces struct.?.member code

1533445905
scientes
instead of orelse

1533445980
scientes
wait that seems wrong, is ? a safe dereference operator?

1533446097
scientes
so nvm

1533446298
MajorLag
unique_id: `const nothing = ([]void{})[0..];` `void` can be replaced by any type you might need.

1533446363
MajorLag
wait... nevermind that, I was reading a really old chat log somehow

1533446378
MajorLag
...or not...

1533446389
MajorLag
whatever, I'm too tired to make sense I guess.

1533447710
scientes


1533447727
scientes
is there a special case for "self" in struct methods?

1533447757
scientes
cause dot has two arguments, and then is used with one argument (and two).....???

1533449416
andrewrk
scientes, `a.b(arg1, arg2)` is syntax sugar for `@typeOf(a).b(a, arg1, arg2)`

1533462815
unique_id
MajorLag: thanks!

1533463625
unique_id
An inheritance feature could allow us to go from parent.base.field to parent.field. I have an additional use case for why this might be useful and that's to wrap types like ArrayList to handle OOM error in the wrapper and exit the program. This is wildly inappropriate for many applications, but for others not exiting just brings performance issues and noise from handling errors that you have no reason to handle. If the OS didn't

1533463626
unique_id
clean up for us things would be different of course, then propogating up would be needed.

1533474832
kristate
andrewrk: let me known when you're up, have some questions

1533486573
scientes
tree.insert(&(ns[0].node));

1533486573
scientes
tree.insert(ns[1].node);

1533486573
scientes
^

1533486591
scientes
hello.zig:39:16: error: expression value is ignored

1533486591
scientes
tree.insert(&(ns[0].node));

1533486602
scientes
hello.zig:40:22: error: expected type '*Node', found 'Node'

1533486602
scientes
tree.insert(ns[1].node);

1533486702
scientes
pub fn insert(tree: *Tree, node: *Node) ?*Node {

1533486836
scientes
what does "expression value is ignored" mean?

1533486876
scientes
OH!

1533487067
unique_id
it means insert is returning something which you are ignoring. If you wish to ignore it explicitly, you can do "_ = tree.insert(...)"

1533487078
scientes
thats why i said "OH!

1533487436
scientes
how best to do this so zig accepts it?:

1533487437
scientes
if (parent != null) {

1533487438
scientes
parent.set_child(node, is_left);

1533487543
unique_id
if (maybe_parent) |parent| {parent.set_child(...); }

1533487554
unique_id
if (parent) |new_name|

1533487732
unique_id
or you can do:

1533487738
unique_id
if (parent != null) {

1533487747
unique_id
parent.?.set_child(node, is_left);

1533487767
unique_id
but that's strange and stupid I guess you could say, in debug mode that dereference would be checked

1533487789
unique_id
dereference/unwrap/whatever it's called

1533487803
scientes
can i do a compound if, like (maybe_parent && other > condition) |parent| { ?

1533487831
unique_id
I don't know, I guess not

1533487888
scientes
then i will if (maybe_parent != null) { var parent: ???

1533487986
scientes
how do i do that cast?

1533487999
unique_id
Maybe this works for you: if (maybe_parent != null and other > condition) { var parent = maybe_parent.?; }

1533488030
unique_id
I guess this would work too: if (maybe_parent and other > condition) { var parent = maybe_parent.?; }

1533488040
unique_id
btw there's unusually few people around here right now

1533488079
unique_id
please note how "and" is used instead of "&&"

1533488096
scientes
oh, i'm a C programmer :)

1533489157
scientes
maybe types do not cast to bool

1533489159
scientes
maybe they should

1533489235
scientes
pub fn insert(tree: *Tree, node: *Node) ?*Node {

1533489242
scientes
node = grandpa;

1533489254
scientes
rror: cannot assign to constant

1533489302
scientes
how do i make these variables?

1533489318
scientes
it is because sometimes zig passes by value?

1533489419
unique_id
no, as far as I know you can not alter parameters. So you'd have to make a copy of the node pointer first

1533489477
unique_id
it makes a lot of sense to me to have that restriction by default, the question then is whether it's worth it to add a feature to mark the parameter as mutable

1533489594
andrewrk
unique_id, marking a parameter as mutable doesn't make sense because the way that would be implemented would be equivalent to `var mutable_param = param;` and then using mutable_param

1533489608
andrewrk
so you may as well just do that if you need a mutable parameter

1533489653
andrewrk
kristate, you still up?

1533490217
wink_
andrewrk: I like a thread to wait on a queue of messages until one arrives, but I don't see a mutex & condition variable or the like to sleep/wakeup a thread,did I miss it or do I need to make my own?

1533490741
andrewrk
wink_, mutexs and condition variables are not yet provided by the std lib

1533490855
wink_
k, I'll do my own for now and if you'd like create a PR.

1533490903
andrewrk
sure, just note that I'll leave it open until I can complete the macos and windows implementations too

1533490999
wink_
yep, np. I may make it universal, but for now just on linux.

1533491016
wink_
one step at a time :)

1533491056
scientes
while (node.get_parent()) |parentconst| {

1533491063
scientes
why does parentconst have to be immutable?

1533491069
scientes
i'm trying to loop over it

1533491073
unique_id
|*parent*

1533491076
unique_id
|*parent|

1533491107
unique_id
that's one solution

1533491205
unique_id
i'm sorry that's for for loops, no clue what that's doing in this case

1533491347
andrewrk
it also works for if and while

1533491359
scientes
can you give me an example

1533491400
andrewrk
var opt_x: ?i32 = 1234; if (opt_x) |*x| x.* += 1;

1533493415
wink_
I'm looking at std/atomic/queue.zig and there are private global functions, startPuts and startGets, can I assume when building an executable that these functions are optimized away?

1533493546
andrewrk
wink_, the optimizer doesn't even see them, because they're not even analyzed because they're only referenced in the test code

1533493570
andrewrk
zig has lazy top level declarations. if you don't reference something, it doesn't get compiled

1533493611
wink_
got it,  so global variables to test shared state, will they be optimized away too?

1533497811
scientes
why doesn't assignement return the variable?

1533497841
scientes
to prevent crazy c constructs??

1533497842
scientes
:)

1533505693
Dirkson
Weird question: Are coroutines concurrent yet? The description in the documentation only covers behavior that would be the same with concurrent and non-concurrent coroutines.

1533507422
wilsonk
Test

1533508401
unique_id
andrewrk: My stack trace is telling me that the originator of a "index out of bounds" issue is "return self.items[0..self.len]" from a .toSlice() call. I know I've written buggy code and I can get around it / fix it, but I'm not sure how creating a slice could result in an index out of bounds crash? Reading from the slice sure, but creating it?

1533508760
unique_id
Ok the pointer which the slice is being created from is null, I can understand crashing on that. And indeed it is a bug, I don't know how that happened!

1533508806
unique_id
Though in other cases I've been creating slices that point to nothing.

1533509089
unique_id
or maybe the pointer isn't null. Time to debug properly.

1533511448
unique_id
ok my root issue was |child| should have been |*child|, I managed to return a pointer to something on the stack. My bad.

1533511868
kristate
woke up 8:30am JST

1533511889
scientes
kristate,

1533511922
kristate
scientes: cool -- do you have test cases?

1533511938
scientes
only smoke testing

1533511950
scientes
i'll make something up with rand()

1533511998
kristate
scientes: docs don't have much on testing I see

1533512032
kristate
search for `test "` on the docs page

1533512732
scientes
can I use shared state between tests, or should i just make it one test?

1533513016
kristate
scientes: that is a good question -- state should be sharable between tests

1533513037
kristate
I think the rule of thumb is that if shared state could botch the test, don't use it

1533513425
scientes
how do i do first class functions?

1533513498
kristate
scientes: for callbacks, etc?

1533513539
kristate


