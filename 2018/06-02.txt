1527899065
adrusi
What's the recommended way to do networking in zig? Should I just use libc?

1527899940
MajorLag2
Oh man, I can't believe I didn't try this sooner: loading large structs with data from a file using a generic function and @typeInfo. You might think "couldn't you just cast a slice of bytes directly?", but no, not in this case because the file is BE. So much tedious boilerplate just dissappeared.

1527900382
MajorLag2
@adrusi I think the basic socket handling syscalls might be in the posix portions of the stdlib, at least for linux, but yeah you should probably call C right now.

1527900413
adrusi
alright, thanks

1527900526
MajorLag2
Andrewrk has been working on getting a basic HTTP server running using the async functionality, but I'm not sure where he's at.

1527901642
MajorLag2
On the subject of @typeInfo though, this does raise a question: does @typeInfo report fields in the order they are writen, or in the order they are in memory? IIRC Zig doesn't actually do any struct re-ordering right now, but what should the behavior be?

1527902142
andrewrk
adrusi, here's a small example of networking without libc:

1527902149
andrewrk
it's very W.I.P. at the moment, for now I would recommend libc

1527902197
andrewrk
MajorLag2, the order they're declared in, I think

1527902249
MajorLag2
oh hey, there's a std.net, I never noticed somehow...

1527902296
adrusi
I looked at the source of std.net and it looked like just IP address types

1527902345
adrusi
I imagine eventually there will be more than that

1527902430
MajorLag2
andrewrk, that's what makes sense to me, though that could just be because it happens to be what I need for this to work like it does.

1527902528
MajorLag2
though the fact that it saves me several hundred lines of tedious code seems like a good argument in its favor.

1527904377
GitHub160
[zig] andrewrk pushed 1 new commit to master:

1527904378
GitHub160
zig/master 7b386ea Andrew Kelley: fix build file template...

1527912083
adrusi
do compiler segfaults happen often?

1527912112
MajorLag2
kinda, yeah. Especially if you're trying to do crazy stuff in comptime.

1527912140
MajorLag2
I pretty much only run into them in comptime.

1527912178
adrusi
well I don't have any explicit comptime code, but I also have no idea what I'm doing

1527912238
MajorLag2
any compiler segfault is a bug, so it should be reported if you can tell what's causing it

1527912693
adrusi
OK I've isolated the bug, I'll make an issue

1527916781
andrewrk
adrusi, thanks for the bug report. I think you can do c_int(c.SOCK_DGRAM)

1527926736
GitHub150
[zig] andrewrk pushed 1 new commit to master:

1527926737
GitHub150
zig/master f06bce5 Andrew Kelley: introduce [*] for unknown length pointers...

1527929457
GitHub80
[zig] tiehuis pushed 1 new commit to master:

1527929458
GitHub80
zig/master e514454 Marc Tiehuis: Make zig fmt exit with error on any parse errors...

1527956715
king_button
Hi. Can Zig do incremental builds, or are there plans for them like stated in jan 2017 on github? I'd like to build a game that has subsecond recompilation of small changes. I believe this is possible in C if you keep your header dependencies small and controlled.

1527959023
king_button
..but I don't want to have a secondary job as a header hacker, so I guess I'll try this language. I know a compilation from barely nothing does take a full second, but that's fine.

1527960952
andrewrk
king_button, that's planned to be implemented only in the self-hosted compiler, which so far we have a parser, but no codegen

1527960975
andrewrk
we don't have fast compilation yet but it will be a primary focus soon

1527960989
andrewrk
I'm also thinking about hot code swapping

1527963596
n_1-c_k
Could someone help me with my toy program?  I managed to get the compile error "cmd-line-args.zig:17:48: error: expected type '?NextError![]u8', found '?NextError![]u8'",

1527963730
andrewrk
n_1-c_k, I'm looking

1527963777
n_1-c_k
andrewrk: thanks!  It does work if I remove ": ?NextError![]u8", so I guess I should...

1527963790
MajorLag2
hmmm... the NextError types are considered different maybe?

1527963806
andrewrk
yeah I've been meaning to improve the error message hints for these kind of errors

1527963855
n_1-c_k
Is it better to let the type be implicit?  I was hoping to be able to tell from the source what type I'm dealing with, if possible?

1527963962
MajorLag2
It is more common to leave the type implicit, better is a matter of opinion.

1527964016
n_1-c_k
I'd tend to prefer explicit, or is it considered bad style?  Is it even possible?

1527964147
MajorLag2
Ok, so what happened here is you declared the NextError error set as a different type than the NextError that the iterator returns.

1527964191
MajorLag2
try this: const NextError = std.os.ArgIterator.NextError;

1527964209
n_1-c_k
MajorLag2: thanks, I shall...

1527964281
MajorLag2
NextError is just `error {OutOfMemory};` so `const NextError = error {OutOfMemory};` should also work.

1527964316
n_1-c_k
Oh that's better!  I wonder, should I have found out that declaration?  Is it a matter of going through the stdlib source?

1527964318
MajorLag2
but then if we ever change that your code would break

1527964372
MajorLag2
yeah, there are no docs for the stdlib yet (should be coming soon via automated doc generation I think), but the stdlib source is pretty easy to read.

1527964421
n_1-c_k
MajorLag2: thanks, I'll try to hunt it down.

1527964470
andrewrk
n_1-c_k, you can also do @compileLog(@typeOf(foo)) anywhere to find out what type something is

1527964500
n_1-c_k
andrewrk: cool, thanks!

1527964819
andrewrk
n_1-c_k, if you want to have an explicit error set, you can start by declaring an empty one, and then see what compile errors you get

1527964865
n_1-c_k
Ah OK, thanks

1527964883
andrewrk
the ? in front is more advanced than the error hinting system can do at the moment, but here I'll show you

1527964928
andrewrk
const arg0_q: NextError![]u8 = ??arg_it.next(allocator);

1527964940
andrewrk
don't leave it this way, but just for the purpose of compile errors, this will be more helpful

1527964948
andrewrk
"note: 'error.OutOfMemory' not a member of destination error set"

1527965033
andrewrk
this also shows you the file and line where the error set is declared

1527965060
n_1-c_k
So I'd do that after declaring "const NextError = error {};"?  I'll try it...

1527965110
andrewrk
let me see if I can make the hinting system more advanced

1527965198
n_1-c_k
Ah now I see "'error.OutOfMemory' not a member of destination error set"...

1527965238
n_1-c_k
...then I add that to my empty error set and it compiles. Cool!

1527965345
andrewrk
(now revert the ?? changes)

1527965362
n_1-c_k
Oh good point :)

1527965441
n_1-c_k
Oh.. now it says "error: expected type 'type', found '?NextError![]u8'"

1527965532
n_1-c_k
oops I left a '?', sorry

1527965558
n_1-c_k
It compiles, it even runs!

1527967313
GitHub84
[zig] andrewrk pushed 1 new commit to master:

1527967313
GitHub84
zig/master b85b68a Andrew Kelley: better compile error for error sets behind nullable

1527967314
andrewrk
n_1-c_k, after this commit ^ your original example has the OutOfMemory compile error hint

1527967357
n_1-c_k
andrewrk: wow, I am honoured to have inspired a commit! Thanks!

1527967399
andrewrk
thanks for the use case :)

1527982136
nicolaslekoala
Is there a reason why there is no iterator for LinkedList?

1527983967
mreiland
Hey guys, I'm trying to pick up zig in my spare time and I'm coming across a syntax error I don't understand.

1527983979
mreiland
pub fn init(x:f32,y:f32, c: *const Color) Point {

