1536818146
kristate
I have been doing a little bit of swift programing on iOS lately and its nuts

1536833223
kristate
hmm, got this lovely error

1536833224
kristate
Unable to check cache: invalid format

1536833305
kristate


1536848440
andrewrk
kristate, I'm trying to reproduce

1536848487
kristate
andrewrk: I almost have a patch out

1536848506
andrewrk
is it a workaround or did you figure out why the cache is becoming corrupt?

1536848534
kristate
andrewrk: cache is not becoming corrupted

1536848541
kristate
it's a parse err

1536848552
andrewrk
great, looking forward to the patch

1536848555
kristate
good morning, btw

1536848558
andrewrk
morning :)

1536848598
andrewrk
I think caching compiler_rt.o and builtin.o is still a good idea, but it turned out to be less of a performance gain than I hoped

1536848617
andrewrk
I also augmented --enable-timing-info with LLVM details. And it's renamed to -ftime-report to match clang

1536848815
kristate
yeah, saw that and its cool

1536848891
andrewrk
I think `zig build` caching alone is worth it

1536849214
andrewrk
kristate, did you see that llvm's coroutine split pass is a significant time sink? :(

1536849225
andrewrk
this is required even in debug builds for coroutines to work

1536849234
andrewrk
plus it's buggy and we can't turn optimizations on

1536849247
andrewrk
I'm thinking about redoing coroutines on top of structs instead of with LLVM's coroutines

1536849285
kristate
andrewrk: you mean in userland?

1536849310
andrewrk
this would make it easier to solve #1194 too

1536849323
kristate
andrewrk: yeah, stage2 would be easier to implement

1536849339
andrewrk
I still mean in the compiler, but without

1536849343
kristate
problem is that if its userland, we would have to support lots of archs, no?

1536849375
andrewrk
I mean that instead of using the above linked features of llvm, it would only use more basic llvm IR such as structs and normal functions

1536849398
andrewrk
e.g. zig would do the coroutine splitting / switch statement insertion / however we choose to lower it

1536849475
kristate


1536849513
andrewrk
thanks!

1536849537
andrewrk
argh, I meant to do this and forgot, sorry about that

1536849582
andrewrk
in the zig code for split iterator we have the rest() function

1536849628
kristate
andrewrk: yeah, it's hacky, but I didn't see rest

1536849757
kristate
andrewrk: if you want to talk about coroutines, maybe we could jump on a webRTC call for 15 minutes or so

1536849786
andrewrk
sure I'd be up for that

1536849805
andrewrk
then I need to use my extra sharp morning brain to work on a hard bug

1536849806
kristate


1536851297
kristate


1536851852
kristate
I'm excited again

1536851867
andrewrk
:)

1536855697
andrewrk
finaly CI passing on all platforms again

1536855707
andrewrk
had to disable release builds on windows

1536859285
very-mediocre
Maybe a crazy idea: why don't programming languages have a lean way to do interfaces + default implementations?

1536859364
very-mediocre
interfaces -> sometimes you have to duplicate functions, or provide an external function (messy) to multiple implementers of the interface - no default implementation can be provided

1536859417
very-mediocre
abstract classes -> you can provide a default implementation for a given function, but you can't provide a signature for other functions and force implementers to provide their own implementation there

1536859472
very-mediocre
I find myself wishing I could write an interface that has some members with default implementations, and some not

1536859698
pdmer
very-mediocre: Does C++ not provide this?

1536859723
very-mediocre
afaik you'd have to have an abstract class which implements an interface

1536859760
very-mediocre
it doesn't scale well at all

1536859800
very-mediocre
I am writing something in TypeScript now and I found it was getting too Java-ish

1536859903
very-mediocre
actually what I described for C++ doesn't work, the abstract class is forced to satisfy the interface requirements...

1536859925
very-mediocre
so then each child of the abstract class would have to implement the interface. Talk about spaghetti!

1536860023
very-mediocre
The gears are spinning for attempting something like this with comptime in zig

1536860149
very-mediocre
(no idea whether reify is close to being a thing now, i've been away from zig for a while)

1536860190
andrewrk
very-mediocre, there's a good chance we won't have reify because it's too powerful in the wrong way

1536860213
very-mediocre
oh, I see

1536860297
very-mediocre
are you open for proposals then?

1536860339
very-mediocre
I feel like a mix of interface+abstract class is a good idea, I may just make a case for it on github if you're accepting such things

1536860579
very-mediocre
huh, i skimmed the docs, this might be doable with TypeInfo. Gonna experiment with this soon. :]

1536860652
andrewrk
yes open for proposals. there are quite a lot of them out there

1536860658
andrewrk
for this particular topic

1536860712
very-mediocre
I've read a few. I'm sure this is a controversial topic and you probably have it rough trying to design this without being too influenced

1536860776
andrewrk
the null hypothesis is to have no such feature

1536860823
very-mediocre
honestly, if it can be done in comptime with a builtin of some kind, that feels pretty ideal

1536860829
andrewrk
I've promised that I will create a GUI in zig before making a decision about this topic

1536860879
very-mediocre
Makes sense.

1536860929
very-mediocre
@reify is actually way more than is needed for userland takes on this kind of thing

1536860973
andrewrk
I think you can go a long way with @fieldParentPtr

1536861008
andrewrk
some people really dislike this practice

1536861052
andrewrk
6 more bug fixes to hit quota for today...

1536861052
very-mediocre
my very rudimentary view is it's fine if it's abstracted somehow into a lib

1536861094
very-mediocre
wish i had more time to play with zig, you're doing great work here

1536861110
very-mediocre
i keep coming back because i'm pretty sure this language will be a big deal

1536861194
very-mediocre
very rudimentary idea for userland oop: ironically, it'd be a functional approach

1536861233
very-mediocre
something like, a function that accepts an "interface" and checks whether another struct conforms to it

1536861258
very-mediocre
I really need to make time to play with this, too bogged down with work

1536861376
very-mediocre
I tried something with unions a couple of months ago, basically creating a union of all the "implementing" classes, at comptime, but it was unwieldly and didn't work well.

1536861418
very-mediocre
and there's "unboxing" at the receiving end if such a union is passed as a function param

1536861581
andrewrk
very-mediocre, I believe that MajorLag has a proof of concept of this idea

1536861684
very-mediocre
i'd like to see that, maybe he can show me when he's back :]

1536861703
very-mediocre
this is almost academic for me at this point, i find it super interesting

1536861748
very-mediocre
I've just never felt comfortable with OOP or functional paradigms, I always end up doing something in between that feels like fighting whatever language I'm using

1536861918
very-mediocre
what this has to do with zig is... in all other areas, zig has the best ratio of leanness to power and safety that I've seen

1536861938
andrewrk
that's an interesting way to put it

1536861984
very-mediocre
i'm just jaded and very tired of ObserverFactoryVisitorFactoryProxy class design :)

1536862021
very-mediocre
and C is just not modern, I've had toolchain issues

1536862033
very-mediocre
so there aren't many options.

1536862087
very-mediocre
Golang had the right idea in being minimalistic

1536862114
very-mediocre
but it has issues zig does not have even in its current state of development.

1536862147
very-mediocre
tl;dr: i really think zig has great merits.

1536862190
andrewrk
I'm really surprised at this paragraph about assertions:

1536862203
andrewrk
I might write a blog post about this

1536862208
andrewrk
every language has assertions

1536862216
andrewrk
for example when you write through a pointer you're asserting that it's not null

1536862259
andrewrk
that's not an "error" that's an unanticipated, unrecoverable situation

1536862294
very-mediocre
Yeah, that's pretty shocking now

1536862297
andrewrk
and to prevent the user from annotating their source code, telling the compiler about additional unanticipated, unrecoverable situations  is to fundamentally fail to grasp what programming is

1536862326
very-mediocre
I have to say though, hindsight is 20/20

1536862330
andrewrk
true :)

1536862344
very-mediocre
I think it's easy to forget, back when golang launched, language design wasn't so accessible

1536862351
very-mediocre
at most there were some toy languages on github

1536862371
very-mediocre
education on this subject is exponentially higher now

1536862412
very-mediocre
My code from 2012 is shockingly bad D:

1536862448
very-mediocre
old code / projects are always horrible, the same applies for language decisions imho

1536862513
andrewrk
even as young as zig is, it's a lot different than it used to be

1536862561
very-mediocre
I actually saw your early posts about it, back when it was all sigils

1536862574
very-mediocre
with % and whatnot

1536862594
very-mediocre
been following from a distance for a while now, i'm pretty sure many HN readers are too

1536862764
unique_id
I have to go 10mins but.. What do you guys think about C++ Contracts? I think it's a fascinating move from abusing exceptions towards the extreme other end..heavily fortified code in a systematic fashion. I love it.

1536862839
andrewrk
I haven't learned about them yet

1536862905
very-mediocre
i only skimmed them a while ago, i'm unsure how they differ from regular checks

1536863017
andrewrk
yeah I'll have to read more to find out how this is different than (in zig) calling assert or defer assert

1536863104
very-mediocre
personal preference: I don't like language constructs, with special syntax

1536863128
very-mediocre


1536863154
very-mediocre
looks like a declarative way of writing checks

1536863192
very-mediocre
C++ reminds me of this now:

1536863617
very-mediocre


1536863623
very-mediocre
^ this, on the other hand, I like

1536864041
andrewrk
cgag, I made zig test put the test artifact in zig-cache, like it worked before

1536864047
andrewrk
sorry about that

1536865508
unique_id
very-mediocre: I don't know about concepts, those seem very complex. I'm scared of them. Contracts are a similar idea to how --release-fast, --release-save alters how much checking is done. Unlike asserts, contracts also allow you to state post conditions right at the top. Having special syntax maybe isn't ideal, I agree with that

1536865680
very-mediocre
I guess it's a matter of personal comfort

1536865686
MajorLag
andrewrk, very-mediocre, I have experimented with a "trait" and a "typeclass" library. "traits" are simple checks like "does this type have a field named x?" or "is this type a const pointer?". These can be used today but would be better with the small addition detailed in #1268. "typeclass" is more like you've described in that you can set up a relatively complex descritpion of a type, then apply that description as a simple boolean check

1536865686
MajorLag
or "inspect" the type, which provides more descriptive compile errors. I have gist previews of both:

1536865956
very-mediocre
cool, this will take some time to grok

1536865957
MajorLag
My own conclusion is that "typeclass" is more effort than it is worth, but "trait" is useful for changing behavior based on the passed in type(s). The `var<trait()>` construct I think would be usefull mostly as a form of documentation.

1536865983
very-mediocre
using <> is genius

1536866035
MajorLag
that's andrewrk's doing.

1536866046
unique_id
very-mediocre: Also contracts have 'audit' asserts which are asserts that are almost never checked. You'd use them as compiler checked comments that can be turned into runtime checks when hunting for bugs. Also, these asserts can automatically be converted into good documentation for libraries.

1536866103
very-mediocre
unique_id: I like the functionality, but that syntax doesn't sit well with me

1536866116
very-mediocre
I feel constraints are more my style, since they are comptime checks too

1536866125
very-mediocre
except imperative, not declarative

1536866158
very-mediocre
but really I've gone full Danny Glover "I'm too old for this" wrt. C++ now :)

1536866165
very-mediocre
so maybe I'm not a great reference for this.

1536866252
unique_id
oh I've abandoned C++, I'm done with it, I've had enough

1536866288
unique_id
but I think the ideas from C++ could be used without the special syntax. A defer + function call at the top of a function could act as a post condition contract

1536866311
very-mediocre
see, I'm super picky, that kind of change flips me over to the "like" side again

1536866342
very-mediocre
I don't know if it's just me... Seeing [[ ]] in the middle of an imperative block just scares me away

1536866391
unique_id
yeah. There's no rush, we can see how well contracts work for C++ and then in a few years we'll know if they're a good idea or not

1536866455
very-mediocre
I think the thing that scares me about C++ is I've done full projects in it, without really knowing how close I was to danger

1536866472
very-mediocre
and now I can't unsee it anymore

1536866559
very-mediocre
There are too many things to be aware of. Not knowing them at the time allowed me to make things work, but now if I have to write C++, I'll be googling answers to 10+ different questions for every line.

1536866642
very-mediocre
if you've played the game Bloodborne, you will understand this metaphor: I have too much insight now to be able to code in C++ comfortably

1536866650
very-mediocre
Amygdalas everywhere. :]

1536866682
unique_id
haha unfortunately I have not played Bloodborne

1536866733
very-mediocre
Alternatively, consider how many insects you probably have in your house that you would prefer not to think about.

1536866738
unique_id
oh please

1536866744
unique_id
yeah lets not go there :)

1536866752
very-mediocre
:)

1536869175
very-mediocre
I got what I deserved for making that metaphor

1536869198
very-mediocre
There's a gecko on my curtains... :|

1536869206
very-mediocre
freaked me the hell out lol

1536869293
unique_id
haha

1536871779
unique_id
andrewrk: sqlite has functions (sqlite3_bind_text) that take a pointer to data and a pointer to a destructor to clean up the data. However, you can also pass in -1 instead of a destructor and sqlite will make a copy of that data. When I do I crash the compiler.

1536871819
unique_id
when I do this* I crash the compiler

1536871880
unique_id
To be clear, I first cast -1 (actually I cast @maxValue(usize))

1536871907
unique_id
Since I didn't find a way to cast -1 to an unsigned int

1536871911
unique_id
or function ptr

1536871960
unique_id
const SQLITE_TRANSIENT = @intToPtr(extern fn(*c_void) void, @maxValue(usize));

1536872137
unique_id
andrewrk: Do you know about this or should I submit a bug report? Does one exist?

1536872156
andrewrk
unique_id, let me look at this after the stream, I'm about to start in 5 min

1536872163
unique_id
oh cool

1536872188
andrewrk
that's a bug, should be easy to fix

1536872241
unique_id
I'll give you a small file to run after your stream

1536872427
unique_id


1536872513
unique_id
andrew is live:

1536878725
andrewrk
unique_id, thanks

1536880383
andrewrk
unique_id, fixed

1536881810
unique_id
awesome, thank you!

