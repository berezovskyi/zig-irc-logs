1539239652
meowray
I remember there is a gcc/llvm ABI incompatibility in 7.0.0 with ADT/Optional.h

1539239674
meowray
-DLLVM_ENABLE_RTTI is also a thing

1539247202
unique_id
I love how easy it is to create multiple executables from the same project. So I can have singleplayer, client, and server projects within the same codebase with no file tracking needed.

1539277284
wink_
andrewrk: as expected when we compile the llvm/cfe sources with either the Arch Linux installed gcc or clang it works. I can only assume I was mistaken that it worked with installed clang

1539277325
andrewrk
wink_, unfortunately, we're forever stuck with this situation, since we depend on C++ for interfacing with llvm/clang

1539277689
wink_
Is it that gcc/clang don't use a common ABI or some other reason?

1539277933
andrewrk
I'm not sure what the c++ standard is, whether this is a bug or not, but yes, gcc/clang have different C++ ABIs, and even different versions of the same compiler sometimes have different c++ ABIs

1539277966
andrewrk
bottom line is, if you're using C++ and you want to avoid a whole class of annoying bugs to troubleshoot, always use the same compiler for all your dependencies and your application

1539278014
andrewrk
in zig we avoid this problem by not having a Zig ABI

1539278183
wink_
The lack of Zig ABI is because it compiles "whole" programs, isn't it? If zig supported "modules" with separate compilation to standard ".o" or ".a" then it would need an ABI, correct?

1539278193
andrewrk
correct

1539278210
andrewrk
put another way, zig does support "modules" but you have to use the C ABI

1539278231
andrewrk
that's what `zig build-lib` does

1539278340
wink_
hmmm, can a "module" fn return `error!xxx` ?

1539278444
scientes
no

1539278670
wink_
So not terribly useful for "zig" modules, great to be able to use zig to create C compatible "modules".

1539278765
wink_
Is there a plan to create an intermediate format of maybe the AST or ... for creating "zig modules".

1539278771
andrewrk
no

1539278812
andrewrk
there is no use case for that

1539278898
wink_
How can I create a module that doesn't include the source code?

1539279027
andrewrk
zig has rejected this use case

1539279064
andrewrk
code obfuscation is not in scope

1539279977
wink_
Interesting, wouldn't something in an intermediate format be faster to compile?

1539280061
andrewrk
yes, and the self hosted compiler does use an intermediate format in order to achieve faster compilation times

1539280184
andrewrk
but this is an implementation detail of compilation. the intermediate files are not accessible or available for use by the user

1539280375
wink_
Ok, but if versioned sounds like it would be just the ticket for "zig modules".

1539280398
andrewrk
there's no use case for that

1539280588
wink_
LOL, you've got to be kidding, we just talked about two use cases, faster compiles and distributing code without sources. So "no use case" is being disingenuous.

1539280628
andrewrk
faster compile times is achieved without creating a stable versioned ABI, so that is not a use case for a stable versioned ABI

1539280644
andrewrk
and as I mentioned, code obfuscation is a rejected use case

1539280673
andrewrk
it's not even a self-consistent use case. you can't distribute a generic function, and then expect it to be obfuscated, by definition

1539280705
very-mediocre
It might be more suitable for LGPL licensed modules though, to ship as an opaque package

1539280982
andrewrk
the LGPL allows source integration with proprietary software, you just have to separately provide the source of the LGPL  thing you used

1539281008
bheads
What about plugin architectures?

1539281012
andrewrk
use the C ABI

1539281037
bheads
SO we lose part of the zig safty

1539281046
wink_
The notion of a module that can be distributed provides benefits and whether or not you want to use any particular feature. Its up to the programmer to decide how they want to implement any given algorithm.

1539281186
wink_
I like zig, but you seem to be artifically limiting it.  Anyway, lots of time for it to evolve, thanks for creating it!

1539281264
very-mediocre
andrewrk: re LGPL tried looking it up, it seems ambiguous. This answer, while non-definitive, contradicts the idea that you can use LGPL source without infecting your own source code:

1539281335
andrewrk
requiring whole program source at compile time is anything but a limitation. it gives the compiler the freedom to do unheard of optimizations and safety checks

1539281480
bheads
I agree, that is the best case, but not always feesable

1539281930
very-mediocre
this answer also confirms the need for opaque components for LGPL (

1539282087
very-mediocre
I don't mean to bash you on the head with this andrewrk, several of us are kind of hammering on the same point and it might feel like we're ganging up on you

1539282106
very-mediocre
I just think LGPL use case is a big deal, it was very common back when I worked in C and C++

1539282106
andrewrk
very-mediocre, thanks for clearing that up, that's good to know

1539282137
andrewrk
so LGPL should be chosen carefully as a license for zig packages. it's infectious. you can't use LGPL zig packages unless your app is LGPL

1539282155
andrewrk
I'm fine with this as being how it works

1539282273
andrewrk
I see this shared library as an ugly hack to work around an unnecessary legal complication. I have no intention to compromise any of zig's potential due to popularity of restrictive licenses

1539282331
andrewrk
GPL / LGPL were always meant to be infectious anyway. If you're going to go that route, be brave, go for it all the way and only use GPL software. don't chicken out and do some ugly hack compromise

1539282355
very-mediocre
Well the principle of LGPL is that the library is user replaceable without the main program being open source

1539282398
very-mediocre
the "ugly hack" is distributing libs as object files, then you have to ship your main program as an object file too

1539282455
very-mediocre
I think it's ugly in C++ because of toolchain variations

1539282458
andrewrk
right. who wants to ship object files? users can't run object files

1539282475
very-mediocre
Well I think it'd be superior in zig since there'd be 1 zig

1539282493
very-mediocre
not multiple compilers with different interfacess

1539282521
andrewrk
you can still do all this with the C ABI

1539282599
andrewrk
and I'm saying "no" to the LGPL use case for introducing a stable Zig ABI. it's too much in direct contradiction with many things zig is trying to accomplish

1539282743
very-mediocre
I guess LGPL libs can be shipped as DLLs for windows...

1539282767
very-mediocre
but there won't be any .so equivalent.

1539282779
andrewrk
why no .so equivalent?

1539282791
very-mediocre
Actually you're right.

1539282792
andrewrk
`zig build-lib` creates .so's

1539282809
andrewrk
even for this LGPL use case, zig is strictly an improvement over C

1539282821
very-mediocre
Yeah, for a second I thought .so was static linking

1539282827
very-mediocre
I'm inexperienced in linux dev

1539282853
andrewrk
the rejected proposal is to introduce

1539282982
very-mediocre
Am I wrong then that DLL/.so modules solve all concerns, not just my LGPL concern?

1539283043
andrewrk
the requested feature is to, for example, be able to put `fn parseInt(comptime T: type, buf: []const u8) error!T { ... }` in a .DLL / .so

1539283113
very-mediocre
ok, my mistake for not groking this fully.

1539283167
wink_
Just to be clear, my goal was for zig programmers to be able to share modules and when those modules are linked into an "exe", no zig compiler would be necessary.

1539283263
andrewrk
zig programmers can do that by using `zig build-lib`

1539283357
wink_
But, that doesn't allow the programmer to use features of zig such as error handling.

1539283635
very-mediocre
if this doesn't get added, this can potentially be done by distributing an additional metadata file + a tool to generate safe zig code that wraps the library.

1539284106
very-mediocre
I just reinvented header files, but actually I think that's ultimately appropriate

1539284276
very-mediocre
apparently even C++ ABI is "stable ish" at best

