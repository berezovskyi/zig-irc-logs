1542260778
diltsman
Any idea why adding a function that has "unreachable;" in the body would cause the compiler to generate a .data.relo.ro section?

1542270049
Hejsil
MajorLag, thanks for the suggestion, but I don't think a binary format is worth it for what I'm trying to do.

1542273152
c15ade4
zero copy json for the win

1542287526
MajorLag
Hejsil: *shrug*, serializing to and from text seems like a lot more work to me than a binary representation. Maybe that's because I've already written a serializer/deserializer for working with data formats. Having a program that converts text to the format, and from the format to text solves any human readable and UNIX utility interaction needs. Of course, I'm also one of those people who think PowerShell did the

1542287527
MajorLag
r by removing the "(ASCII) text is the universal interface" part, so I guess if you're trying to be really UNIX-y then you'd want to go with text anyway.

1542288395
Hejsil
Well, if there is a better solution, I'm all in. As i see it, text seems like the best interface for most of the data I wonna send around these processes. I also don't think the binary format will win me much, as I want different games to have the ability to output different fields, if they exists in those games.

1542288435
Hejsil
So, for gen1 games, they're not gonna output sp_defense, as it doesn't exists

1542288562
Hejsil
And the text format will make the format very accessible for people who wonna write a pass in Python or something

1542288834
Hejsil
And in a way, the games themself are already binary formats and few people wonna write tools for these games because of this.

1542289923
scriptnull
Hello everyone! I watched andrewrk's talk today (

1542289982
scriptnull
Hearing about it for the first time. It seems interesting. I am going to give it a try tonight!

1542290017
Hejsil
scriptnull, nice!

1542290045
Hejsil
Anything particular you want work on?

1542290094
scriptnull
yeah! I am very much interested in developer tools. So, I hope to do something on that area.

1542290118
scriptnull
I noticed that zig does not have syntax highlighting for atom editor

1542290141
scriptnull
May be I will look into it!

1542290158
Hejsil
Hmm, interesting. The is a Zig parser in the standard library :)

1542290161
Hejsil
Might be usefull

1542290286
scriptnull
Thanks! I am totally excited after watching the talk and going through the doc on my uber back to home :D

1542290287
scriptnull
hahaha

1542290303
scriptnull
like right now :D

1542290354
Hejsil
scriptnull, be warned. There is no doc for the standard library

1542290452
scriptnull
hmm, ok! I hope the current docs will give me the taste of zig.

1542290466
scriptnull
What do you work on Hejsil?

1542290494
Hejsil
The language doc is pretty good

1542290542
Hejsil
I do some work on the language, some util libs and a Pok√©mon rom randomizer

1542290584
scriptnull
cool!

1542290655
Hejsil
There are also some pages on the wiki you might be interested in, once you get started:

1542290719
Hejsil
The Community, External Projects, Why Zig When There is Already CPP, D, and Rust? and Zig Proposals pages are good to look at

1542290821
scriptnull
yeah, I skimmed over "Why Zig When There is Already CPP, D, and Rust?" a while back and loved it. Thanks for resources!

1542290838
Hejsil
Np

1542299116
andrewrk
I think if I was starting zig from scratch I would use this instead of GitHub:

1542299824
Hejsil
andrewrk, time to migrate!

1542299856
andrewrk
I'd seriously consider it if there was a way to keep the issues and comments

1542299890
andrewrk
btw Hejsil congrats on the merge

1542299941
andrewrk
what do you think about

1542299943
Hejsil
Finally done with all that. Time to work on other projects for a bit!

1542299952
andrewrk
enjoy :)

1542299990
Hejsil
andrewrk, Hmmm, but the stage 1 compiler doesn't understand doc comments

1542299998
andrewrk
you mean the parser?

1542300006
Hejsil
Well, yea

1542300014
Hejsil
They have to be in the tree for everyhting to work

1542300031
Hejsil
But I guess that is just part of what is needed to get this done

1542300050
andrewrk
if we switched to a token index based thing, rather than token pointer, we could just look backwards from nodes for doc comment tokens

1542300052
Hejsil
Idk. I know most of std by now, so I can wait :)

1542300073
Hejsil
But prototyping is important

1542300118
andrewrk
yeah, I just feel bad telling everyone, "sorry no docs, I have to do a ton of work before that will be available"

1542300156
Hejsil
Also, on the topic of parsing. How is "server compiler" gonna work with the current Ast points to Tokens points to Src? Wont we be waisting memory by holding onto the source code?

1542300223
Hejsil
Or maybe this question is a little premature, as Idk what will use most memory in stage 2

1542300239
andrewrk
currently stage2 does reference counting for all values

1542300267
andrewrk
and yes, hangs onto full source / tokens for any code that has not changed

1542300286
andrewrk
I think it will be ok to start this way and then change it later

1542300308
Hejsil
Seems fair

1542300369
Hejsil
How is copy-elision comming along?

1542300373
Hejsil
Still a lot of changes left=

1542300384
Hejsil
?*

1542300498
andrewrk
yes - it seems that every semantic construct is a different puzzle to solve

1542300515
andrewrk
I have a checklist on the PR:

1542300535
andrewrk
at this point I think the concept is proven, and it's just fleshing out all the details

1542300570
Hejsil
I see. Seems like you're 2/3 done

1542300580
andrewrk
I think that's about right. and then I still have to go make all the tests pass

1542300592
andrewrk
some of it is really tricky. consider this example...

1542300691
andrewrk


1542300707
andrewrk
but now if I make those implicit casts happen to non-scalar types, e.g. a struct...

1542300782
andrewrk
crap. I have to fix a regression before I can show the other example

1542300876
andrewrk


1542300885
andrewrk
and now what if I make it const...

1542300986
andrewrk


1542301032
andrewrk
oops, that last one had the wrong IR pass2 pasted.

1542301106
andrewrk
anyway, zig IR is getting more complicated. but zig language is mostly the same, with some extra, helpful guarantees about how memcpy won't happen

1542301157
andrewrk
the only unsolved problem right now is peer type resolution. unless I think of some clever thing, it's going to be a kind of "left-to-right" type resolution

1542301308
Hejsil
Hmm. I read somewhere that this would find var a: u8 = if (something) 1 else 2;

1542301318
Hejsil
find/fix*

1542301333
andrewrk
yes it would, because it essentially does u8(1) and then u8(2)

1542301345
andrewrk
it also would allow: var a = if (something) u8(1) else 2;

1542301362
andrewrk
but not: var a = if (something) 1 else u8(2);

1542301368
Hejsil
Makes sense since the code has to know about the location and its type

1542301370
Hejsil
Ooh

1542301384
Hejsil
Hmm.

1542301436
Hejsil
So a gets the type of u8(1), and then 2 is casted to the location type

1542301447
andrewrk
also: var a = if (something) u16(1) else u8(2); // ok

1542301461
andrewrk
but: var a = if (something) u8(1) else u16(2); // error: expected u8, found u16

1542301468
andrewrk
not ideal.

1542301499
andrewrk
but if you put the cast on the outside, both things get casted to the outside thing

1542301578
Hejsil
And we cant resolve the two expressions in relation to eachother before the result?

1542301582
Hejsil
If that makes sense?

1542301622
andrewrk
that's how it works in master branch. but in copy elision branch, consider the last 2 examples:

1542301635
andrewrk
we have to generate pass1 IR without knowing types or comptime-ness

1542301670
andrewrk
because of copy elision we have to get an inner field reference of the struct

1542301678
andrewrk
before we have seen all the types of the prongs

1542301752
Hejsil
Oooh right

1542301790
andrewrk
it might be possible to improve the behavior, but it will require a clever solution

1542301820
andrewrk
I definitely think this copy elision is worth it though

1542301845
andrewrk
it's much, much better llvm ir

1542301887
Hejsil
Debug is gonna go fast!

1542301983
andrewrk
to be clear, C already does this. the difference is that zig adds optionals and error unions, and adds implicit comptime detection

1542301997
andrewrk
whereas in C you end up with stack allocations even for number literals

1542302020
andrewrk
at least in clang, I observe this

1542302087
Hejsil
maybe var a: u8 = if (som) 1 else 2; is just the way things like this should be written

1542302102
Hejsil
After all, the type of a is none trivial once we have branching

1542302119
Hejsil
So the readability will improve a little of a's type is just specified

1542302149
Hejsil
So maybe the left-to-right is good enough

1542302173
Hejsil
Idk, we'll have to see what people get them self into

1542302266
andrewrk
agreed

1542302309
Hejsil
But if you figure out a good solution, then that's greate too :)

1542305576
oats
andrewrk: hi there, just wanted to say that I've been playing with Zig for about a week now, and it's been a lot of fun

1542305594
andrewrk
hi oats

1542305599
oats
I really like what I see, and so far it seems like it has the potential to be the best C alternative :)

1542305604
oats
so, thanks for starting this!

1542305606
andrewrk
great :)

1542305645
oats
your kernel live-coding video kinda sucked me in, I think that's just so cool you can make an OS with zig without writing any assembly

1542305691
andrewrk
I'm hoping the OS dev community starts getting seriously into zig

1542305718
andrewrk
there's still the problem of immaturity, but I'm working hard on improving that

1542305739
oats
do you think zig's syntax is going to be getting more stable in the near future?

1542305744
oats
what with the new formal grammar

1542305751
andrewrk
yes

1542305778
andrewrk
the syntax around coroutines will be changing, but so will the semantics

1542305794
andrewrk
function calling convention syntax is planned to be changed

1542305811
andrewrk
var args syntax as well

1542305828
andrewrk
but I'm trying to prioritize the breaking changes first

1542305886
andrewrk
zig is certainly in "beta" territory right now. expect to participate in the development process if you use it

1542306048
ltr_
for the next release?

1542306088
ltr_
i mlooking for a project to rewrite it in zig, any ideas?

1542306098
ltr_
i was thinking in quake , but thats a lot of work :D

1542306116
scientes
ltr_, that is

1542306135
andrewrk
calling convention syntax change is scheduled for 0.4.0:

1542306135
ltr_
just finished a project for a side job in c++ now im hooked in lowlevel coding again.

1542306169
andrewrk
var args changes, 0.4.0 as well:

1542306196
ltr_
and just saw a video where someone was implementing something similar to defer in C++ but the syntaxis looks just ugly.

1542306199
andrewrk
ltr_, does this interest you?

1542306230
ltr_
i can start with a regular linker

1542306236
ltr_
for elf

1542306241
andrewrk
yeah

1542306248
ltr_
looks interesting

1542306285
andrewrk
LLD is a good reference code

1542306324
andrewrk
but LLD is:  * not planned to support incremental linking * not designed to be used as a library * not written in zig ;)

1542306332
ltr_
i know the linker of llvm for apple, i fixed a bug long time ago (zig 0.0.1?)

1542306362
andrewrk
yes, and sadly that was the last improvement to the apple linker code that anyone has made :(

1542306372
ltr_
hahah yeah

1542306432
andrewrk
this is a good use case for using zig's async I/O - once the coroutine rewrite is complete. but a blocking implementation should be easy to migrate over

1542306482
wootehfoot
lld doesn't support incremental linking? I thought it at least supported it with -Wl,--thinlto-cache-dir=/path/to/cache s of LLVM 5.0, or are you talking about something else?

1542306500
andrewrk
I don't think thin LTO is the same thing as incremental linking

1542306536
ltr_
ok ill research the linker thing, i have to update my zig knowledge first and setup my zig's env. anyways i think something like quake is doable

1542306537
wootehfoot
no it's not, it's a particular use case when incremental liking works

1542306544
ltr_
maybe with an semiautomated tool

1542306580
andrewrk
ltr_, quake would be an impressive demo

1542306594
andrewrk
you could work on translate-c and try to get it good enough to port quake

1542306613
ltr_
ill start with the linker

1542306621
ltr_
using go/llvm linkers for reference

1542306707
andrewrk
wootehfoot, hmm, it looks like thinlto with a cache directory does some kind of incremental linking that I was not aware of

1542306712
andrewrk
thanks - I'll investigate this

1542306882
wootehfoot
andrewrk, thank you too, your recurse presentation was really inspiring by the way :)

1542307017
andrewrk
wootehfoot, I think the main drawback of this is that it requires all objects and libraries to have been compiled with thin LTO

1542307058
andrewrk
whereas a generic linker that supports incremental linking could support, for example, .a files built with gcc

1542307628
oats
andrewrk: will there be a coding live stream today? what time are they at?

1542307657
wootehfoot
andrewrk, gcc's LTO gimple trees aren't any more amazing either. They're versioned so re-using a lib's gimple tree from an older GCC is a nono. Then there's the -fno-fat-lto-objects which has become default, and thus requires gcc-ld, gcc-ar.. etc. for the toolchain to be fully aware of the linking phase. In GCC >=6 'ld -r' enables incremental linking with LTO.

1542307660
andrewrk
oats, yes, 17:00 EST. the topic today will be implementing a floating point number parser

1542307674
andrewrk
oats,

1542307686
oats
awesome, I'll try to catch it

1542307727
wootehfoot
Then, for the fans of deterministic builds with LTO, it required setting the LTO seed to zero, with breaks incremental linking altogether, everything is a tradeoff :)

1542307740
wootehfoot
requires*

1542307747
andrewrk
wootehfoot, zig's stance on this tradeoff is: debug builds are not deterministic; release builds are

1542307766
andrewrk
release builds also are not incremental

1542307833
wootehfoot
nice! :)

1542312071
ltr_
andrewrk: quake would be a great project to launch 1.0.0 with

1542314993
oats
does a "deterministic" build mean that, given the same source code and the same compiler version, the output binaries/libraries would be the exact each build?

1542315133
andrewrk
oats, correct

1542317274
ltr_
andrewrk: do you have useful .nix files to share?

1542317325
andrewrk
ltr_, sure, what do you want, one for zig?

1542317339
ltr_
yes zig environment

1542317354
ltr_
do you recommend to use the master branch version?

1542317358
andrewrk


1542317373
andrewrk
yes I do recommend the master branch

1542317384
andrewrk
which you can get as a static binary build from the download page btw

1542317469
ltr_
thanks

1542317883
benjikun
andrewrk: Are you livestreaming soon?

1542317914
ltr_
what channel are you using? i cant find llvm_7,

1542317926
andrewrk
benjikun, yes, in 22 minutes:

1542317930
andrewrk
ltr_, unstable

1542317933
benjikun
yay

1542318433
andrewrk
ltr_, another option is to follow these instructions to build llvm & clang from source, and then comment out the llvm and clang items from the nix file:

1542318509
ltr_
its ok i have my chroot with different versions of llvm suite, i had never used the llvm from the distro

1542320804
ltr_
cmake gives me an error about the libclang headers, i ended up compiling just cfe again for the headers

1542320818
ltr_
dunno which package have libclang-dev

