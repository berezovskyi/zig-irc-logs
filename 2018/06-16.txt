1529129784
andrewrk
yeah, which led me to working on a dynamic library loader in zig (dlopen, dlsym, etc)

1529129816
andrewrk
which led me to realize that the vdso stuff won't work when we create a library

1529129841
andrewrk
but we can make it work

1529134600
very-mediocre
maybe silly nitpick

1529134617
very-mediocre
I keep typing `fn(whatever): type`

1529134621
very-mediocre
(colon to denote return type)

1529134637
very-mediocre
feels more consistent with the rest of the language

1529142870
Hejsil
very-mediocre, more consistent would probably be const main = fn() void {};

1529143457
very-mediocre
Hejsil: all other type annotations are preceded by a colon though

1529143492
Hejsil
Well, all other declaration names have the type after :

1529143492
very-mediocre
Can you elaborate on how `const main = fn() void {};` is consistent with the rest of the language?

1529143501
Hejsil
const S = struct {};

1529143505
Hejsil
const a = 1;

1529143512
Hejsil
const main = fn () void {};

1529143519
very-mediocre
I guess.

1529143525
Hejsil
fn () void {} is a function literal

1529143535
Hejsil
Just like S{}; is a struct literal

1529143549
Hejsil
If we did fn (): void

1529143549
very-mediocre
Right, though anonymous functions aren't supported

1529143559
Hejsil
But they should be :)

1529143559
very-mediocre
so I don't see functions as something we assign now

1529143564
very-mediocre
anon structs are supported and assigned

1529143582
Hejsil
Ok

1529143592
Hejsil
Then let me compare current func syntax

1529143595
very-mediocre
I get your point though, if anonymous functions are in, then your suggestion would make sense :)

1529143633
Hejsil
fn (): void would mark that the result of an operation done on the type should be annotated with :

1529143648
Hejsil
because if fn a(): void {}, then the result a() is void

1529143665
Hejsil
So should we have var a: *: u8 = &b; ?

1529143683
Hejsil
In a way, a.* is like calling a function :)

1529143692
Hejsil
And the signature is *

1529143693
very-mediocre
I don't accept the first assumption: "fn (): void would mark that the result of an operation done on the type should be annotated with :"

1529143695
Hejsil
*u8

1529143710
Hejsil
Hmm, ooh well

1529143720
Hejsil
I tried lol

1529143726
very-mediocre
:)

1529143740
very-mediocre
I don't see functions as a general substitute for any operation

1529143759
very-mediocre
such as dereferencing

1529143771
Hejsil
Well, you could see *u8 as the function fn() u8 :)

1529143780
Hejsil
and calling it uses .* instead of ()

1529143781
very-mediocre
I don't, so that's where we disagree

1529143793
very-mediocre
But it is nonetheless a valid case you are making :)

1529143807
Hejsil
Just like '+' could be fn(u8, u8) u8

1529143814
very-mediocre
Yeah

1529143820
very-mediocre
I'm familiar with that functional view

1529143821
Hejsil
Alright, agreed to agree and disagree

1529143835
very-mediocre
Well there's no right answer, it's "how should something be designed"

1529143870
Hejsil
The ano function idea has some nice benifits in terms of consistency and usage

1529143891
very-mediocre
Definitely

1529143893
Hejsil
Even if they aren't closures, i tend to need ano functions at times

1529143910
very-mediocre
iirc there's a functional counterpart for expressing Turing completeness

1529143913
very-mediocre
forgot what it's called

1529143959
very-mediocre
so it's certainly one way to view things

1529143966
Hejsil
Hmm. Lambda calculus?

1529143984
very-mediocre
I'm familiar with that but I was looking for something specific

1529143990
very-mediocre
But let's go with that :)

1529144009
Hejsil
Well, i don't really want to view all Zig operations as functions though :)

1529144017
Hejsil
It was just to make a point

1529144025
very-mediocre
Right

1529144049
Hejsil
And &a.* does not behave as any function would anyways

1529144067
very-mediocre
doesn't that mean you reject your 1st premise and agree with me? :)

1529144077
Hejsil
Hmmm

1529144094
Hejsil
Geeh, kinda, kinda not

1529144113
very-mediocre
To me it feels very intuitive to write `fn main(): void {}`

1529144125
very-mediocre
if you want to use functional programming as a reference

1529144130
very-mediocre
it's referential integrity

1529144135
very-mediocre
`main` evaluates to a void

1529144159
very-mediocre
ok i brain failed

1529144160
very-mediocre
not RI

1529144166
very-mediocre
I'm rusty on the terminology

1529144168
Hejsil
Then I'd say that const main: fn() void = {} works better

1529144185
very-mediocre
referential transparency!!

1529144187
very-mediocre
there you go

1529144193
very-mediocre
everything is what it evaluates to

1529144212
Hejsil
Well, `main` evaluates to `fn()void` :)

1529144217
very-mediocre
yeah, hmmm

1529144225
Hejsil
and `main()` evaluates to `void`

1529144235
very-mediocre
but then the keyword is `fn`

1529144243
very-mediocre
so both are valid

1529144251
very-mediocre
and what do you know, something like JavaScript indeed has both forms

1529144266
very-mediocre
obv. type is implicit

1529144266
Hejsil
Be gone!

1529144313
very-mediocre
imho `fn main(): void` would be equivalent to the anonymous function `fn(): void { }`

1529144334
very-mediocre
I'm going to invoke another disastrously bad language which does this

1529144338
very-mediocre
I know it sucks

1529144341
very-mediocre
but it's still a proof of concept

1529144345
very-mediocre
iirc ActionScript 3 does this

1529144383
Hejsil
I'd agree, that if calling the function can be done with `main` and not `main()` then it makes sense to me

1529144404
very-mediocre
hmm

1529144409
Hejsil
s/done/called/g

1529144414
very-mediocre
I view it as

1529144417
very-mediocre
(main)()

1529144424
very-mediocre
where main = fn(): void {}

1529144447
very-mediocre
just writing `main` is like writing a var without doing anything with it

1529144453
Hejsil
Ye

1529144457
very-mediocre
e.g. `var a = 5; a;`

1529144468
Hejsil
And var a: u8 = 0; a; evaluates to u8

1529144483
very-mediocre
Yes, it would evaluate to the function itself

1529144485
very-mediocre
but not call the function

1529144486
Hejsil
just like fn main() void{} ... main; evalutes to fn()void

1529144497
very-mediocre
e.g. when passing an anonymous function, you don't want to call it!

1529144518
Hejsil
Oooh wait

1529144526
Hejsil
I might see the consistency in a way

1529144540
Hejsil
because fn main() void is kinda like denoting how main is called

1529144549
Hejsil
then main() -> void

1529144553
Hejsil
aka main(): void

1529144560
very-mediocre
yeah, it used to be -> as you know

1529144560
Hejsil
Sure, I can accept that

1529144583
Hejsil
I'd say, that : is more consistent than -> then

1529144593
Hejsil
But i'd rather have ano functions

1529144597
very-mediocre
Yeah, agreed

1529144600
Hejsil
As I think they are even more consistent

1529144605
Hejsil
But i see it

1529144612
very-mediocre
I like having both

1529144627
very-mediocre
but that's because I am OCD about anonymous functions having performance issues in various language implementations

1529144661
very-mediocre
they feel "dynamic" to me

1529144662
Hejsil
I'm pretty sure C++ lambdas have no cost if they don't capture

1529144670
very-mediocre
Yes indeed they're almost no cost

1529144675
Hejsil
and are not sendt throug a function taking std::function

1529144710
very-mediocre
I'm brain damaged from JavaScript

1529144731
very-mediocre
pre-ES6 was nightmarish

1529144746
Hejsil
I wouldn't know

1529144752
Hejsil
I've stayed away

1529144763
very-mediocre
I've had to use it professionally

1529144772
very-mediocre
Everything is a footgun

1529144818
Hejsil
I like the idea of Nim as a high level language

1529144830
very-mediocre
Ugh nim is so conflicting

1529144835
Hejsil
Never type a types, but it's a static type language

1529144839
Hejsil
It has the python feel

1529144843
Hejsil
Which people love

1529144846
very-mediocre
I'm one of the few people who hate python

1529144851
very-mediocre
I've never found anyone who agreed with me

1529144855
Hejsil
I don't like it either

1529144862
Hejsil
But if you want 3 lines that does a lot

1529144866
Hejsil
Then it does the job

1529144881
Hejsil
And that's why I think Nim is good

1529144888
very-mediocre
As a better python, sure

1529144888
Hejsil
Though, haven't used it

1529144899
very-mediocre
It's still currently very rough

1529144902
Hejsil
But it seems like a better python yes

1529144903
very-mediocre
I've toyed with it

1529144920
very-mediocre
It has some crazy things going on that I don't know I can accept

1529144926
very-mediocre
like case insensitivity

1529144949
Hejsil
Oooh really?

1529144971
very-mediocre
i'm trying to look it up to see if it's still the case, but i'm pretty sure

1529144977
Hejsil
I though I read somewhere, that they where gonna use case to specify certain properties of the type/func whatever

1529144998
very-mediocre


1529145002
very-mediocre
yep it's case insensitive

1529145028
very-mediocre
also one of the things I never got was space/tab based scopes

1529145043
very-mediocre
I get that it's "cute" but it's nightmarish to maintain

1529145051
Hejsil
Agreed

1529145058
Hejsil
Though, I see the point

1529145064
Hejsil
Forces code style

1529145069
very-mediocre
It's to resemble pseudocode

1529145122
Hejsil
I should try writing something none trivial in nim/cystal/D

1529145130
Hejsil
But Zig is too good to leave

1529145154
very-mediocre
Zig has no business being this good :)

1529145163
very-mediocre
I was dabbling in nim, rust and D

1529145163
Hejsil
Maybe even Javascript

1529145170
Hejsil
So I can have a firm opinion on it

1529145178
very-mediocre
ES6+ javascript is decent now if you use a subset

1529145183
Hejsil
Ooh yes, need to write something in Rust too

1529145194
Hejsil
Like C++, a subset is good now

1529145194
Hejsil
Lol

1529145202
very-mediocre
my subset of C++ is C with classes

1529145213
very-mediocre
and templates

1529145216
very-mediocre
beyond that I'm out

1529145223
very-mediocre
operator overloading is disastrous

1529145292
very-mediocre
I think Zig can very easily be a better C++

1529145295
very-mediocre
even if it doesn'

1529145297
very-mediocre
doesn't intend to be

1529145297
alexnask
Nim is pretty nice but it can look really weird to C and C++ programmers

1529145303
alexnask
It's not really a C style language

1529145329
very-mediocre
Nim has wayyyyy too many keywords and idioms though

1529145333
Hejsil
What I need is a sanes "shell like" scripting language

1529145339
alexnask
Right, I agree could never fully get into it

1529145344
Hejsil
s/sanes/sane/g

1529145360
very-mediocre
my go-to is node/JavaScript for shell-like

1529145371
very-mediocre
if you use ES6 classes it's neat

1529145381
very-mediocre
I wrote a Bitcoin trading bot in js

1529145382
Hejsil
Well, something where calling "commands" is trivial like Posix shell

1529145394
very-mediocre
ah, that sort of thing

1529145395
very-mediocre
hmm

1529145403
alexnask
I personally don't mind python

1529145421
Hejsil
I think Python is strong because of it's libraries

1529145436
very-mediocre
I honestly think it's because of the "cuteness"

1529145438
Hejsil
The language it self is not really something I'd enjoy playing with

1529145441
alexnask
Ruby is probably better if you need to interact with the shell a lot

1529145451
Hejsil
Hmm

1529145457
very-mediocre
iirc in the early 2000s Python was gaining traction as a scripting tool for game designers

1529145467
Hejsil
Well, it's not like I'll get rid of shell lol

1529145494
very-mediocre
really in the end it depends what you like in terms of style, for C style there's node/js, otherwise python/nim

1529145496
Hejsil
Isn't Lua becomming kinda popular for that now (or maybe it always was)

1529145508
very-mediocre
yes Lua is now what Python used to be

1529145513
alexnask
Lua is pretty popular for game scripting yeah

1529145517
very-mediocre
somehow nobody remembers this about Python though

1529145521
alexnask
I think it's mostly because of WoW :P

1529145550
alexnask
+ it's really small, fast and simple

1529145560
very-mediocre
Python is slow

1529145563
alexnask
I mean Lua

1529145564
very-mediocre
oh, lua

1529145566
very-mediocre
right

1529145567
Hejsil
Lol

1529145582
very-mediocre
sorry, I like to diss python :)

1529145587
very-mediocre
can't resist an opportunity

1529145606
very-mediocre
`__self__`

1529145612
very-mediocre
please <.<

1529145648
Triplefox[m]
i enjoyed working with nim a few years ago, but i had reservations about how easily it let me write slow code. the irc channel got toxic and that was a good time to leave

1529145684
Hejsil
At least you can see the C output and determin for yourself whether it's bad

1529145689
Hejsil
(idk how readable it is)

1529145696
very-mediocre
averagely readable

1529145699
Hejsil
Python, you have no luck

1529145701
very-mediocre
as of last year when i tried it

1529145708
alexnask
Hmm interesting, I would assume the C output would be a mess

1529145724
very-mediocre
by average i mean

1529145730
Triplefox[m]
lua is one i often work with. it's a nice small language. it isn't made for writing big codebases at all though, the companies in the industry using it implement a lot of their own checking/analysis

1529145734
very-mediocre
it wasn't like minified js or anything

1529145749
alexnask
Right

1529145782
Hejsil
What I really don't like about Python and the likes, is when you want to know what the interpreter does behind you

1529145791
Hejsil
No one asks/answers these questions

1529145793
alexnask
I used to maintain a compiler that spat out C (ooc-lang), at some point you get used to how the compiler does stuff so you can read the code

1529145802
very-mediocre
most people use Cython if they want performance

1529145808
alexnask
But it was really messy :p

1529145830
very-mediocre
hey, i ran across ooc when looking around for languages to try :)

1529145846
alexnask
PyPy is pretty fast too right?

1529145861
very-mediocre
supposedly, never tried it

1529145871
alexnask
ooc was pretty cool when it first came out in 2010 or so

1529145898
Triplefox[m]
python was the language that got me into "real" programming, it's just, the runtime is a pretty big deal and it affects all sorts of considerations around deployment

1529145904
alexnask
I mean, it had features like lambdas etc. that were not common in managed languages at that time

1529145943
Triplefox[m]
it is possible to ship some nice fast code with cython/ctypes though, i have seen and written some

1529145957
Hejsil
Well, I was not worried about being fast. Just not extremely slow

1529145957
alexnask
(not managed, wrong word, it was native + GC)

1529145964
very-mediocre
end of the day, whatever gets the job done

1529145973
Hejsil
Things like, "How to preallocate a list"

1529145974
alexnask
No, we must all use Lisp variants /s

1529145979
very-mediocre
lol

1529145982
Hejsil
Ooh god no

1529146003
very-mediocre
I think the human brain is not good with recursion

1529146008
very-mediocre
or at least my mediocre brain

1529146018
very-mediocre
after a certain depth i feel like I need a nap

1529146040
alexnask
That call/cc tho

1529146059
Hejsil
Well, inherently recusive problems are simpler with, you guessed it, recursion

1529146069
Hejsil
Like a recusive decent parser

1529146081
very-mediocre
sure, if that's the problem itself

1529146099
very-mediocre
referential transparency is easy to map to recursive functions there

1529146118
very-mediocre
meaning everything has to evaluate to something, and that something is something you understand

1529146120
Triplefox[m]
the language i've used the most in recent years is haxe...it's a nice reference point as a kind of lowest-common-denominator for coding with a GC since it aims to target basically any runtime vm

1529146144
alexnask
Haxe can compile down to C++ too right?

1529146154
very-mediocre
HaXe can compile to "anything"

1529146176
very-mediocre
most common usage back in the day was compile to Flash

1529146180
alexnask
I assume it uses Boehm GC or something similar when compiling to native code?

1529146225
alexnask
Nvm they use their own GC

1529146239
very-mediocre
it was cool writing a game using a Flash-identical API, then outputting it as C++

1529146242
very-mediocre
and building to native

1529146252
very-mediocre
ya unclear what Gc they use

1529146271
very-mediocre
whatever it is though it performs better than Adobe's runtime

1529146282
Triplefox[m]
the downside/upside of working with haxe is that you can write once and debug anywhere...sometimes this is actually useful for catching certain errors that only show up some places

1529146316
very-mediocre
imho main downside is the compile targets have idiosyncracies

1529146335
very-mediocre
you can't be confident what you're doing will be exactly the same in the HTML5 target vs. Flash vs. cpp

1529146342
very-mediocre
abandoned it because of that actually

1529146382
very-mediocre
but if you're doing a game in it, the time saved is far greater than time spent fixing idiosyncracies

1529146382
Triplefox[m]
the c++ target is boehm i think, yeah. their current initiative is "hashlink" which is a new jit vm

1529146390
alexnask
Huh Dead Cells is written in HaXe, cool

1529146406
Triplefox[m]
in haxe land, it's mostly a case of, "which target has the library bindings already set up for me"

1529146426
very-mediocre
even if you have the bindings, the library will have idiosynracies

1529146428
very-mediocre
i.e. OpenFL

1529146470
very-mediocre
Was doing something ambitious and couldn't even get blend modes to work consistently across platforms :(

1529146484
very-mediocre
and it was a known issue

1529146498
very-mediocre
such was the experience in general

1529146499
alexnask
So now you can compile HaXe directly to C++(/other targets) or to their own VM, which can itself produce C code :P

1529146518
alexnask
I wonder how HaXe C++ output will compare to HashLink C output

1529146545
Triplefox[m]
it really can be infuriating for getting something done because you end up debugging a target that you have no direct experience with...but the basic tech is also good

1529146873
Triplefox[m]
haxe did lead me towards being interested in zig because so many problems that haxe itself can't address naturally point to problems with building and maintaining native code

1529146911
Triplefox[m]
haxe did lead me towards being interested in zig because so many problems that haxe itself can't address naturally point to problems with building and maintaining native code

1529147510
alexnask
The fact that you can cross compile from any target to any target is a winner

1529148102
very-mediocre
here i go again

1529148108
very-mediocre
`pub fn at(i: usize): T {...`

1529148119
very-mediocre
can't get used to no colon for return type

1529148208
alexnask
Is the error message any good at least?

1529148242
very-mediocre
yeah

1529148251
very-mediocre
invalid token: ':'         pub fn at(i: usize): ?T {

1529148325
Hejsil
Well, "good"

1529148342
very-mediocre
it doesn't paste nicely, but it's actually perfect

1529155261
very-mediocre
Could anyone help me wrap my head around this?

1529155264
very-mediocre


1529155281
very-mediocre
Can't seem to unwrap errors when using generics

1529155307
very-mediocre
Like if something returns !T, the compiler doesn't let me do `if (returned_thing) |unwrapped|`

1529155360
very-mediocre
I feel I'm missing something basic but it escapes me at the moment...

1529155515
MajorLag1
I believe you need an `else` clause for `if` to unwrap an error. I might be mistaken, it's been a while since I ran into a similar problem.

1529155547
very-mediocre
It works with the function that returns !i32

1529155550
very-mediocre
without the else

1529155566
very-mediocre
nope you may be right

1529155568
very-mediocre
for the love of......

1529155610
very-mediocre
hmmm

1529155621
very-mediocre
There's something weird here but I can't quite place it

1529155638
very-mediocre
I wrote that simple example but in my actual code I'm having the issue even with `else`

1529155767
very-mediocre
ok, it's that very same caching issue I always have

1529155770
very-mediocre
I should just not post here

1529155771
very-mediocre
lol

1529155778
very-mediocre
Every single time the variations I try return the same error

1529155786
very-mediocre
Then I ask here

1529155801
very-mediocre
then it works

1529155804
very-mediocre
:|

1529155813
very-mediocre
now the actual code works

1529155825
very-mediocre
which already had the `else` added but wouldn't work

1529155847
very-mediocre
the weird thing is I'm not using a network drive for this file, I wonder if the compiler caches anything?

1529155858
MajorLag1
`zig-cache` doesn't actually cache anything, but people who don't know that often delete it as a trouble shooting step because we've just been trained to expect caches to solve problems.

1529155869
MajorLag1
*have, not solve

1529155872
very-mediocre
well I'm baffled

1529155908
very-mediocre
like I committed the code with the `else`, just checked it out and it compiled

1529155916
very-mediocre
whereas previously it was complaining.

1529155951
very-mediocre
assumed previously it was due to my setup.

1529155976
alexnask
What line was the issue on?

1529155988
alexnask
nvm missed the comments :P

1529156018
very-mediocre
basically I'm getting stale compilation but since zig doesn't cache, I'm baffled

1529156077
alexnask
I don't think else is mandatory here since this is an if statement, not an expression though i could be wron

1529156080
alexnask
wrong*

1529156086
very-mediocre
turns out it is

1529156096
very-mediocre
nonetheless I actually

1529156100
very-mediocre
at a time when it wasn't compiling

1529156112
very-mediocre
and complaining that I was supposed to provide an optional type

1529156119
alexnask
weird

1529156150
very-mediocre
happened twice before, and I wrote here about it

1529156157
very-mediocre
but then I thought it was because of my network drive

1529156159
very-mediocre
but this file isn't on it...

1529156222
very-mediocre
note to self: next time, just "turn it off and on again" before posting about a problem here

1529156252
alexnask
:p

1529156268
alexnask
Still, its even weirder if this is a semi-consistent issue

1529156299
alexnask
Let me know if you have questions about comptime/metaprogramming btw

1529156304
very-mediocre
thanks :)

1529156305
very-mediocre
i'm good for now

1529156323
very-mediocre
trying to pick up zig by doing streaming lz77

1529156336
very-mediocre
the algorithm is in place but I got stuck on this weird issue

1529156386
very-mediocre
I'm truly baffled

1529156468
alexnask
What OS/distro are you running on? I don't think it should matter but you never know

1529156487
very-mediocre
win10 64bit

1529156500
alexnask
I had some issues on WSL but that was because I was modifying files with windows app on the linux "filesystem"

1529156528
very-mediocre
the way I code is compile heavy

1529156534
very-mediocre
I write something down and just compile

1529156541
very-mediocre
and use the errors to fix it up

1529156543
very-mediocre
that's how i learn

1529156553
alexnask
If you are using WSL this could be something to consider, I dont see why this would happen with the native windows release though

1529156563
very-mediocre
i'm not running it on WSL

1529156577
very-mediocre
so, i'm basically iterating very quickly

1529156596
alexnask
Hmm

1529156638
very-mediocre
hm at one point i had it as

1529156641
very-mediocre
else switch

1529156647
very-mediocre
lemme try that and see if it dies :)

1529156789
very-mediocre
nope

1529156792
very-mediocre
works just fine

1529156821
very-mediocre
I swear someone's playing a prank on me

1529156834
alexnask
Is your PC haunted?

1529156837
alexnask
:p

1529156894
very-mediocre
hmmm

1529156899
very-mediocre
I'm using the vscode integrated terminal

1529156920
very-mediocre
I noticed sometimes the buffer is overwritten at the wrong index

1529156932
very-mediocre
like zig compile errors are partially overwritten with new ones

1529156937
very-mediocre
could be that!

1529156972
alexnask
Aahh that would make sense

1529156986
alexnask
Some stderr related issues perhaps?

1529157042
very-mediocre
Hmm, a recent vscode update renders the terminal in canvas

1529157048
very-mediocre
might be a bug in that implementation

1529157205
very-mediocre
ok

1529157208
very-mediocre
i'm sure this is the problem

1529157210
very-mediocre
it just happened

1529157220
very-mediocre
the vscode terminal is a mess

1529157234
alexnask
zig devs > MS devs confirmed /s

1529157240
very-mediocre
it just overwrote the previous buffer and i'm seeing merged error messages

1529157260
very-mediocre
C:\Users\user\Documeerror: type '@typeOf(Lz77InStream(ArrayInStream(u8),4,5)_next).ReturnType.ErrorSet!?Lz77_tuple' does not support field access         debug.warn("({},{},{})\n", res.pos, res.len, res.next orelse ' ');

1529157270
very-mediocre
C:\Users\user\Documeerror

1529157273
very-mediocre
hell of a path there

1529157293
very-mediocre
this must be it

1529164136
very-mediocre
Still getting very stale compiles!

1529164234
very-mediocre
hrmph

1529164311
bheads
anyone know how to get the zig build to copy dll file to output path?

1529164337
bheads
tried   b.copyFile("lib-win64\\SDL2.dll", exe.getOutputPath()) catch unreachable;   but it doesn't copy anything and

1529164343
bheads
but compiles just fine

1529168310
andrewrk
Hejsil, >  inherently recusive problems are simpler with, you guessed it, recursion

1529168317
andrewrk
what makes you say that? (just kidding)

1529168345
Hejsil
:)

1529168359
andrewrk
poor Hejsil implemented the entire self hosted parser without recursion because I claimed it was unsafe, and then I went off and did an experiment and discovered we actually can rescue recursion and make it safe

1529168375
Hejsil
Hey, it was fun

1529168535
andrewrk
this zig-window rabbit hole goes deep. I'm currently implementing a dynamic .so loader

1529168554
andrewrk
so that you can open libGL.so and start calling functions

1529169202
alexnask
lolwut how do you write a compiler with no recursion? :P

1529169900
andrewrk
see for yourself!

1529171258
bheads
thank you for errors on integer overflow, that probably saved me an hour tracking down random behavior

1529171665
andrewrk
:)

1529173458
bodie_
any recursion can be rewritten as an iteration with accumulation

1529173487
bodie_
and it often has to be, because limited recursion depth is a thing

1529173756
andrewrk
I think my idea of not depending on libc for a basic opengl app is doomed:

1529173785
andrewrk
vulkan is even worse than opengl, it depends on libstdc++:

1529173813
bodie_
isn't vulkan just a driver api?

1529173986
andrewrk
perhaps, but, in practice, this is how it's implemented on linux, with all these dependencies

1529174450
alexnask
@bodie_ Right I know you can turn recursive code into iterative code but I wager it would be a pain to do so in a whole compiler's codebase

1529174599
bodie_
I'm trying to work on a little parser in rust right now, and the way I'm doing it is w/ an enum + switch state machine

1529174675
bodie_
and then breaking those down into "methods" on the various enum members

1529174692
bodie_
but it is still really immature so for all I know this is a terrible approach

1529174701
bodie_
I'm thinking of migrating it to Zig though :D

1529174884
andrewrk
bodie_, you might find that file I linked above interesting, it's a full zig parser written in the style you described

1529175396
diefroggy242
Is this a place that I can ask for help with code? I'm trying to get Zig going on an MSP430, looking at the clashOs repo by andrewrk. Should I just copy paste if it's a small snippet?

1529175455
andrewrk
diefroggy242, yep this is a good place for help. if it's more than 2 lines I suggest using

1529175472
andrewrk
clashos has bitrotted some. I need to update it

1529175720
diefroggy242
OK thanks.

1529175796
andrewrk
I fixed the compile errors just now, but looks like there's a new dependency on the __multi3 compiler-rt builtin, which I need to add to zig

1529175827
andrewrk


1529176083
Sahnvour
hi andrewrk , what's the easiest way to hack on zig's stdlib ? I built my version of zig from source, but don't like having to run the install target everytime I make changes to std/ to have files copied, is --zig-install-prefix useful here ?

1529176327
andrewrk
that's the officially supported way to make changes

1529176350
andrewrk
but you could edit the installed files directly if you're careful not to overwrite your work

1529176377
andrewrk
sorry, when I said "that is the officially supported way" I meant running `make install` every time you change something

1529176403
Hejsil
"watch make install"

1529176406
Hejsil
:)

1529176426
Hejsil
Probably not the best idea

1529176472
Sahnvour
hmm ok

1529177024
Sahnvour
what's a bummer actually is having to use vcvars.bat to gain access to msbuild, or do some customization. meh windows ...

1529177086
alexnask
I just use the Visual Studio x64 command line by default

1529177091
andrewrk
same ^

1529177429
dbandstra
alexnask, thanks for fixing up that interface.zig, i had some issues with it and left a comment in the gist

1529177483
alexnask
Oh I didn't notice let me take a look

1529177541
alexnask
Huh I thought for sure I tried an interface with multiple methods, I'll test it and update with fixes

1529179112
dbandstra
that closure pattern doesn't seem to work

1529179641
alexnask
This is really weird

1529179665
alexnask
We end up in the 0 branch of the switch statement, when the expression is 1

1529179974
dbandstra
by the way, is there any way to print `fn_name` or something like that in @compileLog

1529179982
dbandstra
when i try that it just prints out 'struct []const u8' or something like that

1529180008
alexnask
Right, this is a realy annoyance for me too, you need @compileError for strings

1529180015
alexnask
Which prints out a whole error, obviously

1529180033
dbandstra
oh i see, didn't even try that

1529180126
alexnask
Hmm this is probably some weird comptime evaluation bug

1529180141
alexnask
I think I hit something similar when I first wrote this and split that part of the code in another function

1529180161
alexnask
But when I updated to latest zig using a function seemed to break stuff

1529180533
alexnask
Well at least now I fail with an LLVM error :p

1529180608
alexnask
But I think I'm pretty close to a fix

1529180703
dbandstra
cool :)

1529180711
dbandstra
i have to head out.. hard to find free time

1529180921
andrewrk
cool, got basic runtime dynamic library loading working without libc on linux

1529181143
alexnask
Nice!@

1529181262
Sahnvour
just started from a fresh clone of the repo, building (windows+msvc) yields missing file errors from all embedded_lld_* targets even though files are here, I'm confused ... any idea ?

1529181545
andrewrk
Sahnvour, hmm, no, and we have appveyor do a full clean build on every master branch push, so it should be working

1529181595
Sahnvour
that's strange because even invoking the compiler myself results in an error, but opening the file works fine from the same command line ... investigating this, but this seems to be a problem on my end

1529181655
Sahnvour
ah, I bet that's some bad interaction between WSL and regular windows

1529182143
alexnask
You should probably have your folder in /mnt/c if you want to interact with files in it from windows

1529183195
Sahnvour
that's what I did, and this guy

1529184216
GitHub85
[zig] andrewrk pushed 1 new commit to master:

1529184217
GitHub85
zig/master 48de57d Andrew Kelley: add basic std lib code for loading dynamic libraries...

1529184568
GitHub77
[zig] andrewrk pushed 1 new commit to master:

1529184568
GitHub77
zig/master 65d04cb Andrew Kelley: std.DynLib: open the fd with CLOEXEC

1529186886
alexnask
"Global is external, but doesn't have external or weak linkage!"

1529186905
alexnask
Could this be related to generating functions at comptime? (through the struct-fn idiom)

1529187251
alexnask
Seems to be happening when I assign a generated function to a nullable

1529187548
andrewrk
if you're getting an llvm error then it's a zig bug

1529187560
alexnask
Yup, I'll try to isolate this one

1529187572
andrewrk
it must have something to do with `export`

1529187596
alexnask
IDK, I'm basically generating Vtables on the fly and want to support optional methods

1529187624
alexnask
So I basically make a wrapper function that does some casting from a type erased self to the implementation type and @inlineCall's the method

1529187661
alexnask
And then assign that to the vtable field, which works fine if the field is just a function pointer but raises that error if the field is nullable

1529187713
alexnask
So my guess is nullable generated functions, testing that out in a few

1529189736
GitHub188
[zig] andrewrk pushed 1 new commit to master:

1529189736
GitHub188
zig/master c529b81 Andrew Kelley: load_dynamic_library test: no need to link libc

1529192226
GitHub152
[zig] andrewrk pushed 1 new commit to master:

1529192226
GitHub152
zig/master a7d5908 Andrew Kelley: disable load dynamic library test...

1529193312
GitHub1
[zig] andrewrk pushed 2 new commits to master:

1529193312
GitHub1
zig/master 3ee4d23 Andrew Kelley: posix read can return error.IsDir

1529193312
GitHub1
zig/master eae9634 Andrew Kelley: langref: be clear that float types are always IEEE 754

