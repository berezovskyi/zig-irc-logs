1543452931
daurnimator
wow that's long

1543453525
benjikun
he livestreamed making it

1543454536
IntoxicatedHippo
Should the functions in std.math be made to support comptime_int and comptime_float arguments when possible?

1543454593
benjikun
That's the plan (I believe)

1543454617
benjikun
there are a few issues open for things not accepting comptime values and evaluating at compile-time

1543454836
daurnimator
IntoxicatedHippo: which function do you need that doesn't work right now?

1543454938
IntoxicatedHippo
daurnimator: right now the only one I need is floor.

1543459793
benjikun
How do I use the ANSI clear escape code? (\033[2J)

1543459797
benjikun
not sure with how zig does strings

1543459864
MajorLag


1543459927
MajorLag
so "\x1B[2J"

1543460018
benjikun
oh I see

1543460020
benjikun
tyvm MajorLag

1543461738
andrewrk
IntoxicatedHippo, floor is planned to be a compiler builtin

1543461795
andrewrk


1543465410
MajorLag
andrewrk, forgive my lack of git understanding, which is still on the level of "I'd better google how to branch again", what does it mean to re-organize my commits (I don't think I have a problem with this)? More importantly, is there anything I can do in the future to make this easier for you?

1543465516
andrewrk
MajorLag, well first let me maybe help you with something that could save you some trouble

1543465536
andrewrk
It looks like when you want to synchronize your branch with master, you've been making a github pull request through the UI yeah?

1543465547
MajorLag
yeah

1543465585
andrewrk
that's fine -  but here's how to do that from the command line

1543465624
andrewrk
git remote add upstream

1543465636
andrewrk
this creates a new "remote" called "upstream" that is the official zig git repo

1543465643
andrewrk
do this once only

1543465653
andrewrk
then when you want to merge master into your fork

1543465663
andrewrk
git fetch upstream && git merge upstream/master

1543465674
andrewrk
this is equivalent to what you've been doing

1543465723
andrewrk
there is another thing you can do which is a little more advanced - and I recommend it only when your branch is only a little bit behind

1543465738
andrewrk
which is:  git fetch upstream && git rebase upstream/master

1543465788
andrewrk
this is kinda the same thing, except instead of two branches merging together, it just undoes all your commits, merges upstream/master, and then re-applies your commits on top of that. it makes all the "merge branch ..." commits go away

1543465799
andrewrk
it also rewrites your history. so you have to force push if you do it.

1543465827
andrewrk
and if there are conflicts, then git becomes in an in between state, and you should look at the instructions that `git status` prints to see what your options are

1543465846
andrewrk
(which are, fix the conflicts and then `git rebase --continue`, or give up by doing `git rebase --abort`)

1543465856
andrewrk
does that all make sense?

1543465920
MajorLag
I think so.

1543465947
andrewrk
in answer to your question, the thing you could do is the rebasing thing, before making a pull request - that's the reorganization I'm asking permission to do on your behalf

1543466025
MajorLag
I don't have a problem with that, and I'll make a note to do that in the future. Why is that not recommended if I'm more than a little behind master?

1543466093
andrewrk
for example in my copy elision branch, a rebase would not make sense. it's 75 commits ahead of master, and I've resolved merge conflicts a dozen times

1543466102
andrewrk
a rebase would mean solving these conflicts over and over again

1543466127
MajorLag
Ah, I see.

1543466228
MajorLag
My process has been to get whatever I'm working on in a state I'm more or less happy with before I even touch git. Then I would merge master into my fork, add my stuff, make sure I didn't break anything as best I can, the push it and make a pull request. I'm wondering if there isn't a better way?

1543466285
andrewrk
to be clear, I don't think you need to change your workflow, if you're happy with it, and you don't mind me massaging the commits as I merge them into upstream

1543466302
MajorLag
I have no attachment to the commits.

1543466347
andrewrk
cool :)

1543466450
andrewrk
to help you understand the rebasing thing - it's equivalent to, if you did your workflow, but instead of merging master into your work, you made a fresh git clone, and then overwrote all the files with your modifications

1543466468
andrewrk
that's what rebase does, except with your git commits

1543466475
andrewrk
rather than with files

1543466486
MajorLag
Which is more what I actually want in my workflow anyway, so that'll work out I think.

1543466550
MajorLag
An exception might be if I decide to tackle a std.fmt rewrite or something else with breaking implications throughout the codebase.

1543466561
MajorLag
well, the stdlib codebase

1543466755
andrewrk
in other news, I'm close to having "hello world" build in copy elision branch

1543466806
andrewrk
which is harder than you'd think, if you consider that it involves std.fmt.format, and the default panic handler which supports stack traces

1543466834
andrewrk
then it's time for test case whack a mole

1543466855
andrewrk
and then we're going to have a fresh set of bugs to look forward to...

1543466922
MajorLag
I'm excited for copy elision. It'll be worth it in the end.

1543470083
benjikun
andrewrk: That's nice to hear

1543476220
daurnimator
Is it possible to get zig to

1543476703
presiden
daurnimator: could you give an example?

1543476815
daurnimator
presiden: e.g. if you want to use pthread_mutex_init to back std.Mutex.....

1543476869
hryx
If you don't import std anywhere, I believe none of it will get used. As long as you link to libc, I don't see why not

1543476881
hryx
or pthread in the case above

1543477052
daurnimator
So I'm thinking about using zig where C is currently assumed

1543477055
daurnimator
And what might break

1543477071
hryx
daurnimator: that might make a neat demo or blog post, making a zig executable with no std. it's probably easier than doing it in rust

1543477115
daurnimator
There's a few classes of "changes" I can see:

1543477118
daurnimator
1. internal calls that people are used to catching via LD_PRELOAD. malloc comes to mind.

1543477150
daurnimator
2. libc plugin architectures, e.g. NSS

1543477179
daurnimator
3. "special" kernel interfaces, e.g. set_robust_list

1543477249
daurnimator
4. other plugin architectures where loaded libraries assume libc pthreads are used for all threading

1543477298
daurnimator
That's my list for now....

1543477332
hryx
Really interesting list of gotchas

1543477404
daurnimator
oh, 5. things that assume libc stdio. -> e.g. zig stdin has it's own buffer in zig-land rather than the one out of C.

1543477499
daurnimator
So I was thinking these things; and thought of one "simple" solution: favour libc over zig stdlib.

1543477580
daurnimator
which might not be a bad thing ..... libc has had a

1543481256
presiden
is it like, writing your own alternative std, e.g. const std = @import("mystd");

1543481343
presiden
and everything on mystd use libc

1543483842
suirad
whats everyone working on?

1543483880
forgot-password
I'm still playing around with OpenGL, you? :)

1543483931
suirad
just finished touching up my pull request

1543484603
forgot-password
Nice, for what?

1543486939
suirad
changing some the remaining A functions from the std for winapi

1543488432
forgot-password
Is it possible to generate structs on compile time? I want to make a little helper for interfacing with shaders on a type-checked basis

1543490222
daurnimator
forgot-password: yes. just return them from a function.

1543490324
daurnimator
forgot-password:

1543490590
forgot-password
daurnimator: Thank you :)

1543496961
presiden


1543496973
presiden
interesting pitch

1543497023
presiden
I wonder if you can join more than one private leaderboard

1543497047
presiden
there's one that also mentioned on lobste.rs

1543497057
presiden


1543497250
presiden
ah, you can

1543497303
presiden
ok, if there's private leaderboard for zig, maybe I'll join them too.

1543501155
andrewrk
daurnimator, there's an established pattern for std lib implementations to call libc functions when builtin.link_libc is true

1543501169
andrewrk
probably std.Mutex should do this with pthread mutexes

1543501212
andrewrk
std.debug.warn should use fprintf(stderr, etc

1543501478
daurnimator
andrewrk: oh interesting. I haven't seen that yet

1543501501
andrewrk


1543501533
andrewrk
I agree it makes sense to do, and we should do it in more places

1543501590
daurnimator
noticed in that link... we should have ` while (true) {}` at the end to catch a failed windows exitprocess call too

1543501766
daurnimator
Another hack to do there is an explicit null dereference

1543501775
daurnimator
sorry got distracted :P

1543502364
daurnimator
andrewrk: so should we have an issue about using libc more? is there a reason that it isn't the default?

1543502412
andrewrk
what do you mean about it being the default? you mean --library c by default?

1543502419
daurnimator
I.... guess?

1543502431
daurnimator
at least when compiling for e.g. linux userspace

1543502445
daurnimator
I haven't convinced myself yet. There's pros and cons to it.

1543502450
andrewrk
that's not really compatible with zig's goal of replacing C

1543502466
daurnimator
andrewrk: replacing C the language doesn't necessarily mean replacing libc...

1543502469
andrewrk
what's the motivation again?

1543502490
daurnimator
andrewrk: being able to start writing in zig instead of C without breaking assumptions

1543502559
andrewrk
I think the pattern of std lib checking if linking against libc will solve that use case

1543502585
daurnimator
okay :)

1543502609
daurnimator
andrewrk: in other news

1543502666
andrewrk
merged

1543502690
daurnimator
andrewrk: thanks :)

1543502716
andrewrk
daurnimator, the other example of this is threads - when you spawn a thread and are using --library c, it uses pthreads

1543502732
andrewrk
we just need to do this pattern more

1543502752
daurnimator
andrewrk: stupid question.... but what about if you link against libc but not libpthreads

1543502911
andrewrk
I don't think that's an option

1543504260
daurnimator
andrewrk: do you mean you don't think that's possible with a linker? or you don't want to support it with zig?

1543504288
andrewrk
I don't think there exists a system where you can get libc and not pthreads

1543504305
daurnimator
I know I support one with some projects.... just got to remember which

1543504457
daurnimator
maybe it was old glibc on linux?

1543504600
daurnimator
sigh. I hate it when I google stuff and I find myself asking the same question on forums 8 years ago

1543504758
daurnimator
I need to go to sleep. I can't read properly :P

1543504761
daurnimator
g'night

1543504767
andrewrk
night

1543513377
Hejsil
andrewrk, what is the intended behavior of Buffer.initSize? To init an undefined buffer with len = size or to init a buffer with cap = size?

1543519683
andrewrk
Hejsil, init a buffer with len = size, undefined contents

1543519687
andrewrk
which I believe is what it does

1543521852
Hejsil
Alright, wasn't sure. Not that I needed it anyways

1543521928
j`ey
andrewrk: stream topic?

1543522025
andrewrk
j`ey, Part 2 of implementing a float parser

1543522103
j`ey
andrewrk: great. check out float.exposed

1543522156
andrewrk
yeah! saw this this week, wonderful tool that we will use on stream

1543522171
andrewrk
also this stream will be 1080p, hopefully makes it easier to read

1543522671
wink_
andrewrk: Should I create a new squashed PR for max/minValue?

1543522708
andrewrk
wink_, yes, if you think that a change is warranted

1543527669
sjums
how do I dynamically allocate an array of a variable size?

1543527711
andrewrk
sjums, are you looking for something like std.ArrayList?

1543527766
sjums
Possibly! my zig-virginity popped less than two hours ago

1543527784
sjums
So trawling through zig-files on github and the doc :)

1543528159
sjums
Looking into it, thanks :)

1543528491
andrewrk
streaming in 5 minutes, float parsing stuff.

