1536971908
andrewrk


1536971917
andrewrk
This is on hacker news right now

1536971952
andrewrk
If we did a blog post on how to do this in zig, probably with perfect hashing instead of tries, it would be some good publicity

1536972427
scientes
andrewrk, we can replace gperf?

1536973034
scientes
cool

1536973106
scientes
keep O(log n) lol

1536976279
scientes
andrewrk, I think this perfect hash algorithm would require a comptime allocator:

1536977382
unique_id
Noob question, how do I open a file for read and write?

1536977429
scientes
openRead() or openReadC() unique_id

1536977482
scientes
oh read+write

1536977617
scientes
the stdlib doesn't use has a generalized (works on windows) function that uses posix.O_RDWR

1536977813
scientes
unique_id, windows has OF_READWRITE, you should add a OpenReadWrite+OpenReadWriteC

1536977821
scientes


1536994090
kristate
today seems to be the 700th day since zig was started

1537011945
scientes
I doubt it makes sense to use llvm to compile DFAS directly with its DAG, (wondering how to commptime DFAs), which means that something like gperf would still be necessary.

1537012003
scientes
including for my wish-project: comptime regular expression engine

1537012272
scientes
it would be an epic hack, but I don't think llvm could really handle it

1537012493
scientes
meh gperf isn't very demanding

1537012637
unique_id
That feeling when you're using sqlite as an application data format and you learn it doesn't support async ops and so you search for a key value store alternative but can't find anything you like and so you're about to create a bunch of unnecessary threads for streaming in resources :(

1537012661
scientes
unique_id, did you ever readwrite that file?

1537012680
unique_id
yeah I just copied openReadC and changed it a bit

1537012695
scientes
I really think it would make sensin the std lib

1537012707
unique_id
im short on time atm

1537017404
andrewrk
yeah no worries, we'll get it eventually

1537017562
DutchGh0st
how do I take 'self'or 'this' in a struct method?

1537017573
DutchGh0st
" error: use of undeclared identifier 'this'"

1537017712
MajorLag
`struct A { fn doStuff(self: *A, ...) }` or `struct A { const Self = this;  ...  fn doStuff(self *Self, ...)}`.

1537017817
DutchGh0st
const Self = this does not work?

1537017838
MajorLag
code?

1537017850
scientes


1537017873
scientes
^this is gone

1537017877
MajorLag
Oh, I didn't realize that change had gone in yet.

1537017883
andrewrk
github mangled the commit message, it's actually `@This()`

1537017899
DutchGh0st


1537017916
DutchGh0st
doesnt work on the newest compiler

1537017922
DutchGh0st
gonna try @this()

1537017923
andrewrk
it only can refer to types now. the "block" type is gone

1537017928
andrewrk
DutchGh0st, it's @This()

1537017938
MajorLag
That's good, one less not-quite-real type.

1537017952
scientes
nows for namespace->struct

1537017991
MajorLag
that'll just leav ArgTuple and BoundFn I think.

1537018077
andrewrk
argtuple will be solved by actual tuples

1537018106
andrewrk
BoundFn will probably stay

1537018123
scientes
How about allowing comptime DAGs via pointers? (using recursion) but isn't checking for cycles O(n^2)...

1537018184
andrewrk
what do you mean scientes? is there some reason you can't make a DAG at comptime?

1537018217
scientes
I haven't tried

1537018275
scientes
but the lack of a comptime allocator means I can't really try

1537018347
andrewrk
ah so you're talking about

1537018379
scientes
but i still don't think it woudl be possible

1537018392
scientes
and even if so, its probably the wrong approach to load up the whole graph into llvm

1537018625
scientes
but it could be really slick: switch(std.perfecthash(a_enum)) { case(enum_instance.key) default...}AND THATS IT

1537018666
MajorLag
oh hey, AppVeyor builds started working again.

1537018699
scientes
--release-safe was turned off

1537018709
andrewrk
yeah I disabled all non debug tests

1537018740
andrewrk
but according to

1537018749
MajorLag
unfortunate, but it'll be nice to be able to be on the latest build again.

1537018798
scientes
andrewrk, I got arm builds working with buildbot

1537018813
scientes
andrewrk, you just have to turn on the github trigger

1537018828
scientes
no need for slow-ass qemu

1537018853
scientes
I'm paying 3eu/mo for a scaleway arm64 VPS

1537018866
andrewrk
scientes, those URLs are not loading for me - can you give me more specific instructions?

1537018881
DutchGh0st
allright, cool, I can now sort of emulate interfaces, and require a signature and name

1537018901
DutchGh0st
(the name of the required function that is)

1537018926
scientes


1537018941
scientes
click "add webhook"

1537018971
andrewrk
application/json or application/x-www-form-urlencoded?

1537018976
scientes
json

1537018996
andrewrk
empty secret?

1537019048
andrewrk
ok I added it

1537023765
DutchGh0st
you're all probably really bussy with 0.3, but where can I find what is being changed?

1537023786
andrewrk
DutchGh0st, you're trying to subscribe to breaking changes, yeah?

1537023861
DutchGh0st
^^ haha, it's fine

1537023877
andrewrk
I'll at least mention everything in the 0.3.0 release notes

1537023909
andrewrk
you could do a git log -p of the file doc/langref.html.in. that will give you an idea about language changes

1537023933
andrewrk
for standard library changes you'll have to pay attention to commits too. everything in the std/ directory

1537023943
andrewrk
(unless you stick with releases in which case you can read the release notes)

1537023998
DutchGh0st
yeahh once in a while I download a version from the build site haha

1537026831
andrewrk
I've done it

1537026837
andrewrk
perfect hashing that llvm can fully optimize

1537026855
andrewrk


1537027662
andrewrk
I'm going to make a blog post about this

1537028817
DutchGh0st
error: evaluation exceeded 1000 backwards branches <-- but I have a @setEvalBranchQuota(3500) at the start of the comptime stack

1537028841
andrewrk
DutchGh0st, hmm, can I see?

1537028884
DutchGh0st
it has an embed file in it tho

1537028944
DutchGh0st


1537029347
DutchGh0st
the file contains 1130 characters totall

1537029554
andrewrk
I'll look in a little bit

1537032879
unique_id
extern vs packed structs? I have a struct whose fields I want to control the order of

1537032924
unique_id
I know how it works in C/extern, I don't know how packed works

1537033181
andrewrk
unique_id, so i can understand your use case - for what purpose do you need to control the order?

1537033411
unique_id
andrewrk: the fields are of dramatically different sizes and I have atomic ints in there. For that reason I want to be able to play around with the order

1537033428
andrewrk
ah, I see, for cache reasons

1537033434
unique_id
yes

1537033505
andrewrk
unique_id, I think you should use extern for this case until

1537033531
andrewrk
I think your use case is interesting though, it's not perfectly covered by zig's feature set

1537033973
andrewrk


1537038944
kristate
andrewrk: does zig have a u0 type?

1537039210
kristate
i guess it does

1537041699
DutchGh0st
18kB is verry small , right?

1537042097
kristate
640k should be enough for anybody

1537042270
DutchGh0st
the executable is 18k..

1537042550
kristate
DutchGh0st:

1537042668
DutchGh0st
ohmy

1537042706
DutchGh0st
hahaha, maybe it was in the back of mind now you gave that article, I just did not recognize it hahahaha

1537042717
DutchGh0st
how could I forget ^^

1537042739
kristate
DutchGh0st: although to answer your question, yes it is relatively small

1537042750
kristate
$ ls -lah /bin/echo is 18K

1537042767
kristate
$ ls -lah /bin/cat # 23K

1537042853
DutchGh0st


1537042904
kristate
well it's calculating that at comptime

1537042920
kristate
so, at runtime, there really wouldn't be anything there

1537042934
DutchGh0st
so it only holds 2 usizes, and those only get printed

1537043564
andrewrk
unique_id, you could put your struct fields that need to be bundled together in their own struct

1537043584
andrewrk
that will force them to be next to each other (although unspecified which one is first)

1537045818
unique_id
andrewrk: good idea, I might do that. I'm more focused on writing code right now so I have left things as default

1537050506
andrewrk
unique_id, some day I hope we can have Profile Guided Optimization integrated into zig in a clean way and zig would figure out to do these kind of optimizations

1537055287
unique_id
I see that we have @atomicRmw and std.atomic.Int's xchg, but what about compare-and-swap?

1537055403
scientes
unique_id, xchg is compare-and-swap

1537055416
scientes
i mean cmpxchg is compare-and-swap

1537055437
scientes
is there really a xchg that doesn't compare? cause x86 has an instruction for that?

1537055486
scientes
more specifically: compare-and-swap is a way to implement cmpxchg, but most architectures has more performant implementations.

