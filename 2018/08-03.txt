1533259349
unique_id
Creating a vk.xml => vulkan.zig parser now. It's easy, but ugly code.

1533260316
wink_
I need some help. I've created and Actor which can process Messages and each Actor can have different "bodies".

1533260445
wink_
An Actor has a "fn processMessage(self: *Self: msg: *Message)" and I want to be able to create various types of Actors and dispatch messages to them from an ActorDispatcher.

1533260527
wink_
An ActorDispatcher has an array of "actors: [maxActors]ActorPtr" my problem is I don't know how to properly create an ActorPtr so it can be cast or typed properly and invoke "actor.processMessage"

1533260633
wink_
The incorrect code is at line 64

1533260701
wink_
Of course, this may be the totally wrong approach, so any help appreciated.

1533260844
MajorLag
Pretty sure you're going to need to use the interface pattern. Your array will have to be intrusive, pointing into the various structs at some common member (see allocator in std for how this works). In your case, it may just be an array of pointers to ProcessMessage fns.

1533261017
MajorLag
er... actually it'd have to point to a member that's a pointer to the struct's ProcessMessage, and ProcessMessage would have to use @fieldParentPointer to get the parent struct.

1533261356
MajorLag
This is because there's no way at runtime to know what type the array of pointers points to in any given index, so you don't know where its fields are and can't safely access it. But if you point to a member of the struct that is the same type in all of them, and that member in turn points to a function that is specific to the parent type, then that function knows where the member is relative to the parent and can

1533261356
MajorLag
e parent and work with the fields.

1533261886
MajorLag
I suppose another alternative is to make ActorPtr a struct { actor: @OpaqueType(), processMessage: fn(...), }. so it points to the actor and the actor's processMessage(). I haven't worked with OpaqueType much, but I think processMessage would need to take @OpaqueType for self and cast it to the appropriate type. Of course there's no way for the compiler to type check this, so if you mismatch the two in ActorPtr it

1533261886
MajorLag
.

1533261919
MajorLag
*oopsies.

1533274513
tiehuis
Dirkson: I need to review the benchmarks games examples as currently i had only been making sure they compiled with latest

1533274538
tiehuis
when I initially wrote them we didn't have threading support or anything so i figured i'd hold off until we get that (and maybe simd)

1533274561
Dirkson
tiehuis: I didn't have any issues with zig. Oddly enough, it was most of the C stuff that wouldn't compile properly :D

1533274564
tiehuis
i might clean it up a bit over the weekend however

1533274585
tiehuis
i'll review the c reference code i picked and correct those if they aren't working

1533274601
andrewrk
tiehuis, I'll prioritize SIMD in 0.4.0

1533274616
tiehuis
i'm actually getting segfaults on all of them too as well

1533274628
Dirkson
It'd surprise me if they weren't. It's more likely to be something funky with the copy of linux I'm compiling on top of - I've not done much compilation on that machine.

1533274669
Dirkson
tiehuis: Oh. Well, color me surprised then :D

1533274682
tiehuis
i'm only running regular arch for reference

1533274733
Dirkson
I'm on a recent install of musl-based void. I've also got a plain debian machine sitting around, but it objected when I tried to shove zig onto it, and I gave up pretty quick.

1533274766
andrewrk
Dirkson, even the static CI build?

1533274769
andrewrk
that should run everywhere

1533274854
Dirkson
andrewrk: I think I was missing xz, and apt-get install was Randomly Borked when I attempted to install it. Given that that copy of debian's Only Job is to run Unity, I decided that not messing with it was the right call.

1533274871
andrewrk
oh wow, failed due to the xz dependency

1533274885
Dirkson
I know, right? :D

1533274897
andrewrk
noted

1533274910
andrewrk
defaults are extremely powerful

1533274914
Dirkson
I feel like that's a very reasonable dependency. The Right Answer to "I don't have xz" on linux really is "install it"

1533274984
tiehuis
oh right, that's dumb all the c programs take a command-line argument

1533275001
tiehuis
there isn't any error checking in them though so it just atoi's random memory otherwise and crashes

1533275029
Dirkson
tiehuis: Ooooh

1533275054
Dirkson
Yup, that'd explain some things alright.

1533275056
tiehuis
i'll make a helper script to run them with the standard arguments when i clean everything up

1533275216
Dirkson
I was extremely impressed by the poetic nature of my zig/C comparison test. Zig time: 7s. C time: Segfault. It wasn't the answer I was looking for, but it's an important answer to hear nonetheless.

1533275321
tiehuis
made a repository for a few examples for rosettacode.org here:

1533275326
kristate
andrewrk: cool, you're still up?

1533275346
andrewrk
tiehuis is single-handedly going to get us up to the github linguist quota of zig repositories :)

1533275353
andrewrk
hi kristate

1533275360
tiehuis
might be a good place to look if anyone is interested in writing some zig but doesn't want to do anything too large

1533275362
andrewrk
yep late night for me

1533275373
kristate
Hi -- let me push what I've got so far so you can review it

1533275378
andrewrk
ok

1533275379
tiehuis
that's actually part of the reason i have been making a fair few different repos/projects

1533275451
tiehuis
also got the ryu float printing algorithm implemented and works alright as far as i can see

1533275461
andrewrk
exciting!

1533275501
tiehuis
i must say, when porting c code it always irks me how much implicit casting is occurring everywhere

1533275551
andrewrk
one might even call it "hidden control flow"

1533275566
andrewrk
nah, it's just data. but it's hidden data manipulation

1533275622
andrewrk
I just added std.AutoHashMap where you only have to supply K, V

1533275686
andrewrk
because zig can use reflection to figure out a hash function

1533275687
tiehuis
that'd be handy, how do you perform equality comparison? is it just defaulted to '=='?

1533275712
andrewrk
it's a big switch statement on the type. a lot of them are ==. a lot of them are @compileError("TODO")

1533275715
Dirkson
Ah, does zig not have implicit casts? That'd be swell.

1533275746
tiehuis
right, that makes sense i suppose the only thing it doesn't work is when your equality is on only a subset of the type passed but in that case HashMap is fine

1533275753
andrewrk
my plan is for single-item pointer to structs, if you define "equal" and/or "hash" then the auto hash function calls that, otherwise recurses on the fields

1533275780
andrewrk
it's a little hidden magic, but you're kinda asking for that with "Auto"

1533275847
andrewrk
Dirkson,

1533275864
andrewrk
here is a comprehensive list of implicit casts that zig has

1533275879
andrewrk
s/comprehensive/complete/

1533275929
Dirkson
Cool. Thanks!

1533276198
kristate
pushing

1533276243
kristate
ah, let me rebase

1533276330
wink_
MajorLag: txs for the help, I did get something working,

1533276444
kristate
rebased

1533276667
kristate
andrewrk: I am shadowing _ and initing the variable without name

1533276795
andrewrk
kristate, I finished reviewing - are you ready for me to merge it?

1533276815
kristate
andrewrk: I don't have else |_| { } done

1533276824
kristate
andrewrk: wondering what the best way to go about that is

1533276838
andrewrk
oh, is it not the same sort of thing as for and while?

1533276873
kristate
andrewrk: its similar, but there are a few edge cases that I might not be aware of

1533276917
andrewrk
the first thing I would do is try what you did with shadowable and then see if the tests pass

1533276943
andrewrk
btw another place besides for and while, is `if`

1533277036
andrewrk
maybe we should put the logic inside ir_create_var

1533277056
kristate
andrewrk: yes, I wanted to do that, but I couldn't figure out how to get the context

1533277078
andrewrk
which context?

1533277087
kristate
that is if I could test for node->type == NodeTypeForExpr or node->type == NodeTypeWhileExpr

1533277101
andrewrk
I don't think you need to do that test

1533277209
andrewrk
ir_create_var is called from if, while, for, switch, catch with non-null name, which is exactly all the places we need this logic

1533277259
kristate
andrewrk: hmm, so if we have an underscore, then we should automatically shadow it etc?

1533277266
andrewrk
yes, it's a special name

1533277319
kristate
andrewrk: okay, I will ignore bool is_shadowable and Buf *name in the event that name == "_"

1533277390
andrewrk
I think that should work

1533277761
kristate
ok

1533278260
kristate
seems to be working so far

1533278261
kristate
testing

1533278913
kristate
test seem to pass

1533278915
kristate
pushing

1533279108
andrewrk
hmm I don't see the changes

1533279147
kristate
andrewrk: pushed

1533279476
kristate
andrewrk: btw, when will the documentation on the website be refreshed with master ?

1533279498
andrewrk
oh, I have to do that manually currently

1533279500
andrewrk
I'll do it now

1533279509
kristate
cool

1533279971
andrewrk
kristate, merged, and the docs are updated

1533279979
andrewrk
thanks for that fix!

1533280027
kristate
andrewrk: yes!

1533280095
kristate
andrew, it sounds corny, but I think zig is something great and if we put some more polish into it, it would be around for a long time

1533280118
andrewrk
I'm happy that you think that way

1533280150
andrewrk
I for one have made a vow to exclusively use zig for my own open source projects

1533280173
andrewrk
so at least it will be around for as long as I'm alive

1533280251
kristate
andrewrk: I am actually trying to reinvent the Internet from Japan

1533280266
kristate
I built a completely new layer 3 built on secure primatives

1533280273
andrewrk
oh wow

1533280277
kristate
and we have a lot of devices to cover

1533280297
kristate
I am working on it at the university of tokyo

1533280306
andrewrk
that's hardware, right?

1533280310
andrewrk
layer 3 is hardware?

1533280384
kristate
long story short, CPUs were really slow in the 1980s, so vint cerf and others came up with a neat hack: the 32bit IP address

1533280412
andrewrk
I'm about to go to sleep - but I want to hear about your project sometime

1533280420
kristate
but, because the protocol requires engineers to calculate all of the routes and populate routers -- its all memory backed

1533280433
kristate
we use the CPU to calculate the routes in realtime

1533280439
kristate
so, no need for big routers

1533280446
andrewrk
ah interesting

1533280461
andrewrk
that seems less buggy too

1533280466
kristate
it's really cool

1533280502
andrewrk
good night

1533280512
kristate
andrewrk: g:night! thanks for another productive day

1533291012
unique_id
speaking of SIMD, I don't know how popular this will become but there's a kind of shader language for the CPU called ispc (from Intel). The cool thing is that you just write your code in a c-like language from a single SIMD lane point of view and the compiler automatically compiles it for AVX or whatever you like. And it actually achieves super good speedups. For if statements it uses masks. The output is just a .o which you link

1533291013
unique_id
with the rest of your program. Conclusion: ispc allows you to write much larger programs that take full adavantage of SIMD and the greater the line count of SIMD code that you wish to write, the greater the chance that a shader like language like ispc is the right approach for that section of code.

1533291571
unique_id
It's made by Matt Pharr (author of Physically Based Rendering), he has blog entries on "The story of ispc". I just think it's good to be aware of how SIMD-heavy functions might be written in the future, even if this info isn't actionable for us.

1533292934
MajorLag
wink_: Just an FYI, `var self = @intToPtr(*Self, @ptrToInt(aiPtr) - aiPtr.actor_offset)`, the idiomatic zig way to say this is `var self = @fieldParentPtr(Self, "interface", aiPtr)`. It does the identical operation, but without the need to store the offset.

1533309182
wink_
MajorLag: It's always great to delete LoC,

1533309358
andrewrk
unique_id, I'll have a look at that

1533309568
MajorLag
wink_: on another note, I'd never considered creating Actors by wrapping them in a comptime fn returning a new type. I think that might actually be a better approach. I'm going to consider that technique when I next go to update my animation Actor/Action code.

1533310146
wink_
MajorLag: Is it possible to look at your code, maybe I'm re-inventing the wheel?

1533310353
wink_
Is there a succinct word or pharse for a generic function that returns a struct, maybe a "Type Constructor"?

1533310384
unique_id
andrewrk: You can see examples here:

1533310509
unique_id
the problem is that you have to learn the language. It's not the easiest thing in the world. I'll be using this language for some of my simd stuff. It's probably best used for larger programs, anything that Disney/Pixar does, ray tracing, etc

1533311065
MajorLag
wink_: I haven't put that code anywhere yet because I'm not happy enough with it, but it doesn't do message passing so I don't think you're duplicating effort. It queues and applies interpolations and sequences to members of actor structs over time. It's somewhat based on LibGDX's Actor/Action model.

1533311255
wink_
MajorLag: let me know if/when you do. You say you don't pass messages, but you say "queues interpolations" that seems like a message to me? Note: no nothing about libGDX, but will investigate today.

1533311668
MajorLag
Actions directly manipulate the actor's members. My current actor implementation keeps a list of actions applied to it, and runs each action every frame until the action reports it has completed. Some actions are compound actions, like sequences, which are themselves lists of actions. Most of them are just applying interpolations. you can see the result:

1533311988
wink_
cool gif!

1533312032
wink_
Is an "actor member" a function or data?

1533312377
MajorLag
data. It's literally the members of the struct. here's some example usage of constructing actions:

1533312637
MajorLag
I should also note for readability, `const MemberList = []const []const u8;`, so actions.MemberList is an array literal. This is because varargs don't work at comptime currently.

1533312701
MajorLag
Oh boy, it's been so long since I've worked on this code that it still uses SDL.

1533312736
andrewrk
what do you use now? glfw?

1533312771
wink_
SDL ==

1533312955
unique_id
I'm 700 lines into my vk.xml => vulkan.zig converter, it's going great.

1533312986
unique_id
looking forward to perfect vulkan bindings for vulkan

1533312990
andrewrk
:)

1533312991
unique_id
zig*

1533313168
andrewrk
unique_id, do you have a generic xml tokenizer?

1533313175
andrewrk
that might be nice to have in the std lib

1533313208
andrewrk
full parsing is probably out of scope, but tokenization is nice and simple and unchanging

1533313319
unique_id
nope, I made a small parser (without tokenization) that's adequate for vk.xml. We could learn from:

1533313326
unique_id
mit licensed

1533313808
MajorLag
wink_, andrewrk: Yes, that SDL. I've converted most of my projects to straight win32 api calls and OpenGL right now (though just to dump a framebuffer to screen). When I start doing something more serious on the gamedev front I'll probably write my own proper platform layer in pure zig.

1533313903
andrewrk
MajorLag, would you use this, if it wasn't vaporware?

1533313991
bheads
I think a ZDL would be another good killer app project for zig

1533314678
MajorLag
andrewrk, possibly. It would depend on the API. From what I've seen of how zig's std lib is structured, with abstractions that you can bypass when need be, I think I probably would. I'd be interested in contributing to some kind of "ZDL" project.

1533314767
MajorLag
I switched from SDL not due to any real difficulty, it was more out of a desire to be completely free of C. Oh, and I didn't want the dll dependency.

1533314807
andrewrk
yeah, that's a really nice benefit on windows

1533314818
andrewrk
I got your installation process right here. it's an exe file. just run it

1533314836
andrewrk
I mean, the exe file is the app. there is no install process

1533314851
bheads
and 5gigs of assets

1533314876
andrewrk
those can go in the exe

1533314893
bheads
lol

1533314910
bheads
how do you update anything?

1533314915
bheads
or install mods!

1533314921
andrewrk
yeah it's a bad idea. you got me :)

1533314924
MajorLag
Yeah, I really dig that. I'm  a fan of AppBundles, AppDirs, static exe-only programs, and AppImage.

1533314947
bheads
need to get flatpaks to run on windows and osx

1533314953
MajorLag
bheads: updates are binary diffs. That's how AppImage does it.

1533314966
bheads
binary diffs scar me

1533314967
MajorLag
flatpak an snap are vastly overengineered in my opinion.

1533314988
MajorLag
If your game is mod-friendly though, you do probably want more of an AppDir than a single-exe.

1533315023
bheads
I do like app bundles but there is a ton of file dup

1533315062
bheads
I use to work on a back up product.  We found so much duplication accross machines

1533315069
unique_id
For as long as double clicking an AppImage brings up a Disk Writer tool (until you tick the executable bit), AppImage will remain yet useless for the average computer user

1533315075
bheads
which we only backed up once and charged for every instance

1533315084
MajorLag
Not to get into an offtopic argument about it, but that duplication is a good idea in my opinion because it means there will never be any conflicts. Share base system libs, but nothing else.

1533315089
wink_
MajorLag: as an FYI I'm attempting to implement Actor Model (

1533315126
bheads
snaps and flatpaks can handle to duplication in a better way

1533315186
bheads
ie:   base image + llvm6 image + zig 0.2 image = zig 0.2 pak

1533315192
MajorLag
wink_: it's tied up in the Scene2d scenegraph portion.

1533315203
wink_
txs

1533315251
bheads
Why have 50 copes in the app bundle of the same dynamic libs

1533315360
andrewrk
why have dynamic libs

1533315369
bheads
:D

1533315369
MajorLag
wink_: I really like the way LibGDX structured their API. It's all in layers that you're free to choose where you want to interact with it. It's base is straight OpenGL, upon which are Textures => TextureRegions => Sprites => Actors => Widgets => GUI elements => Scene graph.

1533315413
bheads
andrewrk: 100% aggree

1533315414
MajorLag
bheads: again, not to get into an argument about it, but suffice it to say I disagree about the value of that deduplication compared to the disadvantages of overengineering the solution.

1533315482
bheads
MajorLag, so you can get paid 100k a year in devops :)

1533315584
MajorLag
wink_: I wrote two games in LibGDX and several prototypes and only stopped because I got sick of Java's BS.

1533317295
wink_
Which part of Java was most offensive?

1533317417
wink_
(Actually, that's probably some what off topic, so never mind)

1533333925
andrewrk


1533338013
unique_id
nice!

1533339730
andrewrk
unique_id: after I clean this up a bit, I'm going to look into hot code swapping

1533339740
andrewrk
This is 90% of the work

