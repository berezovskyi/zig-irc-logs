1524358854
achambe
andrewrk: do you have an idea of what you want to base a package manager on?

1524359025
achambe
looking at buildbot at the moment for the less conventional platforms. Python support seems to be a common denominator.

1524359298
achambe
oh, the travis build servers are actually pretty beefy.

1524361538
GitHub65
[zig] tgschultz opened pull request #939: DirectAllocator alignments > os.page_size on posix (master...large-alignment-directalloc)

1524362308
alexnask
@andrewrk Is there any way to inline varargs into a function call?

1524362394
alexnask
Here is my usecase (this is a call function for DirectSound COM objects)

1524362398
alexnask


1524362482
alexnask
Otherwise I'll probably switch on the args.len and repeat the call with multiple versions using indexing on the varargs

1524365312
achambe
neat, the compiler builds on openbsd

1524381648
achambe
andrewrk: trying to work out how to do another build profile for openbsd

1524381653
achambe
since its nested inside linux on travis haha

1524381756
achambe
painfully slow in qemu, but I generate an image that can be used for CI either in a VM, or launched on something like amazon/google cloud. And have a script that also runs the build under qemu

1524382761
GitHub108
[zig] BraedonWooding opened pull request #940: Functional Module: Map/Reduce/Filter (master...Functional)

1524385517
achambe
heh, C++ build times are just terrible

1524385531
achambe
but i don't think it will timeout

1524387578
GitHub58
[zig] andrewchambers opened pull request #941: Openbsd ci (master...openbsd_ci)

1524388038
achambe
yup, it times out haha

1524389018
achambe
andrewrk: I sent you an email, but I think I was mistaken in it

1524392077
alexnask
2296 bytes for a fullscreen window + DirectSound initialization, things are getting pretty tight already :P

1524392217
alexnask
@andrewrk The symbols produced through .def files have an underscore prefixed and for each one of them a jmp to the actual function is generated

1524392296
alexnask
Actually, I'm pretty stupid, I guess this is expected with DLLs

1524398541
alexnask
Are there any thoguhts on standarizing an Iterator interface type?

1524400110
alexnask
Here is an example of a mostly automated way to create interfaces once @riefy is available (with an example Iterator interface):

1524400200
alexnask
Ir emoves the need for an interface implementation to include a vtable field

1524400253
alexnask
Instead, the interface type holds a reference to the object (this is interface-dependant, you could store the object inline or have some small buffer optimization + heap allocation)

1524400270
alexnask
+ a pointer to the vtable which is automatically generated for each object type passed in

1524400395
alexnask
In this example, any type that has a 'fn next(&Self) ?T' method can be passed in to Iterator.init and have its vtable automatically generated at comptime.

1524400413
alexnask
While the 'fn reset(&Self) void' function is optional

1524400417
alexnask
method*

1524400828
alexnask
This is a great way to separate the implementation type from the interface/vtable type, all the user has to do is write an implementation with the functions the interface require and then pass it in to the interface's init method

1524400868
alexnask
(Also, the reverse, you can write an interface and have it accept types defined in other libraries, etc...)

1524413940
andrewrk
hi achambe

1524414820
GitHub69
[zig] andrewrk pushed 1 new commit to master:

1524414820
GitHub69
zig/master a3e9ae8 Andrew Kelley: travis: use encrypted env vars for s3 credentials

1524415769
GitHub90
[zig] andrewrk closed pull request #939: DirectAllocator alignments > os.page_size on posix (master...large-alignment-directalloc)

1524415769
GitHub160
zig/master 3010668 Andrew Kelley: Merge pull request #939 from tgschultz/large-alignment-directalloc...

1524415769
GitHub160
zig/master a1083b0 tgschultz: Added DirectAllocator support for alignments > os.page_size on posix systems

1524415769
GitHub160
[zig] andrewrk pushed 2 new commits to master:

1524421777
MajorLag
andrewrk: alignment > page size came up for me recently because I'm writing an allocator and stealing a concept from rpmalloc: if you align your span headers to i.e. a 64kb boundary then you can find them from any slice passed to free with a single instrution.

1524421908
andrewrk
neat

1524421935
andrewrk
I'm about to merge your time PR. just playing around with aux vectors and seeing if I can get the vdso hooked up

1524422006
MajorLag
there's one more small thing I should do on that: change the Windows error checking to check for windows.FALSE instead of 0, just for clarity.

1524422090
andrewrk
I've merged your changes in a branch, can you show me the diff and I'll apply it locally?

1524422113
MajorLag
k, it's like, 3 lines changed it's a tiny thing

1524422129
andrewrk
hmm, one of the auxilery vectors is the os page size

1524422147
andrewrk
but I think it's pretty valuable having page size available as a comptime constant

1524422157
andrewrk
maybe we'll just assert that we didn't get it wrong

1524422202
MajorLag
yeah. once you start looking at page size at run time you're probably more interested in hugetables anyway.

1524422330
andrewrk
auxv comes with a random seed too, that's nifty

1524422342
andrewrk
we could potentially save a call to getrandom()

1524422472
MajorLag
andrewrk:

1524422552
andrewrk
thanks, applied locally

1524423364
andrewrk
random thought: std.debug.warn can be made simultaneously thread-safe and better performance by using writev

1524431637
alexnask
Can I cast a slice from a type to another?

1524431648
alexnask
Or should I initialize a new slice and set .ptr and .len correctly?

1524432218
achambe
andrewrk: yeah, the qemu approach with ccache on travis sort of works haha. the bonus with how it is setup is that doing linux arm is probably really similar

1524432413
andrewrk
achambe, awesome

1524432456
achambe
the time limits on travis are the biggest risk, as it is currently it needs a few failed builds to warm that ccache cache

1524432504
andrewrk
I think your build bot idea is going to be the realistic answer here

1524432512
achambe
yeah

1524432532
andrewrk
another  nice thing about this is that I can use your script to do OpenBSD development in qemu

1524432553
achambe
yeah, i know its not so easy for people who haven't installed it before.

1524432572
achambe
I have automated a freebsd install in the past too, but lost the code unfortunately

1524432713
achambe
i don't think it is urgent to merge or use it yet. but its a good reference for the future

1524432746
andrewrk
achambe, yeah, even if we close it for tidyness, we can link to it from the open issue for openbsd support

1524432785
achambe
openbsd is also slow changing enough i think the script will be valid in 1

1524432789
achambe
year or more

1524432791
hryx
Hello! Silly question: I'm having trouble initializing a two-dimensional array with the ** syntax. Is it possible to do so?

1524432804
andrewrk
hi hryx

1524432808
hryx
There are good examples of 1d arrays in the docs, but I didn't find much for 2d arrays

1524432813
andrewrk
questions are welcome here

1524432824
hryx
Fantastic~

1524432827
andrewrk
let me come up with an example

1524432886
andrewrk
one way to do it is to create an array of column, and multiply that by the row. like this:

1524432977
hryx
I see - you create and initialize the row first, then the columns in a separate statement

1524432979
hryx
I'll try that

1524433262
alexnask
@andrewrk Is casting a []T to a []V valid or am I doing something hacky?

1524433397
hryx
the Tetris snippet uses []T, but when I try [32]T it does not like it:

1524433403
hryx
Does ** only work for slices?

1524433563
andrewrk
alexnask, you have to cast through []u8 first to avoid breaking strict aliasing rules

1524433593
alexnask
Right, I'm casting from []u8 so everything should be fine

1524433596
andrewrk
hryx, try removing the 'w'

1524433611
andrewrk
const empty_row = []u8{'a'} ** w;

1524433651
andrewrk
var grid = empty_row ** h;

1524433684
andrewrk
so you're making a [1]u8  and multiplying it by w to make a [w]u8

1524433695
andrewrk
then multiplying that by h to make a [h][w]u8

1524433729
andrewrk
alexnask, that inserts a runtime safety check to make sure your []u8 len is divisible evenly by @sizeOf(T)

1524433758
andrewrk
and then it adjusts the len property of the new slice for you

1524433789
hryx
Ah! ok, I'll try that

1524433866
hryx
Interesting, does the `for` construct only work on slices, not [x]T types?

1524433883
hryx
e.g. for (somearray) |thing| {...}

1524434001
hryx
By the way, my end goal here is to be able to address (and mutate) a 2d array: grid[x][y] = 'a'

1524434007
hryx
I'll study your Tetris code more closely

1524434020
andrewrk
hryx, for works on arrays as well as slices

1524434047
hryx
👍

1524434066
andrewrk
the array syntax is admittedly a little clunky - we have a couple issues open to address it

1524434623
hryx
Got it working. Awesome help, thanks a big ol' basket

1524434952
andrewrk
np, happy hacking

1524434957
andrewrk
is your work open source?\

1524434994
andrewrk
MajorLag, I got the vdso working :) about to push

1524435022
hryx
Me? I'm just dipping my toes into Zig, so there's nothing to share yet :> But eventually, yeppp

1524435044
hryx
had a long-running C project which I'm thinking of porting to zig

1524435045
andrewrk
hryx, fun. if you push anything, feel free to drop a link here and I'll keep my eye on it

1524435055
hryx
will do sir!

1524435253
andrewrk
all aboard the merge train

1524435257
GitHub164
[zig] andrewrk closed pull request #933: Std.os.time (master...std.os.time)

1524435257
GitHub27
[zig] andrewrk pushed 2 new commits to master:

1524435257
GitHub27
zig/master 371a3ad Andrew Kelley: Merge branch 'tgschultz-std.os.time'

1524435257
GitHub27
zig/master 7af6ed3 Andrew Kelley: add alignment docs

1524436779
MajorLag
Oh I see, you do the vDSO lookup in the bootstrap, that makes snese.

1524437772
andrewrk
MajorLag, not quite - we copy the aux vectors in the bootstrap which gives us the VDSO address, but then we do the lookup in the first clock_gettime call

1524437817
MajorLag
I guess I didn't read far enough.

1524438721
GitHub197
[zig] andrewrk closed pull request #891: Type Independent String Functions (master...StringUtils)

1524439541
GitHub126
[zig] andrewrk closed pull request #940: Functional Module: Map/Reduce/Filter (master...Functional)

1524440405
GitHub159
[zig] BraedonWooding opened pull request #944: Just a few std.mem changes (master...MemChanges)

1524440419
hryx
Must all struct methods have a `self` parameter? The Vec3 example in the docs has a `pub fn init()` which doesn't. Is `init` a specially-recognized method name?

1524440469
MajorLag
no, init doesn't take a self parameter because it doesn't act on an existing struct instance, so it doesn't need one.

1524440516
MajorLag
these aren't really 'methods', they're just regular functions in the struct's namespace.

1524440551
hryx
Can any function inside a struct's namespace be defined either way, then (init isn't special)?

1524440600
hryx
i.e., if I supply a `self`, it's a method, and if I don't, it's not?

1524440682
MajorLag
there are no methods. As a convenience, you can call "instance.function()" and the instance will be passed as the first parameter implicitly, but otherwise they're all just regular functions

1524440740
hryx
I see. I think what I was missing is that the example calls `Vec3.init(...)`, where Vec3 is the type name, not an instance of Vec3

1524440759
MajorLag
there's some related info here:

1524440852
hryx
Great, thanks MajorLag. I actually like the way it works, just got thrown off because the distinction between SomeType.func() and some_instance.func() wasn't too clear in the docs

