1538726395
euantor
Awesome, thanks tiehuis. I did have the compiler building but then failing tests, but I'm now not even getting that far

1538726467
euantor
I'm getting `Unable to create builtin.zig: invalid format` when trying to run `./zig build --build-file ../build.zig test -Dskip-release-small`, which seems to be another CPP problem

1538733834
tiehuis
halosghost: i actually have a big rational implementation here:

1538733859
tiehuis
the only thing that needs to be done for an initial version is to change the paramater passing to fit that of big.Int in std

1538733882
tiehuis
and to fix a bug in big.Int (which i have been meaning to file or solve for months) in the division code

1538740032
DutchGh0st
export fn printing(noalias buf: [*]const u8, len: usize) void <--- this does not compile?

1538740036
DutchGh0st
or well, compilation hangs

1538740097
DutchGh0st
oh, it finished, that took some time?

1538747355
andrewrk
DutchGh0st, are you sure that wasn't rust/cargo?

1538747521
DutchGh0st
nope, that was just 'zig-0.3.exe build-lib hello.zig'

1538747567
DutchGh0st
Not sure why it hung that one time, now its just fast

1538761150
andrewrk
if I pull of this coroutine rewrite as planned, zig will support stackless heapless functions

1538761653
Jenz
What does the * in the c string type: `[*]const u8` mean?

1538761691
andrewrk
Jenz, it means: at the address pointed to, there are an unknown number of contiguous items

1538761760
Jenz
andrewrk: Ok, thanks; makes sense

1538761776
andrewrk
after

1538761845
Jenz
I like that better :D

1538762043
bheads
how would stackless work?

1538762087
andrewrk
bheads, status quo coroutines are stackless

1538762105
bheads
right, but they get memory from some allocator right?

1538762114
andrewrk
right

1538762127
bheads
which is either stack or heap memory...

1538762138
bheads
so you said coros without any memory

1538762149
andrewrk
fair, that's a bit misleading. the memory has to go somewhere

1538762164
Jenz
andrewrk: Some projects has things like "good first issue"s, anything similar for newcomers in zig?

1538762199
Jenz
Personally; Im terrible at C++, new to zig; and not really sure if there's any way at all I can help out ATM

1538762204
andrewrk
bheads, but in the rewrite, coroutines are not coupled to allocators - you pass a pointer to the frame when you async call a function

1538762223
bheads
ah so you can just pass the frame

1538762243
andrewrk
I think it's going to be a big deal, if I can only figure out how to make async function pointers work

1538762267
andrewrk
...which is the same problem as how to make regular function pointers work with

1538762294
andrewrk
Jenz, one of the best things you can do is to simply have a project in zig that you're working on

1538762306
andrewrk
and then report bugs and use cases that zig doesn't handle very well

1538762334
Jenz
Yeah ok, thanks again :)

1538762346
Jenz
Then I'll just keep doing what Im doing

1538762349
andrewrk
:)

1538762467
bheads
humm... recurrsion is really hard to solve...  I can think of ideas for the simple cases but the hidden recursion sucks

1538762531
andrewrk
bheads, yeah. I've solved recursion when the function being called is not a pointer (when the compiler knows what function you're calling at compile time)

1538762554
andrewrk
but recursion + async + function pointers is a tough nut to crack

1538762556
bheads
would if detect more complex recursion

1538762578
bheads
like a-> b->c ->d ->(a or b)

1538762590
bheads
stuff like this?

1538762592
andrewrk
yeah it would just detect a call graph cycle and force you to use stackless functions (coroutines) for the recursion

1538762601
bheads
okay cool

1538762606
andrewrk
but I haven't solved recursion + function pointers

1538762646
andrewrk
my first thought was that you could jsut annotate the set of functions that a pointer

1538762653
bheads
for fn pointers I think you have to detect the cycle in runtime

1538762660
andrewrk
but that defeats the point of e.g. an Allocator interface or OutStream interface

1538762676
andrewrk
oh that's interesting. I hadn't considered that

1538762689
andrewrk
so the compiler would know there is a potential cycle, and insert a safety check

1538762690
bheads
in debug mode you can mark each stack frame

1538762752
andrewrk
we'd have a way to anotate how many cycles were allowed

1538762764
andrewrk
so that the compiler could count that in its stack size consideration

1538762776
andrewrk
and then going beyond that trips a runtime safety check

1538762787
bheads
that would be really cool

1538762800
bheads
and turn it all off in release mode

1538762805
andrewrk
of course

1538762815
andrewrk
on in ReleaseSafe mode though!

1538762817
DutchGh0st
how does `some_number / comptime_int` work?

1538762826
bheads
lol

1538762835
DutchGh0st
because Im trying divExact, divTrunc, but somehow something seems to go wrong

1538762908
bheads
I think all constant numbers are comptime_

1538762924
bheads
and the compiler does the casting checks

1538762931
andrewrk
DutchGh0st, do you have a code example that is giving unexpected results?

1538762956
DutchGh0st
it might be I screwed up, but 2 seconds, Ill push it

1538763093
DutchGh0st


1538763115
DutchGh0st
dont look at itoa_u64, it forwards to itoa(),

1538763209
DutchGh0st
the numbers 1, 0, 0 should be written into `buf` in the test, but I screwed up something I guess?

1538763249
andrewrk
DutchGh0st, itoa_u64(n, buf[0..].ptr, 3), this could better be written itoa_u64(n, &buf, buf.len)

1538763298
DutchGh0st
ah yeah

1538763316
bheads
or just passed as a slice

1538763344
DutchGh0st
[*]T also takes slices?

1538763350
bheads
[]T is a slice

1538763362
DutchGh0st
but I have a star in the braces,

1538763374
bheads
if you know the length its safer to use a slice

1538763384
DutchGh0st
but that is not C compatible

1538763388
andrewrk
the code is calling an extern function

1538763415
bheads
ah your making a c interface

1538763421
bheads
god I hate

1538763423
bheads
C

1538763448
DutchGh0st
the idea was to make 1 generic function for converting numbers into a sequence of bytes, and then verry quickly write like 'itoa_u64', 'itoa_u32' etc

1538763512
andrewrk
DutchGh0st, I haven't figured anything out, but have you tried using @compileLog to debug your comptime code?

1538763525
DutchGh0st
@compileLog, I FORGOT ABOUT THAT

1538763531
DutchGh0st
thanks :)

1538764134
DutchGh0st
@divExact does not modify the numbers you put in, right?

1538764160
andrewrk
DutchGh0st, correct

1538764286
Jenz
Is there a way to programaticalyl get the type of os.args() ?

1538764325
andrewrk
Jenz, I don't understand the question, can you elaborate on what you're trying to do?

1538764390
Jenz
Hehe, very -- what should I say... -- hotelesque way of putting it :P

1538764411
Jenz
Nvm. Im just a bit of an idiot

1538764442
Jenz
(I know "hotelesque" is not at all a word)

1538764452
DutchGh0st
while(n != 0) ({n -= 1;}) {} <-- does that check the condition, subtracts 1, and THEN does the body?

1538764458
DutchGh0st
or, check, body, substract?

1538764748
andrewrk
DutchGh0st, check condition, body, subtract one, repeat

1538764765
andrewrk
consider that the point of the expression is that `continue` will execute it

1538765246
DutchGh0st
Im a dummy

1538765251
DutchGh0st
you know what I tested?

1538765266
DutchGh0st
bytes in the form as a charcter, representing a diget

1538765269
DutchGh0st
vs a raw number

1538765276
DutchGh0st
and 0 in ascii is 48

1538765277
DutchGh0st
xD

1538765283
andrewrk
ahhh

1538765285
DutchGh0st
and not 0

1538765301
DutchGh0st
still my loop condition was wrong

1538765327
andrewrk
you forgot these

1538765376
DutchGh0st
yeahhh exactly

1538767380
DutchGh0st
Finally

1538767381
DutchGh0st
fixed it

1538768344
DutchGh0st
cant convert a bytes-slice into a ' [*]u8' ?

1538769597
andrewrk
DutchGh0st, slice.ptr

1538769625
DutchGh0st
but from an array you can go directly to [*]u8 ?

1538769638
DutchGh0st
that is, an array of u8's

1538769678
andrewrk
you can implicit cast from *[N]T to [*]T

1538769694
andrewrk
pointer to an array to an unknown length pointer

1538770781
DutchGh0st
how do you do powers of 10 of a usize?

1538770819
DutchGh0st
I want to write `10 ^ 4`

1538770833
DutchGh0st
10 to the fourth

1538771110
andrewrk
std.math.pow

1538771133
andrewrk
hmm we only have floating point pow functions

1538771144
andrewrk
I think we're missing an integer pow function

1538771146
DutchGh0st
:(

1538771164
andrewrk
you can implement it like this

1538771196
DutchGh0st
comptime N; type, num: N, pow: usize -> N

1538771244
andrewrk
fn pow(base: usize, exp: usize) usize { var x: usize = base; var i: usize = 0; while (i < exp) : (i += 1) x *= exp; return x; }

1538771311
andrewrk
that's at least correct. maybe there's a better implementation

1538771349
andrewrk
oops, this is wrong, but you get the idea

1538771373
andrewrk
I'm not sure there's actually an O(1) solution

1538771431
andrewrk


1538771676
andrewrk
that's pretty O(1)

1538771701
andrewrk
technically my code is too if you consider that exp can't really be > 64

1538771952
halosghost
I wish O(1) space-complexity data structures were more common

1538772651
jfondren


1538772690
jfondren
f.e., you add a payment method later on, and zig tells you about all the switches you have to update to handle the new payment.

1538772726
andrewrk
jfondren, ah, yes. apologies if I mislead you before

1538772749
andrewrk
what is ML? Machine Learning? Mat-Lab?

1538772760
jfondren
nobody mislead me :) first time I'm mentioning it. I just thought they weren't in the language since there wasn't mention of them

1538772794
jfondren
Robert Milner's language ML. like Standard ML, OCaml. Although lots languages have these kind of types

1538772810
jfondren
it's how FP langs implement optional types, usually.

1538772872
jfondren
in ML they compile to structs (or ints, when there are no arguments) with an int field that says which constructor you have, which is what gets switched on at runtime

1538772902
jfondren
I imagine this Zig code is compiled to something a little different, but that's not as important

1538772947
andrewrk
jfondren, not that it matters too much but you can replace union(Payments) with union(enum) and have the tag type inferred

1538773029
jfondren
cool, ty

1538773648
jfondren
*Robin Milner

1538775494
andrewrk
ok here's a crazy idea

1538775504
andrewrk
calling a function pointer requires special syntax

1538775513
andrewrk
one does not simply call a function pointer

1538775613
andrewrk
when you call a function pointer, use @fnPtrCall(comptime required_stack_bytes_upper_bound: usize, function: var, args: ...)

1538775645
andrewrk
runtime safety checks to make sure that the actual function called, its stack requirements do not exceed the value

