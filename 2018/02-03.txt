1517620659
andrewrk
Just got off a 5 hour plane ride. I almost have error sets done. This is gonna be great

1517629194
tiehuis
awesome, will be interested to play around with it. I've made some decent progress on a regex implementation, too:

1517638913
MajorLag_
andrewrk, you around?

1517663607
tjpalmer
andrewrk, sounds great!

1517663628
tjpalmer
tiehuis, also sounds great! Is it compile-time parsed?

1517671326
MajorLag_
huh, actually, this isn't the comptime loop unrolling bug afterall

1517671335
MajorLag_
it's a completely new bug

1517675488
hasen_judy
has anyone tried using freetype with zig?

1517676000
GitHub139
[zig] andrewrk closed pull request #734: Made Zig support tabs (master...master)

1517676151
hopppetosse
I'd very much like to be able to store sets of function arguments

1517676171
hopppetosse
sorry, that was meant to be up on a terminal =P

1517679822
MajorLag_
andrewrk: @TagType throws a compiler error when used on an extern union. I am unaware of a way to differentiate between extern and non-extern unions in reflection code, so cannot branch out of this.

1517679886
MajorLag_
The first solution that comes to mind is having @TagType return void in this instance

1517680262
MajorLag_
Interesting note: @tagName reveals the secret tag in a simple union.

1517691537
tjpalmer
tiehuis, well I guess that example won't be parsing regexps at compile time. But do you support that, too? And I haven't explored comptime much in zig. Would be possible today without hacking the compiler to generate code from a regexp?

1517691777
tiehuis
tjpalmer: the only thing needed is some sort of comptime allocator to allocate the nodes of the expression tree. otherwise all the parsing should actually be fine.

1517691835
tiehuis
It would be straight-forward to do an example backed by a fixed comptime sized array to test this.

1517691906
tiehuis
that would have a different interface of course, but to test that everything works at compile time

1517698958
jfo
andrewrk: I am curious about some things wrt structs and fns v "methods", small write up here :

1517699879
MajorLag_
>> // why isn't this internal to the struct? `pub` seems to not matter here.  Pub lets importers use it

1517700304
jfo
it's the same effect if I import it though. the pub annotation on the struct itself works as expected but there seems to be no distinction inside the struct definition

1517700827
MajorLag_
huh, ok, I didn't realize that.

1517701171
jfo
my expectation would be for the pub keyword to expose "static" and/or "instance" methods outside the struct definition block

1517701183
jfo
terms being used loosely but, I think, appropriately

1517701336
jfo
(probably also "methods")

1517701400
jfo
I'm curious about the internals of structs actually now that I think about it. Does every instatiation carry around its own "method" copies? or is that optimized to a single function address?

1517701514
MajorLag_
the "methods" are just regular namespaced functions. The instance.func() syntax passes &instance as the first parameter (if it can) as a convenience.

