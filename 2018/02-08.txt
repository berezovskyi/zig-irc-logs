1518054399
SimonNa
jfo1: thanks for the quick fix for 'zig build', I already tried it :)

1518074372
GitHub171
[zig] tiehuis opened pull request #755: Add ArrayList functions (master...arraylist-additions)

1518097231
jfo
SimonNa: np! I had already noted it was suboptimal but you were right it was especially not friendly to new users.

1518106966
GitHub39
[zig] andrewrk pushed 1 new commit to master:

1518106966
GitHub39
zig/master 1c236b0 Marc Tiehuis: Add ArrayList functions (#755)...

1518106967
GitHub42
[zig] andrewrk closed pull request #755: Add ArrayList functions (master...arraylist-additions)

1518122199
MajorLag_
Attempting to do things of dubious utility is a good way to surface compiler bugs, I'm finding.

1518122568
andrewrk
yeah. we'll get those edge cases ironed out eventually, but it makes more sense to focus on bigger picture issues while things are unstable

1518123350
MajorLag_
wait, so returning var is something you want to allow? How would that work? What if the function chooses a different type to return depending on runtime conditions?

1518124307
MajorLag_
I suppose you just don't allow that. That'd make sense.

1518124380
andrewrk
MajorLag_, then it gets resolved the same way if your switch prongs have different types, or if an if-else statement body and else have different types

1518125143
MajorLag_
If I understand correctly, that means which type is being acted on has to be determinable at compile time, correct?

1518125158
andrewrk
yes

1518125187
andrewrk
but you can, for example, return null from one place and i32 from another place, and this gets resolved as ?i32

1518125221
andrewrk
in the compiler code we call this "peer type resolution"

