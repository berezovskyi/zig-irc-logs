1524269600
MajorLag
ugh, comptime bugs...

1524270351
MajorLag
...and it makes no sense. great.

1524291052
GitHub158
[zig] andrewrk pushed 2 new commits to master:

1524291052
GitHub158
zig/master c4840d7 Andrew Kelley: add test case for #936

1524291052
GitHub158
zig/master 1098545 Andrew Kelley: std.zig.parser: remove unused field

1524306513
alexnask
Can I print a C-style string with std.debug.warn?

1524306535
alexnask
Or should I wrap it up in a slice?

1524312355
MajorLag
have to wrap it. Std.c_str has a convenience function: `warn("{}\n", c_str.toSliceConst(str));`

1524312466
alexnask
Right, I just inited a u8 slice since the function I used returned the size too directly, no need to strlen it

1524312620
alexnask
This is so weird, I can get a simple OpenGL window up and going with wglCreateContext but when I use wglCreateContextAttribsARB to get a newer version of OpenGL I get no window

1524312647
alexnask
(and the rendering context returned is non-null)

1524312684
MajorLag
again, something pointer reform should help with. [*]null const u8 will be known to have a null terminator so fmt can deal with it automatically.

1524312730
alexnask
It works now wtf :P

1524312744
alexnask
(the modern OpenGL context)

1524312933
MajorLag
that's... not supposed to happen?

1524312940
MajorLag
threading or driver issue?

1524312968
alexnask
I think I forgot to release the dummy window (for the OpenGL loading) DC

1524312990
alexnask
(Before destroying it)

1524313003
alexnask
Although I don't quite see how it stopped the window from showing up :p

1524318956
alexnask
What is the recommended way to get a &T out of an array? I would think it is implicitely convertable but it doens't seem to be, I just use &array[0] for now

1524318979
MajorLag
array is an array of T or &T?

1524318989
alexnask
Array of T

1524319018
MajorLag
then &array[index] is correct, as far as I'm aware.

1524319068
alexnask
I know it's correct, I would just think 'array' would implicitely convert to a pointer to the first element

1524319070
alexnask
Eh, w/e :P

1524319199
MajorLag
slices have a .ptr member: &slice[0] == slice.ptr.

1524319250
alexnask
I know, arrays don't appear to have one, I guess I could do array[0..].ptr too, it was more of a question about the idiomatic way to do stuff :)

1524319260
MajorLag
so I suppose you could make it even worse: array[0..].ptr;

1524319412
MajorLag
well slices are structs behind the scenes (check their TypeId), arrays aren't.

1524320489
MajorLag
though they do have a .len pseudo-member, so they could have had a .ptr one too

1524320920
alexnask
I think I figured out where all my issues came from

1524320931
alexnask
the wgl* functions are stdcallcc rather than extern

1524320945
alexnask
Should have checked earlier >.<

1524321027
alexnask
Yup, works like a charm now

1524322143
alexnask
@MajorLag All the OpenGL functions are missing "opengl32" and stdcallcc in your package

1524322151
alexnask
Editing, will be included in my patch

1524322901
MajorLag
all winapi calls are stdcallcc. I guess I missed it because it worked fine on win64 due to stdcallcc being the calling convention anyway.

1524322997
MajorLag
and I think you only have to provide the name if you're not linking to OpenGL32.lib? I recall having some issue around that.

1524323395
alexnask
Well the names next to extern make zig export the symbols to .def files

1524323402
alexnask
So that we can build a leaner .lib for the library

1524323439
alexnask
And actually in my case I need to link with both the generated .lib and the system .lib to have everything work file

1524323467
alexnask
I appear to have symbols with underscores in front of them defined in the generated .lib that just jmp to the symbols in the system .lib, not quite sure what is going on with that atm.

1524337403
andrewrk


1524337681
MajorLag
A zig playground?

1524338220
andrewrk
yes, made by a third party

1524338263
alexnask
Is there any way to make translate-c not process #include's?

1524338292
andrewrk
alexnask, can you explain a bit more about your use case?

1524338343
alexnask
Sure, I'm currently making some DSound bindings and I would like to only process definitions in dsoud.h and not the rest of the windows headers it includes

1524338454
alexnask
I can probably pick out the definitions I need by hand pretty quickly, I'm just wondering if it is possible

1524338571
andrewrk
I see

1524338625
andrewrk
no there's no way to do that

1524338638
alexnask
Ok, good to know, time for cherrypicking!

