1522455879
MajorLag
man, llvm takes freaking forever to compile.

1522455959
hoppetosse
is there a way to get the compiler to only emit code in the root source file?

1522455981
hoppetosse
MajorLag: it's particularly painful when it fails

1522456026
tiehuis
the docker image used to do the entire llvm/clang/zig compile in one step which was really bad if you forgot a cmake flag for zig or something at the end

1522456103
hoppetosse
more specifically, I know overriding the default panic function can get rid of the cruft in the --verbose-* things

1522456123
hoppetosse
are there any other ways to reduce the amount of output to only user defined, non-std code

1522456210
tiehuis
what is the purpose of this by the way? i had some similar troubles when trying to get okay output for zig on compiler-explorer

1522456240
tiehuis
i ended up just exporting via the c-abi, although that still pulled in other code so not exactly the same

1522456268
MajorLag
hoppetosse, that reminds me, I should double check there's enough space on this vm disk

1522456301
hoppetosse
I was about to say I once ran out of space on my vm

1522456321
hoppetosse
I think I had a 16 GB disk

1522456327
hoppetosse
so... yeah

1522456426
hoppetosse
tiehuis: I'm actually trying to solve #838

1522456439
MajorLag
this one is 32GB, so far build hasn't put it over 1GB yet, but there's still 77% of llvm and clang to go.

1522456480
hoppetosse
It's a bug that's bugged me before

1522456584
hoppetosse
I just trying to compare the output of a few similar structs to see where the problem could be

1522456821
GitHub160
[zig] tiehuis closed pull request #861: wip: Add c_char type (master...c_char)

1522465030
MajorLag
llvm compile has finally reached the 50% mark.

1522465677
andrewrk
MajorLag, I feel your pain

1522465681
andrewrk
I'm about to start a build myself

1522491466
GitHub150
[zig] tiehuis pushed 1 new commit to master:

1522491466
GitHub150
zig/master 7d66908 Marc Tiehuis: docs: fix unclosed code tag

1522504951
Hejsil
Soooo, here is an interesting allowed syntax :) extern "c" extern fn puts(s: &const u8) c_int;

1522504969
Hejsil
@andrewrk, was this intended?

1522505776
andrewrk
Hejsil, nope

1522505889
Hejsil
And these two examples should not be allowed?

1522505889
Hejsil
test "a" ++ "b" { }

1522505893
Hejsil
extern "c" ++ "b" fn atan2(a: f64, b: f64) f64;

1522505906
Hejsil
They don't work in the current compiler

1522505944
andrewrk
yeah those don't look like valid syntax to me

1522505986
Hejsil
Alright. They don't parse in the current compiler, so just making sure they're not suppose to

1522506025
Hejsil
Then I'll just store Token instead of NodeStringLiteral where an expression is not expected

1522506116
andrewrk
Hejsil, ohh, sorry, actually I think that should work

1522506124
Hejsil
Uuuh

1522506130
andrewrk
for example you should be able to do `const lib_name = "kernel32";`

1522506137
Hejsil
Alright

1522506138
andrewrk
`extern lib_name fn foo() void`

1522506146
Hejsil
Then that's a bug in the c++ compiler

1522506149
andrewrk
oh

1522506194
andrewrk
for test, let's make it a string literal - not an expression

1522506222
andrewrk
maybe we do the same for extern right now and we can revisit if the use case comes up

1522506228
Hejsil
But my test text_prefix ++ " test name" {} :)

1522506261
Hejsil
Alright. I'll store NodeStringLiteral then, in the case that we change it later

1522506264
andrewrk
ah. hmm. let me think about that

1522506269
Hejsil
:)

1522506506
andrewrk
Hejsil, your zig fmt: zig fmt test is quite interesting. It turns violations of the formatting conventions into test failures

1522506568
Hejsil
Oooh ye. I didn't actually think that far lol

1522507665
MajorLag
andrewrk, have an interesting compiler bug. seems to require multiple conditions, causes segfault. This is as minimal as I've been able to get it so far:

1522507702
MajorLag
I was going to make an issue, but I'm honestly not sure what to call it.

1522507834
andrewrk
MajorLag, how delightful

1522507836
andrewrk
I'll have a look

1522508875
MajorLag
Thanks. no rush or anything, it isn't blocking me.

1522509318
andrewrk
MajorLag, did you see that I'm about to make zig find libc at runtime?

1522509338
andrewrk
I think this + fully static build is going to make getting up to date zig installations on linux really easy

1522509549
GitHub98
[zig] raulgrell opened pull request #877: Fix some errors in std.io (master...stdlib)

1522510184
andrewrk
MajorLag, in your paste, I think zig is (incorrectly) attempting to generate an errdefer for the `return error.Fail` even though the errdefer is in the outer scope

1522510390
MajorLag
andrewrk, yeah I did. That + static Zig is really great. Updating should be a matter of wget + untar.

1522510441
MajorLag
Considering that you can incorrectly reference vars from the outer scope that adds up.

1522510766
andrewrk
MajorLag, you should be able to reference comptime vars though, right?

1522510868
MajorLag
yeah definitely. I use that occasionally for "comptime closures", but it lets you get away with referencing mutables, which usually segfaults.

1522512824
GitHub149
[zig] andrewrk closed pull request #872: find libc and zig std lib at runtime (master...runtime-libc)

1522512828
GitHub195
[zig] andrewrk pushed 1 new commit to master:

1522512828
GitHub195
zig/master 51a6ff1 Andrew Kelley: Merge pull request #872 from zig-lang/runtime-libc...

1522512850
andrewrk
I'm happy that the readme instructions for building are much simpler now

1522513293
GitHub78
[zig] andrewrk closed pull request #877: Fix some errors in std.io (master...stdlib)

1522513296
GitHub132
[zig] andrewrk pushed 1 new commit to master:

1522513296
GitHub132
zig/master eb6ff79 Raul Leal: Fix undeclared identifier error in readUntilDelimiterBuffer and incorrect number of parameters in readUntilDelimiterAlloc (#877)

1522514242
MajorLag
Found a bug in hash_map.

1522515509
MajorLag
err... maybe not...

1522515585
MajorLag
ok, no, there's definitely a bug in either HashMap or BufMap

1522516563
hoppetosse
What's trigerring it?

1522518092
MajorLag
I posted an issue. It is triggered by overwriting a value for a key

1522518165
MajorLag
but only under certain conditions. It wouldn't even show up in a simple linux test.

1522522710
MajorLag
On that operator overloading thread: it occurs that one could probably write a comptime formula parser such that `var p = ctMath("2*x*y + 3*z + 5y - 8*x", x, y, z);` would work. I'm tempted to try.

1522523190
Hejsil
MajorLag, and you could probably use std.zig.parser to parse the expression :)

1522523265
MajorLag
I was thinking that. I haven't dug around in it all, I'd have to take some time to find the relevant code. This seems worthwhile as a demonstration of a way to support DSL without going crazy.

1522523291
Hejsil
But then again. std.zig.parser does not expose the expression parsing code directly

1522523303
MajorLag
That's ok, I can always just copy it.

1522523307
Hejsil
So you would have to wrap the expression in "const res = <expr>"

1522523486
andrewrk
one thing we need to solve is having an allocator at comptime that is allocating static memory

1522523499
andrewrk
actually I think this may already work

1522523510
andrewrk
holy crap, yes you could initialize a hash map at comptime

1522523514
andrewrk
I think

1522523786
Hejsil
Oooh, really

1522523798
Hejsil
Cause I really need that in some randomizer code

1522523844
andrewrk
maybe. note that you would not be able to add items to it at runtime

1522523860
andrewrk
it should work in theory. if something prevents it from working I'll look into it

1522523893
andrewrk
it might make sense for a comptime computed hash to be a different type anyway, because you would want to do something such as compute a perfect hash function

1522524606
Hejsil
Np. I don't need to add values at runtime

1522524638
Hejsil
Or, well

1522524647
Hejsil
I don't require it

1522524668
Hejsil
A comptime hashtable that is

1522525078
Hejsil
andrewrk, in the self-hosted ast, we have structs like IntLiteral, FloatLiteral, StringLiteral and so on. All these literals are just "struct { base: Node, token: Token, }". Would it be reasonable to just have a NodeSingleTokenLiteral or something, that all literals (except NodeMultilineStringLiteral) use

1522525187
andrewrk
Hejsil, I'm fine with it either way. I think it will be easy to change later if we change our minds

1522525243
Hejsil
Alright

1522525314
Hejsil
Also, I've been woundering. The ast use tokens to point back to the source string for these literals (and other things). Do we not want people to be able to contruct an ast programmaticly?

1522525346
andrewrk
you mean within the self hosted compiler?

1522525407
Hejsil
Well, let's say people wonna use std.zig.parser to write a tool that introments your code

1522525423
Hejsil
Aka, parse source -> add extra nodes -> output to text

1522525437
andrewrk
ahh

1522525526
andrewrk
and right now the tokenizer has the handle to the source code buffer

1522525605
Hejsil
Yes

1522525771
andrewrk
well, the tokens point to indexes, not pointers. so we could append to the tokenizer's buffer pretty safely

1522525789
Hejsil
I guess that's true

1522525854
Hejsil
Alright, no more questions for now!

1522525860
Hejsil
Back to writing parser code!

1522525863
andrewrk
ha

1522525875
andrewrk
I'll keep this question in mind

1522525902
andrewrk
Hejsil, I'm curious how you would solve the async fn call syntax. it was tricky when I was looking at it

1522525925
Hejsil
I have no idea!

1522525926
Hejsil
Yet

1522525960
andrewrk
the recursive descent parser parses the next thing after `async` as an expression, and then gives a parse error if it ends up not being a fn call

1522525975
andrewrk
I don't know how that translates to the expression stack thing

1522526099
Hejsil
Hmmm... I could probably have an State.AsyncEnd that is hit after the expression is parsed. And then that state checks for the fn call

1522526111
andrewrk
oh! of course

1522526131
Hejsil
The state machine is really interesting to work with

1522526140
Hejsil
I've not written parser like this before

1522526157
andrewrk
you start to see the bijection with the recursive descent

1522526182
Hejsil
Indeed :)

1522526194
andrewrk
the expression stack thing is new though

1522526195
Hejsil
I'll never have to write a recursive function ever again >:)

1522526199
andrewrk
lol

1522526238
andrewrk
hopefully if it works out we can solve

1522526279
Hejsil
Ye, I read that when looking up the precedence of the Zig operators

1522526447
Hejsil
I think I'll keep all the Literal nodes btw. It's just a little friendlier if we wonna refactor the tree, and we can always merge them later

1522526493
andrewrk
sounds good

1522527468
Hejsil
andrewrk, back to the async passing. Isn't it the job of the type checker, not the parser, to check async is actually being applied to a function call?

1522527594
Hejsil
I mean, it has to check if it's type is an async function either way :)

1522528075
andrewrk
Hejsil, if we did it that way, we would have to figure out what this means: @typeOf(async foo)

1522528299
Hejsil
I'm not sure I see the problem. The typechecker will have to check that the type of foo in "async foo()" is "async fn(<args>) <return>" anyways, right?

1522528365
andrewrk
in the expression `(async foo)()`, the expression `async foo` will need its own type

1522528383
andrewrk
e.g. a new entry in the TypeId enum

1522528422
andrewrk
parsing it as `async (foo())` does not make sense; it would be a compile error for calling an async function without async

1522528459
Hejsil
Aaah, alright. The paren example made it click

1522528530
GitHub123
[zig] andrewrk pushed 1 new commit to master:

1522528530
GitHub123
zig/master 67f1119 Andrew Kelley: musl-friendly dynamic linking

1522528660
Hejsil
Aaah, and the C++ compiler does not treat as a prefix op, but as an attribute of the call

1522528673
Hejsil
s/as/async/

1522528690
Hejsil
Arg, there is two "as"

1522528733
Hejsil
Aaah, and the C++ compiler does not treat async as a prefix op, but as an attribute of the call *

1522528961
andrewrk
precisely

1522528967
andrewrk
which I think is the correct way to represent it

1522528969
andrewrk
it's a calling convention

1522529117
Hejsil
Ye. It just look's like "try" and "return" you know :)

1522529123
Hejsil
It tricked me!

1522529127
andrewrk
true

1522529133
andrewrk
and it's not consistent with @inlineCall

1522529148
andrewrk
which is another kind of "calling convention"

1522529156
Hejsil
Oooh yea

1522529175
Hejsil
I imagine @noInlineCall will also be a thing

1522529180
Hejsil
Or is it already

1522529182
andrewrk
I think that might already exist

1522529183
Hejsil
I don't remmeber

1522529508
andrewrk
if only there was documentation

1522529517
andrewrk


1522529552
Hejsil
If only

1522529585
Hejsil
But sadly, we'll never know if @noInlineCall exists

1522529659
Hejsil
Soo, will async become @asyncCall or will @inlineCall (and noInline) become inline

1522534883
hoppetosse
andrewrk: is there already a way to know if two regions of memory are overlapping at compile-time?

1522534918
hoppetosse
ie without actually comparing via @ptrToInt?

