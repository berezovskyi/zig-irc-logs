1536192019
martinium
when I downloaded the tar my system auto extracts for me on double-click

1536192037
martinium
so I moved the extracted folder to my home directory

1536192078
andrewrk
I can have it print the directories it looked in

1536192079
martinium
only other thing I did was link the binary to my /usr/local/bin directory to have zig command available system-wide

1536192109
andrewrk
right, ok, let me have it check realpath too, and then that will work fine

1536192125
andrewrk
just a minute

1536192183
martinium
take your time

1536192210
andrewrk
martinium, which version are you using?

1536192217
martinium
0.2.0

1536192223
andrewrk
ah. I highly recommend master branch

1536192232
martinium
ah

1536192243
martinium
I was wondering whether I should have used master or a versioned tar

1536192248
andrewrk
we're about to release 0.3.0 in ~1 week

1536192248
martinium
I had downloaded the zig-linux-x86_64-0.2.0

1536192268
andrewrk
I think 0.2.0 doesn't even have the code to find the std lib

1536192273
andrewrk
so that's why it's not working

1536192277
martinium
now that makes total sense

1536192281
martinium
:)

1536192286
martinium
let me get master real quick

1536192293
andrewrk
there's a download link for that too

1536192367
martinium
you should maybe put a date next to master

1536192389
martinium
so people can gauge whether it would be more worthwhile compared to the latest versioned copy

1536192406
andrewrk
the date is always whatever day it is :)

1536192424
andrewrk
I don't think there has been a day without a commit to master branch in a long time

1536192467
martinium
that is good news

1536192485
martinium
I really like the integration of the build tooling

1536192490
martinium
one less thing to learn

1536192496
martinium
much more efficient

1536192505
andrewrk
one less thing your users have to have installed too

1536192526
andrewrk
the build system is still at the proof of concept stage. I wouldn't say it's particularly ergonomic yet

1536192542
andrewrk
it works though, and it runs zig's own test suite

1536192547
andrewrk
and stage2 build

1536192965
martinium
good news master build works well

1536192973
martinium
I will use this going forward

1536192990
martinium
may I make a suggestion to you for the lang?

1536193025
martinium
another lang I have been using called nim had a similar install from source story for each new release

1536193047
martinium
they created a tool called choosenim that is basically just like Rust languages tool called rustup

1536193074
martinium
that would be a good and fast way for new users and existing users to install and use the language

1536193077
andrewrk
yes suggestions are welcome

1536193099
martinium
I am not a experienced programmer otherwise I'd built it myself

1536193104
martinium
build*

1536193112
andrewrk
I feel like choosezig/choosenim would be more complicated than "download and extract this thing"

1536193143
andrewrk
because if you have choozezig, then the user still has to download and run choosezig

1536193147
martinium
in usage once it is install you run the command whenever you want and you can choose to update to latest or master

1536193150
andrewrk
and that could have just been zig itself

1536193170
martinium
true one extra download but it manages the install

1536193177
andrewrk
but there is no install

1536193206
martinium
true

1536193222
andrewrk
in my opinion, /usr/bin/* belongs to package managers, not source installations or downloads

1536193224
martinium
I guess I am just used to using rustup

1536193249
martinium
usually /usr/local/bin is for external downloads

1536193263
martinium
external installations I mean

1536193282
andrewrk
that creates a problem when you want to uninstall something

1536193316
martinium
an alternative is that the tool downloads the latest master and sets up the symlink for the user into usr/local/bin

1536193320
martinium
saving time

1536193325
martinium
but its not that complicated

1536193326
andrewrk
I keep /usr/local empty and use ~/local/foo  where `foo` is a specific project or set of libraries for said specific project

1536193337
andrewrk
there's no reason to use sudo or the root file system

1536193353
martinium
that is probably much better from a security standpoint

1536193398
martinium
I have no issue downloading the tarballs and running that way

1536193405
martinium
most shouldn't either

1536193455
martinium
I have to remember that it isn't separate tools like cargo and rustc

1536193529
andrewrk
I put a lot of focus on removing dependencies of third party things

1536193559
andrewrk
that's why we can cross compile for any target on any target

1536193562
martinium
yeah definitely the way to go

1536193605
martinium
are compiled zig programs built statically by default?

1536193625
martinium
meaning they include everything needed to run the program?

1536193636
andrewrk
certainly if you don't link any libraries

1536193696
martinium
do you see this as a general purpose lang or mainly a systems lang?

1536193715
andrewrk
if you use --library foo, then it's going to look for shared libs. if you put --object libfoo.a on the command line then it links statically

1536193720
andrewrk
(I think I should rename that parameter)

1536193727
andrewrk
general purpose

1536193739
martinium
I've been trying to find a lang like this for a while.

1536193752
martinium
closest has been nim

1536193765
martinium
but that transpiles to C

1536193774
andrewrk
the main difference between zig and nim is that zig is trying to replace C rather than build on top of it

1536193796
andrewrk
and Zig has no runtime and especially no garbage collector

1536193843
martinium
while still working with all that C code which is going to be around forever

1536193849
andrewrk
well and a different approach to maintaining code simplicity, and a million little design decisions... I guess it's a lot different

1536193876
martinium
the one thing I have not seen are benchmarks like for benchmarks game

1536193886
martinium
the git repo I downloaded needs to refactor the code

1536193905
andrewrk
tiehuis is especially good at that stuff

1536193924
martinium
binary-trees.zig:54:56: error: expected type 'File', found '*File'

1536193925
martinium
var stdout_out_stream = std.io.FileOutStream.init(&stdout_file);

1536193959
martinium
in your own tests is this lang as fast as C so far or faster?

1536193971
andrewrk
oh, remove the &

1536193974
andrewrk
I changed the API recently

1536193990
andrewrk
it's designed to be faster than C

1536194010
martinium
I will try refactoring tiehuis benchmarks

1536194063
andrewrk
for some stuff it's faster, for some stuff it's slower. but we're not doing everything that is planned yet. for example zig's memcpy implementation right now is trivial

1536194088
andrewrk
but obviously we would upgrade eventually

1536194097
andrewrk
there's no reason that any C code should be faster than equivalent zig code

1536194118
andrewrk
we're trying to beat C at its own game

1536194158
martinium
44 years of knowledge hopefully get a successor finally

1536194161
andrewrk
simple example: unsigned ints in C guarantee overflow wraparound semantics. unsigned integers in Zig by default cause undefined behaivor on overflow

1536194177
martinium
much better from a security standpoint

1536194208
andrewrk
right because in debug mode you can have safety features

1536194217
andrewrk
or you can just release with the undef safety checks on

1536194850
martinium
@andrewrk, how old were you when you started programming?

1536194861
martinium
you've created some really impressive software

1536194884
andrewrk
12. I started with VB 6

1536194902
andrewrk
my parents let me use the computer for 1 hour per day. then they made me go outside

1536194933
martinium
yeah its important to step away and develop other senses

1536194940
martinium
especially when young

1536195030
martinium
I work in IT and nowadays all the roles are asking for programming knowledge

1536195037
martinium
scripting is not enough anymore

1536195067
martinium
C while a small language feels so tedious since I was first exposed to python

1536195077
martinium
but python hides everything

1536195089
martinium
you don't "learn" how things really work

1536195091
scientes
I ended up in C cause I wanted to see how stuff morked

1536195098
martinium
boom

1536195101
martinium
thats where I am

1536195118
martinium
I am 32 now so my time is hardfought

1536195137
martinium
python's slowness isn't attractive

1536195163
scientes
I think it comes down to a zen of zig thing: writing perfect software

1536195191
scientes
the computers are so fast that slow software sometimes doesn't matter, but it

1536195195
martinium
nothing is ever perfect though

1536195210
martinium
slow software is a waste of resources

1536195225
andrewrk
perfect software is possible

1536195248
martinium
especially when you have to spin up more resources to do something that you can do in another lang with 1/8th the resources

1536195255
martinium
the learning curve is that much different

1536195260
martinium
isn't*

1536195266
scientes
1/8th is nothing, how about sqrt(n) resources

1536195299
scientes
that didn't come out wrong

1536195306
scientes
but yeah fundamentally doing things wrong

1536195328
martinium
only new languages that have been even close to performance with C are crystal and rust until my discovery of zig

1536195359
martinium
I blame MSFT and Apple for dumbing people down

1536195366
martinium
abstracting everything away from users

1536195382
martinium
when I was a kid people had to type batch scripts to get the programs on floppies to run

1536195385
martinium
lol

1536195449
martinium
@andrewrk, how often is the master documentation updated?

1536195530
andrewrk
martinium, you can find out with `git log --stat -- doc/langref.html.in`

1536195607
martinium
thx

1536195632
martinium
plan to invest 3+ hrs per day to learning this lang from ground up

1536195710
andrewrk
cool. what will you be working on?

1536195812
martinium
will def be small things to learn the language. CLI utilities and the like but nothing concrete in my mind yet

1536195822
martinium
will have to write down as ideas come in my head

1536195869
martinium
@andrewrk, another questions is does this language take advantage of parallel calcs/multiple cores?

1536195928
andrewrk
there are std lib abstractions for spawning threads

1536195965
andrewrk
and also in the std lib: a work in progress M:N concurrency scheme with async/await built on multiplexing coroutines onto a kernel thread pool

1536195978
andrewrk


1536196088
andrewrk
there are some big issues I need to solve, but the proof of concept is working great

1536196104
andrewrk
for example, zig fmt uses it

1536196303
andrewrk
anyway I'm pretty sure that zig's answer to concurrency is going to be this async/await thing built on top of evented I/O

1536196323
andrewrk
and you can play with it now

1536196339
scientes
andrewrk, this looks like what you are going for:

1536196367
scientes
im trying to write a loop

1536196400
martinium
there is another language I found recently called pony lang that uses an actor model

1536196407
scientes
can't the destroy just set the promise ptr to null atomically?

1536196416
scientes
and have resume check for null?

1536196446
andrewrk
scientes, I believe that is status quo

1536196492
andrewrk
oh, you're talking about the promise ptr. no, you're introducing a new memory location that doesn't have a place to live

1536196545
scientes
i'm talking about the promise

1536196555
MajorLag
andrewrk, please tell me 1d8b8ad doesn't prevent comptime-known values from being used in an inner scope. that'd break a lot of my code at this point.

1536196556
scientes
which contains a pointers (and three other bits)

1536196597
andrewrk
MajorLag, here's the test making sure that still works:

1536196598
andrewrk
<3

1536196612
andrewrk
scientes, let's call that the "atomic state"

1536196631
scientes
yeah thats what its called in the sources :)

1536196658
MajorLag
ok, cool.

1536196718
andrewrk
scientes, one of the bits in the atomic state is the "cancel bit". that is set by cancel. resume checks for that bit

1536196750
scientes
but the cancel bit can be set while the co-routine is running

1536196757
andrewrk
right

1536196793
andrewrk
the pointer that is in the atomic state, is the handle of the coroutine that calls await

1536196826
andrewrk
when you return, if it's null, then final suspend. if it's non-null, then destroy yourself and tail resume the awaiter

1536196945
scientes
then how does resume find the co-routine stack frame?

1536196967
scientes
i thought that was what was in there

1536196982
andrewrk
MajorLag, some of these bugs I'm fixing today are half a year old

1536196996
andrewrk
you have the patience of a saint

1536197046
andrewrk
scientes, resume is a  function call

1536197076
andrewrk
the operand to resume is the handle of the coroutine (currently called the "promise")

1536197079
MajorLag
heh, if you knew me at work you'd know better.

1536197134
andrewrk
the handle has a pointer to the coroutine stack frame, which has a function pointer array and index and it does a fn call into the coroutine

1536197142
andrewrk
llvm splits coroutines into functions at each suspend point

1536197180
andrewrk
whew. 1 more issue to hit my quota for today

1536197210
andrewrk
I think I already found all the easy bugs

1536197310
scientes
then why doesn't destroy null out that pointer, and have resume check for null, then we won't have that race condition described in #1363

1536197512
andrewrk
that pointer lives in the memory of the coroutine frame

1536197521
andrewrk
which destroy destroys

1536197535
andrewrk
so you can't check the atomic state after it's been destroyed

1536197644
scientes
but there has to be a pointer to that pointer that resume can check

1536197654
scientes
the pointer that is getting SIGSEGVed

1536197715
andrewrk
in order for that to be true there would need to be new memory location that doesn't have a place to live

1536197763
andrewrk
a pointer to a pointer, where does the inner pointer live then?

1536197839
scientes
we arn't following each other

1536197883
scientes
all i'm saying is that that dereference that is leading to the SIGSEGV in the race consition can be checked for null

1536197926
andrewrk
the race condition I'm thinking about, is trying to dereference non-null

1536197963
scientes
oh destroy has no idea where that pointer, i c

1536197971
scientes
*where that pointer is

1536198127
scientes
i just don't like the memory leak when the co-routine is never resumed

1536198217
andrewrk
I don't think my proposal has a memory leak

1536198256
andrewrk
the rule is: when you async, it should be matched with exactly one of either: await, or cancelasync

1536198256
scientes
how are you assuring that resume is called?

1536198268
andrewrk
when you suspend, it should be matched with exactly one of either: resume, or cancelsuspend

1536198281
andrewrk
the memory is destroyed when both references are gone

1536198332
andrewrk
if you put your handle in an epoll set, and then decide to remove it from the epoll set, then you call cancelsuspend

1536198356
andrewrk
try to come up with a scenario where there is a memory leak and we can go through it together

1536198378
scientes
ok

1536198439
andrewrk
so far zig is on schedule for 0.3.0:

1536198448
andrewrk
not so sure about llvm though. I was expecting rc3 today

1536200875
dbandstra
andrewrk, i found one of my issues was a duplicate and closed it. maybe that brings you to your daily quota? :p

1536203047
andrewrk
dbandstra, thanks :)

1536205073
martinium
@andrewrk, did you study CS in Uni?

1536205128
andrewrk
yes

1536205193
martinium
do you have any textbook recommendations for someone like myself that really wants to learn how to properly program?\Should I read a data structures and algorithms books first or something else?

1536205215
martinium
I am to the point where I understand the basics in any language I look at

1536205227
martinium
understand OOP etc but haven't really practiced it much

1536205237
martinium
zig is imperative mostly just like C correct?

1536205275
andrewrk
martinium, I suggest choosing a challenging project to work on

1536205311
martinium
ironically, thats how I started really learning python was when I created titter bots using libs

1536205325
martinium
I felt more like I was just using someone elses hard work though

1536205337
martinium
since libs provided all of those prebuilt functions

1536205376
martinium
I want to get to a point where I can build my own libs in stuff and maybe even port good ones over to zig

1536205401
andrewrk
you could start with game programming. game programming teaches you a lot

1536205427
martinium
I had downloaded a book forgot the exact name but it was game programming using C++11

1536205439
martinium
learned a bit of C++ thanks to that book

1536205492
dbandstra
game programming is great for when you're terrible at coming up with useful/productive project ideas

1536205545
dbandstra
don't necessarily need to worry about design etc if you just make a dude that shoots and passes levels

1536205580
martinium
I would like to use zig for working with a raspberry pi

1536205593
martinium
no runtime and no overhead compared to python

1536205596
scientes
martinium, I'm working on the arm64 port

1536205603
scientes
it mostly works

1536205612
martinium
nice

1536205612
andrewrk
this is outdated, but here's a kernel for rpi 3

1536205613
andrewrk


1536205619
scientes


1536205694
andrewrk
scientes, is this ready for review? did you have a CI server working?

1536205697
martinium
do any of you guys mind mentoring me with my programming journey? I have until this point never known anyone who codes so everything is self-study and reading on my own

1536205759
andrewrk
martinium, you're welcome to ask questions about computer science and stuff in this channel

1536205783
andrewrk
I'm not personally going to commit to answering everything but I think IRC can be a good way to get "crowd mentored"

1536205802
dbandstra
it's how i learned :p

1536205854
martinium
thanks along the way I'll get to learn the nuts and bolts of zig

1536205860
martinium
especially as the api's change

1536205870
martinium
hopefully I will be able to help out sooner than later

1536205890
andrewrk
martinium, what are you waiting for? :)

1536205902
andrewrk
write hello world

1536205907
martinium
I work in cybersecurity so being able to debug and understand code super helpful

1536205908
andrewrk
then decide what your next milestone will be

1536205939
martinium
this is me

1536205940
martinium


1536205956
martinium
had done some playing with temp conversion CLI app in nim and C++

1536205962
martinium
at same time as I was learning git

1536205980
martinium
been a while so have to get back into the groove and practice everynight

1536206026
martinium
never put the python twitter bots on there

1536206126
andrewrk
martinium, I have a coding stream every thursday at 17:00 EST, and a few videos uploaded if you're interested

1536206142
andrewrk
IMO I'm pretty boring, haven't figured out how to make my stream good yet. but it's there if you're into that kind of thing

1536206170
martinium
I've never watched a live coding stream. I'll check it out.

1536206175
martinium
Does the streaming help you focus?

1536206201
andrewrk


1536206210
andrewrk
no, not at all. it's purely done because it was requested of me

1536206268
martinium
using xfce I see

1536206272
martinium
I am a fan

1536206277
martinium
used that DE with arch for a while

1536206288
martinium
now I mostly just use fedora and gnome 3 grew on me

1536206358
martinium
@andrewrk, I noticed instead of using import statements to bring in the stdlib/modules you do it similar to JS by creating a const identifier

1536206366
martinium
any specific reason for this choice?

1536206409
andrewrk
it helps both the compiler and the human reading code more quickly understand where declarations are coming from

1536206578
martinium
gotcha

1536206723
martinium
what does the @ before the import keyword do?

1536206809
scientes
martinium,

1536206883
martinium
ah thanks

1536206892
martinium
hadn't gotten to that point in docs yet

1536207103
martinium
inthe hello world example you state "Usually you don't want to write to stdout. You want to write to stderr."

1536207108
martinium
why is this the case?

1536207147
martinium
every other hello world I've encountered displays to stdout

1536207177
martinium
gaining wisdom starting from hello world

1536207179
martinium
:)

1536207203
andrewrk
imagine that your program is `grep` and so it is supposed to write matching lines from stdin to stdout

1536207216
andrewrk
you're starting your grep project. you start with hello world

1536207231
andrewrk
"hello world" is not really the output that your program is generating

1536207247
andrewrk
it's more like a debug statement, you want to see if the control flow got to that point

1536207346
martinium
ah I see

1536207455
dbandstra
andrewrk, is there any reason why this function isn't working at comptime?

1536207495
dbandstra
if i call and put the result in a comptime const, i get the error 'cannot store runtime value in compile time variable'

1536207506
dbandstra
yet if i copy paste the function contents into where i'm using it, it works

1536207520
dbandstra
i tried making the function return `var` instead of `usize`, but that just crashed the compiler

1536207535
andrewrk
yeah infered return value isn't supported yet

1536207548
andrewrk
I thought I fixed the crash though, oops

1536207558
dbandstra
i can make a test case for that

1536207684
andrewrk
dbandstra, this test passes for me:

1536207724
andrewrk
also if I make it a comptime call it works

1536207779
dbandstra
andrewrk,

1536207836
andrewrk
dbandstra, put the comptime in front of the fn call instead of the variable

1536207837
MajorLag
dbandstra: capacity isn't a field, it's a def.

1536207845
andrewrk
const capacity = comptime getCapacity(...

1536207863
dbandstra
oh wow, didn't know about that syntax

1536207884
andrewrk
oh, it's really powerful. it actually accepts any expression, including a block

1536207914
dbandstra
MajorLag, this is all a roundabout way of being able to use ComponentList without explicitly passing the second generic param every time

1536207929
dbandstra
MajorLag, using comptime black magic to recover the value of that param

1536207958
MajorLag
yeah, I see now you're getting it via the Type

1536207963
andrewrk
why not put the entire thing inside a scope that has the generic param you want?

1536208022
dbandstra
getCapacity will be used by a couple of ubiquitous methods that are called all over the place

1536208032
dbandstra
i will move it into the same scope as those methods

1536208133
andrewrk
I think scope is the natural way to represent this concept; it would have to be a very good reason to represent it a different way

1536208235
dbandstra


1536208258
dbandstra
iter() method is used in like 20 different files

1536208386
dbandstra
i tried moving iter method into  the ComponentList generic struct, but didn't like how that felt (`gbe.components.Player.iter()` instead of `gbe.iter(C.Player)`)), and i had to use comptime black magic in other places

1536208419
andrewrk
hmm. I'd like to have another look at this later. I'm too tired right now

1536208424
dbandstra
fair enough

1536208437
dbandstra
don't expect something expertly designed, i'm half asleep most of the time i work on it

1536208471
dbandstra
but i was happy today to get rid of the last bad place of code duplication in terms of component types

1536208488
martinium
@andrewrk, you should register this channel officially so you can get a chanserv in here

1536208495
dbandstra
i thought i would need reify but this seems to work

1536208554
dbandstra
i'm pretty happy that i managed, in a c-esque language, to get the level of boilerplate down to almost how small it would be in something like javascript

1536208562
dbandstra
boilerplate of things like registering new component types

1536208595
andrewrk
that's great, I'm happy about that too

1536208612
andrewrk
I don't think you have to give up low level speed and power to gain high level abstractions

1536208646
dbandstra
i got pretty far doing this in C using evil macros and '.inc' files, but not this far

1536208665
andrewrk
I'm going to bed. night

1536208669
dbandstra
good night

1536208795
dbandstra
(sad postscript: my c project eventually devolved into me playing with scripting languages and DSLs. i don't feel any need for that with zig)

1536209598
martinium
well that sounds promising

1536209677
martinium
@dbandstra, is there an API documentation yet?

1536209692
dbandstra
API for what?

1536209698
martinium
I am looking at the included lib folder to see the different modules in std lib

1536209710
dbandstra
zig's std lib? there are no docs sadly

1536209712
martinium
ex: json, crypto etc

1536209716
martinium
yeah

1536209737
dbandstra
if you spend time looking through those files you can see they're somewhat haphazard and inconsistent

1536209748
martinium
for instance if I wanted to import json

1536209758
dbandstra
i believe there's going to be a big effort in the future to clean everything up and then document it

1536209776
martinium
const json = @import("std").json

1536209781
martinium
would that be correct?

1536209798
martinium
I will try and help document this stuff also

1536209801
dbandstra
yeah

1536209880
dbandstra
@import("std") gives you zig/std/index.zig

1536209903
dbandstra
everything should be pretty easy to follow from there

1536209951
martinium
yeah

1536209966
martinium
I wanted to make sure I did not need to include the index.zig in actual import

1536209993
martinium
in hello world example I see them access std lib then uses dot notation to access the module

1536210003
martinium
then another dot for warn function

1536210035
martinium
guess that specificity will keep memory size down if we only import exactly what is needed

1536210089
dbandstra
i don't believe you should worry about that, i think if you import something but don't use it, the compiler will leave it out

1536210102
martinium
that would be ideal

1536210127
dbandstra
whether you do `const warn = @import("std").debug.warn; warn(...)` or `const std = @import("std"); std.debug.warn(...)` is just up to your personal preference basically

1536210149
dbandstra
doing things the former way can lead to files with 20-30 imports at the top

1536210161
dbandstra
which is just ugly to look at

1536210176
martinium
yeah don't want this to be like haskell

1536210183
martinium
with a million lang extensions

1536210184
martinium
lol

1536210256
martinium
yeah the API documentation for all the modules is badly needed

1536210261
dbandstra
i'm still having trouble figuring out what convention to use for imports

1536210270
martinium
I'll ask andrew how he plans to put this on his site

1536210281
martinium
that should be done sooner rather than later I think

1536210337
dbandstra
i think the plan is to autogenerate docs in some way

1536210358
martinium
would save time yeah

1536210476
kristate
arrived at tokyo uni 14:07 JST

1536210527
martinium
nice

1536211076
dbandstra
andrewrk,

1536218422
dbandstra
i added a very brief guide to my entity component system in the oxid readme

1536218480
dbandstra
i think as of today the oxid gamecode is very readable (using that guide as reference... and staying away from the other files)

1536218657
redj
does anyone know why github doesn't recognize zig yet?

1536219113
kristate
redj: they are considering it here:

1536219137
kristate
redj: long story short, please write more code in zig and post it on github :-)

1536219176
redj
kristate: thanks, I guess maybe eC got into linguist before this process was established :P

1536236508
unique_id
const last_day = Year_Month_Day.init(2018, Sep, Last); -- Designing a date API is fun :) It has to be full of features, readable, and performant by having both a serial based type and a field based type.

1536236585
unique_id
I have no clue how this will end up, just trying things out for now

1536236726
unique_id
last_day.month += 1; if (last_day.is_valid())

1536236755
unique_id
ok yeah it's not camel case, I'll have to change that if that's what we're going for :)

1536239602
andrewrk
.

1536239663
andrewrk
oops, sorry my cat is being bad

1536242229
unique_id
Year_Month_Day.init_last_day(2018, Sep); Year_Month_Day.init_weekday(2018, Sep, Fri, Last);

1536256028
unique_id
Leap seconds are pissing me off. Not leap seconds themselves, but how people are handling them.

1536256053
unique_id
So I must say, I'm in agreement with America, much of Europe, and China, to remove them. Good riddance xD

1536256219
unique_id
we'll see what happens in 2023 when a decision is likely to be taken

1536256262
andrewrk
just put `if (year >= 2023) @panic("¯\_(ツ)_/¯");`

1536256268
andrewrk
I'm sure it will be fine

1536256276
andrewrk
;)

1536257043
unique_id
oh they wouldn't remove previous leap seconds though, but they would stop adding more of them. Mb for being so unclear as always.

1536257265
unique_id
humans decide when to add a leap second at least 6 months in advance with no algorithms involved, it's entirely database driven, so at least nothing bad would happen if they would decide to stop adding more

1536257417
MajorLag
is anyone aware of an open issue for incorrect printing of integer types > 64b?

1536257458
andrewrk
I'm not aware of that

1536258547
MajorLag
I don't think it is a printing bug, but a problem with bitwise negation

1536258687
andrewrk
oh, i'm planning on fixing that soon

1536258693
andrewrk
probably today

1536258770
MajorLag
ok, if it is known I'll refrain from making an issue, though I think I found a different issue while investigating.

1536258954
MajorLag
nevermind, I am mistaken. I was running the wrong test.

1536258969
MajorLag
the bitwise negation is legit though

1536258977
MajorLag
*problem

1536259100
MajorLag
Don't mind me, I'm just having trouble getting my brain fully booted today.

1536259805
andrewrk
MajorLag, this?

1536265143
kristate
andrewrk: are you livestreaming today?

1536265602
andrewrk
kristate, yes, in 30 minutes

1536265621
kristate
cool, I can join

1536265636
andrewrk
it will be here:

1536265646
kristate
ok -- looking forward!

1536269248
MajorLag
andrewrk: yeah, that looks like it.

1536273374
wink_
andrewrk: do you save in github or somewhere else the "files" you create in the livestream?

1536273406
andrewrk
no, which one do you want?

1536273468
wink_
using a user defined enum and printing the @TagName and @TagType, IIRC

1536273508
andrewrk
wink_,

1536273516
wink_
txs!

1536273554
wink_
Oh, another memory question, do you plan on supporting "packed" arrays of u1's or other small bit types?

1536273926
unique_id
I just played dbandstra's game. It's a lot of fun! I got to level ~12 with the Dreadnought (not on my first try), only to accidentally pause and I reacted by hitting escape which exited. The game has a lot of variety, I like it.

1536273931
andrewrk
wink_, that already works

1536274350
wink_
How, "bits: [2]u1;" looks like it was one bit per byte? Did I do something wrong?

1536274401
andrewrk
wink_, my mistake, I thought you said packed structs

1536274443
wink_
yea, I've seen structs do the "right" thing, but wanted to use an array.

1536274483
andrewrk
I can't find the issue for this

1536274509
wink_
Is the plan to support it by 1.0?

1536274571
andrewrk
yes, or at least make the compile error helpful enough to guide you towards the right solution

1536274708
wink_
ok

1536276200
martinium
@andrewrk, am a little confused with the for loop syntax in this lang

1536276310
martinium
in C it is for ( variable initialization; condition; variable update ) {

1536276310
martinium
}

1536276310
martinium
Code to execute while the condition is true

1536277088
tyler569
the closest eqivalent in zig is " while (condition) : (update) { code } "

1536277607
unique_id
var i: usize = 0; while (i < length) : (i+=1) {}

