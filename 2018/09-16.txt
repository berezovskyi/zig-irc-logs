1537056250
unique_id
First of, I'm an absolute atomics noob. I now see that the wikipedia page says that on x86 this is implemented via CMPXCHG.

1537056292
unique_id
From a noob's perspective these seem very different. CAS modifies the atomic only if the atomic is equal to some given value

1537056309
unique_id
xchg always modifies the atomic, returning the previous

1537056315
scientes
thats the cmp of cmpxchg

1537056323
scientes
i don't think zig has a xchg without the cmp

1537056389
unique_id
I'm not sure I understand you. On atomicRmw: "This builtin function atomically modifies memory and then returns the previous value."

1537056423
scientes
oh yeah that one doesn't have the cmp

1537056427
scientes


1537056532
scientes
oh yeah atomicrmw has an xchg

1537056541
scientes
thats without the compare

1537057231
unique_id
In the system I'm designing I have atomics that can be in 3 states (0, 1, or 2). A streaming thread can bring an atomic from 0 to 1. That's a lock. Then it can take it from 1 to 2 (finish), or from 1 to 0 (cancel). With this design, which made be dumb as hell, atomic xchg is not good enough because a thread might bring a 2 to 1 having thought it was at 0.

1537057245
unique_id
might*

1537057256
unique_id
might* be dumb as hell

1537057263
scientes
unique_id,

1537057281
scientes
nah you don't need that

1537057288
scientes
yeah you need cmpxchg

1537057349
scientes
if you are doing io in the threads while holding locks you need mutexes that use syscalls to avoid wasting lots of power

1537057386
unique_id
yes, I use condition variables

1537057430
scientes
heres a mutex for linux

1537057636
unique_id
I have all of that. This is for something else.

1537057863
unique_id
sorry for the language btw, I used the H word :)

1537058971
unique_id
I can split the 3 state atomic into two 2 state atomics, that'll work in my case.

1537059217
unique_id
One last thing, sorry for being so unclear and mixing singular and plural like that. I actually have lots of these atomics, one per memory/communication 'slot'. That's what I'm unsure about but at least it's simpler to implement than all alternatives.

1537059220
andrewrk
hmm maybe my next stream should be on atomics

1537059305
unique_id
that would be awesome

1537059636
scientes
andrewrk, are you still getting hash mismatch?

1537059657
scientes
perhaps just remove the secret, as with pull requests it already executes untrusted code

1537060007
unique_id
Why am I so blind? ... @cmpxchgStrong, @cmpxchgWeak

1537093924
DutchGh0st
return []void {} ** n; <--- what does this do if `n` is a comptime usize?

1537096971
unique_id
I don't want to spam this channel with my nonsense, but just fyi I fixed my design. No more 3 state atomics.

1537096983
kristate
cool

1537098121
DutchGh0st
how fast is compiling normally?

1537105801
andrewrk
nice, unique_id

1537109787
wink_
Just playing around with @OpaqueType and I thought something like this (

1537109993
andrewrk
wink_, you can't pass an opaque type directly as a parameter because opaque types have unknown size

1537109997
andrewrk
you can pass a pointer though

1537110052
andrewrk
looks like that's what you wanted

1537111321
wink_
How do you "pass a pointer" I tried fn "assert(S.getValue(pS) == 1;"

1537111391
andrewrk
the compile error is pointing to the line where it is not a pointer

1537112452
wink_
I'm dense, I still don't understand how to fix it :(

1537112590
andrewrk
wink_, put a * in front of @OpaqueType()

1537119029
scientes
how do i get the value of an enum member that has an explicitely set value?

1537119037
scientes
cause then the index and the value would be differn't

1537119051
scientes
the docs say @memberType does not work on enum

1537119056
scientes
(but maybe it should)?

1537119134
andrewrk
@enumToInt

1537119148
scientes
oh thanks

1537119200
scientes
how do i call that with @memberName?

1537119207
scientes
I don't think i can

1537120025
MajorLag
@enumToInt(@field(EnumType, @memberName(...)));

1537120063
scientes
thanks

1537122483
wink_
andrewrk: Adding * gives me error: expected type '*(anonymous opaque at opaquetype.zig:12:31)', found '*S'

1537122519
wink_
assert(S.getValue(ps) == 1);

1537122584
MajorLag
because `S.getValue(ps)` becomes `getValue(S, ps);`, you're passing type `S` in and the function definition expects @OpaqueType().

1537125413
scientes
I really need first-class functions, otherwise I'm going to have to copy the whole of mem.sort.sort just so I can have more control over the compare function

1537125676
scientes
I need to iterate over an array of strings, sorting by each character in turn

1537125952
hoppetosse
scientes: what do you mean by first class functions? you can pass function pointers just like in c

1537126052
scientes
But the number of functions would be the possible length of a string (usize)

1537126067
hoppetosse
you can also pass an array of function pointers

1537126106
scientes
I guess I could hack it with a global

1537126111
scientes
thats what i'll do

1537126276
hoppetosse
good luck =)

1537126282
scientes
you see the problem?

1537126319
scientes
I need to pass compareByChaR(left, right, whichChar: usize) to sort.sort()

1537126354
scientes
but there is no way to generate a function with that argument filled in

1537126365
scientes
whichChar

1537126395
scientes
I think this is a problem for closures

1537126425
scientes
(wehich is what i'm doing with a global var)

1537126670
hoppetosse
Oh, I see

1537126679
hoppetosse
is whichChar known att compile time?

1537126694
scientes
no, i'm iterating over the string, sorting repeatedly

1537126709
scientes
strings

1537126725
scientes
(I basically writing gperf in zig)

1537126775
scientes
but all this is basically done at comptime(eventually, it depends on the comptime allocator), and a global means wasting memory at run-time

1537126792
hoppetosse
How about generating one function for each character at compiletime?

1537126833
hoppetosse
yeah, but check how much memory it actually takes before saying it's too much

1537126844
scientes
4 or 8 bytes

1537126976
hoppetosse
I just realized whichChar refers to the index of the char in the string, and not which chatacter to sort "around"

1537126988
scientes
yeah

1537129523
j`ey
in Zig the std lib is distributed as source, right?

1537129606
hoppetosse
yep

1537129630
j`ey
is it expected to always be like that?

1537129695
hoppetosse
I think so

1537129698
hoppetosse
It has its advantages

1537129731
hoppetosse
in terms of optimization, from inlining to link time stuff

1537129750
j`ey
but also have to reparse and build every time!

1537129772
j`ey
but I guess the file watching async thingy will counter that

1537130161
scientes
maintaining shared libraries is a PITA

1537130978
j`ey
which files does the comptime evaluation in src/?

1537130993
scientes
mainly ir.cpp

1537131030
scientes
but i don't know the source too well

1537131107
j`ey
ir_eval_const_value might be it

1537132175
scientes
comptime is too limited, maybe there is a way I can return llvm IR from a funtion, and then have the function run at compile-time

1537132199
j`ey
I was actually wondering if it used LLVM's jit infrastructure

1537132215
scientes
I want to write gperf in zig

1537132241
scientes
and comptie doesn't do it, and it would be cool if I could avoid generating source code

1537132283
scientes
my idea is to have "comptime" functions, that return LLVM IR, and are run at compile-time

1537132962
scientes
meh generating source code isn't horrible, I just want to generate it every time and keep it out of source control

1537136114
wink_
MajorLag, andrewrk: Txs for the help, I got it to work you can see the details on the gist

1537136601
andrewrk
wink_, nice, glad you got it working

1537136661
j`ey
andrewrk: what are you going to do with translate_c with the self hosted compiler?

1537136802
andrewrk
j`ey, have a C API wrapper around libclang's c++ API, and then convert the c++ implementation to zig, using the C API wrapper to call into libclang

1537136849
j`ey
OK, that's what I was expecting!

1537136919
andrewrk
and then stage1 loses the ability to do translate C

1537137088
j`ey
doesnt it need that?

1537137103
andrewrk
no, it only has to build stage2

1537137124
j`ey
but doesnt stage2 use that feature?

1537137149
andrewrk
yeah but it doesn't need to. it'll be cleaner anyway to define llvm extern functions in .zig declarations

1537137211
j`ey
ah

1537137237
andrewrk
j`ey,

1537137262
andrewrk
we already have this file, might as well complete it and stop doing @cImport

1537137320
j`ey
makes sense

1537138458
wink_
In the past you've said stage1 will always needed, it seems to imply that stage one could go away, or am I reading to much in to what you

1537138465
wink_
have just said?

1537138480
scientes
the purpose of stage1 is to build stage2

1537138490
scientes
to avoid the Ken Thompson hack

1537138547
wink_
What is the Ken Thompson hack?

1537138564
scientes


1537138581
scientes


1537138639
wink_


1537138769
wink_
I assume stageN will eventually build itself, wouldn't you still have the problem at that point?

1537138821
scientes
not if you always bootstrap with stage1 and a trusted c++ compiler

1537138846
scientes
that way zig is always shipped as

1537138860
scientes


1537138901
wink_
And you trust a c++ compiler :)

1537138907
scientes
no, I don't

1537139033
wink_
Me neither, so it seems like a weird problem, off the top of my head if we have the full source history of StageN then that history could be audited and we'd be able to "prove" StageN is non-corrputing. But just a guess.

1537139082
andrewrk
it matters how easy it is to build zig from source in practice

1537139084
scientes
nope, you don't understand the ken thompson hack

1537139103
andrewrk
in practice, when building zig from source, people have gcc/clang installed and do not have zig installed

