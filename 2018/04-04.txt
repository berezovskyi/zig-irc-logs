1522800012
Braedon
The problem is with hash_map, it wants a []u8 comparison function

1522800026
Braedon
And it really should want a []const u8 comparison function

1522800062
Braedon
Wrote issue about it, because otherwise you can't pass in string literals, since you can't 'downcast' (I agree with never letting anyone downcast from const to non-const)

1522800096
andrewrk
Braedon, I believe this will be solved by

1522800123
Braedon
Oooh that would solve it

1522800158
Braedon
Though I still think hash_map should be changed perhaps?

1522800180
Braedon
Since not labelling it as const makes it seem like the comparison function can edit the values

1522800377
andrewrk
Braedon, feel free to make a pull request

1522800712
Braedon
Swell :)

1522802835
relatingdata
Hi, anybody using fedora rawhide (F29) to compile zig / zen?

1522802896
relatingdata
getting error messages from Symbol Table file(s) needing copy constructors

1522803058
andrewrk
relatingdata, good news. I have just got 100% static linux builds of zig working, and they are automatically built for every push to master branch

1522803148
andrewrk
wait 10 min for this travis build to complete and I'll send you a link

1522803177
MajorLag
sweet

1522803193
andrewrk
MajorLag, I have a good solution. I figured out how to upload HTTP redirects to s3

1522803213
andrewrk
so we will have an url like zig-linux-x86_64-master.tar.xz and it will redirect to the latest successful build

1522803254
MajorLag
that sounds a lot easier than what I'd read about pushing to github release

1522803956
andrewrk
ugh. s3cmd version on travis is old enough to not have the cli args I expected

1522804177
andrewrk
now to wait 15 more minutes to see if this fixes it

1522804205
relatingdata
sounds good, soon we will have zen self hosting :-) how much remains to be done on the self hosting compiler?

1522804283
andrewrk
lots. we have a partially complete parser, and we have linking against LLVM/clang working on all platforms

1522804285
andrewrk
and that's about it

1522804335
andrewrk
I'm planning on finishing up my proof-of-concept of multiplexing coroutines onto a kernel thread pool first, because I'm planning on making the self hosted parser multi-threaded

1522804348
andrewrk
and also work out some major language changes

1522804672
relatingdata
some years ago I was quiet impressed with

1522805105
andrewrk
neat

1522805312
Braedon
Ahh okay you can't have generic types then 'add const' like `fn(a: const K, b: const K)`

1522805407
andrewrk
Braedon, this is why I think the problem is #733

1522805421
Braedon
Yeh, I agree

1522805480
Braedon
Though the question is raised about generics and whether or not you should be able to add type modifiers to them since you can add '[]' to a type

1522805486
Braedon
But you can't add 'const' for example

1522805503
andrewrk
you can add []const to a type

1522805514
Braedon
Yes

1522805539
Braedon
I would say that seems weird?

1522805555
andrewrk
what are you trying to do?

1522805589
hobomatic
does 'const T' even make sense for an argument type currently? if its a byval argument, its effectively const anyhow from the outside.

1522805604
Braedon
Well for example in the hash map stating that the comparer should be const

1522805606
andrewrk
right. const only makes sense in terms of pointers

1522805611
Braedon
Yes in some cases

1522805670
Braedon
For example you could pass in type '&MyStruct'

1522805680
Braedon
It makes sense that the comparison flags it as 'const'

1522805691
Braedon
But for other non-ptr types you wouldn't care if it was const or non const

1522805734
andrewrk
if you specify &MyStruct as the type of the hash, it's harmless to have the comparator take mutable args

1522805755
andrewrk
you're allowed to pass a fn(&const T) where a fn(&T) is expected

1522805756
Braedon
Yes but it requires you to have possibly two comparison types

1522805759
Braedon
For example with strings

1522805766
Braedon
You aren't

1522805783
Braedon
I'll double check, I felt you couldn't

1522805802
andrewrk
oh my god it finally worked

1522805812
hobomatic
static?

1522805815
andrewrk
yes

1522805821
hobomatic
woo

1522805843
MajorLag
"shell script is the worst language ever"

1522805846
Braedon
You can't pass in fn([]const T) where fn([] T) is expected

1522805874
Braedon
The error is: error: expected type 'fn([]u8, []u8) bool', found 'fn([]const u8, []const u8) bool'

1522805890
Braedon
Unless that rule only applies to pointers and not arrays?

1522805897
andrewrk
Braedon, that's a bug in the compiler, I'll fix it

1522805915
Braedon
Ahhh okay haha, I'm happy to give it a look if you want :0

1522805989
GitHub172
[zig] andrewrk pushed 1 new commit to master:

1522805990
GitHub172
zig/master 2676da6 Andrew Kelley: travis: better s3 artifacts

1522806062
GitHub157
zig/master 6050b9d Andrew Kelley: travis: don't skip tests...

1522806062
GitHub157
[zig] andrewrk pushed 1 new commit to master:

1522806073
andrewrk
ok. fresh master build for linux ETA 27 minutes away

1522806206
aiwakura
hey relatingdata, let me know if you run into issues compiling zen

1522806249
aiwakura
I have a branch of zig called zen_stdlib because I frequently change the ABI

1522806290
aiwakura
it's still a moving target - but if people are interested I'll try to make things more reproducible / have some kind of continuous integration going on

1522806376
aiwakura
there's a loadProcesses branch where I take some dirty shortcuts to load user programs from the shell, but I'm working on making that work properly on the master branch right now

1522806530
aiwakura
self-hosting zen is definitely a long-term goal. the next milestone in that direction is to cross-compile some non-trivial C/C++ program. we'll need to be able to cross-compile LLVM to get the zig compiler running inside zen

1522806562
aiwakura
which means we need a reasonably POSIX-compliant C library. we'll write in zig of course :)

1522806640
MajorLag
ok, this is weird. I'm crashing when calling DirectAllocator.alloc() on windows. It is happening at the system call itself. If I throw a debug.warn line near it, it becomes an error.OutOfMemory instead.

1522806725
andrewrk
MajorLag, hmm. it's crashing at HeapAlloc?

1522806851
MajorLag
HeapCreate, yeah.

1522806896
MajorLag
...I'm fairly certain I've done allocation on windows before, but it's even failing in a simple test right now. I think I might be doing something stupid, but I don't know what.

1522806938
andrewrk
MajorLag, is it maybe this?

1522806955
andrewrk
not taking the address of direct_allocator.allocator

1522806957
relatingdata
ok I will have time in a couple of hours to try this will be on rawhide / fedora 29 gcc 8.0.1 / clang/LLVM 6.0.0

1522807001
MajorLag
....possibly? let me try something

1522807036
relatingdata
here is the error from last night

1522807169
MajorLag
andrewrk,ok, yeah, that seems to be it. Not sure what I've suddenly done differently to run into it though.

1522807171
relatingdata
back in an hour and a half

1522807256
andrewrk
MajorLag, I'm hoping we can come up with some way to catch this with runtime safety, or otherwise do this pattern in a safer way

1522807320
MajorLag
yeah, I ran into a similar issue when using an ArrayList of structs. ArrayList.at() returns a copy.

1522807348
MajorLag
which is what the code says, but not what I was expecting.

1522807354
andrewrk
that's fair

1522807367
andrewrk
perhaps after pointer reform that should return a pointer to 1 object

1522807461
MajorLag
or getting a pointer would be a separate fn, ArrayList.ptrAt() or something. In my case I could have got away with something like ArrayList.overwrite() too, but due to the way I was using it pop()+append() worked fine.

1522807561
MajorLag
Ah, I see. In most of my other code that I was doing a lot of allocations with I was doing linux stuff, where there is no heap_handle to screw up with a copy.

1522807598
andrewrk
MajorLag, oh that's interesting. if there's no state in the struct then a copy is actually ok

1522807616
andrewrk
this is a pretty sinister footgun

1522807623
MajorLag
yeah, but the whole point of the pattern is to keep state.

1522807629
andrewrk
right

1522807642
MajorLag
I suppose you could do something like is done with context in format

1522807660
andrewrk
that would require making all these interface things generic

1522807680
MajorLag
yeah, this is a bit hairy.

1522807812
andrewrk
wooo!

1522807855
MajorLag
awww yis

1522807878
andrewrk
$ ldd zig-linux-x86_64-0.2.0.6050b9d8/zig

1522807882
andrewrk
statically linked

1522807920
MajorLag
yeah I did that test on my static build too. Then I spent some time wondering what the difference between "statically linked" and "not a dynamic executable" was.

1522808058
andrewrk
I was just wondering that

1522808167
MajorLag
I wasn't finding good ifnormation and didn't feel like digging through the gcc source tree. from what I could gather, it means it has, but doesn't use, a dynamic section.

1522808332
andrewrk
oh, that makes sense, I think

1522808392
andrewrk
hmm, I'm still confused. if I pass --static to zig build-exe, it still says "not a dynamic executable" instead of "statically linked"

1522808404
andrewrk
the linker line is: lld --gc-sections -m elf_x86_64 -static -o hello ./zig-cache/hello.o ./zig-cache/builtin.o ./zig-cache/compiler_rt.o

1522808412
andrewrk
maybe it has to do with binutils ld vs LLVM's LLD

1522808461
MajorLag
I dunno. I suppose we could find out by disecting the elf if we really want to know.

1522808484
andrewrk
I'll find out the answer to that mystery after we release 1.0.0  ;)

1522808618
GitHub159
[zig] MasonRemaley opened pull request #888: Ignores .DS_Store (master...feature/ignore-ds-store)

1522808795
MajorLag
I've already updated my site to link to the new static build.

1522808836
andrewrk
great

1522809044
andrewrk
relatingdata, if you have trouble with the build, you can use the download links from

1522809052
Braedon
Btw andrew I think I found out what is the issue (or rather I've narrowed it down)

1522809066
andrewrk
I'm guessing that we need to add some new switches for gcc 8.x if you want to try to get it building from source

1522809073
Braedon
It only breaks when you try to cast from a []u8

1522809101
Braedon
Other types work, and I'm thinking its due to the cast from a string to a []const u8

1522809114
Braedon
That is causing an overlap?

1522809123
andrewrk
what code are you referring to?

1522809169
GitHub131
[zig] andrewrk closed pull request #888: Ignores .DS_Store (master...feature/ignore-ds-store)

1522809240
Braedon
The issue with passing in a function with const parameters to a function without

1522809252
Braedon
Like in the previous issue I outlined with hash_map

1522809355
heakins
Hi all, I see there are native implementations of hashing algorithms in std.crypto, but no encryption algs yet.

1522809370
andrewrk
hi heakins

1522809400
heakins
Anyone working on those? Thinking about spending some time porting DES, AES, etc. to native Zig with comptime, etc.

1522809415
andrewrk
heakins, neat. if anyone were working on it it would be tiehuis

1522809426
andrewrk
he's not in the room right now but he reads the logs

1522809431
heakins
ok

1522809466
andrewrk
Braedon, I'm kinda at the end of the day right now, so my brain is turning to mush. I'd need to see some code examples to help you

1522809669
MajorLag
I know that feel. Between projects and work I feel like I haven't slept in a week.

1522809717
Braedon
Yep, I was up to 2:30am last night finishing stuff haha know how you feel

1522809720
Braedon


1522809742
Braedon
Line 20 won't compile because the types don't match

1522809755
MajorLag
It occurs to me that if we had privat struct fields this interface problem goes away. DirectAllocator.allocator would be private and you'd get a &mem.Allocator from DirectAllocator.allocator() instead.

1522809762
Braedon
But line 18 is happy to pass in that const function

1522809781
Braedon
Private struct fields would be good in lots of other ways, maybe a way to hide them?

1522809853
MajorLag
Usually I'm not a fan of private anything, but in this case as a footgun prevention measure it makes sense. I can always use @ptrToInt() + @offsetOf() + @intToPtr() to get around private if I really need to.

1522809911
Braedon
Or maybe just make it a compile time 'info' thing, like not a warning just some side information to be careful

1522809941
Braedon
Or like '@overrideHidden(X.y)'

1522810028
MajorLag
I feel like Zig's philosophy is that warnings should be errors and it's better to force you to be explicit. So something like @justGiveMeTheFieldAlready() would probably be preferable.

1522810056
Braedon
Yeh I would prefer the builtin function way

1522810092
MajorLag
but that could always just be implemented by the programmer as a comptime fn using @ptrToInt() + @offsetOf() + @intToPtr()

1522810117
MajorLag
of course that can be said of a few builtins, like @fieldParentPtr.

1522810120
Braedon
It could but if it is going to be done by most programmers why not make it standard

1522810122
Braedon
Yeh

1522810128
hobomatic
couldn't just a gross naming convetion work to make it obvious you are doing something bad, like

1522810143
Braedon
Nah because its not so much your doing something bad

1522810147
Braedon
but something you gotta be careful with

1522810148
MajorLag
....yeah, I can get behind that.

1522810165
Braedon
Gotta be careful too with '__' and C

1522810173
MajorLag
well taking the value of something with a bunch of underscores around it should give you pause

1522810180
Braedon
True

1522810192
Braedon
But then is that a syntax rule or just a programmer standard

1522810213
hobomatic
it could be a language style convention, documented in the style guide

1522810223
Braedon
Yeh

1522810495
hobomatic
i am just thinking in terms of 'what introduces the least amount of complexity'. Personally i like the idea of private struct fields, but i think i like fewer weird corner cases from interaction between features

1522810516
hobomatic
... more

1522810546
MajorLag
yeah, I like your suggestion. It's so simple.

1522810599
MajorLag
`var dalloc = dalloc_outer.__allo`... oh right, don't do that. `dalloc_outer.allocator();`

1522810660
Braedon
Would have to be three underscores

1522810670
hobomatic
no less than 5!

1522810672
Braedon
As to not produce potential conflicts with C

1522810681
Braedon
Since their stuff is 2

1522810706
Braedon
Haha holy hand grenade of allocators

1522811762
hobomatic
or maybe, since zig's source encoding is utf8, we could add '😵' or '💣' to the character set for symbools  you would have to do some serious hand gymnastics to even type the fields name

1522814949
GitHub100
[zig] andrewrk pushed 5 new commits to master:

1522814949
GitHub14
[zig] andrewrk closed pull request #864: Getting dir entries on OS X (master...wip-macos-dirent)

1522814949
GitHub100
zig/master e1e536e Andrew Kelley: Merge branch 'wip-macos-dirent' of

1522814949
GitHub100
zig/master 7e951e5 hellerve: st/os: address @andrewrk concerns

1522814949
GitHub100
zig/master f5b43ad Andrew Kelley: std/os: getting dir entries works on OS X

1522819109
tiehuis
heakins: i haven't done anything with DES, AES so feel free to have a go at them

1522820361
Braedon
Just finished my JSON compiler yay

1522820385
Braedon
Don't particularly like the JSON spec but its used enough that I felt it was probably worth it

1522820849
relatingdata
in Zig?

1522821063
Braedon
Yeh

1522821078
Braedon
Most of the time was spent figuring out a few compiler bugs and working around them

1522821105
Braedon
It produces a 'tree' that you can traverse, it only deserialises currently, I'll work on serialization when I get another burst of time

1522821116
Braedon
Just uploading to github then I'll send the link :)

1522821869
relatingdata
:-) Thanks

1522822975
Braedon
The one annoying thing about Zig right now is how it handles string literals

1522822996
Braedon
For example I can't index my string hashmap with a string literal since it isn't marked as const and can't be because you can't add const flag to types

1522823017
Braedon
So I'm hyped for the changes that andrew is doing to how you can pass things in

1522824453
relatingdata
what is the equivalent of const (char *) const for an immutable array of immutable strings?

1522824482
relatingdata
like month names or day names etc

1522825289
Hejsil
Array of imutable strings: const arr: [Size][]const u8 = ...

1522825334
Hejsil
Const slice to array of imutable strings: []const []const u8

1522826121
Braedon


1522826134
Braedon
It needs a few more unit tests but it works :)

1522826288
relatingdata
catch all tomorrow I am off

1522834742
GitHub0
[zig] tiehuis pushed 1 new commit to master:

1522834743
GitHub0
zig/master f68c2e0 Marc Tiehuis: Fix off-by-one error in all crypto functions

1522835915
GitHub73
[zig] tiehuis opened pull request #890: Add Hmac function (master...hmac)

1522845311
GitHub57
[zig] BraedonWooding opened pull request #891: String Utilities (master...StringUtils)

1522849574
man213
Hello, guys. I'm learning zig build system, and, using provided examples, composed the following script:

1522850808
andrewrk
MajorLag, that's a really great point about private fields

1522851008
andrewrk
man213, damn, if we had windows stack traces it would tell exactly what happened

1522851090
andrewrk
your code looks fine to me. I'll try this on my windows laptop later tonight

1522851104
andrewrk
another option is to debug it with msvc

1522851177
man213
andrewrk: Thank you, Andrew! I'll try to dig it further.  At least we can debug already compiled executable with visual studio. And this is really awesome!

1522851890
andrewrk
MajorLag, private field isn't a perfect solution. Because you get a pointer to the struct field, but then it's not obvious that you have to keep the struct alive for the same lifetime

1522852283
GitHub30
[zig] andrewrk closed pull request #890: Add Hmac function (master...hmac)

1522852285
GitHub113
[zig] andrewrk pushed 1 new commit to master:

1522852285
GitHub113
zig/master 8938429 Marc Tiehuis: Add Hmac function (#890)

1522855583
MajorLag
@andrewrk, but isn't that the case now? DirectAllocator.init() returns a DiretAllocator struct that you later have to deinit().

1522855663
MajorLag
I honestly think Hejsil's idea about just naming the field differently to make it obvious it is internal and using an allocator() fn is better than a private filed, but I'm biased against private fields.

1522855694
Hejsil
I don't think that was my idea :)

1522855737
Hejsil
But on that note, I think explicit copy is the way to solve this

1522855751
Hejsil
Maybe

1522855762
Hejsil
Actually no, people will just do the copy

1522856157
MajorLag
Explicit copy isn't a bad idea, as `a = b` is sort of a hidden memcpy if b is a struct. However, there are many cases where structs are just small containers of data (like a Vec2) where that's fine and explicit copy would be annoying. I almost think there should be another type, like `Object` or something that is a struct with more protected characteristics.

1522856430
andrewrk
MajorLag, here's what I mean:

1522856452
andrewrk
even with a private (or weirdly named) field, this footgun still exists

1522856659
andrewrk
maybe if we had really good detection of returning stack data from functions

1522858743
MajorLag
Hmmm... yeah, it won't always be as obvious as in the DirectAllocator case.

1522858854
heakins_
In andrewk’s recent talk at RC he said that the Zig version of SHA256 is faster than the C/asm implementations because the use of comptime/inline allowed LLVM use the rorx instruction. My understanding from the Zig docs is that comptime/inline don’t make the compiler do optimization any differently, it’s just that compilation will error if it’s not possible to evaluate at compile time. So is the i

1522858854
heakins_
mproved performance really due to comptime/inline?

1522859045
Hejsil
Sometimes backends (llvm) can't unroll loop completely (source: some llvm optimization talk on youtube), and when that happends it can't take advantage of the extra knowlagde gained from this. Zig's comptime forces evaluation (unrolling in this case)

1522859082
Hejsil
I haven't looked at the asm of SHA256 btw

1522860420
andrewrk
heakins, in theory, if the optimizer is perfect, it wouldn't matter if you use comptime/inline. in practice, the optimizer is heuristics based and so sometimes misses things

1522860442
andrewrk
if you use inline to unroll a loop, it does generate different code

1522860459
andrewrk
there will not be a loop in the generated LLVM IR in this case

1522860683
andrewrk
Hejsil, I'll have an accepted proposal to solve #760 by the end of today

1522860698
andrewrk
I want to unblock you on the parser

1522860720
Hejsil
Well, I'm not blocked

1522860787
Hejsil
I've started rewriting the expression parsing, anyways, because I think my current precedence code is not very good

1522860817
andrewrk
that's what I would do too. I would just make it the state machine equivalent of the current recursive descent parser

1522860831
Hejsil
Ye, that's what I planned

1522860983
Hejsil
The only "hack" I have to do to make that work, is to use DestPtr as a return, between expr states

1522861023
andrewrk
I wonder if DestPtr is overcomplicated now that we use an arena allocator for the parser

1522861038
andrewrk
it used to be a solution for using a normal allocator where we had to carefully free correctly on error return

1522861046
andrewrk
but this arena allocator makes it waaaay simpler

1522861095
Hejsil
Well, we still wonna avoid ""leaks"" as that will take up memory during the execution of the rest of the compiler

1522861113
andrewrk
right - but when the parser returns an error, we just free the entire arena

1522861118
Hejsil
Indeed

1522861144
andrewrk
oh, you're referring to if we waste memory on a successful return

1522861151
Hejsil
Yes

1522861152
andrewrk
e.g. if we prepare some memory, and then don't end up using it

1522861154
andrewrk
got it

1522861193
Hejsil
But for expr, I have to go AssignExpr -> UnwrapExpression -> ... -> AssignExpr, if (token == assign_token) alloc assign op; else do nothing

1522861214
andrewrk
I agree that's a thing. But I wouldn't worry about it

1522861257
Hejsil
Well, expressions are common, and in this case I think I would allocate to many "dead" expressions if I did it the easy way

1522861266
andrewrk
good point

1522861316
Hejsil
Aka, to parse '+' i would alloc an "assignment", "unwrap", ... down to the state that parses '+'

1522861374
andrewrk
I think the recursive descent parser avoids that

1522861383
Hejsil
Yes

1522861424
Hejsil
It can return values, so it's trivial for it to check the next token and return expr if the token does match

1522861437
Hejsil
DestPtr have to have an allocated node to store the expr in

1522861463
Hejsil
doesn't*

1522861491
andrewrk
I think there is a way to represent that logic in the state machine

1522861523
Hejsil
I've been thinking about it, but the solution I came up with would require alot of states

1522861568
andrewrk
it would be 1 for each of the expression types in the grammar reference, right? e.g. BinaryOrExpression and friends

1522861575
Hejsil
Yes

1522861582
andrewrk
I think that is reasonable

1522861591
Hejsil
Hmmm

1522861606
Hejsil
Ok. Option 1. Return states for all expressions

1522861614
andrewrk
that maps to how it works in the recursive descent - every expression has to go through these states, except they end up on

1522861629
Hejsil
Option 2: Use the DestPtr we get from the statment that wants an expr as tmp storage

1522861670
andrewrk
oh, is option 2 what you were describing above?

1522861677
Hejsil
Ye, was trying to lol

1522861682
andrewrk
that sounds neat

1522861690
Hejsil
We only ever need to store one expression

1522861693
andrewrk
right

1522861695
Hejsil
The one returned by prev state

1522861759
andrewrk
sorry - my attention is split while I'm at work

1522861764
Hejsil
Np

1522861784
Hejsil
I'll just do my DestPtr solution. Then you can see it and decide if it's any good

1522861797
Hejsil
Introducing the extra returns states is trivial

1522861803
andrewrk
sounds good

1522862445
Hejsil
Hmmm, I might need the extra states anyways

1522862446
Hejsil
Lol

1522865714
Hejsil
andrewrk, why does async use "<" ">" instead of "(" ")" for the allocator?

1522865736
andrewrk
syntax ambiguity

1522865785
Hejsil
Hmmm, thought so. I just don't see it myself

1522865800
MajorLag
thinking about this issue with allocators & interface pattern: at least in the allocator case one solution would be to allocate whatever you need to keep track of, like the HeapHandle, and the handle in the struct is just a pointer to that so copies don't actually keep any state. Of course that does nothing for other non-allocator interfaces, however I would like to point out, andrewrk, that your example does have

1522865801
MajorLag
without a "deinit()" that should be a clue. Still, feels like there is a better solution.

1522865814
andrewrk
Hejsil,

1522865963
andrewrk
Hejsil, async (is_this_a_fn_or_allocator) ()

1522865991
Hejsil
OOoh right

1522865993
Hejsil
Ye, thx

1522866016
andrewrk
also, we want to be able to fn(calling_convention_enum) but it's the same problem

1522866025
andrewrk
so this precedent lets us do fn<calling_convention_enum>

1522866036
MajorLag
wait...no, I didn't think this through about how the allocator interface actually works, nevermind.

1522866141
Hejsil
Not to argue to much about syntax, but did you consider "[" "]" instead?

1522866166
Hejsil
Ooh way

1522866167
Hejsil
No

1522866187
Hejsil
async [0]u8(some_expr)

1522866198
Hejsil
Not that you can do an async cast anyways

1522866201
Hejsil
But still

1522866252
Hejsil
Back to parsing!

1522867419
zolk3ri
andrewrk: Do you have the file "test-sha256.zig" uploaded somewhere?

1522869276
andrewrk
zolk3ri, I'll dig it up for you

1522870013
andrewrk
zolk3ri, I believe it's this file:

1522870030
andrewrk
with line 10 changed to @import("sha-2.zig").Sha256

1522870063
andrewrk
sorry, @import("sha2.zig").Sha256

1522870099
zolk3ri
andrewrk: Ah, thank you!

1522878019
Hejsil
That was one hell of a refactor. Bedtime for me!

1522878149
andrewrk
hejsil: wow!

