1532687281
GitHub159
[zig] kristate opened pull request #1297: [WIP] builtin function @handle() (master...handle-builtin-issue1296)

1532698218
bheads__
andrewrk, for a solution to the @handle issue 1297.  What if functions could have implicit params.  For async function you would have an implicit allocator and handle

1532698254
bheads__
fn <alloc, handle> foo(x: i32) { ... alloc and handle are in scope } ?

1532699304
bheads__
This idea could also be used to control the context a function executes in

1532699336
bheads__
fn<ctx: context> foo() void {  }    ...   foo<new_ctx>();

1532700382
bodie__
howdy.  I noticed the zig2 compiler has a similar issue to zig 0.2.0 on OSX where it can't find its libraries

1532700397
bodie__
er, "zig2" as in self-hosted

1532700401
bodie__
should I open an issue on this?

1532705794
andrewrk
bodie_, yes please. stage2 should at least be building on macos

1532705820
andrewrk
bheads__, handle isn't really passed in to an async function, it's created in the body

1532705831
andrewrk
in the function prelude

1532708453
andrewrk
ziegfried is a pretty great name for a general purpose allocator in zig

1532708457
andrewrk


1532721275
unique_id
looking at my  c++ coroutine stuff from a while back...I have already forgotten how c++ coroutines work :( I have an async_http_write that returns an awaitable type of my own creation, which has an await_suspend method which gets passed a coroutine_handle, and it finally calls an asynchronous write function which takes a lambda, and from it I resume the coroutine

1532721293
unique_id
Maybe learning Zig's coroutines will help me understand C++'s coroutines :)

1532721349
unique_id
and after that I can port my c++ code

1532721366
andrewrk
unique_id, you might want to wait 1 day - I'm in the middle of a really important commit right now, dealing with cancel semantics

1532721379
unique_id
alright :)

1532721390
andrewrk
I'll have a really nice example of file system watching, where std.event.fs.watchFile() returns a Channel

1532721951
unique_id
how useful are stackless coroutines? Have I asked this question before? I mean you're only transforming a single function at the base of a call graph while everything else stays the same, no?

1532722015
andrewrk
they're useful in that you can use event-based programming with async/await syntax, which is huge

1532722023
andrewrk
here's the example I hinted at:

1532722033
andrewrk
to me, this is really high level code

1532722050
andrewrk
and it never goes beyond 1 level of indentation

1532722109
andrewrk
most of those try's on async can go away. there's an issue open for that. because when you await something in the same frame as you async it, and the function is comptime known, we can put the coro memory in the calling frame

1532722178
andrewrk
having used them at least in a proof of concept in self-hosted compiler, the stacklessness isn't an issue at all

1532722241
unique_id
okay, awesome

1532722707
andrewrk
one note is that the performance gap between debug mode and release-fast mode is bigger

1532722778
andrewrk
the cost for error return traces for normal functions is O(1) and the cost for error return traces for coroutines is O(N) where N is the max number of stack frames we collect (right now hard coded to 30)

1532722788
andrewrk
but iirc that only matters when an error is returned

1532722813
andrewrk
(in release-fast mode error return traces are disabled)

1532723369
unique_id
agh I missed your stream yesterday, gonna watch it now

1532723438
andrewrk
I think it got pretty dry. also everything I came up with relating to coroutines in that stream I've already tossed out

1532723460
andrewrk
but now I have a notebook with what I believe to be a sound plan

1532723555
unique_id
last time I learned about bash history searching :)

1532723655
andrewrk
ahhh. yes, it's life changing

1532723681
andrewrk
easily saves hours every day

1532733425
winksaville
I've created a Message

1532733452
winksaville
I then thought maybe I could use `data: var`, I tried `const Node = struct { data: var };`

1532733523
winksaville
But I get an "error: invalid token: 'var'

1532733616
winksaville
Any suggestions?

