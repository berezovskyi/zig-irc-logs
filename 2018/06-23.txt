1529720561
isolier
andrewrk: Regarding emitting intel syntax, I found using the zig option to emit llvr-ir, then using llc (with respective intel syntax option) to compile to intel assembly works well enough.

1529730119
dbandstra
const Struct = struct { a: bool, b: i32 }; // does it make sense that @alignOf(Struct) is returning 1?

1529730174
dbandstra
i thought that the alignment of a struct would be that of the highest-alignment field in it

1529730943
andrewrk
dbandstra, that's still TODO

1529730951
andrewrk
field re-ordering

1529730983
andrewrk


1529734147
dbandstra
do you need field re-ordering? wouldn't you just add padding bytes? it seems like that already happens because that struct i pasted has a size of 8

1529734164
dbandstra
so i'm assuming that there are already three padding bytes after the bool and before the i32

1529734531
dbandstra
feels like @alignOf is just returning the alignment of the first struct field

1529791105
juturnas
Is it possible to declare your own type for an imported C function?  I'm trying to pass a callback to a C function, but it doesn't like that the pointer to the callback is const

1529791124
juturnas
Or is there an escape hatch that can be used to discard the constness?

1529792157
juturnas
Found a couple examples of the former in the zig repo, good to go

