1527135304
donpdonp
andrewrk: nod.

1527135311
donpdonp
im having a different, more basic zig prob

1527135325
donpdonp
do("string")

1527135341
donpdonp
fn do(word: []u8) I figured would cover any string

1527135354
donpdonp
but im getting cant cast [6]u8 to []u8

1527135370
donpdonp
which I understand "string" is a fixed sized string and not a slice

1527135386
donpdonp
but do I have to really "string"[0..] or somethiing?

1527135530
andrewrk
donpdonp, you either need to make it a []const u8  or figure out where the memory will go

1527135549
andrewrk
because you can't mutate string literals - they end up in the read-only .data section of the ELF

1527135586
donpdonp
oh thats all it needed, the const. ok thx

1527135615
andrewrk
this has come up a few times before. I'll make a mental note to improve the error message

1527135616
donpdonp
error: expected type '[]u8', found '[7]u8'

1527135625
donpdonp
its just not obvious that the fix for that is []const u8

1527135627
donpdonp
yeah.

1527135644
andrewrk
there's a lot more we can do to report why exactly types do not match

1527135678
andrewrk
in fact the internal functions return a recursive struct that has a complete explanation - we just don't convert this data into human readable error messages yet

1527135852
donpdonp
o^O

1527136609
GitHub33
[zig] andrewrk pushed 1 new commit to master:

1527136609
GitHub33
zig/master b132a17 Andrew Kelley: std.zig.parse ignores comments...

1527139014
GitHub167
[zig] andrewrk pushed 1 new commit to master:

1527139014
GitHub167
zig/master 54e887e Andrew Kelley: std.zig.tokenizer: fix tokenization of hex floats

1527139410
donpdonp
ug. turns out gobject (which gtk uses) is its own kind of pointer-hell.

1527139466
donpdonp
also found an enum BEHAVIOR = {a=1, b=2}, then they call func((BEHAVIOR)0);

1527139488
donpdonp
which works in C, but the zig enum doesnt have an entry for 0 cause... it follows the rules.

1527140762
donpdonp
okay so dipped my toes into Qt. so much header magic I cant even get starter.

1527140773
donpdonp
with gtk i could at least open a window

1527140783
donpdonp
sigh.

1527146935
tiehuis
so i had a quick look at implementing a python extension in zig last night

1527146956
tiehuis
that proved a bit annoying at this stage due to the way a PyObject is defined with way too many macros

1527147010
tiehuis
i then had a look at embedding lua in a zig program and that fairly easily working around a few macro parsing deficiences

1527147024
tiehuis
pushed the example here:

1527147043
tiehuis
when we improve translate-c then it would work really easily which is nice

1527147069
tiehuis
i'm also slightly interested in getting a libc implementation far enough long so that we could embed it directly with no libc required

1527147107
tiehuis
a quick scan of the source indicates that it is fairly light in its usage so there isn't that much work required here

1527147155
tiehuis
would be cool to be able to cross-compile a program with a robust dynamic scripting language as a use case

1527147250
tiehuis
also small note but i'll probably make a pr for the bigint module into std next week

1527147278
tiehuis
only need to fix up one branch in multi-limb division

1527154410
Hejsil
Interfaces in userland without @creattype/@reify?! What is this dark magic!

1527169108
andrewrk
tiehuis - wow, all exciting stuff

1527169528
andrewrk
Hejsil, I think this will be enhanced by the addition of tuples (and removal of var args)

1527169694
Hejsil
andrewrk, true. Especially if we can "explode" the tuple into the remaining args of a function.

1527169716
andrewrk
I'm thinking that will look like @call(function, tuple)

1527169751
Hejsil
Could it do, @call(func, arg1, arg2, tuple) ?

1527169774
Hejsil
You know, provide some args, and then give a tuple for the rest

1527169778
andrewrk
@call(func, [arg1] ++ [arg2] ++ tuple)

1527169782
Hejsil
Aah

1527169786
andrewrk
where [foo] is a tuple of size 1

1527169791
Hejsil
Powerful

1527169827
Hejsil
The more I hear of tuples, the more I want them!

1527169875
andrewrk
btw last night I got zig fmt to the point where it handles all same line comments correctly

1527169890
Hejsil
Nice

1527169901
andrewrk
the parser ignores all comments and skips over the tokens. the renderer looks "nearby" tokens for line comments to findthem

1527169933
andrewrk
so now I'm going to use this to change all &T to *T and move one with pointer reform

1527169941
andrewrk
*move on

1527170011
Hejsil
Would love to try out zig fmt with the new pointer syntax, but I have a branch I wonna finish up before I get to that :)

1527170015
andrewrk
fixing the inability to have a pointer to a type at comptime should fix a lot of comptime bugs

1527170117
andrewrk
this interface example is really neat

1527170192
Hejsil
One thing that would be nice, is to have methods on the interfaces

1527170206
Hejsil
Which is not really possible without @reify

1527170221
andrewrk
I see

1527185999
t5c
hi, I'm adding OpenBSD syscalls and errnos to zig right now. I'm wondering why the values like pub const O_CREAT = 0o100; are in octal notation, does that have any particular reason? for simplicity I would just use the hex values from OpenBSD.

1527186029
t5c
the 0u100 example is from os/linux/x86_64.zig

1527186141
t5c
oh I see that the darwin modes are also in hex or decimal, so it shouldn't be a problem

1527186902
MajorLag1
probably because they're in octal in the C source and documentation.

1527187088
t5c
yeah, my question was more about style. but since there are hex and decimal already in...

1527187133
andrewrk
hi t5c

1527187158
andrewrk
hex decimal is preferable I think. the ones that are in octal are from code that was ported

1527187158
t5c
hi andrewrk

1527187205
t5c
I guess its fine to use the exact values from the header of the os

1527187225
t5c
makes porting easier not having to calculate everything

1527187439
t5c
so many syscalls, signals and stuff :/

1527187442
t5c
man its a lot

1527188913
andrewrk
t5c, are you aware of zig's lazy top level declaration evaluation?

1527188973
andrewrk
my strong suggestion to you is to follow this process: 1. port nothing to OpenBSD and try to run the zig std lib tests

1527189001
andrewrk
2. see what compile errors you get. port over the OpenBSD functionality that is necessary to fix them

1527189009
andrewrk
repeat step 2 until all std lib tests passing

1527189037
andrewrk
it will be a small manageable subset of OpenBSD that we can merge and iterate on

1527189051
andrewrk
even the linux support right now is not complete

1527189060
andrewrk
we have only added syscalls that we needed

1527189161
t5c
andrewrk: yes that is a good plan.

1527189176
andrewrk
oh, and before all std lib tests - you can start with something simple such as hello world

1527189190
andrewrk
that should only require read/write and some constants

1527189218
andrewrk
this is related:

1527189232
andrewrk
if you make significant progress, I'll try to figure out how to get CI going for OpenBSD and then we can add official support for it

1527189278
t5c
that sounds good.

1527189360
t5c
ah yes, there where issues with finding the stdlib on openbsd.

1527189370
t5c
maybe thats the first thing to fix

1527189397
t5c
btw, thanks for putting the openbsd integer sizes in pullreq was by me

1527189404
andrewrk
that would be this function:

1527189439
andrewrk
err, actually the one below it, selfExeDirPath

1527189571
t5c
yes, patched that couple hours ago. testing in a bit

1527200266
t5c
andrewrk:

1527200282
t5c
dunno if there is something missing in openbsd right now

1527200553
t5c
probably the lld or gcc stuff

1527200554
t5c
hm.

1527200588
andrewrk
t5c, this is problems with link.cpp not linking against libc correctly on openbsd

1527200609
andrewrk
I suggest working on the non-libc tests first

1527200646
andrewrk
actually let me ask a question first - is the syscall ABI stable?

1527200654
andrewrk
on linux it is, on macos it is not

1527200662
andrewrk
it's better for zig if it is

1527200691
t5c
no, I don't tink so

1527200718
andrewrk
ok so we need to use libc as the syscall interface

1527200722
andrewrk
so we need to solve this problem

1527200729
t5c
thats what I'm doing

1527200736
t5c
using libc

1527200744
andrewrk
you may need to edit link.cpp and edit the ELF code that gives linker arguments to LLD

1527200762
andrewrk
the first thing to do is try using ld to link the .o file that zig generates

1527200766
andrewrk
it's probably in zig-cache/test.o

1527200778
andrewrk
see if you can link that with the system linker

1527200788
andrewrk
then try with LLD from the LLVM project

1527200804
andrewrk
one trick  I used is to run gcc or clang and use strace to see what arguments it passes to the linker

1527200812
andrewrk
you can also read the clang code that constructs the linker args

1527200828
andrewrk
it's pretty readable

1527200845
andrewrk
once you know what args to use to link with the linker directly, you can edit link.cpp in zig to do that

1527201118
t5c
there seems to be a problem with the llvm ld and openbsds stack protector. __guard_local is an undefined symbol

1527201230
t5c
i'd like to change the linker to use the llvm linker and not the default one. should be possible with cmake, shouldn't it?

1527201682
t5c
nah, that wouldn't help

1527202932
t5c
no crt1.o - can be replaced with crt0.o, but also no Scrt1.o ...

1527203893
andrewrk
t5c, we can add __guard_local to std/special/builtin.zig

1527203903
andrewrk
you can see there are other guard functions there depending on the os / archc

1527204463
andrewrk
t5c, did you get it to work just by invoking the system ld using a zig-generated .o file?

1527204514
t5c
no,

1527204535
t5c
thats with the standard linker on build.o

1527205463
andrewrk
t5c, we can create an implementation of __guard_local and put it in std/special/builtin.zig, and then we'll link with builtin.o

1527205533
andrewrk
we can look at the implementation in openbsd libc

1527205618
andrewrk
where is openbsd libc? I haven't found the source repository yet

1527205648
andrewrk
ah found it. here's a mirror:

1527206053
andrewrk


1527206174
andrewrk
I don't see this symbol defined anywhere. it seems like it's pointing at random data

1527206212
andrewrk
let's try implementing it like this:  export fn __guard_local() c_long { return 0;}

