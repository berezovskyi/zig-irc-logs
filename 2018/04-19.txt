1524096193
andrewrk
MajorLag, I'll try to duplicate the problem tonight

1524096333
MajorLag
I think I'm only really affected because I insist on not installing VS, or even running the BuildTools installer. I'm probably about the only person on earth affected by this.

1524096347
andrewrk
I still want to make it work for this case

1524096461
MajorLag
Of course. BTW, do I have to include my tests somewhere for CI to run them? I only included them in the zig file, didn't see them in the log output.

1524096548
andrewrk
yeah, if it's a separate file, you'll need to do something like this:

1524096588
MajorLag
Not separate, right in time.zig.

1524096630
andrewrk
hmm no that should be getting run

1524097005
andrewrk
MajorLag, oh, we need os/index.zig to @import("time.zig") in a test {} block

1524097021
andrewrk
or better yet: comptime { if (bultin.is_test) { _ =

1524097029
MajorLag
ah, ok.

1524097034
andrewrk
or better yet: comptime { if (bultin.is_test) { _ = @import("time.zig"); } }

1524097051
andrewrk
workaround for lazy declarations

1524097139
MajorLag
I was suspicious when my first CI succeeded. There's almost no way I got Darwin right on the first shot.

1524097999
MajorLag
So should I alter the test block in std.os? because it currently doesn't use said workaround

1524098383
andrewrk
MajorLag, yeah that's perfect

1524098392
andrewrk
I'll do my own suggestion to all the std lib later

1524099179
andrewrk
MajorLag, your changes to the test/comptime thing make it so that --test-filter works if you do `zig test` on the root source file rather than the file with matching test names

1524100812
JinShil
Hello again.  Does Zig have anything in the language for dealing with volatile memory (think memory-mapped IO in microcontrollers)?

1524100956
MajorLag
JinShil: Yes, see:

1524100975
MajorLag
short version, just put 'volatile' in front of the type.

1524103039
andrewrk
right, volatile is a property of pointers

1524104563
GitHub60
[zig] andrewrk pushed 1 new commit to master:

1524104563
GitHub60
zig/master 06909ce Andrew Kelley: support break in suspend blocks...

1524135179
achambe
anyone know if there are there any coverage tools that work with zig debug symbols as it is?

1524136269
alexnask_
@andrewrk What is the difference between void and c_void? Thought I'd ask since I see a todo for it in the docs, I assume it's important

1524138549
Hejsil
As far as I know, void in zig is just a 0 byte type. You can have fields, variables, parameters, returns that are void and they are just treated like a 0 byte value. c_void works like in C (aka, you can have void pointers, but c_void is not something that can be a value)

1524138565
alexnask_
Ah, ok, gotcha.

1524138573
alexnask_
Thanks!

1524138577
Hejsil
Np!

1524138718
alexnask_
Anyone knows if there are opengl bindings available? Or should I just cInclude + link it and work that way?

1524138743
Hejsil
I think that's how all projects that want opengl does it

1524138747
Hejsil
for now

1524138762
Hejsil
I haven'

1524138765
Hejsil
t seen any bindings

1524138810
alexnask_
Ok, I'll do it that way and if I end up building useful abstractions around it I may split them off into a small package

1524138853
Hejsil
@alexnask_, void is a little special. You are allowed to ignore it when returned from functions, but other 0 size types cannot be ignored:

1524138876
Hejsil
Just food for thought

1524138904
alexnask_
I like the way void is handled, metaprogramming in C++ can sometimes be a pain because of the issues zig appears to be solving

1524139014
Hejsil
It's, in general, a little weird that types can't be of size 0 in C/C++

1524139050
alexnask_
Well it's a requirement for the memory model of C++ at least in the recent (C++11 forward) standards.

1524139067
alexnask_
Each object must have a unique address I believe

1524139091
alexnask_
So empty structs have to be of sizeof 1

1524139122
Hejsil
Ooh! C handles 0 sized structs, lol

1524139133
Hejsil
But ye, C++ gives it size 1

1524139140
alexnask_
Huh, I assumed they worked the same as C++

1524139162
Hejsil
Apparently not

1524139196
alexnask_
C standard guy missed the memo I guess :P

1524139202
alexnask_
guys*

1524139215
alexnask_
Since they seem to be copying everything else from C++11

1524139394
Hejsil
Hmmm. For variables, C still pads them out, so they have unique address'

1524139463
alexnask_
sizeof(void) is 1 too

1524139516
alexnask_
sizeof(<empty struct>) returns 1 in gcc too

1524139523
alexnask_
woops im in C++ mode

1524141102
MajorLag
alexnask_: I actually don't link to C for OpenGL (on windows). I just used translate-c on the headers and link to OpenGL.lib. Obviously also the relevant Win32 wgl code.

1524141172
alexnask_
Right, so libc isn't needed

1524141194
alexnask_
Any funcitonal difference between using translate-c on the headers and doing cImport or does cImport translate C behind the scenes?

1524141220
Hejsil
cImport uses translate C, as far as I know

1524141249
MajorLag
I personally use translate-c because it lets me clean up anything that wasn't converted correctly.

1524141271
MajorLag
For the opengl/win32 stuff, see:

1524141319
alexnask_
Nice, thanks for the link.

1524141367
alexnask_
@MajorLag, are you @tgschultz on github?

1524142754
alexnask_
Where does zig look for packages?

1524142812
alexnask_
I can't find any command line option that overrides it

1524144533
alexnask
Nvm I just import the index file I guess

1524144974
MajorLag
alexnask: Yeah, that's me. Also, there's a commandline option to specify packages `--pkg-begin [name] [path] --pkg-end`, and some way to do that in build.zig but I'd have to check the docs.

1524145101
alexnask
Tried using those but I don't really get how they work or what the path is relative to, I'll just stick to importing for now

1524145323
Hejsil
alexnask, im pretty sure the path is relative to where you call zig build-exe. The path is relative to build.zig if you use the build system

1524145345
alexnask
Didn't seem to work that way, I guess I'll give it another shot

1524145363
Hejsil
Here is a build.zig for ref, if you're going that route:

1524145472
MajorLag
oh good, seccomp can actually return arbitrary errno values.

1524145488
Hejsil
And the fun begins

1524145744
Hejsil
Grrr, I really need "reflection" of enums. I have to generate a lookup table, but right now it is not possible to iterate over all enum members and add each of them to the table.

1524145809
Hejsil
Maybe I should look into adding @field

1524149833
alexnask
@MajorLag Is there any issue tracker/comment section I can notify you on about issues with the winapi package?

1524149913
alexnask
The one I caught right now is that WNDPROC appeard to require a stdcallcc function

1524149990
alexnask
With the current definition it gets called a couple of times correctly then it crashes (presumably when we try to get some argument since we're talking ABI issues)

1524150276
MajorLag
Right now, because I don't really use git for my own work, there isn't anything like an issue tracker. Things on that site are just kind of as-is. Feel free to email me or get my attention here though.

1524150533
alexnask
Sure, I will probably mail you a diff if end up touching quite a bit.

1524150610
MajorLag
I'm confused. From what I can tell, WNDPROC is LRESULT CALLBACK, and CALLBACK is  __stdcall.

1524151163
MajorLag
My win32 test program works correctly with it declared as stdcall.

1524151190
MajorLag
granted, my wndproc is pretty much just passthrough on that.

1524151518
andrewrk
as far as I understand, all the windows API functions should have stdcallcc on them. it matters for x86, but for x86_64 stdcallcc and c abi are the same thing

1524151521
alexnask
Sure, currently WNDPROC = '?fn(HWND, UINT, WPARAM, LPARAM) LRESULT;'

1524151539
alexnask
I added the stdcallcc in my version

1524151542
andrewrk
almost certainly it should at least be `extern fn` to get the c abi

1524151553
alexnask
It crashes with extern too

1524151561
andrewrk
is this 32 bit?

1524151571
alexnask
As MajorLag said, WNDPROC should be a CALLBACK which is __stdcall

1524151578
alexnask
Yes, this is in 32 bit

1524151587
andrewrk
ah I see. yeah that makes sense. 32 bit is the one where stdcall matters

1524151612
alexnask
Yup, on x64 there is a signle calling convention for windows iirc

1524151617
alexnask
single*

1524151658
MajorLag
ah, ok, I'm on 64bit so I'm not seeing the same issue

1524151680
alexnask
Right, that makes sense

1524151806
MajorLag
Oh, and apparently I didn't declare my fn using WNDPROC, I just went ahead and said `pub stdcallcc fn`

1524151807
alexnask
Got crinkler to work like a charm btw, I'm now producing ~1kB executables to open a window

1524151828
alexnask
I just need to build a .lib for every def file with lib.exe and then link to those libs + the microsoft sdk ones

1524151882
alexnask
@MajorLag I defined it that way too but you can't fill the WINCLASS struct with it unless WNDPROC is changed on 32bit.

1524151913
alexnask
On 64 bit I assume zig is smart enough to know that the calling convention is the same and lets you assign into it (perhaps?)

1524151937
alexnask
WNDCLASS*

1524152014
andrewrk
assign into what?

1524152043
MajorLag
I did a pointer cast apparently. It has been a while since I've worked with this. I keep meaning to port toy game engine to it so I can unshackly myself from SDL, but I haven't gotten around to it.

1524152046
andrewrk
you can definitely do what you're trying to do. stdcallcc is one of the supported calling conventions of zig

1524152063
MajorLag
`wcTest.lpfnWndProc = @ptrCast(win32.WNDPROC.Child, winProc);`

1524152114
alexnask
Right, so you basically just got around the type system :P

1524152126
andrewrk
oh I see the question now

1524152135
andrewrk
allowing implicit cast on x86_64 from stdcallcc to extern

1524152137
alexnask
Anyways, I'll send you a diff once I have some changes stacked up

1524152158
alexnask
@andrewrk Right, something along those lines

1524152159
MajorLag
yeah, I was too quick to work around it rather than actually figure out the issue.

1524152223
alexnask
Btw, is there any way to init a struct to all zeroes?

1524152262
alexnask
Without leaving it uninitialized then memseting it, that is

1524152264
andrewrk
alexnask, no

1524152270
alexnask
Ok

1524152289
andrewrk
idea being, you want a compile error at all the initialization sites when you add a new field

1524152312
alexnask
Right, makes sense

1524152333
MajorLag
I wouldn't be surprised to find a whole lot of stuff broken in that package, because as I noted on the site it was built from translate-c (an older, more broken version at that), and then I applied a lot of manual and automated cleanup, doing at least compiler error checks where possible.

1524152346
alexnask
With @field it could be written in userland anyways

1524152400
alexnask
@MajorLag No worries, better than going through the same process all over again :P I'm not really expecting a stable package ;)

1524152473
MajorLag
you can write it in userland without @field. `fn zeroStruct(comptime T: type) T { var s = undefined; mem.set(T, s, 0); return s; }`

1524152474
alexnask
I just need a window with an OpenGL context and ESCAPE to work, really :P

1524152487
alexnask
Good point

1524152504
MajorLag
that's basically what my test program is, so you should be covered.

1524152526
andrewrk
feel free to contribute to std/os/windows/index.zig btw

1524152572
andrewrk
ideally all the windows api you'll ever need will be there eventually

1524152590
MajorLag
std does things a little different from how I setup the win32 package. win32 sticks closely to the C definitions, where for instance std uses @OpaqueType for HANDLE.

1524152610
MajorLag
which breaks MAKEINTRESOURCE

1524152698
andrewrk
the way it works in std makes it so you can't accidentally pass an HINSTANCE where an HMODULE was expected or vice versa

1524152704
andrewrk
but it sounds like that is sometimes desirable?

1524152719
andrewrk
you can always @ptrCast betwen them

1524152828
MajorLag
oh, i didn't realize that was allowed for @OpaqueType. I suppose @intToPtr(@ptrToInt), the swiss army knife of hackery, would have worked too.

1524152936
andrewrk
c_void is just defined like this:  const c_void = @OpaqueType();

1524152967
andrewrk
so the difference between &c_void and &@OpaqueType() is that the second one is not the global one that everyone shares

1524153308
MajorLag
good to know. I may add enough code to std.os.windows in the near future to get a window up and running in that case. So much on my todo list though...

1524153416
MajorLag
If I do that I may also convert those A calls to W... but that would require an allocation for runtime values which might affect other parts of the stdlib that don't necessarily take an allocator currently.

1524153437
andrewrk
yeah. it's going to be a bit of an annoying undertaking

1524153458
andrewrk
fortunately (or not) a lot of the places where it matters, we already need an allocator in order to insert a null byte

1524153498
MajorLag
true, but that might be going away with pointer reform.

1524153540
MajorLag
If only MS had been lazy and not implemented unicode until UTF8 came around.

1524153567
andrewrk
it wouldn't fully go away. best case scenario we would have multiple ways to call the same API - e.g. File.open and File.openAndMyPathAlreadyHasANull

1524153601
andrewrk
the former would call the latter

1524153602
MajorLag
probably best to do that with var on the string and comptime branch?

1524153613
andrewrk
hmm that's an idea

1524153655
MajorLag
yeah, actually I'm not sure it's a good idea though.

1524153669
andrewrk
yeah because the already has a null case doesn't need an allocator

1524153736
MajorLag
maybe a `noAlloc` namespace for those calls?

1524153761
MajorLag
though that's not strictly true either, since read would alloc anyway.

1524154264
andrewrk
and then another question is do we also support if you called it with  UTF-16LE with a null byte, because then for windows we wouldn't need an allocator

1524154269
andrewrk
it starts to get messy

1524154572
andrewrk
I think this is related to braedon's pull request

1524155121
MajorLag
Technically speaking it isn't even UTF-16LE in Windows. I think it is better to present a consistent interface everywhere outside of the os namespaces themselves. If that means everything is in null-terminated UTF8 then so be it, and if you're concerned about allocations on windows or a unix system that uses utf32 or something, you should bypass std.

1524156474
alexnask
Imho there should be access to the "raw" C functions (in the os namespace), os specific bindings on top of that (e.g. wrapping up stuff in enums, returning error sets etc.) then the rest of the standard library uses what is most convenient and takes care of marshalling data to and from the os as needed.

1524157144
abique|home
Yo

1524157245
abique|home
How far is the 0.3 development ?

1524161163
MajorLag
I had completely forgotten that zig supports scientfic notation for literals. unfortunately it turns them into float literals.

1524161187
alexnask
Can't you just comptime cast them to integers?

1524161271
MajorLag
sure, but then I have to cast them any time I use them for a different type.

1524161312
MajorLag
I don't believe I can cast to integer literal, but I've never tried...

1524161422
MajorLag
doesn't look like it, compiler assert for trying.

1524161592
GitHub127
[zig] Hejsil opened pull request #934: Added @field builtin function (master...adding-builtin-field)

1524161602
Hejsil
Here comes reflection boys!

1524161616
Hejsil
Or, well

1524161625
Hejsil
Idk if we can call @field refection

1524161630
Hejsil
But it's powerfull

1524161735
MajorLag
is it functionally identical to @ptrToInt(M, @intToPtr(t) + @memberOffset(T, m))?

1524161766
Hejsil
What if you want Enum.A?

1524161771
Hejsil
That's what @field solves

1524161776
MajorLag
true

1524161801
MajorLag
wait, does it also work on empty structs?

1524161807
MajorLag
because I can use that

1524161830
Hejsil
Yes, you can get fields from "namespaces"

1524161875
Hejsil


1524161907
Hejsil
It does the same as '.'

1524161910
MajorLag
Now all we need is a way to check for the existence of a name in a namespace and it'll be trivial to have fmt use custom formatters for types.

1524161940
Hejsil
Wouldn't you just call a .format on the type?

1524161962
Hejsil
And if it doesn't exists, the the compiler will throw the error for you

1524162040
MajorLag
yeah, but maybe I don't care and just want the default behavior of '<Type>@<ptr>'

1524162050
Hejsil
Aah

1524162081
Hejsil
Could you use @memberCount, @memberName?

1524162090
Hejsil
And look up the name?

1524162092
MajorLag
only work on actual members

1524162106
Hejsil
Ooooh

1524162109
Hejsil
Hmmm

1524162136
alexnask
Awesome

1524162138
MajorLag
We could just take a format option for it, which I did as an example: `warn("{@}\n", myTypeInstance);`

1524162148
alexnask
We just need @reflect and @reify now :p

1524162210
MajorLag
Those will be game changers I think. A lot of builtins would be redundant and a lot of code could potentially be simplified... or you know, intentionally complicated.

1524162262
alexnask
Yeah the ability to generate types with imperative code is crazy

1524162281
MajorLag
I'm excited for them but also a bit worried by what kind of C++ templating nightmares and random DSLs might come out of it.

1524162282
alexnask
I think you can only do something similar in D and possible Nim

1524162314
alexnask
I think it will be a lot cleaner than C++ templates in a lot of cases

1524162350
alexnask
And at the end of the day the proposal is just about types, so I don't think it's too much magic for users to handle

1524162354
Hejsil
You can already write some weird code with comptime and inline loops

1524162364
Hejsil
Soo, I don't think it's a problem

1524162367
alexnask
Generating functions in global scope etc. would be a whole other issue

1524162370
Hejsil
People will make hacks

1524162374
Hejsil
That's how it is

1524162998
andrewrk
Hejsil, ooh, exciting PR

1524163039
Hejsil
Idk if my solution is the best

1524163065
Hejsil
I requires little code, but it changes the analyzation of field access

1524163127
andrewrk
I think it's good. I'm still reading, but I think the only change I want to make is to have the "hot path" where it's a normal field access still use the Buf * instead of going through IrInstruction *

1524163138
andrewrk
only for performance reasons

1524163178
andrewrk
but overall this is a simpler change than one would have thought, right? :)

1524163199
Hejsil
So, something like a union with id, where the field name can either be and instruction or buf

1524163211
Hejsil
Ye, it was pretty simple

1524163222
Hejsil
Though I was staring at a nullptr deref for a while

1524163225
alexnask
Right, just looked at the PR, surprising how little code it takes

1524163228
andrewrk
I think just having both fields. and then ir_analyze_instruction_field_ptr looks for the buf first followed by the instruction

1524163236
andrewrk
we have this pattern in a couple other places

1524163246
Hejsil
Right

1524163251
Hejsil
I'll do that

1524163268
andrewrk
I don't know how you couldn't have found the pattern, in a 19,000 line file, lol

1524163291
Hejsil
I didn't read the whole thing mad

1524163297
Hejsil
Read what was required to solve the problem

1524163301
Hejsil
man*

1524163314
andrewrk
to be clear, I'm making a self deprecating humor joke

1524163319
andrewrk
this PR looks very good

1524163357
Hejsil
I'll do the optimization, and the merge then

1524163404
alexnask
Btw, does this work for structs? For example, to get a method from a struct

1524163426
Hejsil
Yes. It does the same as 'a.b'

1524163435
alexnask
Nice

1524163436
Hejsil
For any type

1524163650
Hejsil
I should also add doc!

1524163653
Hejsil
I forgot!

1524163983
Hejsil
Arg! There was a bug!

1524163992
Hejsil
This doesn't work @field(f, "o" ++ "ne") = 4;

1524164200
alexnask
Do defer blocks run before or after the return statement?

1524164237
alexnask
I'm trying to lift up an error from a call in a defer block to the parent function's return

1524164238
Hejsil
I think it runs after the expression in the return statement is evaluated

1524164321
alexnask
Right, makes sense, I tried declaring a variable in the function's scope and binding it in the defer then return it at the end of the function

1524164326
alexnask
But that wouldn't work either

1524164359
Hejsil
So: var x = 0; defer x = 7; return x; ?

1524164387
alexnask
Right, something like that

1524164400
Hejsil
Ye, I don't that probably wont work

1524164404
alexnask
Ofc my goal is to propagate the error if it happens if the defer

1524164419
alexnask
I don't necessarily need to use a variable

1524164437
alexnask
It's probably impossible right?

1524164449
Hejsil
Ye, you can't return from defer

1524164463
Hejsil
And I think that's a good choice

1524164473
Hejsil
I don't even know how returning from defer would work

1524164478
alexnask
Sure, makes sense if it's evaluated after the return

1524164515
alexnask
Right, I' probably only need a single return point in my function so I don't even need to defer

1524164547
andrewrk
alexnask, in the future when we have more sophisticated control flow analysis, Hejsil's example code would be a compile error on the x = 7 expression: `value written but never read"

1524164851
alexnask
A specific error message for writting to a stack variable in a defer statement could make sense too right? I don't think it is valid in any situation right?

1524164885
alexnask
That is, writting to variables in the current function's stack frame

1524164911
andrewrk
defers can be inside a block in a function though, and then it's fine

1524164921
andrewrk
better to solve the general case

1524164924
alexnask
Woops, forgot defer works on a scope level

1524164986
alexnask
Go has poisoned my mind :p

1524165025
andrewrk
defers in go can allocate memory

1524167569
Hejsil
Common tests, pass! I want to go play with my new toy!

1524167629
andrewrk
pro-tip: the CI will create a static linux build for you even for branches

1524167650
andrewrk


1524167714
Hejsil
I'll just confirm that everything works, merge, pull master locally and build

1524167735
Hejsil
Now that I have a zig project setup again

1524167769
Hejsil
But that is pretty neat

1524170510
alexnask
crinkler is amazing, the same binary that, compiled with zig/lld with --release-small is ~28kB is ~1.4kB linked with it

1524170546
alexnask
Didn't expect that much of a difference tbh :P

1524170552
andrewrk
wow

1524170587
alexnask
To be fair it's not simply a linker, it's a linker/packer combo

1524170594
alexnask
But still

1524170596
andrewrk
Hejsil, don't worry about both appveyor builds, just 1 of them passing is fine

1524170611
Hejsil
Merging!

1524170636
GitHub91
[zig] Hejsil pushed 1 new commit to master:

1524170636
GitHub177
[zig] Hejsil closed pull request #934: Added @field builtin function (master...adding-builtin-field)

1524170636
GitHub91
zig/master cc35f08 Jimmi Holst Christensen: Merge pull request #934 from zig-lang/adding-builtin-field...

1524170640
alexnask
Hurray! :D

1524170651
andrewrk
lots of people are going to be excited about this

1524170684
Hejsil
I'll apply @field on some randomizer code tomorrow

1524170685
andrewrk
alexnask, I'd be curious to know how that compares to zig --release-small + UPX

1524170704
andrewrk
I've seen UPX get some crazy good compression ratios

1524170706
alexnask
@andrewrk I'll give it a go

1524170893
alexnask
UPX gets it down to ~13kB, not bad

1524170912
alexnask
I'm not sure I'm using the same libc though, I should

1524171307
andrewrk
not as good as clinker

1524171320
andrewrk
there are more aggressive compression options for upx

1524171387
alexnask
I used the -9 switch

1524171402
alexnask
I'm sure it can be tweaked though

1524171409
alexnask
I suspect it's better for bigger binaries

1524171419
alexnask
crinkler is pretty much made for 4kB intros

1524171421
andrewrk
that would make sense

1524171427
andrewrk
whereas clinker is specifically designed with 4k demos in mind

1524174817
MajorLag
neat. move.zig has some comptime code that should be simplified a bit by @field.

1524175316
alexnask
@MajorLag I assume move.zig is a library for move semantics?

1524175346
andrewrk
I believe it is a tweening library, e.g. for animation

1524175360
alexnask
Aah ok :P

