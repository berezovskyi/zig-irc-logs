1519692210
andrewrk
defenestrator_, []u8

1519692254
andrewrk
string literals are [N]u8 where N is the length of the array. [N]u8 can implicitly cast to []const u8

1519692745
defenestrator_
So when I try, say "var string = "Hello world!"; var s: []u8 = undefined;" I have to say "s = string[0..];" instead of "s = string;", and I also can't assign a string literal directly to "s" either...is that correct?

1519692844
andrewrk
defenestrator_,

1519692872
andrewrk
what are you trying to do?

1519693144
defenestrator_
I guess my larger question is initializing string pointers to string literals, e.g. in a struct:

1519693145
defenestrator_


1519693204
defenestrator_
I get "error: expected type '[]u8', found '[12]u8'"

1519693497
andrewrk
defenestrator_, []u8 is a mutable pointer and a length. you can't mutate string literal data since it's stored in the constant section of the binary

1519693540
andrewrk
so your choices are: 1. make it string: []const u8 or 2. create a copy of the string literal on the heap and put that in the struct

1519693895
defenestrator_
Ok, thanks...so it looks like std.mem.dupe is the best way to do that if I need option 2?

1519695199
andrewrk
defenestrator_, yep, try that

1519695210
andrewrk
and then have a plan for freeing it, or use something like ArenaAllocator

1519696105
defenestrator_
Thanks!

1519748091
GitHub197
[zig] andrewrk pushed 1 new commit to master:

1519748091
GitHub197
zig/master 439621e Andrew Kelley: remove signal hanlding stuff from std.os.ChildProcess

1519750832
hoppetosse
andrewrk: what do you have in mind for packed enums?

1519750879
hoppetosse
What could the compiler do to non-packed enums?

1519750913
andrewrk
hoppetosse, I don't remember. packed enums might not make sense

1519750948
andrewrk
you can put a normal enum in a packed struct if you specify the enum tag type

1519751035
hoppetosse
We had a brief exchange about it in the enum array issue

1519751089
hoppetosse
We were talking about ordering and indexing of members, and I wasn't sure what the packed enum could be

1519755192
andrewrk
hoppetosse, yeah I've been following along

1519755205
andrewrk
I've been really focused on coroutines

1519755242
hoppetosse
andrewrk: I'm excited to see that!

1519755310
hoppetosse
There's also been discussion about the function return syntax, how do you think generators are going to interact with that?

1519755379
andrewrk
where's the function return syntax discussion?

1519755417
hoppetosse
As for the async/await/promise stuff, it's looking great. I'm surprised you managed to get the clean keyword in there without cluttering it too much

1519755438
hoppetosse


1519755445
hoppetosse
It's the return type discussion

1519755466
hoppetosse
no-one's mentioned generators in there yet, I'm just bringing it up now

1519755564
andrewrk
thanks

1519757550
hoppetosse
andrewrk: I love what you've done with that => hahaha

1519757579
hoppetosse
I'll be honest, I was gonna suggest something like this back when people complained that the language was too noisy/full of sybols

1519757597
hoppetosse
I'd love to rid my code of some parentheses

1519757610
andrewrk
hoppetosse, bottom line is we solve this same disambiguation in other places with (), so we either need to require () in return types, or whatever fixes the return type issue will also let us drop () on if, while, switch, for

1519757717
hoppetosse
That sounds like a pretty good position to be in.

1519761791
hoppetosse
andrewrk: I've added some ideas for container initialization. I'm off to dinner in a bit, but I'll elaborate further

1519762082
andrewrk
thanks!

1519762601
hoppetosse
updated with a few more notes

1519769198
hoppetosse
andrewrk: the "fn foo() error { }" ambiguity is there because of the declaration syntax, correct?

1519769227
andrewrk
correct

1519769258
hoppetosse
in the "fn foo() A { }" example, there shouldn't be any ambiguity since you wouldn't expect an initialization there, so as long as A isn't error, it 's fine

1519769295
andrewrk
you could expect an initialization there

1519769306
andrewrk
fn foo() error{} {}

1519769311
andrewrk
error{} is an empty error set

1519769323
hoppetosse
ok, but not fn foo() UserStruct { }

1519769360
hoppetosse
I've been refining my thoughts, and I think I have something workable

1519769386
hoppetosse
I'll post it up now so I can be clearer

1519769428
andrewrk
ok

1519769585
hoppetosse
Declaration syntax changes to use parentheses instead of curly brackets, and square brackets instead of parentheses. Initialization requires new (T) { .fields = t }

1519769706
hoppetosse
What I was trying to ask is, if there is no ambiguity caused by status quo initialization it can stay the same.

1519769768
hoppetosse
because if error {} is the only valid initialization, we can make it like a declaration instead and remove the ambiguity

1519769785
hoppetosse
ie: error sets are declared/initialized with parentheses

1519769804
hoppetosse
fn foo() error(NoMem)!void {}

1519769862
hoppetosse
Just like an enum's declaration is pretty much it's initialization, an error declaration is also its initialization

1519769895
hoppetosse
I'm sorry for how fragmented that came out.

1519770198
hoppetosse
updated with function declarations

1519771411
GitHub50
[zig] bnoordhuis opened pull request #796: allow implicit cast from &const to ?&const &const (master...fix731-more)

1519771710
andrewrk
hoppetosse, a(b) is an explicit cast to type 'a'

1519771758
andrewrk
said another way, a(b) is a function call, and if a is a type then it's an explicit cast

1519771764
andrewrk
error(foo) already has meaning

1519771968
MajorLag
Man, I'm getting real sick of "error: link failed". This is supposed to be fixed with the latest LLVM right?

1519772962
andrewrk
MajorLag, yeah, which is to be released something like tomorrow

1519772973
andrewrk
I'll merge llvm6 branch into master the same day

1519773006
andrewrk
have you been using the appveyor artifacts?

