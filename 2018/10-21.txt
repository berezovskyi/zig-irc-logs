1540128618
very-mediocre
MajorLag, happy to see your proposal #1669

1540128632
very-mediocre
it's really cool

1540128664
very-mediocre
I hope this makes it through, it sure beats writing comptime checks in the function body

1540128834
very-mediocre
crazy idea: maybe the .{} syntax can be kept for assigning, e.g. const Point = struct {...}; const my_point = Point.{ no dot for each field being assigned };

1540128908
very-mediocre
This is probably very subjective though, but I always forget the . when doing assignments

1540128936
very-mediocre
maybe there should be no . at all?

1540128961
very-mediocre
const my_point = Point { x = 1, y = 2 };

1540129481
pancake


1540129512
pancake
do Zig have something like this? imho it will be useful to avoid the use of gotos, but it will be cleaner and simpler if we just allow breakall; and breakone; instead of specifying the number of scopes to break from

1540129976
very-mediocre
You can break any named block, and blocks can be arbitrary

1540130046
very-mediocre
Looks like: blk: { break :blk block_result_value }

1540130186
very-mediocre
so you'd just wrap the outer for loop in a named block

1540130800
pancake
so named blocks are like labels, but associted to a frame?

1540130946
very-mediocre
I think it's like in C, meaning they are not a frame

1540130963
very-mediocre
but behaves similarly

1540130995
very-mediocre
they're not like labels in languages that have `goto`, they're really just blocks that can evaluate to something

1540131031
very-mediocre


1540131082
very-mediocre
check out the test code

1540131180
pancake
interesting, thanks

1540133474
ducdetronquito
Hello everyone !

1540133494
ducdetronquito
I am wondering if there is a documentation on what does the std lib contains

1540133506
ducdetronquito
For example, I just discovered that there is a JSON parser

1540133523
ducdetronquito
But the documentation does not mentioned it

1540133714
rom1504


1540133753
rom1504
even

1540134134
ducdetronquito
Thanks rom1504 :) !

