1541808217
presiden
ah, solved

1541809262
andrewrk
presiden, did the above code work?

1541809360
diltsman
andrewrk, I added the export to the variable holding the vector table.  That did require the type of the vector table to conform to the C ABI.

1541809652
andrewrk
presiden, ah I see the problem. I'm going to push a commit that makes your code work verbatim.

1541809701
andrewrk
diltsman, here's the code I tried:

1541809818
diltsman
andrewrk, that is working now.  Not certain what I was doing differently before that the u32 didn't work there.

1541809934
presiden
andrewrk: I'm doing something along: comptime var n = 0; comptime { n = foo(10) }; var arr: [n]bool = undefined;

1541809977
andrewrk
presiden, pushed:

1541809983
andrewrk
look at the new test case at the bottom

1541810081
presiden
andrewrk: nice :)

1541810131
diltsman
Looks like the last unexpected thing is that while(true){} generates a pair of consecutive unconditional branches that both branch to the second branch instruction.

1541810236
jjido
Is it worth optimising empty brackets ?

1541810977
andrewrk
diltsman, are you referring to debug mode assembly?

1541811098
diltsman
Whatever the default output is when mode = b.standardReleaseOptions()

1541811891
andrewrk
diltsman, I would make a case that the unnecessary branch instruction is harmless - debug mode favors fast compilation, not optimal machine code

1541811895
andrewrk
the default mode is debug

1541811912
andrewrk
does the unnecessary branch go away with -Drelease-fast ?

1541811946
andrewrk
that said, at some point I will take a look and see if there's some simple fix to emit better debug mode code. I'm doing quite a bit of that in the copy-elision-2 branch

1541812361
diltsman
andrewrk, I didn't realize that it was debug mode.  Given what I understand about how loops tend to be transformed (naively) to assembly, the double branch wasn't too much of a surprise.  However, I expected a few other inefficienies in debug mode, that is what threw me off.

1541812372
diltsman
-Drelease-fast eliminates the double branch.

1541813159
andrewrk
diltsman, I suspect you may be interested in the work I've been doing in the copy-elision-2 branch. Here's an example:

1541813184
andrewrk
it's showing the LLVM IR, not assembly, but you can see on the right there are fewer alloca and memcpy instructions

1541813203
andrewrk
I'm hoping to get this merged within the next couple weeks

1541813402
andrewrk
this will significantly improve debug builds

1541817403
diltsman
andrewrk, I saw that (maybe a different image) on Twitter.  Definitely has promise.  Copy elision was a major improvement for C++11.

1541818038
presiden
andrewrk: related to previous discussion. should something along this be allowed too: var arr = []bool{false} ** foo(10);

1541818536
andrewrk
ah, presiden, I just opened an issue for that. It should be easy to solve:

1541824511
diltsman
Took some stupid manipulation of file locations, but I finally got the Zig program on the Arduino Due and paused the debugger.  Appears that the debug locations line up as expected.

1541831587
hryx
Can the weekly Twitch stream be advertised on ziglang.org and the GitHub wiki?

1541831615
hryx
I'm surprised I only found out about it yesterday while reviewing some chat logs

1541839925
dec05eba_
I noticed that if you have a public struct in a file and then a non-public function in the struct scope you can call the non-public function from another file that uses @import. Is this expected behavior?

1541867065
andrewrk
hryx, good idea.

